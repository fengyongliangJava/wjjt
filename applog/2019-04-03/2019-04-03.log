2019-04-03 08:26:13 -Starting BootdoApplication on ZJZL-20180906VX with PID 11548 (D:\eclipse2018-work\bootdo\target\classes started by Administrator in D:\eclipse2018-work\bootdo)
2019-04-03 08:26:13 -Running with Spring Boot v2.0.3.RELEASE, Spring v5.0.7.RELEASE
2019-04-03 08:26:13 -The following profiles are active: dev
2019-04-03 08:26:13 -Refreshing org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@7e928e2f: startup date [Wed Apr 03 08:26:13 CST 2019]; root of context hierarchy
2019-04-03 08:26:21 -Multiple Spring Data modules found, entering strict repository configuration mode!
2019-04-03 08:26:24 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$911caa18] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-03 08:26:25 -Bean 'shiroConfig' of type [com.bootdo.system.config.ShiroConfig$$EnhancerBySpringCGLIB$$8375d8bf] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-03 08:26:25 -Bean 'userRealm' of type [com.bootdo.system.shiro.UserRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-03 08:26:26 -Bean 'cacheManager2' of type [net.sf.ehcache.CacheManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-03 08:26:26 -Bean 'ehCacheManager' of type [org.apache.shiro.cache.ehcache.EhCacheManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-03 08:26:26 -Cache with name 'com.bootdo.system.shiro.UserRealm.authorizationCache' does not yet exist.  Creating now.
2019-04-03 08:26:26 -Added EhCache named [com.bootdo.system.shiro.UserRealm.authorizationCache]
2019-04-03 08:26:26 -Bean 'sessionDAO' of type [org.apache.shiro.session.mgt.eis.MemorySessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-03 08:26:26 -Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-03 08:26:26 -Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-03 08:26:26 -Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-03 08:26:28 -Tomcat initialized with port(s): 8081 (http)
2019-04-03 08:26:28 -Initializing ProtocolHandler ["http-nio-8081"]
2019-04-03 08:26:28 -Starting service [Tomcat]
2019-04-03 08:26:28 -Starting Servlet Engine: Apache Tomcat/8.5.31
2019-04-03 08:26:28 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [C:\Program Files\Java\jre1.8.0_131\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:/Program Files/Java/jre1.8.0_131/bin/server;C:/Program Files/Java/jre1.8.0_131/bin;C:/Program Files/Java/jre1.8.0_131/lib/amd64;C:\ProgramData\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Windows\System32\OpenSSH\;D:\pbb\pycSafefile\x64;D:\pbb\PBB Reader\x64;C:\Program Files\MySQL\MySQL Utilities 1.6\;D:\MAVEN\apache-maven-3.6.0\bin;D:\GIT\Git\cmd;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;;C:\Users\Administrator\Desktop;;.]
2019-04-03 08:26:28 -Initializing Spring embedded WebApplicationContext
2019-04-03 08:26:28 -Root WebApplicationContext: initialization completed in 15234 ms
2019-04-03 08:26:30 -Mapping filter: 'characterEncodingFilter' to: [/*]
2019-04-03 08:26:30 -Mapping filter: 'hiddenHttpMethodFilter' to: [/*]
2019-04-03 08:26:30 -Mapping filter: 'httpPutFormContentFilter' to: [/*]
2019-04-03 08:26:30 -Mapping filter: 'requestContextFilter' to: [/*]
2019-04-03 08:26:30 -Filter xssFilter was not registered (disabled)
2019-04-03 08:26:30 -Mapping filter: 'webStatFilter' to urls: [/*]
2019-04-03 08:26:30 -Mapping filter: 'shiroFilterFactoryBean' to: [/*]
2019-04-03 08:26:30 -Servlet statViewServlet mapped to [/druid/*]
2019-04-03 08:26:30 -Servlet dispatcherServlet mapped to [/]
2019-04-03 08:26:33 -ApplicationContext registed-->org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@7e928e2f: startup date [Wed Apr 03 08:26:13 CST 2019]; root of context hierarchy
2019-04-03 08:26:34 -Using default implementation for ThreadExecutor
2019-04-03 08:26:34 -Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2019-04-03 08:26:34 -Quartz Scheduler v.2.2.1 created.
2019-04-03 08:26:34 -RAMJobStore initialized.
2019-04-03 08:26:34 -Scheduler meta-data: Quartz Scheduler (v2.2.1) 'schedulerFactoryBean' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2019-04-03 08:26:34 -Quartz scheduler 'schedulerFactoryBean' initialized from an externally provided properties instance.
2019-04-03 08:26:34 -Quartz scheduler version: 2.2.1
2019-04-03 08:26:34 -JobFactory set to: com.bootdo.common.quartz.factory.JobFactory@40cb95c1
2019-04-03 08:26:35 -Initializing ExecutorService  'clientInboundChannelExecutor'
2019-04-03 08:26:35 -Initializing ExecutorService  'clientOutboundChannelExecutor'
2019-04-03 08:26:38 -Mapped "{[/charts/countDD],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.countDDController.countDD()
2019-04-03 08:26:38 -Mapped "{[/charts/countDD/getCountDD],methods=[POST]}" onto public com.bootdo.charts.vo.CountDayVo com.bootdo.charts.controller.countDDController.getCountD(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo,javax.servlet.http.HttpServletRequest)
2019-04-03 08:26:38 -Mapped "{[/charts/countDD/exportCountDD],methods=[GET]}" onto public void com.bootdo.charts.controller.countDDController.exprotElecLog(com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-03 08:26:38 -Mapped "{[/charts/countDD/tableDD],methods=[POST]}" onto public java.lang.String com.bootdo.charts.controller.countDDController.tableDD()
2019-04-03 08:26:38 -Mapped "{[/charts/countMM/exportCountMM],methods=[GET]}" onto public void com.bootdo.charts.controller.countMMController.exprotElecLog(com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-03 08:26:38 -Mapped "{[/charts/countMM],methods=[GET]}" onto java.lang.String com.bootdo.charts.controller.countMMController.countMM()
2019-04-03 08:26:38 -Mapped "{[/charts/countMM/getCountMM],methods=[POST]}" onto public void com.bootdo.charts.controller.countMMController.getCountMM(org.springframework.ui.Model,com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo,javax.servlet.http.HttpServletRequest)
2019-04-03 08:26:38 -Mapped "{[/charts/countOwe/getCountOwe],methods=[POST]}" onto public com.bootdo.charts.vo.CountOweVo com.bootdo.charts.controller.countOweController.getCountD(com.bootdo.elec.vo.ElecVo,com.bootdo.water.vo.WaterVo,com.bootdo.heat.vo.HeatVo,javax.servlet.http.HttpServletRequest)
2019-04-03 08:26:38 -Mapped "{[/charts/countOwe],methods=[GET]}" onto java.lang.String com.bootdo.charts.controller.countOweController.countOwe()
2019-04-03 08:26:38 -Mapped "{[/charts/countRun/getCountRun],methods=[POST]}" onto public int com.bootdo.charts.controller.countRunController.getCountD(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo)
2019-04-03 08:26:38 -Mapped "{[/charts/countRun/exportCountRun],methods=[GET]}" onto public void com.bootdo.charts.controller.countRunController.exprotElecLog(com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-03 08:26:38 -Mapped "{[/charts/countRun],methods=[GET]}" onto java.lang.String com.bootdo.charts.controller.countRunController.countRun()
2019-04-03 08:26:38 -Mapped "{[/charts/countYY],methods=[GET]}" onto java.lang.String com.bootdo.charts.controller.countYYController.countYY()
2019-04-03 08:26:38 -Mapped "{[/charts/countYY/getCountYY],methods=[POST]}" onto public int com.bootdo.charts.controller.countYYController.getCountD(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo)
2019-04-03 08:26:38 -Mapped "{[/charts/countYY/exportCountYY],methods=[GET]}" onto public void com.bootdo.charts.controller.countYYController.exprotElecLog(com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-03 08:26:38 -Mapped "{[/common/dict/add],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.add()
2019-04-03 08:26:38 -Mapped "{[/common/dict/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.remove(java.lang.Long)
2019-04-03 08:26:38 -Mapped "{[/common/dict/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.remove(java.lang.Long[])
2019-04-03 08:26:38 -Mapped "{[/common/dict/update]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.update(com.bootdo.common.domain.DictDO)
2019-04-03 08:26:38 -Mapped "{[/common/dict/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.common.controller.DictController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 08:26:38 -Mapped "{[/common/dict/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.save(com.bootdo.common.domain.DictDO)
2019-04-03 08:26:38 -Mapped "{[/common/dict/type],methods=[GET]}" onto public java.util.List<com.bootdo.common.domain.DictDO> com.bootdo.common.controller.DictController.listType()
2019-04-03 08:26:38 -Mapped "{[/common/dict],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.dict()
2019-04-03 08:26:38 -Mapped "{[/common/dict/add/{type}/{description}],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.addD(org.springframework.ui.Model,java.lang.String,java.lang.String)
2019-04-03 08:26:38 -Mapped "{[/common/dict/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 08:26:38 -Mapped "{[/common/dict/list/{type}],methods=[GET]}" onto public java.util.List<com.bootdo.common.domain.DictDO> com.bootdo.common.controller.DictController.listByType(java.lang.String)
2019-04-03 08:26:38 -Mapped "{[/common/sysFile/add],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.FileController.add()
2019-04-03 08:26:38 -Mapped "{[/common/sysFile/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.remove(java.lang.Long,javax.servlet.http.HttpServletRequest)
2019-04-03 08:26:38 -Mapped "{[/common/sysFile/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.remove(java.lang.Long[])
2019-04-03 08:26:38 -Mapped "{[/common/sysFile/update]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.update(com.bootdo.common.domain.FileDO)
2019-04-03 08:26:38 -Mapped "{[/common/sysFile/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.common.controller.FileController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 08:26:38 -Mapped "{[/common/sysFile/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.save(com.bootdo.common.domain.FileDO)
2019-04-03 08:26:38 -Mapped "{[/common/sysFile/info/{id}]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.info(java.lang.Long)
2019-04-03 08:26:38 -Mapped "{[/common/sysFile/upload],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.FileController.upload(org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpServletRequest)
2019-04-03 08:26:38 -Mapped "{[/common/sysFile/edit],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.FileController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 08:26:38 -Mapped "{[/common/sysFile],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.FileController.sysFile(org.springframework.ui.Model)
2019-04-03 08:26:38 -Mapped "{[/common/generator/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.GeneratorController.update(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 08:26:38 -Mapped "{[/common/generator/list],methods=[GET]}" onto java.util.List<java.util.Map<java.lang.String, java.lang.Object>> com.bootdo.common.controller.GeneratorController.list()
2019-04-03 08:26:38 -Mapped "{[/common/generator/code/{tableName}]}" onto public void com.bootdo.common.controller.GeneratorController.code(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String) throws java.io.IOException
2019-04-03 08:26:38 -Mapped "{[/common/generator/batchCode]}" onto public void com.bootdo.common.controller.GeneratorController.batchCode(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String) throws java.io.IOException
2019-04-03 08:26:38 -Mapped "{[/common/generator/edit],methods=[GET]}" onto public java.lang.String com.bootdo.common.controller.GeneratorController.edit(org.springframework.ui.Model)
2019-04-03 08:26:38 -Mapped "{[/common/generator],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.GeneratorController.generator()
2019-04-03 08:26:38 -Mapped "{[/common/job/add],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.JobController.add()
2019-04-03 08:26:38 -Mapped "{[/common/job/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.remove(java.lang.Long)
2019-04-03 08:26:38 -Mapped "{[/common/job/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.remove(java.lang.Long[])
2019-04-03 08:26:38 -Mapped "{[/common/job/update],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.update(com.bootdo.common.domain.TaskDO)
2019-04-03 08:26:38 -Mapped "{[/common/job/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.common.controller.JobController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 08:26:38 -Mapped "{[/common/job/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.save(com.bootdo.common.domain.TaskDO)
2019-04-03 08:26:38 -Mapped "{[/common/job/info/{id}]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.info(java.lang.Long)
2019-04-03 08:26:38 -Mapped "{[/common/job],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.JobController.taskScheduleJob()
2019-04-03 08:26:38 -Mapped "{[/common/job/changeJobStatus],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.changeJobStatus(java.lang.Long,java.lang.String)
2019-04-03 08:26:38 -Mapped "{[/common/job/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.JobController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 08:26:38 -Mapped "{[/common/log/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.LogController.remove(java.lang.Long)
2019-04-03 08:26:38 -Mapped "{[/common/log],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.LogController.log()
2019-04-03 08:26:38 -Mapped "{[/common/log/list],methods=[GET]}" onto com.bootdo.common.domain.PageDO<com.bootdo.common.domain.LogDO> com.bootdo.common.controller.LogController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 08:26:38 -Mapped "{[/common/log/batchRemove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.LogController.batchRemove(java.lang.Long[])
2019-04-03 08:26:38 -Mapped "{[/common/long],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.LongController.Long()
2019-04-03 08:26:38 -Mapped "{[/common/time],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.TimeController.Time()
2019-04-03 08:26:38 -Mapped "{[/error],produces=[text/html]}" onto public org.springframework.web.servlet.ModelAndView com.bootdo.common.exception.MainsiteErrorController.errorHtml(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-04-03 08:26:38 -Mapped "{[/error]}" onto public com.bootdo.common.utils.R com.bootdo.common.exception.MainsiteErrorController.handleError(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-04-03 08:26:38 -Mapped "{[/elec/elec/add],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecController.add()
2019-04-03 08:26:38 -Mapped "{[/elec/elec/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.remove(java.lang.Long)
2019-04-03 08:26:38 -Mapped "{[/elec/elec/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.remove(java.lang.Long[])
2019-04-03 08:26:38 -Mapped "{[/elec/elec/update],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.update(com.bootdo.elec.domain.ElecDO)
2019-04-03 08:26:38 -Mapped "{[/elec/elec/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.elec.controller.ElecController.list(java.util.Map<java.lang.String, java.lang.Object>,com.bootdo.elec.domain.ElecDO)
2019-04-03 08:26:38 -Mapped "{[/elec/elec/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.save(com.bootdo.elec.domain.ElecDO)
2019-04-03 08:26:38 -Mapped "{[/elec/elec/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 08:26:38 -Mapped "{[/elec/elec/exprotElec],methods=[GET]}" onto public void com.bootdo.elec.controller.ElecController.exprotExcel(com.bootdo.elec.vo.ElecVo,javax.servlet.http.HttpServletResponse)
2019-04-03 08:26:38 -Mapped "{[/elec/elec],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecController.Elec()
2019-04-03 08:26:38 -Mapped "{[/elec/elecInto/exprotElecIntoExcel],methods=[GET]}" onto public void com.bootdo.elec.controller.ElecIntoController.exprotExcel(com.bootdo.elec.vo.ElecVo,javax.servlet.http.HttpServletResponse)
2019-04-03 08:26:38 -Mapped "{[/elec/elecInto],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecIntoController.ElecInto()
2019-04-03 08:26:38 -Mapped "{[/elec/elecInto/importElecIntoExcel],methods=[POST]}" onto public java.util.Map<java.lang.String, java.lang.Object> com.bootdo.elec.controller.ElecIntoController.importElecIntoExcel(org.springframework.web.multipart.MultipartFile,com.bootdo.elec.vo.ElecVo) throws java.lang.Exception
2019-04-03 08:26:38 -Mapped "{[/elec/elecPrice/add],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecPriceController.add()
2019-04-03 08:26:38 -Mapped "{[/elec/elecPrice/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecPriceController.remove(java.lang.Long)
2019-04-03 08:26:38 -Mapped "{[/elec/elecPrice/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecPriceController.remove(java.lang.Long[])
2019-04-03 08:26:38 -Mapped "{[/elec/elecPrice/update]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecPriceController.update(com.bootdo.elec.domain.ElecPriceDO)
2019-04-03 08:26:38 -Mapped "{[/elec/elecPrice/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.elec.controller.ElecPriceController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 08:26:38 -Mapped "{[/elec/elecPrice/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecPriceController.save(com.bootdo.elec.domain.ElecPriceDO,com.bootdo.elec.domain.ElecDO)
2019-04-03 08:26:38 -Mapped "{[/elec/elecPrice/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecPriceController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 08:26:38 -Mapped "{[/elec/elecPrice],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecPriceController.ElecPrice()
2019-04-03 08:26:38 -Mapped "{[/elec/elecUpLoad],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecUpLoadController.Elec()
2019-04-03 08:26:38 -Mapped "{[/elec/elecUpLoad/importElecExcel],methods=[POST]}" onto public java.util.Map<java.lang.String, java.lang.Object> com.bootdo.elec.controller.ElecUpLoadController.importElecExcel(org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpServletRequest) throws java.lang.Exception
2019-04-03 08:26:38 -Mapped "{[/heat/heat/add],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatController.add()
2019-04-03 08:26:38 -Mapped "{[/heat/heat/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatController.remove(java.lang.Integer)
2019-04-03 08:26:38 -Mapped "{[/heat/heat/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatController.remove(java.lang.Integer[])
2019-04-03 08:26:38 -Mapped "{[/heat/heat/update]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatController.update(com.bootdo.heat.domain.HeatDO)
2019-04-03 08:26:38 -Mapped "{[/heat/heat/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.heat.controller.HeatController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 08:26:38 -Mapped "{[/heat/heat/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatController.save(com.bootdo.heat.domain.HeatDO)
2019-04-03 08:26:38 -Mapped "{[/heat/heat/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatController.edit(java.lang.Integer,org.springframework.ui.Model)
2019-04-03 08:26:38 -Mapped "{[/heat/heat/exprotHeat],methods=[GET]}" onto public void com.bootdo.heat.controller.HeatController.exprotExcel(com.bootdo.heat.vo.HeatVo,javax.servlet.http.HttpServletResponse)
2019-04-03 08:26:38 -Mapped "{[/heat/heat],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatController.Heat()
2019-04-03 08:26:38 -Mapped "{[/heat/heatInto/exprotHeatIntoExcel],methods=[GET]}" onto public void com.bootdo.heat.controller.HeatIntoController.exprotExcel(com.bootdo.heat.vo.HeatVo,javax.servlet.http.HttpServletResponse)
2019-04-03 08:26:38 -Mapped "{[/heat/heatInto],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatIntoController.HeatInto()
2019-04-03 08:26:38 -Mapped "{[/heat/heatPrice/add],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatPriceController.add()
2019-04-03 08:26:38 -Mapped "{[/heat/heatPrice/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatPriceController.remove(java.lang.Long)
2019-04-03 08:26:38 -Mapped "{[/heat/heatPrice/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatPriceController.remove(java.lang.Long[])
2019-04-03 08:26:38 -Mapped "{[/heat/heatPrice/update]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatPriceController.update(com.bootdo.heat.domain.HeatPriceDO)
2019-04-03 08:26:38 -Mapped "{[/heat/heatPrice/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.heat.controller.HeatPriceController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 08:26:38 -Mapped "{[/heat/heatPrice/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatPriceController.save(com.bootdo.heat.domain.HeatPriceDO)
2019-04-03 08:26:38 -Mapped "{[/heat/heatPrice/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatPriceController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 08:26:38 -Mapped "{[/heat/heatPrice],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatPriceController.HeatPrice()
2019-04-03 08:26:38 -Mapped "{[/heat/heatUpLoad],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatUpLoadController.HeatUpLoad()
2019-04-03 08:26:38 -Mapped "{[/heat/heatUpLoad/createHeatExcel],methods=[POST]}" onto public java.lang.String com.bootdo.heat.controller.HeatUpLoadController.createHeatExcel(com.bootdo.heat.domain.HeatDO) throws java.lang.Exception
2019-04-03 08:26:38 -Mapped "{[/heat/heatUpLoad/exprotHeatExcel],methods=[GET]}" onto public void com.bootdo.heat.controller.HeatUpLoadController.exprotHeatExcel(com.bootdo.heat.vo.HeatVo,javax.servlet.http.HttpServletResponse)
2019-04-03 08:26:38 -Mapped "{[/heat/heatUpLoad/importHeatExcel]}" onto public java.lang.String com.bootdo.heat.controller.HeatUpLoadController.importHeatExcel(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)
2019-04-03 08:26:38 -Mapped "{[/moneyList/moneyList/updateMoney],methods=[POST]}" onto public java.util.List<com.bootdo.moneyList.damain.MoneyListDO> com.bootdo.moneyList.controller.MoneyListController.updateMoney(com.bootdo.moneyList.damain.MoneyListDO)
2019-04-03 08:26:38 -Mapped "{[/moneyList/moneyList/queryAllUserName],methods=[POST]}" onto public java.util.List<com.bootdo.moneyList.damain.MoneyListDO> com.bootdo.moneyList.controller.MoneyListController.getAllUserName(com.bootdo.moneyList.damain.MoneyListDO)
2019-04-03 08:26:38 -Mapped "{[/moneyList/moneyList/queryAllUser],methods=[POST]}" onto public java.util.List<com.bootdo.moneyList.damain.MoneyListDO> com.bootdo.moneyList.controller.MoneyListController.queryAllUser(com.bootdo.moneyList.damain.MoneyListDO)
2019-04-03 08:26:38 -Mapped "{[/moneyList/moneyList],methods=[GET]}" onto java.lang.String com.bootdo.moneyList.controller.MoneyListController.MoneyList()
2019-04-03 08:26:38 -Mapped "{[/moneyLog/elecLog/add],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.ElecLogController.add()
2019-04-03 08:26:38 -Mapped "{[/moneyLog/elecLog/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.ElecLogController.remove(java.lang.Long)
2019-04-03 08:26:38 -Mapped "{[/moneyLog/elecLog/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.ElecLogController.remove(java.lang.Long[])
2019-04-03 08:26:38 -Mapped "{[/moneyLog/elecLog/update]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.ElecLogController.update(com.bootdo.moneyLog.domain.ElecLogDO)
2019-04-03 08:26:38 -Mapped "{[/moneyLog/elecLog/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.moneyLog.controller.ElecLogController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 08:26:38 -Mapped "{[/moneyLog/elecLog/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.ElecLogController.save(com.bootdo.moneyLog.domain.ElecLogDO)
2019-04-03 08:26:38 -Mapped "{[/moneyLog/elecLog/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.ElecLogController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 08:26:38 -Mapped "{[/moneyLog/elecLog],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.ElecLogController.moneyLog()
2019-04-03 08:26:38 -Mapped "{[/moneyLog/elecLog/exprotElecLog],methods=[GET]}" onto public void com.bootdo.moneyLog.controller.ElecLogController.exprotElecLog(com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-03 08:26:38 -Mapped "{[/moneyLog/heatLog/add],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.HeatLogController.add()
2019-04-03 08:26:39 -Mapped "{[/moneyLog/heatLog/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.HeatLogController.remove(java.lang.Long)
2019-04-03 08:26:39 -Mapped "{[/moneyLog/heatLog/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.HeatLogController.remove(java.lang.Long[])
2019-04-03 08:26:39 -Mapped "{[/moneyLog/heatLog/update]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.HeatLogController.update(com.bootdo.moneyLog.domain.HeatLogDO)
2019-04-03 08:26:39 -Mapped "{[/moneyLog/heatLog/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.moneyLog.controller.HeatLogController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 08:26:39 -Mapped "{[/moneyLog/heatLog/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.HeatLogController.save(com.bootdo.moneyLog.domain.HeatLogDO)
2019-04-03 08:26:39 -Mapped "{[/moneyLog/heatLog/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.HeatLogController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 08:26:39 -Mapped "{[/moneyLog/heatLog],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.HeatLogController.HeatLog()
2019-04-03 08:26:39 -Mapped "{[/moneyLog/heatLog/exprotHeatLog],methods=[GET]}" onto public void com.bootdo.moneyLog.controller.HeatLogController.exprotHeatLog(com.bootdo.moneyLog.vo.HeatLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-03 08:26:39 -Mapped "{[/moneyLog/waterLog/add],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.WaterLogController.add()
2019-04-03 08:26:39 -Mapped "{[/moneyLog/waterLog/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.WaterLogController.remove(java.lang.Long)
2019-04-03 08:26:39 -Mapped "{[/moneyLog/waterLog/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.WaterLogController.remove(java.lang.Long[])
2019-04-03 08:26:39 -Mapped "{[/moneyLog/waterLog/update]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.WaterLogController.update(com.bootdo.moneyLog.domain.WaterLogDO)
2019-04-03 08:26:39 -Mapped "{[/moneyLog/waterLog/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.moneyLog.controller.WaterLogController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 08:26:39 -Mapped "{[/moneyLog/waterLog/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.WaterLogController.save(com.bootdo.moneyLog.domain.WaterLogDO)
2019-04-03 08:26:39 -Mapped "{[/moneyLog/waterLog/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.WaterLogController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 08:26:39 -Mapped "{[/moneyLog/waterLog],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.WaterLogController.WaterLog()
2019-04-03 08:26:39 -Mapped "{[/moneyLog/waterLog/exprotWaterLog],methods=[GET]}" onto public void com.bootdo.moneyLog.controller.WaterLogController.exprotWaterLog(com.bootdo.moneyLog.vo.WaterLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-03 08:26:39 -Mapped "{[/oa/notify/add],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.add()
2019-04-03 08:26:39 -Mapped "{[/oa/notify/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.remove(java.lang.Long)
2019-04-03 08:26:39 -Mapped "{[/oa/notify/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.remove(java.lang.Long[])
2019-04-03 08:26:39 -Mapped "{[/oa/notify/update]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.update(com.bootdo.oa.domain.NotifyDO)
2019-04-03 08:26:39 -Mapped "{[/oa/notify/read/{id}],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.read(java.lang.Long,org.springframework.ui.Model)
2019-04-03 08:26:39 -Mapped "{[/oa/notify/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.oa.controller.NotifyController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 08:26:39 -Mapped "{[/oa/notify/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.save(com.bootdo.oa.domain.NotifyDO)
2019-04-03 08:26:39 -Mapped "{[/oa/notify/message],methods=[GET]}" onto com.bootdo.common.utils.PageUtils com.bootdo.oa.controller.NotifyController.message()
2019-04-03 08:26:39 -Mapped "{[/oa/notify/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 08:26:39 -Mapped "{[/oa/notify],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.oaNotify()
2019-04-03 08:26:39 -Mapped "{[/oa/notify/selfList],methods=[GET]}" onto com.bootdo.common.utils.PageUtils com.bootdo.oa.controller.NotifyController.selfList(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 08:26:39 -Mapped "{[/oa/notify/selfNotify],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.selefNotify()
2019-04-03 08:26:39 -Mapped "{[/print/print/add],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.add()
2019-04-03 08:26:39 -Mapped "{[/print/print/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.print.controller.PrintController.remove(java.lang.Long)
2019-04-03 08:26:39 -Mapped "{[/print/print/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.print.controller.PrintController.remove(java.lang.Long[])
2019-04-03 08:26:39 -Mapped "{[/print/print/update]}" onto public com.bootdo.common.utils.R com.bootdo.print.controller.PrintController.update(com.bootdo.print.domain.PrintDO)
2019-04-03 08:26:39 -Mapped "{[/print/print/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.print.controller.PrintController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 08:26:39 -Mapped "{[/print/print/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.print.controller.PrintController.save(java.lang.String,com.bootdo.print.domain.PrintDO)
2019-04-03 08:26:39 -Mapped "{[/print/print/printEdit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.printEdit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 08:26:39 -Mapped "{[/print/print/exprotPrint],methods=[GET]}" onto public void com.bootdo.print.controller.PrintController.exprotPrint(com.bootdo.print.vo.PrintVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-03 08:26:39 -Mapped "{[/print/print],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.Print()
2019-04-03 08:26:39 -Mapped "{[/print/print/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 08:26:39 -Mapped "{[/system/sysDept/add/{pId}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.add(java.lang.Long,org.springframework.ui.Model)
2019-04-03 08:26:39 -Mapped "{[/system/sysDept/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.remove(java.lang.Long)
2019-04-03 08:26:39 -Mapped "{[/system/sysDept/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.remove(java.lang.Long[])
2019-04-03 08:26:39 -Mapped "{[/system/sysDept/update]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.update(com.bootdo.system.domain.DeptDO)
2019-04-03 08:26:39 -Mapped "{[/system/sysDept/list],methods=[GET]}" onto public java.util.List<com.bootdo.system.domain.DeptDO> com.bootdo.system.controller.DeptController.list()
2019-04-03 08:26:39 -Mapped "{[/system/sysDept/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.save(com.bootdo.system.domain.DeptDO)
2019-04-03 08:26:39 -Mapped "{[/system/sysDept/tree],methods=[GET]}" onto public com.bootdo.common.domain.Tree<com.bootdo.system.domain.DeptDO> com.bootdo.system.controller.DeptController.tree()
2019-04-03 08:26:39 -Mapped "{[/system/sysDept],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.dept()
2019-04-03 08:26:39 -Mapped "{[/system/sysDept/treeView],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.treeView()
2019-04-03 08:26:39 -Mapped "{[/system/sysDept/edit/{deptId}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 08:26:39 -Mapped "{[/index],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.index(org.springframework.ui.Model)
2019-04-03 08:26:39 -Mapped "{[/main],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.main()
2019-04-03 08:26:39 -Mapped "{[/ || ],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.welcome(org.springframework.ui.Model)
2019-04-03 08:26:39 -Mapped "{[/logout],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.logout()
2019-04-03 08:26:39 -Mapped "{[/getVerify],methods=[GET]}" onto public void com.bootdo.system.controller.LoginController.getVerify(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-04-03 08:26:39 -Mapped "{[/login],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.LoginController.ajaxLogin(java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest)
2019-04-03 08:26:39 -Mapped "{[/login],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.login(org.springframework.ui.Model)
2019-04-03 08:26:39 -Mapped "{[/sys/menu/add/{pId}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.MenuController.add(org.springframework.ui.Model,java.lang.Long)
2019-04-03 08:26:39 -Mapped "{[/sys/menu/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.MenuController.remove(java.lang.Long)
2019-04-03 08:26:39 -Mapped "{[/sys/menu/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.MenuController.update(com.bootdo.system.domain.MenuDO)
2019-04-03 08:26:39 -Mapped "{[/sys/menu/list]}" onto java.util.List<com.bootdo.system.domain.MenuDO> com.bootdo.system.controller.MenuController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 08:26:39 -Mapped "{[/sys/menu/save],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.MenuController.save(com.bootdo.system.domain.MenuDO)
2019-04-03 08:26:39 -Mapped "{[/sys/menu/tree/{roleId}],methods=[GET]}" onto com.bootdo.common.domain.Tree<com.bootdo.system.domain.MenuDO> com.bootdo.system.controller.MenuController.tree(java.lang.Long)
2019-04-03 08:26:39 -Mapped "{[/sys/menu/tree],methods=[GET]}" onto com.bootdo.common.domain.Tree<com.bootdo.system.domain.MenuDO> com.bootdo.system.controller.MenuController.tree()
2019-04-03 08:26:39 -Mapped "{[/sys/menu],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.MenuController.menu(org.springframework.ui.Model)
2019-04-03 08:26:39 -Mapped "{[/sys/menu/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.MenuController.edit(org.springframework.ui.Model,java.lang.Long)
2019-04-03 08:26:39 -Mapped "{[/sys/role/add],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.RoleController.add()
2019-04-03 08:26:39 -Mapped "{[/sys/role/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.update(com.bootdo.system.domain.RoleDO)
2019-04-03 08:26:39 -Mapped "{[/sys/role/list],methods=[GET]}" onto java.util.List<com.bootdo.system.domain.RoleDO> com.bootdo.system.controller.RoleController.list()
2019-04-03 08:26:39 -Mapped "{[/sys/role/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.save(java.lang.Long)
2019-04-03 08:26:39 -Mapped "{[/sys/role/save],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.save(com.bootdo.system.domain.RoleDO)
2019-04-03 08:26:39 -Mapped "{[/sys/role/batchRemove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.batchRemove(java.lang.Long[])
2019-04-03 08:26:39 -Mapped "{[/sys/role/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.RoleController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 08:26:39 -Mapped "{[/sys/role],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.RoleController.role()
2019-04-03 08:26:39 -Mapped "{[/sys/online/list]}" onto public java.util.List<com.bootdo.system.domain.UserOnline> com.bootdo.system.controller.SessionController.list()
2019-04-03 08:26:39 -Mapped "{[/sys/online/forceLogout/{sessionId}]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.SessionController.forceLogout(java.lang.String,org.springframework.web.servlet.mvc.support.RedirectAttributes)
2019-04-03 08:26:39 -Mapped "{[/sys/online],methods=[GET]}" onto public java.lang.String com.bootdo.system.controller.SessionController.online()
2019-04-03 08:26:39 -Mapped "{[/sys/online/sessionList]}" onto public java.util.Collection<org.apache.shiro.session.Session> com.bootdo.system.controller.SessionController.sessionList()
2019-04-03 08:26:39 -Mapped "{[/sys/user/exit],methods=[POST]}" onto boolean com.bootdo.system.controller.UserController.exit(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 08:26:39 -Mapped "{[/sys/user/add],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.add(org.springframework.ui.Model)
2019-04-03 08:26:39 -Mapped "{[/sys/user/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.remove(java.lang.Long)
2019-04-03 08:26:39 -Mapped "{[/sys/user/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.update(com.bootdo.system.domain.UserDO)
2019-04-03 08:26:39 -Mapped "{[/sys/user/list],methods=[GET]}" onto com.bootdo.common.utils.PageUtils com.bootdo.system.controller.UserController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 08:26:39 -Mapped "{[/sys/user/save],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.save(com.bootdo.system.domain.UserDO)
2019-04-03 08:26:39 -Mapped "{[/sys/user/batchRemove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.batchRemove(java.lang.Long[])
2019-04-03 08:26:39 -Mapped "{[/sys/user/tree],methods=[GET]}" onto public com.bootdo.common.domain.Tree<com.bootdo.system.domain.DeptDO> com.bootdo.system.controller.UserController.tree()
2019-04-03 08:26:39 -Mapped "{[/sys/user/treeView],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.treeView()
2019-04-03 08:26:39 -Mapped "{[/sys/user/uploadImg],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.uploadImg(org.springframework.web.multipart.MultipartFile,java.lang.String,javax.servlet.http.HttpServletRequest)
2019-04-03 08:26:39 -Mapped "{[/sys/user/adminResetPwd],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.adminResetPwd(com.bootdo.system.vo.UserVO)
2019-04-03 08:26:39 -Mapped "{[/sys/user/updatePeronal],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.updatePeronal(com.bootdo.system.domain.UserDO)
2019-04-03 08:26:39 -Mapped "{[/sys/user/personal],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.personal(org.springframework.ui.Model)
2019-04-03 08:26:39 -Mapped "{[/sys/user/resetPwd],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.resetPwd(com.bootdo.system.vo.UserVO)
2019-04-03 08:26:39 -Mapped "{[/sys/user/resetPwd/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.resetPwd(java.lang.Long,org.springframework.ui.Model)
2019-04-03 08:26:39 -Mapped "{[/sys/user/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.edit(org.springframework.ui.Model,java.lang.Long)
2019-04-03 08:26:39 -Mapped "{[/sys/user],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.user(org.springframework.ui.Model)
2019-04-03 08:26:39 -Mapped "{[/file/downImport/{importType}],methods=[GET]}" onto public void com.bootdo.temple.controller.TempletController.downImport(javax.servlet.http.HttpServletResponse,java.lang.String)
2019-04-03 08:26:39 -Mapped "{[/water/water/add],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterController.add()
2019-04-03 08:26:39 -Mapped "{[/water/water/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterController.remove(java.lang.Long[])
2019-04-03 08:26:39 -Mapped "{[/water/water/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterController.remove(java.lang.Long)
2019-04-03 08:26:39 -Mapped "{[/water/water/update]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterController.update(com.bootdo.water.domain.WaterDO)
2019-04-03 08:26:39 -Mapped "{[/water/water/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.water.controller.WaterController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 08:26:39 -Mapped "{[/water/water/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterController.save(com.bootdo.water.domain.WaterDO)
2019-04-03 08:26:39 -Mapped "{[/water/water/ArrearsWater],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.water.controller.WaterController.ArrearsWater(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 08:26:39 -Mapped "{[/water/water],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterController.Water()
2019-04-03 08:26:39 -Mapped "{[/water/water/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 08:26:39 -Mapped "{[/water/water/exprotWater],methods=[GET]}" onto public void com.bootdo.water.controller.WaterController.exprotExcel(com.bootdo.water.vo.WaterVo,javax.servlet.http.HttpServletResponse)
2019-04-03 08:26:39 -Mapped "{[/water/waterInto],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterIntoController.WaterInto()
2019-04-03 08:26:39 -Mapped "{[/water/waterInto/exprotWaterIntoExcel],methods=[GET]}" onto public void com.bootdo.water.controller.WaterIntoController.exprotExcel(com.bootdo.water.vo.WaterVo,javax.servlet.http.HttpServletResponse)
2019-04-03 08:26:39 -Mapped "{[/water/waterPrice/add],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterPriceController.add()
2019-04-03 08:26:39 -Mapped "{[/water/waterPrice/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterPriceController.remove(java.lang.Long)
2019-04-03 08:26:39 -Mapped "{[/water/waterPrice/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterPriceController.remove(java.lang.Long[])
2019-04-03 08:26:39 -Mapped "{[/water/waterPrice/update]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterPriceController.update(com.bootdo.water.domain.WaterPriceDO)
2019-04-03 08:26:39 -Mapped "{[/water/waterPrice/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.water.controller.WaterPriceController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 08:26:39 -Mapped "{[/water/waterPrice/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterPriceController.save(com.bootdo.water.domain.WaterPriceDO)
2019-04-03 08:26:39 -Mapped "{[/water/waterPrice],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterPriceController.WaterPrice()
2019-04-03 08:26:39 -Mapped "{[/water/waterPrice/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterPriceController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 08:26:39 -Mapped "{[/water/waterUpLoad/importWaterExcel]}" onto public java.lang.String com.bootdo.water.controller.WaterUpLoadController.importWaterExcel(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)
2019-04-03 08:26:39 -Mapped "{[/water/waterUpLoad/exprotWaterExcel],methods=[GET]}" onto public void com.bootdo.water.controller.WaterUpLoadController.exprotWaterExcel(com.bootdo.water.vo.WaterVo,javax.servlet.http.HttpServletResponse)
2019-04-03 08:26:39 -Mapped "{[/water/waterUpLoad],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterUpLoadController.WaterUpLoad()
2019-04-03 08:26:39 -Mapped "{[/water/waterUpLoad/createWaterExcel],methods=[POST]}" onto public java.lang.String com.bootdo.water.controller.WaterUpLoadController.createWaterExcel(com.bootdo.water.domain.WaterDO) throws java.lang.Exception
2019-04-03 08:26:39 -Mapped "{[/v2/api-docs],methods=[GET],produces=[application/json || application/hal+json]}" onto public org.springframework.http.ResponseEntity<springfox.documentation.spring.web.json.Json> springfox.documentation.swagger2.web.Swagger2Controller.getDocumentation(java.lang.String,javax.servlet.http.HttpServletRequest)
2019-04-03 08:26:39 -Mapped "{[/swagger-resources]}" onto org.springframework.http.ResponseEntity<java.util.List<springfox.documentation.swagger.web.SwaggerResource>> springfox.documentation.swagger.web.ApiResourceController.swaggerResources()
2019-04-03 08:26:39 -Mapped "{[/swagger-resources/configuration/ui]}" onto org.springframework.http.ResponseEntity<springfox.documentation.swagger.web.UiConfiguration> springfox.documentation.swagger.web.ApiResourceController.uiConfiguration()
2019-04-03 08:26:39 -Mapped "{[/swagger-resources/configuration/security]}" onto org.springframework.http.ResponseEntity<springfox.documentation.swagger.web.SecurityConfiguration> springfox.documentation.swagger.web.ApiResourceController.securityConfiguration()
2019-04-03 08:26:39 -Initializing ExecutorService  'messageBrokerTaskScheduler'
2019-04-03 08:26:39 -Mapped URL path [/endpointChat/**] onto handler of type [class org.springframework.web.socket.sockjs.support.SockJsHttpRequestHandler]
2019-04-03 08:26:39 -Initializing ExecutorService  'brokerChannelExecutor'
2019-04-03 08:26:40 -Mapped URL path [/**/favicon.ico] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-04-03 08:26:40 -Looking for @ControllerAdvice: org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@7e928e2f: startup date [Wed Apr 03 08:26:13 CST 2019]; root of context hierarchy
2019-04-03 08:26:41 -Mapped URL path [/webjars/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-04-03 08:26:41 -Mapped URL path [/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-04-03 08:26:41 -Mapped URL path [/files/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-04-03 08:26:41 -Detected @ExceptionHandler methods in BDExceptionHandler
2019-04-03 08:26:41 -[THYMELEAF][main] Template Mode 'LEGACYHTML5' is deprecated. Using Template Mode 'HTML' instead.
2019-04-03 08:26:44 -Registering beans for JMX exposure on startup
2019-04-03 08:26:44 -Bean with name 'dataSource' has been autodetected for JMX exposure
2019-04-03 08:26:44 -Located MBean 'dataSource': registering with JMX server as MBean [com.alibaba.druid.pool:name=dataSource,type=DruidDataSource]
2019-04-03 08:26:44 -Starting beans in phase 2147483647
2019-04-03 08:26:44 -Context refreshed
2019-04-03 08:26:44 -Found 1 custom documentation plugin(s)
2019-04-03 08:26:44 -Scanning for api listing references
2019-04-03 08:26:45 -Generating unique operation named: exprotElecLogUsingGET_1
2019-04-03 08:26:45 -Generating unique operation named: getCountDUsingPOST_1
2019-04-03 08:26:45 -Generating unique operation named: exprotElecLogUsingGET_2
2019-04-03 08:26:45 -Generating unique operation named: getCountDUsingPOST_2
2019-04-03 08:26:45 -Generating unique operation named: exprotElecLogUsingGET_3
2019-04-03 08:26:45 -Generating unique operation named: getCountDUsingPOST_3
2019-04-03 08:26:45 -Generating unique operation named: removeUsingPOST_1
2019-04-03 08:26:45 -Generating unique operation named: addUsingGET_1
2019-04-03 08:26:45 -Generating unique operation named: editUsingGET_1
2019-04-03 08:26:45 -Generating unique operation named: listUsingGET_1
2019-04-03 08:26:45 -Generating unique operation named: removeUsingPOST_2
2019-04-03 08:26:45 -Generating unique operation named: removeUsingPOST_3
2019-04-03 08:26:45 -Generating unique operation named: saveUsingPOST_1
2019-04-03 08:26:45 -Generating unique operation named: updateUsingGET_1
2019-04-03 08:26:45 -Generating unique operation named: updateUsingHEAD_1
2019-04-03 08:26:45 -Generating unique operation named: updateUsingPOST_1
2019-04-03 08:26:45 -Generating unique operation named: updateUsingPUT_1
2019-04-03 08:26:45 -Generating unique operation named: updateUsingPATCH_1
2019-04-03 08:26:45 -Generating unique operation named: updateUsingDELETE_1
2019-04-03 08:26:45 -Generating unique operation named: updateUsingOPTIONS_1
2019-04-03 08:26:45 -Generating unique operation named: updateUsingTRACE_1
2019-04-03 08:26:46 -Generating unique operation named: addUsingGET_2
2019-04-03 08:26:46 -Generating unique operation named: editUsingGET_2
2019-04-03 08:26:46 -Generating unique operation named: listUsingGET_2
2019-04-03 08:26:46 -Generating unique operation named: removeUsingPOST_4
2019-04-03 08:26:46 -Generating unique operation named: removeUsingPOST_5
2019-04-03 08:26:46 -Generating unique operation named: saveUsingPOST_2
2019-04-03 08:26:46 -Generating unique operation named: updateUsingPOST_2
2019-04-03 08:26:46 -Generating unique operation named: exprotExcelUsingGET_1
2019-04-03 08:26:46 -Generating unique operation named: addUsingGET_3
2019-04-03 08:26:46 -Generating unique operation named: editUsingGET_3
2019-04-03 08:26:46 -Generating unique operation named: exprotElecLogUsingGET_4
2019-04-03 08:26:46 -Generating unique operation named: listUsingGET_3
2019-04-03 08:26:46 -Generating unique operation named: removeUsingPOST_6
2019-04-03 08:26:46 -Generating unique operation named: removeUsingPOST_7
2019-04-03 08:26:46 -Generating unique operation named: saveUsingPOST_3
2019-04-03 08:26:46 -Generating unique operation named: updateUsingGET_2
2019-04-03 08:26:46 -Generating unique operation named: updateUsingHEAD_2
2019-04-03 08:26:46 -Generating unique operation named: updateUsingPOST_3
2019-04-03 08:26:46 -Generating unique operation named: updateUsingPUT_2
2019-04-03 08:26:46 -Generating unique operation named: updateUsingPATCH_2
2019-04-03 08:26:46 -Generating unique operation named: updateUsingDELETE_2
2019-04-03 08:26:46 -Generating unique operation named: updateUsingOPTIONS_2
2019-04-03 08:26:46 -Generating unique operation named: updateUsingTRACE_2
2019-04-03 08:26:46 -Generating unique operation named: addUsingGET_4
2019-04-03 08:26:46 -Generating unique operation named: editUsingGET_4
2019-04-03 08:26:46 -Generating unique operation named: listUsingGET_4
2019-04-03 08:26:46 -Generating unique operation named: removeUsingPOST_8
2019-04-03 08:26:46 -Generating unique operation named: removeUsingPOST_9
2019-04-03 08:26:46 -Generating unique operation named: saveUsingPOST_4
2019-04-03 08:26:46 -Generating unique operation named: updateUsingGET_3
2019-04-03 08:26:46 -Generating unique operation named: updateUsingHEAD_3
2019-04-03 08:26:46 -Generating unique operation named: updateUsingPOST_4
2019-04-03 08:26:46 -Generating unique operation named: updateUsingPUT_3
2019-04-03 08:26:46 -Generating unique operation named: updateUsingPATCH_3
2019-04-03 08:26:46 -Generating unique operation named: updateUsingDELETE_3
2019-04-03 08:26:46 -Generating unique operation named: updateUsingOPTIONS_3
2019-04-03 08:26:46 -Generating unique operation named: updateUsingTRACE_3
2019-04-03 08:26:46 -Generating unique operation named: ElecUsingGET_1
2019-04-03 08:26:46 -Generating unique operation named: addUsingGET_5
2019-04-03 08:26:46 -Generating unique operation named: editUsingGET_5
2019-04-03 08:26:46 -Generating unique operation named: listUsingGET_5
2019-04-03 08:26:46 -Generating unique operation named: removeUsingPOST_10
2019-04-03 08:26:46 -Generating unique operation named: removeUsingPOST_11
2019-04-03 08:26:46 -Generating unique operation named: saveUsingPOST_5
2019-04-03 08:26:46 -Generating unique operation named: updateUsingGET_4
2019-04-03 08:26:46 -Generating unique operation named: updateUsingHEAD_4
2019-04-03 08:26:46 -Generating unique operation named: updateUsingPOST_5
2019-04-03 08:26:46 -Generating unique operation named: updateUsingPUT_4
2019-04-03 08:26:46 -Generating unique operation named: updateUsingPATCH_4
2019-04-03 08:26:46 -Generating unique operation named: updateUsingDELETE_4
2019-04-03 08:26:46 -Generating unique operation named: updateUsingOPTIONS_4
2019-04-03 08:26:46 -Generating unique operation named: updateUsingTRACE_4
2019-04-03 08:26:46 -Generating unique operation named: editUsingGET_6
2019-04-03 08:26:46 -Generating unique operation named: listUsingGET_6
2019-04-03 08:26:46 -Generating unique operation named: updateUsingPOST_6
2019-04-03 08:26:46 -Generating unique operation named: addUsingGET_6
2019-04-03 08:26:46 -Generating unique operation named: editUsingGET_7
2019-04-03 08:26:46 -Generating unique operation named: exprotExcelUsingGET_2
2019-04-03 08:26:46 -Generating unique operation named: listUsingGET_7
2019-04-03 08:26:46 -Generating unique operation named: removeUsingPOST_12
2019-04-03 08:26:46 -Generating unique operation named: removeUsingPOST_13
2019-04-03 08:26:46 -Generating unique operation named: saveUsingPOST_6
2019-04-03 08:26:46 -Generating unique operation named: updateUsingGET_5
2019-04-03 08:26:46 -Generating unique operation named: updateUsingHEAD_5
2019-04-03 08:26:46 -Generating unique operation named: updateUsingPOST_7
2019-04-03 08:26:46 -Generating unique operation named: updateUsingPUT_5
2019-04-03 08:26:46 -Generating unique operation named: updateUsingPATCH_5
2019-04-03 08:26:46 -Generating unique operation named: updateUsingDELETE_5
2019-04-03 08:26:46 -Generating unique operation named: updateUsingOPTIONS_5
2019-04-03 08:26:46 -Generating unique operation named: updateUsingTRACE_5
2019-04-03 08:26:46 -Generating unique operation named: exprotExcelUsingGET_3
2019-04-03 08:26:46 -Generating unique operation named: addUsingGET_7
2019-04-03 08:26:46 -Generating unique operation named: editUsingGET_8
2019-04-03 08:26:46 -Generating unique operation named: listUsingGET_8
2019-04-03 08:26:46 -Generating unique operation named: removeUsingPOST_14
2019-04-03 08:26:46 -Generating unique operation named: removeUsingPOST_15
2019-04-03 08:26:46 -Generating unique operation named: saveUsingPOST_7
2019-04-03 08:26:46 -Generating unique operation named: updateUsingGET_6
2019-04-03 08:26:46 -Generating unique operation named: updateUsingHEAD_6
2019-04-03 08:26:46 -Generating unique operation named: updateUsingPOST_8
2019-04-03 08:26:46 -Generating unique operation named: updateUsingPUT_6
2019-04-03 08:26:46 -Generating unique operation named: updateUsingPATCH_6
2019-04-03 08:26:46 -Generating unique operation named: updateUsingDELETE_6
2019-04-03 08:26:46 -Generating unique operation named: updateUsingOPTIONS_6
2019-04-03 08:26:46 -Generating unique operation named: updateUsingTRACE_6
2019-04-03 08:26:46 -Generating unique operation named: addUsingGET_8
2019-04-03 08:26:46 -Generating unique operation named: editUsingGET_9
2019-04-03 08:26:46 -Generating unique operation named: listUsingGET_9
2019-04-03 08:26:46 -Generating unique operation named: removeUsingPOST_16
2019-04-03 08:26:46 -Generating unique operation named: removeUsingPOST_17
2019-04-03 08:26:46 -Generating unique operation named: saveUsingPOST_8
2019-04-03 08:26:46 -Generating unique operation named: updateUsingGET_7
2019-04-03 08:26:46 -Generating unique operation named: updateUsingHEAD_7
2019-04-03 08:26:46 -Generating unique operation named: updateUsingPOST_9
2019-04-03 08:26:46 -Generating unique operation named: updateUsingPUT_7
2019-04-03 08:26:46 -Generating unique operation named: updateUsingPATCH_7
2019-04-03 08:26:46 -Generating unique operation named: updateUsingDELETE_7
2019-04-03 08:26:46 -Generating unique operation named: updateUsingOPTIONS_7
2019-04-03 08:26:46 -Generating unique operation named: updateUsingTRACE_7
2019-04-03 08:26:46 -Generating unique operation named: addUsingGET_9
2019-04-03 08:26:46 -Generating unique operation named: editUsingGET_10
2019-04-03 08:26:46 -Generating unique operation named: infoUsingGET_1
2019-04-03 08:26:46 -Generating unique operation named: infoUsingHEAD_1
2019-04-03 08:26:46 -Generating unique operation named: infoUsingPOST_1
2019-04-03 08:26:47 -Generating unique operation named: infoUsingPUT_1
2019-04-03 08:26:47 -Generating unique operation named: infoUsingPATCH_1
2019-04-03 08:26:47 -Generating unique operation named: infoUsingDELETE_1
2019-04-03 08:26:47 -Generating unique operation named: infoUsingOPTIONS_1
2019-04-03 08:26:47 -Generating unique operation named: infoUsingTRACE_1
2019-04-03 08:26:47 -Generating unique operation named: listUsingGET_10
2019-04-03 08:26:47 -Generating unique operation named: removeUsingPOST_18
2019-04-03 08:26:47 -Generating unique operation named: removeUsingPOST_19
2019-04-03 08:26:47 -Generating unique operation named: saveUsingPOST_9
2019-04-03 08:26:47 -Generating unique operation named: updateUsingPOST_10
2019-04-03 08:26:47 -Generating unique operation named: listUsingGET_11
2019-04-03 08:26:47 -Generating unique operation named: removeUsingPOST_20
2019-04-03 08:26:47 -Generating unique operation named: welcomeUsingGET_1
2019-04-03 08:26:47 -Generating unique operation named: addUsingGET_10
2019-04-03 08:26:47 -Generating unique operation named: editUsingGET_11
2019-04-03 08:26:47 -Generating unique operation named: listUsingGET_12
2019-04-03 08:26:47 -Generating unique operation named: removeUsingPOST_21
2019-04-03 08:26:47 -Generating unique operation named: saveUsingPOST_10
2019-04-03 08:26:47 -Generating unique operation named: treeUsingGET_1
2019-04-03 08:26:47 -Generating unique operation named: treeUsingGET_2
2019-04-03 08:26:47 -Generating unique operation named: updateUsingPOST_11
2019-04-03 08:26:47 -Generating unique operation named: addUsingGET_11
2019-04-03 08:26:47 -Generating unique operation named: editUsingGET_12
2019-04-03 08:26:47 -Generating unique operation named: listUsingGET_13
2019-04-03 08:26:47 -Generating unique operation named: removeUsingPOST_22
2019-04-03 08:26:47 -Generating unique operation named: removeUsingPOST_23
2019-04-03 08:26:47 -Generating unique operation named: saveUsingPOST_11
2019-04-03 08:26:47 -Generating unique operation named: updateUsingGET_8
2019-04-03 08:26:47 -Generating unique operation named: updateUsingHEAD_8
2019-04-03 08:26:47 -Generating unique operation named: updateUsingPOST_12
2019-04-03 08:26:47 -Generating unique operation named: updateUsingPUT_8
2019-04-03 08:26:47 -Generating unique operation named: updateUsingPATCH_8
2019-04-03 08:26:47 -Generating unique operation named: updateUsingDELETE_8
2019-04-03 08:26:47 -Generating unique operation named: updateUsingOPTIONS_8
2019-04-03 08:26:47 -Generating unique operation named: updateUsingTRACE_8
2019-04-03 08:26:47 -Generating unique operation named: addUsingGET_12
2019-04-03 08:26:47 -Generating unique operation named: editUsingGET_13
2019-04-03 08:26:47 -Generating unique operation named: listUsingGET_14
2019-04-03 08:26:47 -Generating unique operation named: removeUsingPOST_24
2019-04-03 08:26:47 -Generating unique operation named: removeUsingPOST_25
2019-04-03 08:26:47 -Generating unique operation named: saveUsingPOST_12
2019-04-03 08:26:47 -Generating unique operation named: updateUsingGET_9
2019-04-03 08:26:47 -Generating unique operation named: updateUsingHEAD_9
2019-04-03 08:26:47 -Generating unique operation named: updateUsingPOST_13
2019-04-03 08:26:47 -Generating unique operation named: updateUsingPUT_9
2019-04-03 08:26:47 -Generating unique operation named: updateUsingPATCH_9
2019-04-03 08:26:47 -Generating unique operation named: updateUsingDELETE_9
2019-04-03 08:26:47 -Generating unique operation named: updateUsingOPTIONS_9
2019-04-03 08:26:47 -Generating unique operation named: updateUsingTRACE_9
2019-04-03 08:26:47 -Generating unique operation named: addUsingGET_13
2019-04-03 08:26:47 -Generating unique operation named: batchRemoveUsingPOST_1
2019-04-03 08:26:47 -Generating unique operation named: editUsingGET_14
2019-04-03 08:26:47 -Generating unique operation named: listUsingGET_15
2019-04-03 08:26:47 -Generating unique operation named: saveUsingPOST_13
2019-04-03 08:26:47 -Generating unique operation named: saveUsingPOST_14
2019-04-03 08:26:47 -Generating unique operation named: updateUsingPOST_14
2019-04-03 08:26:47 -Generating unique operation named: listUsingGET_16
2019-04-03 08:26:47 -Generating unique operation named: listUsingHEAD_1
2019-04-03 08:26:47 -Generating unique operation named: listUsingPOST_1
2019-04-03 08:26:47 -Generating unique operation named: listUsingPUT_1
2019-04-03 08:26:47 -Generating unique operation named: listUsingPATCH_1
2019-04-03 08:26:47 -Generating unique operation named: listUsingDELETE_1
2019-04-03 08:26:47 -Generating unique operation named: listUsingOPTIONS_1
2019-04-03 08:26:47 -Generating unique operation named: listUsingTRACE_1
2019-04-03 08:26:47 -Generating unique operation named: addUsingGET_14
2019-04-03 08:26:47 -Generating unique operation named: batchRemoveUsingPOST_2
2019-04-03 08:26:47 -Generating unique operation named: editUsingGET_15
2019-04-03 08:26:47 -Generating unique operation named: listUsingGET_17
2019-04-03 08:26:47 -Generating unique operation named: removeUsingPOST_26
2019-04-03 08:26:47 -Generating unique operation named: saveUsingPOST_15
2019-04-03 08:26:47 -Generating unique operation named: treeUsingGET_3
2019-04-03 08:26:47 -Generating unique operation named: treeViewUsingGET_1
2019-04-03 08:26:47 -Generating unique operation named: updateUsingPOST_15
2019-04-03 08:26:48 -Generating unique operation named: addUsingGET_15
2019-04-03 08:26:48 -Generating unique operation named: editUsingGET_16
2019-04-03 08:26:48 -Generating unique operation named: exprotExcelUsingGET_4
2019-04-03 08:26:48 -Generating unique operation named: listUsingGET_18
2019-04-03 08:26:48 -Generating unique operation named: removeUsingPOST_27
2019-04-03 08:26:48 -Generating unique operation named: removeUsingPOST_28
2019-04-03 08:26:48 -Generating unique operation named: saveUsingPOST_16
2019-04-03 08:26:48 -Generating unique operation named: updateUsingGET_10
2019-04-03 08:26:48 -Generating unique operation named: updateUsingHEAD_10
2019-04-03 08:26:48 -Generating unique operation named: updateUsingPOST_16
2019-04-03 08:26:48 -Generating unique operation named: updateUsingPUT_10
2019-04-03 08:26:48 -Generating unique operation named: updateUsingPATCH_10
2019-04-03 08:26:48 -Generating unique operation named: updateUsingDELETE_10
2019-04-03 08:26:48 -Generating unique operation named: updateUsingOPTIONS_10
2019-04-03 08:26:48 -Generating unique operation named: updateUsingTRACE_10
2019-04-03 08:26:48 -Generating unique operation named: exprotExcelUsingGET_5
2019-04-03 08:26:48 -Generating unique operation named: addUsingGET_16
2019-04-03 08:26:48 -Generating unique operation named: editUsingGET_17
2019-04-03 08:26:48 -Generating unique operation named: listUsingGET_19
2019-04-03 08:26:48 -Generating unique operation named: removeUsingPOST_29
2019-04-03 08:26:48 -Generating unique operation named: removeUsingPOST_30
2019-04-03 08:26:48 -Generating unique operation named: saveUsingPOST_17
2019-04-03 08:26:48 -Generating unique operation named: updateUsingGET_11
2019-04-03 08:26:48 -Generating unique operation named: updateUsingHEAD_11
2019-04-03 08:26:48 -Generating unique operation named: updateUsingPOST_17
2019-04-03 08:26:48 -Generating unique operation named: updateUsingPUT_11
2019-04-03 08:26:48 -Generating unique operation named: updateUsingPATCH_11
2019-04-03 08:26:48 -Generating unique operation named: updateUsingDELETE_11
2019-04-03 08:26:48 -Generating unique operation named: updateUsingOPTIONS_11
2019-04-03 08:26:48 -Generating unique operation named: updateUsingTRACE_11
2019-04-03 08:26:48 -Generating unique operation named: addUsingGET_17
2019-04-03 08:26:48 -Generating unique operation named: editUsingGET_18
2019-04-03 08:26:48 -Generating unique operation named: listUsingGET_20
2019-04-03 08:26:48 -Generating unique operation named: removeUsingPOST_31
2019-04-03 08:26:48 -Generating unique operation named: removeUsingPOST_32
2019-04-03 08:26:48 -Generating unique operation named: saveUsingPOST_18
2019-04-03 08:26:48 -Generating unique operation named: updateUsingGET_12
2019-04-03 08:26:48 -Generating unique operation named: updateUsingHEAD_12
2019-04-03 08:26:48 -Generating unique operation named: updateUsingPOST_18
2019-04-03 08:26:48 -Generating unique operation named: updateUsingPUT_12
2019-04-03 08:26:48 -Generating unique operation named: updateUsingPATCH_12
2019-04-03 08:26:48 -Generating unique operation named: updateUsingDELETE_12
2019-04-03 08:26:48 -Generating unique operation named: updateUsingOPTIONS_12
2019-04-03 08:26:48 -Generating unique operation named: updateUsingTRACE_12
2019-04-03 08:26:48 -Starting Quartz Scheduler now
2019-04-03 08:26:48 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED started.
2019-04-03 08:26:48 -Starting...
2019-04-03 08:26:48 -BrokerAvailabilityEvent[available=true, SimpleBrokerMessageHandler [DefaultSubscriptionRegistry[cache[0 destination(s)], registry[0 sessions]]]]
2019-04-03 08:26:48 -Started.
2019-04-03 08:26:48 -Starting ProtocolHandler ["http-nio-8081"]
2019-04-03 08:26:48 -Using a shared selector for servlet write/read
2019-04-03 08:26:48 -Tomcat started on port(s): 8081 (http) with context path ''
2019-04-03 08:26:48 -Started BootdoApplication in 37.426 seconds (JVM running for 39.513)
2019-04-03 08:26:48 -==>  Preparing: select `id`,`cron_expression`,`method_name`,`is_concurrent`,`description`,`update_by`,`bean_class`,`create_date`,`job_status`,`job_group`,`update_date`,`create_by`,`spring_bean`,`job_name` from sys_task order by id desc 
2019-04-03 08:26:49 -==> Parameters: 
2019-04-03 08:26:49 -<==      Total: 1
2019-04-03 08:27:17 -Initializing Spring FrameworkServlet 'dispatcherServlet'
2019-04-03 08:27:17 -FrameworkServlet 'dispatcherServlet': initialization started
2019-04-03 08:27:17 -FrameworkServlet 'dispatcherServlet': initialization completed in 87 ms
2019-04-03 08:27:17 -Enabling session validation scheduler...
2019-04-03 08:27:17 -请求地址 : http://localhost:8081/login;JSESSIONID=170375fc-40f6-42e5-a36b-a49cee61a753
2019-04-03 08:27:17 -HTTP METHOD : GET
2019-04-03 08:27:17 -CLASS_METHOD : com.bootdo.system.controller.LoginController.login
2019-04-03 08:27:17 -参数 : [{}]
2019-04-03 08:27:17 -耗时 : 5
2019-04-03 08:27:17 -返回值 : login
2019-04-03 08:27:20 -请求地址 : http://localhost:8081/getVerify
2019-04-03 08:27:20 -HTTP METHOD : GET
2019-04-03 08:27:20 -CLASS_METHOD : com.bootdo.system.controller.LoginController.getVerify
2019-04-03 08:27:20 -参数 : [org.apache.shiro.web.servlet.ShiroHttpServletRequest@5354ea93, org.apache.shiro.web.servlet.ShiroHttpServletResponse@576b6421]
2019-04-03 08:27:29 -9866
2019-04-03 08:27:29 -耗时 : 9349
2019-04-03 08:27:29 -返回值 : null
2019-04-03 08:27:34 -请求地址 : http://localhost:8081/login
2019-04-03 08:27:34 -HTTP METHOD : POST
2019-04-03 08:27:34 -CLASS_METHOD : com.bootdo.system.controller.LoginController.ajaxLogin
2019-04-03 08:27:34 -参数 : [admin, 111111, 9866, org.apache.shiro.web.servlet.ShiroHttpServletRequest@3c6f7255]
2019-04-03 08:27:34 -==>  Preparing: select `user_id`,`username`,`name`,`password`,`dept_id`,`email`,`mobile`,`status`,`user_id_create`,`gmt_create`,`gmt_modified`,`sex`,`birth`,`pic_id`,`live_address`,`hobby`,`province`,`city`,`district` from sys_user WHERE username = ? order by user_id desc 
2019-04-03 08:27:34 -==> Parameters: admin(String)
2019-04-03 08:27:34 -<==      Total: 1
2019-04-03 08:27:34 -耗时 : 251
2019-04-03 08:27:34 -返回值 : {msg=操作成功, code=0}
2019-04-03 08:27:35 -More than one TaskExecutor bean found within the context, and none is named 'taskExecutor'. Mark one of them as primary or name it 'taskExecutor' (possibly as an alias) in order to use it for async processing: [clientInboundChannelExecutor, clientOutboundChannelExecutor, brokerChannelExecutor, messageBrokerTaskScheduler]
2019-04-03 08:27:35 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 08:27:35 -==> Parameters: 1(Long), admin(String), 登录(String), 251(Integer), com.bootdo.system.controller.LoginController.ajaxLogin()(String), null, 127.0.0.1(String), 2019-04-03 08:27:35.082(Timestamp)
2019-04-03 08:27:35 -<==    Updates: 1
2019-04-03 08:27:35 -请求地址 : http://localhost:8081/index
2019-04-03 08:27:35 -HTTP METHOD : GET
2019-04-03 08:27:35 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2019-04-03 08:27:35 -参数 : [{}]
2019-04-03 08:27:35 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2019-04-03 08:27:35 -==> Parameters: 1(Long)
2019-04-03 08:27:35 -<==      Total: 46
2019-04-03 08:27:35 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2019-04-03 08:27:35 -==> Parameters: 138(Long)
2019-04-03 08:27:35 -<==      Total: 1
2019-04-03 08:27:35 -耗时 : 485
2019-04-03 08:27:35 -返回值 : index_v1
2019-04-03 08:27:36 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 08:27:36 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 486(Integer), com.bootdo.system.controller.LoginController.index()(String), {"menus":[{"attributes":{"icon":"fa fa-money","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-money","url":"/moneyList/moneyList"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"102","parentId":"106","text":"现金缴费"},{"attributes":{"icon":"fa fa-book","url":"/moneyLog/elecLog"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"107","parentId":"106","text":"缴费记录"}],"hasChildren":true,"hasParent":false,"id":"106","parentId":"0","text":"收费管理"},{"attributes":{"icon":"fa fa-lightbulb-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/elec/elec"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"121","parentId":"103","text":"电费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"elec/elecInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"122","parentId":"103","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"elec/elecUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"123","parentId":"103","text":"电表上传"},{"attributes":{"icon":"fa fa-cc","url":"/elec/elecPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"124","parentId":"103","text":"电价管理"}],"hasChildren":true,"hasParent":false,"id":"103","parentId":"0","text":"电费管理"},{"attributes":{"icon":"fa fa-tint","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/water/water"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"117","parentId":"105","text":"水费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"water/waterInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"118","parentId":"105","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"water/waterUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"119","parentId":"105","text":"水费生成"},{"attributes":{"icon":"fa fa-cc","url":"/water/waterPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"120","parentId":"105","text":"水价管理"}],"hasChildren":true,"hasParent":false,"id":"105","parentId":"0","text":"水费管理"},{"attributes":{"icon":"fa fa-fire","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/heat/heat"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"113","parentId":"104","text":"暖费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"heat/heatInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"114","parentId":"104","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"heat/heatUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"115","parentId":"104","text":"暖费生成"},{"attributes":{"icon":"","url":"/heat/heatPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"116","parentId":"104","text":"暖价管理"}],"hasChildren":true,"hasParent":false,"id":"104","parentId":"0","text":"暖费管理"},{"attributes":{"icon":"fa fa-vcard-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-bomb","url":"/print/print"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"149","parentId":"108","text":"票据记录"}],"hasChildren":true,"hasParent":false,"id":"108","parentId":"0","text":"票据管理"},{"attributes":{"icon":"fa fa-bar-chart","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-area-chart","url":"/chart/graph_echarts.html"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","text":"百度chart"},{"attributes":{"icon":"fa fa-sun-o","url":"charts/countDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"109","parentId":"97","text":"日统计报表"},{"attributes":{"icon":"fa fa-registered","url":"charts/countMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"110","parentId":"97","text":"月统计报表"},{"attributes":{"icon":"fa fa-support","url":"charts/countYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"111","parentId":"97","text":"年统计报表"},{"attributes":{"icon":"fa fa-money","url":"charts/countOwe"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"155","parentId":"97","text":"欠费报表图"},{"attributes":{"icon":"fa fa-tachometer","url":"charts/countRun"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"112","parentId":"97","text":"走势图报表"}],"hasChildren":true,"hasParent":false,"id":"97","parentId":"0","text":"统计管理"},{"attributes":{"icon":"fa fa-bars","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-book","url":"/common/dict"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"78","parentId":"1","text":"数据字典"},{"attributes":{"icon":"fa fa-folder-open","url":"/common/sysFile"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"71","parentId":"1","text":"文件管理"}],"h(String), 127.0.0.1(String), 2019-04-03 08:27:36.113(Timestamp)
2019-04-03 08:27:36 -<==    Updates: 1
2019-04-03 08:27:36 -请求地址 : http://localhost:8081/main
2019-04-03 08:27:36 -HTTP METHOD : GET
2019-04-03 08:27:36 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 08:27:36 -参数 : []
2019-04-03 08:27:36 -耗时 : 0
2019-04-03 08:27:36 -返回值 : main
2019-04-03 08:27:38 -请求地址 : http://localhost:8081/oa/notify/message
2019-04-03 08:27:38 -HTTP METHOD : GET
2019-04-03 08:27:38 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2019-04-03 08:27:38 -参数 : []
2019-04-03 08:27:38 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2019-04-03 08:27:38 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2019-04-03 08:27:38 -<==      Total: 0
2019-04-03 08:27:38 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2019-04-03 08:27:38 -==> Parameters: 1(Long), 0(String)
2019-04-03 08:27:38 -<==      Total: 1
2019-04-03 08:27:38 -耗时 : 84
2019-04-03 08:27:38 -返回值 : com.bootdo.common.utils.PageUtils@2443a8e6
2019-04-03 08:27:38 -请求地址 : http://localhost:8081/main
2019-04-03 08:27:38 -HTTP METHOD : GET
2019-04-03 08:27:38 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 08:27:38 -参数 : []
2019-04-03 08:27:38 -耗时 : 1
2019-04-03 08:27:38 -返回值 : main
2019-04-03 08:27:39 -WebSocketSession[0 current WS(0)-HttpStream(0)-HttpPoll(0), 0 total, 0 closed abnormally (0 connect failure, 0 send limit, 0 transport error)], stompSubProtocol[processed CONNECT(0)-CONNECTED(0)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], outboundChannelpool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], sockJsScheduler[pool size = 3, active threads = 1, queued tasks = 1, completed tasks = 1]
2019-04-03 08:27:45 -==>  Preparing: select distinct m.perms from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id = ur.role_id where ur.user_id = ? 
2019-04-03 08:27:45 -==> Parameters: 1(Long)
2019-04-03 08:27:45 -<==      Total: 90
2019-04-03 08:27:45 -请求地址 : http://localhost:8081/charts/countDD
2019-04-03 08:27:45 -HTTP METHOD : GET
2019-04-03 08:27:45 -CLASS_METHOD : com.bootdo.charts.controller.countDDController.countDD
2019-04-03 08:27:45 -参数 : []
2019-04-03 08:27:45 -耗时 : 15
2019-04-03 08:27:45 -返回值 : charts/countDD
2019-04-03 08:27:46 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-03 08:27:46 -HTTP METHOD : GET
2019-04-03 08:27:46 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 08:27:46 -参数 : [userType]
2019-04-03 08:27:46 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 08:27:46 -==> Parameters: userType(String)
2019-04-03 08:27:46 -<==      Total: 2
2019-04-03 08:27:46 -耗时 : 103
2019-04-03 08:27:46 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 08:27:47 -请求地址 : http://localhost:8081/charts/countDD/tableDD
2019-04-03 08:27:47 -HTTP METHOD : POST
2019-04-03 08:27:47 -CLASS_METHOD : com.bootdo.charts.controller.countDDController.tableDD
2019-04-03 08:27:47 -参数 : []
2019-04-03 08:27:47 -耗时 : 0
2019-04-03 08:27:47 -返回值 : charts/tableDD
2019-04-03 08:27:47 -请求地址 : http://localhost:8081/login
2019-04-03 08:27:47 -HTTP METHOD : GET
2019-04-03 08:27:47 -CLASS_METHOD : com.bootdo.system.controller.LoginController.login
2019-04-03 08:27:47 -参数 : [{}]
2019-04-03 08:27:47 -耗时 : 1
2019-04-03 08:27:47 -返回值 : login
2019-04-03 08:27:47 -请求地址 : http://localhost:8081/getVerify
2019-04-03 08:27:47 -HTTP METHOD : GET
2019-04-03 08:27:47 -CLASS_METHOD : com.bootdo.system.controller.LoginController.getVerify
2019-04-03 08:27:47 -参数 : [org.apache.shiro.web.servlet.ShiroHttpServletRequest@6e58937e, org.apache.shiro.web.servlet.ShiroHttpServletResponse@506742a3]
2019-04-03 08:27:47 -9578
2019-04-03 08:27:47 -耗时 : 20
2019-04-03 08:27:47 -返回值 : null
2019-04-03 08:27:53 -请求地址 : http://localhost:8081/login
2019-04-03 08:27:53 -HTTP METHOD : POST
2019-04-03 08:27:53 -CLASS_METHOD : com.bootdo.system.controller.LoginController.ajaxLogin
2019-04-03 08:27:53 -参数 : [admin, 111111, 9578, org.apache.shiro.web.servlet.ShiroHttpServletRequest@724627c9]
2019-04-03 08:27:53 -==>  Preparing: select `user_id`,`username`,`name`,`password`,`dept_id`,`email`,`mobile`,`status`,`user_id_create`,`gmt_create`,`gmt_modified`,`sex`,`birth`,`pic_id`,`live_address`,`hobby`,`province`,`city`,`district` from sys_user WHERE username = ? order by user_id desc 
2019-04-03 08:27:53 -==> Parameters: admin(String)
2019-04-03 08:27:53 -<==      Total: 1
2019-04-03 08:27:53 -耗时 : 7
2019-04-03 08:27:53 -返回值 : {msg=操作成功, code=0}
2019-04-03 08:27:53 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 08:27:53 -==> Parameters: 1(Long), admin(String), 登录(String), 7(Integer), com.bootdo.system.controller.LoginController.ajaxLogin()(String), null, 127.0.0.1(String), 2019-04-03 08:27:53.969(Timestamp)
2019-04-03 08:27:53 -请求地址 : http://localhost:8081/index
2019-04-03 08:27:53 -HTTP METHOD : GET
2019-04-03 08:27:53 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2019-04-03 08:27:53 -参数 : [{}]
2019-04-03 08:27:54 -<==    Updates: 1
2019-04-03 08:27:54 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2019-04-03 08:27:54 -==> Parameters: 1(Long)
2019-04-03 08:27:54 -<==      Total: 46
2019-04-03 08:27:54 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2019-04-03 08:27:54 -==> Parameters: 138(Long)
2019-04-03 08:27:54 -<==      Total: 1
2019-04-03 08:27:54 -耗时 : 78
2019-04-03 08:27:54 -返回值 : index_v1
2019-04-03 08:27:54 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 08:27:54 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 78(Integer), com.bootdo.system.controller.LoginController.index()(String), {"menus":[{"attributes":{"icon":"fa fa-money","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-money","url":"/moneyList/moneyList"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"102","parentId":"106","text":"现金缴费"},{"attributes":{"icon":"fa fa-book","url":"/moneyLog/elecLog"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"107","parentId":"106","text":"缴费记录"}],"hasChildren":true,"hasParent":false,"id":"106","parentId":"0","text":"收费管理"},{"attributes":{"icon":"fa fa-lightbulb-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/elec/elec"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"121","parentId":"103","text":"电费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"elec/elecInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"122","parentId":"103","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"elec/elecUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"123","parentId":"103","text":"电表上传"},{"attributes":{"icon":"fa fa-cc","url":"/elec/elecPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"124","parentId":"103","text":"电价管理"}],"hasChildren":true,"hasParent":false,"id":"103","parentId":"0","text":"电费管理"},{"attributes":{"icon":"fa fa-tint","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/water/water"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"117","parentId":"105","text":"水费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"water/waterInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"118","parentId":"105","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"water/waterUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"119","parentId":"105","text":"水费生成"},{"attributes":{"icon":"fa fa-cc","url":"/water/waterPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"120","parentId":"105","text":"水价管理"}],"hasChildren":true,"hasParent":false,"id":"105","parentId":"0","text":"水费管理"},{"attributes":{"icon":"fa fa-fire","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/heat/heat"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"113","parentId":"104","text":"暖费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"heat/heatInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"114","parentId":"104","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"heat/heatUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"115","parentId":"104","text":"暖费生成"},{"attributes":{"icon":"","url":"/heat/heatPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"116","parentId":"104","text":"暖价管理"}],"hasChildren":true,"hasParent":false,"id":"104","parentId":"0","text":"暖费管理"},{"attributes":{"icon":"fa fa-vcard-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-bomb","url":"/print/print"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"149","parentId":"108","text":"票据记录"}],"hasChildren":true,"hasParent":false,"id":"108","parentId":"0","text":"票据管理"},{"attributes":{"icon":"fa fa-bar-chart","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-area-chart","url":"/chart/graph_echarts.html"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","text":"百度chart"},{"attributes":{"icon":"fa fa-sun-o","url":"charts/countDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"109","parentId":"97","text":"日统计报表"},{"attributes":{"icon":"fa fa-registered","url":"charts/countMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"110","parentId":"97","text":"月统计报表"},{"attributes":{"icon":"fa fa-money","url":"charts/countOwe"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"155","parentId":"97","text":"欠费报表图"},{"attributes":{"icon":"fa fa-support","url":"charts/countYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"111","parentId":"97","text":"年统计报表"},{"attributes":{"icon":"fa fa-tachometer","url":"charts/countRun"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"112","parentId":"97","text":"走势图报表"}],"hasChildren":true,"hasParent":false,"id":"97","parentId":"0","text":"统计管理"},{"attributes":{"icon":"fa fa-bars","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-book","url":"/common/dict"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"78","parentId":"1","text":"数据字典"},{"attributes":{"icon":"fa fa-folder-open","url":"/common/sysFile"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"71","parentId":"1","text":"文件管理"}],"h(String), 127.0.0.1(String), 2019-04-03 08:27:54.077(Timestamp)
2019-04-03 08:27:54 -请求地址 : http://localhost:8081/main
2019-04-03 08:27:54 -HTTP METHOD : GET
2019-04-03 08:27:54 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 08:27:54 -参数 : []
2019-04-03 08:27:54 -耗时 : 0
2019-04-03 08:27:54 -返回值 : main
2019-04-03 08:27:54 -<==    Updates: 1
2019-04-03 08:27:54 -请求地址 : http://localhost:8081/oa/notify/message
2019-04-03 08:27:54 -HTTP METHOD : GET
2019-04-03 08:27:54 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2019-04-03 08:27:54 -参数 : []
2019-04-03 08:27:54 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2019-04-03 08:27:54 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2019-04-03 08:27:54 -<==      Total: 0
2019-04-03 08:27:54 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2019-04-03 08:27:54 -==> Parameters: 1(Long), 0(String)
2019-04-03 08:27:54 -<==      Total: 1
2019-04-03 08:27:54 -耗时 : 12
2019-04-03 08:27:54 -返回值 : com.bootdo.common.utils.PageUtils@72cbfb6b
2019-04-03 08:27:54 -请求地址 : http://localhost:8081/main
2019-04-03 08:27:54 -HTTP METHOD : GET
2019-04-03 08:27:54 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 08:27:54 -参数 : []
2019-04-03 08:27:54 -耗时 : 0
2019-04-03 08:27:54 -返回值 : main
2019-04-03 08:28:09 -==>  Preparing: select distinct m.perms from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id = ur.role_id where ur.user_id = ? 
2019-04-03 08:28:09 -==> Parameters: 1(Long)
2019-04-03 08:28:09 -<==      Total: 90
2019-04-03 08:28:09 -请求地址 : http://localhost:8081/elec/elec
2019-04-03 08:28:09 -HTTP METHOD : GET
2019-04-03 08:28:09 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.Elec
2019-04-03 08:28:09 -参数 : []
2019-04-03 08:28:09 -耗时 : 0
2019-04-03 08:28:09 -返回值 : elec/elec/elec
2019-04-03 08:28:10 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-03 08:28:10 -HTTP METHOD : GET
2019-04-03 08:28:10 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 08:28:10 -参数 : [userType]
2019-04-03 08:28:10 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 08:28:10 -==> Parameters: userType(String)
2019-04-03 08:28:10 -<==      Total: 2
2019-04-03 08:28:10 -耗时 : 6
2019-04-03 08:28:10 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 08:28:10 -请求地址 : http://localhost:8081/elec/elec/list
2019-04-03 08:28:10 -HTTP METHOD : GET
2019-04-03 08:28:10 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.list
2019-04-03 08:28:10 -参数 : [{limit=10, offset=0, userType=, userOrg=, userId=, createTime=, queryType=1}, com.bootdo.elec.domain.ElecDO@3fd220ac]
2019-04-03 08:28:10 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec order by id asc limit ?, ? 
2019-04-03 08:28:10 -==> Parameters: 0(Integer), 10(Integer)
2019-04-03 08:28:10 -<==      Total: 10
2019-04-03 08:28:10 -==>  Preparing: select count(*) from elec 
2019-04-03 08:28:10 -==> Parameters: 
2019-04-03 08:28:10 -<==      Total: 1
2019-04-03 08:28:10 -耗时 : 119
2019-04-03 08:28:10 -返回值 : com.bootdo.common.utils.PageUtils@4c2cfcb0
2019-04-03 08:28:12 -请求地址 : http://localhost:8081/elec/elecPrice
2019-04-03 08:28:12 -HTTP METHOD : GET
2019-04-03 08:28:12 -CLASS_METHOD : com.bootdo.elec.controller.ElecPriceController.ElecPrice
2019-04-03 08:28:12 -参数 : []
2019-04-03 08:28:12 -耗时 : 0
2019-04-03 08:28:12 -返回值 : elec/elecPrice/elecPrice
2019-04-03 08:28:13 -请求地址 : http://localhost:8081/elec/elecPrice/list
2019-04-03 08:28:13 -HTTP METHOD : GET
2019-04-03 08:28:13 -CLASS_METHOD : com.bootdo.elec.controller.ElecPriceController.list
2019-04-03 08:28:13 -参数 : [{limit=10, offset=0}]
2019-04-03 08:28:13 -==>  Preparing: select `id`,`elec_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `elec_org`) AS elecOrgName,`business_elec`,`civil_elec`,`noindustry_elec`,`industry_elec`,`special_1`,`special_2`,`special_3`,`special_4`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec_price order by id desc limit ?, ? 
2019-04-03 08:28:13 -==> Parameters: 0(Integer), 10(Integer)
2019-04-03 08:28:13 -<==      Total: 2
2019-04-03 08:28:13 -==>  Preparing: select count(*) from elec_price 
2019-04-03 08:28:13 -==> Parameters: 
2019-04-03 08:28:13 -<==      Total: 1
2019-04-03 08:28:13 -耗时 : 177
2019-04-03 08:28:13 -返回值 : com.bootdo.common.utils.PageUtils@38323345
2019-04-03 08:28:21 -请求地址 : http://localhost:8081/elec/elecPrice/edit/1
2019-04-03 08:28:21 -HTTP METHOD : GET
2019-04-03 08:28:21 -CLASS_METHOD : com.bootdo.elec.controller.ElecPriceController.edit
2019-04-03 08:28:21 -参数 : [1, {}]
2019-04-03 08:28:21 -==>  Preparing: select `id`, `elec_org`, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `elec_org`) AS elecOrgName, `business_elec`, `civil_elec`, `noindustry_elec`, `industry_elec`, `special_1`, `special_2`, `special_3`, `special_4`, `create_time`, `create_by`, `update_time`, `update_by`, `remark` from elec_price where id = ? 
2019-04-03 08:28:21 -==> Parameters: 1(Long)
2019-04-03 08:28:21 -<==      Total: 1
2019-04-03 08:28:21 -耗时 : 7
2019-04-03 08:28:21 -返回值 : elec/elecPrice/edit
2019-04-03 08:28:29 -请求地址 : http://localhost:8081/elec/elecPrice/update
2019-04-03 08:28:29 -HTTP METHOD : POST
2019-04-03 08:28:29 -CLASS_METHOD : com.bootdo.elec.controller.ElecPriceController.update
2019-04-03 08:28:29 -参数 : [com.bootdo.elec.domain.ElecPriceDO@49d9715a]
2019-04-03 08:28:29 -==>  Preparing: update elec_price set elec_org = ?, business_elec = ?, civil_elec = ?, noindustry_elec = ?, industry_elec = ?, special_1 = ?, special_2 = ?, special_3 = ?, special_4 = ?, create_by = ?, update_time = ?, remark = ? where id = ? 
2019-04-03 08:28:29 -==> Parameters: 2(Long), 0.47(BigDecimal), 8.00(BigDecimal), 8.00(BigDecimal), 7.00(BigDecimal), 6.00(BigDecimal), 0.50(BigDecimal), 0.50(BigDecimal), 0.50(BigDecimal), 1(Long), 2019-04-03 08:28:29.739(Timestamp), 0.5(String), 1(Long)
2019-04-03 08:28:29 -<==    Updates: 1
2019-04-03 08:28:29 -耗时 : 103
2019-04-03 08:28:29 -返回值 : {msg=操作成功, code=0}
2019-04-03 08:28:29 -请求地址 : http://localhost:8081/elec/elecPrice/list
2019-04-03 08:28:29 -HTTP METHOD : GET
2019-04-03 08:28:29 -CLASS_METHOD : com.bootdo.elec.controller.ElecPriceController.list
2019-04-03 08:28:29 -参数 : [{limit=10, offset=0}]
2019-04-03 08:28:29 -==>  Preparing: select `id`,`elec_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `elec_org`) AS elecOrgName,`business_elec`,`civil_elec`,`noindustry_elec`,`industry_elec`,`special_1`,`special_2`,`special_3`,`special_4`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec_price order by id desc limit ?, ? 
2019-04-03 08:28:29 -==> Parameters: 0(Integer), 10(Integer)
2019-04-03 08:28:29 -<==      Total: 2
2019-04-03 08:28:29 -==>  Preparing: select count(*) from elec_price 
2019-04-03 08:28:29 -==> Parameters: 
2019-04-03 08:28:29 -<==      Total: 1
2019-04-03 08:28:29 -耗时 : 9
2019-04-03 08:28:29 -返回值 : com.bootdo.common.utils.PageUtils@5def09a8
2019-04-03 08:28:30 -Failed to invoke @ExceptionHandler method: public java.lang.Object com.bootdo.common.exception.BDExceptionHandler.handleException(java.lang.Exception,javax.servlet.http.HttpServletRequest)
org.apache.shiro.UnavailableSecurityManagerException: No SecurityManager accessible to the calling code, either bound to the org.apache.shiro.util.ThreadContext or as a vm static singleton.  This is an invalid application configuration.
	at org.apache.shiro.SecurityUtils.getSecurityManager(SecurityUtils.java:123)
	at org.apache.shiro.subject.Subject$Builder.<init>(Subject.java:627)
	at org.apache.shiro.SecurityUtils.getSubject(SecurityUtils.java:56)
	at com.bootdo.common.utils.ShiroUtils.getSubjct(ShiroUtils.java:23)
	at com.bootdo.common.utils.ShiroUtils.getUser(ShiroUtils.java:26)
	at com.bootdo.common.exception.BDExceptionHandler.handleException(BDExceptionHandler.java:75)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:209)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver.doResolveHandlerMethodException(ExceptionHandlerExceptionResolver.java:404)
	at org.springframework.web.servlet.handler.AbstractHandlerMethodExceptionResolver.doResolveException(AbstractHandlerMethodExceptionResolver.java:61)
	at org.springframework.web.servlet.handler.AbstractHandlerExceptionResolver.resolveException(AbstractHandlerExceptionResolver.java:139)
	at org.springframework.web.servlet.handler.HandlerExceptionResolverComposite.resolveException(HandlerExceptionResolverComposite.java:78)
	at org.springframework.web.servlet.DispatcherServlet.processHandlerException(DispatcherServlet.java:1255)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1062)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1008)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:925)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:974)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:877)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:661)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:851)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:728)
	at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:591)
	at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:527)
	at org.apache.catalina.core.StandardHostValve.custom(StandardHostValve.java:389)
	at org.apache.catalina.core.StandardHostValve.status(StandardHostValve.java:254)
	at org.apache.catalina.core.StandardHostValve.throwable(StandardHostValve.java:349)
	at org.apache.catalina.core.AsyncContextImpl.setErrorState(AsyncContextImpl.java:424)
	at org.apache.catalina.connector.CoyoteAdapter.asyncDispatch(CoyoteAdapter.java:176)
	at org.apache.coyote.AbstractProcessor.dispatch(AbstractProcessor.java:232)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:53)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:790)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1468)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Unknown Source)
2019-04-03 08:28:55 -请求地址 : http://localhost:8081/index
2019-04-03 08:28:55 -HTTP METHOD : GET
2019-04-03 08:28:55 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2019-04-03 08:28:55 -参数 : [{}]
2019-04-03 08:28:55 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2019-04-03 08:28:55 -==> Parameters: 1(Long)
2019-04-03 08:28:55 -<==      Total: 46
2019-04-03 08:28:55 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2019-04-03 08:28:55 -==> Parameters: 138(Long)
2019-04-03 08:28:55 -<==      Total: 1
2019-04-03 08:28:55 -耗时 : 25
2019-04-03 08:28:55 -返回值 : index_v1
2019-04-03 08:28:56 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 08:28:56 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 25(Integer), com.bootdo.system.controller.LoginController.index()(String), {"menus":[{"attributes":{"icon":"fa fa-money","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-money","url":"/moneyList/moneyList"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"102","parentId":"106","text":"现金缴费"},{"attributes":{"icon":"fa fa-book","url":"/moneyLog/elecLog"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"107","parentId":"106","text":"缴费记录"}],"hasChildren":true,"hasParent":false,"id":"106","parentId":"0","text":"收费管理"},{"attributes":{"icon":"fa fa-lightbulb-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/elec/elec"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"121","parentId":"103","text":"电费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"elec/elecInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"122","parentId":"103","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"elec/elecUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"123","parentId":"103","text":"电表上传"},{"attributes":{"icon":"fa fa-cc","url":"/elec/elecPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"124","parentId":"103","text":"电价管理"}],"hasChildren":true,"hasParent":false,"id":"103","parentId":"0","text":"电费管理"},{"attributes":{"icon":"fa fa-tint","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/water/water"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"117","parentId":"105","text":"水费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"water/waterInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"118","parentId":"105","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"water/waterUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"119","parentId":"105","text":"水费生成"},{"attributes":{"icon":"fa fa-cc","url":"/water/waterPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"120","parentId":"105","text":"水价管理"}],"hasChildren":true,"hasParent":false,"id":"105","parentId":"0","text":"水费管理"},{"attributes":{"icon":"fa fa-fire","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/heat/heat"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"113","parentId":"104","text":"暖费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"heat/heatInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"114","parentId":"104","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"heat/heatUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"115","parentId":"104","text":"暖费生成"},{"attributes":{"icon":"","url":"/heat/heatPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"116","parentId":"104","text":"暖价管理"}],"hasChildren":true,"hasParent":false,"id":"104","parentId":"0","text":"暖费管理"},{"attributes":{"icon":"fa fa-vcard-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-bomb","url":"/print/print"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"149","parentId":"108","text":"票据记录"}],"hasChildren":true,"hasParent":false,"id":"108","parentId":"0","text":"票据管理"},{"attributes":{"icon":"fa fa-bar-chart","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-area-chart","url":"/chart/graph_echarts.html"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","text":"百度chart"},{"attributes":{"icon":"fa fa-sun-o","url":"charts/countDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"109","parentId":"97","text":"日统计报表"},{"attributes":{"icon":"fa fa-registered","url":"charts/countMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"110","parentId":"97","text":"月统计报表"},{"attributes":{"icon":"fa fa-money","url":"charts/countOwe"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"155","parentId":"97","text":"欠费报表图"},{"attributes":{"icon":"fa fa-support","url":"charts/countYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"111","parentId":"97","text":"年统计报表"},{"attributes":{"icon":"fa fa-tachometer","url":"charts/countRun"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"112","parentId":"97","text":"走势图报表"}],"hasChildren":true,"hasParent":false,"id":"97","parentId":"0","text":"统计管理"},{"attributes":{"icon":"fa fa-bars","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-book","url":"/common/dict"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"78","parentId":"1","text":"数据字典"},{"attributes":{"icon":"fa fa-folder-open","url":"/common/sysFile"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"71","parentId":"1","text":"文件管理"}],"h(String), 127.0.0.1(String), 2019-04-03 08:28:55.992(Timestamp)
2019-04-03 08:28:56 -请求地址 : http://localhost:8081/main
2019-04-03 08:28:56 -HTTP METHOD : GET
2019-04-03 08:28:56 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 08:28:56 -参数 : []
2019-04-03 08:28:56 -耗时 : 2
2019-04-03 08:28:56 -返回值 : main
2019-04-03 08:28:56 -<==    Updates: 1
2019-04-03 08:28:56 -请求地址 : http://localhost:8081/oa/notify/message
2019-04-03 08:28:56 -HTTP METHOD : GET
2019-04-03 08:28:56 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2019-04-03 08:28:56 -参数 : []
2019-04-03 08:28:56 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2019-04-03 08:28:56 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2019-04-03 08:28:56 -<==      Total: 0
2019-04-03 08:28:56 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2019-04-03 08:28:56 -==> Parameters: 1(Long), 0(String)
2019-04-03 08:28:56 -<==      Total: 1
2019-04-03 08:28:56 -耗时 : 11
2019-04-03 08:28:56 -返回值 : com.bootdo.common.utils.PageUtils@ca67ca5
2019-04-03 08:28:56 -请求地址 : http://localhost:8081/main
2019-04-03 08:28:56 -HTTP METHOD : GET
2019-04-03 08:28:56 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 08:28:56 -参数 : []
2019-04-03 08:28:56 -耗时 : 2
2019-04-03 08:28:56 -返回值 : main
2019-04-03 08:28:57 -请求地址 : http://localhost:8081/elec/elec
2019-04-03 08:28:57 -HTTP METHOD : GET
2019-04-03 08:28:57 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.Elec
2019-04-03 08:28:57 -参数 : []
2019-04-03 08:28:57 -耗时 : 1
2019-04-03 08:28:57 -返回值 : elec/elec/elec
2019-04-03 08:28:58 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-03 08:28:58 -HTTP METHOD : GET
2019-04-03 08:28:58 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 08:28:58 -参数 : [userType]
2019-04-03 08:28:58 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 08:28:58 -==> Parameters: userType(String)
2019-04-03 08:28:58 -<==      Total: 2
2019-04-03 08:28:58 -耗时 : 5
2019-04-03 08:28:58 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 08:28:58 -请求地址 : http://localhost:8081/elec/elec/list
2019-04-03 08:28:58 -HTTP METHOD : GET
2019-04-03 08:28:58 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.list
2019-04-03 08:28:58 -参数 : [{limit=10, offset=0, userType=, userOrg=, userId=, createTime=, queryType=1}, com.bootdo.elec.domain.ElecDO@1278651c]
2019-04-03 08:28:58 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec order by id asc limit ?, ? 
2019-04-03 08:28:58 -==> Parameters: 0(Integer), 10(Integer)
2019-04-03 08:28:58 -<==      Total: 10
2019-04-03 08:28:58 -==>  Preparing: select count(*) from elec 
2019-04-03 08:28:58 -==> Parameters: 
2019-04-03 08:28:58 -<==      Total: 1
2019-04-03 08:28:58 -耗时 : 23
2019-04-03 08:28:58 -返回值 : com.bootdo.common.utils.PageUtils@691ac951
2019-04-03 08:29:36 -Failed to invoke @ExceptionHandler method: public java.lang.Object com.bootdo.common.exception.BDExceptionHandler.handleException(java.lang.Exception,javax.servlet.http.HttpServletRequest)
org.apache.shiro.UnavailableSecurityManagerException: No SecurityManager accessible to the calling code, either bound to the org.apache.shiro.util.ThreadContext or as a vm static singleton.  This is an invalid application configuration.
	at org.apache.shiro.SecurityUtils.getSecurityManager(SecurityUtils.java:123)
	at org.apache.shiro.subject.Subject$Builder.<init>(Subject.java:627)
	at org.apache.shiro.SecurityUtils.getSubject(SecurityUtils.java:56)
	at com.bootdo.common.utils.ShiroUtils.getSubjct(ShiroUtils.java:23)
	at com.bootdo.common.utils.ShiroUtils.getUser(ShiroUtils.java:26)
	at com.bootdo.common.exception.BDExceptionHandler.handleException(BDExceptionHandler.java:75)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:209)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver.doResolveHandlerMethodException(ExceptionHandlerExceptionResolver.java:404)
	at org.springframework.web.servlet.handler.AbstractHandlerMethodExceptionResolver.doResolveException(AbstractHandlerMethodExceptionResolver.java:61)
	at org.springframework.web.servlet.handler.AbstractHandlerExceptionResolver.resolveException(AbstractHandlerExceptionResolver.java:139)
	at org.springframework.web.servlet.handler.HandlerExceptionResolverComposite.resolveException(HandlerExceptionResolverComposite.java:78)
	at org.springframework.web.servlet.DispatcherServlet.processHandlerException(DispatcherServlet.java:1255)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1062)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1008)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:925)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:974)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:877)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:661)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:851)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:728)
	at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:591)
	at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:527)
	at org.apache.catalina.core.StandardHostValve.custom(StandardHostValve.java:389)
	at org.apache.catalina.core.StandardHostValve.status(StandardHostValve.java:254)
	at org.apache.catalina.core.StandardHostValve.throwable(StandardHostValve.java:349)
	at org.apache.catalina.core.AsyncContextImpl.setErrorState(AsyncContextImpl.java:424)
	at org.apache.catalina.connector.CoyoteAdapter.asyncDispatch(CoyoteAdapter.java:176)
	at org.apache.coyote.AbstractProcessor.dispatch(AbstractProcessor.java:232)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:53)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:790)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1468)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Unknown Source)
2019-04-03 08:29:44 -请求地址 : http://localhost:8081/index
2019-04-03 08:29:44 -HTTP METHOD : GET
2019-04-03 08:29:44 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2019-04-03 08:29:44 -参数 : [{}]
2019-04-03 08:29:44 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2019-04-03 08:29:44 -==> Parameters: 1(Long)
2019-04-03 08:29:44 -<==      Total: 46
2019-04-03 08:29:44 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2019-04-03 08:29:44 -==> Parameters: 138(Long)
2019-04-03 08:29:44 -<==      Total: 1
2019-04-03 08:29:44 -耗时 : 30
2019-04-03 08:29:44 -返回值 : index_v1
2019-04-03 08:29:44 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 08:29:44 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 31(Integer), com.bootdo.system.controller.LoginController.index()(String), {"menus":[{"attributes":{"icon":"fa fa-money","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-money","url":"/moneyList/moneyList"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"102","parentId":"106","text":"现金缴费"},{"attributes":{"icon":"fa fa-book","url":"/moneyLog/elecLog"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"107","parentId":"106","text":"缴费记录"}],"hasChildren":true,"hasParent":false,"id":"106","parentId":"0","text":"收费管理"},{"attributes":{"icon":"fa fa-lightbulb-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/elec/elec"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"121","parentId":"103","text":"电费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"elec/elecInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"122","parentId":"103","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"elec/elecUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"123","parentId":"103","text":"电表上传"},{"attributes":{"icon":"fa fa-cc","url":"/elec/elecPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"124","parentId":"103","text":"电价管理"}],"hasChildren":true,"hasParent":false,"id":"103","parentId":"0","text":"电费管理"},{"attributes":{"icon":"fa fa-tint","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/water/water"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"117","parentId":"105","text":"水费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"water/waterInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"118","parentId":"105","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"water/waterUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"119","parentId":"105","text":"水费生成"},{"attributes":{"icon":"fa fa-cc","url":"/water/waterPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"120","parentId":"105","text":"水价管理"}],"hasChildren":true,"hasParent":false,"id":"105","parentId":"0","text":"水费管理"},{"attributes":{"icon":"fa fa-fire","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/heat/heat"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"113","parentId":"104","text":"暖费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"heat/heatInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"114","parentId":"104","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"heat/heatUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"115","parentId":"104","text":"暖费生成"},{"attributes":{"icon":"","url":"/heat/heatPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"116","parentId":"104","text":"暖价管理"}],"hasChildren":true,"hasParent":false,"id":"104","parentId":"0","text":"暖费管理"},{"attributes":{"icon":"fa fa-vcard-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-bomb","url":"/print/print"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"149","parentId":"108","text":"票据记录"}],"hasChildren":true,"hasParent":false,"id":"108","parentId":"0","text":"票据管理"},{"attributes":{"icon":"fa fa-bar-chart","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-area-chart","url":"/chart/graph_echarts.html"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","text":"百度chart"},{"attributes":{"icon":"fa fa-sun-o","url":"charts/countDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"109","parentId":"97","text":"日统计报表"},{"attributes":{"icon":"fa fa-registered","url":"charts/countMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"110","parentId":"97","text":"月统计报表"},{"attributes":{"icon":"fa fa-money","url":"charts/countOwe"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"155","parentId":"97","text":"欠费报表图"},{"attributes":{"icon":"fa fa-support","url":"charts/countYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"111","parentId":"97","text":"年统计报表"},{"attributes":{"icon":"fa fa-tachometer","url":"charts/countRun"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"112","parentId":"97","text":"走势图报表"}],"hasChildren":true,"hasParent":false,"id":"97","parentId":"0","text":"统计管理"},{"attributes":{"icon":"fa fa-bars","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-book","url":"/common/dict"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"78","parentId":"1","text":"数据字典"},{"attributes":{"icon":"fa fa-folder-open","url":"/common/sysFile"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"71","parentId":"1","text":"文件管理"}],"h(String), 127.0.0.1(String), 2019-04-03 08:29:44.661(Timestamp)
2019-04-03 08:29:44 -请求地址 : http://localhost:8081/main
2019-04-03 08:29:44 -HTTP METHOD : GET
2019-04-03 08:29:44 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 08:29:44 -参数 : []
2019-04-03 08:29:44 -耗时 : 1
2019-04-03 08:29:44 -返回值 : main
2019-04-03 08:29:44 -<==    Updates: 1
2019-04-03 08:29:45 -请求地址 : http://localhost:8081/oa/notify/message
2019-04-03 08:29:45 -HTTP METHOD : GET
2019-04-03 08:29:45 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2019-04-03 08:29:45 -参数 : []
2019-04-03 08:29:45 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2019-04-03 08:29:45 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2019-04-03 08:29:45 -<==      Total: 0
2019-04-03 08:29:45 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2019-04-03 08:29:45 -==> Parameters: 1(Long), 0(String)
2019-04-03 08:29:45 -<==      Total: 1
2019-04-03 08:29:45 -耗时 : 9
2019-04-03 08:29:45 -返回值 : com.bootdo.common.utils.PageUtils@5c7361e1
2019-04-03 08:29:45 -请求地址 : http://localhost:8081/main
2019-04-03 08:29:45 -HTTP METHOD : GET
2019-04-03 08:29:45 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 08:29:45 -参数 : []
2019-04-03 08:29:45 -耗时 : 4
2019-04-03 08:29:45 -返回值 : main
2019-04-03 08:29:48 -请求地址 : http://localhost:8081/elec/elec
2019-04-03 08:29:48 -HTTP METHOD : GET
2019-04-03 08:29:48 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.Elec
2019-04-03 08:29:48 -参数 : []
2019-04-03 08:29:48 -耗时 : 1
2019-04-03 08:29:48 -返回值 : elec/elec/elec
2019-04-03 08:29:48 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-03 08:29:48 -HTTP METHOD : GET
2019-04-03 08:29:48 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 08:29:48 -参数 : [userType]
2019-04-03 08:29:48 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 08:29:48 -==> Parameters: userType(String)
2019-04-03 08:29:48 -<==      Total: 2
2019-04-03 08:29:48 -耗时 : 5
2019-04-03 08:29:48 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 08:29:48 -请求地址 : http://localhost:8081/elec/elec/list
2019-04-03 08:29:48 -HTTP METHOD : GET
2019-04-03 08:29:48 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.list
2019-04-03 08:29:48 -参数 : [{limit=10, offset=0, userType=, userOrg=, userId=, createTime=, queryType=1}, com.bootdo.elec.domain.ElecDO@56631157]
2019-04-03 08:29:48 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec order by id asc limit ?, ? 
2019-04-03 08:29:48 -==> Parameters: 0(Integer), 10(Integer)
2019-04-03 08:29:48 -<==      Total: 10
2019-04-03 08:29:48 -==>  Preparing: select count(*) from elec 
2019-04-03 08:29:48 -==> Parameters: 
2019-04-03 08:29:48 -<==      Total: 1
2019-04-03 08:29:48 -耗时 : 10
2019-04-03 08:29:48 -返回值 : com.bootdo.common.utils.PageUtils@cc760a5
2019-04-03 08:30:18 -请求地址 : http://localhost:8081/elec/elec/edit/1
2019-04-03 08:30:18 -HTTP METHOD : GET
2019-04-03 08:30:18 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.edit
2019-04-03 08:30:18 -参数 : [1, {}]
2019-04-03 08:30:18 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, `user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec where id = ? 
2019-04-03 08:30:18 -==> Parameters: 1(Long)
2019-04-03 08:30:18 -<==      Total: 1
2019-04-03 08:30:18 -耗时 : 11
2019-04-03 08:30:18 -返回值 : elec/elec/edit
2019-04-03 08:30:18 -请求地址 : http://localhost:8081/common/dict/list/userState
2019-04-03 08:30:18 -HTTP METHOD : GET
2019-04-03 08:30:18 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 08:30:18 -参数 : [userState]
2019-04-03 08:30:18 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 08:30:18 -==> Parameters: userState(String)
2019-04-03 08:30:18 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-03 08:30:18 -请求地址 : http://localhost:8081/common/dict/list/elecType
2019-04-03 08:30:18 -HTTP METHOD : GET
2019-04-03 08:30:18 -HTTP METHOD : GET
2019-04-03 08:30:18 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 08:30:18 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 08:30:18 -参数 : [userType]
2019-04-03 08:30:18 -参数 : [elecType]
2019-04-03 08:30:18 -<==      Total: 2
2019-04-03 08:30:18 -耗时 : 6
2019-04-03 08:30:18 -返回值 : [DictDO{id=126, name='使用中', value='1', type='userState', description='用户状态', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=125, name='未使用', value='0', type='userState', description='用户状态', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 08:30:18 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 08:30:18 -==> Parameters: elecType(String)
2019-04-03 08:30:18 -<==      Total: 2
2019-04-03 08:30:18 -耗时 : 15
2019-04-03 08:30:18 -返回值 : [DictDO{id=139, name='民用电', value='1', type='elecType', description='电量性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=138, name='商业电', value='0', type='elecType', description='电量类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 08:30:18 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 08:30:18 -==> Parameters: userType(String)
2019-04-03 08:30:18 -<==      Total: 2
2019-04-03 08:30:18 -耗时 : 36
2019-04-03 08:30:18 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 08:30:24 -请求地址 : http://localhost:8081/elec/elec/update
2019-04-03 08:30:24 -HTTP METHOD : POST
2019-04-03 08:30:24 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.update
2019-04-03 08:30:24 -参数 : [com.bootdo.elec.domain.ElecDO@42e021c3]
2019-04-03 08:30:24 -==>  Preparing: update elec SET `user_id` = ?, `user_name` = ?, `user_type` = ?, `user_org` = ?, `user_tell` = ?, `user_state` = ?, `wages_id` = ?, `elec_type` = ?, `start` = ?, `end` = ?, `hu` = ?, `elec_amount` = ?, `elec_cost` = ?, `elec_sum` = ?, `create_time` = ?, `create_by` = ?, `update_time` = ?, `update_by` = ?, `remark` = ? where id = ? 
2019-04-03 08:30:24 -==> Parameters: 1-0001(String), 李文英(String), B(String), 3(String), 15815564567(String), 1(String), 1001(String), 1(String), 100(String), 250(String), 1(Integer), 100.00(BigDecimal), 100.00(BigDecimal), -100.00(BigDecimal), 2019-02(String), 1(Long), 2019-04-03 08:30:24.879(Timestamp), 1(Long), (String), 1(Long)
2019-04-03 08:30:25 -<==    Updates: 1
2019-04-03 08:30:25 -耗时 : 160
2019-04-03 08:30:25 -返回值 : {msg=操作成功, code=0}
2019-04-03 08:30:25 -请求地址 : http://localhost:8081/elec/elec/list
2019-04-03 08:30:25 -HTTP METHOD : GET
2019-04-03 08:30:25 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.list
2019-04-03 08:30:25 -参数 : [{limit=10, offset=0, userType=, userOrg=, userId=, createTime=, queryType=2}, com.bootdo.elec.domain.ElecDO@40c27fbd]
2019-04-03 08:30:25 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec WHERE `elec_sum` < 0 order by id asc limit ?, ? 
2019-04-03 08:30:25 -==> Parameters: 0(Integer), 10(Integer)
2019-04-03 08:30:25 -<==      Total: 2
2019-04-03 08:30:25 -==>  Preparing: select count(*) from elec WHERE `elec_sum` < 0 
2019-04-03 08:30:25 -==> Parameters: 
2019-04-03 08:30:25 -<==      Total: 1
2019-04-03 08:30:25 -耗时 : 55
2019-04-03 08:30:25 -返回值 : com.bootdo.common.utils.PageUtils@5cec9002
2019-04-03 08:30:34 -请求地址 : http://localhost:8081/index
2019-04-03 08:30:34 -HTTP METHOD : GET
2019-04-03 08:30:34 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2019-04-03 08:30:34 -参数 : [{}]
2019-04-03 08:30:34 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2019-04-03 08:30:34 -==> Parameters: 1(Long)
2019-04-03 08:30:34 -<==      Total: 46
2019-04-03 08:30:34 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2019-04-03 08:30:34 -==> Parameters: 138(Long)
2019-04-03 08:30:34 -<==      Total: 1
2019-04-03 08:30:34 -耗时 : 105
2019-04-03 08:30:34 -返回值 : index_v1
2019-04-03 08:30:34 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 08:30:34 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 105(Integer), com.bootdo.system.controller.LoginController.index()(String), {"menus":[{"attributes":{"icon":"fa fa-money","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-money","url":"/moneyList/moneyList"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"102","parentId":"106","text":"现金缴费"},{"attributes":{"icon":"fa fa-book","url":"/moneyLog/elecLog"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"107","parentId":"106","text":"缴费记录"}],"hasChildren":true,"hasParent":false,"id":"106","parentId":"0","text":"收费管理"},{"attributes":{"icon":"fa fa-lightbulb-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/elec/elec"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"121","parentId":"103","text":"电费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"elec/elecInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"122","parentId":"103","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"elec/elecUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"123","parentId":"103","text":"电表上传"},{"attributes":{"icon":"fa fa-cc","url":"/elec/elecPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"124","parentId":"103","text":"电价管理"}],"hasChildren":true,"hasParent":false,"id":"103","parentId":"0","text":"电费管理"},{"attributes":{"icon":"fa fa-tint","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/water/water"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"117","parentId":"105","text":"水费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"water/waterInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"118","parentId":"105","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"water/waterUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"119","parentId":"105","text":"水费生成"},{"attributes":{"icon":"fa fa-cc","url":"/water/waterPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"120","parentId":"105","text":"水价管理"}],"hasChildren":true,"hasParent":false,"id":"105","parentId":"0","text":"水费管理"},{"attributes":{"icon":"fa fa-fire","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/heat/heat"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"113","parentId":"104","text":"暖费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"heat/heatInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"114","parentId":"104","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"heat/heatUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"115","parentId":"104","text":"暖费生成"},{"attributes":{"icon":"","url":"/heat/heatPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"116","parentId":"104","text":"暖价管理"}],"hasChildren":true,"hasParent":false,"id":"104","parentId":"0","text":"暖费管理"},{"attributes":{"icon":"fa fa-vcard-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-bomb","url":"/print/print"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"149","parentId":"108","text":"票据记录"}],"hasChildren":true,"hasParent":false,"id":"108","parentId":"0","text":"票据管理"},{"attributes":{"icon":"fa fa-bar-chart","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-area-chart","url":"/chart/graph_echarts.html"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","text":"百度chart"},{"attributes":{"icon":"fa fa-sun-o","url":"charts/countDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"109","parentId":"97","text":"日统计报表"},{"attributes":{"icon":"fa fa-registered","url":"charts/countMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"110","parentId":"97","text":"月统计报表"},{"attributes":{"icon":"fa fa-money","url":"charts/countOwe"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"155","parentId":"97","text":"欠费报表图"},{"attributes":{"icon":"fa fa-support","url":"charts/countYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"111","parentId":"97","text":"年统计报表"},{"attributes":{"icon":"fa fa-tachometer","url":"charts/countRun"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"112","parentId":"97","text":"走势图报表"}],"hasChildren":true,"hasParent":false,"id":"97","parentId":"0","text":"统计管理"},{"attributes":{"icon":"fa fa-bars","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-book","url":"/common/dict"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"78","parentId":"1","text":"数据字典"},{"attributes":{"icon":"fa fa-folder-open","url":"/common/sysFile"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"71","parentId":"1","text":"文件管理"}],"h(String), 127.0.0.1(String), 2019-04-03 08:30:34.294(Timestamp)
2019-04-03 08:30:34 -<==    Updates: 1
2019-04-03 08:30:34 -请求地址 : http://localhost:8081/main
2019-04-03 08:30:34 -HTTP METHOD : GET
2019-04-03 08:30:34 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 08:30:34 -参数 : []
2019-04-03 08:30:34 -耗时 : 1
2019-04-03 08:30:34 -返回值 : main
2019-04-03 08:30:34 -请求地址 : http://localhost:8081/oa/notify/message
2019-04-03 08:30:34 -HTTP METHOD : GET
2019-04-03 08:30:34 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2019-04-03 08:30:34 -参数 : []
2019-04-03 08:30:34 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2019-04-03 08:30:34 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2019-04-03 08:30:34 -<==      Total: 0
2019-04-03 08:30:34 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2019-04-03 08:30:34 -==> Parameters: 1(Long), 0(String)
2019-04-03 08:30:34 -<==      Total: 1
2019-04-03 08:30:34 -耗时 : 26
2019-04-03 08:30:34 -返回值 : com.bootdo.common.utils.PageUtils@3798b7e8
2019-04-03 08:30:34 -请求地址 : http://localhost:8081/main
2019-04-03 08:30:34 -HTTP METHOD : GET
2019-04-03 08:30:34 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 08:30:34 -参数 : []
2019-04-03 08:30:34 -耗时 : 2
2019-04-03 08:30:34 -返回值 : main
2019-04-03 08:30:38 -请求地址 : http://localhost:8081/elec/elec
2019-04-03 08:30:38 -HTTP METHOD : GET
2019-04-03 08:30:38 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.Elec
2019-04-03 08:30:38 -参数 : []
2019-04-03 08:30:38 -耗时 : 1
2019-04-03 08:30:38 -返回值 : elec/elec/elec
2019-04-03 08:30:38 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-03 08:30:38 -HTTP METHOD : GET
2019-04-03 08:30:38 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 08:30:38 -参数 : [userType]
2019-04-03 08:30:38 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 08:30:38 -==> Parameters: userType(String)
2019-04-03 08:30:38 -请求地址 : http://localhost:8081/elec/elec/list
2019-04-03 08:30:38 -HTTP METHOD : GET
2019-04-03 08:30:38 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.list
2019-04-03 08:30:38 -参数 : [{limit=10, offset=0, userType=, userOrg=, userId=, createTime=, queryType=1}, com.bootdo.elec.domain.ElecDO@68929275]
2019-04-03 08:30:38 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec order by id asc limit ?, ? 
2019-04-03 08:30:38 -==> Parameters: 0(Integer), 10(Integer)
2019-04-03 08:30:38 -<==      Total: 2
2019-04-03 08:30:38 -耗时 : 94
2019-04-03 08:30:38 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 08:30:38 -<==      Total: 10
2019-04-03 08:30:38 -==>  Preparing: select count(*) from elec 
2019-04-03 08:30:38 -==> Parameters: 
2019-04-03 08:30:38 -<==      Total: 1
2019-04-03 08:30:38 -耗时 : 114
2019-04-03 08:30:38 -返回值 : com.bootdo.common.utils.PageUtils@23e15744
2019-04-03 08:30:44 -请求地址 : http://localhost:8081/elec/elec/edit/2
2019-04-03 08:30:44 -HTTP METHOD : GET
2019-04-03 08:30:44 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.edit
2019-04-03 08:30:44 -参数 : [2, {}]
2019-04-03 08:30:44 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, `user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec where id = ? 
2019-04-03 08:30:44 -==> Parameters: 2(Long)
2019-04-03 08:30:44 -<==      Total: 1
2019-04-03 08:30:44 -耗时 : 10
2019-04-03 08:30:44 -返回值 : elec/elec/edit
2019-04-03 08:30:44 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-03 08:30:44 -HTTP METHOD : GET
2019-04-03 08:30:44 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 08:30:44 -参数 : [userType]
2019-04-03 08:30:44 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 08:30:44 -请求地址 : http://localhost:8081/common/dict/list/userState
2019-04-03 08:30:44 -HTTP METHOD : GET
2019-04-03 08:30:44 -==> Parameters: userType(String)
2019-04-03 08:30:44 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 08:30:44 -参数 : [userState]
2019-04-03 08:30:44 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 08:30:44 -请求地址 : http://localhost:8081/common/dict/list/elecType
2019-04-03 08:30:44 -HTTP METHOD : GET
2019-04-03 08:30:44 -==> Parameters: userState(String)
2019-04-03 08:30:44 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 08:30:44 -参数 : [elecType]
2019-04-03 08:30:44 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 08:30:44 -==> Parameters: elecType(String)
2019-04-03 08:30:44 -<==      Total: 2
2019-04-03 08:30:44 -耗时 : 5
2019-04-03 08:30:44 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 08:30:44 -<==      Total: 2
2019-04-03 08:30:44 -耗时 : 4
2019-04-03 08:30:44 -返回值 : [DictDO{id=126, name='使用中', value='1', type='userState', description='用户状态', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=125, name='未使用', value='0', type='userState', description='用户状态', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 08:30:44 -<==      Total: 2
2019-04-03 08:30:44 -耗时 : 3
2019-04-03 08:30:44 -返回值 : [DictDO{id=139, name='民用电', value='1', type='elecType', description='电量性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=138, name='商业电', value='0', type='elecType', description='电量类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 08:30:48 -请求地址 : http://localhost:8081/elec/elec/update
2019-04-03 08:30:48 -HTTP METHOD : POST
2019-04-03 08:30:48 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.update
2019-04-03 08:30:48 -参数 : [com.bootdo.elec.domain.ElecDO@3ab76908]
2019-04-03 08:30:48 -==>  Preparing: update elec SET `user_id` = ?, `user_name` = ?, `user_type` = ?, `user_org` = ?, `user_tell` = ?, `user_state` = ?, `wages_id` = ?, `elec_type` = ?, `start` = ?, `end` = ?, `hu` = ?, `elec_amount` = ?, `elec_cost` = ?, `elec_sum` = ?, `create_time` = ?, `create_by` = ?, `update_time` = ?, `update_by` = ?, `remark` = ? where id = ? 
2019-04-03 08:30:48 -==> Parameters: 1-0004(String), 姜海龙(String), A(String), 2(String), 15815564657(String), 1(String), 1002(String), 0(String), 200(String), 100(String), 1(Integer), 100.00(BigDecimal), 100.00(BigDecimal), -100.00(BigDecimal), 2019-02(String), 1(Long), 2019-04-03 08:30:48.966(Timestamp), 1(Long), (String), 2(Long)
2019-04-03 08:30:49 -<==    Updates: 1
2019-04-03 08:30:49 -耗时 : 110
2019-04-03 08:30:49 -返回值 : {msg=操作成功, code=0}
2019-04-03 08:30:49 -请求地址 : http://localhost:8081/elec/elec/list
2019-04-03 08:30:49 -HTTP METHOD : GET
2019-04-03 08:30:49 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.list
2019-04-03 08:30:49 -参数 : [{limit=10, offset=0, userType=, userOrg=, userId=, createTime=, queryType=2}, com.bootdo.elec.domain.ElecDO@1db92e62]
2019-04-03 08:30:49 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec WHERE `elec_sum` < 0 order by id asc limit ?, ? 
2019-04-03 08:30:49 -==> Parameters: 0(Integer), 10(Integer)
2019-04-03 08:30:49 -<==      Total: 2
2019-04-03 08:30:49 -==>  Preparing: select count(*) from elec WHERE `elec_sum` < 0 
2019-04-03 08:30:49 -==> Parameters: 
2019-04-03 08:30:49 -<==      Total: 1
2019-04-03 08:30:49 -耗时 : 10
2019-04-03 08:30:49 -返回值 : com.bootdo.common.utils.PageUtils@6325ea14
2019-04-03 08:30:55 -请求地址 : http://localhost:8081/index
2019-04-03 08:30:55 -HTTP METHOD : GET
2019-04-03 08:30:55 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2019-04-03 08:30:55 -参数 : [{}]
2019-04-03 08:30:55 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2019-04-03 08:30:55 -==> Parameters: 1(Long)
2019-04-03 08:30:55 -<==      Total: 46
2019-04-03 08:30:55 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2019-04-03 08:30:55 -==> Parameters: 138(Long)
2019-04-03 08:30:55 -<==      Total: 1
2019-04-03 08:30:55 -耗时 : 30
2019-04-03 08:30:55 -返回值 : index_v1
2019-04-03 08:30:55 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 08:30:55 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 31(Integer), com.bootdo.system.controller.LoginController.index()(String), {"menus":[{"attributes":{"icon":"fa fa-money","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-money","url":"/moneyList/moneyList"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"102","parentId":"106","text":"现金缴费"},{"attributes":{"icon":"fa fa-book","url":"/moneyLog/elecLog"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"107","parentId":"106","text":"缴费记录"}],"hasChildren":true,"hasParent":false,"id":"106","parentId":"0","text":"收费管理"},{"attributes":{"icon":"fa fa-lightbulb-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/elec/elec"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"121","parentId":"103","text":"电费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"elec/elecInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"122","parentId":"103","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"elec/elecUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"123","parentId":"103","text":"电表上传"},{"attributes":{"icon":"fa fa-cc","url":"/elec/elecPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"124","parentId":"103","text":"电价管理"}],"hasChildren":true,"hasParent":false,"id":"103","parentId":"0","text":"电费管理"},{"attributes":{"icon":"fa fa-tint","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/water/water"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"117","parentId":"105","text":"水费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"water/waterInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"118","parentId":"105","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"water/waterUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"119","parentId":"105","text":"水费生成"},{"attributes":{"icon":"fa fa-cc","url":"/water/waterPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"120","parentId":"105","text":"水价管理"}],"hasChildren":true,"hasParent":false,"id":"105","parentId":"0","text":"水费管理"},{"attributes":{"icon":"fa fa-fire","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/heat/heat"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"113","parentId":"104","text":"暖费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"heat/heatInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"114","parentId":"104","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"heat/heatUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"115","parentId":"104","text":"暖费生成"},{"attributes":{"icon":"","url":"/heat/heatPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"116","parentId":"104","text":"暖价管理"}],"hasChildren":true,"hasParent":false,"id":"104","parentId":"0","text":"暖费管理"},{"attributes":{"icon":"fa fa-vcard-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-bomb","url":"/print/print"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"149","parentId":"108","text":"票据记录"}],"hasChildren":true,"hasParent":false,"id":"108","parentId":"0","text":"票据管理"},{"attributes":{"icon":"fa fa-bar-chart","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-area-chart","url":"/chart/graph_echarts.html"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","text":"百度chart"},{"attributes":{"icon":"fa fa-sun-o","url":"charts/countDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"109","parentId":"97","text":"日统计报表"},{"attributes":{"icon":"fa fa-registered","url":"charts/countMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"110","parentId":"97","text":"月统计报表"},{"attributes":{"icon":"fa fa-money","url":"charts/countOwe"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"155","parentId":"97","text":"欠费报表图"},{"attributes":{"icon":"fa fa-support","url":"charts/countYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"111","parentId":"97","text":"年统计报表"},{"attributes":{"icon":"fa fa-tachometer","url":"charts/countRun"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"112","parentId":"97","text":"走势图报表"}],"hasChildren":true,"hasParent":false,"id":"97","parentId":"0","text":"统计管理"},{"attributes":{"icon":"fa fa-bars","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-book","url":"/common/dict"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"78","parentId":"1","text":"数据字典"},{"attributes":{"icon":"fa fa-folder-open","url":"/common/sysFile"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"71","parentId":"1","text":"文件管理"}],"h(String), 127.0.0.1(String), 2019-04-03 08:30:55.44(Timestamp)
2019-04-03 08:30:55 -请求地址 : http://localhost:8081/main
2019-04-03 08:30:55 -HTTP METHOD : GET
2019-04-03 08:30:55 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 08:30:55 -参数 : []
2019-04-03 08:30:55 -耗时 : 1
2019-04-03 08:30:55 -返回值 : main
2019-04-03 08:30:55 -<==    Updates: 1
2019-04-03 08:30:55 -请求地址 : http://localhost:8081/oa/notify/message
2019-04-03 08:30:55 -HTTP METHOD : GET
2019-04-03 08:30:55 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2019-04-03 08:30:55 -参数 : []
2019-04-03 08:30:55 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2019-04-03 08:30:55 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2019-04-03 08:30:55 -<==      Total: 0
2019-04-03 08:30:55 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2019-04-03 08:30:55 -==> Parameters: 1(Long), 0(String)
2019-04-03 08:30:55 -<==      Total: 1
2019-04-03 08:30:55 -耗时 : 5
2019-04-03 08:30:55 -返回值 : com.bootdo.common.utils.PageUtils@143de93e
2019-04-03 08:30:55 -请求地址 : http://localhost:8081/main
2019-04-03 08:30:55 -HTTP METHOD : GET
2019-04-03 08:30:55 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 08:30:55 -参数 : []
2019-04-03 08:30:55 -耗时 : 0
2019-04-03 08:30:55 -返回值 : main
2019-04-03 08:30:57 -请求地址 : http://localhost:8081/elec/elec
2019-04-03 08:30:57 -HTTP METHOD : GET
2019-04-03 08:30:57 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.Elec
2019-04-03 08:30:57 -参数 : []
2019-04-03 08:30:57 -耗时 : 1
2019-04-03 08:30:57 -返回值 : elec/elec/elec
2019-04-03 08:30:57 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-03 08:30:57 -HTTP METHOD : GET
2019-04-03 08:30:57 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 08:30:57 -参数 : [userType]
2019-04-03 08:30:57 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 08:30:57 -==> Parameters: userType(String)
2019-04-03 08:30:57 -<==      Total: 2
2019-04-03 08:30:57 -耗时 : 4
2019-04-03 08:30:57 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 08:30:57 -请求地址 : http://localhost:8081/elec/elec/list
2019-04-03 08:30:57 -HTTP METHOD : GET
2019-04-03 08:30:57 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.list
2019-04-03 08:30:57 -参数 : [{limit=10, offset=0, userType=, userOrg=, userId=, createTime=, queryType=1}, com.bootdo.elec.domain.ElecDO@37b43484]
2019-04-03 08:30:57 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec order by id asc limit ?, ? 
2019-04-03 08:30:57 -==> Parameters: 0(Integer), 10(Integer)
2019-04-03 08:30:57 -<==      Total: 10
2019-04-03 08:30:57 -==>  Preparing: select count(*) from elec 
2019-04-03 08:30:57 -==> Parameters: 
2019-04-03 08:30:57 -<==      Total: 1
2019-04-03 08:30:57 -耗时 : 9
2019-04-03 08:30:57 -返回值 : com.bootdo.common.utils.PageUtils@3262808c
2019-04-03 08:31:11 -请求地址 : http://localhost:8081/elec/elec/edit/7
2019-04-03 08:31:11 -HTTP METHOD : GET
2019-04-03 08:31:11 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.edit
2019-04-03 08:31:11 -参数 : [7, {}]
2019-04-03 08:31:11 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, `user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec where id = ? 
2019-04-03 08:31:11 -==> Parameters: 7(Long)
2019-04-03 08:31:11 -<==      Total: 1
2019-04-03 08:31:11 -耗时 : 5
2019-04-03 08:31:11 -返回值 : elec/elec/edit
2019-04-03 08:31:11 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-03 08:31:11 -HTTP METHOD : GET
2019-04-03 08:31:11 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 08:31:11 -参数 : [userType]
2019-04-03 08:31:11 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 08:31:11 -==> Parameters: userType(String)
2019-04-03 08:31:11 -请求地址 : http://localhost:8081/common/dict/list/userState
2019-04-03 08:31:11 -HTTP METHOD : GET
2019-04-03 08:31:11 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 08:31:11 -参数 : [userState]
2019-04-03 08:31:11 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 08:31:11 -==> Parameters: userState(String)
2019-04-03 08:31:11 -<==      Total: 2
2019-04-03 08:31:11 -耗时 : 4
2019-04-03 08:31:11 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 08:31:11 -<==      Total: 2
2019-04-03 08:31:11 -耗时 : 5
2019-04-03 08:31:11 -返回值 : [DictDO{id=126, name='使用中', value='1', type='userState', description='用户状态', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=125, name='未使用', value='0', type='userState', description='用户状态', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 08:31:11 -请求地址 : http://localhost:8081/common/dict/list/elecType
2019-04-03 08:31:11 -HTTP METHOD : GET
2019-04-03 08:31:11 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 08:31:11 -参数 : [elecType]
2019-04-03 08:31:11 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 08:31:11 -==> Parameters: elecType(String)
2019-04-03 08:31:11 -<==      Total: 2
2019-04-03 08:31:11 -耗时 : 4
2019-04-03 08:31:11 -返回值 : [DictDO{id=139, name='民用电', value='1', type='elecType', description='电量性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=138, name='商业电', value='0', type='elecType', description='电量类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 08:31:15 -请求地址 : http://localhost:8081/elec/elec/update
2019-04-03 08:31:15 -HTTP METHOD : POST
2019-04-03 08:31:15 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.update
2019-04-03 08:31:15 -参数 : [com.bootdo.elec.domain.ElecDO@56e5e3ad]
2019-04-03 08:31:15 -==>  Preparing: update elec SET `user_id` = ?, `user_name` = ?, `user_type` = ?, `user_org` = ?, `user_tell` = ?, `user_state` = ?, `wages_id` = ?, `elec_type` = ?, `start` = ?, `end` = ?, `hu` = ?, `elec_amount` = ?, `elec_cost` = ?, `elec_sum` = ?, `create_time` = ?, `create_by` = ?, `update_time` = ?, `update_by` = ?, `remark` = ? where id = ? 
2019-04-03 08:31:15 -==> Parameters: 1-0007(String), 规划局(String), A(String), 2(String), (String), 0(String), (String), 1(String), 1(String), 1(String), 1(Integer), 1.00(BigDecimal), 1.00(BigDecimal), 1.00(BigDecimal), 2019-03(String), 1(Long), 2019-04-03 08:31:15.231(Timestamp), 1(Long), (String), 7(Long)
2019-04-03 08:31:15 -<==    Updates: 1
2019-04-03 08:31:15 -耗时 : 117
2019-04-03 08:31:15 -返回值 : {msg=操作成功, code=0}
2019-04-03 08:31:15 -请求地址 : http://localhost:8081/elec/elec/list
2019-04-03 08:31:15 -HTTP METHOD : GET
2019-04-03 08:31:15 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.list
2019-04-03 08:31:15 -参数 : [{limit=10, offset=0, userType=, userOrg=, userId=, createTime=, queryType=2}, com.bootdo.elec.domain.ElecDO@734b09d6]
2019-04-03 08:31:15 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec WHERE `elec_sum` < 0 order by id asc limit ?, ? 
2019-04-03 08:31:15 -==> Parameters: 0(Integer), 10(Integer)
2019-04-03 08:31:15 -<==      Total: 2
2019-04-03 08:31:15 -==>  Preparing: select count(*) from elec WHERE `elec_sum` < 0 
2019-04-03 08:31:15 -==> Parameters: 
2019-04-03 08:31:15 -<==      Total: 1
2019-04-03 08:31:15 -耗时 : 9
2019-04-03 08:31:15 -返回值 : com.bootdo.common.utils.PageUtils@3e5a942
2019-04-03 08:31:20 -请求地址 : http://localhost:8081/index
2019-04-03 08:31:20 -HTTP METHOD : GET
2019-04-03 08:31:20 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2019-04-03 08:31:20 -参数 : [{}]
2019-04-03 08:31:20 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2019-04-03 08:31:20 -==> Parameters: 1(Long)
2019-04-03 08:31:20 -<==      Total: 46
2019-04-03 08:31:20 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2019-04-03 08:31:20 -==> Parameters: 138(Long)
2019-04-03 08:31:20 -<==      Total: 1
2019-04-03 08:31:20 -耗时 : 18
2019-04-03 08:31:20 -返回值 : index_v1
2019-04-03 08:31:20 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 08:31:20 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 19(Integer), com.bootdo.system.controller.LoginController.index()(String), {"menus":[{"attributes":{"icon":"fa fa-money","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-money","url":"/moneyList/moneyList"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"102","parentId":"106","text":"现金缴费"},{"attributes":{"icon":"fa fa-book","url":"/moneyLog/elecLog"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"107","parentId":"106","text":"缴费记录"}],"hasChildren":true,"hasParent":false,"id":"106","parentId":"0","text":"收费管理"},{"attributes":{"icon":"fa fa-lightbulb-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/elec/elec"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"121","parentId":"103","text":"电费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"elec/elecInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"122","parentId":"103","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"elec/elecUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"123","parentId":"103","text":"电表上传"},{"attributes":{"icon":"fa fa-cc","url":"/elec/elecPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"124","parentId":"103","text":"电价管理"}],"hasChildren":true,"hasParent":false,"id":"103","parentId":"0","text":"电费管理"},{"attributes":{"icon":"fa fa-tint","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/water/water"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"117","parentId":"105","text":"水费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"water/waterInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"118","parentId":"105","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"water/waterUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"119","parentId":"105","text":"水费生成"},{"attributes":{"icon":"fa fa-cc","url":"/water/waterPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"120","parentId":"105","text":"水价管理"}],"hasChildren":true,"hasParent":false,"id":"105","parentId":"0","text":"水费管理"},{"attributes":{"icon":"fa fa-fire","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/heat/heat"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"113","parentId":"104","text":"暖费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"heat/heatInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"114","parentId":"104","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"heat/heatUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"115","parentId":"104","text":"暖费生成"},{"attributes":{"icon":"","url":"/heat/heatPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"116","parentId":"104","text":"暖价管理"}],"hasChildren":true,"hasParent":false,"id":"104","parentId":"0","text":"暖费管理"},{"attributes":{"icon":"fa fa-vcard-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-bomb","url":"/print/print"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"149","parentId":"108","text":"票据记录"}],"hasChildren":true,"hasParent":false,"id":"108","parentId":"0","text":"票据管理"},{"attributes":{"icon":"fa fa-bar-chart","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-area-chart","url":"/chart/graph_echarts.html"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","text":"百度chart"},{"attributes":{"icon":"fa fa-sun-o","url":"charts/countDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"109","parentId":"97","text":"日统计报表"},{"attributes":{"icon":"fa fa-registered","url":"charts/countMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"110","parentId":"97","text":"月统计报表"},{"attributes":{"icon":"fa fa-money","url":"charts/countOwe"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"155","parentId":"97","text":"欠费报表图"},{"attributes":{"icon":"fa fa-support","url":"charts/countYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"111","parentId":"97","text":"年统计报表"},{"attributes":{"icon":"fa fa-tachometer","url":"charts/countRun"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"112","parentId":"97","text":"走势图报表"}],"hasChildren":true,"hasParent":false,"id":"97","parentId":"0","text":"统计管理"},{"attributes":{"icon":"fa fa-bars","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-book","url":"/common/dict"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"78","parentId":"1","text":"数据字典"},{"attributes":{"icon":"fa fa-folder-open","url":"/common/sysFile"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"71","parentId":"1","text":"文件管理"}],"h(String), 127.0.0.1(String), 2019-04-03 08:31:20.421(Timestamp)
2019-04-03 08:31:20 -请求地址 : http://localhost:8081/main
2019-04-03 08:31:20 -HTTP METHOD : GET
2019-04-03 08:31:20 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 08:31:20 -参数 : []
2019-04-03 08:31:20 -耗时 : 24
2019-04-03 08:31:20 -返回值 : main
2019-04-03 08:31:20 -<==    Updates: 1
2019-04-03 08:31:20 -请求地址 : http://localhost:8081/oa/notify/message
2019-04-03 08:31:20 -HTTP METHOD : GET
2019-04-03 08:31:20 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2019-04-03 08:31:20 -参数 : []
2019-04-03 08:31:20 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2019-04-03 08:31:20 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2019-04-03 08:31:20 -<==      Total: 0
2019-04-03 08:31:20 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2019-04-03 08:31:20 -==> Parameters: 1(Long), 0(String)
2019-04-03 08:31:20 -<==      Total: 1
2019-04-03 08:31:20 -耗时 : 11
2019-04-03 08:31:20 -返回值 : com.bootdo.common.utils.PageUtils@1fe861c6
2019-04-03 08:31:20 -请求地址 : http://localhost:8081/main
2019-04-03 08:31:20 -HTTP METHOD : GET
2019-04-03 08:31:20 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 08:31:20 -参数 : []
2019-04-03 08:31:20 -耗时 : 0
2019-04-03 08:31:20 -返回值 : main
2019-04-03 08:31:22 -请求地址 : http://localhost:8081/elec/elec
2019-04-03 08:31:22 -HTTP METHOD : GET
2019-04-03 08:31:22 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.Elec
2019-04-03 08:31:22 -参数 : []
2019-04-03 08:31:22 -耗时 : 0
2019-04-03 08:31:22 -返回值 : elec/elec/elec
2019-04-03 08:31:22 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-03 08:31:22 -HTTP METHOD : GET
2019-04-03 08:31:22 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 08:31:22 -参数 : [userType]
2019-04-03 08:31:22 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 08:31:22 -==> Parameters: userType(String)
2019-04-03 08:31:22 -<==      Total: 2
2019-04-03 08:31:22 -耗时 : 4
2019-04-03 08:31:22 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 08:31:22 -请求地址 : http://localhost:8081/elec/elec/list
2019-04-03 08:31:22 -HTTP METHOD : GET
2019-04-03 08:31:22 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.list
2019-04-03 08:31:22 -参数 : [{limit=10, offset=0, userType=, userOrg=, userId=, createTime=, queryType=1}, com.bootdo.elec.domain.ElecDO@bbafd12]
2019-04-03 08:31:22 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec order by id asc limit ?, ? 
2019-04-03 08:31:22 -==> Parameters: 0(Integer), 10(Integer)
2019-04-03 08:31:23 -<==      Total: 10
2019-04-03 08:31:23 -==>  Preparing: select count(*) from elec 
2019-04-03 08:31:23 -==> Parameters: 
2019-04-03 08:31:23 -<==      Total: 1
2019-04-03 08:31:23 -耗时 : 8
2019-04-03 08:31:23 -返回值 : com.bootdo.common.utils.PageUtils@6ec6649e
2019-04-03 08:33:49 -请求地址 : http://localhost:8081/elec/elec/edit/7
2019-04-03 08:33:49 -HTTP METHOD : GET
2019-04-03 08:33:49 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.edit
2019-04-03 08:33:49 -参数 : [7, {}]
2019-04-03 08:33:49 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, `user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec where id = ? 
2019-04-03 08:33:49 -==> Parameters: 7(Long)
2019-04-03 08:33:49 -<==      Total: 1
2019-04-03 08:33:49 -耗时 : 7
2019-04-03 08:33:49 -返回值 : elec/elec/edit
2019-04-03 08:33:49 -请求地址 : http://localhost:8081/common/dict/list/userState
2019-04-03 08:33:49 -HTTP METHOD : GET
2019-04-03 08:33:49 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 08:33:49 -参数 : [userState]
2019-04-03 08:33:49 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-03 08:33:49 -HTTP METHOD : GET
2019-04-03 08:33:49 -请求地址 : http://localhost:8081/common/dict/list/elecType
2019-04-03 08:33:49 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 08:33:49 -HTTP METHOD : GET
2019-04-03 08:33:49 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 08:33:49 -参数 : [elecType]
2019-04-03 08:33:49 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 08:33:49 -参数 : [userType]
2019-04-03 08:33:49 -==> Parameters: userState(String)
2019-04-03 08:33:49 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 08:33:49 -==> Parameters: elecType(String)
2019-04-03 08:33:49 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 08:33:49 -==> Parameters: userType(String)
2019-04-03 08:33:49 -<==      Total: 2
2019-04-03 08:33:49 -<==      Total: 2
2019-04-03 08:33:49 -耗时 : 6
2019-04-03 08:33:49 -返回值 : [DictDO{id=139, name='民用电', value='1', type='elecType', description='电量性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=138, name='商业电', value='0', type='elecType', description='电量类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 08:33:49 -耗时 : 8
2019-04-03 08:33:49 -返回值 : [DictDO{id=126, name='使用中', value='1', type='userState', description='用户状态', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=125, name='未使用', value='0', type='userState', description='用户状态', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 08:33:49 -<==      Total: 2
2019-04-03 08:33:49 -耗时 : 12
2019-04-03 08:33:49 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 08:33:54 -请求地址 : http://localhost:8081/elec/elec/update
2019-04-03 08:33:54 -HTTP METHOD : POST
2019-04-03 08:33:54 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.update
2019-04-03 08:33:54 -参数 : [com.bootdo.elec.domain.ElecDO@5b98c0]
2019-04-03 08:35:42 -请求地址 : http://localhost:8081/index
2019-04-03 08:35:42 -HTTP METHOD : GET
2019-04-03 08:35:42 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2019-04-03 08:35:42 -参数 : [{}]
2019-04-03 08:35:42 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2019-04-03 08:35:42 -==> Parameters: 1(Long)
2019-04-03 08:35:42 -<==      Total: 46
2019-04-03 08:35:42 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2019-04-03 08:35:42 -==> Parameters: 138(Long)
2019-04-03 08:35:42 -<==      Total: 1
2019-04-03 08:35:42 -耗时 : 106
2019-04-03 08:35:42 -返回值 : index_v1
2019-04-03 08:35:42 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 08:35:42 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 106(Integer), com.bootdo.system.controller.LoginController.index()(String), {"menus":[{"attributes":{"icon":"fa fa-money","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-money","url":"/moneyList/moneyList"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"102","parentId":"106","text":"现金缴费"},{"attributes":{"icon":"fa fa-book","url":"/moneyLog/elecLog"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"107","parentId":"106","text":"缴费记录"}],"hasChildren":true,"hasParent":false,"id":"106","parentId":"0","text":"收费管理"},{"attributes":{"icon":"fa fa-lightbulb-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/elec/elec"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"121","parentId":"103","text":"电费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"elec/elecInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"122","parentId":"103","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"elec/elecUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"123","parentId":"103","text":"电表上传"},{"attributes":{"icon":"fa fa-cc","url":"/elec/elecPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"124","parentId":"103","text":"电价管理"}],"hasChildren":true,"hasParent":false,"id":"103","parentId":"0","text":"电费管理"},{"attributes":{"icon":"fa fa-tint","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/water/water"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"117","parentId":"105","text":"水费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"water/waterInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"118","parentId":"105","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"water/waterUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"119","parentId":"105","text":"水费生成"},{"attributes":{"icon":"fa fa-cc","url":"/water/waterPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"120","parentId":"105","text":"水价管理"}],"hasChildren":true,"hasParent":false,"id":"105","parentId":"0","text":"水费管理"},{"attributes":{"icon":"fa fa-fire","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/heat/heat"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"113","parentId":"104","text":"暖费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"heat/heatInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"114","parentId":"104","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"heat/heatUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"115","parentId":"104","text":"暖费生成"},{"attributes":{"icon":"","url":"/heat/heatPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"116","parentId":"104","text":"暖价管理"}],"hasChildren":true,"hasParent":false,"id":"104","parentId":"0","text":"暖费管理"},{"attributes":{"icon":"fa fa-vcard-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-bomb","url":"/print/print"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"149","parentId":"108","text":"票据记录"}],"hasChildren":true,"hasParent":false,"id":"108","parentId":"0","text":"票据管理"},{"attributes":{"icon":"fa fa-bar-chart","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-area-chart","url":"/chart/graph_echarts.html"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","text":"百度chart"},{"attributes":{"icon":"fa fa-sun-o","url":"charts/countDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"109","parentId":"97","text":"日统计报表"},{"attributes":{"icon":"fa fa-registered","url":"charts/countMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"110","parentId":"97","text":"月统计报表"},{"attributes":{"icon":"fa fa-money","url":"charts/countOwe"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"155","parentId":"97","text":"欠费报表图"},{"attributes":{"icon":"fa fa-support","url":"charts/countYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"111","parentId":"97","text":"年统计报表"},{"attributes":{"icon":"fa fa-tachometer","url":"charts/countRun"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"112","parentId":"97","text":"走势图报表"}],"hasChildren":true,"hasParent":false,"id":"97","parentId":"0","text":"统计管理"},{"attributes":{"icon":"fa fa-bars","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-book","url":"/common/dict"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"78","parentId":"1","text":"数据字典"},{"attributes":{"icon":"fa fa-folder-open","url":"/common/sysFile"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"71","parentId":"1","text":"文件管理"}],"h(String), 127.0.0.1(String), 2019-04-03 08:35:42.345(Timestamp)
2019-04-03 08:35:42 -<==    Updates: 1
2019-04-03 08:36:07 -请求地址 : http://localhost:8081/index
2019-04-03 08:36:07 -HTTP METHOD : GET
2019-04-03 08:36:07 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2019-04-03 08:36:07 -参数 : [{}]
2019-04-03 08:36:07 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2019-04-03 08:36:07 -==> Parameters: 1(Long)
2019-04-03 08:36:07 -<==      Total: 46
2019-04-03 08:36:07 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2019-04-03 08:36:07 -==> Parameters: 138(Long)
2019-04-03 08:36:07 -<==      Total: 1
2019-04-03 08:36:07 -耗时 : 19
2019-04-03 08:36:07 -返回值 : index_v1
2019-04-03 08:36:08 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 08:36:08 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 19(Integer), com.bootdo.system.controller.LoginController.index()(String), {"menus":[{"attributes":{"icon":"fa fa-money","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-money","url":"/moneyList/moneyList"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"102","parentId":"106","text":"现金缴费"},{"attributes":{"icon":"fa fa-book","url":"/moneyLog/elecLog"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"107","parentId":"106","text":"缴费记录"}],"hasChildren":true,"hasParent":false,"id":"106","parentId":"0","text":"收费管理"},{"attributes":{"icon":"fa fa-lightbulb-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/elec/elec"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"121","parentId":"103","text":"电费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"elec/elecInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"122","parentId":"103","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"elec/elecUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"123","parentId":"103","text":"电表上传"},{"attributes":{"icon":"fa fa-cc","url":"/elec/elecPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"124","parentId":"103","text":"电价管理"}],"hasChildren":true,"hasParent":false,"id":"103","parentId":"0","text":"电费管理"},{"attributes":{"icon":"fa fa-tint","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/water/water"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"117","parentId":"105","text":"水费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"water/waterInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"118","parentId":"105","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"water/waterUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"119","parentId":"105","text":"水费生成"},{"attributes":{"icon":"fa fa-cc","url":"/water/waterPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"120","parentId":"105","text":"水价管理"}],"hasChildren":true,"hasParent":false,"id":"105","parentId":"0","text":"水费管理"},{"attributes":{"icon":"fa fa-fire","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/heat/heat"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"113","parentId":"104","text":"暖费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"heat/heatInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"114","parentId":"104","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"heat/heatUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"115","parentId":"104","text":"暖费生成"},{"attributes":{"icon":"","url":"/heat/heatPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"116","parentId":"104","text":"暖价管理"}],"hasChildren":true,"hasParent":false,"id":"104","parentId":"0","text":"暖费管理"},{"attributes":{"icon":"fa fa-vcard-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-bomb","url":"/print/print"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"149","parentId":"108","text":"票据记录"}],"hasChildren":true,"hasParent":false,"id":"108","parentId":"0","text":"票据管理"},{"attributes":{"icon":"fa fa-bar-chart","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-area-chart","url":"/chart/graph_echarts.html"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","text":"百度chart"},{"attributes":{"icon":"fa fa-sun-o","url":"charts/countDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"109","parentId":"97","text":"日统计报表"},{"attributes":{"icon":"fa fa-registered","url":"charts/countMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"110","parentId":"97","text":"月统计报表"},{"attributes":{"icon":"fa fa-money","url":"charts/countOwe"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"155","parentId":"97","text":"欠费报表图"},{"attributes":{"icon":"fa fa-support","url":"charts/countYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"111","parentId":"97","text":"年统计报表"},{"attributes":{"icon":"fa fa-tachometer","url":"charts/countRun"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"112","parentId":"97","text":"走势图报表"}],"hasChildren":true,"hasParent":false,"id":"97","parentId":"0","text":"统计管理"},{"attributes":{"icon":"fa fa-bars","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-book","url":"/common/dict"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"78","parentId":"1","text":"数据字典"},{"attributes":{"icon":"fa fa-folder-open","url":"/common/sysFile"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"71","parentId":"1","text":"文件管理"}],"h(String), 127.0.0.1(String), 2019-04-03 08:36:07.964(Timestamp)
2019-04-03 08:36:08 -<==    Updates: 1
2019-04-03 08:36:09 -请求地址 : http://localhost:8081/main
2019-04-03 08:36:09 -HTTP METHOD : GET
2019-04-03 08:36:09 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 08:36:09 -参数 : []
2019-04-03 08:36:09 -耗时 : 1
2019-04-03 08:36:09 -返回值 : main
2019-04-03 08:36:10 -请求地址 : http://localhost:8081/oa/notify/message
2019-04-03 08:36:10 -HTTP METHOD : GET
2019-04-03 08:36:10 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2019-04-03 08:36:10 -参数 : []
2019-04-03 08:36:10 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2019-04-03 08:36:10 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2019-04-03 08:36:10 -<==      Total: 0
2019-04-03 08:36:10 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2019-04-03 08:36:10 -==> Parameters: 1(Long), 0(String)
2019-04-03 08:36:10 -<==      Total: 1
2019-04-03 08:36:10 -耗时 : 64
2019-04-03 08:36:10 -返回值 : com.bootdo.common.utils.PageUtils@703f6a6
2019-04-03 08:36:10 -请求地址 : http://localhost:8081/main
2019-04-03 08:36:10 -HTTP METHOD : GET
2019-04-03 08:36:10 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 08:36:10 -参数 : []
2019-04-03 08:36:10 -耗时 : 0
2019-04-03 08:36:10 -返回值 : main
2019-04-03 08:37:04 -请求地址 : http://localhost:8081/index
2019-04-03 08:37:04 -HTTP METHOD : GET
2019-04-03 08:37:04 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2019-04-03 08:37:04 -参数 : [{}]
2019-04-03 08:37:04 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2019-04-03 08:37:04 -==> Parameters: 1(Long)
2019-04-03 08:37:04 -<==      Total: 46
2019-04-03 08:37:04 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2019-04-03 08:37:04 -==> Parameters: 138(Long)
2019-04-03 08:37:04 -<==      Total: 1
2019-04-03 08:37:04 -耗时 : 21
2019-04-03 08:37:04 -返回值 : index_v1
2019-04-03 08:37:05 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 08:37:05 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 21(Integer), com.bootdo.system.controller.LoginController.index()(String), {"menus":[{"attributes":{"icon":"fa fa-money","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-money","url":"/moneyList/moneyList"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"102","parentId":"106","text":"现金缴费"},{"attributes":{"icon":"fa fa-book","url":"/moneyLog/elecLog"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"107","parentId":"106","text":"缴费记录"}],"hasChildren":true,"hasParent":false,"id":"106","parentId":"0","text":"收费管理"},{"attributes":{"icon":"fa fa-lightbulb-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/elec/elec"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"121","parentId":"103","text":"电费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"elec/elecInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"122","parentId":"103","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"elec/elecUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"123","parentId":"103","text":"电表上传"},{"attributes":{"icon":"fa fa-cc","url":"/elec/elecPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"124","parentId":"103","text":"电价管理"}],"hasChildren":true,"hasParent":false,"id":"103","parentId":"0","text":"电费管理"},{"attributes":{"icon":"fa fa-tint","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/water/water"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"117","parentId":"105","text":"水费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"water/waterInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"118","parentId":"105","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"water/waterUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"119","parentId":"105","text":"水费生成"},{"attributes":{"icon":"fa fa-cc","url":"/water/waterPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"120","parentId":"105","text":"水价管理"}],"hasChildren":true,"hasParent":false,"id":"105","parentId":"0","text":"水费管理"},{"attributes":{"icon":"fa fa-fire","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/heat/heat"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"113","parentId":"104","text":"暖费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"heat/heatInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"114","parentId":"104","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"heat/heatUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"115","parentId":"104","text":"暖费生成"},{"attributes":{"icon":"","url":"/heat/heatPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"116","parentId":"104","text":"暖价管理"}],"hasChildren":true,"hasParent":false,"id":"104","parentId":"0","text":"暖费管理"},{"attributes":{"icon":"fa fa-vcard-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-bomb","url":"/print/print"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"149","parentId":"108","text":"票据记录"}],"hasChildren":true,"hasParent":false,"id":"108","parentId":"0","text":"票据管理"},{"attributes":{"icon":"fa fa-bar-chart","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-area-chart","url":"/chart/graph_echarts.html"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","text":"百度chart"},{"attributes":{"icon":"fa fa-sun-o","url":"charts/countDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"109","parentId":"97","text":"日统计报表"},{"attributes":{"icon":"fa fa-registered","url":"charts/countMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"110","parentId":"97","text":"月统计报表"},{"attributes":{"icon":"fa fa-support","url":"charts/countYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"111","parentId":"97","text":"年统计报表"},{"attributes":{"icon":"fa fa-money","url":"charts/countOwe"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"155","parentId":"97","text":"欠费报表图"},{"attributes":{"icon":"fa fa-tachometer","url":"charts/countRun"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"112","parentId":"97","text":"走势图报表"}],"hasChildren":true,"hasParent":false,"id":"97","parentId":"0","text":"统计管理"},{"attributes":{"icon":"fa fa-bars","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-book","url":"/common/dict"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"78","parentId":"1","text":"数据字典"},{"attributes":{"icon":"fa fa-folder-open","url":"/common/sysFile"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"71","parentId":"1","text":"文件管理"}],"h(String), 127.0.0.1(String), 2019-04-03 08:37:04.998(Timestamp)
2019-04-03 08:37:05 -<==    Updates: 1
2019-04-03 08:37:05 -请求地址 : http://localhost:8081/main
2019-04-03 08:37:05 -HTTP METHOD : GET
2019-04-03 08:37:05 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 08:37:05 -参数 : []
2019-04-03 08:37:05 -耗时 : 0
2019-04-03 08:37:05 -返回值 : main
2019-04-03 08:37:05 -请求地址 : http://localhost:8081/oa/notify/message
2019-04-03 08:37:05 -HTTP METHOD : GET
2019-04-03 08:37:05 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2019-04-03 08:37:05 -参数 : []
2019-04-03 08:37:05 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2019-04-03 08:37:05 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2019-04-03 08:37:05 -<==      Total: 0
2019-04-03 08:37:05 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2019-04-03 08:37:05 -==> Parameters: 1(Long), 0(String)
2019-04-03 08:37:05 -<==      Total: 1
2019-04-03 08:37:05 -耗时 : 8
2019-04-03 08:37:05 -返回值 : com.bootdo.common.utils.PageUtils@5fcf6201
2019-04-03 08:37:05 -请求地址 : http://localhost:8081/main
2019-04-03 08:37:05 -HTTP METHOD : GET
2019-04-03 08:37:05 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 08:37:05 -参数 : []
2019-04-03 08:37:05 -耗时 : 0
2019-04-03 08:37:05 -返回值 : main
2019-04-03 08:37:10 -请求地址 : http://localhost:8081/elec/elec
2019-04-03 08:37:10 -HTTP METHOD : GET
2019-04-03 08:37:10 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.Elec
2019-04-03 08:37:10 -参数 : []
2019-04-03 08:37:10 -耗时 : 0
2019-04-03 08:37:10 -返回值 : elec/elec/elec
2019-04-03 08:37:11 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-03 08:37:11 -HTTP METHOD : GET
2019-04-03 08:37:11 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 08:37:11 -参数 : [userType]
2019-04-03 08:37:11 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 08:37:11 -==> Parameters: userType(String)
2019-04-03 08:37:11 -<==      Total: 2
2019-04-03 08:37:11 -耗时 : 4
2019-04-03 08:37:11 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 08:37:11 -请求地址 : http://localhost:8081/elec/elec/list
2019-04-03 08:37:11 -HTTP METHOD : GET
2019-04-03 08:37:11 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.list
2019-04-03 08:37:11 -参数 : [{limit=10, offset=0, userType=, userOrg=, userId=, createTime=, queryType=1}, com.bootdo.elec.domain.ElecDO@6f8cd0ae]
2019-04-03 08:37:11 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec order by id asc limit ?, ? 
2019-04-03 08:37:11 -==> Parameters: 0(Integer), 10(Integer)
2019-04-03 08:37:11 -<==      Total: 10
2019-04-03 08:37:11 -==>  Preparing: select count(*) from elec 
2019-04-03 08:37:11 -==> Parameters: 
2019-04-03 08:37:11 -<==      Total: 1
2019-04-03 08:37:11 -耗时 : 9
2019-04-03 08:37:11 -返回值 : com.bootdo.common.utils.PageUtils@318b2d37
2019-04-03 08:37:16 -请求地址 : http://localhost:8081/elec/elec/edit/5
2019-04-03 08:37:16 -HTTP METHOD : GET
2019-04-03 08:37:16 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.edit
2019-04-03 08:37:16 -参数 : [5, {}]
2019-04-03 08:37:16 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, `user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec where id = ? 
2019-04-03 08:37:16 -==> Parameters: 5(Long)
2019-04-03 08:37:16 -<==      Total: 1
2019-04-03 08:37:16 -耗时 : 11
2019-04-03 08:37:16 -返回值 : elec/elec/edit
2019-04-03 08:37:16 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-03 08:37:16 -HTTP METHOD : GET
2019-04-03 08:37:16 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 08:37:16 -参数 : [userType]
2019-04-03 08:37:16 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 08:37:16 -==> Parameters: userType(String)
2019-04-03 08:37:16 -请求地址 : http://localhost:8081/common/dict/list/userState
2019-04-03 08:37:16 -HTTP METHOD : GET
2019-04-03 08:37:16 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 08:37:16 -参数 : [userState]
2019-04-03 08:37:16 -请求地址 : http://localhost:8081/common/dict/list/elecType
2019-04-03 08:37:16 -HTTP METHOD : GET
2019-04-03 08:37:16 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 08:37:16 -参数 : [elecType]
2019-04-03 08:37:16 -<==      Total: 2
2019-04-03 08:37:16 -耗时 : 4
2019-04-03 08:37:16 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 08:37:16 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 08:37:16 -==> Parameters: elecType(String)
2019-04-03 08:37:16 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 08:37:16 -==> Parameters: userState(String)
2019-04-03 08:37:16 -<==      Total: 2
2019-04-03 08:37:16 -<==      Total: 2
2019-04-03 08:37:16 -耗时 : 10
2019-04-03 08:37:16 -耗时 : 9
2019-04-03 08:37:16 -返回值 : [DictDO{id=126, name='使用中', value='1', type='userState', description='用户状态', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=125, name='未使用', value='0', type='userState', description='用户状态', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 08:37:16 -返回值 : [DictDO{id=139, name='民用电', value='1', type='elecType', description='电量性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=138, name='商业电', value='0', type='elecType', description='电量类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 08:37:19 -请求地址 : http://localhost:8081/elec/elec/update
2019-04-03 08:37:19 -HTTP METHOD : POST
2019-04-03 08:37:19 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.update
2019-04-03 08:37:19 -参数 : [com.bootdo.elec.domain.ElecDO@2cc72780]
2019-04-03 08:38:57 -==>  Preparing: update elec SET `user_id` = ?, `user_name` = ?, `user_type` = ?, `user_org` = ?, `user_tell` = ?, `user_state` = ?, `wages_id` = ?, `start` = ?, `end` = ?, `hu` = ?, `elec_amount` = ?, `elec_cost` = ?, `elec_sum` = ?, `create_time` = ?, `create_by` = ?, `update_time` = ?, `update_by` = ?, `remark` = ? where id = ? 
2019-04-03 08:38:57 -==> Parameters: 1-0006(String), 爱仕达(String), B(String), 3(String), (String), 0(String), 1000(String), 10(String), 20(String), 3(Integer), 100.00(BigDecimal), 100.00(BigDecimal), 100.00(BigDecimal), 2019-03(String), 1(Long), 2019-04-03 08:38:57.279(Timestamp), 1(Long), (String), 5(Long)
2019-04-03 08:38:57 -<==    Updates: 1
2019-04-03 08:38:57 -耗时 : 97589
2019-04-03 08:38:57 -返回值 : {msg=操作成功, code=0}
2019-04-03 08:38:57 -==>  Preparing: select distinct m.perms from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id = ur.role_id where ur.user_id = ? 
2019-04-03 08:38:57 -==> Parameters: 1(Long)
2019-04-03 08:38:57 -<==      Total: 90
2019-04-03 08:38:57 -请求地址 : http://localhost:8081/elec/elec/list
2019-04-03 08:38:57 -HTTP METHOD : GET
2019-04-03 08:38:57 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.list
2019-04-03 08:38:57 -参数 : [{limit=10, offset=0, userType=, userOrg=, userId=, createTime=, queryType=2}, com.bootdo.elec.domain.ElecDO@53277b87]
2019-04-03 08:38:57 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec WHERE `elec_sum` < 0 order by id asc limit ?, ? 
2019-04-03 08:38:57 -==> Parameters: 0(Integer), 10(Integer)
2019-04-03 08:38:57 -<==      Total: 2
2019-04-03 08:38:57 -==>  Preparing: select count(*) from elec WHERE `elec_sum` < 0 
2019-04-03 08:38:57 -==> Parameters: 
2019-04-03 08:38:57 -<==      Total: 1
2019-04-03 08:38:57 -耗时 : 9
2019-04-03 08:38:57 -返回值 : com.bootdo.common.utils.PageUtils@6195f6be
2019-04-03 08:38:57 -==>  Preparing: update elec SET `user_id` = ?, `user_name` = ?, `user_type` = ?, `user_org` = ?, `user_tell` = ?, `user_state` = ?, `wages_id` = ?, `elec_type` = ?, `start` = ?, `end` = ?, `hu` = ?, `elec_amount` = ?, `elec_cost` = ?, `elec_sum` = ?, `create_time` = ?, `create_by` = ?, `update_time` = ?, `update_by` = ?, `remark` = ? where id = ? 
2019-04-03 08:38:57 -==> Parameters: 1-0007(String), 规划局(String), A(String), 2(String), (String), 1(String), (String), 1(String), 1(String), 1(String), 1(Integer), 1.00(BigDecimal), 1.00(BigDecimal), 1.00(BigDecimal), 2019-03(String), 1(Long), 2019-04-03 08:38:57.842(Timestamp), 1(Long), (String), 7(Long)
2019-04-03 08:38:57 -<==    Updates: 1
2019-04-03 08:38:57 -耗时 : 303380
2019-04-03 08:38:57 -返回值 : {msg=操作成功, code=0}
2019-04-03 08:39:08 -请求地址 : http://localhost:8081/index
2019-04-03 08:39:08 -HTTP METHOD : GET
2019-04-03 08:39:08 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2019-04-03 08:39:08 -参数 : [{}]
2019-04-03 08:39:08 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2019-04-03 08:39:08 -==> Parameters: 1(Long)
2019-04-03 08:39:08 -<==      Total: 46
2019-04-03 08:39:08 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2019-04-03 08:39:08 -==> Parameters: 138(Long)
2019-04-03 08:39:08 -<==      Total: 1
2019-04-03 08:39:08 -耗时 : 22
2019-04-03 08:39:08 -返回值 : index_v1
2019-04-03 08:39:08 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 08:39:08 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 23(Integer), com.bootdo.system.controller.LoginController.index()(String), {"menus":[{"attributes":{"icon":"fa fa-money","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-money","url":"/moneyList/moneyList"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"102","parentId":"106","text":"现金缴费"},{"attributes":{"icon":"fa fa-book","url":"/moneyLog/elecLog"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"107","parentId":"106","text":"缴费记录"}],"hasChildren":true,"hasParent":false,"id":"106","parentId":"0","text":"收费管理"},{"attributes":{"icon":"fa fa-lightbulb-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/elec/elec"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"121","parentId":"103","text":"电费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"elec/elecInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"122","parentId":"103","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"elec/elecUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"123","parentId":"103","text":"电表上传"},{"attributes":{"icon":"fa fa-cc","url":"/elec/elecPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"124","parentId":"103","text":"电价管理"}],"hasChildren":true,"hasParent":false,"id":"103","parentId":"0","text":"电费管理"},{"attributes":{"icon":"fa fa-tint","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/water/water"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"117","parentId":"105","text":"水费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"water/waterInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"118","parentId":"105","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"water/waterUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"119","parentId":"105","text":"水费生成"},{"attributes":{"icon":"fa fa-cc","url":"/water/waterPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"120","parentId":"105","text":"水价管理"}],"hasChildren":true,"hasParent":false,"id":"105","parentId":"0","text":"水费管理"},{"attributes":{"icon":"fa fa-fire","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/heat/heat"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"113","parentId":"104","text":"暖费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"heat/heatInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"114","parentId":"104","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"heat/heatUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"115","parentId":"104","text":"暖费生成"},{"attributes":{"icon":"","url":"/heat/heatPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"116","parentId":"104","text":"暖价管理"}],"hasChildren":true,"hasParent":false,"id":"104","parentId":"0","text":"暖费管理"},{"attributes":{"icon":"fa fa-vcard-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-bomb","url":"/print/print"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"149","parentId":"108","text":"票据记录"}],"hasChildren":true,"hasParent":false,"id":"108","parentId":"0","text":"票据管理"},{"attributes":{"icon":"fa fa-bar-chart","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-area-chart","url":"/chart/graph_echarts.html"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","text":"百度chart"},{"attributes":{"icon":"fa fa-sun-o","url":"charts/countDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"109","parentId":"97","text":"日统计报表"},{"attributes":{"icon":"fa fa-registered","url":"charts/countMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"110","parentId":"97","text":"月统计报表"},{"attributes":{"icon":"fa fa-support","url":"charts/countYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"111","parentId":"97","text":"年统计报表"},{"attributes":{"icon":"fa fa-money","url":"charts/countOwe"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"155","parentId":"97","text":"欠费报表图"},{"attributes":{"icon":"fa fa-tachometer","url":"charts/countRun"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"112","parentId":"97","text":"走势图报表"}],"hasChildren":true,"hasParent":false,"id":"97","parentId":"0","text":"统计管理"},{"attributes":{"icon":"fa fa-bars","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-book","url":"/common/dict"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"78","parentId":"1","text":"数据字典"},{"attributes":{"icon":"fa fa-folder-open","url":"/common/sysFile"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"71","parentId":"1","text":"文件管理"}],"h(String), 127.0.0.1(String), 2019-04-03 08:39:08.137(Timestamp)
2019-04-03 08:39:08 -请求地址 : http://localhost:8081/main
2019-04-03 08:39:08 -HTTP METHOD : GET
2019-04-03 08:39:08 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 08:39:08 -参数 : []
2019-04-03 08:39:08 -耗时 : 1
2019-04-03 08:39:08 -返回值 : main
2019-04-03 08:39:08 -<==    Updates: 1
2019-04-03 08:39:08 -请求地址 : http://localhost:8081/oa/notify/message
2019-04-03 08:39:08 -HTTP METHOD : GET
2019-04-03 08:39:08 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2019-04-03 08:39:08 -参数 : []
2019-04-03 08:39:08 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2019-04-03 08:39:08 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2019-04-03 08:39:08 -<==      Total: 0
2019-04-03 08:39:08 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2019-04-03 08:39:08 -==> Parameters: 1(Long), 0(String)
2019-04-03 08:39:08 -<==      Total: 1
2019-04-03 08:39:08 -耗时 : 7
2019-04-03 08:39:08 -返回值 : com.bootdo.common.utils.PageUtils@2ba58f2d
2019-04-03 08:39:08 -请求地址 : http://localhost:8081/main
2019-04-03 08:39:08 -HTTP METHOD : GET
2019-04-03 08:39:08 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 08:39:08 -参数 : []
2019-04-03 08:39:08 -耗时 : 1
2019-04-03 08:39:08 -返回值 : main
2019-04-03 08:39:21 -请求地址 : http://localhost:8081/elec/elec
2019-04-03 08:39:21 -HTTP METHOD : GET
2019-04-03 08:39:21 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.Elec
2019-04-03 08:39:21 -参数 : []
2019-04-03 08:39:21 -耗时 : 1
2019-04-03 08:39:21 -返回值 : elec/elec/elec
2019-04-03 08:39:21 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-03 08:39:21 -HTTP METHOD : GET
2019-04-03 08:39:21 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 08:39:21 -参数 : [userType]
2019-04-03 08:39:21 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 08:39:21 -==> Parameters: userType(String)
2019-04-03 08:39:21 -<==      Total: 2
2019-04-03 08:39:21 -耗时 : 5
2019-04-03 08:39:21 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 08:39:21 -请求地址 : http://localhost:8081/elec/elec/list
2019-04-03 08:39:21 -HTTP METHOD : GET
2019-04-03 08:39:21 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.list
2019-04-03 08:39:21 -参数 : [{limit=10, offset=0, userType=, userOrg=, userId=, createTime=, queryType=1}, com.bootdo.elec.domain.ElecDO@856996c]
2019-04-03 08:39:21 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec order by id asc limit ?, ? 
2019-04-03 08:39:21 -==> Parameters: 0(Integer), 10(Integer)
2019-04-03 08:39:21 -<==      Total: 10
2019-04-03 08:39:21 -==>  Preparing: select count(*) from elec 
2019-04-03 08:39:21 -==> Parameters: 
2019-04-03 08:39:21 -<==      Total: 1
2019-04-03 08:39:21 -耗时 : 8
2019-04-03 08:39:21 -返回值 : com.bootdo.common.utils.PageUtils@6377ba4
2019-04-03 08:39:30 -请求地址 : http://localhost:8081/elec/elec/edit/5
2019-04-03 08:39:30 -HTTP METHOD : GET
2019-04-03 08:39:30 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.edit
2019-04-03 08:39:30 -参数 : [5, {}]
2019-04-03 08:39:30 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, `user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec where id = ? 
2019-04-03 08:39:30 -==> Parameters: 5(Long)
2019-04-03 08:39:30 -<==      Total: 1
2019-04-03 08:39:30 -耗时 : 7
2019-04-03 08:39:30 -返回值 : elec/elec/edit
2019-04-03 08:39:30 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-03 08:39:30 -HTTP METHOD : GET
2019-04-03 08:39:30 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 08:39:30 -参数 : [userType]
2019-04-03 08:39:30 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 08:39:30 -==> Parameters: userType(String)
2019-04-03 08:39:30 -请求地址 : http://localhost:8081/common/dict/list/userState
2019-04-03 08:39:30 -HTTP METHOD : GET
2019-04-03 08:39:30 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 08:39:30 -参数 : [userState]
2019-04-03 08:39:30 -<==      Total: 2
2019-04-03 08:39:30 -耗时 : 5
2019-04-03 08:39:30 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 08:39:30 -请求地址 : http://localhost:8081/common/dict/list/elecType
2019-04-03 08:39:30 -HTTP METHOD : GET
2019-04-03 08:39:30 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 08:39:30 -参数 : [elecType]
2019-04-03 08:39:30 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 08:39:30 -==> Parameters: userState(String)
2019-04-03 08:39:30 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 08:39:30 -==> Parameters: elecType(String)
2019-04-03 08:39:30 -<==      Total: 2
2019-04-03 08:39:30 -耗时 : 9
2019-04-03 08:39:30 -返回值 : [DictDO{id=126, name='使用中', value='1', type='userState', description='用户状态', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=125, name='未使用', value='0', type='userState', description='用户状态', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 08:39:30 -<==      Total: 2
2019-04-03 08:39:30 -耗时 : 7
2019-04-03 08:39:30 -返回值 : [DictDO{id=139, name='民用电', value='1', type='elecType', description='电量性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=138, name='商业电', value='0', type='elecType', description='电量类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 08:39:34 -请求地址 : http://localhost:8081/elec/elec/update
2019-04-03 08:39:34 -HTTP METHOD : POST
2019-04-03 08:39:34 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.update
2019-04-03 08:39:34 -参数 : [com.bootdo.elec.domain.ElecDO@36b3a895]
2019-04-03 08:39:34 -==>  Preparing: update elec SET `user_id` = ?, `user_name` = ?, `user_type` = ?, `user_org` = ?, `user_tell` = ?, `user_state` = ?, `wages_id` = ?, `start` = ?, `end` = ?, `hu` = ?, `elec_amount` = ?, `elec_cost` = ?, `elec_sum` = ?, `create_time` = ?, `create_by` = ?, `update_time` = ?, `update_by` = ?, `remark` = ? where id = ? 
2019-04-03 08:39:34 -==> Parameters: 1-0006(String), 爱仕达(String), B(String), 3(String), (String), 1(String), 1000(String), 10(String), 20(String), 3(Integer), 100.00(BigDecimal), 100.00(BigDecimal), 100.00(BigDecimal), 2019-03(String), 1(Long), 2019-04-03 08:39:34.102(Timestamp), 1(Long), (String), 5(Long)
2019-04-03 08:39:34 -<==    Updates: 1
2019-04-03 08:39:34 -耗时 : 55
2019-04-03 08:39:34 -返回值 : {msg=操作成功, code=0}
2019-04-03 08:39:34 -请求地址 : http://localhost:8081/elec/elec/list
2019-04-03 08:39:34 -HTTP METHOD : GET
2019-04-03 08:39:34 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.list
2019-04-03 08:39:34 -参数 : [{limit=10, offset=0, userType=, userOrg=, userId=, createTime=, queryType=2}, com.bootdo.elec.domain.ElecDO@2c04b4fe]
2019-04-03 08:39:34 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec WHERE `elec_sum` < 0 order by id asc limit ?, ? 
2019-04-03 08:39:34 -==> Parameters: 0(Integer), 10(Integer)
2019-04-03 08:39:34 -<==      Total: 2
2019-04-03 08:39:34 -==>  Preparing: select count(*) from elec WHERE `elec_sum` < 0 
2019-04-03 08:39:34 -==> Parameters: 
2019-04-03 08:39:34 -<==      Total: 1
2019-04-03 08:39:34 -耗时 : 7
2019-04-03 08:39:34 -返回值 : com.bootdo.common.utils.PageUtils@7a9620f5
2019-04-03 08:39:42 -请求地址 : http://localhost:8081/index
2019-04-03 08:39:42 -HTTP METHOD : GET
2019-04-03 08:39:42 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2019-04-03 08:39:42 -参数 : [{}]
2019-04-03 08:39:42 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2019-04-03 08:39:42 -==> Parameters: 1(Long)
2019-04-03 08:39:42 -<==      Total: 46
2019-04-03 08:39:42 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2019-04-03 08:39:42 -==> Parameters: 138(Long)
2019-04-03 08:39:42 -<==      Total: 1
2019-04-03 08:39:42 -耗时 : 22
2019-04-03 08:39:42 -返回值 : index_v1
2019-04-03 08:39:42 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 08:39:42 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 22(Integer), com.bootdo.system.controller.LoginController.index()(String), {"menus":[{"attributes":{"icon":"fa fa-money","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-money","url":"/moneyList/moneyList"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"102","parentId":"106","text":"现金缴费"},{"attributes":{"icon":"fa fa-book","url":"/moneyLog/elecLog"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"107","parentId":"106","text":"缴费记录"}],"hasChildren":true,"hasParent":false,"id":"106","parentId":"0","text":"收费管理"},{"attributes":{"icon":"fa fa-lightbulb-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/elec/elec"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"121","parentId":"103","text":"电费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"elec/elecInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"122","parentId":"103","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"elec/elecUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"123","parentId":"103","text":"电表上传"},{"attributes":{"icon":"fa fa-cc","url":"/elec/elecPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"124","parentId":"103","text":"电价管理"}],"hasChildren":true,"hasParent":false,"id":"103","parentId":"0","text":"电费管理"},{"attributes":{"icon":"fa fa-tint","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/water/water"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"117","parentId":"105","text":"水费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"water/waterInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"118","parentId":"105","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"water/waterUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"119","parentId":"105","text":"水费生成"},{"attributes":{"icon":"fa fa-cc","url":"/water/waterPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"120","parentId":"105","text":"水价管理"}],"hasChildren":true,"hasParent":false,"id":"105","parentId":"0","text":"水费管理"},{"attributes":{"icon":"fa fa-fire","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/heat/heat"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"113","parentId":"104","text":"暖费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"heat/heatInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"114","parentId":"104","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"heat/heatUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"115","parentId":"104","text":"暖费生成"},{"attributes":{"icon":"","url":"/heat/heatPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"116","parentId":"104","text":"暖价管理"}],"hasChildren":true,"hasParent":false,"id":"104","parentId":"0","text":"暖费管理"},{"attributes":{"icon":"fa fa-vcard-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-bomb","url":"/print/print"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"149","parentId":"108","text":"票据记录"}],"hasChildren":true,"hasParent":false,"id":"108","parentId":"0","text":"票据管理"},{"attributes":{"icon":"fa fa-bar-chart","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-area-chart","url":"/chart/graph_echarts.html"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","text":"百度chart"},{"attributes":{"icon":"fa fa-sun-o","url":"charts/countDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"109","parentId":"97","text":"日统计报表"},{"attributes":{"icon":"fa fa-registered","url":"charts/countMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"110","parentId":"97","text":"月统计报表"},{"attributes":{"icon":"fa fa-support","url":"charts/countYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"111","parentId":"97","text":"年统计报表"},{"attributes":{"icon":"fa fa-money","url":"charts/countOwe"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"155","parentId":"97","text":"欠费报表图"},{"attributes":{"icon":"fa fa-tachometer","url":"charts/countRun"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"112","parentId":"97","text":"走势图报表"}],"hasChildren":true,"hasParent":false,"id":"97","parentId":"0","text":"统计管理"},{"attributes":{"icon":"fa fa-bars","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-book","url":"/common/dict"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"78","parentId":"1","text":"数据字典"},{"attributes":{"icon":"fa fa-folder-open","url":"/common/sysFile"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"71","parentId":"1","text":"文件管理"}],"h(String), 127.0.0.1(String), 2019-04-03 08:39:42.158(Timestamp)
2019-04-03 08:39:42 -请求地址 : http://localhost:8081/main
2019-04-03 08:39:42 -HTTP METHOD : GET
2019-04-03 08:39:42 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 08:39:42 -参数 : []
2019-04-03 08:39:42 -耗时 : 1
2019-04-03 08:39:42 -返回值 : main
2019-04-03 08:39:42 -<==    Updates: 1
2019-04-03 08:39:42 -请求地址 : http://localhost:8081/oa/notify/message
2019-04-03 08:39:42 -HTTP METHOD : GET
2019-04-03 08:39:42 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2019-04-03 08:39:42 -参数 : []
2019-04-03 08:39:42 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2019-04-03 08:39:42 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2019-04-03 08:39:42 -<==      Total: 0
2019-04-03 08:39:42 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2019-04-03 08:39:42 -==> Parameters: 1(Long), 0(String)
2019-04-03 08:39:42 -<==      Total: 1
2019-04-03 08:39:42 -耗时 : 15
2019-04-03 08:39:42 -返回值 : com.bootdo.common.utils.PageUtils@34247622
2019-04-03 08:39:42 -请求地址 : http://localhost:8081/main
2019-04-03 08:39:42 -HTTP METHOD : GET
2019-04-03 08:39:42 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 08:39:42 -参数 : []
2019-04-03 08:39:42 -耗时 : 0
2019-04-03 08:39:42 -返回值 : main
2019-04-03 08:39:44 -请求地址 : http://localhost:8081/elec/elec
2019-04-03 08:39:44 -HTTP METHOD : GET
2019-04-03 08:39:44 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.Elec
2019-04-03 08:39:44 -参数 : []
2019-04-03 08:39:44 -耗时 : 0
2019-04-03 08:39:44 -返回值 : elec/elec/elec
2019-04-03 08:39:44 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-03 08:39:44 -HTTP METHOD : GET
2019-04-03 08:39:44 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 08:39:44 -参数 : [userType]
2019-04-03 08:39:44 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 08:39:44 -==> Parameters: userType(String)
2019-04-03 08:39:44 -<==      Total: 2
2019-04-03 08:39:44 -耗时 : 3
2019-04-03 08:39:44 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 08:39:44 -请求地址 : http://localhost:8081/elec/elec/list
2019-04-03 08:39:44 -HTTP METHOD : GET
2019-04-03 08:39:44 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.list
2019-04-03 08:39:44 -参数 : [{limit=10, offset=0, userType=, userOrg=, userId=, createTime=, queryType=1}, com.bootdo.elec.domain.ElecDO@7741e5bf]
2019-04-03 08:39:44 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec order by id asc limit ?, ? 
2019-04-03 08:39:44 -==> Parameters: 0(Integer), 10(Integer)
2019-04-03 08:39:44 -<==      Total: 10
2019-04-03 08:39:44 -==>  Preparing: select count(*) from elec 
2019-04-03 08:39:44 -==> Parameters: 
2019-04-03 08:39:44 -<==      Total: 1
2019-04-03 08:39:44 -耗时 : 9
2019-04-03 08:39:44 -返回值 : com.bootdo.common.utils.PageUtils@d9721aa
2019-04-03 08:39:50 -请求地址 : http://localhost:8081/elec/elec/edit/8
2019-04-03 08:39:50 -HTTP METHOD : GET
2019-04-03 08:39:50 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.edit
2019-04-03 08:39:50 -参数 : [8, {}]
2019-04-03 08:39:50 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, `user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec where id = ? 
2019-04-03 08:39:50 -==> Parameters: 8(Long)
2019-04-03 08:39:50 -<==      Total: 1
2019-04-03 08:39:50 -耗时 : 4
2019-04-03 08:39:50 -返回值 : elec/elec/edit
2019-04-03 08:39:50 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-03 08:39:50 -HTTP METHOD : GET
2019-04-03 08:39:50 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 08:39:50 -参数 : [userType]
2019-04-03 08:39:50 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 08:39:50 -==> Parameters: userType(String)
2019-04-03 08:39:50 -请求地址 : http://localhost:8081/common/dict/list/userState
2019-04-03 08:39:50 -HTTP METHOD : GET
2019-04-03 08:39:50 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 08:39:50 -参数 : [userState]
2019-04-03 08:39:50 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 08:39:50 -<==      Total: 2
2019-04-03 08:39:50 -==> Parameters: userState(String)
2019-04-03 08:39:50 -耗时 : 4
2019-04-03 08:39:50 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 08:39:50 -<==      Total: 2
2019-04-03 08:39:50 -耗时 : 6
2019-04-03 08:39:50 -返回值 : [DictDO{id=126, name='使用中', value='1', type='userState', description='用户状态', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=125, name='未使用', value='0', type='userState', description='用户状态', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 08:39:50 -请求地址 : http://localhost:8081/common/dict/list/elecType
2019-04-03 08:39:50 -HTTP METHOD : GET
2019-04-03 08:39:50 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 08:39:50 -参数 : [elecType]
2019-04-03 08:39:50 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 08:39:50 -==> Parameters: elecType(String)
2019-04-03 08:39:50 -<==      Total: 2
2019-04-03 08:39:50 -耗时 : 5
2019-04-03 08:39:50 -返回值 : [DictDO{id=139, name='民用电', value='1', type='elecType', description='电量性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=138, name='商业电', value='0', type='elecType', description='电量类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 08:39:54 -请求地址 : http://localhost:8081/elec/elec/update
2019-04-03 08:39:54 -HTTP METHOD : POST
2019-04-03 08:39:54 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.update
2019-04-03 08:39:54 -参数 : [com.bootdo.elec.domain.ElecDO@1b786909]
2019-04-03 08:39:54 -==>  Preparing: update elec SET `user_id` = ?, `user_name` = ?, `user_type` = ?, `user_org` = ?, `user_tell` = ?, `user_state` = ?, `wages_id` = ?, `elec_type` = ?, `start` = ?, `end` = ?, `hu` = ?, `elec_amount` = ?, `elec_cost` = ?, `elec_sum` = ?, `create_time` = ?, `create_by` = ?, `update_time` = ?, `update_by` = ?, `remark` = ? where id = ? 
2019-04-03 08:39:54 -==> Parameters: 1-0008(String), 喜欢(String), A(String), 2(String), (String), 0(String), 1(String), 1(String), 1(String), 1(String), 1(Integer), 1.00(BigDecimal), 1.00(BigDecimal), 1.00(BigDecimal), 2019-02(String), 1(Long), 2019-04-03 08:39:54.155(Timestamp), 1(Long), (String), 8(Long)
2019-04-03 08:39:54 -<==    Updates: 1
2019-04-03 08:39:54 -耗时 : 113
2019-04-03 08:39:54 -返回值 : {msg=操作成功, code=0}
2019-04-03 08:39:54 -请求地址 : http://localhost:8081/elec/elec/list
2019-04-03 08:39:54 -HTTP METHOD : GET
2019-04-03 08:39:54 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.list
2019-04-03 08:39:54 -参数 : [{limit=10, offset=0, userType=, userOrg=, userId=, createTime=, queryType=2}, com.bootdo.elec.domain.ElecDO@28aedc43]
2019-04-03 08:39:54 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec WHERE `elec_sum` < 0 order by id asc limit ?, ? 
2019-04-03 08:39:54 -==> Parameters: 0(Integer), 10(Integer)
2019-04-03 08:39:54 -<==      Total: 2
2019-04-03 08:39:54 -==>  Preparing: select count(*) from elec WHERE `elec_sum` < 0 
2019-04-03 08:39:54 -==> Parameters: 
2019-04-03 08:39:54 -<==      Total: 1
2019-04-03 08:39:54 -耗时 : 9
2019-04-03 08:39:54 -返回值 : com.bootdo.common.utils.PageUtils@688415a1
2019-04-03 08:39:56 -请求地址 : http://localhost:8081/index
2019-04-03 08:39:56 -HTTP METHOD : GET
2019-04-03 08:39:56 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2019-04-03 08:39:56 -参数 : [{}]
2019-04-03 08:39:56 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2019-04-03 08:39:56 -==> Parameters: 1(Long)
2019-04-03 08:39:56 -<==      Total: 46
2019-04-03 08:39:56 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2019-04-03 08:39:56 -==> Parameters: 138(Long)
2019-04-03 08:39:56 -<==      Total: 1
2019-04-03 08:39:56 -耗时 : 25
2019-04-03 08:39:56 -返回值 : index_v1
2019-04-03 08:39:56 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 08:39:56 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 25(Integer), com.bootdo.system.controller.LoginController.index()(String), {"menus":[{"attributes":{"icon":"fa fa-money","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-money","url":"/moneyList/moneyList"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"102","parentId":"106","text":"现金缴费"},{"attributes":{"icon":"fa fa-book","url":"/moneyLog/elecLog"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"107","parentId":"106","text":"缴费记录"}],"hasChildren":true,"hasParent":false,"id":"106","parentId":"0","text":"收费管理"},{"attributes":{"icon":"fa fa-lightbulb-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/elec/elec"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"121","parentId":"103","text":"电费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"elec/elecInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"122","parentId":"103","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"elec/elecUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"123","parentId":"103","text":"电表上传"},{"attributes":{"icon":"fa fa-cc","url":"/elec/elecPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"124","parentId":"103","text":"电价管理"}],"hasChildren":true,"hasParent":false,"id":"103","parentId":"0","text":"电费管理"},{"attributes":{"icon":"fa fa-tint","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/water/water"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"117","parentId":"105","text":"水费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"water/waterInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"118","parentId":"105","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"water/waterUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"119","parentId":"105","text":"水费生成"},{"attributes":{"icon":"fa fa-cc","url":"/water/waterPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"120","parentId":"105","text":"水价管理"}],"hasChildren":true,"hasParent":false,"id":"105","parentId":"0","text":"水费管理"},{"attributes":{"icon":"fa fa-fire","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/heat/heat"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"113","parentId":"104","text":"暖费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"heat/heatInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"114","parentId":"104","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"heat/heatUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"115","parentId":"104","text":"暖费生成"},{"attributes":{"icon":"","url":"/heat/heatPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"116","parentId":"104","text":"暖价管理"}],"hasChildren":true,"hasParent":false,"id":"104","parentId":"0","text":"暖费管理"},{"attributes":{"icon":"fa fa-vcard-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-bomb","url":"/print/print"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"149","parentId":"108","text":"票据记录"}],"hasChildren":true,"hasParent":false,"id":"108","parentId":"0","text":"票据管理"},{"attributes":{"icon":"fa fa-bar-chart","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-area-chart","url":"/chart/graph_echarts.html"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","text":"百度chart"},{"attributes":{"icon":"fa fa-sun-o","url":"charts/countDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"109","parentId":"97","text":"日统计报表"},{"attributes":{"icon":"fa fa-registered","url":"charts/countMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"110","parentId":"97","text":"月统计报表"},{"attributes":{"icon":"fa fa-money","url":"charts/countOwe"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"155","parentId":"97","text":"欠费报表图"},{"attributes":{"icon":"fa fa-support","url":"charts/countYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"111","parentId":"97","text":"年统计报表"},{"attributes":{"icon":"fa fa-tachometer","url":"charts/countRun"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"112","parentId":"97","text":"走势图报表"}],"hasChildren":true,"hasParent":false,"id":"97","parentId":"0","text":"统计管理"},{"attributes":{"icon":"fa fa-bars","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-book","url":"/common/dict"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"78","parentId":"1","text":"数据字典"},{"attributes":{"icon":"fa fa-folder-open","url":"/common/sysFile"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"71","parentId":"1","text":"文件管理"}],"h(String), 127.0.0.1(String), 2019-04-03 08:39:56.792(Timestamp)
2019-04-03 08:39:56 -请求地址 : http://localhost:8081/main
2019-04-03 08:39:56 -HTTP METHOD : GET
2019-04-03 08:39:56 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 08:39:56 -参数 : []
2019-04-03 08:39:56 -耗时 : 0
2019-04-03 08:39:56 -返回值 : main
2019-04-03 08:39:56 -<==    Updates: 1
2019-04-03 08:39:57 -请求地址 : http://localhost:8081/oa/notify/message
2019-04-03 08:39:57 -HTTP METHOD : GET
2019-04-03 08:39:57 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2019-04-03 08:39:57 -参数 : []
2019-04-03 08:39:57 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2019-04-03 08:39:57 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2019-04-03 08:39:57 -<==      Total: 0
2019-04-03 08:39:57 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2019-04-03 08:39:57 -==> Parameters: 1(Long), 0(String)
2019-04-03 08:39:57 -<==      Total: 1
2019-04-03 08:39:57 -耗时 : 8
2019-04-03 08:39:57 -返回值 : com.bootdo.common.utils.PageUtils@4c272932
2019-04-03 08:39:57 -请求地址 : http://localhost:8081/main
2019-04-03 08:39:57 -HTTP METHOD : GET
2019-04-03 08:39:57 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 08:39:57 -参数 : []
2019-04-03 08:39:57 -耗时 : 0
2019-04-03 08:39:57 -返回值 : main
2019-04-03 08:39:58 -请求地址 : http://localhost:8081/elec/elec
2019-04-03 08:39:58 -HTTP METHOD : GET
2019-04-03 08:39:58 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.Elec
2019-04-03 08:39:58 -参数 : []
2019-04-03 08:39:58 -耗时 : 0
2019-04-03 08:39:58 -返回值 : elec/elec/elec
2019-04-03 08:39:59 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-03 08:39:59 -HTTP METHOD : GET
2019-04-03 08:39:59 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 08:39:59 -参数 : [userType]
2019-04-03 08:39:59 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 08:39:59 -==> Parameters: userType(String)
2019-04-03 08:39:59 -<==      Total: 2
2019-04-03 08:39:59 -耗时 : 4
2019-04-03 08:39:59 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 08:39:59 -请求地址 : http://localhost:8081/elec/elec/list
2019-04-03 08:39:59 -HTTP METHOD : GET
2019-04-03 08:39:59 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.list
2019-04-03 08:39:59 -参数 : [{limit=10, offset=0, userType=, userOrg=, userId=, createTime=, queryType=1}, com.bootdo.elec.domain.ElecDO@772aa575]
2019-04-03 08:39:59 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec order by id asc limit ?, ? 
2019-04-03 08:39:59 -==> Parameters: 0(Integer), 10(Integer)
2019-04-03 08:39:59 -<==      Total: 10
2019-04-03 08:39:59 -==>  Preparing: select count(*) from elec 
2019-04-03 08:39:59 -==> Parameters: 
2019-04-03 08:39:59 -<==      Total: 1
2019-04-03 08:39:59 -耗时 : 6
2019-04-03 08:39:59 -返回值 : com.bootdo.common.utils.PageUtils@5024a6ed
2019-04-03 08:47:37 -请求地址 : http://localhost:8081/login;JSESSIONID=3e35a5cc-0e1d-4027-ab84-4cc10b0a73ef
2019-04-03 08:47:37 -HTTP METHOD : GET
2019-04-03 08:47:37 -CLASS_METHOD : com.bootdo.system.controller.LoginController.login
2019-04-03 08:47:37 -参数 : [{}]
2019-04-03 08:47:37 -耗时 : 1
2019-04-03 08:47:37 -返回值 : login
2019-04-03 08:47:39 -请求地址 : http://localhost:8081/getVerify
2019-04-03 08:47:39 -HTTP METHOD : GET
2019-04-03 08:47:39 -CLASS_METHOD : com.bootdo.system.controller.LoginController.getVerify
2019-04-03 08:47:39 -参数 : [org.apache.shiro.web.servlet.ShiroHttpServletRequest@ddb0d4c, org.apache.shiro.web.servlet.ShiroHttpServletResponse@62ba03cc]
2019-04-03 08:47:39 -0160
2019-04-03 08:47:39 -耗时 : 19
2019-04-03 08:47:39 -返回值 : null
2019-04-03 08:47:39 -请求地址 : http://localhost:8081/login
2019-04-03 08:47:39 -HTTP METHOD : GET
2019-04-03 08:47:39 -CLASS_METHOD : com.bootdo.system.controller.LoginController.login
2019-04-03 08:47:39 -参数 : [{}]
2019-04-03 08:47:39 -耗时 : 2
2019-04-03 08:47:39 -返回值 : login
2019-04-03 08:47:45 -请求地址 : http://localhost:8081/login
2019-04-03 08:47:45 -HTTP METHOD : POST
2019-04-03 08:47:45 -CLASS_METHOD : com.bootdo.system.controller.LoginController.ajaxLogin
2019-04-03 08:47:45 -参数 : [admin, 111111, 0160, org.apache.shiro.web.servlet.ShiroHttpServletRequest@4a8fe257]
2019-04-03 08:47:45 -==>  Preparing: select `user_id`,`username`,`name`,`password`,`dept_id`,`email`,`mobile`,`status`,`user_id_create`,`gmt_create`,`gmt_modified`,`sex`,`birth`,`pic_id`,`live_address`,`hobby`,`province`,`city`,`district` from sys_user WHERE username = ? order by user_id desc 
2019-04-03 08:47:45 -==> Parameters: admin(String)
2019-04-03 08:47:45 -<==      Total: 1
2019-04-03 08:47:45 -耗时 : 7
2019-04-03 08:47:45 -返回值 : {msg=操作成功, code=0}
2019-04-03 08:47:45 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 08:47:45 -==> Parameters: 1(Long), admin(String), 登录(String), 7(Integer), com.bootdo.system.controller.LoginController.ajaxLogin()(String), null, 127.0.0.1(String), 2019-04-03 08:47:45.279(Timestamp)
2019-04-03 08:47:45 -请求地址 : http://localhost:8081/index
2019-04-03 08:47:45 -HTTP METHOD : GET
2019-04-03 08:47:45 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2019-04-03 08:47:45 -参数 : [{}]
2019-04-03 08:47:45 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2019-04-03 08:47:45 -==> Parameters: 1(Long)
2019-04-03 08:47:45 -<==      Total: 46
2019-04-03 08:47:45 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2019-04-03 08:47:45 -==> Parameters: 138(Long)
2019-04-03 08:47:45 -<==      Total: 1
2019-04-03 08:47:45 -耗时 : 33
2019-04-03 08:47:45 -返回值 : index_v1
2019-04-03 08:47:45 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 08:47:45 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 33(Integer), com.bootdo.system.controller.LoginController.index()(String), {"menus":[{"attributes":{"icon":"fa fa-money","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-money","url":"/moneyList/moneyList"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"102","parentId":"106","text":"现金缴费"},{"attributes":{"icon":"fa fa-book","url":"/moneyLog/elecLog"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"107","parentId":"106","text":"缴费记录"}],"hasChildren":true,"hasParent":false,"id":"106","parentId":"0","text":"收费管理"},{"attributes":{"icon":"fa fa-lightbulb-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/elec/elec"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"121","parentId":"103","text":"电费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"elec/elecInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"122","parentId":"103","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"elec/elecUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"123","parentId":"103","text":"电表上传"},{"attributes":{"icon":"fa fa-cc","url":"/elec/elecPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"124","parentId":"103","text":"电价管理"}],"hasChildren":true,"hasParent":false,"id":"103","parentId":"0","text":"电费管理"},{"attributes":{"icon":"fa fa-tint","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/water/water"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"117","parentId":"105","text":"水费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"water/waterInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"118","parentId":"105","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"water/waterUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"119","parentId":"105","text":"水费生成"},{"attributes":{"icon":"fa fa-cc","url":"/water/waterPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"120","parentId":"105","text":"水价管理"}],"hasChildren":true,"hasParent":false,"id":"105","parentId":"0","text":"水费管理"},{"attributes":{"icon":"fa fa-fire","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/heat/heat"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"113","parentId":"104","text":"暖费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"heat/heatInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"114","parentId":"104","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"heat/heatUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"115","parentId":"104","text":"暖费生成"},{"attributes":{"icon":"","url":"/heat/heatPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"116","parentId":"104","text":"暖价管理"}],"hasChildren":true,"hasParent":false,"id":"104","parentId":"0","text":"暖费管理"},{"attributes":{"icon":"fa fa-vcard-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-bomb","url":"/print/print"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"149","parentId":"108","text":"票据记录"}],"hasChildren":true,"hasParent":false,"id":"108","parentId":"0","text":"票据管理"},{"attributes":{"icon":"fa fa-bar-chart","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-area-chart","url":"/chart/graph_echarts.html"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","text":"百度chart"},{"attributes":{"icon":"fa fa-sun-o","url":"charts/countDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"109","parentId":"97","text":"日统计报表"},{"attributes":{"icon":"fa fa-registered","url":"charts/countMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"110","parentId":"97","text":"月统计报表"},{"attributes":{"icon":"fa fa-support","url":"charts/countYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"111","parentId":"97","text":"年统计报表"},{"attributes":{"icon":"fa fa-money","url":"charts/countOwe"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"155","parentId":"97","text":"欠费报表图"},{"attributes":{"icon":"fa fa-tachometer","url":"charts/countRun"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"112","parentId":"97","text":"走势图报表"}],"hasChildren":true,"hasParent":false,"id":"97","parentId":"0","text":"统计管理"},{"attributes":{"icon":"fa fa-bars","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-book","url":"/common/dict"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"78","parentId":"1","text":"数据字典"},{"attributes":{"icon":"fa fa-folder-open","url":"/common/sysFile"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"71","parentId":"1","text":"文件管理"}],"h(String), 127.0.0.1(String), 2019-04-03 08:47:45.595(Timestamp)
2019-04-03 08:47:45 -<==    Updates: 1
2019-04-03 08:47:45 -<==    Updates: 1
2019-04-03 08:47:46 -请求地址 : http://localhost:8081/main
2019-04-03 08:47:46 -HTTP METHOD : GET
2019-04-03 08:47:46 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 08:47:46 -参数 : []
2019-04-03 08:47:46 -耗时 : 0
2019-04-03 08:47:46 -返回值 : main
2019-04-03 08:47:47 -请求地址 : http://localhost:8081/oa/notify/message
2019-04-03 08:47:47 -HTTP METHOD : GET
2019-04-03 08:47:47 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2019-04-03 08:47:47 -参数 : []
2019-04-03 08:47:47 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2019-04-03 08:47:47 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2019-04-03 08:47:47 -请求地址 : http://localhost:8081/main
2019-04-03 08:47:47 -HTTP METHOD : GET
2019-04-03 08:47:47 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 08:47:47 -参数 : []
2019-04-03 08:47:47 -耗时 : 1
2019-04-03 08:47:47 -返回值 : main
2019-04-03 08:47:48 -<==      Total: 0
2019-04-03 08:47:48 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2019-04-03 08:47:48 -==> Parameters: 1(Long), 0(String)
2019-04-03 08:47:48 -<==      Total: 1
2019-04-03 08:47:48 -耗时 : 526
2019-04-03 08:47:48 -返回值 : com.bootdo.common.utils.PageUtils@5b44f322
2019-04-03 08:48:06 -==>  Preparing: select distinct m.perms from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id = ur.role_id where ur.user_id = ? 
2019-04-03 08:48:06 -==> Parameters: 1(Long)
2019-04-03 08:48:06 -<==      Total: 90
2019-04-03 08:48:06 -请求地址 : http://localhost:8081/charts/countDD
2019-04-03 08:48:06 -HTTP METHOD : GET
2019-04-03 08:48:06 -CLASS_METHOD : com.bootdo.charts.controller.countDDController.countDD
2019-04-03 08:48:06 -参数 : []
2019-04-03 08:48:06 -耗时 : 1
2019-04-03 08:48:06 -返回值 : charts/countDD
2019-04-03 08:48:07 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-03 08:48:07 -HTTP METHOD : GET
2019-04-03 08:48:07 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 08:48:07 -参数 : [userType]
2019-04-03 08:48:07 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 08:48:07 -==> Parameters: userType(String)
2019-04-03 08:48:07 -<==      Total: 2
2019-04-03 08:48:07 -耗时 : 4
2019-04-03 08:48:07 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 08:48:09 -请求地址 : http://localhost:8081/elec/elec
2019-04-03 08:48:09 -HTTP METHOD : GET
2019-04-03 08:48:09 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.Elec
2019-04-03 08:48:09 -参数 : []
2019-04-03 08:48:09 -耗时 : 1
2019-04-03 08:48:09 -返回值 : elec/elec/elec
2019-04-03 08:48:10 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-03 08:48:10 -HTTP METHOD : GET
2019-04-03 08:48:10 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 08:48:10 -参数 : [userType]
2019-04-03 08:48:10 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 08:48:10 -==> Parameters: userType(String)
2019-04-03 08:48:10 -<==      Total: 2
2019-04-03 08:48:10 -耗时 : 3
2019-04-03 08:48:10 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 08:48:10 -请求地址 : http://localhost:8081/elec/elec/list
2019-04-03 08:48:10 -HTTP METHOD : GET
2019-04-03 08:48:10 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.list
2019-04-03 08:48:10 -参数 : [{limit=10, offset=0, userType=, userOrg=, userId=, createTime=, queryType=1}, com.bootdo.elec.domain.ElecDO@49ecfcf7]
2019-04-03 08:48:10 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec order by id asc limit ?, ? 
2019-04-03 08:48:10 -==> Parameters: 0(Integer), 10(Integer)
2019-04-03 08:48:10 -<==      Total: 10
2019-04-03 08:48:10 -==>  Preparing: select count(*) from elec 
2019-04-03 08:48:10 -==> Parameters: 
2019-04-03 08:48:10 -<==      Total: 1
2019-04-03 08:48:10 -耗时 : 7
2019-04-03 08:48:10 -返回值 : com.bootdo.common.utils.PageUtils@38e8a223
2019-04-03 08:48:15 -请求地址 : http://localhost:8081/elec/elec/edit/8
2019-04-03 08:48:15 -HTTP METHOD : GET
2019-04-03 08:48:15 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.edit
2019-04-03 08:48:15 -参数 : [8, {}]
2019-04-03 08:48:15 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, `user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec where id = ? 
2019-04-03 08:48:15 -==> Parameters: 8(Long)
2019-04-03 08:48:15 -<==      Total: 1
2019-04-03 08:48:15 -耗时 : 5
2019-04-03 08:48:15 -返回值 : elec/elec/edit
2019-04-03 08:48:15 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-03 08:48:15 -HTTP METHOD : GET
2019-04-03 08:48:15 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 08:48:15 -参数 : [userType]
2019-04-03 08:48:15 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 08:48:15 -==> Parameters: userType(String)
2019-04-03 08:48:15 -请求地址 : http://localhost:8081/common/dict/list/userState
2019-04-03 08:48:15 -HTTP METHOD : GET
2019-04-03 08:48:15 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 08:48:15 -参数 : [userState]
2019-04-03 08:48:15 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 08:48:15 -==> Parameters: userState(String)
2019-04-03 08:48:15 -请求地址 : http://localhost:8081/common/dict/list/elecType
2019-04-03 08:48:15 -<==      Total: 2
2019-04-03 08:48:15 -耗时 : 7
2019-04-03 08:48:15 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 08:48:15 -<==      Total: 2
2019-04-03 08:48:15 -耗时 : 7
2019-04-03 08:48:15 -返回值 : [DictDO{id=126, name='使用中', value='1', type='userState', description='用户状态', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=125, name='未使用', value='0', type='userState', description='用户状态', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 08:48:15 -HTTP METHOD : GET
2019-04-03 08:48:15 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 08:48:15 -参数 : [elecType]
2019-04-03 08:48:15 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 08:48:15 -==> Parameters: elecType(String)
2019-04-03 08:48:15 -<==      Total: 2
2019-04-03 08:48:15 -耗时 : 12
2019-04-03 08:48:15 -返回值 : [DictDO{id=139, name='民用电', value='1', type='elecType', description='电量性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=138, name='商业电', value='0', type='elecType', description='电量类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 08:48:20 -请求地址 : http://localhost:8081/elec/elec/update
2019-04-03 08:48:20 -HTTP METHOD : POST
2019-04-03 08:48:20 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.update
2019-04-03 08:48:20 -参数 : [com.bootdo.elec.domain.ElecDO@bb5c5f]
2019-04-03 08:48:20 -==>  Preparing: update elec SET `user_id` = ?, `user_name` = ?, `user_type` = ?, `user_org` = ?, `user_tell` = ?, `user_state` = ?, `wages_id` = ?, `elec_type` = ?, `start` = ?, `end` = ?, `hu` = ?, `elec_amount` = ?, `elec_cost` = ?, `elec_sum` = ?, `create_time` = ?, `create_by` = ?, `update_time` = ?, `update_by` = ?, `remark` = ? where id = ? 
2019-04-03 08:48:20 -==> Parameters: 1-0008(String), 喜欢(String), A(String), 2(String), (String), 1(String), 1(String), 1(String), 1(String), 1(String), 1(Integer), 1.00(BigDecimal), 1.00(BigDecimal), 1.00(BigDecimal), 2019-02(String), 1(Long), 2019-04-03 08:48:20.01(Timestamp), 1(Long), (String), 8(Long)
2019-04-03 08:48:20 -<==    Updates: 1
2019-04-03 08:51:19 -==>  Preparing: update elec SET `user_id` = ?, `user_name` = ?, `user_type` = ?, `user_org` = ?, `user_tell` = ?, `user_state` = ?, `wages_id` = ?, `elec_type` = ?, `start` = ?, `end` = ?, `hu` = ?, `elec_amount` = ?, `elec_cost` = ?, `elec_sum` = ?, `create_time` = ?, `create_by` = ?, `update_time` = ?, `update_by` = ?, `remark` = ? where id = ? 
2019-04-03 08:51:19 -==> Parameters: 1-0008(String), 喜欢(String), A(String), 2(String), (String), 1(String), 1(String), 1(String), 1(String), 1(String), 1(Integer), 1.00(BigDecimal), 1.00(BigDecimal), 1.00(BigDecimal), 2019-02(String), 1(Long), 2019-04-03 08:51:19.858(Timestamp), 1(Long), (String), 8(Long)
2019-04-03 08:51:20 -<==    Updates: 1
2019-04-03 08:51:35 -请求地址 : http://localhost:8081/index
2019-04-03 08:51:35 -HTTP METHOD : GET
2019-04-03 08:51:35 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2019-04-03 08:51:35 -参数 : [{}]
2019-04-03 08:51:35 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2019-04-03 08:51:35 -==> Parameters: 1(Long)
2019-04-03 08:51:35 -<==      Total: 46
2019-04-03 08:51:35 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2019-04-03 08:51:35 -==> Parameters: 138(Long)
2019-04-03 08:51:35 -<==      Total: 1
2019-04-03 08:51:35 -耗时 : 97
2019-04-03 08:51:35 -返回值 : index_v1
2019-04-03 08:51:35 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 08:51:35 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 98(Integer), com.bootdo.system.controller.LoginController.index()(String), {"menus":[{"attributes":{"icon":"fa fa-money","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-money","url":"/moneyList/moneyList"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"102","parentId":"106","text":"现金缴费"},{"attributes":{"icon":"fa fa-book","url":"/moneyLog/elecLog"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"107","parentId":"106","text":"缴费记录"}],"hasChildren":true,"hasParent":false,"id":"106","parentId":"0","text":"收费管理"},{"attributes":{"icon":"fa fa-lightbulb-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/elec/elec"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"121","parentId":"103","text":"电费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"elec/elecInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"122","parentId":"103","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"elec/elecUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"123","parentId":"103","text":"电表上传"},{"attributes":{"icon":"fa fa-cc","url":"/elec/elecPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"124","parentId":"103","text":"电价管理"}],"hasChildren":true,"hasParent":false,"id":"103","parentId":"0","text":"电费管理"},{"attributes":{"icon":"fa fa-tint","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/water/water"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"117","parentId":"105","text":"水费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"water/waterInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"118","parentId":"105","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"water/waterUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"119","parentId":"105","text":"水费生成"},{"attributes":{"icon":"fa fa-cc","url":"/water/waterPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"120","parentId":"105","text":"水价管理"}],"hasChildren":true,"hasParent":false,"id":"105","parentId":"0","text":"水费管理"},{"attributes":{"icon":"fa fa-fire","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/heat/heat"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"113","parentId":"104","text":"暖费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"heat/heatInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"114","parentId":"104","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"heat/heatUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"115","parentId":"104","text":"暖费生成"},{"attributes":{"icon":"","url":"/heat/heatPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"116","parentId":"104","text":"暖价管理"}],"hasChildren":true,"hasParent":false,"id":"104","parentId":"0","text":"暖费管理"},{"attributes":{"icon":"fa fa-vcard-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-bomb","url":"/print/print"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"149","parentId":"108","text":"票据记录"}],"hasChildren":true,"hasParent":false,"id":"108","parentId":"0","text":"票据管理"},{"attributes":{"icon":"fa fa-bar-chart","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-area-chart","url":"/chart/graph_echarts.html"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","text":"百度chart"},{"attributes":{"icon":"fa fa-sun-o","url":"charts/countDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"109","parentId":"97","text":"日统计报表"},{"attributes":{"icon":"fa fa-registered","url":"charts/countMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"110","parentId":"97","text":"月统计报表"},{"attributes":{"icon":"fa fa-support","url":"charts/countYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"111","parentId":"97","text":"年统计报表"},{"attributes":{"icon":"fa fa-money","url":"charts/countOwe"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"155","parentId":"97","text":"欠费报表图"},{"attributes":{"icon":"fa fa-tachometer","url":"charts/countRun"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"112","parentId":"97","text":"走势图报表"}],"hasChildren":true,"hasParent":false,"id":"97","parentId":"0","text":"统计管理"},{"attributes":{"icon":"fa fa-bars","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-book","url":"/common/dict"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"78","parentId":"1","text":"数据字典"},{"attributes":{"icon":"fa fa-folder-open","url":"/common/sysFile"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"71","parentId":"1","text":"文件管理"}],"h(String), 127.0.0.1(String), 2019-04-03 08:51:35.123(Timestamp)
2019-04-03 08:51:35 -<==    Updates: 1
2019-04-03 08:51:37 -请求地址 : http://localhost:8081/main
2019-04-03 08:51:37 -HTTP METHOD : GET
2019-04-03 08:51:37 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 08:51:37 -参数 : []
2019-04-03 08:51:37 -耗时 : 2
2019-04-03 08:51:37 -返回值 : main
2019-04-03 08:51:37 -请求地址 : http://localhost:8081/oa/notify/message
2019-04-03 08:51:37 -HTTP METHOD : GET
2019-04-03 08:51:37 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2019-04-03 08:51:37 -参数 : []
2019-04-03 08:51:37 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2019-04-03 08:51:37 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2019-04-03 08:51:37 -<==      Total: 0
2019-04-03 08:51:37 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2019-04-03 08:51:37 -==> Parameters: 1(Long), 0(String)
2019-04-03 08:51:37 -<==      Total: 1
2019-04-03 08:51:37 -耗时 : 7
2019-04-03 08:51:37 -返回值 : com.bootdo.common.utils.PageUtils@57b7cf5e
2019-04-03 08:51:37 -请求地址 : http://localhost:8081/main
2019-04-03 08:51:37 -HTTP METHOD : GET
2019-04-03 08:51:37 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 08:51:37 -参数 : []
2019-04-03 08:51:37 -耗时 : 1
2019-04-03 08:51:37 -返回值 : main
2019-04-03 08:51:46 -请求地址 : http://localhost:8081/elec/elec
2019-04-03 08:51:46 -HTTP METHOD : GET
2019-04-03 08:51:46 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.Elec
2019-04-03 08:51:46 -参数 : []
2019-04-03 08:51:46 -耗时 : 1
2019-04-03 08:51:46 -返回值 : elec/elec/elec
2019-04-03 08:51:46 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-03 08:51:46 -HTTP METHOD : GET
2019-04-03 08:51:46 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 08:51:46 -参数 : [userType]
2019-04-03 08:51:46 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 08:51:46 -==> Parameters: userType(String)
2019-04-03 08:51:46 -<==      Total: 2
2019-04-03 08:51:46 -耗时 : 3
2019-04-03 08:51:46 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 08:51:46 -请求地址 : http://localhost:8081/elec/elec/list
2019-04-03 08:51:46 -HTTP METHOD : GET
2019-04-03 08:51:46 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.list
2019-04-03 08:51:46 -参数 : [{limit=10, offset=0, userType=, userOrg=, userId=, createTime=, queryType=1}, com.bootdo.elec.domain.ElecDO@5ec85da3]
2019-04-03 08:51:46 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec order by id asc limit ?, ? 
2019-04-03 08:51:46 -==> Parameters: 0(Integer), 10(Integer)
2019-04-03 08:51:46 -<==      Total: 10
2019-04-03 08:51:46 -==>  Preparing: select count(*) from elec 
2019-04-03 08:51:46 -==> Parameters: 
2019-04-03 08:51:46 -<==      Total: 1
2019-04-03 08:51:46 -耗时 : 9
2019-04-03 08:51:46 -返回值 : com.bootdo.common.utils.PageUtils@636dedbc
2019-04-03 08:51:55 -请求地址 : http://localhost:8081/elec/elec/edit/9
2019-04-03 08:51:55 -HTTP METHOD : GET
2019-04-03 08:51:55 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.edit
2019-04-03 08:51:55 -参数 : [9, {}]
2019-04-03 08:51:55 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, `user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec where id = ? 
2019-04-03 08:51:55 -==> Parameters: 9(Long)
2019-04-03 08:51:55 -<==      Total: 1
2019-04-03 08:51:55 -耗时 : 6
2019-04-03 08:51:55 -返回值 : elec/elec/edit
2019-04-03 08:51:55 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-03 08:51:55 -HTTP METHOD : GET
2019-04-03 08:51:55 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 08:51:55 -参数 : [userType]
2019-04-03 08:51:55 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 08:51:55 -==> Parameters: userType(String)
2019-04-03 08:51:55 -请求地址 : http://localhost:8081/common/dict/list/elecType
2019-04-03 08:51:55 -请求地址 : http://localhost:8081/common/dict/list/userState
2019-04-03 08:51:55 -HTTP METHOD : GET
2019-04-03 08:51:55 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 08:51:55 -HTTP METHOD : GET
2019-04-03 08:51:55 -参数 : [elecType]
2019-04-03 08:51:55 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 08:51:55 -参数 : [userState]
2019-04-03 08:51:55 -<==      Total: 2
2019-04-03 08:51:55 -耗时 : 4
2019-04-03 08:51:55 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 08:51:55 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 08:51:55 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 08:51:55 -==> Parameters: elecType(String)
2019-04-03 08:51:55 -==> Parameters: userState(String)
2019-04-03 08:51:55 -<==      Total: 2
2019-04-03 08:51:55 -<==      Total: 2
2019-04-03 08:51:55 -耗时 : 10
2019-04-03 08:51:55 -返回值 : [DictDO{id=139, name='民用电', value='1', type='elecType', description='电量性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=138, name='商业电', value='0', type='elecType', description='电量类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 08:51:55 -耗时 : 11
2019-04-03 08:51:55 -返回值 : [DictDO{id=126, name='使用中', value='1', type='userState', description='用户状态', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=125, name='未使用', value='0', type='userState', description='用户状态', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 08:51:58 -请求地址 : http://localhost:8081/elec/elec/update
2019-04-03 08:51:58 -HTTP METHOD : POST
2019-04-03 08:51:58 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.update
2019-04-03 08:51:58 -参数 : [com.bootdo.elec.domain.ElecDO@4575398e]
2019-04-03 08:51:58 -==>  Preparing: update elec SET `user_id` = ?, `user_name` = ?, `user_type` = ?, `user_org` = ?, `user_tell` = ?, `user_state` = ?, `wages_id` = ?, `elec_type` = ?, `start` = ?, `end` = ?, `hu` = ?, `elec_amount` = ?, `elec_cost` = ?, `elec_sum` = ?, `create_time` = ?, `create_by` = ?, `update_time` = ?, `update_by` = ?, `remark` = ? where id = ? 
2019-04-03 08:51:58 -==> Parameters: 1-0009(String), 考试的(String), A(String), 2(String), (String), 0(String), 1(String), 1(String), 1(String), 1(String), 1(Integer), 1.00(BigDecimal), 1.00(BigDecimal), 1.00(BigDecimal), 2019-03(String), 1(Long), 2019-04-03 08:51:58.651(Timestamp), 1(Long), (String), 9(Long)
2019-04-03 08:51:58 -<==    Updates: 1
2019-04-03 08:51:58 -==>  Preparing: update elec set `start`= 0, `end` = 0, `elec_amount` = 0, `elec_cost` = 0, `elec_sum` = 0 where id = ? 
2019-04-03 08:51:58 -==> Parameters: 9(Long)
2019-04-03 08:51:58 -<==    Updates: 1
2019-04-03 08:51:58 -耗时 : 331
2019-04-03 08:51:58 -返回值 : {msg=操作成功, code=0}
2019-04-03 08:51:59 -请求地址 : http://localhost:8081/elec/elec/list
2019-04-03 08:51:59 -HTTP METHOD : GET
2019-04-03 08:51:59 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.list
2019-04-03 08:51:59 -参数 : [{limit=10, offset=0, userType=, userOrg=, userId=, createTime=, queryType=2}, com.bootdo.elec.domain.ElecDO@25105a28]
2019-04-03 08:51:59 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec WHERE `elec_sum` < 0 order by id asc limit ?, ? 
2019-04-03 08:51:59 -==> Parameters: 0(Integer), 10(Integer)
2019-04-03 08:51:59 -<==      Total: 2
2019-04-03 08:51:59 -==>  Preparing: select count(*) from elec WHERE `elec_sum` < 0 
2019-04-03 08:51:59 -==> Parameters: 
2019-04-03 08:51:59 -<==      Total: 1
2019-04-03 08:51:59 -耗时 : 25
2019-04-03 08:51:59 -返回值 : com.bootdo.common.utils.PageUtils@38e708fe
2019-04-03 08:52:01 -请求地址 : http://localhost:8081/index
2019-04-03 08:52:01 -HTTP METHOD : GET
2019-04-03 08:52:01 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2019-04-03 08:52:01 -参数 : [{}]
2019-04-03 08:52:01 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2019-04-03 08:52:01 -==> Parameters: 1(Long)
2019-04-03 08:52:01 -<==      Total: 46
2019-04-03 08:52:01 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2019-04-03 08:52:01 -==> Parameters: 138(Long)
2019-04-03 08:52:01 -<==      Total: 1
2019-04-03 08:52:01 -耗时 : 27
2019-04-03 08:52:01 -返回值 : index_v1
2019-04-03 08:52:01 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 08:52:01 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 27(Integer), com.bootdo.system.controller.LoginController.index()(String), {"menus":[{"attributes":{"icon":"fa fa-money","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-money","url":"/moneyList/moneyList"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"102","parentId":"106","text":"现金缴费"},{"attributes":{"icon":"fa fa-book","url":"/moneyLog/elecLog"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"107","parentId":"106","text":"缴费记录"}],"hasChildren":true,"hasParent":false,"id":"106","parentId":"0","text":"收费管理"},{"attributes":{"icon":"fa fa-lightbulb-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/elec/elec"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"121","parentId":"103","text":"电费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"elec/elecInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"122","parentId":"103","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"elec/elecUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"123","parentId":"103","text":"电表上传"},{"attributes":{"icon":"fa fa-cc","url":"/elec/elecPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"124","parentId":"103","text":"电价管理"}],"hasChildren":true,"hasParent":false,"id":"103","parentId":"0","text":"电费管理"},{"attributes":{"icon":"fa fa-tint","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/water/water"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"117","parentId":"105","text":"水费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"water/waterInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"118","parentId":"105","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"water/waterUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"119","parentId":"105","text":"水费生成"},{"attributes":{"icon":"fa fa-cc","url":"/water/waterPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"120","parentId":"105","text":"水价管理"}],"hasChildren":true,"hasParent":false,"id":"105","parentId":"0","text":"水费管理"},{"attributes":{"icon":"fa fa-fire","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/heat/heat"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"113","parentId":"104","text":"暖费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"heat/heatInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"114","parentId":"104","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"heat/heatUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"115","parentId":"104","text":"暖费生成"},{"attributes":{"icon":"","url":"/heat/heatPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"116","parentId":"104","text":"暖价管理"}],"hasChildren":true,"hasParent":false,"id":"104","parentId":"0","text":"暖费管理"},{"attributes":{"icon":"fa fa-vcard-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-bomb","url":"/print/print"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"149","parentId":"108","text":"票据记录"}],"hasChildren":true,"hasParent":false,"id":"108","parentId":"0","text":"票据管理"},{"attributes":{"icon":"fa fa-bar-chart","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-area-chart","url":"/chart/graph_echarts.html"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","text":"百度chart"},{"attributes":{"icon":"fa fa-sun-o","url":"charts/countDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"109","parentId":"97","text":"日统计报表"},{"attributes":{"icon":"fa fa-registered","url":"charts/countMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"110","parentId":"97","text":"月统计报表"},{"attributes":{"icon":"fa fa-support","url":"charts/countYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"111","parentId":"97","text":"年统计报表"},{"attributes":{"icon":"fa fa-money","url":"charts/countOwe"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"155","parentId":"97","text":"欠费报表图"},{"attributes":{"icon":"fa fa-tachometer","url":"charts/countRun"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"112","parentId":"97","text":"走势图报表"}],"hasChildren":true,"hasParent":false,"id":"97","parentId":"0","text":"统计管理"},{"attributes":{"icon":"fa fa-bars","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-book","url":"/common/dict"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"78","parentId":"1","text":"数据字典"},{"attributes":{"icon":"fa fa-folder-open","url":"/common/sysFile"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"71","parentId":"1","text":"文件管理"}],"h(String), 127.0.0.1(String), 2019-04-03 08:52:01.822(Timestamp)
2019-04-03 08:52:01 -请求地址 : http://localhost:8081/main
2019-04-03 08:52:01 -HTTP METHOD : GET
2019-04-03 08:52:01 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 08:52:01 -参数 : []
2019-04-03 08:52:01 -耗时 : 0
2019-04-03 08:52:01 -返回值 : main
2019-04-03 08:52:01 -<==    Updates: 1
2019-04-03 08:52:02 -请求地址 : http://localhost:8081/oa/notify/message
2019-04-03 08:52:02 -HTTP METHOD : GET
2019-04-03 08:52:02 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2019-04-03 08:52:02 -参数 : []
2019-04-03 08:52:02 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2019-04-03 08:52:02 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2019-04-03 08:52:02 -<==      Total: 0
2019-04-03 08:52:02 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2019-04-03 08:52:02 -==> Parameters: 1(Long), 0(String)
2019-04-03 08:52:02 -<==      Total: 1
2019-04-03 08:52:02 -耗时 : 7
2019-04-03 08:52:02 -返回值 : com.bootdo.common.utils.PageUtils@266dbccf
2019-04-03 08:52:02 -请求地址 : http://localhost:8081/main
2019-04-03 08:52:02 -HTTP METHOD : GET
2019-04-03 08:52:02 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 08:52:02 -参数 : []
2019-04-03 08:52:02 -耗时 : 0
2019-04-03 08:52:02 -返回值 : main
2019-04-03 08:52:03 -请求地址 : http://localhost:8081/elec/elec
2019-04-03 08:52:03 -HTTP METHOD : GET
2019-04-03 08:52:03 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.Elec
2019-04-03 08:52:03 -参数 : []
2019-04-03 08:52:03 -耗时 : 1
2019-04-03 08:52:03 -返回值 : elec/elec/elec
2019-04-03 08:52:04 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-03 08:52:04 -HTTP METHOD : GET
2019-04-03 08:52:04 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 08:52:04 -参数 : [userType]
2019-04-03 08:52:04 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 08:52:04 -==> Parameters: userType(String)
2019-04-03 08:52:04 -<==      Total: 2
2019-04-03 08:52:04 -耗时 : 16
2019-04-03 08:52:04 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 08:52:04 -请求地址 : http://localhost:8081/elec/elec/list
2019-04-03 08:52:04 -HTTP METHOD : GET
2019-04-03 08:52:04 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.list
2019-04-03 08:52:04 -参数 : [{limit=10, offset=0, userType=, userOrg=, userId=, createTime=, queryType=1}, com.bootdo.elec.domain.ElecDO@1f49febc]
2019-04-03 08:52:04 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec order by id asc limit ?, ? 
2019-04-03 08:52:04 -==> Parameters: 0(Integer), 10(Integer)
2019-04-03 08:52:04 -<==      Total: 10
2019-04-03 08:52:04 -==>  Preparing: select count(*) from elec 
2019-04-03 08:52:04 -==> Parameters: 
2019-04-03 08:52:04 -<==      Total: 1
2019-04-03 08:52:04 -耗时 : 5
2019-04-03 08:52:04 -返回值 : com.bootdo.common.utils.PageUtils@4f880cf8
2019-04-03 08:52:24 -请求地址 : http://localhost:8081/elec/elec/edit/10
2019-04-03 08:52:24 -HTTP METHOD : GET
2019-04-03 08:52:24 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.edit
2019-04-03 08:52:24 -参数 : [10, {}]
2019-04-03 08:52:24 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, `user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec where id = ? 
2019-04-03 08:52:24 -==> Parameters: 10(Long)
2019-04-03 08:52:24 -<==      Total: 1
2019-04-03 08:52:24 -耗时 : 4
2019-04-03 08:52:24 -返回值 : elec/elec/edit
2019-04-03 08:52:24 -请求地址 : http://localhost:8081/common/dict/list/userState
2019-04-03 08:52:24 -HTTP METHOD : GET
2019-04-03 08:52:24 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 08:52:24 -参数 : [userState]
2019-04-03 08:52:24 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-03 08:52:24 -HTTP METHOD : GET
2019-04-03 08:52:24 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 08:52:24 -参数 : [userType]
2019-04-03 08:52:24 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 08:52:24 -请求地址 : http://localhost:8081/common/dict/list/elecType
2019-04-03 08:52:24 -HTTP METHOD : GET
2019-04-03 08:52:24 -==> Parameters: userState(String)
2019-04-03 08:52:24 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 08:52:24 -参数 : [elecType]
2019-04-03 08:52:24 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 08:52:24 -==> Parameters: userType(String)
2019-04-03 08:52:24 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 08:52:24 -==> Parameters: elecType(String)
2019-04-03 08:52:24 -<==      Total: 2
2019-04-03 08:52:24 -耗时 : 5
2019-04-03 08:52:24 -返回值 : [DictDO{id=126, name='使用中', value='1', type='userState', description='用户状态', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=125, name='未使用', value='0', type='userState', description='用户状态', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 08:52:24 -<==      Total: 2
2019-04-03 08:52:24 -耗时 : 5
2019-04-03 08:52:24 -返回值 : [DictDO{id=139, name='民用电', value='1', type='elecType', description='电量性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=138, name='商业电', value='0', type='elecType', description='电量类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 08:52:24 -<==      Total: 2
2019-04-03 08:52:24 -耗时 : 7
2019-04-03 08:52:24 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 08:52:28 -请求地址 : http://localhost:8081/elec/elec/update
2019-04-03 08:52:28 -HTTP METHOD : POST
2019-04-03 08:52:28 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.update
2019-04-03 08:52:28 -参数 : [com.bootdo.elec.domain.ElecDO@3b809233]
2019-04-03 08:52:28 -==>  Preparing: update elec SET `user_id` = ?, `user_name` = ?, `user_type` = ?, `user_org` = ?, `user_tell` = ?, `user_state` = ?, `wages_id` = ?, `elec_type` = ?, `start` = ?, `end` = ?, `hu` = ?, `elec_amount` = ?, `elec_cost` = ?, `elec_sum` = ?, `create_time` = ?, `create_by` = ?, `update_time` = ?, `update_by` = ?, `remark` = ? where id = ? 
2019-04-03 08:52:28 -==> Parameters: 1-0010(String), 电饭锅(String), A(String), 2(String), (String), 0(String), 1(String), 1(String), 1(String), 1(String), 1(Integer), 1.00(BigDecimal), 1.00(BigDecimal), 1.00(BigDecimal), 2019-03(String), 1(Long), 2019-04-03 08:52:28.765(Timestamp), 1(Long), (String), 10(Long)
2019-04-03 08:52:28 -<==    Updates: 1
2019-04-03 08:52:28 -==>  Preparing: update elec set `start`= 0, `end` = 0, `elec_amount` = 0, `elec_cost` = 0, `elec_sum` = 0 where id = ? 
2019-04-03 08:52:28 -==> Parameters: 10(Long)
2019-04-03 08:52:28 -<==    Updates: 1
2019-04-03 08:52:28 -耗时 : 179
2019-04-03 08:52:28 -返回值 : {msg=操作成功, code=0}
2019-04-03 08:52:28 -请求地址 : http://localhost:8081/elec/elec/list
2019-04-03 08:52:28 -HTTP METHOD : GET
2019-04-03 08:52:28 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.list
2019-04-03 08:52:28 -参数 : [{limit=10, offset=0, userType=, userOrg=, userId=, createTime=, queryType=2}, com.bootdo.elec.domain.ElecDO@71d523a7]
2019-04-03 08:52:28 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec WHERE `elec_sum` < 0 order by id asc limit ?, ? 
2019-04-03 08:52:28 -==> Parameters: 0(Integer), 10(Integer)
2019-04-03 08:52:28 -<==      Total: 2
2019-04-03 08:52:29 -==>  Preparing: select count(*) from elec WHERE `elec_sum` < 0 
2019-04-03 08:52:29 -==> Parameters: 
2019-04-03 08:52:29 -<==      Total: 1
2019-04-03 08:52:29 -耗时 : 26
2019-04-03 08:52:29 -返回值 : com.bootdo.common.utils.PageUtils@e110fc3
2019-04-03 08:52:31 -请求地址 : http://localhost:8081/index
2019-04-03 08:52:31 -HTTP METHOD : GET
2019-04-03 08:52:31 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2019-04-03 08:52:31 -参数 : [{}]
2019-04-03 08:52:31 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2019-04-03 08:52:31 -==> Parameters: 1(Long)
2019-04-03 08:52:31 -<==      Total: 46
2019-04-03 08:52:31 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2019-04-03 08:52:31 -==> Parameters: 138(Long)
2019-04-03 08:52:31 -<==      Total: 1
2019-04-03 08:52:31 -耗时 : 19
2019-04-03 08:52:31 -返回值 : index_v1
2019-04-03 08:52:31 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 08:52:31 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 19(Integer), com.bootdo.system.controller.LoginController.index()(String), {"menus":[{"attributes":{"icon":"fa fa-money","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-money","url":"/moneyList/moneyList"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"102","parentId":"106","text":"现金缴费"},{"attributes":{"icon":"fa fa-book","url":"/moneyLog/elecLog"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"107","parentId":"106","text":"缴费记录"}],"hasChildren":true,"hasParent":false,"id":"106","parentId":"0","text":"收费管理"},{"attributes":{"icon":"fa fa-lightbulb-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/elec/elec"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"121","parentId":"103","text":"电费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"elec/elecInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"122","parentId":"103","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"elec/elecUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"123","parentId":"103","text":"电表上传"},{"attributes":{"icon":"fa fa-cc","url":"/elec/elecPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"124","parentId":"103","text":"电价管理"}],"hasChildren":true,"hasParent":false,"id":"103","parentId":"0","text":"电费管理"},{"attributes":{"icon":"fa fa-tint","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/water/water"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"117","parentId":"105","text":"水费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"water/waterInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"118","parentId":"105","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"water/waterUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"119","parentId":"105","text":"水费生成"},{"attributes":{"icon":"fa fa-cc","url":"/water/waterPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"120","parentId":"105","text":"水价管理"}],"hasChildren":true,"hasParent":false,"id":"105","parentId":"0","text":"水费管理"},{"attributes":{"icon":"fa fa-fire","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/heat/heat"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"113","parentId":"104","text":"暖费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"heat/heatInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"114","parentId":"104","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"heat/heatUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"115","parentId":"104","text":"暖费生成"},{"attributes":{"icon":"","url":"/heat/heatPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"116","parentId":"104","text":"暖价管理"}],"hasChildren":true,"hasParent":false,"id":"104","parentId":"0","text":"暖费管理"},{"attributes":{"icon":"fa fa-vcard-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-bomb","url":"/print/print"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"149","parentId":"108","text":"票据记录"}],"hasChildren":true,"hasParent":false,"id":"108","parentId":"0","text":"票据管理"},{"attributes":{"icon":"fa fa-bar-chart","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-area-chart","url":"/chart/graph_echarts.html"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","text":"百度chart"},{"attributes":{"icon":"fa fa-sun-o","url":"charts/countDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"109","parentId":"97","text":"日统计报表"},{"attributes":{"icon":"fa fa-registered","url":"charts/countMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"110","parentId":"97","text":"月统计报表"},{"attributes":{"icon":"fa fa-support","url":"charts/countYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"111","parentId":"97","text":"年统计报表"},{"attributes":{"icon":"fa fa-money","url":"charts/countOwe"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"155","parentId":"97","text":"欠费报表图"},{"attributes":{"icon":"fa fa-tachometer","url":"charts/countRun"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"112","parentId":"97","text":"走势图报表"}],"hasChildren":true,"hasParent":false,"id":"97","parentId":"0","text":"统计管理"},{"attributes":{"icon":"fa fa-bars","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-book","url":"/common/dict"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"78","parentId":"1","text":"数据字典"},{"attributes":{"icon":"fa fa-folder-open","url":"/common/sysFile"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"71","parentId":"1","text":"文件管理"}],"h(String), 127.0.0.1(String), 2019-04-03 08:52:31.641(Timestamp)
2019-04-03 08:52:31 -请求地址 : http://localhost:8081/main
2019-04-03 08:52:31 -HTTP METHOD : GET
2019-04-03 08:52:31 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 08:52:31 -参数 : []
2019-04-03 08:52:31 -耗时 : 0
2019-04-03 08:52:31 -返回值 : main
2019-04-03 08:52:31 -<==    Updates: 1
2019-04-03 08:52:31 -请求地址 : http://localhost:8081/oa/notify/message
2019-04-03 08:52:31 -HTTP METHOD : GET
2019-04-03 08:52:31 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2019-04-03 08:52:31 -参数 : []
2019-04-03 08:52:31 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2019-04-03 08:52:31 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2019-04-03 08:52:31 -<==      Total: 0
2019-04-03 08:52:31 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2019-04-03 08:52:31 -==> Parameters: 1(Long), 0(String)
2019-04-03 08:52:31 -<==      Total: 1
2019-04-03 08:52:31 -耗时 : 10
2019-04-03 08:52:31 -返回值 : com.bootdo.common.utils.PageUtils@2dd6615d
2019-04-03 08:52:31 -请求地址 : http://localhost:8081/main
2019-04-03 08:52:31 -HTTP METHOD : GET
2019-04-03 08:52:31 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 08:52:31 -参数 : []
2019-04-03 08:52:31 -耗时 : 2
2019-04-03 08:52:31 -返回值 : main
2019-04-03 08:52:34 -请求地址 : http://localhost:8081/elec/elec
2019-04-03 08:52:34 -HTTP METHOD : GET
2019-04-03 08:52:34 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.Elec
2019-04-03 08:52:34 -参数 : []
2019-04-03 08:52:34 -耗时 : 1
2019-04-03 08:52:34 -返回值 : elec/elec/elec
2019-04-03 08:52:34 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-03 08:52:34 -HTTP METHOD : GET
2019-04-03 08:52:34 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 08:52:34 -参数 : [userType]
2019-04-03 08:52:34 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 08:52:34 -==> Parameters: userType(String)
2019-04-03 08:52:34 -<==      Total: 2
2019-04-03 08:52:34 -耗时 : 3
2019-04-03 08:52:34 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 08:52:34 -请求地址 : http://localhost:8081/elec/elec/list
2019-04-03 08:52:34 -HTTP METHOD : GET
2019-04-03 08:52:34 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.list
2019-04-03 08:52:34 -参数 : [{limit=10, offset=0, userType=, userOrg=, userId=, createTime=, queryType=1}, com.bootdo.elec.domain.ElecDO@6959ed1]
2019-04-03 08:52:34 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec order by id asc limit ?, ? 
2019-04-03 08:52:34 -==> Parameters: 0(Integer), 10(Integer)
2019-04-03 08:52:34 -<==      Total: 10
2019-04-03 08:52:34 -==>  Preparing: select count(*) from elec 
2019-04-03 08:52:34 -==> Parameters: 
2019-04-03 08:52:34 -<==      Total: 1
2019-04-03 08:52:34 -耗时 : 6
2019-04-03 08:52:34 -返回值 : com.bootdo.common.utils.PageUtils@780cdda4
2019-04-03 08:57:40 -WebSocketSession[1 current WS(1)-HttpStream(0)-HttpPoll(0), 18 total, 0 closed abnormally (0 connect failure, 0 send limit, 3 transport error)], stompSubProtocol[processed CONNECT(16)-CONNECTED(16)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 195], outboundChannelpool size = 0, active threads = 0, queued tasks = 0, completed tasks = 33], sockJsScheduler[pool size = 4, active threads = 1, queued tasks = 2, completed tasks = 423]
2019-04-03 09:02:56 -==>  Preparing: select distinct m.perms from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id = ur.role_id where ur.user_id = ? 
2019-04-03 09:02:56 -==> Parameters: 1(Long)
2019-04-03 09:02:56 -<==      Total: 90
2019-04-03 09:02:56 -请求地址 : http://localhost:8081/elec/elec/add
2019-04-03 09:02:56 -HTTP METHOD : GET
2019-04-03 09:02:56 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.add
2019-04-03 09:02:56 -参数 : []
2019-04-03 09:02:56 -耗时 : 1
2019-04-03 09:02:56 -返回值 : elec/elec/add
2019-04-03 09:02:56 -请求地址 : http://localhost:8081/common/dict/list/userState
2019-04-03 09:02:56 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-03 09:02:56 -HTTP METHOD : GET
2019-04-03 09:02:56 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 09:02:56 -HTTP METHOD : GET
2019-04-03 09:02:56 -参数 : [userType]
2019-04-03 09:02:56 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 09:02:56 -参数 : [userState]
2019-04-03 09:02:56 -请求地址 : http://localhost:8081/common/dict/list/elecType
2019-04-03 09:02:56 -HTTP METHOD : GET
2019-04-03 09:02:56 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 09:02:56 -参数 : [elecType]
2019-04-03 09:02:56 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 09:02:56 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 09:02:56 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 09:02:56 -==> Parameters: elecType(String)
2019-04-03 09:02:56 -==> Parameters: userState(String)
2019-04-03 09:02:56 -==> Parameters: userType(String)
2019-04-03 09:02:56 -<==      Total: 2
2019-04-03 09:02:56 -<==      Total: 2
2019-04-03 09:02:56 -<==      Total: 2
2019-04-03 09:02:56 -耗时 : 6
2019-04-03 09:02:56 -耗时 : 7
2019-04-03 09:02:56 -耗时 : 8
2019-04-03 09:02:56 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 09:02:56 -返回值 : [DictDO{id=139, name='民用电', value='1', type='elecType', description='电量性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=138, name='商业电', value='0', type='elecType', description='电量类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 09:02:56 -返回值 : [DictDO{id=126, name='使用中', value='1', type='userState', description='用户状态', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=125, name='未使用', value='0', type='userState', description='用户状态', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 09:03:08 -请求地址 : http://localhost:8081/system/sysDept/treeView
2019-04-03 09:03:08 -HTTP METHOD : GET
2019-04-03 09:03:08 -CLASS_METHOD : com.bootdo.system.controller.DeptController.treeView
2019-04-03 09:03:08 -参数 : []
2019-04-03 09:03:08 -耗时 : 0
2019-04-03 09:03:08 -返回值 : system/dept/deptTree
2019-04-03 09:03:08 -请求地址 : http://localhost:8081/system/sysDept/tree
2019-04-03 09:03:08 -HTTP METHOD : GET
2019-04-03 09:03:08 -CLASS_METHOD : com.bootdo.system.controller.DeptController.tree
2019-04-03 09:03:08 -参数 : []
2019-04-03 09:03:08 -==>  Preparing: select `dept_id`,`parent_id`,`name`,`order_num`,`del_flag` from sys_dept order by dept_id desc 
2019-04-03 09:03:08 -==> Parameters: 
2019-04-03 09:03:08 -<==      Total: 3
2019-04-03 09:03:08 -耗时 : 75
2019-04-03 09:03:08 -返回值 : {"checked":false,"children":[{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"3","parentId":"1","state":{"opened":true},"text":"牙星"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"2","parentId":"1","state":{"opened":true},"text":"五九"}],"hasChildren":true,"hasParent":false,"id":"1","parentId":"0","state":{"opened":true},"text":"总公司"}
2019-04-03 09:03:29 -请求地址 : http://localhost:8081/elec/elec/save
2019-04-03 09:03:29 -HTTP METHOD : POST
2019-04-03 09:03:29 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.save
2019-04-03 09:03:29 -参数 : [com.bootdo.elec.domain.ElecDO@1d8419cf]
2019-04-03 09:03:29 -==>  Preparing: insert into elec ( `user_id`, `user_name`, `user_type`, `user_org`, `user_tell`, `user_state`, `wages_id`, `elec_type`, `elec_price`, `start`, `end`, `hu`, `elec_amount`, `elec_cost`, `elec_sum`, `create_time`, `create_by`, `update_time`, `update_by`, `remark` ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 09:03:29 -==> Parameters: 1(String), 1(String), A(String), 2(String), 1(String), (String), 1(String), 1(String), 1(BigDecimal), 1(String), 1(String), 1(Integer), 1(BigDecimal), 1(BigDecimal), 1(BigDecimal), 1(String), 1(Long), 2019-04-03 09:03:29.419(Timestamp), 1(Long), 1(String)
2019-04-03 09:03:29 -<==    Updates: 1
2019-04-03 09:03:29 -耗时 : 125
2019-04-03 09:03:29 -返回值 : {msg=操作成功, code=0}
2019-04-03 09:03:29 -请求地址 : http://localhost:8081/elec/elec/list
2019-04-03 09:03:29 -HTTP METHOD : GET
2019-04-03 09:03:29 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.list
2019-04-03 09:03:29 -参数 : [{limit=10, offset=0, userType=, userOrg=, userId=, createTime=, queryType=2}, com.bootdo.elec.domain.ElecDO@2f4f4e44]
2019-04-03 09:03:29 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec WHERE `elec_sum` < 0 order by id asc limit ?, ? 
2019-04-03 09:03:29 -==> Parameters: 0(Integer), 10(Integer)
2019-04-03 09:03:29 -<==      Total: 2
2019-04-03 09:03:29 -==>  Preparing: select count(*) from elec WHERE `elec_sum` < 0 
2019-04-03 09:03:29 -==> Parameters: 
2019-04-03 09:03:29 -<==      Total: 1
2019-04-03 09:03:29 -耗时 : 8
2019-04-03 09:03:29 -返回值 : com.bootdo.common.utils.PageUtils@46ffe53c
2019-04-03 09:03:33 -请求地址 : http://localhost:8081/index
2019-04-03 09:03:33 -HTTP METHOD : GET
2019-04-03 09:03:33 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2019-04-03 09:03:33 -参数 : [{}]
2019-04-03 09:03:33 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2019-04-03 09:03:33 -==> Parameters: 1(Long)
2019-04-03 09:03:33 -<==      Total: 46
2019-04-03 09:03:33 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2019-04-03 09:03:33 -==> Parameters: 138(Long)
2019-04-03 09:03:33 -<==      Total: 1
2019-04-03 09:03:33 -耗时 : 21
2019-04-03 09:03:33 -返回值 : index_v1
2019-04-03 09:03:33 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 09:03:33 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 21(Integer), com.bootdo.system.controller.LoginController.index()(String), {"menus":[{"attributes":{"icon":"fa fa-money","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-money","url":"/moneyList/moneyList"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"102","parentId":"106","text":"现金缴费"},{"attributes":{"icon":"fa fa-book","url":"/moneyLog/elecLog"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"107","parentId":"106","text":"缴费记录"}],"hasChildren":true,"hasParent":false,"id":"106","parentId":"0","text":"收费管理"},{"attributes":{"icon":"fa fa-lightbulb-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/elec/elec"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"121","parentId":"103","text":"电费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"elec/elecInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"122","parentId":"103","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"elec/elecUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"123","parentId":"103","text":"电表上传"},{"attributes":{"icon":"fa fa-cc","url":"/elec/elecPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"124","parentId":"103","text":"电价管理"}],"hasChildren":true,"hasParent":false,"id":"103","parentId":"0","text":"电费管理"},{"attributes":{"icon":"fa fa-tint","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/water/water"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"117","parentId":"105","text":"水费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"water/waterInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"118","parentId":"105","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"water/waterUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"119","parentId":"105","text":"水费生成"},{"attributes":{"icon":"fa fa-cc","url":"/water/waterPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"120","parentId":"105","text":"水价管理"}],"hasChildren":true,"hasParent":false,"id":"105","parentId":"0","text":"水费管理"},{"attributes":{"icon":"fa fa-fire","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/heat/heat"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"113","parentId":"104","text":"暖费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"heat/heatInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"114","parentId":"104","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"heat/heatUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"115","parentId":"104","text":"暖费生成"},{"attributes":{"icon":"","url":"/heat/heatPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"116","parentId":"104","text":"暖价管理"}],"hasChildren":true,"hasParent":false,"id":"104","parentId":"0","text":"暖费管理"},{"attributes":{"icon":"fa fa-vcard-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-bomb","url":"/print/print"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"149","parentId":"108","text":"票据记录"}],"hasChildren":true,"hasParent":false,"id":"108","parentId":"0","text":"票据管理"},{"attributes":{"icon":"fa fa-bar-chart","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-area-chart","url":"/chart/graph_echarts.html"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","text":"百度chart"},{"attributes":{"icon":"fa fa-sun-o","url":"charts/countDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"109","parentId":"97","text":"日统计报表"},{"attributes":{"icon":"fa fa-registered","url":"charts/countMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"110","parentId":"97","text":"月统计报表"},{"attributes":{"icon":"fa fa-money","url":"charts/countOwe"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"155","parentId":"97","text":"欠费报表图"},{"attributes":{"icon":"fa fa-support","url":"charts/countYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"111","parentId":"97","text":"年统计报表"},{"attributes":{"icon":"fa fa-tachometer","url":"charts/countRun"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"112","parentId":"97","text":"走势图报表"}],"hasChildren":true,"hasParent":false,"id":"97","parentId":"0","text":"统计管理"},{"attributes":{"icon":"fa fa-bars","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-book","url":"/common/dict"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"78","parentId":"1","text":"数据字典"},{"attributes":{"icon":"fa fa-folder-open","url":"/common/sysFile"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"71","parentId":"1","text":"文件管理"}],"h(String), 127.0.0.1(String), 2019-04-03 09:03:33.682(Timestamp)
2019-04-03 09:03:33 -<==    Updates: 1
2019-04-03 09:03:33 -请求地址 : http://localhost:8081/main
2019-04-03 09:03:33 -HTTP METHOD : GET
2019-04-03 09:03:33 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 09:03:33 -参数 : []
2019-04-03 09:03:33 -耗时 : 1
2019-04-03 09:03:33 -返回值 : main
2019-04-03 09:03:34 -请求地址 : http://localhost:8081/oa/notify/message
2019-04-03 09:03:34 -HTTP METHOD : GET
2019-04-03 09:03:34 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2019-04-03 09:03:34 -参数 : []
2019-04-03 09:03:34 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2019-04-03 09:03:34 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2019-04-03 09:03:34 -<==      Total: 0
2019-04-03 09:03:34 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2019-04-03 09:03:34 -==> Parameters: 1(Long), 0(String)
2019-04-03 09:03:34 -<==      Total: 1
2019-04-03 09:03:34 -耗时 : 6
2019-04-03 09:03:34 -返回值 : com.bootdo.common.utils.PageUtils@4e1dc887
2019-04-03 09:03:34 -请求地址 : http://localhost:8081/main
2019-04-03 09:03:34 -HTTP METHOD : GET
2019-04-03 09:03:34 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 09:03:34 -参数 : []
2019-04-03 09:03:34 -耗时 : 1
2019-04-03 09:03:34 -返回值 : main
2019-04-03 09:03:43 -请求地址 : http://localhost:8081/elec/elec
2019-04-03 09:03:43 -HTTP METHOD : GET
2019-04-03 09:03:43 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.Elec
2019-04-03 09:03:43 -参数 : []
2019-04-03 09:03:43 -耗时 : 1
2019-04-03 09:03:43 -返回值 : elec/elec/elec
2019-04-03 09:03:43 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-03 09:03:43 -HTTP METHOD : GET
2019-04-03 09:03:43 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 09:03:43 -参数 : [userType]
2019-04-03 09:03:43 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 09:03:43 -==> Parameters: userType(String)
2019-04-03 09:03:43 -<==      Total: 2
2019-04-03 09:03:43 -耗时 : 6
2019-04-03 09:03:43 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 09:03:43 -请求地址 : http://localhost:8081/elec/elec/list
2019-04-03 09:03:43 -HTTP METHOD : GET
2019-04-03 09:03:43 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.list
2019-04-03 09:03:43 -参数 : [{limit=10, offset=0, userType=, userOrg=, userId=, createTime=, queryType=1}, com.bootdo.elec.domain.ElecDO@2a4130cd]
2019-04-03 09:03:43 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec order by id asc limit ?, ? 
2019-04-03 09:03:43 -==> Parameters: 0(Integer), 10(Integer)
2019-04-03 09:03:43 -<==      Total: 10
2019-04-03 09:03:43 -==>  Preparing: select count(*) from elec 
2019-04-03 09:03:43 -==> Parameters: 
2019-04-03 09:03:43 -<==      Total: 1
2019-04-03 09:03:43 -耗时 : 9
2019-04-03 09:03:43 -返回值 : com.bootdo.common.utils.PageUtils@3681fd01
2019-04-03 09:03:49 -请求地址 : http://localhost:8081/elec/elec/add
2019-04-03 09:03:49 -HTTP METHOD : GET
2019-04-03 09:03:49 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.add
2019-04-03 09:03:49 -参数 : []
2019-04-03 09:03:49 -耗时 : 0
2019-04-03 09:03:49 -返回值 : elec/elec/add
2019-04-03 09:03:49 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-03 09:03:49 -HTTP METHOD : GET
2019-04-03 09:03:49 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 09:03:49 -参数 : [userType]
2019-04-03 09:03:49 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 09:03:49 -==> Parameters: userType(String)
2019-04-03 09:03:49 -请求地址 : http://localhost:8081/common/dict/list/userState
2019-04-03 09:03:49 -HTTP METHOD : GET
2019-04-03 09:03:49 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 09:03:49 -参数 : [userState]
2019-04-03 09:03:49 -<==      Total: 2
2019-04-03 09:03:49 -耗时 : 4
2019-04-03 09:03:49 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 09:03:49 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 09:03:49 -==> Parameters: userState(String)
2019-04-03 09:03:49 -<==      Total: 2
2019-04-03 09:03:49 -耗时 : 4
2019-04-03 09:03:49 -返回值 : [DictDO{id=126, name='使用中', value='1', type='userState', description='用户状态', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=125, name='未使用', value='0', type='userState', description='用户状态', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 09:03:49 -请求地址 : http://localhost:8081/common/dict/list/elecType
2019-04-03 09:03:49 -HTTP METHOD : GET
2019-04-03 09:03:49 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 09:03:49 -参数 : [elecType]
2019-04-03 09:03:49 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 09:03:49 -==> Parameters: elecType(String)
2019-04-03 09:03:49 -<==      Total: 2
2019-04-03 09:03:49 -耗时 : 5
2019-04-03 09:03:49 -返回值 : [DictDO{id=139, name='民用电', value='1', type='elecType', description='电量性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=138, name='商业电', value='0', type='elecType', description='电量类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 09:03:56 -请求地址 : http://localhost:8081/elec/elec/list
2019-04-03 09:03:56 -HTTP METHOD : GET
2019-04-03 09:03:56 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.list
2019-04-03 09:03:56 -参数 : [{limit=10, offset=10, userType=, userOrg=, userId=, createTime=, queryType=1}, com.bootdo.elec.domain.ElecDO@1a410c0c]
2019-04-03 09:03:56 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec order by id asc limit ?, ? 
2019-04-03 09:03:56 -==> Parameters: 10(Integer), 10(Integer)
2019-04-03 09:03:56 -<==      Total: 4
2019-04-03 09:03:56 -==>  Preparing: select count(*) from elec 
2019-04-03 09:03:56 -==> Parameters: 
2019-04-03 09:03:56 -<==      Total: 1
2019-04-03 09:03:56 -耗时 : 8
2019-04-03 09:03:56 -返回值 : com.bootdo.common.utils.PageUtils@532b3795
2019-04-03 09:04:08 -请求地址 : http://localhost:8081/elec/elec/edit/14
2019-04-03 09:04:08 -HTTP METHOD : GET
2019-04-03 09:04:08 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.edit
2019-04-03 09:04:08 -参数 : [14, {}]
2019-04-03 09:04:08 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, `user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec where id = ? 
2019-04-03 09:04:08 -==> Parameters: 14(Long)
2019-04-03 09:04:08 -<==      Total: 1
2019-04-03 09:04:08 -耗时 : 4
2019-04-03 09:04:08 -返回值 : elec/elec/edit
2019-04-03 09:04:08 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-03 09:04:08 -HTTP METHOD : GET
2019-04-03 09:04:08 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 09:04:08 -参数 : [userType]
2019-04-03 09:04:08 -请求地址 : http://localhost:8081/common/dict/list/elecType
2019-04-03 09:04:08 -HTTP METHOD : GET
2019-04-03 09:04:08 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 09:04:08 -参数 : [elecType]
2019-04-03 09:04:08 -请求地址 : http://localhost:8081/common/dict/list/userState
2019-04-03 09:04:08 -HTTP METHOD : GET
2019-04-03 09:04:08 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 09:04:08 -参数 : [userState]
2019-04-03 09:04:08 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 09:04:08 -==> Parameters: elecType(String)
2019-04-03 09:04:08 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 09:04:08 -==> Parameters: userState(String)
2019-04-03 09:04:08 -<==      Total: 2
2019-04-03 09:04:08 -<==      Total: 2
2019-04-03 09:04:08 -耗时 : 7
2019-04-03 09:04:08 -返回值 : [DictDO{id=126, name='使用中', value='1', type='userState', description='用户状态', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=125, name='未使用', value='0', type='userState', description='用户状态', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 09:04:08 -耗时 : 8
2019-04-03 09:04:08 -返回值 : [DictDO{id=139, name='民用电', value='1', type='elecType', description='电量性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=138, name='商业电', value='0', type='elecType', description='电量类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 09:04:08 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 09:04:08 -==> Parameters: userType(String)
2019-04-03 09:04:08 -<==      Total: 2
2019-04-03 09:04:08 -耗时 : 18
2019-04-03 09:04:08 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 09:04:16 -请求地址 : http://localhost:8081/elec/elec/update
2019-04-03 09:04:16 -HTTP METHOD : POST
2019-04-03 09:04:16 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.update
2019-04-03 09:04:16 -参数 : [com.bootdo.elec.domain.ElecDO@15657444]
2019-04-03 09:04:16 -==>  Preparing: update elec SET `user_id` = ?, `user_name` = ?, `user_type` = ?, `user_org` = ?, `user_tell` = ?, `user_state` = ?, `wages_id` = ?, `elec_type` = ?, `start` = ?, `end` = ?, `hu` = ?, `elec_amount` = ?, `elec_cost` = ?, `elec_sum` = ?, `create_time` = ?, `create_by` = ?, `update_time` = ?, `update_by` = ?, `remark` = ? where id = ? 
2019-04-03 09:04:16 -==> Parameters: 1(String), 1(String), A(String), 2(String), 1(String), 0(String), 1(String), 1(String), 1(String), 1(String), 1(Integer), 1.00(BigDecimal), 1.00(BigDecimal), 1.00(BigDecimal), 1(String), 1(Long), 2019-04-03 09:04:16.054(Timestamp), 1(Long), 1(String), 14(Long)
2019-04-03 09:04:16 -<==    Updates: 1
2019-04-03 09:04:16 -==>  Preparing: update elec set `start`= 0, `end` = 0, `elec_amount` = 0, `elec_cost` = 0, `elec_sum` = 0 where id = ? 
2019-04-03 09:04:16 -==> Parameters: 14(Long)
2019-04-03 09:04:16 -<==    Updates: 1
2019-04-03 09:04:16 -耗时 : 181
2019-04-03 09:04:16 -返回值 : {msg=操作成功, code=0}
2019-04-03 09:04:16 -请求地址 : http://localhost:8081/elec/elec/list
2019-04-03 09:04:16 -HTTP METHOD : GET
2019-04-03 09:04:16 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.list
2019-04-03 09:04:16 -参数 : [{limit=10, offset=10, userType=, userOrg=, userId=, createTime=, queryType=2}, com.bootdo.elec.domain.ElecDO@78da1924]
2019-04-03 09:04:16 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec WHERE `elec_sum` < 0 order by id asc limit ?, ? 
2019-04-03 09:04:16 -==> Parameters: 10(Integer), 10(Integer)
2019-04-03 09:04:16 -<==      Total: 0
2019-04-03 09:04:16 -==>  Preparing: select count(*) from elec WHERE `elec_sum` < 0 
2019-04-03 09:04:16 -==> Parameters: 
2019-04-03 09:04:16 -<==      Total: 1
2019-04-03 09:04:16 -耗时 : 7
2019-04-03 09:04:16 -返回值 : com.bootdo.common.utils.PageUtils@6295c2dc
2019-04-03 09:04:20 -请求地址 : http://localhost:8081/index
2019-04-03 09:04:20 -HTTP METHOD : GET
2019-04-03 09:04:20 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2019-04-03 09:04:20 -参数 : [{}]
2019-04-03 09:04:20 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2019-04-03 09:04:20 -==> Parameters: 1(Long)
2019-04-03 09:04:20 -<==      Total: 46
2019-04-03 09:04:20 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2019-04-03 09:04:20 -==> Parameters: 138(Long)
2019-04-03 09:04:20 -<==      Total: 1
2019-04-03 09:04:20 -耗时 : 24
2019-04-03 09:04:20 -返回值 : index_v1
2019-04-03 09:04:20 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 09:04:20 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 24(Integer), com.bootdo.system.controller.LoginController.index()(String), {"menus":[{"attributes":{"icon":"fa fa-money","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-money","url":"/moneyList/moneyList"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"102","parentId":"106","text":"现金缴费"},{"attributes":{"icon":"fa fa-book","url":"/moneyLog/elecLog"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"107","parentId":"106","text":"缴费记录"}],"hasChildren":true,"hasParent":false,"id":"106","parentId":"0","text":"收费管理"},{"attributes":{"icon":"fa fa-lightbulb-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/elec/elec"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"121","parentId":"103","text":"电费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"elec/elecInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"122","parentId":"103","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"elec/elecUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"123","parentId":"103","text":"电表上传"},{"attributes":{"icon":"fa fa-cc","url":"/elec/elecPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"124","parentId":"103","text":"电价管理"}],"hasChildren":true,"hasParent":false,"id":"103","parentId":"0","text":"电费管理"},{"attributes":{"icon":"fa fa-tint","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/water/water"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"117","parentId":"105","text":"水费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"water/waterInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"118","parentId":"105","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"water/waterUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"119","parentId":"105","text":"水费生成"},{"attributes":{"icon":"fa fa-cc","url":"/water/waterPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"120","parentId":"105","text":"水价管理"}],"hasChildren":true,"hasParent":false,"id":"105","parentId":"0","text":"水费管理"},{"attributes":{"icon":"fa fa-fire","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/heat/heat"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"113","parentId":"104","text":"暖费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"heat/heatInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"114","parentId":"104","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"heat/heatUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"115","parentId":"104","text":"暖费生成"},{"attributes":{"icon":"","url":"/heat/heatPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"116","parentId":"104","text":"暖价管理"}],"hasChildren":true,"hasParent":false,"id":"104","parentId":"0","text":"暖费管理"},{"attributes":{"icon":"fa fa-vcard-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-bomb","url":"/print/print"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"149","parentId":"108","text":"票据记录"}],"hasChildren":true,"hasParent":false,"id":"108","parentId":"0","text":"票据管理"},{"attributes":{"icon":"fa fa-bar-chart","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-area-chart","url":"/chart/graph_echarts.html"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","text":"百度chart"},{"attributes":{"icon":"fa fa-sun-o","url":"charts/countDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"109","parentId":"97","text":"日统计报表"},{"attributes":{"icon":"fa fa-registered","url":"charts/countMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"110","parentId":"97","text":"月统计报表"},{"attributes":{"icon":"fa fa-money","url":"charts/countOwe"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"155","parentId":"97","text":"欠费报表图"},{"attributes":{"icon":"fa fa-support","url":"charts/countYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"111","parentId":"97","text":"年统计报表"},{"attributes":{"icon":"fa fa-tachometer","url":"charts/countRun"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"112","parentId":"97","text":"走势图报表"}],"hasChildren":true,"hasParent":false,"id":"97","parentId":"0","text":"统计管理"},{"attributes":{"icon":"fa fa-bars","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-book","url":"/common/dict"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"78","parentId":"1","text":"数据字典"},{"attributes":{"icon":"fa fa-folder-open","url":"/common/sysFile"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"71","parentId":"1","text":"文件管理"}],"h(String), 127.0.0.1(String), 2019-04-03 09:04:20.185(Timestamp)
2019-04-03 09:04:20 -请求地址 : http://localhost:8081/main
2019-04-03 09:04:20 -HTTP METHOD : GET
2019-04-03 09:04:20 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 09:04:20 -参数 : []
2019-04-03 09:04:20 -耗时 : 1
2019-04-03 09:04:20 -返回值 : main
2019-04-03 09:04:20 -<==    Updates: 1
2019-04-03 09:04:20 -请求地址 : http://localhost:8081/oa/notify/message
2019-04-03 09:04:20 -HTTP METHOD : GET
2019-04-03 09:04:20 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2019-04-03 09:04:20 -参数 : []
2019-04-03 09:04:20 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2019-04-03 09:04:20 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2019-04-03 09:04:20 -<==      Total: 0
2019-04-03 09:04:20 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2019-04-03 09:04:20 -==> Parameters: 1(Long), 0(String)
2019-04-03 09:04:20 -<==      Total: 1
2019-04-03 09:04:20 -耗时 : 6
2019-04-03 09:04:20 -返回值 : com.bootdo.common.utils.PageUtils@3059b020
2019-04-03 09:04:20 -请求地址 : http://localhost:8081/main
2019-04-03 09:04:20 -HTTP METHOD : GET
2019-04-03 09:04:20 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 09:04:20 -参数 : []
2019-04-03 09:04:20 -耗时 : 0
2019-04-03 09:04:20 -返回值 : main
2019-04-03 09:04:23 -请求地址 : http://localhost:8081/water/water
2019-04-03 09:04:23 -HTTP METHOD : GET
2019-04-03 09:04:23 -CLASS_METHOD : com.bootdo.water.controller.WaterController.Water
2019-04-03 09:04:23 -参数 : []
2019-04-03 09:04:23 -耗时 : 1
2019-04-03 09:04:23 -返回值 : water/water/water
2019-04-03 09:04:23 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-03 09:04:23 -HTTP METHOD : GET
2019-04-03 09:04:23 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 09:04:23 -参数 : [userType]
2019-04-03 09:04:23 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 09:04:23 -==> Parameters: userType(String)
2019-04-03 09:04:23 -<==      Total: 2
2019-04-03 09:04:23 -耗时 : 3
2019-04-03 09:04:23 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 09:04:23 -请求地址 : http://localhost:8081/water/water/list
2019-04-03 09:04:23 -HTTP METHOD : GET
2019-04-03 09:04:23 -CLASS_METHOD : com.bootdo.water.controller.WaterController.list
2019-04-03 09:04:23 -参数 : [{limit=3, offset=0, userType=, userOrg=, userId=, createTime=, queryType=1}]
2019-04-03 09:04:23 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`water_type`,`water_price`,`water_cost`,`water_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from water order by id asc limit ?, ? 
2019-04-03 09:04:23 -==> Parameters: 0(Integer), 3(Integer)
2019-04-03 09:04:24 -<==      Total: 3
2019-04-03 09:04:24 -==>  Preparing: select count(*) from water 
2019-04-03 09:04:24 -==> Parameters: 
2019-04-03 09:04:24 -<==      Total: 1
2019-04-03 09:04:24 -耗时 : 489
2019-04-03 09:04:24 -返回值 : com.bootdo.common.utils.PageUtils@272f075b
2019-04-03 09:04:35 -请求地址 : http://localhost:8081/elec/elec
2019-04-03 09:04:35 -HTTP METHOD : GET
2019-04-03 09:04:35 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.Elec
2019-04-03 09:04:35 -参数 : []
2019-04-03 09:04:35 -耗时 : 1
2019-04-03 09:04:35 -返回值 : elec/elec/elec
2019-04-03 09:04:35 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-03 09:04:35 -HTTP METHOD : GET
2019-04-03 09:04:35 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 09:04:35 -参数 : [userType]
2019-04-03 09:04:35 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 09:04:35 -==> Parameters: userType(String)
2019-04-03 09:04:35 -<==      Total: 2
2019-04-03 09:04:35 -耗时 : 5
2019-04-03 09:04:35 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 09:04:35 -请求地址 : http://localhost:8081/elec/elec/list
2019-04-03 09:04:35 -HTTP METHOD : GET
2019-04-03 09:04:35 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.list
2019-04-03 09:04:35 -参数 : [{limit=10, offset=0, userType=, userOrg=, userId=, createTime=, queryType=1}, com.bootdo.elec.domain.ElecDO@4b845c80]
2019-04-03 09:04:35 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec order by id asc limit ?, ? 
2019-04-03 09:04:35 -==> Parameters: 0(Integer), 10(Integer)
2019-04-03 09:04:35 -<==      Total: 10
2019-04-03 09:04:35 -==>  Preparing: select count(*) from elec 
2019-04-03 09:04:35 -==> Parameters: 
2019-04-03 09:04:35 -<==      Total: 1
2019-04-03 09:04:35 -耗时 : 6
2019-04-03 09:04:35 -返回值 : com.bootdo.common.utils.PageUtils@4197088e
2019-04-03 09:04:39 -请求地址 : http://localhost:8081/elec/elec/list
2019-04-03 09:04:39 -HTTP METHOD : GET
2019-04-03 09:04:39 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.list
2019-04-03 09:04:39 -参数 : [{limit=10, offset=10, userType=, userOrg=, userId=, createTime=, queryType=1}, com.bootdo.elec.domain.ElecDO@5d184dd]
2019-04-03 09:04:39 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec order by id asc limit ?, ? 
2019-04-03 09:04:39 -==> Parameters: 10(Integer), 10(Integer)
2019-04-03 09:04:39 -<==      Total: 4
2019-04-03 09:04:39 -==>  Preparing: select count(*) from elec 
2019-04-03 09:04:39 -==> Parameters: 
2019-04-03 09:04:39 -<==      Total: 1
2019-04-03 09:04:39 -耗时 : 9
2019-04-03 09:04:39 -返回值 : com.bootdo.common.utils.PageUtils@6b651f8f
2019-04-03 09:04:47 -请求地址 : http://localhost:8081/elec/elec/remove
2019-04-03 09:04:47 -HTTP METHOD : POST
2019-04-03 09:04:47 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.remove
2019-04-03 09:04:47 -参数 : [14]
2019-04-03 09:04:47 -==>  Preparing: delete from elec where id = ? 
2019-04-03 09:04:48 -==> Parameters: 14(Long)
2019-04-03 09:04:48 -<==    Updates: 1
2019-04-03 09:04:48 -耗时 : 153
2019-04-03 09:04:48 -返回值 : {msg=操作成功, code=0}
2019-04-03 09:04:48 -请求地址 : http://localhost:8081/elec/elec/list
2019-04-03 09:04:48 -HTTP METHOD : GET
2019-04-03 09:04:48 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.list
2019-04-03 09:04:48 -参数 : [{limit=10, offset=10, userType=, userOrg=, userId=, createTime=, queryType=2}, com.bootdo.elec.domain.ElecDO@603471f0]
2019-04-03 09:04:48 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec WHERE `elec_sum` < 0 order by id asc limit ?, ? 
2019-04-03 09:04:48 -==> Parameters: 10(Integer), 10(Integer)
2019-04-03 09:04:48 -<==      Total: 0
2019-04-03 09:04:48 -==>  Preparing: select count(*) from elec WHERE `elec_sum` < 0 
2019-04-03 09:04:48 -==> Parameters: 
2019-04-03 09:04:48 -<==      Total: 1
2019-04-03 09:04:48 -耗时 : 7
2019-04-03 09:04:48 -返回值 : com.bootdo.common.utils.PageUtils@328cd042
2019-04-03 09:04:51 -请求地址 : http://localhost:8081/index
2019-04-03 09:04:51 -HTTP METHOD : GET
2019-04-03 09:04:51 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2019-04-03 09:04:51 -参数 : [{}]
2019-04-03 09:04:51 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2019-04-03 09:04:51 -==> Parameters: 1(Long)
2019-04-03 09:04:51 -<==      Total: 46
2019-04-03 09:04:51 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2019-04-03 09:04:51 -==> Parameters: 138(Long)
2019-04-03 09:04:51 -<==      Total: 1
2019-04-03 09:04:51 -耗时 : 18
2019-04-03 09:04:51 -返回值 : index_v1
2019-04-03 09:04:51 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 09:04:51 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 18(Integer), com.bootdo.system.controller.LoginController.index()(String), {"menus":[{"attributes":{"icon":"fa fa-money","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-money","url":"/moneyList/moneyList"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"102","parentId":"106","text":"现金缴费"},{"attributes":{"icon":"fa fa-book","url":"/moneyLog/elecLog"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"107","parentId":"106","text":"缴费记录"}],"hasChildren":true,"hasParent":false,"id":"106","parentId":"0","text":"收费管理"},{"attributes":{"icon":"fa fa-lightbulb-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/elec/elec"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"121","parentId":"103","text":"电费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"elec/elecInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"122","parentId":"103","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"elec/elecUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"123","parentId":"103","text":"电表上传"},{"attributes":{"icon":"fa fa-cc","url":"/elec/elecPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"124","parentId":"103","text":"电价管理"}],"hasChildren":true,"hasParent":false,"id":"103","parentId":"0","text":"电费管理"},{"attributes":{"icon":"fa fa-tint","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/water/water"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"117","parentId":"105","text":"水费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"water/waterInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"118","parentId":"105","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"water/waterUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"119","parentId":"105","text":"水费生成"},{"attributes":{"icon":"fa fa-cc","url":"/water/waterPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"120","parentId":"105","text":"水价管理"}],"hasChildren":true,"hasParent":false,"id":"105","parentId":"0","text":"水费管理"},{"attributes":{"icon":"fa fa-fire","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/heat/heat"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"113","parentId":"104","text":"暖费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"heat/heatInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"114","parentId":"104","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"heat/heatUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"115","parentId":"104","text":"暖费生成"},{"attributes":{"icon":"","url":"/heat/heatPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"116","parentId":"104","text":"暖价管理"}],"hasChildren":true,"hasParent":false,"id":"104","parentId":"0","text":"暖费管理"},{"attributes":{"icon":"fa fa-vcard-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-bomb","url":"/print/print"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"149","parentId":"108","text":"票据记录"}],"hasChildren":true,"hasParent":false,"id":"108","parentId":"0","text":"票据管理"},{"attributes":{"icon":"fa fa-bar-chart","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-area-chart","url":"/chart/graph_echarts.html"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","text":"百度chart"},{"attributes":{"icon":"fa fa-sun-o","url":"charts/countDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"109","parentId":"97","text":"日统计报表"},{"attributes":{"icon":"fa fa-registered","url":"charts/countMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"110","parentId":"97","text":"月统计报表"},{"attributes":{"icon":"fa fa-money","url":"charts/countOwe"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"155","parentId":"97","text":"欠费报表图"},{"attributes":{"icon":"fa fa-support","url":"charts/countYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"111","parentId":"97","text":"年统计报表"},{"attributes":{"icon":"fa fa-tachometer","url":"charts/countRun"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"112","parentId":"97","text":"走势图报表"}],"hasChildren":true,"hasParent":false,"id":"97","parentId":"0","text":"统计管理"},{"attributes":{"icon":"fa fa-bars","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-book","url":"/common/dict"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"78","parentId":"1","text":"数据字典"},{"attributes":{"icon":"fa fa-folder-open","url":"/common/sysFile"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"71","parentId":"1","text":"文件管理"}],"h(String), 127.0.0.1(String), 2019-04-03 09:04:51.955(Timestamp)
2019-04-03 09:04:52 -请求地址 : http://localhost:8081/main
2019-04-03 09:04:52 -HTTP METHOD : GET
2019-04-03 09:04:52 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 09:04:52 -参数 : []
2019-04-03 09:04:52 -耗时 : 0
2019-04-03 09:04:52 -返回值 : main
2019-04-03 09:04:52 -<==    Updates: 1
2019-04-03 09:04:52 -请求地址 : http://localhost:8081/oa/notify/message
2019-04-03 09:04:52 -HTTP METHOD : GET
2019-04-03 09:04:52 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2019-04-03 09:04:52 -参数 : []
2019-04-03 09:04:52 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2019-04-03 09:04:52 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2019-04-03 09:04:52 -<==      Total: 0
2019-04-03 09:04:52 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2019-04-03 09:04:52 -==> Parameters: 1(Long), 0(String)
2019-04-03 09:04:52 -<==      Total: 1
2019-04-03 09:04:52 -耗时 : 13
2019-04-03 09:04:52 -返回值 : com.bootdo.common.utils.PageUtils@5d576da0
2019-04-03 09:04:52 -请求地址 : http://localhost:8081/main
2019-04-03 09:04:52 -HTTP METHOD : GET
2019-04-03 09:04:52 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 09:04:52 -参数 : []
2019-04-03 09:04:52 -耗时 : 1
2019-04-03 09:04:52 -返回值 : main
2019-04-03 09:05:06 -请求地址 : http://localhost:8081/elec/elec
2019-04-03 09:05:06 -HTTP METHOD : GET
2019-04-03 09:05:06 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.Elec
2019-04-03 09:05:06 -参数 : []
2019-04-03 09:05:06 -耗时 : 1
2019-04-03 09:05:06 -返回值 : elec/elec/elec
2019-04-03 09:05:07 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-03 09:05:07 -HTTP METHOD : GET
2019-04-03 09:05:07 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 09:05:07 -参数 : [userType]
2019-04-03 09:05:07 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 09:05:07 -==> Parameters: userType(String)
2019-04-03 09:05:07 -<==      Total: 2
2019-04-03 09:05:07 -耗时 : 3
2019-04-03 09:05:07 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 09:05:07 -请求地址 : http://localhost:8081/elec/elec/list
2019-04-03 09:05:07 -HTTP METHOD : GET
2019-04-03 09:05:07 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.list
2019-04-03 09:05:07 -参数 : [{limit=10, offset=0, userType=, userOrg=, userId=, createTime=, queryType=1}, com.bootdo.elec.domain.ElecDO@70926611]
2019-04-03 09:05:07 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec order by id asc limit ?, ? 
2019-04-03 09:05:07 -==> Parameters: 0(Integer), 10(Integer)
2019-04-03 09:05:07 -<==      Total: 10
2019-04-03 09:05:07 -==>  Preparing: select count(*) from elec 
2019-04-03 09:05:07 -==> Parameters: 
2019-04-03 09:05:07 -<==      Total: 1
2019-04-03 09:05:07 -耗时 : 9
2019-04-03 09:05:07 -返回值 : com.bootdo.common.utils.PageUtils@3bdb77aa
2019-04-03 09:05:23 -请求地址 : http://localhost:8081/elec/elec/add
2019-04-03 09:05:23 -HTTP METHOD : GET
2019-04-03 09:05:23 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.add
2019-04-03 09:05:23 -参数 : []
2019-04-03 09:05:23 -耗时 : 0
2019-04-03 09:05:23 -返回值 : elec/elec/add
2019-04-03 09:05:23 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-03 09:05:23 -HTTP METHOD : GET
2019-04-03 09:05:23 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 09:05:23 -参数 : [userType]
2019-04-03 09:05:23 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 09:05:23 -==> Parameters: userType(String)
2019-04-03 09:05:23 -<==      Total: 2
2019-04-03 09:05:23 -耗时 : 6
2019-04-03 09:05:23 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 09:05:23 -请求地址 : http://localhost:8081/common/dict/list/elecType
2019-04-03 09:05:23 -请求地址 : http://localhost:8081/common/dict/list/userState
2019-04-03 09:05:23 -HTTP METHOD : GET
2019-04-03 09:05:23 -HTTP METHOD : GET
2019-04-03 09:05:23 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 09:05:23 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 09:05:23 -参数 : [userState]
2019-04-03 09:05:23 -参数 : [elecType]
2019-04-03 09:05:23 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 09:05:23 -==> Parameters: elecType(String)
2019-04-03 09:05:23 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 09:05:23 -==> Parameters: userState(String)
2019-04-03 09:05:23 -<==      Total: 2
2019-04-03 09:05:23 -耗时 : 7
2019-04-03 09:05:23 -返回值 : [DictDO{id=139, name='民用电', value='1', type='elecType', description='电量性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=138, name='商业电', value='0', type='elecType', description='电量类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 09:05:23 -<==      Total: 2
2019-04-03 09:05:23 -耗时 : 9
2019-04-03 09:05:23 -返回值 : [DictDO{id=126, name='使用中', value='1', type='userState', description='用户状态', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=125, name='未使用', value='0', type='userState', description='用户状态', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 09:05:29 -请求地址 : http://localhost:8081/system/sysDept/treeView
2019-04-03 09:05:29 -HTTP METHOD : GET
2019-04-03 09:05:29 -CLASS_METHOD : com.bootdo.system.controller.DeptController.treeView
2019-04-03 09:05:29 -参数 : []
2019-04-03 09:05:29 -耗时 : 1
2019-04-03 09:05:29 -返回值 : system/dept/deptTree
2019-04-03 09:05:30 -请求地址 : http://localhost:8081/system/sysDept/tree
2019-04-03 09:05:30 -HTTP METHOD : GET
2019-04-03 09:05:30 -CLASS_METHOD : com.bootdo.system.controller.DeptController.tree
2019-04-03 09:05:30 -参数 : []
2019-04-03 09:05:30 -==>  Preparing: select `dept_id`,`parent_id`,`name`,`order_num`,`del_flag` from sys_dept order by dept_id desc 
2019-04-03 09:05:30 -==> Parameters: 
2019-04-03 09:05:30 -<==      Total: 3
2019-04-03 09:05:30 -耗时 : 3
2019-04-03 09:05:30 -返回值 : {"checked":false,"children":[{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"3","parentId":"1","state":{"opened":true},"text":"牙星"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"2","parentId":"1","state":{"opened":true},"text":"五九"}],"hasChildren":true,"hasParent":false,"id":"1","parentId":"0","state":{"opened":true},"text":"总公司"}
2019-04-03 09:05:50 -请求地址 : http://localhost:8081/elec/elec/save
2019-04-03 09:05:50 -HTTP METHOD : POST
2019-04-03 09:05:50 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.save
2019-04-03 09:05:50 -参数 : [com.bootdo.elec.domain.ElecDO@47217cbb]
2019-04-03 09:05:50 -==>  Preparing: insert into elec ( `user_id`, `user_name`, `user_type`, `user_org`, `user_tell`, `user_state`, `wages_id`, `elec_type`, `elec_price`, `start`, `end`, `hu`, `elec_amount`, `elec_cost`, `elec_sum`, `create_time`, `create_by`, `update_time`, `update_by`, `remark` ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 09:05:50 -==> Parameters: 1(String), 1(String), A(String), 2(String), 1(String), 0(String), 1(String), (String), 1(BigDecimal), 1(String), 1(String), 1(Integer), 1(BigDecimal), 1(BigDecimal), 1(BigDecimal), 1(String), 1(Long), 2019-04-03 09:05:50.94(Timestamp), 1(Long), 1(String)
2019-04-03 09:05:51 -<==    Updates: 1
2019-04-03 09:05:51 -耗时 : 147
2019-04-03 09:05:51 -返回值 : {msg=操作成功, code=0}
2019-04-03 09:05:51 -请求地址 : http://localhost:8081/elec/elec/list
2019-04-03 09:05:51 -HTTP METHOD : GET
2019-04-03 09:05:51 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.list
2019-04-03 09:05:51 -参数 : [{limit=10, offset=0, userType=, userOrg=, userId=, createTime=, queryType=2}, com.bootdo.elec.domain.ElecDO@7d59982f]
2019-04-03 09:05:51 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec WHERE `elec_sum` < 0 order by id asc limit ?, ? 
2019-04-03 09:05:51 -==> Parameters: 0(Integer), 10(Integer)
2019-04-03 09:05:51 -<==      Total: 2
2019-04-03 09:05:51 -==>  Preparing: select count(*) from elec WHERE `elec_sum` < 0 
2019-04-03 09:05:51 -==> Parameters: 
2019-04-03 09:05:51 -<==      Total: 1
2019-04-03 09:05:51 -耗时 : 6
2019-04-03 09:05:51 -返回值 : com.bootdo.common.utils.PageUtils@6897f225
2019-04-03 09:05:54 -请求地址 : http://localhost:8081/index
2019-04-03 09:05:54 -HTTP METHOD : GET
2019-04-03 09:05:54 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2019-04-03 09:05:54 -参数 : [{}]
2019-04-03 09:05:54 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2019-04-03 09:05:54 -==> Parameters: 1(Long)
2019-04-03 09:05:54 -<==      Total: 46
2019-04-03 09:05:54 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2019-04-03 09:05:54 -==> Parameters: 138(Long)
2019-04-03 09:05:54 -<==      Total: 1
2019-04-03 09:05:54 -耗时 : 17
2019-04-03 09:05:54 -返回值 : index_v1
2019-04-03 09:05:54 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 09:05:54 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 17(Integer), com.bootdo.system.controller.LoginController.index()(String), {"menus":[{"attributes":{"icon":"fa fa-money","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-money","url":"/moneyList/moneyList"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"102","parentId":"106","text":"现金缴费"},{"attributes":{"icon":"fa fa-book","url":"/moneyLog/elecLog"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"107","parentId":"106","text":"缴费记录"}],"hasChildren":true,"hasParent":false,"id":"106","parentId":"0","text":"收费管理"},{"attributes":{"icon":"fa fa-lightbulb-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/elec/elec"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"121","parentId":"103","text":"电费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"elec/elecInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"122","parentId":"103","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"elec/elecUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"123","parentId":"103","text":"电表上传"},{"attributes":{"icon":"fa fa-cc","url":"/elec/elecPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"124","parentId":"103","text":"电价管理"}],"hasChildren":true,"hasParent":false,"id":"103","parentId":"0","text":"电费管理"},{"attributes":{"icon":"fa fa-tint","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/water/water"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"117","parentId":"105","text":"水费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"water/waterInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"118","parentId":"105","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"water/waterUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"119","parentId":"105","text":"水费生成"},{"attributes":{"icon":"fa fa-cc","url":"/water/waterPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"120","parentId":"105","text":"水价管理"}],"hasChildren":true,"hasParent":false,"id":"105","parentId":"0","text":"水费管理"},{"attributes":{"icon":"fa fa-fire","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/heat/heat"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"113","parentId":"104","text":"暖费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"heat/heatInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"114","parentId":"104","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"heat/heatUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"115","parentId":"104","text":"暖费生成"},{"attributes":{"icon":"","url":"/heat/heatPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"116","parentId":"104","text":"暖价管理"}],"hasChildren":true,"hasParent":false,"id":"104","parentId":"0","text":"暖费管理"},{"attributes":{"icon":"fa fa-vcard-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-bomb","url":"/print/print"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"149","parentId":"108","text":"票据记录"}],"hasChildren":true,"hasParent":false,"id":"108","parentId":"0","text":"票据管理"},{"attributes":{"icon":"fa fa-bar-chart","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-area-chart","url":"/chart/graph_echarts.html"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","text":"百度chart"},{"attributes":{"icon":"fa fa-sun-o","url":"charts/countDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"109","parentId":"97","text":"日统计报表"},{"attributes":{"icon":"fa fa-registered","url":"charts/countMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"110","parentId":"97","text":"月统计报表"},{"attributes":{"icon":"fa fa-support","url":"charts/countYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"111","parentId":"97","text":"年统计报表"},{"attributes":{"icon":"fa fa-money","url":"charts/countOwe"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"155","parentId":"97","text":"欠费报表图"},{"attributes":{"icon":"fa fa-tachometer","url":"charts/countRun"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"112","parentId":"97","text":"走势图报表"}],"hasChildren":true,"hasParent":false,"id":"97","parentId":"0","text":"统计管理"},{"attributes":{"icon":"fa fa-bars","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-book","url":"/common/dict"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"78","parentId":"1","text":"数据字典"},{"attributes":{"icon":"fa fa-folder-open","url":"/common/sysFile"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"71","parentId":"1","text":"文件管理"}],"h(String), 127.0.0.1(String), 2019-04-03 09:05:54.699(Timestamp)
2019-04-03 09:05:54 -请求地址 : http://localhost:8081/main
2019-04-03 09:05:54 -HTTP METHOD : GET
2019-04-03 09:05:54 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 09:05:54 -参数 : []
2019-04-03 09:05:54 -耗时 : 0
2019-04-03 09:05:54 -返回值 : main
2019-04-03 09:05:54 -<==    Updates: 1
2019-04-03 09:05:55 -请求地址 : http://localhost:8081/oa/notify/message
2019-04-03 09:05:55 -HTTP METHOD : GET
2019-04-03 09:05:55 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2019-04-03 09:05:55 -参数 : []
2019-04-03 09:05:55 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2019-04-03 09:05:55 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2019-04-03 09:05:55 -<==      Total: 0
2019-04-03 09:05:55 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2019-04-03 09:05:55 -==> Parameters: 1(Long), 0(String)
2019-04-03 09:05:55 -<==      Total: 1
2019-04-03 09:05:55 -耗时 : 5
2019-04-03 09:05:55 -返回值 : com.bootdo.common.utils.PageUtils@97ed7ee
2019-04-03 09:05:55 -请求地址 : http://localhost:8081/main
2019-04-03 09:05:55 -HTTP METHOD : GET
2019-04-03 09:05:55 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 09:05:55 -参数 : []
2019-04-03 09:05:55 -耗时 : 1
2019-04-03 09:05:55 -返回值 : main
2019-04-03 09:05:56 -请求地址 : http://localhost:8081/elec/elec
2019-04-03 09:05:56 -HTTP METHOD : GET
2019-04-03 09:05:56 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.Elec
2019-04-03 09:05:56 -参数 : []
2019-04-03 09:05:56 -耗时 : 1
2019-04-03 09:05:56 -返回值 : elec/elec/elec
2019-04-03 09:05:57 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-03 09:05:57 -HTTP METHOD : GET
2019-04-03 09:05:57 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 09:05:57 -参数 : [userType]
2019-04-03 09:05:57 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 09:05:57 -==> Parameters: userType(String)
2019-04-03 09:05:57 -<==      Total: 2
2019-04-03 09:05:57 -耗时 : 34
2019-04-03 09:05:57 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 09:05:57 -请求地址 : http://localhost:8081/elec/elec/list
2019-04-03 09:05:57 -HTTP METHOD : GET
2019-04-03 09:05:57 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.list
2019-04-03 09:05:57 -参数 : [{limit=10, offset=0, userType=, userOrg=, userId=, createTime=, queryType=1}, com.bootdo.elec.domain.ElecDO@602bf95]
2019-04-03 09:05:57 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec order by id asc limit ?, ? 
2019-04-03 09:05:57 -==> Parameters: 0(Integer), 10(Integer)
2019-04-03 09:05:57 -<==      Total: 10
2019-04-03 09:05:57 -==>  Preparing: select count(*) from elec 
2019-04-03 09:05:57 -==> Parameters: 
2019-04-03 09:05:57 -<==      Total: 1
2019-04-03 09:05:57 -耗时 : 9
2019-04-03 09:05:57 -返回值 : com.bootdo.common.utils.PageUtils@44e1dad3
2019-04-03 09:05:59 -请求地址 : http://localhost:8081/elec/elec/list
2019-04-03 09:05:59 -HTTP METHOD : GET
2019-04-03 09:05:59 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.list
2019-04-03 09:05:59 -参数 : [{limit=10, offset=10, userType=, userOrg=, userId=, createTime=, queryType=1}, com.bootdo.elec.domain.ElecDO@6ffc9eda]
2019-04-03 09:05:59 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec order by id asc limit ?, ? 
2019-04-03 09:05:59 -==> Parameters: 10(Integer), 10(Integer)
2019-04-03 09:05:59 -<==      Total: 4
2019-04-03 09:05:59 -==>  Preparing: select count(*) from elec 
2019-04-03 09:05:59 -==> Parameters: 
2019-04-03 09:05:59 -<==      Total: 1
2019-04-03 09:05:59 -耗时 : 8
2019-04-03 09:05:59 -返回值 : com.bootdo.common.utils.PageUtils@13bd5b82
2019-04-03 09:07:37 -请求地址 : http://localhost:8081/elec/elec/edit/15
2019-04-03 09:07:37 -HTTP METHOD : GET
2019-04-03 09:07:37 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.edit
2019-04-03 09:07:37 -参数 : [15, {}]
2019-04-03 09:07:37 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, `user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec where id = ? 
2019-04-03 09:07:37 -==> Parameters: 15(Long)
2019-04-03 09:07:37 -<==      Total: 1
2019-04-03 09:07:37 -耗时 : 6
2019-04-03 09:07:37 -返回值 : elec/elec/edit
2019-04-03 09:07:37 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-03 09:07:37 -HTTP METHOD : GET
2019-04-03 09:07:37 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 09:07:37 -参数 : [userType]
2019-04-03 09:07:37 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 09:07:37 -==> Parameters: userType(String)
2019-04-03 09:07:37 -请求地址 : http://localhost:8081/common/dict/list/elecType
2019-04-03 09:07:37 -HTTP METHOD : GET
2019-04-03 09:07:37 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 09:07:37 -参数 : [elecType]
2019-04-03 09:07:37 -请求地址 : http://localhost:8081/common/dict/list/userState
2019-04-03 09:07:37 -HTTP METHOD : GET
2019-04-03 09:07:37 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 09:07:37 -参数 : [userState]
2019-04-03 09:07:37 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 09:07:37 -==> Parameters: elecType(String)
2019-04-03 09:07:37 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 09:07:37 -==> Parameters: userState(String)
2019-04-03 09:07:37 -<==      Total: 2
2019-04-03 09:07:37 -耗时 : 5
2019-04-03 09:07:37 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 09:07:37 -<==      Total: 2
2019-04-03 09:07:37 -耗时 : 3
2019-04-03 09:07:37 -返回值 : [DictDO{id=139, name='民用电', value='1', type='elecType', description='电量性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=138, name='商业电', value='0', type='elecType', description='电量类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 09:07:37 -<==      Total: 2
2019-04-03 09:07:37 -耗时 : 4
2019-04-03 09:07:37 -返回值 : [DictDO{id=126, name='使用中', value='1', type='userState', description='用户状态', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=125, name='未使用', value='0', type='userState', description='用户状态', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 09:08:18 -请求地址 : http://localhost:8081/charts/countDD
2019-04-03 09:08:18 -HTTP METHOD : GET
2019-04-03 09:08:18 -CLASS_METHOD : com.bootdo.charts.controller.countDDController.countDD
2019-04-03 09:08:18 -参数 : []
2019-04-03 09:08:18 -耗时 : 1
2019-04-03 09:08:18 -返回值 : charts/countDD
2019-04-03 09:08:18 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-03 09:08:18 -HTTP METHOD : GET
2019-04-03 09:08:18 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 09:08:18 -参数 : [userType]
2019-04-03 09:08:18 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 09:08:18 -==> Parameters: userType(String)
2019-04-03 09:08:18 -<==      Total: 2
2019-04-03 09:08:18 -耗时 : 4
2019-04-03 09:08:18 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 09:08:49 -请求地址 : http://localhost:8081/index
2019-04-03 09:08:49 -HTTP METHOD : GET
2019-04-03 09:08:49 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2019-04-03 09:08:49 -参数 : [{}]
2019-04-03 09:08:50 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2019-04-03 09:08:50 -==> Parameters: 1(Long)
2019-04-03 09:08:50 -<==      Total: 46
2019-04-03 09:08:50 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2019-04-03 09:08:50 -==> Parameters: 138(Long)
2019-04-03 09:08:50 -<==      Total: 1
2019-04-03 09:08:50 -耗时 : 22
2019-04-03 09:08:50 -返回值 : index_v1
2019-04-03 09:08:50 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 09:08:50 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 23(Integer), com.bootdo.system.controller.LoginController.index()(String), {"menus":[{"attributes":{"icon":"fa fa-money","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-money","url":"/moneyList/moneyList"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"102","parentId":"106","text":"现金缴费"},{"attributes":{"icon":"fa fa-book","url":"/moneyLog/elecLog"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"107","parentId":"106","text":"缴费记录"}],"hasChildren":true,"hasParent":false,"id":"106","parentId":"0","text":"收费管理"},{"attributes":{"icon":"fa fa-lightbulb-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/elec/elec"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"121","parentId":"103","text":"电费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"elec/elecInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"122","parentId":"103","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"elec/elecUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"123","parentId":"103","text":"电表上传"},{"attributes":{"icon":"fa fa-cc","url":"/elec/elecPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"124","parentId":"103","text":"电价管理"}],"hasChildren":true,"hasParent":false,"id":"103","parentId":"0","text":"电费管理"},{"attributes":{"icon":"fa fa-tint","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/water/water"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"117","parentId":"105","text":"水费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"water/waterInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"118","parentId":"105","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"water/waterUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"119","parentId":"105","text":"水费生成"},{"attributes":{"icon":"fa fa-cc","url":"/water/waterPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"120","parentId":"105","text":"水价管理"}],"hasChildren":true,"hasParent":false,"id":"105","parentId":"0","text":"水费管理"},{"attributes":{"icon":"fa fa-fire","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/heat/heat"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"113","parentId":"104","text":"暖费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"heat/heatInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"114","parentId":"104","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"heat/heatUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"115","parentId":"104","text":"暖费生成"},{"attributes":{"icon":"","url":"/heat/heatPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"116","parentId":"104","text":"暖价管理"}],"hasChildren":true,"hasParent":false,"id":"104","parentId":"0","text":"暖费管理"},{"attributes":{"icon":"fa fa-vcard-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-bomb","url":"/print/print"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"149","parentId":"108","text":"票据记录"}],"hasChildren":true,"hasParent":false,"id":"108","parentId":"0","text":"票据管理"},{"attributes":{"icon":"fa fa-bar-chart","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-area-chart","url":"/chart/graph_echarts.html"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","text":"百度chart"},{"attributes":{"icon":"fa fa-sun-o","url":"charts/countDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"109","parentId":"97","text":"日统计报表"},{"attributes":{"icon":"fa fa-registered","url":"charts/countMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"110","parentId":"97","text":"月统计报表"},{"attributes":{"icon":"fa fa-money","url":"charts/countOwe"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"155","parentId":"97","text":"欠费报表图"},{"attributes":{"icon":"fa fa-support","url":"charts/countYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"111","parentId":"97","text":"年统计报表"},{"attributes":{"icon":"fa fa-tachometer","url":"charts/countRun"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"112","parentId":"97","text":"走势图报表"}],"hasChildren":true,"hasParent":false,"id":"97","parentId":"0","text":"统计管理"},{"attributes":{"icon":"fa fa-bars","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-book","url":"/common/dict"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"78","parentId":"1","text":"数据字典"},{"attributes":{"icon":"fa fa-folder-open","url":"/common/sysFile"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"71","parentId":"1","text":"文件管理"}],"h(String), 127.0.0.1(String), 2019-04-03 09:08:50.022(Timestamp)
2019-04-03 09:08:50 -<==    Updates: 1
2019-04-03 09:08:50 -请求地址 : http://localhost:8081/main
2019-04-03 09:08:50 -HTTP METHOD : GET
2019-04-03 09:08:50 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 09:08:50 -参数 : []
2019-04-03 09:08:50 -耗时 : 0
2019-04-03 09:08:50 -返回值 : main
2019-04-03 09:08:50 -请求地址 : http://localhost:8081/oa/notify/message
2019-04-03 09:08:50 -HTTP METHOD : GET
2019-04-03 09:08:50 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2019-04-03 09:08:50 -参数 : []
2019-04-03 09:08:50 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2019-04-03 09:08:50 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2019-04-03 09:08:50 -<==      Total: 0
2019-04-03 09:08:50 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2019-04-03 09:08:50 -==> Parameters: 1(Long), 0(String)
2019-04-03 09:08:50 -<==      Total: 1
2019-04-03 09:08:50 -耗时 : 10
2019-04-03 09:08:50 -返回值 : com.bootdo.common.utils.PageUtils@27e18db5
2019-04-03 09:08:50 -请求地址 : http://localhost:8081/main
2019-04-03 09:08:50 -HTTP METHOD : GET
2019-04-03 09:08:50 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 09:08:50 -参数 : []
2019-04-03 09:08:50 -耗时 : 1
2019-04-03 09:08:50 -返回值 : main
2019-04-03 09:08:52 -请求地址 : http://localhost:8081/elec/elec
2019-04-03 09:08:52 -HTTP METHOD : GET
2019-04-03 09:08:52 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.Elec
2019-04-03 09:08:52 -参数 : []
2019-04-03 09:08:52 -耗时 : 1
2019-04-03 09:08:52 -返回值 : elec/elec/elec
2019-04-03 09:08:52 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-03 09:08:52 -HTTP METHOD : GET
2019-04-03 09:08:52 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 09:08:52 -参数 : [userType]
2019-04-03 09:08:52 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 09:08:52 -==> Parameters: userType(String)
2019-04-03 09:08:52 -<==      Total: 2
2019-04-03 09:08:52 -耗时 : 3
2019-04-03 09:08:52 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 09:08:52 -请求地址 : http://localhost:8081/elec/elec/list
2019-04-03 09:08:52 -HTTP METHOD : GET
2019-04-03 09:08:52 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.list
2019-04-03 09:08:52 -参数 : [{limit=10, offset=0, userType=, userOrg=, userId=, createTime=, queryType=1}, com.bootdo.elec.domain.ElecDO@56d80252]
2019-04-03 09:08:52 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec order by id asc limit ?, ? 
2019-04-03 09:08:52 -==> Parameters: 0(Integer), 10(Integer)
2019-04-03 09:08:52 -<==      Total: 10
2019-04-03 09:08:52 -==>  Preparing: select count(*) from elec 
2019-04-03 09:08:52 -==> Parameters: 
2019-04-03 09:08:52 -<==      Total: 1
2019-04-03 09:08:52 -耗时 : 8
2019-04-03 09:08:52 -返回值 : com.bootdo.common.utils.PageUtils@456dfa89
2019-04-03 09:09:10 -请求地址 : http://localhost:8081/elec/elec/edit/10
2019-04-03 09:09:10 -HTTP METHOD : GET
2019-04-03 09:09:10 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.edit
2019-04-03 09:09:10 -参数 : [10, {}]
2019-04-03 09:09:10 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, `user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec where id = ? 
2019-04-03 09:09:10 -==> Parameters: 10(Long)
2019-04-03 09:09:10 -<==      Total: 1
2019-04-03 09:09:10 -耗时 : 4
2019-04-03 09:09:10 -返回值 : elec/elec/edit
2019-04-03 09:09:10 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-03 09:09:10 -HTTP METHOD : GET
2019-04-03 09:09:10 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 09:09:10 -参数 : [userType]
2019-04-03 09:09:10 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 09:09:10 -==> Parameters: userType(String)
2019-04-03 09:09:10 -请求地址 : http://localhost:8081/common/dict/list/userState
2019-04-03 09:09:10 -HTTP METHOD : GET
2019-04-03 09:09:10 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 09:09:10 -参数 : [userState]
2019-04-03 09:09:10 -<==      Total: 2
2019-04-03 09:09:10 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 09:09:10 -==> Parameters: userState(String)
2019-04-03 09:09:10 -耗时 : 4
2019-04-03 09:09:10 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 09:09:10 -<==      Total: 2
2019-04-03 09:09:10 -耗时 : 5
2019-04-03 09:09:10 -返回值 : [DictDO{id=126, name='使用中', value='1', type='userState', description='用户状态', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=125, name='未使用', value='0', type='userState', description='用户状态', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 09:09:10 -请求地址 : http://localhost:8081/common/dict/list/elecType
2019-04-03 09:09:10 -HTTP METHOD : GET
2019-04-03 09:09:10 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 09:09:10 -参数 : [elecType]
2019-04-03 09:09:10 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 09:09:10 -==> Parameters: elecType(String)
2019-04-03 09:09:10 -<==      Total: 2
2019-04-03 09:09:10 -耗时 : 4
2019-04-03 09:09:10 -返回值 : [DictDO{id=139, name='民用电', value='1', type='elecType', description='电量性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=138, name='商业电', value='0', type='elecType', description='电量类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 09:10:49 -请求地址 : http://localhost:8081/login;JSESSIONID=17daaaca-6094-4512-969c-60d03c203c66
2019-04-03 09:10:49 -HTTP METHOD : GET
2019-04-03 09:10:49 -CLASS_METHOD : com.bootdo.system.controller.LoginController.login
2019-04-03 09:10:49 -参数 : [{}]
2019-04-03 09:10:49 -耗时 : 1
2019-04-03 09:10:49 -返回值 : login
2019-04-03 09:10:51 -请求地址 : http://localhost:8081/getVerify
2019-04-03 09:10:51 -HTTP METHOD : GET
2019-04-03 09:10:51 -CLASS_METHOD : com.bootdo.system.controller.LoginController.getVerify
2019-04-03 09:10:51 -参数 : [org.apache.shiro.web.servlet.ShiroHttpServletRequest@7525aa0c, org.apache.shiro.web.servlet.ShiroHttpServletResponse@56135834]
2019-04-03 09:10:51 -9999
2019-04-03 09:10:51 -耗时 : 214
2019-04-03 09:10:51 -返回值 : null
2019-04-03 09:10:51 -请求地址 : http://localhost:8081/login
2019-04-03 09:10:51 -HTTP METHOD : GET
2019-04-03 09:10:51 -CLASS_METHOD : com.bootdo.system.controller.LoginController.login
2019-04-03 09:10:51 -参数 : [{}]
2019-04-03 09:10:51 -耗时 : 0
2019-04-03 09:10:51 -返回值 : login
2019-04-03 09:10:55 -请求地址 : http://localhost:8081/login
2019-04-03 09:10:55 -HTTP METHOD : POST
2019-04-03 09:10:55 -CLASS_METHOD : com.bootdo.system.controller.LoginController.ajaxLogin
2019-04-03 09:10:55 -参数 : [admin, 111111, 9999, org.apache.shiro.web.servlet.ShiroHttpServletRequest@504066e]
2019-04-03 09:10:55 -==>  Preparing: select `user_id`,`username`,`name`,`password`,`dept_id`,`email`,`mobile`,`status`,`user_id_create`,`gmt_create`,`gmt_modified`,`sex`,`birth`,`pic_id`,`live_address`,`hobby`,`province`,`city`,`district` from sys_user WHERE username = ? order by user_id desc 
2019-04-03 09:10:55 -==> Parameters: admin(String)
2019-04-03 09:10:55 -<==      Total: 1
2019-04-03 09:10:55 -耗时 : 192
2019-04-03 09:10:55 -返回值 : {msg=操作成功, code=0}
2019-04-03 09:10:55 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 09:10:55 -==> Parameters: 1(Long), admin(String), 登录(String), 192(Integer), com.bootdo.system.controller.LoginController.ajaxLogin()(String), null, 127.0.0.1(String), 2019-04-03 09:10:55.721(Timestamp)
2019-04-03 09:10:55 -请求地址 : http://localhost:8081/index
2019-04-03 09:10:55 -HTTP METHOD : GET
2019-04-03 09:10:55 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2019-04-03 09:10:55 -参数 : [{}]
2019-04-03 09:10:55 -<==    Updates: 1
2019-04-03 09:10:55 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2019-04-03 09:10:55 -==> Parameters: 1(Long)
2019-04-03 09:10:55 -<==      Total: 46
2019-04-03 09:10:55 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2019-04-03 09:10:55 -==> Parameters: 138(Long)
2019-04-03 09:10:55 -<==      Total: 1
2019-04-03 09:10:55 -耗时 : 61
2019-04-03 09:10:55 -返回值 : index_v1
2019-04-03 09:10:55 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 09:10:55 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 61(Integer), com.bootdo.system.controller.LoginController.index()(String), {"menus":[{"attributes":{"icon":"fa fa-money","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-money","url":"/moneyList/moneyList"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"102","parentId":"106","text":"现金缴费"},{"attributes":{"icon":"fa fa-book","url":"/moneyLog/elecLog"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"107","parentId":"106","text":"缴费记录"}],"hasChildren":true,"hasParent":false,"id":"106","parentId":"0","text":"收费管理"},{"attributes":{"icon":"fa fa-lightbulb-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/elec/elec"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"121","parentId":"103","text":"电费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"elec/elecInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"122","parentId":"103","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"elec/elecUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"123","parentId":"103","text":"电表上传"},{"attributes":{"icon":"fa fa-cc","url":"/elec/elecPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"124","parentId":"103","text":"电价管理"}],"hasChildren":true,"hasParent":false,"id":"103","parentId":"0","text":"电费管理"},{"attributes":{"icon":"fa fa-tint","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/water/water"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"117","parentId":"105","text":"水费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"water/waterInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"118","parentId":"105","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"water/waterUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"119","parentId":"105","text":"水费生成"},{"attributes":{"icon":"fa fa-cc","url":"/water/waterPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"120","parentId":"105","text":"水价管理"}],"hasChildren":true,"hasParent":false,"id":"105","parentId":"0","text":"水费管理"},{"attributes":{"icon":"fa fa-fire","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/heat/heat"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"113","parentId":"104","text":"暖费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"heat/heatInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"114","parentId":"104","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"heat/heatUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"115","parentId":"104","text":"暖费生成"},{"attributes":{"icon":"","url":"/heat/heatPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"116","parentId":"104","text":"暖价管理"}],"hasChildren":true,"hasParent":false,"id":"104","parentId":"0","text":"暖费管理"},{"attributes":{"icon":"fa fa-vcard-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-bomb","url":"/print/print"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"149","parentId":"108","text":"票据记录"}],"hasChildren":true,"hasParent":false,"id":"108","parentId":"0","text":"票据管理"},{"attributes":{"icon":"fa fa-bar-chart","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-area-chart","url":"/chart/graph_echarts.html"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","text":"百度chart"},{"attributes":{"icon":"fa fa-sun-o","url":"charts/countDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"109","parentId":"97","text":"日统计报表"},{"attributes":{"icon":"fa fa-registered","url":"charts/countMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"110","parentId":"97","text":"月统计报表"},{"attributes":{"icon":"fa fa-support","url":"charts/countYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"111","parentId":"97","text":"年统计报表"},{"attributes":{"icon":"fa fa-money","url":"charts/countOwe"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"155","parentId":"97","text":"欠费报表图"},{"attributes":{"icon":"fa fa-tachometer","url":"charts/countRun"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"112","parentId":"97","text":"走势图报表"}],"hasChildren":true,"hasParent":false,"id":"97","parentId":"0","text":"统计管理"},{"attributes":{"icon":"fa fa-bars","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-book","url":"/common/dict"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"78","parentId":"1","text":"数据字典"},{"attributes":{"icon":"fa fa-folder-open","url":"/common/sysFile"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"71","parentId":"1","text":"文件管理"}],"h(String), 127.0.0.1(String), 2019-04-03 09:10:55.818(Timestamp)
2019-04-03 09:10:56 -请求地址 : http://localhost:8081/main
2019-04-03 09:10:56 -HTTP METHOD : GET
2019-04-03 09:10:56 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 09:10:56 -参数 : []
2019-04-03 09:10:56 -耗时 : 0
2019-04-03 09:10:56 -返回值 : main
2019-04-03 09:10:56 -<==    Updates: 1
2019-04-03 09:10:57 -请求地址 : http://localhost:8081/main
2019-04-03 09:10:57 -HTTP METHOD : GET
2019-04-03 09:10:57 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 09:10:57 -参数 : []
2019-04-03 09:10:57 -耗时 : 1
2019-04-03 09:10:57 -返回值 : main
2019-04-03 09:10:57 -请求地址 : http://localhost:8081/oa/notify/message
2019-04-03 09:10:57 -HTTP METHOD : GET
2019-04-03 09:10:57 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2019-04-03 09:10:57 -参数 : []
2019-04-03 09:10:57 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2019-04-03 09:10:57 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2019-04-03 09:10:57 -<==      Total: 0
2019-04-03 09:10:57 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2019-04-03 09:10:57 -==> Parameters: 1(Long), 0(String)
2019-04-03 09:10:57 -<==      Total: 1
2019-04-03 09:10:57 -耗时 : 272
2019-04-03 09:10:57 -返回值 : com.bootdo.common.utils.PageUtils@4c8efde9
2019-04-03 09:10:59 -==>  Preparing: select distinct m.perms from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id = ur.role_id where ur.user_id = ? 
2019-04-03 09:10:59 -==> Parameters: 1(Long)
2019-04-03 09:10:59 -<==      Total: 90
2019-04-03 09:10:59 -请求地址 : http://localhost:8081/elec/elec
2019-04-03 09:10:59 -HTTP METHOD : GET
2019-04-03 09:10:59 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.Elec
2019-04-03 09:10:59 -参数 : []
2019-04-03 09:10:59 -耗时 : 1
2019-04-03 09:10:59 -返回值 : elec/elec/elec
2019-04-03 09:11:00 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-03 09:11:00 -HTTP METHOD : GET
2019-04-03 09:11:00 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 09:11:00 -参数 : [userType]
2019-04-03 09:11:00 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 09:11:00 -==> Parameters: userType(String)
2019-04-03 09:11:00 -<==      Total: 2
2019-04-03 09:11:00 -耗时 : 3
2019-04-03 09:11:00 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 09:11:01 -请求地址 : http://localhost:8081/elec/elec/list
2019-04-03 09:11:01 -HTTP METHOD : GET
2019-04-03 09:11:01 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.list
2019-04-03 09:11:01 -参数 : [{limit=10, offset=0, userType=, userOrg=, userId=, createTime=, queryType=1}, com.bootdo.elec.domain.ElecDO@345f723a]
2019-04-03 09:11:01 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec order by id asc limit ?, ? 
2019-04-03 09:11:01 -==> Parameters: 0(Integer), 10(Integer)
2019-04-03 09:11:01 -<==      Total: 10
2019-04-03 09:11:01 -==>  Preparing: select count(*) from elec 
2019-04-03 09:11:01 -==> Parameters: 
2019-04-03 09:11:01 -<==      Total: 1
2019-04-03 09:11:01 -耗时 : 6
2019-04-03 09:11:01 -返回值 : com.bootdo.common.utils.PageUtils@7e1576a4
2019-04-03 09:11:05 -请求地址 : http://localhost:8081/elec/elec/edit/1
2019-04-03 09:11:05 -HTTP METHOD : GET
2019-04-03 09:11:05 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.edit
2019-04-03 09:11:05 -参数 : [1, {}]
2019-04-03 09:11:05 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, `user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec where id = ? 
2019-04-03 09:11:05 -==> Parameters: 1(Long)
2019-04-03 09:11:05 -<==      Total: 1
2019-04-03 09:11:05 -耗时 : 4
2019-04-03 09:11:05 -返回值 : elec/elec/edit
2019-04-03 09:11:05 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-03 09:11:05 -HTTP METHOD : GET
2019-04-03 09:11:05 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 09:11:05 -参数 : [userType]
2019-04-03 09:11:05 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 09:11:05 -==> Parameters: userType(String)
2019-04-03 09:11:05 -<==      Total: 2
2019-04-03 09:11:05 -耗时 : 4
2019-04-03 09:11:05 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 09:11:05 -请求地址 : http://localhost:8081/common/dict/list/userState
2019-04-03 09:11:05 -HTTP METHOD : GET
2019-04-03 09:11:05 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 09:11:05 -参数 : [userState]
2019-04-03 09:11:05 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 09:11:05 -==> Parameters: userState(String)
2019-04-03 09:11:05 -请求地址 : http://localhost:8081/common/dict/list/elecType
2019-04-03 09:11:05 -HTTP METHOD : GET
2019-04-03 09:11:05 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 09:11:05 -参数 : [elecType]
2019-04-03 09:11:05 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 09:11:05 -==> Parameters: elecType(String)
2019-04-03 09:11:05 -<==      Total: 2
2019-04-03 09:11:05 -耗时 : 51
2019-04-03 09:11:05 -返回值 : [DictDO{id=126, name='使用中', value='1', type='userState', description='用户状态', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=125, name='未使用', value='0', type='userState', description='用户状态', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 09:11:06 -<==      Total: 2
2019-04-03 09:11:06 -耗时 : 3
2019-04-03 09:11:06 -返回值 : [DictDO{id=139, name='民用电', value='1', type='elecType', description='电量性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=138, name='商业电', value='0', type='elecType', description='电量类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 09:12:05 -请求地址 : http://localhost:8081/elec/elec/add
2019-04-03 09:12:05 -HTTP METHOD : GET
2019-04-03 09:12:05 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.add
2019-04-03 09:12:05 -参数 : []
2019-04-03 09:12:05 -耗时 : 1
2019-04-03 09:12:05 -返回值 : elec/elec/add
2019-04-03 09:12:05 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-03 09:12:05 -HTTP METHOD : GET
2019-04-03 09:12:05 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 09:12:05 -参数 : [userType]
2019-04-03 09:12:05 -请求地址 : http://localhost:8081/common/dict/list/userState
2019-04-03 09:12:05 -HTTP METHOD : GET
2019-04-03 09:12:05 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 09:12:05 -参数 : [userState]
2019-04-03 09:12:05 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 09:12:05 -==> Parameters: userState(String)
2019-04-03 09:12:05 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 09:12:05 -==> Parameters: userType(String)
2019-04-03 09:12:05 -<==      Total: 2
2019-04-03 09:12:05 -耗时 : 4
2019-04-03 09:12:05 -返回值 : [DictDO{id=126, name='使用中', value='1', type='userState', description='用户状态', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=125, name='未使用', value='0', type='userState', description='用户状态', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 09:12:05 -请求地址 : http://localhost:8081/common/dict/list/elecType
2019-04-03 09:12:05 -HTTP METHOD : GET
2019-04-03 09:12:05 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 09:12:05 -参数 : [elecType]
2019-04-03 09:12:05 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 09:12:05 -==> Parameters: elecType(String)
2019-04-03 09:12:05 -<==      Total: 2
2019-04-03 09:12:05 -耗时 : 11
2019-04-03 09:12:05 -<==      Total: 2
2019-04-03 09:12:05 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 09:12:05 -耗时 : 3
2019-04-03 09:12:05 -返回值 : [DictDO{id=139, name='民用电', value='1', type='elecType', description='电量性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=138, name='商业电', value='0', type='elecType', description='电量类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 09:12:25 -请求地址 : http://localhost:8081/elec/elec/save
2019-04-03 09:12:25 -HTTP METHOD : POST
2019-04-03 09:12:25 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.save
2019-04-03 09:12:25 -参数 : [com.bootdo.elec.domain.ElecDO@6e259a8d]
2019-04-03 09:12:25 -==>  Preparing: insert into elec ( `user_id`, `user_name`, `user_type`, `user_org`, `user_tell`, `user_state`, `wages_id`, `elec_type`, `elec_price`, `start`, `end`, `hu`, `elec_amount`, `elec_cost`, `elec_sum`, `create_time`, `create_by`, `update_time`, `update_by`, `remark` ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 09:12:25 -==> Parameters: 1(String), 1(String), A(String), (String), 1(String), 0(String), 1(String), 0(String), 1(BigDecimal), 1(String), 1(String), 1(Integer), 1(BigDecimal), 1(BigDecimal), 1(BigDecimal), 1(String), 1(Long), 2019-04-03 09:12:25.921(Timestamp), 1(Long), (String)
2019-04-03 09:12:26 -<==    Updates: 1
2019-04-03 09:12:26 -耗时 : 143
2019-04-03 09:12:26 -返回值 : {msg=操作成功, code=0}
2019-04-03 09:12:26 -请求地址 : http://localhost:8081/elec/elec/list
2019-04-03 09:12:26 -HTTP METHOD : GET
2019-04-03 09:12:26 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.list
2019-04-03 09:12:26 -参数 : [{limit=10, offset=0, userType=, userOrg=, userId=, createTime=, queryType=2}, com.bootdo.elec.domain.ElecDO@8aab9c3]
2019-04-03 09:12:26 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec WHERE `elec_sum` < 0 order by id asc limit ?, ? 
2019-04-03 09:12:26 -==> Parameters: 0(Integer), 10(Integer)
2019-04-03 09:12:26 -<==      Total: 2
2019-04-03 09:12:26 -==>  Preparing: select count(*) from elec WHERE `elec_sum` < 0 
2019-04-03 09:12:26 -==> Parameters: 
2019-04-03 09:12:26 -<==      Total: 1
2019-04-03 09:12:26 -耗时 : 5
2019-04-03 09:12:26 -返回值 : com.bootdo.common.utils.PageUtils@48db95d8
2019-04-03 09:12:29 -请求地址 : http://localhost:8081/index
2019-04-03 09:12:29 -HTTP METHOD : GET
2019-04-03 09:12:29 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2019-04-03 09:12:29 -参数 : [{}]
2019-04-03 09:12:29 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2019-04-03 09:12:29 -==> Parameters: 1(Long)
2019-04-03 09:12:29 -<==      Total: 46
2019-04-03 09:12:29 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2019-04-03 09:12:29 -==> Parameters: 138(Long)
2019-04-03 09:12:29 -<==      Total: 1
2019-04-03 09:12:29 -耗时 : 15
2019-04-03 09:12:29 -返回值 : index_v1
2019-04-03 09:12:29 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 09:12:29 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 16(Integer), com.bootdo.system.controller.LoginController.index()(String), {"menus":[{"attributes":{"icon":"fa fa-money","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-money","url":"/moneyList/moneyList"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"102","parentId":"106","text":"现金缴费"},{"attributes":{"icon":"fa fa-book","url":"/moneyLog/elecLog"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"107","parentId":"106","text":"缴费记录"}],"hasChildren":true,"hasParent":false,"id":"106","parentId":"0","text":"收费管理"},{"attributes":{"icon":"fa fa-lightbulb-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/elec/elec"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"121","parentId":"103","text":"电费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"elec/elecInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"122","parentId":"103","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"elec/elecUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"123","parentId":"103","text":"电表上传"},{"attributes":{"icon":"fa fa-cc","url":"/elec/elecPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"124","parentId":"103","text":"电价管理"}],"hasChildren":true,"hasParent":false,"id":"103","parentId":"0","text":"电费管理"},{"attributes":{"icon":"fa fa-tint","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/water/water"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"117","parentId":"105","text":"水费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"water/waterInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"118","parentId":"105","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"water/waterUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"119","parentId":"105","text":"水费生成"},{"attributes":{"icon":"fa fa-cc","url":"/water/waterPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"120","parentId":"105","text":"水价管理"}],"hasChildren":true,"hasParent":false,"id":"105","parentId":"0","text":"水费管理"},{"attributes":{"icon":"fa fa-fire","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/heat/heat"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"113","parentId":"104","text":"暖费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"heat/heatInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"114","parentId":"104","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"heat/heatUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"115","parentId":"104","text":"暖费生成"},{"attributes":{"icon":"","url":"/heat/heatPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"116","parentId":"104","text":"暖价管理"}],"hasChildren":true,"hasParent":false,"id":"104","parentId":"0","text":"暖费管理"},{"attributes":{"icon":"fa fa-vcard-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-bomb","url":"/print/print"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"149","parentId":"108","text":"票据记录"}],"hasChildren":true,"hasParent":false,"id":"108","parentId":"0","text":"票据管理"},{"attributes":{"icon":"fa fa-bar-chart","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-area-chart","url":"/chart/graph_echarts.html"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","text":"百度chart"},{"attributes":{"icon":"fa fa-sun-o","url":"charts/countDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"109","parentId":"97","text":"日统计报表"},{"attributes":{"icon":"fa fa-registered","url":"charts/countMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"110","parentId":"97","text":"月统计报表"},{"attributes":{"icon":"fa fa-support","url":"charts/countYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"111","parentId":"97","text":"年统计报表"},{"attributes":{"icon":"fa fa-money","url":"charts/countOwe"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"155","parentId":"97","text":"欠费报表图"},{"attributes":{"icon":"fa fa-tachometer","url":"charts/countRun"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"112","parentId":"97","text":"走势图报表"}],"hasChildren":true,"hasParent":false,"id":"97","parentId":"0","text":"统计管理"},{"attributes":{"icon":"fa fa-bars","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-book","url":"/common/dict"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"78","parentId":"1","text":"数据字典"},{"attributes":{"icon":"fa fa-folder-open","url":"/common/sysFile"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"71","parentId":"1","text":"文件管理"}],"h(String), 127.0.0.1(String), 2019-04-03 09:12:29.457(Timestamp)
2019-04-03 09:12:29 -请求地址 : http://localhost:8081/main
2019-04-03 09:12:29 -HTTP METHOD : GET
2019-04-03 09:12:29 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 09:12:29 -参数 : []
2019-04-03 09:12:29 -耗时 : 1
2019-04-03 09:12:29 -返回值 : main
2019-04-03 09:12:29 -<==    Updates: 1
2019-04-03 09:12:29 -请求地址 : http://localhost:8081/oa/notify/message
2019-04-03 09:12:29 -HTTP METHOD : GET
2019-04-03 09:12:29 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2019-04-03 09:12:29 -参数 : []
2019-04-03 09:12:29 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2019-04-03 09:12:29 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2019-04-03 09:12:29 -<==      Total: 0
2019-04-03 09:12:29 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2019-04-03 09:12:29 -==> Parameters: 1(Long), 0(String)
2019-04-03 09:12:29 -<==      Total: 1
2019-04-03 09:12:29 -耗时 : 9
2019-04-03 09:12:29 -返回值 : com.bootdo.common.utils.PageUtils@7dc7b7c0
2019-04-03 09:12:29 -请求地址 : http://localhost:8081/main
2019-04-03 09:12:29 -HTTP METHOD : GET
2019-04-03 09:12:29 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 09:12:29 -参数 : []
2019-04-03 09:12:29 -耗时 : 1
2019-04-03 09:12:29 -返回值 : main
2019-04-03 09:12:31 -请求地址 : http://localhost:8081/elec/elec
2019-04-03 09:12:31 -HTTP METHOD : GET
2019-04-03 09:12:31 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.Elec
2019-04-03 09:12:31 -参数 : []
2019-04-03 09:12:31 -耗时 : 2
2019-04-03 09:12:31 -返回值 : elec/elec/elec
2019-04-03 09:12:32 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-03 09:12:32 -HTTP METHOD : GET
2019-04-03 09:12:32 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 09:12:32 -参数 : [userType]
2019-04-03 09:12:32 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 09:12:32 -==> Parameters: userType(String)
2019-04-03 09:12:32 -<==      Total: 2
2019-04-03 09:12:32 -耗时 : 4
2019-04-03 09:12:32 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 09:12:32 -请求地址 : http://localhost:8081/elec/elec/list
2019-04-03 09:12:32 -HTTP METHOD : GET
2019-04-03 09:12:32 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.list
2019-04-03 09:12:32 -参数 : [{limit=10, offset=0, userType=, userOrg=, userId=, createTime=, queryType=1}, com.bootdo.elec.domain.ElecDO@1326203]
2019-04-03 09:12:32 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec order by id asc limit ?, ? 
2019-04-03 09:12:32 -==> Parameters: 0(Integer), 10(Integer)
2019-04-03 09:12:32 -<==      Total: 10
2019-04-03 09:12:32 -==>  Preparing: select count(*) from elec 
2019-04-03 09:12:32 -==> Parameters: 
2019-04-03 09:12:32 -<==      Total: 1
2019-04-03 09:12:32 -耗时 : 6
2019-04-03 09:12:32 -返回值 : com.bootdo.common.utils.PageUtils@58d5a94e
2019-04-03 09:12:34 -请求地址 : http://localhost:8081/elec/elec/list
2019-04-03 09:12:34 -HTTP METHOD : GET
2019-04-03 09:12:34 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.list
2019-04-03 09:12:34 -参数 : [{limit=10, offset=10, userType=, userOrg=, userId=, createTime=, queryType=1}, com.bootdo.elec.domain.ElecDO@b12e119]
2019-04-03 09:12:34 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec order by id asc limit ?, ? 
2019-04-03 09:12:34 -==> Parameters: 10(Integer), 10(Integer)
2019-04-03 09:12:34 -<==      Total: 5
2019-04-03 09:12:34 -==>  Preparing: select count(*) from elec 
2019-04-03 09:12:34 -==> Parameters: 
2019-04-03 09:12:34 -<==      Total: 1
2019-04-03 09:12:34 -耗时 : 6
2019-04-03 09:12:34 -返回值 : com.bootdo.common.utils.PageUtils@553c6656
2019-04-03 09:13:09 -请求地址 : http://localhost:8081/elec/elec/batchRemove
2019-04-03 09:13:09 -HTTP METHOD : POST
2019-04-03 09:13:09 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.remove
2019-04-03 09:13:09 -参数 : [[Ljava.lang.Long;@27bd7bbe]
2019-04-03 09:13:10 -==>  Preparing: delete from elec where id in ( ? , ? ) 
2019-04-03 09:13:10 -==> Parameters: 15(Long), 16(Long)
2019-04-03 09:13:10 -<==    Updates: 2
2019-04-03 09:13:10 -耗时 : 507
2019-04-03 09:13:10 -返回值 : {msg=操作成功, code=0}
2019-04-03 09:13:10 -请求地址 : http://localhost:8081/elec/elec/list
2019-04-03 09:13:10 -HTTP METHOD : GET
2019-04-03 09:13:10 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.list
2019-04-03 09:13:10 -参数 : [{limit=10, offset=10, userType=, userOrg=, userId=, createTime=, queryType=2}, com.bootdo.elec.domain.ElecDO@5364aa08]
2019-04-03 09:13:10 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec WHERE `elec_sum` < 0 order by id asc limit ?, ? 
2019-04-03 09:13:10 -==> Parameters: 10(Integer), 10(Integer)
2019-04-03 09:13:10 -<==      Total: 0
2019-04-03 09:13:10 -==>  Preparing: select count(*) from elec WHERE `elec_sum` < 0 
2019-04-03 09:13:10 -==> Parameters: 
2019-04-03 09:13:10 -<==      Total: 1
2019-04-03 09:13:10 -耗时 : 6
2019-04-03 09:13:10 -返回值 : com.bootdo.common.utils.PageUtils@15bcc85d
2019-04-03 09:13:12 -请求地址 : http://localhost:8081/index
2019-04-03 09:13:12 -HTTP METHOD : GET
2019-04-03 09:13:12 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2019-04-03 09:13:12 -参数 : [{}]
2019-04-03 09:13:12 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2019-04-03 09:13:12 -==> Parameters: 1(Long)
2019-04-03 09:13:12 -<==      Total: 46
2019-04-03 09:13:12 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2019-04-03 09:13:12 -==> Parameters: 138(Long)
2019-04-03 09:13:12 -<==      Total: 1
2019-04-03 09:13:12 -耗时 : 33
2019-04-03 09:13:12 -返回值 : index_v1
2019-04-03 09:13:12 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 09:13:12 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 35(Integer), com.bootdo.system.controller.LoginController.index()(String), {"menus":[{"attributes":{"icon":"fa fa-money","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-money","url":"/moneyList/moneyList"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"102","parentId":"106","text":"现金缴费"},{"attributes":{"icon":"fa fa-book","url":"/moneyLog/elecLog"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"107","parentId":"106","text":"缴费记录"}],"hasChildren":true,"hasParent":false,"id":"106","parentId":"0","text":"收费管理"},{"attributes":{"icon":"fa fa-lightbulb-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/elec/elec"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"121","parentId":"103","text":"电费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"elec/elecInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"122","parentId":"103","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"elec/elecUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"123","parentId":"103","text":"电表上传"},{"attributes":{"icon":"fa fa-cc","url":"/elec/elecPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"124","parentId":"103","text":"电价管理"}],"hasChildren":true,"hasParent":false,"id":"103","parentId":"0","text":"电费管理"},{"attributes":{"icon":"fa fa-tint","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/water/water"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"117","parentId":"105","text":"水费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"water/waterInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"118","parentId":"105","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"water/waterUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"119","parentId":"105","text":"水费生成"},{"attributes":{"icon":"fa fa-cc","url":"/water/waterPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"120","parentId":"105","text":"水价管理"}],"hasChildren":true,"hasParent":false,"id":"105","parentId":"0","text":"水费管理"},{"attributes":{"icon":"fa fa-fire","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/heat/heat"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"113","parentId":"104","text":"暖费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"heat/heatInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"114","parentId":"104","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"heat/heatUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"115","parentId":"104","text":"暖费生成"},{"attributes":{"icon":"","url":"/heat/heatPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"116","parentId":"104","text":"暖价管理"}],"hasChildren":true,"hasParent":false,"id":"104","parentId":"0","text":"暖费管理"},{"attributes":{"icon":"fa fa-vcard-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-bomb","url":"/print/print"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"149","parentId":"108","text":"票据记录"}],"hasChildren":true,"hasParent":false,"id":"108","parentId":"0","text":"票据管理"},{"attributes":{"icon":"fa fa-bar-chart","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-area-chart","url":"/chart/graph_echarts.html"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","text":"百度chart"},{"attributes":{"icon":"fa fa-sun-o","url":"charts/countDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"109","parentId":"97","text":"日统计报表"},{"attributes":{"icon":"fa fa-registered","url":"charts/countMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"110","parentId":"97","text":"月统计报表"},{"attributes":{"icon":"fa fa-money","url":"charts/countOwe"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"155","parentId":"97","text":"欠费报表图"},{"attributes":{"icon":"fa fa-support","url":"charts/countYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"111","parentId":"97","text":"年统计报表"},{"attributes":{"icon":"fa fa-tachometer","url":"charts/countRun"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"112","parentId":"97","text":"走势图报表"}],"hasChildren":true,"hasParent":false,"id":"97","parentId":"0","text":"统计管理"},{"attributes":{"icon":"fa fa-bars","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-book","url":"/common/dict"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"78","parentId":"1","text":"数据字典"},{"attributes":{"icon":"fa fa-folder-open","url":"/common/sysFile"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"71","parentId":"1","text":"文件管理"}],"h(String), 127.0.0.1(String), 2019-04-03 09:13:12.708(Timestamp)
2019-04-03 09:13:12 -请求地址 : http://localhost:8081/main
2019-04-03 09:13:12 -HTTP METHOD : GET
2019-04-03 09:13:12 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 09:13:12 -参数 : []
2019-04-03 09:13:12 -耗时 : 0
2019-04-03 09:13:12 -返回值 : main
2019-04-03 09:13:12 -<==    Updates: 1
2019-04-03 09:13:12 -请求地址 : http://localhost:8081/oa/notify/message
2019-04-03 09:13:12 -HTTP METHOD : GET
2019-04-03 09:13:12 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2019-04-03 09:13:12 -参数 : []
2019-04-03 09:13:12 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2019-04-03 09:13:12 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2019-04-03 09:13:12 -<==      Total: 0
2019-04-03 09:13:12 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2019-04-03 09:13:12 -==> Parameters: 1(Long), 0(String)
2019-04-03 09:13:12 -<==      Total: 1
2019-04-03 09:13:12 -耗时 : 5
2019-04-03 09:13:12 -返回值 : com.bootdo.common.utils.PageUtils@57f44a03
2019-04-03 09:13:13 -请求地址 : http://localhost:8081/main
2019-04-03 09:13:13 -HTTP METHOD : GET
2019-04-03 09:13:13 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 09:13:13 -参数 : []
2019-04-03 09:13:13 -耗时 : 1
2019-04-03 09:13:13 -返回值 : main
2019-04-03 09:13:30 -请求地址 : http://localhost:8081/elec/elec
2019-04-03 09:13:30 -HTTP METHOD : GET
2019-04-03 09:13:30 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.Elec
2019-04-03 09:13:30 -参数 : []
2019-04-03 09:13:30 -耗时 : 0
2019-04-03 09:13:30 -返回值 : elec/elec/elec
2019-04-03 09:13:31 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-03 09:13:31 -HTTP METHOD : GET
2019-04-03 09:13:31 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 09:13:31 -参数 : [userType]
2019-04-03 09:13:31 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 09:13:31 -==> Parameters: userType(String)
2019-04-03 09:13:31 -<==      Total: 2
2019-04-03 09:13:31 -耗时 : 3
2019-04-03 09:13:31 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 09:13:31 -请求地址 : http://localhost:8081/elec/elec/list
2019-04-03 09:13:31 -HTTP METHOD : GET
2019-04-03 09:13:31 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.list
2019-04-03 09:13:31 -参数 : [{limit=10, offset=0, userType=, userOrg=, userId=, createTime=, queryType=1}, com.bootdo.elec.domain.ElecDO@1765aa85]
2019-04-03 09:13:31 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec order by id asc limit ?, ? 
2019-04-03 09:13:31 -==> Parameters: 0(Integer), 10(Integer)
2019-04-03 09:13:31 -<==      Total: 10
2019-04-03 09:13:31 -==>  Preparing: select count(*) from elec 
2019-04-03 09:13:31 -==> Parameters: 
2019-04-03 09:13:31 -<==      Total: 1
2019-04-03 09:13:31 -耗时 : 7
2019-04-03 09:13:31 -返回值 : com.bootdo.common.utils.PageUtils@123cc2be
2019-04-03 09:13:35 -请求地址 : http://localhost:8081/elec/elec/list
2019-04-03 09:13:35 -HTTP METHOD : GET
2019-04-03 09:13:35 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.list
2019-04-03 09:13:35 -参数 : [{limit=10, offset=10, userType=, userOrg=, userId=, createTime=, queryType=1}, com.bootdo.elec.domain.ElecDO@1bccbf07]
2019-04-03 09:13:35 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec order by id asc limit ?, ? 
2019-04-03 09:13:35 -==> Parameters: 10(Integer), 10(Integer)
2019-04-03 09:13:35 -<==      Total: 3
2019-04-03 09:13:35 -==>  Preparing: select count(*) from elec 
2019-04-03 09:13:35 -==> Parameters: 
2019-04-03 09:13:35 -<==      Total: 1
2019-04-03 09:13:35 -耗时 : 5
2019-04-03 09:13:35 -返回值 : com.bootdo.common.utils.PageUtils@2f476fe3
2019-04-03 09:19:47 -请求地址 : http://localhost:8081/index
2019-04-03 09:19:47 -HTTP METHOD : GET
2019-04-03 09:19:47 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2019-04-03 09:19:47 -参数 : [{}]
2019-04-03 09:19:47 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2019-04-03 09:19:47 -==> Parameters: 1(Long)
2019-04-03 09:19:47 -<==      Total: 46
2019-04-03 09:19:47 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2019-04-03 09:19:47 -==> Parameters: 138(Long)
2019-04-03 09:19:47 -<==      Total: 1
2019-04-03 09:19:47 -耗时 : 191
2019-04-03 09:19:47 -返回值 : index_v1
2019-04-03 09:19:47 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 09:19:47 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 191(Integer), com.bootdo.system.controller.LoginController.index()(String), {"menus":[{"attributes":{"icon":"fa fa-money","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-money","url":"/moneyList/moneyList"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"102","parentId":"106","text":"现金缴费"},{"attributes":{"icon":"fa fa-book","url":"/moneyLog/elecLog"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"107","parentId":"106","text":"缴费记录"}],"hasChildren":true,"hasParent":false,"id":"106","parentId":"0","text":"收费管理"},{"attributes":{"icon":"fa fa-lightbulb-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/elec/elec"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"121","parentId":"103","text":"电费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"elec/elecInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"122","parentId":"103","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"elec/elecUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"123","parentId":"103","text":"电表上传"},{"attributes":{"icon":"fa fa-cc","url":"/elec/elecPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"124","parentId":"103","text":"电价管理"}],"hasChildren":true,"hasParent":false,"id":"103","parentId":"0","text":"电费管理"},{"attributes":{"icon":"fa fa-tint","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/water/water"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"117","parentId":"105","text":"水费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"water/waterInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"118","parentId":"105","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"water/waterUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"119","parentId":"105","text":"水费生成"},{"attributes":{"icon":"fa fa-cc","url":"/water/waterPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"120","parentId":"105","text":"水价管理"}],"hasChildren":true,"hasParent":false,"id":"105","parentId":"0","text":"水费管理"},{"attributes":{"icon":"fa fa-fire","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/heat/heat"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"113","parentId":"104","text":"暖费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"heat/heatInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"114","parentId":"104","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"heat/heatUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"115","parentId":"104","text":"暖费生成"},{"attributes":{"icon":"","url":"/heat/heatPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"116","parentId":"104","text":"暖价管理"}],"hasChildren":true,"hasParent":false,"id":"104","parentId":"0","text":"暖费管理"},{"attributes":{"icon":"fa fa-vcard-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-bomb","url":"/print/print"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"149","parentId":"108","text":"票据记录"}],"hasChildren":true,"hasParent":false,"id":"108","parentId":"0","text":"票据管理"},{"attributes":{"icon":"fa fa-bar-chart","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-area-chart","url":"/chart/graph_echarts.html"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","text":"百度chart"},{"attributes":{"icon":"fa fa-sun-o","url":"charts/countDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"109","parentId":"97","text":"日统计报表"},{"attributes":{"icon":"fa fa-registered","url":"charts/countMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"110","parentId":"97","text":"月统计报表"},{"attributes":{"icon":"fa fa-money","url":"charts/countOwe"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"155","parentId":"97","text":"欠费报表图"},{"attributes":{"icon":"fa fa-support","url":"charts/countYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"111","parentId":"97","text":"年统计报表"},{"attributes":{"icon":"fa fa-tachometer","url":"charts/countRun"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"112","parentId":"97","text":"走势图报表"}],"hasChildren":true,"hasParent":false,"id":"97","parentId":"0","text":"统计管理"},{"attributes":{"icon":"fa fa-bars","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-book","url":"/common/dict"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"78","parentId":"1","text":"数据字典"},{"attributes":{"icon":"fa fa-folder-open","url":"/common/sysFile"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"71","parentId":"1","text":"文件管理"}],"h(String), 127.0.0.1(String), 2019-04-03 09:19:47.876(Timestamp)
2019-04-03 09:19:47 -<==    Updates: 1
2019-04-03 09:19:48 -请求地址 : http://localhost:8081/main
2019-04-03 09:19:48 -HTTP METHOD : GET
2019-04-03 09:19:48 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 09:19:48 -参数 : []
2019-04-03 09:19:48 -耗时 : 0
2019-04-03 09:19:48 -返回值 : main
2019-04-03 09:19:48 -请求地址 : http://localhost:8081/oa/notify/message
2019-04-03 09:19:48 -HTTP METHOD : GET
2019-04-03 09:19:48 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2019-04-03 09:19:48 -参数 : []
2019-04-03 09:19:48 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2019-04-03 09:19:48 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2019-04-03 09:19:48 -<==      Total: 0
2019-04-03 09:19:48 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2019-04-03 09:19:48 -==> Parameters: 1(Long), 0(String)
2019-04-03 09:19:48 -<==      Total: 1
2019-04-03 09:19:48 -耗时 : 65
2019-04-03 09:19:48 -返回值 : com.bootdo.common.utils.PageUtils@4fb5681c
2019-04-03 09:19:48 -请求地址 : http://localhost:8081/main
2019-04-03 09:19:48 -HTTP METHOD : GET
2019-04-03 09:19:48 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 09:19:48 -参数 : []
2019-04-03 09:19:48 -耗时 : 1
2019-04-03 09:19:48 -返回值 : main
2019-04-03 09:19:52 -请求地址 : http://localhost:8081/elec/elec
2019-04-03 09:19:52 -HTTP METHOD : GET
2019-04-03 09:19:52 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.Elec
2019-04-03 09:19:52 -参数 : []
2019-04-03 09:19:52 -耗时 : 1
2019-04-03 09:19:52 -返回值 : elec/elec/elec
2019-04-03 09:19:54 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-03 09:19:54 -HTTP METHOD : GET
2019-04-03 09:19:54 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 09:19:54 -参数 : [userType]
2019-04-03 09:19:54 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 09:19:54 -==> Parameters: userType(String)
2019-04-03 09:19:54 -请求地址 : http://localhost:8081/elec/elec/list
2019-04-03 09:19:54 -HTTP METHOD : GET
2019-04-03 09:19:54 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.list
2019-04-03 09:19:54 -参数 : [{limit=10, offset=0, userType=, userOrg=, userId=, createTime=, queryType=1}, com.bootdo.elec.domain.ElecDO@6a9dd88d]
2019-04-03 09:19:54 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec order by id asc limit ?, ? 
2019-04-03 09:19:54 -==> Parameters: 0(Integer), 10(Integer)
2019-04-03 09:19:54 -<==      Total: 2
2019-04-03 09:19:54 -耗时 : 661
2019-04-03 09:19:54 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 09:19:54 -<==      Total: 10
2019-04-03 09:19:54 -==>  Preparing: select count(*) from elec 
2019-04-03 09:19:54 -==> Parameters: 
2019-04-03 09:19:54 -<==      Total: 1
2019-04-03 09:19:54 -耗时 : 873
2019-04-03 09:19:54 -返回值 : com.bootdo.common.utils.PageUtils@4b853e3e
2019-04-03 09:20:00 -请求地址 : http://localhost:8081/elec/elec/add
2019-04-03 09:20:00 -HTTP METHOD : GET
2019-04-03 09:20:00 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.add
2019-04-03 09:20:00 -参数 : []
2019-04-03 09:20:00 -耗时 : 0
2019-04-03 09:20:00 -返回值 : elec/elec/add
2019-04-03 09:20:01 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-03 09:20:01 -HTTP METHOD : GET
2019-04-03 09:20:01 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 09:20:01 -参数 : [userType]
2019-04-03 09:20:01 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 09:20:01 -==> Parameters: userType(String)
2019-04-03 09:20:01 -<==      Total: 2
2019-04-03 09:20:01 -耗时 : 4
2019-04-03 09:20:01 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 09:20:01 -请求地址 : http://localhost:8081/common/dict/list/userState
2019-04-03 09:20:01 -HTTP METHOD : GET
2019-04-03 09:20:01 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 09:20:01 -参数 : [userState]
2019-04-03 09:20:01 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 09:20:01 -==> Parameters: userState(String)
2019-04-03 09:20:01 -<==      Total: 2
2019-04-03 09:20:01 -耗时 : 12
2019-04-03 09:20:01 -返回值 : [DictDO{id=126, name='使用中', value='1', type='userState', description='用户状态', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=125, name='未使用', value='0', type='userState', description='用户状态', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 09:20:01 -请求地址 : http://localhost:8081/common/dict/list/elecType
2019-04-03 09:20:01 -HTTP METHOD : GET
2019-04-03 09:20:01 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 09:20:01 -参数 : [elecType]
2019-04-03 09:20:01 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 09:20:01 -==> Parameters: elecType(String)
2019-04-03 09:20:01 -<==      Total: 2
2019-04-03 09:20:01 -耗时 : 5
2019-04-03 09:20:01 -返回值 : [DictDO{id=139, name='民用电', value='1', type='elecType', description='电量性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=138, name='商业电', value='0', type='elecType', description='电量类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 09:20:26 -请求地址 : http://localhost:8081/elec/elec/save
2019-04-03 09:20:26 -HTTP METHOD : POST
2019-04-03 09:20:26 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.save
2019-04-03 09:20:26 -参数 : [com.bootdo.elec.domain.ElecDO@4fe330ba]
2019-04-03 09:20:26 -==>  Preparing: update elec set `start`= 0, `end` = 0, `elec_amount` = 0, `elec_cost` = 0, `elec_sum` = 0 where id = ? 
2019-04-03 09:20:26 -==> Parameters: null
2019-04-03 09:20:26 -<==    Updates: 0
2019-04-03 09:20:26 -==>  Preparing: insert into elec ( `user_id`, `user_name`, `user_type`, `user_org`, `user_tell`, `user_state`, `wages_id`, `elec_type`, `elec_price`, `start`, `end`, `hu`, `elec_amount`, `elec_cost`, `elec_sum`, `create_time`, `create_by`, `update_time`, `update_by`, `remark` ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 09:20:26 -==> Parameters: 1(String), 1(String), (String), (String), 11(String), 0(String), 1(String), (String), 1(BigDecimal), 1(String), 1(String), 1(Integer), 1(BigDecimal), 1(BigDecimal), 1(BigDecimal), 1(String), 1(Long), 2019-04-03 09:20:26.856(Timestamp), 1(Long), (String)
2019-04-03 09:20:26 -<==    Updates: 1
2019-04-03 09:20:26 -耗时 : 60
2019-04-03 09:20:26 -返回值 : {msg=操作成功, code=0}
2019-04-03 09:20:26 -请求地址 : http://localhost:8081/elec/elec/list
2019-04-03 09:20:26 -HTTP METHOD : GET
2019-04-03 09:20:26 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.list
2019-04-03 09:20:26 -参数 : [{limit=10, offset=0, userType=, userOrg=, userId=, createTime=, queryType=2}, com.bootdo.elec.domain.ElecDO@56cc1459]
2019-04-03 09:20:26 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec WHERE `elec_sum` < 0 order by id asc limit ?, ? 
2019-04-03 09:20:26 -==> Parameters: 0(Integer), 10(Integer)
2019-04-03 09:20:26 -<==      Total: 2
2019-04-03 09:20:26 -==>  Preparing: select count(*) from elec WHERE `elec_sum` < 0 
2019-04-03 09:20:26 -==> Parameters: 
2019-04-03 09:20:26 -<==      Total: 1
2019-04-03 09:20:26 -耗时 : 10
2019-04-03 09:20:26 -返回值 : com.bootdo.common.utils.PageUtils@52b98468
2019-04-03 09:20:30 -请求地址 : http://localhost:8081/index
2019-04-03 09:20:30 -HTTP METHOD : GET
2019-04-03 09:20:30 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2019-04-03 09:20:30 -参数 : [{}]
2019-04-03 09:20:30 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2019-04-03 09:20:30 -==> Parameters: 1(Long)
2019-04-03 09:20:30 -<==      Total: 46
2019-04-03 09:20:30 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2019-04-03 09:20:30 -==> Parameters: 138(Long)
2019-04-03 09:20:30 -<==      Total: 1
2019-04-03 09:20:30 -耗时 : 18
2019-04-03 09:20:30 -返回值 : index_v1
2019-04-03 09:20:31 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 09:20:31 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 18(Integer), com.bootdo.system.controller.LoginController.index()(String), {"menus":[{"attributes":{"icon":"fa fa-money","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-money","url":"/moneyList/moneyList"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"102","parentId":"106","text":"现金缴费"},{"attributes":{"icon":"fa fa-book","url":"/moneyLog/elecLog"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"107","parentId":"106","text":"缴费记录"}],"hasChildren":true,"hasParent":false,"id":"106","parentId":"0","text":"收费管理"},{"attributes":{"icon":"fa fa-lightbulb-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/elec/elec"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"121","parentId":"103","text":"电费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"elec/elecInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"122","parentId":"103","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"elec/elecUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"123","parentId":"103","text":"电表上传"},{"attributes":{"icon":"fa fa-cc","url":"/elec/elecPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"124","parentId":"103","text":"电价管理"}],"hasChildren":true,"hasParent":false,"id":"103","parentId":"0","text":"电费管理"},{"attributes":{"icon":"fa fa-tint","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/water/water"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"117","parentId":"105","text":"水费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"water/waterInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"118","parentId":"105","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"water/waterUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"119","parentId":"105","text":"水费生成"},{"attributes":{"icon":"fa fa-cc","url":"/water/waterPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"120","parentId":"105","text":"水价管理"}],"hasChildren":true,"hasParent":false,"id":"105","parentId":"0","text":"水费管理"},{"attributes":{"icon":"fa fa-fire","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/heat/heat"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"113","parentId":"104","text":"暖费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"heat/heatInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"114","parentId":"104","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"heat/heatUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"115","parentId":"104","text":"暖费生成"},{"attributes":{"icon":"","url":"/heat/heatPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"116","parentId":"104","text":"暖价管理"}],"hasChildren":true,"hasParent":false,"id":"104","parentId":"0","text":"暖费管理"},{"attributes":{"icon":"fa fa-vcard-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-bomb","url":"/print/print"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"149","parentId":"108","text":"票据记录"}],"hasChildren":true,"hasParent":false,"id":"108","parentId":"0","text":"票据管理"},{"attributes":{"icon":"fa fa-bar-chart","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-area-chart","url":"/chart/graph_echarts.html"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","text":"百度chart"},{"attributes":{"icon":"fa fa-sun-o","url":"charts/countDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"109","parentId":"97","text":"日统计报表"},{"attributes":{"icon":"fa fa-registered","url":"charts/countMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"110","parentId":"97","text":"月统计报表"},{"attributes":{"icon":"fa fa-money","url":"charts/countOwe"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"155","parentId":"97","text":"欠费报表图"},{"attributes":{"icon":"fa fa-support","url":"charts/countYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"111","parentId":"97","text":"年统计报表"},{"attributes":{"icon":"fa fa-tachometer","url":"charts/countRun"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"112","parentId":"97","text":"走势图报表"}],"hasChildren":true,"hasParent":false,"id":"97","parentId":"0","text":"统计管理"},{"attributes":{"icon":"fa fa-bars","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-book","url":"/common/dict"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"78","parentId":"1","text":"数据字典"},{"attributes":{"icon":"fa fa-folder-open","url":"/common/sysFile"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"71","parentId":"1","text":"文件管理"}],"h(String), 127.0.0.1(String), 2019-04-03 09:20:30.995(Timestamp)
2019-04-03 09:20:31 -请求地址 : http://localhost:8081/main
2019-04-03 09:20:31 -HTTP METHOD : GET
2019-04-03 09:20:31 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 09:20:31 -参数 : []
2019-04-03 09:20:31 -耗时 : 0
2019-04-03 09:20:31 -返回值 : main
2019-04-03 09:20:31 -<==    Updates: 1
2019-04-03 09:20:31 -请求地址 : http://localhost:8081/oa/notify/message
2019-04-03 09:20:31 -HTTP METHOD : GET
2019-04-03 09:20:31 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2019-04-03 09:20:31 -参数 : []
2019-04-03 09:20:31 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2019-04-03 09:20:31 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2019-04-03 09:20:31 -<==      Total: 0
2019-04-03 09:20:31 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2019-04-03 09:20:31 -==> Parameters: 1(Long), 0(String)
2019-04-03 09:20:31 -<==      Total: 1
2019-04-03 09:20:31 -耗时 : 10
2019-04-03 09:20:31 -返回值 : com.bootdo.common.utils.PageUtils@201a2c8a
2019-04-03 09:20:31 -请求地址 : http://localhost:8081/main
2019-04-03 09:20:31 -HTTP METHOD : GET
2019-04-03 09:20:31 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 09:20:31 -参数 : []
2019-04-03 09:20:31 -耗时 : 1
2019-04-03 09:20:31 -返回值 : main
2019-04-03 09:20:33 -请求地址 : http://localhost:8081/elec/elec
2019-04-03 09:20:33 -HTTP METHOD : GET
2019-04-03 09:20:33 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.Elec
2019-04-03 09:20:33 -参数 : []
2019-04-03 09:20:33 -耗时 : 1
2019-04-03 09:20:33 -返回值 : elec/elec/elec
2019-04-03 09:20:33 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-03 09:20:33 -HTTP METHOD : GET
2019-04-03 09:20:33 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 09:20:33 -参数 : [userType]
2019-04-03 09:20:33 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 09:20:33 -==> Parameters: userType(String)
2019-04-03 09:20:33 -<==      Total: 2
2019-04-03 09:20:33 -耗时 : 3
2019-04-03 09:20:33 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 09:20:33 -请求地址 : http://localhost:8081/elec/elec/list
2019-04-03 09:20:33 -HTTP METHOD : GET
2019-04-03 09:20:33 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.list
2019-04-03 09:20:33 -参数 : [{limit=10, offset=0, userType=, userOrg=, userId=, createTime=, queryType=1}, com.bootdo.elec.domain.ElecDO@28526da8]
2019-04-03 09:20:33 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec order by id asc limit ?, ? 
2019-04-03 09:20:33 -==> Parameters: 0(Integer), 10(Integer)
2019-04-03 09:20:33 -<==      Total: 10
2019-04-03 09:20:33 -==>  Preparing: select count(*) from elec 
2019-04-03 09:20:33 -==> Parameters: 
2019-04-03 09:20:33 -<==      Total: 1
2019-04-03 09:20:33 -耗时 : 6
2019-04-03 09:20:33 -返回值 : com.bootdo.common.utils.PageUtils@254fd154
2019-04-03 09:20:35 -请求地址 : http://localhost:8081/elec/elec/list
2019-04-03 09:20:35 -HTTP METHOD : GET
2019-04-03 09:20:35 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.list
2019-04-03 09:20:35 -参数 : [{limit=10, offset=10, userType=, userOrg=, userId=, createTime=, queryType=1}, com.bootdo.elec.domain.ElecDO@452a9b12]
2019-04-03 09:20:35 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec order by id asc limit ?, ? 
2019-04-03 09:20:35 -==> Parameters: 10(Integer), 10(Integer)
2019-04-03 09:20:35 -<==      Total: 4
2019-04-03 09:20:35 -==>  Preparing: select count(*) from elec 
2019-04-03 09:20:35 -==> Parameters: 
2019-04-03 09:20:35 -<==      Total: 1
2019-04-03 09:20:35 -耗时 : 6
2019-04-03 09:20:35 -返回值 : com.bootdo.common.utils.PageUtils@1bc49e06
2019-04-03 09:23:31 -请求地址 : http://localhost:8081/index
2019-04-03 09:23:31 -HTTP METHOD : GET
2019-04-03 09:23:31 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2019-04-03 09:23:31 -参数 : [{}]
2019-04-03 09:23:31 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2019-04-03 09:23:31 -==> Parameters: 1(Long)
2019-04-03 09:23:31 -<==      Total: 46
2019-04-03 09:23:31 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2019-04-03 09:23:31 -==> Parameters: 138(Long)
2019-04-03 09:23:31 -<==      Total: 1
2019-04-03 09:23:31 -耗时 : 26
2019-04-03 09:23:31 -返回值 : index_v1
2019-04-03 09:23:31 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 09:23:31 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 26(Integer), com.bootdo.system.controller.LoginController.index()(String), {"menus":[{"attributes":{"icon":"fa fa-money","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-money","url":"/moneyList/moneyList"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"102","parentId":"106","text":"现金缴费"},{"attributes":{"icon":"fa fa-book","url":"/moneyLog/elecLog"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"107","parentId":"106","text":"缴费记录"}],"hasChildren":true,"hasParent":false,"id":"106","parentId":"0","text":"收费管理"},{"attributes":{"icon":"fa fa-lightbulb-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/elec/elec"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"121","parentId":"103","text":"电费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"elec/elecInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"122","parentId":"103","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"elec/elecUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"123","parentId":"103","text":"电表上传"},{"attributes":{"icon":"fa fa-cc","url":"/elec/elecPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"124","parentId":"103","text":"电价管理"}],"hasChildren":true,"hasParent":false,"id":"103","parentId":"0","text":"电费管理"},{"attributes":{"icon":"fa fa-tint","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/water/water"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"117","parentId":"105","text":"水费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"water/waterInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"118","parentId":"105","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"water/waterUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"119","parentId":"105","text":"水费生成"},{"attributes":{"icon":"fa fa-cc","url":"/water/waterPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"120","parentId":"105","text":"水价管理"}],"hasChildren":true,"hasParent":false,"id":"105","parentId":"0","text":"水费管理"},{"attributes":{"icon":"fa fa-fire","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/heat/heat"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"113","parentId":"104","text":"暖费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"heat/heatInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"114","parentId":"104","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"heat/heatUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"115","parentId":"104","text":"暖费生成"},{"attributes":{"icon":"","url":"/heat/heatPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"116","parentId":"104","text":"暖价管理"}],"hasChildren":true,"hasParent":false,"id":"104","parentId":"0","text":"暖费管理"},{"attributes":{"icon":"fa fa-vcard-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-bomb","url":"/print/print"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"149","parentId":"108","text":"票据记录"}],"hasChildren":true,"hasParent":false,"id":"108","parentId":"0","text":"票据管理"},{"attributes":{"icon":"fa fa-bar-chart","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-area-chart","url":"/chart/graph_echarts.html"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","text":"百度chart"},{"attributes":{"icon":"fa fa-sun-o","url":"charts/countDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"109","parentId":"97","text":"日统计报表"},{"attributes":{"icon":"fa fa-registered","url":"charts/countMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"110","parentId":"97","text":"月统计报表"},{"attributes":{"icon":"fa fa-money","url":"charts/countOwe"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"155","parentId":"97","text":"欠费报表图"},{"attributes":{"icon":"fa fa-support","url":"charts/countYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"111","parentId":"97","text":"年统计报表"},{"attributes":{"icon":"fa fa-tachometer","url":"charts/countRun"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"112","parentId":"97","text":"走势图报表"}],"hasChildren":true,"hasParent":false,"id":"97","parentId":"0","text":"统计管理"},{"attributes":{"icon":"fa fa-bars","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-book","url":"/common/dict"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"78","parentId":"1","text":"数据字典"},{"attributes":{"icon":"fa fa-folder-open","url":"/common/sysFile"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"71","parentId":"1","text":"文件管理"}],"h(String), 127.0.0.1(String), 2019-04-03 09:23:31.045(Timestamp)
2019-04-03 09:23:31 -<==    Updates: 1
2019-04-03 09:23:31 -请求地址 : http://localhost:8081/main
2019-04-03 09:23:31 -HTTP METHOD : GET
2019-04-03 09:23:31 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 09:23:31 -参数 : []
2019-04-03 09:23:31 -耗时 : 0
2019-04-03 09:23:31 -返回值 : main
2019-04-03 09:23:31 -请求地址 : http://localhost:8081/oa/notify/message
2019-04-03 09:23:31 -HTTP METHOD : GET
2019-04-03 09:23:31 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2019-04-03 09:23:31 -参数 : []
2019-04-03 09:23:31 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2019-04-03 09:23:31 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2019-04-03 09:23:31 -<==      Total: 0
2019-04-03 09:23:31 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2019-04-03 09:23:31 -==> Parameters: 1(Long), 0(String)
2019-04-03 09:23:31 -<==      Total: 1
2019-04-03 09:23:31 -耗时 : 19
2019-04-03 09:23:31 -返回值 : com.bootdo.common.utils.PageUtils@4180bf31
2019-04-03 09:23:31 -请求地址 : http://localhost:8081/main
2019-04-03 09:23:31 -HTTP METHOD : GET
2019-04-03 09:23:31 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 09:23:31 -参数 : []
2019-04-03 09:23:31 -耗时 : 1
2019-04-03 09:23:31 -返回值 : main
2019-04-03 09:25:15 -==>  Preparing: select distinct m.perms from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id = ur.role_id where ur.user_id = ? 
2019-04-03 09:25:15 -==> Parameters: 1(Long)
2019-04-03 09:25:15 -<==      Total: 90
2019-04-03 09:25:15 -请求地址 : http://localhost:8081/moneyList/moneyList
2019-04-03 09:25:15 -HTTP METHOD : GET
2019-04-03 09:25:15 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.MoneyList
2019-04-03 09:25:15 -参数 : []
2019-04-03 09:25:15 -耗时 : 0
2019-04-03 09:25:15 -返回值 : /moneyList/moneyList
2019-04-03 09:25:59 -请求地址 : http://localhost:8081/system/sysDept/treeView
2019-04-03 09:25:59 -HTTP METHOD : GET
2019-04-03 09:25:59 -CLASS_METHOD : com.bootdo.system.controller.DeptController.treeView
2019-04-03 09:25:59 -参数 : []
2019-04-03 09:25:59 -耗时 : 1
2019-04-03 09:25:59 -返回值 : system/dept/deptTree
2019-04-03 09:26:00 -请求地址 : http://localhost:8081/system/sysDept/tree
2019-04-03 09:26:00 -HTTP METHOD : GET
2019-04-03 09:26:00 -CLASS_METHOD : com.bootdo.system.controller.DeptController.tree
2019-04-03 09:26:00 -参数 : []
2019-04-03 09:26:00 -==>  Preparing: select `dept_id`,`parent_id`,`name`,`order_num`,`del_flag` from sys_dept order by dept_id desc 
2019-04-03 09:26:00 -==> Parameters: 
2019-04-03 09:26:00 -<==      Total: 3
2019-04-03 09:26:00 -耗时 : 3
2019-04-03 09:26:00 -返回值 : {"checked":false,"children":[{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"3","parentId":"1","state":{"opened":true},"text":"牙星"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"2","parentId":"1","state":{"opened":true},"text":"五九"}],"hasChildren":true,"hasParent":false,"id":"1","parentId":"0","state":{"opened":true},"text":"总公司"}
2019-04-03 09:26:12 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUser
2019-04-03 09:26:12 -HTTP METHOD : POST
2019-04-03 09:26:12 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.queryAllUser
2019-04-03 09:26:12 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@1a034609]
2019-04-03 09:26:12 -==>  Preparing: select COUNT(*) number, user_id, user_name, user_org, user_tell, user_state, elec_type usertype, elec_price userprice, elec_amount userarea, elec_cost usercost, elec_Sum usersum from elec WHERE user_Id = ? and create_time = ? and user_org = ? UNION ALL select COUNT(*) number, user_id, user_name, user_org, user_tell, user_state, heat_type usertype, heat_price userprice, heat_area userarea, heat_cost usercost, heat_Sum usersum from heat WHERE user_Id = ? and create_time = ? and user_org = ? UNION ALL select COUNT(*) number, user_id, user_name, user_org, user_tell, user_state, water_type usertype, water_price userprice, water_price userarea, water_price usercost, water_Sum usersum from water WHERE user_Id = ? and create_time = ? and user_org = ? 
2019-04-03 09:26:12 -==> Parameters: 1-0004(String), 2019-02(String), 2(String), 1-0004(String), 2019-02(String), 2(String), 1-0004(String), 2019-02(String), 2(String)
2019-04-03 09:26:12 -<==      Total: 3
2019-04-03 09:26:12 -耗时 : 161
2019-04-03 09:26:12 -返回值 : [com.bootdo.moneyList.damain.MoneyListDO@1783b8b0, com.bootdo.moneyList.damain.MoneyListDO@7af2f306, com.bootdo.moneyList.damain.MoneyListDO@564ac9fe]
2019-04-03 09:26:19 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUser
2019-04-03 09:26:19 -HTTP METHOD : POST
2019-04-03 09:26:19 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.queryAllUser
2019-04-03 09:26:19 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@1fa4731a]
2019-04-03 09:26:19 -==>  Preparing: select COUNT(*) number, user_id, user_name, user_org, user_tell, user_state, elec_type usertype, elec_price userprice, elec_amount userarea, elec_cost usercost, elec_Sum usersum from elec WHERE user_Id = ? and create_time = ? and user_org = ? UNION ALL select COUNT(*) number, user_id, user_name, user_org, user_tell, user_state, heat_type usertype, heat_price userprice, heat_area userarea, heat_cost usercost, heat_Sum usersum from heat WHERE user_Id = ? and create_time = ? and user_org = ? UNION ALL select COUNT(*) number, user_id, user_name, user_org, user_tell, user_state, water_type usertype, water_price userprice, water_price userarea, water_price usercost, water_Sum usersum from water WHERE user_Id = ? and create_time = ? and user_org = ? 
2019-04-03 09:26:19 -==> Parameters: 1-0004(String), 2019-02(String), 2(String), 1-0004(String), 2019-02(String), 2(String), 1-0004(String), 2019-02(String), 2(String)
2019-04-03 09:26:19 -<==      Total: 3
2019-04-03 09:26:19 -耗时 : 7
2019-04-03 09:26:19 -返回值 : [com.bootdo.moneyList.damain.MoneyListDO@554d5601, com.bootdo.moneyList.damain.MoneyListDO@77578d17, com.bootdo.moneyList.damain.MoneyListDO@272127d9]
2019-04-03 09:26:23 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUser
2019-04-03 09:26:23 -HTTP METHOD : POST
2019-04-03 09:26:23 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.queryAllUser
2019-04-03 09:26:23 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@2f2feab3]
2019-04-03 09:26:23 -==>  Preparing: select COUNT(*) number, user_id, user_name, user_org, user_tell, user_state, elec_type usertype, elec_price userprice, elec_amount userarea, elec_cost usercost, elec_Sum usersum from elec WHERE user_Id = ? and create_time = ? and user_org = ? UNION ALL select COUNT(*) number, user_id, user_name, user_org, user_tell, user_state, heat_type usertype, heat_price userprice, heat_area userarea, heat_cost usercost, heat_Sum usersum from heat WHERE user_Id = ? and create_time = ? and user_org = ? UNION ALL select COUNT(*) number, user_id, user_name, user_org, user_tell, user_state, water_type usertype, water_price userprice, water_price userarea, water_price usercost, water_Sum usersum from water WHERE user_Id = ? and create_time = ? and user_org = ? 
2019-04-03 09:26:23 -==> Parameters: 1-0004(String), 2019-02(String), 2(String), 1-0004(String), 2019-02(String), 2(String), 1-0004(String), 2019-02(String), 2(String)
2019-04-03 09:26:23 -<==      Total: 3
2019-04-03 09:26:23 -耗时 : 4
2019-04-03 09:26:23 -返回值 : [com.bootdo.moneyList.damain.MoneyListDO@35ac0511, com.bootdo.moneyList.damain.MoneyListDO@70a17ab5, com.bootdo.moneyList.damain.MoneyListDO@200b7c60]
2019-04-03 09:26:43 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUser
2019-04-03 09:26:43 -HTTP METHOD : POST
2019-04-03 09:26:43 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.queryAllUser
2019-04-03 09:26:43 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@19d75f98]
2019-04-03 09:26:43 -==>  Preparing: select COUNT(*) number, user_id, user_name, user_org, user_tell, user_state, elec_type usertype, elec_price userprice, elec_amount userarea, elec_cost usercost, elec_Sum usersum from elec WHERE user_Id = ? and create_time = ? and user_org = ? UNION ALL select COUNT(*) number, user_id, user_name, user_org, user_tell, user_state, heat_type usertype, heat_price userprice, heat_area userarea, heat_cost usercost, heat_Sum usersum from heat WHERE user_Id = ? and create_time = ? and user_org = ? UNION ALL select COUNT(*) number, user_id, user_name, user_org, user_tell, user_state, water_type usertype, water_price userprice, water_price userarea, water_price usercost, water_Sum usersum from water WHERE user_Id = ? and create_time = ? and user_org = ? 
2019-04-03 09:26:43 -==> Parameters: 1-(String), 2019-02(String), 2(String), 1-(String), 2019-02(String), 2(String), 1-(String), 2019-02(String), 2(String)
2019-04-03 09:26:43 -<==      Total: 3
2019-04-03 09:26:43 -耗时 : 6
2019-04-03 09:26:43 -返回值 : [com.bootdo.moneyList.damain.MoneyListDO@5bd0081d, com.bootdo.moneyList.damain.MoneyListDO@6943f07d, com.bootdo.moneyList.damain.MoneyListDO@4a4b5952]
2019-04-03 09:26:44 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUser
2019-04-03 09:26:44 -HTTP METHOD : POST
2019-04-03 09:26:44 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.queryAllUser
2019-04-03 09:26:44 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@5d3c84ce]
2019-04-03 09:26:44 -==>  Preparing: select COUNT(*) number, user_id, user_name, user_org, user_tell, user_state, elec_type usertype, elec_price userprice, elec_amount userarea, elec_cost usercost, elec_Sum usersum from elec WHERE user_Id = ? and create_time = ? and user_org = ? UNION ALL select COUNT(*) number, user_id, user_name, user_org, user_tell, user_state, heat_type usertype, heat_price userprice, heat_area userarea, heat_cost usercost, heat_Sum usersum from heat WHERE user_Id = ? and create_time = ? and user_org = ? UNION ALL select COUNT(*) number, user_id, user_name, user_org, user_tell, user_state, water_type usertype, water_price userprice, water_price userarea, water_price usercost, water_Sum usersum from water WHERE user_Id = ? and create_time = ? and user_org = ? 
2019-04-03 09:26:44 -==> Parameters: 1-(String), 2019-02(String), 2(String), 1-(String), 2019-02(String), 2(String), 1-(String), 2019-02(String), 2(String)
2019-04-03 09:26:44 -<==      Total: 3
2019-04-03 09:26:44 -耗时 : 3
2019-04-03 09:26:44 -返回值 : [com.bootdo.moneyList.damain.MoneyListDO@42d17296, com.bootdo.moneyList.damain.MoneyListDO@7b90e138, com.bootdo.moneyList.damain.MoneyListDO@42b30070]
2019-04-03 09:26:50 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUser
2019-04-03 09:26:50 -HTTP METHOD : POST
2019-04-03 09:26:50 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.queryAllUser
2019-04-03 09:26:50 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@4c827478]
2019-04-03 09:26:50 -==>  Preparing: select COUNT(*) number, user_id, user_name, user_org, user_tell, user_state, elec_type usertype, elec_price userprice, elec_amount userarea, elec_cost usercost, elec_Sum usersum from elec WHERE user_Id = ? and create_time = ? and user_org = ? UNION ALL select COUNT(*) number, user_id, user_name, user_org, user_tell, user_state, heat_type usertype, heat_price userprice, heat_area userarea, heat_cost usercost, heat_Sum usersum from heat WHERE user_Id = ? and create_time = ? and user_org = ? UNION ALL select COUNT(*) number, user_id, user_name, user_org, user_tell, user_state, water_type usertype, water_price userprice, water_price userarea, water_price usercost, water_Sum usersum from water WHERE user_Id = ? and create_time = ? and user_org = ? 
2019-04-03 09:26:50 -==> Parameters: 1-(String), 2019-02(String), 2(String), 1-(String), 2019-02(String), 2(String), 1-(String), 2019-02(String), 2(String)
2019-04-03 09:26:51 -<==      Total: 3
2019-04-03 09:26:51 -耗时 : 13
2019-04-03 09:26:51 -返回值 : [com.bootdo.moneyList.damain.MoneyListDO@246d4376, com.bootdo.moneyList.damain.MoneyListDO@6b30deb2, com.bootdo.moneyList.damain.MoneyListDO@f3d8910]
2019-04-03 09:26:52 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUser
2019-04-03 09:26:52 -HTTP METHOD : POST
2019-04-03 09:26:52 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.queryAllUser
2019-04-03 09:26:52 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@54a7ae2b]
2019-04-03 09:26:52 -==>  Preparing: select COUNT(*) number, user_id, user_name, user_org, user_tell, user_state, elec_type usertype, elec_price userprice, elec_amount userarea, elec_cost usercost, elec_Sum usersum from elec WHERE user_Id = ? and create_time = ? and user_org = ? UNION ALL select COUNT(*) number, user_id, user_name, user_org, user_tell, user_state, heat_type usertype, heat_price userprice, heat_area userarea, heat_cost usercost, heat_Sum usersum from heat WHERE user_Id = ? and create_time = ? and user_org = ? UNION ALL select COUNT(*) number, user_id, user_name, user_org, user_tell, user_state, water_type usertype, water_price userprice, water_price userarea, water_price usercost, water_Sum usersum from water WHERE user_Id = ? and create_time = ? and user_org = ? 
2019-04-03 09:26:52 -==> Parameters: 1-(String), 2019-02(String), 2(String), 1-(String), 2019-02(String), 2(String), 1-(String), 2019-02(String), 2(String)
2019-04-03 09:26:52 -<==      Total: 3
2019-04-03 09:26:52 -耗时 : 4
2019-04-03 09:26:52 -返回值 : [com.bootdo.moneyList.damain.MoneyListDO@68cc4475, com.bootdo.moneyList.damain.MoneyListDO@4ad7a259, com.bootdo.moneyList.damain.MoneyListDO@23688bde]
2019-04-03 09:27:00 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUserName
2019-04-03 09:27:00 -HTTP METHOD : POST
2019-04-03 09:27:00 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.getAllUserName
2019-04-03 09:27:00 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@3aa87f13]
2019-04-03 09:27:00 -==>  Preparing: select user_name from elec WHERE user_name like CONCAT(CONCAT('%',?,'%')) UNION ALL select user_name from heat WHERE user_name like CONCAT(CONCAT('%',?,'%')) UNION ALL select user_name from water WHERE user_name like CONCAT(CONCAT('%',?,'%')) 
2019-04-03 09:27:00 -==> Parameters: 1(String), 1(String), 1(String)
2019-04-03 09:27:00 -<==      Total: 1
2019-04-03 09:27:00 -耗时 : 96
2019-04-03 09:27:00 -返回值 : [com.bootdo.moneyList.damain.MoneyListDO@72762e4b]
2019-04-03 09:27:01 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUserName
2019-04-03 09:27:01 -HTTP METHOD : POST
2019-04-03 09:27:01 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.getAllUserName
2019-04-03 09:27:01 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@7a1e5cbe]
2019-04-03 09:27:01 -==>  Preparing: select user_name from elec WHERE user_name like CONCAT(CONCAT('%',?,'%')) UNION ALL select user_name from heat WHERE user_name like CONCAT(CONCAT('%',?,'%')) UNION ALL select user_name from water WHERE user_name like CONCAT(CONCAT('%',?,'%')) 
2019-04-03 09:27:01 -==> Parameters: 1(String), 1(String), 1(String)
2019-04-03 09:27:01 -<==      Total: 1
2019-04-03 09:27:01 -耗时 : 3
2019-04-03 09:27:01 -返回值 : [com.bootdo.moneyList.damain.MoneyListDO@5440e9ef]
2019-04-03 09:27:17 -Validating all active sessions...
2019-04-03 09:27:17 -Finished session validation.  [1] sessions were stopped.
2019-04-03 09:27:40 -WebSocketSession[1 current WS(1)-HttpStream(0)-HttpPoll(0), 29 total, 0 closed abnormally (0 connect failure, 0 send limit, 3 transport error)], stompSubProtocol[processed CONNECT(27)-CONNECTED(27)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 327], outboundChannelpool size = 0, active threads = 0, queued tasks = 0, completed tasks = 55], sockJsScheduler[pool size = 4, active threads = 1, queued tasks = 2, completed tasks = 848]
2019-04-03 09:28:17 -请求地址 : http://localhost:8081/index
2019-04-03 09:28:17 -HTTP METHOD : GET
2019-04-03 09:28:17 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2019-04-03 09:28:17 -参数 : [{}]
2019-04-03 09:28:17 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2019-04-03 09:28:17 -==> Parameters: 1(Long)
2019-04-03 09:28:17 -<==      Total: 46
2019-04-03 09:28:17 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2019-04-03 09:28:17 -==> Parameters: 138(Long)
2019-04-03 09:28:17 -<==      Total: 1
2019-04-03 09:28:17 -耗时 : 85
2019-04-03 09:28:17 -返回值 : index_v1
2019-04-03 09:28:17 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 09:28:17 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 85(Integer), com.bootdo.system.controller.LoginController.index()(String), {"menus":[{"attributes":{"icon":"fa fa-money","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-money","url":"/moneyList/moneyList"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"102","parentId":"106","text":"现金缴费"},{"attributes":{"icon":"fa fa-book","url":"/moneyLog/elecLog"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"107","parentId":"106","text":"缴费记录"}],"hasChildren":true,"hasParent":false,"id":"106","parentId":"0","text":"收费管理"},{"attributes":{"icon":"fa fa-lightbulb-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/elec/elec"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"121","parentId":"103","text":"电费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"elec/elecInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"122","parentId":"103","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"elec/elecUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"123","parentId":"103","text":"电表上传"},{"attributes":{"icon":"fa fa-cc","url":"/elec/elecPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"124","parentId":"103","text":"电价管理"}],"hasChildren":true,"hasParent":false,"id":"103","parentId":"0","text":"电费管理"},{"attributes":{"icon":"fa fa-tint","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/water/water"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"117","parentId":"105","text":"水费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"water/waterInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"118","parentId":"105","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"water/waterUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"119","parentId":"105","text":"水费生成"},{"attributes":{"icon":"fa fa-cc","url":"/water/waterPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"120","parentId":"105","text":"水价管理"}],"hasChildren":true,"hasParent":false,"id":"105","parentId":"0","text":"水费管理"},{"attributes":{"icon":"fa fa-fire","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/heat/heat"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"113","parentId":"104","text":"暖费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"heat/heatInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"114","parentId":"104","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"heat/heatUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"115","parentId":"104","text":"暖费生成"},{"attributes":{"icon":"","url":"/heat/heatPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"116","parentId":"104","text":"暖价管理"}],"hasChildren":true,"hasParent":false,"id":"104","parentId":"0","text":"暖费管理"},{"attributes":{"icon":"fa fa-vcard-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-bomb","url":"/print/print"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"149","parentId":"108","text":"票据记录"}],"hasChildren":true,"hasParent":false,"id":"108","parentId":"0","text":"票据管理"},{"attributes":{"icon":"fa fa-bar-chart","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-area-chart","url":"/chart/graph_echarts.html"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","text":"百度chart"},{"attributes":{"icon":"fa fa-sun-o","url":"charts/countDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"109","parentId":"97","text":"日统计报表"},{"attributes":{"icon":"fa fa-registered","url":"charts/countMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"110","parentId":"97","text":"月统计报表"},{"attributes":{"icon":"fa fa-money","url":"charts/countOwe"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"155","parentId":"97","text":"欠费报表图"},{"attributes":{"icon":"fa fa-support","url":"charts/countYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"111","parentId":"97","text":"年统计报表"},{"attributes":{"icon":"fa fa-tachometer","url":"charts/countRun"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"112","parentId":"97","text":"走势图报表"}],"hasChildren":true,"hasParent":false,"id":"97","parentId":"0","text":"统计管理"},{"attributes":{"icon":"fa fa-bars","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-book","url":"/common/dict"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"78","parentId":"1","text":"数据字典"},{"attributes":{"icon":"fa fa-folder-open","url":"/common/sysFile"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"71","parentId":"1","text":"文件管理"}],"h(String), 127.0.0.1(String), 2019-04-03 09:28:17.806(Timestamp)
2019-04-03 09:28:18 -请求地址 : http://localhost:8081/main
2019-04-03 09:28:18 -HTTP METHOD : GET
2019-04-03 09:28:18 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 09:28:18 -参数 : []
2019-04-03 09:28:18 -耗时 : 1
2019-04-03 09:28:18 -返回值 : main
2019-04-03 09:28:18 -<==    Updates: 1
2019-04-03 09:28:18 -请求地址 : http://localhost:8081/oa/notify/message
2019-04-03 09:28:18 -HTTP METHOD : GET
2019-04-03 09:28:18 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2019-04-03 09:28:18 -参数 : []
2019-04-03 09:28:18 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2019-04-03 09:28:18 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2019-04-03 09:28:18 -<==      Total: 0
2019-04-03 09:28:18 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2019-04-03 09:28:18 -==> Parameters: 1(Long), 0(String)
2019-04-03 09:28:18 -<==      Total: 1
2019-04-03 09:28:18 -耗时 : 24
2019-04-03 09:28:18 -返回值 : com.bootdo.common.utils.PageUtils@746a7aef
2019-04-03 09:28:18 -请求地址 : http://localhost:8081/main
2019-04-03 09:28:18 -HTTP METHOD : GET
2019-04-03 09:28:18 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 09:28:18 -参数 : []
2019-04-03 09:28:18 -耗时 : 2
2019-04-03 09:28:18 -返回值 : main
2019-04-03 09:28:20 -请求地址 : http://localhost:8081/moneyList/moneyList
2019-04-03 09:28:20 -HTTP METHOD : GET
2019-04-03 09:28:20 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.MoneyList
2019-04-03 09:28:20 -参数 : []
2019-04-03 09:28:20 -耗时 : 2
2019-04-03 09:28:20 -返回值 : /moneyList/moneyList
2019-04-03 09:28:36 -请求地址 : http://localhost:8081/system/sysDept/treeView
2019-04-03 09:28:36 -HTTP METHOD : GET
2019-04-03 09:28:36 -CLASS_METHOD : com.bootdo.system.controller.DeptController.treeView
2019-04-03 09:28:36 -参数 : []
2019-04-03 09:28:36 -耗时 : 1
2019-04-03 09:28:36 -返回值 : system/dept/deptTree
2019-04-03 09:28:36 -请求地址 : http://localhost:8081/system/sysDept/tree
2019-04-03 09:28:36 -HTTP METHOD : GET
2019-04-03 09:28:36 -CLASS_METHOD : com.bootdo.system.controller.DeptController.tree
2019-04-03 09:28:36 -参数 : []
2019-04-03 09:28:36 -==>  Preparing: select `dept_id`,`parent_id`,`name`,`order_num`,`del_flag` from sys_dept order by dept_id desc 
2019-04-03 09:28:36 -==> Parameters: 
2019-04-03 09:28:36 -<==      Total: 3
2019-04-03 09:28:36 -耗时 : 3
2019-04-03 09:28:36 -返回值 : {"checked":false,"children":[{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"3","parentId":"1","state":{"opened":true},"text":"牙星"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"2","parentId":"1","state":{"opened":true},"text":"五九"}],"hasChildren":true,"hasParent":false,"id":"1","parentId":"0","state":{"opened":true},"text":"总公司"}
2019-04-03 09:28:43 -请求地址 : http://localhost:8081/system/sysDept/treeView
2019-04-03 09:28:43 -HTTP METHOD : GET
2019-04-03 09:28:43 -CLASS_METHOD : com.bootdo.system.controller.DeptController.treeView
2019-04-03 09:28:43 -参数 : []
2019-04-03 09:28:43 -耗时 : 0
2019-04-03 09:28:43 -返回值 : system/dept/deptTree
2019-04-03 09:28:43 -请求地址 : http://localhost:8081/system/sysDept/tree
2019-04-03 09:28:43 -HTTP METHOD : GET
2019-04-03 09:28:43 -CLASS_METHOD : com.bootdo.system.controller.DeptController.tree
2019-04-03 09:28:43 -参数 : []
2019-04-03 09:28:43 -==>  Preparing: select `dept_id`,`parent_id`,`name`,`order_num`,`del_flag` from sys_dept order by dept_id desc 
2019-04-03 09:28:43 -==> Parameters: 
2019-04-03 09:28:43 -<==      Total: 3
2019-04-03 09:28:43 -耗时 : 5
2019-04-03 09:28:43 -返回值 : {"checked":false,"children":[{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"3","parentId":"1","state":{"opened":true},"text":"牙星"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"2","parentId":"1","state":{"opened":true},"text":"五九"}],"hasChildren":true,"hasParent":false,"id":"1","parentId":"0","state":{"opened":true},"text":"总公司"}
2019-04-03 09:29:08 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUser
2019-04-03 09:29:08 -HTTP METHOD : POST
2019-04-03 09:29:08 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.queryAllUser
2019-04-03 09:29:08 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@51630884]
2019-04-03 09:29:08 -==>  Preparing: select COUNT(*) number, user_id, user_name, user_org, user_tell, user_state, elec_type usertype, elec_price userprice, elec_amount userarea, elec_cost usercost, elec_Sum usersum from elec WHERE user_Id = ? and create_time = ? and user_org = ? UNION ALL select COUNT(*) number, user_id, user_name, user_org, user_tell, user_state, heat_type usertype, heat_price userprice, heat_area userarea, heat_cost usercost, heat_Sum usersum from heat WHERE user_Id = ? and create_time = ? and user_org = ? UNION ALL select COUNT(*) number, user_id, user_name, user_org, user_tell, user_state, water_type usertype, water_price userprice, water_price userarea, water_price usercost, water_Sum usersum from water WHERE user_Id = ? and create_time = ? and user_org = ? 
2019-04-03 09:29:08 -==> Parameters: 1-0004(String), 2019-02(String), 2(String), 1-0004(String), 2019-02(String), 2(String), 1-0004(String), 2019-02(String), 2(String)
2019-04-03 09:29:08 -<==      Total: 3
2019-04-03 09:29:08 -耗时 : 8
2019-04-03 09:29:08 -返回值 : [com.bootdo.moneyList.damain.MoneyListDO@1625120a, com.bootdo.moneyList.damain.MoneyListDO@3602bfcb, com.bootdo.moneyList.damain.MoneyListDO@7f6ca6a7]
2019-04-03 09:29:14 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUser
2019-04-03 09:29:14 -HTTP METHOD : POST
2019-04-03 09:29:14 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.queryAllUser
2019-04-03 09:29:14 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@b53ede7]
2019-04-03 09:29:14 -==>  Preparing: select COUNT(*) number, user_id, user_name, user_org, user_tell, user_state, elec_type usertype, elec_price userprice, elec_amount userarea, elec_cost usercost, elec_Sum usersum from elec WHERE user_Id = ? and create_time = ? and user_org = ? UNION ALL select COUNT(*) number, user_id, user_name, user_org, user_tell, user_state, heat_type usertype, heat_price userprice, heat_area userarea, heat_cost usercost, heat_Sum usersum from heat WHERE user_Id = ? and create_time = ? and user_org = ? UNION ALL select COUNT(*) number, user_id, user_name, user_org, user_tell, user_state, water_type usertype, water_price userprice, water_price userarea, water_price usercost, water_Sum usersum from water WHERE user_Id = ? and create_time = ? and user_org = ? 
2019-04-03 09:29:14 -==> Parameters: 1-0005(String), 2019-02(String), 2(String), 1-0005(String), 2019-02(String), 2(String), 1-0005(String), 2019-02(String), 2(String)
2019-04-03 09:29:14 -<==      Total: 3
2019-04-03 09:29:14 -耗时 : 5
2019-04-03 09:29:14 -返回值 : [com.bootdo.moneyList.damain.MoneyListDO@6f827205, com.bootdo.moneyList.damain.MoneyListDO@7588a562, com.bootdo.moneyList.damain.MoneyListDO@61a052e1]
2019-04-03 09:29:19 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUser
2019-04-03 09:29:19 -HTTP METHOD : POST
2019-04-03 09:29:19 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.queryAllUser
2019-04-03 09:29:19 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@1706456]
2019-04-03 09:29:19 -==>  Preparing: select COUNT(*) number, user_id, user_name, user_org, user_tell, user_state, elec_type usertype, elec_price userprice, elec_amount userarea, elec_cost usercost, elec_Sum usersum from elec WHERE user_Id = ? and create_time = ? and user_org = ? UNION ALL select COUNT(*) number, user_id, user_name, user_org, user_tell, user_state, heat_type usertype, heat_price userprice, heat_area userarea, heat_cost usercost, heat_Sum usersum from heat WHERE user_Id = ? and create_time = ? and user_org = ? UNION ALL select COUNT(*) number, user_id, user_name, user_org, user_tell, user_state, water_type usertype, water_price userprice, water_price userarea, water_price usercost, water_Sum usersum from water WHERE user_Id = ? and create_time = ? and user_org = ? 
2019-04-03 09:29:19 -==> Parameters: 1-0008(String), 2019-02(String), 2(String), 1-0008(String), 2019-02(String), 2(String), 1-0008(String), 2019-02(String), 2(String)
2019-04-03 09:29:19 -<==      Total: 3
2019-04-03 09:29:19 -耗时 : 4
2019-04-03 09:29:19 -返回值 : [com.bootdo.moneyList.damain.MoneyListDO@24890670, com.bootdo.moneyList.damain.MoneyListDO@4486d0e1, com.bootdo.moneyList.damain.MoneyListDO@46d64ef3]
2019-04-03 09:29:31 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUser
2019-04-03 09:29:31 -HTTP METHOD : POST
2019-04-03 09:29:31 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.queryAllUser
2019-04-03 09:29:31 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@7827a638]
2019-04-03 09:29:31 -==>  Preparing: select COUNT(*) number, user_id, user_name, user_org, user_tell, user_state, elec_type usertype, elec_price userprice, elec_amount userarea, elec_cost usercost, elec_Sum usersum from elec WHERE user_Id = ? and create_time = ? and user_org = ? UNION ALL select COUNT(*) number, user_id, user_name, user_org, user_tell, user_state, heat_type usertype, heat_price userprice, heat_area userarea, heat_cost usercost, heat_Sum usersum from heat WHERE user_Id = ? and create_time = ? and user_org = ? UNION ALL select COUNT(*) number, user_id, user_name, user_org, user_tell, user_state, water_type usertype, water_price userprice, water_price userarea, water_price usercost, water_Sum usersum from water WHERE user_Id = ? and create_time = ? and user_org = ? 
2019-04-03 09:29:31 -==> Parameters: 1-0004(String), 2019-02(String), 2(String), 1-0004(String), 2019-02(String), 2(String), 1-0004(String), 2019-02(String), 2(String)
2019-04-03 09:29:31 -<==      Total: 3
2019-04-03 09:29:31 -耗时 : 6
2019-04-03 09:29:31 -返回值 : [com.bootdo.moneyList.damain.MoneyListDO@7d3eaba5, com.bootdo.moneyList.damain.MoneyListDO@62646417, com.bootdo.moneyList.damain.MoneyListDO@27370805]
2019-04-03 09:30:26 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUser
2019-04-03 09:30:26 -HTTP METHOD : POST
2019-04-03 09:30:26 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.queryAllUser
2019-04-03 09:30:26 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@18abd372]
2019-04-03 09:30:26 -==>  Preparing: select COUNT(*) number, user_id, user_name, user_org, user_tell, user_state, elec_type usertype, elec_price userprice, elec_amount userarea, elec_cost usercost, elec_Sum usersum from elec WHERE user_Id = ? and create_time = ? and user_org = ? UNION ALL select COUNT(*) number, user_id, user_name, user_org, user_tell, user_state, heat_type usertype, heat_price userprice, heat_area userarea, heat_cost usercost, heat_Sum usersum from heat WHERE user_Id = ? and create_time = ? and user_org = ? UNION ALL select COUNT(*) number, user_id, user_name, user_org, user_tell, user_state, water_type usertype, water_price userprice, water_price userarea, water_price usercost, water_Sum usersum from water WHERE user_Id = ? and create_time = ? and user_org = ? 
2019-04-03 09:30:26 -==> Parameters: sdsfdsfsdfsdffdsdddd(String), 2019-02(String), 2(String), sdsfdsfsdfsdffdsdddd(String), 2019-02(String), 2(String), sdsfdsfsdfsdffdsdddd(String), 2019-02(String), 2(String)
2019-04-03 09:30:26 -<==      Total: 3
2019-04-03 09:30:26 -耗时 : 3
2019-04-03 09:30:26 -返回值 : [com.bootdo.moneyList.damain.MoneyListDO@1dadbd5c, com.bootdo.moneyList.damain.MoneyListDO@12c5554d, com.bootdo.moneyList.damain.MoneyListDO@54333424]
2019-04-03 09:33:27 -请求地址 : http://localhost:8081/index
2019-04-03 09:33:27 -HTTP METHOD : GET
2019-04-03 09:33:27 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2019-04-03 09:33:27 -参数 : [{}]
2019-04-03 09:33:27 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2019-04-03 09:33:27 -==> Parameters: 1(Long)
2019-04-03 09:33:27 -<==      Total: 46
2019-04-03 09:33:27 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2019-04-03 09:33:27 -==> Parameters: 138(Long)
2019-04-03 09:33:27 -<==      Total: 1
2019-04-03 09:33:27 -耗时 : 18
2019-04-03 09:33:27 -返回值 : index_v1
2019-04-03 09:33:27 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 09:33:27 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 18(Integer), com.bootdo.system.controller.LoginController.index()(String), {"menus":[{"attributes":{"icon":"fa fa-money","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-money","url":"/moneyList/moneyList"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"102","parentId":"106","text":"现金缴费"},{"attributes":{"icon":"fa fa-book","url":"/moneyLog/elecLog"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"107","parentId":"106","text":"缴费记录"}],"hasChildren":true,"hasParent":false,"id":"106","parentId":"0","text":"收费管理"},{"attributes":{"icon":"fa fa-lightbulb-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/elec/elec"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"121","parentId":"103","text":"电费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"elec/elecInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"122","parentId":"103","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"elec/elecUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"123","parentId":"103","text":"电表上传"},{"attributes":{"icon":"fa fa-cc","url":"/elec/elecPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"124","parentId":"103","text":"电价管理"}],"hasChildren":true,"hasParent":false,"id":"103","parentId":"0","text":"电费管理"},{"attributes":{"icon":"fa fa-tint","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/water/water"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"117","parentId":"105","text":"水费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"water/waterInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"118","parentId":"105","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"water/waterUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"119","parentId":"105","text":"水费生成"},{"attributes":{"icon":"fa fa-cc","url":"/water/waterPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"120","parentId":"105","text":"水价管理"}],"hasChildren":true,"hasParent":false,"id":"105","parentId":"0","text":"水费管理"},{"attributes":{"icon":"fa fa-fire","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/heat/heat"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"113","parentId":"104","text":"暖费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"heat/heatInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"114","parentId":"104","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"heat/heatUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"115","parentId":"104","text":"暖费生成"},{"attributes":{"icon":"","url":"/heat/heatPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"116","parentId":"104","text":"暖价管理"}],"hasChildren":true,"hasParent":false,"id":"104","parentId":"0","text":"暖费管理"},{"attributes":{"icon":"fa fa-vcard-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-bomb","url":"/print/print"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"149","parentId":"108","text":"票据记录"}],"hasChildren":true,"hasParent":false,"id":"108","parentId":"0","text":"票据管理"},{"attributes":{"icon":"fa fa-bar-chart","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-area-chart","url":"/chart/graph_echarts.html"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","text":"百度chart"},{"attributes":{"icon":"fa fa-sun-o","url":"charts/countDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"109","parentId":"97","text":"日统计报表"},{"attributes":{"icon":"fa fa-registered","url":"charts/countMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"110","parentId":"97","text":"月统计报表"},{"attributes":{"icon":"fa fa-support","url":"charts/countYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"111","parentId":"97","text":"年统计报表"},{"attributes":{"icon":"fa fa-money","url":"charts/countOwe"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"155","parentId":"97","text":"欠费报表图"},{"attributes":{"icon":"fa fa-tachometer","url":"charts/countRun"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"112","parentId":"97","text":"走势图报表"}],"hasChildren":true,"hasParent":false,"id":"97","parentId":"0","text":"统计管理"},{"attributes":{"icon":"fa fa-bars","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-book","url":"/common/dict"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"78","parentId":"1","text":"数据字典"},{"attributes":{"icon":"fa fa-folder-open","url":"/common/sysFile"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"71","parentId":"1","text":"文件管理"}],"h(String), 127.0.0.1(String), 2019-04-03 09:33:27.984(Timestamp)
2019-04-03 09:33:28 -<==    Updates: 1
2019-04-03 09:33:28 -请求地址 : http://localhost:8081/main
2019-04-03 09:33:28 -HTTP METHOD : GET
2019-04-03 09:33:28 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 09:33:28 -参数 : []
2019-04-03 09:33:28 -耗时 : 4
2019-04-03 09:33:28 -返回值 : main
2019-04-03 09:33:28 -请求地址 : http://localhost:8081/oa/notify/message
2019-04-03 09:33:28 -HTTP METHOD : GET
2019-04-03 09:33:28 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2019-04-03 09:33:28 -参数 : []
2019-04-03 09:33:28 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2019-04-03 09:33:28 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2019-04-03 09:33:28 -<==      Total: 0
2019-04-03 09:33:28 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2019-04-03 09:33:28 -==> Parameters: 1(Long), 0(String)
2019-04-03 09:33:28 -<==      Total: 1
2019-04-03 09:33:28 -耗时 : 9
2019-04-03 09:33:28 -返回值 : com.bootdo.common.utils.PageUtils@6696f443
2019-04-03 09:33:28 -请求地址 : http://localhost:8081/main
2019-04-03 09:33:28 -HTTP METHOD : GET
2019-04-03 09:33:28 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 09:33:28 -参数 : []
2019-04-03 09:33:28 -耗时 : 1
2019-04-03 09:33:28 -返回值 : main
2019-04-03 09:33:32 -请求地址 : http://localhost:8081/elec/elec
2019-04-03 09:33:32 -HTTP METHOD : GET
2019-04-03 09:33:32 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.Elec
2019-04-03 09:33:32 -参数 : []
2019-04-03 09:33:32 -耗时 : 1
2019-04-03 09:33:32 -返回值 : elec/elec/elec
2019-04-03 09:33:32 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-03 09:33:32 -HTTP METHOD : GET
2019-04-03 09:33:32 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 09:33:32 -参数 : [userType]
2019-04-03 09:33:32 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 09:33:32 -==> Parameters: userType(String)
2019-04-03 09:33:32 -<==      Total: 2
2019-04-03 09:33:32 -耗时 : 4
2019-04-03 09:33:32 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 09:33:32 -请求地址 : http://localhost:8081/elec/elec/list
2019-04-03 09:33:32 -HTTP METHOD : GET
2019-04-03 09:33:32 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.list
2019-04-03 09:33:32 -参数 : [{limit=10, offset=0, userType=, userOrg=, userId=, createTime=, queryType=1}, com.bootdo.elec.domain.ElecDO@163b4bb8]
2019-04-03 09:33:32 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec order by id asc limit ?, ? 
2019-04-03 09:33:32 -==> Parameters: 0(Integer), 10(Integer)
2019-04-03 09:33:32 -<==      Total: 10
2019-04-03 09:33:32 -==>  Preparing: select count(*) from elec 
2019-04-03 09:33:32 -==> Parameters: 
2019-04-03 09:33:32 -<==      Total: 1
2019-04-03 09:33:32 -耗时 : 6
2019-04-03 09:33:32 -返回值 : com.bootdo.common.utils.PageUtils@4e4f6159
2019-04-03 09:33:36 -请求地址 : http://localhost:8081/moneyList/moneyList
2019-04-03 09:33:36 -HTTP METHOD : GET
2019-04-03 09:33:36 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.MoneyList
2019-04-03 09:33:36 -参数 : []
2019-04-03 09:33:36 -耗时 : 0
2019-04-03 09:33:36 -返回值 : /moneyList/moneyList
2019-04-03 09:34:20 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUserName
2019-04-03 09:34:20 -HTTP METHOD : POST
2019-04-03 09:34:20 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.getAllUserName
2019-04-03 09:34:20 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@314d5a63]
2019-04-03 09:34:20 -==>  Preparing: select user_name from elec UNION ALL select user_name from heat UNION ALL select user_name from water 
2019-04-03 09:34:20 -==> Parameters: 
2019-04-03 09:34:20 -<==      Total: 46
2019-04-03 09:34:20 -耗时 : 5
2019-04-03 09:34:20 -返回值 : [com.bootdo.moneyList.damain.MoneyListDO@70000081, com.bootdo.moneyList.damain.MoneyListDO@5be955c5, com.bootdo.moneyList.damain.MoneyListDO@776ae33, com.bootdo.moneyList.damain.MoneyListDO@2f83c9c, com.bootdo.moneyList.damain.MoneyListDO@728c304a, com.bootdo.moneyList.damain.MoneyListDO@63da04a3, com.bootdo.moneyList.damain.MoneyListDO@51ef39dd, com.bootdo.moneyList.damain.MoneyListDO@1230f3a0, com.bootdo.moneyList.damain.MoneyListDO@12d8fcc, com.bootdo.moneyList.damain.MoneyListDO@32617c56, com.bootdo.moneyList.damain.MoneyListDO@1a688a16, com.bootdo.moneyList.damain.MoneyListDO@fd0d708, com.bootdo.moneyList.damain.MoneyListDO@626e6ad1, com.bootdo.moneyList.damain.MoneyListDO@5bd43906, com.bootdo.moneyList.damain.MoneyListDO@5b22050, com.bootdo.moneyList.damain.MoneyListDO@c53cf79, com.bootdo.moneyList.damain.MoneyListDO@1dfa14c0, com.bootdo.moneyList.damain.MoneyListDO@679c1270, com.bootdo.moneyList.damain.MoneyListDO@73381e73, com.bootdo.moneyList.damain.MoneyListDO@61822f6a, com.bootdo.moneyList.damain.MoneyListDO@2c936b8e, com.bootdo.moneyList.damain.MoneyListDO@2b9bf3fe, com.bootdo.moneyList.damain.MoneyListDO@1863bb78, com.bootdo.moneyList.damain.MoneyListDO@68ea3e61, com.bootdo.moneyList.damain.MoneyListDO@5f92e7e9, com.bootdo.moneyList.damain.MoneyListDO@2b62fbe6, com.bootdo.moneyList.damain.MoneyListDO@2edf3d89, com.bootdo.moneyList.damain.MoneyListDO@17ff1705, com.bootdo.moneyList.damain.MoneyListDO@5f1a17bc, com.bootdo.moneyList.damain.MoneyListDO@639b6a72, com.bootdo.moneyList.damain.MoneyListDO@347f20fd, com.bootdo.moneyList.damain.MoneyListDO@5bd74e48, com.bootdo.moneyList.damain.MoneyListDO@54ff1579, com.bootdo.moneyList.damain.MoneyListDO@6c8f3d6e, com.bootdo.moneyList.damain.MoneyListDO@21ba80ca, com.bootdo.moneyList.damain.MoneyListDO@40fe2fbb, com.bootdo.moneyList.damain.MoneyListDO@6c86be00, com.bootdo.moneyList.damain.MoneyListDO@79f78ab3, com.bootdo.moneyList.damain.MoneyListDO@cbef997, com.bootdo.moneyList.damain.MoneyListDO@3d0c8c4c, com.bootdo.moneyList.damain.MoneyListDO@64a34353, com.bootdo.moneyList.damain.MoneyListDO@2144ef66, com.bootdo.moneyList.damain.MoneyListDO@5acdc898, com.bootdo.moneyList.damain.MoneyListDO@3fa4161, com.bootdo.moneyList.damain.MoneyListDO@7dbd2396, com.bootdo.moneyList.damain.MoneyListDO@7b04dc98]
2019-04-03 09:35:40 -请求地址 : http://localhost:8081/system/sysDept/treeView
2019-04-03 09:35:40 -HTTP METHOD : GET
2019-04-03 09:35:40 -CLASS_METHOD : com.bootdo.system.controller.DeptController.treeView
2019-04-03 09:35:40 -参数 : []
2019-04-03 09:35:40 -耗时 : 0
2019-04-03 09:35:40 -返回值 : system/dept/deptTree
2019-04-03 09:35:40 -请求地址 : http://localhost:8081/system/sysDept/tree
2019-04-03 09:35:40 -HTTP METHOD : GET
2019-04-03 09:35:40 -CLASS_METHOD : com.bootdo.system.controller.DeptController.tree
2019-04-03 09:35:40 -参数 : []
2019-04-03 09:35:40 -==>  Preparing: select `dept_id`,`parent_id`,`name`,`order_num`,`del_flag` from sys_dept order by dept_id desc 
2019-04-03 09:35:40 -==> Parameters: 
2019-04-03 09:35:40 -<==      Total: 3
2019-04-03 09:35:40 -耗时 : 7
2019-04-03 09:35:40 -返回值 : {"checked":false,"children":[{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"3","parentId":"1","state":{"opened":true},"text":"牙星"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"2","parentId":"1","state":{"opened":true},"text":"五九"}],"hasChildren":true,"hasParent":false,"id":"1","parentId":"0","state":{"opened":true},"text":"总公司"}
2019-04-03 09:35:48 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUserName
2019-04-03 09:35:48 -HTTP METHOD : POST
2019-04-03 09:35:48 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.getAllUserName
2019-04-03 09:35:48 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@1e25a83c]
2019-04-03 09:35:48 -==>  Preparing: select user_name from elec UNION ALL select user_name from heat UNION ALL select user_name from water 
2019-04-03 09:35:48 -==> Parameters: 
2019-04-03 09:35:48 -<==      Total: 46
2019-04-03 09:35:48 -耗时 : 5
2019-04-03 09:35:48 -返回值 : [com.bootdo.moneyList.damain.MoneyListDO@155e0c5a, com.bootdo.moneyList.damain.MoneyListDO@23604123, com.bootdo.moneyList.damain.MoneyListDO@10b7793b, com.bootdo.moneyList.damain.MoneyListDO@5939aa21, com.bootdo.moneyList.damain.MoneyListDO@3ce04180, com.bootdo.moneyList.damain.MoneyListDO@1d286666, com.bootdo.moneyList.damain.MoneyListDO@36fdba59, com.bootdo.moneyList.damain.MoneyListDO@22016605, com.bootdo.moneyList.damain.MoneyListDO@1c53cf84, com.bootdo.moneyList.damain.MoneyListDO@4216913e, com.bootdo.moneyList.damain.MoneyListDO@1962d457, com.bootdo.moneyList.damain.MoneyListDO@307ab830, com.bootdo.moneyList.damain.MoneyListDO@32576e54, com.bootdo.moneyList.damain.MoneyListDO@44be8641, com.bootdo.moneyList.damain.MoneyListDO@4bf132ed, com.bootdo.moneyList.damain.MoneyListDO@2e2fb89b, com.bootdo.moneyList.damain.MoneyListDO@270356c4, com.bootdo.moneyList.damain.MoneyListDO@17bf50eb, com.bootdo.moneyList.damain.MoneyListDO@551b6eab, com.bootdo.moneyList.damain.MoneyListDO@6a3fff3, com.bootdo.moneyList.damain.MoneyListDO@3b2b2c95, com.bootdo.moneyList.damain.MoneyListDO@56fe0b13, com.bootdo.moneyList.damain.MoneyListDO@589e5951, com.bootdo.moneyList.damain.MoneyListDO@415b69d6, com.bootdo.moneyList.damain.MoneyListDO@23f6baec, com.bootdo.moneyList.damain.MoneyListDO@5f68b12, com.bootdo.moneyList.damain.MoneyListDO@2f081e2c, com.bootdo.moneyList.damain.MoneyListDO@3507d7c2, com.bootdo.moneyList.damain.MoneyListDO@23b02a54, com.bootdo.moneyList.damain.MoneyListDO@122f8b2b, com.bootdo.moneyList.damain.MoneyListDO@7db91e3c, com.bootdo.moneyList.damain.MoneyListDO@760b7f8e, com.bootdo.moneyList.damain.MoneyListDO@54cb0991, com.bootdo.moneyList.damain.MoneyListDO@3a53b6f0, com.bootdo.moneyList.damain.MoneyListDO@f2e0778, com.bootdo.moneyList.damain.MoneyListDO@2274fe1c, com.bootdo.moneyList.damain.MoneyListDO@2e7fec42, com.bootdo.moneyList.damain.MoneyListDO@93c3b4b, com.bootdo.moneyList.damain.MoneyListDO@7656f8d3, com.bootdo.moneyList.damain.MoneyListDO@73d77c1b, com.bootdo.moneyList.damain.MoneyListDO@221b83df, com.bootdo.moneyList.damain.MoneyListDO@4a9502b4, com.bootdo.moneyList.damain.MoneyListDO@b44fb55, com.bootdo.moneyList.damain.MoneyListDO@433b6982, com.bootdo.moneyList.damain.MoneyListDO@3dc01f41, com.bootdo.moneyList.damain.MoneyListDO@5fa22aef]
2019-04-03 09:35:48 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUserName
2019-04-03 09:35:48 -HTTP METHOD : POST
2019-04-03 09:35:48 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.getAllUserName
2019-04-03 09:35:48 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@51ebb5ab]
2019-04-03 09:35:48 -==>  Preparing: select user_name from elec UNION ALL select user_name from heat UNION ALL select user_name from water 
2019-04-03 09:35:48 -==> Parameters: 
2019-04-03 09:35:48 -<==      Total: 46
2019-04-03 09:35:48 -耗时 : 3
2019-04-03 09:35:48 -返回值 : [com.bootdo.moneyList.damain.MoneyListDO@15386d33, com.bootdo.moneyList.damain.MoneyListDO@384086f8, com.bootdo.moneyList.damain.MoneyListDO@348a2ab6, com.bootdo.moneyList.damain.MoneyListDO@5f45c078, com.bootdo.moneyList.damain.MoneyListDO@9c27f56, com.bootdo.moneyList.damain.MoneyListDO@35894fd0, com.bootdo.moneyList.damain.MoneyListDO@50b30c4d, com.bootdo.moneyList.damain.MoneyListDO@21045023, com.bootdo.moneyList.damain.MoneyListDO@3b26a39a, com.bootdo.moneyList.damain.MoneyListDO@44ae9ce1, com.bootdo.moneyList.damain.MoneyListDO@c37215d, com.bootdo.moneyList.damain.MoneyListDO@fb1edb0, com.bootdo.moneyList.damain.MoneyListDO@185a5af, com.bootdo.moneyList.damain.MoneyListDO@31fc78ea, com.bootdo.moneyList.damain.MoneyListDO@4748a41, com.bootdo.moneyList.damain.MoneyListDO@4282b12, com.bootdo.moneyList.damain.MoneyListDO@28ac5ee5, com.bootdo.moneyList.damain.MoneyListDO@7a454832, com.bootdo.moneyList.damain.MoneyListDO@5a43f3b9, com.bootdo.moneyList.damain.MoneyListDO@1f762358, com.bootdo.moneyList.damain.MoneyListDO@55671d25, com.bootdo.moneyList.damain.MoneyListDO@5b3db63, com.bootdo.moneyList.damain.MoneyListDO@40a83e57, com.bootdo.moneyList.damain.MoneyListDO@6eeaa9f9, com.bootdo.moneyList.damain.MoneyListDO@3890f34, com.bootdo.moneyList.damain.MoneyListDO@187aa4e5, com.bootdo.moneyList.damain.MoneyListDO@19a16b3b, com.bootdo.moneyList.damain.MoneyListDO@22bfac97, com.bootdo.moneyList.damain.MoneyListDO@6904e75b, com.bootdo.moneyList.damain.MoneyListDO@24142b12, com.bootdo.moneyList.damain.MoneyListDO@36fe7418, com.bootdo.moneyList.damain.MoneyListDO@697aad44, com.bootdo.moneyList.damain.MoneyListDO@278ab10f, com.bootdo.moneyList.damain.MoneyListDO@22c34257, com.bootdo.moneyList.damain.MoneyListDO@67d8aca3, com.bootdo.moneyList.damain.MoneyListDO@5bf43d91, com.bootdo.moneyList.damain.MoneyListDO@2984fd29, com.bootdo.moneyList.damain.MoneyListDO@116dd3b4, com.bootdo.moneyList.damain.MoneyListDO@3372d88e, com.bootdo.moneyList.damain.MoneyListDO@499063c4, com.bootdo.moneyList.damain.MoneyListDO@47f3b26a, com.bootdo.moneyList.damain.MoneyListDO@387c3953, com.bootdo.moneyList.damain.MoneyListDO@1def207a, com.bootdo.moneyList.damain.MoneyListDO@57abee40, com.bootdo.moneyList.damain.MoneyListDO@d11763d, com.bootdo.moneyList.damain.MoneyListDO@547e606d]
2019-04-03 09:35:54 -请求地址 : http://localhost:8081/index
2019-04-03 09:35:54 -HTTP METHOD : GET
2019-04-03 09:35:54 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2019-04-03 09:35:54 -参数 : [{}]
2019-04-03 09:35:54 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2019-04-03 09:35:54 -==> Parameters: 1(Long)
2019-04-03 09:35:54 -<==      Total: 46
2019-04-03 09:35:54 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2019-04-03 09:35:54 -==> Parameters: 138(Long)
2019-04-03 09:35:54 -<==      Total: 1
2019-04-03 09:35:54 -耗时 : 18
2019-04-03 09:35:54 -返回值 : index_v1
2019-04-03 09:35:54 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 09:35:54 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 18(Integer), com.bootdo.system.controller.LoginController.index()(String), {"menus":[{"attributes":{"icon":"fa fa-money","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-money","url":"/moneyList/moneyList"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"102","parentId":"106","text":"现金缴费"},{"attributes":{"icon":"fa fa-book","url":"/moneyLog/elecLog"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"107","parentId":"106","text":"缴费记录"}],"hasChildren":true,"hasParent":false,"id":"106","parentId":"0","text":"收费管理"},{"attributes":{"icon":"fa fa-lightbulb-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/elec/elec"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"121","parentId":"103","text":"电费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"elec/elecInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"122","parentId":"103","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"elec/elecUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"123","parentId":"103","text":"电表上传"},{"attributes":{"icon":"fa fa-cc","url":"/elec/elecPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"124","parentId":"103","text":"电价管理"}],"hasChildren":true,"hasParent":false,"id":"103","parentId":"0","text":"电费管理"},{"attributes":{"icon":"fa fa-tint","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/water/water"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"117","parentId":"105","text":"水费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"water/waterInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"118","parentId":"105","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"water/waterUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"119","parentId":"105","text":"水费生成"},{"attributes":{"icon":"fa fa-cc","url":"/water/waterPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"120","parentId":"105","text":"水价管理"}],"hasChildren":true,"hasParent":false,"id":"105","parentId":"0","text":"水费管理"},{"attributes":{"icon":"fa fa-fire","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/heat/heat"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"113","parentId":"104","text":"暖费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"heat/heatInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"114","parentId":"104","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"heat/heatUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"115","parentId":"104","text":"暖费生成"},{"attributes":{"icon":"","url":"/heat/heatPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"116","parentId":"104","text":"暖价管理"}],"hasChildren":true,"hasParent":false,"id":"104","parentId":"0","text":"暖费管理"},{"attributes":{"icon":"fa fa-vcard-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-bomb","url":"/print/print"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"149","parentId":"108","text":"票据记录"}],"hasChildren":true,"hasParent":false,"id":"108","parentId":"0","text":"票据管理"},{"attributes":{"icon":"fa fa-bar-chart","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-area-chart","url":"/chart/graph_echarts.html"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","text":"百度chart"},{"attributes":{"icon":"fa fa-sun-o","url":"charts/countDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"109","parentId":"97","text":"日统计报表"},{"attributes":{"icon":"fa fa-registered","url":"charts/countMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"110","parentId":"97","text":"月统计报表"},{"attributes":{"icon":"fa fa-support","url":"charts/countYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"111","parentId":"97","text":"年统计报表"},{"attributes":{"icon":"fa fa-money","url":"charts/countOwe"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"155","parentId":"97","text":"欠费报表图"},{"attributes":{"icon":"fa fa-tachometer","url":"charts/countRun"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"112","parentId":"97","text":"走势图报表"}],"hasChildren":true,"hasParent":false,"id":"97","parentId":"0","text":"统计管理"},{"attributes":{"icon":"fa fa-bars","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-book","url":"/common/dict"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"78","parentId":"1","text":"数据字典"},{"attributes":{"icon":"fa fa-folder-open","url":"/common/sysFile"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"71","parentId":"1","text":"文件管理"}],"h(String), 127.0.0.1(String), 2019-04-03 09:35:54.865(Timestamp)
2019-04-03 09:35:54 -<==    Updates: 1
2019-04-03 09:35:55 -请求地址 : http://localhost:8081/main
2019-04-03 09:35:55 -HTTP METHOD : GET
2019-04-03 09:35:55 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 09:35:55 -参数 : []
2019-04-03 09:35:55 -耗时 : 0
2019-04-03 09:35:55 -返回值 : main
2019-04-03 09:35:55 -请求地址 : http://localhost:8081/oa/notify/message
2019-04-03 09:35:55 -HTTP METHOD : GET
2019-04-03 09:35:55 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2019-04-03 09:35:55 -参数 : []
2019-04-03 09:35:55 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2019-04-03 09:35:55 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2019-04-03 09:35:55 -<==      Total: 0
2019-04-03 09:35:55 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2019-04-03 09:35:55 -==> Parameters: 1(Long), 0(String)
2019-04-03 09:35:55 -<==      Total: 1
2019-04-03 09:35:55 -耗时 : 5
2019-04-03 09:35:55 -返回值 : com.bootdo.common.utils.PageUtils@1490bdcd
2019-04-03 09:35:55 -请求地址 : http://localhost:8081/main
2019-04-03 09:35:55 -HTTP METHOD : GET
2019-04-03 09:35:55 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 09:35:55 -参数 : []
2019-04-03 09:35:55 -耗时 : 3
2019-04-03 09:35:55 -返回值 : main
2019-04-03 09:35:57 -==>  Preparing: select distinct m.perms from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id = ur.role_id where ur.user_id = ? 
2019-04-03 09:35:57 -==> Parameters: 1(Long)
2019-04-03 09:35:57 -<==      Total: 90
2019-04-03 09:35:57 -请求地址 : http://localhost:8081/moneyList/moneyList
2019-04-03 09:35:57 -HTTP METHOD : GET
2019-04-03 09:35:57 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.MoneyList
2019-04-03 09:35:57 -参数 : []
2019-04-03 09:35:57 -耗时 : 1
2019-04-03 09:35:57 -返回值 : /moneyList/moneyList
2019-04-03 09:39:09 -请求地址 : http://localhost:8081/system/sysDept/treeView
2019-04-03 09:39:09 -HTTP METHOD : GET
2019-04-03 09:39:09 -CLASS_METHOD : com.bootdo.system.controller.DeptController.treeView
2019-04-03 09:39:09 -参数 : []
2019-04-03 09:39:09 -耗时 : 0
2019-04-03 09:39:09 -返回值 : system/dept/deptTree
2019-04-03 09:39:09 -请求地址 : http://localhost:8081/system/sysDept/tree
2019-04-03 09:39:09 -HTTP METHOD : GET
2019-04-03 09:39:09 -CLASS_METHOD : com.bootdo.system.controller.DeptController.tree
2019-04-03 09:39:09 -参数 : []
2019-04-03 09:39:09 -==>  Preparing: select `dept_id`,`parent_id`,`name`,`order_num`,`del_flag` from sys_dept order by dept_id desc 
2019-04-03 09:39:09 -==> Parameters: 
2019-04-03 09:39:09 -<==      Total: 3
2019-04-03 09:39:09 -耗时 : 6
2019-04-03 09:39:09 -返回值 : {"checked":false,"children":[{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"3","parentId":"1","state":{"opened":true},"text":"牙星"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"2","parentId":"1","state":{"opened":true},"text":"五九"}],"hasChildren":true,"hasParent":false,"id":"1","parentId":"0","state":{"opened":true},"text":"总公司"}
2019-04-03 09:39:17 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUser
2019-04-03 09:39:17 -HTTP METHOD : POST
2019-04-03 09:39:17 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.queryAllUser
2019-04-03 09:39:17 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@49f7863a]
2019-04-03 09:39:17 -==>  Preparing: select COUNT(*) number, user_id, user_name, user_org, user_tell, user_state, elec_type usertype, elec_price userprice, elec_amount userarea, elec_cost usercost, elec_Sum usersum from elec WHERE user_Id = ? and create_time = ? and user_org = ? UNION ALL select COUNT(*) number, user_id, user_name, user_org, user_tell, user_state, heat_type usertype, heat_price userprice, heat_area userarea, heat_cost usercost, heat_Sum usersum from heat WHERE user_Id = ? and create_time = ? and user_org = ? UNION ALL select COUNT(*) number, user_id, user_name, user_org, user_tell, user_state, water_type usertype, water_price userprice, water_price userarea, water_price usercost, water_Sum usersum from water WHERE user_Id = ? and create_time = ? and user_org = ? 
2019-04-03 09:39:17 -==> Parameters: 1-0009(String), 2019-02(String), 2(String), 1-0009(String), 2019-02(String), 2(String), 1-0009(String), 2019-02(String), 2(String)
2019-04-03 09:39:17 -<==      Total: 3
2019-04-03 09:39:17 -耗时 : 6
2019-04-03 09:39:17 -返回值 : [com.bootdo.moneyList.damain.MoneyListDO@79ca3b68, com.bootdo.moneyList.damain.MoneyListDO@6a412919, com.bootdo.moneyList.damain.MoneyListDO@1f72b43d]
2019-04-03 09:39:20 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUser
2019-04-03 09:39:20 -HTTP METHOD : POST
2019-04-03 09:39:20 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.queryAllUser
2019-04-03 09:39:20 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@4d1df8ad]
2019-04-03 09:39:20 -==>  Preparing: select COUNT(*) number, user_id, user_name, user_org, user_tell, user_state, elec_type usertype, elec_price userprice, elec_amount userarea, elec_cost usercost, elec_Sum usersum from elec WHERE user_Id = ? and create_time = ? and user_org = ? UNION ALL select COUNT(*) number, user_id, user_name, user_org, user_tell, user_state, heat_type usertype, heat_price userprice, heat_area userarea, heat_cost usercost, heat_Sum usersum from heat WHERE user_Id = ? and create_time = ? and user_org = ? UNION ALL select COUNT(*) number, user_id, user_name, user_org, user_tell, user_state, water_type usertype, water_price userprice, water_price userarea, water_price usercost, water_Sum usersum from water WHERE user_Id = ? and create_time = ? and user_org = ? 
2019-04-03 09:39:20 -==> Parameters: 1-0002(String), 2019-02(String), 2(String), 1-0002(String), 2019-02(String), 2(String), 1-0002(String), 2019-02(String), 2(String)
2019-04-03 09:39:20 -<==      Total: 3
2019-04-03 09:39:20 -耗时 : 3
2019-04-03 09:39:20 -返回值 : [com.bootdo.moneyList.damain.MoneyListDO@315ed31c, com.bootdo.moneyList.damain.MoneyListDO@27b75d9, com.bootdo.moneyList.damain.MoneyListDO@20013dab]
2019-04-03 09:39:24 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUser
2019-04-03 09:39:24 -HTTP METHOD : POST
2019-04-03 09:39:24 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.queryAllUser
2019-04-03 09:39:24 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@4612a0ed]
2019-04-03 09:39:24 -==>  Preparing: select COUNT(*) number, user_id, user_name, user_org, user_tell, user_state, elec_type usertype, elec_price userprice, elec_amount userarea, elec_cost usercost, elec_Sum usersum from elec WHERE user_Id = ? and create_time = ? and user_org = ? UNION ALL select COUNT(*) number, user_id, user_name, user_org, user_tell, user_state, heat_type usertype, heat_price userprice, heat_area userarea, heat_cost usercost, heat_Sum usersum from heat WHERE user_Id = ? and create_time = ? and user_org = ? UNION ALL select COUNT(*) number, user_id, user_name, user_org, user_tell, user_state, water_type usertype, water_price userprice, water_price userarea, water_price usercost, water_Sum usersum from water WHERE user_Id = ? and create_time = ? and user_org = ? 
2019-04-03 09:39:24 -==> Parameters: 1-0006(String), 2019-02(String), 2(String), 1-0006(String), 2019-02(String), 2(String), 1-0006(String), 2019-02(String), 2(String)
2019-04-03 09:39:24 -<==      Total: 3
2019-04-03 09:39:24 -耗时 : 5
2019-04-03 09:39:24 -返回值 : [com.bootdo.moneyList.damain.MoneyListDO@31ab4070, com.bootdo.moneyList.damain.MoneyListDO@1539012c, com.bootdo.moneyList.damain.MoneyListDO@46ffceae]
2019-04-03 09:39:27 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUser
2019-04-03 09:39:27 -HTTP METHOD : POST
2019-04-03 09:39:27 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.queryAllUser
2019-04-03 09:39:27 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@2801979e]
2019-04-03 09:39:27 -==>  Preparing: select COUNT(*) number, user_id, user_name, user_org, user_tell, user_state, elec_type usertype, elec_price userprice, elec_amount userarea, elec_cost usercost, elec_Sum usersum from elec WHERE user_Id = ? and create_time = ? and user_org = ? UNION ALL select COUNT(*) number, user_id, user_name, user_org, user_tell, user_state, heat_type usertype, heat_price userprice, heat_area userarea, heat_cost usercost, heat_Sum usersum from heat WHERE user_Id = ? and create_time = ? and user_org = ? UNION ALL select COUNT(*) number, user_id, user_name, user_org, user_tell, user_state, water_type usertype, water_price userprice, water_price userarea, water_price usercost, water_Sum usersum from water WHERE user_Id = ? and create_time = ? and user_org = ? 
2019-04-03 09:39:27 -==> Parameters: 1-0006(String), 2019-02(String), 2(String), 1-0006(String), 2019-02(String), 2(String), 1-0006(String), 2019-02(String), 2(String)
2019-04-03 09:39:27 -<==      Total: 3
2019-04-03 09:39:27 -耗时 : 3
2019-04-03 09:39:27 -返回值 : [com.bootdo.moneyList.damain.MoneyListDO@561279e3, com.bootdo.moneyList.damain.MoneyListDO@48b8f12b, com.bootdo.moneyList.damain.MoneyListDO@6ca122c5]
2019-04-03 09:39:29 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUser
2019-04-03 09:39:29 -HTTP METHOD : POST
2019-04-03 09:39:29 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.queryAllUser
2019-04-03 09:39:29 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@18c371df]
2019-04-03 09:39:29 -==>  Preparing: select COUNT(*) number, user_id, user_name, user_org, user_tell, user_state, elec_type usertype, elec_price userprice, elec_amount userarea, elec_cost usercost, elec_Sum usersum from elec WHERE user_Id = ? and create_time = ? and user_org = ? UNION ALL select COUNT(*) number, user_id, user_name, user_org, user_tell, user_state, heat_type usertype, heat_price userprice, heat_area userarea, heat_cost usercost, heat_Sum usersum from heat WHERE user_Id = ? and create_time = ? and user_org = ? UNION ALL select COUNT(*) number, user_id, user_name, user_org, user_tell, user_state, water_type usertype, water_price userprice, water_price userarea, water_price usercost, water_Sum usersum from water WHERE user_Id = ? and create_time = ? and user_org = ? 
2019-04-03 09:39:29 -==> Parameters: 1-0005(String), 2019-02(String), 2(String), 1-0005(String), 2019-02(String), 2(String), 1-0005(String), 2019-02(String), 2(String)
2019-04-03 09:39:29 -<==      Total: 3
2019-04-03 09:39:29 -耗时 : 3
2019-04-03 09:39:29 -返回值 : [com.bootdo.moneyList.damain.MoneyListDO@78c84c1e, com.bootdo.moneyList.damain.MoneyListDO@68c57a1e, com.bootdo.moneyList.damain.MoneyListDO@6b8bb350]
2019-04-03 09:39:33 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUser
2019-04-03 09:39:33 -HTTP METHOD : POST
2019-04-03 09:39:33 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.queryAllUser
2019-04-03 09:39:33 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@1886e1b3]
2019-04-03 09:39:33 -==>  Preparing: select COUNT(*) number, user_id, user_name, user_org, user_tell, user_state, elec_type usertype, elec_price userprice, elec_amount userarea, elec_cost usercost, elec_Sum usersum from elec WHERE user_Id = ? and create_time = ? and user_org = ? UNION ALL select COUNT(*) number, user_id, user_name, user_org, user_tell, user_state, heat_type usertype, heat_price userprice, heat_area userarea, heat_cost usercost, heat_Sum usersum from heat WHERE user_Id = ? and create_time = ? and user_org = ? UNION ALL select COUNT(*) number, user_id, user_name, user_org, user_tell, user_state, water_type usertype, water_price userprice, water_price userarea, water_price usercost, water_Sum usersum from water WHERE user_Id = ? and create_time = ? and user_org = ? 
2019-04-03 09:39:33 -==> Parameters: 1-0004(String), 2019-02(String), 2(String), 1-0004(String), 2019-02(String), 2(String), 1-0004(String), 2019-02(String), 2(String)
2019-04-03 09:39:33 -<==      Total: 3
2019-04-03 09:39:33 -耗时 : 6
2019-04-03 09:39:33 -返回值 : [com.bootdo.moneyList.damain.MoneyListDO@19d21ad1, com.bootdo.moneyList.damain.MoneyListDO@48a508e0, com.bootdo.moneyList.damain.MoneyListDO@335de455]
2019-04-03 09:39:44 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUserName
2019-04-03 09:39:44 -HTTP METHOD : POST
2019-04-03 09:39:44 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.getAllUserName
2019-04-03 09:39:44 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@5eae4451]
2019-04-03 09:39:44 -==>  Preparing: select user_name from elec WHERE user_name like CONCAT(CONCAT('%',?,'%')) UNION ALL select user_name from heat WHERE user_name like CONCAT(CONCAT('%',?,'%')) UNION ALL select user_name from water WHERE user_name like CONCAT(CONCAT('%',?,'%')) 
2019-04-03 09:39:44 -==> Parameters: 张(String), 张(String), 张(String)
2019-04-03 09:39:44 -<==      Total: 0
2019-04-03 09:39:44 -耗时 : 4
2019-04-03 09:39:44 -返回值 : []
2019-04-03 09:39:45 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUserName
2019-04-03 09:39:45 -HTTP METHOD : POST
2019-04-03 09:39:45 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.getAllUserName
2019-04-03 09:39:45 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@2e0493a1]
2019-04-03 09:39:45 -==>  Preparing: select user_name from elec WHERE user_name like CONCAT(CONCAT('%',?,'%')) UNION ALL select user_name from heat WHERE user_name like CONCAT(CONCAT('%',?,'%')) UNION ALL select user_name from water WHERE user_name like CONCAT(CONCAT('%',?,'%')) 
2019-04-03 09:39:45 -==> Parameters: 张(String), 张(String), 张(String)
2019-04-03 09:39:45 -<==      Total: 0
2019-04-03 09:39:45 -耗时 : 6
2019-04-03 09:39:45 -返回值 : []
2019-04-03 09:39:46 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUserName
2019-04-03 09:39:46 -HTTP METHOD : POST
2019-04-03 09:39:46 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.getAllUserName
2019-04-03 09:39:46 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@20e47f72]
2019-04-03 09:39:46 -==>  Preparing: select user_name from elec WHERE user_name like CONCAT(CONCAT('%',?,'%')) UNION ALL select user_name from heat WHERE user_name like CONCAT(CONCAT('%',?,'%')) UNION ALL select user_name from water WHERE user_name like CONCAT(CONCAT('%',?,'%')) 
2019-04-03 09:39:46 -==> Parameters: 张(String), 张(String), 张(String)
2019-04-03 09:39:46 -<==      Total: 0
2019-04-03 09:39:46 -耗时 : 2
2019-04-03 09:39:46 -返回值 : []
2019-04-03 09:39:46 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUserName
2019-04-03 09:39:46 -HTTP METHOD : POST
2019-04-03 09:39:46 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.getAllUserName
2019-04-03 09:39:46 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@7819777c]
2019-04-03 09:39:46 -==>  Preparing: select user_name from elec WHERE user_name like CONCAT(CONCAT('%',?,'%')) UNION ALL select user_name from heat WHERE user_name like CONCAT(CONCAT('%',?,'%')) UNION ALL select user_name from water WHERE user_name like CONCAT(CONCAT('%',?,'%')) 
2019-04-03 09:39:46 -==> Parameters: 张(String), 张(String), 张(String)
2019-04-03 09:39:46 -<==      Total: 0
2019-04-03 09:39:46 -耗时 : 2
2019-04-03 09:39:46 -返回值 : []
2019-04-03 09:39:47 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUserName
2019-04-03 09:39:47 -HTTP METHOD : POST
2019-04-03 09:39:47 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.getAllUserName
2019-04-03 09:39:47 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@244b84ce]
2019-04-03 09:39:47 -==>  Preparing: select user_name from elec WHERE user_name like CONCAT(CONCAT('%',?,'%')) UNION ALL select user_name from heat WHERE user_name like CONCAT(CONCAT('%',?,'%')) UNION ALL select user_name from water WHERE user_name like CONCAT(CONCAT('%',?,'%')) 
2019-04-03 09:39:47 -==> Parameters: 张(String), 张(String), 张(String)
2019-04-03 09:39:47 -<==      Total: 0
2019-04-03 09:39:47 -耗时 : 5
2019-04-03 09:39:47 -返回值 : []
2019-04-03 09:39:47 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUserName
2019-04-03 09:39:47 -HTTP METHOD : POST
2019-04-03 09:39:47 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.getAllUserName
2019-04-03 09:39:47 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@1e99e3b7]
2019-04-03 09:39:47 -==>  Preparing: select user_name from elec WHERE user_name like CONCAT(CONCAT('%',?,'%')) UNION ALL select user_name from heat WHERE user_name like CONCAT(CONCAT('%',?,'%')) UNION ALL select user_name from water WHERE user_name like CONCAT(CONCAT('%',?,'%')) 
2019-04-03 09:39:47 -==> Parameters: 张(String), 张(String), 张(String)
2019-04-03 09:39:47 -<==      Total: 0
2019-04-03 09:39:47 -耗时 : 5
2019-04-03 09:39:47 -返回值 : []
2019-04-03 09:39:47 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUserName
2019-04-03 09:39:47 -HTTP METHOD : POST
2019-04-03 09:39:47 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.getAllUserName
2019-04-03 09:39:47 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@3f2e3909]
2019-04-03 09:39:47 -==>  Preparing: select user_name from elec WHERE user_name like CONCAT(CONCAT('%',?,'%')) UNION ALL select user_name from heat WHERE user_name like CONCAT(CONCAT('%',?,'%')) UNION ALL select user_name from water WHERE user_name like CONCAT(CONCAT('%',?,'%')) 
2019-04-03 09:39:47 -==> Parameters: 张(String), 张(String), 张(String)
2019-04-03 09:39:47 -<==      Total: 0
2019-04-03 09:39:47 -耗时 : 3
2019-04-03 09:39:47 -返回值 : []
2019-04-03 09:39:48 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUserName
2019-04-03 09:39:48 -HTTP METHOD : POST
2019-04-03 09:39:48 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.getAllUserName
2019-04-03 09:39:48 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@3184124]
2019-04-03 09:39:48 -==>  Preparing: select user_name from elec WHERE user_name like CONCAT(CONCAT('%',?,'%')) UNION ALL select user_name from heat WHERE user_name like CONCAT(CONCAT('%',?,'%')) UNION ALL select user_name from water WHERE user_name like CONCAT(CONCAT('%',?,'%')) 
2019-04-03 09:39:48 -==> Parameters: 张(String), 张(String), 张(String)
2019-04-03 09:39:48 -<==      Total: 0
2019-04-03 09:39:48 -耗时 : 2
2019-04-03 09:39:48 -返回值 : []
2019-04-03 09:39:48 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUserName
2019-04-03 09:39:48 -HTTP METHOD : POST
2019-04-03 09:39:48 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.getAllUserName
2019-04-03 09:39:48 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@63c20e5f]
2019-04-03 09:39:48 -==>  Preparing: select user_name from elec WHERE user_name like CONCAT(CONCAT('%',?,'%')) UNION ALL select user_name from heat WHERE user_name like CONCAT(CONCAT('%',?,'%')) UNION ALL select user_name from water WHERE user_name like CONCAT(CONCAT('%',?,'%')) 
2019-04-03 09:39:48 -==> Parameters: 张(String), 张(String), 张(String)
2019-04-03 09:39:48 -<==      Total: 0
2019-04-03 09:39:48 -耗时 : 3
2019-04-03 09:39:48 -返回值 : []
2019-04-03 09:39:49 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUserName
2019-04-03 09:39:49 -HTTP METHOD : POST
2019-04-03 09:39:49 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.getAllUserName
2019-04-03 09:39:49 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@15fdc3bd]
2019-04-03 09:39:49 -==>  Preparing: select user_name from elec WHERE user_name like CONCAT(CONCAT('%',?,'%')) UNION ALL select user_name from heat WHERE user_name like CONCAT(CONCAT('%',?,'%')) UNION ALL select user_name from water WHERE user_name like CONCAT(CONCAT('%',?,'%')) 
2019-04-03 09:39:49 -==> Parameters: 张(String), 张(String), 张(String)
2019-04-03 09:39:49 -<==      Total: 0
2019-04-03 09:39:49 -耗时 : 2
2019-04-03 09:39:49 -返回值 : []
2019-04-03 09:39:49 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUserName
2019-04-03 09:39:49 -HTTP METHOD : POST
2019-04-03 09:39:49 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.getAllUserName
2019-04-03 09:39:49 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@49da1dad]
2019-04-03 09:39:49 -==>  Preparing: select user_name from elec WHERE user_name like CONCAT(CONCAT('%',?,'%')) UNION ALL select user_name from heat WHERE user_name like CONCAT(CONCAT('%',?,'%')) UNION ALL select user_name from water WHERE user_name like CONCAT(CONCAT('%',?,'%')) 
2019-04-03 09:39:49 -==> Parameters: 张(String), 张(String), 张(String)
2019-04-03 09:39:49 -<==      Total: 0
2019-04-03 09:39:49 -耗时 : 3
2019-04-03 09:39:49 -返回值 : []
2019-04-03 09:39:49 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUserName
2019-04-03 09:39:49 -HTTP METHOD : POST
2019-04-03 09:39:49 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.getAllUserName
2019-04-03 09:39:49 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@4e3753e9]
2019-04-03 09:39:49 -==>  Preparing: select user_name from elec WHERE user_name like CONCAT(CONCAT('%',?,'%')) UNION ALL select user_name from heat WHERE user_name like CONCAT(CONCAT('%',?,'%')) UNION ALL select user_name from water WHERE user_name like CONCAT(CONCAT('%',?,'%')) 
2019-04-03 09:39:49 -==> Parameters: 张(String), 张(String), 张(String)
2019-04-03 09:39:49 -<==      Total: 0
2019-04-03 09:39:49 -耗时 : 2
2019-04-03 09:39:49 -返回值 : []
2019-04-03 09:39:50 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUserName
2019-04-03 09:39:50 -HTTP METHOD : POST
2019-04-03 09:39:50 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.getAllUserName
2019-04-03 09:39:50 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@6e6da87d]
2019-04-03 09:39:50 -==>  Preparing: select user_name from elec WHERE user_name like CONCAT(CONCAT('%',?,'%')) UNION ALL select user_name from heat WHERE user_name like CONCAT(CONCAT('%',?,'%')) UNION ALL select user_name from water WHERE user_name like CONCAT(CONCAT('%',?,'%')) 
2019-04-03 09:39:50 -==> Parameters: 张(String), 张(String), 张(String)
2019-04-03 09:39:50 -<==      Total: 0
2019-04-03 09:39:50 -耗时 : 2
2019-04-03 09:39:50 -返回值 : []
2019-04-03 09:39:50 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUserName
2019-04-03 09:39:50 -HTTP METHOD : POST
2019-04-03 09:39:50 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.getAllUserName
2019-04-03 09:39:50 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@57912fa0]
2019-04-03 09:39:50 -==>  Preparing: select user_name from elec WHERE user_name like CONCAT(CONCAT('%',?,'%')) UNION ALL select user_name from heat WHERE user_name like CONCAT(CONCAT('%',?,'%')) UNION ALL select user_name from water WHERE user_name like CONCAT(CONCAT('%',?,'%')) 
2019-04-03 09:39:50 -==> Parameters: 张(String), 张(String), 张(String)
2019-04-03 09:39:50 -<==      Total: 0
2019-04-03 09:39:50 -耗时 : 3
2019-04-03 09:39:50 -返回值 : []
2019-04-03 09:39:51 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUserName
2019-04-03 09:39:51 -HTTP METHOD : POST
2019-04-03 09:39:51 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.getAllUserName
2019-04-03 09:39:51 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@466aa57d]
2019-04-03 09:39:51 -==>  Preparing: select user_name from elec WHERE user_name like CONCAT(CONCAT('%',?,'%')) UNION ALL select user_name from heat WHERE user_name like CONCAT(CONCAT('%',?,'%')) UNION ALL select user_name from water WHERE user_name like CONCAT(CONCAT('%',?,'%')) 
2019-04-03 09:39:51 -==> Parameters: 张(String), 张(String), 张(String)
2019-04-03 09:39:51 -<==      Total: 0
2019-04-03 09:39:51 -耗时 : 3
2019-04-03 09:39:51 -返回值 : []
2019-04-03 09:39:56 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUserName
2019-04-03 09:39:56 -HTTP METHOD : POST
2019-04-03 09:39:56 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.getAllUserName
2019-04-03 09:39:56 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@6a173cae]
2019-04-03 09:39:56 -==>  Preparing: select user_name from elec WHERE user_name like CONCAT(CONCAT('%',?,'%')) UNION ALL select user_name from heat WHERE user_name like CONCAT(CONCAT('%',?,'%')) UNION ALL select user_name from water WHERE user_name like CONCAT(CONCAT('%',?,'%')) 
2019-04-03 09:39:56 -==> Parameters: 王(String), 王(String), 王(String)
2019-04-03 09:39:56 -<==      Total: 0
2019-04-03 09:39:56 -耗时 : 3
2019-04-03 09:39:56 -返回值 : []
2019-04-03 09:39:56 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUserName
2019-04-03 09:39:56 -HTTP METHOD : POST
2019-04-03 09:39:56 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.getAllUserName
2019-04-03 09:39:56 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@6626e990]
2019-04-03 09:39:56 -==>  Preparing: select user_name from elec WHERE user_name like CONCAT(CONCAT('%',?,'%')) UNION ALL select user_name from heat WHERE user_name like CONCAT(CONCAT('%',?,'%')) UNION ALL select user_name from water WHERE user_name like CONCAT(CONCAT('%',?,'%')) 
2019-04-03 09:39:56 -==> Parameters: 王(String), 王(String), 王(String)
2019-04-03 09:39:56 -<==      Total: 0
2019-04-03 09:39:56 -耗时 : 3
2019-04-03 09:39:56 -返回值 : []
2019-04-03 09:39:57 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUserName
2019-04-03 09:39:57 -HTTP METHOD : POST
2019-04-03 09:39:57 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.getAllUserName
2019-04-03 09:39:57 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@33040d1a]
2019-04-03 09:39:57 -==>  Preparing: select user_name from elec WHERE user_name like CONCAT(CONCAT('%',?,'%')) UNION ALL select user_name from heat WHERE user_name like CONCAT(CONCAT('%',?,'%')) UNION ALL select user_name from water WHERE user_name like CONCAT(CONCAT('%',?,'%')) 
2019-04-03 09:39:57 -==> Parameters: 王(String), 王(String), 王(String)
2019-04-03 09:39:57 -<==      Total: 0
2019-04-03 09:39:57 -耗时 : 3
2019-04-03 09:39:57 -返回值 : []
2019-04-03 09:39:57 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUserName
2019-04-03 09:39:57 -HTTP METHOD : POST
2019-04-03 09:39:57 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.getAllUserName
2019-04-03 09:39:57 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@3a7dde6a]
2019-04-03 09:39:57 -==>  Preparing: select user_name from elec WHERE user_name like CONCAT(CONCAT('%',?,'%')) UNION ALL select user_name from heat WHERE user_name like CONCAT(CONCAT('%',?,'%')) UNION ALL select user_name from water WHERE user_name like CONCAT(CONCAT('%',?,'%')) 
2019-04-03 09:39:57 -==> Parameters: 王(String), 王(String), 王(String)
2019-04-03 09:39:57 -<==      Total: 0
2019-04-03 09:39:57 -耗时 : 2
2019-04-03 09:39:57 -返回值 : []
2019-04-03 09:39:58 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUserName
2019-04-03 09:39:58 -HTTP METHOD : POST
2019-04-03 09:39:58 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.getAllUserName
2019-04-03 09:39:58 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@3ee9fad9]
2019-04-03 09:39:58 -==>  Preparing: select user_name from elec WHERE user_name like CONCAT(CONCAT('%',?,'%')) UNION ALL select user_name from heat WHERE user_name like CONCAT(CONCAT('%',?,'%')) UNION ALL select user_name from water WHERE user_name like CONCAT(CONCAT('%',?,'%')) 
2019-04-03 09:39:58 -==> Parameters: 王(String), 王(String), 王(String)
2019-04-03 09:39:58 -<==      Total: 0
2019-04-03 09:39:58 -耗时 : 3
2019-04-03 09:39:58 -返回值 : []
2019-04-03 09:39:58 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUserName
2019-04-03 09:39:58 -HTTP METHOD : POST
2019-04-03 09:39:58 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.getAllUserName
2019-04-03 09:39:58 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@45144514]
2019-04-03 09:39:58 -==>  Preparing: select user_name from elec WHERE user_name like CONCAT(CONCAT('%',?,'%')) UNION ALL select user_name from heat WHERE user_name like CONCAT(CONCAT('%',?,'%')) UNION ALL select user_name from water WHERE user_name like CONCAT(CONCAT('%',?,'%')) 
2019-04-03 09:39:58 -==> Parameters: 王(String), 王(String), 王(String)
2019-04-03 09:39:58 -<==      Total: 0
2019-04-03 09:39:58 -耗时 : 3
2019-04-03 09:39:58 -返回值 : []
2019-04-03 09:39:59 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUserName
2019-04-03 09:39:59 -HTTP METHOD : POST
2019-04-03 09:39:59 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.getAllUserName
2019-04-03 09:39:59 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@73aa9022]
2019-04-03 09:39:59 -==>  Preparing: select user_name from elec WHERE user_name like CONCAT(CONCAT('%',?,'%')) UNION ALL select user_name from heat WHERE user_name like CONCAT(CONCAT('%',?,'%')) UNION ALL select user_name from water WHERE user_name like CONCAT(CONCAT('%',?,'%')) 
2019-04-03 09:39:59 -==> Parameters: 王(String), 王(String), 王(String)
2019-04-03 09:39:59 -<==      Total: 0
2019-04-03 09:39:59 -耗时 : 3
2019-04-03 09:39:59 -返回值 : []
2019-04-03 09:39:59 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUserName
2019-04-03 09:39:59 -HTTP METHOD : POST
2019-04-03 09:39:59 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.getAllUserName
2019-04-03 09:39:59 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@3e6516a2]
2019-04-03 09:39:59 -==>  Preparing: select user_name from elec WHERE user_name like CONCAT(CONCAT('%',?,'%')) UNION ALL select user_name from heat WHERE user_name like CONCAT(CONCAT('%',?,'%')) UNION ALL select user_name from water WHERE user_name like CONCAT(CONCAT('%',?,'%')) 
2019-04-03 09:39:59 -==> Parameters: 王(String), 王(String), 王(String)
2019-04-03 09:39:59 -<==      Total: 0
2019-04-03 09:39:59 -耗时 : 3
2019-04-03 09:39:59 -返回值 : []
2019-04-03 09:40:00 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUserName
2019-04-03 09:40:00 -HTTP METHOD : POST
2019-04-03 09:40:00 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.getAllUserName
2019-04-03 09:40:00 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@77646466]
2019-04-03 09:40:00 -==>  Preparing: select user_name from elec WHERE user_name like CONCAT(CONCAT('%',?,'%')) UNION ALL select user_name from heat WHERE user_name like CONCAT(CONCAT('%',?,'%')) UNION ALL select user_name from water WHERE user_name like CONCAT(CONCAT('%',?,'%')) 
2019-04-03 09:40:00 -==> Parameters: 王(String), 王(String), 王(String)
2019-04-03 09:40:00 -<==      Total: 0
2019-04-03 09:40:00 -耗时 : 2
2019-04-03 09:40:00 -返回值 : []
2019-04-03 09:40:00 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUserName
2019-04-03 09:40:00 -HTTP METHOD : POST
2019-04-03 09:40:00 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.getAllUserName
2019-04-03 09:40:00 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@5201729]
2019-04-03 09:40:00 -==>  Preparing: select user_name from elec WHERE user_name like CONCAT(CONCAT('%',?,'%')) UNION ALL select user_name from heat WHERE user_name like CONCAT(CONCAT('%',?,'%')) UNION ALL select user_name from water WHERE user_name like CONCAT(CONCAT('%',?,'%')) 
2019-04-03 09:40:00 -==> Parameters: 王(String), 王(String), 王(String)
2019-04-03 09:40:00 -<==      Total: 0
2019-04-03 09:40:00 -耗时 : 2
2019-04-03 09:40:00 -返回值 : []
2019-04-03 09:40:01 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUserName
2019-04-03 09:40:01 -HTTP METHOD : POST
2019-04-03 09:40:01 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.getAllUserName
2019-04-03 09:40:01 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@7eb7978]
2019-04-03 09:40:01 -==>  Preparing: select user_name from elec WHERE user_name like CONCAT(CONCAT('%',?,'%')) UNION ALL select user_name from heat WHERE user_name like CONCAT(CONCAT('%',?,'%')) UNION ALL select user_name from water WHERE user_name like CONCAT(CONCAT('%',?,'%')) 
2019-04-03 09:40:01 -==> Parameters: 王(String), 王(String), 王(String)
2019-04-03 09:40:01 -<==      Total: 0
2019-04-03 09:40:01 -耗时 : 3
2019-04-03 09:40:01 -返回值 : []
2019-04-03 09:40:01 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUserName
2019-04-03 09:40:01 -HTTP METHOD : POST
2019-04-03 09:40:01 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.getAllUserName
2019-04-03 09:40:01 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@282e8c54]
2019-04-03 09:40:01 -==>  Preparing: select user_name from elec WHERE user_name like CONCAT(CONCAT('%',?,'%')) UNION ALL select user_name from heat WHERE user_name like CONCAT(CONCAT('%',?,'%')) UNION ALL select user_name from water WHERE user_name like CONCAT(CONCAT('%',?,'%')) 
2019-04-03 09:40:01 -==> Parameters: 王(String), 王(String), 王(String)
2019-04-03 09:40:01 -<==      Total: 0
2019-04-03 09:40:01 -耗时 : 3
2019-04-03 09:40:01 -返回值 : []
2019-04-03 09:40:01 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUserName
2019-04-03 09:40:01 -HTTP METHOD : POST
2019-04-03 09:40:01 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.getAllUserName
2019-04-03 09:40:01 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@14b096a2]
2019-04-03 09:40:01 -==>  Preparing: select user_name from elec WHERE user_name like CONCAT(CONCAT('%',?,'%')) UNION ALL select user_name from heat WHERE user_name like CONCAT(CONCAT('%',?,'%')) UNION ALL select user_name from water WHERE user_name like CONCAT(CONCAT('%',?,'%')) 
2019-04-03 09:40:01 -==> Parameters: 王(String), 王(String), 王(String)
2019-04-03 09:40:01 -<==      Total: 0
2019-04-03 09:40:01 -耗时 : 2
2019-04-03 09:40:01 -返回值 : []
2019-04-03 09:45:38 -Starting BootdoApplication on ZJZL-20180906VX with PID 11372 (D:\eclipse2018-work\bootdo\target\classes started by Administrator in D:\eclipse2018-work\bootdo)
2019-04-03 09:45:38 -Running with Spring Boot v2.0.3.RELEASE, Spring v5.0.7.RELEASE
2019-04-03 09:45:38 -The following profiles are active: dev
2019-04-03 09:45:39 -Refreshing org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@4fbda97b: startup date [Wed Apr 03 09:45:39 CST 2019]; root of context hierarchy
2019-04-03 09:45:44 -Multiple Spring Data modules found, entering strict repository configuration mode!
2019-04-03 09:45:50 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$82c1065] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-03 09:45:50 -Bean 'shiroConfig' of type [com.bootdo.system.config.ShiroConfig$$EnhancerBySpringCGLIB$$fa853f0c] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-03 09:45:53 -Bean 'userRealm' of type [com.bootdo.system.shiro.UserRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-03 09:45:54 -Bean 'cacheManager2' of type [net.sf.ehcache.CacheManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-03 09:45:54 -Bean 'ehCacheManager' of type [org.apache.shiro.cache.ehcache.EhCacheManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-03 09:45:54 -Cache with name 'com.bootdo.system.shiro.UserRealm.authorizationCache' does not yet exist.  Creating now.
2019-04-03 09:45:54 -Added EhCache named [com.bootdo.system.shiro.UserRealm.authorizationCache]
2019-04-03 09:45:54 -Bean 'sessionDAO' of type [org.apache.shiro.session.mgt.eis.MemorySessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-03 09:45:54 -Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-03 09:45:54 -Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-03 09:45:55 -Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-03 09:45:56 -Tomcat initialized with port(s): 8081 (http)
2019-04-03 09:45:56 -Initializing ProtocolHandler ["http-nio-8081"]
2019-04-03 09:45:56 -Starting service [Tomcat]
2019-04-03 09:45:56 -Starting Servlet Engine: Apache Tomcat/8.5.31
2019-04-03 09:45:57 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [C:\Program Files\Java\jre1.8.0_131\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:/Program Files/Java/jre1.8.0_131/bin/server;C:/Program Files/Java/jre1.8.0_131/bin;C:/Program Files/Java/jre1.8.0_131/lib/amd64;C:\ProgramData\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Windows\System32\OpenSSH\;D:\pbb\pycSafefile\x64;D:\pbb\PBB Reader\x64;C:\Program Files\MySQL\MySQL Utilities 1.6\;D:\MAVEN\apache-maven-3.6.0\bin;D:\GIT\Git\cmd;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;;C:\Users\Administrator\Desktop;;.]
2019-04-03 09:45:58 -Initializing Spring embedded WebApplicationContext
2019-04-03 09:45:58 -Root WebApplicationContext: initialization completed in 18898 ms
2019-04-03 09:46:01 -Mapping filter: 'characterEncodingFilter' to: [/*]
2019-04-03 09:46:01 -Mapping filter: 'hiddenHttpMethodFilter' to: [/*]
2019-04-03 09:46:01 -Mapping filter: 'httpPutFormContentFilter' to: [/*]
2019-04-03 09:46:01 -Mapping filter: 'requestContextFilter' to: [/*]
2019-04-03 09:46:01 -Filter xssFilter was not registered (disabled)
2019-04-03 09:46:01 -Mapping filter: 'webStatFilter' to urls: [/*]
2019-04-03 09:46:01 -Mapping filter: 'shiroFilterFactoryBean' to: [/*]
2019-04-03 09:46:01 -Servlet statViewServlet mapped to [/druid/*]
2019-04-03 09:46:01 -Servlet dispatcherServlet mapped to [/]
2019-04-03 09:46:07 -ApplicationContext registed-->org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@4fbda97b: startup date [Wed Apr 03 09:45:39 CST 2019]; root of context hierarchy
2019-04-03 09:46:09 -Using default implementation for ThreadExecutor
2019-04-03 09:46:10 -Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2019-04-03 09:46:10 -Quartz Scheduler v.2.2.1 created.
2019-04-03 09:46:10 -RAMJobStore initialized.
2019-04-03 09:46:10 -Scheduler meta-data: Quartz Scheduler (v2.2.1) 'schedulerFactoryBean' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2019-04-03 09:46:10 -Quartz scheduler 'schedulerFactoryBean' initialized from an externally provided properties instance.
2019-04-03 09:46:10 -Quartz scheduler version: 2.2.1
2019-04-03 09:46:10 -JobFactory set to: com.bootdo.common.quartz.factory.JobFactory@684a802a
2019-04-03 09:46:15 -Initializing ExecutorService  'clientInboundChannelExecutor'
2019-04-03 09:46:15 -Initializing ExecutorService  'clientOutboundChannelExecutor'
2019-04-03 09:46:19 -Mapped "{[/charts/countDD/exportCountDD],methods=[GET]}" onto public void com.bootdo.charts.controller.countDDController.exprotElecLog(com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-03 09:46:19 -Mapped "{[/charts/countDD/tableDD],methods=[POST]}" onto public java.lang.String com.bootdo.charts.controller.countDDController.tableDD()
2019-04-03 09:46:19 -Mapped "{[/charts/countDD/getCountDD],methods=[POST]}" onto public com.bootdo.charts.vo.CountDayVo com.bootdo.charts.controller.countDDController.getCountD(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo,javax.servlet.http.HttpServletRequest)
2019-04-03 09:46:19 -Mapped "{[/charts/countDD],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.countDDController.countDD()
2019-04-03 09:46:19 -Mapped "{[/charts/countMM/exportCountMM],methods=[GET]}" onto public void com.bootdo.charts.controller.countMMController.exprotElecLog(com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-03 09:46:19 -Mapped "{[/charts/countMM],methods=[GET]}" onto java.lang.String com.bootdo.charts.controller.countMMController.countMM()
2019-04-03 09:46:19 -Mapped "{[/charts/countMM/getCountMM],methods=[POST]}" onto public void com.bootdo.charts.controller.countMMController.getCountMM(org.springframework.ui.Model,com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo,javax.servlet.http.HttpServletRequest)
2019-04-03 09:46:19 -Mapped "{[/charts/countOwe/getCountOwe],methods=[POST]}" onto public com.bootdo.charts.vo.CountOweVo com.bootdo.charts.controller.countOweController.getCountD(com.bootdo.elec.vo.ElecVo,com.bootdo.water.vo.WaterVo,com.bootdo.heat.vo.HeatVo,javax.servlet.http.HttpServletRequest)
2019-04-03 09:46:19 -Mapped "{[/charts/countOwe],methods=[GET]}" onto java.lang.String com.bootdo.charts.controller.countOweController.countOwe()
2019-04-03 09:46:19 -Mapped "{[/charts/countRun/exportCountRun],methods=[GET]}" onto public void com.bootdo.charts.controller.countRunController.exprotElecLog(com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-03 09:46:19 -Mapped "{[/charts/countRun/getCountRun],methods=[POST]}" onto public int com.bootdo.charts.controller.countRunController.getCountD(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo)
2019-04-03 09:46:19 -Mapped "{[/charts/countRun],methods=[GET]}" onto java.lang.String com.bootdo.charts.controller.countRunController.countRun()
2019-04-03 09:46:19 -Mapped "{[/charts/countYY/exportCountYY],methods=[GET]}" onto public void com.bootdo.charts.controller.countYYController.exprotElecLog(com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-03 09:46:19 -Mapped "{[/charts/countYY/getCountYY],methods=[POST]}" onto public int com.bootdo.charts.controller.countYYController.getCountD(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo)
2019-04-03 09:46:19 -Mapped "{[/charts/countYY],methods=[GET]}" onto java.lang.String com.bootdo.charts.controller.countYYController.countYY()
2019-04-03 09:46:19 -Mapped "{[/common/dict/add],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.add()
2019-04-03 09:46:19 -Mapped "{[/common/dict/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.remove(java.lang.Long)
2019-04-03 09:46:19 -Mapped "{[/common/dict/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.remove(java.lang.Long[])
2019-04-03 09:46:19 -Mapped "{[/common/dict/update]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.update(com.bootdo.common.domain.DictDO)
2019-04-03 09:46:19 -Mapped "{[/common/dict/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.common.controller.DictController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 09:46:19 -Mapped "{[/common/dict/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.save(com.bootdo.common.domain.DictDO)
2019-04-03 09:46:19 -Mapped "{[/common/dict/type],methods=[GET]}" onto public java.util.List<com.bootdo.common.domain.DictDO> com.bootdo.common.controller.DictController.listType()
2019-04-03 09:46:19 -Mapped "{[/common/dict/add/{type}/{description}],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.addD(org.springframework.ui.Model,java.lang.String,java.lang.String)
2019-04-03 09:46:19 -Mapped "{[/common/dict/list/{type}],methods=[GET]}" onto public java.util.List<com.bootdo.common.domain.DictDO> com.bootdo.common.controller.DictController.listByType(java.lang.String)
2019-04-03 09:46:19 -Mapped "{[/common/dict/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 09:46:19 -Mapped "{[/common/dict],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.dict()
2019-04-03 09:46:19 -Mapped "{[/common/sysFile/add],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.FileController.add()
2019-04-03 09:46:19 -Mapped "{[/common/sysFile/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.remove(java.lang.Long,javax.servlet.http.HttpServletRequest)
2019-04-03 09:46:19 -Mapped "{[/common/sysFile/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.remove(java.lang.Long[])
2019-04-03 09:46:19 -Mapped "{[/common/sysFile/update]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.update(com.bootdo.common.domain.FileDO)
2019-04-03 09:46:19 -Mapped "{[/common/sysFile/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.common.controller.FileController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 09:46:19 -Mapped "{[/common/sysFile/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.save(com.bootdo.common.domain.FileDO)
2019-04-03 09:46:19 -Mapped "{[/common/sysFile/info/{id}]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.info(java.lang.Long)
2019-04-03 09:46:19 -Mapped "{[/common/sysFile],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.FileController.sysFile(org.springframework.ui.Model)
2019-04-03 09:46:19 -Mapped "{[/common/sysFile/edit],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.FileController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 09:46:19 -Mapped "{[/common/sysFile/upload],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.FileController.upload(org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpServletRequest)
2019-04-03 09:46:19 -Mapped "{[/common/generator/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.GeneratorController.update(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 09:46:19 -Mapped "{[/common/generator/list],methods=[GET]}" onto java.util.List<java.util.Map<java.lang.String, java.lang.Object>> com.bootdo.common.controller.GeneratorController.list()
2019-04-03 09:46:19 -Mapped "{[/common/generator/code/{tableName}]}" onto public void com.bootdo.common.controller.GeneratorController.code(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String) throws java.io.IOException
2019-04-03 09:46:19 -Mapped "{[/common/generator],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.GeneratorController.generator()
2019-04-03 09:46:19 -Mapped "{[/common/generator/edit],methods=[GET]}" onto public java.lang.String com.bootdo.common.controller.GeneratorController.edit(org.springframework.ui.Model)
2019-04-03 09:46:19 -Mapped "{[/common/generator/batchCode]}" onto public void com.bootdo.common.controller.GeneratorController.batchCode(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String) throws java.io.IOException
2019-04-03 09:46:19 -Mapped "{[/common/job/add],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.JobController.add()
2019-04-03 09:46:19 -Mapped "{[/common/job/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.remove(java.lang.Long)
2019-04-03 09:46:19 -Mapped "{[/common/job/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.remove(java.lang.Long[])
2019-04-03 09:46:19 -Mapped "{[/common/job/update],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.update(com.bootdo.common.domain.TaskDO)
2019-04-03 09:46:19 -Mapped "{[/common/job/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.common.controller.JobController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 09:46:19 -Mapped "{[/common/job/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.save(com.bootdo.common.domain.TaskDO)
2019-04-03 09:46:19 -Mapped "{[/common/job/info/{id}]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.info(java.lang.Long)
2019-04-03 09:46:19 -Mapped "{[/common/job/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.JobController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 09:46:19 -Mapped "{[/common/job],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.JobController.taskScheduleJob()
2019-04-03 09:46:19 -Mapped "{[/common/job/changeJobStatus],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.changeJobStatus(java.lang.Long,java.lang.String)
2019-04-03 09:46:19 -Mapped "{[/common/log/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.LogController.remove(java.lang.Long)
2019-04-03 09:46:19 -Mapped "{[/common/log],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.LogController.log()
2019-04-03 09:46:19 -Mapped "{[/common/log/list],methods=[GET]}" onto com.bootdo.common.domain.PageDO<com.bootdo.common.domain.LogDO> com.bootdo.common.controller.LogController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 09:46:19 -Mapped "{[/common/log/batchRemove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.LogController.batchRemove(java.lang.Long[])
2019-04-03 09:46:19 -Mapped "{[/common/long],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.LongController.Long()
2019-04-03 09:46:19 -Mapped "{[/common/time],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.TimeController.Time()
2019-04-03 09:46:19 -Mapped "{[/error]}" onto public com.bootdo.common.utils.R com.bootdo.common.exception.MainsiteErrorController.handleError(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-04-03 09:46:19 -Mapped "{[/error],produces=[text/html]}" onto public org.springframework.web.servlet.ModelAndView com.bootdo.common.exception.MainsiteErrorController.errorHtml(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-04-03 09:46:19 -Mapped "{[/elec/elec/add],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecController.add()
2019-04-03 09:46:19 -Mapped "{[/elec/elec/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.remove(java.lang.Long)
2019-04-03 09:46:19 -Mapped "{[/elec/elec/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.remove(java.lang.Long[])
2019-04-03 09:46:19 -Mapped "{[/elec/elec/update],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.update(com.bootdo.elec.domain.ElecDO)
2019-04-03 09:46:19 -Mapped "{[/elec/elec/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.elec.controller.ElecController.list(java.util.Map<java.lang.String, java.lang.Object>,com.bootdo.elec.domain.ElecDO)
2019-04-03 09:46:19 -Mapped "{[/elec/elec/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.save(com.bootdo.elec.domain.ElecDO)
2019-04-03 09:46:19 -Mapped "{[/elec/elec/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 09:46:19 -Mapped "{[/elec/elec/exprotElec],methods=[GET]}" onto public void com.bootdo.elec.controller.ElecController.exprotExcel(com.bootdo.elec.vo.ElecVo,javax.servlet.http.HttpServletResponse)
2019-04-03 09:46:19 -Mapped "{[/elec/elec],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecController.Elec()
2019-04-03 09:46:19 -Mapped "{[/elec/elecInto/importElecIntoExcel],methods=[POST]}" onto public java.util.Map<java.lang.String, java.lang.Object> com.bootdo.elec.controller.ElecIntoController.importElecIntoExcel(org.springframework.web.multipart.MultipartFile,com.bootdo.elec.vo.ElecVo) throws java.lang.Exception
2019-04-03 09:46:19 -Mapped "{[/elec/elecInto/exprotElecIntoExcel],methods=[GET]}" onto public void com.bootdo.elec.controller.ElecIntoController.exprotExcel(com.bootdo.elec.vo.ElecVo,javax.servlet.http.HttpServletResponse)
2019-04-03 09:46:19 -Mapped "{[/elec/elecInto],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecIntoController.ElecInto()
2019-04-03 09:46:19 -Mapped "{[/elec/elecPrice/add],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecPriceController.add()
2019-04-03 09:46:19 -Mapped "{[/elec/elecPrice/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecPriceController.remove(java.lang.Long)
2019-04-03 09:46:19 -Mapped "{[/elec/elecPrice/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecPriceController.remove(java.lang.Long[])
2019-04-03 09:46:19 -Mapped "{[/elec/elecPrice/update]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecPriceController.update(com.bootdo.elec.domain.ElecPriceDO)
2019-04-03 09:46:19 -Mapped "{[/elec/elecPrice/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.elec.controller.ElecPriceController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 09:46:19 -Mapped "{[/elec/elecPrice/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecPriceController.save(com.bootdo.elec.domain.ElecPriceDO,com.bootdo.elec.domain.ElecDO)
2019-04-03 09:46:19 -Mapped "{[/elec/elecPrice/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecPriceController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 09:46:19 -Mapped "{[/elec/elecPrice],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecPriceController.ElecPrice()
2019-04-03 09:46:19 -Mapped "{[/elec/elecUpLoad],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecUpLoadController.Elec()
2019-04-03 09:46:19 -Mapped "{[/elec/elecUpLoad/importElecExcel],methods=[POST]}" onto public java.util.Map<java.lang.String, java.lang.Object> com.bootdo.elec.controller.ElecUpLoadController.importElecExcel(org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpServletRequest) throws java.lang.Exception
2019-04-03 09:46:19 -Mapped "{[/heat/heat/add],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatController.add()
2019-04-03 09:46:19 -Mapped "{[/heat/heat/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatController.remove(java.lang.Integer)
2019-04-03 09:46:19 -Mapped "{[/heat/heat/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatController.remove(java.lang.Integer[])
2019-04-03 09:46:19 -Mapped "{[/heat/heat/update]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatController.update(com.bootdo.heat.domain.HeatDO)
2019-04-03 09:46:19 -Mapped "{[/heat/heat/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.heat.controller.HeatController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 09:46:19 -Mapped "{[/heat/heat/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatController.save(com.bootdo.heat.domain.HeatDO)
2019-04-03 09:46:19 -Mapped "{[/heat/heat/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatController.edit(java.lang.Integer,org.springframework.ui.Model)
2019-04-03 09:46:19 -Mapped "{[/heat/heat/exprotHeat],methods=[GET]}" onto public void com.bootdo.heat.controller.HeatController.exprotExcel(com.bootdo.heat.vo.HeatVo,javax.servlet.http.HttpServletResponse)
2019-04-03 09:46:19 -Mapped "{[/heat/heat],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatController.Heat()
2019-04-03 09:46:19 -Mapped "{[/heat/heatInto/exprotHeatIntoExcel],methods=[GET]}" onto public void com.bootdo.heat.controller.HeatIntoController.exprotExcel(com.bootdo.heat.vo.HeatVo,javax.servlet.http.HttpServletResponse)
2019-04-03 09:46:19 -Mapped "{[/heat/heatInto],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatIntoController.HeatInto()
2019-04-03 09:46:19 -Mapped "{[/heat/heatPrice/add],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatPriceController.add()
2019-04-03 09:46:19 -Mapped "{[/heat/heatPrice/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatPriceController.remove(java.lang.Long)
2019-04-03 09:46:19 -Mapped "{[/heat/heatPrice/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatPriceController.remove(java.lang.Long[])
2019-04-03 09:46:19 -Mapped "{[/heat/heatPrice/update]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatPriceController.update(com.bootdo.heat.domain.HeatPriceDO)
2019-04-03 09:46:19 -Mapped "{[/heat/heatPrice/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.heat.controller.HeatPriceController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 09:46:19 -Mapped "{[/heat/heatPrice/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatPriceController.save(com.bootdo.heat.domain.HeatPriceDO)
2019-04-03 09:46:19 -Mapped "{[/heat/heatPrice/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatPriceController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 09:46:19 -Mapped "{[/heat/heatPrice],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatPriceController.HeatPrice()
2019-04-03 09:46:19 -Mapped "{[/heat/heatUpLoad/exprotHeatExcel],methods=[GET]}" onto public void com.bootdo.heat.controller.HeatUpLoadController.exprotHeatExcel(com.bootdo.heat.vo.HeatVo,javax.servlet.http.HttpServletResponse)
2019-04-03 09:46:19 -Mapped "{[/heat/heatUpLoad/createHeatExcel],methods=[POST]}" onto public java.lang.String com.bootdo.heat.controller.HeatUpLoadController.createHeatExcel(com.bootdo.heat.domain.HeatDO) throws java.lang.Exception
2019-04-03 09:46:19 -Mapped "{[/heat/heatUpLoad],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatUpLoadController.HeatUpLoad()
2019-04-03 09:46:19 -Mapped "{[/heat/heatUpLoad/importHeatExcel]}" onto public java.lang.String com.bootdo.heat.controller.HeatUpLoadController.importHeatExcel(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)
2019-04-03 09:46:19 -Mapped "{[/moneyList/moneyList],methods=[GET]}" onto java.lang.String com.bootdo.moneyList.controller.MoneyListController.MoneyList()
2019-04-03 09:46:19 -Mapped "{[/moneyList/moneyList/queryAllUser],methods=[POST]}" onto public java.util.List<com.bootdo.moneyList.damain.MoneyListDO> com.bootdo.moneyList.controller.MoneyListController.queryAllUser(com.bootdo.moneyList.damain.MoneyListDO)
2019-04-03 09:46:19 -Mapped "{[/moneyList/moneyList/queryAllUserName],methods=[POST]}" onto public java.util.List<com.bootdo.moneyList.damain.MoneyListDO> com.bootdo.moneyList.controller.MoneyListController.getAllUserName(com.bootdo.moneyList.damain.MoneyListDO)
2019-04-03 09:46:19 -Mapped "{[/moneyList/moneyList/updateMoney],methods=[POST]}" onto public java.util.List<com.bootdo.moneyList.damain.MoneyListDO> com.bootdo.moneyList.controller.MoneyListController.updateMoney(com.bootdo.moneyList.damain.MoneyListDO)
2019-04-03 09:46:19 -Mapped "{[/moneyLog/elecLog/add],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.ElecLogController.add()
2019-04-03 09:46:19 -Mapped "{[/moneyLog/elecLog/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.ElecLogController.remove(java.lang.Long)
2019-04-03 09:46:19 -Mapped "{[/moneyLog/elecLog/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.ElecLogController.remove(java.lang.Long[])
2019-04-03 09:46:19 -Mapped "{[/moneyLog/elecLog/update]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.ElecLogController.update(com.bootdo.moneyLog.domain.ElecLogDO)
2019-04-03 09:46:19 -Mapped "{[/moneyLog/elecLog/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.moneyLog.controller.ElecLogController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 09:46:19 -Mapped "{[/moneyLog/elecLog/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.ElecLogController.save(com.bootdo.moneyLog.domain.ElecLogDO)
2019-04-03 09:46:19 -Mapped "{[/moneyLog/elecLog/exprotElecLog],methods=[GET]}" onto public void com.bootdo.moneyLog.controller.ElecLogController.exprotElecLog(com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-03 09:46:19 -Mapped "{[/moneyLog/elecLog/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.ElecLogController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 09:46:19 -Mapped "{[/moneyLog/elecLog],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.ElecLogController.moneyLog()
2019-04-03 09:46:19 -Mapped "{[/moneyLog/heatLog/add],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.HeatLogController.add()
2019-04-03 09:46:19 -Mapped "{[/moneyLog/heatLog/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.HeatLogController.remove(java.lang.Long)
2019-04-03 09:46:19 -Mapped "{[/moneyLog/heatLog/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.HeatLogController.remove(java.lang.Long[])
2019-04-03 09:46:19 -Mapped "{[/moneyLog/heatLog/update]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.HeatLogController.update(com.bootdo.moneyLog.domain.HeatLogDO)
2019-04-03 09:46:19 -Mapped "{[/moneyLog/heatLog/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.moneyLog.controller.HeatLogController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 09:46:19 -Mapped "{[/moneyLog/heatLog/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.HeatLogController.save(com.bootdo.moneyLog.domain.HeatLogDO)
2019-04-03 09:46:19 -Mapped "{[/moneyLog/heatLog/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.HeatLogController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 09:46:19 -Mapped "{[/moneyLog/heatLog],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.HeatLogController.HeatLog()
2019-04-03 09:46:19 -Mapped "{[/moneyLog/heatLog/exprotHeatLog],methods=[GET]}" onto public void com.bootdo.moneyLog.controller.HeatLogController.exprotHeatLog(com.bootdo.moneyLog.vo.HeatLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-03 09:46:19 -Mapped "{[/moneyLog/waterLog/add],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.WaterLogController.add()
2019-04-03 09:46:19 -Mapped "{[/moneyLog/waterLog/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.WaterLogController.remove(java.lang.Long)
2019-04-03 09:46:19 -Mapped "{[/moneyLog/waterLog/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.WaterLogController.remove(java.lang.Long[])
2019-04-03 09:46:19 -Mapped "{[/moneyLog/waterLog/update]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.WaterLogController.update(com.bootdo.moneyLog.domain.WaterLogDO)
2019-04-03 09:46:19 -Mapped "{[/moneyLog/waterLog/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.moneyLog.controller.WaterLogController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 09:46:19 -Mapped "{[/moneyLog/waterLog/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.WaterLogController.save(com.bootdo.moneyLog.domain.WaterLogDO)
2019-04-03 09:46:19 -Mapped "{[/moneyLog/waterLog/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.WaterLogController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 09:46:19 -Mapped "{[/moneyLog/waterLog],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.WaterLogController.WaterLog()
2019-04-03 09:46:19 -Mapped "{[/moneyLog/waterLog/exprotWaterLog],methods=[GET]}" onto public void com.bootdo.moneyLog.controller.WaterLogController.exprotWaterLog(com.bootdo.moneyLog.vo.WaterLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-03 09:46:19 -Mapped "{[/oa/notify/add],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.add()
2019-04-03 09:46:19 -Mapped "{[/oa/notify/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.remove(java.lang.Long)
2019-04-03 09:46:19 -Mapped "{[/oa/notify/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.remove(java.lang.Long[])
2019-04-03 09:46:19 -Mapped "{[/oa/notify/update]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.update(com.bootdo.oa.domain.NotifyDO)
2019-04-03 09:46:19 -Mapped "{[/oa/notify/read/{id}],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.read(java.lang.Long,org.springframework.ui.Model)
2019-04-03 09:46:19 -Mapped "{[/oa/notify/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.oa.controller.NotifyController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 09:46:19 -Mapped "{[/oa/notify/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.save(com.bootdo.oa.domain.NotifyDO)
2019-04-03 09:46:19 -Mapped "{[/oa/notify/message],methods=[GET]}" onto com.bootdo.common.utils.PageUtils com.bootdo.oa.controller.NotifyController.message()
2019-04-03 09:46:19 -Mapped "{[/oa/notify/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 09:46:19 -Mapped "{[/oa/notify/selfList],methods=[GET]}" onto com.bootdo.common.utils.PageUtils com.bootdo.oa.controller.NotifyController.selfList(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 09:46:19 -Mapped "{[/oa/notify/selfNotify],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.selefNotify()
2019-04-03 09:46:19 -Mapped "{[/oa/notify],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.oaNotify()
2019-04-03 09:46:19 -Mapped "{[/print/print/add],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.add()
2019-04-03 09:46:19 -Mapped "{[/print/print/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.print.controller.PrintController.remove(java.lang.Long)
2019-04-03 09:46:19 -Mapped "{[/print/print/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.print.controller.PrintController.remove(java.lang.Long[])
2019-04-03 09:46:19 -Mapped "{[/print/print/update]}" onto public com.bootdo.common.utils.R com.bootdo.print.controller.PrintController.update(com.bootdo.print.domain.PrintDO)
2019-04-03 09:46:19 -Mapped "{[/print/print/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.print.controller.PrintController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 09:46:19 -Mapped "{[/print/print/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.print.controller.PrintController.save(java.lang.String,com.bootdo.print.domain.PrintDO)
2019-04-03 09:46:19 -Mapped "{[/print/print/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 09:46:19 -Mapped "{[/print/print/exprotPrint],methods=[GET]}" onto public void com.bootdo.print.controller.PrintController.exprotPrint(com.bootdo.print.vo.PrintVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-03 09:46:19 -Mapped "{[/print/print],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.Print()
2019-04-03 09:46:19 -Mapped "{[/print/print/printEdit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.printEdit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 09:46:19 -Mapped "{[/system/sysDept/add/{pId}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.add(java.lang.Long,org.springframework.ui.Model)
2019-04-03 09:46:19 -Mapped "{[/system/sysDept/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.remove(java.lang.Long)
2019-04-03 09:46:19 -Mapped "{[/system/sysDept/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.remove(java.lang.Long[])
2019-04-03 09:46:19 -Mapped "{[/system/sysDept/update]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.update(com.bootdo.system.domain.DeptDO)
2019-04-03 09:46:19 -Mapped "{[/system/sysDept/list],methods=[GET]}" onto public java.util.List<com.bootdo.system.domain.DeptDO> com.bootdo.system.controller.DeptController.list()
2019-04-03 09:46:19 -Mapped "{[/system/sysDept/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.save(com.bootdo.system.domain.DeptDO)
2019-04-03 09:46:19 -Mapped "{[/system/sysDept/tree],methods=[GET]}" onto public com.bootdo.common.domain.Tree<com.bootdo.system.domain.DeptDO> com.bootdo.system.controller.DeptController.tree()
2019-04-03 09:46:19 -Mapped "{[/system/sysDept/edit/{deptId}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 09:46:19 -Mapped "{[/system/sysDept],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.dept()
2019-04-03 09:46:19 -Mapped "{[/system/sysDept/treeView],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.treeView()
2019-04-03 09:46:19 -Mapped "{[/index],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.index(org.springframework.ui.Model)
2019-04-03 09:46:19 -Mapped "{[/main],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.main()
2019-04-03 09:46:19 -Mapped "{[/login],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.login(org.springframework.ui.Model)
2019-04-03 09:46:19 -Mapped "{[/logout],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.logout()
2019-04-03 09:46:19 -Mapped "{[/login],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.LoginController.ajaxLogin(java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest)
2019-04-03 09:46:19 -Mapped "{[/getVerify],methods=[GET]}" onto public void com.bootdo.system.controller.LoginController.getVerify(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-04-03 09:46:19 -Mapped "{[/ || ],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.welcome(org.springframework.ui.Model)
2019-04-03 09:46:19 -Mapped "{[/sys/menu/add/{pId}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.MenuController.add(org.springframework.ui.Model,java.lang.Long)
2019-04-03 09:46:19 -Mapped "{[/sys/menu/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.MenuController.remove(java.lang.Long)
2019-04-03 09:46:19 -Mapped "{[/sys/menu/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.MenuController.update(com.bootdo.system.domain.MenuDO)
2019-04-03 09:46:19 -Mapped "{[/sys/menu/list]}" onto java.util.List<com.bootdo.system.domain.MenuDO> com.bootdo.system.controller.MenuController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 09:46:19 -Mapped "{[/sys/menu/save],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.MenuController.save(com.bootdo.system.domain.MenuDO)
2019-04-03 09:46:19 -Mapped "{[/sys/menu/tree/{roleId}],methods=[GET]}" onto com.bootdo.common.domain.Tree<com.bootdo.system.domain.MenuDO> com.bootdo.system.controller.MenuController.tree(java.lang.Long)
2019-04-03 09:46:19 -Mapped "{[/sys/menu/tree],methods=[GET]}" onto com.bootdo.common.domain.Tree<com.bootdo.system.domain.MenuDO> com.bootdo.system.controller.MenuController.tree()
2019-04-03 09:46:19 -Mapped "{[/sys/menu/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.MenuController.edit(org.springframework.ui.Model,java.lang.Long)
2019-04-03 09:46:19 -Mapped "{[/sys/menu],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.MenuController.menu(org.springframework.ui.Model)
2019-04-03 09:46:19 -Mapped "{[/sys/role/add],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.RoleController.add()
2019-04-03 09:46:19 -Mapped "{[/sys/role/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.update(com.bootdo.system.domain.RoleDO)
2019-04-03 09:46:19 -Mapped "{[/sys/role/list],methods=[GET]}" onto java.util.List<com.bootdo.system.domain.RoleDO> com.bootdo.system.controller.RoleController.list()
2019-04-03 09:46:19 -Mapped "{[/sys/role/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.save(java.lang.Long)
2019-04-03 09:46:19 -Mapped "{[/sys/role/save],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.save(com.bootdo.system.domain.RoleDO)
2019-04-03 09:46:19 -Mapped "{[/sys/role/batchRemove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.batchRemove(java.lang.Long[])
2019-04-03 09:46:19 -Mapped "{[/sys/role],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.RoleController.role()
2019-04-03 09:46:19 -Mapped "{[/sys/role/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.RoleController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 09:46:19 -Mapped "{[/sys/online/list]}" onto public java.util.List<com.bootdo.system.domain.UserOnline> com.bootdo.system.controller.SessionController.list()
2019-04-03 09:46:19 -Mapped "{[/sys/online],methods=[GET]}" onto public java.lang.String com.bootdo.system.controller.SessionController.online()
2019-04-03 09:46:19 -Mapped "{[/sys/online/sessionList]}" onto public java.util.Collection<org.apache.shiro.session.Session> com.bootdo.system.controller.SessionController.sessionList()
2019-04-03 09:46:19 -Mapped "{[/sys/online/forceLogout/{sessionId}]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.SessionController.forceLogout(java.lang.String,org.springframework.web.servlet.mvc.support.RedirectAttributes)
2019-04-03 09:46:19 -Mapped "{[/sys/user/exit],methods=[POST]}" onto boolean com.bootdo.system.controller.UserController.exit(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 09:46:19 -Mapped "{[/sys/user/add],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.add(org.springframework.ui.Model)
2019-04-03 09:46:19 -Mapped "{[/sys/user/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.remove(java.lang.Long)
2019-04-03 09:46:19 -Mapped "{[/sys/user/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.update(com.bootdo.system.domain.UserDO)
2019-04-03 09:46:19 -Mapped "{[/sys/user/list],methods=[GET]}" onto com.bootdo.common.utils.PageUtils com.bootdo.system.controller.UserController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 09:46:19 -Mapped "{[/sys/user/save],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.save(com.bootdo.system.domain.UserDO)
2019-04-03 09:46:19 -Mapped "{[/sys/user/batchRemove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.batchRemove(java.lang.Long[])
2019-04-03 09:46:19 -Mapped "{[/sys/user/tree],methods=[GET]}" onto public com.bootdo.common.domain.Tree<com.bootdo.system.domain.DeptDO> com.bootdo.system.controller.UserController.tree()
2019-04-03 09:46:19 -Mapped "{[/sys/user],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.user(org.springframework.ui.Model)
2019-04-03 09:46:19 -Mapped "{[/sys/user/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.edit(org.springframework.ui.Model,java.lang.Long)
2019-04-03 09:46:19 -Mapped "{[/sys/user/treeView],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.treeView()
2019-04-03 09:46:19 -Mapped "{[/sys/user/resetPwd],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.resetPwd(com.bootdo.system.vo.UserVO)
2019-04-03 09:46:19 -Mapped "{[/sys/user/resetPwd/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.resetPwd(java.lang.Long,org.springframework.ui.Model)
2019-04-03 09:46:19 -Mapped "{[/sys/user/adminResetPwd],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.adminResetPwd(com.bootdo.system.vo.UserVO)
2019-04-03 09:46:19 -Mapped "{[/sys/user/updatePeronal],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.updatePeronal(com.bootdo.system.domain.UserDO)
2019-04-03 09:46:19 -Mapped "{[/sys/user/uploadImg],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.uploadImg(org.springframework.web.multipart.MultipartFile,java.lang.String,javax.servlet.http.HttpServletRequest)
2019-04-03 09:46:19 -Mapped "{[/sys/user/personal],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.personal(org.springframework.ui.Model)
2019-04-03 09:46:19 -Mapped "{[/file/downImport/{importType}],methods=[GET]}" onto public void com.bootdo.temple.controller.TempletController.downImport(javax.servlet.http.HttpServletResponse,java.lang.String)
2019-04-03 09:46:19 -Mapped "{[/water/water/add],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterController.add()
2019-04-03 09:46:19 -Mapped "{[/water/water/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterController.remove(java.lang.Long)
2019-04-03 09:46:19 -Mapped "{[/water/water/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterController.remove(java.lang.Long[])
2019-04-03 09:46:19 -Mapped "{[/water/water/update]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterController.update(com.bootdo.water.domain.WaterDO)
2019-04-03 09:46:19 -Mapped "{[/water/water/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.water.controller.WaterController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 09:46:19 -Mapped "{[/water/water/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterController.save(com.bootdo.water.domain.WaterDO)
2019-04-03 09:46:19 -Mapped "{[/water/water/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 09:46:19 -Mapped "{[/water/water/exprotWater],methods=[GET]}" onto public void com.bootdo.water.controller.WaterController.exprotExcel(com.bootdo.water.vo.WaterVo,javax.servlet.http.HttpServletResponse)
2019-04-03 09:46:19 -Mapped "{[/water/water],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterController.Water()
2019-04-03 09:46:19 -Mapped "{[/water/waterInto/exprotWaterIntoExcel],methods=[GET]}" onto public void com.bootdo.water.controller.WaterIntoController.exprotExcel(com.bootdo.water.vo.WaterVo,javax.servlet.http.HttpServletResponse)
2019-04-03 09:46:19 -Mapped "{[/water/waterInto],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterIntoController.WaterInto()
2019-04-03 09:46:19 -Mapped "{[/water/waterPrice/add],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterPriceController.add()
2019-04-03 09:46:19 -Mapped "{[/water/waterPrice/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterPriceController.remove(java.lang.Long)
2019-04-03 09:46:19 -Mapped "{[/water/waterPrice/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterPriceController.remove(java.lang.Long[])
2019-04-03 09:46:19 -Mapped "{[/water/waterPrice/update]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterPriceController.update(com.bootdo.water.domain.WaterPriceDO)
2019-04-03 09:46:19 -Mapped "{[/water/waterPrice/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.water.controller.WaterPriceController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 09:46:19 -Mapped "{[/water/waterPrice/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterPriceController.save(com.bootdo.water.domain.WaterPriceDO)
2019-04-03 09:46:19 -Mapped "{[/water/waterPrice/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterPriceController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 09:46:19 -Mapped "{[/water/waterPrice],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterPriceController.WaterPrice()
2019-04-03 09:46:19 -Mapped "{[/water/waterUpLoad/createWaterExcel],methods=[POST]}" onto public java.lang.String com.bootdo.water.controller.WaterUpLoadController.createWaterExcel(com.bootdo.water.domain.WaterDO) throws java.lang.Exception
2019-04-03 09:46:19 -Mapped "{[/water/waterUpLoad/importWaterExcel]}" onto public java.lang.String com.bootdo.water.controller.WaterUpLoadController.importWaterExcel(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)
2019-04-03 09:46:19 -Mapped "{[/water/waterUpLoad],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterUpLoadController.WaterUpLoad()
2019-04-03 09:46:19 -Mapped "{[/water/waterUpLoad/exprotWaterExcel],methods=[GET]}" onto public void com.bootdo.water.controller.WaterUpLoadController.exprotWaterExcel(com.bootdo.water.vo.WaterVo,javax.servlet.http.HttpServletResponse)
2019-04-03 09:46:19 -Mapped "{[/v2/api-docs],methods=[GET],produces=[application/json || application/hal+json]}" onto public org.springframework.http.ResponseEntity<springfox.documentation.spring.web.json.Json> springfox.documentation.swagger2.web.Swagger2Controller.getDocumentation(java.lang.String,javax.servlet.http.HttpServletRequest)
2019-04-03 09:46:19 -Mapped "{[/swagger-resources/configuration/security]}" onto org.springframework.http.ResponseEntity<springfox.documentation.swagger.web.SecurityConfiguration> springfox.documentation.swagger.web.ApiResourceController.securityConfiguration()
2019-04-03 09:46:19 -Mapped "{[/swagger-resources/configuration/ui]}" onto org.springframework.http.ResponseEntity<springfox.documentation.swagger.web.UiConfiguration> springfox.documentation.swagger.web.ApiResourceController.uiConfiguration()
2019-04-03 09:46:19 -Mapped "{[/swagger-resources]}" onto org.springframework.http.ResponseEntity<java.util.List<springfox.documentation.swagger.web.SwaggerResource>> springfox.documentation.swagger.web.ApiResourceController.swaggerResources()
2019-04-03 09:46:20 -Initializing ExecutorService  'messageBrokerTaskScheduler'
2019-04-03 09:46:20 -Mapped URL path [/endpointChat/**] onto handler of type [class org.springframework.web.socket.sockjs.support.SockJsHttpRequestHandler]
2019-04-03 09:46:20 -Initializing ExecutorService  'brokerChannelExecutor'
2019-04-03 09:46:21 -Mapped URL path [/**/favicon.ico] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-04-03 09:46:22 -Looking for @ControllerAdvice: org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@4fbda97b: startup date [Wed Apr 03 09:45:39 CST 2019]; root of context hierarchy
2019-04-03 09:46:22 -Mapped URL path [/webjars/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-04-03 09:46:22 -Mapped URL path [/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-04-03 09:46:22 -Mapped URL path [/files/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-04-03 09:46:22 -Detected @ExceptionHandler methods in BDExceptionHandler
2019-04-03 09:46:23 -[THYMELEAF][main] Template Mode 'LEGACYHTML5' is deprecated. Using Template Mode 'HTML' instead.
2019-04-03 09:46:27 -Registering beans for JMX exposure on startup
2019-04-03 09:46:27 -Bean with name 'dataSource' has been autodetected for JMX exposure
2019-04-03 09:46:27 -Located MBean 'dataSource': registering with JMX server as MBean [com.alibaba.druid.pool:name=dataSource,type=DruidDataSource]
2019-04-03 09:46:27 -Starting beans in phase 2147483647
2019-04-03 09:46:27 -Context refreshed
2019-04-03 09:46:27 -Found 1 custom documentation plugin(s)
2019-04-03 09:46:27 -Scanning for api listing references
2019-04-03 09:46:28 -Generating unique operation named: exprotElecLogUsingGET_1
2019-04-03 09:46:28 -Generating unique operation named: getCountDUsingPOST_1
2019-04-03 09:46:28 -Generating unique operation named: exprotElecLogUsingGET_2
2019-04-03 09:46:28 -Generating unique operation named: getCountDUsingPOST_2
2019-04-03 09:46:28 -Generating unique operation named: exprotElecLogUsingGET_3
2019-04-03 09:46:28 -Generating unique operation named: getCountDUsingPOST_3
2019-04-03 09:46:28 -Generating unique operation named: removeUsingPOST_1
2019-04-03 09:46:29 -Generating unique operation named: addUsingGET_1
2019-04-03 09:46:29 -Generating unique operation named: editUsingGET_1
2019-04-03 09:46:29 -Generating unique operation named: listUsingGET_1
2019-04-03 09:46:29 -Generating unique operation named: removeUsingPOST_2
2019-04-03 09:46:29 -Generating unique operation named: removeUsingPOST_3
2019-04-03 09:46:29 -Generating unique operation named: saveUsingPOST_1
2019-04-03 09:46:29 -Generating unique operation named: updateUsingGET_1
2019-04-03 09:46:29 -Generating unique operation named: updateUsingHEAD_1
2019-04-03 09:46:29 -Generating unique operation named: updateUsingPOST_1
2019-04-03 09:46:29 -Generating unique operation named: updateUsingPUT_1
2019-04-03 09:46:29 -Generating unique operation named: updateUsingPATCH_1
2019-04-03 09:46:29 -Generating unique operation named: updateUsingDELETE_1
2019-04-03 09:46:29 -Generating unique operation named: updateUsingOPTIONS_1
2019-04-03 09:46:29 -Generating unique operation named: updateUsingTRACE_1
2019-04-03 09:46:29 -Generating unique operation named: addUsingGET_2
2019-04-03 09:46:29 -Generating unique operation named: editUsingGET_2
2019-04-03 09:46:29 -Generating unique operation named: listUsingGET_2
2019-04-03 09:46:29 -Generating unique operation named: removeUsingPOST_4
2019-04-03 09:46:29 -Generating unique operation named: removeUsingPOST_5
2019-04-03 09:46:29 -Generating unique operation named: saveUsingPOST_2
2019-04-03 09:46:29 -Generating unique operation named: updateUsingPOST_2
2019-04-03 09:46:29 -Generating unique operation named: exprotExcelUsingGET_1
2019-04-03 09:46:29 -Generating unique operation named: addUsingGET_3
2019-04-03 09:46:29 -Generating unique operation named: editUsingGET_3
2019-04-03 09:46:29 -Generating unique operation named: exprotElecLogUsingGET_4
2019-04-03 09:46:29 -Generating unique operation named: listUsingGET_3
2019-04-03 09:46:29 -Generating unique operation named: removeUsingPOST_6
2019-04-03 09:46:29 -Generating unique operation named: removeUsingPOST_7
2019-04-03 09:46:29 -Generating unique operation named: saveUsingPOST_3
2019-04-03 09:46:29 -Generating unique operation named: updateUsingGET_2
2019-04-03 09:46:29 -Generating unique operation named: updateUsingHEAD_2
2019-04-03 09:46:29 -Generating unique operation named: updateUsingPOST_3
2019-04-03 09:46:29 -Generating unique operation named: updateUsingPUT_2
2019-04-03 09:46:29 -Generating unique operation named: updateUsingPATCH_2
2019-04-03 09:46:29 -Generating unique operation named: updateUsingDELETE_2
2019-04-03 09:46:29 -Generating unique operation named: updateUsingOPTIONS_2
2019-04-03 09:46:29 -Generating unique operation named: updateUsingTRACE_2
2019-04-03 09:46:29 -Generating unique operation named: addUsingGET_4
2019-04-03 09:46:29 -Generating unique operation named: editUsingGET_4
2019-04-03 09:46:29 -Generating unique operation named: listUsingGET_4
2019-04-03 09:46:29 -Generating unique operation named: removeUsingPOST_8
2019-04-03 09:46:29 -Generating unique operation named: removeUsingPOST_9
2019-04-03 09:46:29 -Generating unique operation named: saveUsingPOST_4
2019-04-03 09:46:29 -Generating unique operation named: updateUsingGET_3
2019-04-03 09:46:29 -Generating unique operation named: updateUsingHEAD_3
2019-04-03 09:46:29 -Generating unique operation named: updateUsingPOST_4
2019-04-03 09:46:29 -Generating unique operation named: updateUsingPUT_3
2019-04-03 09:46:29 -Generating unique operation named: updateUsingPATCH_3
2019-04-03 09:46:29 -Generating unique operation named: updateUsingDELETE_3
2019-04-03 09:46:29 -Generating unique operation named: updateUsingOPTIONS_3
2019-04-03 09:46:29 -Generating unique operation named: updateUsingTRACE_3
2019-04-03 09:46:29 -Generating unique operation named: ElecUsingGET_1
2019-04-03 09:46:29 -Generating unique operation named: addUsingGET_5
2019-04-03 09:46:29 -Generating unique operation named: editUsingGET_5
2019-04-03 09:46:29 -Generating unique operation named: listUsingGET_5
2019-04-03 09:46:29 -Generating unique operation named: removeUsingPOST_10
2019-04-03 09:46:29 -Generating unique operation named: removeUsingPOST_11
2019-04-03 09:46:29 -Generating unique operation named: saveUsingPOST_5
2019-04-03 09:46:29 -Generating unique operation named: updateUsingGET_4
2019-04-03 09:46:30 -Generating unique operation named: updateUsingHEAD_4
2019-04-03 09:46:30 -Generating unique operation named: updateUsingPOST_5
2019-04-03 09:46:30 -Generating unique operation named: updateUsingPUT_4
2019-04-03 09:46:30 -Generating unique operation named: updateUsingPATCH_4
2019-04-03 09:46:30 -Generating unique operation named: updateUsingDELETE_4
2019-04-03 09:46:30 -Generating unique operation named: updateUsingOPTIONS_4
2019-04-03 09:46:30 -Generating unique operation named: updateUsingTRACE_4
2019-04-03 09:46:30 -Generating unique operation named: editUsingGET_6
2019-04-03 09:46:30 -Generating unique operation named: listUsingGET_6
2019-04-03 09:46:30 -Generating unique operation named: updateUsingPOST_6
2019-04-03 09:46:30 -Generating unique operation named: addUsingGET_6
2019-04-03 09:46:30 -Generating unique operation named: editUsingGET_7
2019-04-03 09:46:30 -Generating unique operation named: exprotExcelUsingGET_2
2019-04-03 09:46:30 -Generating unique operation named: listUsingGET_7
2019-04-03 09:46:30 -Generating unique operation named: removeUsingPOST_12
2019-04-03 09:46:30 -Generating unique operation named: removeUsingPOST_13
2019-04-03 09:46:30 -Generating unique operation named: saveUsingPOST_6
2019-04-03 09:46:30 -Generating unique operation named: updateUsingGET_5
2019-04-03 09:46:30 -Generating unique operation named: updateUsingHEAD_5
2019-04-03 09:46:30 -Generating unique operation named: updateUsingPOST_7
2019-04-03 09:46:30 -Generating unique operation named: updateUsingPUT_5
2019-04-03 09:46:30 -Generating unique operation named: updateUsingPATCH_5
2019-04-03 09:46:30 -Generating unique operation named: updateUsingDELETE_5
2019-04-03 09:46:30 -Generating unique operation named: updateUsingOPTIONS_5
2019-04-03 09:46:30 -Generating unique operation named: updateUsingTRACE_5
2019-04-03 09:46:30 -Generating unique operation named: exprotExcelUsingGET_3
2019-04-03 09:46:30 -Generating unique operation named: addUsingGET_7
2019-04-03 09:46:30 -Generating unique operation named: editUsingGET_8
2019-04-03 09:46:30 -Generating unique operation named: listUsingGET_8
2019-04-03 09:46:30 -Generating unique operation named: removeUsingPOST_14
2019-04-03 09:46:30 -Generating unique operation named: removeUsingPOST_15
2019-04-03 09:46:30 -Generating unique operation named: saveUsingPOST_7
2019-04-03 09:46:30 -Generating unique operation named: updateUsingGET_6
2019-04-03 09:46:30 -Generating unique operation named: updateUsingHEAD_6
2019-04-03 09:46:30 -Generating unique operation named: updateUsingPOST_8
2019-04-03 09:46:30 -Generating unique operation named: updateUsingPUT_6
2019-04-03 09:46:30 -Generating unique operation named: updateUsingPATCH_6
2019-04-03 09:46:30 -Generating unique operation named: updateUsingDELETE_6
2019-04-03 09:46:30 -Generating unique operation named: updateUsingOPTIONS_6
2019-04-03 09:46:30 -Generating unique operation named: updateUsingTRACE_6
2019-04-03 09:46:30 -Generating unique operation named: addUsingGET_8
2019-04-03 09:46:30 -Generating unique operation named: editUsingGET_9
2019-04-03 09:46:30 -Generating unique operation named: listUsingGET_9
2019-04-03 09:46:30 -Generating unique operation named: removeUsingPOST_16
2019-04-03 09:46:30 -Generating unique operation named: removeUsingPOST_17
2019-04-03 09:46:30 -Generating unique operation named: saveUsingPOST_8
2019-04-03 09:46:30 -Generating unique operation named: updateUsingGET_7
2019-04-03 09:46:30 -Generating unique operation named: updateUsingHEAD_7
2019-04-03 09:46:30 -Generating unique operation named: updateUsingPOST_9
2019-04-03 09:46:30 -Generating unique operation named: updateUsingPUT_7
2019-04-03 09:46:30 -Generating unique operation named: updateUsingPATCH_7
2019-04-03 09:46:30 -Generating unique operation named: updateUsingDELETE_7
2019-04-03 09:46:30 -Generating unique operation named: updateUsingOPTIONS_7
2019-04-03 09:46:30 -Generating unique operation named: updateUsingTRACE_7
2019-04-03 09:46:30 -Generating unique operation named: addUsingGET_9
2019-04-03 09:46:30 -Generating unique operation named: editUsingGET_10
2019-04-03 09:46:30 -Generating unique operation named: infoUsingGET_1
2019-04-03 09:46:30 -Generating unique operation named: infoUsingHEAD_1
2019-04-03 09:46:30 -Generating unique operation named: infoUsingPOST_1
2019-04-03 09:46:30 -Generating unique operation named: infoUsingPUT_1
2019-04-03 09:46:30 -Generating unique operation named: infoUsingPATCH_1
2019-04-03 09:46:30 -Generating unique operation named: infoUsingDELETE_1
2019-04-03 09:46:30 -Generating unique operation named: infoUsingOPTIONS_1
2019-04-03 09:46:30 -Generating unique operation named: infoUsingTRACE_1
2019-04-03 09:46:30 -Generating unique operation named: listUsingGET_10
2019-04-03 09:46:30 -Generating unique operation named: removeUsingPOST_18
2019-04-03 09:46:30 -Generating unique operation named: removeUsingPOST_19
2019-04-03 09:46:30 -Generating unique operation named: saveUsingPOST_9
2019-04-03 09:46:30 -Generating unique operation named: updateUsingPOST_10
2019-04-03 09:46:30 -Generating unique operation named: listUsingGET_11
2019-04-03 09:46:30 -Generating unique operation named: removeUsingPOST_20
2019-04-03 09:46:30 -Generating unique operation named: welcomeUsingGET_1
2019-04-03 09:46:31 -Generating unique operation named: addUsingGET_10
2019-04-03 09:46:31 -Generating unique operation named: editUsingGET_11
2019-04-03 09:46:31 -Generating unique operation named: listUsingGET_12
2019-04-03 09:46:31 -Generating unique operation named: removeUsingPOST_21
2019-04-03 09:46:31 -Generating unique operation named: saveUsingPOST_10
2019-04-03 09:46:31 -Generating unique operation named: treeUsingGET_1
2019-04-03 09:46:31 -Generating unique operation named: treeUsingGET_2
2019-04-03 09:46:31 -Generating unique operation named: updateUsingPOST_11
2019-04-03 09:46:31 -Generating unique operation named: addUsingGET_11
2019-04-03 09:46:31 -Generating unique operation named: editUsingGET_12
2019-04-03 09:46:31 -Generating unique operation named: listUsingGET_13
2019-04-03 09:46:31 -Generating unique operation named: removeUsingPOST_22
2019-04-03 09:46:31 -Generating unique operation named: removeUsingPOST_23
2019-04-03 09:46:31 -Generating unique operation named: saveUsingPOST_11
2019-04-03 09:46:31 -Generating unique operation named: updateUsingGET_8
2019-04-03 09:46:31 -Generating unique operation named: updateUsingHEAD_8
2019-04-03 09:46:31 -Generating unique operation named: updateUsingPOST_12
2019-04-03 09:46:31 -Generating unique operation named: updateUsingPUT_8
2019-04-03 09:46:31 -Generating unique operation named: updateUsingPATCH_8
2019-04-03 09:46:31 -Generating unique operation named: updateUsingDELETE_8
2019-04-03 09:46:31 -Generating unique operation named: updateUsingOPTIONS_8
2019-04-03 09:46:31 -Generating unique operation named: updateUsingTRACE_8
2019-04-03 09:46:31 -Generating unique operation named: addUsingGET_12
2019-04-03 09:46:31 -Generating unique operation named: editUsingGET_13
2019-04-03 09:46:31 -Generating unique operation named: listUsingGET_14
2019-04-03 09:46:31 -Generating unique operation named: removeUsingPOST_24
2019-04-03 09:46:31 -Generating unique operation named: removeUsingPOST_25
2019-04-03 09:46:31 -Generating unique operation named: saveUsingPOST_12
2019-04-03 09:46:31 -Generating unique operation named: updateUsingGET_9
2019-04-03 09:46:31 -Generating unique operation named: updateUsingHEAD_9
2019-04-03 09:46:31 -Generating unique operation named: updateUsingPOST_13
2019-04-03 09:46:31 -Generating unique operation named: updateUsingPUT_9
2019-04-03 09:46:31 -Generating unique operation named: updateUsingPATCH_9
2019-04-03 09:46:31 -Generating unique operation named: updateUsingDELETE_9
2019-04-03 09:46:31 -Generating unique operation named: updateUsingOPTIONS_9
2019-04-03 09:46:31 -Generating unique operation named: updateUsingTRACE_9
2019-04-03 09:46:31 -Generating unique operation named: addUsingGET_13
2019-04-03 09:46:31 -Generating unique operation named: batchRemoveUsingPOST_1
2019-04-03 09:46:31 -Generating unique operation named: editUsingGET_14
2019-04-03 09:46:31 -Generating unique operation named: listUsingGET_15
2019-04-03 09:46:31 -Generating unique operation named: saveUsingPOST_13
2019-04-03 09:46:31 -Generating unique operation named: saveUsingPOST_14
2019-04-03 09:46:31 -Generating unique operation named: updateUsingPOST_14
2019-04-03 09:46:31 -Generating unique operation named: listUsingGET_16
2019-04-03 09:46:31 -Generating unique operation named: listUsingHEAD_1
2019-04-03 09:46:31 -Generating unique operation named: listUsingPOST_1
2019-04-03 09:46:31 -Generating unique operation named: listUsingPUT_1
2019-04-03 09:46:31 -Generating unique operation named: listUsingPATCH_1
2019-04-03 09:46:31 -Generating unique operation named: listUsingDELETE_1
2019-04-03 09:46:31 -Generating unique operation named: listUsingOPTIONS_1
2019-04-03 09:46:31 -Generating unique operation named: listUsingTRACE_1
2019-04-03 09:46:31 -Generating unique operation named: addUsingGET_14
2019-04-03 09:46:31 -Generating unique operation named: batchRemoveUsingPOST_2
2019-04-03 09:46:31 -Generating unique operation named: editUsingGET_15
2019-04-03 09:46:31 -Generating unique operation named: listUsingGET_17
2019-04-03 09:46:31 -Generating unique operation named: removeUsingPOST_26
2019-04-03 09:46:31 -Generating unique operation named: saveUsingPOST_15
2019-04-03 09:46:31 -Generating unique operation named: treeUsingGET_3
2019-04-03 09:46:31 -Generating unique operation named: treeViewUsingGET_1
2019-04-03 09:46:32 -Generating unique operation named: updateUsingPOST_15
2019-04-03 09:46:32 -Generating unique operation named: addUsingGET_15
2019-04-03 09:46:32 -Generating unique operation named: editUsingGET_16
2019-04-03 09:46:32 -Generating unique operation named: exprotExcelUsingGET_4
2019-04-03 09:46:32 -Generating unique operation named: listUsingGET_18
2019-04-03 09:46:32 -Generating unique operation named: removeUsingPOST_27
2019-04-03 09:46:32 -Generating unique operation named: removeUsingPOST_28
2019-04-03 09:46:32 -Generating unique operation named: saveUsingPOST_16
2019-04-03 09:46:32 -Generating unique operation named: updateUsingGET_10
2019-04-03 09:46:32 -Generating unique operation named: updateUsingHEAD_10
2019-04-03 09:46:32 -Generating unique operation named: updateUsingPOST_16
2019-04-03 09:46:32 -Generating unique operation named: updateUsingPUT_10
2019-04-03 09:46:32 -Generating unique operation named: updateUsingPATCH_10
2019-04-03 09:46:32 -Generating unique operation named: updateUsingDELETE_10
2019-04-03 09:46:32 -Generating unique operation named: updateUsingOPTIONS_10
2019-04-03 09:46:32 -Generating unique operation named: updateUsingTRACE_10
2019-04-03 09:46:32 -Generating unique operation named: exprotExcelUsingGET_5
2019-04-03 09:46:32 -Generating unique operation named: addUsingGET_16
2019-04-03 09:46:32 -Generating unique operation named: editUsingGET_17
2019-04-03 09:46:32 -Generating unique operation named: listUsingGET_19
2019-04-03 09:46:32 -Generating unique operation named: removeUsingPOST_29
2019-04-03 09:46:32 -Generating unique operation named: removeUsingPOST_30
2019-04-03 09:46:32 -Generating unique operation named: saveUsingPOST_17
2019-04-03 09:46:32 -Generating unique operation named: updateUsingGET_11
2019-04-03 09:46:32 -Generating unique operation named: updateUsingHEAD_11
2019-04-03 09:46:32 -Generating unique operation named: updateUsingPOST_17
2019-04-03 09:46:32 -Generating unique operation named: updateUsingPUT_11
2019-04-03 09:46:32 -Generating unique operation named: updateUsingPATCH_11
2019-04-03 09:46:32 -Generating unique operation named: updateUsingDELETE_11
2019-04-03 09:46:32 -Generating unique operation named: updateUsingOPTIONS_11
2019-04-03 09:46:32 -Generating unique operation named: updateUsingTRACE_11
2019-04-03 09:46:32 -Generating unique operation named: addUsingGET_17
2019-04-03 09:46:32 -Generating unique operation named: editUsingGET_18
2019-04-03 09:46:32 -Generating unique operation named: listUsingGET_20
2019-04-03 09:46:32 -Generating unique operation named: removeUsingPOST_31
2019-04-03 09:46:32 -Generating unique operation named: removeUsingPOST_32
2019-04-03 09:46:32 -Generating unique operation named: saveUsingPOST_18
2019-04-03 09:46:32 -Generating unique operation named: updateUsingGET_12
2019-04-03 09:46:32 -Generating unique operation named: updateUsingHEAD_12
2019-04-03 09:46:32 -Generating unique operation named: updateUsingPOST_18
2019-04-03 09:46:32 -Generating unique operation named: updateUsingPUT_12
2019-04-03 09:46:32 -Generating unique operation named: updateUsingPATCH_12
2019-04-03 09:46:32 -Generating unique operation named: updateUsingDELETE_12
2019-04-03 09:46:32 -Generating unique operation named: updateUsingOPTIONS_12
2019-04-03 09:46:32 -Generating unique operation named: updateUsingTRACE_12
2019-04-03 09:46:33 -Starting Quartz Scheduler now
2019-04-03 09:46:33 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED started.
2019-04-03 09:46:33 -Starting...
2019-04-03 09:46:33 -BrokerAvailabilityEvent[available=true, SimpleBrokerMessageHandler [DefaultSubscriptionRegistry[cache[0 destination(s)], registry[0 sessions]]]]
2019-04-03 09:46:33 -Started.
2019-04-03 09:46:33 -Starting ProtocolHandler ["http-nio-8081"]
2019-04-03 09:46:33 -Using a shared selector for servlet write/read
2019-04-03 09:46:33 -Tomcat started on port(s): 8081 (http) with context path ''
2019-04-03 09:46:33 -Started BootdoApplication in 57.52 seconds (JVM running for 59.245)
2019-04-03 09:46:33 -==>  Preparing: select `id`,`cron_expression`,`method_name`,`is_concurrent`,`description`,`update_by`,`bean_class`,`create_date`,`job_status`,`job_group`,`update_date`,`create_by`,`spring_bean`,`job_name` from sys_task order by id desc 
2019-04-03 09:46:33 -==> Parameters: 
2019-04-03 09:46:33 -<==      Total: 1
2019-04-03 09:47:20 -WebSocketSession[0 current WS(0)-HttpStream(0)-HttpPoll(0), 0 total, 0 closed abnormally (0 connect failure, 0 send limit, 0 transport error)], stompSubProtocol[processed CONNECT(0)-CONNECTED(0)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], outboundChannelpool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], sockJsScheduler[pool size = 1, active threads = 1, queued tasks = 0, completed tasks = 0]
2019-04-03 09:48:03 -Initializing Spring FrameworkServlet 'dispatcherServlet'
2019-04-03 09:48:03 -FrameworkServlet 'dispatcherServlet': initialization started
2019-04-03 09:48:04 -FrameworkServlet 'dispatcherServlet': initialization completed in 141 ms
2019-04-03 09:48:04 -Enabling session validation scheduler...
2019-04-03 09:48:04 -请求地址 : http://localhost:8081/login;JSESSIONID=b52da2bf-5836-452b-971d-e52004911126
2019-04-03 09:48:04 -HTTP METHOD : GET
2019-04-03 09:48:04 -CLASS_METHOD : com.bootdo.system.controller.LoginController.login
2019-04-03 09:48:04 -参数 : [{}]
2019-04-03 09:48:04 -耗时 : 4
2019-04-03 09:48:04 -返回值 : login
2019-04-03 09:48:06 -请求地址 : http://localhost:8081/getVerify
2019-04-03 09:48:06 -HTTP METHOD : GET
2019-04-03 09:48:06 -CLASS_METHOD : com.bootdo.system.controller.LoginController.getVerify
2019-04-03 09:48:06 -参数 : [org.apache.shiro.web.servlet.ShiroHttpServletRequest@110ae245, org.apache.shiro.web.servlet.ShiroHttpServletResponse@7891b951]
2019-04-03 09:48:12 -9757
2019-04-03 09:48:12 -耗时 : 5618
2019-04-03 09:48:12 -返回值 : null
2019-04-03 09:48:12 -请求地址 : http://localhost:8081/login
2019-04-03 09:48:12 -HTTP METHOD : GET
2019-04-03 09:48:12 -CLASS_METHOD : com.bootdo.system.controller.LoginController.login
2019-04-03 09:48:12 -参数 : [{}]
2019-04-03 09:48:12 -耗时 : 0
2019-04-03 09:48:12 -返回值 : login
2019-04-03 09:48:23 -请求地址 : http://localhost:8081/login
2019-04-03 09:48:23 -HTTP METHOD : POST
2019-04-03 09:48:23 -CLASS_METHOD : com.bootdo.system.controller.LoginController.ajaxLogin
2019-04-03 09:48:23 -参数 : [admin, 111111, 9757, org.apache.shiro.web.servlet.ShiroHttpServletRequest@50667b4c]
2019-04-03 09:48:23 -==>  Preparing: select `user_id`,`username`,`name`,`password`,`dept_id`,`email`,`mobile`,`status`,`user_id_create`,`gmt_create`,`gmt_modified`,`sex`,`birth`,`pic_id`,`live_address`,`hobby`,`province`,`city`,`district` from sys_user WHERE username = ? order by user_id desc 
2019-04-03 09:48:23 -==> Parameters: admin(String)
2019-04-03 09:48:23 -<==      Total: 1
2019-04-03 09:48:23 -耗时 : 287
2019-04-03 09:48:23 -返回值 : {msg=操作成功, code=0}
2019-04-03 09:48:24 -More than one TaskExecutor bean found within the context, and none is named 'taskExecutor'. Mark one of them as primary or name it 'taskExecutor' (possibly as an alias) in order to use it for async processing: [clientInboundChannelExecutor, clientOutboundChannelExecutor, brokerChannelExecutor, messageBrokerTaskScheduler]
2019-04-03 09:48:24 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 09:48:24 -==> Parameters: 1(Long), admin(String), 登录(String), 288(Integer), com.bootdo.system.controller.LoginController.ajaxLogin()(String), null, 127.0.0.1(String), 2019-04-03 09:48:24.25(Timestamp)
2019-04-03 09:48:24 -<==    Updates: 1
2019-04-03 09:48:24 -请求地址 : http://localhost:8081/index
2019-04-03 09:48:24 -HTTP METHOD : GET
2019-04-03 09:48:24 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2019-04-03 09:48:24 -参数 : [{}]
2019-04-03 09:48:24 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2019-04-03 09:48:24 -==> Parameters: 1(Long)
2019-04-03 09:48:24 -<==      Total: 46
2019-04-03 09:48:25 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2019-04-03 09:48:25 -==> Parameters: 138(Long)
2019-04-03 09:48:25 -<==      Total: 1
2019-04-03 09:48:25 -耗时 : 555
2019-04-03 09:48:25 -返回值 : index_v1
2019-04-03 09:48:25 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 09:48:25 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 555(Integer), com.bootdo.system.controller.LoginController.index()(String), {"menus":[{"attributes":{"icon":"fa fa-money","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-money","url":"/moneyList/moneyList"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"102","parentId":"106","text":"现金缴费"},{"attributes":{"icon":"fa fa-book","url":"/moneyLog/elecLog"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"107","parentId":"106","text":"缴费记录"}],"hasChildren":true,"hasParent":false,"id":"106","parentId":"0","text":"收费管理"},{"attributes":{"icon":"fa fa-lightbulb-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/elec/elec"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"121","parentId":"103","text":"电费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"elec/elecInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"122","parentId":"103","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"elec/elecUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"123","parentId":"103","text":"电表上传"},{"attributes":{"icon":"fa fa-cc","url":"/elec/elecPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"124","parentId":"103","text":"电价管理"}],"hasChildren":true,"hasParent":false,"id":"103","parentId":"0","text":"电费管理"},{"attributes":{"icon":"fa fa-tint","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/water/water"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"117","parentId":"105","text":"水费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"water/waterInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"118","parentId":"105","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"water/waterUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"119","parentId":"105","text":"水费生成"},{"attributes":{"icon":"fa fa-cc","url":"/water/waterPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"120","parentId":"105","text":"水价管理"}],"hasChildren":true,"hasParent":false,"id":"105","parentId":"0","text":"水费管理"},{"attributes":{"icon":"fa fa-fire","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/heat/heat"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"113","parentId":"104","text":"暖费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"heat/heatInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"114","parentId":"104","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"heat/heatUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"115","parentId":"104","text":"暖费生成"},{"attributes":{"icon":"","url":"/heat/heatPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"116","parentId":"104","text":"暖价管理"}],"hasChildren":true,"hasParent":false,"id":"104","parentId":"0","text":"暖费管理"},{"attributes":{"icon":"fa fa-vcard-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-bomb","url":"/print/print"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"149","parentId":"108","text":"票据记录"}],"hasChildren":true,"hasParent":false,"id":"108","parentId":"0","text":"票据管理"},{"attributes":{"icon":"fa fa-bar-chart","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-area-chart","url":"/chart/graph_echarts.html"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","text":"百度chart"},{"attributes":{"icon":"fa fa-sun-o","url":"charts/countDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"109","parentId":"97","text":"日统计报表"},{"attributes":{"icon":"fa fa-registered","url":"charts/countMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"110","parentId":"97","text":"月统计报表"},{"attributes":{"icon":"fa fa-money","url":"charts/countOwe"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"155","parentId":"97","text":"欠费报表图"},{"attributes":{"icon":"fa fa-support","url":"charts/countYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"111","parentId":"97","text":"年统计报表"},{"attributes":{"icon":"fa fa-tachometer","url":"charts/countRun"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"112","parentId":"97","text":"走势图报表"}],"hasChildren":true,"hasParent":false,"id":"97","parentId":"0","text":"统计管理"},{"attributes":{"icon":"fa fa-bars","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-book","url":"/common/dict"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"78","parentId":"1","text":"数据字典"},{"attributes":{"icon":"fa fa-folder-open","url":"/common/sysFile"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"71","parentId":"1","text":"文件管理"}],"h(String), 127.0.0.1(String), 2019-04-03 09:48:25.261(Timestamp)
2019-04-03 09:48:25 -<==    Updates: 1
2019-04-03 09:48:25 -请求地址 : http://localhost:8081/main
2019-04-03 09:48:25 -HTTP METHOD : GET
2019-04-03 09:48:25 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 09:48:25 -参数 : []
2019-04-03 09:48:25 -耗时 : 1
2019-04-03 09:48:25 -返回值 : main
2019-04-03 09:48:25 -请求地址 : http://localhost:8081/oa/notify/message
2019-04-03 09:48:25 -HTTP METHOD : GET
2019-04-03 09:48:25 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2019-04-03 09:48:25 -参数 : []
2019-04-03 09:48:25 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2019-04-03 09:48:25 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2019-04-03 09:48:25 -<==      Total: 0
2019-04-03 09:48:25 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2019-04-03 09:48:26 -==> Parameters: 1(Long), 0(String)
2019-04-03 09:48:26 -<==      Total: 1
2019-04-03 09:48:26 -耗时 : 93
2019-04-03 09:48:26 -返回值 : com.bootdo.common.utils.PageUtils@668eebda
2019-04-03 09:48:26 -请求地址 : http://localhost:8081/main
2019-04-03 09:48:26 -HTTP METHOD : GET
2019-04-03 09:48:26 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 09:48:26 -参数 : []
2019-04-03 09:48:26 -耗时 : 1
2019-04-03 09:48:26 -返回值 : main
2019-04-03 09:48:29 -==>  Preparing: select distinct m.perms from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id = ur.role_id where ur.user_id = ? 
2019-04-03 09:48:29 -==> Parameters: 1(Long)
2019-04-03 09:48:29 -<==      Total: 90
2019-04-03 09:48:29 -请求地址 : http://localhost:8081/moneyList/moneyList
2019-04-03 09:48:29 -HTTP METHOD : GET
2019-04-03 09:48:29 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.MoneyList
2019-04-03 09:48:29 -参数 : []
2019-04-03 09:48:29 -耗时 : 0
2019-04-03 09:48:29 -返回值 : /moneyList/moneyList
2019-04-03 09:48:35 -请求地址 : http://localhost:8081/system/sysDept/treeView
2019-04-03 09:48:35 -HTTP METHOD : GET
2019-04-03 09:48:35 -CLASS_METHOD : com.bootdo.system.controller.DeptController.treeView
2019-04-03 09:48:35 -参数 : []
2019-04-03 09:48:35 -耗时 : 7
2019-04-03 09:48:35 -返回值 : system/dept/deptTree
2019-04-03 09:48:35 -请求地址 : http://localhost:8081/system/sysDept/tree
2019-04-03 09:48:35 -HTTP METHOD : GET
2019-04-03 09:48:35 -CLASS_METHOD : com.bootdo.system.controller.DeptController.tree
2019-04-03 09:48:35 -参数 : []
2019-04-03 09:48:35 -==>  Preparing: select `dept_id`,`parent_id`,`name`,`order_num`,`del_flag` from sys_dept order by dept_id desc 
2019-04-03 09:48:35 -==> Parameters: 
2019-04-03 09:48:35 -<==      Total: 3
2019-04-03 09:48:35 -耗时 : 143
2019-04-03 09:48:35 -返回值 : {"checked":false,"children":[{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"3","parentId":"1","state":{"opened":true},"text":"牙星"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"2","parentId":"1","state":{"opened":true},"text":"五九"}],"hasChildren":true,"hasParent":false,"id":"1","parentId":"0","state":{"opened":true},"text":"总公司"}
2019-04-03 09:48:39 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUser
2019-04-03 09:48:39 -HTTP METHOD : POST
2019-04-03 09:48:39 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.queryAllUser
2019-04-03 09:48:39 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@3a8879d5]
2019-04-03 09:48:39 -==>  Preparing: select COUNT(*) number, user_id, user_name, userOrgName, user_tell, user_state, elec_type usertype, elec_price userprice, elec_amount userarea, elec_cost usercost, elec_Sum usersum from elec WHERE user_Id = ? and create_time = ? and user_org = ? UNION ALL select COUNT(*) number, user_id, user_name, userOrgName, user_tell, user_state, heat_type usertype, heat_price userprice, heat_area userarea, heat_cost usercost, heat_Sum usersum from heat WHERE user_Id = ? and create_time = ? and user_org = ? UNION ALL select COUNT(*) number, user_id, user_name, userOrgName, user_tell, user_state, water_type usertype, water_price userprice, water_price userarea, water_price usercost, water_Sum usersum from water WHERE user_Id = ? and create_time = ? and user_org = ? 
2019-04-03 09:48:39 -==> Parameters: 1-0004(String), 2019-02(String), 2(String), 1-0004(String), 2019-02(String), 2(String), 1-0004(String), 2019-02(String), 2(String)
2019-04-03 09:48:39 -{conn-10001, pstmt-20009} execute error. select
                 
        COUNT(*) number,
        user_id,
	    user_name,
	    userOrgName,
	    user_tell,
	    user_state,
     
                 
       elec_type usertype,
	   elec_price userprice,
	   elec_amount userarea,
	   elec_cost usercost,
	   elec_Sum usersum
     
        from elec
         
         WHERE  user_Id = ?
            
            
                and create_time = ?
            
            
                and user_org = ? 
     
        UNION ALL select
                 
        COUNT(*) number,
        user_id,
	    user_name,
	    userOrgName,
	    user_tell,
	    user_state,
     
                 
       heat_type usertype,
	   heat_price userprice,
	   heat_area userarea,
	   heat_cost usercost,
	   heat_Sum usersum
     
        from heat
         
         WHERE  user_Id = ?
            
            
                and create_time = ?
            
            
                and user_org = ? 
     
        UNION ALL select
                 
        COUNT(*) number,
        user_id,
	    user_name,
	    userOrgName,
	    user_tell,
	    user_state,
     
                 
       water_type usertype,
	   water_price userprice,
	   water_price userarea,
	   water_price usercost,
	   water_Sum usersum
     
        from water
         
         WHERE  user_Id = ?
            
            
                and create_time = ?
            
            
                and user_org = ?
com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'userOrgName' in 'field list'
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(Unknown Source)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(Unknown Source)
	at java.lang.reflect.Constructor.newInstance(Unknown Source)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:425)
	at com.mysql.jdbc.Util.getInstance(Util.java:408)
	at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:944)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3976)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3912)
	at com.mysql.jdbc.MysqlIO.sendCommand(MysqlIO.java:2530)
	at com.mysql.jdbc.MysqlIO.sqlQueryDirect(MysqlIO.java:2683)
	at com.mysql.jdbc.ConnectionImpl.execSQL(ConnectionImpl.java:2486)
	at com.mysql.jdbc.PreparedStatement.executeInternal(PreparedStatement.java:1858)
	at com.mysql.jdbc.PreparedStatement.execute(PreparedStatement.java:1197)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2931)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2929)
	at com.alibaba.druid.wall.WallFilter.preparedStatement_execute(WallFilter.java:601)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2929)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2929)
	at com.alibaba.druid.proxy.jdbc.PreparedStatementProxyImpl.execute(PreparedStatementProxyImpl.java:131)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:493)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:59)
	at com.sun.proxy.$Proxy173.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.query(PreparedStatementHandler.java:63)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.query(RoutingStatementHandler.java:79)
	at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:63)
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:324)
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:156)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:109)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:83)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:148)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:141)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:434)
	at com.sun.proxy.$Proxy101.selectList(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:231)
	at org.apache.ibatis.binding.MapperMethod.executeForMany(MapperMethod.java:137)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:75)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy128.getAll(Unknown Source)
	at com.bootdo.moneyList.service.impl.MoneyListServiceImpl.getAll(MoneyListServiceImpl.java:21)
	at com.bootdo.moneyList.controller.MoneyListController.queryAllUser(MoneyListController.java:40)
	at com.bootdo.moneyList.controller.MoneyListController$$FastClassBySpringCGLIB$$8f8aea1c.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:204)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:746)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.bootdo.common.aspect.WebLogAspect.doAround(WebLogAspect.java:57)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.bootdo.moneyList.controller.MoneyListController$$EnhancerBySpringCGLIB$$d8a90e47.queryAllUser(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:209)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:877)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:783)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:991)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:925)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:974)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:877)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:661)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:851)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:61)
	at org.apache.shiro.web.servlet.AdviceFilter.executeChain(AdviceFilter.java:108)
	at org.apache.shiro.web.servlet.AdviceFilter.doFilterInternal(AdviceFilter.java:137)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:66)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)
	at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)
	at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)
	at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)
	at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:383)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:109)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:496)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:790)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1468)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Unknown Source)
2019-04-03 09:48:39 -Loading XML bean definitions from class path resource [org/springframework/jdbc/support/sql-error-codes.xml]
2019-04-03 09:48:39 -SQLErrorCodes loaded: [DB2, Derby, H2, HDB, HSQL, Informix, MS-SQL, MySQL, Oracle, PostgreSQL, Sybase]
2019-04-03 09:48:39 -
### Error querying database.  Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'userOrgName' in 'field list'
### The error may exist in file [D:\eclipse2018-work\bootdo\target\classes\mybatis\moneyList\MoneyListMapper.xml]
### The error may involve defaultParameterMap
### The error occurred while setting parameters
### SQL: select                           COUNT(*) number,         user_id,      user_name,      userOrgName,      user_tell,      user_state,                                elec_type usertype,     elec_price userprice,     elec_amount userarea,     elec_cost usercost,     elec_Sum usersum               from elec                    WHERE  user_Id = ?                                           and create_time = ?                                           and user_org = ?                UNION ALL select                           COUNT(*) number,         user_id,      user_name,      userOrgName,      user_tell,      user_state,                                heat_type usertype,     heat_price userprice,     heat_area userarea,     heat_cost usercost,     heat_Sum usersum               from heat                    WHERE  user_Id = ?                                           and create_time = ?                                           and user_org = ?                UNION ALL select                           COUNT(*) number,         user_id,      user_name,      userOrgName,      user_tell,      user_state,                                water_type usertype,     water_price userprice,     water_price userarea,     water_price usercost,     water_Sum usersum               from water                    WHERE  user_Id = ?                                           and create_time = ?                                           and user_org = ?
### Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'userOrgName' in 'field list'
; bad SQL grammar []; nested exception is com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'userOrgName' in 'field list'
org.springframework.jdbc.BadSqlGrammarException: 
### Error querying database.  Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'userOrgName' in 'field list'
### The error may exist in file [D:\eclipse2018-work\bootdo\target\classes\mybatis\moneyList\MoneyListMapper.xml]
### The error may involve defaultParameterMap
### The error occurred while setting parameters
### SQL: select                           COUNT(*) number,         user_id,      user_name,      userOrgName,      user_tell,      user_state,                                elec_type usertype,     elec_price userprice,     elec_amount userarea,     elec_cost usercost,     elec_Sum usersum               from elec                    WHERE  user_Id = ?                                           and create_time = ?                                           and user_org = ?                UNION ALL select                           COUNT(*) number,         user_id,      user_name,      userOrgName,      user_tell,      user_state,                                heat_type usertype,     heat_price userprice,     heat_area userarea,     heat_cost usercost,     heat_Sum usersum               from heat                    WHERE  user_Id = ?                                           and create_time = ?                                           and user_org = ?                UNION ALL select                           COUNT(*) number,         user_id,      user_name,      userOrgName,      user_tell,      user_state,                                water_type usertype,     water_price userprice,     water_price userarea,     water_price usercost,     water_Sum usersum               from water                    WHERE  user_Id = ?                                           and create_time = ?                                           and user_org = ?
### Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'userOrgName' in 'field list'
; bad SQL grammar []; nested exception is com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'userOrgName' in 'field list'
	at org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator.doTranslate(SQLErrorCodeSQLExceptionTranslator.java:234)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:72)
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:75)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:447)
	at com.sun.proxy.$Proxy101.selectList(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:231)
	at org.apache.ibatis.binding.MapperMethod.executeForMany(MapperMethod.java:137)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:75)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy128.getAll(Unknown Source)
	at com.bootdo.moneyList.service.impl.MoneyListServiceImpl.getAll(MoneyListServiceImpl.java:21)
	at com.bootdo.moneyList.controller.MoneyListController.queryAllUser(MoneyListController.java:40)
	at com.bootdo.moneyList.controller.MoneyListController$$FastClassBySpringCGLIB$$8f8aea1c.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:204)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:746)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.bootdo.common.aspect.WebLogAspect.doAround(WebLogAspect.java:57)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.bootdo.moneyList.controller.MoneyListController$$EnhancerBySpringCGLIB$$d8a90e47.queryAllUser(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:209)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:877)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:783)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:991)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:925)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:974)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:877)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:661)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:851)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:61)
	at org.apache.shiro.web.servlet.AdviceFilter.executeChain(AdviceFilter.java:108)
	at org.apache.shiro.web.servlet.AdviceFilter.doFilterInternal(AdviceFilter.java:137)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:66)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)
	at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)
	at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)
	at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)
	at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:383)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:109)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:496)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:790)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1468)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Unknown Source)
Caused by: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'userOrgName' in 'field list'
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(Unknown Source)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(Unknown Source)
	at java.lang.reflect.Constructor.newInstance(Unknown Source)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:425)
	at com.mysql.jdbc.Util.getInstance(Util.java:408)
	at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:944)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3976)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3912)
	at com.mysql.jdbc.MysqlIO.sendCommand(MysqlIO.java:2530)
	at com.mysql.jdbc.MysqlIO.sqlQueryDirect(MysqlIO.java:2683)
	at com.mysql.jdbc.ConnectionImpl.execSQL(ConnectionImpl.java:2486)
	at com.mysql.jdbc.PreparedStatement.executeInternal(PreparedStatement.java:1858)
	at com.mysql.jdbc.PreparedStatement.execute(PreparedStatement.java:1197)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2931)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2929)
	at com.alibaba.druid.wall.WallFilter.preparedStatement_execute(WallFilter.java:601)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2929)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2929)
	at com.alibaba.druid.proxy.jdbc.PreparedStatementProxyImpl.execute(PreparedStatementProxyImpl.java:131)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:493)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:59)
	at com.sun.proxy.$Proxy173.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.query(PreparedStatementHandler.java:63)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.query(RoutingStatementHandler.java:79)
	at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:63)
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:324)
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:156)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:109)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:83)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:148)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:141)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:434)
	... 101 common frames omitted
2019-04-03 09:48:39 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 09:48:39 -==> Parameters: 1(Long), admin(String), error(String), null, http://localhost:8081/moneyList/moneyList/queryAllUser(String), org.springframework.jdbc.BadSqlGrammarException: 
### Error querying database.  Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'userOrgName' in 'field list'
### The error may exist in file [D:\eclipse2018-work\bootdo\target\classes\mybatis\moneyList\MoneyListMapper.xml]
### The error may involve defaultParameterMap
### The error occurred while setting parameters
### SQL: select                           COUNT(*) number,         user_id,      user_name,      userOrgName,      user_tell,      user_state,                                elec_type usertype,     elec_price userprice,     elec_amount userarea,     elec_cost usercost,     elec_Sum usersum               from elec                    WHERE  user_Id = ?                                           and create_time = ?                                           and user_org = ?                UNION ALL select                           COUNT(*) number,         user_id,      user_name,      userOrgName,      user_tell,      user_state,                                heat_type usertype,     heat_price userprice,     heat_area userarea,     heat_cost usercost,     heat_Sum usersum               from heat                    WHERE  user_Id = ?                                           and create_time = ?                                           and user_org = ?                UNION ALL select                           COUNT(*) number,         user_id,      user_name,      userOrgName,      user_tell,      user_state,                                water_type usertype,     water_price userprice,     water_price userarea,     water_price usercost,     water_Sum usersum               from water                    WHERE  user_Id = ?                                           and create_time = ?                                           and user_org = ?
### Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'userOrgName' in 'field list'
; bad SQL grammar []; nested exception is com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'userOrgName' in 'field list'(String), null, 2019-04-03 09:48:39.913(Timestamp)
2019-04-03 09:48:40 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUser
2019-04-03 09:48:40 -HTTP METHOD : POST
2019-04-03 09:48:40 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.queryAllUser
2019-04-03 09:48:40 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@3f92f8d0]
2019-04-03 09:48:40 -<==    Updates: 1
2019-04-03 09:48:40 -==>  Preparing: select COUNT(*) number, user_id, user_name, userOrgName, user_tell, user_state, elec_type usertype, elec_price userprice, elec_amount userarea, elec_cost usercost, elec_Sum usersum from elec WHERE user_Id = ? and create_time = ? and user_org = ? UNION ALL select COUNT(*) number, user_id, user_name, userOrgName, user_tell, user_state, heat_type usertype, heat_price userprice, heat_area userarea, heat_cost usercost, heat_Sum usersum from heat WHERE user_Id = ? and create_time = ? and user_org = ? UNION ALL select COUNT(*) number, user_id, user_name, userOrgName, user_tell, user_state, water_type usertype, water_price userprice, water_price userarea, water_price usercost, water_Sum usersum from water WHERE user_Id = ? and create_time = ? and user_org = ? 
2019-04-03 09:48:40 -==> Parameters: 1-0004(String), 2019-02(String), 2(String), 1-0004(String), 2019-02(String), 2(String), 1-0004(String), 2019-02(String), 2(String)
2019-04-03 09:48:40 -{conn-10001, pstmt-20010} execute error. select
                 
        COUNT(*) number,
        user_id,
	    user_name,
	    userOrgName,
	    user_tell,
	    user_state,
     
                 
       elec_type usertype,
	   elec_price userprice,
	   elec_amount userarea,
	   elec_cost usercost,
	   elec_Sum usersum
     
        from elec
         
         WHERE  user_Id = ?
            
            
                and create_time = ?
            
            
                and user_org = ? 
     
        UNION ALL select
                 
        COUNT(*) number,
        user_id,
	    user_name,
	    userOrgName,
	    user_tell,
	    user_state,
     
                 
       heat_type usertype,
	   heat_price userprice,
	   heat_area userarea,
	   heat_cost usercost,
	   heat_Sum usersum
     
        from heat
         
         WHERE  user_Id = ?
            
            
                and create_time = ?
            
            
                and user_org = ? 
     
        UNION ALL select
                 
        COUNT(*) number,
        user_id,
	    user_name,
	    userOrgName,
	    user_tell,
	    user_state,
     
                 
       water_type usertype,
	   water_price userprice,
	   water_price userarea,
	   water_price usercost,
	   water_Sum usersum
     
        from water
         
         WHERE  user_Id = ?
            
            
                and create_time = ?
            
            
                and user_org = ?
com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'userOrgName' in 'field list'
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(Unknown Source)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(Unknown Source)
	at java.lang.reflect.Constructor.newInstance(Unknown Source)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:425)
	at com.mysql.jdbc.Util.getInstance(Util.java:408)
	at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:944)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3976)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3912)
	at com.mysql.jdbc.MysqlIO.sendCommand(MysqlIO.java:2530)
	at com.mysql.jdbc.MysqlIO.sqlQueryDirect(MysqlIO.java:2683)
	at com.mysql.jdbc.ConnectionImpl.execSQL(ConnectionImpl.java:2486)
	at com.mysql.jdbc.PreparedStatement.executeInternal(PreparedStatement.java:1858)
	at com.mysql.jdbc.PreparedStatement.execute(PreparedStatement.java:1197)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2931)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2929)
	at com.alibaba.druid.wall.WallFilter.preparedStatement_execute(WallFilter.java:601)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2929)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2929)
	at com.alibaba.druid.proxy.jdbc.PreparedStatementProxyImpl.execute(PreparedStatementProxyImpl.java:131)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:493)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:59)
	at com.sun.proxy.$Proxy173.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.query(PreparedStatementHandler.java:63)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.query(RoutingStatementHandler.java:79)
	at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:63)
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:324)
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:156)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:109)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:83)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:148)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:141)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:434)
	at com.sun.proxy.$Proxy101.selectList(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:231)
	at org.apache.ibatis.binding.MapperMethod.executeForMany(MapperMethod.java:137)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:75)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy128.getAll(Unknown Source)
	at com.bootdo.moneyList.service.impl.MoneyListServiceImpl.getAll(MoneyListServiceImpl.java:21)
	at com.bootdo.moneyList.controller.MoneyListController.queryAllUser(MoneyListController.java:40)
	at com.bootdo.moneyList.controller.MoneyListController$$FastClassBySpringCGLIB$$8f8aea1c.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:204)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:746)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.bootdo.common.aspect.WebLogAspect.doAround(WebLogAspect.java:57)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.bootdo.moneyList.controller.MoneyListController$$EnhancerBySpringCGLIB$$d8a90e47.queryAllUser(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:209)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:877)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:783)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:991)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:925)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:974)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:877)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:661)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:851)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:61)
	at org.apache.shiro.web.servlet.AdviceFilter.executeChain(AdviceFilter.java:108)
	at org.apache.shiro.web.servlet.AdviceFilter.doFilterInternal(AdviceFilter.java:137)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:66)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)
	at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)
	at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)
	at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)
	at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:383)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:109)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:496)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:790)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1468)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Unknown Source)
2019-04-03 09:48:40 -
### Error querying database.  Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'userOrgName' in 'field list'
### The error may exist in file [D:\eclipse2018-work\bootdo\target\classes\mybatis\moneyList\MoneyListMapper.xml]
### The error may involve defaultParameterMap
### The error occurred while setting parameters
### SQL: select                           COUNT(*) number,         user_id,      user_name,      userOrgName,      user_tell,      user_state,                                elec_type usertype,     elec_price userprice,     elec_amount userarea,     elec_cost usercost,     elec_Sum usersum               from elec                    WHERE  user_Id = ?                                           and create_time = ?                                           and user_org = ?                UNION ALL select                           COUNT(*) number,         user_id,      user_name,      userOrgName,      user_tell,      user_state,                                heat_type usertype,     heat_price userprice,     heat_area userarea,     heat_cost usercost,     heat_Sum usersum               from heat                    WHERE  user_Id = ?                                           and create_time = ?                                           and user_org = ?                UNION ALL select                           COUNT(*) number,         user_id,      user_name,      userOrgName,      user_tell,      user_state,                                water_type usertype,     water_price userprice,     water_price userarea,     water_price usercost,     water_Sum usersum               from water                    WHERE  user_Id = ?                                           and create_time = ?                                           and user_org = ?
### Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'userOrgName' in 'field list'
; bad SQL grammar []; nested exception is com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'userOrgName' in 'field list'
org.springframework.jdbc.BadSqlGrammarException: 
### Error querying database.  Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'userOrgName' in 'field list'
### The error may exist in file [D:\eclipse2018-work\bootdo\target\classes\mybatis\moneyList\MoneyListMapper.xml]
### The error may involve defaultParameterMap
### The error occurred while setting parameters
### SQL: select                           COUNT(*) number,         user_id,      user_name,      userOrgName,      user_tell,      user_state,                                elec_type usertype,     elec_price userprice,     elec_amount userarea,     elec_cost usercost,     elec_Sum usersum               from elec                    WHERE  user_Id = ?                                           and create_time = ?                                           and user_org = ?                UNION ALL select                           COUNT(*) number,         user_id,      user_name,      userOrgName,      user_tell,      user_state,                                heat_type usertype,     heat_price userprice,     heat_area userarea,     heat_cost usercost,     heat_Sum usersum               from heat                    WHERE  user_Id = ?                                           and create_time = ?                                           and user_org = ?                UNION ALL select                           COUNT(*) number,         user_id,      user_name,      userOrgName,      user_tell,      user_state,                                water_type usertype,     water_price userprice,     water_price userarea,     water_price usercost,     water_Sum usersum               from water                    WHERE  user_Id = ?                                           and create_time = ?                                           and user_org = ?
### Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'userOrgName' in 'field list'
; bad SQL grammar []; nested exception is com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'userOrgName' in 'field list'
	at org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator.doTranslate(SQLErrorCodeSQLExceptionTranslator.java:234)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:72)
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:75)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:447)
	at com.sun.proxy.$Proxy101.selectList(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:231)
	at org.apache.ibatis.binding.MapperMethod.executeForMany(MapperMethod.java:137)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:75)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy128.getAll(Unknown Source)
	at com.bootdo.moneyList.service.impl.MoneyListServiceImpl.getAll(MoneyListServiceImpl.java:21)
	at com.bootdo.moneyList.controller.MoneyListController.queryAllUser(MoneyListController.java:40)
	at com.bootdo.moneyList.controller.MoneyListController$$FastClassBySpringCGLIB$$8f8aea1c.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:204)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:746)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.bootdo.common.aspect.WebLogAspect.doAround(WebLogAspect.java:57)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.bootdo.moneyList.controller.MoneyListController$$EnhancerBySpringCGLIB$$d8a90e47.queryAllUser(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:209)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:877)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:783)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:991)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:925)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:974)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:877)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:661)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:851)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:61)
	at org.apache.shiro.web.servlet.AdviceFilter.executeChain(AdviceFilter.java:108)
	at org.apache.shiro.web.servlet.AdviceFilter.doFilterInternal(AdviceFilter.java:137)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:66)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)
	at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)
	at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)
	at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)
	at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:383)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:109)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:496)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:790)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1468)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Unknown Source)
Caused by: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'userOrgName' in 'field list'
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(Unknown Source)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(Unknown Source)
	at java.lang.reflect.Constructor.newInstance(Unknown Source)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:425)
	at com.mysql.jdbc.Util.getInstance(Util.java:408)
	at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:944)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3976)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3912)
	at com.mysql.jdbc.MysqlIO.sendCommand(MysqlIO.java:2530)
	at com.mysql.jdbc.MysqlIO.sqlQueryDirect(MysqlIO.java:2683)
	at com.mysql.jdbc.ConnectionImpl.execSQL(ConnectionImpl.java:2486)
	at com.mysql.jdbc.PreparedStatement.executeInternal(PreparedStatement.java:1858)
	at com.mysql.jdbc.PreparedStatement.execute(PreparedStatement.java:1197)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2931)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2929)
	at com.alibaba.druid.wall.WallFilter.preparedStatement_execute(WallFilter.java:601)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2929)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2929)
	at com.alibaba.druid.proxy.jdbc.PreparedStatementProxyImpl.execute(PreparedStatementProxyImpl.java:131)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:493)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:59)
	at com.sun.proxy.$Proxy173.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.query(PreparedStatementHandler.java:63)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.query(RoutingStatementHandler.java:79)
	at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:63)
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:324)
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:156)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:109)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:83)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:148)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:141)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:434)
	... 101 common frames omitted
2019-04-03 09:48:40 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 09:48:40 -==> Parameters: 1(Long), admin(String), error(String), null, http://localhost:8081/moneyList/moneyList/queryAllUser(String), org.springframework.jdbc.BadSqlGrammarException: 
### Error querying database.  Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'userOrgName' in 'field list'
### The error may exist in file [D:\eclipse2018-work\bootdo\target\classes\mybatis\moneyList\MoneyListMapper.xml]
### The error may involve defaultParameterMap
### The error occurred while setting parameters
### SQL: select                           COUNT(*) number,         user_id,      user_name,      userOrgName,      user_tell,      user_state,                                elec_type usertype,     elec_price userprice,     elec_amount userarea,     elec_cost usercost,     elec_Sum usersum               from elec                    WHERE  user_Id = ?                                           and create_time = ?                                           and user_org = ?                UNION ALL select                           COUNT(*) number,         user_id,      user_name,      userOrgName,      user_tell,      user_state,                                heat_type usertype,     heat_price userprice,     heat_area userarea,     heat_cost usercost,     heat_Sum usersum               from heat                    WHERE  user_Id = ?                                           and create_time = ?                                           and user_org = ?                UNION ALL select                           COUNT(*) number,         user_id,      user_name,      userOrgName,      user_tell,      user_state,                                water_type usertype,     water_price userprice,     water_price userarea,     water_price usercost,     water_Sum usersum               from water                    WHERE  user_Id = ?                                           and create_time = ?                                           and user_org = ?
### Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'userOrgName' in 'field list'
; bad SQL grammar []; nested exception is com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'userOrgName' in 'field list'(String), null, 2019-04-03 09:48:40.211(Timestamp)
2019-04-03 09:48:40 -<==    Updates: 1
2019-04-03 09:48:40 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUser
2019-04-03 09:48:40 -HTTP METHOD : POST
2019-04-03 09:48:40 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.queryAllUser
2019-04-03 09:48:40 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@3c02c178]
2019-04-03 09:48:40 -==>  Preparing: select COUNT(*) number, user_id, user_name, userOrgName, user_tell, user_state, elec_type usertype, elec_price userprice, elec_amount userarea, elec_cost usercost, elec_Sum usersum from elec WHERE user_Id = ? and create_time = ? and user_org = ? UNION ALL select COUNT(*) number, user_id, user_name, userOrgName, user_tell, user_state, heat_type usertype, heat_price userprice, heat_area userarea, heat_cost usercost, heat_Sum usersum from heat WHERE user_Id = ? and create_time = ? and user_org = ? UNION ALL select COUNT(*) number, user_id, user_name, userOrgName, user_tell, user_state, water_type usertype, water_price userprice, water_price userarea, water_price usercost, water_Sum usersum from water WHERE user_Id = ? and create_time = ? and user_org = ? 
2019-04-03 09:48:40 -==> Parameters: 1-0004(String), 2019-02(String), 2(String), 1-0004(String), 2019-02(String), 2(String), 1-0004(String), 2019-02(String), 2(String)
2019-04-03 09:48:40 -{conn-10001, pstmt-20011} execute error. select
                 
        COUNT(*) number,
        user_id,
	    user_name,
	    userOrgName,
	    user_tell,
	    user_state,
     
                 
       elec_type usertype,
	   elec_price userprice,
	   elec_amount userarea,
	   elec_cost usercost,
	   elec_Sum usersum
     
        from elec
         
         WHERE  user_Id = ?
            
            
                and create_time = ?
            
            
                and user_org = ? 
     
        UNION ALL select
                 
        COUNT(*) number,
        user_id,
	    user_name,
	    userOrgName,
	    user_tell,
	    user_state,
     
                 
       heat_type usertype,
	   heat_price userprice,
	   heat_area userarea,
	   heat_cost usercost,
	   heat_Sum usersum
     
        from heat
         
         WHERE  user_Id = ?
            
            
                and create_time = ?
            
            
                and user_org = ? 
     
        UNION ALL select
                 
        COUNT(*) number,
        user_id,
	    user_name,
	    userOrgName,
	    user_tell,
	    user_state,
     
                 
       water_type usertype,
	   water_price userprice,
	   water_price userarea,
	   water_price usercost,
	   water_Sum usersum
     
        from water
         
         WHERE  user_Id = ?
            
            
                and create_time = ?
            
            
                and user_org = ?
com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'userOrgName' in 'field list'
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(Unknown Source)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(Unknown Source)
	at java.lang.reflect.Constructor.newInstance(Unknown Source)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:425)
	at com.mysql.jdbc.Util.getInstance(Util.java:408)
	at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:944)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3976)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3912)
	at com.mysql.jdbc.MysqlIO.sendCommand(MysqlIO.java:2530)
	at com.mysql.jdbc.MysqlIO.sqlQueryDirect(MysqlIO.java:2683)
	at com.mysql.jdbc.ConnectionImpl.execSQL(ConnectionImpl.java:2486)
	at com.mysql.jdbc.PreparedStatement.executeInternal(PreparedStatement.java:1858)
	at com.mysql.jdbc.PreparedStatement.execute(PreparedStatement.java:1197)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2931)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2929)
	at com.alibaba.druid.wall.WallFilter.preparedStatement_execute(WallFilter.java:601)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2929)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2929)
	at com.alibaba.druid.proxy.jdbc.PreparedStatementProxyImpl.execute(PreparedStatementProxyImpl.java:131)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:493)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:59)
	at com.sun.proxy.$Proxy173.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.query(PreparedStatementHandler.java:63)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.query(RoutingStatementHandler.java:79)
	at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:63)
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:324)
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:156)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:109)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:83)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:148)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:141)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:434)
	at com.sun.proxy.$Proxy101.selectList(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:231)
	at org.apache.ibatis.binding.MapperMethod.executeForMany(MapperMethod.java:137)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:75)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy128.getAll(Unknown Source)
	at com.bootdo.moneyList.service.impl.MoneyListServiceImpl.getAll(MoneyListServiceImpl.java:21)
	at com.bootdo.moneyList.controller.MoneyListController.queryAllUser(MoneyListController.java:40)
	at com.bootdo.moneyList.controller.MoneyListController$$FastClassBySpringCGLIB$$8f8aea1c.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:204)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:746)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.bootdo.common.aspect.WebLogAspect.doAround(WebLogAspect.java:57)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.bootdo.moneyList.controller.MoneyListController$$EnhancerBySpringCGLIB$$d8a90e47.queryAllUser(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:209)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:877)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:783)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:991)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:925)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:974)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:877)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:661)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:851)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:61)
	at org.apache.shiro.web.servlet.AdviceFilter.executeChain(AdviceFilter.java:108)
	at org.apache.shiro.web.servlet.AdviceFilter.doFilterInternal(AdviceFilter.java:137)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:66)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)
	at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)
	at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)
	at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)
	at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:383)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:109)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:496)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:790)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1468)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Unknown Source)
2019-04-03 09:48:40 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 09:48:40 -
### Error querying database.  Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'userOrgName' in 'field list'
### The error may exist in file [D:\eclipse2018-work\bootdo\target\classes\mybatis\moneyList\MoneyListMapper.xml]
### The error may involve defaultParameterMap
### The error occurred while setting parameters
### SQL: select                           COUNT(*) number,         user_id,      user_name,      userOrgName,      user_tell,      user_state,                                elec_type usertype,     elec_price userprice,     elec_amount userarea,     elec_cost usercost,     elec_Sum usersum               from elec                    WHERE  user_Id = ?                                           and create_time = ?                                           and user_org = ?                UNION ALL select                           COUNT(*) number,         user_id,      user_name,      userOrgName,      user_tell,      user_state,                                heat_type usertype,     heat_price userprice,     heat_area userarea,     heat_cost usercost,     heat_Sum usersum               from heat                    WHERE  user_Id = ?                                           and create_time = ?                                           and user_org = ?                UNION ALL select                           COUNT(*) number,         user_id,      user_name,      userOrgName,      user_tell,      user_state,                                water_type usertype,     water_price userprice,     water_price userarea,     water_price usercost,     water_Sum usersum               from water                    WHERE  user_Id = ?                                           and create_time = ?                                           and user_org = ?
### Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'userOrgName' in 'field list'
; bad SQL grammar []; nested exception is com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'userOrgName' in 'field list'
org.springframework.jdbc.BadSqlGrammarException: 
### Error querying database.  Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'userOrgName' in 'field list'
### The error may exist in file [D:\eclipse2018-work\bootdo\target\classes\mybatis\moneyList\MoneyListMapper.xml]
### The error may involve defaultParameterMap
### The error occurred while setting parameters
### SQL: select                           COUNT(*) number,         user_id,      user_name,      userOrgName,      user_tell,      user_state,                                elec_type usertype,     elec_price userprice,     elec_amount userarea,     elec_cost usercost,     elec_Sum usersum               from elec                    WHERE  user_Id = ?                                           and create_time = ?                                           and user_org = ?                UNION ALL select                           COUNT(*) number,         user_id,      user_name,      userOrgName,      user_tell,      user_state,                                heat_type usertype,     heat_price userprice,     heat_area userarea,     heat_cost usercost,     heat_Sum usersum               from heat                    WHERE  user_Id = ?                                           and create_time = ?                                           and user_org = ?                UNION ALL select                           COUNT(*) number,         user_id,      user_name,      userOrgName,      user_tell,      user_state,                                water_type usertype,     water_price userprice,     water_price userarea,     water_price usercost,     water_Sum usersum               from water                    WHERE  user_Id = ?                                           and create_time = ?                                           and user_org = ?
### Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'userOrgName' in 'field list'
; bad SQL grammar []; nested exception is com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'userOrgName' in 'field list'
	at org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator.doTranslate(SQLErrorCodeSQLExceptionTranslator.java:234)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:72)
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:75)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:447)
	at com.sun.proxy.$Proxy101.selectList(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:231)
	at org.apache.ibatis.binding.MapperMethod.executeForMany(MapperMethod.java:137)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:75)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy128.getAll(Unknown Source)
	at com.bootdo.moneyList.service.impl.MoneyListServiceImpl.getAll(MoneyListServiceImpl.java:21)
	at com.bootdo.moneyList.controller.MoneyListController.queryAllUser(MoneyListController.java:40)
	at com.bootdo.moneyList.controller.MoneyListController$$FastClassBySpringCGLIB$$8f8aea1c.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:204)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:746)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.bootdo.common.aspect.WebLogAspect.doAround(WebLogAspect.java:57)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.bootdo.moneyList.controller.MoneyListController$$EnhancerBySpringCGLIB$$d8a90e47.queryAllUser(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:209)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:877)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:783)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:991)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:925)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:974)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:877)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:661)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:851)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:61)
	at org.apache.shiro.web.servlet.AdviceFilter.executeChain(AdviceFilter.java:108)
	at org.apache.shiro.web.servlet.AdviceFilter.doFilterInternal(AdviceFilter.java:137)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:66)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)
	at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)
	at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)
	at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)
	at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:383)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:109)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:496)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:790)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1468)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Unknown Source)
Caused by: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'userOrgName' in 'field list'
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(Unknown Source)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(Unknown Source)
	at java.lang.reflect.Constructor.newInstance(Unknown Source)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:425)
	at com.mysql.jdbc.Util.getInstance(Util.java:408)
	at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:944)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3976)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3912)
	at com.mysql.jdbc.MysqlIO.sendCommand(MysqlIO.java:2530)
	at com.mysql.jdbc.MysqlIO.sqlQueryDirect(MysqlIO.java:2683)
	at com.mysql.jdbc.ConnectionImpl.execSQL(ConnectionImpl.java:2486)
	at com.mysql.jdbc.PreparedStatement.executeInternal(PreparedStatement.java:1858)
	at com.mysql.jdbc.PreparedStatement.execute(PreparedStatement.java:1197)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2931)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2929)
	at com.alibaba.druid.wall.WallFilter.preparedStatement_execute(WallFilter.java:601)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2929)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2929)
	at com.alibaba.druid.proxy.jdbc.PreparedStatementProxyImpl.execute(PreparedStatementProxyImpl.java:131)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:493)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:59)
	at com.sun.proxy.$Proxy173.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.query(PreparedStatementHandler.java:63)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.query(RoutingStatementHandler.java:79)
	at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:63)
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:324)
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:156)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:109)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:83)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:148)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:141)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:434)
	... 101 common frames omitted
2019-04-03 09:48:40 -==> Parameters: 1(Long), admin(String), error(String), null, http://localhost:8081/moneyList/moneyList/queryAllUser(String), org.springframework.jdbc.BadSqlGrammarException: 
### Error querying database.  Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'userOrgName' in 'field list'
### The error may exist in file [D:\eclipse2018-work\bootdo\target\classes\mybatis\moneyList\MoneyListMapper.xml]
### The error may involve defaultParameterMap
### The error occurred while setting parameters
### SQL: select                           COUNT(*) number,         user_id,      user_name,      userOrgName,      user_tell,      user_state,                                elec_type usertype,     elec_price userprice,     elec_amount userarea,     elec_cost usercost,     elec_Sum usersum               from elec                    WHERE  user_Id = ?                                           and create_time = ?                                           and user_org = ?                UNION ALL select                           COUNT(*) number,         user_id,      user_name,      userOrgName,      user_tell,      user_state,                                heat_type usertype,     heat_price userprice,     heat_area userarea,     heat_cost usercost,     heat_Sum usersum               from heat                    WHERE  user_Id = ?                                           and create_time = ?                                           and user_org = ?                UNION ALL select                           COUNT(*) number,         user_id,      user_name,      userOrgName,      user_tell,      user_state,                                water_type usertype,     water_price userprice,     water_price userarea,     water_price usercost,     water_Sum usersum               from water                    WHERE  user_Id = ?                                           and create_time = ?                                           and user_org = ?
### Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'userOrgName' in 'field list'
; bad SQL grammar []; nested exception is com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'userOrgName' in 'field list'(String), null, 2019-04-03 09:48:40.524(Timestamp)
2019-04-03 09:48:40 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUser
2019-04-03 09:48:40 -HTTP METHOD : POST
2019-04-03 09:48:40 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.queryAllUser
2019-04-03 09:48:40 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@31e32068]
2019-04-03 09:48:40 -<==    Updates: 1
2019-04-03 09:48:40 -==>  Preparing: select COUNT(*) number, user_id, user_name, userOrgName, user_tell, user_state, elec_type usertype, elec_price userprice, elec_amount userarea, elec_cost usercost, elec_Sum usersum from elec WHERE user_Id = ? and create_time = ? and user_org = ? UNION ALL select COUNT(*) number, user_id, user_name, userOrgName, user_tell, user_state, heat_type usertype, heat_price userprice, heat_area userarea, heat_cost usercost, heat_Sum usersum from heat WHERE user_Id = ? and create_time = ? and user_org = ? UNION ALL select COUNT(*) number, user_id, user_name, userOrgName, user_tell, user_state, water_type usertype, water_price userprice, water_price userarea, water_price usercost, water_Sum usersum from water WHERE user_Id = ? and create_time = ? and user_org = ? 
2019-04-03 09:48:40 -==> Parameters: 1-0004(String), 2019-02(String), 2(String), 1-0004(String), 2019-02(String), 2(String), 1-0004(String), 2019-02(String), 2(String)
2019-04-03 09:48:40 -{conn-10001, pstmt-20012} execute error. select
                 
        COUNT(*) number,
        user_id,
	    user_name,
	    userOrgName,
	    user_tell,
	    user_state,
     
                 
       elec_type usertype,
	   elec_price userprice,
	   elec_amount userarea,
	   elec_cost usercost,
	   elec_Sum usersum
     
        from elec
         
         WHERE  user_Id = ?
            
            
                and create_time = ?
            
            
                and user_org = ? 
     
        UNION ALL select
                 
        COUNT(*) number,
        user_id,
	    user_name,
	    userOrgName,
	    user_tell,
	    user_state,
     
                 
       heat_type usertype,
	   heat_price userprice,
	   heat_area userarea,
	   heat_cost usercost,
	   heat_Sum usersum
     
        from heat
         
         WHERE  user_Id = ?
            
            
                and create_time = ?
            
            
                and user_org = ? 
     
        UNION ALL select
                 
        COUNT(*) number,
        user_id,
	    user_name,
	    userOrgName,
	    user_tell,
	    user_state,
     
                 
       water_type usertype,
	   water_price userprice,
	   water_price userarea,
	   water_price usercost,
	   water_Sum usersum
     
        from water
         
         WHERE  user_Id = ?
            
            
                and create_time = ?
            
            
                and user_org = ?
com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'userOrgName' in 'field list'
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(Unknown Source)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(Unknown Source)
	at java.lang.reflect.Constructor.newInstance(Unknown Source)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:425)
	at com.mysql.jdbc.Util.getInstance(Util.java:408)
	at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:944)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3976)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3912)
	at com.mysql.jdbc.MysqlIO.sendCommand(MysqlIO.java:2530)
	at com.mysql.jdbc.MysqlIO.sqlQueryDirect(MysqlIO.java:2683)
	at com.mysql.jdbc.ConnectionImpl.execSQL(ConnectionImpl.java:2486)
	at com.mysql.jdbc.PreparedStatement.executeInternal(PreparedStatement.java:1858)
	at com.mysql.jdbc.PreparedStatement.execute(PreparedStatement.java:1197)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2931)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2929)
	at com.alibaba.druid.wall.WallFilter.preparedStatement_execute(WallFilter.java:601)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2929)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2929)
	at com.alibaba.druid.proxy.jdbc.PreparedStatementProxyImpl.execute(PreparedStatementProxyImpl.java:131)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:493)
	at sun.reflect.GeneratedMethodAccessor129.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:59)
	at com.sun.proxy.$Proxy173.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.query(PreparedStatementHandler.java:63)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.query(RoutingStatementHandler.java:79)
	at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:63)
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:324)
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:156)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:109)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:83)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:148)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:141)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:434)
	at com.sun.proxy.$Proxy101.selectList(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:231)
	at org.apache.ibatis.binding.MapperMethod.executeForMany(MapperMethod.java:137)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:75)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy128.getAll(Unknown Source)
	at com.bootdo.moneyList.service.impl.MoneyListServiceImpl.getAll(MoneyListServiceImpl.java:21)
	at com.bootdo.moneyList.controller.MoneyListController.queryAllUser(MoneyListController.java:40)
	at com.bootdo.moneyList.controller.MoneyListController$$FastClassBySpringCGLIB$$8f8aea1c.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:204)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:746)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.bootdo.common.aspect.WebLogAspect.doAround(WebLogAspect.java:57)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.bootdo.moneyList.controller.MoneyListController$$EnhancerBySpringCGLIB$$d8a90e47.queryAllUser(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:209)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:877)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:783)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:991)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:925)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:974)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:877)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:661)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:851)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:61)
	at org.apache.shiro.web.servlet.AdviceFilter.executeChain(AdviceFilter.java:108)
	at org.apache.shiro.web.servlet.AdviceFilter.doFilterInternal(AdviceFilter.java:137)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:66)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)
	at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)
	at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)
	at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)
	at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:383)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:109)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:496)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:790)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1468)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Unknown Source)
2019-04-03 09:48:40 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 09:48:40 -
### Error querying database.  Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'userOrgName' in 'field list'
### The error may exist in file [D:\eclipse2018-work\bootdo\target\classes\mybatis\moneyList\MoneyListMapper.xml]
### The error may involve defaultParameterMap
### The error occurred while setting parameters
### SQL: select                           COUNT(*) number,         user_id,      user_name,      userOrgName,      user_tell,      user_state,                                elec_type usertype,     elec_price userprice,     elec_amount userarea,     elec_cost usercost,     elec_Sum usersum               from elec                    WHERE  user_Id = ?                                           and create_time = ?                                           and user_org = ?                UNION ALL select                           COUNT(*) number,         user_id,      user_name,      userOrgName,      user_tell,      user_state,                                heat_type usertype,     heat_price userprice,     heat_area userarea,     heat_cost usercost,     heat_Sum usersum               from heat                    WHERE  user_Id = ?                                           and create_time = ?                                           and user_org = ?                UNION ALL select                           COUNT(*) number,         user_id,      user_name,      userOrgName,      user_tell,      user_state,                                water_type usertype,     water_price userprice,     water_price userarea,     water_price usercost,     water_Sum usersum               from water                    WHERE  user_Id = ?                                           and create_time = ?                                           and user_org = ?
### Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'userOrgName' in 'field list'
; bad SQL grammar []; nested exception is com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'userOrgName' in 'field list'
org.springframework.jdbc.BadSqlGrammarException: 
### Error querying database.  Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'userOrgName' in 'field list'
### The error may exist in file [D:\eclipse2018-work\bootdo\target\classes\mybatis\moneyList\MoneyListMapper.xml]
### The error may involve defaultParameterMap
### The error occurred while setting parameters
### SQL: select                           COUNT(*) number,         user_id,      user_name,      userOrgName,      user_tell,      user_state,                                elec_type usertype,     elec_price userprice,     elec_amount userarea,     elec_cost usercost,     elec_Sum usersum               from elec                    WHERE  user_Id = ?                                           and create_time = ?                                           and user_org = ?                UNION ALL select                           COUNT(*) number,         user_id,      user_name,      userOrgName,      user_tell,      user_state,                                heat_type usertype,     heat_price userprice,     heat_area userarea,     heat_cost usercost,     heat_Sum usersum               from heat                    WHERE  user_Id = ?                                           and create_time = ?                                           and user_org = ?                UNION ALL select                           COUNT(*) number,         user_id,      user_name,      userOrgName,      user_tell,      user_state,                                water_type usertype,     water_price userprice,     water_price userarea,     water_price usercost,     water_Sum usersum               from water                    WHERE  user_Id = ?                                           and create_time = ?                                           and user_org = ?
### Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'userOrgName' in 'field list'
; bad SQL grammar []; nested exception is com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'userOrgName' in 'field list'
	at org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator.doTranslate(SQLErrorCodeSQLExceptionTranslator.java:234)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:72)
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:75)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:447)
	at com.sun.proxy.$Proxy101.selectList(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:231)
	at org.apache.ibatis.binding.MapperMethod.executeForMany(MapperMethod.java:137)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:75)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy128.getAll(Unknown Source)
	at com.bootdo.moneyList.service.impl.MoneyListServiceImpl.getAll(MoneyListServiceImpl.java:21)
	at com.bootdo.moneyList.controller.MoneyListController.queryAllUser(MoneyListController.java:40)
	at com.bootdo.moneyList.controller.MoneyListController$$FastClassBySpringCGLIB$$8f8aea1c.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:204)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:746)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.bootdo.common.aspect.WebLogAspect.doAround(WebLogAspect.java:57)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.bootdo.moneyList.controller.MoneyListController$$EnhancerBySpringCGLIB$$d8a90e47.queryAllUser(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:209)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:877)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:783)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:991)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:925)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:974)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:877)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:661)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:851)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:61)
	at org.apache.shiro.web.servlet.AdviceFilter.executeChain(AdviceFilter.java:108)
	at org.apache.shiro.web.servlet.AdviceFilter.doFilterInternal(AdviceFilter.java:137)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:66)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)
	at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)
	at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)
	at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)
	at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:383)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:109)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:496)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:790)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1468)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Unknown Source)
Caused by: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'userOrgName' in 'field list'
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(Unknown Source)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(Unknown Source)
	at java.lang.reflect.Constructor.newInstance(Unknown Source)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:425)
	at com.mysql.jdbc.Util.getInstance(Util.java:408)
	at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:944)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3976)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3912)
	at com.mysql.jdbc.MysqlIO.sendCommand(MysqlIO.java:2530)
	at com.mysql.jdbc.MysqlIO.sqlQueryDirect(MysqlIO.java:2683)
	at com.mysql.jdbc.ConnectionImpl.execSQL(ConnectionImpl.java:2486)
	at com.mysql.jdbc.PreparedStatement.executeInternal(PreparedStatement.java:1858)
	at com.mysql.jdbc.PreparedStatement.execute(PreparedStatement.java:1197)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2931)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2929)
	at com.alibaba.druid.wall.WallFilter.preparedStatement_execute(WallFilter.java:601)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2929)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2929)
	at com.alibaba.druid.proxy.jdbc.PreparedStatementProxyImpl.execute(PreparedStatementProxyImpl.java:131)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:493)
	at sun.reflect.GeneratedMethodAccessor129.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:59)
	at com.sun.proxy.$Proxy173.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.query(PreparedStatementHandler.java:63)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.query(RoutingStatementHandler.java:79)
	at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:63)
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:324)
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:156)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:109)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:83)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:148)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:141)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:434)
	... 101 common frames omitted
2019-04-03 09:48:40 -==> Parameters: 1(Long), admin(String), error(String), null, http://localhost:8081/moneyList/moneyList/queryAllUser(String), org.springframework.jdbc.BadSqlGrammarException: 
### Error querying database.  Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'userOrgName' in 'field list'
### The error may exist in file [D:\eclipse2018-work\bootdo\target\classes\mybatis\moneyList\MoneyListMapper.xml]
### The error may involve defaultParameterMap
### The error occurred while setting parameters
### SQL: select                           COUNT(*) number,         user_id,      user_name,      userOrgName,      user_tell,      user_state,                                elec_type usertype,     elec_price userprice,     elec_amount userarea,     elec_cost usercost,     elec_Sum usersum               from elec                    WHERE  user_Id = ?                                           and create_time = ?                                           and user_org = ?                UNION ALL select                           COUNT(*) number,         user_id,      user_name,      userOrgName,      user_tell,      user_state,                                heat_type usertype,     heat_price userprice,     heat_area userarea,     heat_cost usercost,     heat_Sum usersum               from heat                    WHERE  user_Id = ?                                           and create_time = ?                                           and user_org = ?                UNION ALL select                           COUNT(*) number,         user_id,      user_name,      userOrgName,      user_tell,      user_state,                                water_type usertype,     water_price userprice,     water_price userarea,     water_price usercost,     water_Sum usersum               from water                    WHERE  user_Id = ?                                           and create_time = ?                                           and user_org = ?
### Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'userOrgName' in 'field list'
; bad SQL grammar []; nested exception is com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'userOrgName' in 'field list'(String), null, 2019-04-03 09:48:40.74(Timestamp)
2019-04-03 09:48:40 -<==    Updates: 1
2019-04-03 09:48:41 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUser
2019-04-03 09:48:41 -HTTP METHOD : POST
2019-04-03 09:48:41 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.queryAllUser
2019-04-03 09:48:41 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@b1f82fe]
2019-04-03 09:48:41 -==>  Preparing: select COUNT(*) number, user_id, user_name, userOrgName, user_tell, user_state, elec_type usertype, elec_price userprice, elec_amount userarea, elec_cost usercost, elec_Sum usersum from elec WHERE user_Id = ? and create_time = ? and user_org = ? UNION ALL select COUNT(*) number, user_id, user_name, userOrgName, user_tell, user_state, heat_type usertype, heat_price userprice, heat_area userarea, heat_cost usercost, heat_Sum usersum from heat WHERE user_Id = ? and create_time = ? and user_org = ? UNION ALL select COUNT(*) number, user_id, user_name, userOrgName, user_tell, user_state, water_type usertype, water_price userprice, water_price userarea, water_price usercost, water_Sum usersum from water WHERE user_Id = ? and create_time = ? and user_org = ? 
2019-04-03 09:48:41 -==> Parameters: 1-0004(String), 2019-02(String), 2(String), 1-0004(String), 2019-02(String), 2(String), 1-0004(String), 2019-02(String), 2(String)
2019-04-03 09:48:41 -{conn-10001, pstmt-20013} execute error. select
                 
        COUNT(*) number,
        user_id,
	    user_name,
	    userOrgName,
	    user_tell,
	    user_state,
     
                 
       elec_type usertype,
	   elec_price userprice,
	   elec_amount userarea,
	   elec_cost usercost,
	   elec_Sum usersum
     
        from elec
         
         WHERE  user_Id = ?
            
            
                and create_time = ?
            
            
                and user_org = ? 
     
        UNION ALL select
                 
        COUNT(*) number,
        user_id,
	    user_name,
	    userOrgName,
	    user_tell,
	    user_state,
     
                 
       heat_type usertype,
	   heat_price userprice,
	   heat_area userarea,
	   heat_cost usercost,
	   heat_Sum usersum
     
        from heat
         
         WHERE  user_Id = ?
            
            
                and create_time = ?
            
            
                and user_org = ? 
     
        UNION ALL select
                 
        COUNT(*) number,
        user_id,
	    user_name,
	    userOrgName,
	    user_tell,
	    user_state,
     
                 
       water_type usertype,
	   water_price userprice,
	   water_price userarea,
	   water_price usercost,
	   water_Sum usersum
     
        from water
         
         WHERE  user_Id = ?
            
            
                and create_time = ?
            
            
                and user_org = ?
com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'userOrgName' in 'field list'
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(Unknown Source)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(Unknown Source)
	at java.lang.reflect.Constructor.newInstance(Unknown Source)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:425)
	at com.mysql.jdbc.Util.getInstance(Util.java:408)
	at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:944)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3976)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3912)
	at com.mysql.jdbc.MysqlIO.sendCommand(MysqlIO.java:2530)
	at com.mysql.jdbc.MysqlIO.sqlQueryDirect(MysqlIO.java:2683)
	at com.mysql.jdbc.ConnectionImpl.execSQL(ConnectionImpl.java:2486)
	at com.mysql.jdbc.PreparedStatement.executeInternal(PreparedStatement.java:1858)
	at com.mysql.jdbc.PreparedStatement.execute(PreparedStatement.java:1197)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2931)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2929)
	at com.alibaba.druid.wall.WallFilter.preparedStatement_execute(WallFilter.java:601)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2929)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2929)
	at com.alibaba.druid.proxy.jdbc.PreparedStatementProxyImpl.execute(PreparedStatementProxyImpl.java:131)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:493)
	at sun.reflect.GeneratedMethodAccessor129.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:59)
	at com.sun.proxy.$Proxy173.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.query(PreparedStatementHandler.java:63)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.query(RoutingStatementHandler.java:79)
	at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:63)
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:324)
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:156)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:109)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:83)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:148)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:141)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:434)
	at com.sun.proxy.$Proxy101.selectList(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:231)
	at org.apache.ibatis.binding.MapperMethod.executeForMany(MapperMethod.java:137)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:75)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy128.getAll(Unknown Source)
	at com.bootdo.moneyList.service.impl.MoneyListServiceImpl.getAll(MoneyListServiceImpl.java:21)
	at com.bootdo.moneyList.controller.MoneyListController.queryAllUser(MoneyListController.java:40)
	at com.bootdo.moneyList.controller.MoneyListController$$FastClassBySpringCGLIB$$8f8aea1c.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:204)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:746)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.bootdo.common.aspect.WebLogAspect.doAround(WebLogAspect.java:57)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.bootdo.moneyList.controller.MoneyListController$$EnhancerBySpringCGLIB$$d8a90e47.queryAllUser(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:209)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:877)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:783)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:991)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:925)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:974)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:877)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:661)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:851)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:61)
	at org.apache.shiro.web.servlet.AdviceFilter.executeChain(AdviceFilter.java:108)
	at org.apache.shiro.web.servlet.AdviceFilter.doFilterInternal(AdviceFilter.java:137)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:66)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)
	at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)
	at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)
	at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)
	at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:383)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:109)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:496)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:790)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1468)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Unknown Source)
2019-04-03 09:48:41 -
### Error querying database.  Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'userOrgName' in 'field list'
### The error may exist in file [D:\eclipse2018-work\bootdo\target\classes\mybatis\moneyList\MoneyListMapper.xml]
### The error may involve defaultParameterMap
### The error occurred while setting parameters
### SQL: select                           COUNT(*) number,         user_id,      user_name,      userOrgName,      user_tell,      user_state,                                elec_type usertype,     elec_price userprice,     elec_amount userarea,     elec_cost usercost,     elec_Sum usersum               from elec                    WHERE  user_Id = ?                                           and create_time = ?                                           and user_org = ?                UNION ALL select                           COUNT(*) number,         user_id,      user_name,      userOrgName,      user_tell,      user_state,                                heat_type usertype,     heat_price userprice,     heat_area userarea,     heat_cost usercost,     heat_Sum usersum               from heat                    WHERE  user_Id = ?                                           and create_time = ?                                           and user_org = ?                UNION ALL select                           COUNT(*) number,         user_id,      user_name,      userOrgName,      user_tell,      user_state,                                water_type usertype,     water_price userprice,     water_price userarea,     water_price usercost,     water_Sum usersum               from water                    WHERE  user_Id = ?                                           and create_time = ?                                           and user_org = ?
### Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'userOrgName' in 'field list'
; bad SQL grammar []; nested exception is com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'userOrgName' in 'field list'
org.springframework.jdbc.BadSqlGrammarException: 
### Error querying database.  Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'userOrgName' in 'field list'
### The error may exist in file [D:\eclipse2018-work\bootdo\target\classes\mybatis\moneyList\MoneyListMapper.xml]
### The error may involve defaultParameterMap
### The error occurred while setting parameters
### SQL: select                           COUNT(*) number,         user_id,      user_name,      userOrgName,      user_tell,      user_state,                                elec_type usertype,     elec_price userprice,     elec_amount userarea,     elec_cost usercost,     elec_Sum usersum               from elec                    WHERE  user_Id = ?                                           and create_time = ?                                           and user_org = ?                UNION ALL select                           COUNT(*) number,         user_id,      user_name,      userOrgName,      user_tell,      user_state,                                heat_type usertype,     heat_price userprice,     heat_area userarea,     heat_cost usercost,     heat_Sum usersum               from heat                    WHERE  user_Id = ?                                           and create_time = ?                                           and user_org = ?                UNION ALL select                           COUNT(*) number,         user_id,      user_name,      userOrgName,      user_tell,      user_state,                                water_type usertype,     water_price userprice,     water_price userarea,     water_price usercost,     water_Sum usersum               from water                    WHERE  user_Id = ?                                           and create_time = ?                                           and user_org = ?
### Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'userOrgName' in 'field list'
; bad SQL grammar []; nested exception is com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'userOrgName' in 'field list'
	at org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator.doTranslate(SQLErrorCodeSQLExceptionTranslator.java:234)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:72)
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:75)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:447)
	at com.sun.proxy.$Proxy101.selectList(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:231)
	at org.apache.ibatis.binding.MapperMethod.executeForMany(MapperMethod.java:137)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:75)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy128.getAll(Unknown Source)
	at com.bootdo.moneyList.service.impl.MoneyListServiceImpl.getAll(MoneyListServiceImpl.java:21)
	at com.bootdo.moneyList.controller.MoneyListController.queryAllUser(MoneyListController.java:40)
	at com.bootdo.moneyList.controller.MoneyListController$$FastClassBySpringCGLIB$$8f8aea1c.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:204)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:746)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.bootdo.common.aspect.WebLogAspect.doAround(WebLogAspect.java:57)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.bootdo.moneyList.controller.MoneyListController$$EnhancerBySpringCGLIB$$d8a90e47.queryAllUser(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:209)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:877)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:783)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:991)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:925)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:974)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:877)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:661)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:851)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:61)
	at org.apache.shiro.web.servlet.AdviceFilter.executeChain(AdviceFilter.java:108)
	at org.apache.shiro.web.servlet.AdviceFilter.doFilterInternal(AdviceFilter.java:137)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:66)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)
	at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)
	at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)
	at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)
	at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:383)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:109)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:496)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:790)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1468)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Unknown Source)
Caused by: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'userOrgName' in 'field list'
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(Unknown Source)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(Unknown Source)
	at java.lang.reflect.Constructor.newInstance(Unknown Source)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:425)
	at com.mysql.jdbc.Util.getInstance(Util.java:408)
	at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:944)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3976)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3912)
	at com.mysql.jdbc.MysqlIO.sendCommand(MysqlIO.java:2530)
	at com.mysql.jdbc.MysqlIO.sqlQueryDirect(MysqlIO.java:2683)
	at com.mysql.jdbc.ConnectionImpl.execSQL(ConnectionImpl.java:2486)
	at com.mysql.jdbc.PreparedStatement.executeInternal(PreparedStatement.java:1858)
	at com.mysql.jdbc.PreparedStatement.execute(PreparedStatement.java:1197)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2931)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2929)
	at com.alibaba.druid.wall.WallFilter.preparedStatement_execute(WallFilter.java:601)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2929)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2929)
	at com.alibaba.druid.proxy.jdbc.PreparedStatementProxyImpl.execute(PreparedStatementProxyImpl.java:131)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:493)
	at sun.reflect.GeneratedMethodAccessor129.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:59)
	at com.sun.proxy.$Proxy173.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.query(PreparedStatementHandler.java:63)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.query(RoutingStatementHandler.java:79)
	at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:63)
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:324)
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:156)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:109)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:83)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:148)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:141)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:434)
	... 101 common frames omitted
2019-04-03 09:48:41 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 09:48:41 -==> Parameters: 1(Long), admin(String), error(String), null, http://localhost:8081/moneyList/moneyList/queryAllUser(String), org.springframework.jdbc.BadSqlGrammarException: 
### Error querying database.  Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'userOrgName' in 'field list'
### The error may exist in file [D:\eclipse2018-work\bootdo\target\classes\mybatis\moneyList\MoneyListMapper.xml]
### The error may involve defaultParameterMap
### The error occurred while setting parameters
### SQL: select                           COUNT(*) number,         user_id,      user_name,      userOrgName,      user_tell,      user_state,                                elec_type usertype,     elec_price userprice,     elec_amount userarea,     elec_cost usercost,     elec_Sum usersum               from elec                    WHERE  user_Id = ?                                           and create_time = ?                                           and user_org = ?                UNION ALL select                           COUNT(*) number,         user_id,      user_name,      userOrgName,      user_tell,      user_state,                                heat_type usertype,     heat_price userprice,     heat_area userarea,     heat_cost usercost,     heat_Sum usersum               from heat                    WHERE  user_Id = ?                                           and create_time = ?                                           and user_org = ?                UNION ALL select                           COUNT(*) number,         user_id,      user_name,      userOrgName,      user_tell,      user_state,                                water_type usertype,     water_price userprice,     water_price userarea,     water_price usercost,     water_Sum usersum               from water                    WHERE  user_Id = ?                                           and create_time = ?                                           and user_org = ?
### Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'userOrgName' in 'field list'
; bad SQL grammar []; nested exception is com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'userOrgName' in 'field list'(String), null, 2019-04-03 09:48:41.747(Timestamp)
2019-04-03 09:48:41 -<==    Updates: 1
2019-04-03 09:48:42 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUser
2019-04-03 09:48:42 -HTTP METHOD : POST
2019-04-03 09:48:42 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.queryAllUser
2019-04-03 09:48:42 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@1f3e0b8]
2019-04-03 09:48:42 -==>  Preparing: select COUNT(*) number, user_id, user_name, userOrgName, user_tell, user_state, elec_type usertype, elec_price userprice, elec_amount userarea, elec_cost usercost, elec_Sum usersum from elec WHERE user_Id = ? and create_time = ? and user_org = ? UNION ALL select COUNT(*) number, user_id, user_name, userOrgName, user_tell, user_state, heat_type usertype, heat_price userprice, heat_area userarea, heat_cost usercost, heat_Sum usersum from heat WHERE user_Id = ? and create_time = ? and user_org = ? UNION ALL select COUNT(*) number, user_id, user_name, userOrgName, user_tell, user_state, water_type usertype, water_price userprice, water_price userarea, water_price usercost, water_Sum usersum from water WHERE user_Id = ? and create_time = ? and user_org = ? 
2019-04-03 09:48:42 -==> Parameters: 1-0004(String), 2019-02(String), 2(String), 1-0004(String), 2019-02(String), 2(String), 1-0004(String), 2019-02(String), 2(String)
2019-04-03 09:48:42 -{conn-10001, pstmt-20014} execute error. select
                 
        COUNT(*) number,
        user_id,
	    user_name,
	    userOrgName,
	    user_tell,
	    user_state,
     
                 
       elec_type usertype,
	   elec_price userprice,
	   elec_amount userarea,
	   elec_cost usercost,
	   elec_Sum usersum
     
        from elec
         
         WHERE  user_Id = ?
            
            
                and create_time = ?
            
            
                and user_org = ? 
     
        UNION ALL select
                 
        COUNT(*) number,
        user_id,
	    user_name,
	    userOrgName,
	    user_tell,
	    user_state,
     
                 
       heat_type usertype,
	   heat_price userprice,
	   heat_area userarea,
	   heat_cost usercost,
	   heat_Sum usersum
     
        from heat
         
         WHERE  user_Id = ?
            
            
                and create_time = ?
            
            
                and user_org = ? 
     
        UNION ALL select
                 
        COUNT(*) number,
        user_id,
	    user_name,
	    userOrgName,
	    user_tell,
	    user_state,
     
                 
       water_type usertype,
	   water_price userprice,
	   water_price userarea,
	   water_price usercost,
	   water_Sum usersum
     
        from water
         
         WHERE  user_Id = ?
            
            
                and create_time = ?
            
            
                and user_org = ?
com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'userOrgName' in 'field list'
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(Unknown Source)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(Unknown Source)
	at java.lang.reflect.Constructor.newInstance(Unknown Source)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:425)
	at com.mysql.jdbc.Util.getInstance(Util.java:408)
	at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:944)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3976)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3912)
	at com.mysql.jdbc.MysqlIO.sendCommand(MysqlIO.java:2530)
	at com.mysql.jdbc.MysqlIO.sqlQueryDirect(MysqlIO.java:2683)
	at com.mysql.jdbc.ConnectionImpl.execSQL(ConnectionImpl.java:2486)
	at com.mysql.jdbc.PreparedStatement.executeInternal(PreparedStatement.java:1858)
	at com.mysql.jdbc.PreparedStatement.execute(PreparedStatement.java:1197)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2931)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2929)
	at com.alibaba.druid.wall.WallFilter.preparedStatement_execute(WallFilter.java:601)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2929)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2929)
	at com.alibaba.druid.proxy.jdbc.PreparedStatementProxyImpl.execute(PreparedStatementProxyImpl.java:131)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:493)
	at sun.reflect.GeneratedMethodAccessor129.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:59)
	at com.sun.proxy.$Proxy173.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.query(PreparedStatementHandler.java:63)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.query(RoutingStatementHandler.java:79)
	at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:63)
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:324)
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:156)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:109)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:83)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:148)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:141)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:434)
	at com.sun.proxy.$Proxy101.selectList(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:231)
	at org.apache.ibatis.binding.MapperMethod.executeForMany(MapperMethod.java:137)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:75)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy128.getAll(Unknown Source)
	at com.bootdo.moneyList.service.impl.MoneyListServiceImpl.getAll(MoneyListServiceImpl.java:21)
	at com.bootdo.moneyList.controller.MoneyListController.queryAllUser(MoneyListController.java:40)
	at com.bootdo.moneyList.controller.MoneyListController$$FastClassBySpringCGLIB$$8f8aea1c.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:204)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:746)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.bootdo.common.aspect.WebLogAspect.doAround(WebLogAspect.java:57)
	at sun.reflect.GeneratedMethodAccessor131.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.bootdo.moneyList.controller.MoneyListController$$EnhancerBySpringCGLIB$$d8a90e47.queryAllUser(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:209)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:877)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:783)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:991)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:925)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:974)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:877)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:661)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:851)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:61)
	at org.apache.shiro.web.servlet.AdviceFilter.executeChain(AdviceFilter.java:108)
	at org.apache.shiro.web.servlet.AdviceFilter.doFilterInternal(AdviceFilter.java:137)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:66)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)
	at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)
	at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)
	at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)
	at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:383)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:109)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:496)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:790)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1468)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Unknown Source)
2019-04-03 09:48:42 -
### Error querying database.  Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'userOrgName' in 'field list'
### The error may exist in file [D:\eclipse2018-work\bootdo\target\classes\mybatis\moneyList\MoneyListMapper.xml]
### The error may involve defaultParameterMap
### The error occurred while setting parameters
### SQL: select                           COUNT(*) number,         user_id,      user_name,      userOrgName,      user_tell,      user_state,                                elec_type usertype,     elec_price userprice,     elec_amount userarea,     elec_cost usercost,     elec_Sum usersum               from elec                    WHERE  user_Id = ?                                           and create_time = ?                                           and user_org = ?                UNION ALL select                           COUNT(*) number,         user_id,      user_name,      userOrgName,      user_tell,      user_state,                                heat_type usertype,     heat_price userprice,     heat_area userarea,     heat_cost usercost,     heat_Sum usersum               from heat                    WHERE  user_Id = ?                                           and create_time = ?                                           and user_org = ?                UNION ALL select                           COUNT(*) number,         user_id,      user_name,      userOrgName,      user_tell,      user_state,                                water_type usertype,     water_price userprice,     water_price userarea,     water_price usercost,     water_Sum usersum               from water                    WHERE  user_Id = ?                                           and create_time = ?                                           and user_org = ?
### Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'userOrgName' in 'field list'
; bad SQL grammar []; nested exception is com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'userOrgName' in 'field list'
org.springframework.jdbc.BadSqlGrammarException: 
### Error querying database.  Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'userOrgName' in 'field list'
### The error may exist in file [D:\eclipse2018-work\bootdo\target\classes\mybatis\moneyList\MoneyListMapper.xml]
### The error may involve defaultParameterMap
### The error occurred while setting parameters
### SQL: select                           COUNT(*) number,         user_id,      user_name,      userOrgName,      user_tell,      user_state,                                elec_type usertype,     elec_price userprice,     elec_amount userarea,     elec_cost usercost,     elec_Sum usersum               from elec                    WHERE  user_Id = ?                                           and create_time = ?                                           and user_org = ?                UNION ALL select                           COUNT(*) number,         user_id,      user_name,      userOrgName,      user_tell,      user_state,                                heat_type usertype,     heat_price userprice,     heat_area userarea,     heat_cost usercost,     heat_Sum usersum               from heat                    WHERE  user_Id = ?                                           and create_time = ?                                           and user_org = ?                UNION ALL select                           COUNT(*) number,         user_id,      user_name,      userOrgName,      user_tell,      user_state,                                water_type usertype,     water_price userprice,     water_price userarea,     water_price usercost,     water_Sum usersum               from water                    WHERE  user_Id = ?                                           and create_time = ?                                           and user_org = ?
### Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'userOrgName' in 'field list'
; bad SQL grammar []; nested exception is com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'userOrgName' in 'field list'
	at org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator.doTranslate(SQLErrorCodeSQLExceptionTranslator.java:234)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:72)
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:75)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:447)
	at com.sun.proxy.$Proxy101.selectList(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:231)
	at org.apache.ibatis.binding.MapperMethod.executeForMany(MapperMethod.java:137)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:75)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy128.getAll(Unknown Source)
	at com.bootdo.moneyList.service.impl.MoneyListServiceImpl.getAll(MoneyListServiceImpl.java:21)
	at com.bootdo.moneyList.controller.MoneyListController.queryAllUser(MoneyListController.java:40)
	at com.bootdo.moneyList.controller.MoneyListController$$FastClassBySpringCGLIB$$8f8aea1c.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:204)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:746)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.bootdo.common.aspect.WebLogAspect.doAround(WebLogAspect.java:57)
	at sun.reflect.GeneratedMethodAccessor131.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.bootdo.moneyList.controller.MoneyListController$$EnhancerBySpringCGLIB$$d8a90e47.queryAllUser(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:209)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:877)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:783)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:991)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:925)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:974)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:877)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:661)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:851)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:61)
	at org.apache.shiro.web.servlet.AdviceFilter.executeChain(AdviceFilter.java:108)
	at org.apache.shiro.web.servlet.AdviceFilter.doFilterInternal(AdviceFilter.java:137)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:66)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)
	at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)
	at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)
	at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)
	at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:383)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:109)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:496)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:790)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1468)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Unknown Source)
Caused by: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'userOrgName' in 'field list'
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(Unknown Source)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(Unknown Source)
	at java.lang.reflect.Constructor.newInstance(Unknown Source)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:425)
	at com.mysql.jdbc.Util.getInstance(Util.java:408)
	at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:944)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3976)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3912)
	at com.mysql.jdbc.MysqlIO.sendCommand(MysqlIO.java:2530)
	at com.mysql.jdbc.MysqlIO.sqlQueryDirect(MysqlIO.java:2683)
	at com.mysql.jdbc.ConnectionImpl.execSQL(ConnectionImpl.java:2486)
	at com.mysql.jdbc.PreparedStatement.executeInternal(PreparedStatement.java:1858)
	at com.mysql.jdbc.PreparedStatement.execute(PreparedStatement.java:1197)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2931)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2929)
	at com.alibaba.druid.wall.WallFilter.preparedStatement_execute(WallFilter.java:601)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2929)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2929)
	at com.alibaba.druid.proxy.jdbc.PreparedStatementProxyImpl.execute(PreparedStatementProxyImpl.java:131)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:493)
	at sun.reflect.GeneratedMethodAccessor129.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:59)
	at com.sun.proxy.$Proxy173.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.query(PreparedStatementHandler.java:63)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.query(RoutingStatementHandler.java:79)
	at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:63)
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:324)
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:156)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:109)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:83)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:148)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:141)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:434)
	... 100 common frames omitted
2019-04-03 09:48:42 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 09:48:42 -==> Parameters: 1(Long), admin(String), error(String), null, http://localhost:8081/moneyList/moneyList/queryAllUser(String), org.springframework.jdbc.BadSqlGrammarException: 
### Error querying database.  Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'userOrgName' in 'field list'
### The error may exist in file [D:\eclipse2018-work\bootdo\target\classes\mybatis\moneyList\MoneyListMapper.xml]
### The error may involve defaultParameterMap
### The error occurred while setting parameters
### SQL: select                           COUNT(*) number,         user_id,      user_name,      userOrgName,      user_tell,      user_state,                                elec_type usertype,     elec_price userprice,     elec_amount userarea,     elec_cost usercost,     elec_Sum usersum               from elec                    WHERE  user_Id = ?                                           and create_time = ?                                           and user_org = ?                UNION ALL select                           COUNT(*) number,         user_id,      user_name,      userOrgName,      user_tell,      user_state,                                heat_type usertype,     heat_price userprice,     heat_area userarea,     heat_cost usercost,     heat_Sum usersum               from heat                    WHERE  user_Id = ?                                           and create_time = ?                                           and user_org = ?                UNION ALL select                           COUNT(*) number,         user_id,      user_name,      userOrgName,      user_tell,      user_state,                                water_type usertype,     water_price userprice,     water_price userarea,     water_price usercost,     water_Sum usersum               from water                    WHERE  user_Id = ?                                           and create_time = ?                                           and user_org = ?
### Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'userOrgName' in 'field list'
; bad SQL grammar []; nested exception is com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'userOrgName' in 'field list'(String), null, 2019-04-03 09:48:42.574(Timestamp)
2019-04-03 09:48:42 -<==    Updates: 1
2019-04-03 09:48:42 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUser
2019-04-03 09:48:42 -HTTP METHOD : POST
2019-04-03 09:48:42 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.queryAllUser
2019-04-03 09:48:42 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@3aa1b0b7]
2019-04-03 09:48:42 -==>  Preparing: select COUNT(*) number, user_id, user_name, userOrgName, user_tell, user_state, elec_type usertype, elec_price userprice, elec_amount userarea, elec_cost usercost, elec_Sum usersum from elec WHERE user_Id = ? and create_time = ? and user_org = ? UNION ALL select COUNT(*) number, user_id, user_name, userOrgName, user_tell, user_state, heat_type usertype, heat_price userprice, heat_area userarea, heat_cost usercost, heat_Sum usersum from heat WHERE user_Id = ? and create_time = ? and user_org = ? UNION ALL select COUNT(*) number, user_id, user_name, userOrgName, user_tell, user_state, water_type usertype, water_price userprice, water_price userarea, water_price usercost, water_Sum usersum from water WHERE user_Id = ? and create_time = ? and user_org = ? 
2019-04-03 09:48:42 -==> Parameters: 1-0004(String), 2019-02(String), 2(String), 1-0004(String), 2019-02(String), 2(String), 1-0004(String), 2019-02(String), 2(String)
2019-04-03 09:48:42 -{conn-10001, pstmt-20015} execute error. select
                 
        COUNT(*) number,
        user_id,
	    user_name,
	    userOrgName,
	    user_tell,
	    user_state,
     
                 
       elec_type usertype,
	   elec_price userprice,
	   elec_amount userarea,
	   elec_cost usercost,
	   elec_Sum usersum
     
        from elec
         
         WHERE  user_Id = ?
            
            
                and create_time = ?
            
            
                and user_org = ? 
     
        UNION ALL select
                 
        COUNT(*) number,
        user_id,
	    user_name,
	    userOrgName,
	    user_tell,
	    user_state,
     
                 
       heat_type usertype,
	   heat_price userprice,
	   heat_area userarea,
	   heat_cost usercost,
	   heat_Sum usersum
     
        from heat
         
         WHERE  user_Id = ?
            
            
                and create_time = ?
            
            
                and user_org = ? 
     
        UNION ALL select
                 
        COUNT(*) number,
        user_id,
	    user_name,
	    userOrgName,
	    user_tell,
	    user_state,
     
                 
       water_type usertype,
	   water_price userprice,
	   water_price userarea,
	   water_price usercost,
	   water_Sum usersum
     
        from water
         
         WHERE  user_Id = ?
            
            
                and create_time = ?
            
            
                and user_org = ?
com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'userOrgName' in 'field list'
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(Unknown Source)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(Unknown Source)
	at java.lang.reflect.Constructor.newInstance(Unknown Source)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:425)
	at com.mysql.jdbc.Util.getInstance(Util.java:408)
	at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:944)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3976)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3912)
	at com.mysql.jdbc.MysqlIO.sendCommand(MysqlIO.java:2530)
	at com.mysql.jdbc.MysqlIO.sqlQueryDirect(MysqlIO.java:2683)
	at com.mysql.jdbc.ConnectionImpl.execSQL(ConnectionImpl.java:2486)
	at com.mysql.jdbc.PreparedStatement.executeInternal(PreparedStatement.java:1858)
	at com.mysql.jdbc.PreparedStatement.execute(PreparedStatement.java:1197)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2931)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2929)
	at com.alibaba.druid.wall.WallFilter.preparedStatement_execute(WallFilter.java:601)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2929)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2929)
	at com.alibaba.druid.proxy.jdbc.PreparedStatementProxyImpl.execute(PreparedStatementProxyImpl.java:131)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:493)
	at sun.reflect.GeneratedMethodAccessor129.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:59)
	at com.sun.proxy.$Proxy173.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.query(PreparedStatementHandler.java:63)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.query(RoutingStatementHandler.java:79)
	at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:63)
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:324)
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:156)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:109)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:83)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:148)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:141)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:434)
	at com.sun.proxy.$Proxy101.selectList(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:231)
	at org.apache.ibatis.binding.MapperMethod.executeForMany(MapperMethod.java:137)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:75)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy128.getAll(Unknown Source)
	at com.bootdo.moneyList.service.impl.MoneyListServiceImpl.getAll(MoneyListServiceImpl.java:21)
	at com.bootdo.moneyList.controller.MoneyListController.queryAllUser(MoneyListController.java:40)
	at com.bootdo.moneyList.controller.MoneyListController$$FastClassBySpringCGLIB$$8f8aea1c.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:204)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:746)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.bootdo.common.aspect.WebLogAspect.doAround(WebLogAspect.java:57)
	at sun.reflect.GeneratedMethodAccessor131.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.bootdo.moneyList.controller.MoneyListController$$EnhancerBySpringCGLIB$$d8a90e47.queryAllUser(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:209)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:877)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:783)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:991)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:925)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:974)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:877)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:661)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:851)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:61)
	at org.apache.shiro.web.servlet.AdviceFilter.executeChain(AdviceFilter.java:108)
	at org.apache.shiro.web.servlet.AdviceFilter.doFilterInternal(AdviceFilter.java:137)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:66)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)
	at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)
	at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)
	at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)
	at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:383)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:109)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:496)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:790)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1468)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Unknown Source)
2019-04-03 09:48:42 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 09:48:42 -
### Error querying database.  Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'userOrgName' in 'field list'
### The error may exist in file [D:\eclipse2018-work\bootdo\target\classes\mybatis\moneyList\MoneyListMapper.xml]
### The error may involve defaultParameterMap
### The error occurred while setting parameters
### SQL: select                           COUNT(*) number,         user_id,      user_name,      userOrgName,      user_tell,      user_state,                                elec_type usertype,     elec_price userprice,     elec_amount userarea,     elec_cost usercost,     elec_Sum usersum               from elec                    WHERE  user_Id = ?                                           and create_time = ?                                           and user_org = ?                UNION ALL select                           COUNT(*) number,         user_id,      user_name,      userOrgName,      user_tell,      user_state,                                heat_type usertype,     heat_price userprice,     heat_area userarea,     heat_cost usercost,     heat_Sum usersum               from heat                    WHERE  user_Id = ?                                           and create_time = ?                                           and user_org = ?                UNION ALL select                           COUNT(*) number,         user_id,      user_name,      userOrgName,      user_tell,      user_state,                                water_type usertype,     water_price userprice,     water_price userarea,     water_price usercost,     water_Sum usersum               from water                    WHERE  user_Id = ?                                           and create_time = ?                                           and user_org = ?
### Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'userOrgName' in 'field list'
; bad SQL grammar []; nested exception is com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'userOrgName' in 'field list'
org.springframework.jdbc.BadSqlGrammarException: 
### Error querying database.  Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'userOrgName' in 'field list'
### The error may exist in file [D:\eclipse2018-work\bootdo\target\classes\mybatis\moneyList\MoneyListMapper.xml]
### The error may involve defaultParameterMap
### The error occurred while setting parameters
### SQL: select                           COUNT(*) number,         user_id,      user_name,      userOrgName,      user_tell,      user_state,                                elec_type usertype,     elec_price userprice,     elec_amount userarea,     elec_cost usercost,     elec_Sum usersum               from elec                    WHERE  user_Id = ?                                           and create_time = ?                                           and user_org = ?                UNION ALL select                           COUNT(*) number,         user_id,      user_name,      userOrgName,      user_tell,      user_state,                                heat_type usertype,     heat_price userprice,     heat_area userarea,     heat_cost usercost,     heat_Sum usersum               from heat                    WHERE  user_Id = ?                                           and create_time = ?                                           and user_org = ?                UNION ALL select                           COUNT(*) number,         user_id,      user_name,      userOrgName,      user_tell,      user_state,                                water_type usertype,     water_price userprice,     water_price userarea,     water_price usercost,     water_Sum usersum               from water                    WHERE  user_Id = ?                                           and create_time = ?                                           and user_org = ?
### Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'userOrgName' in 'field list'
; bad SQL grammar []; nested exception is com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'userOrgName' in 'field list'
	at org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator.doTranslate(SQLErrorCodeSQLExceptionTranslator.java:234)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:72)
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:75)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:447)
	at com.sun.proxy.$Proxy101.selectList(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:231)
	at org.apache.ibatis.binding.MapperMethod.executeForMany(MapperMethod.java:137)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:75)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy128.getAll(Unknown Source)
	at com.bootdo.moneyList.service.impl.MoneyListServiceImpl.getAll(MoneyListServiceImpl.java:21)
	at com.bootdo.moneyList.controller.MoneyListController.queryAllUser(MoneyListController.java:40)
	at com.bootdo.moneyList.controller.MoneyListController$$FastClassBySpringCGLIB$$8f8aea1c.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:204)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:746)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.bootdo.common.aspect.WebLogAspect.doAround(WebLogAspect.java:57)
	at sun.reflect.GeneratedMethodAccessor131.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.bootdo.moneyList.controller.MoneyListController$$EnhancerBySpringCGLIB$$d8a90e47.queryAllUser(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:209)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:877)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:783)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:991)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:925)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:974)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:877)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:661)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:851)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:61)
	at org.apache.shiro.web.servlet.AdviceFilter.executeChain(AdviceFilter.java:108)
	at org.apache.shiro.web.servlet.AdviceFilter.doFilterInternal(AdviceFilter.java:137)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:66)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)
	at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)
	at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)
	at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)
	at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:383)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:109)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:496)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:790)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1468)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Unknown Source)
Caused by: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'userOrgName' in 'field list'
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(Unknown Source)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(Unknown Source)
	at java.lang.reflect.Constructor.newInstance(Unknown Source)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:425)
	at com.mysql.jdbc.Util.getInstance(Util.java:408)
	at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:944)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3976)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3912)
	at com.mysql.jdbc.MysqlIO.sendCommand(MysqlIO.java:2530)
	at com.mysql.jdbc.MysqlIO.sqlQueryDirect(MysqlIO.java:2683)
	at com.mysql.jdbc.ConnectionImpl.execSQL(ConnectionImpl.java:2486)
	at com.mysql.jdbc.PreparedStatement.executeInternal(PreparedStatement.java:1858)
	at com.mysql.jdbc.PreparedStatement.execute(PreparedStatement.java:1197)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2931)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2929)
	at com.alibaba.druid.wall.WallFilter.preparedStatement_execute(WallFilter.java:601)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2929)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2929)
	at com.alibaba.druid.proxy.jdbc.PreparedStatementProxyImpl.execute(PreparedStatementProxyImpl.java:131)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:493)
	at sun.reflect.GeneratedMethodAccessor129.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:59)
	at com.sun.proxy.$Proxy173.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.query(PreparedStatementHandler.java:63)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.query(RoutingStatementHandler.java:79)
	at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:63)
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:324)
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:156)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:109)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:83)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:148)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:141)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:434)
	... 100 common frames omitted
2019-04-03 09:48:42 -==> Parameters: 1(Long), admin(String), error(String), null, http://localhost:8081/moneyList/moneyList/queryAllUser(String), org.springframework.jdbc.BadSqlGrammarException: 
### Error querying database.  Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'userOrgName' in 'field list'
### The error may exist in file [D:\eclipse2018-work\bootdo\target\classes\mybatis\moneyList\MoneyListMapper.xml]
### The error may involve defaultParameterMap
### The error occurred while setting parameters
### SQL: select                           COUNT(*) number,         user_id,      user_name,      userOrgName,      user_tell,      user_state,                                elec_type usertype,     elec_price userprice,     elec_amount userarea,     elec_cost usercost,     elec_Sum usersum               from elec                    WHERE  user_Id = ?                                           and create_time = ?                                           and user_org = ?                UNION ALL select                           COUNT(*) number,         user_id,      user_name,      userOrgName,      user_tell,      user_state,                                heat_type usertype,     heat_price userprice,     heat_area userarea,     heat_cost usercost,     heat_Sum usersum               from heat                    WHERE  user_Id = ?                                           and create_time = ?                                           and user_org = ?                UNION ALL select                           COUNT(*) number,         user_id,      user_name,      userOrgName,      user_tell,      user_state,                                water_type usertype,     water_price userprice,     water_price userarea,     water_price usercost,     water_Sum usersum               from water                    WHERE  user_Id = ?                                           and create_time = ?                                           and user_org = ?
### Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'userOrgName' in 'field list'
; bad SQL grammar []; nested exception is com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'userOrgName' in 'field list'(String), null, 2019-04-03 09:48:42.812(Timestamp)
2019-04-03 09:48:42 -<==    Updates: 1
2019-04-03 09:48:43 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUser
2019-04-03 09:48:43 -HTTP METHOD : POST
2019-04-03 09:48:43 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.queryAllUser
2019-04-03 09:48:43 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@22037e86]
2019-04-03 09:48:43 -==>  Preparing: select COUNT(*) number, user_id, user_name, userOrgName, user_tell, user_state, elec_type usertype, elec_price userprice, elec_amount userarea, elec_cost usercost, elec_Sum usersum from elec WHERE user_Id = ? and create_time = ? and user_org = ? UNION ALL select COUNT(*) number, user_id, user_name, userOrgName, user_tell, user_state, heat_type usertype, heat_price userprice, heat_area userarea, heat_cost usercost, heat_Sum usersum from heat WHERE user_Id = ? and create_time = ? and user_org = ? UNION ALL select COUNT(*) number, user_id, user_name, userOrgName, user_tell, user_state, water_type usertype, water_price userprice, water_price userarea, water_price usercost, water_Sum usersum from water WHERE user_Id = ? and create_time = ? and user_org = ? 
2019-04-03 09:48:43 -==> Parameters: 1-0004(String), 2019-02(String), 2(String), 1-0004(String), 2019-02(String), 2(String), 1-0004(String), 2019-02(String), 2(String)
2019-04-03 09:48:43 -{conn-10001, pstmt-20016} execute error. select
                 
        COUNT(*) number,
        user_id,
	    user_name,
	    userOrgName,
	    user_tell,
	    user_state,
     
                 
       elec_type usertype,
	   elec_price userprice,
	   elec_amount userarea,
	   elec_cost usercost,
	   elec_Sum usersum
     
        from elec
         
         WHERE  user_Id = ?
            
            
                and create_time = ?
            
            
                and user_org = ? 
     
        UNION ALL select
                 
        COUNT(*) number,
        user_id,
	    user_name,
	    userOrgName,
	    user_tell,
	    user_state,
     
                 
       heat_type usertype,
	   heat_price userprice,
	   heat_area userarea,
	   heat_cost usercost,
	   heat_Sum usersum
     
        from heat
         
         WHERE  user_Id = ?
            
            
                and create_time = ?
            
            
                and user_org = ? 
     
        UNION ALL select
                 
        COUNT(*) number,
        user_id,
	    user_name,
	    userOrgName,
	    user_tell,
	    user_state,
     
                 
       water_type usertype,
	   water_price userprice,
	   water_price userarea,
	   water_price usercost,
	   water_Sum usersum
     
        from water
         
         WHERE  user_Id = ?
            
            
                and create_time = ?
            
            
                and user_org = ?
com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'userOrgName' in 'field list'
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(Unknown Source)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(Unknown Source)
	at java.lang.reflect.Constructor.newInstance(Unknown Source)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:425)
	at com.mysql.jdbc.Util.getInstance(Util.java:408)
	at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:944)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3976)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3912)
	at com.mysql.jdbc.MysqlIO.sendCommand(MysqlIO.java:2530)
	at com.mysql.jdbc.MysqlIO.sqlQueryDirect(MysqlIO.java:2683)
	at com.mysql.jdbc.ConnectionImpl.execSQL(ConnectionImpl.java:2486)
	at com.mysql.jdbc.PreparedStatement.executeInternal(PreparedStatement.java:1858)
	at com.mysql.jdbc.PreparedStatement.execute(PreparedStatement.java:1197)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2931)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2929)
	at com.alibaba.druid.wall.WallFilter.preparedStatement_execute(WallFilter.java:601)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2929)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2929)
	at com.alibaba.druid.proxy.jdbc.PreparedStatementProxyImpl.execute(PreparedStatementProxyImpl.java:131)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:493)
	at sun.reflect.GeneratedMethodAccessor129.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:59)
	at com.sun.proxy.$Proxy173.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.query(PreparedStatementHandler.java:63)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.query(RoutingStatementHandler.java:79)
	at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:63)
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:324)
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:156)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:109)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:83)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:148)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:141)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:434)
	at com.sun.proxy.$Proxy101.selectList(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:231)
	at org.apache.ibatis.binding.MapperMethod.executeForMany(MapperMethod.java:137)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:75)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy128.getAll(Unknown Source)
	at com.bootdo.moneyList.service.impl.MoneyListServiceImpl.getAll(MoneyListServiceImpl.java:21)
	at com.bootdo.moneyList.controller.MoneyListController.queryAllUser(MoneyListController.java:40)
	at com.bootdo.moneyList.controller.MoneyListController$$FastClassBySpringCGLIB$$8f8aea1c.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:204)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:746)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.bootdo.common.aspect.WebLogAspect.doAround(WebLogAspect.java:57)
	at sun.reflect.GeneratedMethodAccessor131.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.bootdo.moneyList.controller.MoneyListController$$EnhancerBySpringCGLIB$$d8a90e47.queryAllUser(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:209)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:877)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:783)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:991)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:925)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:974)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:877)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:661)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:851)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:61)
	at org.apache.shiro.web.servlet.AdviceFilter.executeChain(AdviceFilter.java:108)
	at org.apache.shiro.web.servlet.AdviceFilter.doFilterInternal(AdviceFilter.java:137)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:66)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)
	at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)
	at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)
	at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)
	at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:383)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:109)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:496)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:790)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1468)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Unknown Source)
2019-04-03 09:48:43 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 09:48:43 -
### Error querying database.  Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'userOrgName' in 'field list'
### The error may exist in file [D:\eclipse2018-work\bootdo\target\classes\mybatis\moneyList\MoneyListMapper.xml]
### The error may involve defaultParameterMap
### The error occurred while setting parameters
### SQL: select                           COUNT(*) number,         user_id,      user_name,      userOrgName,      user_tell,      user_state,                                elec_type usertype,     elec_price userprice,     elec_amount userarea,     elec_cost usercost,     elec_Sum usersum               from elec                    WHERE  user_Id = ?                                           and create_time = ?                                           and user_org = ?                UNION ALL select                           COUNT(*) number,         user_id,      user_name,      userOrgName,      user_tell,      user_state,                                heat_type usertype,     heat_price userprice,     heat_area userarea,     heat_cost usercost,     heat_Sum usersum               from heat                    WHERE  user_Id = ?                                           and create_time = ?                                           and user_org = ?                UNION ALL select                           COUNT(*) number,         user_id,      user_name,      userOrgName,      user_tell,      user_state,                                water_type usertype,     water_price userprice,     water_price userarea,     water_price usercost,     water_Sum usersum               from water                    WHERE  user_Id = ?                                           and create_time = ?                                           and user_org = ?
### Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'userOrgName' in 'field list'
; bad SQL grammar []; nested exception is com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'userOrgName' in 'field list'
org.springframework.jdbc.BadSqlGrammarException: 
### Error querying database.  Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'userOrgName' in 'field list'
### The error may exist in file [D:\eclipse2018-work\bootdo\target\classes\mybatis\moneyList\MoneyListMapper.xml]
### The error may involve defaultParameterMap
### The error occurred while setting parameters
### SQL: select                           COUNT(*) number,         user_id,      user_name,      userOrgName,      user_tell,      user_state,                                elec_type usertype,     elec_price userprice,     elec_amount userarea,     elec_cost usercost,     elec_Sum usersum               from elec                    WHERE  user_Id = ?                                           and create_time = ?                                           and user_org = ?                UNION ALL select                           COUNT(*) number,         user_id,      user_name,      userOrgName,      user_tell,      user_state,                                heat_type usertype,     heat_price userprice,     heat_area userarea,     heat_cost usercost,     heat_Sum usersum               from heat                    WHERE  user_Id = ?                                           and create_time = ?                                           and user_org = ?                UNION ALL select                           COUNT(*) number,         user_id,      user_name,      userOrgName,      user_tell,      user_state,                                water_type usertype,     water_price userprice,     water_price userarea,     water_price usercost,     water_Sum usersum               from water                    WHERE  user_Id = ?                                           and create_time = ?                                           and user_org = ?
### Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'userOrgName' in 'field list'
; bad SQL grammar []; nested exception is com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'userOrgName' in 'field list'
	at org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator.doTranslate(SQLErrorCodeSQLExceptionTranslator.java:234)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:72)
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:75)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:447)
	at com.sun.proxy.$Proxy101.selectList(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:231)
	at org.apache.ibatis.binding.MapperMethod.executeForMany(MapperMethod.java:137)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:75)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy128.getAll(Unknown Source)
	at com.bootdo.moneyList.service.impl.MoneyListServiceImpl.getAll(MoneyListServiceImpl.java:21)
	at com.bootdo.moneyList.controller.MoneyListController.queryAllUser(MoneyListController.java:40)
	at com.bootdo.moneyList.controller.MoneyListController$$FastClassBySpringCGLIB$$8f8aea1c.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:204)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:746)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.bootdo.common.aspect.WebLogAspect.doAround(WebLogAspect.java:57)
	at sun.reflect.GeneratedMethodAccessor131.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.bootdo.moneyList.controller.MoneyListController$$EnhancerBySpringCGLIB$$d8a90e47.queryAllUser(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:209)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:877)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:783)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:991)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:925)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:974)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:877)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:661)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:851)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:61)
	at org.apache.shiro.web.servlet.AdviceFilter.executeChain(AdviceFilter.java:108)
	at org.apache.shiro.web.servlet.AdviceFilter.doFilterInternal(AdviceFilter.java:137)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:66)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)
	at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)
	at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)
	at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)
	at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:383)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:109)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:496)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:790)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1468)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Unknown Source)
Caused by: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'userOrgName' in 'field list'
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(Unknown Source)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(Unknown Source)
	at java.lang.reflect.Constructor.newInstance(Unknown Source)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:425)
	at com.mysql.jdbc.Util.getInstance(Util.java:408)
	at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:944)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3976)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3912)
	at com.mysql.jdbc.MysqlIO.sendCommand(MysqlIO.java:2530)
	at com.mysql.jdbc.MysqlIO.sqlQueryDirect(MysqlIO.java:2683)
	at com.mysql.jdbc.ConnectionImpl.execSQL(ConnectionImpl.java:2486)
	at com.mysql.jdbc.PreparedStatement.executeInternal(PreparedStatement.java:1858)
	at com.mysql.jdbc.PreparedStatement.execute(PreparedStatement.java:1197)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2931)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2929)
	at com.alibaba.druid.wall.WallFilter.preparedStatement_execute(WallFilter.java:601)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2929)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2929)
	at com.alibaba.druid.proxy.jdbc.PreparedStatementProxyImpl.execute(PreparedStatementProxyImpl.java:131)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:493)
	at sun.reflect.GeneratedMethodAccessor129.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:59)
	at com.sun.proxy.$Proxy173.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.query(PreparedStatementHandler.java:63)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.query(RoutingStatementHandler.java:79)
	at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:63)
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:324)
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:156)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:109)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:83)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:148)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:141)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:434)
	... 100 common frames omitted
2019-04-03 09:48:43 -==> Parameters: 1(Long), admin(String), error(String), null, http://localhost:8081/moneyList/moneyList/queryAllUser(String), org.springframework.jdbc.BadSqlGrammarException: 
### Error querying database.  Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'userOrgName' in 'field list'
### The error may exist in file [D:\eclipse2018-work\bootdo\target\classes\mybatis\moneyList\MoneyListMapper.xml]
### The error may involve defaultParameterMap
### The error occurred while setting parameters
### SQL: select                           COUNT(*) number,         user_id,      user_name,      userOrgName,      user_tell,      user_state,                                elec_type usertype,     elec_price userprice,     elec_amount userarea,     elec_cost usercost,     elec_Sum usersum               from elec                    WHERE  user_Id = ?                                           and create_time = ?                                           and user_org = ?                UNION ALL select                           COUNT(*) number,         user_id,      user_name,      userOrgName,      user_tell,      user_state,                                heat_type usertype,     heat_price userprice,     heat_area userarea,     heat_cost usercost,     heat_Sum usersum               from heat                    WHERE  user_Id = ?                                           and create_time = ?                                           and user_org = ?                UNION ALL select                           COUNT(*) number,         user_id,      user_name,      userOrgName,      user_tell,      user_state,                                water_type usertype,     water_price userprice,     water_price userarea,     water_price usercost,     water_Sum usersum               from water                    WHERE  user_Id = ?                                           and create_time = ?                                           and user_org = ?
### Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'userOrgName' in 'field list'
; bad SQL grammar []; nested exception is com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'userOrgName' in 'field list'(String), null, 2019-04-03 09:48:43.947(Timestamp)
2019-04-03 09:48:44 -<==    Updates: 1
2019-04-03 09:57:01 -请求地址 : http://localhost:8081/index
2019-04-03 09:57:01 -HTTP METHOD : GET
2019-04-03 09:57:01 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2019-04-03 09:57:01 -参数 : [{}]
2019-04-03 09:57:01 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2019-04-03 09:57:01 -==> Parameters: 1(Long)
2019-04-03 09:57:01 -<==      Total: 46
2019-04-03 09:57:01 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2019-04-03 09:57:01 -==> Parameters: 138(Long)
2019-04-03 09:57:01 -<==      Total: 1
2019-04-03 09:57:01 -耗时 : 40
2019-04-03 09:57:01 -返回值 : index_v1
2019-04-03 09:57:01 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 09:57:01 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 41(Integer), com.bootdo.system.controller.LoginController.index()(String), {"menus":[{"attributes":{"icon":"fa fa-money","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-money","url":"/moneyList/moneyList"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"102","parentId":"106","text":"现金缴费"},{"attributes":{"icon":"fa fa-book","url":"/moneyLog/elecLog"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"107","parentId":"106","text":"缴费记录"}],"hasChildren":true,"hasParent":false,"id":"106","parentId":"0","text":"收费管理"},{"attributes":{"icon":"fa fa-lightbulb-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/elec/elec"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"121","parentId":"103","text":"电费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"elec/elecInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"122","parentId":"103","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"elec/elecUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"123","parentId":"103","text":"电表上传"},{"attributes":{"icon":"fa fa-cc","url":"/elec/elecPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"124","parentId":"103","text":"电价管理"}],"hasChildren":true,"hasParent":false,"id":"103","parentId":"0","text":"电费管理"},{"attributes":{"icon":"fa fa-tint","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/water/water"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"117","parentId":"105","text":"水费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"water/waterInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"118","parentId":"105","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"water/waterUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"119","parentId":"105","text":"水费生成"},{"attributes":{"icon":"fa fa-cc","url":"/water/waterPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"120","parentId":"105","text":"水价管理"}],"hasChildren":true,"hasParent":false,"id":"105","parentId":"0","text":"水费管理"},{"attributes":{"icon":"fa fa-fire","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/heat/heat"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"113","parentId":"104","text":"暖费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"heat/heatInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"114","parentId":"104","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"heat/heatUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"115","parentId":"104","text":"暖费生成"},{"attributes":{"icon":"","url":"/heat/heatPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"116","parentId":"104","text":"暖价管理"}],"hasChildren":true,"hasParent":false,"id":"104","parentId":"0","text":"暖费管理"},{"attributes":{"icon":"fa fa-vcard-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-bomb","url":"/print/print"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"149","parentId":"108","text":"票据记录"}],"hasChildren":true,"hasParent":false,"id":"108","parentId":"0","text":"票据管理"},{"attributes":{"icon":"fa fa-bar-chart","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-area-chart","url":"/chart/graph_echarts.html"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","text":"百度chart"},{"attributes":{"icon":"fa fa-sun-o","url":"charts/countDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"109","parentId":"97","text":"日统计报表"},{"attributes":{"icon":"fa fa-registered","url":"charts/countMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"110","parentId":"97","text":"月统计报表"},{"attributes":{"icon":"fa fa-money","url":"charts/countOwe"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"155","parentId":"97","text":"欠费报表图"},{"attributes":{"icon":"fa fa-support","url":"charts/countYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"111","parentId":"97","text":"年统计报表"},{"attributes":{"icon":"fa fa-tachometer","url":"charts/countRun"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"112","parentId":"97","text":"走势图报表"}],"hasChildren":true,"hasParent":false,"id":"97","parentId":"0","text":"统计管理"},{"attributes":{"icon":"fa fa-bars","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-book","url":"/common/dict"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"78","parentId":"1","text":"数据字典"},{"attributes":{"icon":"fa fa-folder-open","url":"/common/sysFile"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"71","parentId":"1","text":"文件管理"}],"h(String), 127.0.0.1(String), 2019-04-03 09:57:01.915(Timestamp)
2019-04-03 09:57:02 -<==    Updates: 1
2019-04-03 09:57:02 -请求地址 : http://localhost:8081/main
2019-04-03 09:57:02 -HTTP METHOD : GET
2019-04-03 09:57:02 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 09:57:02 -参数 : []
2019-04-03 09:57:02 -耗时 : 1
2019-04-03 09:57:02 -返回值 : main
2019-04-03 09:57:03 -请求地址 : http://localhost:8081/oa/notify/message
2019-04-03 09:57:03 -HTTP METHOD : GET
2019-04-03 09:57:03 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2019-04-03 09:57:03 -参数 : []
2019-04-03 09:57:03 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2019-04-03 09:57:03 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2019-04-03 09:57:03 -<==      Total: 0
2019-04-03 09:57:03 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2019-04-03 09:57:03 -==> Parameters: 1(Long), 0(String)
2019-04-03 09:57:03 -<==      Total: 1
2019-04-03 09:57:03 -耗时 : 24
2019-04-03 09:57:03 -返回值 : com.bootdo.common.utils.PageUtils@110b2655
2019-04-03 09:57:03 -请求地址 : http://localhost:8081/main
2019-04-03 09:57:03 -HTTP METHOD : GET
2019-04-03 09:57:03 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 09:57:03 -参数 : []
2019-04-03 09:57:03 -耗时 : 1
2019-04-03 09:57:03 -返回值 : main
2019-04-03 09:57:06 -请求地址 : http://localhost:8081/moneyList/moneyList
2019-04-03 09:57:06 -HTTP METHOD : GET
2019-04-03 09:57:06 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.MoneyList
2019-04-03 09:57:06 -参数 : []
2019-04-03 09:57:06 -耗时 : 1
2019-04-03 09:57:06 -返回值 : /moneyList/moneyList
2019-04-03 09:57:09 -请求地址 : http://localhost:8081/system/sysDept/treeView
2019-04-03 09:57:09 -HTTP METHOD : GET
2019-04-03 09:57:09 -CLASS_METHOD : com.bootdo.system.controller.DeptController.treeView
2019-04-03 09:57:09 -参数 : []
2019-04-03 09:57:09 -耗时 : 1
2019-04-03 09:57:09 -返回值 : system/dept/deptTree
2019-04-03 09:57:09 -请求地址 : http://localhost:8081/system/sysDept/tree
2019-04-03 09:57:09 -HTTP METHOD : GET
2019-04-03 09:57:09 -CLASS_METHOD : com.bootdo.system.controller.DeptController.tree
2019-04-03 09:57:09 -参数 : []
2019-04-03 09:57:09 -==>  Preparing: select `dept_id`,`parent_id`,`name`,`order_num`,`del_flag` from sys_dept order by dept_id desc 
2019-04-03 09:57:09 -==> Parameters: 
2019-04-03 09:57:09 -<==      Total: 3
2019-04-03 09:57:09 -耗时 : 3
2019-04-03 09:57:09 -返回值 : {"checked":false,"children":[{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"3","parentId":"1","state":{"opened":true},"text":"牙星"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"2","parentId":"1","state":{"opened":true},"text":"五九"}],"hasChildren":true,"hasParent":false,"id":"1","parentId":"0","state":{"opened":true},"text":"总公司"}
2019-04-03 09:57:15 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUser
2019-04-03 09:57:15 -HTTP METHOD : POST
2019-04-03 09:57:15 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.queryAllUser
2019-04-03 09:57:15 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@6740849d]
2019-04-03 09:57:15 -==>  Preparing: select COUNT(*) number, user_id, user_name, userOrgName, user_tell, user_state, elec_type usertype, elec_price userprice, elec_amount userarea, elec_cost usercost, elec_Sum usersum from elec WHERE user_Id = ? and create_time = ? and user_org = ? UNION ALL select COUNT(*) number, user_id, user_name, userOrgName, user_tell, user_state, heat_type usertype, heat_price userprice, heat_area userarea, heat_cost usercost, heat_Sum usersum from heat WHERE user_Id = ? and create_time = ? and user_org = ? UNION ALL select COUNT(*) number, user_id, user_name, userOrgName, user_tell, user_state, water_type usertype, water_price userprice, water_price userarea, water_price usercost, water_Sum usersum from water WHERE user_Id = ? and create_time = ? and user_org = ? 
2019-04-03 09:57:15 -==> Parameters: 1-0004(String), 2019-02(String), 2(String), 1-0004(String), 2019-02(String), 2(String), 1-0004(String), 2019-02(String), 2(String)
2019-04-03 09:57:15 -{conn-10001, pstmt-20017} execute error. select
                 
        COUNT(*) number,
        user_id,
	    user_name,
	    userOrgName,
	    user_tell,
	    user_state,
     
                 
       elec_type usertype,
	   elec_price userprice,
	   elec_amount userarea,
	   elec_cost usercost,
	   elec_Sum usersum
     
        from elec
         
         WHERE  user_Id = ?
            
            
                and create_time = ?
            
            
                and user_org = ? 
     
        UNION ALL select
                 
        COUNT(*) number,
        user_id,
	    user_name,
	    userOrgName,
	    user_tell,
	    user_state,
     
                 
       heat_type usertype,
	   heat_price userprice,
	   heat_area userarea,
	   heat_cost usercost,
	   heat_Sum usersum
     
        from heat
         
         WHERE  user_Id = ?
            
            
                and create_time = ?
            
            
                and user_org = ? 
     
        UNION ALL select
                 
        COUNT(*) number,
        user_id,
	    user_name,
	    userOrgName,
	    user_tell,
	    user_state,
     
                 
       water_type usertype,
	   water_price userprice,
	   water_price userarea,
	   water_price usercost,
	   water_Sum usersum
     
        from water
         
         WHERE  user_Id = ?
            
            
                and create_time = ?
            
            
                and user_org = ?
com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'userOrgName' in 'field list'
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(Unknown Source)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(Unknown Source)
	at java.lang.reflect.Constructor.newInstance(Unknown Source)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:425)
	at com.mysql.jdbc.Util.getInstance(Util.java:408)
	at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:944)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3976)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3912)
	at com.mysql.jdbc.MysqlIO.sendCommand(MysqlIO.java:2530)
	at com.mysql.jdbc.MysqlIO.sqlQueryDirect(MysqlIO.java:2683)
	at com.mysql.jdbc.ConnectionImpl.execSQL(ConnectionImpl.java:2486)
	at com.mysql.jdbc.PreparedStatement.executeInternal(PreparedStatement.java:1858)
	at com.mysql.jdbc.PreparedStatement.execute(PreparedStatement.java:1197)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2931)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2929)
	at com.alibaba.druid.wall.WallFilter.preparedStatement_execute(WallFilter.java:601)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2929)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2929)
	at com.alibaba.druid.proxy.jdbc.PreparedStatementProxyImpl.execute(PreparedStatementProxyImpl.java:131)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:493)
	at sun.reflect.GeneratedMethodAccessor129.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:59)
	at com.sun.proxy.$Proxy173.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.query(PreparedStatementHandler.java:63)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.query(RoutingStatementHandler.java:79)
	at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:63)
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:324)
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:156)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:109)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:83)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:148)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:141)
	at sun.reflect.GeneratedMethodAccessor139.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:434)
	at com.sun.proxy.$Proxy101.selectList(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:231)
	at org.apache.ibatis.binding.MapperMethod.executeForMany(MapperMethod.java:137)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:75)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy128.getAll(Unknown Source)
	at com.bootdo.moneyList.service.impl.MoneyListServiceImpl.getAll(MoneyListServiceImpl.java:21)
	at com.bootdo.moneyList.controller.MoneyListController.queryAllUser(MoneyListController.java:40)
	at com.bootdo.moneyList.controller.MoneyListController$$FastClassBySpringCGLIB$$8f8aea1c.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:204)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:746)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.bootdo.common.aspect.WebLogAspect.doAround(WebLogAspect.java:57)
	at sun.reflect.GeneratedMethodAccessor131.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.bootdo.moneyList.controller.MoneyListController$$EnhancerBySpringCGLIB$$d8a90e47.queryAllUser(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:209)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:877)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:783)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:991)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:925)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:974)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:877)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:661)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:851)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:61)
	at org.apache.shiro.web.servlet.AdviceFilter.executeChain(AdviceFilter.java:108)
	at org.apache.shiro.web.servlet.AdviceFilter.doFilterInternal(AdviceFilter.java:137)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:66)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)
	at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)
	at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)
	at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)
	at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:383)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:109)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:496)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:790)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1468)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Unknown Source)
2019-04-03 09:57:15 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 09:57:15 -
### Error querying database.  Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'userOrgName' in 'field list'
### The error may exist in file [D:\eclipse2018-work\bootdo\target\classes\mybatis\moneyList\MoneyListMapper.xml]
### The error may involve defaultParameterMap
### The error occurred while setting parameters
### SQL: select                           COUNT(*) number,         user_id,      user_name,      userOrgName,      user_tell,      user_state,                                elec_type usertype,     elec_price userprice,     elec_amount userarea,     elec_cost usercost,     elec_Sum usersum               from elec                    WHERE  user_Id = ?                                           and create_time = ?                                           and user_org = ?                UNION ALL select                           COUNT(*) number,         user_id,      user_name,      userOrgName,      user_tell,      user_state,                                heat_type usertype,     heat_price userprice,     heat_area userarea,     heat_cost usercost,     heat_Sum usersum               from heat                    WHERE  user_Id = ?                                           and create_time = ?                                           and user_org = ?                UNION ALL select                           COUNT(*) number,         user_id,      user_name,      userOrgName,      user_tell,      user_state,                                water_type usertype,     water_price userprice,     water_price userarea,     water_price usercost,     water_Sum usersum               from water                    WHERE  user_Id = ?                                           and create_time = ?                                           and user_org = ?
### Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'userOrgName' in 'field list'
; bad SQL grammar []; nested exception is com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'userOrgName' in 'field list'
org.springframework.jdbc.BadSqlGrammarException: 
### Error querying database.  Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'userOrgName' in 'field list'
### The error may exist in file [D:\eclipse2018-work\bootdo\target\classes\mybatis\moneyList\MoneyListMapper.xml]
### The error may involve defaultParameterMap
### The error occurred while setting parameters
### SQL: select                           COUNT(*) number,         user_id,      user_name,      userOrgName,      user_tell,      user_state,                                elec_type usertype,     elec_price userprice,     elec_amount userarea,     elec_cost usercost,     elec_Sum usersum               from elec                    WHERE  user_Id = ?                                           and create_time = ?                                           and user_org = ?                UNION ALL select                           COUNT(*) number,         user_id,      user_name,      userOrgName,      user_tell,      user_state,                                heat_type usertype,     heat_price userprice,     heat_area userarea,     heat_cost usercost,     heat_Sum usersum               from heat                    WHERE  user_Id = ?                                           and create_time = ?                                           and user_org = ?                UNION ALL select                           COUNT(*) number,         user_id,      user_name,      userOrgName,      user_tell,      user_state,                                water_type usertype,     water_price userprice,     water_price userarea,     water_price usercost,     water_Sum usersum               from water                    WHERE  user_Id = ?                                           and create_time = ?                                           and user_org = ?
### Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'userOrgName' in 'field list'
; bad SQL grammar []; nested exception is com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'userOrgName' in 'field list'
	at org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator.doTranslate(SQLErrorCodeSQLExceptionTranslator.java:234)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:72)
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:75)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:447)
	at com.sun.proxy.$Proxy101.selectList(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:231)
	at org.apache.ibatis.binding.MapperMethod.executeForMany(MapperMethod.java:137)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:75)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy128.getAll(Unknown Source)
	at com.bootdo.moneyList.service.impl.MoneyListServiceImpl.getAll(MoneyListServiceImpl.java:21)
	at com.bootdo.moneyList.controller.MoneyListController.queryAllUser(MoneyListController.java:40)
	at com.bootdo.moneyList.controller.MoneyListController$$FastClassBySpringCGLIB$$8f8aea1c.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:204)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:746)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.bootdo.common.aspect.WebLogAspect.doAround(WebLogAspect.java:57)
	at sun.reflect.GeneratedMethodAccessor131.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.bootdo.moneyList.controller.MoneyListController$$EnhancerBySpringCGLIB$$d8a90e47.queryAllUser(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:209)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:877)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:783)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:991)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:925)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:974)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:877)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:661)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:851)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:61)
	at org.apache.shiro.web.servlet.AdviceFilter.executeChain(AdviceFilter.java:108)
	at org.apache.shiro.web.servlet.AdviceFilter.doFilterInternal(AdviceFilter.java:137)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:66)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)
	at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)
	at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)
	at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)
	at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:383)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:109)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:496)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:790)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1468)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Unknown Source)
Caused by: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'userOrgName' in 'field list'
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(Unknown Source)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(Unknown Source)
	at java.lang.reflect.Constructor.newInstance(Unknown Source)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:425)
	at com.mysql.jdbc.Util.getInstance(Util.java:408)
	at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:944)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3976)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3912)
	at com.mysql.jdbc.MysqlIO.sendCommand(MysqlIO.java:2530)
	at com.mysql.jdbc.MysqlIO.sqlQueryDirect(MysqlIO.java:2683)
	at com.mysql.jdbc.ConnectionImpl.execSQL(ConnectionImpl.java:2486)
	at com.mysql.jdbc.PreparedStatement.executeInternal(PreparedStatement.java:1858)
	at com.mysql.jdbc.PreparedStatement.execute(PreparedStatement.java:1197)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2931)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2929)
	at com.alibaba.druid.wall.WallFilter.preparedStatement_execute(WallFilter.java:601)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2929)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2929)
	at com.alibaba.druid.proxy.jdbc.PreparedStatementProxyImpl.execute(PreparedStatementProxyImpl.java:131)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:493)
	at sun.reflect.GeneratedMethodAccessor129.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:59)
	at com.sun.proxy.$Proxy173.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.query(PreparedStatementHandler.java:63)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.query(RoutingStatementHandler.java:79)
	at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:63)
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:324)
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:156)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:109)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:83)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:148)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:141)
	at sun.reflect.GeneratedMethodAccessor139.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:434)
	... 100 common frames omitted
2019-04-03 09:57:15 -==> Parameters: 1(Long), admin(String), error(String), null, http://localhost:8081/moneyList/moneyList/queryAllUser(String), org.springframework.jdbc.BadSqlGrammarException: 
### Error querying database.  Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'userOrgName' in 'field list'
### The error may exist in file [D:\eclipse2018-work\bootdo\target\classes\mybatis\moneyList\MoneyListMapper.xml]
### The error may involve defaultParameterMap
### The error occurred while setting parameters
### SQL: select                           COUNT(*) number,         user_id,      user_name,      userOrgName,      user_tell,      user_state,                                elec_type usertype,     elec_price userprice,     elec_amount userarea,     elec_cost usercost,     elec_Sum usersum               from elec                    WHERE  user_Id = ?                                           and create_time = ?                                           and user_org = ?                UNION ALL select                           COUNT(*) number,         user_id,      user_name,      userOrgName,      user_tell,      user_state,                                heat_type usertype,     heat_price userprice,     heat_area userarea,     heat_cost usercost,     heat_Sum usersum               from heat                    WHERE  user_Id = ?                                           and create_time = ?                                           and user_org = ?                UNION ALL select                           COUNT(*) number,         user_id,      user_name,      userOrgName,      user_tell,      user_state,                                water_type usertype,     water_price userprice,     water_price userarea,     water_price usercost,     water_Sum usersum               from water                    WHERE  user_Id = ?                                           and create_time = ?                                           and user_org = ?
### Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'userOrgName' in 'field list'
; bad SQL grammar []; nested exception is com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'userOrgName' in 'field list'(String), null, 2019-04-03 09:57:15.38(Timestamp)
2019-04-03 09:57:15 -<==    Updates: 1
2019-04-03 09:57:16 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUser
2019-04-03 09:57:16 -HTTP METHOD : POST
2019-04-03 09:57:16 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.queryAllUser
2019-04-03 09:57:16 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@11b385fe]
2019-04-03 09:57:16 -==>  Preparing: select COUNT(*) number, user_id, user_name, userOrgName, user_tell, user_state, elec_type usertype, elec_price userprice, elec_amount userarea, elec_cost usercost, elec_Sum usersum from elec WHERE user_Id = ? and create_time = ? and user_org = ? UNION ALL select COUNT(*) number, user_id, user_name, userOrgName, user_tell, user_state, heat_type usertype, heat_price userprice, heat_area userarea, heat_cost usercost, heat_Sum usersum from heat WHERE user_Id = ? and create_time = ? and user_org = ? UNION ALL select COUNT(*) number, user_id, user_name, userOrgName, user_tell, user_state, water_type usertype, water_price userprice, water_price userarea, water_price usercost, water_Sum usersum from water WHERE user_Id = ? and create_time = ? and user_org = ? 
2019-04-03 09:57:16 -==> Parameters: 1-0004(String), 2019-02(String), 2(String), 1-0004(String), 2019-02(String), 2(String), 1-0004(String), 2019-02(String), 2(String)
2019-04-03 09:57:16 -{conn-10001, pstmt-20018} execute error. select
                 
        COUNT(*) number,
        user_id,
	    user_name,
	    userOrgName,
	    user_tell,
	    user_state,
     
                 
       elec_type usertype,
	   elec_price userprice,
	   elec_amount userarea,
	   elec_cost usercost,
	   elec_Sum usersum
     
        from elec
         
         WHERE  user_Id = ?
            
            
                and create_time = ?
            
            
                and user_org = ? 
     
        UNION ALL select
                 
        COUNT(*) number,
        user_id,
	    user_name,
	    userOrgName,
	    user_tell,
	    user_state,
     
                 
       heat_type usertype,
	   heat_price userprice,
	   heat_area userarea,
	   heat_cost usercost,
	   heat_Sum usersum
     
        from heat
         
         WHERE  user_Id = ?
            
            
                and create_time = ?
            
            
                and user_org = ? 
     
        UNION ALL select
                 
        COUNT(*) number,
        user_id,
	    user_name,
	    userOrgName,
	    user_tell,
	    user_state,
     
                 
       water_type usertype,
	   water_price userprice,
	   water_price userarea,
	   water_price usercost,
	   water_Sum usersum
     
        from water
         
         WHERE  user_Id = ?
            
            
                and create_time = ?
            
            
                and user_org = ?
com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'userOrgName' in 'field list'
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(Unknown Source)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(Unknown Source)
	at java.lang.reflect.Constructor.newInstance(Unknown Source)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:425)
	at com.mysql.jdbc.Util.getInstance(Util.java:408)
	at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:944)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3976)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3912)
	at com.mysql.jdbc.MysqlIO.sendCommand(MysqlIO.java:2530)
	at com.mysql.jdbc.MysqlIO.sqlQueryDirect(MysqlIO.java:2683)
	at com.mysql.jdbc.ConnectionImpl.execSQL(ConnectionImpl.java:2486)
	at com.mysql.jdbc.PreparedStatement.executeInternal(PreparedStatement.java:1858)
	at com.mysql.jdbc.PreparedStatement.execute(PreparedStatement.java:1197)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2931)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2929)
	at com.alibaba.druid.wall.WallFilter.preparedStatement_execute(WallFilter.java:601)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2929)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2929)
	at com.alibaba.druid.proxy.jdbc.PreparedStatementProxyImpl.execute(PreparedStatementProxyImpl.java:131)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:493)
	at sun.reflect.GeneratedMethodAccessor129.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:59)
	at com.sun.proxy.$Proxy173.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.query(PreparedStatementHandler.java:63)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.query(RoutingStatementHandler.java:79)
	at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:63)
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:324)
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:156)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:109)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:83)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:148)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:141)
	at sun.reflect.GeneratedMethodAccessor139.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:434)
	at com.sun.proxy.$Proxy101.selectList(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:231)
	at org.apache.ibatis.binding.MapperMethod.executeForMany(MapperMethod.java:137)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:75)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy128.getAll(Unknown Source)
	at com.bootdo.moneyList.service.impl.MoneyListServiceImpl.getAll(MoneyListServiceImpl.java:21)
	at com.bootdo.moneyList.controller.MoneyListController.queryAllUser(MoneyListController.java:40)
	at com.bootdo.moneyList.controller.MoneyListController$$FastClassBySpringCGLIB$$8f8aea1c.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:204)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:746)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.bootdo.common.aspect.WebLogAspect.doAround(WebLogAspect.java:57)
	at sun.reflect.GeneratedMethodAccessor131.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.bootdo.moneyList.controller.MoneyListController$$EnhancerBySpringCGLIB$$d8a90e47.queryAllUser(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:209)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:877)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:783)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:991)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:925)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:974)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:877)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:661)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:851)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:61)
	at org.apache.shiro.web.servlet.AdviceFilter.executeChain(AdviceFilter.java:108)
	at org.apache.shiro.web.servlet.AdviceFilter.doFilterInternal(AdviceFilter.java:137)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:66)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)
	at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)
	at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)
	at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)
	at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:383)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:109)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:496)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:790)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1468)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Unknown Source)
2019-04-03 09:57:16 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 09:57:16 -
### Error querying database.  Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'userOrgName' in 'field list'
### The error may exist in file [D:\eclipse2018-work\bootdo\target\classes\mybatis\moneyList\MoneyListMapper.xml]
### The error may involve defaultParameterMap
### The error occurred while setting parameters
### SQL: select                           COUNT(*) number,         user_id,      user_name,      userOrgName,      user_tell,      user_state,                                elec_type usertype,     elec_price userprice,     elec_amount userarea,     elec_cost usercost,     elec_Sum usersum               from elec                    WHERE  user_Id = ?                                           and create_time = ?                                           and user_org = ?                UNION ALL select                           COUNT(*) number,         user_id,      user_name,      userOrgName,      user_tell,      user_state,                                heat_type usertype,     heat_price userprice,     heat_area userarea,     heat_cost usercost,     heat_Sum usersum               from heat                    WHERE  user_Id = ?                                           and create_time = ?                                           and user_org = ?                UNION ALL select                           COUNT(*) number,         user_id,      user_name,      userOrgName,      user_tell,      user_state,                                water_type usertype,     water_price userprice,     water_price userarea,     water_price usercost,     water_Sum usersum               from water                    WHERE  user_Id = ?                                           and create_time = ?                                           and user_org = ?
### Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'userOrgName' in 'field list'
; bad SQL grammar []; nested exception is com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'userOrgName' in 'field list'
org.springframework.jdbc.BadSqlGrammarException: 
### Error querying database.  Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'userOrgName' in 'field list'
### The error may exist in file [D:\eclipse2018-work\bootdo\target\classes\mybatis\moneyList\MoneyListMapper.xml]
### The error may involve defaultParameterMap
### The error occurred while setting parameters
### SQL: select                           COUNT(*) number,         user_id,      user_name,      userOrgName,      user_tell,      user_state,                                elec_type usertype,     elec_price userprice,     elec_amount userarea,     elec_cost usercost,     elec_Sum usersum               from elec                    WHERE  user_Id = ?                                           and create_time = ?                                           and user_org = ?                UNION ALL select                           COUNT(*) number,         user_id,      user_name,      userOrgName,      user_tell,      user_state,                                heat_type usertype,     heat_price userprice,     heat_area userarea,     heat_cost usercost,     heat_Sum usersum               from heat                    WHERE  user_Id = ?                                           and create_time = ?                                           and user_org = ?                UNION ALL select                           COUNT(*) number,         user_id,      user_name,      userOrgName,      user_tell,      user_state,                                water_type usertype,     water_price userprice,     water_price userarea,     water_price usercost,     water_Sum usersum               from water                    WHERE  user_Id = ?                                           and create_time = ?                                           and user_org = ?
### Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'userOrgName' in 'field list'
; bad SQL grammar []; nested exception is com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'userOrgName' in 'field list'
	at org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator.doTranslate(SQLErrorCodeSQLExceptionTranslator.java:234)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:72)
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:75)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:447)
	at com.sun.proxy.$Proxy101.selectList(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:231)
	at org.apache.ibatis.binding.MapperMethod.executeForMany(MapperMethod.java:137)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:75)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy128.getAll(Unknown Source)
	at com.bootdo.moneyList.service.impl.MoneyListServiceImpl.getAll(MoneyListServiceImpl.java:21)
	at com.bootdo.moneyList.controller.MoneyListController.queryAllUser(MoneyListController.java:40)
	at com.bootdo.moneyList.controller.MoneyListController$$FastClassBySpringCGLIB$$8f8aea1c.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:204)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:746)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.bootdo.common.aspect.WebLogAspect.doAround(WebLogAspect.java:57)
	at sun.reflect.GeneratedMethodAccessor131.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.bootdo.moneyList.controller.MoneyListController$$EnhancerBySpringCGLIB$$d8a90e47.queryAllUser(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:209)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:877)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:783)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:991)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:925)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:974)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:877)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:661)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:851)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:61)
	at org.apache.shiro.web.servlet.AdviceFilter.executeChain(AdviceFilter.java:108)
	at org.apache.shiro.web.servlet.AdviceFilter.doFilterInternal(AdviceFilter.java:137)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:66)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)
	at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)
	at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)
	at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)
	at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:383)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:109)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:496)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:790)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1468)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Unknown Source)
Caused by: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'userOrgName' in 'field list'
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(Unknown Source)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(Unknown Source)
	at java.lang.reflect.Constructor.newInstance(Unknown Source)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:425)
	at com.mysql.jdbc.Util.getInstance(Util.java:408)
	at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:944)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3976)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3912)
	at com.mysql.jdbc.MysqlIO.sendCommand(MysqlIO.java:2530)
	at com.mysql.jdbc.MysqlIO.sqlQueryDirect(MysqlIO.java:2683)
	at com.mysql.jdbc.ConnectionImpl.execSQL(ConnectionImpl.java:2486)
	at com.mysql.jdbc.PreparedStatement.executeInternal(PreparedStatement.java:1858)
	at com.mysql.jdbc.PreparedStatement.execute(PreparedStatement.java:1197)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2931)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2929)
	at com.alibaba.druid.wall.WallFilter.preparedStatement_execute(WallFilter.java:601)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2929)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2929)
	at com.alibaba.druid.proxy.jdbc.PreparedStatementProxyImpl.execute(PreparedStatementProxyImpl.java:131)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:493)
	at sun.reflect.GeneratedMethodAccessor129.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:59)
	at com.sun.proxy.$Proxy173.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.query(PreparedStatementHandler.java:63)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.query(RoutingStatementHandler.java:79)
	at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:63)
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:324)
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:156)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:109)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:83)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:148)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:141)
	at sun.reflect.GeneratedMethodAccessor139.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:434)
	... 100 common frames omitted
2019-04-03 09:57:16 -==> Parameters: 1(Long), admin(String), error(String), null, http://localhost:8081/moneyList/moneyList/queryAllUser(String), org.springframework.jdbc.BadSqlGrammarException: 
### Error querying database.  Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'userOrgName' in 'field list'
### The error may exist in file [D:\eclipse2018-work\bootdo\target\classes\mybatis\moneyList\MoneyListMapper.xml]
### The error may involve defaultParameterMap
### The error occurred while setting parameters
### SQL: select                           COUNT(*) number,         user_id,      user_name,      userOrgName,      user_tell,      user_state,                                elec_type usertype,     elec_price userprice,     elec_amount userarea,     elec_cost usercost,     elec_Sum usersum               from elec                    WHERE  user_Id = ?                                           and create_time = ?                                           and user_org = ?                UNION ALL select                           COUNT(*) number,         user_id,      user_name,      userOrgName,      user_tell,      user_state,                                heat_type usertype,     heat_price userprice,     heat_area userarea,     heat_cost usercost,     heat_Sum usersum               from heat                    WHERE  user_Id = ?                                           and create_time = ?                                           and user_org = ?                UNION ALL select                           COUNT(*) number,         user_id,      user_name,      userOrgName,      user_tell,      user_state,                                water_type usertype,     water_price userprice,     water_price userarea,     water_price usercost,     water_Sum usersum               from water                    WHERE  user_Id = ?                                           and create_time = ?                                           and user_org = ?
### Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'userOrgName' in 'field list'
; bad SQL grammar []; nested exception is com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'userOrgName' in 'field list'(String), null, 2019-04-03 09:57:16.536(Timestamp)
2019-04-03 09:57:16 -<==    Updates: 1
2019-04-03 09:57:16 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUser
2019-04-03 09:57:16 -HTTP METHOD : POST
2019-04-03 09:57:16 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.queryAllUser
2019-04-03 09:57:16 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@65e03c76]
2019-04-03 09:57:16 -==>  Preparing: select COUNT(*) number, user_id, user_name, userOrgName, user_tell, user_state, elec_type usertype, elec_price userprice, elec_amount userarea, elec_cost usercost, elec_Sum usersum from elec WHERE user_Id = ? and create_time = ? and user_org = ? UNION ALL select COUNT(*) number, user_id, user_name, userOrgName, user_tell, user_state, heat_type usertype, heat_price userprice, heat_area userarea, heat_cost usercost, heat_Sum usersum from heat WHERE user_Id = ? and create_time = ? and user_org = ? UNION ALL select COUNT(*) number, user_id, user_name, userOrgName, user_tell, user_state, water_type usertype, water_price userprice, water_price userarea, water_price usercost, water_Sum usersum from water WHERE user_Id = ? and create_time = ? and user_org = ? 
2019-04-03 09:57:16 -==> Parameters: 1-0004(String), 2019-02(String), 2(String), 1-0004(String), 2019-02(String), 2(String), 1-0004(String), 2019-02(String), 2(String)
2019-04-03 09:57:16 -{conn-10001, pstmt-20019} execute error. select
                 
        COUNT(*) number,
        user_id,
	    user_name,
	    userOrgName,
	    user_tell,
	    user_state,
     
                 
       elec_type usertype,
	   elec_price userprice,
	   elec_amount userarea,
	   elec_cost usercost,
	   elec_Sum usersum
     
        from elec
         
         WHERE  user_Id = ?
            
            
                and create_time = ?
            
            
                and user_org = ? 
     
        UNION ALL select
                 
        COUNT(*) number,
        user_id,
	    user_name,
	    userOrgName,
	    user_tell,
	    user_state,
     
                 
       heat_type usertype,
	   heat_price userprice,
	   heat_area userarea,
	   heat_cost usercost,
	   heat_Sum usersum
     
        from heat
         
         WHERE  user_Id = ?
            
            
                and create_time = ?
            
            
                and user_org = ? 
     
        UNION ALL select
                 
        COUNT(*) number,
        user_id,
	    user_name,
	    userOrgName,
	    user_tell,
	    user_state,
     
                 
       water_type usertype,
	   water_price userprice,
	   water_price userarea,
	   water_price usercost,
	   water_Sum usersum
     
        from water
         
         WHERE  user_Id = ?
            
            
                and create_time = ?
            
            
                and user_org = ?
com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'userOrgName' in 'field list'
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(Unknown Source)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(Unknown Source)
	at java.lang.reflect.Constructor.newInstance(Unknown Source)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:425)
	at com.mysql.jdbc.Util.getInstance(Util.java:408)
	at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:944)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3976)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3912)
	at com.mysql.jdbc.MysqlIO.sendCommand(MysqlIO.java:2530)
	at com.mysql.jdbc.MysqlIO.sqlQueryDirect(MysqlIO.java:2683)
	at com.mysql.jdbc.ConnectionImpl.execSQL(ConnectionImpl.java:2486)
	at com.mysql.jdbc.PreparedStatement.executeInternal(PreparedStatement.java:1858)
	at com.mysql.jdbc.PreparedStatement.execute(PreparedStatement.java:1197)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2931)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2929)
	at com.alibaba.druid.wall.WallFilter.preparedStatement_execute(WallFilter.java:601)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2929)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2929)
	at com.alibaba.druid.proxy.jdbc.PreparedStatementProxyImpl.execute(PreparedStatementProxyImpl.java:131)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:493)
	at sun.reflect.GeneratedMethodAccessor129.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:59)
	at com.sun.proxy.$Proxy173.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.query(PreparedStatementHandler.java:63)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.query(RoutingStatementHandler.java:79)
	at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:63)
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:324)
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:156)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:109)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:83)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:148)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:141)
	at sun.reflect.GeneratedMethodAccessor139.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:434)
	at com.sun.proxy.$Proxy101.selectList(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:231)
	at org.apache.ibatis.binding.MapperMethod.executeForMany(MapperMethod.java:137)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:75)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy128.getAll(Unknown Source)
	at com.bootdo.moneyList.service.impl.MoneyListServiceImpl.getAll(MoneyListServiceImpl.java:21)
	at com.bootdo.moneyList.controller.MoneyListController.queryAllUser(MoneyListController.java:40)
	at com.bootdo.moneyList.controller.MoneyListController$$FastClassBySpringCGLIB$$8f8aea1c.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:204)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:746)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.bootdo.common.aspect.WebLogAspect.doAround(WebLogAspect.java:57)
	at sun.reflect.GeneratedMethodAccessor131.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.bootdo.moneyList.controller.MoneyListController$$EnhancerBySpringCGLIB$$d8a90e47.queryAllUser(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:209)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:877)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:783)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:991)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:925)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:974)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:877)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:661)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:851)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:61)
	at org.apache.shiro.web.servlet.AdviceFilter.executeChain(AdviceFilter.java:108)
	at org.apache.shiro.web.servlet.AdviceFilter.doFilterInternal(AdviceFilter.java:137)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:66)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)
	at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)
	at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)
	at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)
	at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:383)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:109)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:496)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:790)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1468)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Unknown Source)
2019-04-03 09:57:16 -
### Error querying database.  Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'userOrgName' in 'field list'
### The error may exist in file [D:\eclipse2018-work\bootdo\target\classes\mybatis\moneyList\MoneyListMapper.xml]
### The error may involve defaultParameterMap
### The error occurred while setting parameters
### SQL: select                           COUNT(*) number,         user_id,      user_name,      userOrgName,      user_tell,      user_state,                                elec_type usertype,     elec_price userprice,     elec_amount userarea,     elec_cost usercost,     elec_Sum usersum               from elec                    WHERE  user_Id = ?                                           and create_time = ?                                           and user_org = ?                UNION ALL select                           COUNT(*) number,         user_id,      user_name,      userOrgName,      user_tell,      user_state,                                heat_type usertype,     heat_price userprice,     heat_area userarea,     heat_cost usercost,     heat_Sum usersum               from heat                    WHERE  user_Id = ?                                           and create_time = ?                                           and user_org = ?                UNION ALL select                           COUNT(*) number,         user_id,      user_name,      userOrgName,      user_tell,      user_state,                                water_type usertype,     water_price userprice,     water_price userarea,     water_price usercost,     water_Sum usersum               from water                    WHERE  user_Id = ?                                           and create_time = ?                                           and user_org = ?
### Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'userOrgName' in 'field list'
; bad SQL grammar []; nested exception is com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'userOrgName' in 'field list'
org.springframework.jdbc.BadSqlGrammarException: 
### Error querying database.  Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'userOrgName' in 'field list'
### The error may exist in file [D:\eclipse2018-work\bootdo\target\classes\mybatis\moneyList\MoneyListMapper.xml]
### The error may involve defaultParameterMap
### The error occurred while setting parameters
### SQL: select                           COUNT(*) number,         user_id,      user_name,      userOrgName,      user_tell,      user_state,                                elec_type usertype,     elec_price userprice,     elec_amount userarea,     elec_cost usercost,     elec_Sum usersum               from elec                    WHERE  user_Id = ?                                           and create_time = ?                                           and user_org = ?                UNION ALL select                           COUNT(*) number,         user_id,      user_name,      userOrgName,      user_tell,      user_state,                                heat_type usertype,     heat_price userprice,     heat_area userarea,     heat_cost usercost,     heat_Sum usersum               from heat                    WHERE  user_Id = ?                                           and create_time = ?                                           and user_org = ?                UNION ALL select                           COUNT(*) number,         user_id,      user_name,      userOrgName,      user_tell,      user_state,                                water_type usertype,     water_price userprice,     water_price userarea,     water_price usercost,     water_Sum usersum               from water                    WHERE  user_Id = ?                                           and create_time = ?                                           and user_org = ?
### Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'userOrgName' in 'field list'
; bad SQL grammar []; nested exception is com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'userOrgName' in 'field list'
	at org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator.doTranslate(SQLErrorCodeSQLExceptionTranslator.java:234)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:72)
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:75)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:447)
	at com.sun.proxy.$Proxy101.selectList(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:231)
	at org.apache.ibatis.binding.MapperMethod.executeForMany(MapperMethod.java:137)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:75)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy128.getAll(Unknown Source)
	at com.bootdo.moneyList.service.impl.MoneyListServiceImpl.getAll(MoneyListServiceImpl.java:21)
	at com.bootdo.moneyList.controller.MoneyListController.queryAllUser(MoneyListController.java:40)
	at com.bootdo.moneyList.controller.MoneyListController$$FastClassBySpringCGLIB$$8f8aea1c.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:204)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:746)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.bootdo.common.aspect.WebLogAspect.doAround(WebLogAspect.java:57)
	at sun.reflect.GeneratedMethodAccessor131.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.bootdo.moneyList.controller.MoneyListController$$EnhancerBySpringCGLIB$$d8a90e47.queryAllUser(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:209)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:877)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:783)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:991)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:925)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:974)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:877)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:661)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:851)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:61)
	at org.apache.shiro.web.servlet.AdviceFilter.executeChain(AdviceFilter.java:108)
	at org.apache.shiro.web.servlet.AdviceFilter.doFilterInternal(AdviceFilter.java:137)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:66)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)
	at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)
	at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)
	at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)
	at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:383)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:109)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:496)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:790)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1468)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Unknown Source)
Caused by: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'userOrgName' in 'field list'
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(Unknown Source)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(Unknown Source)
	at java.lang.reflect.Constructor.newInstance(Unknown Source)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:425)
	at com.mysql.jdbc.Util.getInstance(Util.java:408)
	at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:944)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3976)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3912)
	at com.mysql.jdbc.MysqlIO.sendCommand(MysqlIO.java:2530)
	at com.mysql.jdbc.MysqlIO.sqlQueryDirect(MysqlIO.java:2683)
	at com.mysql.jdbc.ConnectionImpl.execSQL(ConnectionImpl.java:2486)
	at com.mysql.jdbc.PreparedStatement.executeInternal(PreparedStatement.java:1858)
	at com.mysql.jdbc.PreparedStatement.execute(PreparedStatement.java:1197)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2931)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2929)
	at com.alibaba.druid.wall.WallFilter.preparedStatement_execute(WallFilter.java:601)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2929)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2929)
	at com.alibaba.druid.proxy.jdbc.PreparedStatementProxyImpl.execute(PreparedStatementProxyImpl.java:131)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:493)
	at sun.reflect.GeneratedMethodAccessor129.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:59)
	at com.sun.proxy.$Proxy173.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.query(PreparedStatementHandler.java:63)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.query(RoutingStatementHandler.java:79)
	at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:63)
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:324)
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:156)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:109)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:83)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:148)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:141)
	at sun.reflect.GeneratedMethodAccessor139.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:434)
	... 100 common frames omitted
2019-04-03 09:57:16 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 09:57:16 -==> Parameters: 1(Long), admin(String), error(String), null, http://localhost:8081/moneyList/moneyList/queryAllUser(String), org.springframework.jdbc.BadSqlGrammarException: 
### Error querying database.  Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'userOrgName' in 'field list'
### The error may exist in file [D:\eclipse2018-work\bootdo\target\classes\mybatis\moneyList\MoneyListMapper.xml]
### The error may involve defaultParameterMap
### The error occurred while setting parameters
### SQL: select                           COUNT(*) number,         user_id,      user_name,      userOrgName,      user_tell,      user_state,                                elec_type usertype,     elec_price userprice,     elec_amount userarea,     elec_cost usercost,     elec_Sum usersum               from elec                    WHERE  user_Id = ?                                           and create_time = ?                                           and user_org = ?                UNION ALL select                           COUNT(*) number,         user_id,      user_name,      userOrgName,      user_tell,      user_state,                                heat_type usertype,     heat_price userprice,     heat_area userarea,     heat_cost usercost,     heat_Sum usersum               from heat                    WHERE  user_Id = ?                                           and create_time = ?                                           and user_org = ?                UNION ALL select                           COUNT(*) number,         user_id,      user_name,      userOrgName,      user_tell,      user_state,                                water_type usertype,     water_price userprice,     water_price userarea,     water_price usercost,     water_Sum usersum               from water                    WHERE  user_Id = ?                                           and create_time = ?                                           and user_org = ?
### Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'userOrgName' in 'field list'
; bad SQL grammar []; nested exception is com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'userOrgName' in 'field list'(String), null, 2019-04-03 09:57:16.75(Timestamp)
2019-04-03 09:57:16 -<==    Updates: 1
2019-04-03 09:57:16 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUser
2019-04-03 09:57:16 -HTTP METHOD : POST
2019-04-03 09:57:16 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.queryAllUser
2019-04-03 09:57:16 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@3d0a9ebb]
2019-04-03 09:57:16 -==>  Preparing: select COUNT(*) number, user_id, user_name, userOrgName, user_tell, user_state, elec_type usertype, elec_price userprice, elec_amount userarea, elec_cost usercost, elec_Sum usersum from elec WHERE user_Id = ? and create_time = ? and user_org = ? UNION ALL select COUNT(*) number, user_id, user_name, userOrgName, user_tell, user_state, heat_type usertype, heat_price userprice, heat_area userarea, heat_cost usercost, heat_Sum usersum from heat WHERE user_Id = ? and create_time = ? and user_org = ? UNION ALL select COUNT(*) number, user_id, user_name, userOrgName, user_tell, user_state, water_type usertype, water_price userprice, water_price userarea, water_price usercost, water_Sum usersum from water WHERE user_Id = ? and create_time = ? and user_org = ? 
2019-04-03 09:57:16 -==> Parameters: 1-0004(String), 2019-02(String), 2(String), 1-0004(String), 2019-02(String), 2(String), 1-0004(String), 2019-02(String), 2(String)
2019-04-03 09:57:16 -{conn-10001, pstmt-20020} execute error. select
                 
        COUNT(*) number,
        user_id,
	    user_name,
	    userOrgName,
	    user_tell,
	    user_state,
     
                 
       elec_type usertype,
	   elec_price userprice,
	   elec_amount userarea,
	   elec_cost usercost,
	   elec_Sum usersum
     
        from elec
         
         WHERE  user_Id = ?
            
            
                and create_time = ?
            
            
                and user_org = ? 
     
        UNION ALL select
                 
        COUNT(*) number,
        user_id,
	    user_name,
	    userOrgName,
	    user_tell,
	    user_state,
     
                 
       heat_type usertype,
	   heat_price userprice,
	   heat_area userarea,
	   heat_cost usercost,
	   heat_Sum usersum
     
        from heat
         
         WHERE  user_Id = ?
            
            
                and create_time = ?
            
            
                and user_org = ? 
     
        UNION ALL select
                 
        COUNT(*) number,
        user_id,
	    user_name,
	    userOrgName,
	    user_tell,
	    user_state,
     
                 
       water_type usertype,
	   water_price userprice,
	   water_price userarea,
	   water_price usercost,
	   water_Sum usersum
     
        from water
         
         WHERE  user_Id = ?
            
            
                and create_time = ?
            
            
                and user_org = ?
com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'userOrgName' in 'field list'
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(Unknown Source)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(Unknown Source)
	at java.lang.reflect.Constructor.newInstance(Unknown Source)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:425)
	at com.mysql.jdbc.Util.getInstance(Util.java:408)
	at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:944)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3976)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3912)
	at com.mysql.jdbc.MysqlIO.sendCommand(MysqlIO.java:2530)
	at com.mysql.jdbc.MysqlIO.sqlQueryDirect(MysqlIO.java:2683)
	at com.mysql.jdbc.ConnectionImpl.execSQL(ConnectionImpl.java:2486)
	at com.mysql.jdbc.PreparedStatement.executeInternal(PreparedStatement.java:1858)
	at com.mysql.jdbc.PreparedStatement.execute(PreparedStatement.java:1197)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2931)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2929)
	at com.alibaba.druid.wall.WallFilter.preparedStatement_execute(WallFilter.java:601)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2929)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2929)
	at com.alibaba.druid.proxy.jdbc.PreparedStatementProxyImpl.execute(PreparedStatementProxyImpl.java:131)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:493)
	at sun.reflect.GeneratedMethodAccessor129.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:59)
	at com.sun.proxy.$Proxy173.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.query(PreparedStatementHandler.java:63)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.query(RoutingStatementHandler.java:79)
	at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:63)
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:324)
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:156)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:109)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:83)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:148)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:141)
	at sun.reflect.GeneratedMethodAccessor139.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:434)
	at com.sun.proxy.$Proxy101.selectList(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:231)
	at org.apache.ibatis.binding.MapperMethod.executeForMany(MapperMethod.java:137)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:75)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy128.getAll(Unknown Source)
	at com.bootdo.moneyList.service.impl.MoneyListServiceImpl.getAll(MoneyListServiceImpl.java:21)
	at com.bootdo.moneyList.controller.MoneyListController.queryAllUser(MoneyListController.java:40)
	at com.bootdo.moneyList.controller.MoneyListController$$FastClassBySpringCGLIB$$8f8aea1c.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:204)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:746)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.bootdo.common.aspect.WebLogAspect.doAround(WebLogAspect.java:57)
	at sun.reflect.GeneratedMethodAccessor131.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.bootdo.moneyList.controller.MoneyListController$$EnhancerBySpringCGLIB$$d8a90e47.queryAllUser(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:209)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:877)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:783)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:991)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:925)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:974)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:877)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:661)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:851)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:61)
	at org.apache.shiro.web.servlet.AdviceFilter.executeChain(AdviceFilter.java:108)
	at org.apache.shiro.web.servlet.AdviceFilter.doFilterInternal(AdviceFilter.java:137)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:66)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)
	at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)
	at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)
	at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)
	at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:383)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:109)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:496)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:790)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1468)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Unknown Source)
2019-04-03 09:57:16 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 09:57:16 -
### Error querying database.  Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'userOrgName' in 'field list'
### The error may exist in file [D:\eclipse2018-work\bootdo\target\classes\mybatis\moneyList\MoneyListMapper.xml]
### The error may involve defaultParameterMap
### The error occurred while setting parameters
### SQL: select                           COUNT(*) number,         user_id,      user_name,      userOrgName,      user_tell,      user_state,                                elec_type usertype,     elec_price userprice,     elec_amount userarea,     elec_cost usercost,     elec_Sum usersum               from elec                    WHERE  user_Id = ?                                           and create_time = ?                                           and user_org = ?                UNION ALL select                           COUNT(*) number,         user_id,      user_name,      userOrgName,      user_tell,      user_state,                                heat_type usertype,     heat_price userprice,     heat_area userarea,     heat_cost usercost,     heat_Sum usersum               from heat                    WHERE  user_Id = ?                                           and create_time = ?                                           and user_org = ?                UNION ALL select                           COUNT(*) number,         user_id,      user_name,      userOrgName,      user_tell,      user_state,                                water_type usertype,     water_price userprice,     water_price userarea,     water_price usercost,     water_Sum usersum               from water                    WHERE  user_Id = ?                                           and create_time = ?                                           and user_org = ?
### Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'userOrgName' in 'field list'
; bad SQL grammar []; nested exception is com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'userOrgName' in 'field list'
org.springframework.jdbc.BadSqlGrammarException: 
### Error querying database.  Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'userOrgName' in 'field list'
### The error may exist in file [D:\eclipse2018-work\bootdo\target\classes\mybatis\moneyList\MoneyListMapper.xml]
### The error may involve defaultParameterMap
### The error occurred while setting parameters
### SQL: select                           COUNT(*) number,         user_id,      user_name,      userOrgName,      user_tell,      user_state,                                elec_type usertype,     elec_price userprice,     elec_amount userarea,     elec_cost usercost,     elec_Sum usersum               from elec                    WHERE  user_Id = ?                                           and create_time = ?                                           and user_org = ?                UNION ALL select                           COUNT(*) number,         user_id,      user_name,      userOrgName,      user_tell,      user_state,                                heat_type usertype,     heat_price userprice,     heat_area userarea,     heat_cost usercost,     heat_Sum usersum               from heat                    WHERE  user_Id = ?                                           and create_time = ?                                           and user_org = ?                UNION ALL select                           COUNT(*) number,         user_id,      user_name,      userOrgName,      user_tell,      user_state,                                water_type usertype,     water_price userprice,     water_price userarea,     water_price usercost,     water_Sum usersum               from water                    WHERE  user_Id = ?                                           and create_time = ?                                           and user_org = ?
### Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'userOrgName' in 'field list'
; bad SQL grammar []; nested exception is com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'userOrgName' in 'field list'
	at org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator.doTranslate(SQLErrorCodeSQLExceptionTranslator.java:234)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:72)
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:75)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:447)
	at com.sun.proxy.$Proxy101.selectList(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:231)
	at org.apache.ibatis.binding.MapperMethod.executeForMany(MapperMethod.java:137)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:75)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy128.getAll(Unknown Source)
	at com.bootdo.moneyList.service.impl.MoneyListServiceImpl.getAll(MoneyListServiceImpl.java:21)
	at com.bootdo.moneyList.controller.MoneyListController.queryAllUser(MoneyListController.java:40)
	at com.bootdo.moneyList.controller.MoneyListController$$FastClassBySpringCGLIB$$8f8aea1c.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:204)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:746)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.bootdo.common.aspect.WebLogAspect.doAround(WebLogAspect.java:57)
	at sun.reflect.GeneratedMethodAccessor131.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.bootdo.moneyList.controller.MoneyListController$$EnhancerBySpringCGLIB$$d8a90e47.queryAllUser(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:209)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:877)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:783)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:991)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:925)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:974)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:877)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:661)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:851)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:61)
	at org.apache.shiro.web.servlet.AdviceFilter.executeChain(AdviceFilter.java:108)
	at org.apache.shiro.web.servlet.AdviceFilter.doFilterInternal(AdviceFilter.java:137)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:66)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)
	at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)
	at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)
	at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)
	at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:383)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:109)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:496)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:790)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1468)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Unknown Source)
Caused by: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'userOrgName' in 'field list'
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(Unknown Source)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(Unknown Source)
	at java.lang.reflect.Constructor.newInstance(Unknown Source)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:425)
	at com.mysql.jdbc.Util.getInstance(Util.java:408)
	at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:944)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3976)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3912)
	at com.mysql.jdbc.MysqlIO.sendCommand(MysqlIO.java:2530)
	at com.mysql.jdbc.MysqlIO.sqlQueryDirect(MysqlIO.java:2683)
	at com.mysql.jdbc.ConnectionImpl.execSQL(ConnectionImpl.java:2486)
	at com.mysql.jdbc.PreparedStatement.executeInternal(PreparedStatement.java:1858)
	at com.mysql.jdbc.PreparedStatement.execute(PreparedStatement.java:1197)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2931)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2929)
	at com.alibaba.druid.wall.WallFilter.preparedStatement_execute(WallFilter.java:601)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2929)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2929)
	at com.alibaba.druid.proxy.jdbc.PreparedStatementProxyImpl.execute(PreparedStatementProxyImpl.java:131)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:493)
	at sun.reflect.GeneratedMethodAccessor129.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:59)
	at com.sun.proxy.$Proxy173.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.query(PreparedStatementHandler.java:63)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.query(RoutingStatementHandler.java:79)
	at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:63)
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:324)
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:156)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:109)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:83)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:148)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:141)
	at sun.reflect.GeneratedMethodAccessor139.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:434)
	... 100 common frames omitted
2019-04-03 09:57:16 -==> Parameters: 1(Long), admin(String), error(String), null, http://localhost:8081/moneyList/moneyList/queryAllUser(String), org.springframework.jdbc.BadSqlGrammarException: 
### Error querying database.  Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'userOrgName' in 'field list'
### The error may exist in file [D:\eclipse2018-work\bootdo\target\classes\mybatis\moneyList\MoneyListMapper.xml]
### The error may involve defaultParameterMap
### The error occurred while setting parameters
### SQL: select                           COUNT(*) number,         user_id,      user_name,      userOrgName,      user_tell,      user_state,                                elec_type usertype,     elec_price userprice,     elec_amount userarea,     elec_cost usercost,     elec_Sum usersum               from elec                    WHERE  user_Id = ?                                           and create_time = ?                                           and user_org = ?                UNION ALL select                           COUNT(*) number,         user_id,      user_name,      userOrgName,      user_tell,      user_state,                                heat_type usertype,     heat_price userprice,     heat_area userarea,     heat_cost usercost,     heat_Sum usersum               from heat                    WHERE  user_Id = ?                                           and create_time = ?                                           and user_org = ?                UNION ALL select                           COUNT(*) number,         user_id,      user_name,      userOrgName,      user_tell,      user_state,                                water_type usertype,     water_price userprice,     water_price userarea,     water_price usercost,     water_Sum usersum               from water                    WHERE  user_Id = ?                                           and create_time = ?                                           and user_org = ?
### Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'userOrgName' in 'field list'
; bad SQL grammar []; nested exception is com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'userOrgName' in 'field list'(String), null, 2019-04-03 09:57:16.966(Timestamp)
2019-04-03 09:57:17 -<==    Updates: 1
2019-04-03 09:57:17 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUser
2019-04-03 09:57:17 -HTTP METHOD : POST
2019-04-03 09:57:17 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.queryAllUser
2019-04-03 09:57:17 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@43497b5b]
2019-04-03 09:57:17 -==>  Preparing: select COUNT(*) number, user_id, user_name, userOrgName, user_tell, user_state, elec_type usertype, elec_price userprice, elec_amount userarea, elec_cost usercost, elec_Sum usersum from elec WHERE user_Id = ? and create_time = ? and user_org = ? UNION ALL select COUNT(*) number, user_id, user_name, userOrgName, user_tell, user_state, heat_type usertype, heat_price userprice, heat_area userarea, heat_cost usercost, heat_Sum usersum from heat WHERE user_Id = ? and create_time = ? and user_org = ? UNION ALL select COUNT(*) number, user_id, user_name, userOrgName, user_tell, user_state, water_type usertype, water_price userprice, water_price userarea, water_price usercost, water_Sum usersum from water WHERE user_Id = ? and create_time = ? and user_org = ? 
2019-04-03 09:57:17 -==> Parameters: 1-0004(String), 2019-02(String), 2(String), 1-0004(String), 2019-02(String), 2(String), 1-0004(String), 2019-02(String), 2(String)
2019-04-03 09:57:17 -{conn-10001, pstmt-20021} execute error. select
                 
        COUNT(*) number,
        user_id,
	    user_name,
	    userOrgName,
	    user_tell,
	    user_state,
     
                 
       elec_type usertype,
	   elec_price userprice,
	   elec_amount userarea,
	   elec_cost usercost,
	   elec_Sum usersum
     
        from elec
         
         WHERE  user_Id = ?
            
            
                and create_time = ?
            
            
                and user_org = ? 
     
        UNION ALL select
                 
        COUNT(*) number,
        user_id,
	    user_name,
	    userOrgName,
	    user_tell,
	    user_state,
     
                 
       heat_type usertype,
	   heat_price userprice,
	   heat_area userarea,
	   heat_cost usercost,
	   heat_Sum usersum
     
        from heat
         
         WHERE  user_Id = ?
            
            
                and create_time = ?
            
            
                and user_org = ? 
     
        UNION ALL select
                 
        COUNT(*) number,
        user_id,
	    user_name,
	    userOrgName,
	    user_tell,
	    user_state,
     
                 
       water_type usertype,
	   water_price userprice,
	   water_price userarea,
	   water_price usercost,
	   water_Sum usersum
     
        from water
         
         WHERE  user_Id = ?
            
            
                and create_time = ?
            
            
                and user_org = ?
com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'userOrgName' in 'field list'
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(Unknown Source)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(Unknown Source)
	at java.lang.reflect.Constructor.newInstance(Unknown Source)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:425)
	at com.mysql.jdbc.Util.getInstance(Util.java:408)
	at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:944)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3976)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3912)
	at com.mysql.jdbc.MysqlIO.sendCommand(MysqlIO.java:2530)
	at com.mysql.jdbc.MysqlIO.sqlQueryDirect(MysqlIO.java:2683)
	at com.mysql.jdbc.ConnectionImpl.execSQL(ConnectionImpl.java:2486)
	at com.mysql.jdbc.PreparedStatement.executeInternal(PreparedStatement.java:1858)
	at com.mysql.jdbc.PreparedStatement.execute(PreparedStatement.java:1197)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2931)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2929)
	at com.alibaba.druid.wall.WallFilter.preparedStatement_execute(WallFilter.java:601)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2929)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2929)
	at com.alibaba.druid.proxy.jdbc.PreparedStatementProxyImpl.execute(PreparedStatementProxyImpl.java:131)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:493)
	at sun.reflect.GeneratedMethodAccessor129.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:59)
	at com.sun.proxy.$Proxy173.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.query(PreparedStatementHandler.java:63)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.query(RoutingStatementHandler.java:79)
	at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:63)
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:324)
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:156)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:109)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:83)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:148)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:141)
	at sun.reflect.GeneratedMethodAccessor139.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:434)
	at com.sun.proxy.$Proxy101.selectList(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:231)
	at org.apache.ibatis.binding.MapperMethod.executeForMany(MapperMethod.java:137)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:75)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy128.getAll(Unknown Source)
	at com.bootdo.moneyList.service.impl.MoneyListServiceImpl.getAll(MoneyListServiceImpl.java:21)
	at com.bootdo.moneyList.controller.MoneyListController.queryAllUser(MoneyListController.java:40)
	at com.bootdo.moneyList.controller.MoneyListController$$FastClassBySpringCGLIB$$8f8aea1c.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:204)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:746)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.bootdo.common.aspect.WebLogAspect.doAround(WebLogAspect.java:57)
	at sun.reflect.GeneratedMethodAccessor131.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.bootdo.moneyList.controller.MoneyListController$$EnhancerBySpringCGLIB$$d8a90e47.queryAllUser(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:209)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:877)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:783)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:991)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:925)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:974)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:877)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:661)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:851)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:61)
	at org.apache.shiro.web.servlet.AdviceFilter.executeChain(AdviceFilter.java:108)
	at org.apache.shiro.web.servlet.AdviceFilter.doFilterInternal(AdviceFilter.java:137)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:66)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)
	at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)
	at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)
	at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)
	at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:383)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:109)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:496)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:790)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1468)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Unknown Source)
2019-04-03 09:57:17 -
### Error querying database.  Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'userOrgName' in 'field list'
### The error may exist in file [D:\eclipse2018-work\bootdo\target\classes\mybatis\moneyList\MoneyListMapper.xml]
### The error may involve defaultParameterMap
### The error occurred while setting parameters
### SQL: select                           COUNT(*) number,         user_id,      user_name,      userOrgName,      user_tell,      user_state,                                elec_type usertype,     elec_price userprice,     elec_amount userarea,     elec_cost usercost,     elec_Sum usersum               from elec                    WHERE  user_Id = ?                                           and create_time = ?                                           and user_org = ?                UNION ALL select                           COUNT(*) number,         user_id,      user_name,      userOrgName,      user_tell,      user_state,                                heat_type usertype,     heat_price userprice,     heat_area userarea,     heat_cost usercost,     heat_Sum usersum               from heat                    WHERE  user_Id = ?                                           and create_time = ?                                           and user_org = ?                UNION ALL select                           COUNT(*) number,         user_id,      user_name,      userOrgName,      user_tell,      user_state,                                water_type usertype,     water_price userprice,     water_price userarea,     water_price usercost,     water_Sum usersum               from water                    WHERE  user_Id = ?                                           and create_time = ?                                           and user_org = ?
### Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'userOrgName' in 'field list'
; bad SQL grammar []; nested exception is com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'userOrgName' in 'field list'
org.springframework.jdbc.BadSqlGrammarException: 
### Error querying database.  Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'userOrgName' in 'field list'
### The error may exist in file [D:\eclipse2018-work\bootdo\target\classes\mybatis\moneyList\MoneyListMapper.xml]
### The error may involve defaultParameterMap
### The error occurred while setting parameters
### SQL: select                           COUNT(*) number,         user_id,      user_name,      userOrgName,      user_tell,      user_state,                                elec_type usertype,     elec_price userprice,     elec_amount userarea,     elec_cost usercost,     elec_Sum usersum               from elec                    WHERE  user_Id = ?                                           and create_time = ?                                           and user_org = ?                UNION ALL select                           COUNT(*) number,         user_id,      user_name,      userOrgName,      user_tell,      user_state,                                heat_type usertype,     heat_price userprice,     heat_area userarea,     heat_cost usercost,     heat_Sum usersum               from heat                    WHERE  user_Id = ?                                           and create_time = ?                                           and user_org = ?                UNION ALL select                           COUNT(*) number,         user_id,      user_name,      userOrgName,      user_tell,      user_state,                                water_type usertype,     water_price userprice,     water_price userarea,     water_price usercost,     water_Sum usersum               from water                    WHERE  user_Id = ?                                           and create_time = ?                                           and user_org = ?
### Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'userOrgName' in 'field list'
; bad SQL grammar []; nested exception is com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'userOrgName' in 'field list'
	at org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator.doTranslate(SQLErrorCodeSQLExceptionTranslator.java:234)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:72)
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:75)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:447)
	at com.sun.proxy.$Proxy101.selectList(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:231)
	at org.apache.ibatis.binding.MapperMethod.executeForMany(MapperMethod.java:137)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:75)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy128.getAll(Unknown Source)
	at com.bootdo.moneyList.service.impl.MoneyListServiceImpl.getAll(MoneyListServiceImpl.java:21)
	at com.bootdo.moneyList.controller.MoneyListController.queryAllUser(MoneyListController.java:40)
	at com.bootdo.moneyList.controller.MoneyListController$$FastClassBySpringCGLIB$$8f8aea1c.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:204)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:746)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.bootdo.common.aspect.WebLogAspect.doAround(WebLogAspect.java:57)
	at sun.reflect.GeneratedMethodAccessor131.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.bootdo.moneyList.controller.MoneyListController$$EnhancerBySpringCGLIB$$d8a90e47.queryAllUser(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:209)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:877)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:783)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:991)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:925)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:974)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:877)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:661)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:851)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:61)
	at org.apache.shiro.web.servlet.AdviceFilter.executeChain(AdviceFilter.java:108)
	at org.apache.shiro.web.servlet.AdviceFilter.doFilterInternal(AdviceFilter.java:137)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:66)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)
	at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)
	at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)
	at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)
	at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:383)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:109)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:496)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:790)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1468)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Unknown Source)
Caused by: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'userOrgName' in 'field list'
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(Unknown Source)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(Unknown Source)
	at java.lang.reflect.Constructor.newInstance(Unknown Source)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:425)
	at com.mysql.jdbc.Util.getInstance(Util.java:408)
	at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:944)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3976)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3912)
	at com.mysql.jdbc.MysqlIO.sendCommand(MysqlIO.java:2530)
	at com.mysql.jdbc.MysqlIO.sqlQueryDirect(MysqlIO.java:2683)
	at com.mysql.jdbc.ConnectionImpl.execSQL(ConnectionImpl.java:2486)
	at com.mysql.jdbc.PreparedStatement.executeInternal(PreparedStatement.java:1858)
	at com.mysql.jdbc.PreparedStatement.execute(PreparedStatement.java:1197)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2931)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2929)
	at com.alibaba.druid.wall.WallFilter.preparedStatement_execute(WallFilter.java:601)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2929)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2929)
	at com.alibaba.druid.proxy.jdbc.PreparedStatementProxyImpl.execute(PreparedStatementProxyImpl.java:131)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:493)
	at sun.reflect.GeneratedMethodAccessor129.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:59)
	at com.sun.proxy.$Proxy173.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.query(PreparedStatementHandler.java:63)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.query(RoutingStatementHandler.java:79)
	at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:63)
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:324)
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:156)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:109)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:83)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:148)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:141)
	at sun.reflect.GeneratedMethodAccessor139.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:434)
	... 100 common frames omitted
2019-04-03 09:57:17 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 09:57:17 -==> Parameters: 1(Long), admin(String), error(String), null, http://localhost:8081/moneyList/moneyList/queryAllUser(String), org.springframework.jdbc.BadSqlGrammarException: 
### Error querying database.  Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'userOrgName' in 'field list'
### The error may exist in file [D:\eclipse2018-work\bootdo\target\classes\mybatis\moneyList\MoneyListMapper.xml]
### The error may involve defaultParameterMap
### The error occurred while setting parameters
### SQL: select                           COUNT(*) number,         user_id,      user_name,      userOrgName,      user_tell,      user_state,                                elec_type usertype,     elec_price userprice,     elec_amount userarea,     elec_cost usercost,     elec_Sum usersum               from elec                    WHERE  user_Id = ?                                           and create_time = ?                                           and user_org = ?                UNION ALL select                           COUNT(*) number,         user_id,      user_name,      userOrgName,      user_tell,      user_state,                                heat_type usertype,     heat_price userprice,     heat_area userarea,     heat_cost usercost,     heat_Sum usersum               from heat                    WHERE  user_Id = ?                                           and create_time = ?                                           and user_org = ?                UNION ALL select                           COUNT(*) number,         user_id,      user_name,      userOrgName,      user_tell,      user_state,                                water_type usertype,     water_price userprice,     water_price userarea,     water_price usercost,     water_Sum usersum               from water                    WHERE  user_Id = ?                                           and create_time = ?                                           and user_org = ?
### Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'userOrgName' in 'field list'
; bad SQL grammar []; nested exception is com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'userOrgName' in 'field list'(String), null, 2019-04-03 09:57:17.685(Timestamp)
2019-04-03 09:57:17 -<==    Updates: 1
2019-04-03 09:57:39 -Failed to invoke @ExceptionHandler method: public java.lang.Object com.bootdo.common.exception.BDExceptionHandler.handleException(java.lang.Exception,javax.servlet.http.HttpServletRequest)
org.apache.shiro.UnavailableSecurityManagerException: No SecurityManager accessible to the calling code, either bound to the org.apache.shiro.util.ThreadContext or as a vm static singleton.  This is an invalid application configuration.
	at org.apache.shiro.SecurityUtils.getSecurityManager(SecurityUtils.java:123)
	at org.apache.shiro.subject.Subject$Builder.<init>(Subject.java:627)
	at org.apache.shiro.SecurityUtils.getSubject(SecurityUtils.java:56)
	at com.bootdo.common.utils.ShiroUtils.getSubjct(ShiroUtils.java:23)
	at com.bootdo.common.utils.ShiroUtils.getUser(ShiroUtils.java:26)
	at com.bootdo.common.exception.BDExceptionHandler.handleException(BDExceptionHandler.java:75)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:209)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver.doResolveHandlerMethodException(ExceptionHandlerExceptionResolver.java:404)
	at org.springframework.web.servlet.handler.AbstractHandlerMethodExceptionResolver.doResolveException(AbstractHandlerMethodExceptionResolver.java:61)
	at org.springframework.web.servlet.handler.AbstractHandlerExceptionResolver.resolveException(AbstractHandlerExceptionResolver.java:139)
	at org.springframework.web.servlet.handler.HandlerExceptionResolverComposite.resolveException(HandlerExceptionResolverComposite.java:78)
	at org.springframework.web.servlet.DispatcherServlet.processHandlerException(DispatcherServlet.java:1255)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1062)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1008)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:925)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:974)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:877)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:661)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:851)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:728)
	at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:591)
	at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:527)
	at org.apache.catalina.core.StandardHostValve.custom(StandardHostValve.java:389)
	at org.apache.catalina.core.StandardHostValve.status(StandardHostValve.java:254)
	at org.apache.catalina.core.StandardHostValve.throwable(StandardHostValve.java:349)
	at org.apache.catalina.core.AsyncContextImpl.setErrorState(AsyncContextImpl.java:424)
	at org.apache.catalina.connector.CoyoteAdapter.asyncDispatch(CoyoteAdapter.java:176)
	at org.apache.coyote.AbstractProcessor.dispatch(AbstractProcessor.java:232)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:53)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:790)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1468)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Unknown Source)
2019-04-03 10:17:20 -WebSocketSession[0 current WS(0)-HttpStream(0)-HttpPoll(0), 3 total, 0 closed abnormally (0 connect failure, 0 send limit, 3 transport error)], stompSubProtocol[processed CONNECT(2)-CONNECTED(2)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 27], outboundChannelpool size = 0, active threads = 0, queued tasks = 0, completed tasks = 5], sockJsScheduler[pool size = 4, active threads = 1, queued tasks = 1, completed tasks = 400]
2019-04-03 10:29:15 -Starting BootdoApplication on ZJZL-20180906VX with PID 14516 (D:\eclipse2018-work\bootdo\target\classes started by Administrator in D:\eclipse2018-work\bootdo)
2019-04-03 10:29:15 -Running with Spring Boot v2.0.3.RELEASE, Spring v5.0.7.RELEASE
2019-04-03 10:29:15 -The following profiles are active: dev
2019-04-03 10:29:15 -Refreshing org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@6fdbe764: startup date [Wed Apr 03 10:29:15 CST 2019]; root of context hierarchy
2019-04-03 10:29:18 -Multiple Spring Data modules found, entering strict repository configuration mode!
2019-04-03 10:29:21 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$d6c6ee3] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-03 10:29:21 -Bean 'shiroConfig' of type [com.bootdo.system.config.ShiroConfig$$EnhancerBySpringCGLIB$$ffc59d8a] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-03 10:29:23 -Bean 'userRealm' of type [com.bootdo.system.shiro.UserRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-03 10:29:24 -Bean 'cacheManager2' of type [net.sf.ehcache.CacheManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-03 10:29:24 -Bean 'ehCacheManager' of type [org.apache.shiro.cache.ehcache.EhCacheManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-03 10:29:24 -Cache with name 'com.bootdo.system.shiro.UserRealm.authorizationCache' does not yet exist.  Creating now.
2019-04-03 10:29:24 -Added EhCache named [com.bootdo.system.shiro.UserRealm.authorizationCache]
2019-04-03 10:29:24 -Bean 'sessionDAO' of type [org.apache.shiro.session.mgt.eis.MemorySessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-03 10:29:24 -Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-03 10:29:24 -Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-03 10:29:24 -Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-03 10:29:25 -Tomcat initialized with port(s): 8081 (http)
2019-04-03 10:29:25 -Initializing ProtocolHandler ["http-nio-8081"]
2019-04-03 10:29:25 -Starting service [Tomcat]
2019-04-03 10:29:25 -Starting Servlet Engine: Apache Tomcat/8.5.31
2019-04-03 10:29:25 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [C:\Program Files\Java\jre1.8.0_131\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:/Program Files/Java/jre1.8.0_131/bin/server;C:/Program Files/Java/jre1.8.0_131/bin;C:/Program Files/Java/jre1.8.0_131/lib/amd64;C:\ProgramData\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Windows\System32\OpenSSH\;D:\pbb\pycSafefile\x64;D:\pbb\PBB Reader\x64;C:\Program Files\MySQL\MySQL Utilities 1.6\;D:\MAVEN\apache-maven-3.6.0\bin;D:\GIT\Git\cmd;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;;C:\Users\Administrator\Desktop;;.]
2019-04-03 10:29:26 -Initializing Spring embedded WebApplicationContext
2019-04-03 10:29:26 -Root WebApplicationContext: initialization completed in 10706 ms
2019-04-03 10:29:27 -Mapping filter: 'characterEncodingFilter' to: [/*]
2019-04-03 10:29:27 -Mapping filter: 'hiddenHttpMethodFilter' to: [/*]
2019-04-03 10:29:27 -Mapping filter: 'httpPutFormContentFilter' to: [/*]
2019-04-03 10:29:27 -Mapping filter: 'requestContextFilter' to: [/*]
2019-04-03 10:29:27 -Filter xssFilter was not registered (disabled)
2019-04-03 10:29:27 -Mapping filter: 'webStatFilter' to urls: [/*]
2019-04-03 10:29:27 -Mapping filter: 'shiroFilterFactoryBean' to: [/*]
2019-04-03 10:29:27 -Servlet statViewServlet mapped to [/druid/*]
2019-04-03 10:29:27 -Servlet dispatcherServlet mapped to [/]
2019-04-03 10:29:31 -ApplicationContext registed-->org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@6fdbe764: startup date [Wed Apr 03 10:29:15 CST 2019]; root of context hierarchy
2019-04-03 10:29:31 -Using default implementation for ThreadExecutor
2019-04-03 10:29:31 -Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2019-04-03 10:29:31 -Quartz Scheduler v.2.2.1 created.
2019-04-03 10:29:31 -RAMJobStore initialized.
2019-04-03 10:29:31 -Scheduler meta-data: Quartz Scheduler (v2.2.1) 'schedulerFactoryBean' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2019-04-03 10:29:31 -Quartz scheduler 'schedulerFactoryBean' initialized from an externally provided properties instance.
2019-04-03 10:29:31 -Quartz scheduler version: 2.2.1
2019-04-03 10:29:31 -JobFactory set to: com.bootdo.common.quartz.factory.JobFactory@61911947
2019-04-03 10:29:32 -Initializing ExecutorService  'clientInboundChannelExecutor'
2019-04-03 10:29:32 -Initializing ExecutorService  'clientOutboundChannelExecutor'
2019-04-03 10:29:39 -Mapped "{[/charts/countDD/tableDD],methods=[POST]}" onto public java.lang.String com.bootdo.charts.controller.countDDController.tableDD()
2019-04-03 10:29:39 -Mapped "{[/charts/countDD],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.countDDController.countDD()
2019-04-03 10:29:39 -Mapped "{[/charts/countDD/getCountDD],methods=[POST]}" onto public com.bootdo.charts.vo.CountDayVo com.bootdo.charts.controller.countDDController.getCountD(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo,javax.servlet.http.HttpServletRequest)
2019-04-03 10:29:39 -Mapped "{[/charts/countDD/exportCountDD],methods=[GET]}" onto public void com.bootdo.charts.controller.countDDController.exprotElecLog(com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-03 10:29:39 -Mapped "{[/charts/countMM/getCountMM],methods=[POST]}" onto public void com.bootdo.charts.controller.countMMController.getCountMM(org.springframework.ui.Model,com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo,javax.servlet.http.HttpServletRequest)
2019-04-03 10:29:39 -Mapped "{[/charts/countMM],methods=[GET]}" onto java.lang.String com.bootdo.charts.controller.countMMController.countMM()
2019-04-03 10:29:39 -Mapped "{[/charts/countMM/exportCountMM],methods=[GET]}" onto public void com.bootdo.charts.controller.countMMController.exprotElecLog(com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-03 10:29:39 -Mapped "{[/charts/countOwe],methods=[GET]}" onto java.lang.String com.bootdo.charts.controller.countOweController.countOwe()
2019-04-03 10:29:39 -Mapped "{[/charts/countOwe/getCountOwe],methods=[POST]}" onto public com.bootdo.charts.vo.CountOweVo com.bootdo.charts.controller.countOweController.getCountD(com.bootdo.elec.vo.ElecVo,com.bootdo.water.vo.WaterVo,com.bootdo.heat.vo.HeatVo,javax.servlet.http.HttpServletRequest)
2019-04-03 10:29:39 -Mapped "{[/charts/countRun],methods=[GET]}" onto java.lang.String com.bootdo.charts.controller.countRunController.countRun()
2019-04-03 10:29:39 -Mapped "{[/charts/countRun/getCountRun],methods=[POST]}" onto public int com.bootdo.charts.controller.countRunController.getCountD(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo)
2019-04-03 10:29:39 -Mapped "{[/charts/countRun/exportCountRun],methods=[GET]}" onto public void com.bootdo.charts.controller.countRunController.exprotElecLog(com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-03 10:29:39 -Mapped "{[/charts/countYY],methods=[GET]}" onto java.lang.String com.bootdo.charts.controller.countYYController.countYY()
2019-04-03 10:29:39 -Mapped "{[/charts/countYY/getCountYY],methods=[POST]}" onto public int com.bootdo.charts.controller.countYYController.getCountD(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo)
2019-04-03 10:29:39 -Mapped "{[/charts/countYY/exportCountYY],methods=[GET]}" onto public void com.bootdo.charts.controller.countYYController.exprotElecLog(com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-03 10:29:39 -Mapped "{[/common/dict/add],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.add()
2019-04-03 10:29:39 -Mapped "{[/common/dict/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.remove(java.lang.Long)
2019-04-03 10:29:39 -Mapped "{[/common/dict/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.remove(java.lang.Long[])
2019-04-03 10:29:39 -Mapped "{[/common/dict/update]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.update(com.bootdo.common.domain.DictDO)
2019-04-03 10:29:39 -Mapped "{[/common/dict/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.common.controller.DictController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 10:29:39 -Mapped "{[/common/dict/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.save(com.bootdo.common.domain.DictDO)
2019-04-03 10:29:39 -Mapped "{[/common/dict/type],methods=[GET]}" onto public java.util.List<com.bootdo.common.domain.DictDO> com.bootdo.common.controller.DictController.listType()
2019-04-03 10:29:39 -Mapped "{[/common/dict],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.dict()
2019-04-03 10:29:39 -Mapped "{[/common/dict/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 10:29:39 -Mapped "{[/common/dict/list/{type}],methods=[GET]}" onto public java.util.List<com.bootdo.common.domain.DictDO> com.bootdo.common.controller.DictController.listByType(java.lang.String)
2019-04-03 10:29:39 -Mapped "{[/common/dict/add/{type}/{description}],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.addD(org.springframework.ui.Model,java.lang.String,java.lang.String)
2019-04-03 10:29:39 -Mapped "{[/common/sysFile/add],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.FileController.add()
2019-04-03 10:29:39 -Mapped "{[/common/sysFile/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.remove(java.lang.Long,javax.servlet.http.HttpServletRequest)
2019-04-03 10:29:39 -Mapped "{[/common/sysFile/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.remove(java.lang.Long[])
2019-04-03 10:29:39 -Mapped "{[/common/sysFile/update]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.update(com.bootdo.common.domain.FileDO)
2019-04-03 10:29:39 -Mapped "{[/common/sysFile/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.common.controller.FileController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 10:29:39 -Mapped "{[/common/sysFile/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.save(com.bootdo.common.domain.FileDO)
2019-04-03 10:29:39 -Mapped "{[/common/sysFile/info/{id}]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.info(java.lang.Long)
2019-04-03 10:29:39 -Mapped "{[/common/sysFile/edit],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.FileController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 10:29:39 -Mapped "{[/common/sysFile/upload],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.FileController.upload(org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpServletRequest)
2019-04-03 10:29:39 -Mapped "{[/common/sysFile],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.FileController.sysFile(org.springframework.ui.Model)
2019-04-03 10:29:39 -Mapped "{[/common/generator/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.GeneratorController.update(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 10:29:39 -Mapped "{[/common/generator/list],methods=[GET]}" onto java.util.List<java.util.Map<java.lang.String, java.lang.Object>> com.bootdo.common.controller.GeneratorController.list()
2019-04-03 10:29:39 -Mapped "{[/common/generator/code/{tableName}]}" onto public void com.bootdo.common.controller.GeneratorController.code(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String) throws java.io.IOException
2019-04-03 10:29:39 -Mapped "{[/common/generator],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.GeneratorController.generator()
2019-04-03 10:29:39 -Mapped "{[/common/generator/edit],methods=[GET]}" onto public java.lang.String com.bootdo.common.controller.GeneratorController.edit(org.springframework.ui.Model)
2019-04-03 10:29:39 -Mapped "{[/common/generator/batchCode]}" onto public void com.bootdo.common.controller.GeneratorController.batchCode(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String) throws java.io.IOException
2019-04-03 10:29:39 -Mapped "{[/common/job/add],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.JobController.add()
2019-04-03 10:29:39 -Mapped "{[/common/job/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.remove(java.lang.Long)
2019-04-03 10:29:39 -Mapped "{[/common/job/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.remove(java.lang.Long[])
2019-04-03 10:29:39 -Mapped "{[/common/job/update],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.update(com.bootdo.common.domain.TaskDO)
2019-04-03 10:29:39 -Mapped "{[/common/job/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.common.controller.JobController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 10:29:39 -Mapped "{[/common/job/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.save(com.bootdo.common.domain.TaskDO)
2019-04-03 10:29:39 -Mapped "{[/common/job/info/{id}]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.info(java.lang.Long)
2019-04-03 10:29:39 -Mapped "{[/common/job/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.JobController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 10:29:39 -Mapped "{[/common/job],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.JobController.taskScheduleJob()
2019-04-03 10:29:39 -Mapped "{[/common/job/changeJobStatus],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.changeJobStatus(java.lang.Long,java.lang.String)
2019-04-03 10:29:39 -Mapped "{[/common/log/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.LogController.remove(java.lang.Long)
2019-04-03 10:29:39 -Mapped "{[/common/log],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.LogController.log()
2019-04-03 10:29:39 -Mapped "{[/common/log/list],methods=[GET]}" onto com.bootdo.common.domain.PageDO<com.bootdo.common.domain.LogDO> com.bootdo.common.controller.LogController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 10:29:39 -Mapped "{[/common/log/batchRemove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.LogController.batchRemove(java.lang.Long[])
2019-04-03 10:29:39 -Mapped "{[/common/long],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.LongController.Long()
2019-04-03 10:29:39 -Mapped "{[/common/time],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.TimeController.Time()
2019-04-03 10:29:39 -Mapped "{[/error]}" onto public com.bootdo.common.utils.R com.bootdo.common.exception.MainsiteErrorController.handleError(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-04-03 10:29:39 -Mapped "{[/error],produces=[text/html]}" onto public org.springframework.web.servlet.ModelAndView com.bootdo.common.exception.MainsiteErrorController.errorHtml(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-04-03 10:29:39 -Mapped "{[/elec/elec/add],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecController.add()
2019-04-03 10:29:39 -Mapped "{[/elec/elec/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.remove(java.lang.Long)
2019-04-03 10:29:39 -Mapped "{[/elec/elec/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.remove(java.lang.Long[])
2019-04-03 10:29:39 -Mapped "{[/elec/elec/update],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.update(com.bootdo.elec.domain.ElecDO)
2019-04-03 10:29:39 -Mapped "{[/elec/elec/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.elec.controller.ElecController.list(java.util.Map<java.lang.String, java.lang.Object>,com.bootdo.elec.domain.ElecDO)
2019-04-03 10:29:39 -Mapped "{[/elec/elec/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.save(com.bootdo.elec.domain.ElecDO)
2019-04-03 10:29:39 -Mapped "{[/elec/elec/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 10:29:39 -Mapped "{[/elec/elec/exprotElec],methods=[GET]}" onto public void com.bootdo.elec.controller.ElecController.exprotExcel(com.bootdo.elec.vo.ElecVo,javax.servlet.http.HttpServletResponse)
2019-04-03 10:29:39 -Mapped "{[/elec/elec],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecController.Elec()
2019-04-03 10:29:39 -Mapped "{[/elec/elecInto/exprotElecIntoExcel],methods=[GET]}" onto public void com.bootdo.elec.controller.ElecIntoController.exprotExcel(com.bootdo.elec.vo.ElecVo,javax.servlet.http.HttpServletResponse)
2019-04-03 10:29:39 -Mapped "{[/elec/elecInto],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecIntoController.ElecInto()
2019-04-03 10:29:39 -Mapped "{[/elec/elecInto/importElecIntoExcel],methods=[POST]}" onto public java.util.Map<java.lang.String, java.lang.Object> com.bootdo.elec.controller.ElecIntoController.importElecIntoExcel(org.springframework.web.multipart.MultipartFile,com.bootdo.elec.vo.ElecVo) throws java.lang.Exception
2019-04-03 10:29:39 -Mapped "{[/elec/elecPrice/add],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecPriceController.add()
2019-04-03 10:29:39 -Mapped "{[/elec/elecPrice/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecPriceController.remove(java.lang.Long)
2019-04-03 10:29:39 -Mapped "{[/elec/elecPrice/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecPriceController.remove(java.lang.Long[])
2019-04-03 10:29:39 -Mapped "{[/elec/elecPrice/update]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecPriceController.update(com.bootdo.elec.domain.ElecPriceDO)
2019-04-03 10:29:39 -Mapped "{[/elec/elecPrice/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.elec.controller.ElecPriceController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 10:29:39 -Mapped "{[/elec/elecPrice/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecPriceController.save(com.bootdo.elec.domain.ElecPriceDO,com.bootdo.elec.domain.ElecDO)
2019-04-03 10:29:39 -Mapped "{[/elec/elecPrice/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecPriceController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 10:29:39 -Mapped "{[/elec/elecPrice],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecPriceController.ElecPrice()
2019-04-03 10:29:39 -Mapped "{[/elec/elecUpLoad],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecUpLoadController.Elec()
2019-04-03 10:29:39 -Mapped "{[/elec/elecUpLoad/importElecExcel],methods=[POST]}" onto public java.util.Map<java.lang.String, java.lang.Object> com.bootdo.elec.controller.ElecUpLoadController.importElecExcel(org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpServletRequest) throws java.lang.Exception
2019-04-03 10:29:39 -Mapped "{[/heat/heat/add],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatController.add()
2019-04-03 10:29:39 -Mapped "{[/heat/heat/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatController.remove(java.lang.Integer)
2019-04-03 10:29:39 -Mapped "{[/heat/heat/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatController.remove(java.lang.Integer[])
2019-04-03 10:29:39 -Mapped "{[/heat/heat/update]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatController.update(com.bootdo.heat.domain.HeatDO)
2019-04-03 10:29:39 -Mapped "{[/heat/heat/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.heat.controller.HeatController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 10:29:39 -Mapped "{[/heat/heat/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatController.save(com.bootdo.heat.domain.HeatDO)
2019-04-03 10:29:39 -Mapped "{[/heat/heat/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatController.edit(java.lang.Integer,org.springframework.ui.Model)
2019-04-03 10:29:39 -Mapped "{[/heat/heat/exprotHeat],methods=[GET]}" onto public void com.bootdo.heat.controller.HeatController.exprotExcel(com.bootdo.heat.vo.HeatVo,javax.servlet.http.HttpServletResponse)
2019-04-03 10:29:39 -Mapped "{[/heat/heat],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatController.Heat()
2019-04-03 10:29:39 -Mapped "{[/heat/heatInto/exprotHeatIntoExcel],methods=[GET]}" onto public void com.bootdo.heat.controller.HeatIntoController.exprotExcel(com.bootdo.heat.vo.HeatVo,javax.servlet.http.HttpServletResponse)
2019-04-03 10:29:39 -Mapped "{[/heat/heatInto],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatIntoController.HeatInto()
2019-04-03 10:29:39 -Mapped "{[/heat/heatPrice/add],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatPriceController.add()
2019-04-03 10:29:39 -Mapped "{[/heat/heatPrice/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatPriceController.remove(java.lang.Long)
2019-04-03 10:29:39 -Mapped "{[/heat/heatPrice/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatPriceController.remove(java.lang.Long[])
2019-04-03 10:29:39 -Mapped "{[/heat/heatPrice/update]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatPriceController.update(com.bootdo.heat.domain.HeatPriceDO)
2019-04-03 10:29:39 -Mapped "{[/heat/heatPrice/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.heat.controller.HeatPriceController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 10:29:39 -Mapped "{[/heat/heatPrice/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatPriceController.save(com.bootdo.heat.domain.HeatPriceDO)
2019-04-03 10:29:39 -Mapped "{[/heat/heatPrice/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatPriceController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 10:29:39 -Mapped "{[/heat/heatPrice],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatPriceController.HeatPrice()
2019-04-03 10:29:39 -Mapped "{[/heat/heatUpLoad/exprotHeatExcel],methods=[GET]}" onto public void com.bootdo.heat.controller.HeatUpLoadController.exprotHeatExcel(com.bootdo.heat.vo.HeatVo,javax.servlet.http.HttpServletResponse)
2019-04-03 10:29:39 -Mapped "{[/heat/heatUpLoad],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatUpLoadController.HeatUpLoad()
2019-04-03 10:29:39 -Mapped "{[/heat/heatUpLoad/importHeatExcel]}" onto public java.lang.String com.bootdo.heat.controller.HeatUpLoadController.importHeatExcel(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)
2019-04-03 10:29:39 -Mapped "{[/heat/heatUpLoad/createHeatExcel],methods=[POST]}" onto public java.lang.String com.bootdo.heat.controller.HeatUpLoadController.createHeatExcel(com.bootdo.heat.domain.HeatDO) throws java.lang.Exception
2019-04-03 10:29:39 -Mapped "{[/moneyList/moneyList],methods=[GET]}" onto java.lang.String com.bootdo.moneyList.controller.MoneyListController.MoneyList()
2019-04-03 10:29:39 -Mapped "{[/moneyList/moneyList/queryAllUser],methods=[POST]}" onto public java.util.List<com.bootdo.moneyList.damain.MoneyListDO> com.bootdo.moneyList.controller.MoneyListController.queryAllUser(com.bootdo.moneyList.damain.MoneyListDO)
2019-04-03 10:29:39 -Mapped "{[/moneyList/moneyList/updateMoney],methods=[POST]}" onto public java.util.List<com.bootdo.moneyList.damain.MoneyListDO> com.bootdo.moneyList.controller.MoneyListController.updateMoney(com.bootdo.moneyList.damain.MoneyListDO)
2019-04-03 10:29:39 -Mapped "{[/moneyList/moneyList/queryAllUserName],methods=[POST]}" onto public java.util.List<com.bootdo.moneyList.damain.MoneyListDO> com.bootdo.moneyList.controller.MoneyListController.getAllUserName(com.bootdo.moneyList.damain.MoneyListDO)
2019-04-03 10:29:39 -Mapped "{[/moneyLog/elecLog/add],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.ElecLogController.add()
2019-04-03 10:29:39 -Mapped "{[/moneyLog/elecLog/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.ElecLogController.remove(java.lang.Long)
2019-04-03 10:29:39 -Mapped "{[/moneyLog/elecLog/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.ElecLogController.remove(java.lang.Long[])
2019-04-03 10:29:39 -Mapped "{[/moneyLog/elecLog/update]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.ElecLogController.update(com.bootdo.moneyLog.domain.ElecLogDO)
2019-04-03 10:29:39 -Mapped "{[/moneyLog/elecLog/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.moneyLog.controller.ElecLogController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 10:29:39 -Mapped "{[/moneyLog/elecLog/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.ElecLogController.save(com.bootdo.moneyLog.domain.ElecLogDO)
2019-04-03 10:29:39 -Mapped "{[/moneyLog/elecLog/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.ElecLogController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 10:29:39 -Mapped "{[/moneyLog/elecLog/exprotElecLog],methods=[GET]}" onto public void com.bootdo.moneyLog.controller.ElecLogController.exprotElecLog(com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-03 10:29:39 -Mapped "{[/moneyLog/elecLog],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.ElecLogController.moneyLog()
2019-04-03 10:29:39 -Mapped "{[/moneyLog/heatLog/add],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.HeatLogController.add()
2019-04-03 10:29:39 -Mapped "{[/moneyLog/heatLog/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.HeatLogController.remove(java.lang.Long)
2019-04-03 10:29:39 -Mapped "{[/moneyLog/heatLog/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.HeatLogController.remove(java.lang.Long[])
2019-04-03 10:29:39 -Mapped "{[/moneyLog/heatLog/update]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.HeatLogController.update(com.bootdo.moneyLog.domain.HeatLogDO)
2019-04-03 10:29:39 -Mapped "{[/moneyLog/heatLog/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.moneyLog.controller.HeatLogController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 10:29:39 -Mapped "{[/moneyLog/heatLog/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.HeatLogController.save(com.bootdo.moneyLog.domain.HeatLogDO)
2019-04-03 10:29:39 -Mapped "{[/moneyLog/heatLog/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.HeatLogController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 10:29:39 -Mapped "{[/moneyLog/heatLog],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.HeatLogController.HeatLog()
2019-04-03 10:29:39 -Mapped "{[/moneyLog/heatLog/exprotHeatLog],methods=[GET]}" onto public void com.bootdo.moneyLog.controller.HeatLogController.exprotHeatLog(com.bootdo.moneyLog.vo.HeatLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-03 10:29:39 -Mapped "{[/moneyLog/waterLog/add],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.WaterLogController.add()
2019-04-03 10:29:39 -Mapped "{[/moneyLog/waterLog/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.WaterLogController.remove(java.lang.Long)
2019-04-03 10:29:39 -Mapped "{[/moneyLog/waterLog/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.WaterLogController.remove(java.lang.Long[])
2019-04-03 10:29:39 -Mapped "{[/moneyLog/waterLog/update]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.WaterLogController.update(com.bootdo.moneyLog.domain.WaterLogDO)
2019-04-03 10:29:39 -Mapped "{[/moneyLog/waterLog/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.moneyLog.controller.WaterLogController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 10:29:39 -Mapped "{[/moneyLog/waterLog/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.WaterLogController.save(com.bootdo.moneyLog.domain.WaterLogDO)
2019-04-03 10:29:39 -Mapped "{[/moneyLog/waterLog/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.WaterLogController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 10:29:39 -Mapped "{[/moneyLog/waterLog/exprotWaterLog],methods=[GET]}" onto public void com.bootdo.moneyLog.controller.WaterLogController.exprotWaterLog(com.bootdo.moneyLog.vo.WaterLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-03 10:29:39 -Mapped "{[/moneyLog/waterLog],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.WaterLogController.WaterLog()
2019-04-03 10:29:39 -Mapped "{[/oa/notify/add],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.add()
2019-04-03 10:29:39 -Mapped "{[/oa/notify/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.remove(java.lang.Long)
2019-04-03 10:29:39 -Mapped "{[/oa/notify/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.remove(java.lang.Long[])
2019-04-03 10:29:39 -Mapped "{[/oa/notify/update]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.update(com.bootdo.oa.domain.NotifyDO)
2019-04-03 10:29:39 -Mapped "{[/oa/notify/read/{id}],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.read(java.lang.Long,org.springframework.ui.Model)
2019-04-03 10:29:39 -Mapped "{[/oa/notify/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.oa.controller.NotifyController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 10:29:39 -Mapped "{[/oa/notify/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.save(com.bootdo.oa.domain.NotifyDO)
2019-04-03 10:29:39 -Mapped "{[/oa/notify/message],methods=[GET]}" onto com.bootdo.common.utils.PageUtils com.bootdo.oa.controller.NotifyController.message()
2019-04-03 10:29:39 -Mapped "{[/oa/notify/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 10:29:39 -Mapped "{[/oa/notify/selfList],methods=[GET]}" onto com.bootdo.common.utils.PageUtils com.bootdo.oa.controller.NotifyController.selfList(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 10:29:39 -Mapped "{[/oa/notify/selfNotify],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.selefNotify()
2019-04-03 10:29:39 -Mapped "{[/oa/notify],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.oaNotify()
2019-04-03 10:29:39 -Mapped "{[/print/print/add],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.add()
2019-04-03 10:29:39 -Mapped "{[/print/print/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.print.controller.PrintController.remove(java.lang.Long)
2019-04-03 10:29:39 -Mapped "{[/print/print/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.print.controller.PrintController.remove(java.lang.Long[])
2019-04-03 10:29:39 -Mapped "{[/print/print/update]}" onto public com.bootdo.common.utils.R com.bootdo.print.controller.PrintController.update(com.bootdo.print.domain.PrintDO)
2019-04-03 10:29:39 -Mapped "{[/print/print/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.print.controller.PrintController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 10:29:39 -Mapped "{[/print/print/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.print.controller.PrintController.save(java.lang.String,com.bootdo.print.domain.PrintDO)
2019-04-03 10:29:39 -Mapped "{[/print/print/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 10:29:39 -Mapped "{[/print/print],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.Print()
2019-04-03 10:29:39 -Mapped "{[/print/print/exprotPrint],methods=[GET]}" onto public void com.bootdo.print.controller.PrintController.exprotPrint(com.bootdo.print.vo.PrintVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-03 10:29:39 -Mapped "{[/print/print/printEdit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.printEdit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 10:29:39 -Mapped "{[/system/sysDept/add/{pId}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.add(java.lang.Long,org.springframework.ui.Model)
2019-04-03 10:29:39 -Mapped "{[/system/sysDept/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.remove(java.lang.Long)
2019-04-03 10:29:39 -Mapped "{[/system/sysDept/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.remove(java.lang.Long[])
2019-04-03 10:29:39 -Mapped "{[/system/sysDept/update]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.update(com.bootdo.system.domain.DeptDO)
2019-04-03 10:29:39 -Mapped "{[/system/sysDept/list],methods=[GET]}" onto public java.util.List<com.bootdo.system.domain.DeptDO> com.bootdo.system.controller.DeptController.list()
2019-04-03 10:29:39 -Mapped "{[/system/sysDept/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.save(com.bootdo.system.domain.DeptDO)
2019-04-03 10:29:39 -Mapped "{[/system/sysDept/tree],methods=[GET]}" onto public com.bootdo.common.domain.Tree<com.bootdo.system.domain.DeptDO> com.bootdo.system.controller.DeptController.tree()
2019-04-03 10:29:39 -Mapped "{[/system/sysDept/edit/{deptId}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 10:29:39 -Mapped "{[/system/sysDept],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.dept()
2019-04-03 10:29:39 -Mapped "{[/system/sysDept/treeView],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.treeView()
2019-04-03 10:29:39 -Mapped "{[/index],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.index(org.springframework.ui.Model)
2019-04-03 10:29:39 -Mapped "{[/main],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.main()
2019-04-03 10:29:39 -Mapped "{[/login],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.login(org.springframework.ui.Model)
2019-04-03 10:29:39 -Mapped "{[/logout],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.logout()
2019-04-03 10:29:39 -Mapped "{[/login],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.LoginController.ajaxLogin(java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest)
2019-04-03 10:29:39 -Mapped "{[/ || ],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.welcome(org.springframework.ui.Model)
2019-04-03 10:29:39 -Mapped "{[/getVerify],methods=[GET]}" onto public void com.bootdo.system.controller.LoginController.getVerify(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-04-03 10:29:39 -Mapped "{[/sys/menu/add/{pId}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.MenuController.add(org.springframework.ui.Model,java.lang.Long)
2019-04-03 10:29:39 -Mapped "{[/sys/menu/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.MenuController.remove(java.lang.Long)
2019-04-03 10:29:39 -Mapped "{[/sys/menu/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.MenuController.update(com.bootdo.system.domain.MenuDO)
2019-04-03 10:29:39 -Mapped "{[/sys/menu/list]}" onto java.util.List<com.bootdo.system.domain.MenuDO> com.bootdo.system.controller.MenuController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 10:29:39 -Mapped "{[/sys/menu/save],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.MenuController.save(com.bootdo.system.domain.MenuDO)
2019-04-03 10:29:39 -Mapped "{[/sys/menu/tree/{roleId}],methods=[GET]}" onto com.bootdo.common.domain.Tree<com.bootdo.system.domain.MenuDO> com.bootdo.system.controller.MenuController.tree(java.lang.Long)
2019-04-03 10:29:39 -Mapped "{[/sys/menu/tree],methods=[GET]}" onto com.bootdo.common.domain.Tree<com.bootdo.system.domain.MenuDO> com.bootdo.system.controller.MenuController.tree()
2019-04-03 10:29:39 -Mapped "{[/sys/menu/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.MenuController.edit(org.springframework.ui.Model,java.lang.Long)
2019-04-03 10:29:39 -Mapped "{[/sys/menu],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.MenuController.menu(org.springframework.ui.Model)
2019-04-03 10:29:39 -Mapped "{[/sys/role/add],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.RoleController.add()
2019-04-03 10:29:39 -Mapped "{[/sys/role/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.update(com.bootdo.system.domain.RoleDO)
2019-04-03 10:29:39 -Mapped "{[/sys/role/list],methods=[GET]}" onto java.util.List<com.bootdo.system.domain.RoleDO> com.bootdo.system.controller.RoleController.list()
2019-04-03 10:29:39 -Mapped "{[/sys/role/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.save(java.lang.Long)
2019-04-03 10:29:39 -Mapped "{[/sys/role/save],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.save(com.bootdo.system.domain.RoleDO)
2019-04-03 10:29:39 -Mapped "{[/sys/role/batchRemove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.batchRemove(java.lang.Long[])
2019-04-03 10:29:39 -Mapped "{[/sys/role],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.RoleController.role()
2019-04-03 10:29:39 -Mapped "{[/sys/role/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.RoleController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 10:29:39 -Mapped "{[/sys/online/list]}" onto public java.util.List<com.bootdo.system.domain.UserOnline> com.bootdo.system.controller.SessionController.list()
2019-04-03 10:29:39 -Mapped "{[/sys/online/sessionList]}" onto public java.util.Collection<org.apache.shiro.session.Session> com.bootdo.system.controller.SessionController.sessionList()
2019-04-03 10:29:39 -Mapped "{[/sys/online/forceLogout/{sessionId}]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.SessionController.forceLogout(java.lang.String,org.springframework.web.servlet.mvc.support.RedirectAttributes)
2019-04-03 10:29:39 -Mapped "{[/sys/online],methods=[GET]}" onto public java.lang.String com.bootdo.system.controller.SessionController.online()
2019-04-03 10:29:39 -Mapped "{[/sys/user/exit],methods=[POST]}" onto boolean com.bootdo.system.controller.UserController.exit(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 10:29:39 -Mapped "{[/sys/user/add],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.add(org.springframework.ui.Model)
2019-04-03 10:29:39 -Mapped "{[/sys/user/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.remove(java.lang.Long)
2019-04-03 10:29:39 -Mapped "{[/sys/user/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.update(com.bootdo.system.domain.UserDO)
2019-04-03 10:29:39 -Mapped "{[/sys/user/list],methods=[GET]}" onto com.bootdo.common.utils.PageUtils com.bootdo.system.controller.UserController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 10:29:39 -Mapped "{[/sys/user/save],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.save(com.bootdo.system.domain.UserDO)
2019-04-03 10:29:39 -Mapped "{[/sys/user/batchRemove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.batchRemove(java.lang.Long[])
2019-04-03 10:29:39 -Mapped "{[/sys/user/tree],methods=[GET]}" onto public com.bootdo.common.domain.Tree<com.bootdo.system.domain.DeptDO> com.bootdo.system.controller.UserController.tree()
2019-04-03 10:29:39 -Mapped "{[/sys/user],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.user(org.springframework.ui.Model)
2019-04-03 10:29:39 -Mapped "{[/sys/user/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.edit(org.springframework.ui.Model,java.lang.Long)
2019-04-03 10:29:39 -Mapped "{[/sys/user/treeView],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.treeView()
2019-04-03 10:29:39 -Mapped "{[/sys/user/adminResetPwd],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.adminResetPwd(com.bootdo.system.vo.UserVO)
2019-04-03 10:29:39 -Mapped "{[/sys/user/personal],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.personal(org.springframework.ui.Model)
2019-04-03 10:29:39 -Mapped "{[/sys/user/uploadImg],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.uploadImg(org.springframework.web.multipart.MultipartFile,java.lang.String,javax.servlet.http.HttpServletRequest)
2019-04-03 10:29:39 -Mapped "{[/sys/user/resetPwd/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.resetPwd(java.lang.Long,org.springframework.ui.Model)
2019-04-03 10:29:39 -Mapped "{[/sys/user/resetPwd],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.resetPwd(com.bootdo.system.vo.UserVO)
2019-04-03 10:29:39 -Mapped "{[/sys/user/updatePeronal],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.updatePeronal(com.bootdo.system.domain.UserDO)
2019-04-03 10:29:39 -Mapped "{[/file/downImport/{importType}],methods=[GET]}" onto public void com.bootdo.temple.controller.TempletController.downImport(javax.servlet.http.HttpServletResponse,java.lang.String)
2019-04-03 10:29:39 -Mapped "{[/water/water/add],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterController.add()
2019-04-03 10:29:39 -Mapped "{[/water/water/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterController.remove(java.lang.Long)
2019-04-03 10:29:39 -Mapped "{[/water/water/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterController.remove(java.lang.Long[])
2019-04-03 10:29:39 -Mapped "{[/water/water/update]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterController.update(com.bootdo.water.domain.WaterDO)
2019-04-03 10:29:39 -Mapped "{[/water/water/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.water.controller.WaterController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 10:29:39 -Mapped "{[/water/water/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterController.save(com.bootdo.water.domain.WaterDO)
2019-04-03 10:29:39 -Mapped "{[/water/water/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 10:29:39 -Mapped "{[/water/water/exprotWater],methods=[GET]}" onto public void com.bootdo.water.controller.WaterController.exprotExcel(com.bootdo.water.vo.WaterVo,javax.servlet.http.HttpServletResponse)
2019-04-03 10:29:39 -Mapped "{[/water/water],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterController.Water()
2019-04-03 10:29:39 -Mapped "{[/water/waterInto/exprotWaterIntoExcel],methods=[GET]}" onto public void com.bootdo.water.controller.WaterIntoController.exprotExcel(com.bootdo.water.vo.WaterVo,javax.servlet.http.HttpServletResponse)
2019-04-03 10:29:39 -Mapped "{[/water/waterInto],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterIntoController.WaterInto()
2019-04-03 10:29:39 -Mapped "{[/water/waterPrice/add],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterPriceController.add()
2019-04-03 10:29:39 -Mapped "{[/water/waterPrice/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterPriceController.remove(java.lang.Long)
2019-04-03 10:29:39 -Mapped "{[/water/waterPrice/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterPriceController.remove(java.lang.Long[])
2019-04-03 10:29:39 -Mapped "{[/water/waterPrice/update]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterPriceController.update(com.bootdo.water.domain.WaterPriceDO)
2019-04-03 10:29:39 -Mapped "{[/water/waterPrice/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.water.controller.WaterPriceController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 10:29:39 -Mapped "{[/water/waterPrice/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterPriceController.save(com.bootdo.water.domain.WaterPriceDO)
2019-04-03 10:29:39 -Mapped "{[/water/waterPrice/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterPriceController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 10:29:39 -Mapped "{[/water/waterPrice],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterPriceController.WaterPrice()
2019-04-03 10:29:39 -Mapped "{[/water/waterUpLoad],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterUpLoadController.WaterUpLoad()
2019-04-03 10:29:39 -Mapped "{[/water/waterUpLoad/importWaterExcel]}" onto public java.lang.String com.bootdo.water.controller.WaterUpLoadController.importWaterExcel(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)
2019-04-03 10:29:39 -Mapped "{[/water/waterUpLoad/createWaterExcel],methods=[POST]}" onto public java.lang.String com.bootdo.water.controller.WaterUpLoadController.createWaterExcel(com.bootdo.water.domain.WaterDO) throws java.lang.Exception
2019-04-03 10:29:39 -Mapped "{[/water/waterUpLoad/exprotWaterExcel],methods=[GET]}" onto public void com.bootdo.water.controller.WaterUpLoadController.exprotWaterExcel(com.bootdo.water.vo.WaterVo,javax.servlet.http.HttpServletResponse)
2019-04-03 10:29:39 -Mapped "{[/v2/api-docs],methods=[GET],produces=[application/json || application/hal+json]}" onto public org.springframework.http.ResponseEntity<springfox.documentation.spring.web.json.Json> springfox.documentation.swagger2.web.Swagger2Controller.getDocumentation(java.lang.String,javax.servlet.http.HttpServletRequest)
2019-04-03 10:29:39 -Mapped "{[/swagger-resources/configuration/security]}" onto org.springframework.http.ResponseEntity<springfox.documentation.swagger.web.SecurityConfiguration> springfox.documentation.swagger.web.ApiResourceController.securityConfiguration()
2019-04-03 10:29:39 -Mapped "{[/swagger-resources]}" onto org.springframework.http.ResponseEntity<java.util.List<springfox.documentation.swagger.web.SwaggerResource>> springfox.documentation.swagger.web.ApiResourceController.swaggerResources()
2019-04-03 10:29:39 -Mapped "{[/swagger-resources/configuration/ui]}" onto org.springframework.http.ResponseEntity<springfox.documentation.swagger.web.UiConfiguration> springfox.documentation.swagger.web.ApiResourceController.uiConfiguration()
2019-04-03 10:29:43 -Initializing ExecutorService  'messageBrokerTaskScheduler'
2019-04-03 10:29:43 -Mapped URL path [/endpointChat/**] onto handler of type [class org.springframework.web.socket.sockjs.support.SockJsHttpRequestHandler]
2019-04-03 10:29:43 -Initializing ExecutorService  'brokerChannelExecutor'
2019-04-03 10:29:44 -Mapped URL path [/**/favicon.ico] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-04-03 10:29:44 -Looking for @ControllerAdvice: org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@6fdbe764: startup date [Wed Apr 03 10:29:15 CST 2019]; root of context hierarchy
2019-04-03 10:29:44 -Mapped URL path [/webjars/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-04-03 10:29:44 -Mapped URL path [/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-04-03 10:29:44 -Mapped URL path [/files/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-04-03 10:29:44 -Detected @ExceptionHandler methods in BDExceptionHandler
2019-04-03 10:29:45 -[THYMELEAF][main] Template Mode 'LEGACYHTML5' is deprecated. Using Template Mode 'HTML' instead.
2019-04-03 10:29:47 -Registering beans for JMX exposure on startup
2019-04-03 10:29:47 -Bean with name 'dataSource' has been autodetected for JMX exposure
2019-04-03 10:29:47 -Located MBean 'dataSource': registering with JMX server as MBean [com.alibaba.druid.pool:name=dataSource,type=DruidDataSource]
2019-04-03 10:29:47 -Starting beans in phase 2147483647
2019-04-03 10:29:47 -Context refreshed
2019-04-03 10:29:47 -Found 1 custom documentation plugin(s)
2019-04-03 10:29:48 -Scanning for api listing references
2019-04-03 10:29:48 -Generating unique operation named: exprotElecLogUsingGET_1
2019-04-03 10:29:48 -Generating unique operation named: getCountDUsingPOST_1
2019-04-03 10:29:48 -Generating unique operation named: exprotElecLogUsingGET_2
2019-04-03 10:29:48 -Generating unique operation named: getCountDUsingPOST_2
2019-04-03 10:29:48 -Generating unique operation named: exprotElecLogUsingGET_3
2019-04-03 10:29:48 -Generating unique operation named: getCountDUsingPOST_3
2019-04-03 10:29:48 -Generating unique operation named: removeUsingPOST_1
2019-04-03 10:29:48 -Generating unique operation named: addUsingGET_1
2019-04-03 10:29:48 -Generating unique operation named: editUsingGET_1
2019-04-03 10:29:48 -Generating unique operation named: listUsingGET_1
2019-04-03 10:29:48 -Generating unique operation named: removeUsingPOST_2
2019-04-03 10:29:48 -Generating unique operation named: removeUsingPOST_3
2019-04-03 10:29:48 -Generating unique operation named: saveUsingPOST_1
2019-04-03 10:29:48 -Generating unique operation named: updateUsingGET_1
2019-04-03 10:29:48 -Generating unique operation named: updateUsingHEAD_1
2019-04-03 10:29:48 -Generating unique operation named: updateUsingPOST_1
2019-04-03 10:29:48 -Generating unique operation named: updateUsingPUT_1
2019-04-03 10:29:48 -Generating unique operation named: updateUsingPATCH_1
2019-04-03 10:29:48 -Generating unique operation named: updateUsingDELETE_1
2019-04-03 10:29:48 -Generating unique operation named: updateUsingOPTIONS_1
2019-04-03 10:29:49 -Generating unique operation named: updateUsingTRACE_1
2019-04-03 10:29:49 -Generating unique operation named: addUsingGET_2
2019-04-03 10:29:49 -Generating unique operation named: editUsingGET_2
2019-04-03 10:29:49 -Generating unique operation named: listUsingGET_2
2019-04-03 10:29:49 -Generating unique operation named: removeUsingPOST_4
2019-04-03 10:29:49 -Generating unique operation named: removeUsingPOST_5
2019-04-03 10:29:49 -Generating unique operation named: saveUsingPOST_2
2019-04-03 10:29:49 -Generating unique operation named: updateUsingPOST_2
2019-04-03 10:29:49 -Generating unique operation named: exprotExcelUsingGET_1
2019-04-03 10:29:49 -Generating unique operation named: addUsingGET_3
2019-04-03 10:29:49 -Generating unique operation named: editUsingGET_3
2019-04-03 10:29:49 -Generating unique operation named: exprotElecLogUsingGET_4
2019-04-03 10:29:49 -Generating unique operation named: listUsingGET_3
2019-04-03 10:29:49 -Generating unique operation named: removeUsingPOST_6
2019-04-03 10:29:49 -Generating unique operation named: removeUsingPOST_7
2019-04-03 10:29:49 -Generating unique operation named: saveUsingPOST_3
2019-04-03 10:29:49 -Generating unique operation named: updateUsingGET_2
2019-04-03 10:29:49 -Generating unique operation named: updateUsingHEAD_2
2019-04-03 10:29:49 -Generating unique operation named: updateUsingPOST_3
2019-04-03 10:29:49 -Generating unique operation named: updateUsingPUT_2
2019-04-03 10:29:49 -Generating unique operation named: updateUsingPATCH_2
2019-04-03 10:29:49 -Generating unique operation named: updateUsingDELETE_2
2019-04-03 10:29:49 -Generating unique operation named: updateUsingOPTIONS_2
2019-04-03 10:29:49 -Generating unique operation named: updateUsingTRACE_2
2019-04-03 10:29:49 -Generating unique operation named: addUsingGET_4
2019-04-03 10:29:49 -Generating unique operation named: editUsingGET_4
2019-04-03 10:29:49 -Generating unique operation named: listUsingGET_4
2019-04-03 10:29:49 -Generating unique operation named: removeUsingPOST_8
2019-04-03 10:29:49 -Generating unique operation named: removeUsingPOST_9
2019-04-03 10:29:49 -Generating unique operation named: saveUsingPOST_4
2019-04-03 10:29:49 -Generating unique operation named: updateUsingGET_3
2019-04-03 10:29:49 -Generating unique operation named: updateUsingHEAD_3
2019-04-03 10:29:49 -Generating unique operation named: updateUsingPOST_4
2019-04-03 10:29:49 -Generating unique operation named: updateUsingPUT_3
2019-04-03 10:29:49 -Generating unique operation named: updateUsingPATCH_3
2019-04-03 10:29:49 -Generating unique operation named: updateUsingDELETE_3
2019-04-03 10:29:49 -Generating unique operation named: updateUsingOPTIONS_3
2019-04-03 10:29:49 -Generating unique operation named: updateUsingTRACE_3
2019-04-03 10:29:49 -Generating unique operation named: ElecUsingGET_1
2019-04-03 10:29:49 -Generating unique operation named: addUsingGET_5
2019-04-03 10:29:49 -Generating unique operation named: editUsingGET_5
2019-04-03 10:29:49 -Generating unique operation named: listUsingGET_5
2019-04-03 10:29:49 -Generating unique operation named: removeUsingPOST_10
2019-04-03 10:29:49 -Generating unique operation named: removeUsingPOST_11
2019-04-03 10:29:49 -Generating unique operation named: saveUsingPOST_5
2019-04-03 10:29:49 -Generating unique operation named: updateUsingGET_4
2019-04-03 10:29:49 -Generating unique operation named: updateUsingHEAD_4
2019-04-03 10:29:49 -Generating unique operation named: updateUsingPOST_5
2019-04-03 10:29:49 -Generating unique operation named: updateUsingPUT_4
2019-04-03 10:29:49 -Generating unique operation named: updateUsingPATCH_4
2019-04-03 10:29:49 -Generating unique operation named: updateUsingDELETE_4
2019-04-03 10:29:49 -Generating unique operation named: updateUsingOPTIONS_4
2019-04-03 10:29:49 -Generating unique operation named: updateUsingTRACE_4
2019-04-03 10:29:49 -Generating unique operation named: editUsingGET_6
2019-04-03 10:29:49 -Generating unique operation named: listUsingGET_6
2019-04-03 10:29:49 -Generating unique operation named: updateUsingPOST_6
2019-04-03 10:29:49 -Generating unique operation named: addUsingGET_6
2019-04-03 10:29:49 -Generating unique operation named: editUsingGET_7
2019-04-03 10:29:49 -Generating unique operation named: exprotExcelUsingGET_2
2019-04-03 10:29:49 -Generating unique operation named: listUsingGET_7
2019-04-03 10:29:49 -Generating unique operation named: removeUsingPOST_12
2019-04-03 10:29:49 -Generating unique operation named: removeUsingPOST_13
2019-04-03 10:29:49 -Generating unique operation named: saveUsingPOST_6
2019-04-03 10:29:49 -Generating unique operation named: updateUsingGET_5
2019-04-03 10:29:49 -Generating unique operation named: updateUsingHEAD_5
2019-04-03 10:29:49 -Generating unique operation named: updateUsingPOST_7
2019-04-03 10:29:49 -Generating unique operation named: updateUsingPUT_5
2019-04-03 10:29:49 -Generating unique operation named: updateUsingPATCH_5
2019-04-03 10:29:49 -Generating unique operation named: updateUsingDELETE_5
2019-04-03 10:29:49 -Generating unique operation named: updateUsingOPTIONS_5
2019-04-03 10:29:49 -Generating unique operation named: updateUsingTRACE_5
2019-04-03 10:29:49 -Generating unique operation named: exprotExcelUsingGET_3
2019-04-03 10:29:49 -Generating unique operation named: addUsingGET_7
2019-04-03 10:29:49 -Generating unique operation named: editUsingGET_8
2019-04-03 10:29:49 -Generating unique operation named: listUsingGET_8
2019-04-03 10:29:49 -Generating unique operation named: removeUsingPOST_14
2019-04-03 10:29:49 -Generating unique operation named: removeUsingPOST_15
2019-04-03 10:29:49 -Generating unique operation named: saveUsingPOST_7
2019-04-03 10:29:49 -Generating unique operation named: updateUsingGET_6
2019-04-03 10:29:49 -Generating unique operation named: updateUsingHEAD_6
2019-04-03 10:29:49 -Generating unique operation named: updateUsingPOST_8
2019-04-03 10:29:49 -Generating unique operation named: updateUsingPUT_6
2019-04-03 10:29:49 -Generating unique operation named: updateUsingPATCH_6
2019-04-03 10:29:49 -Generating unique operation named: updateUsingDELETE_6
2019-04-03 10:29:49 -Generating unique operation named: updateUsingOPTIONS_6
2019-04-03 10:29:49 -Generating unique operation named: updateUsingTRACE_6
2019-04-03 10:29:49 -Generating unique operation named: addUsingGET_8
2019-04-03 10:29:49 -Generating unique operation named: editUsingGET_9
2019-04-03 10:29:49 -Generating unique operation named: listUsingGET_9
2019-04-03 10:29:49 -Generating unique operation named: removeUsingPOST_16
2019-04-03 10:29:49 -Generating unique operation named: removeUsingPOST_17
2019-04-03 10:29:49 -Generating unique operation named: saveUsingPOST_8
2019-04-03 10:29:49 -Generating unique operation named: updateUsingGET_7
2019-04-03 10:29:49 -Generating unique operation named: updateUsingHEAD_7
2019-04-03 10:29:49 -Generating unique operation named: updateUsingPOST_9
2019-04-03 10:29:49 -Generating unique operation named: updateUsingPUT_7
2019-04-03 10:29:49 -Generating unique operation named: updateUsingPATCH_7
2019-04-03 10:29:49 -Generating unique operation named: updateUsingDELETE_7
2019-04-03 10:29:49 -Generating unique operation named: updateUsingOPTIONS_7
2019-04-03 10:29:49 -Generating unique operation named: updateUsingTRACE_7
2019-04-03 10:29:49 -Generating unique operation named: addUsingGET_9
2019-04-03 10:29:49 -Generating unique operation named: editUsingGET_10
2019-04-03 10:29:49 -Generating unique operation named: infoUsingGET_1
2019-04-03 10:29:49 -Generating unique operation named: infoUsingHEAD_1
2019-04-03 10:29:49 -Generating unique operation named: infoUsingPOST_1
2019-04-03 10:29:49 -Generating unique operation named: infoUsingPUT_1
2019-04-03 10:29:49 -Generating unique operation named: infoUsingPATCH_1
2019-04-03 10:29:49 -Generating unique operation named: infoUsingDELETE_1
2019-04-03 10:29:49 -Generating unique operation named: infoUsingOPTIONS_1
2019-04-03 10:29:49 -Generating unique operation named: infoUsingTRACE_1
2019-04-03 10:29:49 -Generating unique operation named: listUsingGET_10
2019-04-03 10:29:49 -Generating unique operation named: removeUsingPOST_18
2019-04-03 10:29:49 -Generating unique operation named: removeUsingPOST_19
2019-04-03 10:29:49 -Generating unique operation named: saveUsingPOST_9
2019-04-03 10:29:49 -Generating unique operation named: updateUsingPOST_10
2019-04-03 10:29:49 -Generating unique operation named: listUsingGET_11
2019-04-03 10:29:49 -Generating unique operation named: removeUsingPOST_20
2019-04-03 10:29:49 -Generating unique operation named: welcomeUsingGET_1
2019-04-03 10:29:49 -Generating unique operation named: addUsingGET_10
2019-04-03 10:29:49 -Generating unique operation named: editUsingGET_11
2019-04-03 10:29:49 -Generating unique operation named: listUsingGET_12
2019-04-03 10:29:49 -Generating unique operation named: removeUsingPOST_21
2019-04-03 10:29:49 -Generating unique operation named: saveUsingPOST_10
2019-04-03 10:29:50 -Generating unique operation named: treeUsingGET_1
2019-04-03 10:29:50 -Generating unique operation named: treeUsingGET_2
2019-04-03 10:29:50 -Generating unique operation named: updateUsingPOST_11
2019-04-03 10:29:50 -Generating unique operation named: addUsingGET_11
2019-04-03 10:29:50 -Generating unique operation named: editUsingGET_12
2019-04-03 10:29:50 -Generating unique operation named: listUsingGET_13
2019-04-03 10:29:50 -Generating unique operation named: removeUsingPOST_22
2019-04-03 10:29:50 -Generating unique operation named: removeUsingPOST_23
2019-04-03 10:29:50 -Generating unique operation named: saveUsingPOST_11
2019-04-03 10:29:50 -Generating unique operation named: updateUsingGET_8
2019-04-03 10:29:50 -Generating unique operation named: updateUsingHEAD_8
2019-04-03 10:29:50 -Generating unique operation named: updateUsingPOST_12
2019-04-03 10:29:50 -Generating unique operation named: updateUsingPUT_8
2019-04-03 10:29:50 -Generating unique operation named: updateUsingPATCH_8
2019-04-03 10:29:50 -Generating unique operation named: updateUsingDELETE_8
2019-04-03 10:29:50 -Generating unique operation named: updateUsingOPTIONS_8
2019-04-03 10:29:50 -Generating unique operation named: updateUsingTRACE_8
2019-04-03 10:29:50 -Generating unique operation named: addUsingGET_12
2019-04-03 10:29:50 -Generating unique operation named: editUsingGET_13
2019-04-03 10:29:50 -Generating unique operation named: listUsingGET_14
2019-04-03 10:29:50 -Generating unique operation named: removeUsingPOST_24
2019-04-03 10:29:50 -Generating unique operation named: removeUsingPOST_25
2019-04-03 10:29:50 -Generating unique operation named: saveUsingPOST_12
2019-04-03 10:29:50 -Generating unique operation named: updateUsingGET_9
2019-04-03 10:29:50 -Generating unique operation named: updateUsingHEAD_9
2019-04-03 10:29:50 -Generating unique operation named: updateUsingPOST_13
2019-04-03 10:29:50 -Generating unique operation named: updateUsingPUT_9
2019-04-03 10:29:50 -Generating unique operation named: updateUsingPATCH_9
2019-04-03 10:29:50 -Generating unique operation named: updateUsingDELETE_9
2019-04-03 10:29:50 -Generating unique operation named: updateUsingOPTIONS_9
2019-04-03 10:29:50 -Generating unique operation named: updateUsingTRACE_9
2019-04-03 10:29:50 -Generating unique operation named: addUsingGET_13
2019-04-03 10:29:50 -Generating unique operation named: batchRemoveUsingPOST_1
2019-04-03 10:29:50 -Generating unique operation named: editUsingGET_14
2019-04-03 10:29:50 -Generating unique operation named: listUsingGET_15
2019-04-03 10:29:50 -Generating unique operation named: saveUsingPOST_13
2019-04-03 10:29:50 -Generating unique operation named: saveUsingPOST_14
2019-04-03 10:29:50 -Generating unique operation named: updateUsingPOST_14
2019-04-03 10:29:50 -Generating unique operation named: listUsingGET_16
2019-04-03 10:29:50 -Generating unique operation named: listUsingHEAD_1
2019-04-03 10:29:50 -Generating unique operation named: listUsingPOST_1
2019-04-03 10:29:50 -Generating unique operation named: listUsingPUT_1
2019-04-03 10:29:50 -Generating unique operation named: listUsingPATCH_1
2019-04-03 10:29:50 -Generating unique operation named: listUsingDELETE_1
2019-04-03 10:29:50 -Generating unique operation named: listUsingOPTIONS_1
2019-04-03 10:29:50 -Generating unique operation named: listUsingTRACE_1
2019-04-03 10:29:50 -Generating unique operation named: addUsingGET_14
2019-04-03 10:29:50 -Generating unique operation named: batchRemoveUsingPOST_2
2019-04-03 10:29:50 -Generating unique operation named: editUsingGET_15
2019-04-03 10:29:50 -Generating unique operation named: listUsingGET_17
2019-04-03 10:29:50 -Generating unique operation named: removeUsingPOST_26
2019-04-03 10:29:50 -Generating unique operation named: saveUsingPOST_15
2019-04-03 10:29:50 -Generating unique operation named: treeUsingGET_3
2019-04-03 10:29:50 -Generating unique operation named: treeViewUsingGET_1
2019-04-03 10:29:50 -Generating unique operation named: updateUsingPOST_15
2019-04-03 10:29:50 -Generating unique operation named: addUsingGET_15
2019-04-03 10:29:50 -Generating unique operation named: editUsingGET_16
2019-04-03 10:29:50 -Generating unique operation named: exprotExcelUsingGET_4
2019-04-03 10:29:50 -Generating unique operation named: listUsingGET_18
2019-04-03 10:29:50 -Generating unique operation named: removeUsingPOST_27
2019-04-03 10:29:50 -Generating unique operation named: removeUsingPOST_28
2019-04-03 10:29:50 -Generating unique operation named: saveUsingPOST_16
2019-04-03 10:29:50 -Generating unique operation named: updateUsingGET_10
2019-04-03 10:29:50 -Generating unique operation named: updateUsingHEAD_10
2019-04-03 10:29:50 -Generating unique operation named: updateUsingPOST_16
2019-04-03 10:29:50 -Generating unique operation named: updateUsingPUT_10
2019-04-03 10:29:50 -Generating unique operation named: updateUsingPATCH_10
2019-04-03 10:29:50 -Generating unique operation named: updateUsingDELETE_10
2019-04-03 10:29:50 -Generating unique operation named: updateUsingOPTIONS_10
2019-04-03 10:29:50 -Generating unique operation named: updateUsingTRACE_10
2019-04-03 10:29:50 -Generating unique operation named: exprotExcelUsingGET_5
2019-04-03 10:29:50 -Generating unique operation named: addUsingGET_16
2019-04-03 10:29:50 -Generating unique operation named: editUsingGET_17
2019-04-03 10:29:50 -Generating unique operation named: listUsingGET_19
2019-04-03 10:29:50 -Generating unique operation named: removeUsingPOST_29
2019-04-03 10:29:50 -Generating unique operation named: removeUsingPOST_30
2019-04-03 10:29:50 -Generating unique operation named: saveUsingPOST_17
2019-04-03 10:29:50 -Generating unique operation named: updateUsingGET_11
2019-04-03 10:29:50 -Generating unique operation named: updateUsingHEAD_11
2019-04-03 10:29:50 -Generating unique operation named: updateUsingPOST_17
2019-04-03 10:29:50 -Generating unique operation named: updateUsingPUT_11
2019-04-03 10:29:50 -Generating unique operation named: updateUsingPATCH_11
2019-04-03 10:29:50 -Generating unique operation named: updateUsingDELETE_11
2019-04-03 10:29:50 -Generating unique operation named: updateUsingOPTIONS_11
2019-04-03 10:29:50 -Generating unique operation named: updateUsingTRACE_11
2019-04-03 10:29:50 -Generating unique operation named: addUsingGET_17
2019-04-03 10:29:50 -Generating unique operation named: editUsingGET_18
2019-04-03 10:29:50 -Generating unique operation named: listUsingGET_20
2019-04-03 10:29:50 -Generating unique operation named: removeUsingPOST_31
2019-04-03 10:29:50 -Generating unique operation named: removeUsingPOST_32
2019-04-03 10:29:50 -Generating unique operation named: saveUsingPOST_18
2019-04-03 10:29:50 -Generating unique operation named: updateUsingGET_12
2019-04-03 10:29:50 -Generating unique operation named: updateUsingHEAD_12
2019-04-03 10:29:50 -Generating unique operation named: updateUsingPOST_18
2019-04-03 10:29:50 -Generating unique operation named: updateUsingPUT_12
2019-04-03 10:29:50 -Generating unique operation named: updateUsingPATCH_12
2019-04-03 10:29:50 -Generating unique operation named: updateUsingDELETE_12
2019-04-03 10:29:50 -Generating unique operation named: updateUsingOPTIONS_12
2019-04-03 10:29:50 -Generating unique operation named: updateUsingTRACE_12
2019-04-03 10:29:50 -Starting Quartz Scheduler now
2019-04-03 10:29:50 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED started.
2019-04-03 10:29:50 -Starting...
2019-04-03 10:29:50 -BrokerAvailabilityEvent[available=true, SimpleBrokerMessageHandler [DefaultSubscriptionRegistry[cache[0 destination(s)], registry[0 sessions]]]]
2019-04-03 10:29:50 -Started.
2019-04-03 10:29:50 -Starting ProtocolHandler ["http-nio-8081"]
2019-04-03 10:29:50 -Using a shared selector for servlet write/read
2019-04-03 10:29:50 -Tomcat started on port(s): 8081 (http) with context path ''
2019-04-03 10:29:50 -Started BootdoApplication in 36.656 seconds (JVM running for 37.497)
2019-04-03 10:29:50 -==>  Preparing: select `id`,`cron_expression`,`method_name`,`is_concurrent`,`description`,`update_by`,`bean_class`,`create_date`,`job_status`,`job_group`,`update_date`,`create_by`,`spring_bean`,`job_name` from sys_task order by id desc 
2019-04-03 10:29:51 -==> Parameters: 
2019-04-03 10:29:51 -<==      Total: 1
2019-04-03 10:29:55 -Initializing Spring FrameworkServlet 'dispatcherServlet'
2019-04-03 10:29:55 -FrameworkServlet 'dispatcherServlet': initialization started
2019-04-03 10:29:55 -FrameworkServlet 'dispatcherServlet': initialization completed in 85 ms
2019-04-03 10:29:56 -Enabling session validation scheduler...
2019-04-03 10:29:56 -请求地址 : http://localhost:8081/login;JSESSIONID=416f32b0-2009-4086-aeea-f53177612b7d
2019-04-03 10:29:56 -HTTP METHOD : GET
2019-04-03 10:29:56 -CLASS_METHOD : com.bootdo.system.controller.LoginController.login
2019-04-03 10:29:56 -参数 : [{}]
2019-04-03 10:29:56 -耗时 : 6
2019-04-03 10:29:56 -返回值 : login
2019-04-03 10:29:58 -请求地址 : http://localhost:8081/login;JSESSIONID=416f32b0-2009-4086-aeea-f53177612b7d
2019-04-03 10:29:58 -HTTP METHOD : GET
2019-04-03 10:29:58 -CLASS_METHOD : com.bootdo.system.controller.LoginController.login
2019-04-03 10:29:58 -参数 : [{}]
2019-04-03 10:29:58 -耗时 : 0
2019-04-03 10:29:58 -返回值 : login
2019-04-03 10:29:59 -请求地址 : http://localhost:8081/getVerify
2019-04-03 10:29:59 -HTTP METHOD : GET
2019-04-03 10:29:59 -CLASS_METHOD : com.bootdo.system.controller.LoginController.getVerify
2019-04-03 10:29:59 -参数 : [org.apache.shiro.web.servlet.ShiroHttpServletRequest@6bcf70a5, org.apache.shiro.web.servlet.ShiroHttpServletResponse@582a3832]
2019-04-03 10:30:06 -9169
2019-04-03 10:30:07 -耗时 : 7158
2019-04-03 10:30:07 -返回值 : null
2019-04-03 10:30:07 -请求地址 : http://localhost:8081/login
2019-04-03 10:30:07 -HTTP METHOD : GET
2019-04-03 10:30:07 -CLASS_METHOD : com.bootdo.system.controller.LoginController.login
2019-04-03 10:30:07 -参数 : [{}]
2019-04-03 10:30:07 -耗时 : 1
2019-04-03 10:30:07 -返回值 : login
2019-04-03 10:30:16 -请求地址 : http://localhost:8081/login
2019-04-03 10:30:16 -HTTP METHOD : POST
2019-04-03 10:30:16 -CLASS_METHOD : com.bootdo.system.controller.LoginController.ajaxLogin
2019-04-03 10:30:16 -参数 : [admin, 111111, 9169, org.apache.shiro.web.servlet.ShiroHttpServletRequest@6ea067a4]
2019-04-03 10:30:16 -==>  Preparing: select `user_id`,`username`,`name`,`password`,`dept_id`,`email`,`mobile`,`status`,`user_id_create`,`gmt_create`,`gmt_modified`,`sex`,`birth`,`pic_id`,`live_address`,`hobby`,`province`,`city`,`district` from sys_user WHERE username = ? order by user_id desc 
2019-04-03 10:30:16 -==> Parameters: admin(String)
2019-04-03 10:30:16 -<==      Total: 1
2019-04-03 10:30:16 -耗时 : 278
2019-04-03 10:30:16 -返回值 : {msg=操作成功, code=0}
2019-04-03 10:30:17 -More than one TaskExecutor bean found within the context, and none is named 'taskExecutor'. Mark one of them as primary or name it 'taskExecutor' (possibly as an alias) in order to use it for async processing: [clientInboundChannelExecutor, clientOutboundChannelExecutor, brokerChannelExecutor, messageBrokerTaskScheduler]
2019-04-03 10:30:17 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 10:30:17 -==> Parameters: 1(Long), admin(String), 登录(String), 278(Integer), com.bootdo.system.controller.LoginController.ajaxLogin()(String), null, 127.0.0.1(String), 2019-04-03 10:30:17.066(Timestamp)
2019-04-03 10:30:17 -请求地址 : http://localhost:8081/index
2019-04-03 10:30:17 -HTTP METHOD : GET
2019-04-03 10:30:17 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2019-04-03 10:30:17 -参数 : [{}]
2019-04-03 10:30:17 -<==    Updates: 1
2019-04-03 10:30:17 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2019-04-03 10:30:17 -==> Parameters: 1(Long)
2019-04-03 10:30:17 -<==      Total: 46
2019-04-03 10:30:17 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2019-04-03 10:30:17 -==> Parameters: 138(Long)
2019-04-03 10:30:17 -<==      Total: 1
2019-04-03 10:30:18 -耗时 : 531
2019-04-03 10:30:18 -返回值 : index_v1
2019-04-03 10:30:18 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 10:30:18 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 531(Integer), com.bootdo.system.controller.LoginController.index()(String), {"menus":[{"attributes":{"icon":"fa fa-money","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-money","url":"/moneyList/moneyList"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"102","parentId":"106","text":"现金缴费"},{"attributes":{"icon":"fa fa-book","url":"/moneyLog/elecLog"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"107","parentId":"106","text":"缴费记录"}],"hasChildren":true,"hasParent":false,"id":"106","parentId":"0","text":"收费管理"},{"attributes":{"icon":"fa fa-lightbulb-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/elec/elec"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"121","parentId":"103","text":"电费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"elec/elecInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"122","parentId":"103","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"elec/elecUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"123","parentId":"103","text":"电表上传"},{"attributes":{"icon":"fa fa-cc","url":"/elec/elecPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"124","parentId":"103","text":"电价管理"}],"hasChildren":true,"hasParent":false,"id":"103","parentId":"0","text":"电费管理"},{"attributes":{"icon":"fa fa-tint","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/water/water"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"117","parentId":"105","text":"水费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"water/waterInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"118","parentId":"105","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"water/waterUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"119","parentId":"105","text":"水费生成"},{"attributes":{"icon":"fa fa-cc","url":"/water/waterPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"120","parentId":"105","text":"水价管理"}],"hasChildren":true,"hasParent":false,"id":"105","parentId":"0","text":"水费管理"},{"attributes":{"icon":"fa fa-fire","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/heat/heat"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"113","parentId":"104","text":"暖费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"heat/heatInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"114","parentId":"104","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"heat/heatUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"115","parentId":"104","text":"暖费生成"},{"attributes":{"icon":"","url":"/heat/heatPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"116","parentId":"104","text":"暖价管理"}],"hasChildren":true,"hasParent":false,"id":"104","parentId":"0","text":"暖费管理"},{"attributes":{"icon":"fa fa-vcard-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-bomb","url":"/print/print"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"149","parentId":"108","text":"票据记录"}],"hasChildren":true,"hasParent":false,"id":"108","parentId":"0","text":"票据管理"},{"attributes":{"icon":"fa fa-bar-chart","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-area-chart","url":"/chart/graph_echarts.html"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","text":"百度chart"},{"attributes":{"icon":"fa fa-sun-o","url":"charts/countDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"109","parentId":"97","text":"日统计报表"},{"attributes":{"icon":"fa fa-registered","url":"charts/countMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"110","parentId":"97","text":"月统计报表"},{"attributes":{"icon":"fa fa-money","url":"charts/countOwe"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"155","parentId":"97","text":"欠费报表图"},{"attributes":{"icon":"fa fa-support","url":"charts/countYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"111","parentId":"97","text":"年统计报表"},{"attributes":{"icon":"fa fa-tachometer","url":"charts/countRun"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"112","parentId":"97","text":"走势图报表"}],"hasChildren":true,"hasParent":false,"id":"97","parentId":"0","text":"统计管理"},{"attributes":{"icon":"fa fa-bars","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-book","url":"/common/dict"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"78","parentId":"1","text":"数据字典"},{"attributes":{"icon":"fa fa-folder-open","url":"/common/sysFile"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"71","parentId":"1","text":"文件管理"}],"h(String), 127.0.0.1(String), 2019-04-03 10:30:18.111(Timestamp)
2019-04-03 10:30:18 -<==    Updates: 1
2019-04-03 10:30:18 -请求地址 : http://localhost:8081/main
2019-04-03 10:30:18 -HTTP METHOD : GET
2019-04-03 10:30:18 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 10:30:18 -参数 : []
2019-04-03 10:30:18 -耗时 : 4
2019-04-03 10:30:18 -返回值 : main
2019-04-03 10:30:19 -请求地址 : http://localhost:8081/oa/notify/message
2019-04-03 10:30:19 -HTTP METHOD : GET
2019-04-03 10:30:19 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2019-04-03 10:30:19 -参数 : []
2019-04-03 10:30:19 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2019-04-03 10:30:19 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2019-04-03 10:30:19 -请求地址 : http://localhost:8081/main
2019-04-03 10:30:19 -HTTP METHOD : GET
2019-04-03 10:30:19 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 10:30:19 -参数 : []
2019-04-03 10:30:19 -耗时 : 1
2019-04-03 10:30:19 -返回值 : main
2019-04-03 10:30:20 -<==      Total: 0
2019-04-03 10:30:20 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2019-04-03 10:30:20 -==> Parameters: 1(Long), 0(String)
2019-04-03 10:30:20 -<==      Total: 1
2019-04-03 10:30:20 -耗时 : 369
2019-04-03 10:30:20 -返回值 : com.bootdo.common.utils.PageUtils@72cd0be5
2019-04-03 10:30:26 -==>  Preparing: select distinct m.perms from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id = ur.role_id where ur.user_id = ? 
2019-04-03 10:30:26 -==> Parameters: 1(Long)
2019-04-03 10:30:26 -<==      Total: 90
2019-04-03 10:30:26 -请求地址 : http://localhost:8081/moneyList/moneyList
2019-04-03 10:30:26 -HTTP METHOD : GET
2019-04-03 10:30:26 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.MoneyList
2019-04-03 10:30:26 -参数 : []
2019-04-03 10:30:26 -耗时 : 0
2019-04-03 10:30:26 -返回值 : /moneyList/moneyList
2019-04-03 10:30:31 -请求地址 : http://localhost:8081/system/sysDept/treeView
2019-04-03 10:30:31 -HTTP METHOD : GET
2019-04-03 10:30:31 -CLASS_METHOD : com.bootdo.system.controller.DeptController.treeView
2019-04-03 10:30:31 -参数 : []
2019-04-03 10:30:31 -耗时 : 2
2019-04-03 10:30:31 -返回值 : system/dept/deptTree
2019-04-03 10:30:32 -请求地址 : http://localhost:8081/system/sysDept/tree
2019-04-03 10:30:32 -HTTP METHOD : GET
2019-04-03 10:30:32 -CLASS_METHOD : com.bootdo.system.controller.DeptController.tree
2019-04-03 10:30:32 -参数 : []
2019-04-03 10:30:32 -==>  Preparing: select `dept_id`,`parent_id`,`name`,`order_num`,`del_flag` from sys_dept order by dept_id desc 
2019-04-03 10:30:32 -==> Parameters: 
2019-04-03 10:30:32 -<==      Total: 3
2019-04-03 10:30:32 -耗时 : 23
2019-04-03 10:30:32 -返回值 : {"checked":false,"children":[{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"3","parentId":"1","state":{"opened":true},"text":"牙星"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"2","parentId":"1","state":{"opened":true},"text":"五九"}],"hasChildren":true,"hasParent":false,"id":"1","parentId":"0","state":{"opened":true},"text":"总公司"}
2019-04-03 10:30:43 -WebSocketSession[1 current WS(1)-HttpStream(0)-HttpPoll(0), 1 total, 0 closed abnormally (0 connect failure, 0 send limit, 0 transport error)], stompSubProtocol[processed CONNECT(1)-CONNECTED(1)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 8, active threads = 0, queued tasks = 0, completed tasks = 9], outboundChannelpool size = 1, active threads = 0, queued tasks = 0, completed tasks = 1], sockJsScheduler[pool size = 4, active threads = 1, queued tasks = 2, completed tasks = 5]
2019-04-03 10:30:44 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUser
2019-04-03 10:30:44 -HTTP METHOD : POST
2019-04-03 10:30:44 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.queryAllUser
2019-04-03 10:30:44 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@45e5606f]
2019-04-03 10:30:44 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 10:30:44 -==> Parameters: 1(Long), admin(String), error(String), null, http://localhost:8081/moneyList/moneyList/queryAllUser(String), org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'userOrg' in 'class com.bootdo.moneyList.damain.MoneyListDO'(String), null, 2019-04-03 10:30:44.173(Timestamp)
2019-04-03 10:30:44 -nested exception is org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'userOrg' in 'class com.bootdo.moneyList.damain.MoneyListDO'
org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'userOrg' in 'class com.bootdo.moneyList.damain.MoneyListDO'
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:79)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:447)
	at com.sun.proxy.$Proxy101.selectList(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:231)
	at org.apache.ibatis.binding.MapperMethod.executeForMany(MapperMethod.java:137)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:75)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy128.getAll(Unknown Source)
	at com.bootdo.moneyList.service.impl.MoneyListServiceImpl.getAll(MoneyListServiceImpl.java:21)
	at com.bootdo.moneyList.controller.MoneyListController.queryAllUser(MoneyListController.java:40)
	at com.bootdo.moneyList.controller.MoneyListController$$FastClassBySpringCGLIB$$8f8aea1c.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:204)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:746)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.bootdo.common.aspect.WebLogAspect.doAround(WebLogAspect.java:57)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.bootdo.moneyList.controller.MoneyListController$$EnhancerBySpringCGLIB$$dc464de.queryAllUser(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:209)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:877)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:783)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:991)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:925)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:974)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:877)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:661)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:851)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:61)
	at org.apache.shiro.web.servlet.AdviceFilter.executeChain(AdviceFilter.java:108)
	at org.apache.shiro.web.servlet.AdviceFilter.doFilterInternal(AdviceFilter.java:137)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:66)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)
	at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)
	at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)
	at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)
	at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:383)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:109)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:496)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:790)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1468)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Unknown Source)
Caused by: org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'userOrg' in 'class com.bootdo.moneyList.damain.MoneyListDO'
	at org.apache.ibatis.reflection.Reflector.getGetInvoker(Reflector.java:421)
	at org.apache.ibatis.reflection.MetaClass.getGetInvoker(MetaClass.java:164)
	at org.apache.ibatis.reflection.wrapper.BeanWrapper.getBeanProperty(BeanWrapper.java:162)
	at org.apache.ibatis.reflection.wrapper.BeanWrapper.get(BeanWrapper.java:49)
	at org.apache.ibatis.reflection.MetaObject.getValue(MetaObject.java:122)
	at org.apache.ibatis.scripting.xmltags.DynamicContext$ContextMap.get(DynamicContext.java:94)
	at org.apache.ibatis.scripting.xmltags.DynamicContext$ContextAccessor.getProperty(DynamicContext.java:108)
	at org.apache.ibatis.ognl.OgnlRuntime.getProperty(OgnlRuntime.java:2666)
	at org.apache.ibatis.ognl.ASTProperty.getValueBody(ASTProperty.java:114)
	at org.apache.ibatis.ognl.SimpleNode.evaluateGetValueBody(SimpleNode.java:212)
	at org.apache.ibatis.ognl.SimpleNode.getValue(SimpleNode.java:258)
	at org.apache.ibatis.ognl.ASTNotEq.getValueBody(ASTNotEq.java:50)
	at org.apache.ibatis.ognl.SimpleNode.evaluateGetValueBody(SimpleNode.java:212)
	at org.apache.ibatis.ognl.SimpleNode.getValue(SimpleNode.java:258)
	at org.apache.ibatis.ognl.ASTAnd.getValueBody(ASTAnd.java:61)
	at org.apache.ibatis.ognl.SimpleNode.evaluateGetValueBody(SimpleNode.java:212)
	at org.apache.ibatis.ognl.SimpleNode.getValue(SimpleNode.java:258)
	at org.apache.ibatis.ognl.Ognl.getValue(Ognl.java:470)
	at org.apache.ibatis.ognl.Ognl.getValue(Ognl.java:434)
	at org.apache.ibatis.scripting.xmltags.OgnlCache.getValue(OgnlCache.java:44)
	at org.apache.ibatis.scripting.xmltags.ExpressionEvaluator.evaluateBoolean(ExpressionEvaluator.java:32)
	at org.apache.ibatis.scripting.xmltags.IfSqlNode.apply(IfSqlNode.java:34)
	at org.apache.ibatis.scripting.xmltags.MixedSqlNode.apply(MixedSqlNode.java:33)
	at org.apache.ibatis.scripting.xmltags.TrimSqlNode.apply(TrimSqlNode.java:55)
	at org.apache.ibatis.scripting.xmltags.MixedSqlNode.apply(MixedSqlNode.java:33)
	at org.apache.ibatis.scripting.xmltags.DynamicSqlSource.getBoundSql(DynamicSqlSource.java:41)
	at org.apache.ibatis.mapping.MappedStatement.getBoundSql(MappedStatement.java:292)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:81)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:148)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:141)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:434)
	... 101 common frames omitted
2019-04-03 10:30:44 -<==    Updates: 1
2019-04-03 10:30:45 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUser
2019-04-03 10:30:45 -HTTP METHOD : POST
2019-04-03 10:30:45 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.queryAllUser
2019-04-03 10:30:45 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@5fc1fce2]
2019-04-03 10:30:45 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 10:30:45 -nested exception is org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'userOrg' in 'class com.bootdo.moneyList.damain.MoneyListDO'
org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'userOrg' in 'class com.bootdo.moneyList.damain.MoneyListDO'
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:79)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:447)
	at com.sun.proxy.$Proxy101.selectList(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:231)
	at org.apache.ibatis.binding.MapperMethod.executeForMany(MapperMethod.java:137)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:75)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy128.getAll(Unknown Source)
	at com.bootdo.moneyList.service.impl.MoneyListServiceImpl.getAll(MoneyListServiceImpl.java:21)
	at com.bootdo.moneyList.controller.MoneyListController.queryAllUser(MoneyListController.java:40)
	at com.bootdo.moneyList.controller.MoneyListController$$FastClassBySpringCGLIB$$8f8aea1c.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:204)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:746)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.bootdo.common.aspect.WebLogAspect.doAround(WebLogAspect.java:57)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.bootdo.moneyList.controller.MoneyListController$$EnhancerBySpringCGLIB$$dc464de.queryAllUser(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:209)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:877)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:783)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:991)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:925)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:974)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:877)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:661)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:851)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:61)
	at org.apache.shiro.web.servlet.AdviceFilter.executeChain(AdviceFilter.java:108)
	at org.apache.shiro.web.servlet.AdviceFilter.doFilterInternal(AdviceFilter.java:137)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:66)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)
	at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)
	at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)
	at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)
	at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:383)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:109)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:496)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:790)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1468)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Unknown Source)
Caused by: org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'userOrg' in 'class com.bootdo.moneyList.damain.MoneyListDO'
	at org.apache.ibatis.reflection.Reflector.getGetInvoker(Reflector.java:421)
	at org.apache.ibatis.reflection.MetaClass.getGetInvoker(MetaClass.java:164)
	at org.apache.ibatis.reflection.wrapper.BeanWrapper.getBeanProperty(BeanWrapper.java:162)
	at org.apache.ibatis.reflection.wrapper.BeanWrapper.get(BeanWrapper.java:49)
	at org.apache.ibatis.reflection.MetaObject.getValue(MetaObject.java:122)
	at org.apache.ibatis.scripting.xmltags.DynamicContext$ContextMap.get(DynamicContext.java:94)
	at org.apache.ibatis.scripting.xmltags.DynamicContext$ContextAccessor.getProperty(DynamicContext.java:108)
	at org.apache.ibatis.ognl.OgnlRuntime.getProperty(OgnlRuntime.java:2666)
	at org.apache.ibatis.ognl.ASTProperty.getValueBody(ASTProperty.java:114)
	at org.apache.ibatis.ognl.SimpleNode.evaluateGetValueBody(SimpleNode.java:212)
	at org.apache.ibatis.ognl.SimpleNode.getValue(SimpleNode.java:258)
	at org.apache.ibatis.ognl.ASTNotEq.getValueBody(ASTNotEq.java:50)
	at org.apache.ibatis.ognl.SimpleNode.evaluateGetValueBody(SimpleNode.java:212)
	at org.apache.ibatis.ognl.SimpleNode.getValue(SimpleNode.java:258)
	at org.apache.ibatis.ognl.ASTAnd.getValueBody(ASTAnd.java:61)
	at org.apache.ibatis.ognl.SimpleNode.evaluateGetValueBody(SimpleNode.java:212)
	at org.apache.ibatis.ognl.SimpleNode.getValue(SimpleNode.java:258)
	at org.apache.ibatis.ognl.Ognl.getValue(Ognl.java:470)
	at org.apache.ibatis.ognl.Ognl.getValue(Ognl.java:434)
	at org.apache.ibatis.scripting.xmltags.OgnlCache.getValue(OgnlCache.java:44)
	at org.apache.ibatis.scripting.xmltags.ExpressionEvaluator.evaluateBoolean(ExpressionEvaluator.java:32)
	at org.apache.ibatis.scripting.xmltags.IfSqlNode.apply(IfSqlNode.java:34)
	at org.apache.ibatis.scripting.xmltags.MixedSqlNode.apply(MixedSqlNode.java:33)
	at org.apache.ibatis.scripting.xmltags.TrimSqlNode.apply(TrimSqlNode.java:55)
	at org.apache.ibatis.scripting.xmltags.MixedSqlNode.apply(MixedSqlNode.java:33)
	at org.apache.ibatis.scripting.xmltags.DynamicSqlSource.getBoundSql(DynamicSqlSource.java:41)
	at org.apache.ibatis.mapping.MappedStatement.getBoundSql(MappedStatement.java:292)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:81)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:148)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:141)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:434)
	... 101 common frames omitted
2019-04-03 10:30:45 -==> Parameters: 1(Long), admin(String), error(String), null, http://localhost:8081/moneyList/moneyList/queryAllUser(String), org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'userOrg' in 'class com.bootdo.moneyList.damain.MoneyListDO'(String), null, 2019-04-03 10:30:45.393(Timestamp)
2019-04-03 10:30:45 -<==    Updates: 1
2019-04-03 10:30:46 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUser
2019-04-03 10:30:46 -HTTP METHOD : POST
2019-04-03 10:30:46 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.queryAllUser
2019-04-03 10:30:46 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@1bcaf618]
2019-04-03 10:30:46 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 10:30:46 -==> Parameters: 1(Long), admin(String), error(String), null, http://localhost:8081/moneyList/moneyList/queryAllUser(String), org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'userOrg' in 'class com.bootdo.moneyList.damain.MoneyListDO'(String), null, 2019-04-03 10:30:46.347(Timestamp)
2019-04-03 10:30:46 -nested exception is org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'userOrg' in 'class com.bootdo.moneyList.damain.MoneyListDO'
org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'userOrg' in 'class com.bootdo.moneyList.damain.MoneyListDO'
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:79)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:447)
	at com.sun.proxy.$Proxy101.selectList(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:231)
	at org.apache.ibatis.binding.MapperMethod.executeForMany(MapperMethod.java:137)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:75)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy128.getAll(Unknown Source)
	at com.bootdo.moneyList.service.impl.MoneyListServiceImpl.getAll(MoneyListServiceImpl.java:21)
	at com.bootdo.moneyList.controller.MoneyListController.queryAllUser(MoneyListController.java:40)
	at com.bootdo.moneyList.controller.MoneyListController$$FastClassBySpringCGLIB$$8f8aea1c.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:204)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:746)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.bootdo.common.aspect.WebLogAspect.doAround(WebLogAspect.java:57)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.bootdo.moneyList.controller.MoneyListController$$EnhancerBySpringCGLIB$$dc464de.queryAllUser(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:209)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:877)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:783)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:991)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:925)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:974)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:877)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:661)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:851)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:61)
	at org.apache.shiro.web.servlet.AdviceFilter.executeChain(AdviceFilter.java:108)
	at org.apache.shiro.web.servlet.AdviceFilter.doFilterInternal(AdviceFilter.java:137)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:66)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)
	at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)
	at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)
	at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)
	at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:383)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:109)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:496)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:790)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1468)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Unknown Source)
Caused by: org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'userOrg' in 'class com.bootdo.moneyList.damain.MoneyListDO'
	at org.apache.ibatis.reflection.Reflector.getGetInvoker(Reflector.java:421)
	at org.apache.ibatis.reflection.MetaClass.getGetInvoker(MetaClass.java:164)
	at org.apache.ibatis.reflection.wrapper.BeanWrapper.getBeanProperty(BeanWrapper.java:162)
	at org.apache.ibatis.reflection.wrapper.BeanWrapper.get(BeanWrapper.java:49)
	at org.apache.ibatis.reflection.MetaObject.getValue(MetaObject.java:122)
	at org.apache.ibatis.scripting.xmltags.DynamicContext$ContextMap.get(DynamicContext.java:94)
	at org.apache.ibatis.scripting.xmltags.DynamicContext$ContextAccessor.getProperty(DynamicContext.java:108)
	at org.apache.ibatis.ognl.OgnlRuntime.getProperty(OgnlRuntime.java:2666)
	at org.apache.ibatis.ognl.ASTProperty.getValueBody(ASTProperty.java:114)
	at org.apache.ibatis.ognl.SimpleNode.evaluateGetValueBody(SimpleNode.java:212)
	at org.apache.ibatis.ognl.SimpleNode.getValue(SimpleNode.java:258)
	at org.apache.ibatis.ognl.ASTNotEq.getValueBody(ASTNotEq.java:50)
	at org.apache.ibatis.ognl.SimpleNode.evaluateGetValueBody(SimpleNode.java:212)
	at org.apache.ibatis.ognl.SimpleNode.getValue(SimpleNode.java:258)
	at org.apache.ibatis.ognl.ASTAnd.getValueBody(ASTAnd.java:61)
	at org.apache.ibatis.ognl.SimpleNode.evaluateGetValueBody(SimpleNode.java:212)
	at org.apache.ibatis.ognl.SimpleNode.getValue(SimpleNode.java:258)
	at org.apache.ibatis.ognl.Ognl.getValue(Ognl.java:470)
	at org.apache.ibatis.ognl.Ognl.getValue(Ognl.java:434)
	at org.apache.ibatis.scripting.xmltags.OgnlCache.getValue(OgnlCache.java:44)
	at org.apache.ibatis.scripting.xmltags.ExpressionEvaluator.evaluateBoolean(ExpressionEvaluator.java:32)
	at org.apache.ibatis.scripting.xmltags.IfSqlNode.apply(IfSqlNode.java:34)
	at org.apache.ibatis.scripting.xmltags.MixedSqlNode.apply(MixedSqlNode.java:33)
	at org.apache.ibatis.scripting.xmltags.TrimSqlNode.apply(TrimSqlNode.java:55)
	at org.apache.ibatis.scripting.xmltags.MixedSqlNode.apply(MixedSqlNode.java:33)
	at org.apache.ibatis.scripting.xmltags.DynamicSqlSource.getBoundSql(DynamicSqlSource.java:41)
	at org.apache.ibatis.mapping.MappedStatement.getBoundSql(MappedStatement.java:292)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:81)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:148)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:141)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:434)
	... 101 common frames omitted
2019-04-03 10:30:46 -<==    Updates: 1
2019-04-03 10:30:46 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUser
2019-04-03 10:30:46 -HTTP METHOD : POST
2019-04-03 10:30:46 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.queryAllUser
2019-04-03 10:30:46 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@45016322]
2019-04-03 10:30:46 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 10:30:46 -==> Parameters: 1(Long), admin(String), error(String), null, http://localhost:8081/moneyList/moneyList/queryAllUser(String), org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'userOrg' in 'class com.bootdo.moneyList.damain.MoneyListDO'(String), null, 2019-04-03 10:30:46.779(Timestamp)
2019-04-03 10:30:46 -nested exception is org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'userOrg' in 'class com.bootdo.moneyList.damain.MoneyListDO'
org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'userOrg' in 'class com.bootdo.moneyList.damain.MoneyListDO'
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:79)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:447)
	at com.sun.proxy.$Proxy101.selectList(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:231)
	at org.apache.ibatis.binding.MapperMethod.executeForMany(MapperMethod.java:137)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:75)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy128.getAll(Unknown Source)
	at com.bootdo.moneyList.service.impl.MoneyListServiceImpl.getAll(MoneyListServiceImpl.java:21)
	at com.bootdo.moneyList.controller.MoneyListController.queryAllUser(MoneyListController.java:40)
	at com.bootdo.moneyList.controller.MoneyListController$$FastClassBySpringCGLIB$$8f8aea1c.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:204)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:746)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.bootdo.common.aspect.WebLogAspect.doAround(WebLogAspect.java:57)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.bootdo.moneyList.controller.MoneyListController$$EnhancerBySpringCGLIB$$dc464de.queryAllUser(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:209)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:877)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:783)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:991)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:925)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:974)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:877)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:661)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:851)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:61)
	at org.apache.shiro.web.servlet.AdviceFilter.executeChain(AdviceFilter.java:108)
	at org.apache.shiro.web.servlet.AdviceFilter.doFilterInternal(AdviceFilter.java:137)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:66)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)
	at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)
	at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)
	at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)
	at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:383)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:109)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:496)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:790)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1468)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Unknown Source)
Caused by: org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'userOrg' in 'class com.bootdo.moneyList.damain.MoneyListDO'
	at org.apache.ibatis.reflection.Reflector.getGetInvoker(Reflector.java:421)
	at org.apache.ibatis.reflection.MetaClass.getGetInvoker(MetaClass.java:164)
	at org.apache.ibatis.reflection.wrapper.BeanWrapper.getBeanProperty(BeanWrapper.java:162)
	at org.apache.ibatis.reflection.wrapper.BeanWrapper.get(BeanWrapper.java:49)
	at org.apache.ibatis.reflection.MetaObject.getValue(MetaObject.java:122)
	at org.apache.ibatis.scripting.xmltags.DynamicContext$ContextMap.get(DynamicContext.java:94)
	at org.apache.ibatis.scripting.xmltags.DynamicContext$ContextAccessor.getProperty(DynamicContext.java:108)
	at org.apache.ibatis.ognl.OgnlRuntime.getProperty(OgnlRuntime.java:2666)
	at org.apache.ibatis.ognl.ASTProperty.getValueBody(ASTProperty.java:114)
	at org.apache.ibatis.ognl.SimpleNode.evaluateGetValueBody(SimpleNode.java:212)
	at org.apache.ibatis.ognl.SimpleNode.getValue(SimpleNode.java:258)
	at org.apache.ibatis.ognl.ASTNotEq.getValueBody(ASTNotEq.java:50)
	at org.apache.ibatis.ognl.SimpleNode.evaluateGetValueBody(SimpleNode.java:212)
	at org.apache.ibatis.ognl.SimpleNode.getValue(SimpleNode.java:258)
	at org.apache.ibatis.ognl.ASTAnd.getValueBody(ASTAnd.java:61)
	at org.apache.ibatis.ognl.SimpleNode.evaluateGetValueBody(SimpleNode.java:212)
	at org.apache.ibatis.ognl.SimpleNode.getValue(SimpleNode.java:258)
	at org.apache.ibatis.ognl.Ognl.getValue(Ognl.java:470)
	at org.apache.ibatis.ognl.Ognl.getValue(Ognl.java:434)
	at org.apache.ibatis.scripting.xmltags.OgnlCache.getValue(OgnlCache.java:44)
	at org.apache.ibatis.scripting.xmltags.ExpressionEvaluator.evaluateBoolean(ExpressionEvaluator.java:32)
	at org.apache.ibatis.scripting.xmltags.IfSqlNode.apply(IfSqlNode.java:34)
	at org.apache.ibatis.scripting.xmltags.MixedSqlNode.apply(MixedSqlNode.java:33)
	at org.apache.ibatis.scripting.xmltags.TrimSqlNode.apply(TrimSqlNode.java:55)
	at org.apache.ibatis.scripting.xmltags.MixedSqlNode.apply(MixedSqlNode.java:33)
	at org.apache.ibatis.scripting.xmltags.DynamicSqlSource.getBoundSql(DynamicSqlSource.java:41)
	at org.apache.ibatis.mapping.MappedStatement.getBoundSql(MappedStatement.java:292)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:81)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:148)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:141)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:434)
	... 101 common frames omitted
2019-04-03 10:30:46 -<==    Updates: 1
2019-04-03 10:30:47 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUser
2019-04-03 10:30:47 -HTTP METHOD : POST
2019-04-03 10:30:47 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.queryAllUser
2019-04-03 10:30:47 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@39a6ff1a]
2019-04-03 10:30:47 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 10:30:47 -==> Parameters: 1(Long), admin(String), error(String), null, http://localhost:8081/moneyList/moneyList/queryAllUser(String), org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'userOrg' in 'class com.bootdo.moneyList.damain.MoneyListDO'(String), null, 2019-04-03 10:30:47.802(Timestamp)
2019-04-03 10:30:47 -nested exception is org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'userOrg' in 'class com.bootdo.moneyList.damain.MoneyListDO'
org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'userOrg' in 'class com.bootdo.moneyList.damain.MoneyListDO'
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:79)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:447)
	at com.sun.proxy.$Proxy101.selectList(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:231)
	at org.apache.ibatis.binding.MapperMethod.executeForMany(MapperMethod.java:137)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:75)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy128.getAll(Unknown Source)
	at com.bootdo.moneyList.service.impl.MoneyListServiceImpl.getAll(MoneyListServiceImpl.java:21)
	at com.bootdo.moneyList.controller.MoneyListController.queryAllUser(MoneyListController.java:40)
	at com.bootdo.moneyList.controller.MoneyListController$$FastClassBySpringCGLIB$$8f8aea1c.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:204)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:746)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.bootdo.common.aspect.WebLogAspect.doAround(WebLogAspect.java:57)
	at sun.reflect.GeneratedMethodAccessor125.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.bootdo.moneyList.controller.MoneyListController$$EnhancerBySpringCGLIB$$dc464de.queryAllUser(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:209)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:877)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:783)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:991)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:925)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:974)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:877)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:661)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:851)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:61)
	at org.apache.shiro.web.servlet.AdviceFilter.executeChain(AdviceFilter.java:108)
	at org.apache.shiro.web.servlet.AdviceFilter.doFilterInternal(AdviceFilter.java:137)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:66)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)
	at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)
	at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)
	at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)
	at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:383)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:109)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:496)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:790)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1468)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Unknown Source)
Caused by: org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'userOrg' in 'class com.bootdo.moneyList.damain.MoneyListDO'
	at org.apache.ibatis.reflection.Reflector.getGetInvoker(Reflector.java:421)
	at org.apache.ibatis.reflection.MetaClass.getGetInvoker(MetaClass.java:164)
	at org.apache.ibatis.reflection.wrapper.BeanWrapper.getBeanProperty(BeanWrapper.java:162)
	at org.apache.ibatis.reflection.wrapper.BeanWrapper.get(BeanWrapper.java:49)
	at org.apache.ibatis.reflection.MetaObject.getValue(MetaObject.java:122)
	at org.apache.ibatis.scripting.xmltags.DynamicContext$ContextMap.get(DynamicContext.java:94)
	at org.apache.ibatis.scripting.xmltags.DynamicContext$ContextAccessor.getProperty(DynamicContext.java:108)
	at org.apache.ibatis.ognl.OgnlRuntime.getProperty(OgnlRuntime.java:2666)
	at org.apache.ibatis.ognl.ASTProperty.getValueBody(ASTProperty.java:114)
	at org.apache.ibatis.ognl.SimpleNode.evaluateGetValueBody(SimpleNode.java:212)
	at org.apache.ibatis.ognl.SimpleNode.getValue(SimpleNode.java:258)
	at org.apache.ibatis.ognl.ASTNotEq.getValueBody(ASTNotEq.java:50)
	at org.apache.ibatis.ognl.SimpleNode.evaluateGetValueBody(SimpleNode.java:212)
	at org.apache.ibatis.ognl.SimpleNode.getValue(SimpleNode.java:258)
	at org.apache.ibatis.ognl.ASTAnd.getValueBody(ASTAnd.java:61)
	at org.apache.ibatis.ognl.SimpleNode.evaluateGetValueBody(SimpleNode.java:212)
	at org.apache.ibatis.ognl.SimpleNode.getValue(SimpleNode.java:258)
	at org.apache.ibatis.ognl.Ognl.getValue(Ognl.java:470)
	at org.apache.ibatis.ognl.Ognl.getValue(Ognl.java:434)
	at org.apache.ibatis.scripting.xmltags.OgnlCache.getValue(OgnlCache.java:44)
	at org.apache.ibatis.scripting.xmltags.ExpressionEvaluator.evaluateBoolean(ExpressionEvaluator.java:32)
	at org.apache.ibatis.scripting.xmltags.IfSqlNode.apply(IfSqlNode.java:34)
	at org.apache.ibatis.scripting.xmltags.MixedSqlNode.apply(MixedSqlNode.java:33)
	at org.apache.ibatis.scripting.xmltags.TrimSqlNode.apply(TrimSqlNode.java:55)
	at org.apache.ibatis.scripting.xmltags.MixedSqlNode.apply(MixedSqlNode.java:33)
	at org.apache.ibatis.scripting.xmltags.DynamicSqlSource.getBoundSql(DynamicSqlSource.java:41)
	at org.apache.ibatis.mapping.MappedStatement.getBoundSql(MappedStatement.java:292)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:81)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:148)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:141)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:434)
	... 100 common frames omitted
2019-04-03 10:30:47 -<==    Updates: 1
2019-04-03 10:35:29 -Starting BootdoApplication on ZJZL-20180906VX with PID 11356 (D:\eclipse2018-work\bootdo\target\classes started by Administrator in D:\eclipse2018-work\bootdo)
2019-04-03 10:35:29 -Running with Spring Boot v2.0.3.RELEASE, Spring v5.0.7.RELEASE
2019-04-03 10:35:29 -The following profiles are active: dev
2019-04-03 10:35:29 -Refreshing org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@a38c7fe: startup date [Wed Apr 03 10:35:29 CST 2019]; root of context hierarchy
2019-04-03 10:35:32 -Multiple Spring Data modules found, entering strict repository configuration mode!
2019-04-03 10:35:35 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$71fefdb1] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-03 10:35:35 -Bean 'shiroConfig' of type [com.bootdo.system.config.ShiroConfig$$EnhancerBySpringCGLIB$$64582c58] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-03 10:35:36 -Bean 'userRealm' of type [com.bootdo.system.shiro.UserRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-03 10:35:36 -Bean 'cacheManager2' of type [net.sf.ehcache.CacheManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-03 10:35:36 -Bean 'ehCacheManager' of type [org.apache.shiro.cache.ehcache.EhCacheManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-03 10:35:36 -Cache with name 'com.bootdo.system.shiro.UserRealm.authorizationCache' does not yet exist.  Creating now.
2019-04-03 10:35:36 -Added EhCache named [com.bootdo.system.shiro.UserRealm.authorizationCache]
2019-04-03 10:35:36 -Bean 'sessionDAO' of type [org.apache.shiro.session.mgt.eis.MemorySessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-03 10:35:36 -Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-03 10:35:36 -Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-03 10:35:37 -Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-03 10:35:38 -Tomcat initialized with port(s): 8081 (http)
2019-04-03 10:35:38 -Initializing ProtocolHandler ["http-nio-8081"]
2019-04-03 10:35:38 -Starting service [Tomcat]
2019-04-03 10:35:38 -Starting Servlet Engine: Apache Tomcat/8.5.31
2019-04-03 10:35:38 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [C:\Program Files\Java\jre1.8.0_131\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:/Program Files/Java/jre1.8.0_131/bin/server;C:/Program Files/Java/jre1.8.0_131/bin;C:/Program Files/Java/jre1.8.0_131/lib/amd64;C:\ProgramData\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Windows\System32\OpenSSH\;D:\pbb\pycSafefile\x64;D:\pbb\PBB Reader\x64;C:\Program Files\MySQL\MySQL Utilities 1.6\;D:\MAVEN\apache-maven-3.6.0\bin;D:\GIT\Git\cmd;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;;C:\Users\Administrator\Desktop;;.]
2019-04-03 10:35:39 -Initializing Spring embedded WebApplicationContext
2019-04-03 10:35:39 -Root WebApplicationContext: initialization completed in 9732 ms
2019-04-03 10:35:39 -Mapping filter: 'characterEncodingFilter' to: [/*]
2019-04-03 10:35:39 -Mapping filter: 'hiddenHttpMethodFilter' to: [/*]
2019-04-03 10:35:39 -Mapping filter: 'httpPutFormContentFilter' to: [/*]
2019-04-03 10:35:39 -Mapping filter: 'requestContextFilter' to: [/*]
2019-04-03 10:35:39 -Filter xssFilter was not registered (disabled)
2019-04-03 10:35:39 -Mapping filter: 'webStatFilter' to urls: [/*]
2019-04-03 10:35:39 -Mapping filter: 'shiroFilterFactoryBean' to: [/*]
2019-04-03 10:35:39 -Servlet statViewServlet mapped to [/druid/*]
2019-04-03 10:35:39 -Servlet dispatcherServlet mapped to [/]
2019-04-03 10:35:43 -ApplicationContext registed-->org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@a38c7fe: startup date [Wed Apr 03 10:35:29 CST 2019]; root of context hierarchy
2019-04-03 10:35:43 -Using default implementation for ThreadExecutor
2019-04-03 10:35:44 -Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2019-04-03 10:35:44 -Quartz Scheduler v.2.2.1 created.
2019-04-03 10:35:44 -RAMJobStore initialized.
2019-04-03 10:35:44 -Scheduler meta-data: Quartz Scheduler (v2.2.1) 'schedulerFactoryBean' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2019-04-03 10:35:44 -Quartz scheduler 'schedulerFactoryBean' initialized from an externally provided properties instance.
2019-04-03 10:35:44 -Quartz scheduler version: 2.2.1
2019-04-03 10:35:44 -JobFactory set to: com.bootdo.common.quartz.factory.JobFactory@2dcd0e41
2019-04-03 10:35:44 -Initializing ExecutorService  'clientInboundChannelExecutor'
2019-04-03 10:35:44 -Initializing ExecutorService  'clientOutboundChannelExecutor'
2019-04-03 10:35:47 -Mapped "{[/charts/countDD],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.countDDController.countDD()
2019-04-03 10:35:47 -Mapped "{[/charts/countDD/tableDD],methods=[POST]}" onto public java.lang.String com.bootdo.charts.controller.countDDController.tableDD()
2019-04-03 10:35:47 -Mapped "{[/charts/countDD/getCountDD],methods=[POST]}" onto public com.bootdo.charts.vo.CountDayVo com.bootdo.charts.controller.countDDController.getCountD(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo,javax.servlet.http.HttpServletRequest)
2019-04-03 10:35:47 -Mapped "{[/charts/countDD/exportCountDD],methods=[GET]}" onto public void com.bootdo.charts.controller.countDDController.exprotElecLog(com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-03 10:35:47 -Mapped "{[/charts/countMM/exportCountMM],methods=[GET]}" onto public void com.bootdo.charts.controller.countMMController.exprotElecLog(com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-03 10:35:47 -Mapped "{[/charts/countMM],methods=[GET]}" onto java.lang.String com.bootdo.charts.controller.countMMController.countMM()
2019-04-03 10:35:47 -Mapped "{[/charts/countMM/getCountMM],methods=[POST]}" onto public void com.bootdo.charts.controller.countMMController.getCountMM(org.springframework.ui.Model,com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo,javax.servlet.http.HttpServletRequest)
2019-04-03 10:35:47 -Mapped "{[/charts/countOwe/getCountOwe],methods=[POST]}" onto public com.bootdo.charts.vo.CountOweVo com.bootdo.charts.controller.countOweController.getCountD(com.bootdo.elec.vo.ElecVo,com.bootdo.water.vo.WaterVo,com.bootdo.heat.vo.HeatVo,javax.servlet.http.HttpServletRequest)
2019-04-03 10:35:47 -Mapped "{[/charts/countOwe],methods=[GET]}" onto java.lang.String com.bootdo.charts.controller.countOweController.countOwe()
2019-04-03 10:35:47 -Mapped "{[/charts/countRun/getCountRun],methods=[POST]}" onto public int com.bootdo.charts.controller.countRunController.getCountD(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo)
2019-04-03 10:35:47 -Mapped "{[/charts/countRun/exportCountRun],methods=[GET]}" onto public void com.bootdo.charts.controller.countRunController.exprotElecLog(com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-03 10:35:47 -Mapped "{[/charts/countRun],methods=[GET]}" onto java.lang.String com.bootdo.charts.controller.countRunController.countRun()
2019-04-03 10:35:47 -Mapped "{[/charts/countYY/getCountYY],methods=[POST]}" onto public int com.bootdo.charts.controller.countYYController.getCountD(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo)
2019-04-03 10:35:47 -Mapped "{[/charts/countYY/exportCountYY],methods=[GET]}" onto public void com.bootdo.charts.controller.countYYController.exprotElecLog(com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-03 10:35:47 -Mapped "{[/charts/countYY],methods=[GET]}" onto java.lang.String com.bootdo.charts.controller.countYYController.countYY()
2019-04-03 10:35:47 -Mapped "{[/common/dict/add],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.add()
2019-04-03 10:35:47 -Mapped "{[/common/dict/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.remove(java.lang.Long)
2019-04-03 10:35:47 -Mapped "{[/common/dict/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.remove(java.lang.Long[])
2019-04-03 10:35:47 -Mapped "{[/common/dict/update]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.update(com.bootdo.common.domain.DictDO)
2019-04-03 10:35:47 -Mapped "{[/common/dict/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.common.controller.DictController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 10:35:47 -Mapped "{[/common/dict/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.save(com.bootdo.common.domain.DictDO)
2019-04-03 10:35:47 -Mapped "{[/common/dict/type],methods=[GET]}" onto public java.util.List<com.bootdo.common.domain.DictDO> com.bootdo.common.controller.DictController.listType()
2019-04-03 10:35:47 -Mapped "{[/common/dict/add/{type}/{description}],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.addD(org.springframework.ui.Model,java.lang.String,java.lang.String)
2019-04-03 10:35:47 -Mapped "{[/common/dict/list/{type}],methods=[GET]}" onto public java.util.List<com.bootdo.common.domain.DictDO> com.bootdo.common.controller.DictController.listByType(java.lang.String)
2019-04-03 10:35:47 -Mapped "{[/common/dict/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 10:35:47 -Mapped "{[/common/dict],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.dict()
2019-04-03 10:35:47 -Mapped "{[/common/sysFile/add],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.FileController.add()
2019-04-03 10:35:47 -Mapped "{[/common/sysFile/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.remove(java.lang.Long,javax.servlet.http.HttpServletRequest)
2019-04-03 10:35:47 -Mapped "{[/common/sysFile/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.remove(java.lang.Long[])
2019-04-03 10:35:47 -Mapped "{[/common/sysFile/update]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.update(com.bootdo.common.domain.FileDO)
2019-04-03 10:35:47 -Mapped "{[/common/sysFile/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.common.controller.FileController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 10:35:47 -Mapped "{[/common/sysFile/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.save(com.bootdo.common.domain.FileDO)
2019-04-03 10:35:47 -Mapped "{[/common/sysFile/info/{id}]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.info(java.lang.Long)
2019-04-03 10:35:47 -Mapped "{[/common/sysFile],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.FileController.sysFile(org.springframework.ui.Model)
2019-04-03 10:35:47 -Mapped "{[/common/sysFile/upload],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.FileController.upload(org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpServletRequest)
2019-04-03 10:35:47 -Mapped "{[/common/sysFile/edit],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.FileController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 10:35:47 -Mapped "{[/common/generator/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.GeneratorController.update(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 10:35:47 -Mapped "{[/common/generator/list],methods=[GET]}" onto java.util.List<java.util.Map<java.lang.String, java.lang.Object>> com.bootdo.common.controller.GeneratorController.list()
2019-04-03 10:35:47 -Mapped "{[/common/generator/code/{tableName}]}" onto public void com.bootdo.common.controller.GeneratorController.code(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String) throws java.io.IOException
2019-04-03 10:35:47 -Mapped "{[/common/generator],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.GeneratorController.generator()
2019-04-03 10:35:47 -Mapped "{[/common/generator/batchCode]}" onto public void com.bootdo.common.controller.GeneratorController.batchCode(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String) throws java.io.IOException
2019-04-03 10:35:47 -Mapped "{[/common/generator/edit],methods=[GET]}" onto public java.lang.String com.bootdo.common.controller.GeneratorController.edit(org.springframework.ui.Model)
2019-04-03 10:35:47 -Mapped "{[/common/job/add],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.JobController.add()
2019-04-03 10:35:47 -Mapped "{[/common/job/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.remove(java.lang.Long)
2019-04-03 10:35:47 -Mapped "{[/common/job/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.remove(java.lang.Long[])
2019-04-03 10:35:47 -Mapped "{[/common/job/update],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.update(com.bootdo.common.domain.TaskDO)
2019-04-03 10:35:47 -Mapped "{[/common/job/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.common.controller.JobController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 10:35:47 -Mapped "{[/common/job/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.save(com.bootdo.common.domain.TaskDO)
2019-04-03 10:35:47 -Mapped "{[/common/job/info/{id}]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.info(java.lang.Long)
2019-04-03 10:35:47 -Mapped "{[/common/job/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.JobController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 10:35:47 -Mapped "{[/common/job/changeJobStatus],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.changeJobStatus(java.lang.Long,java.lang.String)
2019-04-03 10:35:47 -Mapped "{[/common/job],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.JobController.taskScheduleJob()
2019-04-03 10:35:47 -Mapped "{[/common/log/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.LogController.remove(java.lang.Long)
2019-04-03 10:35:47 -Mapped "{[/common/log],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.LogController.log()
2019-04-03 10:35:47 -Mapped "{[/common/log/list],methods=[GET]}" onto com.bootdo.common.domain.PageDO<com.bootdo.common.domain.LogDO> com.bootdo.common.controller.LogController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 10:35:47 -Mapped "{[/common/log/batchRemove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.LogController.batchRemove(java.lang.Long[])
2019-04-03 10:35:47 -Mapped "{[/common/long],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.LongController.Long()
2019-04-03 10:35:47 -Mapped "{[/common/time],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.TimeController.Time()
2019-04-03 10:35:47 -Mapped "{[/error]}" onto public com.bootdo.common.utils.R com.bootdo.common.exception.MainsiteErrorController.handleError(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-04-03 10:35:47 -Mapped "{[/error],produces=[text/html]}" onto public org.springframework.web.servlet.ModelAndView com.bootdo.common.exception.MainsiteErrorController.errorHtml(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-04-03 10:35:47 -Mapped "{[/elec/elec/add],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecController.add()
2019-04-03 10:35:47 -Mapped "{[/elec/elec/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.remove(java.lang.Long)
2019-04-03 10:35:47 -Mapped "{[/elec/elec/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.remove(java.lang.Long[])
2019-04-03 10:35:47 -Mapped "{[/elec/elec/update],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.update(com.bootdo.elec.domain.ElecDO)
2019-04-03 10:35:47 -Mapped "{[/elec/elec/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.elec.controller.ElecController.list(java.util.Map<java.lang.String, java.lang.Object>,com.bootdo.elec.domain.ElecDO)
2019-04-03 10:35:47 -Mapped "{[/elec/elec/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.save(com.bootdo.elec.domain.ElecDO)
2019-04-03 10:35:47 -Mapped "{[/elec/elec/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 10:35:47 -Mapped "{[/elec/elec],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecController.Elec()
2019-04-03 10:35:47 -Mapped "{[/elec/elec/exprotElec],methods=[GET]}" onto public void com.bootdo.elec.controller.ElecController.exprotExcel(com.bootdo.elec.vo.ElecVo,javax.servlet.http.HttpServletResponse)
2019-04-03 10:35:47 -Mapped "{[/elec/elecInto],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecIntoController.ElecInto()
2019-04-03 10:35:47 -Mapped "{[/elec/elecInto/importElecIntoExcel],methods=[POST]}" onto public java.util.Map<java.lang.String, java.lang.Object> com.bootdo.elec.controller.ElecIntoController.importElecIntoExcel(org.springframework.web.multipart.MultipartFile,com.bootdo.elec.vo.ElecVo) throws java.lang.Exception
2019-04-03 10:35:47 -Mapped "{[/elec/elecInto/exprotElecIntoExcel],methods=[GET]}" onto public void com.bootdo.elec.controller.ElecIntoController.exprotExcel(com.bootdo.elec.vo.ElecVo,javax.servlet.http.HttpServletResponse)
2019-04-03 10:35:47 -Mapped "{[/elec/elecPrice/add],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecPriceController.add()
2019-04-03 10:35:47 -Mapped "{[/elec/elecPrice/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecPriceController.remove(java.lang.Long)
2019-04-03 10:35:47 -Mapped "{[/elec/elecPrice/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecPriceController.remove(java.lang.Long[])
2019-04-03 10:35:47 -Mapped "{[/elec/elecPrice/update]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecPriceController.update(com.bootdo.elec.domain.ElecPriceDO)
2019-04-03 10:35:47 -Mapped "{[/elec/elecPrice/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.elec.controller.ElecPriceController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 10:35:47 -Mapped "{[/elec/elecPrice/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecPriceController.save(com.bootdo.elec.domain.ElecPriceDO,com.bootdo.elec.domain.ElecDO)
2019-04-03 10:35:47 -Mapped "{[/elec/elecPrice],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecPriceController.ElecPrice()
2019-04-03 10:35:47 -Mapped "{[/elec/elecPrice/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecPriceController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 10:35:47 -Mapped "{[/elec/elecUpLoad/importElecExcel],methods=[POST]}" onto public java.util.Map<java.lang.String, java.lang.Object> com.bootdo.elec.controller.ElecUpLoadController.importElecExcel(org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpServletRequest) throws java.lang.Exception
2019-04-03 10:35:47 -Mapped "{[/elec/elecUpLoad],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecUpLoadController.Elec()
2019-04-03 10:35:47 -Mapped "{[/heat/heat/add],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatController.add()
2019-04-03 10:35:47 -Mapped "{[/heat/heat/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatController.remove(java.lang.Integer)
2019-04-03 10:35:47 -Mapped "{[/heat/heat/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatController.remove(java.lang.Integer[])
2019-04-03 10:35:47 -Mapped "{[/heat/heat/update]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatController.update(com.bootdo.heat.domain.HeatDO)
2019-04-03 10:35:47 -Mapped "{[/heat/heat/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.heat.controller.HeatController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 10:35:47 -Mapped "{[/heat/heat/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatController.save(com.bootdo.heat.domain.HeatDO)
2019-04-03 10:35:47 -Mapped "{[/heat/heat],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatController.Heat()
2019-04-03 10:35:47 -Mapped "{[/heat/heat/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatController.edit(java.lang.Integer,org.springframework.ui.Model)
2019-04-03 10:35:47 -Mapped "{[/heat/heat/exprotHeat],methods=[GET]}" onto public void com.bootdo.heat.controller.HeatController.exprotExcel(com.bootdo.heat.vo.HeatVo,javax.servlet.http.HttpServletResponse)
2019-04-03 10:35:47 -Mapped "{[/heat/heatInto],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatIntoController.HeatInto()
2019-04-03 10:35:47 -Mapped "{[/heat/heatInto/exprotHeatIntoExcel],methods=[GET]}" onto public void com.bootdo.heat.controller.HeatIntoController.exprotExcel(com.bootdo.heat.vo.HeatVo,javax.servlet.http.HttpServletResponse)
2019-04-03 10:35:47 -Mapped "{[/heat/heatPrice/add],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatPriceController.add()
2019-04-03 10:35:47 -Mapped "{[/heat/heatPrice/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatPriceController.remove(java.lang.Long)
2019-04-03 10:35:47 -Mapped "{[/heat/heatPrice/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatPriceController.remove(java.lang.Long[])
2019-04-03 10:35:47 -Mapped "{[/heat/heatPrice/update]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatPriceController.update(com.bootdo.heat.domain.HeatPriceDO)
2019-04-03 10:35:47 -Mapped "{[/heat/heatPrice/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.heat.controller.HeatPriceController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 10:35:47 -Mapped "{[/heat/heatPrice/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatPriceController.save(com.bootdo.heat.domain.HeatPriceDO)
2019-04-03 10:35:47 -Mapped "{[/heat/heatPrice],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatPriceController.HeatPrice()
2019-04-03 10:35:47 -Mapped "{[/heat/heatPrice/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatPriceController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 10:35:47 -Mapped "{[/heat/heatUpLoad/exprotHeatExcel],methods=[GET]}" onto public void com.bootdo.heat.controller.HeatUpLoadController.exprotHeatExcel(com.bootdo.heat.vo.HeatVo,javax.servlet.http.HttpServletResponse)
2019-04-03 10:35:47 -Mapped "{[/heat/heatUpLoad/importHeatExcel]}" onto public java.lang.String com.bootdo.heat.controller.HeatUpLoadController.importHeatExcel(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)
2019-04-03 10:35:47 -Mapped "{[/heat/heatUpLoad/createHeatExcel],methods=[POST]}" onto public java.lang.String com.bootdo.heat.controller.HeatUpLoadController.createHeatExcel(com.bootdo.heat.domain.HeatDO) throws java.lang.Exception
2019-04-03 10:35:47 -Mapped "{[/heat/heatUpLoad],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatUpLoadController.HeatUpLoad()
2019-04-03 10:35:47 -Mapped "{[/moneyList/moneyList/queryAllUser],methods=[POST]}" onto public java.util.List<com.bootdo.moneyList.damain.MoneyListDO> com.bootdo.moneyList.controller.MoneyListController.queryAllUser(com.bootdo.moneyList.damain.MoneyListDO)
2019-04-03 10:35:47 -Mapped "{[/moneyList/moneyList/updateMoney],methods=[POST]}" onto public java.util.List<com.bootdo.moneyList.damain.MoneyListDO> com.bootdo.moneyList.controller.MoneyListController.updateMoney(com.bootdo.moneyList.damain.MoneyListDO)
2019-04-03 10:35:47 -Mapped "{[/moneyList/moneyList],methods=[GET]}" onto java.lang.String com.bootdo.moneyList.controller.MoneyListController.MoneyList()
2019-04-03 10:35:47 -Mapped "{[/moneyList/moneyList/queryAllUserName],methods=[POST]}" onto public java.util.List<com.bootdo.moneyList.damain.MoneyListDO> com.bootdo.moneyList.controller.MoneyListController.getAllUserName(com.bootdo.moneyList.damain.MoneyListDO)
2019-04-03 10:35:47 -Mapped "{[/moneyLog/elecLog/add],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.ElecLogController.add()
2019-04-03 10:35:47 -Mapped "{[/moneyLog/elecLog/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.ElecLogController.remove(java.lang.Long)
2019-04-03 10:35:47 -Mapped "{[/moneyLog/elecLog/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.ElecLogController.remove(java.lang.Long[])
2019-04-03 10:35:47 -Mapped "{[/moneyLog/elecLog/update]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.ElecLogController.update(com.bootdo.moneyLog.domain.ElecLogDO)
2019-04-03 10:35:47 -Mapped "{[/moneyLog/elecLog/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.moneyLog.controller.ElecLogController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 10:35:47 -Mapped "{[/moneyLog/elecLog/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.ElecLogController.save(com.bootdo.moneyLog.domain.ElecLogDO)
2019-04-03 10:35:47 -Mapped "{[/moneyLog/elecLog],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.ElecLogController.moneyLog()
2019-04-03 10:35:47 -Mapped "{[/moneyLog/elecLog/exprotElecLog],methods=[GET]}" onto public void com.bootdo.moneyLog.controller.ElecLogController.exprotElecLog(com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-03 10:35:47 -Mapped "{[/moneyLog/elecLog/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.ElecLogController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 10:35:47 -Mapped "{[/moneyLog/heatLog/add],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.HeatLogController.add()
2019-04-03 10:35:47 -Mapped "{[/moneyLog/heatLog/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.HeatLogController.remove(java.lang.Long)
2019-04-03 10:35:47 -Mapped "{[/moneyLog/heatLog/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.HeatLogController.remove(java.lang.Long[])
2019-04-03 10:35:47 -Mapped "{[/moneyLog/heatLog/update]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.HeatLogController.update(com.bootdo.moneyLog.domain.HeatLogDO)
2019-04-03 10:35:47 -Mapped "{[/moneyLog/heatLog/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.moneyLog.controller.HeatLogController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 10:35:47 -Mapped "{[/moneyLog/heatLog/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.HeatLogController.save(com.bootdo.moneyLog.domain.HeatLogDO)
2019-04-03 10:35:47 -Mapped "{[/moneyLog/heatLog],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.HeatLogController.HeatLog()
2019-04-03 10:35:47 -Mapped "{[/moneyLog/heatLog/exprotHeatLog],methods=[GET]}" onto public void com.bootdo.moneyLog.controller.HeatLogController.exprotHeatLog(com.bootdo.moneyLog.vo.HeatLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-03 10:35:47 -Mapped "{[/moneyLog/heatLog/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.HeatLogController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 10:35:47 -Mapped "{[/moneyLog/waterLog/add],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.WaterLogController.add()
2019-04-03 10:35:47 -Mapped "{[/moneyLog/waterLog/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.WaterLogController.remove(java.lang.Long)
2019-04-03 10:35:47 -Mapped "{[/moneyLog/waterLog/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.WaterLogController.remove(java.lang.Long[])
2019-04-03 10:35:47 -Mapped "{[/moneyLog/waterLog/update]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.WaterLogController.update(com.bootdo.moneyLog.domain.WaterLogDO)
2019-04-03 10:35:47 -Mapped "{[/moneyLog/waterLog/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.moneyLog.controller.WaterLogController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 10:35:47 -Mapped "{[/moneyLog/waterLog/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.WaterLogController.save(com.bootdo.moneyLog.domain.WaterLogDO)
2019-04-03 10:35:47 -Mapped "{[/moneyLog/waterLog/exprotWaterLog],methods=[GET]}" onto public void com.bootdo.moneyLog.controller.WaterLogController.exprotWaterLog(com.bootdo.moneyLog.vo.WaterLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-03 10:35:47 -Mapped "{[/moneyLog/waterLog],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.WaterLogController.WaterLog()
2019-04-03 10:35:47 -Mapped "{[/moneyLog/waterLog/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.WaterLogController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 10:35:47 -Mapped "{[/oa/notify/add],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.add()
2019-04-03 10:35:47 -Mapped "{[/oa/notify/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.remove(java.lang.Long)
2019-04-03 10:35:47 -Mapped "{[/oa/notify/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.remove(java.lang.Long[])
2019-04-03 10:35:47 -Mapped "{[/oa/notify/update]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.update(com.bootdo.oa.domain.NotifyDO)
2019-04-03 10:35:47 -Mapped "{[/oa/notify/read/{id}],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.read(java.lang.Long,org.springframework.ui.Model)
2019-04-03 10:35:47 -Mapped "{[/oa/notify/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.oa.controller.NotifyController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 10:35:47 -Mapped "{[/oa/notify/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.save(com.bootdo.oa.domain.NotifyDO)
2019-04-03 10:35:47 -Mapped "{[/oa/notify/message],methods=[GET]}" onto com.bootdo.common.utils.PageUtils com.bootdo.oa.controller.NotifyController.message()
2019-04-03 10:35:47 -Mapped "{[/oa/notify/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 10:35:47 -Mapped "{[/oa/notify],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.oaNotify()
2019-04-03 10:35:47 -Mapped "{[/oa/notify/selfList],methods=[GET]}" onto com.bootdo.common.utils.PageUtils com.bootdo.oa.controller.NotifyController.selfList(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 10:35:47 -Mapped "{[/oa/notify/selfNotify],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.selefNotify()
2019-04-03 10:35:47 -Mapped "{[/print/print/add],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.add()
2019-04-03 10:35:47 -Mapped "{[/print/print/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.print.controller.PrintController.remove(java.lang.Long)
2019-04-03 10:35:47 -Mapped "{[/print/print/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.print.controller.PrintController.remove(java.lang.Long[])
2019-04-03 10:35:47 -Mapped "{[/print/print/update]}" onto public com.bootdo.common.utils.R com.bootdo.print.controller.PrintController.update(com.bootdo.print.domain.PrintDO)
2019-04-03 10:35:47 -Mapped "{[/print/print/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.print.controller.PrintController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 10:35:47 -Mapped "{[/print/print/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.print.controller.PrintController.save(java.lang.String,com.bootdo.print.domain.PrintDO)
2019-04-03 10:35:47 -Mapped "{[/print/print/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 10:35:47 -Mapped "{[/print/print/printEdit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.printEdit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 10:35:47 -Mapped "{[/print/print/exprotPrint],methods=[GET]}" onto public void com.bootdo.print.controller.PrintController.exprotPrint(com.bootdo.print.vo.PrintVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-03 10:35:47 -Mapped "{[/print/print],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.Print()
2019-04-03 10:35:47 -Mapped "{[/system/sysDept/add/{pId}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.add(java.lang.Long,org.springframework.ui.Model)
2019-04-03 10:35:47 -Mapped "{[/system/sysDept/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.remove(java.lang.Long)
2019-04-03 10:35:47 -Mapped "{[/system/sysDept/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.remove(java.lang.Long[])
2019-04-03 10:35:47 -Mapped "{[/system/sysDept/update]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.update(com.bootdo.system.domain.DeptDO)
2019-04-03 10:35:47 -Mapped "{[/system/sysDept/list],methods=[GET]}" onto public java.util.List<com.bootdo.system.domain.DeptDO> com.bootdo.system.controller.DeptController.list()
2019-04-03 10:35:47 -Mapped "{[/system/sysDept/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.save(com.bootdo.system.domain.DeptDO)
2019-04-03 10:35:47 -Mapped "{[/system/sysDept/tree],methods=[GET]}" onto public com.bootdo.common.domain.Tree<com.bootdo.system.domain.DeptDO> com.bootdo.system.controller.DeptController.tree()
2019-04-03 10:35:47 -Mapped "{[/system/sysDept/edit/{deptId}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 10:35:47 -Mapped "{[/system/sysDept],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.dept()
2019-04-03 10:35:47 -Mapped "{[/system/sysDept/treeView],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.treeView()
2019-04-03 10:35:47 -Mapped "{[/index],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.index(org.springframework.ui.Model)
2019-04-03 10:35:47 -Mapped "{[/main],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.main()
2019-04-03 10:35:47 -Mapped "{[/login],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.login(org.springframework.ui.Model)
2019-04-03 10:35:47 -Mapped "{[/logout],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.logout()
2019-04-03 10:35:47 -Mapped "{[/login],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.LoginController.ajaxLogin(java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest)
2019-04-03 10:35:47 -Mapped "{[/ || ],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.welcome(org.springframework.ui.Model)
2019-04-03 10:35:47 -Mapped "{[/getVerify],methods=[GET]}" onto public void com.bootdo.system.controller.LoginController.getVerify(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-04-03 10:35:47 -Mapped "{[/sys/menu/add/{pId}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.MenuController.add(org.springframework.ui.Model,java.lang.Long)
2019-04-03 10:35:47 -Mapped "{[/sys/menu/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.MenuController.remove(java.lang.Long)
2019-04-03 10:35:47 -Mapped "{[/sys/menu/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.MenuController.update(com.bootdo.system.domain.MenuDO)
2019-04-03 10:35:47 -Mapped "{[/sys/menu/list]}" onto java.util.List<com.bootdo.system.domain.MenuDO> com.bootdo.system.controller.MenuController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 10:35:47 -Mapped "{[/sys/menu/save],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.MenuController.save(com.bootdo.system.domain.MenuDO)
2019-04-03 10:35:47 -Mapped "{[/sys/menu/tree/{roleId}],methods=[GET]}" onto com.bootdo.common.domain.Tree<com.bootdo.system.domain.MenuDO> com.bootdo.system.controller.MenuController.tree(java.lang.Long)
2019-04-03 10:35:47 -Mapped "{[/sys/menu/tree],methods=[GET]}" onto com.bootdo.common.domain.Tree<com.bootdo.system.domain.MenuDO> com.bootdo.system.controller.MenuController.tree()
2019-04-03 10:35:47 -Mapped "{[/sys/menu/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.MenuController.edit(org.springframework.ui.Model,java.lang.Long)
2019-04-03 10:35:47 -Mapped "{[/sys/menu],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.MenuController.menu(org.springframework.ui.Model)
2019-04-03 10:35:47 -Mapped "{[/sys/role/add],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.RoleController.add()
2019-04-03 10:35:47 -Mapped "{[/sys/role/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.update(com.bootdo.system.domain.RoleDO)
2019-04-03 10:35:47 -Mapped "{[/sys/role/list],methods=[GET]}" onto java.util.List<com.bootdo.system.domain.RoleDO> com.bootdo.system.controller.RoleController.list()
2019-04-03 10:35:47 -Mapped "{[/sys/role/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.save(java.lang.Long)
2019-04-03 10:35:47 -Mapped "{[/sys/role/save],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.save(com.bootdo.system.domain.RoleDO)
2019-04-03 10:35:47 -Mapped "{[/sys/role/batchRemove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.batchRemove(java.lang.Long[])
2019-04-03 10:35:47 -Mapped "{[/sys/role],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.RoleController.role()
2019-04-03 10:35:47 -Mapped "{[/sys/role/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.RoleController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 10:35:47 -Mapped "{[/sys/online/list]}" onto public java.util.List<com.bootdo.system.domain.UserOnline> com.bootdo.system.controller.SessionController.list()
2019-04-03 10:35:47 -Mapped "{[/sys/online/sessionList]}" onto public java.util.Collection<org.apache.shiro.session.Session> com.bootdo.system.controller.SessionController.sessionList()
2019-04-03 10:35:47 -Mapped "{[/sys/online/forceLogout/{sessionId}]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.SessionController.forceLogout(java.lang.String,org.springframework.web.servlet.mvc.support.RedirectAttributes)
2019-04-03 10:35:47 -Mapped "{[/sys/online],methods=[GET]}" onto public java.lang.String com.bootdo.system.controller.SessionController.online()
2019-04-03 10:35:47 -Mapped "{[/sys/user/exit],methods=[POST]}" onto boolean com.bootdo.system.controller.UserController.exit(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 10:35:47 -Mapped "{[/sys/user/add],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.add(org.springframework.ui.Model)
2019-04-03 10:35:47 -Mapped "{[/sys/user/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.remove(java.lang.Long)
2019-04-03 10:35:47 -Mapped "{[/sys/user/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.update(com.bootdo.system.domain.UserDO)
2019-04-03 10:35:47 -Mapped "{[/sys/user/list],methods=[GET]}" onto com.bootdo.common.utils.PageUtils com.bootdo.system.controller.UserController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 10:35:47 -Mapped "{[/sys/user/save],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.save(com.bootdo.system.domain.UserDO)
2019-04-03 10:35:47 -Mapped "{[/sys/user/batchRemove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.batchRemove(java.lang.Long[])
2019-04-03 10:35:47 -Mapped "{[/sys/user/tree],methods=[GET]}" onto public com.bootdo.common.domain.Tree<com.bootdo.system.domain.DeptDO> com.bootdo.system.controller.UserController.tree()
2019-04-03 10:35:47 -Mapped "{[/sys/user/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.edit(org.springframework.ui.Model,java.lang.Long)
2019-04-03 10:35:47 -Mapped "{[/sys/user],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.user(org.springframework.ui.Model)
2019-04-03 10:35:47 -Mapped "{[/sys/user/treeView],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.treeView()
2019-04-03 10:35:47 -Mapped "{[/sys/user/resetPwd],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.resetPwd(com.bootdo.system.vo.UserVO)
2019-04-03 10:35:47 -Mapped "{[/sys/user/resetPwd/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.resetPwd(java.lang.Long,org.springframework.ui.Model)
2019-04-03 10:35:47 -Mapped "{[/sys/user/updatePeronal],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.updatePeronal(com.bootdo.system.domain.UserDO)
2019-04-03 10:35:47 -Mapped "{[/sys/user/adminResetPwd],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.adminResetPwd(com.bootdo.system.vo.UserVO)
2019-04-03 10:35:47 -Mapped "{[/sys/user/personal],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.personal(org.springframework.ui.Model)
2019-04-03 10:35:47 -Mapped "{[/sys/user/uploadImg],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.uploadImg(org.springframework.web.multipart.MultipartFile,java.lang.String,javax.servlet.http.HttpServletRequest)
2019-04-03 10:35:47 -Mapped "{[/file/downImport/{importType}],methods=[GET]}" onto public void com.bootdo.temple.controller.TempletController.downImport(javax.servlet.http.HttpServletResponse,java.lang.String)
2019-04-03 10:35:47 -Mapped "{[/water/water/add],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterController.add()
2019-04-03 10:35:47 -Mapped "{[/water/water/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterController.remove(java.lang.Long)
2019-04-03 10:35:47 -Mapped "{[/water/water/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterController.remove(java.lang.Long[])
2019-04-03 10:35:47 -Mapped "{[/water/water/update]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterController.update(com.bootdo.water.domain.WaterDO)
2019-04-03 10:35:47 -Mapped "{[/water/water/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.water.controller.WaterController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 10:35:47 -Mapped "{[/water/water/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterController.save(com.bootdo.water.domain.WaterDO)
2019-04-03 10:35:47 -Mapped "{[/water/water/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 10:35:47 -Mapped "{[/water/water/exprotWater],methods=[GET]}" onto public void com.bootdo.water.controller.WaterController.exprotExcel(com.bootdo.water.vo.WaterVo,javax.servlet.http.HttpServletResponse)
2019-04-03 10:35:47 -Mapped "{[/water/water],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterController.Water()
2019-04-03 10:35:47 -Mapped "{[/water/waterInto/exprotWaterIntoExcel],methods=[GET]}" onto public void com.bootdo.water.controller.WaterIntoController.exprotExcel(com.bootdo.water.vo.WaterVo,javax.servlet.http.HttpServletResponse)
2019-04-03 10:35:47 -Mapped "{[/water/waterInto],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterIntoController.WaterInto()
2019-04-03 10:35:47 -Mapped "{[/water/waterPrice/add],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterPriceController.add()
2019-04-03 10:35:47 -Mapped "{[/water/waterPrice/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterPriceController.remove(java.lang.Long)
2019-04-03 10:35:47 -Mapped "{[/water/waterPrice/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterPriceController.remove(java.lang.Long[])
2019-04-03 10:35:47 -Mapped "{[/water/waterPrice/update]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterPriceController.update(com.bootdo.water.domain.WaterPriceDO)
2019-04-03 10:35:47 -Mapped "{[/water/waterPrice/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.water.controller.WaterPriceController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 10:35:47 -Mapped "{[/water/waterPrice/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterPriceController.save(com.bootdo.water.domain.WaterPriceDO)
2019-04-03 10:35:47 -Mapped "{[/water/waterPrice/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterPriceController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 10:35:47 -Mapped "{[/water/waterPrice],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterPriceController.WaterPrice()
2019-04-03 10:35:47 -Mapped "{[/water/waterUpLoad],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterUpLoadController.WaterUpLoad()
2019-04-03 10:35:47 -Mapped "{[/water/waterUpLoad/createWaterExcel],methods=[POST]}" onto public java.lang.String com.bootdo.water.controller.WaterUpLoadController.createWaterExcel(com.bootdo.water.domain.WaterDO) throws java.lang.Exception
2019-04-03 10:35:47 -Mapped "{[/water/waterUpLoad/importWaterExcel]}" onto public java.lang.String com.bootdo.water.controller.WaterUpLoadController.importWaterExcel(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)
2019-04-03 10:35:47 -Mapped "{[/water/waterUpLoad/exprotWaterExcel],methods=[GET]}" onto public void com.bootdo.water.controller.WaterUpLoadController.exprotWaterExcel(com.bootdo.water.vo.WaterVo,javax.servlet.http.HttpServletResponse)
2019-04-03 10:35:47 -Mapped "{[/v2/api-docs],methods=[GET],produces=[application/json || application/hal+json]}" onto public org.springframework.http.ResponseEntity<springfox.documentation.spring.web.json.Json> springfox.documentation.swagger2.web.Swagger2Controller.getDocumentation(java.lang.String,javax.servlet.http.HttpServletRequest)
2019-04-03 10:35:47 -Mapped "{[/swagger-resources]}" onto org.springframework.http.ResponseEntity<java.util.List<springfox.documentation.swagger.web.SwaggerResource>> springfox.documentation.swagger.web.ApiResourceController.swaggerResources()
2019-04-03 10:35:47 -Mapped "{[/swagger-resources/configuration/ui]}" onto org.springframework.http.ResponseEntity<springfox.documentation.swagger.web.UiConfiguration> springfox.documentation.swagger.web.ApiResourceController.uiConfiguration()
2019-04-03 10:35:47 -Mapped "{[/swagger-resources/configuration/security]}" onto org.springframework.http.ResponseEntity<springfox.documentation.swagger.web.SecurityConfiguration> springfox.documentation.swagger.web.ApiResourceController.securityConfiguration()
2019-04-03 10:35:48 -Initializing ExecutorService  'messageBrokerTaskScheduler'
2019-04-03 10:35:48 -Mapped URL path [/endpointChat/**] onto handler of type [class org.springframework.web.socket.sockjs.support.SockJsHttpRequestHandler]
2019-04-03 10:35:48 -Initializing ExecutorService  'brokerChannelExecutor'
2019-04-03 10:35:48 -Mapped URL path [/**/favicon.ico] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-04-03 10:35:49 -Looking for @ControllerAdvice: org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@a38c7fe: startup date [Wed Apr 03 10:35:29 CST 2019]; root of context hierarchy
2019-04-03 10:35:49 -Mapped URL path [/webjars/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-04-03 10:35:49 -Mapped URL path [/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-04-03 10:35:49 -Mapped URL path [/files/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-04-03 10:35:49 -Detected @ExceptionHandler methods in BDExceptionHandler
2019-04-03 10:35:49 -[THYMELEAF][main] Template Mode 'LEGACYHTML5' is deprecated. Using Template Mode 'HTML' instead.
2019-04-03 10:35:52 -Registering beans for JMX exposure on startup
2019-04-03 10:35:52 -Bean with name 'dataSource' has been autodetected for JMX exposure
2019-04-03 10:35:52 -Located MBean 'dataSource': registering with JMX server as MBean [com.alibaba.druid.pool:name=dataSource,type=DruidDataSource]
2019-04-03 10:35:52 -Starting beans in phase 2147483647
2019-04-03 10:35:52 -Context refreshed
2019-04-03 10:35:55 -Found 1 custom documentation plugin(s)
2019-04-03 10:35:55 -Scanning for api listing references
2019-04-03 10:35:55 -Generating unique operation named: exprotElecLogUsingGET_1
2019-04-03 10:35:55 -Generating unique operation named: getCountDUsingPOST_1
2019-04-03 10:35:55 -Generating unique operation named: exprotElecLogUsingGET_2
2019-04-03 10:35:55 -Generating unique operation named: getCountDUsingPOST_2
2019-04-03 10:35:55 -Generating unique operation named: exprotElecLogUsingGET_3
2019-04-03 10:35:55 -Generating unique operation named: getCountDUsingPOST_3
2019-04-03 10:35:55 -Generating unique operation named: removeUsingPOST_1
2019-04-03 10:35:56 -Generating unique operation named: addUsingGET_1
2019-04-03 10:35:56 -Generating unique operation named: editUsingGET_1
2019-04-03 10:35:56 -Generating unique operation named: listUsingGET_1
2019-04-03 10:35:56 -Generating unique operation named: removeUsingPOST_2
2019-04-03 10:35:56 -Generating unique operation named: removeUsingPOST_3
2019-04-03 10:35:56 -Generating unique operation named: saveUsingPOST_1
2019-04-03 10:35:56 -Generating unique operation named: updateUsingGET_1
2019-04-03 10:35:56 -Generating unique operation named: updateUsingHEAD_1
2019-04-03 10:35:56 -Generating unique operation named: updateUsingPOST_1
2019-04-03 10:35:56 -Generating unique operation named: updateUsingPUT_1
2019-04-03 10:35:56 -Generating unique operation named: updateUsingPATCH_1
2019-04-03 10:35:56 -Generating unique operation named: updateUsingDELETE_1
2019-04-03 10:35:56 -Generating unique operation named: updateUsingOPTIONS_1
2019-04-03 10:35:56 -Generating unique operation named: updateUsingTRACE_1
2019-04-03 10:35:56 -Generating unique operation named: addUsingGET_2
2019-04-03 10:35:56 -Generating unique operation named: editUsingGET_2
2019-04-03 10:35:56 -Generating unique operation named: listUsingGET_2
2019-04-03 10:35:56 -Generating unique operation named: removeUsingPOST_4
2019-04-03 10:35:56 -Generating unique operation named: removeUsingPOST_5
2019-04-03 10:35:56 -Generating unique operation named: saveUsingPOST_2
2019-04-03 10:35:56 -Generating unique operation named: updateUsingPOST_2
2019-04-03 10:35:56 -Generating unique operation named: exprotExcelUsingGET_1
2019-04-03 10:35:56 -Generating unique operation named: addUsingGET_3
2019-04-03 10:35:56 -Generating unique operation named: editUsingGET_3
2019-04-03 10:35:56 -Generating unique operation named: exprotElecLogUsingGET_4
2019-04-03 10:35:56 -Generating unique operation named: listUsingGET_3
2019-04-03 10:35:56 -Generating unique operation named: removeUsingPOST_6
2019-04-03 10:35:56 -Generating unique operation named: removeUsingPOST_7
2019-04-03 10:35:56 -Generating unique operation named: saveUsingPOST_3
2019-04-03 10:35:56 -Generating unique operation named: updateUsingGET_2
2019-04-03 10:35:56 -Generating unique operation named: updateUsingHEAD_2
2019-04-03 10:35:56 -Generating unique operation named: updateUsingPOST_3
2019-04-03 10:35:56 -Generating unique operation named: updateUsingPUT_2
2019-04-03 10:35:56 -Generating unique operation named: updateUsingPATCH_2
2019-04-03 10:35:56 -Generating unique operation named: updateUsingDELETE_2
2019-04-03 10:35:56 -Generating unique operation named: updateUsingOPTIONS_2
2019-04-03 10:35:56 -Generating unique operation named: updateUsingTRACE_2
2019-04-03 10:35:56 -Generating unique operation named: addUsingGET_4
2019-04-03 10:35:56 -Generating unique operation named: editUsingGET_4
2019-04-03 10:35:56 -Generating unique operation named: listUsingGET_4
2019-04-03 10:35:56 -Generating unique operation named: removeUsingPOST_8
2019-04-03 10:35:56 -Generating unique operation named: removeUsingPOST_9
2019-04-03 10:35:56 -Generating unique operation named: saveUsingPOST_4
2019-04-03 10:35:56 -Generating unique operation named: updateUsingGET_3
2019-04-03 10:35:56 -Generating unique operation named: updateUsingHEAD_3
2019-04-03 10:35:56 -Generating unique operation named: updateUsingPOST_4
2019-04-03 10:35:56 -Generating unique operation named: updateUsingPUT_3
2019-04-03 10:35:56 -Generating unique operation named: updateUsingPATCH_3
2019-04-03 10:35:56 -Generating unique operation named: updateUsingDELETE_3
2019-04-03 10:35:56 -Generating unique operation named: updateUsingOPTIONS_3
2019-04-03 10:35:56 -Generating unique operation named: updateUsingTRACE_3
2019-04-03 10:35:56 -Generating unique operation named: ElecUsingGET_1
2019-04-03 10:35:56 -Generating unique operation named: addUsingGET_5
2019-04-03 10:35:56 -Generating unique operation named: editUsingGET_5
2019-04-03 10:35:56 -Generating unique operation named: listUsingGET_5
2019-04-03 10:35:56 -Generating unique operation named: removeUsingPOST_10
2019-04-03 10:35:56 -Generating unique operation named: removeUsingPOST_11
2019-04-03 10:35:56 -Generating unique operation named: saveUsingPOST_5
2019-04-03 10:35:56 -Generating unique operation named: updateUsingGET_4
2019-04-03 10:35:56 -Generating unique operation named: updateUsingHEAD_4
2019-04-03 10:35:56 -Generating unique operation named: updateUsingPOST_5
2019-04-03 10:35:56 -Generating unique operation named: updateUsingPUT_4
2019-04-03 10:35:56 -Generating unique operation named: updateUsingPATCH_4
2019-04-03 10:35:56 -Generating unique operation named: updateUsingDELETE_4
2019-04-03 10:35:56 -Generating unique operation named: updateUsingOPTIONS_4
2019-04-03 10:35:56 -Generating unique operation named: updateUsingTRACE_4
2019-04-03 10:35:56 -Generating unique operation named: editUsingGET_6
2019-04-03 10:35:56 -Generating unique operation named: listUsingGET_6
2019-04-03 10:35:56 -Generating unique operation named: updateUsingPOST_6
2019-04-03 10:35:56 -Generating unique operation named: addUsingGET_6
2019-04-03 10:35:56 -Generating unique operation named: editUsingGET_7
2019-04-03 10:35:56 -Generating unique operation named: exprotExcelUsingGET_2
2019-04-03 10:35:56 -Generating unique operation named: listUsingGET_7
2019-04-03 10:35:56 -Generating unique operation named: removeUsingPOST_12
2019-04-03 10:35:56 -Generating unique operation named: removeUsingPOST_13
2019-04-03 10:35:56 -Generating unique operation named: saveUsingPOST_6
2019-04-03 10:35:56 -Generating unique operation named: updateUsingGET_5
2019-04-03 10:35:56 -Generating unique operation named: updateUsingHEAD_5
2019-04-03 10:35:56 -Generating unique operation named: updateUsingPOST_7
2019-04-03 10:35:56 -Generating unique operation named: updateUsingPUT_5
2019-04-03 10:35:56 -Generating unique operation named: updateUsingPATCH_5
2019-04-03 10:35:56 -Generating unique operation named: updateUsingDELETE_5
2019-04-03 10:35:56 -Generating unique operation named: updateUsingOPTIONS_5
2019-04-03 10:35:56 -Generating unique operation named: updateUsingTRACE_5
2019-04-03 10:35:56 -Generating unique operation named: exprotExcelUsingGET_3
2019-04-03 10:35:57 -Generating unique operation named: addUsingGET_7
2019-04-03 10:35:57 -Generating unique operation named: editUsingGET_8
2019-04-03 10:35:57 -Generating unique operation named: listUsingGET_8
2019-04-03 10:35:57 -Generating unique operation named: removeUsingPOST_14
2019-04-03 10:35:57 -Generating unique operation named: removeUsingPOST_15
2019-04-03 10:35:57 -Generating unique operation named: saveUsingPOST_7
2019-04-03 10:35:57 -Generating unique operation named: updateUsingGET_6
2019-04-03 10:35:57 -Generating unique operation named: updateUsingHEAD_6
2019-04-03 10:35:57 -Generating unique operation named: updateUsingPOST_8
2019-04-03 10:35:57 -Generating unique operation named: updateUsingPUT_6
2019-04-03 10:35:57 -Generating unique operation named: updateUsingPATCH_6
2019-04-03 10:35:57 -Generating unique operation named: updateUsingDELETE_6
2019-04-03 10:35:57 -Generating unique operation named: updateUsingOPTIONS_6
2019-04-03 10:35:57 -Generating unique operation named: updateUsingTRACE_6
2019-04-03 10:35:57 -Generating unique operation named: addUsingGET_8
2019-04-03 10:35:57 -Generating unique operation named: editUsingGET_9
2019-04-03 10:35:57 -Generating unique operation named: listUsingGET_9
2019-04-03 10:35:57 -Generating unique operation named: removeUsingPOST_16
2019-04-03 10:35:57 -Generating unique operation named: removeUsingPOST_17
2019-04-03 10:35:57 -Generating unique operation named: saveUsingPOST_8
2019-04-03 10:35:57 -Generating unique operation named: updateUsingGET_7
2019-04-03 10:35:57 -Generating unique operation named: updateUsingHEAD_7
2019-04-03 10:35:57 -Generating unique operation named: updateUsingPOST_9
2019-04-03 10:35:57 -Generating unique operation named: updateUsingPUT_7
2019-04-03 10:35:57 -Generating unique operation named: updateUsingPATCH_7
2019-04-03 10:35:57 -Generating unique operation named: updateUsingDELETE_7
2019-04-03 10:35:57 -Generating unique operation named: updateUsingOPTIONS_7
2019-04-03 10:35:57 -Generating unique operation named: updateUsingTRACE_7
2019-04-03 10:35:57 -Generating unique operation named: addUsingGET_9
2019-04-03 10:35:57 -Generating unique operation named: editUsingGET_10
2019-04-03 10:35:57 -Generating unique operation named: infoUsingGET_1
2019-04-03 10:35:57 -Generating unique operation named: infoUsingHEAD_1
2019-04-03 10:35:57 -Generating unique operation named: infoUsingPOST_1
2019-04-03 10:35:57 -Generating unique operation named: infoUsingPUT_1
2019-04-03 10:35:57 -Generating unique operation named: infoUsingPATCH_1
2019-04-03 10:35:57 -Generating unique operation named: infoUsingDELETE_1
2019-04-03 10:35:57 -Generating unique operation named: infoUsingOPTIONS_1
2019-04-03 10:35:57 -Generating unique operation named: infoUsingTRACE_1
2019-04-03 10:35:57 -Generating unique operation named: listUsingGET_10
2019-04-03 10:35:57 -Generating unique operation named: removeUsingPOST_18
2019-04-03 10:35:57 -Generating unique operation named: removeUsingPOST_19
2019-04-03 10:35:57 -Generating unique operation named: saveUsingPOST_9
2019-04-03 10:35:57 -Generating unique operation named: updateUsingPOST_10
2019-04-03 10:35:57 -Generating unique operation named: listUsingGET_11
2019-04-03 10:35:57 -Generating unique operation named: removeUsingPOST_20
2019-04-03 10:35:57 -Generating unique operation named: welcomeUsingGET_1
2019-04-03 10:35:57 -Generating unique operation named: addUsingGET_10
2019-04-03 10:35:57 -Generating unique operation named: editUsingGET_11
2019-04-03 10:35:57 -Generating unique operation named: listUsingGET_12
2019-04-03 10:35:57 -Generating unique operation named: removeUsingPOST_21
2019-04-03 10:35:57 -Generating unique operation named: saveUsingPOST_10
2019-04-03 10:35:57 -Generating unique operation named: treeUsingGET_1
2019-04-03 10:35:57 -Generating unique operation named: treeUsingGET_2
2019-04-03 10:35:57 -Generating unique operation named: updateUsingPOST_11
2019-04-03 10:35:57 -Generating unique operation named: addUsingGET_11
2019-04-03 10:35:57 -Generating unique operation named: editUsingGET_12
2019-04-03 10:35:57 -Generating unique operation named: listUsingGET_13
2019-04-03 10:35:57 -Generating unique operation named: removeUsingPOST_22
2019-04-03 10:35:57 -Generating unique operation named: removeUsingPOST_23
2019-04-03 10:35:57 -Generating unique operation named: saveUsingPOST_11
2019-04-03 10:35:57 -Generating unique operation named: updateUsingGET_8
2019-04-03 10:35:57 -Generating unique operation named: updateUsingHEAD_8
2019-04-03 10:35:57 -Generating unique operation named: updateUsingPOST_12
2019-04-03 10:35:57 -Generating unique operation named: updateUsingPUT_8
2019-04-03 10:35:57 -Generating unique operation named: updateUsingPATCH_8
2019-04-03 10:35:57 -Generating unique operation named: updateUsingDELETE_8
2019-04-03 10:35:57 -Generating unique operation named: updateUsingOPTIONS_8
2019-04-03 10:35:57 -Generating unique operation named: updateUsingTRACE_8
2019-04-03 10:35:57 -Generating unique operation named: addUsingGET_12
2019-04-03 10:35:57 -Generating unique operation named: editUsingGET_13
2019-04-03 10:35:57 -Generating unique operation named: listUsingGET_14
2019-04-03 10:35:57 -Generating unique operation named: removeUsingPOST_24
2019-04-03 10:35:57 -Generating unique operation named: removeUsingPOST_25
2019-04-03 10:35:57 -Generating unique operation named: saveUsingPOST_12
2019-04-03 10:35:57 -Generating unique operation named: updateUsingGET_9
2019-04-03 10:35:57 -Generating unique operation named: updateUsingHEAD_9
2019-04-03 10:35:57 -Generating unique operation named: updateUsingPOST_13
2019-04-03 10:35:57 -Generating unique operation named: updateUsingPUT_9
2019-04-03 10:35:57 -Generating unique operation named: updateUsingPATCH_9
2019-04-03 10:35:57 -Generating unique operation named: updateUsingDELETE_9
2019-04-03 10:35:57 -Generating unique operation named: updateUsingOPTIONS_9
2019-04-03 10:35:57 -Generating unique operation named: updateUsingTRACE_9
2019-04-03 10:35:57 -Generating unique operation named: addUsingGET_13
2019-04-03 10:35:57 -Generating unique operation named: batchRemoveUsingPOST_1
2019-04-03 10:35:57 -Generating unique operation named: editUsingGET_14
2019-04-03 10:35:57 -Generating unique operation named: listUsingGET_15
2019-04-03 10:35:57 -Generating unique operation named: saveUsingPOST_13
2019-04-03 10:35:57 -Generating unique operation named: saveUsingPOST_14
2019-04-03 10:35:57 -Generating unique operation named: updateUsingPOST_14
2019-04-03 10:35:57 -Generating unique operation named: listUsingGET_16
2019-04-03 10:35:57 -Generating unique operation named: listUsingHEAD_1
2019-04-03 10:35:57 -Generating unique operation named: listUsingPOST_1
2019-04-03 10:35:57 -Generating unique operation named: listUsingPUT_1
2019-04-03 10:35:57 -Generating unique operation named: listUsingPATCH_1
2019-04-03 10:35:57 -Generating unique operation named: listUsingDELETE_1
2019-04-03 10:35:57 -Generating unique operation named: listUsingOPTIONS_1
2019-04-03 10:35:57 -Generating unique operation named: listUsingTRACE_1
2019-04-03 10:35:57 -Generating unique operation named: addUsingGET_14
2019-04-03 10:35:57 -Generating unique operation named: batchRemoveUsingPOST_2
2019-04-03 10:35:57 -Generating unique operation named: editUsingGET_15
2019-04-03 10:35:58 -Generating unique operation named: listUsingGET_17
2019-04-03 10:35:58 -Generating unique operation named: removeUsingPOST_26
2019-04-03 10:35:58 -Generating unique operation named: saveUsingPOST_15
2019-04-03 10:35:58 -Generating unique operation named: treeUsingGET_3
2019-04-03 10:35:58 -Generating unique operation named: treeViewUsingGET_1
2019-04-03 10:35:58 -Generating unique operation named: updateUsingPOST_15
2019-04-03 10:35:58 -Generating unique operation named: addUsingGET_15
2019-04-03 10:35:58 -Generating unique operation named: editUsingGET_16
2019-04-03 10:35:58 -Generating unique operation named: exprotExcelUsingGET_4
2019-04-03 10:35:58 -Generating unique operation named: listUsingGET_18
2019-04-03 10:35:58 -Generating unique operation named: removeUsingPOST_27
2019-04-03 10:35:58 -Generating unique operation named: removeUsingPOST_28
2019-04-03 10:35:58 -Generating unique operation named: saveUsingPOST_16
2019-04-03 10:35:58 -Generating unique operation named: updateUsingGET_10
2019-04-03 10:35:58 -Generating unique operation named: updateUsingHEAD_10
2019-04-03 10:35:58 -Generating unique operation named: updateUsingPOST_16
2019-04-03 10:35:58 -Generating unique operation named: updateUsingPUT_10
2019-04-03 10:35:58 -Generating unique operation named: updateUsingPATCH_10
2019-04-03 10:35:58 -Generating unique operation named: updateUsingDELETE_10
2019-04-03 10:35:58 -Generating unique operation named: updateUsingOPTIONS_10
2019-04-03 10:35:58 -Generating unique operation named: updateUsingTRACE_10
2019-04-03 10:35:58 -Generating unique operation named: exprotExcelUsingGET_5
2019-04-03 10:35:58 -Generating unique operation named: addUsingGET_16
2019-04-03 10:35:58 -Generating unique operation named: editUsingGET_17
2019-04-03 10:35:58 -Generating unique operation named: listUsingGET_19
2019-04-03 10:35:58 -Generating unique operation named: removeUsingPOST_29
2019-04-03 10:35:58 -Generating unique operation named: removeUsingPOST_30
2019-04-03 10:35:58 -Generating unique operation named: saveUsingPOST_17
2019-04-03 10:35:58 -Generating unique operation named: updateUsingGET_11
2019-04-03 10:35:58 -Generating unique operation named: updateUsingHEAD_11
2019-04-03 10:35:58 -Generating unique operation named: updateUsingPOST_17
2019-04-03 10:35:58 -Generating unique operation named: updateUsingPUT_11
2019-04-03 10:35:58 -Generating unique operation named: updateUsingPATCH_11
2019-04-03 10:35:58 -Generating unique operation named: updateUsingDELETE_11
2019-04-03 10:35:58 -Generating unique operation named: updateUsingOPTIONS_11
2019-04-03 10:35:58 -Generating unique operation named: updateUsingTRACE_11
2019-04-03 10:35:58 -Generating unique operation named: addUsingGET_17
2019-04-03 10:35:58 -Generating unique operation named: editUsingGET_18
2019-04-03 10:35:58 -Generating unique operation named: listUsingGET_20
2019-04-03 10:35:58 -Generating unique operation named: removeUsingPOST_31
2019-04-03 10:35:58 -Generating unique operation named: removeUsingPOST_32
2019-04-03 10:35:58 -Generating unique operation named: saveUsingPOST_18
2019-04-03 10:35:58 -Generating unique operation named: updateUsingGET_12
2019-04-03 10:35:58 -Generating unique operation named: updateUsingHEAD_12
2019-04-03 10:35:58 -Generating unique operation named: updateUsingPOST_18
2019-04-03 10:35:58 -Generating unique operation named: updateUsingPUT_12
2019-04-03 10:35:58 -Generating unique operation named: updateUsingPATCH_12
2019-04-03 10:35:58 -Generating unique operation named: updateUsingDELETE_12
2019-04-03 10:35:58 -Generating unique operation named: updateUsingOPTIONS_12
2019-04-03 10:35:58 -Generating unique operation named: updateUsingTRACE_12
2019-04-03 10:35:58 -Starting Quartz Scheduler now
2019-04-03 10:35:58 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED started.
2019-04-03 10:35:58 -Starting...
2019-04-03 10:35:58 -BrokerAvailabilityEvent[available=true, SimpleBrokerMessageHandler [DefaultSubscriptionRegistry[cache[0 destination(s)], registry[0 sessions]]]]
2019-04-03 10:35:58 -Started.
2019-04-03 10:35:58 -Starting ProtocolHandler ["http-nio-8081"]
2019-04-03 10:35:58 -Using a shared selector for servlet write/read
2019-04-03 10:35:58 -Tomcat started on port(s): 8081 (http) with context path ''
2019-04-03 10:35:58 -Started BootdoApplication in 30.555 seconds (JVM running for 31.49)
2019-04-03 10:35:58 -==>  Preparing: select `id`,`cron_expression`,`method_name`,`is_concurrent`,`description`,`update_by`,`bean_class`,`create_date`,`job_status`,`job_group`,`update_date`,`create_by`,`spring_bean`,`job_name` from sys_task order by id desc 
2019-04-03 10:35:58 -==> Parameters: 
2019-04-03 10:35:59 -<==      Total: 1
2019-04-03 10:36:48 -WebSocketSession[0 current WS(0)-HttpStream(0)-HttpPoll(0), 0 total, 0 closed abnormally (0 connect failure, 0 send limit, 0 transport error)], stompSubProtocol[processed CONNECT(0)-CONNECTED(0)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], outboundChannelpool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], sockJsScheduler[pool size = 1, active threads = 1, queued tasks = 0, completed tasks = 0]
2019-04-03 10:37:09 -Initializing Spring FrameworkServlet 'dispatcherServlet'
2019-04-03 10:37:09 -FrameworkServlet 'dispatcherServlet': initialization started
2019-04-03 10:37:10 -FrameworkServlet 'dispatcherServlet': initialization completed in 70 ms
2019-04-03 10:37:10 -Enabling session validation scheduler...
2019-04-03 10:37:10 -请求地址 : http://localhost:8081/login;JSESSIONID=7a982b02-4e19-4a24-b0d3-2c07d5c9859c
2019-04-03 10:37:10 -HTTP METHOD : GET
2019-04-03 10:37:10 -CLASS_METHOD : com.bootdo.system.controller.LoginController.login
2019-04-03 10:37:10 -参数 : [{}]
2019-04-03 10:37:10 -耗时 : 3
2019-04-03 10:37:10 -返回值 : login
2019-04-03 10:37:12 -请求地址 : http://localhost:8081/getVerify
2019-04-03 10:37:12 -HTTP METHOD : GET
2019-04-03 10:37:12 -CLASS_METHOD : com.bootdo.system.controller.LoginController.getVerify
2019-04-03 10:37:12 -参数 : [org.apache.shiro.web.servlet.ShiroHttpServletRequest@32c471ff, org.apache.shiro.web.servlet.ShiroHttpServletResponse@44f77029]
2019-04-03 10:37:16 -7994
2019-04-03 10:37:16 -耗时 : 4023
2019-04-03 10:37:16 -返回值 : null
2019-04-03 10:37:16 -请求地址 : http://localhost:8081/login
2019-04-03 10:37:16 -HTTP METHOD : GET
2019-04-03 10:37:16 -CLASS_METHOD : com.bootdo.system.controller.LoginController.login
2019-04-03 10:37:16 -参数 : [{}]
2019-04-03 10:37:16 -耗时 : 0
2019-04-03 10:37:16 -返回值 : login
2019-04-03 10:37:22 -请求地址 : http://localhost:8081/login
2019-04-03 10:37:22 -HTTP METHOD : POST
2019-04-03 10:37:22 -CLASS_METHOD : com.bootdo.system.controller.LoginController.ajaxLogin
2019-04-03 10:37:22 -参数 : [admin, 111111, 7994, org.apache.shiro.web.servlet.ShiroHttpServletRequest@17b2ccc7]
2019-04-03 10:37:22 -==>  Preparing: select `user_id`,`username`,`name`,`password`,`dept_id`,`email`,`mobile`,`status`,`user_id_create`,`gmt_create`,`gmt_modified`,`sex`,`birth`,`pic_id`,`live_address`,`hobby`,`province`,`city`,`district` from sys_user WHERE username = ? order by user_id desc 
2019-04-03 10:37:22 -==> Parameters: admin(String)
2019-04-03 10:37:22 -<==      Total: 1
2019-04-03 10:37:22 -耗时 : 302
2019-04-03 10:37:22 -返回值 : {msg=操作成功, code=0}
2019-04-03 10:37:22 -More than one TaskExecutor bean found within the context, and none is named 'taskExecutor'. Mark one of them as primary or name it 'taskExecutor' (possibly as an alias) in order to use it for async processing: [clientInboundChannelExecutor, clientOutboundChannelExecutor, brokerChannelExecutor, messageBrokerTaskScheduler]
2019-04-03 10:37:22 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 10:37:22 -请求地址 : http://localhost:8081/index
2019-04-03 10:37:22 -HTTP METHOD : GET
2019-04-03 10:37:22 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2019-04-03 10:37:22 -参数 : [{}]
2019-04-03 10:37:22 -==> Parameters: 1(Long), admin(String), 登录(String), 303(Integer), com.bootdo.system.controller.LoginController.ajaxLogin()(String), null, 127.0.0.1(String), 2019-04-03 10:37:22.481(Timestamp)
2019-04-03 10:37:22 -<==    Updates: 1
2019-04-03 10:37:22 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2019-04-03 10:37:23 -==> Parameters: 1(Long)
2019-04-03 10:37:23 -<==      Total: 46
2019-04-03 10:37:23 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2019-04-03 10:37:23 -==> Parameters: 138(Long)
2019-04-03 10:37:23 -<==      Total: 1
2019-04-03 10:37:23 -耗时 : 644
2019-04-03 10:37:23 -返回值 : index_v1
2019-04-03 10:37:23 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 10:37:23 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 644(Integer), com.bootdo.system.controller.LoginController.index()(String), {"menus":[{"attributes":{"icon":"fa fa-money","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-money","url":"/moneyList/moneyList"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"102","parentId":"106","text":"现金缴费"},{"attributes":{"icon":"fa fa-book","url":"/moneyLog/elecLog"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"107","parentId":"106","text":"缴费记录"}],"hasChildren":true,"hasParent":false,"id":"106","parentId":"0","text":"收费管理"},{"attributes":{"icon":"fa fa-lightbulb-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/elec/elec"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"121","parentId":"103","text":"电费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"elec/elecInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"122","parentId":"103","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"elec/elecUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"123","parentId":"103","text":"电表上传"},{"attributes":{"icon":"fa fa-cc","url":"/elec/elecPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"124","parentId":"103","text":"电价管理"}],"hasChildren":true,"hasParent":false,"id":"103","parentId":"0","text":"电费管理"},{"attributes":{"icon":"fa fa-tint","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/water/water"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"117","parentId":"105","text":"水费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"water/waterInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"118","parentId":"105","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"water/waterUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"119","parentId":"105","text":"水费生成"},{"attributes":{"icon":"fa fa-cc","url":"/water/waterPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"120","parentId":"105","text":"水价管理"}],"hasChildren":true,"hasParent":false,"id":"105","parentId":"0","text":"水费管理"},{"attributes":{"icon":"fa fa-fire","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/heat/heat"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"113","parentId":"104","text":"暖费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"heat/heatInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"114","parentId":"104","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"heat/heatUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"115","parentId":"104","text":"暖费生成"},{"attributes":{"icon":"","url":"/heat/heatPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"116","parentId":"104","text":"暖价管理"}],"hasChildren":true,"hasParent":false,"id":"104","parentId":"0","text":"暖费管理"},{"attributes":{"icon":"fa fa-vcard-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-bomb","url":"/print/print"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"149","parentId":"108","text":"票据记录"}],"hasChildren":true,"hasParent":false,"id":"108","parentId":"0","text":"票据管理"},{"attributes":{"icon":"fa fa-bar-chart","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-area-chart","url":"/chart/graph_echarts.html"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","text":"百度chart"},{"attributes":{"icon":"fa fa-sun-o","url":"charts/countDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"109","parentId":"97","text":"日统计报表"},{"attributes":{"icon":"fa fa-registered","url":"charts/countMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"110","parentId":"97","text":"月统计报表"},{"attributes":{"icon":"fa fa-money","url":"charts/countOwe"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"155","parentId":"97","text":"欠费报表图"},{"attributes":{"icon":"fa fa-support","url":"charts/countYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"111","parentId":"97","text":"年统计报表"},{"attributes":{"icon":"fa fa-tachometer","url":"charts/countRun"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"112","parentId":"97","text":"走势图报表"}],"hasChildren":true,"hasParent":false,"id":"97","parentId":"0","text":"统计管理"},{"attributes":{"icon":"fa fa-bars","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-book","url":"/common/dict"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"78","parentId":"1","text":"数据字典"},{"attributes":{"icon":"fa fa-folder-open","url":"/common/sysFile"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"71","parentId":"1","text":"文件管理"}],"h(String), 127.0.0.1(String), 2019-04-03 10:37:23.259(Timestamp)
2019-04-03 10:37:23 -<==    Updates: 1
2019-04-03 10:37:23 -请求地址 : http://localhost:8081/main
2019-04-03 10:37:23 -HTTP METHOD : GET
2019-04-03 10:37:23 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 10:37:23 -参数 : []
2019-04-03 10:37:23 -耗时 : 0
2019-04-03 10:37:23 -返回值 : main
2019-04-03 10:37:24 -请求地址 : http://localhost:8081/oa/notify/message
2019-04-03 10:37:24 -HTTP METHOD : GET
2019-04-03 10:37:24 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2019-04-03 10:37:24 -参数 : []
2019-04-03 10:37:24 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2019-04-03 10:37:24 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2019-04-03 10:37:24 -<==      Total: 0
2019-04-03 10:37:24 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2019-04-03 10:37:24 -==> Parameters: 1(Long), 0(String)
2019-04-03 10:37:24 -<==      Total: 1
2019-04-03 10:37:24 -耗时 : 101
2019-04-03 10:37:24 -返回值 : com.bootdo.common.utils.PageUtils@4555fdc2
2019-04-03 10:37:24 -请求地址 : http://localhost:8081/main
2019-04-03 10:37:24 -HTTP METHOD : GET
2019-04-03 10:37:24 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 10:37:24 -参数 : []
2019-04-03 10:37:24 -耗时 : 1
2019-04-03 10:37:24 -返回值 : main
2019-04-03 10:37:30 -==>  Preparing: select distinct m.perms from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id = ur.role_id where ur.user_id = ? 
2019-04-03 10:37:30 -==> Parameters: 1(Long)
2019-04-03 10:37:30 -<==      Total: 90
2019-04-03 10:37:30 -请求地址 : http://localhost:8081/moneyList/moneyList
2019-04-03 10:37:30 -HTTP METHOD : GET
2019-04-03 10:37:30 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.MoneyList
2019-04-03 10:37:30 -参数 : []
2019-04-03 10:37:30 -耗时 : 0
2019-04-03 10:37:30 -返回值 : /moneyList/moneyList
2019-04-03 10:37:33 -请求地址 : http://localhost:8081/system/sysDept/treeView
2019-04-03 10:37:33 -HTTP METHOD : GET
2019-04-03 10:37:33 -CLASS_METHOD : com.bootdo.system.controller.DeptController.treeView
2019-04-03 10:37:33 -参数 : []
2019-04-03 10:37:33 -耗时 : 1
2019-04-03 10:37:33 -返回值 : system/dept/deptTree
2019-04-03 10:37:34 -请求地址 : http://localhost:8081/system/sysDept/tree
2019-04-03 10:37:34 -HTTP METHOD : GET
2019-04-03 10:37:34 -CLASS_METHOD : com.bootdo.system.controller.DeptController.tree
2019-04-03 10:37:34 -参数 : []
2019-04-03 10:37:34 -==>  Preparing: select `dept_id`,`parent_id`,`name`,`order_num`,`del_flag` from sys_dept order by dept_id desc 
2019-04-03 10:37:34 -==> Parameters: 
2019-04-03 10:37:34 -<==      Total: 3
2019-04-03 10:37:34 -耗时 : 113
2019-04-03 10:37:34 -返回值 : {"checked":false,"children":[{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"3","parentId":"1","state":{"opened":true},"text":"牙星"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"2","parentId":"1","state":{"opened":true},"text":"五九"}],"hasChildren":true,"hasParent":false,"id":"1","parentId":"0","state":{"opened":true},"text":"总公司"}
2019-04-03 10:38:18 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUser
2019-04-03 10:38:18 -HTTP METHOD : POST
2019-04-03 10:38:18 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.queryAllUser
2019-04-03 10:38:18 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@1972fc5d]
2019-04-03 10:38:18 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 10:38:18 -==> Parameters: 1(Long), admin(String), error(String), null, http://localhost:8081/moneyList/moneyList/queryAllUser(String), org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'userOrg' in 'class com.bootdo.moneyList.damain.MoneyListDO'(String), null, 2019-04-03 10:38:18.82(Timestamp)
2019-04-03 10:38:18 -nested exception is org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'userOrg' in 'class com.bootdo.moneyList.damain.MoneyListDO'
org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'userOrg' in 'class com.bootdo.moneyList.damain.MoneyListDO'
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:79)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:447)
	at com.sun.proxy.$Proxy101.selectList(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:231)
	at org.apache.ibatis.binding.MapperMethod.executeForMany(MapperMethod.java:137)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:75)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy128.getAll(Unknown Source)
	at com.bootdo.moneyList.service.impl.MoneyListServiceImpl.getAll(MoneyListServiceImpl.java:21)
	at com.bootdo.moneyList.controller.MoneyListController.queryAllUser(MoneyListController.java:40)
	at com.bootdo.moneyList.controller.MoneyListController$$FastClassBySpringCGLIB$$8f8aea1c.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:204)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:746)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.bootdo.common.aspect.WebLogAspect.doAround(WebLogAspect.java:57)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.bootdo.moneyList.controller.MoneyListController$$EnhancerBySpringCGLIB$$cbb1414c.queryAllUser(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:209)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:877)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:783)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:991)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:925)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:974)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:877)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:661)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:851)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:61)
	at org.apache.shiro.web.servlet.AdviceFilter.executeChain(AdviceFilter.java:108)
	at org.apache.shiro.web.servlet.AdviceFilter.doFilterInternal(AdviceFilter.java:137)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:66)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)
	at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)
	at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)
	at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)
	at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:383)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:109)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:496)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:790)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1468)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Unknown Source)
Caused by: org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'userOrg' in 'class com.bootdo.moneyList.damain.MoneyListDO'
	at org.apache.ibatis.reflection.Reflector.getGetInvoker(Reflector.java:421)
	at org.apache.ibatis.reflection.MetaClass.getGetInvoker(MetaClass.java:164)
	at org.apache.ibatis.reflection.wrapper.BeanWrapper.getBeanProperty(BeanWrapper.java:162)
	at org.apache.ibatis.reflection.wrapper.BeanWrapper.get(BeanWrapper.java:49)
	at org.apache.ibatis.reflection.MetaObject.getValue(MetaObject.java:122)
	at org.apache.ibatis.scripting.xmltags.DynamicContext$ContextMap.get(DynamicContext.java:94)
	at org.apache.ibatis.scripting.xmltags.DynamicContext$ContextAccessor.getProperty(DynamicContext.java:108)
	at org.apache.ibatis.ognl.OgnlRuntime.getProperty(OgnlRuntime.java:2666)
	at org.apache.ibatis.ognl.ASTProperty.getValueBody(ASTProperty.java:114)
	at org.apache.ibatis.ognl.SimpleNode.evaluateGetValueBody(SimpleNode.java:212)
	at org.apache.ibatis.ognl.SimpleNode.getValue(SimpleNode.java:258)
	at org.apache.ibatis.ognl.ASTNotEq.getValueBody(ASTNotEq.java:50)
	at org.apache.ibatis.ognl.SimpleNode.evaluateGetValueBody(SimpleNode.java:212)
	at org.apache.ibatis.ognl.SimpleNode.getValue(SimpleNode.java:258)
	at org.apache.ibatis.ognl.ASTAnd.getValueBody(ASTAnd.java:61)
	at org.apache.ibatis.ognl.SimpleNode.evaluateGetValueBody(SimpleNode.java:212)
	at org.apache.ibatis.ognl.SimpleNode.getValue(SimpleNode.java:258)
	at org.apache.ibatis.ognl.Ognl.getValue(Ognl.java:470)
	at org.apache.ibatis.ognl.Ognl.getValue(Ognl.java:434)
	at org.apache.ibatis.scripting.xmltags.OgnlCache.getValue(OgnlCache.java:44)
	at org.apache.ibatis.scripting.xmltags.ExpressionEvaluator.evaluateBoolean(ExpressionEvaluator.java:32)
	at org.apache.ibatis.scripting.xmltags.IfSqlNode.apply(IfSqlNode.java:34)
	at org.apache.ibatis.scripting.xmltags.MixedSqlNode.apply(MixedSqlNode.java:33)
	at org.apache.ibatis.scripting.xmltags.TrimSqlNode.apply(TrimSqlNode.java:55)
	at org.apache.ibatis.scripting.xmltags.MixedSqlNode.apply(MixedSqlNode.java:33)
	at org.apache.ibatis.scripting.xmltags.DynamicSqlSource.getBoundSql(DynamicSqlSource.java:41)
	at org.apache.ibatis.mapping.MappedStatement.getBoundSql(MappedStatement.java:292)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:81)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:148)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:141)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:434)
	... 101 common frames omitted
2019-04-03 10:38:18 -<==    Updates: 1
2019-04-03 10:38:19 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUser
2019-04-03 10:38:19 -HTTP METHOD : POST
2019-04-03 10:38:19 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.queryAllUser
2019-04-03 10:38:19 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@6fdcc518]
2019-04-03 10:38:19 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 10:38:19 -==> Parameters: 1(Long), admin(String), error(String), null, http://localhost:8081/moneyList/moneyList/queryAllUser(String), org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'userOrg' in 'class com.bootdo.moneyList.damain.MoneyListDO'(String), null, 2019-04-03 10:38:19.94(Timestamp)
2019-04-03 10:38:19 -nested exception is org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'userOrg' in 'class com.bootdo.moneyList.damain.MoneyListDO'
org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'userOrg' in 'class com.bootdo.moneyList.damain.MoneyListDO'
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:79)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:447)
	at com.sun.proxy.$Proxy101.selectList(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:231)
	at org.apache.ibatis.binding.MapperMethod.executeForMany(MapperMethod.java:137)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:75)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy128.getAll(Unknown Source)
	at com.bootdo.moneyList.service.impl.MoneyListServiceImpl.getAll(MoneyListServiceImpl.java:21)
	at com.bootdo.moneyList.controller.MoneyListController.queryAllUser(MoneyListController.java:40)
	at com.bootdo.moneyList.controller.MoneyListController$$FastClassBySpringCGLIB$$8f8aea1c.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:204)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:746)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.bootdo.common.aspect.WebLogAspect.doAround(WebLogAspect.java:57)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.bootdo.moneyList.controller.MoneyListController$$EnhancerBySpringCGLIB$$cbb1414c.queryAllUser(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:209)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:877)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:783)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:991)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:925)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:974)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:877)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:661)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:851)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:61)
	at org.apache.shiro.web.servlet.AdviceFilter.executeChain(AdviceFilter.java:108)
	at org.apache.shiro.web.servlet.AdviceFilter.doFilterInternal(AdviceFilter.java:137)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:66)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)
	at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)
	at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)
	at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)
	at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:383)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:109)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:496)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:790)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1468)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Unknown Source)
Caused by: org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'userOrg' in 'class com.bootdo.moneyList.damain.MoneyListDO'
	at org.apache.ibatis.reflection.Reflector.getGetInvoker(Reflector.java:421)
	at org.apache.ibatis.reflection.MetaClass.getGetInvoker(MetaClass.java:164)
	at org.apache.ibatis.reflection.wrapper.BeanWrapper.getBeanProperty(BeanWrapper.java:162)
	at org.apache.ibatis.reflection.wrapper.BeanWrapper.get(BeanWrapper.java:49)
	at org.apache.ibatis.reflection.MetaObject.getValue(MetaObject.java:122)
	at org.apache.ibatis.scripting.xmltags.DynamicContext$ContextMap.get(DynamicContext.java:94)
	at org.apache.ibatis.scripting.xmltags.DynamicContext$ContextAccessor.getProperty(DynamicContext.java:108)
	at org.apache.ibatis.ognl.OgnlRuntime.getProperty(OgnlRuntime.java:2666)
	at org.apache.ibatis.ognl.ASTProperty.getValueBody(ASTProperty.java:114)
	at org.apache.ibatis.ognl.SimpleNode.evaluateGetValueBody(SimpleNode.java:212)
	at org.apache.ibatis.ognl.SimpleNode.getValue(SimpleNode.java:258)
	at org.apache.ibatis.ognl.ASTNotEq.getValueBody(ASTNotEq.java:50)
	at org.apache.ibatis.ognl.SimpleNode.evaluateGetValueBody(SimpleNode.java:212)
	at org.apache.ibatis.ognl.SimpleNode.getValue(SimpleNode.java:258)
	at org.apache.ibatis.ognl.ASTAnd.getValueBody(ASTAnd.java:61)
	at org.apache.ibatis.ognl.SimpleNode.evaluateGetValueBody(SimpleNode.java:212)
	at org.apache.ibatis.ognl.SimpleNode.getValue(SimpleNode.java:258)
	at org.apache.ibatis.ognl.Ognl.getValue(Ognl.java:470)
	at org.apache.ibatis.ognl.Ognl.getValue(Ognl.java:434)
	at org.apache.ibatis.scripting.xmltags.OgnlCache.getValue(OgnlCache.java:44)
	at org.apache.ibatis.scripting.xmltags.ExpressionEvaluator.evaluateBoolean(ExpressionEvaluator.java:32)
	at org.apache.ibatis.scripting.xmltags.IfSqlNode.apply(IfSqlNode.java:34)
	at org.apache.ibatis.scripting.xmltags.MixedSqlNode.apply(MixedSqlNode.java:33)
	at org.apache.ibatis.scripting.xmltags.TrimSqlNode.apply(TrimSqlNode.java:55)
	at org.apache.ibatis.scripting.xmltags.MixedSqlNode.apply(MixedSqlNode.java:33)
	at org.apache.ibatis.scripting.xmltags.DynamicSqlSource.getBoundSql(DynamicSqlSource.java:41)
	at org.apache.ibatis.mapping.MappedStatement.getBoundSql(MappedStatement.java:292)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:81)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:148)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:141)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:434)
	... 101 common frames omitted
2019-04-03 10:38:20 -<==    Updates: 1
2019-04-03 10:38:20 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUser
2019-04-03 10:38:20 -HTTP METHOD : POST
2019-04-03 10:38:20 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.queryAllUser
2019-04-03 10:38:20 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@6149f6ef]
2019-04-03 10:38:20 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 10:38:20 -==> Parameters: 1(Long), admin(String), error(String), null, http://localhost:8081/moneyList/moneyList/queryAllUser(String), org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'userOrg' in 'class com.bootdo.moneyList.damain.MoneyListDO'(String), null, 2019-04-03 10:38:20.861(Timestamp)
2019-04-03 10:38:20 -nested exception is org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'userOrg' in 'class com.bootdo.moneyList.damain.MoneyListDO'
org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'userOrg' in 'class com.bootdo.moneyList.damain.MoneyListDO'
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:79)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:447)
	at com.sun.proxy.$Proxy101.selectList(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:231)
	at org.apache.ibatis.binding.MapperMethod.executeForMany(MapperMethod.java:137)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:75)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy128.getAll(Unknown Source)
	at com.bootdo.moneyList.service.impl.MoneyListServiceImpl.getAll(MoneyListServiceImpl.java:21)
	at com.bootdo.moneyList.controller.MoneyListController.queryAllUser(MoneyListController.java:40)
	at com.bootdo.moneyList.controller.MoneyListController$$FastClassBySpringCGLIB$$8f8aea1c.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:204)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:746)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.bootdo.common.aspect.WebLogAspect.doAround(WebLogAspect.java:57)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.bootdo.moneyList.controller.MoneyListController$$EnhancerBySpringCGLIB$$cbb1414c.queryAllUser(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:209)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:877)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:783)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:991)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:925)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:974)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:877)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:661)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:851)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:61)
	at org.apache.shiro.web.servlet.AdviceFilter.executeChain(AdviceFilter.java:108)
	at org.apache.shiro.web.servlet.AdviceFilter.doFilterInternal(AdviceFilter.java:137)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:66)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)
	at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)
	at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)
	at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)
	at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:383)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:109)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:496)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:790)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1468)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Unknown Source)
Caused by: org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'userOrg' in 'class com.bootdo.moneyList.damain.MoneyListDO'
	at org.apache.ibatis.reflection.Reflector.getGetInvoker(Reflector.java:421)
	at org.apache.ibatis.reflection.MetaClass.getGetInvoker(MetaClass.java:164)
	at org.apache.ibatis.reflection.wrapper.BeanWrapper.getBeanProperty(BeanWrapper.java:162)
	at org.apache.ibatis.reflection.wrapper.BeanWrapper.get(BeanWrapper.java:49)
	at org.apache.ibatis.reflection.MetaObject.getValue(MetaObject.java:122)
	at org.apache.ibatis.scripting.xmltags.DynamicContext$ContextMap.get(DynamicContext.java:94)
	at org.apache.ibatis.scripting.xmltags.DynamicContext$ContextAccessor.getProperty(DynamicContext.java:108)
	at org.apache.ibatis.ognl.OgnlRuntime.getProperty(OgnlRuntime.java:2666)
	at org.apache.ibatis.ognl.ASTProperty.getValueBody(ASTProperty.java:114)
	at org.apache.ibatis.ognl.SimpleNode.evaluateGetValueBody(SimpleNode.java:212)
	at org.apache.ibatis.ognl.SimpleNode.getValue(SimpleNode.java:258)
	at org.apache.ibatis.ognl.ASTNotEq.getValueBody(ASTNotEq.java:50)
	at org.apache.ibatis.ognl.SimpleNode.evaluateGetValueBody(SimpleNode.java:212)
	at org.apache.ibatis.ognl.SimpleNode.getValue(SimpleNode.java:258)
	at org.apache.ibatis.ognl.ASTAnd.getValueBody(ASTAnd.java:61)
	at org.apache.ibatis.ognl.SimpleNode.evaluateGetValueBody(SimpleNode.java:212)
	at org.apache.ibatis.ognl.SimpleNode.getValue(SimpleNode.java:258)
	at org.apache.ibatis.ognl.Ognl.getValue(Ognl.java:470)
	at org.apache.ibatis.ognl.Ognl.getValue(Ognl.java:434)
	at org.apache.ibatis.scripting.xmltags.OgnlCache.getValue(OgnlCache.java:44)
	at org.apache.ibatis.scripting.xmltags.ExpressionEvaluator.evaluateBoolean(ExpressionEvaluator.java:32)
	at org.apache.ibatis.scripting.xmltags.IfSqlNode.apply(IfSqlNode.java:34)
	at org.apache.ibatis.scripting.xmltags.MixedSqlNode.apply(MixedSqlNode.java:33)
	at org.apache.ibatis.scripting.xmltags.TrimSqlNode.apply(TrimSqlNode.java:55)
	at org.apache.ibatis.scripting.xmltags.MixedSqlNode.apply(MixedSqlNode.java:33)
	at org.apache.ibatis.scripting.xmltags.DynamicSqlSource.getBoundSql(DynamicSqlSource.java:41)
	at org.apache.ibatis.mapping.MappedStatement.getBoundSql(MappedStatement.java:292)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:81)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:148)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:141)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:434)
	... 101 common frames omitted
2019-04-03 10:38:20 -<==    Updates: 1
2019-04-03 10:38:21 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUser
2019-04-03 10:38:21 -HTTP METHOD : POST
2019-04-03 10:38:21 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.queryAllUser
2019-04-03 10:38:21 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@6e6063c9]
2019-04-03 10:38:21 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 10:38:21 -==> Parameters: 1(Long), admin(String), error(String), null, http://localhost:8081/moneyList/moneyList/queryAllUser(String), org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'userOrg' in 'class com.bootdo.moneyList.damain.MoneyListDO'(String), null, 2019-04-03 10:38:21.123(Timestamp)
2019-04-03 10:38:21 -nested exception is org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'userOrg' in 'class com.bootdo.moneyList.damain.MoneyListDO'
org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'userOrg' in 'class com.bootdo.moneyList.damain.MoneyListDO'
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:79)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:447)
	at com.sun.proxy.$Proxy101.selectList(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:231)
	at org.apache.ibatis.binding.MapperMethod.executeForMany(MapperMethod.java:137)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:75)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy128.getAll(Unknown Source)
	at com.bootdo.moneyList.service.impl.MoneyListServiceImpl.getAll(MoneyListServiceImpl.java:21)
	at com.bootdo.moneyList.controller.MoneyListController.queryAllUser(MoneyListController.java:40)
	at com.bootdo.moneyList.controller.MoneyListController$$FastClassBySpringCGLIB$$8f8aea1c.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:204)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:746)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.bootdo.common.aspect.WebLogAspect.doAround(WebLogAspect.java:57)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.bootdo.moneyList.controller.MoneyListController$$EnhancerBySpringCGLIB$$cbb1414c.queryAllUser(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:209)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:877)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:783)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:991)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:925)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:974)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:877)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:661)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:851)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:61)
	at org.apache.shiro.web.servlet.AdviceFilter.executeChain(AdviceFilter.java:108)
	at org.apache.shiro.web.servlet.AdviceFilter.doFilterInternal(AdviceFilter.java:137)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:66)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)
	at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)
	at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)
	at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)
	at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:383)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:109)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:496)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:790)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1468)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Unknown Source)
Caused by: org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'userOrg' in 'class com.bootdo.moneyList.damain.MoneyListDO'
	at org.apache.ibatis.reflection.Reflector.getGetInvoker(Reflector.java:421)
	at org.apache.ibatis.reflection.MetaClass.getGetInvoker(MetaClass.java:164)
	at org.apache.ibatis.reflection.wrapper.BeanWrapper.getBeanProperty(BeanWrapper.java:162)
	at org.apache.ibatis.reflection.wrapper.BeanWrapper.get(BeanWrapper.java:49)
	at org.apache.ibatis.reflection.MetaObject.getValue(MetaObject.java:122)
	at org.apache.ibatis.scripting.xmltags.DynamicContext$ContextMap.get(DynamicContext.java:94)
	at org.apache.ibatis.scripting.xmltags.DynamicContext$ContextAccessor.getProperty(DynamicContext.java:108)
	at org.apache.ibatis.ognl.OgnlRuntime.getProperty(OgnlRuntime.java:2666)
	at org.apache.ibatis.ognl.ASTProperty.getValueBody(ASTProperty.java:114)
	at org.apache.ibatis.ognl.SimpleNode.evaluateGetValueBody(SimpleNode.java:212)
	at org.apache.ibatis.ognl.SimpleNode.getValue(SimpleNode.java:258)
	at org.apache.ibatis.ognl.ASTNotEq.getValueBody(ASTNotEq.java:50)
	at org.apache.ibatis.ognl.SimpleNode.evaluateGetValueBody(SimpleNode.java:212)
	at org.apache.ibatis.ognl.SimpleNode.getValue(SimpleNode.java:258)
	at org.apache.ibatis.ognl.ASTAnd.getValueBody(ASTAnd.java:61)
	at org.apache.ibatis.ognl.SimpleNode.evaluateGetValueBody(SimpleNode.java:212)
	at org.apache.ibatis.ognl.SimpleNode.getValue(SimpleNode.java:258)
	at org.apache.ibatis.ognl.Ognl.getValue(Ognl.java:470)
	at org.apache.ibatis.ognl.Ognl.getValue(Ognl.java:434)
	at org.apache.ibatis.scripting.xmltags.OgnlCache.getValue(OgnlCache.java:44)
	at org.apache.ibatis.scripting.xmltags.ExpressionEvaluator.evaluateBoolean(ExpressionEvaluator.java:32)
	at org.apache.ibatis.scripting.xmltags.IfSqlNode.apply(IfSqlNode.java:34)
	at org.apache.ibatis.scripting.xmltags.MixedSqlNode.apply(MixedSqlNode.java:33)
	at org.apache.ibatis.scripting.xmltags.TrimSqlNode.apply(TrimSqlNode.java:55)
	at org.apache.ibatis.scripting.xmltags.MixedSqlNode.apply(MixedSqlNode.java:33)
	at org.apache.ibatis.scripting.xmltags.DynamicSqlSource.getBoundSql(DynamicSqlSource.java:41)
	at org.apache.ibatis.mapping.MappedStatement.getBoundSql(MappedStatement.java:292)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:81)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:148)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:141)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:434)
	... 101 common frames omitted
2019-04-03 10:38:21 -<==    Updates: 1
2019-04-03 10:38:21 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUser
2019-04-03 10:38:21 -HTTP METHOD : POST
2019-04-03 10:38:21 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.queryAllUser
2019-04-03 10:38:21 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@76534b3c]
2019-04-03 10:38:21 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 10:38:21 -nested exception is org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'userOrg' in 'class com.bootdo.moneyList.damain.MoneyListDO'
org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'userOrg' in 'class com.bootdo.moneyList.damain.MoneyListDO'
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:79)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:447)
	at com.sun.proxy.$Proxy101.selectList(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:231)
	at org.apache.ibatis.binding.MapperMethod.executeForMany(MapperMethod.java:137)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:75)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy128.getAll(Unknown Source)
	at com.bootdo.moneyList.service.impl.MoneyListServiceImpl.getAll(MoneyListServiceImpl.java:21)
	at com.bootdo.moneyList.controller.MoneyListController.queryAllUser(MoneyListController.java:40)
	at com.bootdo.moneyList.controller.MoneyListController$$FastClassBySpringCGLIB$$8f8aea1c.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:204)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:746)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.bootdo.common.aspect.WebLogAspect.doAround(WebLogAspect.java:57)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.bootdo.moneyList.controller.MoneyListController$$EnhancerBySpringCGLIB$$cbb1414c.queryAllUser(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:209)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:877)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:783)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:991)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:925)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:974)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:877)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:661)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:851)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:61)
	at org.apache.shiro.web.servlet.AdviceFilter.executeChain(AdviceFilter.java:108)
	at org.apache.shiro.web.servlet.AdviceFilter.doFilterInternal(AdviceFilter.java:137)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:66)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)
	at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)
	at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)
	at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)
	at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:383)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:109)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:496)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:790)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1468)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Unknown Source)
Caused by: org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'userOrg' in 'class com.bootdo.moneyList.damain.MoneyListDO'
	at org.apache.ibatis.reflection.Reflector.getGetInvoker(Reflector.java:421)
	at org.apache.ibatis.reflection.MetaClass.getGetInvoker(MetaClass.java:164)
	at org.apache.ibatis.reflection.wrapper.BeanWrapper.getBeanProperty(BeanWrapper.java:162)
	at org.apache.ibatis.reflection.wrapper.BeanWrapper.get(BeanWrapper.java:49)
	at org.apache.ibatis.reflection.MetaObject.getValue(MetaObject.java:122)
	at org.apache.ibatis.scripting.xmltags.DynamicContext$ContextMap.get(DynamicContext.java:94)
	at org.apache.ibatis.scripting.xmltags.DynamicContext$ContextAccessor.getProperty(DynamicContext.java:108)
	at org.apache.ibatis.ognl.OgnlRuntime.getProperty(OgnlRuntime.java:2666)
	at org.apache.ibatis.ognl.ASTProperty.getValueBody(ASTProperty.java:114)
	at org.apache.ibatis.ognl.SimpleNode.evaluateGetValueBody(SimpleNode.java:212)
	at org.apache.ibatis.ognl.SimpleNode.getValue(SimpleNode.java:258)
	at org.apache.ibatis.ognl.ASTNotEq.getValueBody(ASTNotEq.java:50)
	at org.apache.ibatis.ognl.SimpleNode.evaluateGetValueBody(SimpleNode.java:212)
	at org.apache.ibatis.ognl.SimpleNode.getValue(SimpleNode.java:258)
	at org.apache.ibatis.ognl.ASTAnd.getValueBody(ASTAnd.java:61)
	at org.apache.ibatis.ognl.SimpleNode.evaluateGetValueBody(SimpleNode.java:212)
	at org.apache.ibatis.ognl.SimpleNode.getValue(SimpleNode.java:258)
	at org.apache.ibatis.ognl.Ognl.getValue(Ognl.java:470)
	at org.apache.ibatis.ognl.Ognl.getValue(Ognl.java:434)
	at org.apache.ibatis.scripting.xmltags.OgnlCache.getValue(OgnlCache.java:44)
	at org.apache.ibatis.scripting.xmltags.ExpressionEvaluator.evaluateBoolean(ExpressionEvaluator.java:32)
	at org.apache.ibatis.scripting.xmltags.IfSqlNode.apply(IfSqlNode.java:34)
	at org.apache.ibatis.scripting.xmltags.MixedSqlNode.apply(MixedSqlNode.java:33)
	at org.apache.ibatis.scripting.xmltags.TrimSqlNode.apply(TrimSqlNode.java:55)
	at org.apache.ibatis.scripting.xmltags.MixedSqlNode.apply(MixedSqlNode.java:33)
	at org.apache.ibatis.scripting.xmltags.DynamicSqlSource.getBoundSql(DynamicSqlSource.java:41)
	at org.apache.ibatis.mapping.MappedStatement.getBoundSql(MappedStatement.java:292)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:81)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:148)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:141)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:434)
	... 101 common frames omitted
2019-04-03 10:38:21 -==> Parameters: 1(Long), admin(String), error(String), null, http://localhost:8081/moneyList/moneyList/queryAllUser(String), org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'userOrg' in 'class com.bootdo.moneyList.damain.MoneyListDO'(String), null, 2019-04-03 10:38:21.896(Timestamp)
2019-04-03 10:38:22 -<==    Updates: 1
2019-04-03 10:38:22 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUser
2019-04-03 10:38:22 -HTTP METHOD : POST
2019-04-03 10:38:22 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.queryAllUser
2019-04-03 10:38:22 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@66e87661]
2019-04-03 10:38:22 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 10:38:22 -nested exception is org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'userOrg' in 'class com.bootdo.moneyList.damain.MoneyListDO'
org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'userOrg' in 'class com.bootdo.moneyList.damain.MoneyListDO'
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:79)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:447)
	at com.sun.proxy.$Proxy101.selectList(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:231)
	at org.apache.ibatis.binding.MapperMethod.executeForMany(MapperMethod.java:137)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:75)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy128.getAll(Unknown Source)
	at com.bootdo.moneyList.service.impl.MoneyListServiceImpl.getAll(MoneyListServiceImpl.java:21)
	at com.bootdo.moneyList.controller.MoneyListController.queryAllUser(MoneyListController.java:40)
	at com.bootdo.moneyList.controller.MoneyListController$$FastClassBySpringCGLIB$$8f8aea1c.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:204)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:746)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.bootdo.common.aspect.WebLogAspect.doAround(WebLogAspect.java:57)
	at sun.reflect.GeneratedMethodAccessor125.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.bootdo.moneyList.controller.MoneyListController$$EnhancerBySpringCGLIB$$cbb1414c.queryAllUser(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:209)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:877)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:783)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:991)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:925)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:974)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:877)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:661)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:851)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:61)
	at org.apache.shiro.web.servlet.AdviceFilter.executeChain(AdviceFilter.java:108)
	at org.apache.shiro.web.servlet.AdviceFilter.doFilterInternal(AdviceFilter.java:137)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:66)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)
	at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)
	at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)
	at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)
	at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:383)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:109)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:496)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:790)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1468)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Unknown Source)
Caused by: org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'userOrg' in 'class com.bootdo.moneyList.damain.MoneyListDO'
	at org.apache.ibatis.reflection.Reflector.getGetInvoker(Reflector.java:421)
	at org.apache.ibatis.reflection.MetaClass.getGetInvoker(MetaClass.java:164)
	at org.apache.ibatis.reflection.wrapper.BeanWrapper.getBeanProperty(BeanWrapper.java:162)
	at org.apache.ibatis.reflection.wrapper.BeanWrapper.get(BeanWrapper.java:49)
	at org.apache.ibatis.reflection.MetaObject.getValue(MetaObject.java:122)
	at org.apache.ibatis.scripting.xmltags.DynamicContext$ContextMap.get(DynamicContext.java:94)
	at org.apache.ibatis.scripting.xmltags.DynamicContext$ContextAccessor.getProperty(DynamicContext.java:108)
	at org.apache.ibatis.ognl.OgnlRuntime.getProperty(OgnlRuntime.java:2666)
	at org.apache.ibatis.ognl.ASTProperty.getValueBody(ASTProperty.java:114)
	at org.apache.ibatis.ognl.SimpleNode.evaluateGetValueBody(SimpleNode.java:212)
	at org.apache.ibatis.ognl.SimpleNode.getValue(SimpleNode.java:258)
	at org.apache.ibatis.ognl.ASTNotEq.getValueBody(ASTNotEq.java:50)
	at org.apache.ibatis.ognl.SimpleNode.evaluateGetValueBody(SimpleNode.java:212)
	at org.apache.ibatis.ognl.SimpleNode.getValue(SimpleNode.java:258)
	at org.apache.ibatis.ognl.ASTAnd.getValueBody(ASTAnd.java:61)
	at org.apache.ibatis.ognl.SimpleNode.evaluateGetValueBody(SimpleNode.java:212)
	at org.apache.ibatis.ognl.SimpleNode.getValue(SimpleNode.java:258)
	at org.apache.ibatis.ognl.Ognl.getValue(Ognl.java:470)
	at org.apache.ibatis.ognl.Ognl.getValue(Ognl.java:434)
	at org.apache.ibatis.scripting.xmltags.OgnlCache.getValue(OgnlCache.java:44)
	at org.apache.ibatis.scripting.xmltags.ExpressionEvaluator.evaluateBoolean(ExpressionEvaluator.java:32)
	at org.apache.ibatis.scripting.xmltags.IfSqlNode.apply(IfSqlNode.java:34)
	at org.apache.ibatis.scripting.xmltags.MixedSqlNode.apply(MixedSqlNode.java:33)
	at org.apache.ibatis.scripting.xmltags.TrimSqlNode.apply(TrimSqlNode.java:55)
	at org.apache.ibatis.scripting.xmltags.MixedSqlNode.apply(MixedSqlNode.java:33)
	at org.apache.ibatis.scripting.xmltags.DynamicSqlSource.getBoundSql(DynamicSqlSource.java:41)
	at org.apache.ibatis.mapping.MappedStatement.getBoundSql(MappedStatement.java:292)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:81)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:148)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:141)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:434)
	... 100 common frames omitted
2019-04-03 10:38:22 -==> Parameters: 1(Long), admin(String), error(String), null, http://localhost:8081/moneyList/moneyList/queryAllUser(String), org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'userOrg' in 'class com.bootdo.moneyList.damain.MoneyListDO'(String), null, 2019-04-03 10:38:22.133(Timestamp)
2019-04-03 10:38:22 -<==    Updates: 1
2019-04-03 10:43:11 -Starting BootdoApplication on ZJZL-20180906VX with PID 11180 (D:\eclipse2018-work\bootdo\target\classes started by Administrator in D:\eclipse2018-work\bootdo)
2019-04-03 10:43:11 -Running with Spring Boot v2.0.3.RELEASE, Spring v5.0.7.RELEASE
2019-04-03 10:43:11 -The following profiles are active: dev
2019-04-03 10:43:11 -Refreshing org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@a38c7fe: startup date [Wed Apr 03 10:43:11 CST 2019]; root of context hierarchy
2019-04-03 10:43:14 -Multiple Spring Data modules found, entering strict repository configuration mode!
2019-04-03 10:43:16 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$fba0e363] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-03 10:43:16 -Bean 'shiroConfig' of type [com.bootdo.system.config.ShiroConfig$$EnhancerBySpringCGLIB$$edfa120a] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-03 10:43:17 -Bean 'userRealm' of type [com.bootdo.system.shiro.UserRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-03 10:43:18 -Bean 'cacheManager2' of type [net.sf.ehcache.CacheManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-03 10:43:18 -Bean 'ehCacheManager' of type [org.apache.shiro.cache.ehcache.EhCacheManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-03 10:43:18 -Cache with name 'com.bootdo.system.shiro.UserRealm.authorizationCache' does not yet exist.  Creating now.
2019-04-03 10:43:18 -Added EhCache named [com.bootdo.system.shiro.UserRealm.authorizationCache]
2019-04-03 10:43:18 -Bean 'sessionDAO' of type [org.apache.shiro.session.mgt.eis.MemorySessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-03 10:43:18 -Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-03 10:43:18 -Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-03 10:43:18 -Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-03 10:43:19 -Tomcat initialized with port(s): 8081 (http)
2019-04-03 10:43:19 -Initializing ProtocolHandler ["http-nio-8081"]
2019-04-03 10:43:19 -Starting service [Tomcat]
2019-04-03 10:43:19 -Starting Servlet Engine: Apache Tomcat/8.5.31
2019-04-03 10:43:19 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [C:\Program Files\Java\jre1.8.0_131\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:/Program Files/Java/jre1.8.0_131/bin/server;C:/Program Files/Java/jre1.8.0_131/bin;C:/Program Files/Java/jre1.8.0_131/lib/amd64;C:\ProgramData\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Windows\System32\OpenSSH\;D:\pbb\pycSafefile\x64;D:\pbb\PBB Reader\x64;C:\Program Files\MySQL\MySQL Utilities 1.6\;D:\MAVEN\apache-maven-3.6.0\bin;D:\GIT\Git\cmd;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;;C:\Users\Administrator\Desktop;;.]
2019-04-03 10:43:20 -Initializing Spring embedded WebApplicationContext
2019-04-03 10:43:20 -Root WebApplicationContext: initialization completed in 8345 ms
2019-04-03 10:43:20 -Mapping filter: 'characterEncodingFilter' to: [/*]
2019-04-03 10:43:20 -Mapping filter: 'hiddenHttpMethodFilter' to: [/*]
2019-04-03 10:43:20 -Mapping filter: 'httpPutFormContentFilter' to: [/*]
2019-04-03 10:43:20 -Mapping filter: 'requestContextFilter' to: [/*]
2019-04-03 10:43:20 -Filter xssFilter was not registered (disabled)
2019-04-03 10:43:20 -Mapping filter: 'webStatFilter' to urls: [/*]
2019-04-03 10:43:20 -Mapping filter: 'shiroFilterFactoryBean' to: [/*]
2019-04-03 10:43:20 -Servlet statViewServlet mapped to [/druid/*]
2019-04-03 10:43:20 -Servlet dispatcherServlet mapped to [/]
2019-04-03 10:43:23 -ApplicationContext registed-->org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@a38c7fe: startup date [Wed Apr 03 10:43:11 CST 2019]; root of context hierarchy
2019-04-03 10:43:23 -Using default implementation for ThreadExecutor
2019-04-03 10:43:23 -Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2019-04-03 10:43:23 -Quartz Scheduler v.2.2.1 created.
2019-04-03 10:43:23 -RAMJobStore initialized.
2019-04-03 10:43:24 -Scheduler meta-data: Quartz Scheduler (v2.2.1) 'schedulerFactoryBean' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2019-04-03 10:43:24 -Quartz scheduler 'schedulerFactoryBean' initialized from an externally provided properties instance.
2019-04-03 10:43:24 -Quartz scheduler version: 2.2.1
2019-04-03 10:43:24 -JobFactory set to: com.bootdo.common.quartz.factory.JobFactory@1883871b
2019-04-03 10:43:24 -Initializing ExecutorService  'clientInboundChannelExecutor'
2019-04-03 10:43:24 -Initializing ExecutorService  'clientOutboundChannelExecutor'
2019-04-03 10:43:26 -Mapped "{[/charts/countDD/exportCountDD],methods=[GET]}" onto public void com.bootdo.charts.controller.countDDController.exprotElecLog(com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-03 10:43:26 -Mapped "{[/charts/countDD],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.countDDController.countDD()
2019-04-03 10:43:26 -Mapped "{[/charts/countDD/getCountDD],methods=[POST]}" onto public com.bootdo.charts.vo.CountDayVo com.bootdo.charts.controller.countDDController.getCountD(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo,javax.servlet.http.HttpServletRequest)
2019-04-03 10:43:26 -Mapped "{[/charts/countDD/tableDD],methods=[POST]}" onto public java.lang.String com.bootdo.charts.controller.countDDController.tableDD()
2019-04-03 10:43:26 -Mapped "{[/charts/countMM/exportCountMM],methods=[GET]}" onto public void com.bootdo.charts.controller.countMMController.exprotElecLog(com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-03 10:43:26 -Mapped "{[/charts/countMM],methods=[GET]}" onto java.lang.String com.bootdo.charts.controller.countMMController.countMM()
2019-04-03 10:43:26 -Mapped "{[/charts/countMM/getCountMM],methods=[POST]}" onto public void com.bootdo.charts.controller.countMMController.getCountMM(org.springframework.ui.Model,com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo,javax.servlet.http.HttpServletRequest)
2019-04-03 10:43:26 -Mapped "{[/charts/countOwe/getCountOwe],methods=[POST]}" onto public com.bootdo.charts.vo.CountOweVo com.bootdo.charts.controller.countOweController.getCountD(com.bootdo.elec.vo.ElecVo,com.bootdo.water.vo.WaterVo,com.bootdo.heat.vo.HeatVo,javax.servlet.http.HttpServletRequest)
2019-04-03 10:43:26 -Mapped "{[/charts/countOwe],methods=[GET]}" onto java.lang.String com.bootdo.charts.controller.countOweController.countOwe()
2019-04-03 10:43:26 -Mapped "{[/charts/countRun/exportCountRun],methods=[GET]}" onto public void com.bootdo.charts.controller.countRunController.exprotElecLog(com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-03 10:43:26 -Mapped "{[/charts/countRun/getCountRun],methods=[POST]}" onto public int com.bootdo.charts.controller.countRunController.getCountD(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo)
2019-04-03 10:43:26 -Mapped "{[/charts/countRun],methods=[GET]}" onto java.lang.String com.bootdo.charts.controller.countRunController.countRun()
2019-04-03 10:43:26 -Mapped "{[/charts/countYY],methods=[GET]}" onto java.lang.String com.bootdo.charts.controller.countYYController.countYY()
2019-04-03 10:43:26 -Mapped "{[/charts/countYY/exportCountYY],methods=[GET]}" onto public void com.bootdo.charts.controller.countYYController.exprotElecLog(com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-03 10:43:26 -Mapped "{[/charts/countYY/getCountYY],methods=[POST]}" onto public int com.bootdo.charts.controller.countYYController.getCountD(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo)
2019-04-03 10:43:26 -Mapped "{[/common/dict/add],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.add()
2019-04-03 10:43:26 -Mapped "{[/common/dict/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.remove(java.lang.Long)
2019-04-03 10:43:26 -Mapped "{[/common/dict/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.remove(java.lang.Long[])
2019-04-03 10:43:26 -Mapped "{[/common/dict/update]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.update(com.bootdo.common.domain.DictDO)
2019-04-03 10:43:26 -Mapped "{[/common/dict/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.common.controller.DictController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 10:43:26 -Mapped "{[/common/dict/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.save(com.bootdo.common.domain.DictDO)
2019-04-03 10:43:26 -Mapped "{[/common/dict/type],methods=[GET]}" onto public java.util.List<com.bootdo.common.domain.DictDO> com.bootdo.common.controller.DictController.listType()
2019-04-03 10:43:26 -Mapped "{[/common/dict],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.dict()
2019-04-03 10:43:26 -Mapped "{[/common/dict/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 10:43:26 -Mapped "{[/common/dict/add/{type}/{description}],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.addD(org.springframework.ui.Model,java.lang.String,java.lang.String)
2019-04-03 10:43:26 -Mapped "{[/common/dict/list/{type}],methods=[GET]}" onto public java.util.List<com.bootdo.common.domain.DictDO> com.bootdo.common.controller.DictController.listByType(java.lang.String)
2019-04-03 10:43:26 -Mapped "{[/common/sysFile/add],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.FileController.add()
2019-04-03 10:43:26 -Mapped "{[/common/sysFile/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.remove(java.lang.Long,javax.servlet.http.HttpServletRequest)
2019-04-03 10:43:26 -Mapped "{[/common/sysFile/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.remove(java.lang.Long[])
2019-04-03 10:43:26 -Mapped "{[/common/sysFile/update]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.update(com.bootdo.common.domain.FileDO)
2019-04-03 10:43:26 -Mapped "{[/common/sysFile/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.common.controller.FileController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 10:43:26 -Mapped "{[/common/sysFile/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.save(com.bootdo.common.domain.FileDO)
2019-04-03 10:43:26 -Mapped "{[/common/sysFile/info/{id}]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.info(java.lang.Long)
2019-04-03 10:43:26 -Mapped "{[/common/sysFile/edit],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.FileController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 10:43:26 -Mapped "{[/common/sysFile/upload],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.FileController.upload(org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpServletRequest)
2019-04-03 10:43:26 -Mapped "{[/common/sysFile],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.FileController.sysFile(org.springframework.ui.Model)
2019-04-03 10:43:26 -Mapped "{[/common/generator/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.GeneratorController.update(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 10:43:26 -Mapped "{[/common/generator/list],methods=[GET]}" onto java.util.List<java.util.Map<java.lang.String, java.lang.Object>> com.bootdo.common.controller.GeneratorController.list()
2019-04-03 10:43:26 -Mapped "{[/common/generator/code/{tableName}]}" onto public void com.bootdo.common.controller.GeneratorController.code(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String) throws java.io.IOException
2019-04-03 10:43:26 -Mapped "{[/common/generator],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.GeneratorController.generator()
2019-04-03 10:43:26 -Mapped "{[/common/generator/edit],methods=[GET]}" onto public java.lang.String com.bootdo.common.controller.GeneratorController.edit(org.springframework.ui.Model)
2019-04-03 10:43:26 -Mapped "{[/common/generator/batchCode]}" onto public void com.bootdo.common.controller.GeneratorController.batchCode(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String) throws java.io.IOException
2019-04-03 10:43:26 -Mapped "{[/common/job/add],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.JobController.add()
2019-04-03 10:43:26 -Mapped "{[/common/job/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.remove(java.lang.Long)
2019-04-03 10:43:26 -Mapped "{[/common/job/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.remove(java.lang.Long[])
2019-04-03 10:43:26 -Mapped "{[/common/job/update],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.update(com.bootdo.common.domain.TaskDO)
2019-04-03 10:43:26 -Mapped "{[/common/job/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.common.controller.JobController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 10:43:26 -Mapped "{[/common/job/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.save(com.bootdo.common.domain.TaskDO)
2019-04-03 10:43:26 -Mapped "{[/common/job/info/{id}]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.info(java.lang.Long)
2019-04-03 10:43:26 -Mapped "{[/common/job/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.JobController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 10:43:26 -Mapped "{[/common/job],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.JobController.taskScheduleJob()
2019-04-03 10:43:26 -Mapped "{[/common/job/changeJobStatus],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.changeJobStatus(java.lang.Long,java.lang.String)
2019-04-03 10:43:26 -Mapped "{[/common/log/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.LogController.remove(java.lang.Long)
2019-04-03 10:43:26 -Mapped "{[/common/log],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.LogController.log()
2019-04-03 10:43:26 -Mapped "{[/common/log/list],methods=[GET]}" onto com.bootdo.common.domain.PageDO<com.bootdo.common.domain.LogDO> com.bootdo.common.controller.LogController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 10:43:26 -Mapped "{[/common/log/batchRemove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.LogController.batchRemove(java.lang.Long[])
2019-04-03 10:43:26 -Mapped "{[/common/long],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.LongController.Long()
2019-04-03 10:43:26 -Mapped "{[/common/time],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.TimeController.Time()
2019-04-03 10:43:26 -Mapped "{[/error]}" onto public com.bootdo.common.utils.R com.bootdo.common.exception.MainsiteErrorController.handleError(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-04-03 10:43:26 -Mapped "{[/error],produces=[text/html]}" onto public org.springframework.web.servlet.ModelAndView com.bootdo.common.exception.MainsiteErrorController.errorHtml(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-04-03 10:43:26 -Mapped "{[/elec/elec/add],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecController.add()
2019-04-03 10:43:26 -Mapped "{[/elec/elec/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.remove(java.lang.Long)
2019-04-03 10:43:26 -Mapped "{[/elec/elec/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.remove(java.lang.Long[])
2019-04-03 10:43:26 -Mapped "{[/elec/elec/update],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.update(com.bootdo.elec.domain.ElecDO)
2019-04-03 10:43:26 -Mapped "{[/elec/elec/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.elec.controller.ElecController.list(java.util.Map<java.lang.String, java.lang.Object>,com.bootdo.elec.domain.ElecDO)
2019-04-03 10:43:26 -Mapped "{[/elec/elec/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.save(com.bootdo.elec.domain.ElecDO)
2019-04-03 10:43:26 -Mapped "{[/elec/elec/exprotElec],methods=[GET]}" onto public void com.bootdo.elec.controller.ElecController.exprotExcel(com.bootdo.elec.vo.ElecVo,javax.servlet.http.HttpServletResponse)
2019-04-03 10:43:26 -Mapped "{[/elec/elec],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecController.Elec()
2019-04-03 10:43:26 -Mapped "{[/elec/elec/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 10:43:26 -Mapped "{[/elec/elecInto/importElecIntoExcel],methods=[POST]}" onto public java.util.Map<java.lang.String, java.lang.Object> com.bootdo.elec.controller.ElecIntoController.importElecIntoExcel(org.springframework.web.multipart.MultipartFile,com.bootdo.elec.vo.ElecVo) throws java.lang.Exception
2019-04-03 10:43:26 -Mapped "{[/elec/elecInto/exprotElecIntoExcel],methods=[GET]}" onto public void com.bootdo.elec.controller.ElecIntoController.exprotExcel(com.bootdo.elec.vo.ElecVo,javax.servlet.http.HttpServletResponse)
2019-04-03 10:43:26 -Mapped "{[/elec/elecInto],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecIntoController.ElecInto()
2019-04-03 10:43:26 -Mapped "{[/elec/elecPrice/add],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecPriceController.add()
2019-04-03 10:43:26 -Mapped "{[/elec/elecPrice/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecPriceController.remove(java.lang.Long)
2019-04-03 10:43:26 -Mapped "{[/elec/elecPrice/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecPriceController.remove(java.lang.Long[])
2019-04-03 10:43:26 -Mapped "{[/elec/elecPrice/update]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecPriceController.update(com.bootdo.elec.domain.ElecPriceDO)
2019-04-03 10:43:26 -Mapped "{[/elec/elecPrice/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.elec.controller.ElecPriceController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 10:43:26 -Mapped "{[/elec/elecPrice/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecPriceController.save(com.bootdo.elec.domain.ElecPriceDO,com.bootdo.elec.domain.ElecDO)
2019-04-03 10:43:26 -Mapped "{[/elec/elecPrice],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecPriceController.ElecPrice()
2019-04-03 10:43:26 -Mapped "{[/elec/elecPrice/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecPriceController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 10:43:26 -Mapped "{[/elec/elecUpLoad],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecUpLoadController.Elec()
2019-04-03 10:43:26 -Mapped "{[/elec/elecUpLoad/importElecExcel],methods=[POST]}" onto public java.util.Map<java.lang.String, java.lang.Object> com.bootdo.elec.controller.ElecUpLoadController.importElecExcel(org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpServletRequest) throws java.lang.Exception
2019-04-03 10:43:26 -Mapped "{[/heat/heat/add],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatController.add()
2019-04-03 10:43:26 -Mapped "{[/heat/heat/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatController.remove(java.lang.Integer)
2019-04-03 10:43:26 -Mapped "{[/heat/heat/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatController.remove(java.lang.Integer[])
2019-04-03 10:43:26 -Mapped "{[/heat/heat/update]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatController.update(com.bootdo.heat.domain.HeatDO)
2019-04-03 10:43:26 -Mapped "{[/heat/heat/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.heat.controller.HeatController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 10:43:26 -Mapped "{[/heat/heat/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatController.save(com.bootdo.heat.domain.HeatDO)
2019-04-03 10:43:26 -Mapped "{[/heat/heat/exprotHeat],methods=[GET]}" onto public void com.bootdo.heat.controller.HeatController.exprotExcel(com.bootdo.heat.vo.HeatVo,javax.servlet.http.HttpServletResponse)
2019-04-03 10:43:26 -Mapped "{[/heat/heat],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatController.Heat()
2019-04-03 10:43:26 -Mapped "{[/heat/heat/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatController.edit(java.lang.Integer,org.springframework.ui.Model)
2019-04-03 10:43:26 -Mapped "{[/heat/heatInto/exprotHeatIntoExcel],methods=[GET]}" onto public void com.bootdo.heat.controller.HeatIntoController.exprotExcel(com.bootdo.heat.vo.HeatVo,javax.servlet.http.HttpServletResponse)
2019-04-03 10:43:26 -Mapped "{[/heat/heatInto],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatIntoController.HeatInto()
2019-04-03 10:43:26 -Mapped "{[/heat/heatPrice/add],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatPriceController.add()
2019-04-03 10:43:26 -Mapped "{[/heat/heatPrice/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatPriceController.remove(java.lang.Long)
2019-04-03 10:43:26 -Mapped "{[/heat/heatPrice/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatPriceController.remove(java.lang.Long[])
2019-04-03 10:43:26 -Mapped "{[/heat/heatPrice/update]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatPriceController.update(com.bootdo.heat.domain.HeatPriceDO)
2019-04-03 10:43:26 -Mapped "{[/heat/heatPrice/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.heat.controller.HeatPriceController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 10:43:26 -Mapped "{[/heat/heatPrice/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatPriceController.save(com.bootdo.heat.domain.HeatPriceDO)
2019-04-03 10:43:26 -Mapped "{[/heat/heatPrice],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatPriceController.HeatPrice()
2019-04-03 10:43:26 -Mapped "{[/heat/heatPrice/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatPriceController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 10:43:26 -Mapped "{[/heat/heatUpLoad/createHeatExcel],methods=[POST]}" onto public java.lang.String com.bootdo.heat.controller.HeatUpLoadController.createHeatExcel(com.bootdo.heat.domain.HeatDO) throws java.lang.Exception
2019-04-03 10:43:26 -Mapped "{[/heat/heatUpLoad],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatUpLoadController.HeatUpLoad()
2019-04-03 10:43:26 -Mapped "{[/heat/heatUpLoad/exprotHeatExcel],methods=[GET]}" onto public void com.bootdo.heat.controller.HeatUpLoadController.exprotHeatExcel(com.bootdo.heat.vo.HeatVo,javax.servlet.http.HttpServletResponse)
2019-04-03 10:43:26 -Mapped "{[/heat/heatUpLoad/importHeatExcel]}" onto public java.lang.String com.bootdo.heat.controller.HeatUpLoadController.importHeatExcel(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)
2019-04-03 10:43:26 -Mapped "{[/moneyList/moneyList/queryAllUserName],methods=[POST]}" onto public java.util.List<com.bootdo.moneyList.damain.MoneyListDO> com.bootdo.moneyList.controller.MoneyListController.getAllUserName(com.bootdo.moneyList.damain.MoneyListDO)
2019-04-03 10:43:26 -Mapped "{[/moneyList/moneyList],methods=[GET]}" onto java.lang.String com.bootdo.moneyList.controller.MoneyListController.MoneyList()
2019-04-03 10:43:26 -Mapped "{[/moneyList/moneyList/queryAllUser],methods=[POST]}" onto public java.util.List<com.bootdo.moneyList.damain.MoneyListDO> com.bootdo.moneyList.controller.MoneyListController.queryAllUser(com.bootdo.moneyList.damain.MoneyListDO)
2019-04-03 10:43:26 -Mapped "{[/moneyList/moneyList/updateMoney],methods=[POST]}" onto public java.util.List<com.bootdo.moneyList.damain.MoneyListDO> com.bootdo.moneyList.controller.MoneyListController.updateMoney(com.bootdo.moneyList.damain.MoneyListDO)
2019-04-03 10:43:26 -Mapped "{[/moneyLog/elecLog/add],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.ElecLogController.add()
2019-04-03 10:43:26 -Mapped "{[/moneyLog/elecLog/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.ElecLogController.remove(java.lang.Long)
2019-04-03 10:43:26 -Mapped "{[/moneyLog/elecLog/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.ElecLogController.remove(java.lang.Long[])
2019-04-03 10:43:26 -Mapped "{[/moneyLog/elecLog/update]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.ElecLogController.update(com.bootdo.moneyLog.domain.ElecLogDO)
2019-04-03 10:43:26 -Mapped "{[/moneyLog/elecLog/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.moneyLog.controller.ElecLogController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 10:43:26 -Mapped "{[/moneyLog/elecLog/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.ElecLogController.save(com.bootdo.moneyLog.domain.ElecLogDO)
2019-04-03 10:43:26 -Mapped "{[/moneyLog/elecLog/exprotElecLog],methods=[GET]}" onto public void com.bootdo.moneyLog.controller.ElecLogController.exprotElecLog(com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-03 10:43:26 -Mapped "{[/moneyLog/elecLog],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.ElecLogController.moneyLog()
2019-04-03 10:43:26 -Mapped "{[/moneyLog/elecLog/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.ElecLogController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 10:43:26 -Mapped "{[/moneyLog/heatLog/add],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.HeatLogController.add()
2019-04-03 10:43:26 -Mapped "{[/moneyLog/heatLog/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.HeatLogController.remove(java.lang.Long)
2019-04-03 10:43:26 -Mapped "{[/moneyLog/heatLog/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.HeatLogController.remove(java.lang.Long[])
2019-04-03 10:43:26 -Mapped "{[/moneyLog/heatLog/update]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.HeatLogController.update(com.bootdo.moneyLog.domain.HeatLogDO)
2019-04-03 10:43:26 -Mapped "{[/moneyLog/heatLog/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.moneyLog.controller.HeatLogController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 10:43:26 -Mapped "{[/moneyLog/heatLog/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.HeatLogController.save(com.bootdo.moneyLog.domain.HeatLogDO)
2019-04-03 10:43:26 -Mapped "{[/moneyLog/heatLog],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.HeatLogController.HeatLog()
2019-04-03 10:43:26 -Mapped "{[/moneyLog/heatLog/exprotHeatLog],methods=[GET]}" onto public void com.bootdo.moneyLog.controller.HeatLogController.exprotHeatLog(com.bootdo.moneyLog.vo.HeatLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-03 10:43:26 -Mapped "{[/moneyLog/heatLog/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.HeatLogController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 10:43:26 -Mapped "{[/moneyLog/waterLog/add],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.WaterLogController.add()
2019-04-03 10:43:26 -Mapped "{[/moneyLog/waterLog/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.WaterLogController.remove(java.lang.Long)
2019-04-03 10:43:26 -Mapped "{[/moneyLog/waterLog/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.WaterLogController.remove(java.lang.Long[])
2019-04-03 10:43:26 -Mapped "{[/moneyLog/waterLog/update]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.WaterLogController.update(com.bootdo.moneyLog.domain.WaterLogDO)
2019-04-03 10:43:26 -Mapped "{[/moneyLog/waterLog/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.moneyLog.controller.WaterLogController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 10:43:26 -Mapped "{[/moneyLog/waterLog/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.WaterLogController.save(com.bootdo.moneyLog.domain.WaterLogDO)
2019-04-03 10:43:26 -Mapped "{[/moneyLog/waterLog],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.WaterLogController.WaterLog()
2019-04-03 10:43:26 -Mapped "{[/moneyLog/waterLog/exprotWaterLog],methods=[GET]}" onto public void com.bootdo.moneyLog.controller.WaterLogController.exprotWaterLog(com.bootdo.moneyLog.vo.WaterLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-03 10:43:26 -Mapped "{[/moneyLog/waterLog/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.WaterLogController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 10:43:26 -Mapped "{[/oa/notify/add],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.add()
2019-04-03 10:43:26 -Mapped "{[/oa/notify/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.remove(java.lang.Long)
2019-04-03 10:43:26 -Mapped "{[/oa/notify/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.remove(java.lang.Long[])
2019-04-03 10:43:26 -Mapped "{[/oa/notify/update]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.update(com.bootdo.oa.domain.NotifyDO)
2019-04-03 10:43:26 -Mapped "{[/oa/notify/read/{id}],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.read(java.lang.Long,org.springframework.ui.Model)
2019-04-03 10:43:26 -Mapped "{[/oa/notify/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.oa.controller.NotifyController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 10:43:26 -Mapped "{[/oa/notify/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.save(com.bootdo.oa.domain.NotifyDO)
2019-04-03 10:43:26 -Mapped "{[/oa/notify/message],methods=[GET]}" onto com.bootdo.common.utils.PageUtils com.bootdo.oa.controller.NotifyController.message()
2019-04-03 10:43:26 -Mapped "{[/oa/notify/selfList],methods=[GET]}" onto com.bootdo.common.utils.PageUtils com.bootdo.oa.controller.NotifyController.selfList(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 10:43:26 -Mapped "{[/oa/notify],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.oaNotify()
2019-04-03 10:43:26 -Mapped "{[/oa/notify/selfNotify],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.selefNotify()
2019-04-03 10:43:26 -Mapped "{[/oa/notify/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 10:43:26 -Mapped "{[/print/print/add],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.add()
2019-04-03 10:43:26 -Mapped "{[/print/print/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.print.controller.PrintController.remove(java.lang.Long)
2019-04-03 10:43:26 -Mapped "{[/print/print/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.print.controller.PrintController.remove(java.lang.Long[])
2019-04-03 10:43:26 -Mapped "{[/print/print/update]}" onto public com.bootdo.common.utils.R com.bootdo.print.controller.PrintController.update(com.bootdo.print.domain.PrintDO)
2019-04-03 10:43:26 -Mapped "{[/print/print/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.print.controller.PrintController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 10:43:26 -Mapped "{[/print/print/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.print.controller.PrintController.save(java.lang.String,com.bootdo.print.domain.PrintDO)
2019-04-03 10:43:26 -Mapped "{[/print/print/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 10:43:26 -Mapped "{[/print/print/exprotPrint],methods=[GET]}" onto public void com.bootdo.print.controller.PrintController.exprotPrint(com.bootdo.print.vo.PrintVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-03 10:43:26 -Mapped "{[/print/print/printEdit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.printEdit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 10:43:26 -Mapped "{[/print/print],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.Print()
2019-04-03 10:43:26 -Mapped "{[/system/sysDept/add/{pId}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.add(java.lang.Long,org.springframework.ui.Model)
2019-04-03 10:43:26 -Mapped "{[/system/sysDept/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.remove(java.lang.Long)
2019-04-03 10:43:26 -Mapped "{[/system/sysDept/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.remove(java.lang.Long[])
2019-04-03 10:43:26 -Mapped "{[/system/sysDept/update]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.update(com.bootdo.system.domain.DeptDO)
2019-04-03 10:43:26 -Mapped "{[/system/sysDept/list],methods=[GET]}" onto public java.util.List<com.bootdo.system.domain.DeptDO> com.bootdo.system.controller.DeptController.list()
2019-04-03 10:43:26 -Mapped "{[/system/sysDept/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.save(com.bootdo.system.domain.DeptDO)
2019-04-03 10:43:26 -Mapped "{[/system/sysDept/tree],methods=[GET]}" onto public com.bootdo.common.domain.Tree<com.bootdo.system.domain.DeptDO> com.bootdo.system.controller.DeptController.tree()
2019-04-03 10:43:26 -Mapped "{[/system/sysDept/edit/{deptId}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 10:43:26 -Mapped "{[/system/sysDept],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.dept()
2019-04-03 10:43:26 -Mapped "{[/system/sysDept/treeView],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.treeView()
2019-04-03 10:43:26 -Mapped "{[/index],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.index(org.springframework.ui.Model)
2019-04-03 10:43:26 -Mapped "{[/main],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.main()
2019-04-03 10:43:26 -Mapped "{[/login],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.login(org.springframework.ui.Model)
2019-04-03 10:43:26 -Mapped "{[/logout],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.logout()
2019-04-03 10:43:26 -Mapped "{[/login],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.LoginController.ajaxLogin(java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest)
2019-04-03 10:43:26 -Mapped "{[/ || ],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.welcome(org.springframework.ui.Model)
2019-04-03 10:43:26 -Mapped "{[/getVerify],methods=[GET]}" onto public void com.bootdo.system.controller.LoginController.getVerify(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-04-03 10:43:26 -Mapped "{[/sys/menu/add/{pId}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.MenuController.add(org.springframework.ui.Model,java.lang.Long)
2019-04-03 10:43:26 -Mapped "{[/sys/menu/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.MenuController.remove(java.lang.Long)
2019-04-03 10:43:26 -Mapped "{[/sys/menu/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.MenuController.update(com.bootdo.system.domain.MenuDO)
2019-04-03 10:43:26 -Mapped "{[/sys/menu/list]}" onto java.util.List<com.bootdo.system.domain.MenuDO> com.bootdo.system.controller.MenuController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 10:43:26 -Mapped "{[/sys/menu/save],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.MenuController.save(com.bootdo.system.domain.MenuDO)
2019-04-03 10:43:26 -Mapped "{[/sys/menu/tree/{roleId}],methods=[GET]}" onto com.bootdo.common.domain.Tree<com.bootdo.system.domain.MenuDO> com.bootdo.system.controller.MenuController.tree(java.lang.Long)
2019-04-03 10:43:26 -Mapped "{[/sys/menu/tree],methods=[GET]}" onto com.bootdo.common.domain.Tree<com.bootdo.system.domain.MenuDO> com.bootdo.system.controller.MenuController.tree()
2019-04-03 10:43:26 -Mapped "{[/sys/menu/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.MenuController.edit(org.springframework.ui.Model,java.lang.Long)
2019-04-03 10:43:26 -Mapped "{[/sys/menu],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.MenuController.menu(org.springframework.ui.Model)
2019-04-03 10:43:26 -Mapped "{[/sys/role/add],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.RoleController.add()
2019-04-03 10:43:26 -Mapped "{[/sys/role/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.update(com.bootdo.system.domain.RoleDO)
2019-04-03 10:43:26 -Mapped "{[/sys/role/list],methods=[GET]}" onto java.util.List<com.bootdo.system.domain.RoleDO> com.bootdo.system.controller.RoleController.list()
2019-04-03 10:43:26 -Mapped "{[/sys/role/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.save(java.lang.Long)
2019-04-03 10:43:26 -Mapped "{[/sys/role/save],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.save(com.bootdo.system.domain.RoleDO)
2019-04-03 10:43:26 -Mapped "{[/sys/role/batchRemove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.batchRemove(java.lang.Long[])
2019-04-03 10:43:26 -Mapped "{[/sys/role],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.RoleController.role()
2019-04-03 10:43:26 -Mapped "{[/sys/role/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.RoleController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 10:43:26 -Mapped "{[/sys/online/list]}" onto public java.util.List<com.bootdo.system.domain.UserOnline> com.bootdo.system.controller.SessionController.list()
2019-04-03 10:43:26 -Mapped "{[/sys/online/forceLogout/{sessionId}]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.SessionController.forceLogout(java.lang.String,org.springframework.web.servlet.mvc.support.RedirectAttributes)
2019-04-03 10:43:26 -Mapped "{[/sys/online],methods=[GET]}" onto public java.lang.String com.bootdo.system.controller.SessionController.online()
2019-04-03 10:43:26 -Mapped "{[/sys/online/sessionList]}" onto public java.util.Collection<org.apache.shiro.session.Session> com.bootdo.system.controller.SessionController.sessionList()
2019-04-03 10:43:27 -Mapped "{[/sys/user/exit],methods=[POST]}" onto boolean com.bootdo.system.controller.UserController.exit(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 10:43:27 -Mapped "{[/sys/user/add],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.add(org.springframework.ui.Model)
2019-04-03 10:43:27 -Mapped "{[/sys/user/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.remove(java.lang.Long)
2019-04-03 10:43:27 -Mapped "{[/sys/user/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.update(com.bootdo.system.domain.UserDO)
2019-04-03 10:43:27 -Mapped "{[/sys/user/list],methods=[GET]}" onto com.bootdo.common.utils.PageUtils com.bootdo.system.controller.UserController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 10:43:27 -Mapped "{[/sys/user/save],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.save(com.bootdo.system.domain.UserDO)
2019-04-03 10:43:27 -Mapped "{[/sys/user/batchRemove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.batchRemove(java.lang.Long[])
2019-04-03 10:43:27 -Mapped "{[/sys/user/tree],methods=[GET]}" onto public com.bootdo.common.domain.Tree<com.bootdo.system.domain.DeptDO> com.bootdo.system.controller.UserController.tree()
2019-04-03 10:43:27 -Mapped "{[/sys/user],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.user(org.springframework.ui.Model)
2019-04-03 10:43:27 -Mapped "{[/sys/user/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.edit(org.springframework.ui.Model,java.lang.Long)
2019-04-03 10:43:27 -Mapped "{[/sys/user/treeView],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.treeView()
2019-04-03 10:43:27 -Mapped "{[/sys/user/updatePeronal],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.updatePeronal(com.bootdo.system.domain.UserDO)
2019-04-03 10:43:27 -Mapped "{[/sys/user/uploadImg],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.uploadImg(org.springframework.web.multipart.MultipartFile,java.lang.String,javax.servlet.http.HttpServletRequest)
2019-04-03 10:43:27 -Mapped "{[/sys/user/personal],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.personal(org.springframework.ui.Model)
2019-04-03 10:43:27 -Mapped "{[/sys/user/adminResetPwd],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.adminResetPwd(com.bootdo.system.vo.UserVO)
2019-04-03 10:43:27 -Mapped "{[/sys/user/resetPwd/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.resetPwd(java.lang.Long,org.springframework.ui.Model)
2019-04-03 10:43:27 -Mapped "{[/sys/user/resetPwd],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.resetPwd(com.bootdo.system.vo.UserVO)
2019-04-03 10:43:27 -Mapped "{[/file/downImport/{importType}],methods=[GET]}" onto public void com.bootdo.temple.controller.TempletController.downImport(javax.servlet.http.HttpServletResponse,java.lang.String)
2019-04-03 10:43:27 -Mapped "{[/water/water/add],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterController.add()
2019-04-03 10:43:27 -Mapped "{[/water/water/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterController.remove(java.lang.Long)
2019-04-03 10:43:27 -Mapped "{[/water/water/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterController.remove(java.lang.Long[])
2019-04-03 10:43:27 -Mapped "{[/water/water/update]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterController.update(com.bootdo.water.domain.WaterDO)
2019-04-03 10:43:27 -Mapped "{[/water/water/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.water.controller.WaterController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 10:43:27 -Mapped "{[/water/water/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterController.save(com.bootdo.water.domain.WaterDO)
2019-04-03 10:43:27 -Mapped "{[/water/water/exprotWater],methods=[GET]}" onto public void com.bootdo.water.controller.WaterController.exprotExcel(com.bootdo.water.vo.WaterVo,javax.servlet.http.HttpServletResponse)
2019-04-03 10:43:27 -Mapped "{[/water/water/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 10:43:27 -Mapped "{[/water/water],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterController.Water()
2019-04-03 10:43:27 -Mapped "{[/water/waterInto/exprotWaterIntoExcel],methods=[GET]}" onto public void com.bootdo.water.controller.WaterIntoController.exprotExcel(com.bootdo.water.vo.WaterVo,javax.servlet.http.HttpServletResponse)
2019-04-03 10:43:27 -Mapped "{[/water/waterInto],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterIntoController.WaterInto()
2019-04-03 10:43:27 -Mapped "{[/water/waterPrice/add],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterPriceController.add()
2019-04-03 10:43:27 -Mapped "{[/water/waterPrice/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterPriceController.remove(java.lang.Long)
2019-04-03 10:43:27 -Mapped "{[/water/waterPrice/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterPriceController.remove(java.lang.Long[])
2019-04-03 10:43:27 -Mapped "{[/water/waterPrice/update]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterPriceController.update(com.bootdo.water.domain.WaterPriceDO)
2019-04-03 10:43:27 -Mapped "{[/water/waterPrice/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.water.controller.WaterPriceController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 10:43:27 -Mapped "{[/water/waterPrice/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterPriceController.save(com.bootdo.water.domain.WaterPriceDO)
2019-04-03 10:43:27 -Mapped "{[/water/waterPrice/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterPriceController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 10:43:27 -Mapped "{[/water/waterPrice],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterPriceController.WaterPrice()
2019-04-03 10:43:27 -Mapped "{[/water/waterUpLoad],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterUpLoadController.WaterUpLoad()
2019-04-03 10:43:27 -Mapped "{[/water/waterUpLoad/createWaterExcel],methods=[POST]}" onto public java.lang.String com.bootdo.water.controller.WaterUpLoadController.createWaterExcel(com.bootdo.water.domain.WaterDO) throws java.lang.Exception
2019-04-03 10:43:27 -Mapped "{[/water/waterUpLoad/importWaterExcel]}" onto public java.lang.String com.bootdo.water.controller.WaterUpLoadController.importWaterExcel(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)
2019-04-03 10:43:27 -Mapped "{[/water/waterUpLoad/exprotWaterExcel],methods=[GET]}" onto public void com.bootdo.water.controller.WaterUpLoadController.exprotWaterExcel(com.bootdo.water.vo.WaterVo,javax.servlet.http.HttpServletResponse)
2019-04-03 10:43:27 -Mapped "{[/v2/api-docs],methods=[GET],produces=[application/json || application/hal+json]}" onto public org.springframework.http.ResponseEntity<springfox.documentation.spring.web.json.Json> springfox.documentation.swagger2.web.Swagger2Controller.getDocumentation(java.lang.String,javax.servlet.http.HttpServletRequest)
2019-04-03 10:43:27 -Mapped "{[/swagger-resources/configuration/ui]}" onto org.springframework.http.ResponseEntity<springfox.documentation.swagger.web.UiConfiguration> springfox.documentation.swagger.web.ApiResourceController.uiConfiguration()
2019-04-03 10:43:27 -Mapped "{[/swagger-resources]}" onto org.springframework.http.ResponseEntity<java.util.List<springfox.documentation.swagger.web.SwaggerResource>> springfox.documentation.swagger.web.ApiResourceController.swaggerResources()
2019-04-03 10:43:27 -Mapped "{[/swagger-resources/configuration/security]}" onto org.springframework.http.ResponseEntity<springfox.documentation.swagger.web.SecurityConfiguration> springfox.documentation.swagger.web.ApiResourceController.securityConfiguration()
2019-04-03 10:43:27 -Initializing ExecutorService  'messageBrokerTaskScheduler'
2019-04-03 10:43:27 -Mapped URL path [/endpointChat/**] onto handler of type [class org.springframework.web.socket.sockjs.support.SockJsHttpRequestHandler]
2019-04-03 10:43:27 -Initializing ExecutorService  'brokerChannelExecutor'
2019-04-03 10:43:28 -Mapped URL path [/**/favicon.ico] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-04-03 10:43:28 -Looking for @ControllerAdvice: org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@a38c7fe: startup date [Wed Apr 03 10:43:11 CST 2019]; root of context hierarchy
2019-04-03 10:43:28 -Mapped URL path [/webjars/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-04-03 10:43:28 -Mapped URL path [/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-04-03 10:43:28 -Mapped URL path [/files/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-04-03 10:43:28 -Detected @ExceptionHandler methods in BDExceptionHandler
2019-04-03 10:43:28 -[THYMELEAF][main] Template Mode 'LEGACYHTML5' is deprecated. Using Template Mode 'HTML' instead.
2019-04-03 10:43:30 -Registering beans for JMX exposure on startup
2019-04-03 10:43:30 -Bean with name 'dataSource' has been autodetected for JMX exposure
2019-04-03 10:43:30 -Located MBean 'dataSource': registering with JMX server as MBean [com.alibaba.druid.pool:name=dataSource,type=DruidDataSource]
2019-04-03 10:43:30 -Starting beans in phase 2147483647
2019-04-03 10:43:30 -Context refreshed
2019-04-03 10:43:30 -Found 1 custom documentation plugin(s)
2019-04-03 10:43:30 -Scanning for api listing references
2019-04-03 10:43:31 -Generating unique operation named: exprotElecLogUsingGET_1
2019-04-03 10:43:31 -Generating unique operation named: getCountDUsingPOST_1
2019-04-03 10:43:31 -Generating unique operation named: exprotElecLogUsingGET_2
2019-04-03 10:43:31 -Generating unique operation named: getCountDUsingPOST_2
2019-04-03 10:43:31 -Generating unique operation named: exprotElecLogUsingGET_3
2019-04-03 10:43:31 -Generating unique operation named: getCountDUsingPOST_3
2019-04-03 10:43:31 -Generating unique operation named: removeUsingPOST_1
2019-04-03 10:43:31 -Generating unique operation named: addUsingGET_1
2019-04-03 10:43:31 -Generating unique operation named: editUsingGET_1
2019-04-03 10:43:31 -Generating unique operation named: listUsingGET_1
2019-04-03 10:43:31 -Generating unique operation named: removeUsingPOST_2
2019-04-03 10:43:31 -Generating unique operation named: removeUsingPOST_3
2019-04-03 10:43:31 -Generating unique operation named: saveUsingPOST_1
2019-04-03 10:43:31 -Generating unique operation named: updateUsingGET_1
2019-04-03 10:43:31 -Generating unique operation named: updateUsingHEAD_1
2019-04-03 10:43:31 -Generating unique operation named: updateUsingPOST_1
2019-04-03 10:43:31 -Generating unique operation named: updateUsingPUT_1
2019-04-03 10:43:31 -Generating unique operation named: updateUsingPATCH_1
2019-04-03 10:43:31 -Generating unique operation named: updateUsingDELETE_1
2019-04-03 10:43:31 -Generating unique operation named: updateUsingOPTIONS_1
2019-04-03 10:43:31 -Generating unique operation named: updateUsingTRACE_1
2019-04-03 10:43:31 -Generating unique operation named: addUsingGET_2
2019-04-03 10:43:31 -Generating unique operation named: editUsingGET_2
2019-04-03 10:43:31 -Generating unique operation named: listUsingGET_2
2019-04-03 10:43:31 -Generating unique operation named: removeUsingPOST_4
2019-04-03 10:43:31 -Generating unique operation named: removeUsingPOST_5
2019-04-03 10:43:31 -Generating unique operation named: saveUsingPOST_2
2019-04-03 10:43:31 -Generating unique operation named: updateUsingPOST_2
2019-04-03 10:43:31 -Generating unique operation named: exprotExcelUsingGET_1
2019-04-03 10:43:31 -Generating unique operation named: addUsingGET_3
2019-04-03 10:43:31 -Generating unique operation named: editUsingGET_3
2019-04-03 10:43:31 -Generating unique operation named: exprotElecLogUsingGET_4
2019-04-03 10:43:31 -Generating unique operation named: listUsingGET_3
2019-04-03 10:43:31 -Generating unique operation named: removeUsingPOST_6
2019-04-03 10:43:31 -Generating unique operation named: removeUsingPOST_7
2019-04-03 10:43:31 -Generating unique operation named: saveUsingPOST_3
2019-04-03 10:43:31 -Generating unique operation named: updateUsingGET_2
2019-04-03 10:43:31 -Generating unique operation named: updateUsingHEAD_2
2019-04-03 10:43:31 -Generating unique operation named: updateUsingPOST_3
2019-04-03 10:43:31 -Generating unique operation named: updateUsingPUT_2
2019-04-03 10:43:31 -Generating unique operation named: updateUsingPATCH_2
2019-04-03 10:43:31 -Generating unique operation named: updateUsingDELETE_2
2019-04-03 10:43:31 -Generating unique operation named: updateUsingOPTIONS_2
2019-04-03 10:43:31 -Generating unique operation named: updateUsingTRACE_2
2019-04-03 10:43:31 -Generating unique operation named: addUsingGET_4
2019-04-03 10:43:31 -Generating unique operation named: editUsingGET_4
2019-04-03 10:43:31 -Generating unique operation named: listUsingGET_4
2019-04-03 10:43:31 -Generating unique operation named: removeUsingPOST_8
2019-04-03 10:43:31 -Generating unique operation named: removeUsingPOST_9
2019-04-03 10:43:31 -Generating unique operation named: saveUsingPOST_4
2019-04-03 10:43:31 -Generating unique operation named: updateUsingGET_3
2019-04-03 10:43:31 -Generating unique operation named: updateUsingHEAD_3
2019-04-03 10:43:31 -Generating unique operation named: updateUsingPOST_4
2019-04-03 10:43:31 -Generating unique operation named: updateUsingPUT_3
2019-04-03 10:43:31 -Generating unique operation named: updateUsingPATCH_3
2019-04-03 10:43:31 -Generating unique operation named: updateUsingDELETE_3
2019-04-03 10:43:31 -Generating unique operation named: updateUsingOPTIONS_3
2019-04-03 10:43:31 -Generating unique operation named: updateUsingTRACE_3
2019-04-03 10:43:31 -Generating unique operation named: ElecUsingGET_1
2019-04-03 10:43:31 -Generating unique operation named: addUsingGET_5
2019-04-03 10:43:31 -Generating unique operation named: editUsingGET_5
2019-04-03 10:43:31 -Generating unique operation named: listUsingGET_5
2019-04-03 10:43:31 -Generating unique operation named: removeUsingPOST_10
2019-04-03 10:43:31 -Generating unique operation named: removeUsingPOST_11
2019-04-03 10:43:31 -Generating unique operation named: saveUsingPOST_5
2019-04-03 10:43:31 -Generating unique operation named: updateUsingGET_4
2019-04-03 10:43:31 -Generating unique operation named: updateUsingHEAD_4
2019-04-03 10:43:31 -Generating unique operation named: updateUsingPOST_5
2019-04-03 10:43:31 -Generating unique operation named: updateUsingPUT_4
2019-04-03 10:43:31 -Generating unique operation named: updateUsingPATCH_4
2019-04-03 10:43:31 -Generating unique operation named: updateUsingDELETE_4
2019-04-03 10:43:31 -Generating unique operation named: updateUsingOPTIONS_4
2019-04-03 10:43:31 -Generating unique operation named: updateUsingTRACE_4
2019-04-03 10:43:31 -Generating unique operation named: editUsingGET_6
2019-04-03 10:43:31 -Generating unique operation named: listUsingGET_6
2019-04-03 10:43:31 -Generating unique operation named: updateUsingPOST_6
2019-04-03 10:43:31 -Generating unique operation named: addUsingGET_6
2019-04-03 10:43:31 -Generating unique operation named: editUsingGET_7
2019-04-03 10:43:31 -Generating unique operation named: exprotExcelUsingGET_2
2019-04-03 10:43:31 -Generating unique operation named: listUsingGET_7
2019-04-03 10:43:31 -Generating unique operation named: removeUsingPOST_12
2019-04-03 10:43:32 -Generating unique operation named: removeUsingPOST_13
2019-04-03 10:43:32 -Generating unique operation named: saveUsingPOST_6
2019-04-03 10:43:32 -Generating unique operation named: updateUsingGET_5
2019-04-03 10:43:32 -Generating unique operation named: updateUsingHEAD_5
2019-04-03 10:43:32 -Generating unique operation named: updateUsingPOST_7
2019-04-03 10:43:32 -Generating unique operation named: updateUsingPUT_5
2019-04-03 10:43:32 -Generating unique operation named: updateUsingPATCH_5
2019-04-03 10:43:32 -Generating unique operation named: updateUsingDELETE_5
2019-04-03 10:43:32 -Generating unique operation named: updateUsingOPTIONS_5
2019-04-03 10:43:32 -Generating unique operation named: updateUsingTRACE_5
2019-04-03 10:43:32 -Generating unique operation named: exprotExcelUsingGET_3
2019-04-03 10:43:32 -Generating unique operation named: addUsingGET_7
2019-04-03 10:43:32 -Generating unique operation named: editUsingGET_8
2019-04-03 10:43:32 -Generating unique operation named: listUsingGET_8
2019-04-03 10:43:32 -Generating unique operation named: removeUsingPOST_14
2019-04-03 10:43:32 -Generating unique operation named: removeUsingPOST_15
2019-04-03 10:43:32 -Generating unique operation named: saveUsingPOST_7
2019-04-03 10:43:32 -Generating unique operation named: updateUsingGET_6
2019-04-03 10:43:32 -Generating unique operation named: updateUsingHEAD_6
2019-04-03 10:43:32 -Generating unique operation named: updateUsingPOST_8
2019-04-03 10:43:32 -Generating unique operation named: updateUsingPUT_6
2019-04-03 10:43:32 -Generating unique operation named: updateUsingPATCH_6
2019-04-03 10:43:32 -Generating unique operation named: updateUsingDELETE_6
2019-04-03 10:43:32 -Generating unique operation named: updateUsingOPTIONS_6
2019-04-03 10:43:32 -Generating unique operation named: updateUsingTRACE_6
2019-04-03 10:43:32 -Generating unique operation named: addUsingGET_8
2019-04-03 10:43:32 -Generating unique operation named: editUsingGET_9
2019-04-03 10:43:32 -Generating unique operation named: listUsingGET_9
2019-04-03 10:43:32 -Generating unique operation named: removeUsingPOST_16
2019-04-03 10:43:32 -Generating unique operation named: removeUsingPOST_17
2019-04-03 10:43:32 -Generating unique operation named: saveUsingPOST_8
2019-04-03 10:43:32 -Generating unique operation named: updateUsingGET_7
2019-04-03 10:43:32 -Generating unique operation named: updateUsingHEAD_7
2019-04-03 10:43:32 -Generating unique operation named: updateUsingPOST_9
2019-04-03 10:43:32 -Generating unique operation named: updateUsingPUT_7
2019-04-03 10:43:32 -Generating unique operation named: updateUsingPATCH_7
2019-04-03 10:43:32 -Generating unique operation named: updateUsingDELETE_7
2019-04-03 10:43:32 -Generating unique operation named: updateUsingOPTIONS_7
2019-04-03 10:43:32 -Generating unique operation named: updateUsingTRACE_7
2019-04-03 10:43:32 -Generating unique operation named: addUsingGET_9
2019-04-03 10:43:32 -Generating unique operation named: editUsingGET_10
2019-04-03 10:43:32 -Generating unique operation named: infoUsingGET_1
2019-04-03 10:43:32 -Generating unique operation named: infoUsingHEAD_1
2019-04-03 10:43:32 -Generating unique operation named: infoUsingPOST_1
2019-04-03 10:43:32 -Generating unique operation named: infoUsingPUT_1
2019-04-03 10:43:32 -Generating unique operation named: infoUsingPATCH_1
2019-04-03 10:43:32 -Generating unique operation named: infoUsingDELETE_1
2019-04-03 10:43:32 -Generating unique operation named: infoUsingOPTIONS_1
2019-04-03 10:43:32 -Generating unique operation named: infoUsingTRACE_1
2019-04-03 10:43:32 -Generating unique operation named: listUsingGET_10
2019-04-03 10:43:32 -Generating unique operation named: removeUsingPOST_18
2019-04-03 10:43:32 -Generating unique operation named: removeUsingPOST_19
2019-04-03 10:43:32 -Generating unique operation named: saveUsingPOST_9
2019-04-03 10:43:32 -Generating unique operation named: updateUsingPOST_10
2019-04-03 10:43:32 -Generating unique operation named: listUsingGET_11
2019-04-03 10:43:32 -Generating unique operation named: removeUsingPOST_20
2019-04-03 10:43:32 -Generating unique operation named: welcomeUsingGET_1
2019-04-03 10:43:32 -Generating unique operation named: addUsingGET_10
2019-04-03 10:43:32 -Generating unique operation named: editUsingGET_11
2019-04-03 10:43:32 -Generating unique operation named: listUsingGET_12
2019-04-03 10:43:32 -Generating unique operation named: removeUsingPOST_21
2019-04-03 10:43:32 -Generating unique operation named: saveUsingPOST_10
2019-04-03 10:43:32 -Generating unique operation named: treeUsingGET_1
2019-04-03 10:43:32 -Generating unique operation named: treeUsingGET_2
2019-04-03 10:43:32 -Generating unique operation named: updateUsingPOST_11
2019-04-03 10:43:32 -Generating unique operation named: addUsingGET_11
2019-04-03 10:43:32 -Generating unique operation named: editUsingGET_12
2019-04-03 10:43:32 -Generating unique operation named: listUsingGET_13
2019-04-03 10:43:32 -Generating unique operation named: removeUsingPOST_22
2019-04-03 10:43:32 -Generating unique operation named: removeUsingPOST_23
2019-04-03 10:43:32 -Generating unique operation named: saveUsingPOST_11
2019-04-03 10:43:32 -Generating unique operation named: updateUsingGET_8
2019-04-03 10:43:32 -Generating unique operation named: updateUsingHEAD_8
2019-04-03 10:43:32 -Generating unique operation named: updateUsingPOST_12
2019-04-03 10:43:32 -Generating unique operation named: updateUsingPUT_8
2019-04-03 10:43:32 -Generating unique operation named: updateUsingPATCH_8
2019-04-03 10:43:32 -Generating unique operation named: updateUsingDELETE_8
2019-04-03 10:43:32 -Generating unique operation named: updateUsingOPTIONS_8
2019-04-03 10:43:32 -Generating unique operation named: updateUsingTRACE_8
2019-04-03 10:43:32 -Generating unique operation named: addUsingGET_12
2019-04-03 10:43:32 -Generating unique operation named: editUsingGET_13
2019-04-03 10:43:32 -Generating unique operation named: listUsingGET_14
2019-04-03 10:43:32 -Generating unique operation named: removeUsingPOST_24
2019-04-03 10:43:32 -Generating unique operation named: removeUsingPOST_25
2019-04-03 10:43:32 -Generating unique operation named: saveUsingPOST_12
2019-04-03 10:43:32 -Generating unique operation named: updateUsingGET_9
2019-04-03 10:43:32 -Generating unique operation named: updateUsingHEAD_9
2019-04-03 10:43:32 -Generating unique operation named: updateUsingPOST_13
2019-04-03 10:43:32 -Generating unique operation named: updateUsingPUT_9
2019-04-03 10:43:32 -Generating unique operation named: updateUsingPATCH_9
2019-04-03 10:43:32 -Generating unique operation named: updateUsingDELETE_9
2019-04-03 10:43:32 -Generating unique operation named: updateUsingOPTIONS_9
2019-04-03 10:43:32 -Generating unique operation named: updateUsingTRACE_9
2019-04-03 10:43:32 -Generating unique operation named: addUsingGET_13
2019-04-03 10:43:32 -Generating unique operation named: batchRemoveUsingPOST_1
2019-04-03 10:43:32 -Generating unique operation named: editUsingGET_14
2019-04-03 10:43:32 -Generating unique operation named: listUsingGET_15
2019-04-03 10:43:32 -Generating unique operation named: saveUsingPOST_13
2019-04-03 10:43:32 -Generating unique operation named: saveUsingPOST_14
2019-04-03 10:43:32 -Generating unique operation named: updateUsingPOST_14
2019-04-03 10:43:32 -Generating unique operation named: listUsingGET_16
2019-04-03 10:43:32 -Generating unique operation named: listUsingHEAD_1
2019-04-03 10:43:32 -Generating unique operation named: listUsingPOST_1
2019-04-03 10:43:32 -Generating unique operation named: listUsingPUT_1
2019-04-03 10:43:32 -Generating unique operation named: listUsingPATCH_1
2019-04-03 10:43:32 -Generating unique operation named: listUsingDELETE_1
2019-04-03 10:43:32 -Generating unique operation named: listUsingOPTIONS_1
2019-04-03 10:43:32 -Generating unique operation named: listUsingTRACE_1
2019-04-03 10:43:32 -Generating unique operation named: addUsingGET_14
2019-04-03 10:43:32 -Generating unique operation named: batchRemoveUsingPOST_2
2019-04-03 10:43:32 -Generating unique operation named: editUsingGET_15
2019-04-03 10:43:33 -Generating unique operation named: listUsingGET_17
2019-04-03 10:43:33 -Generating unique operation named: removeUsingPOST_26
2019-04-03 10:43:33 -Generating unique operation named: saveUsingPOST_15
2019-04-03 10:43:33 -Generating unique operation named: treeUsingGET_3
2019-04-03 10:43:33 -Generating unique operation named: treeViewUsingGET_1
2019-04-03 10:43:33 -Generating unique operation named: updateUsingPOST_15
2019-04-03 10:43:33 -Generating unique operation named: addUsingGET_15
2019-04-03 10:43:33 -Generating unique operation named: editUsingGET_16
2019-04-03 10:43:33 -Generating unique operation named: exprotExcelUsingGET_4
2019-04-03 10:43:33 -Generating unique operation named: listUsingGET_18
2019-04-03 10:43:33 -Generating unique operation named: removeUsingPOST_27
2019-04-03 10:43:33 -Generating unique operation named: removeUsingPOST_28
2019-04-03 10:43:33 -Generating unique operation named: saveUsingPOST_16
2019-04-03 10:43:33 -Generating unique operation named: updateUsingGET_10
2019-04-03 10:43:33 -Generating unique operation named: updateUsingHEAD_10
2019-04-03 10:43:33 -Generating unique operation named: updateUsingPOST_16
2019-04-03 10:43:33 -Generating unique operation named: updateUsingPUT_10
2019-04-03 10:43:33 -Generating unique operation named: updateUsingPATCH_10
2019-04-03 10:43:33 -Generating unique operation named: updateUsingDELETE_10
2019-04-03 10:43:33 -Generating unique operation named: updateUsingOPTIONS_10
2019-04-03 10:43:33 -Generating unique operation named: updateUsingTRACE_10
2019-04-03 10:43:33 -Generating unique operation named: exprotExcelUsingGET_5
2019-04-03 10:43:33 -Generating unique operation named: addUsingGET_16
2019-04-03 10:43:33 -Generating unique operation named: editUsingGET_17
2019-04-03 10:43:33 -Generating unique operation named: listUsingGET_19
2019-04-03 10:43:33 -Generating unique operation named: removeUsingPOST_29
2019-04-03 10:43:33 -Generating unique operation named: removeUsingPOST_30
2019-04-03 10:43:33 -Generating unique operation named: saveUsingPOST_17
2019-04-03 10:43:33 -Generating unique operation named: updateUsingGET_11
2019-04-03 10:43:33 -Generating unique operation named: updateUsingHEAD_11
2019-04-03 10:43:33 -Generating unique operation named: updateUsingPOST_17
2019-04-03 10:43:33 -Generating unique operation named: updateUsingPUT_11
2019-04-03 10:43:33 -Generating unique operation named: updateUsingPATCH_11
2019-04-03 10:43:33 -Generating unique operation named: updateUsingDELETE_11
2019-04-03 10:43:33 -Generating unique operation named: updateUsingOPTIONS_11
2019-04-03 10:43:33 -Generating unique operation named: updateUsingTRACE_11
2019-04-03 10:43:33 -Generating unique operation named: addUsingGET_17
2019-04-03 10:43:33 -Generating unique operation named: editUsingGET_18
2019-04-03 10:43:33 -Generating unique operation named: listUsingGET_20
2019-04-03 10:43:33 -Generating unique operation named: removeUsingPOST_31
2019-04-03 10:43:33 -Generating unique operation named: removeUsingPOST_32
2019-04-03 10:43:33 -Generating unique operation named: saveUsingPOST_18
2019-04-03 10:43:33 -Generating unique operation named: updateUsingGET_12
2019-04-03 10:43:33 -Generating unique operation named: updateUsingHEAD_12
2019-04-03 10:43:33 -Generating unique operation named: updateUsingPOST_18
2019-04-03 10:43:33 -Generating unique operation named: updateUsingPUT_12
2019-04-03 10:43:33 -Generating unique operation named: updateUsingPATCH_12
2019-04-03 10:43:33 -Generating unique operation named: updateUsingDELETE_12
2019-04-03 10:43:33 -Generating unique operation named: updateUsingOPTIONS_12
2019-04-03 10:43:33 -Generating unique operation named: updateUsingTRACE_12
2019-04-03 10:43:33 -Starting Quartz Scheduler now
2019-04-03 10:43:33 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED started.
2019-04-03 10:43:33 -Starting...
2019-04-03 10:43:33 -BrokerAvailabilityEvent[available=true, SimpleBrokerMessageHandler [DefaultSubscriptionRegistry[cache[0 destination(s)], registry[0 sessions]]]]
2019-04-03 10:43:33 -Started.
2019-04-03 10:43:33 -Starting ProtocolHandler ["http-nio-8081"]
2019-04-03 10:43:33 -Using a shared selector for servlet write/read
2019-04-03 10:43:33 -Tomcat started on port(s): 8081 (http) with context path ''
2019-04-03 10:43:33 -Started BootdoApplication in 23.016 seconds (JVM running for 23.831)
2019-04-03 10:43:33 -==>  Preparing: select `id`,`cron_expression`,`method_name`,`is_concurrent`,`description`,`update_by`,`bean_class`,`create_date`,`job_status`,`job_group`,`update_date`,`create_by`,`spring_bean`,`job_name` from sys_task order by id desc 
2019-04-03 10:43:33 -==> Parameters: 
2019-04-03 10:43:33 -<==      Total: 1
2019-04-03 10:43:52 -Initializing Spring FrameworkServlet 'dispatcherServlet'
2019-04-03 10:43:52 -FrameworkServlet 'dispatcherServlet': initialization started
2019-04-03 10:43:52 -FrameworkServlet 'dispatcherServlet': initialization completed in 75 ms
2019-04-03 10:43:52 -Enabling session validation scheduler...
2019-04-03 10:43:52 -请求地址 : http://localhost:8081/login;JSESSIONID=d2993ec2-df7c-4cf7-81c5-e20f616830ea
2019-04-03 10:43:52 -HTTP METHOD : GET
2019-04-03 10:43:52 -CLASS_METHOD : com.bootdo.system.controller.LoginController.login
2019-04-03 10:43:52 -参数 : [{}]
2019-04-03 10:43:52 -耗时 : 4
2019-04-03 10:43:52 -返回值 : login
2019-04-03 10:43:54 -请求地址 : http://localhost:8081/getVerify
2019-04-03 10:43:54 -HTTP METHOD : GET
2019-04-03 10:43:54 -CLASS_METHOD : com.bootdo.system.controller.LoginController.getVerify
2019-04-03 10:43:54 -参数 : [org.apache.shiro.web.servlet.ShiroHttpServletRequest@7d7f3a55, org.apache.shiro.web.servlet.ShiroHttpServletResponse@7940b122]
2019-04-03 10:43:58 -5550
2019-04-03 10:43:59 -耗时 : 4455
2019-04-03 10:43:59 -返回值 : null
2019-04-03 10:43:59 -请求地址 : http://localhost:8081/login
2019-04-03 10:43:59 -HTTP METHOD : GET
2019-04-03 10:43:59 -CLASS_METHOD : com.bootdo.system.controller.LoginController.login
2019-04-03 10:43:59 -参数 : [{}]
2019-04-03 10:43:59 -耗时 : 3
2019-04-03 10:43:59 -返回值 : login
2019-04-03 10:44:04 -请求地址 : http://localhost:8081/login
2019-04-03 10:44:04 -HTTP METHOD : POST
2019-04-03 10:44:04 -CLASS_METHOD : com.bootdo.system.controller.LoginController.ajaxLogin
2019-04-03 10:44:04 -参数 : [admin, 111111, 5550, org.apache.shiro.web.servlet.ShiroHttpServletRequest@4bfc183]
2019-04-03 10:44:04 -==>  Preparing: select `user_id`,`username`,`name`,`password`,`dept_id`,`email`,`mobile`,`status`,`user_id_create`,`gmt_create`,`gmt_modified`,`sex`,`birth`,`pic_id`,`live_address`,`hobby`,`province`,`city`,`district` from sys_user WHERE username = ? order by user_id desc 
2019-04-03 10:44:04 -==> Parameters: admin(String)
2019-04-03 10:44:05 -<==      Total: 1
2019-04-03 10:44:05 -耗时 : 264
2019-04-03 10:44:05 -返回值 : {msg=操作成功, code=0}
2019-04-03 10:44:05 -More than one TaskExecutor bean found within the context, and none is named 'taskExecutor'. Mark one of them as primary or name it 'taskExecutor' (possibly as an alias) in order to use it for async processing: [clientInboundChannelExecutor, clientOutboundChannelExecutor, brokerChannelExecutor, messageBrokerTaskScheduler]
2019-04-03 10:44:05 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 10:44:05 -==> Parameters: 1(Long), admin(String), 登录(String), 264(Integer), com.bootdo.system.controller.LoginController.ajaxLogin()(String), null, 127.0.0.1(String), 2019-04-03 10:44:05.156(Timestamp)
2019-04-03 10:44:05 -请求地址 : http://localhost:8081/index
2019-04-03 10:44:05 -HTTP METHOD : GET
2019-04-03 10:44:05 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2019-04-03 10:44:05 -参数 : [{}]
2019-04-03 10:44:05 -<==    Updates: 1
2019-04-03 10:44:05 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2019-04-03 10:44:05 -==> Parameters: 1(Long)
2019-04-03 10:44:06 -<==      Total: 46
2019-04-03 10:44:06 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2019-04-03 10:44:06 -==> Parameters: 138(Long)
2019-04-03 10:44:06 -<==      Total: 1
2019-04-03 10:44:06 -耗时 : 729
2019-04-03 10:44:06 -返回值 : index_v1
2019-04-03 10:44:06 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 10:44:06 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 729(Integer), com.bootdo.system.controller.LoginController.index()(String), {"menus":[{"attributes":{"icon":"fa fa-money","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-money","url":"/moneyList/moneyList"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"102","parentId":"106","text":"现金缴费"},{"attributes":{"icon":"fa fa-book","url":"/moneyLog/elecLog"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"107","parentId":"106","text":"缴费记录"}],"hasChildren":true,"hasParent":false,"id":"106","parentId":"0","text":"收费管理"},{"attributes":{"icon":"fa fa-lightbulb-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/elec/elec"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"121","parentId":"103","text":"电费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"elec/elecInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"122","parentId":"103","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"elec/elecUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"123","parentId":"103","text":"电表上传"},{"attributes":{"icon":"fa fa-cc","url":"/elec/elecPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"124","parentId":"103","text":"电价管理"}],"hasChildren":true,"hasParent":false,"id":"103","parentId":"0","text":"电费管理"},{"attributes":{"icon":"fa fa-tint","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/water/water"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"117","parentId":"105","text":"水费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"water/waterInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"118","parentId":"105","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"water/waterUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"119","parentId":"105","text":"水费生成"},{"attributes":{"icon":"fa fa-cc","url":"/water/waterPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"120","parentId":"105","text":"水价管理"}],"hasChildren":true,"hasParent":false,"id":"105","parentId":"0","text":"水费管理"},{"attributes":{"icon":"fa fa-fire","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/heat/heat"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"113","parentId":"104","text":"暖费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"heat/heatInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"114","parentId":"104","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"heat/heatUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"115","parentId":"104","text":"暖费生成"},{"attributes":{"icon":"","url":"/heat/heatPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"116","parentId":"104","text":"暖价管理"}],"hasChildren":true,"hasParent":false,"id":"104","parentId":"0","text":"暖费管理"},{"attributes":{"icon":"fa fa-vcard-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-bomb","url":"/print/print"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"149","parentId":"108","text":"票据记录"}],"hasChildren":true,"hasParent":false,"id":"108","parentId":"0","text":"票据管理"},{"attributes":{"icon":"fa fa-bar-chart","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-area-chart","url":"/chart/graph_echarts.html"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","text":"百度chart"},{"attributes":{"icon":"fa fa-sun-o","url":"charts/countDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"109","parentId":"97","text":"日统计报表"},{"attributes":{"icon":"fa fa-registered","url":"charts/countMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"110","parentId":"97","text":"月统计报表"},{"attributes":{"icon":"fa fa-money","url":"charts/countOwe"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"155","parentId":"97","text":"欠费报表图"},{"attributes":{"icon":"fa fa-support","url":"charts/countYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"111","parentId":"97","text":"年统计报表"},{"attributes":{"icon":"fa fa-tachometer","url":"charts/countRun"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"112","parentId":"97","text":"走势图报表"}],"hasChildren":true,"hasParent":false,"id":"97","parentId":"0","text":"统计管理"},{"attributes":{"icon":"fa fa-bars","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-book","url":"/common/dict"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"78","parentId":"1","text":"数据字典"},{"attributes":{"icon":"fa fa-folder-open","url":"/common/sysFile"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"71","parentId":"1","text":"文件管理"}],"h(String), 127.0.0.1(String), 2019-04-03 10:44:06.118(Timestamp)
2019-04-03 10:44:06 -<==    Updates: 1
2019-04-03 10:44:06 -请求地址 : http://localhost:8081/main
2019-04-03 10:44:06 -HTTP METHOD : GET
2019-04-03 10:44:06 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 10:44:06 -参数 : []
2019-04-03 10:44:06 -耗时 : 0
2019-04-03 10:44:06 -返回值 : main
2019-04-03 10:44:06 -请求地址 : http://localhost:8081/oa/notify/message
2019-04-03 10:44:06 -HTTP METHOD : GET
2019-04-03 10:44:06 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2019-04-03 10:44:06 -参数 : []
2019-04-03 10:44:06 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2019-04-03 10:44:06 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2019-04-03 10:44:07 -<==      Total: 0
2019-04-03 10:44:07 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2019-04-03 10:44:07 -==> Parameters: 1(Long), 0(String)
2019-04-03 10:44:07 -<==      Total: 1
2019-04-03 10:44:07 -耗时 : 111
2019-04-03 10:44:07 -返回值 : com.bootdo.common.utils.PageUtils@6aa203d3
2019-04-03 10:44:07 -请求地址 : http://localhost:8081/main
2019-04-03 10:44:07 -HTTP METHOD : GET
2019-04-03 10:44:07 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 10:44:07 -参数 : []
2019-04-03 10:44:07 -耗时 : 0
2019-04-03 10:44:07 -返回值 : main
2019-04-03 10:44:16 -==>  Preparing: select distinct m.perms from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id = ur.role_id where ur.user_id = ? 
2019-04-03 10:44:16 -==> Parameters: 1(Long)
2019-04-03 10:44:16 -<==      Total: 90
2019-04-03 10:44:16 -请求地址 : http://localhost:8081/moneyList/moneyList
2019-04-03 10:44:16 -HTTP METHOD : GET
2019-04-03 10:44:16 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.MoneyList
2019-04-03 10:44:16 -参数 : []
2019-04-03 10:44:16 -耗时 : 0
2019-04-03 10:44:16 -返回值 : /moneyList/moneyList
2019-04-03 10:44:21 -请求地址 : http://localhost:8081/system/sysDept/treeView
2019-04-03 10:44:21 -HTTP METHOD : GET
2019-04-03 10:44:21 -CLASS_METHOD : com.bootdo.system.controller.DeptController.treeView
2019-04-03 10:44:21 -参数 : []
2019-04-03 10:44:21 -耗时 : 1
2019-04-03 10:44:21 -返回值 : system/dept/deptTree
2019-04-03 10:44:21 -请求地址 : http://localhost:8081/system/sysDept/tree
2019-04-03 10:44:21 -HTTP METHOD : GET
2019-04-03 10:44:21 -CLASS_METHOD : com.bootdo.system.controller.DeptController.tree
2019-04-03 10:44:21 -参数 : []
2019-04-03 10:44:21 -==>  Preparing: select `dept_id`,`parent_id`,`name`,`order_num`,`del_flag` from sys_dept order by dept_id desc 
2019-04-03 10:44:21 -==> Parameters: 
2019-04-03 10:44:21 -<==      Total: 3
2019-04-03 10:44:21 -耗时 : 27
2019-04-03 10:44:21 -返回值 : {"checked":false,"children":[{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"3","parentId":"1","state":{"opened":true},"text":"牙星"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"2","parentId":"1","state":{"opened":true},"text":"五九"}],"hasChildren":true,"hasParent":false,"id":"1","parentId":"0","state":{"opened":true},"text":"总公司"}
2019-04-03 10:44:27 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUser
2019-04-03 10:44:27 -HTTP METHOD : POST
2019-04-03 10:44:27 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.queryAllUser
2019-04-03 10:44:27 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@79efc555]
2019-04-03 10:44:27 -==>  Preparing: select COUNT(*) number, user_id, user_name, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, elec_type usertype, elec_price userprice, elec_amount userarea, elec_cost usercost, elec_Sum usersum from elec WHERE user_Id = ? and create_time = ? UNION ALL select COUNT(*) number, user_id, user_name, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, heat_type usertype, heat_price userprice, heat_area userarea, heat_cost usercost, heat_Sum usersum from heat WHERE user_Id = ? and create_time = ? UNION ALL select COUNT(*) number, user_id, user_name, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, water_type usertype, water_price userprice, water_price userarea, water_price usercost, water_Sum usersum from water WHERE user_Id = ? and create_time = ? 
2019-04-03 10:44:27 -==> Parameters: 1-0004(String), 2019-02(String), 1-0004(String), 2019-02(String), 1-0004(String), 2019-02(String)
2019-04-03 10:44:27 -WebSocketSession[1 current WS(1)-HttpStream(0)-HttpPoll(0), 1 total, 0 closed abnormally (0 connect failure, 0 send limit, 0 transport error)], stompSubProtocol[processed CONNECT(1)-CONNECTED(1)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 8, active threads = 0, queued tasks = 0, completed tasks = 9], outboundChannelpool size = 1, active threads = 0, queued tasks = 0, completed tasks = 1], sockJsScheduler[pool size = 4, active threads = 1, queued tasks = 2, completed tasks = 5]
2019-04-03 10:44:28 -<==      Total: 3
2019-04-03 10:44:28 -耗时 : 338
2019-04-03 10:44:28 -返回值 : [com.bootdo.moneyList.damain.MoneyListDO@5d207b50, com.bootdo.moneyList.damain.MoneyListDO@60c26164, com.bootdo.moneyList.damain.MoneyListDO@4f41411f]
2019-04-03 10:44:30 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUser
2019-04-03 10:44:30 -HTTP METHOD : POST
2019-04-03 10:44:30 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.queryAllUser
2019-04-03 10:44:30 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@79823bd4]
2019-04-03 10:44:30 -==>  Preparing: select COUNT(*) number, user_id, user_name, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, elec_type usertype, elec_price userprice, elec_amount userarea, elec_cost usercost, elec_Sum usersum from elec WHERE user_Id = ? and create_time = ? UNION ALL select COUNT(*) number, user_id, user_name, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, heat_type usertype, heat_price userprice, heat_area userarea, heat_cost usercost, heat_Sum usersum from heat WHERE user_Id = ? and create_time = ? UNION ALL select COUNT(*) number, user_id, user_name, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, water_type usertype, water_price userprice, water_price userarea, water_price usercost, water_Sum usersum from water WHERE user_Id = ? and create_time = ? 
2019-04-03 10:44:30 -==> Parameters: 1-0004(String), 2019-02(String), 1-0004(String), 2019-02(String), 1-0004(String), 2019-02(String)
2019-04-03 10:44:30 -<==      Total: 3
2019-04-03 10:44:30 -耗时 : 10
2019-04-03 10:44:30 -返回值 : [com.bootdo.moneyList.damain.MoneyListDO@20ec6fc2, com.bootdo.moneyList.damain.MoneyListDO@11bd8e05, com.bootdo.moneyList.damain.MoneyListDO@43dad70e]
2019-04-03 10:44:32 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUser
2019-04-03 10:44:32 -HTTP METHOD : POST
2019-04-03 10:44:32 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.queryAllUser
2019-04-03 10:44:32 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@50108c21]
2019-04-03 10:44:32 -==>  Preparing: select COUNT(*) number, user_id, user_name, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, elec_type usertype, elec_price userprice, elec_amount userarea, elec_cost usercost, elec_Sum usersum from elec WHERE user_Id = ? and create_time = ? UNION ALL select COUNT(*) number, user_id, user_name, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, heat_type usertype, heat_price userprice, heat_area userarea, heat_cost usercost, heat_Sum usersum from heat WHERE user_Id = ? and create_time = ? UNION ALL select COUNT(*) number, user_id, user_name, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, water_type usertype, water_price userprice, water_price userarea, water_price usercost, water_Sum usersum from water WHERE user_Id = ? and create_time = ? 
2019-04-03 10:44:32 -==> Parameters: 1-0004(String), 2019-02(String), 1-0004(String), 2019-02(String), 1-0004(String), 2019-02(String)
2019-04-03 10:44:32 -<==      Total: 3
2019-04-03 10:44:32 -耗时 : 6
2019-04-03 10:44:32 -返回值 : [com.bootdo.moneyList.damain.MoneyListDO@25a19c28, com.bootdo.moneyList.damain.MoneyListDO@1f318762, com.bootdo.moneyList.damain.MoneyListDO@4b146121]
2019-04-03 10:44:36 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUser
2019-04-03 10:44:36 -HTTP METHOD : POST
2019-04-03 10:44:36 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.queryAllUser
2019-04-03 10:44:36 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@240b32ec]
2019-04-03 10:44:36 -==>  Preparing: select COUNT(*) number, user_id, user_name, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, elec_type usertype, elec_price userprice, elec_amount userarea, elec_cost usercost, elec_Sum usersum from elec WHERE user_Id = ? and create_time = ? UNION ALL select COUNT(*) number, user_id, user_name, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, heat_type usertype, heat_price userprice, heat_area userarea, heat_cost usercost, heat_Sum usersum from heat WHERE user_Id = ? and create_time = ? UNION ALL select COUNT(*) number, user_id, user_name, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, water_type usertype, water_price userprice, water_price userarea, water_price usercost, water_Sum usersum from water WHERE user_Id = ? and create_time = ? 
2019-04-03 10:44:36 -==> Parameters: 1-0004(String), 2019-02(String), 1-0004(String), 2019-02(String), 1-0004(String), 2019-02(String)
2019-04-03 10:44:36 -<==      Total: 3
2019-04-03 10:44:36 -耗时 : 7
2019-04-03 10:44:36 -返回值 : [com.bootdo.moneyList.damain.MoneyListDO@5804e42d, com.bootdo.moneyList.damain.MoneyListDO@2263ef14, com.bootdo.moneyList.damain.MoneyListDO@5f0225e6]
2019-04-03 10:44:38 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUser
2019-04-03 10:44:38 -HTTP METHOD : POST
2019-04-03 10:44:38 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.queryAllUser
2019-04-03 10:44:38 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@4f97537f]
2019-04-03 10:44:38 -==>  Preparing: select COUNT(*) number, user_id, user_name, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, elec_type usertype, elec_price userprice, elec_amount userarea, elec_cost usercost, elec_Sum usersum from elec WHERE user_Id = ? and create_time = ? UNION ALL select COUNT(*) number, user_id, user_name, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, heat_type usertype, heat_price userprice, heat_area userarea, heat_cost usercost, heat_Sum usersum from heat WHERE user_Id = ? and create_time = ? UNION ALL select COUNT(*) number, user_id, user_name, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, water_type usertype, water_price userprice, water_price userarea, water_price usercost, water_Sum usersum from water WHERE user_Id = ? and create_time = ? 
2019-04-03 10:44:38 -==> Parameters: 1-0004(String), 2019-02(String), 1-0004(String), 2019-02(String), 1-0004(String), 2019-02(String)
2019-04-03 10:44:38 -<==      Total: 3
2019-04-03 10:44:38 -耗时 : 5
2019-04-03 10:44:38 -返回值 : [com.bootdo.moneyList.damain.MoneyListDO@701982af, com.bootdo.moneyList.damain.MoneyListDO@5e03b78, com.bootdo.moneyList.damain.MoneyListDO@7ecb0044]
2019-04-03 10:45:02 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUserName
2019-04-03 10:45:02 -HTTP METHOD : POST
2019-04-03 10:45:02 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.getAllUserName
2019-04-03 10:45:02 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@4b463c49]
2019-04-03 10:45:02 -==>  Preparing: select user_name from elec WHERE user_name like CONCAT(CONCAT('%',?,'%')) UNION ALL select user_name from heat WHERE user_name like CONCAT(CONCAT('%',?,'%')) UNION ALL select user_name from water WHERE user_name like CONCAT(CONCAT('%',?,'%')) 
2019-04-03 10:45:02 -==> Parameters: 姜(String), 姜(String), 姜(String)
2019-04-03 10:45:02 -<==      Total: 3
2019-04-03 10:45:02 -耗时 : 22
2019-04-03 10:45:02 -返回值 : [com.bootdo.moneyList.damain.MoneyListDO@7725459e, com.bootdo.moneyList.damain.MoneyListDO@6d21a5b9, com.bootdo.moneyList.damain.MoneyListDO@33e148de]
2019-04-03 10:45:03 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUser
2019-04-03 10:45:03 -HTTP METHOD : POST
2019-04-03 10:45:03 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.queryAllUser
2019-04-03 10:45:03 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@29ab774a]
2019-04-03 10:45:03 -==>  Preparing: select COUNT(*) number, user_id, user_name, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, elec_type usertype, elec_price userprice, elec_amount userarea, elec_cost usercost, elec_Sum usersum from elec WHERE user_Id = ? and create_time = ? and user_name = ? UNION ALL select COUNT(*) number, user_id, user_name, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, heat_type usertype, heat_price userprice, heat_area userarea, heat_cost usercost, heat_Sum usersum from heat WHERE user_Id = ? and create_time = ? and user_name = ? UNION ALL select COUNT(*) number, user_id, user_name, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, water_type usertype, water_price userprice, water_price userarea, water_price usercost, water_Sum usersum from water WHERE user_Id = ? and create_time = ? and user_name = ? 
2019-04-03 10:45:03 -==> Parameters: 1-0004(String), 2019-02(String), 姜海龙(String), 1-0004(String), 2019-02(String), 姜海龙(String), 1-0004(String), 2019-02(String), 姜海龙(String)
2019-04-03 10:45:03 -<==      Total: 3
2019-04-03 10:45:03 -耗时 : 27
2019-04-03 10:45:03 -返回值 : [com.bootdo.moneyList.damain.MoneyListDO@27879986, com.bootdo.moneyList.damain.MoneyListDO@45a05b19, com.bootdo.moneyList.damain.MoneyListDO@31e8e151]
2019-04-03 10:45:11 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUserName
2019-04-03 10:45:11 -HTTP METHOD : POST
2019-04-03 10:45:11 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.getAllUserName
2019-04-03 10:45:11 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@7041131]
2019-04-03 10:45:11 -==>  Preparing: select user_name from elec WHERE user_name like CONCAT(CONCAT('%',?,'%')) UNION ALL select user_name from heat WHERE user_name like CONCAT(CONCAT('%',?,'%')) UNION ALL select user_name from water WHERE user_name like CONCAT(CONCAT('%',?,'%')) 
2019-04-03 10:45:11 -==> Parameters: 李(String), 李(String), 李(String)
2019-04-03 10:45:11 -<==      Total: 1
2019-04-03 10:45:11 -耗时 : 6
2019-04-03 10:45:11 -返回值 : [com.bootdo.moneyList.damain.MoneyListDO@48dcb537]
2019-04-03 10:45:11 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUser
2019-04-03 10:45:11 -HTTP METHOD : POST
2019-04-03 10:45:11 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.queryAllUser
2019-04-03 10:45:11 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@5cabb523]
2019-04-03 10:45:11 -==>  Preparing: select COUNT(*) number, user_id, user_name, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, elec_type usertype, elec_price userprice, elec_amount userarea, elec_cost usercost, elec_Sum usersum from elec WHERE user_Id = ? and create_time = ? and user_name = ? UNION ALL select COUNT(*) number, user_id, user_name, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, heat_type usertype, heat_price userprice, heat_area userarea, heat_cost usercost, heat_Sum usersum from heat WHERE user_Id = ? and create_time = ? and user_name = ? UNION ALL select COUNT(*) number, user_id, user_name, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, water_type usertype, water_price userprice, water_price userarea, water_price usercost, water_Sum usersum from water WHERE user_Id = ? and create_time = ? and user_name = ? 
2019-04-03 10:45:11 -==> Parameters: 1-0004(String), 2019-02(String), 李文英(String), 1-0004(String), 2019-02(String), 李文英(String), 1-0004(String), 2019-02(String), 李文英(String)
2019-04-03 10:45:11 -<==      Total: 3
2019-04-03 10:45:11 -耗时 : 6
2019-04-03 10:45:11 -返回值 : [com.bootdo.moneyList.damain.MoneyListDO@526a018d, com.bootdo.moneyList.damain.MoneyListDO@534b41de, com.bootdo.moneyList.damain.MoneyListDO@52c8f439]
2019-04-03 10:45:14 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUserName
2019-04-03 10:45:14 -HTTP METHOD : POST
2019-04-03 10:45:14 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.getAllUserName
2019-04-03 10:45:14 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@71193329]
2019-04-03 10:45:14 -==>  Preparing: select user_name from elec WHERE user_name like CONCAT(CONCAT('%',?,'%')) UNION ALL select user_name from heat WHERE user_name like CONCAT(CONCAT('%',?,'%')) UNION ALL select user_name from water WHERE user_name like CONCAT(CONCAT('%',?,'%')) 
2019-04-03 10:45:14 -==> Parameters: 李文英(String), 李文英(String), 李文英(String)
2019-04-03 10:45:14 -<==      Total: 1
2019-04-03 10:45:14 -耗时 : 3
2019-04-03 10:45:14 -返回值 : [com.bootdo.moneyList.damain.MoneyListDO@393ee901]
2019-04-03 10:45:15 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUser
2019-04-03 10:45:15 -HTTP METHOD : POST
2019-04-03 10:45:15 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.queryAllUser
2019-04-03 10:45:15 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@652ed276]
2019-04-03 10:45:15 -==>  Preparing: select COUNT(*) number, user_id, user_name, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, elec_type usertype, elec_price userprice, elec_amount userarea, elec_cost usercost, elec_Sum usersum from elec WHERE user_Id = ? and create_time = ? and user_name = ? UNION ALL select COUNT(*) number, user_id, user_name, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, heat_type usertype, heat_price userprice, heat_area userarea, heat_cost usercost, heat_Sum usersum from heat WHERE user_Id = ? and create_time = ? and user_name = ? UNION ALL select COUNT(*) number, user_id, user_name, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, water_type usertype, water_price userprice, water_price userarea, water_price usercost, water_Sum usersum from water WHERE user_Id = ? and create_time = ? and user_name = ? 
2019-04-03 10:45:15 -==> Parameters: 1-0004(String), 2019-02(String), 李文英(String), 1-0004(String), 2019-02(String), 李文英(String), 1-0004(String), 2019-02(String), 李文英(String)
2019-04-03 10:45:15 -<==      Total: 3
2019-04-03 10:45:15 -耗时 : 6
2019-04-03 10:45:15 -返回值 : [com.bootdo.moneyList.damain.MoneyListDO@1e4239a8, com.bootdo.moneyList.damain.MoneyListDO@684b527d, com.bootdo.moneyList.damain.MoneyListDO@7be58060]
2019-04-03 10:45:15 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUserName
2019-04-03 10:45:15 -HTTP METHOD : POST
2019-04-03 10:45:15 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.getAllUserName
2019-04-03 10:45:15 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@63b839ec]
2019-04-03 10:45:15 -==>  Preparing: select user_name from elec WHERE user_name like CONCAT(CONCAT('%',?,'%')) UNION ALL select user_name from heat WHERE user_name like CONCAT(CONCAT('%',?,'%')) UNION ALL select user_name from water WHERE user_name like CONCAT(CONCAT('%',?,'%')) 
2019-04-03 10:45:15 -==> Parameters: 李文英(String), 李文英(String), 李文英(String)
2019-04-03 10:45:15 -<==      Total: 1
2019-04-03 10:45:15 -耗时 : 4
2019-04-03 10:45:15 -返回值 : [com.bootdo.moneyList.damain.MoneyListDO@21c4cbfd]
2019-04-03 10:45:16 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUser
2019-04-03 10:45:16 -HTTP METHOD : POST
2019-04-03 10:45:16 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.queryAllUser
2019-04-03 10:45:16 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@346cb54]
2019-04-03 10:45:16 -==>  Preparing: select COUNT(*) number, user_id, user_name, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, elec_type usertype, elec_price userprice, elec_amount userarea, elec_cost usercost, elec_Sum usersum from elec WHERE user_Id = ? and create_time = ? and user_name = ? UNION ALL select COUNT(*) number, user_id, user_name, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, heat_type usertype, heat_price userprice, heat_area userarea, heat_cost usercost, heat_Sum usersum from heat WHERE user_Id = ? and create_time = ? and user_name = ? UNION ALL select COUNT(*) number, user_id, user_name, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, water_type usertype, water_price userprice, water_price userarea, water_price usercost, water_Sum usersum from water WHERE user_Id = ? and create_time = ? and user_name = ? 
2019-04-03 10:45:16 -==> Parameters: 1-0004(String), 2019-02(String), 李文英(String), 1-0004(String), 2019-02(String), 李文英(String), 1-0004(String), 2019-02(String), 李文英(String)
2019-04-03 10:45:16 -<==      Total: 3
2019-04-03 10:45:16 -耗时 : 6
2019-04-03 10:45:16 -返回值 : [com.bootdo.moneyList.damain.MoneyListDO@3b49fa04, com.bootdo.moneyList.damain.MoneyListDO@1d260409, com.bootdo.moneyList.damain.MoneyListDO@288f7092]
2019-04-03 10:45:17 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUserName
2019-04-03 10:45:17 -HTTP METHOD : POST
2019-04-03 10:45:17 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.getAllUserName
2019-04-03 10:45:17 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@4c936822]
2019-04-03 10:45:17 -==>  Preparing: select user_name from elec WHERE user_name like CONCAT(CONCAT('%',?,'%')) UNION ALL select user_name from heat WHERE user_name like CONCAT(CONCAT('%',?,'%')) UNION ALL select user_name from water WHERE user_name like CONCAT(CONCAT('%',?,'%')) 
2019-04-03 10:45:17 -==> Parameters: 李文英(String), 李文英(String), 李文英(String)
2019-04-03 10:45:17 -<==      Total: 1
2019-04-03 10:45:17 -耗时 : 3
2019-04-03 10:45:17 -返回值 : [com.bootdo.moneyList.damain.MoneyListDO@d903f5f]
2019-04-03 10:45:19 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUser
2019-04-03 10:45:19 -HTTP METHOD : POST
2019-04-03 10:45:19 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.queryAllUser
2019-04-03 10:45:19 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@118ad418]
2019-04-03 10:45:19 -==>  Preparing: select COUNT(*) number, user_id, user_name, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, elec_type usertype, elec_price userprice, elec_amount userarea, elec_cost usercost, elec_Sum usersum from elec WHERE user_Id = ? and create_time = ? and user_name = ? UNION ALL select COUNT(*) number, user_id, user_name, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, heat_type usertype, heat_price userprice, heat_area userarea, heat_cost usercost, heat_Sum usersum from heat WHERE user_Id = ? and create_time = ? and user_name = ? UNION ALL select COUNT(*) number, user_id, user_name, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, water_type usertype, water_price userprice, water_price userarea, water_price usercost, water_Sum usersum from water WHERE user_Id = ? and create_time = ? and user_name = ? 
2019-04-03 10:45:19 -==> Parameters: 1-0004(String), 2019-02(String), 李文英(String), 1-0004(String), 2019-02(String), 李文英(String), 1-0004(String), 2019-02(String), 李文英(String)
2019-04-03 10:45:19 -<==      Total: 3
2019-04-03 10:45:19 -耗时 : 5
2019-04-03 10:45:19 -返回值 : [com.bootdo.moneyList.damain.MoneyListDO@4124ed76, com.bootdo.moneyList.damain.MoneyListDO@120a22df, com.bootdo.moneyList.damain.MoneyListDO@55e70e92]
2019-04-03 10:45:21 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUserName
2019-04-03 10:45:21 -HTTP METHOD : POST
2019-04-03 10:45:21 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.getAllUserName
2019-04-03 10:45:21 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@437031b3]
2019-04-03 10:45:21 -==>  Preparing: select user_name from elec WHERE user_name like CONCAT(CONCAT('%',?,'%')) UNION ALL select user_name from heat WHERE user_name like CONCAT(CONCAT('%',?,'%')) UNION ALL select user_name from water WHERE user_name like CONCAT(CONCAT('%',?,'%')) 
2019-04-03 10:45:21 -==> Parameters: 李文英(String), 李文英(String), 李文英(String)
2019-04-03 10:45:21 -<==      Total: 1
2019-04-03 10:45:21 -耗时 : 4
2019-04-03 10:45:21 -返回值 : [com.bootdo.moneyList.damain.MoneyListDO@5af7ef95]
2019-04-03 10:45:22 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUserName
2019-04-03 10:45:22 -HTTP METHOD : POST
2019-04-03 10:45:22 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.getAllUserName
2019-04-03 10:45:22 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@4459a691]
2019-04-03 10:45:22 -==>  Preparing: select user_name from elec WHERE user_name like CONCAT(CONCAT('%',?,'%')) UNION ALL select user_name from heat WHERE user_name like CONCAT(CONCAT('%',?,'%')) UNION ALL select user_name from water WHERE user_name like CONCAT(CONCAT('%',?,'%')) 
2019-04-03 10:45:22 -==> Parameters: 李文英(String), 李文英(String), 李文英(String)
2019-04-03 10:45:22 -<==      Total: 1
2019-04-03 10:45:22 -耗时 : 5
2019-04-03 10:45:22 -返回值 : [com.bootdo.moneyList.damain.MoneyListDO@3f8994db]
2019-04-03 10:45:31 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUserName
2019-04-03 10:45:31 -HTTP METHOD : POST
2019-04-03 10:45:31 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.getAllUserName
2019-04-03 10:45:31 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@1861574]
2019-04-03 10:45:31 -==>  Preparing: select user_name from elec WHERE user_name like CONCAT(CONCAT('%',?,'%')) UNION ALL select user_name from heat WHERE user_name like CONCAT(CONCAT('%',?,'%')) UNION ALL select user_name from water WHERE user_name like CONCAT(CONCAT('%',?,'%')) 
2019-04-03 10:45:31 -==> Parameters: 张(String), 张(String), 张(String)
2019-04-03 10:45:31 -<==      Total: 0
2019-04-03 10:45:31 -耗时 : 3
2019-04-03 10:45:31 -返回值 : []
2019-04-03 10:45:32 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUserName
2019-04-03 10:45:32 -HTTP METHOD : POST
2019-04-03 10:45:32 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.getAllUserName
2019-04-03 10:45:32 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@3707d249]
2019-04-03 10:45:32 -==>  Preparing: select user_name from elec WHERE user_name like CONCAT(CONCAT('%',?,'%')) UNION ALL select user_name from heat WHERE user_name like CONCAT(CONCAT('%',?,'%')) UNION ALL select user_name from water WHERE user_name like CONCAT(CONCAT('%',?,'%')) 
2019-04-03 10:45:32 -==> Parameters: 张(String), 张(String), 张(String)
2019-04-03 10:45:32 -<==      Total: 0
2019-04-03 10:45:32 -耗时 : 4
2019-04-03 10:45:32 -返回值 : []
2019-04-03 10:49:21 -请求地址 : http://localhost:8081/index
2019-04-03 10:49:21 -HTTP METHOD : GET
2019-04-03 10:49:21 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2019-04-03 10:49:21 -参数 : [{}]
2019-04-03 10:49:21 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2019-04-03 10:49:21 -==> Parameters: 1(Long)
2019-04-03 10:49:21 -<==      Total: 46
2019-04-03 10:49:21 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2019-04-03 10:49:21 -==> Parameters: 138(Long)
2019-04-03 10:49:21 -<==      Total: 1
2019-04-03 10:49:21 -耗时 : 29
2019-04-03 10:49:21 -返回值 : index_v1
2019-04-03 10:49:21 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 10:49:21 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 30(Integer), com.bootdo.system.controller.LoginController.index()(String), {"menus":[{"attributes":{"icon":"fa fa-money","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-money","url":"/moneyList/moneyList"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"102","parentId":"106","text":"现金缴费"},{"attributes":{"icon":"fa fa-book","url":"/moneyLog/elecLog"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"107","parentId":"106","text":"缴费记录"}],"hasChildren":true,"hasParent":false,"id":"106","parentId":"0","text":"收费管理"},{"attributes":{"icon":"fa fa-lightbulb-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/elec/elec"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"121","parentId":"103","text":"电费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"elec/elecInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"122","parentId":"103","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"elec/elecUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"123","parentId":"103","text":"电表上传"},{"attributes":{"icon":"fa fa-cc","url":"/elec/elecPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"124","parentId":"103","text":"电价管理"}],"hasChildren":true,"hasParent":false,"id":"103","parentId":"0","text":"电费管理"},{"attributes":{"icon":"fa fa-tint","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/water/water"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"117","parentId":"105","text":"水费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"water/waterInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"118","parentId":"105","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"water/waterUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"119","parentId":"105","text":"水费生成"},{"attributes":{"icon":"fa fa-cc","url":"/water/waterPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"120","parentId":"105","text":"水价管理"}],"hasChildren":true,"hasParent":false,"id":"105","parentId":"0","text":"水费管理"},{"attributes":{"icon":"fa fa-fire","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/heat/heat"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"113","parentId":"104","text":"暖费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"heat/heatInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"114","parentId":"104","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"heat/heatUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"115","parentId":"104","text":"暖费生成"},{"attributes":{"icon":"","url":"/heat/heatPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"116","parentId":"104","text":"暖价管理"}],"hasChildren":true,"hasParent":false,"id":"104","parentId":"0","text":"暖费管理"},{"attributes":{"icon":"fa fa-vcard-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-bomb","url":"/print/print"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"149","parentId":"108","text":"票据记录"}],"hasChildren":true,"hasParent":false,"id":"108","parentId":"0","text":"票据管理"},{"attributes":{"icon":"fa fa-bar-chart","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-area-chart","url":"/chart/graph_echarts.html"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","text":"百度chart"},{"attributes":{"icon":"fa fa-sun-o","url":"charts/countDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"109","parentId":"97","text":"日统计报表"},{"attributes":{"icon":"fa fa-registered","url":"charts/countMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"110","parentId":"97","text":"月统计报表"},{"attributes":{"icon":"fa fa-support","url":"charts/countYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"111","parentId":"97","text":"年统计报表"},{"attributes":{"icon":"fa fa-money","url":"charts/countOwe"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"155","parentId":"97","text":"欠费报表图"},{"attributes":{"icon":"fa fa-tachometer","url":"charts/countRun"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"112","parentId":"97","text":"走势图报表"}],"hasChildren":true,"hasParent":false,"id":"97","parentId":"0","text":"统计管理"},{"attributes":{"icon":"fa fa-bars","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-book","url":"/common/dict"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"78","parentId":"1","text":"数据字典"},{"attributes":{"icon":"fa fa-folder-open","url":"/common/sysFile"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"71","parentId":"1","text":"文件管理"}],"h(String), 127.0.0.1(String), 2019-04-03 10:49:21.652(Timestamp)
2019-04-03 10:49:21 -<==    Updates: 1
2019-04-03 10:49:22 -请求地址 : http://localhost:8081/main
2019-04-03 10:49:22 -HTTP METHOD : GET
2019-04-03 10:49:22 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 10:49:22 -参数 : []
2019-04-03 10:49:22 -耗时 : 0
2019-04-03 10:49:22 -返回值 : main
2019-04-03 10:49:22 -请求地址 : http://localhost:8081/oa/notify/message
2019-04-03 10:49:22 -HTTP METHOD : GET
2019-04-03 10:49:22 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2019-04-03 10:49:22 -参数 : []
2019-04-03 10:49:22 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2019-04-03 10:49:22 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2019-04-03 10:49:22 -<==      Total: 0
2019-04-03 10:49:22 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2019-04-03 10:49:22 -==> Parameters: 1(Long), 0(String)
2019-04-03 10:49:22 -<==      Total: 1
2019-04-03 10:49:22 -耗时 : 7
2019-04-03 10:49:22 -返回值 : com.bootdo.common.utils.PageUtils@29e08aa5
2019-04-03 10:49:22 -请求地址 : http://localhost:8081/main
2019-04-03 10:49:22 -HTTP METHOD : GET
2019-04-03 10:49:22 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 10:49:22 -参数 : []
2019-04-03 10:49:22 -耗时 : 1
2019-04-03 10:49:22 -返回值 : main
2019-04-03 10:49:24 -请求地址 : http://localhost:8081/moneyList/moneyList
2019-04-03 10:49:24 -HTTP METHOD : GET
2019-04-03 10:49:24 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.MoneyList
2019-04-03 10:49:24 -参数 : []
2019-04-03 10:49:24 -耗时 : 0
2019-04-03 10:49:24 -返回值 : /moneyList/moneyList
2019-04-03 10:49:29 -请求地址 : http://localhost:8081/system/sysDept/treeView
2019-04-03 10:49:29 -HTTP METHOD : GET
2019-04-03 10:49:29 -CLASS_METHOD : com.bootdo.system.controller.DeptController.treeView
2019-04-03 10:49:29 -参数 : []
2019-04-03 10:49:29 -耗时 : 1
2019-04-03 10:49:29 -返回值 : system/dept/deptTree
2019-04-03 10:49:30 -请求地址 : http://localhost:8081/system/sysDept/tree
2019-04-03 10:49:30 -HTTP METHOD : GET
2019-04-03 10:49:30 -CLASS_METHOD : com.bootdo.system.controller.DeptController.tree
2019-04-03 10:49:30 -参数 : []
2019-04-03 10:49:30 -==>  Preparing: select `dept_id`,`parent_id`,`name`,`order_num`,`del_flag` from sys_dept order by dept_id desc 
2019-04-03 10:49:30 -==> Parameters: 
2019-04-03 10:49:30 -<==      Total: 3
2019-04-03 10:49:30 -耗时 : 4
2019-04-03 10:49:30 -返回值 : {"checked":false,"children":[{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"3","parentId":"1","state":{"opened":true},"text":"牙星"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"2","parentId":"1","state":{"opened":true},"text":"五九"}],"hasChildren":true,"hasParent":false,"id":"1","parentId":"0","state":{"opened":true},"text":"总公司"}
2019-04-03 10:49:35 -请求地址 : http://localhost:8081/system/sysDept/treeView
2019-04-03 10:49:35 -HTTP METHOD : GET
2019-04-03 10:49:35 -CLASS_METHOD : com.bootdo.system.controller.DeptController.treeView
2019-04-03 10:49:35 -参数 : []
2019-04-03 10:49:35 -耗时 : 1
2019-04-03 10:49:35 -返回值 : system/dept/deptTree
2019-04-03 10:49:35 -请求地址 : http://localhost:8081/system/sysDept/tree
2019-04-03 10:49:35 -HTTP METHOD : GET
2019-04-03 10:49:35 -CLASS_METHOD : com.bootdo.system.controller.DeptController.tree
2019-04-03 10:49:35 -参数 : []
2019-04-03 10:49:35 -==>  Preparing: select `dept_id`,`parent_id`,`name`,`order_num`,`del_flag` from sys_dept order by dept_id desc 
2019-04-03 10:49:35 -==> Parameters: 
2019-04-03 10:49:35 -<==      Total: 3
2019-04-03 10:49:35 -耗时 : 3
2019-04-03 10:49:35 -返回值 : {"checked":false,"children":[{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"3","parentId":"1","state":{"opened":true},"text":"牙星"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"2","parentId":"1","state":{"opened":true},"text":"五九"}],"hasChildren":true,"hasParent":false,"id":"1","parentId":"0","state":{"opened":true},"text":"总公司"}
2019-04-03 10:49:38 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUser
2019-04-03 10:49:38 -HTTP METHOD : POST
2019-04-03 10:49:38 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.queryAllUser
2019-04-03 10:49:38 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@17341c4a]
2019-04-03 10:49:38 -==>  Preparing: select COUNT(*) number, user_id, user_name, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, elec_type usertype, elec_price userprice, elec_amount userarea, elec_cost usercost, elec_Sum usersum from elec WHERE user_Id = ? and create_time = ? UNION ALL select COUNT(*) number, user_id, user_name, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, heat_type usertype, heat_price userprice, heat_area userarea, heat_cost usercost, heat_Sum usersum from heat WHERE user_Id = ? and create_time = ? UNION ALL select COUNT(*) number, user_id, user_name, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, water_type usertype, water_price userprice, water_price userarea, water_price usercost, water_Sum usersum from water WHERE user_Id = ? and create_time = ? 
2019-04-03 10:49:38 -==> Parameters: 1-0004(String), 2019-02(String), 1-0004(String), 2019-02(String), 1-0004(String), 2019-02(String)
2019-04-03 10:49:38 -<==      Total: 3
2019-04-03 10:49:38 -耗时 : 4
2019-04-03 10:49:38 -返回值 : [com.bootdo.moneyList.damain.MoneyListDO@490d71ae, com.bootdo.moneyList.damain.MoneyListDO@12301f68, com.bootdo.moneyList.damain.MoneyListDO@25518728]
2019-04-03 10:50:07 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUser
2019-04-03 10:50:07 -HTTP METHOD : POST
2019-04-03 10:50:07 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.queryAllUser
2019-04-03 10:50:07 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@3f5903a6]
2019-04-03 10:50:07 -==>  Preparing: select COUNT(*) number, user_id, user_name, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, elec_type usertype, elec_price userprice, elec_amount userarea, elec_cost usercost, elec_Sum usersum from elec UNION ALL select COUNT(*) number, user_id, user_name, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, heat_type usertype, heat_price userprice, heat_area userarea, heat_cost usercost, heat_Sum usersum from heat UNION ALL select COUNT(*) number, user_id, user_name, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, water_type usertype, water_price userprice, water_price userarea, water_price usercost, water_Sum usersum from water 
2019-04-03 10:50:07 -==> Parameters: 
2019-04-03 10:50:07 -<==      Total: 3
2019-04-03 10:50:07 -耗时 : 7
2019-04-03 10:50:07 -返回值 : [com.bootdo.moneyList.damain.MoneyListDO@61b6153d, com.bootdo.moneyList.damain.MoneyListDO@66cf3f03, com.bootdo.moneyList.damain.MoneyListDO@117c444f]
2019-04-03 11:08:04 -Starting BootdoApplication on ZJZL-20180906VX with PID 15204 (D:\eclipse2018-work\bootdo\target\classes started by Administrator in D:\eclipse2018-work\bootdo)
2019-04-03 11:08:04 -Running with Spring Boot v2.0.3.RELEASE, Spring v5.0.7.RELEASE
2019-04-03 11:08:04 -The following profiles are active: dev
2019-04-03 11:08:04 -Refreshing org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@a38c7fe: startup date [Wed Apr 03 11:08:04 CST 2019]; root of context hierarchy
2019-04-03 11:08:07 -Multiple Spring Data modules found, entering strict repository configuration mode!
2019-04-03 11:08:09 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$99874f6f] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-03 11:08:09 -Bean 'shiroConfig' of type [com.bootdo.system.config.ShiroConfig$$EnhancerBySpringCGLIB$$8be07e16] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-03 11:08:10 -Bean 'userRealm' of type [com.bootdo.system.shiro.UserRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-03 11:08:10 -Bean 'cacheManager2' of type [net.sf.ehcache.CacheManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-03 11:08:10 -Bean 'ehCacheManager' of type [org.apache.shiro.cache.ehcache.EhCacheManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-03 11:08:10 -Cache with name 'com.bootdo.system.shiro.UserRealm.authorizationCache' does not yet exist.  Creating now.
2019-04-03 11:08:10 -Added EhCache named [com.bootdo.system.shiro.UserRealm.authorizationCache]
2019-04-03 11:08:10 -Bean 'sessionDAO' of type [org.apache.shiro.session.mgt.eis.MemorySessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-03 11:08:10 -Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-03 11:08:10 -Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-03 11:08:11 -Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-03 11:08:11 -Tomcat initialized with port(s): 8081 (http)
2019-04-03 11:08:12 -Initializing ProtocolHandler ["http-nio-8081"]
2019-04-03 11:08:12 -Starting service [Tomcat]
2019-04-03 11:08:12 -Starting Servlet Engine: Apache Tomcat/8.5.31
2019-04-03 11:08:12 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [C:\Program Files\Java\jre1.8.0_131\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:/Program Files/Java/jre1.8.0_131/bin/server;C:/Program Files/Java/jre1.8.0_131/bin;C:/Program Files/Java/jre1.8.0_131/lib/amd64;C:\ProgramData\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Windows\System32\OpenSSH\;D:\pbb\pycSafefile\x64;D:\pbb\PBB Reader\x64;C:\Program Files\MySQL\MySQL Utilities 1.6\;D:\MAVEN\apache-maven-3.6.0\bin;D:\GIT\Git\cmd;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;;C:\Users\Administrator\Desktop;;.]
2019-04-03 11:08:12 -Initializing Spring embedded WebApplicationContext
2019-04-03 11:08:12 -Root WebApplicationContext: initialization completed in 8306 ms
2019-04-03 11:08:13 -Mapping filter: 'characterEncodingFilter' to: [/*]
2019-04-03 11:08:13 -Mapping filter: 'hiddenHttpMethodFilter' to: [/*]
2019-04-03 11:08:13 -Mapping filter: 'httpPutFormContentFilter' to: [/*]
2019-04-03 11:08:13 -Mapping filter: 'requestContextFilter' to: [/*]
2019-04-03 11:08:13 -Filter xssFilter was not registered (disabled)
2019-04-03 11:08:13 -Mapping filter: 'webStatFilter' to urls: [/*]
2019-04-03 11:08:13 -Mapping filter: 'shiroFilterFactoryBean' to: [/*]
2019-04-03 11:08:13 -Servlet statViewServlet mapped to [/druid/*]
2019-04-03 11:08:13 -Servlet dispatcherServlet mapped to [/]
2019-04-03 11:08:15 -ApplicationContext registed-->org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@a38c7fe: startup date [Wed Apr 03 11:08:04 CST 2019]; root of context hierarchy
2019-04-03 11:08:16 -Using default implementation for ThreadExecutor
2019-04-03 11:08:16 -Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2019-04-03 11:08:16 -Quartz Scheduler v.2.2.1 created.
2019-04-03 11:08:16 -RAMJobStore initialized.
2019-04-03 11:08:16 -Scheduler meta-data: Quartz Scheduler (v2.2.1) 'schedulerFactoryBean' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2019-04-03 11:08:16 -Quartz scheduler 'schedulerFactoryBean' initialized from an externally provided properties instance.
2019-04-03 11:08:16 -Quartz scheduler version: 2.2.1
2019-04-03 11:08:16 -JobFactory set to: com.bootdo.common.quartz.factory.JobFactory@1cba0321
2019-04-03 11:08:17 -Initializing ExecutorService  'clientInboundChannelExecutor'
2019-04-03 11:08:17 -Initializing ExecutorService  'clientOutboundChannelExecutor'
2019-04-03 11:08:19 -Mapped "{[/charts/countDD/tableDD],methods=[POST]}" onto public java.lang.String com.bootdo.charts.controller.countDDController.tableDD()
2019-04-03 11:08:19 -Mapped "{[/charts/countDD],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.countDDController.countDD()
2019-04-03 11:08:19 -Mapped "{[/charts/countDD/getCountDD],methods=[POST]}" onto public com.bootdo.charts.vo.CountDayVo com.bootdo.charts.controller.countDDController.getCountD(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo,javax.servlet.http.HttpServletRequest)
2019-04-03 11:08:19 -Mapped "{[/charts/countDD/exportCountDD],methods=[GET]}" onto public void com.bootdo.charts.controller.countDDController.exprotElecLog(com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-03 11:08:19 -Mapped "{[/charts/countMM],methods=[GET]}" onto java.lang.String com.bootdo.charts.controller.countMMController.countMM()
2019-04-03 11:08:19 -Mapped "{[/charts/countMM/exportCountMM],methods=[GET]}" onto public void com.bootdo.charts.controller.countMMController.exprotElecLog(com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-03 11:08:19 -Mapped "{[/charts/countMM/getCountMM],methods=[POST]}" onto public void com.bootdo.charts.controller.countMMController.getCountMM(org.springframework.ui.Model,com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo,javax.servlet.http.HttpServletRequest)
2019-04-03 11:08:19 -Mapped "{[/charts/countOwe/getCountOwe],methods=[POST]}" onto public com.bootdo.charts.vo.CountOweVo com.bootdo.charts.controller.countOweController.getCountD(com.bootdo.elec.vo.ElecVo,com.bootdo.water.vo.WaterVo,com.bootdo.heat.vo.HeatVo,javax.servlet.http.HttpServletRequest)
2019-04-03 11:08:19 -Mapped "{[/charts/countOwe],methods=[GET]}" onto java.lang.String com.bootdo.charts.controller.countOweController.countOwe()
2019-04-03 11:08:19 -Mapped "{[/charts/countRun/getCountRun],methods=[POST]}" onto public int com.bootdo.charts.controller.countRunController.getCountD(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo)
2019-04-03 11:08:19 -Mapped "{[/charts/countRun/exportCountRun],methods=[GET]}" onto public void com.bootdo.charts.controller.countRunController.exprotElecLog(com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-03 11:08:19 -Mapped "{[/charts/countRun],methods=[GET]}" onto java.lang.String com.bootdo.charts.controller.countRunController.countRun()
2019-04-03 11:08:19 -Mapped "{[/charts/countYY],methods=[GET]}" onto java.lang.String com.bootdo.charts.controller.countYYController.countYY()
2019-04-03 11:08:19 -Mapped "{[/charts/countYY/getCountYY],methods=[POST]}" onto public int com.bootdo.charts.controller.countYYController.getCountD(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo)
2019-04-03 11:08:19 -Mapped "{[/charts/countYY/exportCountYY],methods=[GET]}" onto public void com.bootdo.charts.controller.countYYController.exprotElecLog(com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-03 11:08:19 -Mapped "{[/common/dict/add],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.add()
2019-04-03 11:08:19 -Mapped "{[/common/dict/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.remove(java.lang.Long)
2019-04-03 11:08:19 -Mapped "{[/common/dict/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.remove(java.lang.Long[])
2019-04-03 11:08:19 -Mapped "{[/common/dict/update]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.update(com.bootdo.common.domain.DictDO)
2019-04-03 11:08:19 -Mapped "{[/common/dict/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.common.controller.DictController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 11:08:19 -Mapped "{[/common/dict/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.save(com.bootdo.common.domain.DictDO)
2019-04-03 11:08:19 -Mapped "{[/common/dict/type],methods=[GET]}" onto public java.util.List<com.bootdo.common.domain.DictDO> com.bootdo.common.controller.DictController.listType()
2019-04-03 11:08:19 -Mapped "{[/common/dict/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 11:08:19 -Mapped "{[/common/dict/list/{type}],methods=[GET]}" onto public java.util.List<com.bootdo.common.domain.DictDO> com.bootdo.common.controller.DictController.listByType(java.lang.String)
2019-04-03 11:08:19 -Mapped "{[/common/dict],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.dict()
2019-04-03 11:08:19 -Mapped "{[/common/dict/add/{type}/{description}],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.addD(org.springframework.ui.Model,java.lang.String,java.lang.String)
2019-04-03 11:08:19 -Mapped "{[/common/sysFile/add],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.FileController.add()
2019-04-03 11:08:19 -Mapped "{[/common/sysFile/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.remove(java.lang.Long,javax.servlet.http.HttpServletRequest)
2019-04-03 11:08:19 -Mapped "{[/common/sysFile/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.remove(java.lang.Long[])
2019-04-03 11:08:19 -Mapped "{[/common/sysFile/update]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.update(com.bootdo.common.domain.FileDO)
2019-04-03 11:08:19 -Mapped "{[/common/sysFile/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.common.controller.FileController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 11:08:19 -Mapped "{[/common/sysFile/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.save(com.bootdo.common.domain.FileDO)
2019-04-03 11:08:19 -Mapped "{[/common/sysFile/info/{id}]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.info(java.lang.Long)
2019-04-03 11:08:19 -Mapped "{[/common/sysFile/edit],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.FileController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 11:08:19 -Mapped "{[/common/sysFile/upload],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.FileController.upload(org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpServletRequest)
2019-04-03 11:08:19 -Mapped "{[/common/sysFile],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.FileController.sysFile(org.springframework.ui.Model)
2019-04-03 11:08:19 -Mapped "{[/common/generator/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.GeneratorController.update(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 11:08:19 -Mapped "{[/common/generator/list],methods=[GET]}" onto java.util.List<java.util.Map<java.lang.String, java.lang.Object>> com.bootdo.common.controller.GeneratorController.list()
2019-04-03 11:08:19 -Mapped "{[/common/generator/code/{tableName}]}" onto public void com.bootdo.common.controller.GeneratorController.code(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String) throws java.io.IOException
2019-04-03 11:08:19 -Mapped "{[/common/generator],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.GeneratorController.generator()
2019-04-03 11:08:19 -Mapped "{[/common/generator/edit],methods=[GET]}" onto public java.lang.String com.bootdo.common.controller.GeneratorController.edit(org.springframework.ui.Model)
2019-04-03 11:08:19 -Mapped "{[/common/generator/batchCode]}" onto public void com.bootdo.common.controller.GeneratorController.batchCode(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String) throws java.io.IOException
2019-04-03 11:08:19 -Mapped "{[/common/job/add],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.JobController.add()
2019-04-03 11:08:19 -Mapped "{[/common/job/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.remove(java.lang.Long)
2019-04-03 11:08:19 -Mapped "{[/common/job/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.remove(java.lang.Long[])
2019-04-03 11:08:19 -Mapped "{[/common/job/update],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.update(com.bootdo.common.domain.TaskDO)
2019-04-03 11:08:19 -Mapped "{[/common/job/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.common.controller.JobController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 11:08:19 -Mapped "{[/common/job/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.save(com.bootdo.common.domain.TaskDO)
2019-04-03 11:08:19 -Mapped "{[/common/job/info/{id}]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.info(java.lang.Long)
2019-04-03 11:08:19 -Mapped "{[/common/job/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.JobController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 11:08:19 -Mapped "{[/common/job/changeJobStatus],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.changeJobStatus(java.lang.Long,java.lang.String)
2019-04-03 11:08:19 -Mapped "{[/common/job],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.JobController.taskScheduleJob()
2019-04-03 11:08:19 -Mapped "{[/common/log/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.LogController.remove(java.lang.Long)
2019-04-03 11:08:19 -Mapped "{[/common/log],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.LogController.log()
2019-04-03 11:08:19 -Mapped "{[/common/log/list],methods=[GET]}" onto com.bootdo.common.domain.PageDO<com.bootdo.common.domain.LogDO> com.bootdo.common.controller.LogController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 11:08:19 -Mapped "{[/common/log/batchRemove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.LogController.batchRemove(java.lang.Long[])
2019-04-03 11:08:19 -Mapped "{[/common/long],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.LongController.Long()
2019-04-03 11:08:19 -Mapped "{[/common/time],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.TimeController.Time()
2019-04-03 11:08:19 -Mapped "{[/error]}" onto public com.bootdo.common.utils.R com.bootdo.common.exception.MainsiteErrorController.handleError(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-04-03 11:08:19 -Mapped "{[/error],produces=[text/html]}" onto public org.springframework.web.servlet.ModelAndView com.bootdo.common.exception.MainsiteErrorController.errorHtml(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-04-03 11:08:19 -Mapped "{[/elec/elec/add],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecController.add()
2019-04-03 11:08:19 -Mapped "{[/elec/elec/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.remove(java.lang.Long)
2019-04-03 11:08:19 -Mapped "{[/elec/elec/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.remove(java.lang.Long[])
2019-04-03 11:08:19 -Mapped "{[/elec/elec/update],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.update(com.bootdo.elec.domain.ElecDO)
2019-04-03 11:08:19 -Mapped "{[/elec/elec/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.elec.controller.ElecController.list(java.util.Map<java.lang.String, java.lang.Object>,com.bootdo.elec.domain.ElecDO)
2019-04-03 11:08:19 -Mapped "{[/elec/elec/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.save(com.bootdo.elec.domain.ElecDO)
2019-04-03 11:08:19 -Mapped "{[/elec/elec/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 11:08:19 -Mapped "{[/elec/elec],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecController.Elec()
2019-04-03 11:08:19 -Mapped "{[/elec/elec/exprotElec],methods=[GET]}" onto public void com.bootdo.elec.controller.ElecController.exprotExcel(com.bootdo.elec.vo.ElecVo,javax.servlet.http.HttpServletResponse)
2019-04-03 11:08:19 -Mapped "{[/elec/elecInto/importElecIntoExcel],methods=[POST]}" onto public java.util.Map<java.lang.String, java.lang.Object> com.bootdo.elec.controller.ElecIntoController.importElecIntoExcel(org.springframework.web.multipart.MultipartFile,com.bootdo.elec.vo.ElecVo) throws java.lang.Exception
2019-04-03 11:08:19 -Mapped "{[/elec/elecInto/exprotElecIntoExcel],methods=[GET]}" onto public void com.bootdo.elec.controller.ElecIntoController.exprotExcel(com.bootdo.elec.vo.ElecVo,javax.servlet.http.HttpServletResponse)
2019-04-03 11:08:19 -Mapped "{[/elec/elecInto],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecIntoController.ElecInto()
2019-04-03 11:08:19 -Mapped "{[/elec/elecPrice/add],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecPriceController.add()
2019-04-03 11:08:19 -Mapped "{[/elec/elecPrice/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecPriceController.remove(java.lang.Long)
2019-04-03 11:08:19 -Mapped "{[/elec/elecPrice/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecPriceController.remove(java.lang.Long[])
2019-04-03 11:08:19 -Mapped "{[/elec/elecPrice/update]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecPriceController.update(com.bootdo.elec.domain.ElecPriceDO)
2019-04-03 11:08:19 -Mapped "{[/elec/elecPrice/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.elec.controller.ElecPriceController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 11:08:19 -Mapped "{[/elec/elecPrice/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecPriceController.save(com.bootdo.elec.domain.ElecPriceDO,com.bootdo.elec.domain.ElecDO)
2019-04-03 11:08:19 -Mapped "{[/elec/elecPrice/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecPriceController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 11:08:19 -Mapped "{[/elec/elecPrice],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecPriceController.ElecPrice()
2019-04-03 11:08:19 -Mapped "{[/elec/elecUpLoad],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecUpLoadController.Elec()
2019-04-03 11:08:19 -Mapped "{[/elec/elecUpLoad/importElecExcel],methods=[POST]}" onto public java.util.Map<java.lang.String, java.lang.Object> com.bootdo.elec.controller.ElecUpLoadController.importElecExcel(org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpServletRequest) throws java.lang.Exception
2019-04-03 11:08:19 -Mapped "{[/heat/heat/add],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatController.add()
2019-04-03 11:08:19 -Mapped "{[/heat/heat/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatController.remove(java.lang.Integer)
2019-04-03 11:08:19 -Mapped "{[/heat/heat/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatController.remove(java.lang.Integer[])
2019-04-03 11:08:19 -Mapped "{[/heat/heat/update]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatController.update(com.bootdo.heat.domain.HeatDO)
2019-04-03 11:08:19 -Mapped "{[/heat/heat/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.heat.controller.HeatController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 11:08:19 -Mapped "{[/heat/heat/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatController.save(com.bootdo.heat.domain.HeatDO)
2019-04-03 11:08:19 -Mapped "{[/heat/heat/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatController.edit(java.lang.Integer,org.springframework.ui.Model)
2019-04-03 11:08:19 -Mapped "{[/heat/heat/exprotHeat],methods=[GET]}" onto public void com.bootdo.heat.controller.HeatController.exprotExcel(com.bootdo.heat.vo.HeatVo,javax.servlet.http.HttpServletResponse)
2019-04-03 11:08:19 -Mapped "{[/heat/heat],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatController.Heat()
2019-04-03 11:08:19 -Mapped "{[/heat/heatInto/exprotHeatIntoExcel],methods=[GET]}" onto public void com.bootdo.heat.controller.HeatIntoController.exprotExcel(com.bootdo.heat.vo.HeatVo,javax.servlet.http.HttpServletResponse)
2019-04-03 11:08:19 -Mapped "{[/heat/heatInto],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatIntoController.HeatInto()
2019-04-03 11:08:19 -Mapped "{[/heat/heatPrice/add],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatPriceController.add()
2019-04-03 11:08:19 -Mapped "{[/heat/heatPrice/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatPriceController.remove(java.lang.Long)
2019-04-03 11:08:19 -Mapped "{[/heat/heatPrice/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatPriceController.remove(java.lang.Long[])
2019-04-03 11:08:19 -Mapped "{[/heat/heatPrice/update]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatPriceController.update(com.bootdo.heat.domain.HeatPriceDO)
2019-04-03 11:08:19 -Mapped "{[/heat/heatPrice/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.heat.controller.HeatPriceController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 11:08:19 -Mapped "{[/heat/heatPrice/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatPriceController.save(com.bootdo.heat.domain.HeatPriceDO)
2019-04-03 11:08:19 -Mapped "{[/heat/heatPrice/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatPriceController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 11:08:19 -Mapped "{[/heat/heatPrice],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatPriceController.HeatPrice()
2019-04-03 11:08:19 -Mapped "{[/heat/heatUpLoad],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatUpLoadController.HeatUpLoad()
2019-04-03 11:08:19 -Mapped "{[/heat/heatUpLoad/importHeatExcel]}" onto public java.lang.String com.bootdo.heat.controller.HeatUpLoadController.importHeatExcel(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)
2019-04-03 11:08:19 -Mapped "{[/heat/heatUpLoad/createHeatExcel],methods=[POST]}" onto public java.lang.String com.bootdo.heat.controller.HeatUpLoadController.createHeatExcel(com.bootdo.heat.domain.HeatDO) throws java.lang.Exception
2019-04-03 11:08:19 -Mapped "{[/heat/heatUpLoad/exprotHeatExcel],methods=[GET]}" onto public void com.bootdo.heat.controller.HeatUpLoadController.exprotHeatExcel(com.bootdo.heat.vo.HeatVo,javax.servlet.http.HttpServletResponse)
2019-04-03 11:08:19 -Mapped "{[/moneyList/moneyList],methods=[GET]}" onto java.lang.String com.bootdo.moneyList.controller.MoneyListController.MoneyList()
2019-04-03 11:08:19 -Mapped "{[/moneyList/moneyList/updateMoney],methods=[POST]}" onto public java.util.List<com.bootdo.moneyList.damain.MoneyListDO> com.bootdo.moneyList.controller.MoneyListController.updateMoney(com.bootdo.moneyList.damain.MoneyListDO)
2019-04-03 11:08:19 -Mapped "{[/moneyList/moneyList/queryAllUser],methods=[POST]}" onto public java.util.List<com.bootdo.moneyList.damain.MoneyListDO> com.bootdo.moneyList.controller.MoneyListController.queryAllUser(com.bootdo.moneyList.damain.MoneyListDO)
2019-04-03 11:08:19 -Mapped "{[/moneyList/moneyList/queryAllUserName],methods=[POST]}" onto public java.util.List<com.bootdo.moneyList.damain.MoneyListDO> com.bootdo.moneyList.controller.MoneyListController.getAllUserName(com.bootdo.moneyList.damain.MoneyListDO)
2019-04-03 11:08:19 -Mapped "{[/moneyLog/elecLog/add],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.ElecLogController.add()
2019-04-03 11:08:19 -Mapped "{[/moneyLog/elecLog/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.ElecLogController.remove(java.lang.Long)
2019-04-03 11:08:19 -Mapped "{[/moneyLog/elecLog/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.ElecLogController.remove(java.lang.Long[])
2019-04-03 11:08:19 -Mapped "{[/moneyLog/elecLog/update]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.ElecLogController.update(com.bootdo.moneyLog.domain.ElecLogDO)
2019-04-03 11:08:19 -Mapped "{[/moneyLog/elecLog/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.moneyLog.controller.ElecLogController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 11:08:19 -Mapped "{[/moneyLog/elecLog/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.ElecLogController.save(com.bootdo.moneyLog.domain.ElecLogDO)
2019-04-03 11:08:19 -Mapped "{[/moneyLog/elecLog/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.ElecLogController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 11:08:19 -Mapped "{[/moneyLog/elecLog],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.ElecLogController.moneyLog()
2019-04-03 11:08:19 -Mapped "{[/moneyLog/elecLog/exprotElecLog],methods=[GET]}" onto public void com.bootdo.moneyLog.controller.ElecLogController.exprotElecLog(com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-03 11:08:19 -Mapped "{[/moneyLog/heatLog/add],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.HeatLogController.add()
2019-04-03 11:08:19 -Mapped "{[/moneyLog/heatLog/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.HeatLogController.remove(java.lang.Long)
2019-04-03 11:08:19 -Mapped "{[/moneyLog/heatLog/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.HeatLogController.remove(java.lang.Long[])
2019-04-03 11:08:19 -Mapped "{[/moneyLog/heatLog/update]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.HeatLogController.update(com.bootdo.moneyLog.domain.HeatLogDO)
2019-04-03 11:08:19 -Mapped "{[/moneyLog/heatLog/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.moneyLog.controller.HeatLogController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 11:08:19 -Mapped "{[/moneyLog/heatLog/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.HeatLogController.save(com.bootdo.moneyLog.domain.HeatLogDO)
2019-04-03 11:08:19 -Mapped "{[/moneyLog/heatLog/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.HeatLogController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 11:08:19 -Mapped "{[/moneyLog/heatLog/exprotHeatLog],methods=[GET]}" onto public void com.bootdo.moneyLog.controller.HeatLogController.exprotHeatLog(com.bootdo.moneyLog.vo.HeatLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-03 11:08:19 -Mapped "{[/moneyLog/heatLog],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.HeatLogController.HeatLog()
2019-04-03 11:08:19 -Mapped "{[/moneyLog/waterLog/add],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.WaterLogController.add()
2019-04-03 11:08:19 -Mapped "{[/moneyLog/waterLog/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.WaterLogController.remove(java.lang.Long)
2019-04-03 11:08:19 -Mapped "{[/moneyLog/waterLog/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.WaterLogController.remove(java.lang.Long[])
2019-04-03 11:08:19 -Mapped "{[/moneyLog/waterLog/update]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.WaterLogController.update(com.bootdo.moneyLog.domain.WaterLogDO)
2019-04-03 11:08:19 -Mapped "{[/moneyLog/waterLog/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.moneyLog.controller.WaterLogController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 11:08:19 -Mapped "{[/moneyLog/waterLog/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.WaterLogController.save(com.bootdo.moneyLog.domain.WaterLogDO)
2019-04-03 11:08:19 -Mapped "{[/moneyLog/waterLog/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.WaterLogController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 11:08:19 -Mapped "{[/moneyLog/waterLog/exprotWaterLog],methods=[GET]}" onto public void com.bootdo.moneyLog.controller.WaterLogController.exprotWaterLog(com.bootdo.moneyLog.vo.WaterLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-03 11:08:19 -Mapped "{[/moneyLog/waterLog],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.WaterLogController.WaterLog()
2019-04-03 11:08:19 -Mapped "{[/oa/notify/add],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.add()
2019-04-03 11:08:19 -Mapped "{[/oa/notify/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.remove(java.lang.Long)
2019-04-03 11:08:19 -Mapped "{[/oa/notify/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.remove(java.lang.Long[])
2019-04-03 11:08:19 -Mapped "{[/oa/notify/update]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.update(com.bootdo.oa.domain.NotifyDO)
2019-04-03 11:08:19 -Mapped "{[/oa/notify/read/{id}],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.read(java.lang.Long,org.springframework.ui.Model)
2019-04-03 11:08:19 -Mapped "{[/oa/notify/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.oa.controller.NotifyController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 11:08:19 -Mapped "{[/oa/notify/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.save(com.bootdo.oa.domain.NotifyDO)
2019-04-03 11:08:19 -Mapped "{[/oa/notify/message],methods=[GET]}" onto com.bootdo.common.utils.PageUtils com.bootdo.oa.controller.NotifyController.message()
2019-04-03 11:08:19 -Mapped "{[/oa/notify/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 11:08:19 -Mapped "{[/oa/notify/selfNotify],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.selefNotify()
2019-04-03 11:08:19 -Mapped "{[/oa/notify/selfList],methods=[GET]}" onto com.bootdo.common.utils.PageUtils com.bootdo.oa.controller.NotifyController.selfList(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 11:08:19 -Mapped "{[/oa/notify],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.oaNotify()
2019-04-03 11:08:19 -Mapped "{[/print/print/add],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.add()
2019-04-03 11:08:19 -Mapped "{[/print/print/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.print.controller.PrintController.remove(java.lang.Long)
2019-04-03 11:08:19 -Mapped "{[/print/print/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.print.controller.PrintController.remove(java.lang.Long[])
2019-04-03 11:08:19 -Mapped "{[/print/print/update]}" onto public com.bootdo.common.utils.R com.bootdo.print.controller.PrintController.update(com.bootdo.print.domain.PrintDO)
2019-04-03 11:08:19 -Mapped "{[/print/print/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.print.controller.PrintController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 11:08:19 -Mapped "{[/print/print/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.print.controller.PrintController.save(java.lang.String,com.bootdo.print.domain.PrintDO)
2019-04-03 11:08:19 -Mapped "{[/print/print/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 11:08:19 -Mapped "{[/print/print/printEdit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.printEdit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 11:08:19 -Mapped "{[/print/print/exprotPrint],methods=[GET]}" onto public void com.bootdo.print.controller.PrintController.exprotPrint(com.bootdo.print.vo.PrintVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-03 11:08:19 -Mapped "{[/print/print],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.Print()
2019-04-03 11:08:19 -Mapped "{[/system/sysDept/add/{pId}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.add(java.lang.Long,org.springframework.ui.Model)
2019-04-03 11:08:19 -Mapped "{[/system/sysDept/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.remove(java.lang.Long)
2019-04-03 11:08:19 -Mapped "{[/system/sysDept/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.remove(java.lang.Long[])
2019-04-03 11:08:19 -Mapped "{[/system/sysDept/update]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.update(com.bootdo.system.domain.DeptDO)
2019-04-03 11:08:19 -Mapped "{[/system/sysDept/list],methods=[GET]}" onto public java.util.List<com.bootdo.system.domain.DeptDO> com.bootdo.system.controller.DeptController.list()
2019-04-03 11:08:19 -Mapped "{[/system/sysDept/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.save(com.bootdo.system.domain.DeptDO)
2019-04-03 11:08:19 -Mapped "{[/system/sysDept/tree],methods=[GET]}" onto public com.bootdo.common.domain.Tree<com.bootdo.system.domain.DeptDO> com.bootdo.system.controller.DeptController.tree()
2019-04-03 11:08:19 -Mapped "{[/system/sysDept/edit/{deptId}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 11:08:19 -Mapped "{[/system/sysDept],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.dept()
2019-04-03 11:08:19 -Mapped "{[/system/sysDept/treeView],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.treeView()
2019-04-03 11:08:19 -Mapped "{[/index],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.index(org.springframework.ui.Model)
2019-04-03 11:08:19 -Mapped "{[/main],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.main()
2019-04-03 11:08:19 -Mapped "{[/login],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.login(org.springframework.ui.Model)
2019-04-03 11:08:19 -Mapped "{[/logout],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.logout()
2019-04-03 11:08:19 -Mapped "{[/ || ],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.welcome(org.springframework.ui.Model)
2019-04-03 11:08:19 -Mapped "{[/login],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.LoginController.ajaxLogin(java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest)
2019-04-03 11:08:19 -Mapped "{[/getVerify],methods=[GET]}" onto public void com.bootdo.system.controller.LoginController.getVerify(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-04-03 11:08:19 -Mapped "{[/sys/menu/add/{pId}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.MenuController.add(org.springframework.ui.Model,java.lang.Long)
2019-04-03 11:08:19 -Mapped "{[/sys/menu/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.MenuController.remove(java.lang.Long)
2019-04-03 11:08:19 -Mapped "{[/sys/menu/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.MenuController.update(com.bootdo.system.domain.MenuDO)
2019-04-03 11:08:19 -Mapped "{[/sys/menu/list]}" onto java.util.List<com.bootdo.system.domain.MenuDO> com.bootdo.system.controller.MenuController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 11:08:19 -Mapped "{[/sys/menu/save],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.MenuController.save(com.bootdo.system.domain.MenuDO)
2019-04-03 11:08:19 -Mapped "{[/sys/menu/tree/{roleId}],methods=[GET]}" onto com.bootdo.common.domain.Tree<com.bootdo.system.domain.MenuDO> com.bootdo.system.controller.MenuController.tree(java.lang.Long)
2019-04-03 11:08:19 -Mapped "{[/sys/menu/tree],methods=[GET]}" onto com.bootdo.common.domain.Tree<com.bootdo.system.domain.MenuDO> com.bootdo.system.controller.MenuController.tree()
2019-04-03 11:08:19 -Mapped "{[/sys/menu/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.MenuController.edit(org.springframework.ui.Model,java.lang.Long)
2019-04-03 11:08:19 -Mapped "{[/sys/menu],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.MenuController.menu(org.springframework.ui.Model)
2019-04-03 11:08:19 -Mapped "{[/sys/role/add],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.RoleController.add()
2019-04-03 11:08:19 -Mapped "{[/sys/role/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.update(com.bootdo.system.domain.RoleDO)
2019-04-03 11:08:19 -Mapped "{[/sys/role/list],methods=[GET]}" onto java.util.List<com.bootdo.system.domain.RoleDO> com.bootdo.system.controller.RoleController.list()
2019-04-03 11:08:19 -Mapped "{[/sys/role/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.save(java.lang.Long)
2019-04-03 11:08:19 -Mapped "{[/sys/role/save],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.save(com.bootdo.system.domain.RoleDO)
2019-04-03 11:08:19 -Mapped "{[/sys/role/batchRemove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.batchRemove(java.lang.Long[])
2019-04-03 11:08:19 -Mapped "{[/sys/role],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.RoleController.role()
2019-04-03 11:08:19 -Mapped "{[/sys/role/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.RoleController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 11:08:19 -Mapped "{[/sys/online/list]}" onto public java.util.List<com.bootdo.system.domain.UserOnline> com.bootdo.system.controller.SessionController.list()
2019-04-03 11:08:19 -Mapped "{[/sys/online],methods=[GET]}" onto public java.lang.String com.bootdo.system.controller.SessionController.online()
2019-04-03 11:08:19 -Mapped "{[/sys/online/forceLogout/{sessionId}]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.SessionController.forceLogout(java.lang.String,org.springframework.web.servlet.mvc.support.RedirectAttributes)
2019-04-03 11:08:19 -Mapped "{[/sys/online/sessionList]}" onto public java.util.Collection<org.apache.shiro.session.Session> com.bootdo.system.controller.SessionController.sessionList()
2019-04-03 11:08:19 -Mapped "{[/sys/user/exit],methods=[POST]}" onto boolean com.bootdo.system.controller.UserController.exit(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 11:08:19 -Mapped "{[/sys/user/add],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.add(org.springframework.ui.Model)
2019-04-03 11:08:19 -Mapped "{[/sys/user/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.remove(java.lang.Long)
2019-04-03 11:08:19 -Mapped "{[/sys/user/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.update(com.bootdo.system.domain.UserDO)
2019-04-03 11:08:19 -Mapped "{[/sys/user/list],methods=[GET]}" onto com.bootdo.common.utils.PageUtils com.bootdo.system.controller.UserController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 11:08:19 -Mapped "{[/sys/user/save],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.save(com.bootdo.system.domain.UserDO)
2019-04-03 11:08:19 -Mapped "{[/sys/user/batchRemove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.batchRemove(java.lang.Long[])
2019-04-03 11:08:19 -Mapped "{[/sys/user/tree],methods=[GET]}" onto public com.bootdo.common.domain.Tree<com.bootdo.system.domain.DeptDO> com.bootdo.system.controller.UserController.tree()
2019-04-03 11:08:19 -Mapped "{[/sys/user],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.user(org.springframework.ui.Model)
2019-04-03 11:08:19 -Mapped "{[/sys/user/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.edit(org.springframework.ui.Model,java.lang.Long)
2019-04-03 11:08:19 -Mapped "{[/sys/user/treeView],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.treeView()
2019-04-03 11:08:19 -Mapped "{[/sys/user/updatePeronal],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.updatePeronal(com.bootdo.system.domain.UserDO)
2019-04-03 11:08:19 -Mapped "{[/sys/user/resetPwd/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.resetPwd(java.lang.Long,org.springframework.ui.Model)
2019-04-03 11:08:19 -Mapped "{[/sys/user/resetPwd],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.resetPwd(com.bootdo.system.vo.UserVO)
2019-04-03 11:08:19 -Mapped "{[/sys/user/personal],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.personal(org.springframework.ui.Model)
2019-04-03 11:08:19 -Mapped "{[/sys/user/adminResetPwd],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.adminResetPwd(com.bootdo.system.vo.UserVO)
2019-04-03 11:08:19 -Mapped "{[/sys/user/uploadImg],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.uploadImg(org.springframework.web.multipart.MultipartFile,java.lang.String,javax.servlet.http.HttpServletRequest)
2019-04-03 11:08:19 -Mapped "{[/file/downImport/{importType}],methods=[GET]}" onto public void com.bootdo.temple.controller.TempletController.downImport(javax.servlet.http.HttpServletResponse,java.lang.String)
2019-04-03 11:08:19 -Mapped "{[/water/water/add],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterController.add()
2019-04-03 11:08:19 -Mapped "{[/water/water/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterController.remove(java.lang.Long)
2019-04-03 11:08:19 -Mapped "{[/water/water/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterController.remove(java.lang.Long[])
2019-04-03 11:08:19 -Mapped "{[/water/water/update]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterController.update(com.bootdo.water.domain.WaterDO)
2019-04-03 11:08:19 -Mapped "{[/water/water/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.water.controller.WaterController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 11:08:19 -Mapped "{[/water/water/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterController.save(com.bootdo.water.domain.WaterDO)
2019-04-03 11:08:19 -Mapped "{[/water/water/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 11:08:19 -Mapped "{[/water/water/exprotWater],methods=[GET]}" onto public void com.bootdo.water.controller.WaterController.exprotExcel(com.bootdo.water.vo.WaterVo,javax.servlet.http.HttpServletResponse)
2019-04-03 11:08:19 -Mapped "{[/water/water],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterController.Water()
2019-04-03 11:08:19 -Mapped "{[/water/waterInto/exprotWaterIntoExcel],methods=[GET]}" onto public void com.bootdo.water.controller.WaterIntoController.exprotExcel(com.bootdo.water.vo.WaterVo,javax.servlet.http.HttpServletResponse)
2019-04-03 11:08:19 -Mapped "{[/water/waterInto],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterIntoController.WaterInto()
2019-04-03 11:08:19 -Mapped "{[/water/waterPrice/add],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterPriceController.add()
2019-04-03 11:08:19 -Mapped "{[/water/waterPrice/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterPriceController.remove(java.lang.Long)
2019-04-03 11:08:19 -Mapped "{[/water/waterPrice/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterPriceController.remove(java.lang.Long[])
2019-04-03 11:08:19 -Mapped "{[/water/waterPrice/update]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterPriceController.update(com.bootdo.water.domain.WaterPriceDO)
2019-04-03 11:08:19 -Mapped "{[/water/waterPrice/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.water.controller.WaterPriceController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 11:08:19 -Mapped "{[/water/waterPrice/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterPriceController.save(com.bootdo.water.domain.WaterPriceDO)
2019-04-03 11:08:19 -Mapped "{[/water/waterPrice/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterPriceController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 11:08:19 -Mapped "{[/water/waterPrice],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterPriceController.WaterPrice()
2019-04-03 11:08:19 -Mapped "{[/water/waterUpLoad/importWaterExcel]}" onto public java.lang.String com.bootdo.water.controller.WaterUpLoadController.importWaterExcel(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)
2019-04-03 11:08:19 -Mapped "{[/water/waterUpLoad/createWaterExcel],methods=[POST]}" onto public java.lang.String com.bootdo.water.controller.WaterUpLoadController.createWaterExcel(com.bootdo.water.domain.WaterDO) throws java.lang.Exception
2019-04-03 11:08:19 -Mapped "{[/water/waterUpLoad/exprotWaterExcel],methods=[GET]}" onto public void com.bootdo.water.controller.WaterUpLoadController.exprotWaterExcel(com.bootdo.water.vo.WaterVo,javax.servlet.http.HttpServletResponse)
2019-04-03 11:08:19 -Mapped "{[/water/waterUpLoad],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterUpLoadController.WaterUpLoad()
2019-04-03 11:08:19 -Mapped "{[/v2/api-docs],methods=[GET],produces=[application/json || application/hal+json]}" onto public org.springframework.http.ResponseEntity<springfox.documentation.spring.web.json.Json> springfox.documentation.swagger2.web.Swagger2Controller.getDocumentation(java.lang.String,javax.servlet.http.HttpServletRequest)
2019-04-03 11:08:19 -Mapped "{[/swagger-resources/configuration/security]}" onto org.springframework.http.ResponseEntity<springfox.documentation.swagger.web.SecurityConfiguration> springfox.documentation.swagger.web.ApiResourceController.securityConfiguration()
2019-04-03 11:08:19 -Mapped "{[/swagger-resources/configuration/ui]}" onto org.springframework.http.ResponseEntity<springfox.documentation.swagger.web.UiConfiguration> springfox.documentation.swagger.web.ApiResourceController.uiConfiguration()
2019-04-03 11:08:19 -Mapped "{[/swagger-resources]}" onto org.springframework.http.ResponseEntity<java.util.List<springfox.documentation.swagger.web.SwaggerResource>> springfox.documentation.swagger.web.ApiResourceController.swaggerResources()
2019-04-03 11:08:20 -Initializing ExecutorService  'messageBrokerTaskScheduler'
2019-04-03 11:08:20 -Mapped URL path [/endpointChat/**] onto handler of type [class org.springframework.web.socket.sockjs.support.SockJsHttpRequestHandler]
2019-04-03 11:08:20 -Initializing ExecutorService  'brokerChannelExecutor'
2019-04-03 11:08:20 -Mapped URL path [/**/favicon.ico] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-04-03 11:08:21 -Looking for @ControllerAdvice: org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@a38c7fe: startup date [Wed Apr 03 11:08:04 CST 2019]; root of context hierarchy
2019-04-03 11:08:21 -Mapped URL path [/webjars/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-04-03 11:08:21 -Mapped URL path [/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-04-03 11:08:21 -Mapped URL path [/files/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-04-03 11:08:21 -Detected @ExceptionHandler methods in BDExceptionHandler
2019-04-03 11:08:21 -[THYMELEAF][main] Template Mode 'LEGACYHTML5' is deprecated. Using Template Mode 'HTML' instead.
2019-04-03 11:08:23 -Registering beans for JMX exposure on startup
2019-04-03 11:08:23 -Bean with name 'dataSource' has been autodetected for JMX exposure
2019-04-03 11:08:23 -Located MBean 'dataSource': registering with JMX server as MBean [com.alibaba.druid.pool:name=dataSource,type=DruidDataSource]
2019-04-03 11:08:23 -Starting beans in phase 2147483647
2019-04-03 11:08:23 -Context refreshed
2019-04-03 11:08:23 -Found 1 custom documentation plugin(s)
2019-04-03 11:08:23 -Scanning for api listing references
2019-04-03 11:08:23 -Generating unique operation named: exprotElecLogUsingGET_1
2019-04-03 11:08:23 -Generating unique operation named: getCountDUsingPOST_1
2019-04-03 11:08:23 -Generating unique operation named: exprotElecLogUsingGET_2
2019-04-03 11:08:23 -Generating unique operation named: getCountDUsingPOST_2
2019-04-03 11:08:23 -Generating unique operation named: exprotElecLogUsingGET_3
2019-04-03 11:08:23 -Generating unique operation named: getCountDUsingPOST_3
2019-04-03 11:08:24 -Generating unique operation named: removeUsingPOST_1
2019-04-03 11:08:24 -Generating unique operation named: addUsingGET_1
2019-04-03 11:08:24 -Generating unique operation named: editUsingGET_1
2019-04-03 11:08:24 -Generating unique operation named: listUsingGET_1
2019-04-03 11:08:24 -Generating unique operation named: removeUsingPOST_2
2019-04-03 11:08:24 -Generating unique operation named: removeUsingPOST_3
2019-04-03 11:08:24 -Generating unique operation named: saveUsingPOST_1
2019-04-03 11:08:24 -Generating unique operation named: updateUsingGET_1
2019-04-03 11:08:24 -Generating unique operation named: updateUsingHEAD_1
2019-04-03 11:08:24 -Generating unique operation named: updateUsingPOST_1
2019-04-03 11:08:24 -Generating unique operation named: updateUsingPUT_1
2019-04-03 11:08:24 -Generating unique operation named: updateUsingPATCH_1
2019-04-03 11:08:24 -Generating unique operation named: updateUsingDELETE_1
2019-04-03 11:08:24 -Generating unique operation named: updateUsingOPTIONS_1
2019-04-03 11:08:24 -Generating unique operation named: updateUsingTRACE_1
2019-04-03 11:08:24 -Generating unique operation named: addUsingGET_2
2019-04-03 11:08:24 -Generating unique operation named: editUsingGET_2
2019-04-03 11:08:24 -Generating unique operation named: listUsingGET_2
2019-04-03 11:08:24 -Generating unique operation named: removeUsingPOST_4
2019-04-03 11:08:24 -Generating unique operation named: removeUsingPOST_5
2019-04-03 11:08:24 -Generating unique operation named: saveUsingPOST_2
2019-04-03 11:08:24 -Generating unique operation named: updateUsingPOST_2
2019-04-03 11:08:24 -Generating unique operation named: exprotExcelUsingGET_1
2019-04-03 11:08:24 -Generating unique operation named: addUsingGET_3
2019-04-03 11:08:24 -Generating unique operation named: editUsingGET_3
2019-04-03 11:08:24 -Generating unique operation named: exprotElecLogUsingGET_4
2019-04-03 11:08:24 -Generating unique operation named: listUsingGET_3
2019-04-03 11:08:24 -Generating unique operation named: removeUsingPOST_6
2019-04-03 11:08:24 -Generating unique operation named: removeUsingPOST_7
2019-04-03 11:08:24 -Generating unique operation named: saveUsingPOST_3
2019-04-03 11:08:24 -Generating unique operation named: updateUsingGET_2
2019-04-03 11:08:24 -Generating unique operation named: updateUsingHEAD_2
2019-04-03 11:08:24 -Generating unique operation named: updateUsingPOST_3
2019-04-03 11:08:24 -Generating unique operation named: updateUsingPUT_2
2019-04-03 11:08:24 -Generating unique operation named: updateUsingPATCH_2
2019-04-03 11:08:24 -Generating unique operation named: updateUsingDELETE_2
2019-04-03 11:08:24 -Generating unique operation named: updateUsingOPTIONS_2
2019-04-03 11:08:24 -Generating unique operation named: updateUsingTRACE_2
2019-04-03 11:08:24 -Generating unique operation named: addUsingGET_4
2019-04-03 11:08:24 -Generating unique operation named: editUsingGET_4
2019-04-03 11:08:24 -Generating unique operation named: listUsingGET_4
2019-04-03 11:08:24 -Generating unique operation named: removeUsingPOST_8
2019-04-03 11:08:24 -Generating unique operation named: removeUsingPOST_9
2019-04-03 11:08:24 -Generating unique operation named: saveUsingPOST_4
2019-04-03 11:08:24 -Generating unique operation named: updateUsingGET_3
2019-04-03 11:08:24 -Generating unique operation named: updateUsingHEAD_3
2019-04-03 11:08:24 -Generating unique operation named: updateUsingPOST_4
2019-04-03 11:08:24 -Generating unique operation named: updateUsingPUT_3
2019-04-03 11:08:24 -Generating unique operation named: updateUsingPATCH_3
2019-04-03 11:08:24 -Generating unique operation named: updateUsingDELETE_3
2019-04-03 11:08:24 -Generating unique operation named: updateUsingOPTIONS_3
2019-04-03 11:08:24 -Generating unique operation named: updateUsingTRACE_3
2019-04-03 11:08:24 -Generating unique operation named: ElecUsingGET_1
2019-04-03 11:08:24 -Generating unique operation named: addUsingGET_5
2019-04-03 11:08:24 -Generating unique operation named: editUsingGET_5
2019-04-03 11:08:24 -Generating unique operation named: listUsingGET_5
2019-04-03 11:08:24 -Generating unique operation named: removeUsingPOST_10
2019-04-03 11:08:24 -Generating unique operation named: removeUsingPOST_11
2019-04-03 11:08:24 -Generating unique operation named: saveUsingPOST_5
2019-04-03 11:08:24 -Generating unique operation named: updateUsingGET_4
2019-04-03 11:08:24 -Generating unique operation named: updateUsingHEAD_4
2019-04-03 11:08:24 -Generating unique operation named: updateUsingPOST_5
2019-04-03 11:08:24 -Generating unique operation named: updateUsingPUT_4
2019-04-03 11:08:24 -Generating unique operation named: updateUsingPATCH_4
2019-04-03 11:08:24 -Generating unique operation named: updateUsingDELETE_4
2019-04-03 11:08:24 -Generating unique operation named: updateUsingOPTIONS_4
2019-04-03 11:08:24 -Generating unique operation named: updateUsingTRACE_4
2019-04-03 11:08:24 -Generating unique operation named: editUsingGET_6
2019-04-03 11:08:24 -Generating unique operation named: listUsingGET_6
2019-04-03 11:08:24 -Generating unique operation named: updateUsingPOST_6
2019-04-03 11:08:24 -Generating unique operation named: addUsingGET_6
2019-04-03 11:08:24 -Generating unique operation named: editUsingGET_7
2019-04-03 11:08:24 -Generating unique operation named: exprotExcelUsingGET_2
2019-04-03 11:08:24 -Generating unique operation named: listUsingGET_7
2019-04-03 11:08:24 -Generating unique operation named: removeUsingPOST_12
2019-04-03 11:08:24 -Generating unique operation named: removeUsingPOST_13
2019-04-03 11:08:24 -Generating unique operation named: saveUsingPOST_6
2019-04-03 11:08:24 -Generating unique operation named: updateUsingGET_5
2019-04-03 11:08:24 -Generating unique operation named: updateUsingHEAD_5
2019-04-03 11:08:24 -Generating unique operation named: updateUsingPOST_7
2019-04-03 11:08:24 -Generating unique operation named: updateUsingPUT_5
2019-04-03 11:08:24 -Generating unique operation named: updateUsingPATCH_5
2019-04-03 11:08:24 -Generating unique operation named: updateUsingDELETE_5
2019-04-03 11:08:24 -Generating unique operation named: updateUsingOPTIONS_5
2019-04-03 11:08:24 -Generating unique operation named: updateUsingTRACE_5
2019-04-03 11:08:24 -Generating unique operation named: exprotExcelUsingGET_3
2019-04-03 11:08:24 -Generating unique operation named: addUsingGET_7
2019-04-03 11:08:24 -Generating unique operation named: editUsingGET_8
2019-04-03 11:08:24 -Generating unique operation named: listUsingGET_8
2019-04-03 11:08:24 -Generating unique operation named: removeUsingPOST_14
2019-04-03 11:08:24 -Generating unique operation named: removeUsingPOST_15
2019-04-03 11:08:24 -Generating unique operation named: saveUsingPOST_7
2019-04-03 11:08:24 -Generating unique operation named: updateUsingGET_6
2019-04-03 11:08:24 -Generating unique operation named: updateUsingHEAD_6
2019-04-03 11:08:24 -Generating unique operation named: updateUsingPOST_8
2019-04-03 11:08:24 -Generating unique operation named: updateUsingPUT_6
2019-04-03 11:08:24 -Generating unique operation named: updateUsingPATCH_6
2019-04-03 11:08:24 -Generating unique operation named: updateUsingDELETE_6
2019-04-03 11:08:24 -Generating unique operation named: updateUsingOPTIONS_6
2019-04-03 11:08:25 -Generating unique operation named: updateUsingTRACE_6
2019-04-03 11:08:25 -Generating unique operation named: addUsingGET_8
2019-04-03 11:08:25 -Generating unique operation named: editUsingGET_9
2019-04-03 11:08:25 -Generating unique operation named: listUsingGET_9
2019-04-03 11:08:25 -Generating unique operation named: removeUsingPOST_16
2019-04-03 11:08:25 -Generating unique operation named: removeUsingPOST_17
2019-04-03 11:08:25 -Generating unique operation named: saveUsingPOST_8
2019-04-03 11:08:25 -Generating unique operation named: updateUsingGET_7
2019-04-03 11:08:25 -Generating unique operation named: updateUsingHEAD_7
2019-04-03 11:08:25 -Generating unique operation named: updateUsingPOST_9
2019-04-03 11:08:25 -Generating unique operation named: updateUsingPUT_7
2019-04-03 11:08:25 -Generating unique operation named: updateUsingPATCH_7
2019-04-03 11:08:25 -Generating unique operation named: updateUsingDELETE_7
2019-04-03 11:08:25 -Generating unique operation named: updateUsingOPTIONS_7
2019-04-03 11:08:25 -Generating unique operation named: updateUsingTRACE_7
2019-04-03 11:08:25 -Generating unique operation named: addUsingGET_9
2019-04-03 11:08:25 -Generating unique operation named: editUsingGET_10
2019-04-03 11:08:25 -Generating unique operation named: infoUsingGET_1
2019-04-03 11:08:25 -Generating unique operation named: infoUsingHEAD_1
2019-04-03 11:08:25 -Generating unique operation named: infoUsingPOST_1
2019-04-03 11:08:25 -Generating unique operation named: infoUsingPUT_1
2019-04-03 11:08:25 -Generating unique operation named: infoUsingPATCH_1
2019-04-03 11:08:25 -Generating unique operation named: infoUsingDELETE_1
2019-04-03 11:08:25 -Generating unique operation named: infoUsingOPTIONS_1
2019-04-03 11:08:25 -Generating unique operation named: infoUsingTRACE_1
2019-04-03 11:08:25 -Generating unique operation named: listUsingGET_10
2019-04-03 11:08:25 -Generating unique operation named: removeUsingPOST_18
2019-04-03 11:08:25 -Generating unique operation named: removeUsingPOST_19
2019-04-03 11:08:25 -Generating unique operation named: saveUsingPOST_9
2019-04-03 11:08:25 -Generating unique operation named: updateUsingPOST_10
2019-04-03 11:08:25 -Generating unique operation named: listUsingGET_11
2019-04-03 11:08:25 -Generating unique operation named: removeUsingPOST_20
2019-04-03 11:08:25 -Generating unique operation named: welcomeUsingGET_1
2019-04-03 11:08:25 -Generating unique operation named: addUsingGET_10
2019-04-03 11:08:25 -Generating unique operation named: editUsingGET_11
2019-04-03 11:08:25 -Generating unique operation named: listUsingGET_12
2019-04-03 11:08:25 -Generating unique operation named: removeUsingPOST_21
2019-04-03 11:08:25 -Generating unique operation named: saveUsingPOST_10
2019-04-03 11:08:25 -Generating unique operation named: treeUsingGET_1
2019-04-03 11:08:25 -Generating unique operation named: treeUsingGET_2
2019-04-03 11:08:25 -Generating unique operation named: updateUsingPOST_11
2019-04-03 11:08:25 -Generating unique operation named: addUsingGET_11
2019-04-03 11:08:25 -Generating unique operation named: editUsingGET_12
2019-04-03 11:08:25 -Generating unique operation named: listUsingGET_13
2019-04-03 11:08:25 -Generating unique operation named: removeUsingPOST_22
2019-04-03 11:08:25 -Generating unique operation named: removeUsingPOST_23
2019-04-03 11:08:25 -Generating unique operation named: saveUsingPOST_11
2019-04-03 11:08:25 -Generating unique operation named: updateUsingGET_8
2019-04-03 11:08:25 -Generating unique operation named: updateUsingHEAD_8
2019-04-03 11:08:25 -Generating unique operation named: updateUsingPOST_12
2019-04-03 11:08:25 -Generating unique operation named: updateUsingPUT_8
2019-04-03 11:08:25 -Generating unique operation named: updateUsingPATCH_8
2019-04-03 11:08:25 -Generating unique operation named: updateUsingDELETE_8
2019-04-03 11:08:25 -Generating unique operation named: updateUsingOPTIONS_8
2019-04-03 11:08:25 -Generating unique operation named: updateUsingTRACE_8
2019-04-03 11:08:25 -Generating unique operation named: addUsingGET_12
2019-04-03 11:08:25 -Generating unique operation named: editUsingGET_13
2019-04-03 11:08:25 -Generating unique operation named: listUsingGET_14
2019-04-03 11:08:25 -Generating unique operation named: removeUsingPOST_24
2019-04-03 11:08:25 -Generating unique operation named: removeUsingPOST_25
2019-04-03 11:08:25 -Generating unique operation named: saveUsingPOST_12
2019-04-03 11:08:25 -Generating unique operation named: updateUsingGET_9
2019-04-03 11:08:25 -Generating unique operation named: updateUsingHEAD_9
2019-04-03 11:08:25 -Generating unique operation named: updateUsingPOST_13
2019-04-03 11:08:25 -Generating unique operation named: updateUsingPUT_9
2019-04-03 11:08:25 -Generating unique operation named: updateUsingPATCH_9
2019-04-03 11:08:25 -Generating unique operation named: updateUsingDELETE_9
2019-04-03 11:08:25 -Generating unique operation named: updateUsingOPTIONS_9
2019-04-03 11:08:25 -Generating unique operation named: updateUsingTRACE_9
2019-04-03 11:08:25 -Generating unique operation named: addUsingGET_13
2019-04-03 11:08:25 -Generating unique operation named: batchRemoveUsingPOST_1
2019-04-03 11:08:25 -Generating unique operation named: editUsingGET_14
2019-04-03 11:08:25 -Generating unique operation named: listUsingGET_15
2019-04-03 11:08:25 -Generating unique operation named: saveUsingPOST_13
2019-04-03 11:08:25 -Generating unique operation named: saveUsingPOST_14
2019-04-03 11:08:25 -Generating unique operation named: updateUsingPOST_14
2019-04-03 11:08:25 -Generating unique operation named: listUsingGET_16
2019-04-03 11:08:25 -Generating unique operation named: listUsingHEAD_1
2019-04-03 11:08:25 -Generating unique operation named: listUsingPOST_1
2019-04-03 11:08:25 -Generating unique operation named: listUsingPUT_1
2019-04-03 11:08:25 -Generating unique operation named: listUsingPATCH_1
2019-04-03 11:08:25 -Generating unique operation named: listUsingDELETE_1
2019-04-03 11:08:25 -Generating unique operation named: listUsingOPTIONS_1
2019-04-03 11:08:25 -Generating unique operation named: listUsingTRACE_1
2019-04-03 11:08:25 -Generating unique operation named: addUsingGET_14
2019-04-03 11:08:25 -Generating unique operation named: batchRemoveUsingPOST_2
2019-04-03 11:08:25 -Generating unique operation named: editUsingGET_15
2019-04-03 11:08:25 -Generating unique operation named: listUsingGET_17
2019-04-03 11:08:25 -Generating unique operation named: removeUsingPOST_26
2019-04-03 11:08:25 -Generating unique operation named: saveUsingPOST_15
2019-04-03 11:08:25 -Generating unique operation named: treeUsingGET_3
2019-04-03 11:08:25 -Generating unique operation named: treeViewUsingGET_1
2019-04-03 11:08:25 -Generating unique operation named: updateUsingPOST_15
2019-04-03 11:08:25 -Generating unique operation named: addUsingGET_15
2019-04-03 11:08:25 -Generating unique operation named: editUsingGET_16
2019-04-03 11:08:25 -Generating unique operation named: exprotExcelUsingGET_4
2019-04-03 11:08:25 -Generating unique operation named: listUsingGET_18
2019-04-03 11:08:25 -Generating unique operation named: removeUsingPOST_27
2019-04-03 11:08:25 -Generating unique operation named: removeUsingPOST_28
2019-04-03 11:08:25 -Generating unique operation named: saveUsingPOST_16
2019-04-03 11:08:25 -Generating unique operation named: updateUsingGET_10
2019-04-03 11:08:25 -Generating unique operation named: updateUsingHEAD_10
2019-04-03 11:08:25 -Generating unique operation named: updateUsingPOST_16
2019-04-03 11:08:25 -Generating unique operation named: updateUsingPUT_10
2019-04-03 11:08:25 -Generating unique operation named: updateUsingPATCH_10
2019-04-03 11:08:25 -Generating unique operation named: updateUsingDELETE_10
2019-04-03 11:08:25 -Generating unique operation named: updateUsingOPTIONS_10
2019-04-03 11:08:25 -Generating unique operation named: updateUsingTRACE_10
2019-04-03 11:08:25 -Generating unique operation named: exprotExcelUsingGET_5
2019-04-03 11:08:26 -Generating unique operation named: addUsingGET_16
2019-04-03 11:08:26 -Generating unique operation named: editUsingGET_17
2019-04-03 11:08:26 -Generating unique operation named: listUsingGET_19
2019-04-03 11:08:26 -Generating unique operation named: removeUsingPOST_29
2019-04-03 11:08:26 -Generating unique operation named: removeUsingPOST_30
2019-04-03 11:08:26 -Generating unique operation named: saveUsingPOST_17
2019-04-03 11:08:26 -Generating unique operation named: updateUsingGET_11
2019-04-03 11:08:26 -Generating unique operation named: updateUsingHEAD_11
2019-04-03 11:08:26 -Generating unique operation named: updateUsingPOST_17
2019-04-03 11:08:26 -Generating unique operation named: updateUsingPUT_11
2019-04-03 11:08:26 -Generating unique operation named: updateUsingPATCH_11
2019-04-03 11:08:26 -Generating unique operation named: updateUsingDELETE_11
2019-04-03 11:08:26 -Generating unique operation named: updateUsingOPTIONS_11
2019-04-03 11:08:26 -Generating unique operation named: updateUsingTRACE_11
2019-04-03 11:08:26 -Generating unique operation named: addUsingGET_17
2019-04-03 11:08:26 -Generating unique operation named: editUsingGET_18
2019-04-03 11:08:26 -Generating unique operation named: listUsingGET_20
2019-04-03 11:08:26 -Generating unique operation named: removeUsingPOST_31
2019-04-03 11:08:26 -Generating unique operation named: removeUsingPOST_32
2019-04-03 11:08:26 -Generating unique operation named: saveUsingPOST_18
2019-04-03 11:08:26 -Generating unique operation named: updateUsingGET_12
2019-04-03 11:08:26 -Generating unique operation named: updateUsingHEAD_12
2019-04-03 11:08:26 -Generating unique operation named: updateUsingPOST_18
2019-04-03 11:08:26 -Generating unique operation named: updateUsingPUT_12
2019-04-03 11:08:26 -Generating unique operation named: updateUsingPATCH_12
2019-04-03 11:08:26 -Generating unique operation named: updateUsingDELETE_12
2019-04-03 11:08:26 -Generating unique operation named: updateUsingOPTIONS_12
2019-04-03 11:08:26 -Generating unique operation named: updateUsingTRACE_12
2019-04-03 11:08:26 -Starting Quartz Scheduler now
2019-04-03 11:08:26 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED started.
2019-04-03 11:08:26 -Starting...
2019-04-03 11:08:26 -BrokerAvailabilityEvent[available=true, SimpleBrokerMessageHandler [DefaultSubscriptionRegistry[cache[0 destination(s)], registry[0 sessions]]]]
2019-04-03 11:08:26 -Started.
2019-04-03 11:08:26 -Starting ProtocolHandler ["http-nio-8081"]
2019-04-03 11:08:26 -Using a shared selector for servlet write/read
2019-04-03 11:08:26 -Tomcat started on port(s): 8081 (http) with context path ''
2019-04-03 11:08:26 -Started BootdoApplication in 23.374 seconds (JVM running for 24.23)
2019-04-03 11:08:26 -==>  Preparing: select `id`,`cron_expression`,`method_name`,`is_concurrent`,`description`,`update_by`,`bean_class`,`create_date`,`job_status`,`job_group`,`update_date`,`create_by`,`spring_bean`,`job_name` from sys_task order by id desc 
2019-04-03 11:08:26 -==> Parameters: 
2019-04-03 11:08:27 -<==      Total: 1
2019-04-03 11:09:13 -Initializing Spring FrameworkServlet 'dispatcherServlet'
2019-04-03 11:09:13 -FrameworkServlet 'dispatcherServlet': initialization started
2019-04-03 11:09:14 -FrameworkServlet 'dispatcherServlet': initialization completed in 480 ms
2019-04-03 11:09:14 -Enabling session validation scheduler...
2019-04-03 11:09:15 -请求地址 : http://localhost:8081/login;JSESSIONID=849a30cc-8a74-46b0-b705-2ea9bd213d83
2019-04-03 11:09:15 -HTTP METHOD : GET
2019-04-03 11:09:15 -CLASS_METHOD : com.bootdo.system.controller.LoginController.login
2019-04-03 11:09:15 -参数 : [{}]
2019-04-03 11:09:15 -耗时 : 5
2019-04-03 11:09:15 -返回值 : login
2019-04-03 11:09:19 -请求地址 : http://localhost:8081/getVerify
2019-04-03 11:09:19 -HTTP METHOD : GET
2019-04-03 11:09:19 -CLASS_METHOD : com.bootdo.system.controller.LoginController.getVerify
2019-04-03 11:09:19 -参数 : [org.apache.shiro.web.servlet.ShiroHttpServletRequest@65ae518d, org.apache.shiro.web.servlet.ShiroHttpServletResponse@552cff7f]
2019-04-03 11:09:20 -WebSocketSession[0 current WS(0)-HttpStream(0)-HttpPoll(0), 0 total, 0 closed abnormally (0 connect failure, 0 send limit, 0 transport error)], stompSubProtocol[processed CONNECT(0)-CONNECTED(0)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], outboundChannelpool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], sockJsScheduler[pool size = 1, active threads = 1, queued tasks = 0, completed tasks = 0]
2019-04-03 11:09:40 -8243
2019-04-03 11:09:41 -耗时 : 21835
2019-04-03 11:09:41 -返回值 : null
2019-04-03 11:09:51 -请求地址 : http://localhost:8081/login
2019-04-03 11:09:51 -HTTP METHOD : POST
2019-04-03 11:09:51 -CLASS_METHOD : com.bootdo.system.controller.LoginController.ajaxLogin
2019-04-03 11:09:51 -参数 : [admin, 111111, 8243, org.apache.shiro.web.servlet.ShiroHttpServletRequest@17caf4d2]
2019-04-03 11:09:51 -==>  Preparing: select `user_id`,`username`,`name`,`password`,`dept_id`,`email`,`mobile`,`status`,`user_id_create`,`gmt_create`,`gmt_modified`,`sex`,`birth`,`pic_id`,`live_address`,`hobby`,`province`,`city`,`district` from sys_user WHERE username = ? order by user_id desc 
2019-04-03 11:09:52 -==> Parameters: admin(String)
2019-04-03 11:09:52 -<==      Total: 1
2019-04-03 11:09:52 -耗时 : 961
2019-04-03 11:09:52 -返回值 : {msg=操作成功, code=0}
2019-04-03 11:09:53 -More than one TaskExecutor bean found within the context, and none is named 'taskExecutor'. Mark one of them as primary or name it 'taskExecutor' (possibly as an alias) in order to use it for async processing: [clientInboundChannelExecutor, clientOutboundChannelExecutor, brokerChannelExecutor, messageBrokerTaskScheduler]
2019-04-03 11:09:53 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 11:09:53 -==> Parameters: 1(Long), admin(String), 登录(String), 962(Integer), com.bootdo.system.controller.LoginController.ajaxLogin()(String), null, 127.0.0.1(String), 2019-04-03 11:09:53.001(Timestamp)
2019-04-03 11:09:53 -请求地址 : http://localhost:8081/index
2019-04-03 11:09:53 -HTTP METHOD : GET
2019-04-03 11:09:53 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2019-04-03 11:09:53 -参数 : [{}]
2019-04-03 11:09:53 -<==    Updates: 1
2019-04-03 11:09:53 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2019-04-03 11:09:54 -==> Parameters: 1(Long)
2019-04-03 11:09:54 -<==      Total: 46
2019-04-03 11:09:54 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2019-04-03 11:09:54 -==> Parameters: 138(Long)
2019-04-03 11:09:54 -<==      Total: 1
2019-04-03 11:09:54 -耗时 : 1021
2019-04-03 11:09:54 -返回值 : index_v1
2019-04-03 11:09:54 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 11:09:54 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 1022(Integer), com.bootdo.system.controller.LoginController.index()(String), {"menus":[{"attributes":{"icon":"fa fa-money","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-money","url":"/moneyList/moneyList"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"102","parentId":"106","text":"现金缴费"},{"attributes":{"icon":"fa fa-book","url":"/moneyLog/elecLog"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"107","parentId":"106","text":"缴费记录"}],"hasChildren":true,"hasParent":false,"id":"106","parentId":"0","text":"收费管理"},{"attributes":{"icon":"fa fa-lightbulb-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/elec/elec"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"121","parentId":"103","text":"电费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"elec/elecInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"122","parentId":"103","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"elec/elecUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"123","parentId":"103","text":"电表上传"},{"attributes":{"icon":"fa fa-cc","url":"/elec/elecPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"124","parentId":"103","text":"电价管理"}],"hasChildren":true,"hasParent":false,"id":"103","parentId":"0","text":"电费管理"},{"attributes":{"icon":"fa fa-tint","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/water/water"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"117","parentId":"105","text":"水费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"water/waterInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"118","parentId":"105","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"water/waterUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"119","parentId":"105","text":"水费生成"},{"attributes":{"icon":"fa fa-cc","url":"/water/waterPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"120","parentId":"105","text":"水价管理"}],"hasChildren":true,"hasParent":false,"id":"105","parentId":"0","text":"水费管理"},{"attributes":{"icon":"fa fa-fire","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/heat/heat"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"113","parentId":"104","text":"暖费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"heat/heatInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"114","parentId":"104","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"heat/heatUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"115","parentId":"104","text":"暖费生成"},{"attributes":{"icon":"","url":"/heat/heatPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"116","parentId":"104","text":"暖价管理"}],"hasChildren":true,"hasParent":false,"id":"104","parentId":"0","text":"暖费管理"},{"attributes":{"icon":"fa fa-vcard-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-bomb","url":"/print/print"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"149","parentId":"108","text":"票据记录"}],"hasChildren":true,"hasParent":false,"id":"108","parentId":"0","text":"票据管理"},{"attributes":{"icon":"fa fa-bar-chart","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-area-chart","url":"/chart/graph_echarts.html"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","text":"百度chart"},{"attributes":{"icon":"fa fa-sun-o","url":"charts/countDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"109","parentId":"97","text":"日统计报表"},{"attributes":{"icon":"fa fa-registered","url":"charts/countMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"110","parentId":"97","text":"月统计报表"},{"attributes":{"icon":"fa fa-support","url":"charts/countYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"111","parentId":"97","text":"年统计报表"},{"attributes":{"icon":"fa fa-money","url":"charts/countOwe"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"155","parentId":"97","text":"欠费报表图"},{"attributes":{"icon":"fa fa-tachometer","url":"charts/countRun"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"112","parentId":"97","text":"走势图报表"}],"hasChildren":true,"hasParent":false,"id":"97","parentId":"0","text":"统计管理"},{"attributes":{"icon":"fa fa-bars","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-book","url":"/common/dict"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"78","parentId":"1","text":"数据字典"},{"attributes":{"icon":"fa fa-folder-open","url":"/common/sysFile"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"71","parentId":"1","text":"文件管理"}],"h(String), 127.0.0.1(String), 2019-04-03 11:09:54.548(Timestamp)
2019-04-03 11:09:54 -<==    Updates: 1
2019-04-03 11:09:55 -请求地址 : http://localhost:8081/main
2019-04-03 11:09:55 -HTTP METHOD : GET
2019-04-03 11:09:55 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 11:09:55 -参数 : []
2019-04-03 11:09:55 -耗时 : 0
2019-04-03 11:09:55 -返回值 : main
2019-04-03 11:09:55 -请求地址 : http://localhost:8081/oa/notify/message
2019-04-03 11:09:55 -HTTP METHOD : GET
2019-04-03 11:09:55 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2019-04-03 11:09:55 -参数 : []
2019-04-03 11:09:55 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2019-04-03 11:09:55 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2019-04-03 11:09:55 -<==      Total: 0
2019-04-03 11:09:55 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2019-04-03 11:09:55 -==> Parameters: 1(Long), 0(String)
2019-04-03 11:09:55 -请求地址 : http://localhost:8081/main
2019-04-03 11:09:55 -HTTP METHOD : GET
2019-04-03 11:09:55 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 11:09:55 -参数 : []
2019-04-03 11:09:55 -耗时 : 0
2019-04-03 11:09:55 -返回值 : main
2019-04-03 11:09:56 -<==      Total: 1
2019-04-03 11:09:56 -耗时 : 280
2019-04-03 11:09:56 -返回值 : com.bootdo.common.utils.PageUtils@185741be
2019-04-03 11:10:14 -==>  Preparing: select distinct m.perms from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id = ur.role_id where ur.user_id = ? 
2019-04-03 11:10:14 -==> Parameters: 1(Long)
2019-04-03 11:10:14 -<==      Total: 90
2019-04-03 11:10:14 -请求地址 : http://localhost:8081/moneyList/moneyList
2019-04-03 11:10:14 -HTTP METHOD : GET
2019-04-03 11:10:14 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.MoneyList
2019-04-03 11:10:14 -参数 : []
2019-04-03 11:10:14 -耗时 : 1
2019-04-03 11:10:14 -返回值 : /moneyList/moneyList
2019-04-03 11:10:26 -请求地址 : http://localhost:8081/system/sysDept/treeView
2019-04-03 11:10:26 -HTTP METHOD : GET
2019-04-03 11:10:26 -CLASS_METHOD : com.bootdo.system.controller.DeptController.treeView
2019-04-03 11:10:26 -参数 : []
2019-04-03 11:10:26 -耗时 : 0
2019-04-03 11:10:26 -返回值 : system/dept/deptTree
2019-04-03 11:10:27 -请求地址 : http://localhost:8081/system/sysDept/tree
2019-04-03 11:10:27 -HTTP METHOD : GET
2019-04-03 11:10:27 -CLASS_METHOD : com.bootdo.system.controller.DeptController.tree
2019-04-03 11:10:27 -参数 : []
2019-04-03 11:10:27 -==>  Preparing: select `dept_id`,`parent_id`,`name`,`order_num`,`del_flag` from sys_dept order by dept_id desc 
2019-04-03 11:10:27 -==> Parameters: 
2019-04-03 11:10:27 -<==      Total: 3
2019-04-03 11:10:27 -耗时 : 80
2019-04-03 11:10:27 -返回值 : {"checked":false,"children":[{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"3","parentId":"1","state":{"opened":true},"text":"牙星"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"2","parentId":"1","state":{"opened":true},"text":"五九"}],"hasChildren":true,"hasParent":false,"id":"1","parentId":"0","state":{"opened":true},"text":"总公司"}
2019-04-03 11:10:30 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUser
2019-04-03 11:10:30 -HTTP METHOD : POST
2019-04-03 11:10:30 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.queryAllUser
2019-04-03 11:10:30 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@1d86ae25]
2019-04-03 11:10:30 -==>  Preparing: select COUNT(*) number, user_id, user_name, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, elec_type usertype, elec_price userprice, elec_amount userarea, elec_cost usercost, elec_Sum usersum from elec WHERE user_Id = ? and create_time = ? UNION ALL select COUNT(*) number, user_id, user_name, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, heat_type usertype, heat_price userprice, heat_area userarea, heat_cost usercost, heat_Sum usersum from heat WHERE user_Id = ? and create_time = ? UNION ALL select COUNT(*) number, user_id, user_name, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, water_type usertype, water_price userprice, water_price userarea, water_price usercost, water_Sum usersum from water WHERE user_Id = ? and create_time = ? 
2019-04-03 11:10:30 -==> Parameters: 1-0004(String), 2019-02(String), 1-0004(String), 2019-02(String), 1-0004(String), 2019-02(String)
2019-04-03 11:10:30 -<==      Total: 3
2019-04-03 11:10:30 -耗时 : 440
2019-04-03 11:10:30 -返回值 : [com.bootdo.moneyList.damain.MoneyListDO@1a9dcee4, com.bootdo.moneyList.damain.MoneyListDO@73675f74, com.bootdo.moneyList.damain.MoneyListDO@4999752a]
2019-04-03 11:17:02 -请求地址 : http://localhost:8081/index
2019-04-03 11:17:02 -HTTP METHOD : GET
2019-04-03 11:17:02 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2019-04-03 11:17:02 -参数 : [{}]
2019-04-03 11:17:02 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2019-04-03 11:17:02 -==> Parameters: 1(Long)
2019-04-03 11:17:02 -<==      Total: 46
2019-04-03 11:17:02 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2019-04-03 11:17:02 -==> Parameters: 138(Long)
2019-04-03 11:17:02 -<==      Total: 1
2019-04-03 11:17:02 -耗时 : 55
2019-04-03 11:17:02 -返回值 : index_v1
2019-04-03 11:17:02 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 11:17:02 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 55(Integer), com.bootdo.system.controller.LoginController.index()(String), {"menus":[{"attributes":{"icon":"fa fa-money","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-money","url":"/moneyList/moneyList"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"102","parentId":"106","text":"现金缴费"},{"attributes":{"icon":"fa fa-book","url":"/moneyLog/elecLog"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"107","parentId":"106","text":"缴费记录"}],"hasChildren":true,"hasParent":false,"id":"106","parentId":"0","text":"收费管理"},{"attributes":{"icon":"fa fa-lightbulb-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/elec/elec"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"121","parentId":"103","text":"电费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"elec/elecInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"122","parentId":"103","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"elec/elecUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"123","parentId":"103","text":"电表上传"},{"attributes":{"icon":"fa fa-cc","url":"/elec/elecPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"124","parentId":"103","text":"电价管理"}],"hasChildren":true,"hasParent":false,"id":"103","parentId":"0","text":"电费管理"},{"attributes":{"icon":"fa fa-tint","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/water/water"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"117","parentId":"105","text":"水费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"water/waterInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"118","parentId":"105","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"water/waterUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"119","parentId":"105","text":"水费生成"},{"attributes":{"icon":"fa fa-cc","url":"/water/waterPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"120","parentId":"105","text":"水价管理"}],"hasChildren":true,"hasParent":false,"id":"105","parentId":"0","text":"水费管理"},{"attributes":{"icon":"fa fa-fire","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/heat/heat"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"113","parentId":"104","text":"暖费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"heat/heatInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"114","parentId":"104","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"heat/heatUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"115","parentId":"104","text":"暖费生成"},{"attributes":{"icon":"","url":"/heat/heatPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"116","parentId":"104","text":"暖价管理"}],"hasChildren":true,"hasParent":false,"id":"104","parentId":"0","text":"暖费管理"},{"attributes":{"icon":"fa fa-vcard-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-bomb","url":"/print/print"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"149","parentId":"108","text":"票据记录"}],"hasChildren":true,"hasParent":false,"id":"108","parentId":"0","text":"票据管理"},{"attributes":{"icon":"fa fa-bar-chart","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-area-chart","url":"/chart/graph_echarts.html"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","text":"百度chart"},{"attributes":{"icon":"fa fa-sun-o","url":"charts/countDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"109","parentId":"97","text":"日统计报表"},{"attributes":{"icon":"fa fa-registered","url":"charts/countMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"110","parentId":"97","text":"月统计报表"},{"attributes":{"icon":"fa fa-money","url":"charts/countOwe"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"155","parentId":"97","text":"欠费报表图"},{"attributes":{"icon":"fa fa-support","url":"charts/countYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"111","parentId":"97","text":"年统计报表"},{"attributes":{"icon":"fa fa-tachometer","url":"charts/countRun"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"112","parentId":"97","text":"走势图报表"}],"hasChildren":true,"hasParent":false,"id":"97","parentId":"0","text":"统计管理"},{"attributes":{"icon":"fa fa-bars","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-book","url":"/common/dict"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"78","parentId":"1","text":"数据字典"},{"attributes":{"icon":"fa fa-folder-open","url":"/common/sysFile"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"71","parentId":"1","text":"文件管理"}],"h(String), 127.0.0.1(String), 2019-04-03 11:17:02.332(Timestamp)
2019-04-03 11:17:02 -<==    Updates: 1
2019-04-03 11:17:02 -请求地址 : http://localhost:8081/main
2019-04-03 11:17:02 -HTTP METHOD : GET
2019-04-03 11:17:02 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 11:17:02 -参数 : []
2019-04-03 11:17:02 -耗时 : 1
2019-04-03 11:17:02 -返回值 : main
2019-04-03 11:17:02 -请求地址 : http://localhost:8081/oa/notify/message
2019-04-03 11:17:02 -HTTP METHOD : GET
2019-04-03 11:17:02 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2019-04-03 11:17:02 -参数 : []
2019-04-03 11:17:02 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2019-04-03 11:17:02 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2019-04-03 11:17:02 -<==      Total: 0
2019-04-03 11:17:02 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2019-04-03 11:17:02 -==> Parameters: 1(Long), 0(String)
2019-04-03 11:17:02 -<==      Total: 1
2019-04-03 11:17:02 -耗时 : 12
2019-04-03 11:17:02 -返回值 : com.bootdo.common.utils.PageUtils@73564d7a
2019-04-03 11:17:03 -请求地址 : http://localhost:8081/main
2019-04-03 11:17:03 -HTTP METHOD : GET
2019-04-03 11:17:03 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 11:17:03 -参数 : []
2019-04-03 11:17:03 -耗时 : 0
2019-04-03 11:17:03 -返回值 : main
2019-04-03 11:17:05 -请求地址 : http://localhost:8081/moneyList/moneyList
2019-04-03 11:17:05 -HTTP METHOD : GET
2019-04-03 11:17:05 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.MoneyList
2019-04-03 11:17:05 -参数 : []
2019-04-03 11:17:05 -耗时 : 1
2019-04-03 11:17:05 -返回值 : /moneyList/moneyList
2019-04-03 11:17:07 -请求地址 : http://localhost:8081/system/sysDept/treeView
2019-04-03 11:17:07 -HTTP METHOD : GET
2019-04-03 11:17:07 -CLASS_METHOD : com.bootdo.system.controller.DeptController.treeView
2019-04-03 11:17:07 -参数 : []
2019-04-03 11:17:07 -耗时 : 0
2019-04-03 11:17:07 -返回值 : system/dept/deptTree
2019-04-03 11:17:08 -请求地址 : http://localhost:8081/system/sysDept/tree
2019-04-03 11:17:08 -HTTP METHOD : GET
2019-04-03 11:17:08 -CLASS_METHOD : com.bootdo.system.controller.DeptController.tree
2019-04-03 11:17:08 -参数 : []
2019-04-03 11:17:08 -==>  Preparing: select `dept_id`,`parent_id`,`name`,`order_num`,`del_flag` from sys_dept order by dept_id desc 
2019-04-03 11:17:08 -==> Parameters: 
2019-04-03 11:17:08 -<==      Total: 3
2019-04-03 11:17:08 -耗时 : 6
2019-04-03 11:17:08 -返回值 : {"checked":false,"children":[{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"3","parentId":"1","state":{"opened":true},"text":"牙星"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"2","parentId":"1","state":{"opened":true},"text":"五九"}],"hasChildren":true,"hasParent":false,"id":"1","parentId":"0","state":{"opened":true},"text":"总公司"}
2019-04-03 11:17:16 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUser
2019-04-03 11:17:16 -HTTP METHOD : POST
2019-04-03 11:17:16 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.queryAllUser
2019-04-03 11:17:16 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@2e568b04]
2019-04-03 11:17:16 -==>  Preparing: select COUNT(*) number, user_id, user_name, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, elec_type usertype, elec_price userprice, elec_amount userarea, elec_cost usercost, elec_Sum usersum from elec WHERE user_Id = ? and create_time = ? UNION ALL select COUNT(*) number, user_id, user_name, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, heat_type usertype, heat_price userprice, heat_area userarea, heat_cost usercost, heat_Sum usersum from heat WHERE user_Id = ? and create_time = ? UNION ALL select COUNT(*) number, user_id, user_name, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, water_type usertype, water_price userprice, water_price userarea, water_price usercost, water_Sum usersum from water WHERE user_Id = ? and create_time = ? 
2019-04-03 11:17:16 -==> Parameters: 1-0004(String), 2019-02(String), 1-0004(String), 2019-02(String), 1-0004(String), 2019-02(String)
2019-04-03 11:17:16 -<==      Total: 3
2019-04-03 11:17:16 -耗时 : 9
2019-04-03 11:17:16 -返回值 : [com.bootdo.moneyList.damain.MoneyListDO@61b8db8f, com.bootdo.moneyList.damain.MoneyListDO@332af67e, com.bootdo.moneyList.damain.MoneyListDO@5b963722]
2019-04-03 11:17:31 -Failed to invoke @ExceptionHandler method: public java.lang.Object com.bootdo.common.exception.BDExceptionHandler.handleException(java.lang.Exception,javax.servlet.http.HttpServletRequest)
org.apache.shiro.UnavailableSecurityManagerException: No SecurityManager accessible to the calling code, either bound to the org.apache.shiro.util.ThreadContext or as a vm static singleton.  This is an invalid application configuration.
	at org.apache.shiro.SecurityUtils.getSecurityManager(SecurityUtils.java:123)
	at org.apache.shiro.subject.Subject$Builder.<init>(Subject.java:627)
	at org.apache.shiro.SecurityUtils.getSubject(SecurityUtils.java:56)
	at com.bootdo.common.utils.ShiroUtils.getSubjct(ShiroUtils.java:23)
	at com.bootdo.common.utils.ShiroUtils.getUser(ShiroUtils.java:26)
	at com.bootdo.common.exception.BDExceptionHandler.handleException(BDExceptionHandler.java:75)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:209)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver.doResolveHandlerMethodException(ExceptionHandlerExceptionResolver.java:404)
	at org.springframework.web.servlet.handler.AbstractHandlerMethodExceptionResolver.doResolveException(AbstractHandlerMethodExceptionResolver.java:61)
	at org.springframework.web.servlet.handler.AbstractHandlerExceptionResolver.resolveException(AbstractHandlerExceptionResolver.java:139)
	at org.springframework.web.servlet.handler.HandlerExceptionResolverComposite.resolveException(HandlerExceptionResolverComposite.java:78)
	at org.springframework.web.servlet.DispatcherServlet.processHandlerException(DispatcherServlet.java:1255)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1062)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1008)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:925)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:974)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:877)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:661)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:851)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:728)
	at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:591)
	at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:527)
	at org.apache.catalina.core.StandardHostValve.custom(StandardHostValve.java:389)
	at org.apache.catalina.core.StandardHostValve.status(StandardHostValve.java:254)
	at org.apache.catalina.core.StandardHostValve.throwable(StandardHostValve.java:349)
	at org.apache.catalina.core.AsyncContextImpl.setErrorState(AsyncContextImpl.java:424)
	at org.apache.catalina.connector.CoyoteAdapter.asyncDispatch(CoyoteAdapter.java:176)
	at org.apache.coyote.AbstractProcessor.dispatch(AbstractProcessor.java:232)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:53)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:790)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1468)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Unknown Source)
2019-04-03 11:20:36 -请求地址 : http://localhost:8081/index
2019-04-03 11:20:36 -HTTP METHOD : GET
2019-04-03 11:20:36 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2019-04-03 11:20:36 -参数 : [{}]
2019-04-03 11:20:36 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2019-04-03 11:20:36 -==> Parameters: 1(Long)
2019-04-03 11:20:36 -<==      Total: 46
2019-04-03 11:20:36 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2019-04-03 11:20:36 -==> Parameters: 138(Long)
2019-04-03 11:20:36 -<==      Total: 1
2019-04-03 11:20:36 -耗时 : 30
2019-04-03 11:20:36 -返回值 : index_v1
2019-04-03 11:20:36 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 11:20:36 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 30(Integer), com.bootdo.system.controller.LoginController.index()(String), {"menus":[{"attributes":{"icon":"fa fa-money","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-money","url":"/moneyList/moneyList"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"102","parentId":"106","text":"现金缴费"},{"attributes":{"icon":"fa fa-book","url":"/moneyLog/elecLog"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"107","parentId":"106","text":"缴费记录"}],"hasChildren":true,"hasParent":false,"id":"106","parentId":"0","text":"收费管理"},{"attributes":{"icon":"fa fa-lightbulb-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/elec/elec"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"121","parentId":"103","text":"电费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"elec/elecInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"122","parentId":"103","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"elec/elecUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"123","parentId":"103","text":"电表上传"},{"attributes":{"icon":"fa fa-cc","url":"/elec/elecPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"124","parentId":"103","text":"电价管理"}],"hasChildren":true,"hasParent":false,"id":"103","parentId":"0","text":"电费管理"},{"attributes":{"icon":"fa fa-tint","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/water/water"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"117","parentId":"105","text":"水费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"water/waterInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"118","parentId":"105","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"water/waterUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"119","parentId":"105","text":"水费生成"},{"attributes":{"icon":"fa fa-cc","url":"/water/waterPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"120","parentId":"105","text":"水价管理"}],"hasChildren":true,"hasParent":false,"id":"105","parentId":"0","text":"水费管理"},{"attributes":{"icon":"fa fa-fire","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/heat/heat"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"113","parentId":"104","text":"暖费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"heat/heatInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"114","parentId":"104","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"heat/heatUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"115","parentId":"104","text":"暖费生成"},{"attributes":{"icon":"","url":"/heat/heatPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"116","parentId":"104","text":"暖价管理"}],"hasChildren":true,"hasParent":false,"id":"104","parentId":"0","text":"暖费管理"},{"attributes":{"icon":"fa fa-vcard-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-bomb","url":"/print/print"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"149","parentId":"108","text":"票据记录"}],"hasChildren":true,"hasParent":false,"id":"108","parentId":"0","text":"票据管理"},{"attributes":{"icon":"fa fa-bar-chart","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-area-chart","url":"/chart/graph_echarts.html"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","text":"百度chart"},{"attributes":{"icon":"fa fa-sun-o","url":"charts/countDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"109","parentId":"97","text":"日统计报表"},{"attributes":{"icon":"fa fa-registered","url":"charts/countMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"110","parentId":"97","text":"月统计报表"},{"attributes":{"icon":"fa fa-money","url":"charts/countOwe"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"155","parentId":"97","text":"欠费报表图"},{"attributes":{"icon":"fa fa-support","url":"charts/countYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"111","parentId":"97","text":"年统计报表"},{"attributes":{"icon":"fa fa-tachometer","url":"charts/countRun"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"112","parentId":"97","text":"走势图报表"}],"hasChildren":true,"hasParent":false,"id":"97","parentId":"0","text":"统计管理"},{"attributes":{"icon":"fa fa-bars","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-book","url":"/common/dict"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"78","parentId":"1","text":"数据字典"},{"attributes":{"icon":"fa fa-folder-open","url":"/common/sysFile"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"71","parentId":"1","text":"文件管理"}],"h(String), 127.0.0.1(String), 2019-04-03 11:20:36.032(Timestamp)
2019-04-03 11:20:36 -请求地址 : http://localhost:8081/main
2019-04-03 11:20:36 -HTTP METHOD : GET
2019-04-03 11:20:36 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 11:20:36 -参数 : []
2019-04-03 11:20:36 -耗时 : 0
2019-04-03 11:20:36 -返回值 : main
2019-04-03 11:20:36 -<==    Updates: 1
2019-04-03 11:20:36 -请求地址 : http://localhost:8081/oa/notify/message
2019-04-03 11:20:36 -HTTP METHOD : GET
2019-04-03 11:20:36 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2019-04-03 11:20:36 -参数 : []
2019-04-03 11:20:36 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2019-04-03 11:20:36 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2019-04-03 11:20:36 -<==      Total: 0
2019-04-03 11:20:36 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2019-04-03 11:20:36 -==> Parameters: 1(Long), 0(String)
2019-04-03 11:20:36 -<==      Total: 1
2019-04-03 11:20:36 -耗时 : 8
2019-04-03 11:20:36 -返回值 : com.bootdo.common.utils.PageUtils@4d854841
2019-04-03 11:20:36 -请求地址 : http://localhost:8081/main
2019-04-03 11:20:36 -HTTP METHOD : GET
2019-04-03 11:20:36 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 11:20:36 -参数 : []
2019-04-03 11:20:36 -耗时 : 1
2019-04-03 11:20:36 -返回值 : main
2019-04-03 11:20:40 -==>  Preparing: select distinct m.perms from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id = ur.role_id where ur.user_id = ? 
2019-04-03 11:20:40 -==> Parameters: 1(Long)
2019-04-03 11:20:40 -<==      Total: 90
2019-04-03 11:20:40 -请求地址 : http://localhost:8081/moneyList/moneyList
2019-04-03 11:20:40 -HTTP METHOD : GET
2019-04-03 11:20:40 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.MoneyList
2019-04-03 11:20:40 -参数 : []
2019-04-03 11:20:40 -耗时 : 0
2019-04-03 11:20:40 -返回值 : /moneyList/moneyList
2019-04-03 11:20:45 -请求地址 : http://localhost:8081/system/sysDept/treeView
2019-04-03 11:20:45 -HTTP METHOD : GET
2019-04-03 11:20:45 -CLASS_METHOD : com.bootdo.system.controller.DeptController.treeView
2019-04-03 11:20:45 -参数 : []
2019-04-03 11:20:45 -耗时 : 0
2019-04-03 11:20:45 -返回值 : system/dept/deptTree
2019-04-03 11:20:46 -请求地址 : http://localhost:8081/system/sysDept/tree
2019-04-03 11:20:46 -HTTP METHOD : GET
2019-04-03 11:20:46 -CLASS_METHOD : com.bootdo.system.controller.DeptController.tree
2019-04-03 11:20:46 -参数 : []
2019-04-03 11:20:46 -==>  Preparing: select `dept_id`,`parent_id`,`name`,`order_num`,`del_flag` from sys_dept order by dept_id desc 
2019-04-03 11:20:46 -==> Parameters: 
2019-04-03 11:20:46 -<==      Total: 3
2019-04-03 11:20:46 -耗时 : 4
2019-04-03 11:20:46 -返回值 : {"checked":false,"children":[{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"3","parentId":"1","state":{"opened":true},"text":"牙星"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"2","parentId":"1","state":{"opened":true},"text":"五九"}],"hasChildren":true,"hasParent":false,"id":"1","parentId":"0","state":{"opened":true},"text":"总公司"}
2019-04-03 11:20:49 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUser
2019-04-03 11:20:49 -HTTP METHOD : POST
2019-04-03 11:20:49 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.queryAllUser
2019-04-03 11:20:49 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@70964c69]
2019-04-03 11:20:49 -==>  Preparing: select COUNT(*) number, user_id, user_name, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, elec_type usertype, elec_price userprice, elec_amount userarea, elec_cost usercost, elec_Sum usersum from elec WHERE user_Id = ? and create_time = ? UNION ALL select COUNT(*) number, user_id, user_name, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, heat_type usertype, heat_price userprice, heat_area userarea, heat_cost usercost, heat_Sum usersum from heat WHERE user_Id = ? and create_time = ? UNION ALL select COUNT(*) number, user_id, user_name, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, water_type usertype, water_price userprice, water_price userarea, water_price usercost, water_Sum usersum from water WHERE user_Id = ? and create_time = ? 
2019-04-03 11:20:49 -==> Parameters: 1-0004(String), 2019-02(String), 1-0004(String), 2019-02(String), 1-0004(String), 2019-02(String)
2019-04-03 11:20:49 -<==      Total: 3
2019-04-03 11:20:49 -耗时 : 5
2019-04-03 11:20:49 -返回值 : [com.bootdo.moneyList.damain.MoneyListDO@6297fa6, com.bootdo.moneyList.damain.MoneyListDO@441e9e0e, com.bootdo.moneyList.damain.MoneyListDO@66321505]
2019-04-03 11:34:11 -请求地址 : http://localhost:8081/index
2019-04-03 11:34:11 -HTTP METHOD : GET
2019-04-03 11:34:11 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2019-04-03 11:34:11 -参数 : [{}]
2019-04-03 11:34:11 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2019-04-03 11:34:11 -==> Parameters: 1(Long)
2019-04-03 11:34:11 -<==      Total: 46
2019-04-03 11:34:11 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2019-04-03 11:34:11 -==> Parameters: 138(Long)
2019-04-03 11:34:11 -<==      Total: 1
2019-04-03 11:34:11 -耗时 : 41
2019-04-03 11:34:11 -返回值 : index_v1
2019-04-03 11:34:11 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 11:34:11 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 41(Integer), com.bootdo.system.controller.LoginController.index()(String), {"menus":[{"attributes":{"icon":"fa fa-money","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-money","url":"/moneyList/moneyList"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"102","parentId":"106","text":"现金缴费"},{"attributes":{"icon":"fa fa-book","url":"/moneyLog/elecLog"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"107","parentId":"106","text":"缴费记录"}],"hasChildren":true,"hasParent":false,"id":"106","parentId":"0","text":"收费管理"},{"attributes":{"icon":"fa fa-lightbulb-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/elec/elec"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"121","parentId":"103","text":"电费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"elec/elecInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"122","parentId":"103","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"elec/elecUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"123","parentId":"103","text":"电表上传"},{"attributes":{"icon":"fa fa-cc","url":"/elec/elecPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"124","parentId":"103","text":"电价管理"}],"hasChildren":true,"hasParent":false,"id":"103","parentId":"0","text":"电费管理"},{"attributes":{"icon":"fa fa-tint","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/water/water"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"117","parentId":"105","text":"水费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"water/waterInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"118","parentId":"105","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"water/waterUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"119","parentId":"105","text":"水费生成"},{"attributes":{"icon":"fa fa-cc","url":"/water/waterPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"120","parentId":"105","text":"水价管理"}],"hasChildren":true,"hasParent":false,"id":"105","parentId":"0","text":"水费管理"},{"attributes":{"icon":"fa fa-fire","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/heat/heat"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"113","parentId":"104","text":"暖费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"heat/heatInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"114","parentId":"104","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"heat/heatUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"115","parentId":"104","text":"暖费生成"},{"attributes":{"icon":"","url":"/heat/heatPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"116","parentId":"104","text":"暖价管理"}],"hasChildren":true,"hasParent":false,"id":"104","parentId":"0","text":"暖费管理"},{"attributes":{"icon":"fa fa-vcard-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-bomb","url":"/print/print"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"149","parentId":"108","text":"票据记录"}],"hasChildren":true,"hasParent":false,"id":"108","parentId":"0","text":"票据管理"},{"attributes":{"icon":"fa fa-bar-chart","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-area-chart","url":"/chart/graph_echarts.html"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","text":"百度chart"},{"attributes":{"icon":"fa fa-sun-o","url":"charts/countDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"109","parentId":"97","text":"日统计报表"},{"attributes":{"icon":"fa fa-registered","url":"charts/countMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"110","parentId":"97","text":"月统计报表"},{"attributes":{"icon":"fa fa-support","url":"charts/countYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"111","parentId":"97","text":"年统计报表"},{"attributes":{"icon":"fa fa-money","url":"charts/countOwe"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"155","parentId":"97","text":"欠费报表图"},{"attributes":{"icon":"fa fa-tachometer","url":"charts/countRun"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"112","parentId":"97","text":"走势图报表"}],"hasChildren":true,"hasParent":false,"id":"97","parentId":"0","text":"统计管理"},{"attributes":{"icon":"fa fa-bars","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-book","url":"/common/dict"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"78","parentId":"1","text":"数据字典"},{"attributes":{"icon":"fa fa-folder-open","url":"/common/sysFile"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"71","parentId":"1","text":"文件管理"}],"h(String), 127.0.0.1(String), 2019-04-03 11:34:11.453(Timestamp)
2019-04-03 11:34:11 -<==    Updates: 1
2019-04-03 11:34:11 -请求地址 : http://localhost:8081/main
2019-04-03 11:34:11 -HTTP METHOD : GET
2019-04-03 11:34:11 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 11:34:11 -参数 : []
2019-04-03 11:34:11 -耗时 : 1
2019-04-03 11:34:11 -返回值 : main
2019-04-03 11:34:11 -请求地址 : http://localhost:8081/oa/notify/message
2019-04-03 11:34:11 -HTTP METHOD : GET
2019-04-03 11:34:11 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2019-04-03 11:34:11 -参数 : []
2019-04-03 11:34:11 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2019-04-03 11:34:11 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2019-04-03 11:34:11 -<==      Total: 0
2019-04-03 11:34:11 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2019-04-03 11:34:11 -==> Parameters: 1(Long), 0(String)
2019-04-03 11:34:11 -<==      Total: 1
2019-04-03 11:34:11 -耗时 : 11
2019-04-03 11:34:11 -返回值 : com.bootdo.common.utils.PageUtils@c9026a7
2019-04-03 11:34:12 -请求地址 : http://localhost:8081/main
2019-04-03 11:34:12 -HTTP METHOD : GET
2019-04-03 11:34:12 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 11:34:12 -参数 : []
2019-04-03 11:34:12 -耗时 : 1
2019-04-03 11:34:12 -返回值 : main
2019-04-03 11:34:15 -==>  Preparing: select distinct m.perms from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id = ur.role_id where ur.user_id = ? 
2019-04-03 11:34:15 -==> Parameters: 1(Long)
2019-04-03 11:34:15 -<==      Total: 90
2019-04-03 11:34:15 -请求地址 : http://localhost:8081/moneyList/moneyList
2019-04-03 11:34:15 -HTTP METHOD : GET
2019-04-03 11:34:15 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.MoneyList
2019-04-03 11:34:15 -参数 : []
2019-04-03 11:34:15 -耗时 : 1
2019-04-03 11:34:15 -返回值 : /moneyList/moneyList
2019-04-03 11:34:20 -请求地址 : http://localhost:8081/system/sysDept/treeView
2019-04-03 11:34:20 -HTTP METHOD : GET
2019-04-03 11:34:20 -CLASS_METHOD : com.bootdo.system.controller.DeptController.treeView
2019-04-03 11:34:20 -参数 : []
2019-04-03 11:34:20 -耗时 : 0
2019-04-03 11:34:20 -返回值 : system/dept/deptTree
2019-04-03 11:34:20 -请求地址 : http://localhost:8081/system/sysDept/tree
2019-04-03 11:34:20 -HTTP METHOD : GET
2019-04-03 11:34:20 -CLASS_METHOD : com.bootdo.system.controller.DeptController.tree
2019-04-03 11:34:20 -参数 : []
2019-04-03 11:34:20 -==>  Preparing: select `dept_id`,`parent_id`,`name`,`order_num`,`del_flag` from sys_dept order by dept_id desc 
2019-04-03 11:34:20 -==> Parameters: 
2019-04-03 11:34:20 -<==      Total: 3
2019-04-03 11:34:20 -耗时 : 4
2019-04-03 11:34:20 -返回值 : {"checked":false,"children":[{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"3","parentId":"1","state":{"opened":true},"text":"牙星"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"2","parentId":"1","state":{"opened":true},"text":"五九"}],"hasChildren":true,"hasParent":false,"id":"1","parentId":"0","state":{"opened":true},"text":"总公司"}
2019-04-03 11:34:23 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUser
2019-04-03 11:34:23 -HTTP METHOD : POST
2019-04-03 11:34:23 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.queryAllUser
2019-04-03 11:34:23 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@6d8872d4]
2019-04-03 11:34:23 -==>  Preparing: select COUNT(*) number, user_id, user_name, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, elec_type usertype, elec_price userprice, elec_amount userarea, elec_cost usercost, elec_Sum usersum from elec WHERE user_Id = ? and create_time = ? UNION ALL select COUNT(*) number, user_id, user_name, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, heat_type usertype, heat_price userprice, heat_area userarea, heat_cost usercost, heat_Sum usersum from heat WHERE user_Id = ? and create_time = ? UNION ALL select COUNT(*) number, user_id, user_name, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, water_type usertype, water_price userprice, water_price userarea, water_price usercost, water_Sum usersum from water WHERE user_Id = ? and create_time = ? 
2019-04-03 11:34:23 -==> Parameters: 1-0004(String), 2019-02(String), 1-0004(String), 2019-02(String), 1-0004(String), 2019-02(String)
2019-04-03 11:34:23 -<==      Total: 3
2019-04-03 11:34:23 -耗时 : 7
2019-04-03 11:34:23 -返回值 : [com.bootdo.moneyList.damain.MoneyListDO@5878045d, com.bootdo.moneyList.damain.MoneyListDO@49f21510, com.bootdo.moneyList.damain.MoneyListDO@67c2c028]
2019-04-03 11:37:29 -请求地址 : http://localhost:8081/index
2019-04-03 11:37:29 -HTTP METHOD : GET
2019-04-03 11:37:29 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2019-04-03 11:37:29 -参数 : [{}]
2019-04-03 11:37:29 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2019-04-03 11:37:29 -==> Parameters: 1(Long)
2019-04-03 11:37:29 -<==      Total: 46
2019-04-03 11:37:29 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2019-04-03 11:37:29 -==> Parameters: 138(Long)
2019-04-03 11:37:29 -<==      Total: 1
2019-04-03 11:37:29 -耗时 : 32
2019-04-03 11:37:29 -返回值 : index_v1
2019-04-03 11:37:29 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 11:37:29 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 32(Integer), com.bootdo.system.controller.LoginController.index()(String), {"menus":[{"attributes":{"icon":"fa fa-money","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-money","url":"/moneyList/moneyList"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"102","parentId":"106","text":"现金缴费"},{"attributes":{"icon":"fa fa-book","url":"/moneyLog/elecLog"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"107","parentId":"106","text":"缴费记录"}],"hasChildren":true,"hasParent":false,"id":"106","parentId":"0","text":"收费管理"},{"attributes":{"icon":"fa fa-lightbulb-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/elec/elec"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"121","parentId":"103","text":"电费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"elec/elecInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"122","parentId":"103","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"elec/elecUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"123","parentId":"103","text":"电表上传"},{"attributes":{"icon":"fa fa-cc","url":"/elec/elecPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"124","parentId":"103","text":"电价管理"}],"hasChildren":true,"hasParent":false,"id":"103","parentId":"0","text":"电费管理"},{"attributes":{"icon":"fa fa-tint","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/water/water"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"117","parentId":"105","text":"水费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"water/waterInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"118","parentId":"105","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"water/waterUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"119","parentId":"105","text":"水费生成"},{"attributes":{"icon":"fa fa-cc","url":"/water/waterPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"120","parentId":"105","text":"水价管理"}],"hasChildren":true,"hasParent":false,"id":"105","parentId":"0","text":"水费管理"},{"attributes":{"icon":"fa fa-fire","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/heat/heat"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"113","parentId":"104","text":"暖费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"heat/heatInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"114","parentId":"104","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"heat/heatUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"115","parentId":"104","text":"暖费生成"},{"attributes":{"icon":"","url":"/heat/heatPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"116","parentId":"104","text":"暖价管理"}],"hasChildren":true,"hasParent":false,"id":"104","parentId":"0","text":"暖费管理"},{"attributes":{"icon":"fa fa-vcard-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-bomb","url":"/print/print"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"149","parentId":"108","text":"票据记录"}],"hasChildren":true,"hasParent":false,"id":"108","parentId":"0","text":"票据管理"},{"attributes":{"icon":"fa fa-bar-chart","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-area-chart","url":"/chart/graph_echarts.html"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","text":"百度chart"},{"attributes":{"icon":"fa fa-sun-o","url":"charts/countDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"109","parentId":"97","text":"日统计报表"},{"attributes":{"icon":"fa fa-registered","url":"charts/countMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"110","parentId":"97","text":"月统计报表"},{"attributes":{"icon":"fa fa-money","url":"charts/countOwe"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"155","parentId":"97","text":"欠费报表图"},{"attributes":{"icon":"fa fa-support","url":"charts/countYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"111","parentId":"97","text":"年统计报表"},{"attributes":{"icon":"fa fa-tachometer","url":"charts/countRun"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"112","parentId":"97","text":"走势图报表"}],"hasChildren":true,"hasParent":false,"id":"97","parentId":"0","text":"统计管理"},{"attributes":{"icon":"fa fa-bars","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-book","url":"/common/dict"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"78","parentId":"1","text":"数据字典"},{"attributes":{"icon":"fa fa-folder-open","url":"/common/sysFile"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"71","parentId":"1","text":"文件管理"}],"h(String), 127.0.0.1(String), 2019-04-03 11:37:29.116(Timestamp)
2019-04-03 11:37:29 -请求地址 : http://localhost:8081/main
2019-04-03 11:37:29 -HTTP METHOD : GET
2019-04-03 11:37:29 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 11:37:29 -参数 : []
2019-04-03 11:37:29 -耗时 : 1
2019-04-03 11:37:29 -返回值 : main
2019-04-03 11:37:29 -<==    Updates: 1
2019-04-03 11:37:29 -请求地址 : http://localhost:8081/oa/notify/message
2019-04-03 11:37:29 -HTTP METHOD : GET
2019-04-03 11:37:29 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2019-04-03 11:37:29 -参数 : []
2019-04-03 11:37:29 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2019-04-03 11:37:29 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2019-04-03 11:37:29 -<==      Total: 0
2019-04-03 11:37:29 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2019-04-03 11:37:29 -==> Parameters: 1(Long), 0(String)
2019-04-03 11:37:29 -<==      Total: 1
2019-04-03 11:37:29 -耗时 : 10
2019-04-03 11:37:29 -返回值 : com.bootdo.common.utils.PageUtils@491ae700
2019-04-03 11:37:29 -请求地址 : http://localhost:8081/main
2019-04-03 11:37:29 -HTTP METHOD : GET
2019-04-03 11:37:29 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 11:37:29 -参数 : []
2019-04-03 11:37:29 -耗时 : 1
2019-04-03 11:37:29 -返回值 : main
2019-04-03 11:37:33 -请求地址 : http://localhost:8081/moneyList/moneyList
2019-04-03 11:37:33 -HTTP METHOD : GET
2019-04-03 11:37:33 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.MoneyList
2019-04-03 11:37:33 -参数 : []
2019-04-03 11:37:33 -耗时 : 2
2019-04-03 11:37:33 -返回值 : /moneyList/moneyList
2019-04-03 11:37:37 -请求地址 : http://localhost:8081/system/sysDept/treeView
2019-04-03 11:37:37 -HTTP METHOD : GET
2019-04-03 11:37:37 -CLASS_METHOD : com.bootdo.system.controller.DeptController.treeView
2019-04-03 11:37:37 -参数 : []
2019-04-03 11:37:37 -耗时 : 1
2019-04-03 11:37:37 -返回值 : system/dept/deptTree
2019-04-03 11:37:37 -请求地址 : http://localhost:8081/system/sysDept/tree
2019-04-03 11:37:37 -HTTP METHOD : GET
2019-04-03 11:37:37 -CLASS_METHOD : com.bootdo.system.controller.DeptController.tree
2019-04-03 11:37:37 -参数 : []
2019-04-03 11:37:37 -==>  Preparing: select `dept_id`,`parent_id`,`name`,`order_num`,`del_flag` from sys_dept order by dept_id desc 
2019-04-03 11:37:37 -==> Parameters: 
2019-04-03 11:37:37 -<==      Total: 3
2019-04-03 11:37:37 -耗时 : 3
2019-04-03 11:37:37 -返回值 : {"checked":false,"children":[{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"3","parentId":"1","state":{"opened":true},"text":"牙星"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"2","parentId":"1","state":{"opened":true},"text":"五九"}],"hasChildren":true,"hasParent":false,"id":"1","parentId":"0","state":{"opened":true},"text":"总公司"}
2019-04-03 11:37:40 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUser
2019-04-03 11:37:40 -HTTP METHOD : POST
2019-04-03 11:37:40 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.queryAllUser
2019-04-03 11:37:40 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@538d00bd]
2019-04-03 11:37:40 -==>  Preparing: select COUNT(*) number, user_id, user_name, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, elec_type usertype, elec_price userprice, elec_amount userarea, elec_cost usercost, elec_Sum usersum from elec WHERE user_Id = ? and create_time = ? UNION ALL select COUNT(*) number, user_id, user_name, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, heat_type usertype, heat_price userprice, heat_area userarea, heat_cost usercost, heat_Sum usersum from heat WHERE user_Id = ? and create_time = ? UNION ALL select COUNT(*) number, user_id, user_name, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, water_type usertype, water_price userprice, water_price userarea, water_price usercost, water_Sum usersum from water WHERE user_Id = ? and create_time = ? 
2019-04-03 11:37:40 -==> Parameters: 1-0004(String), 2019-02(String), 1-0004(String), 2019-02(String), 1-0004(String), 2019-02(String)
2019-04-03 11:37:40 -<==      Total: 3
2019-04-03 11:37:40 -耗时 : 4
2019-04-03 11:37:40 -返回值 : [com.bootdo.moneyList.damain.MoneyListDO@6a0439b8, com.bootdo.moneyList.damain.MoneyListDO@1a2831ff, com.bootdo.moneyList.damain.MoneyListDO@219b42ef]
2019-04-03 11:37:59 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUser
2019-04-03 11:37:59 -HTTP METHOD : POST
2019-04-03 11:37:59 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.queryAllUser
2019-04-03 11:37:59 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@19afc1c]
2019-04-03 11:37:59 -==>  Preparing: select COUNT(*) number, user_id, user_name, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, elec_type usertype, elec_price userprice, elec_amount userarea, elec_cost usercost, elec_Sum usersum from elec WHERE user_Id = ? and create_time = ? UNION ALL select COUNT(*) number, user_id, user_name, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, heat_type usertype, heat_price userprice, heat_area userarea, heat_cost usercost, heat_Sum usersum from heat WHERE user_Id = ? and create_time = ? UNION ALL select COUNT(*) number, user_id, user_name, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, water_type usertype, water_price userprice, water_price userarea, water_price usercost, water_Sum usersum from water WHERE user_Id = ? and create_time = ? 
2019-04-03 11:37:59 -==> Parameters: 1-0004(String), 2019-02(String), 1-0004(String), 2019-02(String), 1-0004(String), 2019-02(String)
2019-04-03 11:37:59 -<==      Total: 3
2019-04-03 11:37:59 -耗时 : 10
2019-04-03 11:37:59 -返回值 : [com.bootdo.moneyList.damain.MoneyListDO@551cd93c, com.bootdo.moneyList.damain.MoneyListDO@6e3b44bd, com.bootdo.moneyList.damain.MoneyListDO@4fd25bc1]
2019-04-03 11:38:32 -请求地址 : http://localhost:8081/index
2019-04-03 11:38:32 -HTTP METHOD : GET
2019-04-03 11:38:32 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2019-04-03 11:38:32 -参数 : [{}]
2019-04-03 11:38:32 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2019-04-03 11:38:32 -==> Parameters: 1(Long)
2019-04-03 11:38:32 -<==      Total: 46
2019-04-03 11:38:32 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2019-04-03 11:38:32 -==> Parameters: 138(Long)
2019-04-03 11:38:32 -<==      Total: 1
2019-04-03 11:38:32 -耗时 : 33
2019-04-03 11:38:32 -返回值 : index_v1
2019-04-03 11:38:32 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 11:38:32 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 33(Integer), com.bootdo.system.controller.LoginController.index()(String), {"menus":[{"attributes":{"icon":"fa fa-money","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-money","url":"/moneyList/moneyList"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"102","parentId":"106","text":"现金缴费"},{"attributes":{"icon":"fa fa-book","url":"/moneyLog/elecLog"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"107","parentId":"106","text":"缴费记录"}],"hasChildren":true,"hasParent":false,"id":"106","parentId":"0","text":"收费管理"},{"attributes":{"icon":"fa fa-lightbulb-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/elec/elec"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"121","parentId":"103","text":"电费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"elec/elecInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"122","parentId":"103","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"elec/elecUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"123","parentId":"103","text":"电表上传"},{"attributes":{"icon":"fa fa-cc","url":"/elec/elecPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"124","parentId":"103","text":"电价管理"}],"hasChildren":true,"hasParent":false,"id":"103","parentId":"0","text":"电费管理"},{"attributes":{"icon":"fa fa-tint","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/water/water"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"117","parentId":"105","text":"水费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"water/waterInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"118","parentId":"105","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"water/waterUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"119","parentId":"105","text":"水费生成"},{"attributes":{"icon":"fa fa-cc","url":"/water/waterPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"120","parentId":"105","text":"水价管理"}],"hasChildren":true,"hasParent":false,"id":"105","parentId":"0","text":"水费管理"},{"attributes":{"icon":"fa fa-fire","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/heat/heat"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"113","parentId":"104","text":"暖费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"heat/heatInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"114","parentId":"104","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"heat/heatUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"115","parentId":"104","text":"暖费生成"},{"attributes":{"icon":"","url":"/heat/heatPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"116","parentId":"104","text":"暖价管理"}],"hasChildren":true,"hasParent":false,"id":"104","parentId":"0","text":"暖费管理"},{"attributes":{"icon":"fa fa-vcard-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-bomb","url":"/print/print"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"149","parentId":"108","text":"票据记录"}],"hasChildren":true,"hasParent":false,"id":"108","parentId":"0","text":"票据管理"},{"attributes":{"icon":"fa fa-bar-chart","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-area-chart","url":"/chart/graph_echarts.html"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","text":"百度chart"},{"attributes":{"icon":"fa fa-sun-o","url":"charts/countDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"109","parentId":"97","text":"日统计报表"},{"attributes":{"icon":"fa fa-registered","url":"charts/countMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"110","parentId":"97","text":"月统计报表"},{"attributes":{"icon":"fa fa-money","url":"charts/countOwe"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"155","parentId":"97","text":"欠费报表图"},{"attributes":{"icon":"fa fa-support","url":"charts/countYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"111","parentId":"97","text":"年统计报表"},{"attributes":{"icon":"fa fa-tachometer","url":"charts/countRun"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"112","parentId":"97","text":"走势图报表"}],"hasChildren":true,"hasParent":false,"id":"97","parentId":"0","text":"统计管理"},{"attributes":{"icon":"fa fa-bars","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-book","url":"/common/dict"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"78","parentId":"1","text":"数据字典"},{"attributes":{"icon":"fa fa-folder-open","url":"/common/sysFile"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"71","parentId":"1","text":"文件管理"}],"h(String), 127.0.0.1(String), 2019-04-03 11:38:32.926(Timestamp)
2019-04-03 11:38:33 -<==    Updates: 1
2019-04-03 11:38:33 -请求地址 : http://localhost:8081/main
2019-04-03 11:38:33 -HTTP METHOD : GET
2019-04-03 11:38:33 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 11:38:33 -参数 : []
2019-04-03 11:38:33 -耗时 : 1
2019-04-03 11:38:33 -返回值 : main
2019-04-03 11:38:33 -请求地址 : http://localhost:8081/oa/notify/message
2019-04-03 11:38:33 -HTTP METHOD : GET
2019-04-03 11:38:33 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2019-04-03 11:38:33 -参数 : []
2019-04-03 11:38:33 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2019-04-03 11:38:33 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2019-04-03 11:38:33 -<==      Total: 0
2019-04-03 11:38:33 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2019-04-03 11:38:33 -==> Parameters: 1(Long), 0(String)
2019-04-03 11:38:33 -<==      Total: 1
2019-04-03 11:38:33 -耗时 : 5
2019-04-03 11:38:33 -返回值 : com.bootdo.common.utils.PageUtils@593adbef
2019-04-03 11:38:33 -请求地址 : http://localhost:8081/main
2019-04-03 11:38:33 -HTTP METHOD : GET
2019-04-03 11:38:33 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 11:38:33 -参数 : []
2019-04-03 11:38:33 -耗时 : 0
2019-04-03 11:38:33 -返回值 : main
2019-04-03 11:38:37 -请求地址 : http://localhost:8081/moneyList/moneyList
2019-04-03 11:38:37 -HTTP METHOD : GET
2019-04-03 11:38:37 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.MoneyList
2019-04-03 11:38:37 -参数 : []
2019-04-03 11:38:37 -耗时 : 0
2019-04-03 11:38:37 -返回值 : /moneyList/moneyList
2019-04-03 11:38:44 -请求地址 : http://localhost:8081/system/sysDept/treeView
2019-04-03 11:38:44 -HTTP METHOD : GET
2019-04-03 11:38:44 -CLASS_METHOD : com.bootdo.system.controller.DeptController.treeView
2019-04-03 11:38:44 -参数 : []
2019-04-03 11:38:44 -耗时 : 1
2019-04-03 11:38:44 -返回值 : system/dept/deptTree
2019-04-03 11:38:44 -请求地址 : http://localhost:8081/system/sysDept/tree
2019-04-03 11:38:44 -HTTP METHOD : GET
2019-04-03 11:38:44 -CLASS_METHOD : com.bootdo.system.controller.DeptController.tree
2019-04-03 11:38:44 -参数 : []
2019-04-03 11:38:44 -==>  Preparing: select `dept_id`,`parent_id`,`name`,`order_num`,`del_flag` from sys_dept order by dept_id desc 
2019-04-03 11:38:44 -==> Parameters: 
2019-04-03 11:38:44 -<==      Total: 3
2019-04-03 11:38:44 -耗时 : 8
2019-04-03 11:38:44 -返回值 : {"checked":false,"children":[{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"3","parentId":"1","state":{"opened":true},"text":"牙星"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"2","parentId":"1","state":{"opened":true},"text":"五九"}],"hasChildren":true,"hasParent":false,"id":"1","parentId":"0","state":{"opened":true},"text":"总公司"}
2019-04-03 11:38:47 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUser
2019-04-03 11:38:47 -HTTP METHOD : POST
2019-04-03 11:38:47 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.queryAllUser
2019-04-03 11:38:47 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@2480e035]
2019-04-03 11:38:47 -==>  Preparing: select COUNT(*) number, user_id, user_name, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, elec_type usertype, elec_price userprice, elec_amount userarea, elec_cost usercost, elec_Sum usersum from elec WHERE user_Id = ? and create_time = ? UNION ALL select COUNT(*) number, user_id, user_name, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, heat_type usertype, heat_price userprice, heat_area userarea, heat_cost usercost, heat_Sum usersum from heat WHERE user_Id = ? and create_time = ? UNION ALL select COUNT(*) number, user_id, user_name, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, water_type usertype, water_price userprice, water_price userarea, water_price usercost, water_Sum usersum from water WHERE user_Id = ? and create_time = ? 
2019-04-03 11:38:47 -==> Parameters: 1-0004(String), 2019-02(String), 1-0004(String), 2019-02(String), 1-0004(String), 2019-02(String)
2019-04-03 11:38:47 -<==      Total: 3
2019-04-03 11:38:47 -耗时 : 4
2019-04-03 11:38:47 -返回值 : [com.bootdo.moneyList.damain.MoneyListDO@12be0994, com.bootdo.moneyList.damain.MoneyListDO@3deeb22, com.bootdo.moneyList.damain.MoneyListDO@20fc2224]
2019-04-03 11:39:20 -WebSocketSession[1 current WS(1)-HttpStream(0)-HttpPoll(0), 7 total, 0 closed abnormally (0 connect failure, 0 send limit, 3 transport error)], stompSubProtocol[processed CONNECT(6)-CONNECTED(6)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 8, active threads = 0, queued tasks = 0, completed tasks = 72], outboundChannelpool size = 2, active threads = 0, queued tasks = 0, completed tasks = 12], sockJsScheduler[pool size = 4, active threads = 1, queued tasks = 2, completed tasks = 422]
2019-04-03 11:41:59 -请求地址 : http://localhost:8081/index
2019-04-03 11:41:59 -HTTP METHOD : GET
2019-04-03 11:41:59 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2019-04-03 11:41:59 -参数 : [{}]
2019-04-03 11:41:59 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2019-04-03 11:41:59 -==> Parameters: 1(Long)
2019-04-03 11:41:59 -<==      Total: 46
2019-04-03 11:41:59 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2019-04-03 11:41:59 -==> Parameters: 138(Long)
2019-04-03 11:41:59 -<==      Total: 1
2019-04-03 11:41:59 -耗时 : 30
2019-04-03 11:41:59 -返回值 : index_v1
2019-04-03 11:41:59 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 11:41:59 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 31(Integer), com.bootdo.system.controller.LoginController.index()(String), {"menus":[{"attributes":{"icon":"fa fa-money","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-money","url":"/moneyList/moneyList"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"102","parentId":"106","text":"现金缴费"},{"attributes":{"icon":"fa fa-book","url":"/moneyLog/elecLog"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"107","parentId":"106","text":"缴费记录"}],"hasChildren":true,"hasParent":false,"id":"106","parentId":"0","text":"收费管理"},{"attributes":{"icon":"fa fa-lightbulb-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/elec/elec"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"121","parentId":"103","text":"电费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"elec/elecInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"122","parentId":"103","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"elec/elecUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"123","parentId":"103","text":"电表上传"},{"attributes":{"icon":"fa fa-cc","url":"/elec/elecPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"124","parentId":"103","text":"电价管理"}],"hasChildren":true,"hasParent":false,"id":"103","parentId":"0","text":"电费管理"},{"attributes":{"icon":"fa fa-tint","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/water/water"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"117","parentId":"105","text":"水费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"water/waterInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"118","parentId":"105","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"water/waterUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"119","parentId":"105","text":"水费生成"},{"attributes":{"icon":"fa fa-cc","url":"/water/waterPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"120","parentId":"105","text":"水价管理"}],"hasChildren":true,"hasParent":false,"id":"105","parentId":"0","text":"水费管理"},{"attributes":{"icon":"fa fa-fire","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/heat/heat"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"113","parentId":"104","text":"暖费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"heat/heatInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"114","parentId":"104","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"heat/heatUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"115","parentId":"104","text":"暖费生成"},{"attributes":{"icon":"","url":"/heat/heatPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"116","parentId":"104","text":"暖价管理"}],"hasChildren":true,"hasParent":false,"id":"104","parentId":"0","text":"暖费管理"},{"attributes":{"icon":"fa fa-vcard-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-bomb","url":"/print/print"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"149","parentId":"108","text":"票据记录"}],"hasChildren":true,"hasParent":false,"id":"108","parentId":"0","text":"票据管理"},{"attributes":{"icon":"fa fa-bar-chart","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-area-chart","url":"/chart/graph_echarts.html"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","text":"百度chart"},{"attributes":{"icon":"fa fa-sun-o","url":"charts/countDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"109","parentId":"97","text":"日统计报表"},{"attributes":{"icon":"fa fa-registered","url":"charts/countMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"110","parentId":"97","text":"月统计报表"},{"attributes":{"icon":"fa fa-support","url":"charts/countYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"111","parentId":"97","text":"年统计报表"},{"attributes":{"icon":"fa fa-money","url":"charts/countOwe"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"155","parentId":"97","text":"欠费报表图"},{"attributes":{"icon":"fa fa-tachometer","url":"charts/countRun"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"112","parentId":"97","text":"走势图报表"}],"hasChildren":true,"hasParent":false,"id":"97","parentId":"0","text":"统计管理"},{"attributes":{"icon":"fa fa-bars","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-book","url":"/common/dict"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"78","parentId":"1","text":"数据字典"},{"attributes":{"icon":"fa fa-folder-open","url":"/common/sysFile"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"71","parentId":"1","text":"文件管理"}],"h(String), 127.0.0.1(String), 2019-04-03 11:41:59.255(Timestamp)
2019-04-03 11:41:59 -请求地址 : http://localhost:8081/main
2019-04-03 11:41:59 -HTTP METHOD : GET
2019-04-03 11:41:59 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 11:41:59 -参数 : []
2019-04-03 11:41:59 -耗时 : 0
2019-04-03 11:41:59 -返回值 : main
2019-04-03 11:41:59 -<==    Updates: 1
2019-04-03 11:41:59 -请求地址 : http://localhost:8081/oa/notify/message
2019-04-03 11:41:59 -HTTP METHOD : GET
2019-04-03 11:41:59 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2019-04-03 11:41:59 -参数 : []
2019-04-03 11:41:59 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2019-04-03 11:41:59 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2019-04-03 11:41:59 -<==      Total: 0
2019-04-03 11:41:59 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2019-04-03 11:41:59 -==> Parameters: 1(Long), 0(String)
2019-04-03 11:41:59 -<==      Total: 1
2019-04-03 11:41:59 -耗时 : 9
2019-04-03 11:41:59 -返回值 : com.bootdo.common.utils.PageUtils@2f013673
2019-04-03 11:41:59 -请求地址 : http://localhost:8081/main
2019-04-03 11:41:59 -HTTP METHOD : GET
2019-04-03 11:41:59 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 11:41:59 -参数 : []
2019-04-03 11:41:59 -耗时 : 1
2019-04-03 11:41:59 -返回值 : main
2019-04-03 11:42:03 -请求地址 : http://localhost:8081/moneyList/moneyList
2019-04-03 11:42:03 -HTTP METHOD : GET
2019-04-03 11:42:03 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.MoneyList
2019-04-03 11:42:03 -参数 : []
2019-04-03 11:42:03 -耗时 : 0
2019-04-03 11:42:03 -返回值 : /moneyList/moneyList
2019-04-03 11:42:09 -请求地址 : http://localhost:8081/system/sysDept/treeView
2019-04-03 11:42:09 -HTTP METHOD : GET
2019-04-03 11:42:09 -CLASS_METHOD : com.bootdo.system.controller.DeptController.treeView
2019-04-03 11:42:09 -参数 : []
2019-04-03 11:42:09 -耗时 : 1
2019-04-03 11:42:09 -返回值 : system/dept/deptTree
2019-04-03 11:42:10 -请求地址 : http://localhost:8081/system/sysDept/tree
2019-04-03 11:42:10 -HTTP METHOD : GET
2019-04-03 11:42:10 -CLASS_METHOD : com.bootdo.system.controller.DeptController.tree
2019-04-03 11:42:10 -参数 : []
2019-04-03 11:42:10 -==>  Preparing: select `dept_id`,`parent_id`,`name`,`order_num`,`del_flag` from sys_dept order by dept_id desc 
2019-04-03 11:42:10 -==> Parameters: 
2019-04-03 11:42:10 -<==      Total: 3
2019-04-03 11:42:10 -耗时 : 6
2019-04-03 11:42:10 -返回值 : {"checked":false,"children":[{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"3","parentId":"1","state":{"opened":true},"text":"牙星"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"2","parentId":"1","state":{"opened":true},"text":"五九"}],"hasChildren":true,"hasParent":false,"id":"1","parentId":"0","state":{"opened":true},"text":"总公司"}
2019-04-03 11:42:13 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUser
2019-04-03 11:42:13 -HTTP METHOD : POST
2019-04-03 11:42:13 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.queryAllUser
2019-04-03 11:42:13 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@3ac35c83]
2019-04-03 11:42:13 -==>  Preparing: select COUNT(*) number, user_id, user_name, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, elec_type usertype, elec_price userprice, elec_amount userarea, elec_cost usercost, elec_Sum usersum from elec WHERE user_Id = ? and create_time = ? UNION ALL select COUNT(*) number, user_id, user_name, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, heat_type usertype, heat_price userprice, heat_area userarea, heat_cost usercost, heat_Sum usersum from heat WHERE user_Id = ? and create_time = ? UNION ALL select COUNT(*) number, user_id, user_name, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, water_type usertype, water_price userprice, water_price userarea, water_price usercost, water_Sum usersum from water WHERE user_Id = ? and create_time = ? 
2019-04-03 11:42:13 -==> Parameters: 1-0004(String), 2019-02(String), 1-0004(String), 2019-02(String), 1-0004(String), 2019-02(String)
2019-04-03 11:42:13 -<==      Total: 3
2019-04-03 11:42:13 -耗时 : 5
2019-04-03 11:42:13 -返回值 : [com.bootdo.moneyList.damain.MoneyListDO@38c140be, com.bootdo.moneyList.damain.MoneyListDO@13c3de33, com.bootdo.moneyList.damain.MoneyListDO@3344bf8c]
2019-04-03 12:09:14 -Validating all active sessions...
2019-04-03 12:09:14 -Finished session validation.  No sessions were stopped.
2019-04-03 12:09:20 -WebSocketSession[1 current WS(1)-HttpStream(0)-HttpPoll(0), 8 total, 0 closed abnormally (0 connect failure, 0 send limit, 3 transport error)], stompSubProtocol[processed CONNECT(7)-CONNECTED(7)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 84], outboundChannelpool size = 0, active threads = 0, queued tasks = 0, completed tasks = 14], sockJsScheduler[pool size = 4, active threads = 1, queued tasks = 2, completed tasks = 855]
2019-04-03 13:34:09 -WebSocketSession[1 current WS(1)-HttpStream(0)-HttpPoll(0), 8 total, 0 closed abnormally (0 connect failure, 0 send limit, 3 transport error)], stompSubProtocol[processed CONNECT(7)-CONNECTED(7)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 84], outboundChannelpool size = 0, active threads = 0, queued tasks = 0, completed tasks = 14], sockJsScheduler[pool size = 4, active threads = 3, queued tasks = 0, completed tasks = 935]
2019-04-03 13:34:09 -WebSocketSession[1 current WS(1)-HttpStream(0)-HttpPoll(0), 8 total, 0 closed abnormally (0 connect failure, 0 send limit, 3 transport error)], stompSubProtocol[processed CONNECT(7)-CONNECTED(7)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 84], outboundChannelpool size = 0, active threads = 0, queued tasks = 0, completed tasks = 14], sockJsScheduler[pool size = 4, active threads = 3, queued tasks = 1, completed tasks = 1080]
2019-04-03 13:39:20 -WebSocketSession[1 current WS(1)-HttpStream(0)-HttpPoll(0), 8 total, 0 closed abnormally (0 connect failure, 0 send limit, 3 transport error)], stompSubProtocol[processed CONNECT(7)-CONNECTED(7)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 84], outboundChannelpool size = 0, active threads = 0, queued tasks = 0, completed tasks = 14], sockJsScheduler[pool size = 4, active threads = 1, queued tasks = 2, completed tasks = 1961]
2019-04-03 13:41:22 -请求地址 : http://localhost:8081/login;JSESSIONID=d3495f3f-6575-4307-bd59-e2f82dc20d39
2019-04-03 13:41:22 -HTTP METHOD : GET
2019-04-03 13:41:22 -CLASS_METHOD : com.bootdo.system.controller.LoginController.login
2019-04-03 13:41:22 -参数 : [{}]
2019-04-03 13:41:22 -耗时 : 2
2019-04-03 13:41:22 -返回值 : login
2019-04-03 13:41:23 -请求地址 : http://localhost:8081/login
2019-04-03 13:41:23 -HTTP METHOD : GET
2019-04-03 13:41:23 -CLASS_METHOD : com.bootdo.system.controller.LoginController.login
2019-04-03 13:41:23 -参数 : [{}]
2019-04-03 13:41:23 -耗时 : 1
2019-04-03 13:41:23 -返回值 : login
2019-04-03 13:41:23 -请求地址 : http://localhost:8081/getVerify
2019-04-03 13:41:23 -HTTP METHOD : GET
2019-04-03 13:41:23 -CLASS_METHOD : com.bootdo.system.controller.LoginController.getVerify
2019-04-03 13:41:23 -参数 : [org.apache.shiro.web.servlet.ShiroHttpServletRequest@7a8b5fe8, org.apache.shiro.web.servlet.ShiroHttpServletResponse@3b2acad3]
2019-04-03 13:41:24 -9766
2019-04-03 13:41:25 -耗时 : 1139
2019-04-03 13:41:25 -返回值 : null
2019-04-03 13:41:32 -请求地址 : http://localhost:8081/login
2019-04-03 13:41:32 -HTTP METHOD : POST
2019-04-03 13:41:32 -CLASS_METHOD : com.bootdo.system.controller.LoginController.ajaxLogin
2019-04-03 13:41:32 -参数 : [admin, 111111, 9766, org.apache.shiro.web.servlet.ShiroHttpServletRequest@4dd27db8]
2019-04-03 13:41:32 -==>  Preparing: select `user_id`,`username`,`name`,`password`,`dept_id`,`email`,`mobile`,`status`,`user_id_create`,`gmt_create`,`gmt_modified`,`sex`,`birth`,`pic_id`,`live_address`,`hobby`,`province`,`city`,`district` from sys_user WHERE username = ? order by user_id desc 
2019-04-03 13:41:32 -==> Parameters: admin(String)
2019-04-03 13:41:32 -<==      Total: 1
2019-04-03 13:41:32 -耗时 : 308
2019-04-03 13:41:32 -返回值 : {msg=操作成功, code=0}
2019-04-03 13:41:32 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 13:41:32 -==> Parameters: 1(Long), admin(String), 登录(String), 308(Integer), com.bootdo.system.controller.LoginController.ajaxLogin()(String), null, 127.0.0.1(String), 2019-04-03 13:41:32.498(Timestamp)
2019-04-03 13:41:32 -<==    Updates: 1
2019-04-03 13:41:32 -请求地址 : http://localhost:8081/index
2019-04-03 13:41:32 -HTTP METHOD : GET
2019-04-03 13:41:32 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2019-04-03 13:41:32 -参数 : [{}]
2019-04-03 13:41:32 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2019-04-03 13:41:32 -==> Parameters: 1(Long)
2019-04-03 13:41:32 -<==      Total: 46
2019-04-03 13:41:32 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2019-04-03 13:41:32 -==> Parameters: 138(Long)
2019-04-03 13:41:32 -<==      Total: 1
2019-04-03 13:41:32 -耗时 : 147
2019-04-03 13:41:32 -返回值 : index_v1
2019-04-03 13:41:33 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 13:41:33 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 147(Integer), com.bootdo.system.controller.LoginController.index()(String), {"menus":[{"attributes":{"icon":"fa fa-money","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-money","url":"/moneyList/moneyList"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"102","parentId":"106","text":"现金缴费"},{"attributes":{"icon":"fa fa-book","url":"/moneyLog/elecLog"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"107","parentId":"106","text":"缴费记录"}],"hasChildren":true,"hasParent":false,"id":"106","parentId":"0","text":"收费管理"},{"attributes":{"icon":"fa fa-lightbulb-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/elec/elec"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"121","parentId":"103","text":"电费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"elec/elecInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"122","parentId":"103","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"elec/elecUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"123","parentId":"103","text":"电表上传"},{"attributes":{"icon":"fa fa-cc","url":"/elec/elecPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"124","parentId":"103","text":"电价管理"}],"hasChildren":true,"hasParent":false,"id":"103","parentId":"0","text":"电费管理"},{"attributes":{"icon":"fa fa-tint","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/water/water"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"117","parentId":"105","text":"水费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"water/waterInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"118","parentId":"105","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"water/waterUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"119","parentId":"105","text":"水费生成"},{"attributes":{"icon":"fa fa-cc","url":"/water/waterPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"120","parentId":"105","text":"水价管理"}],"hasChildren":true,"hasParent":false,"id":"105","parentId":"0","text":"水费管理"},{"attributes":{"icon":"fa fa-fire","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/heat/heat"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"113","parentId":"104","text":"暖费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"heat/heatInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"114","parentId":"104","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"heat/heatUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"115","parentId":"104","text":"暖费生成"},{"attributes":{"icon":"","url":"/heat/heatPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"116","parentId":"104","text":"暖价管理"}],"hasChildren":true,"hasParent":false,"id":"104","parentId":"0","text":"暖费管理"},{"attributes":{"icon":"fa fa-vcard-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-bomb","url":"/print/print"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"149","parentId":"108","text":"票据记录"}],"hasChildren":true,"hasParent":false,"id":"108","parentId":"0","text":"票据管理"},{"attributes":{"icon":"fa fa-bar-chart","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-area-chart","url":"/chart/graph_echarts.html"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","text":"百度chart"},{"attributes":{"icon":"fa fa-sun-o","url":"charts/countDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"109","parentId":"97","text":"日统计报表"},{"attributes":{"icon":"fa fa-registered","url":"charts/countMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"110","parentId":"97","text":"月统计报表"},{"attributes":{"icon":"fa fa-money","url":"charts/countOwe"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"155","parentId":"97","text":"欠费报表图"},{"attributes":{"icon":"fa fa-support","url":"charts/countYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"111","parentId":"97","text":"年统计报表"},{"attributes":{"icon":"fa fa-tachometer","url":"charts/countRun"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"112","parentId":"97","text":"走势图报表"}],"hasChildren":true,"hasParent":false,"id":"97","parentId":"0","text":"统计管理"},{"attributes":{"icon":"fa fa-bars","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-book","url":"/common/dict"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"78","parentId":"1","text":"数据字典"},{"attributes":{"icon":"fa fa-folder-open","url":"/common/sysFile"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"71","parentId":"1","text":"文件管理"}],"h(String), 127.0.0.1(String), 2019-04-03 13:41:32.939(Timestamp)
2019-04-03 13:41:33 -<==    Updates: 1
2019-04-03 13:41:33 -请求地址 : http://localhost:8081/main
2019-04-03 13:41:33 -HTTP METHOD : GET
2019-04-03 13:41:33 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 13:41:33 -参数 : []
2019-04-03 13:41:33 -耗时 : 1
2019-04-03 13:41:33 -返回值 : main
2019-04-03 13:41:34 -请求地址 : http://localhost:8081/oa/notify/message
2019-04-03 13:41:34 -HTTP METHOD : GET
2019-04-03 13:41:34 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2019-04-03 13:41:34 -参数 : []
2019-04-03 13:41:34 -请求地址 : http://localhost:8081/main
2019-04-03 13:41:34 -HTTP METHOD : GET
2019-04-03 13:41:34 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 13:41:34 -参数 : []
2019-04-03 13:41:34 -耗时 : 1
2019-04-03 13:41:34 -返回值 : main
2019-04-03 13:41:34 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2019-04-03 13:41:34 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2019-04-03 13:41:34 -<==      Total: 0
2019-04-03 13:41:34 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2019-04-03 13:41:34 -==> Parameters: 1(Long), 0(String)
2019-04-03 13:41:34 -<==      Total: 1
2019-04-03 13:41:34 -耗时 : 138
2019-04-03 13:41:34 -返回值 : com.bootdo.common.utils.PageUtils@66ef762d
2019-04-03 13:41:51 -==>  Preparing: select distinct m.perms from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id = ur.role_id where ur.user_id = ? 
2019-04-03 13:41:51 -==> Parameters: 1(Long)
2019-04-03 13:41:52 -<==      Total: 90
2019-04-03 13:41:52 -请求地址 : http://localhost:8081/moneyList/moneyList
2019-04-03 13:41:52 -HTTP METHOD : GET
2019-04-03 13:41:52 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.MoneyList
2019-04-03 13:41:52 -参数 : []
2019-04-03 13:41:52 -耗时 : 48
2019-04-03 13:41:52 -返回值 : /moneyList/moneyList
2019-04-03 13:42:17 -请求地址 : http://localhost:8081/system/sysDept/treeView
2019-04-03 13:42:17 -HTTP METHOD : GET
2019-04-03 13:42:17 -CLASS_METHOD : com.bootdo.system.controller.DeptController.treeView
2019-04-03 13:42:17 -参数 : []
2019-04-03 13:42:17 -耗时 : 2
2019-04-03 13:42:17 -返回值 : system/dept/deptTree
2019-04-03 13:42:17 -请求地址 : http://localhost:8081/system/sysDept/tree
2019-04-03 13:42:17 -HTTP METHOD : GET
2019-04-03 13:42:17 -CLASS_METHOD : com.bootdo.system.controller.DeptController.tree
2019-04-03 13:42:17 -参数 : []
2019-04-03 13:42:17 -==>  Preparing: select `dept_id`,`parent_id`,`name`,`order_num`,`del_flag` from sys_dept order by dept_id desc 
2019-04-03 13:42:17 -==> Parameters: 
2019-04-03 13:42:17 -<==      Total: 3
2019-04-03 13:42:17 -耗时 : 36
2019-04-03 13:42:17 -返回值 : {"checked":false,"children":[{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"3","parentId":"1","state":{"opened":true},"text":"牙星"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"2","parentId":"1","state":{"opened":true},"text":"五九"}],"hasChildren":true,"hasParent":false,"id":"1","parentId":"0","state":{"opened":true},"text":"总公司"}
2019-04-03 13:42:20 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUser
2019-04-03 13:42:20 -HTTP METHOD : POST
2019-04-03 13:42:20 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.queryAllUser
2019-04-03 13:42:20 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@126dba71]
2019-04-03 13:42:20 -==>  Preparing: select COUNT(*) number, user_id, user_name, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, elec_type usertype, elec_price userprice, elec_amount userarea, elec_cost usercost, elec_Sum usersum from elec WHERE user_Id = ? and create_time = ? UNION ALL select COUNT(*) number, user_id, user_name, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, heat_type usertype, heat_price userprice, heat_area userarea, heat_cost usercost, heat_Sum usersum from heat WHERE user_Id = ? and create_time = ? UNION ALL select COUNT(*) number, user_id, user_name, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, water_type usertype, water_price userprice, water_price userarea, water_price usercost, water_Sum usersum from water WHERE user_Id = ? and create_time = ? 
2019-04-03 13:42:20 -==> Parameters: 1-0004(String), 2019-02(String), 1-0004(String), 2019-02(String), 1-0004(String), 2019-02(String)
2019-04-03 13:42:20 -<==      Total: 3
2019-04-03 13:42:20 -耗时 : 74
2019-04-03 13:42:20 -返回值 : [com.bootdo.moneyList.damain.MoneyListDO@1a812e31, com.bootdo.moneyList.damain.MoneyListDO@13efa8d, com.bootdo.moneyList.damain.MoneyListDO@7e7f76e9]
2019-04-03 13:42:31 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUserName
2019-04-03 13:42:31 -HTTP METHOD : POST
2019-04-03 13:42:31 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.getAllUserName
2019-04-03 13:42:31 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@1b86210e]
2019-04-03 13:42:32 -==>  Preparing: select user_name from elec WHERE user_name like CONCAT(CONCAT('%',?,'%')) UNION ALL select user_name from heat WHERE user_name like CONCAT(CONCAT('%',?,'%')) UNION ALL select user_name from water WHERE user_name like CONCAT(CONCAT('%',?,'%')) 
2019-04-03 13:42:33 -==> Parameters: 刘(String), 刘(String), 刘(String)
2019-04-03 13:42:33 -<==      Total: 0
2019-04-03 13:42:33 -耗时 : 1734
2019-04-03 13:42:33 -返回值 : []
2019-04-03 13:42:34 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUserName
2019-04-03 13:42:34 -HTTP METHOD : POST
2019-04-03 13:42:34 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.getAllUserName
2019-04-03 13:42:34 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@5df43298]
2019-04-03 13:42:34 -==>  Preparing: select user_name from elec WHERE user_name like CONCAT(CONCAT('%',?,'%')) UNION ALL select user_name from heat WHERE user_name like CONCAT(CONCAT('%',?,'%')) UNION ALL select user_name from water WHERE user_name like CONCAT(CONCAT('%',?,'%')) 
2019-04-03 13:42:34 -==> Parameters: 刘(String), 刘(String), 刘(String)
2019-04-03 13:42:34 -<==      Total: 0
2019-04-03 13:42:34 -耗时 : 24
2019-04-03 13:42:34 -返回值 : []
2019-04-03 13:42:35 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUserName
2019-04-03 13:42:35 -HTTP METHOD : POST
2019-04-03 13:42:35 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.getAllUserName
2019-04-03 13:42:35 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@395d38b]
2019-04-03 13:42:35 -==>  Preparing: select user_name from elec WHERE user_name like CONCAT(CONCAT('%',?,'%')) UNION ALL select user_name from heat WHERE user_name like CONCAT(CONCAT('%',?,'%')) UNION ALL select user_name from water WHERE user_name like CONCAT(CONCAT('%',?,'%')) 
2019-04-03 13:42:35 -==> Parameters: 刘(String), 刘(String), 刘(String)
2019-04-03 13:42:35 -<==      Total: 0
2019-04-03 13:42:35 -耗时 : 35
2019-04-03 13:42:35 -返回值 : []
2019-04-03 13:42:35 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUserName
2019-04-03 13:42:35 -HTTP METHOD : POST
2019-04-03 13:42:35 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.getAllUserName
2019-04-03 13:42:35 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@66edce2]
2019-04-03 13:42:35 -==>  Preparing: select user_name from elec WHERE user_name like CONCAT(CONCAT('%',?,'%')) UNION ALL select user_name from heat WHERE user_name like CONCAT(CONCAT('%',?,'%')) UNION ALL select user_name from water WHERE user_name like CONCAT(CONCAT('%',?,'%')) 
2019-04-03 13:42:35 -==> Parameters: 刘(String), 刘(String), 刘(String)
2019-04-03 13:42:35 -<==      Total: 0
2019-04-03 13:42:35 -耗时 : 3
2019-04-03 13:42:35 -返回值 : []
2019-04-03 13:42:41 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUserName
2019-04-03 13:42:41 -HTTP METHOD : POST
2019-04-03 13:42:41 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.getAllUserName
2019-04-03 13:42:41 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@32b52299]
2019-04-03 13:42:41 -==>  Preparing: select user_name from elec WHERE user_name like CONCAT(CONCAT('%',?,'%')) UNION ALL select user_name from heat WHERE user_name like CONCAT(CONCAT('%',?,'%')) UNION ALL select user_name from water WHERE user_name like CONCAT(CONCAT('%',?,'%')) 
2019-04-03 13:42:41 -==> Parameters: 王(String), 王(String), 王(String)
2019-04-03 13:42:41 -<==      Total: 0
2019-04-03 13:42:41 -耗时 : 5
2019-04-03 13:42:41 -返回值 : []
2019-04-03 13:42:47 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUserName
2019-04-03 13:42:47 -HTTP METHOD : POST
2019-04-03 13:42:47 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.getAllUserName
2019-04-03 13:42:47 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@51072a2b]
2019-04-03 13:42:47 -==>  Preparing: select user_name from elec WHERE user_name like CONCAT(CONCAT('%',?,'%')) UNION ALL select user_name from heat WHERE user_name like CONCAT(CONCAT('%',?,'%')) UNION ALL select user_name from water WHERE user_name like CONCAT(CONCAT('%',?,'%')) 
2019-04-03 13:42:47 -==> Parameters: 啊(String), 啊(String), 啊(String)
2019-04-03 13:42:47 -<==      Total: 0
2019-04-03 13:42:47 -耗时 : 3
2019-04-03 13:42:47 -返回值 : []
2019-04-03 13:42:50 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUserName
2019-04-03 13:42:50 -HTTP METHOD : POST
2019-04-03 13:42:50 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.getAllUserName
2019-04-03 13:42:50 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@60d9d587]
2019-04-03 13:42:50 -==>  Preparing: select user_name from elec WHERE user_name like CONCAT(CONCAT('%',?,'%')) UNION ALL select user_name from heat WHERE user_name like CONCAT(CONCAT('%',?,'%')) UNION ALL select user_name from water WHERE user_name like CONCAT(CONCAT('%',?,'%')) 
2019-04-03 13:42:50 -==> Parameters: 阿(String), 阿(String), 阿(String)
2019-04-03 13:42:50 -<==      Total: 15
2019-04-03 13:42:50 -耗时 : 4
2019-04-03 13:42:50 -返回值 : [com.bootdo.moneyList.damain.MoneyListDO@4bf3f1d1, com.bootdo.moneyList.damain.MoneyListDO@7c784a42, com.bootdo.moneyList.damain.MoneyListDO@5223dda7, com.bootdo.moneyList.damain.MoneyListDO@230bf6d3, com.bootdo.moneyList.damain.MoneyListDO@77a2e61a, com.bootdo.moneyList.damain.MoneyListDO@493698f6, com.bootdo.moneyList.damain.MoneyListDO@5b4aa92, com.bootdo.moneyList.damain.MoneyListDO@79f56999, com.bootdo.moneyList.damain.MoneyListDO@1907c28b, com.bootdo.moneyList.damain.MoneyListDO@648b1875, com.bootdo.moneyList.damain.MoneyListDO@444bce4c, com.bootdo.moneyList.damain.MoneyListDO@1620defd, com.bootdo.moneyList.damain.MoneyListDO@31144528, com.bootdo.moneyList.damain.MoneyListDO@d60abcf, com.bootdo.moneyList.damain.MoneyListDO@17432d81]
2019-04-03 13:43:00 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUser
2019-04-03 13:43:00 -HTTP METHOD : POST
2019-04-03 13:43:00 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.queryAllUser
2019-04-03 13:43:00 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@1c309007]
2019-04-03 13:43:00 -==>  Preparing: select COUNT(*) number, user_id, user_name, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, elec_type usertype, elec_price userprice, elec_amount userarea, elec_cost usercost, elec_Sum usersum from elec WHERE user_Id = ? and create_time = ? and user_name = ? UNION ALL select COUNT(*) number, user_id, user_name, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, heat_type usertype, heat_price userprice, heat_area userarea, heat_cost usercost, heat_Sum usersum from heat WHERE user_Id = ? and create_time = ? and user_name = ? UNION ALL select COUNT(*) number, user_id, user_name, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, water_type usertype, water_price userprice, water_price userarea, water_price usercost, water_Sum usersum from water WHERE user_Id = ? and create_time = ? and user_name = ? 
2019-04-03 13:43:01 -==> Parameters: 1-0004(String), 2019-02(String), 阿萨德(String), 1-0004(String), 2019-02(String), 阿萨德(String), 1-0004(String), 2019-02(String), 阿萨德(String)
2019-04-03 13:43:01 -<==      Total: 3
2019-04-03 13:43:01 -耗时 : 40
2019-04-03 13:43:01 -返回值 : [com.bootdo.moneyList.damain.MoneyListDO@23ee9c22, com.bootdo.moneyList.damain.MoneyListDO@28d27918, com.bootdo.moneyList.damain.MoneyListDO@307a64ad]
2019-04-03 13:43:02 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUserName
2019-04-03 13:43:02 -HTTP METHOD : POST
2019-04-03 13:43:02 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.getAllUserName
2019-04-03 13:43:02 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@7c6d147c]
2019-04-03 13:43:02 -==>  Preparing: select user_name from elec WHERE user_name like CONCAT(CONCAT('%',?,'%')) UNION ALL select user_name from heat WHERE user_name like CONCAT(CONCAT('%',?,'%')) UNION ALL select user_name from water WHERE user_name like CONCAT(CONCAT('%',?,'%')) 
2019-04-03 13:43:02 -==> Parameters: 阿萨德(String), 阿萨德(String), 阿萨德(String)
2019-04-03 13:43:02 -<==      Total: 10
2019-04-03 13:43:02 -耗时 : 4
2019-04-03 13:43:02 -返回值 : [com.bootdo.moneyList.damain.MoneyListDO@705094b8, com.bootdo.moneyList.damain.MoneyListDO@1df05fe1, com.bootdo.moneyList.damain.MoneyListDO@9aa76d7, com.bootdo.moneyList.damain.MoneyListDO@65b04e76, com.bootdo.moneyList.damain.MoneyListDO@1131f32c, com.bootdo.moneyList.damain.MoneyListDO@e21b9bc, com.bootdo.moneyList.damain.MoneyListDO@54677a61, com.bootdo.moneyList.damain.MoneyListDO@33c35d65, com.bootdo.moneyList.damain.MoneyListDO@2d7570a2, com.bootdo.moneyList.damain.MoneyListDO@2e1ad0e9]
2019-04-03 13:43:03 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUser
2019-04-03 13:43:03 -HTTP METHOD : POST
2019-04-03 13:43:03 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.queryAllUser
2019-04-03 13:43:03 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@5a5061a8]
2019-04-03 13:43:03 -==>  Preparing: select COUNT(*) number, user_id, user_name, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, elec_type usertype, elec_price userprice, elec_amount userarea, elec_cost usercost, elec_Sum usersum from elec WHERE user_Id = ? and create_time = ? and user_name = ? UNION ALL select COUNT(*) number, user_id, user_name, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, heat_type usertype, heat_price userprice, heat_area userarea, heat_cost usercost, heat_Sum usersum from heat WHERE user_Id = ? and create_time = ? and user_name = ? UNION ALL select COUNT(*) number, user_id, user_name, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, water_type usertype, water_price userprice, water_price userarea, water_price usercost, water_Sum usersum from water WHERE user_Id = ? and create_time = ? and user_name = ? 
2019-04-03 13:43:03 -==> Parameters: 1-0004(String), 2019-02(String), 阿萨德(String), 1-0004(String), 2019-02(String), 阿萨德(String), 1-0004(String), 2019-02(String), 阿萨德(String)
2019-04-03 13:43:03 -<==      Total: 3
2019-04-03 13:43:03 -耗时 : 3
2019-04-03 13:43:03 -返回值 : [com.bootdo.moneyList.damain.MoneyListDO@4044630b, com.bootdo.moneyList.damain.MoneyListDO@66a2102e, com.bootdo.moneyList.damain.MoneyListDO@3fa66073]
2019-04-03 13:43:05 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUserName
2019-04-03 13:43:05 -HTTP METHOD : POST
2019-04-03 13:43:05 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.getAllUserName
2019-04-03 13:43:05 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@116925d]
2019-04-03 13:43:05 -==>  Preparing: select user_name from elec WHERE user_name like CONCAT(CONCAT('%',?,'%')) UNION ALL select user_name from heat WHERE user_name like CONCAT(CONCAT('%',?,'%')) UNION ALL select user_name from water WHERE user_name like CONCAT(CONCAT('%',?,'%')) 
2019-04-03 13:43:05 -==> Parameters: 阿萨德(String), 阿萨德(String), 阿萨德(String)
2019-04-03 13:43:05 -<==      Total: 10
2019-04-03 13:43:05 -耗时 : 4
2019-04-03 13:43:05 -返回值 : [com.bootdo.moneyList.damain.MoneyListDO@6cac84f8, com.bootdo.moneyList.damain.MoneyListDO@59356a9f, com.bootdo.moneyList.damain.MoneyListDO@6c849f9e, com.bootdo.moneyList.damain.MoneyListDO@5ef1f7e0, com.bootdo.moneyList.damain.MoneyListDO@56f22382, com.bootdo.moneyList.damain.MoneyListDO@2461da51, com.bootdo.moneyList.damain.MoneyListDO@6c51d92c, com.bootdo.moneyList.damain.MoneyListDO@3d4e7db1, com.bootdo.moneyList.damain.MoneyListDO@7a67b7a9, com.bootdo.moneyList.damain.MoneyListDO@507e59e6]
2019-04-03 13:43:09 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUserName
2019-04-03 13:43:09 -HTTP METHOD : POST
2019-04-03 13:43:09 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.getAllUserName
2019-04-03 13:43:09 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@57ca1e7d]
2019-04-03 13:43:09 -==>  Preparing: select user_name from elec WHERE user_name like CONCAT(CONCAT('%',?,'%')) UNION ALL select user_name from heat WHERE user_name like CONCAT(CONCAT('%',?,'%')) UNION ALL select user_name from water WHERE user_name like CONCAT(CONCAT('%',?,'%')) 
2019-04-03 13:43:09 -==> Parameters: 阿萨德(String), 阿萨德(String), 阿萨德(String)
2019-04-03 13:43:09 -<==      Total: 10
2019-04-03 13:43:09 -耗时 : 33
2019-04-03 13:43:09 -返回值 : [com.bootdo.moneyList.damain.MoneyListDO@493da360, com.bootdo.moneyList.damain.MoneyListDO@5b6b4cad, com.bootdo.moneyList.damain.MoneyListDO@5c55984b, com.bootdo.moneyList.damain.MoneyListDO@312dece8, com.bootdo.moneyList.damain.MoneyListDO@152f7f0e, com.bootdo.moneyList.damain.MoneyListDO@14a04722, com.bootdo.moneyList.damain.MoneyListDO@6447123d, com.bootdo.moneyList.damain.MoneyListDO@3ad3f8f1, com.bootdo.moneyList.damain.MoneyListDO@54ea37aa, com.bootdo.moneyList.damain.MoneyListDO@4265f342]
2019-04-03 13:43:10 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUser
2019-04-03 13:43:10 -HTTP METHOD : POST
2019-04-03 13:43:10 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.queryAllUser
2019-04-03 13:43:10 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@49863e98]
2019-04-03 13:43:10 -==>  Preparing: select COUNT(*) number, user_id, user_name, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, elec_type usertype, elec_price userprice, elec_amount userarea, elec_cost usercost, elec_Sum usersum from elec WHERE user_Id = ? and create_time = ? and user_name = ? UNION ALL select COUNT(*) number, user_id, user_name, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, heat_type usertype, heat_price userprice, heat_area userarea, heat_cost usercost, heat_Sum usersum from heat WHERE user_Id = ? and create_time = ? and user_name = ? UNION ALL select COUNT(*) number, user_id, user_name, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, water_type usertype, water_price userprice, water_price userarea, water_price usercost, water_Sum usersum from water WHERE user_Id = ? and create_time = ? and user_name = ? 
2019-04-03 13:43:10 -==> Parameters: 1-0004(String), 2019-02(String), 阿萨德(String), 1-0004(String), 2019-02(String), 阿萨德(String), 1-0004(String), 2019-02(String), 阿萨德(String)
2019-04-03 13:43:10 -<==      Total: 3
2019-04-03 13:43:10 -耗时 : 58
2019-04-03 13:43:10 -返回值 : [com.bootdo.moneyList.damain.MoneyListDO@3546a39a, com.bootdo.moneyList.damain.MoneyListDO@14d38da3, com.bootdo.moneyList.damain.MoneyListDO@6cd9135f]
2019-04-03 13:43:12 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUserName
2019-04-03 13:43:12 -HTTP METHOD : POST
2019-04-03 13:43:12 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.getAllUserName
2019-04-03 13:43:12 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@54117ba1]
2019-04-03 13:43:12 -==>  Preparing: select user_name from elec WHERE user_name like CONCAT(CONCAT('%',?,'%')) UNION ALL select user_name from heat WHERE user_name like CONCAT(CONCAT('%',?,'%')) UNION ALL select user_name from water WHERE user_name like CONCAT(CONCAT('%',?,'%')) 
2019-04-03 13:43:12 -==> Parameters: 阿萨德(String), 阿萨德(String), 阿萨德(String)
2019-04-03 13:43:12 -<==      Total: 10
2019-04-03 13:43:12 -耗时 : 8
2019-04-03 13:43:12 -返回值 : [com.bootdo.moneyList.damain.MoneyListDO@28893671, com.bootdo.moneyList.damain.MoneyListDO@43a6e49f, com.bootdo.moneyList.damain.MoneyListDO@1cb55339, com.bootdo.moneyList.damain.MoneyListDO@64abcceb, com.bootdo.moneyList.damain.MoneyListDO@57044b1, com.bootdo.moneyList.damain.MoneyListDO@7186ca9c, com.bootdo.moneyList.damain.MoneyListDO@479c630e, com.bootdo.moneyList.damain.MoneyListDO@7d6a2382, com.bootdo.moneyList.damain.MoneyListDO@7a38a552, com.bootdo.moneyList.damain.MoneyListDO@3d2d42a3]
2019-04-03 13:43:14 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUser
2019-04-03 13:43:14 -HTTP METHOD : POST
2019-04-03 13:43:14 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.queryAllUser
2019-04-03 13:43:14 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@704dea2]
2019-04-03 13:43:14 -==>  Preparing: select COUNT(*) number, user_id, user_name, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, elec_type usertype, elec_price userprice, elec_amount userarea, elec_cost usercost, elec_Sum usersum from elec WHERE user_Id = ? and create_time = ? and user_name = ? UNION ALL select COUNT(*) number, user_id, user_name, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, heat_type usertype, heat_price userprice, heat_area userarea, heat_cost usercost, heat_Sum usersum from heat WHERE user_Id = ? and create_time = ? and user_name = ? UNION ALL select COUNT(*) number, user_id, user_name, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, water_type usertype, water_price userprice, water_price userarea, water_price usercost, water_Sum usersum from water WHERE user_Id = ? and create_time = ? and user_name = ? 
2019-04-03 13:43:15 -==> Parameters: 1-0004(String), 2019-02(String), 阿萨德(String), 1-0004(String), 2019-02(String), 阿萨德(String), 1-0004(String), 2019-02(String), 阿萨德(String)
2019-04-03 13:43:15 -<==      Total: 3
2019-04-03 13:43:15 -耗时 : 29
2019-04-03 13:43:15 -返回值 : [com.bootdo.moneyList.damain.MoneyListDO@1c9c09f6, com.bootdo.moneyList.damain.MoneyListDO@123d10c1, com.bootdo.moneyList.damain.MoneyListDO@33ed2dea]
2019-04-03 13:44:10 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUser
2019-04-03 13:44:10 -HTTP METHOD : POST
2019-04-03 13:44:10 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.queryAllUser
2019-04-03 13:44:10 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@55c926e4]
2019-04-03 13:44:10 -==>  Preparing: select COUNT(*) number, user_id, user_name, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, elec_type usertype, elec_price userprice, elec_amount userarea, elec_cost usercost, elec_Sum usersum from elec WHERE user_Id = ? and create_time = ? UNION ALL select COUNT(*) number, user_id, user_name, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, heat_type usertype, heat_price userprice, heat_area userarea, heat_cost usercost, heat_Sum usersum from heat WHERE user_Id = ? and create_time = ? UNION ALL select COUNT(*) number, user_id, user_name, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, water_type usertype, water_price userprice, water_price userarea, water_price usercost, water_Sum usersum from water WHERE user_Id = ? and create_time = ? 
2019-04-03 13:44:10 -==> Parameters: 1-0004(String), 2019-02(String), 1-0004(String), 2019-02(String), 1-0004(String), 2019-02(String)
2019-04-03 13:44:10 -<==      Total: 3
2019-04-03 13:44:10 -耗时 : 9
2019-04-03 13:44:10 -返回值 : [com.bootdo.moneyList.damain.MoneyListDO@40231eed, com.bootdo.moneyList.damain.MoneyListDO@4c8a4b62, com.bootdo.moneyList.damain.MoneyListDO@50e8ba11]
2019-04-03 13:51:45 -请求地址 : http://localhost:8081/moneyLog/elecLog
2019-04-03 13:51:45 -HTTP METHOD : GET
2019-04-03 13:51:45 -CLASS_METHOD : com.bootdo.moneyLog.controller.ElecLogController.moneyLog
2019-04-03 13:51:45 -参数 : []
2019-04-03 13:51:45 -耗时 : 38
2019-04-03 13:51:45 -返回值 : /moneyLog/elecLog/elecLog
2019-04-03 13:51:47 -请求地址 : http://localhost:8081/moneyLog/elecLog/list
2019-04-03 13:51:47 -HTTP METHOD : GET
2019-04-03 13:51:47 -CLASS_METHOD : com.bootdo.moneyLog.controller.ElecLogController.list
2019-04-03 13:51:47 -参数 : [{limit=10, offset=0, userType=, userOrg=, userId=, elecDate=}]
2019-04-03 13:51:47 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-03 13:51:47 -HTTP METHOD : GET
2019-04-03 13:51:47 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 13:51:47 -参数 : [userType]
2019-04-03 13:51:48 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 13:51:48 -==> Parameters: userType(String)
2019-04-03 13:51:48 -<==      Total: 2
2019-04-03 13:51:48 -耗时 : 734
2019-04-03 13:51:48 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 13:51:48 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`elec_type`,`elec_money`,`elec_date`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec_log order by id asc limit ?, ? 
2019-04-03 13:51:48 -==> Parameters: 0(Integer), 10(Integer)
2019-04-03 13:51:49 -<==      Total: 7
2019-04-03 13:51:49 -==>  Preparing: select count(*) from elec_log 
2019-04-03 13:51:49 -==> Parameters: 
2019-04-03 13:51:49 -<==      Total: 1
2019-04-03 13:51:49 -耗时 : 1436
2019-04-03 13:51:49 -返回值 : com.bootdo.common.utils.PageUtils@6198d653
2019-04-03 14:08:45 -请求地址 : http://localhost:8081/index
2019-04-03 14:08:45 -HTTP METHOD : GET
2019-04-03 14:08:45 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2019-04-03 14:08:45 -参数 : [{}]
2019-04-03 14:08:45 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2019-04-03 14:08:45 -==> Parameters: 1(Long)
2019-04-03 14:08:46 -<==      Total: 46
2019-04-03 14:08:46 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2019-04-03 14:08:46 -==> Parameters: 138(Long)
2019-04-03 14:08:46 -<==      Total: 1
2019-04-03 14:08:46 -耗时 : 226
2019-04-03 14:08:46 -返回值 : index_v1
2019-04-03 14:08:46 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 14:08:46 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 226(Integer), com.bootdo.system.controller.LoginController.index()(String), {"menus":[{"attributes":{"icon":"fa fa-money","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-money","url":"/moneyList/moneyList"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"102","parentId":"106","text":"现金缴费"},{"attributes":{"icon":"fa fa-book","url":"/moneyLog/elecLog"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"107","parentId":"106","text":"缴费记录"}],"hasChildren":true,"hasParent":false,"id":"106","parentId":"0","text":"收费管理"},{"attributes":{"icon":"fa fa-lightbulb-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/elec/elec"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"121","parentId":"103","text":"电费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"elec/elecInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"122","parentId":"103","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"elec/elecUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"123","parentId":"103","text":"电表上传"},{"attributes":{"icon":"fa fa-cc","url":"/elec/elecPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"124","parentId":"103","text":"电价管理"}],"hasChildren":true,"hasParent":false,"id":"103","parentId":"0","text":"电费管理"},{"attributes":{"icon":"fa fa-tint","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/water/water"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"117","parentId":"105","text":"水费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"water/waterInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"118","parentId":"105","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"water/waterUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"119","parentId":"105","text":"水费生成"},{"attributes":{"icon":"fa fa-cc","url":"/water/waterPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"120","parentId":"105","text":"水价管理"}],"hasChildren":true,"hasParent":false,"id":"105","parentId":"0","text":"水费管理"},{"attributes":{"icon":"fa fa-fire","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/heat/heat"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"113","parentId":"104","text":"暖费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"heat/heatInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"114","parentId":"104","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"heat/heatUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"115","parentId":"104","text":"暖费生成"},{"attributes":{"icon":"","url":"/heat/heatPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"116","parentId":"104","text":"暖价管理"}],"hasChildren":true,"hasParent":false,"id":"104","parentId":"0","text":"暖费管理"},{"attributes":{"icon":"fa fa-vcard-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-bomb","url":"/print/print"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"149","parentId":"108","text":"票据记录"}],"hasChildren":true,"hasParent":false,"id":"108","parentId":"0","text":"票据管理"},{"attributes":{"icon":"fa fa-bar-chart","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-area-chart","url":"/chart/graph_echarts.html"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","text":"百度chart"},{"attributes":{"icon":"fa fa-sun-o","url":"charts/countDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"109","parentId":"97","text":"日统计报表"},{"attributes":{"icon":"fa fa-registered","url":"charts/countMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"110","parentId":"97","text":"月统计报表"},{"attributes":{"icon":"fa fa-support","url":"charts/countYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"111","parentId":"97","text":"年统计报表"},{"attributes":{"icon":"fa fa-money","url":"charts/countOwe"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"155","parentId":"97","text":"欠费报表图"},{"attributes":{"icon":"fa fa-tachometer","url":"charts/countRun"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"112","parentId":"97","text":"走势图报表"}],"hasChildren":true,"hasParent":false,"id":"97","parentId":"0","text":"统计管理"},{"attributes":{"icon":"fa fa-bars","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-book","url":"/common/dict"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"78","parentId":"1","text":"数据字典"},{"attributes":{"icon":"fa fa-folder-open","url":"/common/sysFile"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"71","parentId":"1","text":"文件管理"}],"h(String), 127.0.0.1(String), 2019-04-03 14:08:46.15(Timestamp)
2019-04-03 14:08:46 -请求地址 : http://localhost:8081/main
2019-04-03 14:08:46 -HTTP METHOD : GET
2019-04-03 14:08:46 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 14:08:46 -参数 : []
2019-04-03 14:08:46 -耗时 : 0
2019-04-03 14:08:46 -返回值 : main
2019-04-03 14:08:46 -<==    Updates: 1
2019-04-03 14:08:47 -请求地址 : http://localhost:8081/oa/notify/message
2019-04-03 14:08:47 -HTTP METHOD : GET
2019-04-03 14:08:47 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2019-04-03 14:08:47 -参数 : []
2019-04-03 14:08:47 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2019-04-03 14:08:47 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2019-04-03 14:08:47 -请求地址 : http://localhost:8081/main
2019-04-03 14:08:47 -HTTP METHOD : GET
2019-04-03 14:08:47 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 14:08:47 -参数 : []
2019-04-03 14:08:47 -耗时 : 1
2019-04-03 14:08:47 -返回值 : main
2019-04-03 14:08:47 -<==      Total: 0
2019-04-03 14:08:47 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2019-04-03 14:08:47 -==> Parameters: 1(Long), 0(String)
2019-04-03 14:08:47 -<==      Total: 1
2019-04-03 14:08:47 -耗时 : 143
2019-04-03 14:08:47 -返回值 : com.bootdo.common.utils.PageUtils@375ef43f
2019-04-03 14:08:49 -==>  Preparing: select distinct m.perms from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id = ur.role_id where ur.user_id = ? 
2019-04-03 14:08:49 -==> Parameters: 1(Long)
2019-04-03 14:08:49 -<==      Total: 90
2019-04-03 14:08:49 -请求地址 : http://localhost:8081/moneyList/moneyList
2019-04-03 14:08:49 -HTTP METHOD : GET
2019-04-03 14:08:49 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.MoneyList
2019-04-03 14:08:49 -参数 : []
2019-04-03 14:08:49 -耗时 : 1
2019-04-03 14:08:49 -返回值 : /moneyList/moneyList
2019-04-03 14:08:50 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUserName
2019-04-03 14:08:50 -HTTP METHOD : POST
2019-04-03 14:08:50 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.getAllUserName
2019-04-03 14:08:50 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@2a7fda53]
2019-04-03 14:08:50 -==>  Preparing: select user_name from elec UNION ALL select user_name from heat UNION ALL select user_name from water 
2019-04-03 14:08:50 -==> Parameters: 
2019-04-03 14:08:51 -<==      Total: 46
2019-04-03 14:08:51 -耗时 : 249
2019-04-03 14:08:51 -返回值 : [com.bootdo.moneyList.damain.MoneyListDO@7c8a21f8, com.bootdo.moneyList.damain.MoneyListDO@f5b4a5f, com.bootdo.moneyList.damain.MoneyListDO@5ba2b4a5, com.bootdo.moneyList.damain.MoneyListDO@53298432, com.bootdo.moneyList.damain.MoneyListDO@7e01ea4e, com.bootdo.moneyList.damain.MoneyListDO@2b5d4e63, com.bootdo.moneyList.damain.MoneyListDO@6594c031, com.bootdo.moneyList.damain.MoneyListDO@7a83d0a5, com.bootdo.moneyList.damain.MoneyListDO@b211621, com.bootdo.moneyList.damain.MoneyListDO@4a4e7f70, com.bootdo.moneyList.damain.MoneyListDO@918bb40, com.bootdo.moneyList.damain.MoneyListDO@6d7a443e, com.bootdo.moneyList.damain.MoneyListDO@6e69c7ae, com.bootdo.moneyList.damain.MoneyListDO@576590ec, com.bootdo.moneyList.damain.MoneyListDO@1b6be3fb, com.bootdo.moneyList.damain.MoneyListDO@248f1f1c, com.bootdo.moneyList.damain.MoneyListDO@47bf894, com.bootdo.moneyList.damain.MoneyListDO@7fe2fa07, com.bootdo.moneyList.damain.MoneyListDO@3b52aa3b, com.bootdo.moneyList.damain.MoneyListDO@677925b2, com.bootdo.moneyList.damain.MoneyListDO@3c9dce91, com.bootdo.moneyList.damain.MoneyListDO@544739c7, com.bootdo.moneyList.damain.MoneyListDO@7aea5206, com.bootdo.moneyList.damain.MoneyListDO@5410bc5c, com.bootdo.moneyList.damain.MoneyListDO@62b0909, com.bootdo.moneyList.damain.MoneyListDO@6b4f810a, com.bootdo.moneyList.damain.MoneyListDO@431d8407, com.bootdo.moneyList.damain.MoneyListDO@12be3264, com.bootdo.moneyList.damain.MoneyListDO@4c83027b, com.bootdo.moneyList.damain.MoneyListDO@5b538d30, com.bootdo.moneyList.damain.MoneyListDO@744107e1, com.bootdo.moneyList.damain.MoneyListDO@170f361f, com.bootdo.moneyList.damain.MoneyListDO@434b7e5f, com.bootdo.moneyList.damain.MoneyListDO@4b6510b, com.bootdo.moneyList.damain.MoneyListDO@78b42073, com.bootdo.moneyList.damain.MoneyListDO@16655eb4, com.bootdo.moneyList.damain.MoneyListDO@e4463a1, com.bootdo.moneyList.damain.MoneyListDO@38cc456b, com.bootdo.moneyList.damain.MoneyListDO@61a24db9, com.bootdo.moneyList.damain.MoneyListDO@5d0e3fc7, com.bootdo.moneyList.damain.MoneyListDO@70fa16ac, com.bootdo.moneyList.damain.MoneyListDO@2a47e2c5, com.bootdo.moneyList.damain.MoneyListDO@597badb1, com.bootdo.moneyList.damain.MoneyListDO@7527415e, com.bootdo.moneyList.damain.MoneyListDO@55c87620, com.bootdo.moneyList.damain.MoneyListDO@408cf796]
2019-04-03 14:08:51 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUserName
2019-04-03 14:08:51 -HTTP METHOD : POST
2019-04-03 14:08:51 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.getAllUserName
2019-04-03 14:08:51 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@36d4fcfb]
2019-04-03 14:08:51 -==>  Preparing: select user_name from elec UNION ALL select user_name from heat UNION ALL select user_name from water 
2019-04-03 14:08:51 -==> Parameters: 
2019-04-03 14:08:51 -<==      Total: 46
2019-04-03 14:08:51 -耗时 : 4
2019-04-03 14:08:51 -返回值 : [com.bootdo.moneyList.damain.MoneyListDO@25bb72a8, com.bootdo.moneyList.damain.MoneyListDO@35ec2cf5, com.bootdo.moneyList.damain.MoneyListDO@24ce3d97, com.bootdo.moneyList.damain.MoneyListDO@67a4ac17, com.bootdo.moneyList.damain.MoneyListDO@1974ac79, com.bootdo.moneyList.damain.MoneyListDO@4daba026, com.bootdo.moneyList.damain.MoneyListDO@18dc0e81, com.bootdo.moneyList.damain.MoneyListDO@5adadd99, com.bootdo.moneyList.damain.MoneyListDO@6671b5df, com.bootdo.moneyList.damain.MoneyListDO@76cb83a7, com.bootdo.moneyList.damain.MoneyListDO@e9b23f9, com.bootdo.moneyList.damain.MoneyListDO@2a111a6, com.bootdo.moneyList.damain.MoneyListDO@69959360, com.bootdo.moneyList.damain.MoneyListDO@4369f34e, com.bootdo.moneyList.damain.MoneyListDO@14ba9431, com.bootdo.moneyList.damain.MoneyListDO@1e1c9b21, com.bootdo.moneyList.damain.MoneyListDO@5bd71511, com.bootdo.moneyList.damain.MoneyListDO@57286ea6, com.bootdo.moneyList.damain.MoneyListDO@17f3636e, com.bootdo.moneyList.damain.MoneyListDO@6d4c2722, com.bootdo.moneyList.damain.MoneyListDO@ed0d807, com.bootdo.moneyList.damain.MoneyListDO@1a99da25, com.bootdo.moneyList.damain.MoneyListDO@167d220b, com.bootdo.moneyList.damain.MoneyListDO@1a8462d1, com.bootdo.moneyList.damain.MoneyListDO@121c8166, com.bootdo.moneyList.damain.MoneyListDO@468039f2, com.bootdo.moneyList.damain.MoneyListDO@39123653, com.bootdo.moneyList.damain.MoneyListDO@39494a, com.bootdo.moneyList.damain.MoneyListDO@76d8ff9a, com.bootdo.moneyList.damain.MoneyListDO@3150171a, com.bootdo.moneyList.damain.MoneyListDO@19580fcd, com.bootdo.moneyList.damain.MoneyListDO@536166b5, com.bootdo.moneyList.damain.MoneyListDO@62f4676c, com.bootdo.moneyList.damain.MoneyListDO@532d54ef, com.bootdo.moneyList.damain.MoneyListDO@ad20f20, com.bootdo.moneyList.damain.MoneyListDO@52de9401, com.bootdo.moneyList.damain.MoneyListDO@13505631, com.bootdo.moneyList.damain.MoneyListDO@2a63f298, com.bootdo.moneyList.damain.MoneyListDO@305243fb, com.bootdo.moneyList.damain.MoneyListDO@168aa76c, com.bootdo.moneyList.damain.MoneyListDO@7fa8a52, com.bootdo.moneyList.damain.MoneyListDO@32b84f07, com.bootdo.moneyList.damain.MoneyListDO@10578f30, com.bootdo.moneyList.damain.MoneyListDO@5325fb91, com.bootdo.moneyList.damain.MoneyListDO@5e53bd, com.bootdo.moneyList.damain.MoneyListDO@70eee4c6]
2019-04-03 14:08:54 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUserName
2019-04-03 14:08:54 -HTTP METHOD : POST
2019-04-03 14:08:54 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.getAllUserName
2019-04-03 14:08:54 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@3ff766eb]
2019-04-03 14:08:54 -==>  Preparing: select user_name from elec UNION ALL select user_name from heat UNION ALL select user_name from water 
2019-04-03 14:08:54 -==> Parameters: 
2019-04-03 14:08:54 -<==      Total: 46
2019-04-03 14:08:54 -耗时 : 3
2019-04-03 14:08:54 -返回值 : [com.bootdo.moneyList.damain.MoneyListDO@3dd05032, com.bootdo.moneyList.damain.MoneyListDO@61a174e7, com.bootdo.moneyList.damain.MoneyListDO@65658606, com.bootdo.moneyList.damain.MoneyListDO@65ff49de, com.bootdo.moneyList.damain.MoneyListDO@5a11c493, com.bootdo.moneyList.damain.MoneyListDO@307d857a, com.bootdo.moneyList.damain.MoneyListDO@796160c5, com.bootdo.moneyList.damain.MoneyListDO@66cf678e, com.bootdo.moneyList.damain.MoneyListDO@322e0298, com.bootdo.moneyList.damain.MoneyListDO@6ea417f2, com.bootdo.moneyList.damain.MoneyListDO@1cb135ab, com.bootdo.moneyList.damain.MoneyListDO@15fd2a4, com.bootdo.moneyList.damain.MoneyListDO@43a72ad5, com.bootdo.moneyList.damain.MoneyListDO@df2aed4, com.bootdo.moneyList.damain.MoneyListDO@187bceac, com.bootdo.moneyList.damain.MoneyListDO@674ef5f5, com.bootdo.moneyList.damain.MoneyListDO@1d459a4b, com.bootdo.moneyList.damain.MoneyListDO@5d91339, com.bootdo.moneyList.damain.MoneyListDO@4311b380, com.bootdo.moneyList.damain.MoneyListDO@5360174a, com.bootdo.moneyList.damain.MoneyListDO@62c648af, com.bootdo.moneyList.damain.MoneyListDO@2f4bdf15, com.bootdo.moneyList.damain.MoneyListDO@6188f4cf, com.bootdo.moneyList.damain.MoneyListDO@320175f3, com.bootdo.moneyList.damain.MoneyListDO@62d2d02c, com.bootdo.moneyList.damain.MoneyListDO@13900814, com.bootdo.moneyList.damain.MoneyListDO@3518a825, com.bootdo.moneyList.damain.MoneyListDO@c0ffd98, com.bootdo.moneyList.damain.MoneyListDO@78281f85, com.bootdo.moneyList.damain.MoneyListDO@6b6b683c, com.bootdo.moneyList.damain.MoneyListDO@1b42acf4, com.bootdo.moneyList.damain.MoneyListDO@68d26139, com.bootdo.moneyList.damain.MoneyListDO@503e9f91, com.bootdo.moneyList.damain.MoneyListDO@60a42722, com.bootdo.moneyList.damain.MoneyListDO@6e0f02ce, com.bootdo.moneyList.damain.MoneyListDO@15af6d9f, com.bootdo.moneyList.damain.MoneyListDO@3149aaac, com.bootdo.moneyList.damain.MoneyListDO@70951690, com.bootdo.moneyList.damain.MoneyListDO@661a633e, com.bootdo.moneyList.damain.MoneyListDO@83739f7, com.bootdo.moneyList.damain.MoneyListDO@74d7fe97, com.bootdo.moneyList.damain.MoneyListDO@2cae470b, com.bootdo.moneyList.damain.MoneyListDO@1918d233, com.bootdo.moneyList.damain.MoneyListDO@28d1b866, com.bootdo.moneyList.damain.MoneyListDO@6339c8ad, com.bootdo.moneyList.damain.MoneyListDO@3df14dde]
2019-04-03 14:08:55 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUserName
2019-04-03 14:08:55 -HTTP METHOD : POST
2019-04-03 14:08:55 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.getAllUserName
2019-04-03 14:08:55 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@5e24dffb]
2019-04-03 14:08:55 -==>  Preparing: select user_name from elec UNION ALL select user_name from heat UNION ALL select user_name from water 
2019-04-03 14:08:55 -==> Parameters: 
2019-04-03 14:08:55 -<==      Total: 46
2019-04-03 14:08:55 -耗时 : 6
2019-04-03 14:08:55 -返回值 : [com.bootdo.moneyList.damain.MoneyListDO@51d85fcd, com.bootdo.moneyList.damain.MoneyListDO@77d8395d, com.bootdo.moneyList.damain.MoneyListDO@f7beb5a, com.bootdo.moneyList.damain.MoneyListDO@7323845a, com.bootdo.moneyList.damain.MoneyListDO@60969bc4, com.bootdo.moneyList.damain.MoneyListDO@5632445a, com.bootdo.moneyList.damain.MoneyListDO@6c354fd, com.bootdo.moneyList.damain.MoneyListDO@69ad112b, com.bootdo.moneyList.damain.MoneyListDO@3db1ff61, com.bootdo.moneyList.damain.MoneyListDO@79656c19, com.bootdo.moneyList.damain.MoneyListDO@659dbb74, com.bootdo.moneyList.damain.MoneyListDO@6438caa5, com.bootdo.moneyList.damain.MoneyListDO@56407bb4, com.bootdo.moneyList.damain.MoneyListDO@417d0c1, com.bootdo.moneyList.damain.MoneyListDO@c598d2c, com.bootdo.moneyList.damain.MoneyListDO@2e9603e0, com.bootdo.moneyList.damain.MoneyListDO@7b5e505d, com.bootdo.moneyList.damain.MoneyListDO@4175062f, com.bootdo.moneyList.damain.MoneyListDO@185d3c0, com.bootdo.moneyList.damain.MoneyListDO@1f124913, com.bootdo.moneyList.damain.MoneyListDO@16c73e14, com.bootdo.moneyList.damain.MoneyListDO@7f6a169d, com.bootdo.moneyList.damain.MoneyListDO@50ded163, com.bootdo.moneyList.damain.MoneyListDO@5d8940ba, com.bootdo.moneyList.damain.MoneyListDO@7211f281, com.bootdo.moneyList.damain.MoneyListDO@5de0dca0, com.bootdo.moneyList.damain.MoneyListDO@7b934bb6, com.bootdo.moneyList.damain.MoneyListDO@6c8858ee, com.bootdo.moneyList.damain.MoneyListDO@11f03a04, com.bootdo.moneyList.damain.MoneyListDO@4aaee146, com.bootdo.moneyList.damain.MoneyListDO@2b81dd5e, com.bootdo.moneyList.damain.MoneyListDO@560afe8, com.bootdo.moneyList.damain.MoneyListDO@15d0955a, com.bootdo.moneyList.damain.MoneyListDO@2849f277, com.bootdo.moneyList.damain.MoneyListDO@d87a10d, com.bootdo.moneyList.damain.MoneyListDO@d9850ba, com.bootdo.moneyList.damain.MoneyListDO@1cf36e16, com.bootdo.moneyList.damain.MoneyListDO@7bcefdb5, com.bootdo.moneyList.damain.MoneyListDO@4b71a408, com.bootdo.moneyList.damain.MoneyListDO@4a3205c, com.bootdo.moneyList.damain.MoneyListDO@3a77d00, com.bootdo.moneyList.damain.MoneyListDO@f081b94, com.bootdo.moneyList.damain.MoneyListDO@491faf99, com.bootdo.moneyList.damain.MoneyListDO@54a3c726, com.bootdo.moneyList.damain.MoneyListDO@6c54ffcf, com.bootdo.moneyList.damain.MoneyListDO@23cf8d6a]
2019-04-03 14:08:58 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUserName
2019-04-03 14:08:58 -HTTP METHOD : POST
2019-04-03 14:08:58 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.getAllUserName
2019-04-03 14:08:58 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@bfc586f]
2019-04-03 14:08:58 -==>  Preparing: select user_name from elec UNION ALL select user_name from heat UNION ALL select user_name from water 
2019-04-03 14:08:58 -==> Parameters: 
2019-04-03 14:08:58 -<==      Total: 46
2019-04-03 14:08:58 -耗时 : 79
2019-04-03 14:08:58 -返回值 : [com.bootdo.moneyList.damain.MoneyListDO@3a843235, com.bootdo.moneyList.damain.MoneyListDO@8c81f32, com.bootdo.moneyList.damain.MoneyListDO@619e1164, com.bootdo.moneyList.damain.MoneyListDO@66385a67, com.bootdo.moneyList.damain.MoneyListDO@7db6d90f, com.bootdo.moneyList.damain.MoneyListDO@354f7804, com.bootdo.moneyList.damain.MoneyListDO@244b5af8, com.bootdo.moneyList.damain.MoneyListDO@4d774, com.bootdo.moneyList.damain.MoneyListDO@4b3118da, com.bootdo.moneyList.damain.MoneyListDO@5f0d6e0, com.bootdo.moneyList.damain.MoneyListDO@7b12c03c, com.bootdo.moneyList.damain.MoneyListDO@5d0b175d, com.bootdo.moneyList.damain.MoneyListDO@1ebf23ee, com.bootdo.moneyList.damain.MoneyListDO@1dfbb10f, com.bootdo.moneyList.damain.MoneyListDO@708581ac, com.bootdo.moneyList.damain.MoneyListDO@7531c11e, com.bootdo.moneyList.damain.MoneyListDO@12763c05, com.bootdo.moneyList.damain.MoneyListDO@52c5948d, com.bootdo.moneyList.damain.MoneyListDO@e11f798, com.bootdo.moneyList.damain.MoneyListDO@75d3fe75, com.bootdo.moneyList.damain.MoneyListDO@566662de, com.bootdo.moneyList.damain.MoneyListDO@2879e563, com.bootdo.moneyList.damain.MoneyListDO@29556ac3, com.bootdo.moneyList.damain.MoneyListDO@431f19ca, com.bootdo.moneyList.damain.MoneyListDO@268af3e5, com.bootdo.moneyList.damain.MoneyListDO@41bf48aa, com.bootdo.moneyList.damain.MoneyListDO@433e212c, com.bootdo.moneyList.damain.MoneyListDO@7854b1c8, com.bootdo.moneyList.damain.MoneyListDO@9b060fc, com.bootdo.moneyList.damain.MoneyListDO@32718378, com.bootdo.moneyList.damain.MoneyListDO@f4f35b, com.bootdo.moneyList.damain.MoneyListDO@5d73c87c, com.bootdo.moneyList.damain.MoneyListDO@574ee4ae, com.bootdo.moneyList.damain.MoneyListDO@699ac77c, com.bootdo.moneyList.damain.MoneyListDO@4ed39f3f, com.bootdo.moneyList.damain.MoneyListDO@da09eb1, com.bootdo.moneyList.damain.MoneyListDO@2deb703f, com.bootdo.moneyList.damain.MoneyListDO@1275e3d9, com.bootdo.moneyList.damain.MoneyListDO@400dbccf, com.bootdo.moneyList.damain.MoneyListDO@49d1e769, com.bootdo.moneyList.damain.MoneyListDO@3f4d0ce4, com.bootdo.moneyList.damain.MoneyListDO@21b5bff, com.bootdo.moneyList.damain.MoneyListDO@2f5d64b7, com.bootdo.moneyList.damain.MoneyListDO@6971249a, com.bootdo.moneyList.damain.MoneyListDO@3e8c3f7c, com.bootdo.moneyList.damain.MoneyListDO@66105ff1]
2019-04-03 14:08:59 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUserName
2019-04-03 14:08:59 -HTTP METHOD : POST
2019-04-03 14:08:59 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.getAllUserName
2019-04-03 14:08:59 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@5ac4f814]
2019-04-03 14:08:59 -==>  Preparing: select user_name from elec UNION ALL select user_name from heat UNION ALL select user_name from water 
2019-04-03 14:08:59 -==> Parameters: 
2019-04-03 14:09:00 -<==      Total: 46
2019-04-03 14:09:00 -耗时 : 6
2019-04-03 14:09:00 -返回值 : [com.bootdo.moneyList.damain.MoneyListDO@4c55cbe3, com.bootdo.moneyList.damain.MoneyListDO@3fe9a360, com.bootdo.moneyList.damain.MoneyListDO@4210e8d1, com.bootdo.moneyList.damain.MoneyListDO@172a7c9, com.bootdo.moneyList.damain.MoneyListDO@639a7ed7, com.bootdo.moneyList.damain.MoneyListDO@119a3367, com.bootdo.moneyList.damain.MoneyListDO@540907e5, com.bootdo.moneyList.damain.MoneyListDO@40d1be42, com.bootdo.moneyList.damain.MoneyListDO@708d1c49, com.bootdo.moneyList.damain.MoneyListDO@304c1834, com.bootdo.moneyList.damain.MoneyListDO@2ce617f7, com.bootdo.moneyList.damain.MoneyListDO@61089f87, com.bootdo.moneyList.damain.MoneyListDO@797fb8bb, com.bootdo.moneyList.damain.MoneyListDO@29229218, com.bootdo.moneyList.damain.MoneyListDO@35676164, com.bootdo.moneyList.damain.MoneyListDO@103634e8, com.bootdo.moneyList.damain.MoneyListDO@1488fc35, com.bootdo.moneyList.damain.MoneyListDO@29070eee, com.bootdo.moneyList.damain.MoneyListDO@276536eb, com.bootdo.moneyList.damain.MoneyListDO@6d5c79b, com.bootdo.moneyList.damain.MoneyListDO@556fea20, com.bootdo.moneyList.damain.MoneyListDO@448eee1d, com.bootdo.moneyList.damain.MoneyListDO@4ad24a09, com.bootdo.moneyList.damain.MoneyListDO@6213b5d7, com.bootdo.moneyList.damain.MoneyListDO@48076d5f, com.bootdo.moneyList.damain.MoneyListDO@7b4a9c44, com.bootdo.moneyList.damain.MoneyListDO@23100326, com.bootdo.moneyList.damain.MoneyListDO@5c52b79e, com.bootdo.moneyList.damain.MoneyListDO@2f4c54de, com.bootdo.moneyList.damain.MoneyListDO@4b55cf, com.bootdo.moneyList.damain.MoneyListDO@23e16fd3, com.bootdo.moneyList.damain.MoneyListDO@6a46d276, com.bootdo.moneyList.damain.MoneyListDO@27618144, com.bootdo.moneyList.damain.MoneyListDO@7dde4d4a, com.bootdo.moneyList.damain.MoneyListDO@55e92ad5, com.bootdo.moneyList.damain.MoneyListDO@9e0877c, com.bootdo.moneyList.damain.MoneyListDO@22a04ca5, com.bootdo.moneyList.damain.MoneyListDO@2d9be1a6, com.bootdo.moneyList.damain.MoneyListDO@31b8c942, com.bootdo.moneyList.damain.MoneyListDO@3c6e736e, com.bootdo.moneyList.damain.MoneyListDO@1c8bd522, com.bootdo.moneyList.damain.MoneyListDO@6e6f91c4, com.bootdo.moneyList.damain.MoneyListDO@196ab792, com.bootdo.moneyList.damain.MoneyListDO@56d052d2, com.bootdo.moneyList.damain.MoneyListDO@14b0afef, com.bootdo.moneyList.damain.MoneyListDO@643ed0c]
2019-04-03 14:09:01 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUserName
2019-04-03 14:09:01 -HTTP METHOD : POST
2019-04-03 14:09:01 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.getAllUserName
2019-04-03 14:09:01 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@5c6ccbe4]
2019-04-03 14:09:01 -==>  Preparing: select user_name from elec UNION ALL select user_name from heat UNION ALL select user_name from water 
2019-04-03 14:09:01 -==> Parameters: 
2019-04-03 14:09:01 -<==      Total: 46
2019-04-03 14:09:01 -耗时 : 4
2019-04-03 14:09:01 -返回值 : [com.bootdo.moneyList.damain.MoneyListDO@52582680, com.bootdo.moneyList.damain.MoneyListDO@559720d9, com.bootdo.moneyList.damain.MoneyListDO@6f1ee264, com.bootdo.moneyList.damain.MoneyListDO@5c9500e, com.bootdo.moneyList.damain.MoneyListDO@16b61a11, com.bootdo.moneyList.damain.MoneyListDO@7a4b61f6, com.bootdo.moneyList.damain.MoneyListDO@62dea119, com.bootdo.moneyList.damain.MoneyListDO@2dd8d46c, com.bootdo.moneyList.damain.MoneyListDO@b183554, com.bootdo.moneyList.damain.MoneyListDO@2a7da110, com.bootdo.moneyList.damain.MoneyListDO@3dbc1b2f, com.bootdo.moneyList.damain.MoneyListDO@56acd340, com.bootdo.moneyList.damain.MoneyListDO@1cd4fe54, com.bootdo.moneyList.damain.MoneyListDO@5b66b9ff, com.bootdo.moneyList.damain.MoneyListDO@6deb4df, com.bootdo.moneyList.damain.MoneyListDO@36d84197, com.bootdo.moneyList.damain.MoneyListDO@dc52f46, com.bootdo.moneyList.damain.MoneyListDO@6302d640, com.bootdo.moneyList.damain.MoneyListDO@1009feb3, com.bootdo.moneyList.damain.MoneyListDO@64a9c1dc, com.bootdo.moneyList.damain.MoneyListDO@40b27d10, com.bootdo.moneyList.damain.MoneyListDO@35f71390, com.bootdo.moneyList.damain.MoneyListDO@6ad49ffb, com.bootdo.moneyList.damain.MoneyListDO@40d9145c, com.bootdo.moneyList.damain.MoneyListDO@1350abaa, com.bootdo.moneyList.damain.MoneyListDO@1e3651c3, com.bootdo.moneyList.damain.MoneyListDO@50d33eb9, com.bootdo.moneyList.damain.MoneyListDO@58a0ab0b, com.bootdo.moneyList.damain.MoneyListDO@4e3b464e, com.bootdo.moneyList.damain.MoneyListDO@622fbe03, com.bootdo.moneyList.damain.MoneyListDO@2b407209, com.bootdo.moneyList.damain.MoneyListDO@76656c99, com.bootdo.moneyList.damain.MoneyListDO@62f85d2d, com.bootdo.moneyList.damain.MoneyListDO@7db838d7, com.bootdo.moneyList.damain.MoneyListDO@55c0dd53, com.bootdo.moneyList.damain.MoneyListDO@89c62d6, com.bootdo.moneyList.damain.MoneyListDO@28ad57dd, com.bootdo.moneyList.damain.MoneyListDO@146fbc9f, com.bootdo.moneyList.damain.MoneyListDO@4796d104, com.bootdo.moneyList.damain.MoneyListDO@2c7791f2, com.bootdo.moneyList.damain.MoneyListDO@6ea6281e, com.bootdo.moneyList.damain.MoneyListDO@744ea11, com.bootdo.moneyList.damain.MoneyListDO@762b050c, com.bootdo.moneyList.damain.MoneyListDO@66c3f23a, com.bootdo.moneyList.damain.MoneyListDO@397ac024, com.bootdo.moneyList.damain.MoneyListDO@194eb178]
2019-04-03 14:09:02 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUserName
2019-04-03 14:09:02 -HTTP METHOD : POST
2019-04-03 14:09:02 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.getAllUserName
2019-04-03 14:09:02 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@62278919]
2019-04-03 14:09:02 -==>  Preparing: select user_name from elec UNION ALL select user_name from heat UNION ALL select user_name from water 
2019-04-03 14:09:02 -==> Parameters: 
2019-04-03 14:09:02 -<==      Total: 46
2019-04-03 14:09:02 -耗时 : 4
2019-04-03 14:09:02 -返回值 : [com.bootdo.moneyList.damain.MoneyListDO@6ac1cb5c, com.bootdo.moneyList.damain.MoneyListDO@5de9f467, com.bootdo.moneyList.damain.MoneyListDO@3d8d182, com.bootdo.moneyList.damain.MoneyListDO@44f2bbcd, com.bootdo.moneyList.damain.MoneyListDO@208d1324, com.bootdo.moneyList.damain.MoneyListDO@32d5919e, com.bootdo.moneyList.damain.MoneyListDO@77440287, com.bootdo.moneyList.damain.MoneyListDO@2639e371, com.bootdo.moneyList.damain.MoneyListDO@6e65d0a1, com.bootdo.moneyList.damain.MoneyListDO@70a2f592, com.bootdo.moneyList.damain.MoneyListDO@2725913b, com.bootdo.moneyList.damain.MoneyListDO@4e6eccc5, com.bootdo.moneyList.damain.MoneyListDO@e4eed71, com.bootdo.moneyList.damain.MoneyListDO@6927874f, com.bootdo.moneyList.damain.MoneyListDO@62006f19, com.bootdo.moneyList.damain.MoneyListDO@5ab09f78, com.bootdo.moneyList.damain.MoneyListDO@23ecd43a, com.bootdo.moneyList.damain.MoneyListDO@76a432f7, com.bootdo.moneyList.damain.MoneyListDO@173de39d, com.bootdo.moneyList.damain.MoneyListDO@49a8e55d, com.bootdo.moneyList.damain.MoneyListDO@ca0a556, com.bootdo.moneyList.damain.MoneyListDO@5bc41dbf, com.bootdo.moneyList.damain.MoneyListDO@239d3c51, com.bootdo.moneyList.damain.MoneyListDO@2d11b772, com.bootdo.moneyList.damain.MoneyListDO@24922d93, com.bootdo.moneyList.damain.MoneyListDO@5fc0e55b, com.bootdo.moneyList.damain.MoneyListDO@15752546, com.bootdo.moneyList.damain.MoneyListDO@357fbabd, com.bootdo.moneyList.damain.MoneyListDO@34f734, com.bootdo.moneyList.damain.MoneyListDO@58863054, com.bootdo.moneyList.damain.MoneyListDO@64e56117, com.bootdo.moneyList.damain.MoneyListDO@2c878564, com.bootdo.moneyList.damain.MoneyListDO@b2d5a97, com.bootdo.moneyList.damain.MoneyListDO@62c0cf36, com.bootdo.moneyList.damain.MoneyListDO@2de2e7a0, com.bootdo.moneyList.damain.MoneyListDO@3d5eebdd, com.bootdo.moneyList.damain.MoneyListDO@5cc6f703, com.bootdo.moneyList.damain.MoneyListDO@389b3ad2, com.bootdo.moneyList.damain.MoneyListDO@27e1586, com.bootdo.moneyList.damain.MoneyListDO@48b40617, com.bootdo.moneyList.damain.MoneyListDO@23a19eed, com.bootdo.moneyList.damain.MoneyListDO@428d7de1, com.bootdo.moneyList.damain.MoneyListDO@302d8213, com.bootdo.moneyList.damain.MoneyListDO@5841bebf, com.bootdo.moneyList.damain.MoneyListDO@773805ac, com.bootdo.moneyList.damain.MoneyListDO@5e730cdf]
2019-04-03 14:09:03 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUserName
2019-04-03 14:09:03 -HTTP METHOD : POST
2019-04-03 14:09:03 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.getAllUserName
2019-04-03 14:09:03 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@332f5866]
2019-04-03 14:09:03 -==>  Preparing: select user_name from elec UNION ALL select user_name from heat UNION ALL select user_name from water 
2019-04-03 14:09:03 -==> Parameters: 
2019-04-03 14:09:03 -<==      Total: 46
2019-04-03 14:09:03 -耗时 : 3
2019-04-03 14:09:03 -返回值 : [com.bootdo.moneyList.damain.MoneyListDO@27542985, com.bootdo.moneyList.damain.MoneyListDO@fc538, com.bootdo.moneyList.damain.MoneyListDO@49aa4137, com.bootdo.moneyList.damain.MoneyListDO@6cd07be0, com.bootdo.moneyList.damain.MoneyListDO@6ace6ffe, com.bootdo.moneyList.damain.MoneyListDO@1496419a, com.bootdo.moneyList.damain.MoneyListDO@f2e19c6, com.bootdo.moneyList.damain.MoneyListDO@60ce6cb8, com.bootdo.moneyList.damain.MoneyListDO@79665ec0, com.bootdo.moneyList.damain.MoneyListDO@5f5a4ae7, com.bootdo.moneyList.damain.MoneyListDO@20c588e3, com.bootdo.moneyList.damain.MoneyListDO@33fd8bef, com.bootdo.moneyList.damain.MoneyListDO@78a6530e, com.bootdo.moneyList.damain.MoneyListDO@7526238f, com.bootdo.moneyList.damain.MoneyListDO@79a82f58, com.bootdo.moneyList.damain.MoneyListDO@26556171, com.bootdo.moneyList.damain.MoneyListDO@6c216896, com.bootdo.moneyList.damain.MoneyListDO@28df14c6, com.bootdo.moneyList.damain.MoneyListDO@10b52c6a, com.bootdo.moneyList.damain.MoneyListDO@1de689e4, com.bootdo.moneyList.damain.MoneyListDO@7a642716, com.bootdo.moneyList.damain.MoneyListDO@2acd75b8, com.bootdo.moneyList.damain.MoneyListDO@1322caf7, com.bootdo.moneyList.damain.MoneyListDO@3a22d8de, com.bootdo.moneyList.damain.MoneyListDO@6125141b, com.bootdo.moneyList.damain.MoneyListDO@2084cd32, com.bootdo.moneyList.damain.MoneyListDO@2574dea7, com.bootdo.moneyList.damain.MoneyListDO@9bc16ff, com.bootdo.moneyList.damain.MoneyListDO@40705e1f, com.bootdo.moneyList.damain.MoneyListDO@461be67e, com.bootdo.moneyList.damain.MoneyListDO@451999fc, com.bootdo.moneyList.damain.MoneyListDO@2cfb744e, com.bootdo.moneyList.damain.MoneyListDO@6eb94768, com.bootdo.moneyList.damain.MoneyListDO@778874d7, com.bootdo.moneyList.damain.MoneyListDO@7ed7d5a3, com.bootdo.moneyList.damain.MoneyListDO@9f99733, com.bootdo.moneyList.damain.MoneyListDO@2ddf0363, com.bootdo.moneyList.damain.MoneyListDO@19c5e4c3, com.bootdo.moneyList.damain.MoneyListDO@59ff5095, com.bootdo.moneyList.damain.MoneyListDO@1cfa1496, com.bootdo.moneyList.damain.MoneyListDO@49ebc871, com.bootdo.moneyList.damain.MoneyListDO@7f3ece73, com.bootdo.moneyList.damain.MoneyListDO@5ce652f9, com.bootdo.moneyList.damain.MoneyListDO@1074a357, com.bootdo.moneyList.damain.MoneyListDO@74b5968, com.bootdo.moneyList.damain.MoneyListDO@e0f42a4]
2019-04-03 14:09:05 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUserName
2019-04-03 14:09:05 -HTTP METHOD : POST
2019-04-03 14:09:05 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.getAllUserName
2019-04-03 14:09:05 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@46379ce6]
2019-04-03 14:09:05 -==>  Preparing: select user_name from elec UNION ALL select user_name from heat UNION ALL select user_name from water 
2019-04-03 14:09:05 -==> Parameters: 
2019-04-03 14:09:05 -<==      Total: 46
2019-04-03 14:09:05 -耗时 : 4
2019-04-03 14:09:05 -返回值 : [com.bootdo.moneyList.damain.MoneyListDO@431f36df, com.bootdo.moneyList.damain.MoneyListDO@e979990, com.bootdo.moneyList.damain.MoneyListDO@74bde408, com.bootdo.moneyList.damain.MoneyListDO@3ff89da0, com.bootdo.moneyList.damain.MoneyListDO@56bfd4e, com.bootdo.moneyList.damain.MoneyListDO@3782bf6a, com.bootdo.moneyList.damain.MoneyListDO@2c049036, com.bootdo.moneyList.damain.MoneyListDO@57ea0d8b, com.bootdo.moneyList.damain.MoneyListDO@d310bb5, com.bootdo.moneyList.damain.MoneyListDO@2fea9c96, com.bootdo.moneyList.damain.MoneyListDO@27e72c7d, com.bootdo.moneyList.damain.MoneyListDO@2066fb5f, com.bootdo.moneyList.damain.MoneyListDO@258f3045, com.bootdo.moneyList.damain.MoneyListDO@5e7a064e, com.bootdo.moneyList.damain.MoneyListDO@40e04d38, com.bootdo.moneyList.damain.MoneyListDO@574bfa78, com.bootdo.moneyList.damain.MoneyListDO@b9ae5cc, com.bootdo.moneyList.damain.MoneyListDO@55cca87, com.bootdo.moneyList.damain.MoneyListDO@4797ce99, com.bootdo.moneyList.damain.MoneyListDO@4f076429, com.bootdo.moneyList.damain.MoneyListDO@13ef5c80, com.bootdo.moneyList.damain.MoneyListDO@7004a488, com.bootdo.moneyList.damain.MoneyListDO@91e5f17, com.bootdo.moneyList.damain.MoneyListDO@7d4c5431, com.bootdo.moneyList.damain.MoneyListDO@142e0c44, com.bootdo.moneyList.damain.MoneyListDO@41dbcaad, com.bootdo.moneyList.damain.MoneyListDO@3ac6d366, com.bootdo.moneyList.damain.MoneyListDO@2534e5d3, com.bootdo.moneyList.damain.MoneyListDO@411c811d, com.bootdo.moneyList.damain.MoneyListDO@5e8da531, com.bootdo.moneyList.damain.MoneyListDO@52dc1065, com.bootdo.moneyList.damain.MoneyListDO@50447d90, com.bootdo.moneyList.damain.MoneyListDO@75f51aec, com.bootdo.moneyList.damain.MoneyListDO@46629d4e, com.bootdo.moneyList.damain.MoneyListDO@748ff2df, com.bootdo.moneyList.damain.MoneyListDO@7d4b923, com.bootdo.moneyList.damain.MoneyListDO@5a2be14f, com.bootdo.moneyList.damain.MoneyListDO@8f19fa9, com.bootdo.moneyList.damain.MoneyListDO@3639d62, com.bootdo.moneyList.damain.MoneyListDO@21dc218c, com.bootdo.moneyList.damain.MoneyListDO@24788d61, com.bootdo.moneyList.damain.MoneyListDO@20705290, com.bootdo.moneyList.damain.MoneyListDO@3fe75371, com.bootdo.moneyList.damain.MoneyListDO@7f77c540, com.bootdo.moneyList.damain.MoneyListDO@1f845c4a, com.bootdo.moneyList.damain.MoneyListDO@3dc279f8]
2019-04-03 14:09:06 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUserName
2019-04-03 14:09:06 -HTTP METHOD : POST
2019-04-03 14:09:06 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.getAllUserName
2019-04-03 14:09:06 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@67814150]
2019-04-03 14:09:06 -==>  Preparing: select user_name from elec UNION ALL select user_name from heat UNION ALL select user_name from water 
2019-04-03 14:09:06 -==> Parameters: 
2019-04-03 14:09:06 -<==      Total: 46
2019-04-03 14:09:06 -耗时 : 4
2019-04-03 14:09:06 -返回值 : [com.bootdo.moneyList.damain.MoneyListDO@3f48403b, com.bootdo.moneyList.damain.MoneyListDO@907086b, com.bootdo.moneyList.damain.MoneyListDO@64e143da, com.bootdo.moneyList.damain.MoneyListDO@c1d6037, com.bootdo.moneyList.damain.MoneyListDO@7129b017, com.bootdo.moneyList.damain.MoneyListDO@405caa09, com.bootdo.moneyList.damain.MoneyListDO@2ecdce4b, com.bootdo.moneyList.damain.MoneyListDO@49360f7d, com.bootdo.moneyList.damain.MoneyListDO@75a3b744, com.bootdo.moneyList.damain.MoneyListDO@500a471b, com.bootdo.moneyList.damain.MoneyListDO@10f564c7, com.bootdo.moneyList.damain.MoneyListDO@69c1cc43, com.bootdo.moneyList.damain.MoneyListDO@1304fa8, com.bootdo.moneyList.damain.MoneyListDO@300f20a, com.bootdo.moneyList.damain.MoneyListDO@38686df1, com.bootdo.moneyList.damain.MoneyListDO@5fac1d6b, com.bootdo.moneyList.damain.MoneyListDO@5ce25439, com.bootdo.moneyList.damain.MoneyListDO@58f66d0d, com.bootdo.moneyList.damain.MoneyListDO@238a9407, com.bootdo.moneyList.damain.MoneyListDO@1cf28258, com.bootdo.moneyList.damain.MoneyListDO@52ff4e63, com.bootdo.moneyList.damain.MoneyListDO@390acf34, com.bootdo.moneyList.damain.MoneyListDO@4ed75ebe, com.bootdo.moneyList.damain.MoneyListDO@463ff57e, com.bootdo.moneyList.damain.MoneyListDO@6e9b278c, com.bootdo.moneyList.damain.MoneyListDO@1073604, com.bootdo.moneyList.damain.MoneyListDO@75d1aa34, com.bootdo.moneyList.damain.MoneyListDO@4cfc35f5, com.bootdo.moneyList.damain.MoneyListDO@7beccca1, com.bootdo.moneyList.damain.MoneyListDO@43e362ce, com.bootdo.moneyList.damain.MoneyListDO@3b9bf08c, com.bootdo.moneyList.damain.MoneyListDO@16e53997, com.bootdo.moneyList.damain.MoneyListDO@b71762e, com.bootdo.moneyList.damain.MoneyListDO@535c909c, com.bootdo.moneyList.damain.MoneyListDO@37a705eb, com.bootdo.moneyList.damain.MoneyListDO@8b1ab09, com.bootdo.moneyList.damain.MoneyListDO@8f16c37, com.bootdo.moneyList.damain.MoneyListDO@3f1ed5c5, com.bootdo.moneyList.damain.MoneyListDO@30991790, com.bootdo.moneyList.damain.MoneyListDO@35f50b69, com.bootdo.moneyList.damain.MoneyListDO@36664934, com.bootdo.moneyList.damain.MoneyListDO@7f9f02c0, com.bootdo.moneyList.damain.MoneyListDO@7c2bf34, com.bootdo.moneyList.damain.MoneyListDO@1af152e6, com.bootdo.moneyList.damain.MoneyListDO@1eda8765, com.bootdo.moneyList.damain.MoneyListDO@19d41f7c]
2019-04-03 14:09:07 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUserName
2019-04-03 14:09:07 -HTTP METHOD : POST
2019-04-03 14:09:07 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.getAllUserName
2019-04-03 14:09:07 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@69285c2f]
2019-04-03 14:09:07 -==>  Preparing: select user_name from elec UNION ALL select user_name from heat UNION ALL select user_name from water 
2019-04-03 14:09:07 -==> Parameters: 
2019-04-03 14:09:07 -<==      Total: 46
2019-04-03 14:09:07 -耗时 : 3
2019-04-03 14:09:07 -返回值 : [com.bootdo.moneyList.damain.MoneyListDO@d1bafcd, com.bootdo.moneyList.damain.MoneyListDO@4d245d5d, com.bootdo.moneyList.damain.MoneyListDO@6646a9f2, com.bootdo.moneyList.damain.MoneyListDO@2fda681b, com.bootdo.moneyList.damain.MoneyListDO@7f6fdfea, com.bootdo.moneyList.damain.MoneyListDO@104eabef, com.bootdo.moneyList.damain.MoneyListDO@4314892d, com.bootdo.moneyList.damain.MoneyListDO@3ff2bbe4, com.bootdo.moneyList.damain.MoneyListDO@3e63b37f, com.bootdo.moneyList.damain.MoneyListDO@5b97668f, com.bootdo.moneyList.damain.MoneyListDO@3cadd131, com.bootdo.moneyList.damain.MoneyListDO@16aa60db, com.bootdo.moneyList.damain.MoneyListDO@35f1d13a, com.bootdo.moneyList.damain.MoneyListDO@55b27a15, com.bootdo.moneyList.damain.MoneyListDO@7c40dcb, com.bootdo.moneyList.damain.MoneyListDO@422d1950, com.bootdo.moneyList.damain.MoneyListDO@796e682e, com.bootdo.moneyList.damain.MoneyListDO@3fcad7c4, com.bootdo.moneyList.damain.MoneyListDO@18473fa3, com.bootdo.moneyList.damain.MoneyListDO@328a5262, com.bootdo.moneyList.damain.MoneyListDO@38af7305, com.bootdo.moneyList.damain.MoneyListDO@5132e723, com.bootdo.moneyList.damain.MoneyListDO@70297081, com.bootdo.moneyList.damain.MoneyListDO@10d035a4, com.bootdo.moneyList.damain.MoneyListDO@53245be0, com.bootdo.moneyList.damain.MoneyListDO@15e9b558, com.bootdo.moneyList.damain.MoneyListDO@2eff621c, com.bootdo.moneyList.damain.MoneyListDO@3f131f72, com.bootdo.moneyList.damain.MoneyListDO@4e19b82b, com.bootdo.moneyList.damain.MoneyListDO@160297c5, com.bootdo.moneyList.damain.MoneyListDO@43b8e89b, com.bootdo.moneyList.damain.MoneyListDO@64f79711, com.bootdo.moneyList.damain.MoneyListDO@672ca344, com.bootdo.moneyList.damain.MoneyListDO@6512acdb, com.bootdo.moneyList.damain.MoneyListDO@61ea7cd2, com.bootdo.moneyList.damain.MoneyListDO@397d30e1, com.bootdo.moneyList.damain.MoneyListDO@3b498209, com.bootdo.moneyList.damain.MoneyListDO@4b4d85cf, com.bootdo.moneyList.damain.MoneyListDO@79f36c98, com.bootdo.moneyList.damain.MoneyListDO@29d9b17f, com.bootdo.moneyList.damain.MoneyListDO@5ef72787, com.bootdo.moneyList.damain.MoneyListDO@79b3b26b, com.bootdo.moneyList.damain.MoneyListDO@1b468669, com.bootdo.moneyList.damain.MoneyListDO@7ff09e37, com.bootdo.moneyList.damain.MoneyListDO@18dc5551, com.bootdo.moneyList.damain.MoneyListDO@7c189ccb]
2019-04-03 14:09:20 -WebSocketSession[1 current WS(1)-HttpStream(0)-HttpPoll(0), 10 total, 0 closed abnormally (0 connect failure, 0 send limit, 3 transport error)], stompSubProtocol[processed CONNECT(9)-CONNECTED(9)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 8, active threads = 0, queued tasks = 0, completed tasks = 108], outboundChannelpool size = 2, active threads = 0, queued tasks = 0, completed tasks = 18], sockJsScheduler[pool size = 4, active threads = 1, queued tasks = 2, completed tasks = 2393]
2019-04-03 14:10:01 -请求地址 : http://localhost:8081/index
2019-04-03 14:10:01 -HTTP METHOD : GET
2019-04-03 14:10:01 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2019-04-03 14:10:01 -参数 : [{}]
2019-04-03 14:10:01 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2019-04-03 14:10:01 -==> Parameters: 1(Long)
2019-04-03 14:10:01 -<==      Total: 46
2019-04-03 14:10:01 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2019-04-03 14:10:01 -==> Parameters: 138(Long)
2019-04-03 14:10:01 -<==      Total: 1
2019-04-03 14:10:01 -耗时 : 22
2019-04-03 14:10:01 -返回值 : index_v1
2019-04-03 14:10:01 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 14:10:01 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 22(Integer), com.bootdo.system.controller.LoginController.index()(String), {"menus":[{"attributes":{"icon":"fa fa-money","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-money","url":"/moneyList/moneyList"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"102","parentId":"106","text":"现金缴费"},{"attributes":{"icon":"fa fa-book","url":"/moneyLog/elecLog"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"107","parentId":"106","text":"缴费记录"}],"hasChildren":true,"hasParent":false,"id":"106","parentId":"0","text":"收费管理"},{"attributes":{"icon":"fa fa-lightbulb-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/elec/elec"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"121","parentId":"103","text":"电费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"elec/elecInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"122","parentId":"103","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"elec/elecUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"123","parentId":"103","text":"电表上传"},{"attributes":{"icon":"fa fa-cc","url":"/elec/elecPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"124","parentId":"103","text":"电价管理"}],"hasChildren":true,"hasParent":false,"id":"103","parentId":"0","text":"电费管理"},{"attributes":{"icon":"fa fa-tint","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/water/water"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"117","parentId":"105","text":"水费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"water/waterInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"118","parentId":"105","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"water/waterUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"119","parentId":"105","text":"水费生成"},{"attributes":{"icon":"fa fa-cc","url":"/water/waterPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"120","parentId":"105","text":"水价管理"}],"hasChildren":true,"hasParent":false,"id":"105","parentId":"0","text":"水费管理"},{"attributes":{"icon":"fa fa-fire","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/heat/heat"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"113","parentId":"104","text":"暖费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"heat/heatInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"114","parentId":"104","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"heat/heatUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"115","parentId":"104","text":"暖费生成"},{"attributes":{"icon":"","url":"/heat/heatPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"116","parentId":"104","text":"暖价管理"}],"hasChildren":true,"hasParent":false,"id":"104","parentId":"0","text":"暖费管理"},{"attributes":{"icon":"fa fa-vcard-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-bomb","url":"/print/print"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"149","parentId":"108","text":"票据记录"}],"hasChildren":true,"hasParent":false,"id":"108","parentId":"0","text":"票据管理"},{"attributes":{"icon":"fa fa-bar-chart","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-area-chart","url":"/chart/graph_echarts.html"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","text":"百度chart"},{"attributes":{"icon":"fa fa-sun-o","url":"charts/countDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"109","parentId":"97","text":"日统计报表"},{"attributes":{"icon":"fa fa-registered","url":"charts/countMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"110","parentId":"97","text":"月统计报表"},{"attributes":{"icon":"fa fa-money","url":"charts/countOwe"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"155","parentId":"97","text":"欠费报表图"},{"attributes":{"icon":"fa fa-support","url":"charts/countYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"111","parentId":"97","text":"年统计报表"},{"attributes":{"icon":"fa fa-tachometer","url":"charts/countRun"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"112","parentId":"97","text":"走势图报表"}],"hasChildren":true,"hasParent":false,"id":"97","parentId":"0","text":"统计管理"},{"attributes":{"icon":"fa fa-bars","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-book","url":"/common/dict"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"78","parentId":"1","text":"数据字典"},{"attributes":{"icon":"fa fa-folder-open","url":"/common/sysFile"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"71","parentId":"1","text":"文件管理"}],"h(String), 127.0.0.1(String), 2019-04-03 14:10:01.779(Timestamp)
2019-04-03 14:10:01 -<==    Updates: 1
2019-04-03 14:10:01 -请求地址 : http://localhost:8081/main
2019-04-03 14:10:01 -HTTP METHOD : GET
2019-04-03 14:10:01 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 14:10:01 -参数 : []
2019-04-03 14:10:01 -耗时 : 0
2019-04-03 14:10:01 -返回值 : main
2019-04-03 14:10:02 -请求地址 : http://localhost:8081/oa/notify/message
2019-04-03 14:10:02 -HTTP METHOD : GET
2019-04-03 14:10:02 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2019-04-03 14:10:02 -参数 : []
2019-04-03 14:10:02 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2019-04-03 14:10:02 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2019-04-03 14:10:02 -<==      Total: 0
2019-04-03 14:10:02 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2019-04-03 14:10:02 -==> Parameters: 1(Long), 0(String)
2019-04-03 14:10:02 -<==      Total: 1
2019-04-03 14:10:02 -耗时 : 23
2019-04-03 14:10:02 -返回值 : com.bootdo.common.utils.PageUtils@757f0bbb
2019-04-03 14:10:02 -请求地址 : http://localhost:8081/main
2019-04-03 14:10:02 -HTTP METHOD : GET
2019-04-03 14:10:02 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 14:10:02 -参数 : []
2019-04-03 14:10:02 -耗时 : 1
2019-04-03 14:10:02 -返回值 : main
2019-04-03 14:10:04 -请求地址 : http://localhost:8081/moneyList/moneyList
2019-04-03 14:10:04 -HTTP METHOD : GET
2019-04-03 14:10:04 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.MoneyList
2019-04-03 14:10:04 -参数 : []
2019-04-03 14:10:04 -耗时 : 1
2019-04-03 14:10:04 -返回值 : /moneyList/moneyList
2019-04-03 14:10:22 -请求地址 : http://localhost:8081/system/sysDept/treeView
2019-04-03 14:10:22 -HTTP METHOD : GET
2019-04-03 14:10:22 -CLASS_METHOD : com.bootdo.system.controller.DeptController.treeView
2019-04-03 14:10:22 -参数 : []
2019-04-03 14:10:22 -耗时 : 0
2019-04-03 14:10:22 -返回值 : system/dept/deptTree
2019-04-03 14:10:23 -请求地址 : http://localhost:8081/system/sysDept/tree
2019-04-03 14:10:23 -HTTP METHOD : GET
2019-04-03 14:10:23 -CLASS_METHOD : com.bootdo.system.controller.DeptController.tree
2019-04-03 14:10:23 -参数 : []
2019-04-03 14:10:23 -==>  Preparing: select `dept_id`,`parent_id`,`name`,`order_num`,`del_flag` from sys_dept order by dept_id desc 
2019-04-03 14:10:23 -==> Parameters: 
2019-04-03 14:10:23 -<==      Total: 3
2019-04-03 14:10:23 -耗时 : 28
2019-04-03 14:10:23 -返回值 : {"checked":false,"children":[{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"3","parentId":"1","state":{"opened":true},"text":"牙星"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"2","parentId":"1","state":{"opened":true},"text":"五九"}],"hasChildren":true,"hasParent":false,"id":"1","parentId":"0","state":{"opened":true},"text":"总公司"}
2019-04-03 14:10:27 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUserName
2019-04-03 14:10:27 -HTTP METHOD : POST
2019-04-03 14:10:27 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.getAllUserName
2019-04-03 14:10:27 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@51f76644]
2019-04-03 14:10:27 -==>  Preparing: select user_name from elec UNION ALL select user_name from heat UNION ALL select user_name from water 
2019-04-03 14:10:27 -==> Parameters: 
2019-04-03 14:10:27 -<==      Total: 46
2019-04-03 14:10:27 -耗时 : 5
2019-04-03 14:10:27 -返回值 : [com.bootdo.moneyList.damain.MoneyListDO@5ce718a5, com.bootdo.moneyList.damain.MoneyListDO@487a97c6, com.bootdo.moneyList.damain.MoneyListDO@22551dcb, com.bootdo.moneyList.damain.MoneyListDO@390ffab3, com.bootdo.moneyList.damain.MoneyListDO@5dc9ef07, com.bootdo.moneyList.damain.MoneyListDO@419197df, com.bootdo.moneyList.damain.MoneyListDO@4b206163, com.bootdo.moneyList.damain.MoneyListDO@dbcd0d6, com.bootdo.moneyList.damain.MoneyListDO@1f9fb7b1, com.bootdo.moneyList.damain.MoneyListDO@527de4f2, com.bootdo.moneyList.damain.MoneyListDO@1a1ebca7, com.bootdo.moneyList.damain.MoneyListDO@71cfe552, com.bootdo.moneyList.damain.MoneyListDO@138fe6e5, com.bootdo.moneyList.damain.MoneyListDO@2e68da12, com.bootdo.moneyList.damain.MoneyListDO@417ca0fc, com.bootdo.moneyList.damain.MoneyListDO@4f1728f4, com.bootdo.moneyList.damain.MoneyListDO@2343573d, com.bootdo.moneyList.damain.MoneyListDO@4b93b10d, com.bootdo.moneyList.damain.MoneyListDO@6fcc93c3, com.bootdo.moneyList.damain.MoneyListDO@196a5646, com.bootdo.moneyList.damain.MoneyListDO@202910e9, com.bootdo.moneyList.damain.MoneyListDO@7664c638, com.bootdo.moneyList.damain.MoneyListDO@7dbd01bc, com.bootdo.moneyList.damain.MoneyListDO@362eb02b, com.bootdo.moneyList.damain.MoneyListDO@5e68405f, com.bootdo.moneyList.damain.MoneyListDO@eed08ac, com.bootdo.moneyList.damain.MoneyListDO@1bc8582c, com.bootdo.moneyList.damain.MoneyListDO@58240c96, com.bootdo.moneyList.damain.MoneyListDO@44d2c575, com.bootdo.moneyList.damain.MoneyListDO@221c0d2b, com.bootdo.moneyList.damain.MoneyListDO@7bcc387c, com.bootdo.moneyList.damain.MoneyListDO@374db2f, com.bootdo.moneyList.damain.MoneyListDO@515f4f59, com.bootdo.moneyList.damain.MoneyListDO@13e8750c, com.bootdo.moneyList.damain.MoneyListDO@97da0d5, com.bootdo.moneyList.damain.MoneyListDO@2c75bf76, com.bootdo.moneyList.damain.MoneyListDO@77b1826, com.bootdo.moneyList.damain.MoneyListDO@576b4dd0, com.bootdo.moneyList.damain.MoneyListDO@337434e0, com.bootdo.moneyList.damain.MoneyListDO@327bb3f7, com.bootdo.moneyList.damain.MoneyListDO@6d1e37b6, com.bootdo.moneyList.damain.MoneyListDO@6016f208, com.bootdo.moneyList.damain.MoneyListDO@725719de, com.bootdo.moneyList.damain.MoneyListDO@1ddce868, com.bootdo.moneyList.damain.MoneyListDO@1e3dfe2, com.bootdo.moneyList.damain.MoneyListDO@56b2eb64]
2019-04-03 14:10:41 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUserName
2019-04-03 14:10:41 -HTTP METHOD : POST
2019-04-03 14:10:41 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.getAllUserName
2019-04-03 14:10:41 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@9fc1b40]
2019-04-03 14:10:41 -==>  Preparing: select user_name from elec WHERE user_name like CONCAT(CONCAT('%',?,'%')) UNION ALL select user_name from heat WHERE user_name like CONCAT(CONCAT('%',?,'%')) UNION ALL select user_name from water WHERE user_name like CONCAT(CONCAT('%',?,'%')) 
2019-04-03 14:10:41 -==> Parameters: 姜(String), 姜(String), 姜(String)
2019-04-03 14:10:41 -<==      Total: 3
2019-04-03 14:10:41 -耗时 : 5
2019-04-03 14:10:41 -返回值 : [com.bootdo.moneyList.damain.MoneyListDO@2039ae1c, com.bootdo.moneyList.damain.MoneyListDO@7b740f87, com.bootdo.moneyList.damain.MoneyListDO@12bb3db2]
2019-04-03 14:10:57 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUser
2019-04-03 14:10:57 -HTTP METHOD : POST
2019-04-03 14:10:57 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.queryAllUser
2019-04-03 14:10:57 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@1abc82cb]
2019-04-03 14:10:57 -==>  Preparing: select COUNT(*) number, user_id, user_name, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, elec_type usertype, elec_price userprice, elec_amount userarea, elec_cost usercost, elec_Sum usersum from elec WHERE create_time = ? and user_name = ? UNION ALL select COUNT(*) number, user_id, user_name, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, heat_type usertype, heat_price userprice, heat_area userarea, heat_cost usercost, heat_Sum usersum from heat WHERE create_time = ? and user_name = ? UNION ALL select COUNT(*) number, user_id, user_name, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, water_type usertype, water_price userprice, water_price userarea, water_price usercost, water_Sum usersum from water WHERE create_time = ? and user_name = ? 
2019-04-03 14:10:57 -==> Parameters: 2019-02(String), 姜海龙(String), 2019-02(String), 姜海龙(String), 2019-02(String), 姜海龙(String)
2019-04-03 14:10:57 -<==      Total: 3
2019-04-03 14:10:57 -耗时 : 176
2019-04-03 14:10:57 -返回值 : [com.bootdo.moneyList.damain.MoneyListDO@1bf8e77c, com.bootdo.moneyList.damain.MoneyListDO@2a11b67e, com.bootdo.moneyList.damain.MoneyListDO@5445c32d]
2019-04-03 14:11:04 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUserName
2019-04-03 14:11:04 -HTTP METHOD : POST
2019-04-03 14:11:04 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.getAllUserName
2019-04-03 14:11:04 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@3cb6c674]
2019-04-03 14:11:04 -==>  Preparing: select user_name from elec WHERE user_name like CONCAT(CONCAT('%',?,'%')) UNION ALL select user_name from heat WHERE user_name like CONCAT(CONCAT('%',?,'%')) UNION ALL select user_name from water WHERE user_name like CONCAT(CONCAT('%',?,'%')) 
2019-04-03 14:11:04 -==> Parameters: 姜海龙(String), 姜海龙(String), 姜海龙(String)
2019-04-03 14:11:04 -<==      Total: 3
2019-04-03 14:11:04 -耗时 : 4
2019-04-03 14:11:04 -返回值 : [com.bootdo.moneyList.damain.MoneyListDO@4fcc79ef, com.bootdo.moneyList.damain.MoneyListDO@7110dd05, com.bootdo.moneyList.damain.MoneyListDO@7b9f3035]
2019-04-03 14:11:05 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUser
2019-04-03 14:11:05 -HTTP METHOD : POST
2019-04-03 14:11:05 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.queryAllUser
2019-04-03 14:11:05 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@4cacd907]
2019-04-03 14:11:05 -==>  Preparing: select COUNT(*) number, user_id, user_name, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, elec_type usertype, elec_price userprice, elec_amount userarea, elec_cost usercost, elec_Sum usersum from elec WHERE create_time = ? and user_name = ? UNION ALL select COUNT(*) number, user_id, user_name, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, heat_type usertype, heat_price userprice, heat_area userarea, heat_cost usercost, heat_Sum usersum from heat WHERE create_time = ? and user_name = ? UNION ALL select COUNT(*) number, user_id, user_name, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, water_type usertype, water_price userprice, water_price userarea, water_price usercost, water_Sum usersum from water WHERE create_time = ? and user_name = ? 
2019-04-03 14:11:05 -==> Parameters: 2019-02(String), 姜海龙(String), 2019-02(String), 姜海龙(String), 2019-02(String), 姜海龙(String)
2019-04-03 14:11:05 -<==      Total: 3
2019-04-03 14:11:05 -耗时 : 9
2019-04-03 14:11:05 -返回值 : [com.bootdo.moneyList.damain.MoneyListDO@895c2d3, com.bootdo.moneyList.damain.MoneyListDO@268484e3, com.bootdo.moneyList.damain.MoneyListDO@c4a05d5]
2019-04-03 14:11:07 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUserName
2019-04-03 14:11:07 -HTTP METHOD : POST
2019-04-03 14:11:07 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.getAllUserName
2019-04-03 14:11:07 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@7dd9e32]
2019-04-03 14:11:07 -==>  Preparing: select user_name from elec WHERE user_name like CONCAT(CONCAT('%',?,'%')) UNION ALL select user_name from heat WHERE user_name like CONCAT(CONCAT('%',?,'%')) UNION ALL select user_name from water WHERE user_name like CONCAT(CONCAT('%',?,'%')) 
2019-04-03 14:11:07 -==> Parameters: 姜海龙(String), 姜海龙(String), 姜海龙(String)
2019-04-03 14:11:07 -<==      Total: 3
2019-04-03 14:11:07 -耗时 : 3
2019-04-03 14:11:07 -返回值 : [com.bootdo.moneyList.damain.MoneyListDO@52351438, com.bootdo.moneyList.damain.MoneyListDO@343bb21d, com.bootdo.moneyList.damain.MoneyListDO@5f7c86a6]
2019-04-03 14:11:09 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUser
2019-04-03 14:11:09 -HTTP METHOD : POST
2019-04-03 14:11:09 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.queryAllUser
2019-04-03 14:11:09 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@1b39434f]
2019-04-03 14:11:09 -==>  Preparing: select COUNT(*) number, user_id, user_name, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, elec_type usertype, elec_price userprice, elec_amount userarea, elec_cost usercost, elec_Sum usersum from elec WHERE create_time = ? and user_name = ? UNION ALL select COUNT(*) number, user_id, user_name, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, heat_type usertype, heat_price userprice, heat_area userarea, heat_cost usercost, heat_Sum usersum from heat WHERE create_time = ? and user_name = ? UNION ALL select COUNT(*) number, user_id, user_name, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, water_type usertype, water_price userprice, water_price userarea, water_price usercost, water_Sum usersum from water WHERE create_time = ? and user_name = ? 
2019-04-03 14:11:09 -==> Parameters: 2019-02(String), 姜海龙(String), 2019-02(String), 姜海龙(String), 2019-02(String), 姜海龙(String)
2019-04-03 14:11:09 -<==      Total: 3
2019-04-03 14:11:09 -耗时 : 4
2019-04-03 14:11:09 -返回值 : [com.bootdo.moneyList.damain.MoneyListDO@32213f87, com.bootdo.moneyList.damain.MoneyListDO@2d5f310b, com.bootdo.moneyList.damain.MoneyListDO@7c2d2cd4]
2019-04-03 14:13:21 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUserName
2019-04-03 14:13:21 -HTTP METHOD : POST
2019-04-03 14:13:21 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.getAllUserName
2019-04-03 14:13:21 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@26101e3d]
2019-04-03 14:13:21 -==>  Preparing: select user_name from elec WHERE user_name like CONCAT(CONCAT('%',?,'%')) UNION ALL select user_name from heat WHERE user_name like CONCAT(CONCAT('%',?,'%')) UNION ALL select user_name from water WHERE user_name like CONCAT(CONCAT('%',?,'%')) 
2019-04-03 14:13:21 -==> Parameters: 姜(String), 姜(String), 姜(String)
2019-04-03 14:13:21 -<==      Total: 3
2019-04-03 14:13:21 -耗时 : 12
2019-04-03 14:13:21 -返回值 : [com.bootdo.moneyList.damain.MoneyListDO@60a69c41, com.bootdo.moneyList.damain.MoneyListDO@4b16ab4, com.bootdo.moneyList.damain.MoneyListDO@22f67de9]
2019-04-03 14:13:29 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUserName
2019-04-03 14:13:29 -HTTP METHOD : POST
2019-04-03 14:13:29 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.getAllUserName
2019-04-03 14:13:29 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@45fe63cc]
2019-04-03 14:13:29 -==>  Preparing: select user_name from elec WHERE user_name like CONCAT(CONCAT('%',?,'%')) UNION ALL select user_name from heat WHERE user_name like CONCAT(CONCAT('%',?,'%')) UNION ALL select user_name from water WHERE user_name like CONCAT(CONCAT('%',?,'%')) 
2019-04-03 14:13:29 -==> Parameters: 姜(String), 姜(String), 姜(String)
2019-04-03 14:13:29 -<==      Total: 3
2019-04-03 14:13:29 -耗时 : 3
2019-04-03 14:13:29 -返回值 : [com.bootdo.moneyList.damain.MoneyListDO@1ede6957, com.bootdo.moneyList.damain.MoneyListDO@1c42fc21, com.bootdo.moneyList.damain.MoneyListDO@2a141c66]
2019-04-03 14:13:32 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUserName
2019-04-03 14:13:32 -HTTP METHOD : POST
2019-04-03 14:13:32 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.getAllUserName
2019-04-03 14:13:32 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@3121470d]
2019-04-03 14:13:32 -==>  Preparing: select user_name from elec WHERE user_name like CONCAT(CONCAT('%',?,'%')) UNION ALL select user_name from heat WHERE user_name like CONCAT(CONCAT('%',?,'%')) UNION ALL select user_name from water WHERE user_name like CONCAT(CONCAT('%',?,'%')) 
2019-04-03 14:13:32 -==> Parameters: 姜(String), 姜(String), 姜(String)
2019-04-03 14:13:32 -<==      Total: 3
2019-04-03 14:13:32 -耗时 : 4
2019-04-03 14:13:32 -返回值 : [com.bootdo.moneyList.damain.MoneyListDO@5967ace8, com.bootdo.moneyList.damain.MoneyListDO@65df6902, com.bootdo.moneyList.damain.MoneyListDO@5e7d439b]
2019-04-03 14:13:33 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUserName
2019-04-03 14:13:33 -HTTP METHOD : POST
2019-04-03 14:13:33 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.getAllUserName
2019-04-03 14:13:33 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@5d8941eb]
2019-04-03 14:13:33 -==>  Preparing: select user_name from elec WHERE user_name like CONCAT(CONCAT('%',?,'%')) UNION ALL select user_name from heat WHERE user_name like CONCAT(CONCAT('%',?,'%')) UNION ALL select user_name from water WHERE user_name like CONCAT(CONCAT('%',?,'%')) 
2019-04-03 14:13:33 -==> Parameters: 姜(String), 姜(String), 姜(String)
2019-04-03 14:13:33 -<==      Total: 3
2019-04-03 14:13:33 -耗时 : 5
2019-04-03 14:13:33 -返回值 : [com.bootdo.moneyList.damain.MoneyListDO@798da3c9, com.bootdo.moneyList.damain.MoneyListDO@25357580, com.bootdo.moneyList.damain.MoneyListDO@3224eed4]
2019-04-03 14:13:35 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUserName
2019-04-03 14:13:35 -HTTP METHOD : POST
2019-04-03 14:13:35 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.getAllUserName
2019-04-03 14:13:35 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@1abfc735]
2019-04-03 14:13:35 -==>  Preparing: select user_name from elec WHERE user_name like CONCAT(CONCAT('%',?,'%')) UNION ALL select user_name from heat WHERE user_name like CONCAT(CONCAT('%',?,'%')) UNION ALL select user_name from water WHERE user_name like CONCAT(CONCAT('%',?,'%')) 
2019-04-03 14:13:35 -==> Parameters: 姜(String), 姜(String), 姜(String)
2019-04-03 14:13:35 -<==      Total: 3
2019-04-03 14:13:35 -耗时 : 4
2019-04-03 14:13:35 -返回值 : [com.bootdo.moneyList.damain.MoneyListDO@99379c3, com.bootdo.moneyList.damain.MoneyListDO@32e187e1, com.bootdo.moneyList.damain.MoneyListDO@568368e7]
2019-04-03 14:13:36 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUserName
2019-04-03 14:13:36 -HTTP METHOD : POST
2019-04-03 14:13:36 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.getAllUserName
2019-04-03 14:13:36 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@1c618185]
2019-04-03 14:13:36 -==>  Preparing: select user_name from elec WHERE user_name like CONCAT(CONCAT('%',?,'%')) UNION ALL select user_name from heat WHERE user_name like CONCAT(CONCAT('%',?,'%')) UNION ALL select user_name from water WHERE user_name like CONCAT(CONCAT('%',?,'%')) 
2019-04-03 14:13:36 -==> Parameters: 姜(String), 姜(String), 姜(String)
2019-04-03 14:13:36 -<==      Total: 3
2019-04-03 14:13:36 -耗时 : 4
2019-04-03 14:13:36 -返回值 : [com.bootdo.moneyList.damain.MoneyListDO@79876a34, com.bootdo.moneyList.damain.MoneyListDO@382f57ab, com.bootdo.moneyList.damain.MoneyListDO@28d28482]
2019-04-03 14:13:36 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUserName
2019-04-03 14:13:36 -HTTP METHOD : POST
2019-04-03 14:13:36 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.getAllUserName
2019-04-03 14:13:36 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@3ea940f]
2019-04-03 14:13:36 -==>  Preparing: select user_name from elec WHERE user_name like CONCAT(CONCAT('%',?,'%')) UNION ALL select user_name from heat WHERE user_name like CONCAT(CONCAT('%',?,'%')) UNION ALL select user_name from water WHERE user_name like CONCAT(CONCAT('%',?,'%')) 
2019-04-03 14:13:36 -==> Parameters: 姜(String), 姜(String), 姜(String)
2019-04-03 14:13:36 -<==      Total: 3
2019-04-03 14:13:36 -耗时 : 3
2019-04-03 14:13:36 -返回值 : [com.bootdo.moneyList.damain.MoneyListDO@4ef639ac, com.bootdo.moneyList.damain.MoneyListDO@25c22e25, com.bootdo.moneyList.damain.MoneyListDO@72df8c7e]
2019-04-03 14:13:37 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUserName
2019-04-03 14:13:37 -HTTP METHOD : POST
2019-04-03 14:13:37 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.getAllUserName
2019-04-03 14:13:37 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@35364022]
2019-04-03 14:13:37 -==>  Preparing: select user_name from elec WHERE user_name like CONCAT(CONCAT('%',?,'%')) UNION ALL select user_name from heat WHERE user_name like CONCAT(CONCAT('%',?,'%')) UNION ALL select user_name from water WHERE user_name like CONCAT(CONCAT('%',?,'%')) 
2019-04-03 14:13:37 -==> Parameters: 姜(String), 姜(String), 姜(String)
2019-04-03 14:13:37 -<==      Total: 3
2019-04-03 14:13:37 -耗时 : 6
2019-04-03 14:13:37 -返回值 : [com.bootdo.moneyList.damain.MoneyListDO@3416574, com.bootdo.moneyList.damain.MoneyListDO@485c9e03, com.bootdo.moneyList.damain.MoneyListDO@4fecf07a]
2019-04-03 14:13:38 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUserName
2019-04-03 14:13:38 -HTTP METHOD : POST
2019-04-03 14:13:38 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.getAllUserName
2019-04-03 14:13:38 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@546bdea8]
2019-04-03 14:13:38 -==>  Preparing: select user_name from elec WHERE user_name like CONCAT(CONCAT('%',?,'%')) UNION ALL select user_name from heat WHERE user_name like CONCAT(CONCAT('%',?,'%')) UNION ALL select user_name from water WHERE user_name like CONCAT(CONCAT('%',?,'%')) 
2019-04-03 14:13:38 -==> Parameters: 姜(String), 姜(String), 姜(String)
2019-04-03 14:13:38 -<==      Total: 3
2019-04-03 14:13:38 -耗时 : 3
2019-04-03 14:13:38 -返回值 : [com.bootdo.moneyList.damain.MoneyListDO@f903a91, com.bootdo.moneyList.damain.MoneyListDO@1e9817bf, com.bootdo.moneyList.damain.MoneyListDO@140c145a]
2019-04-03 14:13:38 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUserName
2019-04-03 14:13:38 -HTTP METHOD : POST
2019-04-03 14:13:38 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.getAllUserName
2019-04-03 14:13:38 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@fd2ecb0]
2019-04-03 14:13:38 -==>  Preparing: select user_name from elec WHERE user_name like CONCAT(CONCAT('%',?,'%')) UNION ALL select user_name from heat WHERE user_name like CONCAT(CONCAT('%',?,'%')) UNION ALL select user_name from water WHERE user_name like CONCAT(CONCAT('%',?,'%')) 
2019-04-03 14:13:38 -==> Parameters: 姜(String), 姜(String), 姜(String)
2019-04-03 14:13:38 -<==      Total: 3
2019-04-03 14:13:38 -耗时 : 4
2019-04-03 14:13:38 -返回值 : [com.bootdo.moneyList.damain.MoneyListDO@74c8d770, com.bootdo.moneyList.damain.MoneyListDO@e6e3e6f, com.bootdo.moneyList.damain.MoneyListDO@16c1e47e]
2019-04-03 14:13:39 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUserName
2019-04-03 14:13:39 -HTTP METHOD : POST
2019-04-03 14:13:39 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.getAllUserName
2019-04-03 14:13:39 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@486b1538]
2019-04-03 14:13:39 -==>  Preparing: select user_name from elec WHERE user_name like CONCAT(CONCAT('%',?,'%')) UNION ALL select user_name from heat WHERE user_name like CONCAT(CONCAT('%',?,'%')) UNION ALL select user_name from water WHERE user_name like CONCAT(CONCAT('%',?,'%')) 
2019-04-03 14:13:39 -==> Parameters: 姜(String), 姜(String), 姜(String)
2019-04-03 14:13:39 -<==      Total: 3
2019-04-03 14:13:39 -耗时 : 3
2019-04-03 14:13:39 -返回值 : [com.bootdo.moneyList.damain.MoneyListDO@2e3a0ad4, com.bootdo.moneyList.damain.MoneyListDO@24c7d459, com.bootdo.moneyList.damain.MoneyListDO@3415c72c]
2019-04-03 14:13:40 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUserName
2019-04-03 14:13:40 -HTTP METHOD : POST
2019-04-03 14:13:40 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.getAllUserName
2019-04-03 14:13:40 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@6b10aeb6]
2019-04-03 14:13:40 -==>  Preparing: select user_name from elec WHERE user_name like CONCAT(CONCAT('%',?,'%')) UNION ALL select user_name from heat WHERE user_name like CONCAT(CONCAT('%',?,'%')) UNION ALL select user_name from water WHERE user_name like CONCAT(CONCAT('%',?,'%')) 
2019-04-03 14:13:40 -==> Parameters: 姜(String), 姜(String), 姜(String)
2019-04-03 14:13:40 -<==      Total: 3
2019-04-03 14:13:40 -耗时 : 5
2019-04-03 14:13:40 -返回值 : [com.bootdo.moneyList.damain.MoneyListDO@117db055, com.bootdo.moneyList.damain.MoneyListDO@25a8587a, com.bootdo.moneyList.damain.MoneyListDO@4b232767]
2019-04-03 14:13:40 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUserName
2019-04-03 14:13:40 -HTTP METHOD : POST
2019-04-03 14:13:40 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.getAllUserName
2019-04-03 14:13:40 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@2d89d158]
2019-04-03 14:13:40 -==>  Preparing: select user_name from elec WHERE user_name like CONCAT(CONCAT('%',?,'%')) UNION ALL select user_name from heat WHERE user_name like CONCAT(CONCAT('%',?,'%')) UNION ALL select user_name from water WHERE user_name like CONCAT(CONCAT('%',?,'%')) 
2019-04-03 14:13:40 -==> Parameters: 姜(String), 姜(String), 姜(String)
2019-04-03 14:13:40 -<==      Total: 3
2019-04-03 14:13:40 -耗时 : 4
2019-04-03 14:13:40 -返回值 : [com.bootdo.moneyList.damain.MoneyListDO@3799570f, com.bootdo.moneyList.damain.MoneyListDO@225e4d66, com.bootdo.moneyList.damain.MoneyListDO@413e4b64]
2019-04-03 14:13:41 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUserName
2019-04-03 14:13:41 -HTTP METHOD : POST
2019-04-03 14:13:41 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.getAllUserName
2019-04-03 14:13:41 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@3a1af34d]
2019-04-03 14:13:41 -==>  Preparing: select user_name from elec WHERE user_name like CONCAT(CONCAT('%',?,'%')) UNION ALL select user_name from heat WHERE user_name like CONCAT(CONCAT('%',?,'%')) UNION ALL select user_name from water WHERE user_name like CONCAT(CONCAT('%',?,'%')) 
2019-04-03 14:13:41 -==> Parameters: 姜(String), 姜(String), 姜(String)
2019-04-03 14:13:41 -<==      Total: 3
2019-04-03 14:13:41 -耗时 : 4
2019-04-03 14:13:41 -返回值 : [com.bootdo.moneyList.damain.MoneyListDO@16358cd8, com.bootdo.moneyList.damain.MoneyListDO@5b3c0aa9, com.bootdo.moneyList.damain.MoneyListDO@36511a18]
2019-04-03 14:13:50 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUser
2019-04-03 14:13:50 -HTTP METHOD : POST
2019-04-03 14:13:50 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.queryAllUser
2019-04-03 14:13:50 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@6bbbc6bc]
2019-04-03 14:13:50 -==>  Preparing: select COUNT(*) number, user_id, user_name, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, elec_type usertype, elec_price userprice, elec_amount userarea, elec_cost usercost, elec_Sum usersum from elec WHERE create_time = ? and user_name = ? UNION ALL select COUNT(*) number, user_id, user_name, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, heat_type usertype, heat_price userprice, heat_area userarea, heat_cost usercost, heat_Sum usersum from heat WHERE create_time = ? and user_name = ? UNION ALL select COUNT(*) number, user_id, user_name, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, water_type usertype, water_price userprice, water_price userarea, water_price usercost, water_Sum usersum from water WHERE create_time = ? and user_name = ? 
2019-04-03 14:13:50 -==> Parameters: 2019-02(String), 姜海龙(String), 2019-02(String), 姜海龙(String), 2019-02(String), 姜海龙(String)
2019-04-03 14:13:50 -<==      Total: 3
2019-04-03 14:13:50 -耗时 : 5
2019-04-03 14:13:50 -返回值 : [com.bootdo.moneyList.damain.MoneyListDO@6bff5fa4, com.bootdo.moneyList.damain.MoneyListDO@57b520cd, com.bootdo.moneyList.damain.MoneyListDO@620e82a1]
2019-04-03 14:29:47 -Validating all active sessions...
2019-04-03 14:29:47 -Finished session validation.  No sessions were stopped.
2019-04-03 14:29:47 -Validating all active sessions...
2019-04-03 14:29:47 -Finished session validation.  No sessions were stopped.
2019-04-03 14:39:20 -WebSocketSession[1 current WS(1)-HttpStream(0)-HttpPoll(0), 11 total, 0 closed abnormally (0 connect failure, 0 send limit, 3 transport error)], stompSubProtocol[processed CONNECT(10)-CONNECTED(10)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 120], outboundChannelpool size = 0, active threads = 0, queued tasks = 0, completed tasks = 20], sockJsScheduler[pool size = 4, active threads = 1, queued tasks = 2, completed tasks = 2825]
2019-04-03 14:42:49 -Starting BootdoApplication on ZJZL-20180906VX with PID 2028 (D:\eclipse2018-work\bootdo\target\classes started by Administrator in D:\eclipse2018-work\bootdo)
2019-04-03 14:42:49 -Running with Spring Boot v2.0.3.RELEASE, Spring v5.0.7.RELEASE
2019-04-03 14:42:49 -The following profiles are active: dev
2019-04-03 14:42:49 -Refreshing org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@6fdbe764: startup date [Wed Apr 03 14:42:49 CST 2019]; root of context hierarchy
2019-04-03 14:42:52 -Multiple Spring Data modules found, entering strict repository configuration mode!
2019-04-03 14:42:54 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$fba0e363] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-03 14:42:54 -Bean 'shiroConfig' of type [com.bootdo.system.config.ShiroConfig$$EnhancerBySpringCGLIB$$edfa120a] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-03 14:42:55 -Bean 'userRealm' of type [com.bootdo.system.shiro.UserRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-03 14:42:56 -Bean 'cacheManager2' of type [net.sf.ehcache.CacheManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-03 14:42:56 -Bean 'ehCacheManager' of type [org.apache.shiro.cache.ehcache.EhCacheManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-03 14:42:56 -Cache with name 'com.bootdo.system.shiro.UserRealm.authorizationCache' does not yet exist.  Creating now.
2019-04-03 14:42:56 -Added EhCache named [com.bootdo.system.shiro.UserRealm.authorizationCache]
2019-04-03 14:42:56 -Bean 'sessionDAO' of type [org.apache.shiro.session.mgt.eis.MemorySessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-03 14:42:56 -Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-03 14:42:56 -Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-03 14:42:56 -Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-03 14:42:57 -Tomcat initialized with port(s): 8081 (http)
2019-04-03 14:42:57 -Initializing ProtocolHandler ["http-nio-8081"]
2019-04-03 14:42:57 -Starting service [Tomcat]
2019-04-03 14:42:57 -Starting Servlet Engine: Apache Tomcat/8.5.31
2019-04-03 14:42:57 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [C:\Program Files\Java\jre1.8.0_131\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:/Program Files/Java/jre1.8.0_131/bin/server;C:/Program Files/Java/jre1.8.0_131/bin;C:/Program Files/Java/jre1.8.0_131/lib/amd64;C:\ProgramData\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Windows\System32\OpenSSH\;D:\pbb\pycSafefile\x64;D:\pbb\PBB Reader\x64;C:\Program Files\MySQL\MySQL Utilities 1.6\;D:\MAVEN\apache-maven-3.6.0\bin;D:\GIT\Git\cmd;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;;C:\Users\Administrator\Desktop;;.]
2019-04-03 14:42:58 -Initializing Spring embedded WebApplicationContext
2019-04-03 14:42:58 -Root WebApplicationContext: initialization completed in 8863 ms
2019-04-03 14:42:59 -Mapping filter: 'characterEncodingFilter' to: [/*]
2019-04-03 14:42:59 -Mapping filter: 'hiddenHttpMethodFilter' to: [/*]
2019-04-03 14:42:59 -Mapping filter: 'httpPutFormContentFilter' to: [/*]
2019-04-03 14:42:59 -Mapping filter: 'requestContextFilter' to: [/*]
2019-04-03 14:42:59 -Filter xssFilter was not registered (disabled)
2019-04-03 14:42:59 -Mapping filter: 'webStatFilter' to urls: [/*]
2019-04-03 14:42:59 -Mapping filter: 'shiroFilterFactoryBean' to: [/*]
2019-04-03 14:42:59 -Servlet statViewServlet mapped to [/druid/*]
2019-04-03 14:42:59 -Servlet dispatcherServlet mapped to [/]
2019-04-03 14:43:02 -ApplicationContext registed-->org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@6fdbe764: startup date [Wed Apr 03 14:42:49 CST 2019]; root of context hierarchy
2019-04-03 14:43:02 -Using default implementation for ThreadExecutor
2019-04-03 14:43:02 -Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2019-04-03 14:43:02 -Quartz Scheduler v.2.2.1 created.
2019-04-03 14:43:02 -RAMJobStore initialized.
2019-04-03 14:43:02 -Scheduler meta-data: Quartz Scheduler (v2.2.1) 'schedulerFactoryBean' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2019-04-03 14:43:02 -Quartz scheduler 'schedulerFactoryBean' initialized from an externally provided properties instance.
2019-04-03 14:43:02 -Quartz scheduler version: 2.2.1
2019-04-03 14:43:02 -JobFactory set to: com.bootdo.common.quartz.factory.JobFactory@1883871b
2019-04-03 14:43:03 -Initializing ExecutorService  'clientInboundChannelExecutor'
2019-04-03 14:43:03 -Initializing ExecutorService  'clientOutboundChannelExecutor'
2019-04-03 14:43:06 -Mapped "{[/charts/countDD/exportCountDD],methods=[GET]}" onto public void com.bootdo.charts.controller.countDDController.exprotElecLog(com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-03 14:43:06 -Mapped "{[/charts/countDD],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.countDDController.countDD()
2019-04-03 14:43:06 -Mapped "{[/charts/countDD/getCountDD],methods=[POST]}" onto public com.bootdo.charts.vo.CountDayVo com.bootdo.charts.controller.countDDController.getCountD(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo,javax.servlet.http.HttpServletRequest)
2019-04-03 14:43:06 -Mapped "{[/charts/countDD/tableDD],methods=[POST]}" onto public java.lang.String com.bootdo.charts.controller.countDDController.tableDD()
2019-04-03 14:43:06 -Mapped "{[/charts/countMM/exportCountMM],methods=[GET]}" onto public void com.bootdo.charts.controller.countMMController.exprotElecLog(com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-03 14:43:06 -Mapped "{[/charts/countMM/getCountMM],methods=[POST]}" onto public void com.bootdo.charts.controller.countMMController.getCountMM(org.springframework.ui.Model,com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo,javax.servlet.http.HttpServletRequest)
2019-04-03 14:43:06 -Mapped "{[/charts/countMM],methods=[GET]}" onto java.lang.String com.bootdo.charts.controller.countMMController.countMM()
2019-04-03 14:43:06 -Mapped "{[/charts/countOwe],methods=[GET]}" onto java.lang.String com.bootdo.charts.controller.countOweController.countOwe()
2019-04-03 14:43:06 -Mapped "{[/charts/countOwe/getCountOwe],methods=[POST]}" onto public com.bootdo.charts.vo.CountOweVo com.bootdo.charts.controller.countOweController.getCountD(com.bootdo.elec.vo.ElecVo,com.bootdo.water.vo.WaterVo,com.bootdo.heat.vo.HeatVo,javax.servlet.http.HttpServletRequest)
2019-04-03 14:43:06 -Mapped "{[/charts/countRun/exportCountRun],methods=[GET]}" onto public void com.bootdo.charts.controller.countRunController.exprotElecLog(com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-03 14:43:06 -Mapped "{[/charts/countRun],methods=[GET]}" onto java.lang.String com.bootdo.charts.controller.countRunController.countRun()
2019-04-03 14:43:06 -Mapped "{[/charts/countRun/getCountRun],methods=[POST]}" onto public int com.bootdo.charts.controller.countRunController.getCountD(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo)
2019-04-03 14:43:06 -Mapped "{[/charts/countYY/exportCountYY],methods=[GET]}" onto public void com.bootdo.charts.controller.countYYController.exprotElecLog(com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-03 14:43:06 -Mapped "{[/charts/countYY],methods=[GET]}" onto java.lang.String com.bootdo.charts.controller.countYYController.countYY()
2019-04-03 14:43:06 -Mapped "{[/charts/countYY/getCountYY],methods=[POST]}" onto public int com.bootdo.charts.controller.countYYController.getCountD(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo)
2019-04-03 14:43:06 -Mapped "{[/common/dict/add],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.add()
2019-04-03 14:43:06 -Mapped "{[/common/dict/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.remove(java.lang.Long)
2019-04-03 14:43:06 -Mapped "{[/common/dict/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.remove(java.lang.Long[])
2019-04-03 14:43:06 -Mapped "{[/common/dict/update]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.update(com.bootdo.common.domain.DictDO)
2019-04-03 14:43:06 -Mapped "{[/common/dict/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.common.controller.DictController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 14:43:06 -Mapped "{[/common/dict/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.save(com.bootdo.common.domain.DictDO)
2019-04-03 14:43:06 -Mapped "{[/common/dict/type],methods=[GET]}" onto public java.util.List<com.bootdo.common.domain.DictDO> com.bootdo.common.controller.DictController.listType()
2019-04-03 14:43:06 -Mapped "{[/common/dict/add/{type}/{description}],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.addD(org.springframework.ui.Model,java.lang.String,java.lang.String)
2019-04-03 14:43:06 -Mapped "{[/common/dict],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.dict()
2019-04-03 14:43:06 -Mapped "{[/common/dict/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 14:43:06 -Mapped "{[/common/dict/list/{type}],methods=[GET]}" onto public java.util.List<com.bootdo.common.domain.DictDO> com.bootdo.common.controller.DictController.listByType(java.lang.String)
2019-04-03 14:43:06 -Mapped "{[/common/sysFile/add],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.FileController.add()
2019-04-03 14:43:06 -Mapped "{[/common/sysFile/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.remove(java.lang.Long,javax.servlet.http.HttpServletRequest)
2019-04-03 14:43:06 -Mapped "{[/common/sysFile/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.remove(java.lang.Long[])
2019-04-03 14:43:06 -Mapped "{[/common/sysFile/update]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.update(com.bootdo.common.domain.FileDO)
2019-04-03 14:43:06 -Mapped "{[/common/sysFile/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.common.controller.FileController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 14:43:06 -Mapped "{[/common/sysFile/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.save(com.bootdo.common.domain.FileDO)
2019-04-03 14:43:06 -Mapped "{[/common/sysFile/info/{id}]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.info(java.lang.Long)
2019-04-03 14:43:06 -Mapped "{[/common/sysFile],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.FileController.sysFile(org.springframework.ui.Model)
2019-04-03 14:43:06 -Mapped "{[/common/sysFile/upload],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.FileController.upload(org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpServletRequest)
2019-04-03 14:43:06 -Mapped "{[/common/sysFile/edit],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.FileController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 14:43:06 -Mapped "{[/common/generator/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.GeneratorController.update(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 14:43:06 -Mapped "{[/common/generator/list],methods=[GET]}" onto java.util.List<java.util.Map<java.lang.String, java.lang.Object>> com.bootdo.common.controller.GeneratorController.list()
2019-04-03 14:43:06 -Mapped "{[/common/generator/code/{tableName}]}" onto public void com.bootdo.common.controller.GeneratorController.code(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String) throws java.io.IOException
2019-04-03 14:43:06 -Mapped "{[/common/generator],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.GeneratorController.generator()
2019-04-03 14:43:06 -Mapped "{[/common/generator/edit],methods=[GET]}" onto public java.lang.String com.bootdo.common.controller.GeneratorController.edit(org.springframework.ui.Model)
2019-04-03 14:43:06 -Mapped "{[/common/generator/batchCode]}" onto public void com.bootdo.common.controller.GeneratorController.batchCode(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String) throws java.io.IOException
2019-04-03 14:43:06 -Mapped "{[/common/job/add],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.JobController.add()
2019-04-03 14:43:06 -Mapped "{[/common/job/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.remove(java.lang.Long)
2019-04-03 14:43:06 -Mapped "{[/common/job/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.remove(java.lang.Long[])
2019-04-03 14:43:06 -Mapped "{[/common/job/update],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.update(com.bootdo.common.domain.TaskDO)
2019-04-03 14:43:06 -Mapped "{[/common/job/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.common.controller.JobController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 14:43:06 -Mapped "{[/common/job/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.save(com.bootdo.common.domain.TaskDO)
2019-04-03 14:43:06 -Mapped "{[/common/job/info/{id}]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.info(java.lang.Long)
2019-04-03 14:43:06 -Mapped "{[/common/job/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.JobController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 14:43:06 -Mapped "{[/common/job],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.JobController.taskScheduleJob()
2019-04-03 14:43:06 -Mapped "{[/common/job/changeJobStatus],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.changeJobStatus(java.lang.Long,java.lang.String)
2019-04-03 14:43:06 -Mapped "{[/common/log/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.LogController.remove(java.lang.Long)
2019-04-03 14:43:06 -Mapped "{[/common/log],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.LogController.log()
2019-04-03 14:43:06 -Mapped "{[/common/log/list],methods=[GET]}" onto com.bootdo.common.domain.PageDO<com.bootdo.common.domain.LogDO> com.bootdo.common.controller.LogController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 14:43:06 -Mapped "{[/common/log/batchRemove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.LogController.batchRemove(java.lang.Long[])
2019-04-03 14:43:06 -Mapped "{[/common/long],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.LongController.Long()
2019-04-03 14:43:06 -Mapped "{[/common/time],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.TimeController.Time()
2019-04-03 14:43:06 -Mapped "{[/error]}" onto public com.bootdo.common.utils.R com.bootdo.common.exception.MainsiteErrorController.handleError(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-04-03 14:43:06 -Mapped "{[/error],produces=[text/html]}" onto public org.springframework.web.servlet.ModelAndView com.bootdo.common.exception.MainsiteErrorController.errorHtml(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-04-03 14:43:06 -Mapped "{[/elec/elec/add],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecController.add()
2019-04-03 14:43:06 -Mapped "{[/elec/elec/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.remove(java.lang.Long)
2019-04-03 14:43:06 -Mapped "{[/elec/elec/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.remove(java.lang.Long[])
2019-04-03 14:43:06 -Mapped "{[/elec/elec/update],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.update(com.bootdo.elec.domain.ElecDO)
2019-04-03 14:43:06 -Mapped "{[/elec/elec/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.elec.controller.ElecController.list(java.util.Map<java.lang.String, java.lang.Object>,com.bootdo.elec.domain.ElecDO)
2019-04-03 14:43:06 -Mapped "{[/elec/elec/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.save(com.bootdo.elec.domain.ElecDO)
2019-04-03 14:43:06 -Mapped "{[/elec/elec/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 14:43:06 -Mapped "{[/elec/elec/exprotElec],methods=[GET]}" onto public void com.bootdo.elec.controller.ElecController.exprotExcel(com.bootdo.elec.vo.ElecVo,javax.servlet.http.HttpServletResponse)
2019-04-03 14:43:06 -Mapped "{[/elec/elec],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecController.Elec()
2019-04-03 14:43:06 -Mapped "{[/elec/elecInto/importElecIntoExcel],methods=[POST]}" onto public java.util.Map<java.lang.String, java.lang.Object> com.bootdo.elec.controller.ElecIntoController.importElecIntoExcel(org.springframework.web.multipart.MultipartFile,com.bootdo.elec.vo.ElecVo) throws java.lang.Exception
2019-04-03 14:43:06 -Mapped "{[/elec/elecInto],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecIntoController.ElecInto()
2019-04-03 14:43:06 -Mapped "{[/elec/elecInto/exprotElecIntoExcel],methods=[GET]}" onto public void com.bootdo.elec.controller.ElecIntoController.exprotExcel(com.bootdo.elec.vo.ElecVo,javax.servlet.http.HttpServletResponse)
2019-04-03 14:43:06 -Mapped "{[/elec/elecPrice/add],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecPriceController.add()
2019-04-03 14:43:06 -Mapped "{[/elec/elecPrice/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecPriceController.remove(java.lang.Long)
2019-04-03 14:43:06 -Mapped "{[/elec/elecPrice/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecPriceController.remove(java.lang.Long[])
2019-04-03 14:43:06 -Mapped "{[/elec/elecPrice/update]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecPriceController.update(com.bootdo.elec.domain.ElecPriceDO)
2019-04-03 14:43:06 -Mapped "{[/elec/elecPrice/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.elec.controller.ElecPriceController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 14:43:06 -Mapped "{[/elec/elecPrice/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecPriceController.save(com.bootdo.elec.domain.ElecPriceDO,com.bootdo.elec.domain.ElecDO)
2019-04-03 14:43:06 -Mapped "{[/elec/elecPrice],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecPriceController.ElecPrice()
2019-04-03 14:43:06 -Mapped "{[/elec/elecPrice/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecPriceController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 14:43:06 -Mapped "{[/elec/elecUpLoad/importElecExcel],methods=[POST]}" onto public java.util.Map<java.lang.String, java.lang.Object> com.bootdo.elec.controller.ElecUpLoadController.importElecExcel(org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpServletRequest) throws java.lang.Exception
2019-04-03 14:43:06 -Mapped "{[/elec/elecUpLoad],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecUpLoadController.Elec()
2019-04-03 14:43:06 -Mapped "{[/heat/heat/add],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatController.add()
2019-04-03 14:43:06 -Mapped "{[/heat/heat/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatController.remove(java.lang.Integer)
2019-04-03 14:43:06 -Mapped "{[/heat/heat/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatController.remove(java.lang.Integer[])
2019-04-03 14:43:06 -Mapped "{[/heat/heat/update]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatController.update(com.bootdo.heat.domain.HeatDO)
2019-04-03 14:43:06 -Mapped "{[/heat/heat/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.heat.controller.HeatController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 14:43:06 -Mapped "{[/heat/heat/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatController.save(com.bootdo.heat.domain.HeatDO)
2019-04-03 14:43:06 -Mapped "{[/heat/heat],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatController.Heat()
2019-04-03 14:43:06 -Mapped "{[/heat/heat/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatController.edit(java.lang.Integer,org.springframework.ui.Model)
2019-04-03 14:43:06 -Mapped "{[/heat/heat/exprotHeat],methods=[GET]}" onto public void com.bootdo.heat.controller.HeatController.exprotExcel(com.bootdo.heat.vo.HeatVo,javax.servlet.http.HttpServletResponse)
2019-04-03 14:43:06 -Mapped "{[/heat/heatInto],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatIntoController.HeatInto()
2019-04-03 14:43:06 -Mapped "{[/heat/heatInto/exprotHeatIntoExcel],methods=[GET]}" onto public void com.bootdo.heat.controller.HeatIntoController.exprotExcel(com.bootdo.heat.vo.HeatVo,javax.servlet.http.HttpServletResponse)
2019-04-03 14:43:06 -Mapped "{[/heat/heatPrice/add],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatPriceController.add()
2019-04-03 14:43:06 -Mapped "{[/heat/heatPrice/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatPriceController.remove(java.lang.Long)
2019-04-03 14:43:06 -Mapped "{[/heat/heatPrice/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatPriceController.remove(java.lang.Long[])
2019-04-03 14:43:06 -Mapped "{[/heat/heatPrice/update]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatPriceController.update(com.bootdo.heat.domain.HeatPriceDO)
2019-04-03 14:43:06 -Mapped "{[/heat/heatPrice/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.heat.controller.HeatPriceController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 14:43:06 -Mapped "{[/heat/heatPrice/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatPriceController.save(com.bootdo.heat.domain.HeatPriceDO)
2019-04-03 14:43:06 -Mapped "{[/heat/heatPrice],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatPriceController.HeatPrice()
2019-04-03 14:43:06 -Mapped "{[/heat/heatPrice/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatPriceController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 14:43:06 -Mapped "{[/heat/heatUpLoad/importHeatExcel]}" onto public java.lang.String com.bootdo.heat.controller.HeatUpLoadController.importHeatExcel(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)
2019-04-03 14:43:06 -Mapped "{[/heat/heatUpLoad/createHeatExcel],methods=[POST]}" onto public java.lang.String com.bootdo.heat.controller.HeatUpLoadController.createHeatExcel(com.bootdo.heat.domain.HeatDO) throws java.lang.Exception
2019-04-03 14:43:06 -Mapped "{[/heat/heatUpLoad],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatUpLoadController.HeatUpLoad()
2019-04-03 14:43:06 -Mapped "{[/heat/heatUpLoad/exprotHeatExcel],methods=[GET]}" onto public void com.bootdo.heat.controller.HeatUpLoadController.exprotHeatExcel(com.bootdo.heat.vo.HeatVo,javax.servlet.http.HttpServletResponse)
2019-04-03 14:43:06 -Mapped "{[/moneyList/moneyList/updateMoney],methods=[POST]}" onto public java.util.List<com.bootdo.moneyList.damain.MoneyListDO> com.bootdo.moneyList.controller.MoneyListController.updateMoney(com.bootdo.moneyList.damain.MoneyListDO)
2019-04-03 14:43:06 -Mapped "{[/moneyList/moneyList/queryAllUser],methods=[POST]}" onto public java.util.List<com.bootdo.moneyList.damain.MoneyListDO> com.bootdo.moneyList.controller.MoneyListController.queryAllUser(com.bootdo.moneyList.damain.MoneyListDO)
2019-04-03 14:43:06 -Mapped "{[/moneyList/moneyList/queryAllUserName],methods=[POST]}" onto public java.util.List<com.bootdo.moneyList.damain.MoneyListDO> com.bootdo.moneyList.controller.MoneyListController.getAllUserName(com.bootdo.moneyList.damain.MoneyListDO)
2019-04-03 14:43:06 -Mapped "{[/moneyList/moneyList],methods=[GET]}" onto java.lang.String com.bootdo.moneyList.controller.MoneyListController.MoneyList()
2019-04-03 14:43:06 -Mapped "{[/moneyLog/elecLog/add],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.ElecLogController.add()
2019-04-03 14:43:06 -Mapped "{[/moneyLog/elecLog/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.ElecLogController.remove(java.lang.Long)
2019-04-03 14:43:06 -Mapped "{[/moneyLog/elecLog/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.ElecLogController.remove(java.lang.Long[])
2019-04-03 14:43:06 -Mapped "{[/moneyLog/elecLog/update]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.ElecLogController.update(com.bootdo.moneyLog.domain.ElecLogDO)
2019-04-03 14:43:06 -Mapped "{[/moneyLog/elecLog/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.moneyLog.controller.ElecLogController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 14:43:06 -Mapped "{[/moneyLog/elecLog/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.ElecLogController.save(com.bootdo.moneyLog.domain.ElecLogDO)
2019-04-03 14:43:06 -Mapped "{[/moneyLog/elecLog/exprotElecLog],methods=[GET]}" onto public void com.bootdo.moneyLog.controller.ElecLogController.exprotElecLog(com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-03 14:43:06 -Mapped "{[/moneyLog/elecLog],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.ElecLogController.moneyLog()
2019-04-03 14:43:06 -Mapped "{[/moneyLog/elecLog/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.ElecLogController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 14:43:06 -Mapped "{[/moneyLog/heatLog/add],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.HeatLogController.add()
2019-04-03 14:43:06 -Mapped "{[/moneyLog/heatLog/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.HeatLogController.remove(java.lang.Long)
2019-04-03 14:43:06 -Mapped "{[/moneyLog/heatLog/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.HeatLogController.remove(java.lang.Long[])
2019-04-03 14:43:06 -Mapped "{[/moneyLog/heatLog/update]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.HeatLogController.update(com.bootdo.moneyLog.domain.HeatLogDO)
2019-04-03 14:43:06 -Mapped "{[/moneyLog/heatLog/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.moneyLog.controller.HeatLogController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 14:43:06 -Mapped "{[/moneyLog/heatLog/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.HeatLogController.save(com.bootdo.moneyLog.domain.HeatLogDO)
2019-04-03 14:43:06 -Mapped "{[/moneyLog/heatLog],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.HeatLogController.HeatLog()
2019-04-03 14:43:06 -Mapped "{[/moneyLog/heatLog/exprotHeatLog],methods=[GET]}" onto public void com.bootdo.moneyLog.controller.HeatLogController.exprotHeatLog(com.bootdo.moneyLog.vo.HeatLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-03 14:43:06 -Mapped "{[/moneyLog/heatLog/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.HeatLogController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 14:43:06 -Mapped "{[/moneyLog/waterLog/add],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.WaterLogController.add()
2019-04-03 14:43:06 -Mapped "{[/moneyLog/waterLog/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.WaterLogController.remove(java.lang.Long)
2019-04-03 14:43:06 -Mapped "{[/moneyLog/waterLog/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.WaterLogController.remove(java.lang.Long[])
2019-04-03 14:43:06 -Mapped "{[/moneyLog/waterLog/update]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.WaterLogController.update(com.bootdo.moneyLog.domain.WaterLogDO)
2019-04-03 14:43:06 -Mapped "{[/moneyLog/waterLog/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.moneyLog.controller.WaterLogController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 14:43:06 -Mapped "{[/moneyLog/waterLog/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.WaterLogController.save(com.bootdo.moneyLog.domain.WaterLogDO)
2019-04-03 14:43:06 -Mapped "{[/moneyLog/waterLog],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.WaterLogController.WaterLog()
2019-04-03 14:43:06 -Mapped "{[/moneyLog/waterLog/exprotWaterLog],methods=[GET]}" onto public void com.bootdo.moneyLog.controller.WaterLogController.exprotWaterLog(com.bootdo.moneyLog.vo.WaterLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-03 14:43:06 -Mapped "{[/moneyLog/waterLog/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.WaterLogController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 14:43:06 -Mapped "{[/oa/notify/add],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.add()
2019-04-03 14:43:06 -Mapped "{[/oa/notify/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.remove(java.lang.Long)
2019-04-03 14:43:06 -Mapped "{[/oa/notify/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.remove(java.lang.Long[])
2019-04-03 14:43:06 -Mapped "{[/oa/notify/update]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.update(com.bootdo.oa.domain.NotifyDO)
2019-04-03 14:43:06 -Mapped "{[/oa/notify/read/{id}],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.read(java.lang.Long,org.springframework.ui.Model)
2019-04-03 14:43:06 -Mapped "{[/oa/notify/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.oa.controller.NotifyController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 14:43:06 -Mapped "{[/oa/notify/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.save(com.bootdo.oa.domain.NotifyDO)
2019-04-03 14:43:06 -Mapped "{[/oa/notify/message],methods=[GET]}" onto com.bootdo.common.utils.PageUtils com.bootdo.oa.controller.NotifyController.message()
2019-04-03 14:43:06 -Mapped "{[/oa/notify],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.oaNotify()
2019-04-03 14:43:06 -Mapped "{[/oa/notify/selfList],methods=[GET]}" onto com.bootdo.common.utils.PageUtils com.bootdo.oa.controller.NotifyController.selfList(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 14:43:06 -Mapped "{[/oa/notify/selfNotify],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.selefNotify()
2019-04-03 14:43:06 -Mapped "{[/oa/notify/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 14:43:06 -Mapped "{[/print/print/add],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.add()
2019-04-03 14:43:06 -Mapped "{[/print/print/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.print.controller.PrintController.remove(java.lang.Long)
2019-04-03 14:43:06 -Mapped "{[/print/print/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.print.controller.PrintController.remove(java.lang.Long[])
2019-04-03 14:43:06 -Mapped "{[/print/print/update]}" onto public com.bootdo.common.utils.R com.bootdo.print.controller.PrintController.update(com.bootdo.print.domain.PrintDO)
2019-04-03 14:43:06 -Mapped "{[/print/print/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.print.controller.PrintController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 14:43:06 -Mapped "{[/print/print/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.print.controller.PrintController.save(java.lang.String,com.bootdo.print.domain.PrintDO)
2019-04-03 14:43:06 -Mapped "{[/print/print/printEdit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.printEdit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 14:43:06 -Mapped "{[/print/print/exprotPrint],methods=[GET]}" onto public void com.bootdo.print.controller.PrintController.exprotPrint(com.bootdo.print.vo.PrintVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-03 14:43:06 -Mapped "{[/print/print],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.Print()
2019-04-03 14:43:06 -Mapped "{[/print/print/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 14:43:06 -Mapped "{[/system/sysDept/add/{pId}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.add(java.lang.Long,org.springframework.ui.Model)
2019-04-03 14:43:06 -Mapped "{[/system/sysDept/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.remove(java.lang.Long)
2019-04-03 14:43:06 -Mapped "{[/system/sysDept/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.remove(java.lang.Long[])
2019-04-03 14:43:06 -Mapped "{[/system/sysDept/update]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.update(com.bootdo.system.domain.DeptDO)
2019-04-03 14:43:06 -Mapped "{[/system/sysDept/list],methods=[GET]}" onto public java.util.List<com.bootdo.system.domain.DeptDO> com.bootdo.system.controller.DeptController.list()
2019-04-03 14:43:06 -Mapped "{[/system/sysDept/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.save(com.bootdo.system.domain.DeptDO)
2019-04-03 14:43:06 -Mapped "{[/system/sysDept/tree],methods=[GET]}" onto public com.bootdo.common.domain.Tree<com.bootdo.system.domain.DeptDO> com.bootdo.system.controller.DeptController.tree()
2019-04-03 14:43:06 -Mapped "{[/system/sysDept/treeView],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.treeView()
2019-04-03 14:43:06 -Mapped "{[/system/sysDept],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.dept()
2019-04-03 14:43:06 -Mapped "{[/system/sysDept/edit/{deptId}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 14:43:06 -Mapped "{[/index],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.index(org.springframework.ui.Model)
2019-04-03 14:43:06 -Mapped "{[/main],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.main()
2019-04-03 14:43:06 -Mapped "{[/logout],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.logout()
2019-04-03 14:43:06 -Mapped "{[/ || ],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.welcome(org.springframework.ui.Model)
2019-04-03 14:43:06 -Mapped "{[/getVerify],methods=[GET]}" onto public void com.bootdo.system.controller.LoginController.getVerify(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-04-03 14:43:06 -Mapped "{[/login],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.LoginController.ajaxLogin(java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest)
2019-04-03 14:43:06 -Mapped "{[/login],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.login(org.springframework.ui.Model)
2019-04-03 14:43:06 -Mapped "{[/sys/menu/add/{pId}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.MenuController.add(org.springframework.ui.Model,java.lang.Long)
2019-04-03 14:43:06 -Mapped "{[/sys/menu/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.MenuController.remove(java.lang.Long)
2019-04-03 14:43:06 -Mapped "{[/sys/menu/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.MenuController.update(com.bootdo.system.domain.MenuDO)
2019-04-03 14:43:06 -Mapped "{[/sys/menu/list]}" onto java.util.List<com.bootdo.system.domain.MenuDO> com.bootdo.system.controller.MenuController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 14:43:06 -Mapped "{[/sys/menu/save],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.MenuController.save(com.bootdo.system.domain.MenuDO)
2019-04-03 14:43:06 -Mapped "{[/sys/menu/tree/{roleId}],methods=[GET]}" onto com.bootdo.common.domain.Tree<com.bootdo.system.domain.MenuDO> com.bootdo.system.controller.MenuController.tree(java.lang.Long)
2019-04-03 14:43:06 -Mapped "{[/sys/menu/tree],methods=[GET]}" onto com.bootdo.common.domain.Tree<com.bootdo.system.domain.MenuDO> com.bootdo.system.controller.MenuController.tree()
2019-04-03 14:43:06 -Mapped "{[/sys/menu],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.MenuController.menu(org.springframework.ui.Model)
2019-04-03 14:43:06 -Mapped "{[/sys/menu/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.MenuController.edit(org.springframework.ui.Model,java.lang.Long)
2019-04-03 14:43:06 -Mapped "{[/sys/role/add],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.RoleController.add()
2019-04-03 14:43:06 -Mapped "{[/sys/role/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.update(com.bootdo.system.domain.RoleDO)
2019-04-03 14:43:06 -Mapped "{[/sys/role/list],methods=[GET]}" onto java.util.List<com.bootdo.system.domain.RoleDO> com.bootdo.system.controller.RoleController.list()
2019-04-03 14:43:06 -Mapped "{[/sys/role/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.save(java.lang.Long)
2019-04-03 14:43:06 -Mapped "{[/sys/role/save],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.save(com.bootdo.system.domain.RoleDO)
2019-04-03 14:43:06 -Mapped "{[/sys/role/batchRemove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.batchRemove(java.lang.Long[])
2019-04-03 14:43:06 -Mapped "{[/sys/role],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.RoleController.role()
2019-04-03 14:43:06 -Mapped "{[/sys/role/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.RoleController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 14:43:06 -Mapped "{[/sys/online/list]}" onto public java.util.List<com.bootdo.system.domain.UserOnline> com.bootdo.system.controller.SessionController.list()
2019-04-03 14:43:06 -Mapped "{[/sys/online/sessionList]}" onto public java.util.Collection<org.apache.shiro.session.Session> com.bootdo.system.controller.SessionController.sessionList()
2019-04-03 14:43:06 -Mapped "{[/sys/online],methods=[GET]}" onto public java.lang.String com.bootdo.system.controller.SessionController.online()
2019-04-03 14:43:06 -Mapped "{[/sys/online/forceLogout/{sessionId}]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.SessionController.forceLogout(java.lang.String,org.springframework.web.servlet.mvc.support.RedirectAttributes)
2019-04-03 14:43:06 -Mapped "{[/sys/user/exit],methods=[POST]}" onto boolean com.bootdo.system.controller.UserController.exit(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 14:43:06 -Mapped "{[/sys/user/add],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.add(org.springframework.ui.Model)
2019-04-03 14:43:06 -Mapped "{[/sys/user/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.remove(java.lang.Long)
2019-04-03 14:43:06 -Mapped "{[/sys/user/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.update(com.bootdo.system.domain.UserDO)
2019-04-03 14:43:06 -Mapped "{[/sys/user/list],methods=[GET]}" onto com.bootdo.common.utils.PageUtils com.bootdo.system.controller.UserController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 14:43:06 -Mapped "{[/sys/user/save],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.save(com.bootdo.system.domain.UserDO)
2019-04-03 14:43:06 -Mapped "{[/sys/user/batchRemove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.batchRemove(java.lang.Long[])
2019-04-03 14:43:06 -Mapped "{[/sys/user/tree],methods=[GET]}" onto public com.bootdo.common.domain.Tree<com.bootdo.system.domain.DeptDO> com.bootdo.system.controller.UserController.tree()
2019-04-03 14:43:06 -Mapped "{[/sys/user],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.user(org.springframework.ui.Model)
2019-04-03 14:43:06 -Mapped "{[/sys/user/treeView],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.treeView()
2019-04-03 14:43:06 -Mapped "{[/sys/user/updatePeronal],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.updatePeronal(com.bootdo.system.domain.UserDO)
2019-04-03 14:43:06 -Mapped "{[/sys/user/resetPwd],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.resetPwd(com.bootdo.system.vo.UserVO)
2019-04-03 14:43:06 -Mapped "{[/sys/user/resetPwd/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.resetPwd(java.lang.Long,org.springframework.ui.Model)
2019-04-03 14:43:06 -Mapped "{[/sys/user/adminResetPwd],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.adminResetPwd(com.bootdo.system.vo.UserVO)
2019-04-03 14:43:06 -Mapped "{[/sys/user/personal],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.personal(org.springframework.ui.Model)
2019-04-03 14:43:06 -Mapped "{[/sys/user/uploadImg],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.uploadImg(org.springframework.web.multipart.MultipartFile,java.lang.String,javax.servlet.http.HttpServletRequest)
2019-04-03 14:43:06 -Mapped "{[/sys/user/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.edit(org.springframework.ui.Model,java.lang.Long)
2019-04-03 14:43:06 -Mapped "{[/file/downImport/{importType}],methods=[GET]}" onto public void com.bootdo.temple.controller.TempletController.downImport(javax.servlet.http.HttpServletResponse,java.lang.String)
2019-04-03 14:43:06 -Mapped "{[/water/water/add],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterController.add()
2019-04-03 14:43:06 -Mapped "{[/water/water/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterController.remove(java.lang.Long)
2019-04-03 14:43:06 -Mapped "{[/water/water/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterController.remove(java.lang.Long[])
2019-04-03 14:43:06 -Mapped "{[/water/water/update]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterController.update(com.bootdo.water.domain.WaterDO)
2019-04-03 14:43:06 -Mapped "{[/water/water/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.water.controller.WaterController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 14:43:06 -Mapped "{[/water/water/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterController.save(com.bootdo.water.domain.WaterDO)
2019-04-03 14:43:06 -Mapped "{[/water/water],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterController.Water()
2019-04-03 14:43:06 -Mapped "{[/water/water/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 14:43:06 -Mapped "{[/water/water/exprotWater],methods=[GET]}" onto public void com.bootdo.water.controller.WaterController.exprotExcel(com.bootdo.water.vo.WaterVo,javax.servlet.http.HttpServletResponse)
2019-04-03 14:43:06 -Mapped "{[/water/waterInto],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterIntoController.WaterInto()
2019-04-03 14:43:06 -Mapped "{[/water/waterInto/exprotWaterIntoExcel],methods=[GET]}" onto public void com.bootdo.water.controller.WaterIntoController.exprotExcel(com.bootdo.water.vo.WaterVo,javax.servlet.http.HttpServletResponse)
2019-04-03 14:43:06 -Mapped "{[/water/waterPrice/add],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterPriceController.add()
2019-04-03 14:43:06 -Mapped "{[/water/waterPrice/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterPriceController.remove(java.lang.Long)
2019-04-03 14:43:06 -Mapped "{[/water/waterPrice/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterPriceController.remove(java.lang.Long[])
2019-04-03 14:43:06 -Mapped "{[/water/waterPrice/update]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterPriceController.update(com.bootdo.water.domain.WaterPriceDO)
2019-04-03 14:43:06 -Mapped "{[/water/waterPrice/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.water.controller.WaterPriceController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 14:43:06 -Mapped "{[/water/waterPrice/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterPriceController.save(com.bootdo.water.domain.WaterPriceDO)
2019-04-03 14:43:06 -Mapped "{[/water/waterPrice],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterPriceController.WaterPrice()
2019-04-03 14:43:06 -Mapped "{[/water/waterPrice/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterPriceController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 14:43:06 -Mapped "{[/water/waterUpLoad/createWaterExcel],methods=[POST]}" onto public java.lang.String com.bootdo.water.controller.WaterUpLoadController.createWaterExcel(com.bootdo.water.domain.WaterDO) throws java.lang.Exception
2019-04-03 14:43:06 -Mapped "{[/water/waterUpLoad/exprotWaterExcel],methods=[GET]}" onto public void com.bootdo.water.controller.WaterUpLoadController.exprotWaterExcel(com.bootdo.water.vo.WaterVo,javax.servlet.http.HttpServletResponse)
2019-04-03 14:43:06 -Mapped "{[/water/waterUpLoad/importWaterExcel]}" onto public java.lang.String com.bootdo.water.controller.WaterUpLoadController.importWaterExcel(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)
2019-04-03 14:43:06 -Mapped "{[/water/waterUpLoad],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterUpLoadController.WaterUpLoad()
2019-04-03 14:43:06 -Mapped "{[/v2/api-docs],methods=[GET],produces=[application/json || application/hal+json]}" onto public org.springframework.http.ResponseEntity<springfox.documentation.spring.web.json.Json> springfox.documentation.swagger2.web.Swagger2Controller.getDocumentation(java.lang.String,javax.servlet.http.HttpServletRequest)
2019-04-03 14:43:06 -Mapped "{[/swagger-resources/configuration/ui]}" onto org.springframework.http.ResponseEntity<springfox.documentation.swagger.web.UiConfiguration> springfox.documentation.swagger.web.ApiResourceController.uiConfiguration()
2019-04-03 14:43:06 -Mapped "{[/swagger-resources]}" onto org.springframework.http.ResponseEntity<java.util.List<springfox.documentation.swagger.web.SwaggerResource>> springfox.documentation.swagger.web.ApiResourceController.swaggerResources()
2019-04-03 14:43:06 -Mapped "{[/swagger-resources/configuration/security]}" onto org.springframework.http.ResponseEntity<springfox.documentation.swagger.web.SecurityConfiguration> springfox.documentation.swagger.web.ApiResourceController.securityConfiguration()
2019-04-03 14:43:10 -Initializing ExecutorService  'messageBrokerTaskScheduler'
2019-04-03 14:43:15 -Mapped URL path [/endpointChat/**] onto handler of type [class org.springframework.web.socket.sockjs.support.SockJsHttpRequestHandler]
2019-04-03 14:43:16 -Initializing ExecutorService  'brokerChannelExecutor'
2019-04-03 14:43:17 -Mapped URL path [/**/favicon.ico] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-04-03 14:43:17 -Looking for @ControllerAdvice: org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@6fdbe764: startup date [Wed Apr 03 14:42:49 CST 2019]; root of context hierarchy
2019-04-03 14:43:17 -Mapped URL path [/webjars/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-04-03 14:43:17 -Mapped URL path [/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-04-03 14:43:17 -Mapped URL path [/files/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-04-03 14:43:17 -Detected @ExceptionHandler methods in BDExceptionHandler
2019-04-03 14:43:17 -[THYMELEAF][main] Template Mode 'LEGACYHTML5' is deprecated. Using Template Mode 'HTML' instead.
2019-04-03 14:43:20 -Registering beans for JMX exposure on startup
2019-04-03 14:43:20 -Bean with name 'dataSource' has been autodetected for JMX exposure
2019-04-03 14:43:20 -Located MBean 'dataSource': registering with JMX server as MBean [com.alibaba.druid.pool:name=dataSource,type=DruidDataSource]
2019-04-03 14:43:20 -Starting beans in phase 2147483647
2019-04-03 14:43:20 -Context refreshed
2019-04-03 14:43:20 -Found 1 custom documentation plugin(s)
2019-04-03 14:43:20 -Scanning for api listing references
2019-04-03 14:43:22 -Generating unique operation named: exprotElecLogUsingGET_1
2019-04-03 14:43:22 -Generating unique operation named: getCountDUsingPOST_1
2019-04-03 14:43:22 -Generating unique operation named: exprotElecLogUsingGET_2
2019-04-03 14:43:22 -Generating unique operation named: getCountDUsingPOST_2
2019-04-03 14:43:22 -Generating unique operation named: exprotElecLogUsingGET_3
2019-04-03 14:43:22 -Generating unique operation named: getCountDUsingPOST_3
2019-04-03 14:43:22 -Generating unique operation named: removeUsingPOST_1
2019-04-03 14:43:23 -Generating unique operation named: addUsingGET_1
2019-04-03 14:43:23 -Generating unique operation named: editUsingGET_1
2019-04-03 14:43:23 -Generating unique operation named: listUsingGET_1
2019-04-03 14:43:23 -Generating unique operation named: removeUsingPOST_2
2019-04-03 14:43:23 -Generating unique operation named: removeUsingPOST_3
2019-04-03 14:43:23 -Generating unique operation named: saveUsingPOST_1
2019-04-03 14:43:23 -Generating unique operation named: updateUsingGET_1
2019-04-03 14:43:23 -Generating unique operation named: updateUsingHEAD_1
2019-04-03 14:43:23 -Generating unique operation named: updateUsingPOST_1
2019-04-03 14:43:23 -Generating unique operation named: updateUsingPUT_1
2019-04-03 14:43:23 -Generating unique operation named: updateUsingPATCH_1
2019-04-03 14:43:23 -Generating unique operation named: updateUsingDELETE_1
2019-04-03 14:43:23 -Generating unique operation named: updateUsingOPTIONS_1
2019-04-03 14:43:23 -Generating unique operation named: updateUsingTRACE_1
2019-04-03 14:43:23 -Generating unique operation named: addUsingGET_2
2019-04-03 14:43:23 -Generating unique operation named: editUsingGET_2
2019-04-03 14:43:23 -Generating unique operation named: listUsingGET_2
2019-04-03 14:43:23 -Generating unique operation named: removeUsingPOST_4
2019-04-03 14:43:23 -Generating unique operation named: removeUsingPOST_5
2019-04-03 14:43:23 -Generating unique operation named: saveUsingPOST_2
2019-04-03 14:43:23 -Generating unique operation named: updateUsingPOST_2
2019-04-03 14:43:23 -Generating unique operation named: exprotExcelUsingGET_1
2019-04-03 14:43:23 -Generating unique operation named: addUsingGET_3
2019-04-03 14:43:23 -Generating unique operation named: editUsingGET_3
2019-04-03 14:43:23 -Generating unique operation named: exprotElecLogUsingGET_4
2019-04-03 14:43:23 -Generating unique operation named: listUsingGET_3
2019-04-03 14:43:23 -Generating unique operation named: removeUsingPOST_6
2019-04-03 14:43:23 -Generating unique operation named: removeUsingPOST_7
2019-04-03 14:43:23 -Generating unique operation named: saveUsingPOST_3
2019-04-03 14:43:23 -Generating unique operation named: updateUsingGET_2
2019-04-03 14:43:23 -Generating unique operation named: updateUsingHEAD_2
2019-04-03 14:43:23 -Generating unique operation named: updateUsingPOST_3
2019-04-03 14:43:23 -Generating unique operation named: updateUsingPUT_2
2019-04-03 14:43:23 -Generating unique operation named: updateUsingPATCH_2
2019-04-03 14:43:23 -Generating unique operation named: updateUsingDELETE_2
2019-04-03 14:43:23 -Generating unique operation named: updateUsingOPTIONS_2
2019-04-03 14:43:23 -Generating unique operation named: updateUsingTRACE_2
2019-04-03 14:43:23 -Generating unique operation named: addUsingGET_4
2019-04-03 14:43:23 -Generating unique operation named: editUsingGET_4
2019-04-03 14:43:23 -Generating unique operation named: listUsingGET_4
2019-04-03 14:43:23 -Generating unique operation named: removeUsingPOST_8
2019-04-03 14:43:23 -Generating unique operation named: removeUsingPOST_9
2019-04-03 14:43:23 -Generating unique operation named: saveUsingPOST_4
2019-04-03 14:43:23 -Generating unique operation named: updateUsingGET_3
2019-04-03 14:43:23 -Generating unique operation named: updateUsingHEAD_3
2019-04-03 14:43:23 -Generating unique operation named: updateUsingPOST_4
2019-04-03 14:43:23 -Generating unique operation named: updateUsingPUT_3
2019-04-03 14:43:23 -Generating unique operation named: updateUsingPATCH_3
2019-04-03 14:43:23 -Generating unique operation named: updateUsingDELETE_3
2019-04-03 14:43:23 -Generating unique operation named: updateUsingOPTIONS_3
2019-04-03 14:43:23 -Generating unique operation named: updateUsingTRACE_3
2019-04-03 14:43:23 -Generating unique operation named: ElecUsingGET_1
2019-04-03 14:43:23 -Generating unique operation named: addUsingGET_5
2019-04-03 14:43:23 -Generating unique operation named: editUsingGET_5
2019-04-03 14:43:23 -Generating unique operation named: listUsingGET_5
2019-04-03 14:43:23 -Generating unique operation named: removeUsingPOST_10
2019-04-03 14:43:23 -Generating unique operation named: removeUsingPOST_11
2019-04-03 14:43:23 -Generating unique operation named: saveUsingPOST_5
2019-04-03 14:43:23 -Generating unique operation named: updateUsingGET_4
2019-04-03 14:43:23 -Generating unique operation named: updateUsingHEAD_4
2019-04-03 14:43:23 -Generating unique operation named: updateUsingPOST_5
2019-04-03 14:43:23 -Generating unique operation named: updateUsingPUT_4
2019-04-03 14:43:23 -Generating unique operation named: updateUsingPATCH_4
2019-04-03 14:43:23 -Generating unique operation named: updateUsingDELETE_4
2019-04-03 14:43:23 -Generating unique operation named: updateUsingOPTIONS_4
2019-04-03 14:43:23 -Generating unique operation named: updateUsingTRACE_4
2019-04-03 14:43:23 -Generating unique operation named: editUsingGET_6
2019-04-03 14:43:23 -Generating unique operation named: listUsingGET_6
2019-04-03 14:43:23 -Generating unique operation named: updateUsingPOST_6
2019-04-03 14:43:23 -Generating unique operation named: addUsingGET_6
2019-04-03 14:43:23 -Generating unique operation named: editUsingGET_7
2019-04-03 14:43:23 -Generating unique operation named: exprotExcelUsingGET_2
2019-04-03 14:43:23 -Generating unique operation named: listUsingGET_7
2019-04-03 14:43:23 -Generating unique operation named: removeUsingPOST_12
2019-04-03 14:43:23 -Generating unique operation named: removeUsingPOST_13
2019-04-03 14:43:23 -Generating unique operation named: saveUsingPOST_6
2019-04-03 14:43:23 -Generating unique operation named: updateUsingGET_5
2019-04-03 14:43:23 -Generating unique operation named: updateUsingHEAD_5
2019-04-03 14:43:23 -Generating unique operation named: updateUsingPOST_7
2019-04-03 14:43:23 -Generating unique operation named: updateUsingPUT_5
2019-04-03 14:43:23 -Generating unique operation named: updateUsingPATCH_5
2019-04-03 14:43:23 -Generating unique operation named: updateUsingDELETE_5
2019-04-03 14:43:23 -Generating unique operation named: updateUsingOPTIONS_5
2019-04-03 14:43:23 -Generating unique operation named: updateUsingTRACE_5
2019-04-03 14:43:23 -Generating unique operation named: exprotExcelUsingGET_3
2019-04-03 14:43:23 -Generating unique operation named: addUsingGET_7
2019-04-03 14:43:23 -Generating unique operation named: editUsingGET_8
2019-04-03 14:43:23 -Generating unique operation named: listUsingGET_8
2019-04-03 14:43:23 -Generating unique operation named: removeUsingPOST_14
2019-04-03 14:43:23 -Generating unique operation named: removeUsingPOST_15
2019-04-03 14:43:23 -Generating unique operation named: saveUsingPOST_7
2019-04-03 14:43:23 -Generating unique operation named: updateUsingGET_6
2019-04-03 14:43:24 -Generating unique operation named: updateUsingHEAD_6
2019-04-03 14:43:24 -Generating unique operation named: updateUsingPOST_8
2019-04-03 14:43:24 -Generating unique operation named: updateUsingPUT_6
2019-04-03 14:43:24 -Generating unique operation named: updateUsingPATCH_6
2019-04-03 14:43:24 -Generating unique operation named: updateUsingDELETE_6
2019-04-03 14:43:24 -Generating unique operation named: updateUsingOPTIONS_6
2019-04-03 14:43:24 -Generating unique operation named: updateUsingTRACE_6
2019-04-03 14:43:24 -Generating unique operation named: addUsingGET_8
2019-04-03 14:43:24 -Generating unique operation named: editUsingGET_9
2019-04-03 14:43:24 -Generating unique operation named: listUsingGET_9
2019-04-03 14:43:24 -Generating unique operation named: removeUsingPOST_16
2019-04-03 14:43:24 -Generating unique operation named: removeUsingPOST_17
2019-04-03 14:43:24 -Generating unique operation named: saveUsingPOST_8
2019-04-03 14:43:24 -Generating unique operation named: updateUsingGET_7
2019-04-03 14:43:24 -Generating unique operation named: updateUsingHEAD_7
2019-04-03 14:43:24 -Generating unique operation named: updateUsingPOST_9
2019-04-03 14:43:24 -Generating unique operation named: updateUsingPUT_7
2019-04-03 14:43:24 -Generating unique operation named: updateUsingPATCH_7
2019-04-03 14:43:24 -Generating unique operation named: updateUsingDELETE_7
2019-04-03 14:43:24 -Generating unique operation named: updateUsingOPTIONS_7
2019-04-03 14:43:24 -Generating unique operation named: updateUsingTRACE_7
2019-04-03 14:43:24 -Generating unique operation named: addUsingGET_9
2019-04-03 14:43:24 -Generating unique operation named: editUsingGET_10
2019-04-03 14:43:24 -Generating unique operation named: infoUsingGET_1
2019-04-03 14:43:24 -Generating unique operation named: infoUsingHEAD_1
2019-04-03 14:43:24 -Generating unique operation named: infoUsingPOST_1
2019-04-03 14:43:24 -Generating unique operation named: infoUsingPUT_1
2019-04-03 14:43:24 -Generating unique operation named: infoUsingPATCH_1
2019-04-03 14:43:24 -Generating unique operation named: infoUsingDELETE_1
2019-04-03 14:43:24 -Generating unique operation named: infoUsingOPTIONS_1
2019-04-03 14:43:24 -Generating unique operation named: infoUsingTRACE_1
2019-04-03 14:43:24 -Generating unique operation named: listUsingGET_10
2019-04-03 14:43:24 -Generating unique operation named: removeUsingPOST_18
2019-04-03 14:43:24 -Generating unique operation named: removeUsingPOST_19
2019-04-03 14:43:24 -Generating unique operation named: saveUsingPOST_9
2019-04-03 14:43:24 -Generating unique operation named: updateUsingPOST_10
2019-04-03 14:43:24 -Generating unique operation named: listUsingGET_11
2019-04-03 14:43:24 -Generating unique operation named: removeUsingPOST_20
2019-04-03 14:43:24 -Generating unique operation named: welcomeUsingGET_1
2019-04-03 14:43:24 -Generating unique operation named: addUsingGET_10
2019-04-03 14:43:24 -Generating unique operation named: editUsingGET_11
2019-04-03 14:43:24 -Generating unique operation named: listUsingGET_12
2019-04-03 14:43:24 -Generating unique operation named: removeUsingPOST_21
2019-04-03 14:43:24 -Generating unique operation named: saveUsingPOST_10
2019-04-03 14:43:24 -Generating unique operation named: treeUsingGET_1
2019-04-03 14:43:24 -Generating unique operation named: treeUsingGET_2
2019-04-03 14:43:24 -Generating unique operation named: updateUsingPOST_11
2019-04-03 14:43:24 -Generating unique operation named: addUsingGET_11
2019-04-03 14:43:24 -Generating unique operation named: editUsingGET_12
2019-04-03 14:43:24 -Generating unique operation named: listUsingGET_13
2019-04-03 14:43:24 -Generating unique operation named: removeUsingPOST_22
2019-04-03 14:43:24 -Generating unique operation named: removeUsingPOST_23
2019-04-03 14:43:24 -Generating unique operation named: saveUsingPOST_11
2019-04-03 14:43:24 -Generating unique operation named: updateUsingGET_8
2019-04-03 14:43:24 -Generating unique operation named: updateUsingHEAD_8
2019-04-03 14:43:24 -Generating unique operation named: updateUsingPOST_12
2019-04-03 14:43:24 -Generating unique operation named: updateUsingPUT_8
2019-04-03 14:43:24 -Generating unique operation named: updateUsingPATCH_8
2019-04-03 14:43:24 -Generating unique operation named: updateUsingDELETE_8
2019-04-03 14:43:24 -Generating unique operation named: updateUsingOPTIONS_8
2019-04-03 14:43:24 -Generating unique operation named: updateUsingTRACE_8
2019-04-03 14:43:24 -Generating unique operation named: addUsingGET_12
2019-04-03 14:43:24 -Generating unique operation named: editUsingGET_13
2019-04-03 14:43:24 -Generating unique operation named: listUsingGET_14
2019-04-03 14:43:24 -Generating unique operation named: removeUsingPOST_24
2019-04-03 14:43:24 -Generating unique operation named: removeUsingPOST_25
2019-04-03 14:43:24 -Generating unique operation named: saveUsingPOST_12
2019-04-03 14:43:24 -Generating unique operation named: updateUsingGET_9
2019-04-03 14:43:24 -Generating unique operation named: updateUsingHEAD_9
2019-04-03 14:43:24 -Generating unique operation named: updateUsingPOST_13
2019-04-03 14:43:24 -Generating unique operation named: updateUsingPUT_9
2019-04-03 14:43:24 -Generating unique operation named: updateUsingPATCH_9
2019-04-03 14:43:24 -Generating unique operation named: updateUsingDELETE_9
2019-04-03 14:43:24 -Generating unique operation named: updateUsingOPTIONS_9
2019-04-03 14:43:24 -Generating unique operation named: updateUsingTRACE_9
2019-04-03 14:43:24 -Generating unique operation named: addUsingGET_13
2019-04-03 14:43:24 -Generating unique operation named: batchRemoveUsingPOST_1
2019-04-03 14:43:24 -Generating unique operation named: editUsingGET_14
2019-04-03 14:43:24 -Generating unique operation named: listUsingGET_15
2019-04-03 14:43:24 -Generating unique operation named: saveUsingPOST_13
2019-04-03 14:43:24 -Generating unique operation named: saveUsingPOST_14
2019-04-03 14:43:24 -Generating unique operation named: updateUsingPOST_14
2019-04-03 14:43:24 -Generating unique operation named: listUsingGET_16
2019-04-03 14:43:24 -Generating unique operation named: listUsingHEAD_1
2019-04-03 14:43:24 -Generating unique operation named: listUsingPOST_1
2019-04-03 14:43:24 -Generating unique operation named: listUsingPUT_1
2019-04-03 14:43:24 -Generating unique operation named: listUsingPATCH_1
2019-04-03 14:43:24 -Generating unique operation named: listUsingDELETE_1
2019-04-03 14:43:24 -Generating unique operation named: listUsingOPTIONS_1
2019-04-03 14:43:24 -Generating unique operation named: listUsingTRACE_1
2019-04-03 14:43:24 -Generating unique operation named: addUsingGET_14
2019-04-03 14:43:24 -Generating unique operation named: batchRemoveUsingPOST_2
2019-04-03 14:43:24 -Generating unique operation named: editUsingGET_15
2019-04-03 14:43:24 -Generating unique operation named: listUsingGET_17
2019-04-03 14:43:24 -Generating unique operation named: removeUsingPOST_26
2019-04-03 14:43:24 -Generating unique operation named: saveUsingPOST_15
2019-04-03 14:43:24 -Generating unique operation named: treeUsingGET_3
2019-04-03 14:43:24 -Generating unique operation named: treeViewUsingGET_1
2019-04-03 14:43:24 -Generating unique operation named: updateUsingPOST_15
2019-04-03 14:43:24 -Generating unique operation named: addUsingGET_15
2019-04-03 14:43:24 -Generating unique operation named: editUsingGET_16
2019-04-03 14:43:24 -Generating unique operation named: exprotExcelUsingGET_4
2019-04-03 14:43:24 -Generating unique operation named: listUsingGET_18
2019-04-03 14:43:24 -Generating unique operation named: removeUsingPOST_27
2019-04-03 14:43:24 -Generating unique operation named: removeUsingPOST_28
2019-04-03 14:43:24 -Generating unique operation named: saveUsingPOST_16
2019-04-03 14:43:24 -Generating unique operation named: updateUsingGET_10
2019-04-03 14:43:24 -Generating unique operation named: updateUsingHEAD_10
2019-04-03 14:43:24 -Generating unique operation named: updateUsingPOST_16
2019-04-03 14:43:24 -Generating unique operation named: updateUsingPUT_10
2019-04-03 14:43:24 -Generating unique operation named: updateUsingPATCH_10
2019-04-03 14:43:24 -Generating unique operation named: updateUsingDELETE_10
2019-04-03 14:43:25 -Generating unique operation named: updateUsingOPTIONS_10
2019-04-03 14:43:25 -Generating unique operation named: updateUsingTRACE_10
2019-04-03 14:43:25 -Generating unique operation named: exprotExcelUsingGET_5
2019-04-03 14:43:25 -Generating unique operation named: addUsingGET_16
2019-04-03 14:43:25 -Generating unique operation named: editUsingGET_17
2019-04-03 14:43:25 -Generating unique operation named: listUsingGET_19
2019-04-03 14:43:25 -Generating unique operation named: removeUsingPOST_29
2019-04-03 14:43:25 -Generating unique operation named: removeUsingPOST_30
2019-04-03 14:43:25 -Generating unique operation named: saveUsingPOST_17
2019-04-03 14:43:25 -Generating unique operation named: updateUsingGET_11
2019-04-03 14:43:25 -Generating unique operation named: updateUsingHEAD_11
2019-04-03 14:43:25 -Generating unique operation named: updateUsingPOST_17
2019-04-03 14:43:25 -Generating unique operation named: updateUsingPUT_11
2019-04-03 14:43:25 -Generating unique operation named: updateUsingPATCH_11
2019-04-03 14:43:25 -Generating unique operation named: updateUsingDELETE_11
2019-04-03 14:43:25 -Generating unique operation named: updateUsingOPTIONS_11
2019-04-03 14:43:25 -Generating unique operation named: updateUsingTRACE_11
2019-04-03 14:43:25 -Generating unique operation named: addUsingGET_17
2019-04-03 14:43:25 -Generating unique operation named: editUsingGET_18
2019-04-03 14:43:25 -Generating unique operation named: listUsingGET_20
2019-04-03 14:43:25 -Generating unique operation named: removeUsingPOST_31
2019-04-03 14:43:25 -Generating unique operation named: removeUsingPOST_32
2019-04-03 14:43:25 -Generating unique operation named: saveUsingPOST_18
2019-04-03 14:43:25 -Generating unique operation named: updateUsingGET_12
2019-04-03 14:43:25 -Generating unique operation named: updateUsingHEAD_12
2019-04-03 14:43:25 -Generating unique operation named: updateUsingPOST_18
2019-04-03 14:43:25 -Generating unique operation named: updateUsingPUT_12
2019-04-03 14:43:25 -Generating unique operation named: updateUsingPATCH_12
2019-04-03 14:43:25 -Generating unique operation named: updateUsingDELETE_12
2019-04-03 14:43:25 -Generating unique operation named: updateUsingOPTIONS_12
2019-04-03 14:43:25 -Generating unique operation named: updateUsingTRACE_12
2019-04-03 14:43:25 -Starting Quartz Scheduler now
2019-04-03 14:43:25 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED started.
2019-04-03 14:43:25 -Starting...
2019-04-03 14:43:25 -BrokerAvailabilityEvent[available=true, SimpleBrokerMessageHandler [DefaultSubscriptionRegistry[cache[0 destination(s)], registry[0 sessions]]]]
2019-04-03 14:43:25 -Started.
2019-04-03 14:43:25 -Starting ProtocolHandler ["http-nio-8081"]
2019-04-03 14:43:25 -Using a shared selector for servlet write/read
2019-04-03 14:43:25 -Tomcat started on port(s): 8081 (http) with context path ''
2019-04-03 14:43:25 -Started BootdoApplication in 37.234 seconds (JVM running for 38.048)
2019-04-03 14:43:26 -==>  Preparing: select `id`,`cron_expression`,`method_name`,`is_concurrent`,`description`,`update_by`,`bean_class`,`create_date`,`job_status`,`job_group`,`update_date`,`create_by`,`spring_bean`,`job_name` from sys_task order by id desc 
2019-04-03 14:43:27 -==> Parameters: 
2019-04-03 14:43:27 -<==      Total: 1
2019-04-03 14:44:16 -WebSocketSession[0 current WS(0)-HttpStream(0)-HttpPoll(0), 0 total, 0 closed abnormally (0 connect failure, 0 send limit, 0 transport error)], stompSubProtocol[processed CONNECT(0)-CONNECTED(0)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], outboundChannelpool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], sockJsScheduler[pool size = 1, active threads = 1, queued tasks = 0, completed tasks = 0]
2019-04-03 14:45:28 -Initializing Spring FrameworkServlet 'dispatcherServlet'
2019-04-03 14:45:28 -FrameworkServlet 'dispatcherServlet': initialization started
2019-04-03 14:45:28 -FrameworkServlet 'dispatcherServlet': initialization completed in 236 ms
2019-04-03 14:45:30 -Enabling session validation scheduler...
2019-04-03 14:45:30 -请求地址 : http://localhost:8081/login;JSESSIONID=c6fc97a0-7be0-4e34-ae41-386af48069d7
2019-04-03 14:45:30 -HTTP METHOD : GET
2019-04-03 14:45:30 -CLASS_METHOD : com.bootdo.system.controller.LoginController.login
2019-04-03 14:45:30 -参数 : [{}]
2019-04-03 14:45:30 -耗时 : 7
2019-04-03 14:45:30 -返回值 : login
2019-04-03 14:45:32 -请求地址 : http://localhost:8081/getVerify
2019-04-03 14:45:32 -HTTP METHOD : GET
2019-04-03 14:45:32 -CLASS_METHOD : com.bootdo.system.controller.LoginController.getVerify
2019-04-03 14:45:32 -参数 : [org.apache.shiro.web.servlet.ShiroHttpServletRequest@12b219a4, org.apache.shiro.web.servlet.ShiroHttpServletResponse@8d22772]
2019-04-03 14:45:38 -4900
2019-04-03 14:45:38 -耗时 : 6173
2019-04-03 14:45:38 -返回值 : null
2019-04-03 14:45:38 -请求地址 : http://localhost:8081/login
2019-04-03 14:45:38 -HTTP METHOD : GET
2019-04-03 14:45:38 -CLASS_METHOD : com.bootdo.system.controller.LoginController.login
2019-04-03 14:45:38 -参数 : [{}]
2019-04-03 14:45:38 -耗时 : 0
2019-04-03 14:45:38 -返回值 : login
2019-04-03 14:45:43 -请求地址 : http://localhost:8081/login
2019-04-03 14:45:43 -HTTP METHOD : POST
2019-04-03 14:45:43 -CLASS_METHOD : com.bootdo.system.controller.LoginController.ajaxLogin
2019-04-03 14:45:43 -参数 : [admin, 111111, 4900, org.apache.shiro.web.servlet.ShiroHttpServletRequest@7aaed1e8]
2019-04-03 14:45:43 -==>  Preparing: select `user_id`,`username`,`name`,`password`,`dept_id`,`email`,`mobile`,`status`,`user_id_create`,`gmt_create`,`gmt_modified`,`sex`,`birth`,`pic_id`,`live_address`,`hobby`,`province`,`city`,`district` from sys_user WHERE username = ? order by user_id desc 
2019-04-03 14:45:43 -==> Parameters: admin(String)
2019-04-03 14:45:43 -<==      Total: 1
2019-04-03 14:45:43 -耗时 : 309
2019-04-03 14:45:43 -返回值 : {msg=操作成功, code=0}
2019-04-03 14:45:43 -More than one TaskExecutor bean found within the context, and none is named 'taskExecutor'. Mark one of them as primary or name it 'taskExecutor' (possibly as an alias) in order to use it for async processing: [clientInboundChannelExecutor, clientOutboundChannelExecutor, brokerChannelExecutor, messageBrokerTaskScheduler]
2019-04-03 14:45:43 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 14:45:43 -==> Parameters: 1(Long), admin(String), 登录(String), 310(Integer), com.bootdo.system.controller.LoginController.ajaxLogin()(String), null, 127.0.0.1(String), 2019-04-03 14:45:43.832(Timestamp)
2019-04-03 14:45:44 -<==    Updates: 1
2019-04-03 14:45:44 -请求地址 : http://localhost:8081/index
2019-04-03 14:45:44 -HTTP METHOD : GET
2019-04-03 14:45:44 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2019-04-03 14:45:44 -参数 : [{}]
2019-04-03 14:45:44 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2019-04-03 14:45:44 -==> Parameters: 1(Long)
2019-04-03 14:45:44 -<==      Total: 46
2019-04-03 14:45:44 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2019-04-03 14:45:44 -==> Parameters: 138(Long)
2019-04-03 14:45:44 -<==      Total: 1
2019-04-03 14:45:44 -耗时 : 523
2019-04-03 14:45:44 -返回值 : index_v1
2019-04-03 14:45:44 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 14:45:44 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 524(Integer), com.bootdo.system.controller.LoginController.index()(String), {"menus":[{"attributes":{"icon":"fa fa-money","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-money","url":"/moneyList/moneyList"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"102","parentId":"106","text":"现金缴费"},{"attributes":{"icon":"fa fa-book","url":"/moneyLog/elecLog"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"107","parentId":"106","text":"缴费记录"}],"hasChildren":true,"hasParent":false,"id":"106","parentId":"0","text":"收费管理"},{"attributes":{"icon":"fa fa-lightbulb-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/elec/elec"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"121","parentId":"103","text":"电费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"elec/elecInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"122","parentId":"103","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"elec/elecUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"123","parentId":"103","text":"电表上传"},{"attributes":{"icon":"fa fa-cc","url":"/elec/elecPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"124","parentId":"103","text":"电价管理"}],"hasChildren":true,"hasParent":false,"id":"103","parentId":"0","text":"电费管理"},{"attributes":{"icon":"fa fa-tint","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/water/water"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"117","parentId":"105","text":"水费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"water/waterInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"118","parentId":"105","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"water/waterUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"119","parentId":"105","text":"水费生成"},{"attributes":{"icon":"fa fa-cc","url":"/water/waterPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"120","parentId":"105","text":"水价管理"}],"hasChildren":true,"hasParent":false,"id":"105","parentId":"0","text":"水费管理"},{"attributes":{"icon":"fa fa-fire","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/heat/heat"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"113","parentId":"104","text":"暖费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"heat/heatInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"114","parentId":"104","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"heat/heatUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"115","parentId":"104","text":"暖费生成"},{"attributes":{"icon":"","url":"/heat/heatPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"116","parentId":"104","text":"暖价管理"}],"hasChildren":true,"hasParent":false,"id":"104","parentId":"0","text":"暖费管理"},{"attributes":{"icon":"fa fa-vcard-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-bomb","url":"/print/print"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"149","parentId":"108","text":"票据记录"}],"hasChildren":true,"hasParent":false,"id":"108","parentId":"0","text":"票据管理"},{"attributes":{"icon":"fa fa-bar-chart","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-area-chart","url":"/chart/graph_echarts.html"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","text":"百度chart"},{"attributes":{"icon":"fa fa-sun-o","url":"charts/countDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"109","parentId":"97","text":"日统计报表"},{"attributes":{"icon":"fa fa-registered","url":"charts/countMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"110","parentId":"97","text":"月统计报表"},{"attributes":{"icon":"fa fa-money","url":"charts/countOwe"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"155","parentId":"97","text":"欠费报表图"},{"attributes":{"icon":"fa fa-support","url":"charts/countYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"111","parentId":"97","text":"年统计报表"},{"attributes":{"icon":"fa fa-tachometer","url":"charts/countRun"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"112","parentId":"97","text":"走势图报表"}],"hasChildren":true,"hasParent":false,"id":"97","parentId":"0","text":"统计管理"},{"attributes":{"icon":"fa fa-bars","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-book","url":"/common/dict"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"78","parentId":"1","text":"数据字典"},{"attributes":{"icon":"fa fa-folder-open","url":"/common/sysFile"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"71","parentId":"1","text":"文件管理"}],"h(String), 127.0.0.1(String), 2019-04-03 14:45:44.92(Timestamp)
2019-04-03 14:45:45 -<==    Updates: 1
2019-04-03 14:45:45 -请求地址 : http://localhost:8081/main
2019-04-03 14:45:45 -HTTP METHOD : GET
2019-04-03 14:45:45 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 14:45:45 -参数 : []
2019-04-03 14:45:45 -耗时 : 1
2019-04-03 14:45:45 -返回值 : main
2019-04-03 14:45:46 -请求地址 : http://localhost:8081/oa/notify/message
2019-04-03 14:45:46 -HTTP METHOD : GET
2019-04-03 14:45:46 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2019-04-03 14:45:46 -参数 : []
2019-04-03 14:45:46 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2019-04-03 14:45:46 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2019-04-03 14:45:46 -<==      Total: 0
2019-04-03 14:45:46 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2019-04-03 14:45:46 -==> Parameters: 1(Long), 0(String)
2019-04-03 14:45:46 -<==      Total: 1
2019-04-03 14:45:46 -耗时 : 43
2019-04-03 14:45:46 -返回值 : com.bootdo.common.utils.PageUtils@638233f9
2019-04-03 14:45:46 -请求地址 : http://localhost:8081/main
2019-04-03 14:45:46 -HTTP METHOD : GET
2019-04-03 14:45:46 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 14:45:46 -参数 : []
2019-04-03 14:45:46 -耗时 : 3
2019-04-03 14:45:46 -返回值 : main
2019-04-03 14:46:06 -==>  Preparing: select distinct m.perms from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id = ur.role_id where ur.user_id = ? 
2019-04-03 14:46:06 -==> Parameters: 1(Long)
2019-04-03 14:46:06 -<==      Total: 90
2019-04-03 14:46:06 -请求地址 : http://localhost:8081/moneyList/moneyList
2019-04-03 14:46:06 -HTTP METHOD : GET
2019-04-03 14:46:06 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.MoneyList
2019-04-03 14:46:06 -参数 : []
2019-04-03 14:46:06 -耗时 : 0
2019-04-03 14:46:06 -返回值 : /moneyList/moneyList
2019-04-03 14:46:23 -请求地址 : http://localhost:8081/system/sysDept/treeView
2019-04-03 14:46:23 -HTTP METHOD : GET
2019-04-03 14:46:23 -CLASS_METHOD : com.bootdo.system.controller.DeptController.treeView
2019-04-03 14:46:23 -参数 : []
2019-04-03 14:46:23 -耗时 : 2
2019-04-03 14:46:23 -返回值 : system/dept/deptTree
2019-04-03 14:46:24 -请求地址 : http://localhost:8081/system/sysDept/tree
2019-04-03 14:46:24 -HTTP METHOD : GET
2019-04-03 14:46:24 -CLASS_METHOD : com.bootdo.system.controller.DeptController.tree
2019-04-03 14:46:24 -参数 : []
2019-04-03 14:46:24 -==>  Preparing: select `dept_id`,`parent_id`,`name`,`order_num`,`del_flag` from sys_dept order by dept_id desc 
2019-04-03 14:46:24 -==> Parameters: 
2019-04-03 14:46:24 -<==      Total: 3
2019-04-03 14:46:24 -耗时 : 82
2019-04-03 14:46:24 -返回值 : {"checked":false,"children":[{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"3","parentId":"1","state":{"opened":true},"text":"牙星"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"2","parentId":"1","state":{"opened":true},"text":"五九"}],"hasChildren":true,"hasParent":false,"id":"1","parentId":"0","state":{"opened":true},"text":"总公司"}
2019-04-03 14:46:31 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUserName
2019-04-03 14:46:31 -HTTP METHOD : POST
2019-04-03 14:46:31 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.getAllUserName
2019-04-03 14:46:31 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@387dd7dc]
2019-04-03 14:46:32 -==>  Preparing: select DISTINCT user_name from( select user_name from elec WHERE create_time = ? UNION ALL select user_name from heat WHERE create_time = ? UNION ALL select user_name from water WHERE create_time = ? )username 
2019-04-03 14:46:32 -==> Parameters: 2019-02(String), 2019-02(String), 2019-02(String)
2019-04-03 14:46:32 -<==      Total: 6
2019-04-03 14:46:32 -耗时 : 295
2019-04-03 14:46:32 -返回值 : [com.bootdo.moneyList.damain.MoneyListDO@3df81316, com.bootdo.moneyList.damain.MoneyListDO@54ae9ddc, com.bootdo.moneyList.damain.MoneyListDO@44b348ba, com.bootdo.moneyList.damain.MoneyListDO@3eadcb36, com.bootdo.moneyList.damain.MoneyListDO@43301f56, com.bootdo.moneyList.damain.MoneyListDO@63d02a91]
2019-04-03 14:46:32 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUserName
2019-04-03 14:46:32 -HTTP METHOD : POST
2019-04-03 14:46:32 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.getAllUserName
2019-04-03 14:46:32 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@153d1b7d]
2019-04-03 14:46:32 -==>  Preparing: select DISTINCT user_name from( select user_name from elec WHERE create_time = ? UNION ALL select user_name from heat WHERE create_time = ? UNION ALL select user_name from water WHERE create_time = ? )username 
2019-04-03 14:46:32 -==> Parameters: 2019-02(String), 2019-02(String), 2019-02(String)
2019-04-03 14:46:32 -<==      Total: 6
2019-04-03 14:46:32 -耗时 : 5
2019-04-03 14:46:32 -返回值 : [com.bootdo.moneyList.damain.MoneyListDO@161dfa7d, com.bootdo.moneyList.damain.MoneyListDO@e4d3fb2, com.bootdo.moneyList.damain.MoneyListDO@5f0cb2c9, com.bootdo.moneyList.damain.MoneyListDO@34241d1, com.bootdo.moneyList.damain.MoneyListDO@7a758dd6, com.bootdo.moneyList.damain.MoneyListDO@1da29d85]
2019-04-03 14:46:46 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUserName
2019-04-03 14:46:46 -HTTP METHOD : POST
2019-04-03 14:46:46 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.getAllUserName
2019-04-03 14:46:46 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@60982f80]
2019-04-03 14:46:46 -==>  Preparing: select DISTINCT user_name from( select user_name from elec WHERE create_time = ? and user_name like CONCAT(CONCAT('%',?,'%')) UNION ALL select user_name from heat WHERE create_time = ? and user_name like CONCAT(CONCAT('%',?,'%')) UNION ALL select user_name from water WHERE create_time = ? and user_name like CONCAT(CONCAT('%',?,'%')) )username 
2019-04-03 14:46:46 -==> Parameters: 2019-02(String), 姜(String), 2019-02(String), 姜(String), 2019-02(String), 姜(String)
2019-04-03 14:46:46 -<==      Total: 1
2019-04-03 14:46:46 -耗时 : 86
2019-04-03 14:46:46 -返回值 : [com.bootdo.moneyList.damain.MoneyListDO@38e2db3c]
2019-04-03 14:46:48 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUser
2019-04-03 14:46:48 -HTTP METHOD : POST
2019-04-03 14:46:48 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.queryAllUser
2019-04-03 14:46:48 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@7a72d7fc]
2019-04-03 14:46:48 -==>  Preparing: select COUNT(*) number, user_id, user_name, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, elec_type usertype, elec_price userprice, elec_amount userarea, elec_cost usercost, elec_Sum usersum from elec WHERE create_time = ? UNION ALL select COUNT(*) number, user_id, user_name, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, heat_type usertype, heat_price userprice, heat_area userarea, heat_cost usercost, heat_Sum usersum from heat WHERE create_time = ? UNION ALL select COUNT(*) number, user_id, user_name, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, water_type usertype, water_price userprice, water_price userarea, water_price usercost, water_Sum usersum from water WHERE create_time = ? 
2019-04-03 14:46:48 -==> Parameters: 2019-02(String), 2019-02(String), 2019-02(String)
2019-04-03 14:46:48 -<==      Total: 3
2019-04-03 14:46:48 -耗时 : 57
2019-04-03 14:46:48 -返回值 : [com.bootdo.moneyList.damain.MoneyListDO@428aa961, com.bootdo.moneyList.damain.MoneyListDO@1972f793, com.bootdo.moneyList.damain.MoneyListDO@218be8dc]
2019-04-03 14:46:59 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUserName
2019-04-03 14:46:59 -HTTP METHOD : POST
2019-04-03 14:46:59 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.getAllUserName
2019-04-03 14:46:59 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@4db60539]
2019-04-03 14:46:59 -==>  Preparing: select DISTINCT user_name from( select user_name from elec WHERE create_time = ? UNION ALL select user_name from heat WHERE create_time = ? UNION ALL select user_name from water WHERE create_time = ? )username 
2019-04-03 14:46:59 -==> Parameters: 2019-02(String), 2019-02(String), 2019-02(String)
2019-04-03 14:46:59 -<==      Total: 6
2019-04-03 14:46:59 -耗时 : 73
2019-04-03 14:46:59 -返回值 : [com.bootdo.moneyList.damain.MoneyListDO@37451aac, com.bootdo.moneyList.damain.MoneyListDO@4a274eb0, com.bootdo.moneyList.damain.MoneyListDO@3eef9ccf, com.bootdo.moneyList.damain.MoneyListDO@1153b190, com.bootdo.moneyList.damain.MoneyListDO@edc496c, com.bootdo.moneyList.damain.MoneyListDO@7e7ec4c9]
2019-04-03 14:47:04 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUser
2019-04-03 14:47:04 -HTTP METHOD : POST
2019-04-03 14:47:04 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.queryAllUser
2019-04-03 14:47:04 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@681dc95d]
2019-04-03 14:47:04 -==>  Preparing: select COUNT(*) number, user_id, user_name, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, elec_type usertype, elec_price userprice, elec_amount userarea, elec_cost usercost, elec_Sum usersum from elec WHERE create_time = ? UNION ALL select COUNT(*) number, user_id, user_name, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, heat_type usertype, heat_price userprice, heat_area userarea, heat_cost usercost, heat_Sum usersum from heat WHERE create_time = ? UNION ALL select COUNT(*) number, user_id, user_name, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, water_type usertype, water_price userprice, water_price userarea, water_price usercost, water_Sum usersum from water WHERE create_time = ? 
2019-04-03 14:47:04 -==> Parameters: 2019-02(String), 2019-02(String), 2019-02(String)
2019-04-03 14:47:04 -<==      Total: 3
2019-04-03 14:47:04 -耗时 : 12
2019-04-03 14:47:04 -返回值 : [com.bootdo.moneyList.damain.MoneyListDO@7e535a87, com.bootdo.moneyList.damain.MoneyListDO@5023854b, com.bootdo.moneyList.damain.MoneyListDO@75232abe]
2019-04-03 14:47:05 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUserName
2019-04-03 14:47:05 -HTTP METHOD : POST
2019-04-03 14:47:05 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.getAllUserName
2019-04-03 14:47:05 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@4d6029d9]
2019-04-03 14:47:05 -==>  Preparing: select DISTINCT user_name from( select user_name from elec WHERE create_time = ? and user_name like CONCAT(CONCAT('%',?,'%')) UNION ALL select user_name from heat WHERE create_time = ? and user_name like CONCAT(CONCAT('%',?,'%')) UNION ALL select user_name from water WHERE create_time = ? and user_name like CONCAT(CONCAT('%',?,'%')) )username 
2019-04-03 14:47:05 -==> Parameters: 2019-02(String), 姜海龙(String), 2019-02(String), 姜海龙(String), 2019-02(String), 姜海龙(String)
2019-04-03 14:47:05 -<==      Total: 1
2019-04-03 14:47:05 -耗时 : 4
2019-04-03 14:47:05 -返回值 : [com.bootdo.moneyList.damain.MoneyListDO@5ec30893]
2019-04-03 14:47:08 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUserName
2019-04-03 14:47:08 -HTTP METHOD : POST
2019-04-03 14:47:08 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.getAllUserName
2019-04-03 14:47:08 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@2ed5a879]
2019-04-03 14:47:08 -==>  Preparing: select DISTINCT user_name from( select user_name from elec WHERE create_time = ? UNION ALL select user_name from heat WHERE create_time = ? UNION ALL select user_name from water WHERE create_time = ? )username 
2019-04-03 14:47:08 -==> Parameters: 2019-02(String), 2019-02(String), 2019-02(String)
2019-04-03 14:47:08 -<==      Total: 6
2019-04-03 14:47:08 -耗时 : 9
2019-04-03 14:47:08 -返回值 : [com.bootdo.moneyList.damain.MoneyListDO@5560709c, com.bootdo.moneyList.damain.MoneyListDO@5f67697c, com.bootdo.moneyList.damain.MoneyListDO@53dd53f3, com.bootdo.moneyList.damain.MoneyListDO@2fcbd0b1, com.bootdo.moneyList.damain.MoneyListDO@7979b144, com.bootdo.moneyList.damain.MoneyListDO@1db10b9e]
2019-04-03 14:47:09 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUser
2019-04-03 14:47:09 -HTTP METHOD : POST
2019-04-03 14:47:09 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.queryAllUser
2019-04-03 14:47:09 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@36df7ffa]
2019-04-03 14:47:09 -==>  Preparing: select COUNT(*) number, user_id, user_name, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, elec_type usertype, elec_price userprice, elec_amount userarea, elec_cost usercost, elec_Sum usersum from elec WHERE create_time = ? UNION ALL select COUNT(*) number, user_id, user_name, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, heat_type usertype, heat_price userprice, heat_area userarea, heat_cost usercost, heat_Sum usersum from heat WHERE create_time = ? UNION ALL select COUNT(*) number, user_id, user_name, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, water_type usertype, water_price userprice, water_price userarea, water_price usercost, water_Sum usersum from water WHERE create_time = ? 
2019-04-03 14:47:09 -==> Parameters: 2019-02(String), 2019-02(String), 2019-02(String)
2019-04-03 14:47:09 -<==      Total: 3
2019-04-03 14:47:09 -耗时 : 5
2019-04-03 14:47:09 -返回值 : [com.bootdo.moneyList.damain.MoneyListDO@6955b8f8, com.bootdo.moneyList.damain.MoneyListDO@5997a93e, com.bootdo.moneyList.damain.MoneyListDO@14fa2d59]
2019-04-03 14:47:13 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUserName
2019-04-03 14:47:13 -HTTP METHOD : POST
2019-04-03 14:47:13 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.getAllUserName
2019-04-03 14:47:13 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@7e719fcc]
2019-04-03 14:47:13 -==>  Preparing: select DISTINCT user_name from( select user_name from elec WHERE create_time = ? and user_name like CONCAT(CONCAT('%',?,'%')) UNION ALL select user_name from heat WHERE create_time = ? and user_name like CONCAT(CONCAT('%',?,'%')) UNION ALL select user_name from water WHERE create_time = ? and user_name like CONCAT(CONCAT('%',?,'%')) )username 
2019-04-03 14:47:13 -==> Parameters: 2019-02(String), 李文英(String), 2019-02(String), 李文英(String), 2019-02(String), 李文英(String)
2019-04-03 14:47:13 -<==      Total: 1
2019-04-03 14:47:13 -耗时 : 4
2019-04-03 14:47:13 -返回值 : [com.bootdo.moneyList.damain.MoneyListDO@7ce05979]
2019-04-03 14:47:16 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUserName
2019-04-03 14:47:16 -HTTP METHOD : POST
2019-04-03 14:47:16 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.getAllUserName
2019-04-03 14:47:16 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@6f65ce8]
2019-04-03 14:47:16 -==>  Preparing: select DISTINCT user_name from( select user_name from elec WHERE create_time = ? UNION ALL select user_name from heat WHERE create_time = ? UNION ALL select user_name from water WHERE create_time = ? )username 
2019-04-03 14:47:16 -==> Parameters: 2019-02(String), 2019-02(String), 2019-02(String)
2019-04-03 14:47:16 -<==      Total: 6
2019-04-03 14:47:16 -耗时 : 3
2019-04-03 14:47:16 -返回值 : [com.bootdo.moneyList.damain.MoneyListDO@5a6aac57, com.bootdo.moneyList.damain.MoneyListDO@31f37e37, com.bootdo.moneyList.damain.MoneyListDO@55675fd, com.bootdo.moneyList.damain.MoneyListDO@3932dd0a, com.bootdo.moneyList.damain.MoneyListDO@36b5d66f, com.bootdo.moneyList.damain.MoneyListDO@1c1d1448]
2019-04-03 14:47:18 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUser
2019-04-03 14:47:18 -HTTP METHOD : POST
2019-04-03 14:47:18 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.queryAllUser
2019-04-03 14:47:18 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@179245fb]
2019-04-03 14:47:18 -==>  Preparing: select COUNT(*) number, user_id, user_name, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, elec_type usertype, elec_price userprice, elec_amount userarea, elec_cost usercost, elec_Sum usersum from elec WHERE create_time = ? UNION ALL select COUNT(*) number, user_id, user_name, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, heat_type usertype, heat_price userprice, heat_area userarea, heat_cost usercost, heat_Sum usersum from heat WHERE create_time = ? UNION ALL select COUNT(*) number, user_id, user_name, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, water_type usertype, water_price userprice, water_price userarea, water_price usercost, water_Sum usersum from water WHERE create_time = ? 
2019-04-03 14:47:18 -==> Parameters: 2019-02(String), 2019-02(String), 2019-02(String)
2019-04-03 14:47:18 -<==      Total: 3
2019-04-03 14:47:18 -耗时 : 6
2019-04-03 14:47:18 -返回值 : [com.bootdo.moneyList.damain.MoneyListDO@2b4963c1, com.bootdo.moneyList.damain.MoneyListDO@3f78461f, com.bootdo.moneyList.damain.MoneyListDO@3ac07196]
2019-04-03 14:47:25 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUserName
2019-04-03 14:47:25 -HTTP METHOD : POST
2019-04-03 14:47:25 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.getAllUserName
2019-04-03 14:47:25 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@12ab93f8]
2019-04-03 14:47:25 -==>  Preparing: select DISTINCT user_name from( select user_name from elec WHERE create_time = ? and user_name like CONCAT(CONCAT('%',?,'%')) UNION ALL select user_name from heat WHERE create_time = ? and user_name like CONCAT(CONCAT('%',?,'%')) UNION ALL select user_name from water WHERE create_time = ? and user_name like CONCAT(CONCAT('%',?,'%')) )username 
2019-04-03 14:47:25 -==> Parameters: 2019-02(String), 电饭锅(String), 2019-02(String), 电饭锅(String), 2019-02(String), 电饭锅(String)
2019-04-03 14:47:25 -<==      Total: 1
2019-04-03 14:47:25 -耗时 : 3
2019-04-03 14:47:25 -返回值 : [com.bootdo.moneyList.damain.MoneyListDO@6a2d8d0f]
2019-04-03 14:47:29 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUser
2019-04-03 14:47:29 -HTTP METHOD : POST
2019-04-03 14:47:29 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.queryAllUser
2019-04-03 14:47:29 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@11878035]
2019-04-03 14:47:29 -==>  Preparing: select COUNT(*) number, user_id, user_name, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, elec_type usertype, elec_price userprice, elec_amount userarea, elec_cost usercost, elec_Sum usersum from elec WHERE create_time = ? UNION ALL select COUNT(*) number, user_id, user_name, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, heat_type usertype, heat_price userprice, heat_area userarea, heat_cost usercost, heat_Sum usersum from heat WHERE create_time = ? UNION ALL select COUNT(*) number, user_id, user_name, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, water_type usertype, water_price userprice, water_price userarea, water_price usercost, water_Sum usersum from water WHERE create_time = ? 
2019-04-03 14:47:29 -==> Parameters: 2019-02(String), 2019-02(String), 2019-02(String)
2019-04-03 14:47:29 -<==      Total: 3
2019-04-03 14:47:29 -耗时 : 4
2019-04-03 14:47:29 -返回值 : [com.bootdo.moneyList.damain.MoneyListDO@39a1adca, com.bootdo.moneyList.damain.MoneyListDO@55bb169a, com.bootdo.moneyList.damain.MoneyListDO@7810a230]
2019-04-03 14:47:44 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUserName
2019-04-03 14:47:44 -HTTP METHOD : POST
2019-04-03 14:47:44 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.getAllUserName
2019-04-03 14:47:44 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@244a8110]
2019-04-03 14:47:44 -==>  Preparing: select DISTINCT user_name from( select user_name from elec WHERE create_time = ? and user_name like CONCAT(CONCAT('%',?,'%')) UNION ALL select user_name from heat WHERE create_time = ? and user_name like CONCAT(CONCAT('%',?,'%')) UNION ALL select user_name from water WHERE create_time = ? and user_name like CONCAT(CONCAT('%',?,'%')) )username 
2019-04-03 14:47:44 -==> Parameters: 2019-02(String), 姜(String), 2019-02(String), 姜(String), 2019-02(String), 姜(String)
2019-04-03 14:47:44 -<==      Total: 1
2019-04-03 14:47:44 -耗时 : 4
2019-04-03 14:47:44 -返回值 : [com.bootdo.moneyList.damain.MoneyListDO@6132eb1b]
2019-04-03 14:47:45 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUser
2019-04-03 14:47:45 -HTTP METHOD : POST
2019-04-03 14:47:45 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.queryAllUser
2019-04-03 14:47:45 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@10145a07]
2019-04-03 14:47:46 -==>  Preparing: select COUNT(*) number, user_id, user_name, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, elec_type usertype, elec_price userprice, elec_amount userarea, elec_cost usercost, elec_Sum usersum from elec WHERE create_time = ? UNION ALL select COUNT(*) number, user_id, user_name, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, heat_type usertype, heat_price userprice, heat_area userarea, heat_cost usercost, heat_Sum usersum from heat WHERE create_time = ? UNION ALL select COUNT(*) number, user_id, user_name, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, water_type usertype, water_price userprice, water_price userarea, water_price usercost, water_Sum usersum from water WHERE create_time = ? 
2019-04-03 14:47:46 -==> Parameters: 2019-02(String), 2019-02(String), 2019-02(String)
2019-04-03 14:47:46 -<==      Total: 3
2019-04-03 14:47:46 -耗时 : 6
2019-04-03 14:47:46 -返回值 : [com.bootdo.moneyList.damain.MoneyListDO@63c1f780, com.bootdo.moneyList.damain.MoneyListDO@37660d7b, com.bootdo.moneyList.damain.MoneyListDO@6be8faea]
2019-04-03 14:47:54 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUserName
2019-04-03 14:47:54 -HTTP METHOD : POST
2019-04-03 14:47:54 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.getAllUserName
2019-04-03 14:47:54 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@e1d36d6]
2019-04-03 14:47:54 -==>  Preparing: select DISTINCT user_name from( select user_name from elec WHERE create_time = ? and user_name like CONCAT(CONCAT('%',?,'%')) UNION ALL select user_name from heat WHERE create_time = ? and user_name like CONCAT(CONCAT('%',?,'%')) UNION ALL select user_name from water WHERE create_time = ? and user_name like CONCAT(CONCAT('%',?,'%')) )username 
2019-04-03 14:47:54 -==> Parameters: 2019-02(String), 姜(String), 2019-02(String), 姜(String), 2019-02(String), 姜(String)
2019-04-03 14:47:54 -<==      Total: 1
2019-04-03 14:47:54 -耗时 : 4
2019-04-03 14:47:54 -返回值 : [com.bootdo.moneyList.damain.MoneyListDO@54964d05]
2019-04-03 14:47:57 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUser
2019-04-03 14:47:57 -HTTP METHOD : POST
2019-04-03 14:47:57 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.queryAllUser
2019-04-03 14:47:57 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@2ad263ab]
2019-04-03 14:47:57 -==>  Preparing: select COUNT(*) number, user_id, user_name, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, elec_type usertype, elec_price userprice, elec_amount userarea, elec_cost usercost, elec_Sum usersum from elec WHERE create_time = ? UNION ALL select COUNT(*) number, user_id, user_name, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, heat_type usertype, heat_price userprice, heat_area userarea, heat_cost usercost, heat_Sum usersum from heat WHERE create_time = ? UNION ALL select COUNT(*) number, user_id, user_name, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, water_type usertype, water_price userprice, water_price userarea, water_price usercost, water_Sum usersum from water WHERE create_time = ? 
2019-04-03 14:47:57 -==> Parameters: 2019-02(String), 2019-02(String), 2019-02(String)
2019-04-03 14:47:57 -<==      Total: 3
2019-04-03 14:47:57 -耗时 : 5
2019-04-03 14:47:57 -返回值 : [com.bootdo.moneyList.damain.MoneyListDO@1db99913, com.bootdo.moneyList.damain.MoneyListDO@697271b8, com.bootdo.moneyList.damain.MoneyListDO@50848806]
2019-04-03 14:48:19 -请求地址 : http://localhost:8081/index
2019-04-03 14:48:19 -HTTP METHOD : GET
2019-04-03 14:48:19 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2019-04-03 14:48:19 -参数 : [{}]
2019-04-03 14:48:19 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2019-04-03 14:48:19 -==> Parameters: 1(Long)
2019-04-03 14:48:19 -<==      Total: 46
2019-04-03 14:48:19 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2019-04-03 14:48:19 -==> Parameters: 138(Long)
2019-04-03 14:48:19 -<==      Total: 1
2019-04-03 14:48:19 -耗时 : 36
2019-04-03 14:48:19 -返回值 : index_v1
2019-04-03 14:48:19 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 14:48:19 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 36(Integer), com.bootdo.system.controller.LoginController.index()(String), {"menus":[{"attributes":{"icon":"fa fa-money","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-money","url":"/moneyList/moneyList"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"102","parentId":"106","text":"现金缴费"},{"attributes":{"icon":"fa fa-book","url":"/moneyLog/elecLog"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"107","parentId":"106","text":"缴费记录"}],"hasChildren":true,"hasParent":false,"id":"106","parentId":"0","text":"收费管理"},{"attributes":{"icon":"fa fa-lightbulb-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/elec/elec"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"121","parentId":"103","text":"电费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"elec/elecInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"122","parentId":"103","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"elec/elecUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"123","parentId":"103","text":"电表上传"},{"attributes":{"icon":"fa fa-cc","url":"/elec/elecPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"124","parentId":"103","text":"电价管理"}],"hasChildren":true,"hasParent":false,"id":"103","parentId":"0","text":"电费管理"},{"attributes":{"icon":"fa fa-tint","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/water/water"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"117","parentId":"105","text":"水费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"water/waterInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"118","parentId":"105","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"water/waterUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"119","parentId":"105","text":"水费生成"},{"attributes":{"icon":"fa fa-cc","url":"/water/waterPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"120","parentId":"105","text":"水价管理"}],"hasChildren":true,"hasParent":false,"id":"105","parentId":"0","text":"水费管理"},{"attributes":{"icon":"fa fa-fire","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/heat/heat"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"113","parentId":"104","text":"暖费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"heat/heatInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"114","parentId":"104","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"heat/heatUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"115","parentId":"104","text":"暖费生成"},{"attributes":{"icon":"","url":"/heat/heatPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"116","parentId":"104","text":"暖价管理"}],"hasChildren":true,"hasParent":false,"id":"104","parentId":"0","text":"暖费管理"},{"attributes":{"icon":"fa fa-vcard-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-bomb","url":"/print/print"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"149","parentId":"108","text":"票据记录"}],"hasChildren":true,"hasParent":false,"id":"108","parentId":"0","text":"票据管理"},{"attributes":{"icon":"fa fa-bar-chart","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-area-chart","url":"/chart/graph_echarts.html"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","text":"百度chart"},{"attributes":{"icon":"fa fa-sun-o","url":"charts/countDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"109","parentId":"97","text":"日统计报表"},{"attributes":{"icon":"fa fa-registered","url":"charts/countMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"110","parentId":"97","text":"月统计报表"},{"attributes":{"icon":"fa fa-money","url":"charts/countOwe"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"155","parentId":"97","text":"欠费报表图"},{"attributes":{"icon":"fa fa-support","url":"charts/countYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"111","parentId":"97","text":"年统计报表"},{"attributes":{"icon":"fa fa-tachometer","url":"charts/countRun"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"112","parentId":"97","text":"走势图报表"}],"hasChildren":true,"hasParent":false,"id":"97","parentId":"0","text":"统计管理"},{"attributes":{"icon":"fa fa-bars","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-book","url":"/common/dict"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"78","parentId":"1","text":"数据字典"},{"attributes":{"icon":"fa fa-folder-open","url":"/common/sysFile"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"71","parentId":"1","text":"文件管理"}],"h(String), 127.0.0.1(String), 2019-04-03 14:48:19.902(Timestamp)
2019-04-03 14:48:20 -请求地址 : http://localhost:8081/main
2019-04-03 14:48:20 -HTTP METHOD : GET
2019-04-03 14:48:20 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 14:48:20 -参数 : []
2019-04-03 14:48:20 -耗时 : 3
2019-04-03 14:48:20 -返回值 : main
2019-04-03 14:48:20 -<==    Updates: 1
2019-04-03 14:48:20 -请求地址 : http://localhost:8081/oa/notify/message
2019-04-03 14:48:20 -HTTP METHOD : GET
2019-04-03 14:48:20 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2019-04-03 14:48:20 -参数 : []
2019-04-03 14:48:20 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2019-04-03 14:48:20 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2019-04-03 14:48:20 -<==      Total: 0
2019-04-03 14:48:20 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2019-04-03 14:48:20 -==> Parameters: 1(Long), 0(String)
2019-04-03 14:48:20 -<==      Total: 1
2019-04-03 14:48:20 -耗时 : 5
2019-04-03 14:48:20 -返回值 : com.bootdo.common.utils.PageUtils@40ca03f7
2019-04-03 14:48:20 -请求地址 : http://localhost:8081/main
2019-04-03 14:48:20 -HTTP METHOD : GET
2019-04-03 14:48:20 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 14:48:20 -参数 : []
2019-04-03 14:48:20 -耗时 : 0
2019-04-03 14:48:20 -返回值 : main
2019-04-03 14:48:27 -请求地址 : http://localhost:8081/moneyList/moneyList
2019-04-03 14:48:27 -HTTP METHOD : GET
2019-04-03 14:48:27 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.MoneyList
2019-04-03 14:48:27 -参数 : []
2019-04-03 14:48:27 -耗时 : 0
2019-04-03 14:48:27 -返回值 : /moneyList/moneyList
2019-04-03 14:48:35 -请求地址 : http://localhost:8081/system/sysDept/treeView
2019-04-03 14:48:35 -HTTP METHOD : GET
2019-04-03 14:48:35 -CLASS_METHOD : com.bootdo.system.controller.DeptController.treeView
2019-04-03 14:48:35 -参数 : []
2019-04-03 14:48:35 -耗时 : 0
2019-04-03 14:48:35 -返回值 : system/dept/deptTree
2019-04-03 14:48:36 -请求地址 : http://localhost:8081/system/sysDept/tree
2019-04-03 14:48:36 -HTTP METHOD : GET
2019-04-03 14:48:36 -CLASS_METHOD : com.bootdo.system.controller.DeptController.tree
2019-04-03 14:48:36 -参数 : []
2019-04-03 14:48:36 -==>  Preparing: select `dept_id`,`parent_id`,`name`,`order_num`,`del_flag` from sys_dept order by dept_id desc 
2019-04-03 14:48:36 -==> Parameters: 
2019-04-03 14:48:36 -<==      Total: 3
2019-04-03 14:48:36 -耗时 : 5
2019-04-03 14:48:36 -返回值 : {"checked":false,"children":[{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"3","parentId":"1","state":{"opened":true},"text":"牙星"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"2","parentId":"1","state":{"opened":true},"text":"五九"}],"hasChildren":true,"hasParent":false,"id":"1","parentId":"0","state":{"opened":true},"text":"总公司"}
2019-04-03 14:48:39 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUserName
2019-04-03 14:48:39 -HTTP METHOD : POST
2019-04-03 14:48:39 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.getAllUserName
2019-04-03 14:48:39 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@27922287]
2019-04-03 14:48:39 -==>  Preparing: select DISTINCT user_name from( select user_name from elec WHERE create_time = ? and user_name like CONCAT(CONCAT('%',?,'%')) UNION ALL select user_name from heat WHERE create_time = ? and user_name like CONCAT(CONCAT('%',?,'%')) UNION ALL select user_name from water WHERE create_time = ? and user_name like CONCAT(CONCAT('%',?,'%')) )username 
2019-04-03 14:48:39 -==> Parameters: 2019-02(String), 姜(String), 2019-02(String), 姜(String), 2019-02(String), 姜(String)
2019-04-03 14:48:39 -<==      Total: 1
2019-04-03 14:48:39 -耗时 : 3
2019-04-03 14:48:39 -返回值 : [com.bootdo.moneyList.damain.MoneyListDO@5d225ee9]
2019-04-03 14:48:41 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUser
2019-04-03 14:48:41 -HTTP METHOD : POST
2019-04-03 14:48:41 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.queryAllUser
2019-04-03 14:48:41 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@6fb4f95c]
2019-04-03 14:48:41 -==>  Preparing: select COUNT(*) number, user_id, user_name, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, elec_type usertype, elec_price userprice, elec_amount userarea, elec_cost usercost, elec_Sum usersum from elec WHERE create_time = ? UNION ALL select COUNT(*) number, user_id, user_name, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, heat_type usertype, heat_price userprice, heat_area userarea, heat_cost usercost, heat_Sum usersum from heat WHERE create_time = ? UNION ALL select COUNT(*) number, user_id, user_name, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, water_type usertype, water_price userprice, water_price userarea, water_price usercost, water_Sum usersum from water WHERE create_time = ? 
2019-04-03 14:48:41 -==> Parameters: 2019-02(String), 2019-02(String), 2019-02(String)
2019-04-03 14:48:41 -<==      Total: 3
2019-04-03 14:48:41 -耗时 : 4
2019-04-03 14:48:41 -返回值 : [com.bootdo.moneyList.damain.MoneyListDO@ec7732a, com.bootdo.moneyList.damain.MoneyListDO@33dce7f7, com.bootdo.moneyList.damain.MoneyListDO@7b6a86c9]
2019-04-03 14:48:51 -Failed to invoke @ExceptionHandler method: public java.lang.Object com.bootdo.common.exception.BDExceptionHandler.handleException(java.lang.Exception,javax.servlet.http.HttpServletRequest)
org.apache.shiro.UnavailableSecurityManagerException: No SecurityManager accessible to the calling code, either bound to the org.apache.shiro.util.ThreadContext or as a vm static singleton.  This is an invalid application configuration.
	at org.apache.shiro.SecurityUtils.getSecurityManager(SecurityUtils.java:123)
	at org.apache.shiro.subject.Subject$Builder.<init>(Subject.java:627)
	at org.apache.shiro.SecurityUtils.getSubject(SecurityUtils.java:56)
	at com.bootdo.common.utils.ShiroUtils.getSubjct(ShiroUtils.java:23)
	at com.bootdo.common.utils.ShiroUtils.getUser(ShiroUtils.java:26)
	at com.bootdo.common.exception.BDExceptionHandler.handleException(BDExceptionHandler.java:75)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:209)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver.doResolveHandlerMethodException(ExceptionHandlerExceptionResolver.java:404)
	at org.springframework.web.servlet.handler.AbstractHandlerMethodExceptionResolver.doResolveException(AbstractHandlerMethodExceptionResolver.java:61)
	at org.springframework.web.servlet.handler.AbstractHandlerExceptionResolver.resolveException(AbstractHandlerExceptionResolver.java:139)
	at org.springframework.web.servlet.handler.HandlerExceptionResolverComposite.resolveException(HandlerExceptionResolverComposite.java:78)
	at org.springframework.web.servlet.DispatcherServlet.processHandlerException(DispatcherServlet.java:1255)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1062)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1008)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:925)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:974)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:877)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:661)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:851)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:728)
	at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:591)
	at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:527)
	at org.apache.catalina.core.StandardHostValve.custom(StandardHostValve.java:389)
	at org.apache.catalina.core.StandardHostValve.status(StandardHostValve.java:254)
	at org.apache.catalina.core.StandardHostValve.throwable(StandardHostValve.java:349)
	at org.apache.catalina.core.AsyncContextImpl.setErrorState(AsyncContextImpl.java:424)
	at org.apache.catalina.connector.CoyoteAdapter.asyncDispatch(CoyoteAdapter.java:176)
	at org.apache.coyote.AbstractProcessor.dispatch(AbstractProcessor.java:232)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:53)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:790)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1468)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Unknown Source)
2019-04-03 14:49:14 -请求地址 : http://localhost:8081/index
2019-04-03 14:49:14 -HTTP METHOD : GET
2019-04-03 14:49:14 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2019-04-03 14:49:14 -参数 : [{}]
2019-04-03 14:49:14 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2019-04-03 14:49:14 -==> Parameters: 1(Long)
2019-04-03 14:49:14 -<==      Total: 46
2019-04-03 14:49:14 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2019-04-03 14:49:14 -==> Parameters: 138(Long)
2019-04-03 14:49:14 -<==      Total: 1
2019-04-03 14:49:14 -耗时 : 111
2019-04-03 14:49:14 -返回值 : index_v1
2019-04-03 14:49:14 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 14:49:14 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 111(Integer), com.bootdo.system.controller.LoginController.index()(String), {"menus":[{"attributes":{"icon":"fa fa-money","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-money","url":"/moneyList/moneyList"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"102","parentId":"106","text":"现金缴费"},{"attributes":{"icon":"fa fa-book","url":"/moneyLog/elecLog"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"107","parentId":"106","text":"缴费记录"}],"hasChildren":true,"hasParent":false,"id":"106","parentId":"0","text":"收费管理"},{"attributes":{"icon":"fa fa-lightbulb-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/elec/elec"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"121","parentId":"103","text":"电费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"elec/elecInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"122","parentId":"103","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"elec/elecUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"123","parentId":"103","text":"电表上传"},{"attributes":{"icon":"fa fa-cc","url":"/elec/elecPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"124","parentId":"103","text":"电价管理"}],"hasChildren":true,"hasParent":false,"id":"103","parentId":"0","text":"电费管理"},{"attributes":{"icon":"fa fa-tint","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/water/water"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"117","parentId":"105","text":"水费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"water/waterInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"118","parentId":"105","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"water/waterUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"119","parentId":"105","text":"水费生成"},{"attributes":{"icon":"fa fa-cc","url":"/water/waterPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"120","parentId":"105","text":"水价管理"}],"hasChildren":true,"hasParent":false,"id":"105","parentId":"0","text":"水费管理"},{"attributes":{"icon":"fa fa-fire","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/heat/heat"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"113","parentId":"104","text":"暖费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"heat/heatInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"114","parentId":"104","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"heat/heatUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"115","parentId":"104","text":"暖费生成"},{"attributes":{"icon":"","url":"/heat/heatPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"116","parentId":"104","text":"暖价管理"}],"hasChildren":true,"hasParent":false,"id":"104","parentId":"0","text":"暖费管理"},{"attributes":{"icon":"fa fa-vcard-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-bomb","url":"/print/print"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"149","parentId":"108","text":"票据记录"}],"hasChildren":true,"hasParent":false,"id":"108","parentId":"0","text":"票据管理"},{"attributes":{"icon":"fa fa-bar-chart","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-area-chart","url":"/chart/graph_echarts.html"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","text":"百度chart"},{"attributes":{"icon":"fa fa-sun-o","url":"charts/countDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"109","parentId":"97","text":"日统计报表"},{"attributes":{"icon":"fa fa-registered","url":"charts/countMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"110","parentId":"97","text":"月统计报表"},{"attributes":{"icon":"fa fa-support","url":"charts/countYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"111","parentId":"97","text":"年统计报表"},{"attributes":{"icon":"fa fa-money","url":"charts/countOwe"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"155","parentId":"97","text":"欠费报表图"},{"attributes":{"icon":"fa fa-tachometer","url":"charts/countRun"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"112","parentId":"97","text":"走势图报表"}],"hasChildren":true,"hasParent":false,"id":"97","parentId":"0","text":"统计管理"},{"attributes":{"icon":"fa fa-bars","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-book","url":"/common/dict"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"78","parentId":"1","text":"数据字典"},{"attributes":{"icon":"fa fa-folder-open","url":"/common/sysFile"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"71","parentId":"1","text":"文件管理"}],"h(String), 127.0.0.1(String), 2019-04-03 14:49:14.183(Timestamp)
2019-04-03 14:49:14 -<==    Updates: 1
2019-04-03 14:49:14 -请求地址 : http://localhost:8081/main
2019-04-03 14:49:14 -HTTP METHOD : GET
2019-04-03 14:49:14 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 14:49:14 -参数 : []
2019-04-03 14:49:14 -耗时 : 0
2019-04-03 14:49:14 -返回值 : main
2019-04-03 14:49:14 -请求地址 : http://localhost:8081/oa/notify/message
2019-04-03 14:49:14 -HTTP METHOD : GET
2019-04-03 14:49:14 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2019-04-03 14:49:14 -参数 : []
2019-04-03 14:49:14 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2019-04-03 14:49:14 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2019-04-03 14:49:14 -<==      Total: 0
2019-04-03 14:49:14 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2019-04-03 14:49:14 -==> Parameters: 1(Long), 0(String)
2019-04-03 14:49:14 -<==      Total: 1
2019-04-03 14:49:14 -耗时 : 9
2019-04-03 14:49:14 -返回值 : com.bootdo.common.utils.PageUtils@582dcaca
2019-04-03 14:49:14 -请求地址 : http://localhost:8081/main
2019-04-03 14:49:14 -HTTP METHOD : GET
2019-04-03 14:49:14 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 14:49:14 -参数 : []
2019-04-03 14:49:14 -耗时 : 0
2019-04-03 14:49:14 -返回值 : main
2019-04-03 14:49:16 -请求地址 : http://localhost:8081/moneyList/moneyList
2019-04-03 14:49:16 -HTTP METHOD : GET
2019-04-03 14:49:16 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.MoneyList
2019-04-03 14:49:16 -参数 : []
2019-04-03 14:49:16 -耗时 : 1
2019-04-03 14:49:16 -返回值 : /moneyList/moneyList
2019-04-03 14:49:19 -请求地址 : http://localhost:8081/system/sysDept/treeView
2019-04-03 14:49:19 -HTTP METHOD : GET
2019-04-03 14:49:19 -CLASS_METHOD : com.bootdo.system.controller.DeptController.treeView
2019-04-03 14:49:19 -参数 : []
2019-04-03 14:49:19 -耗时 : 1
2019-04-03 14:49:19 -返回值 : system/dept/deptTree
2019-04-03 14:49:19 -请求地址 : http://localhost:8081/system/sysDept/tree
2019-04-03 14:49:19 -HTTP METHOD : GET
2019-04-03 14:49:19 -CLASS_METHOD : com.bootdo.system.controller.DeptController.tree
2019-04-03 14:49:19 -参数 : []
2019-04-03 14:49:19 -==>  Preparing: select `dept_id`,`parent_id`,`name`,`order_num`,`del_flag` from sys_dept order by dept_id desc 
2019-04-03 14:49:19 -==> Parameters: 
2019-04-03 14:49:19 -<==      Total: 3
2019-04-03 14:49:19 -耗时 : 4
2019-04-03 14:49:19 -返回值 : {"checked":false,"children":[{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"3","parentId":"1","state":{"opened":true},"text":"牙星"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"2","parentId":"1","state":{"opened":true},"text":"五九"}],"hasChildren":true,"hasParent":false,"id":"1","parentId":"0","state":{"opened":true},"text":"总公司"}
2019-04-03 14:49:26 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUserName
2019-04-03 14:49:26 -HTTP METHOD : POST
2019-04-03 14:49:26 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.getAllUserName
2019-04-03 14:49:26 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@5bb0a739]
2019-04-03 14:49:26 -==>  Preparing: select DISTINCT user_name from( select user_name from elec WHERE create_time = ? and user_name like CONCAT(CONCAT('%',?,'%')) UNION ALL select user_name from heat WHERE create_time = ? and user_name like CONCAT(CONCAT('%',?,'%')) UNION ALL select user_name from water WHERE create_time = ? and user_name like CONCAT(CONCAT('%',?,'%')) )username 
2019-04-03 14:49:26 -==> Parameters: 2019-02(String), 姜(String), 2019-02(String), 姜(String), 2019-02(String), 姜(String)
2019-04-03 14:49:26 -<==      Total: 1
2019-04-03 14:49:26 -耗时 : 19
2019-04-03 14:49:26 -返回值 : [com.bootdo.moneyList.damain.MoneyListDO@53f57e85]
2019-04-03 14:49:29 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUser
2019-04-03 14:49:29 -HTTP METHOD : POST
2019-04-03 14:49:29 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.queryAllUser
2019-04-03 14:49:29 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@7ae561df]
2019-04-03 14:49:29 -==>  Preparing: select COUNT(*) number, user_id, user_name, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, elec_type usertype, elec_price userprice, elec_amount userarea, elec_cost usercost, elec_Sum usersum from elec WHERE create_time = ? UNION ALL select COUNT(*) number, user_id, user_name, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, heat_type usertype, heat_price userprice, heat_area userarea, heat_cost usercost, heat_Sum usersum from heat WHERE create_time = ? UNION ALL select COUNT(*) number, user_id, user_name, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, water_type usertype, water_price userprice, water_price userarea, water_price usercost, water_Sum usersum from water WHERE create_time = ? 
2019-04-03 14:49:29 -==> Parameters: 2019-02(String), 2019-02(String), 2019-02(String)
2019-04-03 14:49:29 -<==      Total: 3
2019-04-03 14:49:29 -耗时 : 19
2019-04-03 14:49:29 -返回值 : [com.bootdo.moneyList.damain.MoneyListDO@1778fa23, com.bootdo.moneyList.damain.MoneyListDO@1a6bb185, com.bootdo.moneyList.damain.MoneyListDO@4b51d08e]
2019-04-03 14:56:38 -Starting BootdoApplication on ZJZL-20180906VX with PID 5648 (D:\eclipse2018-work\bootdo\target\classes started by Administrator in D:\eclipse2018-work\bootdo)
2019-04-03 14:56:38 -Running with Spring Boot v2.0.3.RELEASE, Spring v5.0.7.RELEASE
2019-04-03 14:56:38 -The following profiles are active: dev
2019-04-03 14:56:38 -Refreshing org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@6fdbe764: startup date [Wed Apr 03 14:56:38 CST 2019]; root of context hierarchy
2019-04-03 14:56:41 -Multiple Spring Data modules found, entering strict repository configuration mode!
2019-04-03 14:56:43 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$6c68c88e] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-03 14:56:43 -Bean 'shiroConfig' of type [com.bootdo.system.config.ShiroConfig$$EnhancerBySpringCGLIB$$5ec1f735] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-03 14:56:44 -Bean 'userRealm' of type [com.bootdo.system.shiro.UserRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-03 14:56:44 -Bean 'cacheManager2' of type [net.sf.ehcache.CacheManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-03 14:56:44 -Bean 'ehCacheManager' of type [org.apache.shiro.cache.ehcache.EhCacheManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-03 14:56:44 -Cache with name 'com.bootdo.system.shiro.UserRealm.authorizationCache' does not yet exist.  Creating now.
2019-04-03 14:56:44 -Added EhCache named [com.bootdo.system.shiro.UserRealm.authorizationCache]
2019-04-03 14:56:44 -Bean 'sessionDAO' of type [org.apache.shiro.session.mgt.eis.MemorySessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-03 14:56:44 -Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-03 14:56:45 -Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-03 14:56:45 -Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-03 14:56:45 -Tomcat initialized with port(s): 8081 (http)
2019-04-03 14:56:46 -Initializing ProtocolHandler ["http-nio-8081"]
2019-04-03 14:56:46 -Starting service [Tomcat]
2019-04-03 14:56:46 -Starting Servlet Engine: Apache Tomcat/8.5.31
2019-04-03 14:56:46 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [C:\Program Files\Java\jre1.8.0_131\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:/Program Files/Java/jre1.8.0_131/bin/server;C:/Program Files/Java/jre1.8.0_131/bin;C:/Program Files/Java/jre1.8.0_131/lib/amd64;C:\ProgramData\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Windows\System32\OpenSSH\;D:\pbb\pycSafefile\x64;D:\pbb\PBB Reader\x64;C:\Program Files\MySQL\MySQL Utilities 1.6\;D:\MAVEN\apache-maven-3.6.0\bin;D:\GIT\Git\cmd;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;;C:\Users\Administrator\Desktop;;.]
2019-04-03 14:56:46 -Initializing Spring embedded WebApplicationContext
2019-04-03 14:56:46 -Root WebApplicationContext: initialization completed in 7786 ms
2019-04-03 14:56:47 -Mapping filter: 'characterEncodingFilter' to: [/*]
2019-04-03 14:56:47 -Mapping filter: 'hiddenHttpMethodFilter' to: [/*]
2019-04-03 14:56:47 -Mapping filter: 'httpPutFormContentFilter' to: [/*]
2019-04-03 14:56:47 -Mapping filter: 'requestContextFilter' to: [/*]
2019-04-03 14:56:47 -Filter xssFilter was not registered (disabled)
2019-04-03 14:56:47 -Mapping filter: 'webStatFilter' to urls: [/*]
2019-04-03 14:56:47 -Mapping filter: 'shiroFilterFactoryBean' to: [/*]
2019-04-03 14:56:47 -Servlet statViewServlet mapped to [/druid/*]
2019-04-03 14:56:47 -Servlet dispatcherServlet mapped to [/]
2019-04-03 14:56:50 -ApplicationContext registed-->org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@6fdbe764: startup date [Wed Apr 03 14:56:38 CST 2019]; root of context hierarchy
2019-04-03 14:56:50 -Using default implementation for ThreadExecutor
2019-04-03 14:56:50 -Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2019-04-03 14:56:50 -Quartz Scheduler v.2.2.1 created.
2019-04-03 14:56:50 -RAMJobStore initialized.
2019-04-03 14:56:50 -Scheduler meta-data: Quartz Scheduler (v2.2.1) 'schedulerFactoryBean' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2019-04-03 14:56:50 -Quartz scheduler 'schedulerFactoryBean' initialized from an externally provided properties instance.
2019-04-03 14:56:50 -Quartz scheduler version: 2.2.1
2019-04-03 14:56:50 -JobFactory set to: com.bootdo.common.quartz.factory.JobFactory@795f6681
2019-04-03 14:56:51 -Initializing ExecutorService  'clientInboundChannelExecutor'
2019-04-03 14:56:51 -Initializing ExecutorService  'clientOutboundChannelExecutor'
2019-04-03 14:56:53 -Mapped "{[/charts/countDD/tableDD],methods=[POST]}" onto public java.lang.String com.bootdo.charts.controller.countDDController.tableDD()
2019-04-03 14:56:53 -Mapped "{[/charts/countDD],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.countDDController.countDD()
2019-04-03 14:56:53 -Mapped "{[/charts/countDD/getCountDD],methods=[POST]}" onto public com.bootdo.charts.vo.CountDayVo com.bootdo.charts.controller.countDDController.getCountD(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo,javax.servlet.http.HttpServletRequest)
2019-04-03 14:56:53 -Mapped "{[/charts/countDD/exportCountDD],methods=[GET]}" onto public void com.bootdo.charts.controller.countDDController.exprotElecLog(com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-03 14:56:53 -Mapped "{[/charts/countMM/getCountMM],methods=[POST]}" onto public void com.bootdo.charts.controller.countMMController.getCountMM(org.springframework.ui.Model,com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo,javax.servlet.http.HttpServletRequest)
2019-04-03 14:56:53 -Mapped "{[/charts/countMM],methods=[GET]}" onto java.lang.String com.bootdo.charts.controller.countMMController.countMM()
2019-04-03 14:56:53 -Mapped "{[/charts/countMM/exportCountMM],methods=[GET]}" onto public void com.bootdo.charts.controller.countMMController.exprotElecLog(com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-03 14:56:53 -Mapped "{[/charts/countOwe/getCountOwe],methods=[POST]}" onto public com.bootdo.charts.vo.CountOweVo com.bootdo.charts.controller.countOweController.getCountD(com.bootdo.elec.vo.ElecVo,com.bootdo.water.vo.WaterVo,com.bootdo.heat.vo.HeatVo,javax.servlet.http.HttpServletRequest)
2019-04-03 14:56:53 -Mapped "{[/charts/countOwe],methods=[GET]}" onto java.lang.String com.bootdo.charts.controller.countOweController.countOwe()
2019-04-03 14:56:53 -Mapped "{[/charts/countRun/getCountRun],methods=[POST]}" onto public int com.bootdo.charts.controller.countRunController.getCountD(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo)
2019-04-03 14:56:53 -Mapped "{[/charts/countRun/exportCountRun],methods=[GET]}" onto public void com.bootdo.charts.controller.countRunController.exprotElecLog(com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-03 14:56:53 -Mapped "{[/charts/countRun],methods=[GET]}" onto java.lang.String com.bootdo.charts.controller.countRunController.countRun()
2019-04-03 14:56:53 -Mapped "{[/charts/countYY/getCountYY],methods=[POST]}" onto public int com.bootdo.charts.controller.countYYController.getCountD(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo)
2019-04-03 14:56:53 -Mapped "{[/charts/countYY/exportCountYY],methods=[GET]}" onto public void com.bootdo.charts.controller.countYYController.exprotElecLog(com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-03 14:56:53 -Mapped "{[/charts/countYY],methods=[GET]}" onto java.lang.String com.bootdo.charts.controller.countYYController.countYY()
2019-04-03 14:56:53 -Mapped "{[/common/dict/add],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.add()
2019-04-03 14:56:53 -Mapped "{[/common/dict/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.remove(java.lang.Long)
2019-04-03 14:56:53 -Mapped "{[/common/dict/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.remove(java.lang.Long[])
2019-04-03 14:56:53 -Mapped "{[/common/dict/update]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.update(com.bootdo.common.domain.DictDO)
2019-04-03 14:56:53 -Mapped "{[/common/dict/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.common.controller.DictController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 14:56:53 -Mapped "{[/common/dict/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.save(com.bootdo.common.domain.DictDO)
2019-04-03 14:56:53 -Mapped "{[/common/dict/type],methods=[GET]}" onto public java.util.List<com.bootdo.common.domain.DictDO> com.bootdo.common.controller.DictController.listType()
2019-04-03 14:56:53 -Mapped "{[/common/dict],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.dict()
2019-04-03 14:56:53 -Mapped "{[/common/dict/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 14:56:53 -Mapped "{[/common/dict/list/{type}],methods=[GET]}" onto public java.util.List<com.bootdo.common.domain.DictDO> com.bootdo.common.controller.DictController.listByType(java.lang.String)
2019-04-03 14:56:53 -Mapped "{[/common/dict/add/{type}/{description}],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.addD(org.springframework.ui.Model,java.lang.String,java.lang.String)
2019-04-03 14:56:53 -Mapped "{[/common/sysFile/add],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.FileController.add()
2019-04-03 14:56:53 -Mapped "{[/common/sysFile/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.remove(java.lang.Long,javax.servlet.http.HttpServletRequest)
2019-04-03 14:56:53 -Mapped "{[/common/sysFile/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.remove(java.lang.Long[])
2019-04-03 14:56:53 -Mapped "{[/common/sysFile/update]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.update(com.bootdo.common.domain.FileDO)
2019-04-03 14:56:53 -Mapped "{[/common/sysFile/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.common.controller.FileController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 14:56:53 -Mapped "{[/common/sysFile/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.save(com.bootdo.common.domain.FileDO)
2019-04-03 14:56:53 -Mapped "{[/common/sysFile/info/{id}]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.info(java.lang.Long)
2019-04-03 14:56:53 -Mapped "{[/common/sysFile/edit],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.FileController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 14:56:53 -Mapped "{[/common/sysFile],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.FileController.sysFile(org.springframework.ui.Model)
2019-04-03 14:56:53 -Mapped "{[/common/sysFile/upload],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.FileController.upload(org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpServletRequest)
2019-04-03 14:56:53 -Mapped "{[/common/generator/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.GeneratorController.update(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 14:56:53 -Mapped "{[/common/generator/list],methods=[GET]}" onto java.util.List<java.util.Map<java.lang.String, java.lang.Object>> com.bootdo.common.controller.GeneratorController.list()
2019-04-03 14:56:53 -Mapped "{[/common/generator/code/{tableName}]}" onto public void com.bootdo.common.controller.GeneratorController.code(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String) throws java.io.IOException
2019-04-03 14:56:53 -Mapped "{[/common/generator],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.GeneratorController.generator()
2019-04-03 14:56:53 -Mapped "{[/common/generator/edit],methods=[GET]}" onto public java.lang.String com.bootdo.common.controller.GeneratorController.edit(org.springframework.ui.Model)
2019-04-03 14:56:53 -Mapped "{[/common/generator/batchCode]}" onto public void com.bootdo.common.controller.GeneratorController.batchCode(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String) throws java.io.IOException
2019-04-03 14:56:53 -Mapped "{[/common/job/add],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.JobController.add()
2019-04-03 14:56:53 -Mapped "{[/common/job/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.remove(java.lang.Long)
2019-04-03 14:56:53 -Mapped "{[/common/job/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.remove(java.lang.Long[])
2019-04-03 14:56:53 -Mapped "{[/common/job/update],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.update(com.bootdo.common.domain.TaskDO)
2019-04-03 14:56:53 -Mapped "{[/common/job/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.common.controller.JobController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 14:56:53 -Mapped "{[/common/job/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.save(com.bootdo.common.domain.TaskDO)
2019-04-03 14:56:53 -Mapped "{[/common/job/info/{id}]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.info(java.lang.Long)
2019-04-03 14:56:53 -Mapped "{[/common/job/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.JobController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 14:56:53 -Mapped "{[/common/job/changeJobStatus],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.changeJobStatus(java.lang.Long,java.lang.String)
2019-04-03 14:56:53 -Mapped "{[/common/job],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.JobController.taskScheduleJob()
2019-04-03 14:56:53 -Mapped "{[/common/log/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.LogController.remove(java.lang.Long)
2019-04-03 14:56:53 -Mapped "{[/common/log],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.LogController.log()
2019-04-03 14:56:53 -Mapped "{[/common/log/list],methods=[GET]}" onto com.bootdo.common.domain.PageDO<com.bootdo.common.domain.LogDO> com.bootdo.common.controller.LogController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 14:56:53 -Mapped "{[/common/log/batchRemove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.LogController.batchRemove(java.lang.Long[])
2019-04-03 14:56:53 -Mapped "{[/common/long],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.LongController.Long()
2019-04-03 14:56:53 -Mapped "{[/common/time],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.TimeController.Time()
2019-04-03 14:56:53 -Mapped "{[/error]}" onto public com.bootdo.common.utils.R com.bootdo.common.exception.MainsiteErrorController.handleError(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-04-03 14:56:53 -Mapped "{[/error],produces=[text/html]}" onto public org.springframework.web.servlet.ModelAndView com.bootdo.common.exception.MainsiteErrorController.errorHtml(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-04-03 14:56:53 -Mapped "{[/elec/elec/add],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecController.add()
2019-04-03 14:56:53 -Mapped "{[/elec/elec/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.remove(java.lang.Long)
2019-04-03 14:56:53 -Mapped "{[/elec/elec/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.remove(java.lang.Long[])
2019-04-03 14:56:53 -Mapped "{[/elec/elec/update],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.update(com.bootdo.elec.domain.ElecDO)
2019-04-03 14:56:53 -Mapped "{[/elec/elec/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.elec.controller.ElecController.list(java.util.Map<java.lang.String, java.lang.Object>,com.bootdo.elec.domain.ElecDO)
2019-04-03 14:56:53 -Mapped "{[/elec/elec/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.save(com.bootdo.elec.domain.ElecDO)
2019-04-03 14:56:53 -Mapped "{[/elec/elec/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 14:56:53 -Mapped "{[/elec/elec/exprotElec],methods=[GET]}" onto public void com.bootdo.elec.controller.ElecController.exprotExcel(com.bootdo.elec.vo.ElecVo,javax.servlet.http.HttpServletResponse)
2019-04-03 14:56:53 -Mapped "{[/elec/elec],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecController.Elec()
2019-04-03 14:56:53 -Mapped "{[/elec/elecInto/importElecIntoExcel],methods=[POST]}" onto public java.util.Map<java.lang.String, java.lang.Object> com.bootdo.elec.controller.ElecIntoController.importElecIntoExcel(org.springframework.web.multipart.MultipartFile,com.bootdo.elec.vo.ElecVo) throws java.lang.Exception
2019-04-03 14:56:53 -Mapped "{[/elec/elecInto/exprotElecIntoExcel],methods=[GET]}" onto public void com.bootdo.elec.controller.ElecIntoController.exprotExcel(com.bootdo.elec.vo.ElecVo,javax.servlet.http.HttpServletResponse)
2019-04-03 14:56:53 -Mapped "{[/elec/elecInto],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecIntoController.ElecInto()
2019-04-03 14:56:53 -Mapped "{[/elec/elecPrice/add],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecPriceController.add()
2019-04-03 14:56:53 -Mapped "{[/elec/elecPrice/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecPriceController.remove(java.lang.Long)
2019-04-03 14:56:53 -Mapped "{[/elec/elecPrice/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecPriceController.remove(java.lang.Long[])
2019-04-03 14:56:53 -Mapped "{[/elec/elecPrice/update]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecPriceController.update(com.bootdo.elec.domain.ElecPriceDO)
2019-04-03 14:56:53 -Mapped "{[/elec/elecPrice/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.elec.controller.ElecPriceController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 14:56:53 -Mapped "{[/elec/elecPrice/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecPriceController.save(com.bootdo.elec.domain.ElecPriceDO,com.bootdo.elec.domain.ElecDO)
2019-04-03 14:56:53 -Mapped "{[/elec/elecPrice/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecPriceController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 14:56:53 -Mapped "{[/elec/elecPrice],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecPriceController.ElecPrice()
2019-04-03 14:56:53 -Mapped "{[/elec/elecUpLoad],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecUpLoadController.Elec()
2019-04-03 14:56:53 -Mapped "{[/elec/elecUpLoad/importElecExcel],methods=[POST]}" onto public java.util.Map<java.lang.String, java.lang.Object> com.bootdo.elec.controller.ElecUpLoadController.importElecExcel(org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpServletRequest) throws java.lang.Exception
2019-04-03 14:56:53 -Mapped "{[/heat/heat/add],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatController.add()
2019-04-03 14:56:53 -Mapped "{[/heat/heat/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatController.remove(java.lang.Integer)
2019-04-03 14:56:53 -Mapped "{[/heat/heat/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatController.remove(java.lang.Integer[])
2019-04-03 14:56:53 -Mapped "{[/heat/heat/update]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatController.update(com.bootdo.heat.domain.HeatDO)
2019-04-03 14:56:53 -Mapped "{[/heat/heat/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.heat.controller.HeatController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 14:56:53 -Mapped "{[/heat/heat/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatController.save(com.bootdo.heat.domain.HeatDO)
2019-04-03 14:56:53 -Mapped "{[/heat/heat/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatController.edit(java.lang.Integer,org.springframework.ui.Model)
2019-04-03 14:56:53 -Mapped "{[/heat/heat/exprotHeat],methods=[GET]}" onto public void com.bootdo.heat.controller.HeatController.exprotExcel(com.bootdo.heat.vo.HeatVo,javax.servlet.http.HttpServletResponse)
2019-04-03 14:56:53 -Mapped "{[/heat/heat],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatController.Heat()
2019-04-03 14:56:53 -Mapped "{[/heat/heatInto/exprotHeatIntoExcel],methods=[GET]}" onto public void com.bootdo.heat.controller.HeatIntoController.exprotExcel(com.bootdo.heat.vo.HeatVo,javax.servlet.http.HttpServletResponse)
2019-04-03 14:56:53 -Mapped "{[/heat/heatInto],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatIntoController.HeatInto()
2019-04-03 14:56:53 -Mapped "{[/heat/heatPrice/add],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatPriceController.add()
2019-04-03 14:56:53 -Mapped "{[/heat/heatPrice/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatPriceController.remove(java.lang.Long)
2019-04-03 14:56:53 -Mapped "{[/heat/heatPrice/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatPriceController.remove(java.lang.Long[])
2019-04-03 14:56:53 -Mapped "{[/heat/heatPrice/update]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatPriceController.update(com.bootdo.heat.domain.HeatPriceDO)
2019-04-03 14:56:53 -Mapped "{[/heat/heatPrice/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.heat.controller.HeatPriceController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 14:56:53 -Mapped "{[/heat/heatPrice/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatPriceController.save(com.bootdo.heat.domain.HeatPriceDO)
2019-04-03 14:56:53 -Mapped "{[/heat/heatPrice/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatPriceController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 14:56:53 -Mapped "{[/heat/heatPrice],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatPriceController.HeatPrice()
2019-04-03 14:56:53 -Mapped "{[/heat/heatUpLoad],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatUpLoadController.HeatUpLoad()
2019-04-03 14:56:53 -Mapped "{[/heat/heatUpLoad/createHeatExcel],methods=[POST]}" onto public java.lang.String com.bootdo.heat.controller.HeatUpLoadController.createHeatExcel(com.bootdo.heat.domain.HeatDO) throws java.lang.Exception
2019-04-03 14:56:53 -Mapped "{[/heat/heatUpLoad/importHeatExcel]}" onto public java.lang.String com.bootdo.heat.controller.HeatUpLoadController.importHeatExcel(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)
2019-04-03 14:56:53 -Mapped "{[/heat/heatUpLoad/exprotHeatExcel],methods=[GET]}" onto public void com.bootdo.heat.controller.HeatUpLoadController.exprotHeatExcel(com.bootdo.heat.vo.HeatVo,javax.servlet.http.HttpServletResponse)
2019-04-03 14:56:53 -Mapped "{[/moneyList/moneyList/queryAllUser],methods=[POST]}" onto public java.util.List<com.bootdo.moneyList.damain.MoneyListDO> com.bootdo.moneyList.controller.MoneyListController.queryAllUser(com.bootdo.moneyList.damain.MoneyListDO)
2019-04-03 14:56:53 -Mapped "{[/moneyList/moneyList/queryAllUserName],methods=[POST]}" onto public java.util.List<com.bootdo.moneyList.damain.MoneyListDO> com.bootdo.moneyList.controller.MoneyListController.getAllUserName(com.bootdo.moneyList.damain.MoneyListDO)
2019-04-03 14:56:53 -Mapped "{[/moneyList/moneyList],methods=[GET]}" onto java.lang.String com.bootdo.moneyList.controller.MoneyListController.MoneyList()
2019-04-03 14:56:53 -Mapped "{[/moneyList/moneyList/updateMoney],methods=[POST]}" onto public java.util.List<com.bootdo.moneyList.damain.MoneyListDO> com.bootdo.moneyList.controller.MoneyListController.updateMoney(com.bootdo.moneyList.damain.MoneyListDO)
2019-04-03 14:56:53 -Mapped "{[/moneyLog/elecLog/add],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.ElecLogController.add()
2019-04-03 14:56:53 -Mapped "{[/moneyLog/elecLog/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.ElecLogController.remove(java.lang.Long)
2019-04-03 14:56:53 -Mapped "{[/moneyLog/elecLog/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.ElecLogController.remove(java.lang.Long[])
2019-04-03 14:56:53 -Mapped "{[/moneyLog/elecLog/update]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.ElecLogController.update(com.bootdo.moneyLog.domain.ElecLogDO)
2019-04-03 14:56:53 -Mapped "{[/moneyLog/elecLog/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.moneyLog.controller.ElecLogController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 14:56:53 -Mapped "{[/moneyLog/elecLog/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.ElecLogController.save(com.bootdo.moneyLog.domain.ElecLogDO)
2019-04-03 14:56:53 -Mapped "{[/moneyLog/elecLog/exprotElecLog],methods=[GET]}" onto public void com.bootdo.moneyLog.controller.ElecLogController.exprotElecLog(com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-03 14:56:53 -Mapped "{[/moneyLog/elecLog/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.ElecLogController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 14:56:53 -Mapped "{[/moneyLog/elecLog],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.ElecLogController.moneyLog()
2019-04-03 14:56:53 -Mapped "{[/moneyLog/heatLog/add],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.HeatLogController.add()
2019-04-03 14:56:53 -Mapped "{[/moneyLog/heatLog/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.HeatLogController.remove(java.lang.Long)
2019-04-03 14:56:53 -Mapped "{[/moneyLog/heatLog/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.HeatLogController.remove(java.lang.Long[])
2019-04-03 14:56:53 -Mapped "{[/moneyLog/heatLog/update]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.HeatLogController.update(com.bootdo.moneyLog.domain.HeatLogDO)
2019-04-03 14:56:53 -Mapped "{[/moneyLog/heatLog/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.moneyLog.controller.HeatLogController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 14:56:53 -Mapped "{[/moneyLog/heatLog/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.HeatLogController.save(com.bootdo.moneyLog.domain.HeatLogDO)
2019-04-03 14:56:53 -Mapped "{[/moneyLog/heatLog/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.HeatLogController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 14:56:53 -Mapped "{[/moneyLog/heatLog/exprotHeatLog],methods=[GET]}" onto public void com.bootdo.moneyLog.controller.HeatLogController.exprotHeatLog(com.bootdo.moneyLog.vo.HeatLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-03 14:56:53 -Mapped "{[/moneyLog/heatLog],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.HeatLogController.HeatLog()
2019-04-03 14:56:53 -Mapped "{[/moneyLog/waterLog/add],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.WaterLogController.add()
2019-04-03 14:56:53 -Mapped "{[/moneyLog/waterLog/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.WaterLogController.remove(java.lang.Long)
2019-04-03 14:56:53 -Mapped "{[/moneyLog/waterLog/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.WaterLogController.remove(java.lang.Long[])
2019-04-03 14:56:53 -Mapped "{[/moneyLog/waterLog/update]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.WaterLogController.update(com.bootdo.moneyLog.domain.WaterLogDO)
2019-04-03 14:56:53 -Mapped "{[/moneyLog/waterLog/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.moneyLog.controller.WaterLogController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 14:56:53 -Mapped "{[/moneyLog/waterLog/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.WaterLogController.save(com.bootdo.moneyLog.domain.WaterLogDO)
2019-04-03 14:56:53 -Mapped "{[/moneyLog/waterLog],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.WaterLogController.WaterLog()
2019-04-03 14:56:53 -Mapped "{[/moneyLog/waterLog/exprotWaterLog],methods=[GET]}" onto public void com.bootdo.moneyLog.controller.WaterLogController.exprotWaterLog(com.bootdo.moneyLog.vo.WaterLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-03 14:56:53 -Mapped "{[/moneyLog/waterLog/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.WaterLogController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 14:56:53 -Mapped "{[/oa/notify/add],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.add()
2019-04-03 14:56:53 -Mapped "{[/oa/notify/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.remove(java.lang.Long)
2019-04-03 14:56:53 -Mapped "{[/oa/notify/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.remove(java.lang.Long[])
2019-04-03 14:56:53 -Mapped "{[/oa/notify/update]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.update(com.bootdo.oa.domain.NotifyDO)
2019-04-03 14:56:53 -Mapped "{[/oa/notify/read/{id}],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.read(java.lang.Long,org.springframework.ui.Model)
2019-04-03 14:56:53 -Mapped "{[/oa/notify/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.oa.controller.NotifyController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 14:56:53 -Mapped "{[/oa/notify/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.save(com.bootdo.oa.domain.NotifyDO)
2019-04-03 14:56:53 -Mapped "{[/oa/notify/message],methods=[GET]}" onto com.bootdo.common.utils.PageUtils com.bootdo.oa.controller.NotifyController.message()
2019-04-03 14:56:53 -Mapped "{[/oa/notify/selfList],methods=[GET]}" onto com.bootdo.common.utils.PageUtils com.bootdo.oa.controller.NotifyController.selfList(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 14:56:53 -Mapped "{[/oa/notify/selfNotify],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.selefNotify()
2019-04-03 14:56:53 -Mapped "{[/oa/notify],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.oaNotify()
2019-04-03 14:56:53 -Mapped "{[/oa/notify/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 14:56:53 -Mapped "{[/print/print/add],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.add()
2019-04-03 14:56:53 -Mapped "{[/print/print/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.print.controller.PrintController.remove(java.lang.Long)
2019-04-03 14:56:53 -Mapped "{[/print/print/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.print.controller.PrintController.remove(java.lang.Long[])
2019-04-03 14:56:53 -Mapped "{[/print/print/update]}" onto public com.bootdo.common.utils.R com.bootdo.print.controller.PrintController.update(com.bootdo.print.domain.PrintDO)
2019-04-03 14:56:53 -Mapped "{[/print/print/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.print.controller.PrintController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 14:56:53 -Mapped "{[/print/print/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.print.controller.PrintController.save(java.lang.String,com.bootdo.print.domain.PrintDO)
2019-04-03 14:56:53 -Mapped "{[/print/print],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.Print()
2019-04-03 14:56:53 -Mapped "{[/print/print/printEdit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.printEdit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 14:56:53 -Mapped "{[/print/print/exprotPrint],methods=[GET]}" onto public void com.bootdo.print.controller.PrintController.exprotPrint(com.bootdo.print.vo.PrintVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-03 14:56:53 -Mapped "{[/print/print/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 14:56:53 -Mapped "{[/system/sysDept/add/{pId}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.add(java.lang.Long,org.springframework.ui.Model)
2019-04-03 14:56:53 -Mapped "{[/system/sysDept/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.remove(java.lang.Long)
2019-04-03 14:56:53 -Mapped "{[/system/sysDept/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.remove(java.lang.Long[])
2019-04-03 14:56:53 -Mapped "{[/system/sysDept/update]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.update(com.bootdo.system.domain.DeptDO)
2019-04-03 14:56:53 -Mapped "{[/system/sysDept/list],methods=[GET]}" onto public java.util.List<com.bootdo.system.domain.DeptDO> com.bootdo.system.controller.DeptController.list()
2019-04-03 14:56:53 -Mapped "{[/system/sysDept/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.save(com.bootdo.system.domain.DeptDO)
2019-04-03 14:56:53 -Mapped "{[/system/sysDept/tree],methods=[GET]}" onto public com.bootdo.common.domain.Tree<com.bootdo.system.domain.DeptDO> com.bootdo.system.controller.DeptController.tree()
2019-04-03 14:56:53 -Mapped "{[/system/sysDept],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.dept()
2019-04-03 14:56:53 -Mapped "{[/system/sysDept/treeView],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.treeView()
2019-04-03 14:56:53 -Mapped "{[/system/sysDept/edit/{deptId}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 14:56:53 -Mapped "{[/index],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.index(org.springframework.ui.Model)
2019-04-03 14:56:53 -Mapped "{[/main],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.main()
2019-04-03 14:56:53 -Mapped "{[/logout],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.logout()
2019-04-03 14:56:53 -Mapped "{[/ || ],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.welcome(org.springframework.ui.Model)
2019-04-03 14:56:53 -Mapped "{[/getVerify],methods=[GET]}" onto public void com.bootdo.system.controller.LoginController.getVerify(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-04-03 14:56:53 -Mapped "{[/login],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.LoginController.ajaxLogin(java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest)
2019-04-03 14:56:53 -Mapped "{[/login],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.login(org.springframework.ui.Model)
2019-04-03 14:56:53 -Mapped "{[/sys/menu/add/{pId}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.MenuController.add(org.springframework.ui.Model,java.lang.Long)
2019-04-03 14:56:53 -Mapped "{[/sys/menu/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.MenuController.remove(java.lang.Long)
2019-04-03 14:56:53 -Mapped "{[/sys/menu/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.MenuController.update(com.bootdo.system.domain.MenuDO)
2019-04-03 14:56:53 -Mapped "{[/sys/menu/list]}" onto java.util.List<com.bootdo.system.domain.MenuDO> com.bootdo.system.controller.MenuController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 14:56:53 -Mapped "{[/sys/menu/save],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.MenuController.save(com.bootdo.system.domain.MenuDO)
2019-04-03 14:56:53 -Mapped "{[/sys/menu/tree/{roleId}],methods=[GET]}" onto com.bootdo.common.domain.Tree<com.bootdo.system.domain.MenuDO> com.bootdo.system.controller.MenuController.tree(java.lang.Long)
2019-04-03 14:56:53 -Mapped "{[/sys/menu/tree],methods=[GET]}" onto com.bootdo.common.domain.Tree<com.bootdo.system.domain.MenuDO> com.bootdo.system.controller.MenuController.tree()
2019-04-03 14:56:53 -Mapped "{[/sys/menu],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.MenuController.menu(org.springframework.ui.Model)
2019-04-03 14:56:53 -Mapped "{[/sys/menu/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.MenuController.edit(org.springframework.ui.Model,java.lang.Long)
2019-04-03 14:56:53 -Mapped "{[/sys/role/add],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.RoleController.add()
2019-04-03 14:56:53 -Mapped "{[/sys/role/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.update(com.bootdo.system.domain.RoleDO)
2019-04-03 14:56:53 -Mapped "{[/sys/role/list],methods=[GET]}" onto java.util.List<com.bootdo.system.domain.RoleDO> com.bootdo.system.controller.RoleController.list()
2019-04-03 14:56:53 -Mapped "{[/sys/role/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.save(java.lang.Long)
2019-04-03 14:56:53 -Mapped "{[/sys/role/save],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.save(com.bootdo.system.domain.RoleDO)
2019-04-03 14:56:53 -Mapped "{[/sys/role/batchRemove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.batchRemove(java.lang.Long[])
2019-04-03 14:56:53 -Mapped "{[/sys/role],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.RoleController.role()
2019-04-03 14:56:53 -Mapped "{[/sys/role/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.RoleController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 14:56:53 -Mapped "{[/sys/online/list]}" onto public java.util.List<com.bootdo.system.domain.UserOnline> com.bootdo.system.controller.SessionController.list()
2019-04-03 14:56:53 -Mapped "{[/sys/online/sessionList]}" onto public java.util.Collection<org.apache.shiro.session.Session> com.bootdo.system.controller.SessionController.sessionList()
2019-04-03 14:56:53 -Mapped "{[/sys/online/forceLogout/{sessionId}]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.SessionController.forceLogout(java.lang.String,org.springframework.web.servlet.mvc.support.RedirectAttributes)
2019-04-03 14:56:53 -Mapped "{[/sys/online],methods=[GET]}" onto public java.lang.String com.bootdo.system.controller.SessionController.online()
2019-04-03 14:56:54 -Mapped "{[/sys/user/exit],methods=[POST]}" onto boolean com.bootdo.system.controller.UserController.exit(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 14:56:54 -Mapped "{[/sys/user/add],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.add(org.springframework.ui.Model)
2019-04-03 14:56:54 -Mapped "{[/sys/user/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.remove(java.lang.Long)
2019-04-03 14:56:54 -Mapped "{[/sys/user/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.update(com.bootdo.system.domain.UserDO)
2019-04-03 14:56:54 -Mapped "{[/sys/user/list],methods=[GET]}" onto com.bootdo.common.utils.PageUtils com.bootdo.system.controller.UserController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 14:56:54 -Mapped "{[/sys/user/save],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.save(com.bootdo.system.domain.UserDO)
2019-04-03 14:56:54 -Mapped "{[/sys/user/batchRemove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.batchRemove(java.lang.Long[])
2019-04-03 14:56:54 -Mapped "{[/sys/user/tree],methods=[GET]}" onto public com.bootdo.common.domain.Tree<com.bootdo.system.domain.DeptDO> com.bootdo.system.controller.UserController.tree()
2019-04-03 14:56:54 -Mapped "{[/sys/user],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.user(org.springframework.ui.Model)
2019-04-03 14:56:54 -Mapped "{[/sys/user/treeView],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.treeView()
2019-04-03 14:56:54 -Mapped "{[/sys/user/updatePeronal],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.updatePeronal(com.bootdo.system.domain.UserDO)
2019-04-03 14:56:54 -Mapped "{[/sys/user/adminResetPwd],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.adminResetPwd(com.bootdo.system.vo.UserVO)
2019-04-03 14:56:54 -Mapped "{[/sys/user/uploadImg],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.uploadImg(org.springframework.web.multipart.MultipartFile,java.lang.String,javax.servlet.http.HttpServletRequest)
2019-04-03 14:56:54 -Mapped "{[/sys/user/personal],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.personal(org.springframework.ui.Model)
2019-04-03 14:56:54 -Mapped "{[/sys/user/resetPwd],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.resetPwd(com.bootdo.system.vo.UserVO)
2019-04-03 14:56:54 -Mapped "{[/sys/user/resetPwd/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.resetPwd(java.lang.Long,org.springframework.ui.Model)
2019-04-03 14:56:54 -Mapped "{[/sys/user/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.edit(org.springframework.ui.Model,java.lang.Long)
2019-04-03 14:56:54 -Mapped "{[/file/downImport/{importType}],methods=[GET]}" onto public void com.bootdo.temple.controller.TempletController.downImport(javax.servlet.http.HttpServletResponse,java.lang.String)
2019-04-03 14:56:54 -Mapped "{[/water/water/add],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterController.add()
2019-04-03 14:56:54 -Mapped "{[/water/water/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterController.remove(java.lang.Long)
2019-04-03 14:56:54 -Mapped "{[/water/water/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterController.remove(java.lang.Long[])
2019-04-03 14:56:54 -Mapped "{[/water/water/update]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterController.update(com.bootdo.water.domain.WaterDO)
2019-04-03 14:56:54 -Mapped "{[/water/water/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.water.controller.WaterController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 14:56:54 -Mapped "{[/water/water/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterController.save(com.bootdo.water.domain.WaterDO)
2019-04-03 14:56:54 -Mapped "{[/water/water/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 14:56:54 -Mapped "{[/water/water/exprotWater],methods=[GET]}" onto public void com.bootdo.water.controller.WaterController.exprotExcel(com.bootdo.water.vo.WaterVo,javax.servlet.http.HttpServletResponse)
2019-04-03 14:56:54 -Mapped "{[/water/water],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterController.Water()
2019-04-03 14:56:54 -Mapped "{[/water/waterInto/exprotWaterIntoExcel],methods=[GET]}" onto public void com.bootdo.water.controller.WaterIntoController.exprotExcel(com.bootdo.water.vo.WaterVo,javax.servlet.http.HttpServletResponse)
2019-04-03 14:56:54 -Mapped "{[/water/waterInto],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterIntoController.WaterInto()
2019-04-03 14:56:54 -Mapped "{[/water/waterPrice/add],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterPriceController.add()
2019-04-03 14:56:54 -Mapped "{[/water/waterPrice/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterPriceController.remove(java.lang.Long)
2019-04-03 14:56:54 -Mapped "{[/water/waterPrice/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterPriceController.remove(java.lang.Long[])
2019-04-03 14:56:54 -Mapped "{[/water/waterPrice/update]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterPriceController.update(com.bootdo.water.domain.WaterPriceDO)
2019-04-03 14:56:54 -Mapped "{[/water/waterPrice/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.water.controller.WaterPriceController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 14:56:54 -Mapped "{[/water/waterPrice/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterPriceController.save(com.bootdo.water.domain.WaterPriceDO)
2019-04-03 14:56:54 -Mapped "{[/water/waterPrice/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterPriceController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 14:56:54 -Mapped "{[/water/waterPrice],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterPriceController.WaterPrice()
2019-04-03 14:56:54 -Mapped "{[/water/waterUpLoad/createWaterExcel],methods=[POST]}" onto public java.lang.String com.bootdo.water.controller.WaterUpLoadController.createWaterExcel(com.bootdo.water.domain.WaterDO) throws java.lang.Exception
2019-04-03 14:56:54 -Mapped "{[/water/waterUpLoad],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterUpLoadController.WaterUpLoad()
2019-04-03 14:56:54 -Mapped "{[/water/waterUpLoad/importWaterExcel]}" onto public java.lang.String com.bootdo.water.controller.WaterUpLoadController.importWaterExcel(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)
2019-04-03 14:56:54 -Mapped "{[/water/waterUpLoad/exprotWaterExcel],methods=[GET]}" onto public void com.bootdo.water.controller.WaterUpLoadController.exprotWaterExcel(com.bootdo.water.vo.WaterVo,javax.servlet.http.HttpServletResponse)
2019-04-03 14:56:54 -Mapped "{[/v2/api-docs],methods=[GET],produces=[application/json || application/hal+json]}" onto public org.springframework.http.ResponseEntity<springfox.documentation.spring.web.json.Json> springfox.documentation.swagger2.web.Swagger2Controller.getDocumentation(java.lang.String,javax.servlet.http.HttpServletRequest)
2019-04-03 14:56:54 -Mapped "{[/swagger-resources/configuration/security]}" onto org.springframework.http.ResponseEntity<springfox.documentation.swagger.web.SecurityConfiguration> springfox.documentation.swagger.web.ApiResourceController.securityConfiguration()
2019-04-03 14:56:54 -Mapped "{[/swagger-resources]}" onto org.springframework.http.ResponseEntity<java.util.List<springfox.documentation.swagger.web.SwaggerResource>> springfox.documentation.swagger.web.ApiResourceController.swaggerResources()
2019-04-03 14:56:54 -Mapped "{[/swagger-resources/configuration/ui]}" onto org.springframework.http.ResponseEntity<springfox.documentation.swagger.web.UiConfiguration> springfox.documentation.swagger.web.ApiResourceController.uiConfiguration()
2019-04-03 14:56:54 -Initializing ExecutorService  'messageBrokerTaskScheduler'
2019-04-03 14:56:54 -Mapped URL path [/endpointChat/**] onto handler of type [class org.springframework.web.socket.sockjs.support.SockJsHttpRequestHandler]
2019-04-03 14:56:54 -Initializing ExecutorService  'brokerChannelExecutor'
2019-04-03 14:56:55 -Mapped URL path [/**/favicon.ico] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-04-03 14:56:55 -Looking for @ControllerAdvice: org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@6fdbe764: startup date [Wed Apr 03 14:56:38 CST 2019]; root of context hierarchy
2019-04-03 14:56:55 -Mapped URL path [/webjars/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-04-03 14:56:55 -Mapped URL path [/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-04-03 14:56:55 -Mapped URL path [/files/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-04-03 14:56:55 -Detected @ExceptionHandler methods in BDExceptionHandler
2019-04-03 14:56:55 -[THYMELEAF][main] Template Mode 'LEGACYHTML5' is deprecated. Using Template Mode 'HTML' instead.
2019-04-03 14:56:57 -Registering beans for JMX exposure on startup
2019-04-03 14:56:57 -Bean with name 'dataSource' has been autodetected for JMX exposure
2019-04-03 14:56:57 -Located MBean 'dataSource': registering with JMX server as MBean [com.alibaba.druid.pool:name=dataSource,type=DruidDataSource]
2019-04-03 14:56:57 -Starting beans in phase 2147483647
2019-04-03 14:56:57 -Context refreshed
2019-04-03 14:56:57 -Found 1 custom documentation plugin(s)
2019-04-03 14:56:57 -Scanning for api listing references
2019-04-03 14:56:57 -Generating unique operation named: exprotElecLogUsingGET_1
2019-04-03 14:56:57 -Generating unique operation named: getCountDUsingPOST_1
2019-04-03 14:56:57 -Generating unique operation named: exprotElecLogUsingGET_2
2019-04-03 14:56:58 -Generating unique operation named: getCountDUsingPOST_2
2019-04-03 14:56:58 -Generating unique operation named: exprotElecLogUsingGET_3
2019-04-03 14:56:58 -Generating unique operation named: getCountDUsingPOST_3
2019-04-03 14:56:58 -Generating unique operation named: removeUsingPOST_1
2019-04-03 14:56:58 -Generating unique operation named: addUsingGET_1
2019-04-03 14:56:58 -Generating unique operation named: editUsingGET_1
2019-04-03 14:56:58 -Generating unique operation named: listUsingGET_1
2019-04-03 14:56:58 -Generating unique operation named: removeUsingPOST_2
2019-04-03 14:56:58 -Generating unique operation named: removeUsingPOST_3
2019-04-03 14:56:58 -Generating unique operation named: saveUsingPOST_1
2019-04-03 14:56:58 -Generating unique operation named: updateUsingGET_1
2019-04-03 14:56:58 -Generating unique operation named: updateUsingHEAD_1
2019-04-03 14:56:58 -Generating unique operation named: updateUsingPOST_1
2019-04-03 14:56:58 -Generating unique operation named: updateUsingPUT_1
2019-04-03 14:56:58 -Generating unique operation named: updateUsingPATCH_1
2019-04-03 14:56:58 -Generating unique operation named: updateUsingDELETE_1
2019-04-03 14:56:58 -Generating unique operation named: updateUsingOPTIONS_1
2019-04-03 14:56:58 -Generating unique operation named: updateUsingTRACE_1
2019-04-03 14:56:58 -Generating unique operation named: addUsingGET_2
2019-04-03 14:56:58 -Generating unique operation named: editUsingGET_2
2019-04-03 14:56:58 -Generating unique operation named: listUsingGET_2
2019-04-03 14:56:58 -Generating unique operation named: removeUsingPOST_4
2019-04-03 14:56:58 -Generating unique operation named: removeUsingPOST_5
2019-04-03 14:56:58 -Generating unique operation named: saveUsingPOST_2
2019-04-03 14:56:58 -Generating unique operation named: updateUsingPOST_2
2019-04-03 14:56:58 -Generating unique operation named: exprotExcelUsingGET_1
2019-04-03 14:56:58 -Generating unique operation named: addUsingGET_3
2019-04-03 14:56:58 -Generating unique operation named: editUsingGET_3
2019-04-03 14:56:58 -Generating unique operation named: exprotElecLogUsingGET_4
2019-04-03 14:56:58 -Generating unique operation named: listUsingGET_3
2019-04-03 14:56:58 -Generating unique operation named: removeUsingPOST_6
2019-04-03 14:56:58 -Generating unique operation named: removeUsingPOST_7
2019-04-03 14:56:58 -Generating unique operation named: saveUsingPOST_3
2019-04-03 14:56:58 -Generating unique operation named: updateUsingGET_2
2019-04-03 14:56:58 -Generating unique operation named: updateUsingHEAD_2
2019-04-03 14:56:58 -Generating unique operation named: updateUsingPOST_3
2019-04-03 14:56:58 -Generating unique operation named: updateUsingPUT_2
2019-04-03 14:56:58 -Generating unique operation named: updateUsingPATCH_2
2019-04-03 14:56:58 -Generating unique operation named: updateUsingDELETE_2
2019-04-03 14:56:58 -Generating unique operation named: updateUsingOPTIONS_2
2019-04-03 14:56:58 -Generating unique operation named: updateUsingTRACE_2
2019-04-03 14:56:58 -Generating unique operation named: addUsingGET_4
2019-04-03 14:56:58 -Generating unique operation named: editUsingGET_4
2019-04-03 14:56:58 -Generating unique operation named: listUsingGET_4
2019-04-03 14:56:58 -Generating unique operation named: removeUsingPOST_8
2019-04-03 14:56:58 -Generating unique operation named: removeUsingPOST_9
2019-04-03 14:56:58 -Generating unique operation named: saveUsingPOST_4
2019-04-03 14:56:58 -Generating unique operation named: updateUsingGET_3
2019-04-03 14:56:58 -Generating unique operation named: updateUsingHEAD_3
2019-04-03 14:56:58 -Generating unique operation named: updateUsingPOST_4
2019-04-03 14:56:58 -Generating unique operation named: updateUsingPUT_3
2019-04-03 14:56:58 -Generating unique operation named: updateUsingPATCH_3
2019-04-03 14:56:58 -Generating unique operation named: updateUsingDELETE_3
2019-04-03 14:56:58 -Generating unique operation named: updateUsingOPTIONS_3
2019-04-03 14:56:58 -Generating unique operation named: updateUsingTRACE_3
2019-04-03 14:56:58 -Generating unique operation named: ElecUsingGET_1
2019-04-03 14:56:58 -Generating unique operation named: addUsingGET_5
2019-04-03 14:56:58 -Generating unique operation named: editUsingGET_5
2019-04-03 14:56:58 -Generating unique operation named: listUsingGET_5
2019-04-03 14:56:58 -Generating unique operation named: removeUsingPOST_10
2019-04-03 14:56:58 -Generating unique operation named: removeUsingPOST_11
2019-04-03 14:56:58 -Generating unique operation named: saveUsingPOST_5
2019-04-03 14:56:58 -Generating unique operation named: updateUsingGET_4
2019-04-03 14:56:58 -Generating unique operation named: updateUsingHEAD_4
2019-04-03 14:56:58 -Generating unique operation named: updateUsingPOST_5
2019-04-03 14:56:58 -Generating unique operation named: updateUsingPUT_4
2019-04-03 14:56:58 -Generating unique operation named: updateUsingPATCH_4
2019-04-03 14:56:58 -Generating unique operation named: updateUsingDELETE_4
2019-04-03 14:56:58 -Generating unique operation named: updateUsingOPTIONS_4
2019-04-03 14:56:58 -Generating unique operation named: updateUsingTRACE_4
2019-04-03 14:56:58 -Generating unique operation named: editUsingGET_6
2019-04-03 14:56:58 -Generating unique operation named: listUsingGET_6
2019-04-03 14:56:58 -Generating unique operation named: updateUsingPOST_6
2019-04-03 14:56:58 -Generating unique operation named: addUsingGET_6
2019-04-03 14:56:58 -Generating unique operation named: editUsingGET_7
2019-04-03 14:56:58 -Generating unique operation named: exprotExcelUsingGET_2
2019-04-03 14:56:58 -Generating unique operation named: listUsingGET_7
2019-04-03 14:56:58 -Generating unique operation named: removeUsingPOST_12
2019-04-03 14:56:58 -Generating unique operation named: removeUsingPOST_13
2019-04-03 14:56:58 -Generating unique operation named: saveUsingPOST_6
2019-04-03 14:56:58 -Generating unique operation named: updateUsingGET_5
2019-04-03 14:56:58 -Generating unique operation named: updateUsingHEAD_5
2019-04-03 14:56:58 -Generating unique operation named: updateUsingPOST_7
2019-04-03 14:56:58 -Generating unique operation named: updateUsingPUT_5
2019-04-03 14:56:58 -Generating unique operation named: updateUsingPATCH_5
2019-04-03 14:56:58 -Generating unique operation named: updateUsingDELETE_5
2019-04-03 14:56:58 -Generating unique operation named: updateUsingOPTIONS_5
2019-04-03 14:56:58 -Generating unique operation named: updateUsingTRACE_5
2019-04-03 14:56:58 -Generating unique operation named: exprotExcelUsingGET_3
2019-04-03 14:56:58 -Generating unique operation named: addUsingGET_7
2019-04-03 14:56:58 -Generating unique operation named: editUsingGET_8
2019-04-03 14:56:58 -Generating unique operation named: listUsingGET_8
2019-04-03 14:56:58 -Generating unique operation named: removeUsingPOST_14
2019-04-03 14:56:58 -Generating unique operation named: removeUsingPOST_15
2019-04-03 14:56:58 -Generating unique operation named: saveUsingPOST_7
2019-04-03 14:56:58 -Generating unique operation named: updateUsingGET_6
2019-04-03 14:56:58 -Generating unique operation named: updateUsingHEAD_6
2019-04-03 14:56:58 -Generating unique operation named: updateUsingPOST_8
2019-04-03 14:56:58 -Generating unique operation named: updateUsingPUT_6
2019-04-03 14:56:58 -Generating unique operation named: updateUsingPATCH_6
2019-04-03 14:56:58 -Generating unique operation named: updateUsingDELETE_6
2019-04-03 14:56:58 -Generating unique operation named: updateUsingOPTIONS_6
2019-04-03 14:56:58 -Generating unique operation named: updateUsingTRACE_6
2019-04-03 14:56:58 -Generating unique operation named: addUsingGET_8
2019-04-03 14:56:58 -Generating unique operation named: editUsingGET_9
2019-04-03 14:56:58 -Generating unique operation named: listUsingGET_9
2019-04-03 14:56:58 -Generating unique operation named: removeUsingPOST_16
2019-04-03 14:56:58 -Generating unique operation named: removeUsingPOST_17
2019-04-03 14:56:58 -Generating unique operation named: saveUsingPOST_8
2019-04-03 14:56:58 -Generating unique operation named: updateUsingGET_7
2019-04-03 14:56:59 -Generating unique operation named: updateUsingHEAD_7
2019-04-03 14:56:59 -Generating unique operation named: updateUsingPOST_9
2019-04-03 14:56:59 -Generating unique operation named: updateUsingPUT_7
2019-04-03 14:56:59 -Generating unique operation named: updateUsingPATCH_7
2019-04-03 14:56:59 -Generating unique operation named: updateUsingDELETE_7
2019-04-03 14:56:59 -Generating unique operation named: updateUsingOPTIONS_7
2019-04-03 14:56:59 -Generating unique operation named: updateUsingTRACE_7
2019-04-03 14:56:59 -Generating unique operation named: addUsingGET_9
2019-04-03 14:56:59 -Generating unique operation named: editUsingGET_10
2019-04-03 14:56:59 -Generating unique operation named: infoUsingGET_1
2019-04-03 14:56:59 -Generating unique operation named: infoUsingHEAD_1
2019-04-03 14:56:59 -Generating unique operation named: infoUsingPOST_1
2019-04-03 14:56:59 -Generating unique operation named: infoUsingPUT_1
2019-04-03 14:56:59 -Generating unique operation named: infoUsingPATCH_1
2019-04-03 14:56:59 -Generating unique operation named: infoUsingDELETE_1
2019-04-03 14:56:59 -Generating unique operation named: infoUsingOPTIONS_1
2019-04-03 14:56:59 -Generating unique operation named: infoUsingTRACE_1
2019-04-03 14:56:59 -Generating unique operation named: listUsingGET_10
2019-04-03 14:56:59 -Generating unique operation named: removeUsingPOST_18
2019-04-03 14:56:59 -Generating unique operation named: removeUsingPOST_19
2019-04-03 14:56:59 -Generating unique operation named: saveUsingPOST_9
2019-04-03 14:56:59 -Generating unique operation named: updateUsingPOST_10
2019-04-03 14:56:59 -Generating unique operation named: listUsingGET_11
2019-04-03 14:56:59 -Generating unique operation named: removeUsingPOST_20
2019-04-03 14:56:59 -Generating unique operation named: welcomeUsingGET_1
2019-04-03 14:56:59 -Generating unique operation named: addUsingGET_10
2019-04-03 14:56:59 -Generating unique operation named: editUsingGET_11
2019-04-03 14:56:59 -Generating unique operation named: listUsingGET_12
2019-04-03 14:56:59 -Generating unique operation named: removeUsingPOST_21
2019-04-03 14:56:59 -Generating unique operation named: saveUsingPOST_10
2019-04-03 14:56:59 -Generating unique operation named: treeUsingGET_1
2019-04-03 14:56:59 -Generating unique operation named: treeUsingGET_2
2019-04-03 14:56:59 -Generating unique operation named: updateUsingPOST_11
2019-04-03 14:56:59 -Generating unique operation named: addUsingGET_11
2019-04-03 14:56:59 -Generating unique operation named: editUsingGET_12
2019-04-03 14:56:59 -Generating unique operation named: listUsingGET_13
2019-04-03 14:56:59 -Generating unique operation named: removeUsingPOST_22
2019-04-03 14:56:59 -Generating unique operation named: removeUsingPOST_23
2019-04-03 14:56:59 -Generating unique operation named: saveUsingPOST_11
2019-04-03 14:56:59 -Generating unique operation named: updateUsingGET_8
2019-04-03 14:56:59 -Generating unique operation named: updateUsingHEAD_8
2019-04-03 14:56:59 -Generating unique operation named: updateUsingPOST_12
2019-04-03 14:56:59 -Generating unique operation named: updateUsingPUT_8
2019-04-03 14:56:59 -Generating unique operation named: updateUsingPATCH_8
2019-04-03 14:56:59 -Generating unique operation named: updateUsingDELETE_8
2019-04-03 14:56:59 -Generating unique operation named: updateUsingOPTIONS_8
2019-04-03 14:56:59 -Generating unique operation named: updateUsingTRACE_8
2019-04-03 14:56:59 -Generating unique operation named: addUsingGET_12
2019-04-03 14:56:59 -Generating unique operation named: editUsingGET_13
2019-04-03 14:56:59 -Generating unique operation named: listUsingGET_14
2019-04-03 14:56:59 -Generating unique operation named: removeUsingPOST_24
2019-04-03 14:56:59 -Generating unique operation named: removeUsingPOST_25
2019-04-03 14:56:59 -Generating unique operation named: saveUsingPOST_12
2019-04-03 14:56:59 -Generating unique operation named: updateUsingGET_9
2019-04-03 14:56:59 -Generating unique operation named: updateUsingHEAD_9
2019-04-03 14:56:59 -Generating unique operation named: updateUsingPOST_13
2019-04-03 14:56:59 -Generating unique operation named: updateUsingPUT_9
2019-04-03 14:56:59 -Generating unique operation named: updateUsingPATCH_9
2019-04-03 14:56:59 -Generating unique operation named: updateUsingDELETE_9
2019-04-03 14:56:59 -Generating unique operation named: updateUsingOPTIONS_9
2019-04-03 14:56:59 -Generating unique operation named: updateUsingTRACE_9
2019-04-03 14:56:59 -Generating unique operation named: addUsingGET_13
2019-04-03 14:56:59 -Generating unique operation named: batchRemoveUsingPOST_1
2019-04-03 14:56:59 -Generating unique operation named: editUsingGET_14
2019-04-03 14:56:59 -Generating unique operation named: listUsingGET_15
2019-04-03 14:56:59 -Generating unique operation named: saveUsingPOST_13
2019-04-03 14:56:59 -Generating unique operation named: saveUsingPOST_14
2019-04-03 14:56:59 -Generating unique operation named: updateUsingPOST_14
2019-04-03 14:56:59 -Generating unique operation named: listUsingGET_16
2019-04-03 14:56:59 -Generating unique operation named: listUsingHEAD_1
2019-04-03 14:56:59 -Generating unique operation named: listUsingPOST_1
2019-04-03 14:56:59 -Generating unique operation named: listUsingPUT_1
2019-04-03 14:56:59 -Generating unique operation named: listUsingPATCH_1
2019-04-03 14:56:59 -Generating unique operation named: listUsingDELETE_1
2019-04-03 14:56:59 -Generating unique operation named: listUsingOPTIONS_1
2019-04-03 14:56:59 -Generating unique operation named: listUsingTRACE_1
2019-04-03 14:56:59 -Generating unique operation named: addUsingGET_14
2019-04-03 14:56:59 -Generating unique operation named: batchRemoveUsingPOST_2
2019-04-03 14:56:59 -Generating unique operation named: editUsingGET_15
2019-04-03 14:56:59 -Generating unique operation named: listUsingGET_17
2019-04-03 14:56:59 -Generating unique operation named: removeUsingPOST_26
2019-04-03 14:56:59 -Generating unique operation named: saveUsingPOST_15
2019-04-03 14:56:59 -Generating unique operation named: treeUsingGET_3
2019-04-03 14:56:59 -Generating unique operation named: treeViewUsingGET_1
2019-04-03 14:56:59 -Generating unique operation named: updateUsingPOST_15
2019-04-03 14:56:59 -Generating unique operation named: addUsingGET_15
2019-04-03 14:56:59 -Generating unique operation named: editUsingGET_16
2019-04-03 14:56:59 -Generating unique operation named: exprotExcelUsingGET_4
2019-04-03 14:56:59 -Generating unique operation named: listUsingGET_18
2019-04-03 14:56:59 -Generating unique operation named: removeUsingPOST_27
2019-04-03 14:56:59 -Generating unique operation named: removeUsingPOST_28
2019-04-03 14:56:59 -Generating unique operation named: saveUsingPOST_16
2019-04-03 14:56:59 -Generating unique operation named: updateUsingGET_10
2019-04-03 14:56:59 -Generating unique operation named: updateUsingHEAD_10
2019-04-03 14:56:59 -Generating unique operation named: updateUsingPOST_16
2019-04-03 14:56:59 -Generating unique operation named: updateUsingPUT_10
2019-04-03 14:56:59 -Generating unique operation named: updateUsingPATCH_10
2019-04-03 14:56:59 -Generating unique operation named: updateUsingDELETE_10
2019-04-03 14:56:59 -Generating unique operation named: updateUsingOPTIONS_10
2019-04-03 14:56:59 -Generating unique operation named: updateUsingTRACE_10
2019-04-03 14:56:59 -Generating unique operation named: exprotExcelUsingGET_5
2019-04-03 14:56:59 -Generating unique operation named: addUsingGET_16
2019-04-03 14:56:59 -Generating unique operation named: editUsingGET_17
2019-04-03 14:56:59 -Generating unique operation named: listUsingGET_19
2019-04-03 14:56:59 -Generating unique operation named: removeUsingPOST_29
2019-04-03 14:56:59 -Generating unique operation named: removeUsingPOST_30
2019-04-03 14:56:59 -Generating unique operation named: saveUsingPOST_17
2019-04-03 14:56:59 -Generating unique operation named: updateUsingGET_11
2019-04-03 14:56:59 -Generating unique operation named: updateUsingHEAD_11
2019-04-03 14:56:59 -Generating unique operation named: updateUsingPOST_17
2019-04-03 14:56:59 -Generating unique operation named: updateUsingPUT_11
2019-04-03 14:56:59 -Generating unique operation named: updateUsingPATCH_11
2019-04-03 14:56:59 -Generating unique operation named: updateUsingDELETE_11
2019-04-03 14:56:59 -Generating unique operation named: updateUsingOPTIONS_11
2019-04-03 14:56:59 -Generating unique operation named: updateUsingTRACE_11
2019-04-03 14:56:59 -Generating unique operation named: addUsingGET_17
2019-04-03 14:56:59 -Generating unique operation named: editUsingGET_18
2019-04-03 14:56:59 -Generating unique operation named: listUsingGET_20
2019-04-03 14:56:59 -Generating unique operation named: removeUsingPOST_31
2019-04-03 14:56:59 -Generating unique operation named: removeUsingPOST_32
2019-04-03 14:56:59 -Generating unique operation named: saveUsingPOST_18
2019-04-03 14:56:59 -Generating unique operation named: updateUsingGET_12
2019-04-03 14:56:59 -Generating unique operation named: updateUsingHEAD_12
2019-04-03 14:56:59 -Generating unique operation named: updateUsingPOST_18
2019-04-03 14:56:59 -Generating unique operation named: updateUsingPUT_12
2019-04-03 14:56:59 -Generating unique operation named: updateUsingPATCH_12
2019-04-03 14:56:59 -Generating unique operation named: updateUsingDELETE_12
2019-04-03 14:56:59 -Generating unique operation named: updateUsingOPTIONS_12
2019-04-03 14:56:59 -Generating unique operation named: updateUsingTRACE_12
2019-04-03 14:56:59 -Starting Quartz Scheduler now
2019-04-03 14:56:59 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED started.
2019-04-03 14:56:59 -Starting...
2019-04-03 14:56:59 -BrokerAvailabilityEvent[available=true, SimpleBrokerMessageHandler [DefaultSubscriptionRegistry[cache[0 destination(s)], registry[0 sessions]]]]
2019-04-03 14:56:59 -Started.
2019-04-03 14:57:00 -Starting ProtocolHandler ["http-nio-8081"]
2019-04-03 14:57:00 -Using a shared selector for servlet write/read
2019-04-03 14:57:00 -Tomcat started on port(s): 8081 (http) with context path ''
2019-04-03 14:57:00 -Started BootdoApplication in 22.476 seconds (JVM running for 23.352)
2019-04-03 14:57:00 -==>  Preparing: select `id`,`cron_expression`,`method_name`,`is_concurrent`,`description`,`update_by`,`bean_class`,`create_date`,`job_status`,`job_group`,`update_date`,`create_by`,`spring_bean`,`job_name` from sys_task order by id desc 
2019-04-03 14:57:00 -==> Parameters: 
2019-04-03 14:57:00 -<==      Total: 1
2019-04-03 14:57:46 -Initializing Spring FrameworkServlet 'dispatcherServlet'
2019-04-03 14:57:46 -FrameworkServlet 'dispatcherServlet': initialization started
2019-04-03 14:57:46 -FrameworkServlet 'dispatcherServlet': initialization completed in 65 ms
2019-04-03 14:57:46 -Enabling session validation scheduler...
2019-04-03 14:57:46 -请求地址 : http://localhost:8081/login;JSESSIONID=7bd031b3-2455-43b7-a23b-6e520b282e3c
2019-04-03 14:57:46 -HTTP METHOD : GET
2019-04-03 14:57:46 -CLASS_METHOD : com.bootdo.system.controller.LoginController.login
2019-04-03 14:57:46 -参数 : [{}]
2019-04-03 14:57:46 -耗时 : 7
2019-04-03 14:57:46 -返回值 : login
2019-04-03 14:57:47 -请求地址 : http://localhost:8081/getVerify
2019-04-03 14:57:47 -HTTP METHOD : GET
2019-04-03 14:57:47 -CLASS_METHOD : com.bootdo.system.controller.LoginController.getVerify
2019-04-03 14:57:47 -参数 : [org.apache.shiro.web.servlet.ShiroHttpServletRequest@6405ac41, org.apache.shiro.web.servlet.ShiroHttpServletResponse@380e687]
2019-04-03 14:57:52 -7754
2019-04-03 14:57:52 -耗时 : 4413
2019-04-03 14:57:52 -返回值 : null
2019-04-03 14:57:52 -请求地址 : http://localhost:8081/login
2019-04-03 14:57:52 -HTTP METHOD : GET
2019-04-03 14:57:52 -CLASS_METHOD : com.bootdo.system.controller.LoginController.login
2019-04-03 14:57:52 -参数 : [{}]
2019-04-03 14:57:52 -耗时 : 1
2019-04-03 14:57:52 -返回值 : login
2019-04-03 14:57:54 -WebSocketSession[0 current WS(0)-HttpStream(0)-HttpPoll(0), 0 total, 0 closed abnormally (0 connect failure, 0 send limit, 0 transport error)], stompSubProtocol[processed CONNECT(0)-CONNECTED(0)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], outboundChannelpool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], sockJsScheduler[pool size = 1, active threads = 1, queued tasks = 0, completed tasks = 0]
2019-04-03 14:57:56 -请求地址 : http://localhost:8081/login
2019-04-03 14:57:56 -HTTP METHOD : POST
2019-04-03 14:57:56 -CLASS_METHOD : com.bootdo.system.controller.LoginController.ajaxLogin
2019-04-03 14:57:56 -参数 : [admin, 111111, 7754, org.apache.shiro.web.servlet.ShiroHttpServletRequest@5cb29e69]
2019-04-03 14:57:57 -==>  Preparing: select `user_id`,`username`,`name`,`password`,`dept_id`,`email`,`mobile`,`status`,`user_id_create`,`gmt_create`,`gmt_modified`,`sex`,`birth`,`pic_id`,`live_address`,`hobby`,`province`,`city`,`district` from sys_user WHERE username = ? order by user_id desc 
2019-04-03 14:57:57 -==> Parameters: admin(String)
2019-04-03 14:57:57 -<==      Total: 1
2019-04-03 14:57:57 -耗时 : 575
2019-04-03 14:57:57 -返回值 : {msg=操作成功, code=0}
2019-04-03 14:57:57 -More than one TaskExecutor bean found within the context, and none is named 'taskExecutor'. Mark one of them as primary or name it 'taskExecutor' (possibly as an alias) in order to use it for async processing: [clientInboundChannelExecutor, clientOutboundChannelExecutor, brokerChannelExecutor, messageBrokerTaskScheduler]
2019-04-03 14:57:57 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 14:57:57 -==> Parameters: 1(Long), admin(String), 登录(String), 575(Integer), com.bootdo.system.controller.LoginController.ajaxLogin()(String), null, 127.0.0.1(String), 2019-04-03 14:57:57.633(Timestamp)
2019-04-03 14:57:57 -请求地址 : http://localhost:8081/index
2019-04-03 14:57:57 -HTTP METHOD : GET
2019-04-03 14:57:57 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2019-04-03 14:57:57 -参数 : [{}]
2019-04-03 14:57:57 -<==    Updates: 1
2019-04-03 14:57:57 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2019-04-03 14:57:58 -==> Parameters: 1(Long)
2019-04-03 14:57:58 -<==      Total: 46
2019-04-03 14:57:58 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2019-04-03 14:57:58 -==> Parameters: 138(Long)
2019-04-03 14:57:58 -<==      Total: 1
2019-04-03 14:57:58 -耗时 : 691
2019-04-03 14:57:58 -返回值 : index_v1
2019-04-03 14:57:58 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 14:57:58 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 692(Integer), com.bootdo.system.controller.LoginController.index()(String), {"menus":[{"attributes":{"icon":"fa fa-money","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-money","url":"/moneyList/moneyList"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"102","parentId":"106","text":"现金缴费"},{"attributes":{"icon":"fa fa-book","url":"/moneyLog/elecLog"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"107","parentId":"106","text":"缴费记录"}],"hasChildren":true,"hasParent":false,"id":"106","parentId":"0","text":"收费管理"},{"attributes":{"icon":"fa fa-lightbulb-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/elec/elec"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"121","parentId":"103","text":"电费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"elec/elecInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"122","parentId":"103","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"elec/elecUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"123","parentId":"103","text":"电表上传"},{"attributes":{"icon":"fa fa-cc","url":"/elec/elecPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"124","parentId":"103","text":"电价管理"}],"hasChildren":true,"hasParent":false,"id":"103","parentId":"0","text":"电费管理"},{"attributes":{"icon":"fa fa-tint","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/water/water"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"117","parentId":"105","text":"水费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"water/waterInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"118","parentId":"105","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"water/waterUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"119","parentId":"105","text":"水费生成"},{"attributes":{"icon":"fa fa-cc","url":"/water/waterPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"120","parentId":"105","text":"水价管理"}],"hasChildren":true,"hasParent":false,"id":"105","parentId":"0","text":"水费管理"},{"attributes":{"icon":"fa fa-fire","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/heat/heat"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"113","parentId":"104","text":"暖费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"heat/heatInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"114","parentId":"104","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"heat/heatUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"115","parentId":"104","text":"暖费生成"},{"attributes":{"icon":"","url":"/heat/heatPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"116","parentId":"104","text":"暖价管理"}],"hasChildren":true,"hasParent":false,"id":"104","parentId":"0","text":"暖费管理"},{"attributes":{"icon":"fa fa-vcard-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-bomb","url":"/print/print"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"149","parentId":"108","text":"票据记录"}],"hasChildren":true,"hasParent":false,"id":"108","parentId":"0","text":"票据管理"},{"attributes":{"icon":"fa fa-bar-chart","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-area-chart","url":"/chart/graph_echarts.html"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","text":"百度chart"},{"attributes":{"icon":"fa fa-sun-o","url":"charts/countDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"109","parentId":"97","text":"日统计报表"},{"attributes":{"icon":"fa fa-registered","url":"charts/countMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"110","parentId":"97","text":"月统计报表"},{"attributes":{"icon":"fa fa-support","url":"charts/countYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"111","parentId":"97","text":"年统计报表"},{"attributes":{"icon":"fa fa-money","url":"charts/countOwe"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"155","parentId":"97","text":"欠费报表图"},{"attributes":{"icon":"fa fa-tachometer","url":"charts/countRun"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"112","parentId":"97","text":"走势图报表"}],"hasChildren":true,"hasParent":false,"id":"97","parentId":"0","text":"统计管理"},{"attributes":{"icon":"fa fa-bars","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-book","url":"/common/dict"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"78","parentId":"1","text":"数据字典"},{"attributes":{"icon":"fa fa-folder-open","url":"/common/sysFile"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"71","parentId":"1","text":"文件管理"}],"h(String), 127.0.0.1(String), 2019-04-03 14:57:58.526(Timestamp)
2019-04-03 14:57:58 -<==    Updates: 1
2019-04-03 14:57:58 -请求地址 : http://localhost:8081/main
2019-04-03 14:57:58 -HTTP METHOD : GET
2019-04-03 14:57:58 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 14:57:58 -参数 : []
2019-04-03 14:57:58 -耗时 : 0
2019-04-03 14:57:58 -返回值 : main
2019-04-03 14:57:59 -请求地址 : http://localhost:8081/oa/notify/message
2019-04-03 14:57:59 -HTTP METHOD : GET
2019-04-03 14:57:59 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2019-04-03 14:57:59 -参数 : []
2019-04-03 14:57:59 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2019-04-03 14:57:59 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2019-04-03 14:57:59 -请求地址 : http://localhost:8081/main
2019-04-03 14:57:59 -HTTP METHOD : GET
2019-04-03 14:57:59 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 14:57:59 -参数 : []
2019-04-03 14:57:59 -耗时 : 1
2019-04-03 14:57:59 -返回值 : main
2019-04-03 14:57:59 -<==      Total: 0
2019-04-03 14:57:59 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2019-04-03 14:57:59 -==> Parameters: 1(Long), 0(String)
2019-04-03 14:57:59 -<==      Total: 1
2019-04-03 14:57:59 -耗时 : 456
2019-04-03 14:57:59 -返回值 : com.bootdo.common.utils.PageUtils@90ebe73
2019-04-03 14:58:08 -==>  Preparing: select distinct m.perms from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id = ur.role_id where ur.user_id = ? 
2019-04-03 14:58:08 -==> Parameters: 1(Long)
2019-04-03 14:58:09 -<==      Total: 90
2019-04-03 14:58:09 -请求地址 : http://localhost:8081/moneyList/moneyList
2019-04-03 14:58:09 -HTTP METHOD : GET
2019-04-03 14:58:09 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.MoneyList
2019-04-03 14:58:09 -参数 : []
2019-04-03 14:58:09 -耗时 : 0
2019-04-03 14:58:09 -返回值 : /moneyList/moneyList
2019-04-03 14:58:24 -请求地址 : http://localhost:8081/system/sysDept/treeView
2019-04-03 14:58:24 -HTTP METHOD : GET
2019-04-03 14:58:24 -CLASS_METHOD : com.bootdo.system.controller.DeptController.treeView
2019-04-03 14:58:24 -参数 : []
2019-04-03 14:58:24 -耗时 : 1
2019-04-03 14:58:24 -返回值 : system/dept/deptTree
2019-04-03 14:58:24 -请求地址 : http://localhost:8081/system/sysDept/tree
2019-04-03 14:58:24 -HTTP METHOD : GET
2019-04-03 14:58:24 -CLASS_METHOD : com.bootdo.system.controller.DeptController.tree
2019-04-03 14:58:24 -参数 : []
2019-04-03 14:58:24 -==>  Preparing: select `dept_id`,`parent_id`,`name`,`order_num`,`del_flag` from sys_dept order by dept_id desc 
2019-04-03 14:58:24 -==> Parameters: 
2019-04-03 14:58:24 -<==      Total: 3
2019-04-03 14:58:24 -耗时 : 87
2019-04-03 14:58:24 -返回值 : {"checked":false,"children":[{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"3","parentId":"1","state":{"opened":true},"text":"牙星"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"2","parentId":"1","state":{"opened":true},"text":"五九"}],"hasChildren":true,"hasParent":false,"id":"1","parentId":"0","state":{"opened":true},"text":"总公司"}
2019-04-03 14:58:40 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUserName
2019-04-03 14:58:40 -HTTP METHOD : POST
2019-04-03 14:58:40 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.getAllUserName
2019-04-03 14:58:40 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@4b842a4]
2019-04-03 14:58:40 -==>  Preparing: select DISTINCT user_name from( select user_name from elec WHERE create_time = ? and user_name = ? and user_name like CONCAT(CONCAT('%',?,'%')) UNION ALL select user_name from heat WHERE create_time = ? and user_name = ? and user_name like CONCAT(CONCAT('%',?,'%')) UNION ALL select user_name from water WHERE create_time = ? and user_name = ? and user_name like CONCAT(CONCAT('%',?,'%')) )username 
2019-04-03 14:58:41 -==> Parameters: 2019-02(String), 姜(String), 姜(String), 2019-02(String), 姜(String), 姜(String), 2019-02(String), 姜(String), 姜(String)
2019-04-03 14:58:41 -<==      Total: 0
2019-04-03 14:58:41 -耗时 : 361
2019-04-03 14:58:41 -返回值 : []
2019-04-03 14:58:42 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUserName
2019-04-03 14:58:42 -HTTP METHOD : POST
2019-04-03 14:58:42 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.getAllUserName
2019-04-03 14:58:42 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@16c9c08b]
2019-04-03 14:58:42 -==>  Preparing: select DISTINCT user_name from( select user_name from elec WHERE create_time = ? and user_name = ? and user_name like CONCAT(CONCAT('%',?,'%')) UNION ALL select user_name from heat WHERE create_time = ? and user_name = ? and user_name like CONCAT(CONCAT('%',?,'%')) UNION ALL select user_name from water WHERE create_time = ? and user_name = ? and user_name like CONCAT(CONCAT('%',?,'%')) )username 
2019-04-03 14:58:42 -==> Parameters: 2019-02(String), 姜(String), 姜(String), 2019-02(String), 姜(String), 姜(String), 2019-02(String), 姜(String), 姜(String)
2019-04-03 14:58:42 -<==      Total: 0
2019-04-03 14:58:42 -耗时 : 5
2019-04-03 14:58:42 -返回值 : []
2019-04-03 14:58:43 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUserName
2019-04-03 14:58:43 -HTTP METHOD : POST
2019-04-03 14:58:43 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.getAllUserName
2019-04-03 14:58:43 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@6c16101a]
2019-04-03 14:58:43 -==>  Preparing: select DISTINCT user_name from( select user_name from elec WHERE create_time = ? and user_name = ? and user_name like CONCAT(CONCAT('%',?,'%')) UNION ALL select user_name from heat WHERE create_time = ? and user_name = ? and user_name like CONCAT(CONCAT('%',?,'%')) UNION ALL select user_name from water WHERE create_time = ? and user_name = ? and user_name like CONCAT(CONCAT('%',?,'%')) )username 
2019-04-03 14:58:43 -==> Parameters: 2019-02(String), 姜(String), 姜(String), 2019-02(String), 姜(String), 姜(String), 2019-02(String), 姜(String), 姜(String)
2019-04-03 14:58:43 -<==      Total: 0
2019-04-03 14:58:43 -耗时 : 6
2019-04-03 14:58:43 -返回值 : []
2019-04-03 14:58:46 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUserName
2019-04-03 14:58:46 -HTTP METHOD : POST
2019-04-03 14:58:46 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.getAllUserName
2019-04-03 14:58:46 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@3be20a08]
2019-04-03 14:58:46 -==>  Preparing: select DISTINCT user_name from( select user_name from elec WHERE create_time = ? and user_name = ? and user_name like CONCAT(CONCAT('%',?,'%')) UNION ALL select user_name from heat WHERE create_time = ? and user_name = ? and user_name like CONCAT(CONCAT('%',?,'%')) UNION ALL select user_name from water WHERE create_time = ? and user_name = ? and user_name like CONCAT(CONCAT('%',?,'%')) )username 
2019-04-03 14:58:46 -==> Parameters: 2019-02(String), 姜(String), 姜(String), 2019-02(String), 姜(String), 姜(String), 2019-02(String), 姜(String), 姜(String)
2019-04-03 14:58:46 -<==      Total: 0
2019-04-03 14:58:46 -耗时 : 4
2019-04-03 14:58:46 -返回值 : []
2019-04-03 14:59:52 -请求地址 : http://localhost:8081/index
2019-04-03 14:59:52 -HTTP METHOD : GET
2019-04-03 14:59:52 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2019-04-03 14:59:52 -参数 : [{}]
2019-04-03 14:59:52 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2019-04-03 14:59:52 -==> Parameters: 1(Long)
2019-04-03 14:59:52 -<==      Total: 46
2019-04-03 14:59:52 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2019-04-03 14:59:52 -==> Parameters: 138(Long)
2019-04-03 14:59:52 -<==      Total: 1
2019-04-03 14:59:52 -耗时 : 54
2019-04-03 14:59:52 -返回值 : index_v1
2019-04-03 14:59:52 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 14:59:52 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 55(Integer), com.bootdo.system.controller.LoginController.index()(String), {"menus":[{"attributes":{"icon":"fa fa-money","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-money","url":"/moneyList/moneyList"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"102","parentId":"106","text":"现金缴费"},{"attributes":{"icon":"fa fa-book","url":"/moneyLog/elecLog"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"107","parentId":"106","text":"缴费记录"}],"hasChildren":true,"hasParent":false,"id":"106","parentId":"0","text":"收费管理"},{"attributes":{"icon":"fa fa-lightbulb-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/elec/elec"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"121","parentId":"103","text":"电费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"elec/elecInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"122","parentId":"103","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"elec/elecUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"123","parentId":"103","text":"电表上传"},{"attributes":{"icon":"fa fa-cc","url":"/elec/elecPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"124","parentId":"103","text":"电价管理"}],"hasChildren":true,"hasParent":false,"id":"103","parentId":"0","text":"电费管理"},{"attributes":{"icon":"fa fa-tint","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/water/water"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"117","parentId":"105","text":"水费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"water/waterInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"118","parentId":"105","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"water/waterUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"119","parentId":"105","text":"水费生成"},{"attributes":{"icon":"fa fa-cc","url":"/water/waterPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"120","parentId":"105","text":"水价管理"}],"hasChildren":true,"hasParent":false,"id":"105","parentId":"0","text":"水费管理"},{"attributes":{"icon":"fa fa-fire","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/heat/heat"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"113","parentId":"104","text":"暖费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"heat/heatInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"114","parentId":"104","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"heat/heatUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"115","parentId":"104","text":"暖费生成"},{"attributes":{"icon":"","url":"/heat/heatPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"116","parentId":"104","text":"暖价管理"}],"hasChildren":true,"hasParent":false,"id":"104","parentId":"0","text":"暖费管理"},{"attributes":{"icon":"fa fa-vcard-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-bomb","url":"/print/print"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"149","parentId":"108","text":"票据记录"}],"hasChildren":true,"hasParent":false,"id":"108","parentId":"0","text":"票据管理"},{"attributes":{"icon":"fa fa-bar-chart","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-area-chart","url":"/chart/graph_echarts.html"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","text":"百度chart"},{"attributes":{"icon":"fa fa-sun-o","url":"charts/countDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"109","parentId":"97","text":"日统计报表"},{"attributes":{"icon":"fa fa-registered","url":"charts/countMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"110","parentId":"97","text":"月统计报表"},{"attributes":{"icon":"fa fa-support","url":"charts/countYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"111","parentId":"97","text":"年统计报表"},{"attributes":{"icon":"fa fa-money","url":"charts/countOwe"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"155","parentId":"97","text":"欠费报表图"},{"attributes":{"icon":"fa fa-tachometer","url":"charts/countRun"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"112","parentId":"97","text":"走势图报表"}],"hasChildren":true,"hasParent":false,"id":"97","parentId":"0","text":"统计管理"},{"attributes":{"icon":"fa fa-bars","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-book","url":"/common/dict"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"78","parentId":"1","text":"数据字典"},{"attributes":{"icon":"fa fa-folder-open","url":"/common/sysFile"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"71","parentId":"1","text":"文件管理"}],"h(String), 127.0.0.1(String), 2019-04-03 14:59:52.814(Timestamp)
2019-04-03 14:59:52 -<==    Updates: 1
2019-04-03 14:59:53 -请求地址 : http://localhost:8081/main
2019-04-03 14:59:53 -HTTP METHOD : GET
2019-04-03 14:59:53 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 14:59:53 -参数 : []
2019-04-03 14:59:53 -耗时 : 1
2019-04-03 14:59:53 -返回值 : main
2019-04-03 14:59:54 -请求地址 : http://localhost:8081/oa/notify/message
2019-04-03 14:59:54 -HTTP METHOD : GET
2019-04-03 14:59:54 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2019-04-03 14:59:54 -参数 : []
2019-04-03 14:59:54 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2019-04-03 14:59:54 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2019-04-03 14:59:54 -<==      Total: 0
2019-04-03 14:59:54 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2019-04-03 14:59:54 -==> Parameters: 1(Long), 0(String)
2019-04-03 14:59:54 -<==      Total: 1
2019-04-03 14:59:54 -耗时 : 31
2019-04-03 14:59:54 -返回值 : com.bootdo.common.utils.PageUtils@29261dd4
2019-04-03 14:59:54 -请求地址 : http://localhost:8081/main
2019-04-03 14:59:54 -HTTP METHOD : GET
2019-04-03 14:59:54 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 14:59:54 -参数 : []
2019-04-03 14:59:54 -耗时 : 1
2019-04-03 14:59:54 -返回值 : main
2019-04-03 15:00:03 -请求地址 : http://localhost:8081/moneyList/moneyList
2019-04-03 15:00:03 -HTTP METHOD : GET
2019-04-03 15:00:03 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.MoneyList
2019-04-03 15:00:03 -参数 : []
2019-04-03 15:00:03 -耗时 : 1
2019-04-03 15:00:03 -返回值 : /moneyList/moneyList
2019-04-03 15:00:09 -请求地址 : http://localhost:8081/system/sysDept/treeView
2019-04-03 15:00:09 -HTTP METHOD : GET
2019-04-03 15:00:09 -CLASS_METHOD : com.bootdo.system.controller.DeptController.treeView
2019-04-03 15:00:09 -参数 : []
2019-04-03 15:00:09 -耗时 : 1
2019-04-03 15:00:09 -返回值 : system/dept/deptTree
2019-04-03 15:00:10 -请求地址 : http://localhost:8081/system/sysDept/tree
2019-04-03 15:00:10 -HTTP METHOD : GET
2019-04-03 15:00:10 -CLASS_METHOD : com.bootdo.system.controller.DeptController.tree
2019-04-03 15:00:10 -参数 : []
2019-04-03 15:00:10 -==>  Preparing: select `dept_id`,`parent_id`,`name`,`order_num`,`del_flag` from sys_dept order by dept_id desc 
2019-04-03 15:00:10 -==> Parameters: 
2019-04-03 15:00:10 -<==      Total: 3
2019-04-03 15:00:10 -耗时 : 4
2019-04-03 15:00:10 -返回值 : {"checked":false,"children":[{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"3","parentId":"1","state":{"opened":true},"text":"牙星"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"2","parentId":"1","state":{"opened":true},"text":"五九"}],"hasChildren":true,"hasParent":false,"id":"1","parentId":"0","state":{"opened":true},"text":"总公司"}
2019-04-03 15:00:14 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUserName
2019-04-03 15:00:14 -HTTP METHOD : POST
2019-04-03 15:00:14 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.getAllUserName
2019-04-03 15:00:14 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@79cf1c97]
2019-04-03 15:00:14 -==>  Preparing: select DISTINCT user_name from( select user_name from elec WHERE create_time = ? and user_name = ? and user_name like CONCAT(CONCAT('%',?,'%')) UNION ALL select user_name from heat WHERE create_time = ? and user_name = ? and user_name like CONCAT(CONCAT('%',?,'%')) UNION ALL select user_name from water WHERE create_time = ? and user_name = ? and user_name like CONCAT(CONCAT('%',?,'%')) )username 
2019-04-03 15:00:14 -==> Parameters: 2019-02(String), 姜(String), 姜(String), 2019-02(String), 姜(String), 姜(String), 2019-02(String), 姜(String), 姜(String)
2019-04-03 15:00:14 -<==      Total: 0
2019-04-03 15:00:14 -耗时 : 5
2019-04-03 15:00:14 -返回值 : []
2019-04-03 15:00:51 -Starting BootdoApplication on ZJZL-20180906VX with PID 2476 (D:\eclipse2018-work\bootdo\target\classes started by Administrator in D:\eclipse2018-work\bootdo)
2019-04-03 15:00:51 -Running with Spring Boot v2.0.3.RELEASE, Spring v5.0.7.RELEASE
2019-04-03 15:00:51 -The following profiles are active: dev
2019-04-03 15:00:51 -Refreshing org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@6fdbe764: startup date [Wed Apr 03 15:00:51 CST 2019]; root of context hierarchy
2019-04-03 15:00:54 -Multiple Spring Data modules found, entering strict repository configuration mode!
2019-04-03 15:00:56 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$f37a9df] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-03 15:00:56 -Bean 'shiroConfig' of type [com.bootdo.system.config.ShiroConfig$$EnhancerBySpringCGLIB$$190d886] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-03 15:00:57 -Bean 'userRealm' of type [com.bootdo.system.shiro.UserRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-03 15:00:57 -Bean 'cacheManager2' of type [net.sf.ehcache.CacheManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-03 15:00:57 -Bean 'ehCacheManager' of type [org.apache.shiro.cache.ehcache.EhCacheManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-03 15:00:57 -Cache with name 'com.bootdo.system.shiro.UserRealm.authorizationCache' does not yet exist.  Creating now.
2019-04-03 15:00:57 -Added EhCache named [com.bootdo.system.shiro.UserRealm.authorizationCache]
2019-04-03 15:00:57 -Bean 'sessionDAO' of type [org.apache.shiro.session.mgt.eis.MemorySessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-03 15:00:57 -Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-03 15:00:57 -Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-03 15:00:57 -Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-03 15:00:58 -Tomcat initialized with port(s): 8081 (http)
2019-04-03 15:00:58 -Initializing ProtocolHandler ["http-nio-8081"]
2019-04-03 15:00:58 -Starting service [Tomcat]
2019-04-03 15:00:58 -Starting Servlet Engine: Apache Tomcat/8.5.31
2019-04-03 15:00:58 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [C:\Program Files\Java\jre1.8.0_131\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:/Program Files/Java/jre1.8.0_131/bin/server;C:/Program Files/Java/jre1.8.0_131/bin;C:/Program Files/Java/jre1.8.0_131/lib/amd64;C:\ProgramData\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Windows\System32\OpenSSH\;D:\pbb\pycSafefile\x64;D:\pbb\PBB Reader\x64;C:\Program Files\MySQL\MySQL Utilities 1.6\;D:\MAVEN\apache-maven-3.6.0\bin;D:\GIT\Git\cmd;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;;C:\Users\Administrator\Desktop;;.]
2019-04-03 15:00:58 -Initializing Spring embedded WebApplicationContext
2019-04-03 15:00:58 -Root WebApplicationContext: initialization completed in 6905 ms
2019-04-03 15:00:59 -Mapping filter: 'characterEncodingFilter' to: [/*]
2019-04-03 15:00:59 -Mapping filter: 'hiddenHttpMethodFilter' to: [/*]
2019-04-03 15:00:59 -Mapping filter: 'httpPutFormContentFilter' to: [/*]
2019-04-03 15:00:59 -Mapping filter: 'requestContextFilter' to: [/*]
2019-04-03 15:00:59 -Filter xssFilter was not registered (disabled)
2019-04-03 15:00:59 -Mapping filter: 'webStatFilter' to urls: [/*]
2019-04-03 15:00:59 -Mapping filter: 'shiroFilterFactoryBean' to: [/*]
2019-04-03 15:00:59 -Servlet statViewServlet mapped to [/druid/*]
2019-04-03 15:00:59 -Servlet dispatcherServlet mapped to [/]
2019-04-03 15:01:01 -ApplicationContext registed-->org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@6fdbe764: startup date [Wed Apr 03 15:00:51 CST 2019]; root of context hierarchy
2019-04-03 15:01:02 -Using default implementation for ThreadExecutor
2019-04-03 15:01:02 -Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2019-04-03 15:01:02 -Quartz Scheduler v.2.2.1 created.
2019-04-03 15:01:02 -RAMJobStore initialized.
2019-04-03 15:01:02 -Scheduler meta-data: Quartz Scheduler (v2.2.1) 'schedulerFactoryBean' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2019-04-03 15:01:02 -Quartz scheduler 'schedulerFactoryBean' initialized from an externally provided properties instance.
2019-04-03 15:01:02 -Quartz scheduler version: 2.2.1
2019-04-03 15:01:02 -JobFactory set to: com.bootdo.common.quartz.factory.JobFactory@74431b9c
2019-04-03 15:01:02 -Initializing ExecutorService  'clientInboundChannelExecutor'
2019-04-03 15:01:02 -Initializing ExecutorService  'clientOutboundChannelExecutor'
2019-04-03 15:01:04 -Mapped "{[/charts/countDD],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.countDDController.countDD()
2019-04-03 15:01:04 -Mapped "{[/charts/countDD/tableDD],methods=[POST]}" onto public java.lang.String com.bootdo.charts.controller.countDDController.tableDD()
2019-04-03 15:01:04 -Mapped "{[/charts/countDD/getCountDD],methods=[POST]}" onto public com.bootdo.charts.vo.CountDayVo com.bootdo.charts.controller.countDDController.getCountD(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo,javax.servlet.http.HttpServletRequest)
2019-04-03 15:01:04 -Mapped "{[/charts/countDD/exportCountDD],methods=[GET]}" onto public void com.bootdo.charts.controller.countDDController.exprotElecLog(com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-03 15:01:04 -Mapped "{[/charts/countMM/exportCountMM],methods=[GET]}" onto public void com.bootdo.charts.controller.countMMController.exprotElecLog(com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-03 15:01:04 -Mapped "{[/charts/countMM/getCountMM],methods=[POST]}" onto public void com.bootdo.charts.controller.countMMController.getCountMM(org.springframework.ui.Model,com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo,javax.servlet.http.HttpServletRequest)
2019-04-03 15:01:04 -Mapped "{[/charts/countMM],methods=[GET]}" onto java.lang.String com.bootdo.charts.controller.countMMController.countMM()
2019-04-03 15:01:04 -Mapped "{[/charts/countOwe/getCountOwe],methods=[POST]}" onto public com.bootdo.charts.vo.CountOweVo com.bootdo.charts.controller.countOweController.getCountD(com.bootdo.elec.vo.ElecVo,com.bootdo.water.vo.WaterVo,com.bootdo.heat.vo.HeatVo,javax.servlet.http.HttpServletRequest)
2019-04-03 15:01:04 -Mapped "{[/charts/countOwe],methods=[GET]}" onto java.lang.String com.bootdo.charts.controller.countOweController.countOwe()
2019-04-03 15:01:04 -Mapped "{[/charts/countRun/getCountRun],methods=[POST]}" onto public int com.bootdo.charts.controller.countRunController.getCountD(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo)
2019-04-03 15:01:04 -Mapped "{[/charts/countRun/exportCountRun],methods=[GET]}" onto public void com.bootdo.charts.controller.countRunController.exprotElecLog(com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-03 15:01:04 -Mapped "{[/charts/countRun],methods=[GET]}" onto java.lang.String com.bootdo.charts.controller.countRunController.countRun()
2019-04-03 15:01:04 -Mapped "{[/charts/countYY/getCountYY],methods=[POST]}" onto public int com.bootdo.charts.controller.countYYController.getCountD(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo)
2019-04-03 15:01:04 -Mapped "{[/charts/countYY/exportCountYY],methods=[GET]}" onto public void com.bootdo.charts.controller.countYYController.exprotElecLog(com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-03 15:01:04 -Mapped "{[/charts/countYY],methods=[GET]}" onto java.lang.String com.bootdo.charts.controller.countYYController.countYY()
2019-04-03 15:01:04 -Mapped "{[/common/dict/add],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.add()
2019-04-03 15:01:04 -Mapped "{[/common/dict/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.remove(java.lang.Long)
2019-04-03 15:01:04 -Mapped "{[/common/dict/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.remove(java.lang.Long[])
2019-04-03 15:01:04 -Mapped "{[/common/dict/update]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.update(com.bootdo.common.domain.DictDO)
2019-04-03 15:01:04 -Mapped "{[/common/dict/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.common.controller.DictController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 15:01:04 -Mapped "{[/common/dict/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.save(com.bootdo.common.domain.DictDO)
2019-04-03 15:01:04 -Mapped "{[/common/dict/type],methods=[GET]}" onto public java.util.List<com.bootdo.common.domain.DictDO> com.bootdo.common.controller.DictController.listType()
2019-04-03 15:01:04 -Mapped "{[/common/dict/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 15:01:04 -Mapped "{[/common/dict],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.dict()
2019-04-03 15:01:04 -Mapped "{[/common/dict/add/{type}/{description}],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.addD(org.springframework.ui.Model,java.lang.String,java.lang.String)
2019-04-03 15:01:04 -Mapped "{[/common/dict/list/{type}],methods=[GET]}" onto public java.util.List<com.bootdo.common.domain.DictDO> com.bootdo.common.controller.DictController.listByType(java.lang.String)
2019-04-03 15:01:04 -Mapped "{[/common/sysFile/add],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.FileController.add()
2019-04-03 15:01:04 -Mapped "{[/common/sysFile/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.remove(java.lang.Long,javax.servlet.http.HttpServletRequest)
2019-04-03 15:01:04 -Mapped "{[/common/sysFile/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.remove(java.lang.Long[])
2019-04-03 15:01:04 -Mapped "{[/common/sysFile/update]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.update(com.bootdo.common.domain.FileDO)
2019-04-03 15:01:04 -Mapped "{[/common/sysFile/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.common.controller.FileController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 15:01:04 -Mapped "{[/common/sysFile/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.save(com.bootdo.common.domain.FileDO)
2019-04-03 15:01:04 -Mapped "{[/common/sysFile/info/{id}]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.info(java.lang.Long)
2019-04-03 15:01:04 -Mapped "{[/common/sysFile/edit],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.FileController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 15:01:04 -Mapped "{[/common/sysFile/upload],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.FileController.upload(org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpServletRequest)
2019-04-03 15:01:04 -Mapped "{[/common/sysFile],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.FileController.sysFile(org.springframework.ui.Model)
2019-04-03 15:01:04 -Mapped "{[/common/generator/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.GeneratorController.update(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 15:01:04 -Mapped "{[/common/generator/list],methods=[GET]}" onto java.util.List<java.util.Map<java.lang.String, java.lang.Object>> com.bootdo.common.controller.GeneratorController.list()
2019-04-03 15:01:04 -Mapped "{[/common/generator/code/{tableName}]}" onto public void com.bootdo.common.controller.GeneratorController.code(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String) throws java.io.IOException
2019-04-03 15:01:04 -Mapped "{[/common/generator],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.GeneratorController.generator()
2019-04-03 15:01:04 -Mapped "{[/common/generator/edit],methods=[GET]}" onto public java.lang.String com.bootdo.common.controller.GeneratorController.edit(org.springframework.ui.Model)
2019-04-03 15:01:04 -Mapped "{[/common/generator/batchCode]}" onto public void com.bootdo.common.controller.GeneratorController.batchCode(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String) throws java.io.IOException
2019-04-03 15:01:04 -Mapped "{[/common/job/add],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.JobController.add()
2019-04-03 15:01:04 -Mapped "{[/common/job/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.remove(java.lang.Long)
2019-04-03 15:01:04 -Mapped "{[/common/job/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.remove(java.lang.Long[])
2019-04-03 15:01:04 -Mapped "{[/common/job/update],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.update(com.bootdo.common.domain.TaskDO)
2019-04-03 15:01:04 -Mapped "{[/common/job/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.common.controller.JobController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 15:01:04 -Mapped "{[/common/job/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.save(com.bootdo.common.domain.TaskDO)
2019-04-03 15:01:04 -Mapped "{[/common/job/info/{id}]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.info(java.lang.Long)
2019-04-03 15:01:04 -Mapped "{[/common/job/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.JobController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 15:01:04 -Mapped "{[/common/job],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.JobController.taskScheduleJob()
2019-04-03 15:01:04 -Mapped "{[/common/job/changeJobStatus],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.changeJobStatus(java.lang.Long,java.lang.String)
2019-04-03 15:01:04 -Mapped "{[/common/log/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.LogController.remove(java.lang.Long)
2019-04-03 15:01:04 -Mapped "{[/common/log],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.LogController.log()
2019-04-03 15:01:04 -Mapped "{[/common/log/list],methods=[GET]}" onto com.bootdo.common.domain.PageDO<com.bootdo.common.domain.LogDO> com.bootdo.common.controller.LogController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 15:01:04 -Mapped "{[/common/log/batchRemove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.LogController.batchRemove(java.lang.Long[])
2019-04-03 15:01:04 -Mapped "{[/common/long],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.LongController.Long()
2019-04-03 15:01:04 -Mapped "{[/common/time],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.TimeController.Time()
2019-04-03 15:01:04 -Mapped "{[/error]}" onto public com.bootdo.common.utils.R com.bootdo.common.exception.MainsiteErrorController.handleError(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-04-03 15:01:04 -Mapped "{[/error],produces=[text/html]}" onto public org.springframework.web.servlet.ModelAndView com.bootdo.common.exception.MainsiteErrorController.errorHtml(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-04-03 15:01:04 -Mapped "{[/elec/elec/add],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecController.add()
2019-04-03 15:01:04 -Mapped "{[/elec/elec/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.remove(java.lang.Long)
2019-04-03 15:01:04 -Mapped "{[/elec/elec/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.remove(java.lang.Long[])
2019-04-03 15:01:04 -Mapped "{[/elec/elec/update],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.update(com.bootdo.elec.domain.ElecDO)
2019-04-03 15:01:04 -Mapped "{[/elec/elec/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.elec.controller.ElecController.list(java.util.Map<java.lang.String, java.lang.Object>,com.bootdo.elec.domain.ElecDO)
2019-04-03 15:01:04 -Mapped "{[/elec/elec/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.save(com.bootdo.elec.domain.ElecDO)
2019-04-03 15:01:04 -Mapped "{[/elec/elec/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 15:01:04 -Mapped "{[/elec/elec/exprotElec],methods=[GET]}" onto public void com.bootdo.elec.controller.ElecController.exprotExcel(com.bootdo.elec.vo.ElecVo,javax.servlet.http.HttpServletResponse)
2019-04-03 15:01:04 -Mapped "{[/elec/elec],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecController.Elec()
2019-04-03 15:01:04 -Mapped "{[/elec/elecInto],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecIntoController.ElecInto()
2019-04-03 15:01:04 -Mapped "{[/elec/elecInto/exprotElecIntoExcel],methods=[GET]}" onto public void com.bootdo.elec.controller.ElecIntoController.exprotExcel(com.bootdo.elec.vo.ElecVo,javax.servlet.http.HttpServletResponse)
2019-04-03 15:01:04 -Mapped "{[/elec/elecInto/importElecIntoExcel],methods=[POST]}" onto public java.util.Map<java.lang.String, java.lang.Object> com.bootdo.elec.controller.ElecIntoController.importElecIntoExcel(org.springframework.web.multipart.MultipartFile,com.bootdo.elec.vo.ElecVo) throws java.lang.Exception
2019-04-03 15:01:05 -Mapped "{[/elec/elecPrice/add],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecPriceController.add()
2019-04-03 15:01:05 -Mapped "{[/elec/elecPrice/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecPriceController.remove(java.lang.Long)
2019-04-03 15:01:05 -Mapped "{[/elec/elecPrice/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecPriceController.remove(java.lang.Long[])
2019-04-03 15:01:05 -Mapped "{[/elec/elecPrice/update]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecPriceController.update(com.bootdo.elec.domain.ElecPriceDO)
2019-04-03 15:01:05 -Mapped "{[/elec/elecPrice/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.elec.controller.ElecPriceController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 15:01:05 -Mapped "{[/elec/elecPrice/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecPriceController.save(com.bootdo.elec.domain.ElecPriceDO,com.bootdo.elec.domain.ElecDO)
2019-04-03 15:01:05 -Mapped "{[/elec/elecPrice],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecPriceController.ElecPrice()
2019-04-03 15:01:05 -Mapped "{[/elec/elecPrice/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecPriceController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 15:01:05 -Mapped "{[/elec/elecUpLoad/importElecExcel],methods=[POST]}" onto public java.util.Map<java.lang.String, java.lang.Object> com.bootdo.elec.controller.ElecUpLoadController.importElecExcel(org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpServletRequest) throws java.lang.Exception
2019-04-03 15:01:05 -Mapped "{[/elec/elecUpLoad],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecUpLoadController.Elec()
2019-04-03 15:01:05 -Mapped "{[/heat/heat/add],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatController.add()
2019-04-03 15:01:05 -Mapped "{[/heat/heat/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatController.remove(java.lang.Integer)
2019-04-03 15:01:05 -Mapped "{[/heat/heat/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatController.remove(java.lang.Integer[])
2019-04-03 15:01:05 -Mapped "{[/heat/heat/update]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatController.update(com.bootdo.heat.domain.HeatDO)
2019-04-03 15:01:05 -Mapped "{[/heat/heat/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.heat.controller.HeatController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 15:01:05 -Mapped "{[/heat/heat/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatController.save(com.bootdo.heat.domain.HeatDO)
2019-04-03 15:01:05 -Mapped "{[/heat/heat],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatController.Heat()
2019-04-03 15:01:05 -Mapped "{[/heat/heat/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatController.edit(java.lang.Integer,org.springframework.ui.Model)
2019-04-03 15:01:05 -Mapped "{[/heat/heat/exprotHeat],methods=[GET]}" onto public void com.bootdo.heat.controller.HeatController.exprotExcel(com.bootdo.heat.vo.HeatVo,javax.servlet.http.HttpServletResponse)
2019-04-03 15:01:05 -Mapped "{[/heat/heatInto],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatIntoController.HeatInto()
2019-04-03 15:01:05 -Mapped "{[/heat/heatInto/exprotHeatIntoExcel],methods=[GET]}" onto public void com.bootdo.heat.controller.HeatIntoController.exprotExcel(com.bootdo.heat.vo.HeatVo,javax.servlet.http.HttpServletResponse)
2019-04-03 15:01:05 -Mapped "{[/heat/heatPrice/add],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatPriceController.add()
2019-04-03 15:01:05 -Mapped "{[/heat/heatPrice/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatPriceController.remove(java.lang.Long)
2019-04-03 15:01:05 -Mapped "{[/heat/heatPrice/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatPriceController.remove(java.lang.Long[])
2019-04-03 15:01:05 -Mapped "{[/heat/heatPrice/update]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatPriceController.update(com.bootdo.heat.domain.HeatPriceDO)
2019-04-03 15:01:05 -Mapped "{[/heat/heatPrice/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.heat.controller.HeatPriceController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 15:01:05 -Mapped "{[/heat/heatPrice/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatPriceController.save(com.bootdo.heat.domain.HeatPriceDO)
2019-04-03 15:01:05 -Mapped "{[/heat/heatPrice],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatPriceController.HeatPrice()
2019-04-03 15:01:05 -Mapped "{[/heat/heatPrice/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatPriceController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 15:01:05 -Mapped "{[/heat/heatUpLoad],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatUpLoadController.HeatUpLoad()
2019-04-03 15:01:05 -Mapped "{[/heat/heatUpLoad/importHeatExcel]}" onto public java.lang.String com.bootdo.heat.controller.HeatUpLoadController.importHeatExcel(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)
2019-04-03 15:01:05 -Mapped "{[/heat/heatUpLoad/createHeatExcel],methods=[POST]}" onto public java.lang.String com.bootdo.heat.controller.HeatUpLoadController.createHeatExcel(com.bootdo.heat.domain.HeatDO) throws java.lang.Exception
2019-04-03 15:01:05 -Mapped "{[/heat/heatUpLoad/exprotHeatExcel],methods=[GET]}" onto public void com.bootdo.heat.controller.HeatUpLoadController.exprotHeatExcel(com.bootdo.heat.vo.HeatVo,javax.servlet.http.HttpServletResponse)
2019-04-03 15:01:05 -Mapped "{[/moneyList/moneyList/queryAllUserName],methods=[POST]}" onto public java.util.List<com.bootdo.moneyList.damain.MoneyListDO> com.bootdo.moneyList.controller.MoneyListController.getAllUserName(com.bootdo.moneyList.damain.MoneyListDO)
2019-04-03 15:01:05 -Mapped "{[/moneyList/moneyList/queryAllUser],methods=[POST]}" onto public java.util.List<com.bootdo.moneyList.damain.MoneyListDO> com.bootdo.moneyList.controller.MoneyListController.queryAllUser(com.bootdo.moneyList.damain.MoneyListDO)
2019-04-03 15:01:05 -Mapped "{[/moneyList/moneyList],methods=[GET]}" onto java.lang.String com.bootdo.moneyList.controller.MoneyListController.MoneyList()
2019-04-03 15:01:05 -Mapped "{[/moneyList/moneyList/updateMoney],methods=[POST]}" onto public java.util.List<com.bootdo.moneyList.damain.MoneyListDO> com.bootdo.moneyList.controller.MoneyListController.updateMoney(com.bootdo.moneyList.damain.MoneyListDO)
2019-04-03 15:01:05 -Mapped "{[/moneyLog/elecLog/add],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.ElecLogController.add()
2019-04-03 15:01:05 -Mapped "{[/moneyLog/elecLog/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.ElecLogController.remove(java.lang.Long)
2019-04-03 15:01:05 -Mapped "{[/moneyLog/elecLog/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.ElecLogController.remove(java.lang.Long[])
2019-04-03 15:01:05 -Mapped "{[/moneyLog/elecLog/update]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.ElecLogController.update(com.bootdo.moneyLog.domain.ElecLogDO)
2019-04-03 15:01:05 -Mapped "{[/moneyLog/elecLog/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.moneyLog.controller.ElecLogController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 15:01:05 -Mapped "{[/moneyLog/elecLog/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.ElecLogController.save(com.bootdo.moneyLog.domain.ElecLogDO)
2019-04-03 15:01:05 -Mapped "{[/moneyLog/elecLog],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.ElecLogController.moneyLog()
2019-04-03 15:01:05 -Mapped "{[/moneyLog/elecLog/exprotElecLog],methods=[GET]}" onto public void com.bootdo.moneyLog.controller.ElecLogController.exprotElecLog(com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-03 15:01:05 -Mapped "{[/moneyLog/elecLog/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.ElecLogController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 15:01:05 -Mapped "{[/moneyLog/heatLog/add],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.HeatLogController.add()
2019-04-03 15:01:05 -Mapped "{[/moneyLog/heatLog/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.HeatLogController.remove(java.lang.Long)
2019-04-03 15:01:05 -Mapped "{[/moneyLog/heatLog/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.HeatLogController.remove(java.lang.Long[])
2019-04-03 15:01:05 -Mapped "{[/moneyLog/heatLog/update]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.HeatLogController.update(com.bootdo.moneyLog.domain.HeatLogDO)
2019-04-03 15:01:05 -Mapped "{[/moneyLog/heatLog/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.moneyLog.controller.HeatLogController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 15:01:05 -Mapped "{[/moneyLog/heatLog/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.HeatLogController.save(com.bootdo.moneyLog.domain.HeatLogDO)
2019-04-03 15:01:05 -Mapped "{[/moneyLog/heatLog],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.HeatLogController.HeatLog()
2019-04-03 15:01:05 -Mapped "{[/moneyLog/heatLog/exprotHeatLog],methods=[GET]}" onto public void com.bootdo.moneyLog.controller.HeatLogController.exprotHeatLog(com.bootdo.moneyLog.vo.HeatLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-03 15:01:05 -Mapped "{[/moneyLog/heatLog/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.HeatLogController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 15:01:05 -Mapped "{[/moneyLog/waterLog/add],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.WaterLogController.add()
2019-04-03 15:01:05 -Mapped "{[/moneyLog/waterLog/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.WaterLogController.remove(java.lang.Long)
2019-04-03 15:01:05 -Mapped "{[/moneyLog/waterLog/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.WaterLogController.remove(java.lang.Long[])
2019-04-03 15:01:05 -Mapped "{[/moneyLog/waterLog/update]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.WaterLogController.update(com.bootdo.moneyLog.domain.WaterLogDO)
2019-04-03 15:01:05 -Mapped "{[/moneyLog/waterLog/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.moneyLog.controller.WaterLogController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 15:01:05 -Mapped "{[/moneyLog/waterLog/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.WaterLogController.save(com.bootdo.moneyLog.domain.WaterLogDO)
2019-04-03 15:01:05 -Mapped "{[/moneyLog/waterLog/exprotWaterLog],methods=[GET]}" onto public void com.bootdo.moneyLog.controller.WaterLogController.exprotWaterLog(com.bootdo.moneyLog.vo.WaterLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-03 15:01:05 -Mapped "{[/moneyLog/waterLog],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.WaterLogController.WaterLog()
2019-04-03 15:01:05 -Mapped "{[/moneyLog/waterLog/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.WaterLogController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 15:01:05 -Mapped "{[/oa/notify/add],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.add()
2019-04-03 15:01:05 -Mapped "{[/oa/notify/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.remove(java.lang.Long)
2019-04-03 15:01:05 -Mapped "{[/oa/notify/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.remove(java.lang.Long[])
2019-04-03 15:01:05 -Mapped "{[/oa/notify/update]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.update(com.bootdo.oa.domain.NotifyDO)
2019-04-03 15:01:05 -Mapped "{[/oa/notify/read/{id}],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.read(java.lang.Long,org.springframework.ui.Model)
2019-04-03 15:01:05 -Mapped "{[/oa/notify/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.oa.controller.NotifyController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 15:01:05 -Mapped "{[/oa/notify/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.save(com.bootdo.oa.domain.NotifyDO)
2019-04-03 15:01:05 -Mapped "{[/oa/notify/message],methods=[GET]}" onto com.bootdo.common.utils.PageUtils com.bootdo.oa.controller.NotifyController.message()
2019-04-03 15:01:05 -Mapped "{[/oa/notify/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 15:01:05 -Mapped "{[/oa/notify/selfNotify],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.selefNotify()
2019-04-03 15:01:05 -Mapped "{[/oa/notify],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.oaNotify()
2019-04-03 15:01:05 -Mapped "{[/oa/notify/selfList],methods=[GET]}" onto com.bootdo.common.utils.PageUtils com.bootdo.oa.controller.NotifyController.selfList(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 15:01:05 -Mapped "{[/print/print/add],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.add()
2019-04-03 15:01:05 -Mapped "{[/print/print/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.print.controller.PrintController.remove(java.lang.Long)
2019-04-03 15:01:05 -Mapped "{[/print/print/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.print.controller.PrintController.remove(java.lang.Long[])
2019-04-03 15:01:05 -Mapped "{[/print/print/update]}" onto public com.bootdo.common.utils.R com.bootdo.print.controller.PrintController.update(com.bootdo.print.domain.PrintDO)
2019-04-03 15:01:05 -Mapped "{[/print/print/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.print.controller.PrintController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 15:01:05 -Mapped "{[/print/print/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.print.controller.PrintController.save(java.lang.String,com.bootdo.print.domain.PrintDO)
2019-04-03 15:01:05 -Mapped "{[/print/print/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 15:01:05 -Mapped "{[/print/print/exprotPrint],methods=[GET]}" onto public void com.bootdo.print.controller.PrintController.exprotPrint(com.bootdo.print.vo.PrintVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-03 15:01:05 -Mapped "{[/print/print],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.Print()
2019-04-03 15:01:05 -Mapped "{[/print/print/printEdit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.printEdit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 15:01:05 -Mapped "{[/system/sysDept/add/{pId}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.add(java.lang.Long,org.springframework.ui.Model)
2019-04-03 15:01:05 -Mapped "{[/system/sysDept/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.remove(java.lang.Long)
2019-04-03 15:01:05 -Mapped "{[/system/sysDept/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.remove(java.lang.Long[])
2019-04-03 15:01:05 -Mapped "{[/system/sysDept/update]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.update(com.bootdo.system.domain.DeptDO)
2019-04-03 15:01:05 -Mapped "{[/system/sysDept/list],methods=[GET]}" onto public java.util.List<com.bootdo.system.domain.DeptDO> com.bootdo.system.controller.DeptController.list()
2019-04-03 15:01:05 -Mapped "{[/system/sysDept/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.save(com.bootdo.system.domain.DeptDO)
2019-04-03 15:01:05 -Mapped "{[/system/sysDept/tree],methods=[GET]}" onto public com.bootdo.common.domain.Tree<com.bootdo.system.domain.DeptDO> com.bootdo.system.controller.DeptController.tree()
2019-04-03 15:01:05 -Mapped "{[/system/sysDept/edit/{deptId}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 15:01:05 -Mapped "{[/system/sysDept/treeView],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.treeView()
2019-04-03 15:01:05 -Mapped "{[/system/sysDept],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.dept()
2019-04-03 15:01:05 -Mapped "{[/index],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.index(org.springframework.ui.Model)
2019-04-03 15:01:05 -Mapped "{[/main],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.main()
2019-04-03 15:01:05 -Mapped "{[/login],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.login(org.springframework.ui.Model)
2019-04-03 15:01:05 -Mapped "{[/login],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.LoginController.ajaxLogin(java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest)
2019-04-03 15:01:05 -Mapped "{[/getVerify],methods=[GET]}" onto public void com.bootdo.system.controller.LoginController.getVerify(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-04-03 15:01:05 -Mapped "{[/logout],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.logout()
2019-04-03 15:01:05 -Mapped "{[/ || ],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.welcome(org.springframework.ui.Model)
2019-04-03 15:01:05 -Mapped "{[/sys/menu/add/{pId}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.MenuController.add(org.springframework.ui.Model,java.lang.Long)
2019-04-03 15:01:05 -Mapped "{[/sys/menu/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.MenuController.remove(java.lang.Long)
2019-04-03 15:01:05 -Mapped "{[/sys/menu/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.MenuController.update(com.bootdo.system.domain.MenuDO)
2019-04-03 15:01:05 -Mapped "{[/sys/menu/list]}" onto java.util.List<com.bootdo.system.domain.MenuDO> com.bootdo.system.controller.MenuController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 15:01:05 -Mapped "{[/sys/menu/save],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.MenuController.save(com.bootdo.system.domain.MenuDO)
2019-04-03 15:01:05 -Mapped "{[/sys/menu/tree/{roleId}],methods=[GET]}" onto com.bootdo.common.domain.Tree<com.bootdo.system.domain.MenuDO> com.bootdo.system.controller.MenuController.tree(java.lang.Long)
2019-04-03 15:01:05 -Mapped "{[/sys/menu/tree],methods=[GET]}" onto com.bootdo.common.domain.Tree<com.bootdo.system.domain.MenuDO> com.bootdo.system.controller.MenuController.tree()
2019-04-03 15:01:05 -Mapped "{[/sys/menu/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.MenuController.edit(org.springframework.ui.Model,java.lang.Long)
2019-04-03 15:01:05 -Mapped "{[/sys/menu],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.MenuController.menu(org.springframework.ui.Model)
2019-04-03 15:01:05 -Mapped "{[/sys/role/add],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.RoleController.add()
2019-04-03 15:01:05 -Mapped "{[/sys/role/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.update(com.bootdo.system.domain.RoleDO)
2019-04-03 15:01:05 -Mapped "{[/sys/role/list],methods=[GET]}" onto java.util.List<com.bootdo.system.domain.RoleDO> com.bootdo.system.controller.RoleController.list()
2019-04-03 15:01:05 -Mapped "{[/sys/role/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.save(java.lang.Long)
2019-04-03 15:01:05 -Mapped "{[/sys/role/save],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.save(com.bootdo.system.domain.RoleDO)
2019-04-03 15:01:05 -Mapped "{[/sys/role/batchRemove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.batchRemove(java.lang.Long[])
2019-04-03 15:01:05 -Mapped "{[/sys/role/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.RoleController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 15:01:05 -Mapped "{[/sys/role],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.RoleController.role()
2019-04-03 15:01:05 -Mapped "{[/sys/online/list]}" onto public java.util.List<com.bootdo.system.domain.UserOnline> com.bootdo.system.controller.SessionController.list()
2019-04-03 15:01:05 -Mapped "{[/sys/online],methods=[GET]}" onto public java.lang.String com.bootdo.system.controller.SessionController.online()
2019-04-03 15:01:05 -Mapped "{[/sys/online/forceLogout/{sessionId}]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.SessionController.forceLogout(java.lang.String,org.springframework.web.servlet.mvc.support.RedirectAttributes)
2019-04-03 15:01:05 -Mapped "{[/sys/online/sessionList]}" onto public java.util.Collection<org.apache.shiro.session.Session> com.bootdo.system.controller.SessionController.sessionList()
2019-04-03 15:01:05 -Mapped "{[/sys/user/exit],methods=[POST]}" onto boolean com.bootdo.system.controller.UserController.exit(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 15:01:05 -Mapped "{[/sys/user/add],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.add(org.springframework.ui.Model)
2019-04-03 15:01:05 -Mapped "{[/sys/user/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.remove(java.lang.Long)
2019-04-03 15:01:05 -Mapped "{[/sys/user/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.update(com.bootdo.system.domain.UserDO)
2019-04-03 15:01:05 -Mapped "{[/sys/user/list],methods=[GET]}" onto com.bootdo.common.utils.PageUtils com.bootdo.system.controller.UserController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 15:01:05 -Mapped "{[/sys/user/save],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.save(com.bootdo.system.domain.UserDO)
2019-04-03 15:01:05 -Mapped "{[/sys/user/batchRemove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.batchRemove(java.lang.Long[])
2019-04-03 15:01:05 -Mapped "{[/sys/user/tree],methods=[GET]}" onto public com.bootdo.common.domain.Tree<com.bootdo.system.domain.DeptDO> com.bootdo.system.controller.UserController.tree()
2019-04-03 15:01:05 -Mapped "{[/sys/user],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.user(org.springframework.ui.Model)
2019-04-03 15:01:05 -Mapped "{[/sys/user/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.edit(org.springframework.ui.Model,java.lang.Long)
2019-04-03 15:01:05 -Mapped "{[/sys/user/uploadImg],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.uploadImg(org.springframework.web.multipart.MultipartFile,java.lang.String,javax.servlet.http.HttpServletRequest)
2019-04-03 15:01:05 -Mapped "{[/sys/user/personal],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.personal(org.springframework.ui.Model)
2019-04-03 15:01:05 -Mapped "{[/sys/user/resetPwd],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.resetPwd(com.bootdo.system.vo.UserVO)
2019-04-03 15:01:05 -Mapped "{[/sys/user/resetPwd/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.resetPwd(java.lang.Long,org.springframework.ui.Model)
2019-04-03 15:01:05 -Mapped "{[/sys/user/adminResetPwd],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.adminResetPwd(com.bootdo.system.vo.UserVO)
2019-04-03 15:01:05 -Mapped "{[/sys/user/updatePeronal],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.updatePeronal(com.bootdo.system.domain.UserDO)
2019-04-03 15:01:05 -Mapped "{[/sys/user/treeView],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.treeView()
2019-04-03 15:01:05 -Mapped "{[/file/downImport/{importType}],methods=[GET]}" onto public void com.bootdo.temple.controller.TempletController.downImport(javax.servlet.http.HttpServletResponse,java.lang.String)
2019-04-03 15:01:05 -Mapped "{[/water/water/add],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterController.add()
2019-04-03 15:01:05 -Mapped "{[/water/water/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterController.remove(java.lang.Long)
2019-04-03 15:01:05 -Mapped "{[/water/water/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterController.remove(java.lang.Long[])
2019-04-03 15:01:05 -Mapped "{[/water/water/update]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterController.update(com.bootdo.water.domain.WaterDO)
2019-04-03 15:01:05 -Mapped "{[/water/water/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.water.controller.WaterController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 15:01:05 -Mapped "{[/water/water/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterController.save(com.bootdo.water.domain.WaterDO)
2019-04-03 15:01:05 -Mapped "{[/water/water/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 15:01:05 -Mapped "{[/water/water/exprotWater],methods=[GET]}" onto public void com.bootdo.water.controller.WaterController.exprotExcel(com.bootdo.water.vo.WaterVo,javax.servlet.http.HttpServletResponse)
2019-04-03 15:01:05 -Mapped "{[/water/water],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterController.Water()
2019-04-03 15:01:05 -Mapped "{[/water/waterInto/exprotWaterIntoExcel],methods=[GET]}" onto public void com.bootdo.water.controller.WaterIntoController.exprotExcel(com.bootdo.water.vo.WaterVo,javax.servlet.http.HttpServletResponse)
2019-04-03 15:01:05 -Mapped "{[/water/waterInto],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterIntoController.WaterInto()
2019-04-03 15:01:05 -Mapped "{[/water/waterPrice/add],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterPriceController.add()
2019-04-03 15:01:05 -Mapped "{[/water/waterPrice/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterPriceController.remove(java.lang.Long)
2019-04-03 15:01:05 -Mapped "{[/water/waterPrice/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterPriceController.remove(java.lang.Long[])
2019-04-03 15:01:05 -Mapped "{[/water/waterPrice/update]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterPriceController.update(com.bootdo.water.domain.WaterPriceDO)
2019-04-03 15:01:05 -Mapped "{[/water/waterPrice/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.water.controller.WaterPriceController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 15:01:05 -Mapped "{[/water/waterPrice/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterPriceController.save(com.bootdo.water.domain.WaterPriceDO)
2019-04-03 15:01:05 -Mapped "{[/water/waterPrice/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterPriceController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 15:01:05 -Mapped "{[/water/waterPrice],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterPriceController.WaterPrice()
2019-04-03 15:01:05 -Mapped "{[/water/waterUpLoad/createWaterExcel],methods=[POST]}" onto public java.lang.String com.bootdo.water.controller.WaterUpLoadController.createWaterExcel(com.bootdo.water.domain.WaterDO) throws java.lang.Exception
2019-04-03 15:01:05 -Mapped "{[/water/waterUpLoad/importWaterExcel]}" onto public java.lang.String com.bootdo.water.controller.WaterUpLoadController.importWaterExcel(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)
2019-04-03 15:01:05 -Mapped "{[/water/waterUpLoad],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterUpLoadController.WaterUpLoad()
2019-04-03 15:01:05 -Mapped "{[/water/waterUpLoad/exprotWaterExcel],methods=[GET]}" onto public void com.bootdo.water.controller.WaterUpLoadController.exprotWaterExcel(com.bootdo.water.vo.WaterVo,javax.servlet.http.HttpServletResponse)
2019-04-03 15:01:05 -Mapped "{[/v2/api-docs],methods=[GET],produces=[application/json || application/hal+json]}" onto public org.springframework.http.ResponseEntity<springfox.documentation.spring.web.json.Json> springfox.documentation.swagger2.web.Swagger2Controller.getDocumentation(java.lang.String,javax.servlet.http.HttpServletRequest)
2019-04-03 15:01:05 -Mapped "{[/swagger-resources/configuration/ui]}" onto org.springframework.http.ResponseEntity<springfox.documentation.swagger.web.UiConfiguration> springfox.documentation.swagger.web.ApiResourceController.uiConfiguration()
2019-04-03 15:01:05 -Mapped "{[/swagger-resources]}" onto org.springframework.http.ResponseEntity<java.util.List<springfox.documentation.swagger.web.SwaggerResource>> springfox.documentation.swagger.web.ApiResourceController.swaggerResources()
2019-04-03 15:01:05 -Mapped "{[/swagger-resources/configuration/security]}" onto org.springframework.http.ResponseEntity<springfox.documentation.swagger.web.SecurityConfiguration> springfox.documentation.swagger.web.ApiResourceController.securityConfiguration()
2019-04-03 15:01:05 -Initializing ExecutorService  'messageBrokerTaskScheduler'
2019-04-03 15:01:05 -Mapped URL path [/endpointChat/**] onto handler of type [class org.springframework.web.socket.sockjs.support.SockJsHttpRequestHandler]
2019-04-03 15:01:05 -Initializing ExecutorService  'brokerChannelExecutor'
2019-04-03 15:01:06 -Mapped URL path [/**/favicon.ico] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-04-03 15:01:06 -Looking for @ControllerAdvice: org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@6fdbe764: startup date [Wed Apr 03 15:00:51 CST 2019]; root of context hierarchy
2019-04-03 15:01:06 -Mapped URL path [/webjars/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-04-03 15:01:06 -Mapped URL path [/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-04-03 15:01:06 -Mapped URL path [/files/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-04-03 15:01:06 -Detected @ExceptionHandler methods in BDExceptionHandler
2019-04-03 15:01:06 -[THYMELEAF][main] Template Mode 'LEGACYHTML5' is deprecated. Using Template Mode 'HTML' instead.
2019-04-03 15:01:08 -Registering beans for JMX exposure on startup
2019-04-03 15:01:08 -Bean with name 'dataSource' has been autodetected for JMX exposure
2019-04-03 15:01:08 -Located MBean 'dataSource': registering with JMX server as MBean [com.alibaba.druid.pool:name=dataSource,type=DruidDataSource]
2019-04-03 15:01:08 -Starting beans in phase 2147483647
2019-04-03 15:01:08 -Context refreshed
2019-04-03 15:01:08 -Found 1 custom documentation plugin(s)
2019-04-03 15:01:08 -Scanning for api listing references
2019-04-03 15:01:08 -Generating unique operation named: exprotElecLogUsingGET_1
2019-04-03 15:01:08 -Generating unique operation named: getCountDUsingPOST_1
2019-04-03 15:01:08 -Generating unique operation named: exprotElecLogUsingGET_2
2019-04-03 15:01:08 -Generating unique operation named: getCountDUsingPOST_2
2019-04-03 15:01:08 -Generating unique operation named: exprotElecLogUsingGET_3
2019-04-03 15:01:08 -Generating unique operation named: getCountDUsingPOST_3
2019-04-03 15:01:08 -Generating unique operation named: removeUsingPOST_1
2019-04-03 15:01:08 -Generating unique operation named: addUsingGET_1
2019-04-03 15:01:08 -Generating unique operation named: editUsingGET_1
2019-04-03 15:01:08 -Generating unique operation named: listUsingGET_1
2019-04-03 15:01:08 -Generating unique operation named: removeUsingPOST_2
2019-04-03 15:01:09 -Generating unique operation named: removeUsingPOST_3
2019-04-03 15:01:09 -Generating unique operation named: saveUsingPOST_1
2019-04-03 15:01:09 -Generating unique operation named: updateUsingGET_1
2019-04-03 15:01:09 -Generating unique operation named: updateUsingHEAD_1
2019-04-03 15:01:09 -Generating unique operation named: updateUsingPOST_1
2019-04-03 15:01:09 -Generating unique operation named: updateUsingPUT_1
2019-04-03 15:01:09 -Generating unique operation named: updateUsingPATCH_1
2019-04-03 15:01:09 -Generating unique operation named: updateUsingDELETE_1
2019-04-03 15:01:09 -Generating unique operation named: updateUsingOPTIONS_1
2019-04-03 15:01:09 -Generating unique operation named: updateUsingTRACE_1
2019-04-03 15:01:09 -Generating unique operation named: addUsingGET_2
2019-04-03 15:01:09 -Generating unique operation named: editUsingGET_2
2019-04-03 15:01:09 -Generating unique operation named: listUsingGET_2
2019-04-03 15:01:09 -Generating unique operation named: removeUsingPOST_4
2019-04-03 15:01:09 -Generating unique operation named: removeUsingPOST_5
2019-04-03 15:01:09 -Generating unique operation named: saveUsingPOST_2
2019-04-03 15:01:09 -Generating unique operation named: updateUsingPOST_2
2019-04-03 15:01:09 -Generating unique operation named: exprotExcelUsingGET_1
2019-04-03 15:01:09 -Generating unique operation named: addUsingGET_3
2019-04-03 15:01:09 -Generating unique operation named: editUsingGET_3
2019-04-03 15:01:09 -Generating unique operation named: exprotElecLogUsingGET_4
2019-04-03 15:01:09 -Generating unique operation named: listUsingGET_3
2019-04-03 15:01:09 -Generating unique operation named: removeUsingPOST_6
2019-04-03 15:01:09 -Generating unique operation named: removeUsingPOST_7
2019-04-03 15:01:09 -Generating unique operation named: saveUsingPOST_3
2019-04-03 15:01:09 -Generating unique operation named: updateUsingGET_2
2019-04-03 15:01:09 -Generating unique operation named: updateUsingHEAD_2
2019-04-03 15:01:09 -Generating unique operation named: updateUsingPOST_3
2019-04-03 15:01:09 -Generating unique operation named: updateUsingPUT_2
2019-04-03 15:01:09 -Generating unique operation named: updateUsingPATCH_2
2019-04-03 15:01:09 -Generating unique operation named: updateUsingDELETE_2
2019-04-03 15:01:09 -Generating unique operation named: updateUsingOPTIONS_2
2019-04-03 15:01:09 -Generating unique operation named: updateUsingTRACE_2
2019-04-03 15:01:09 -Generating unique operation named: addUsingGET_4
2019-04-03 15:01:09 -Generating unique operation named: editUsingGET_4
2019-04-03 15:01:09 -Generating unique operation named: listUsingGET_4
2019-04-03 15:01:09 -Generating unique operation named: removeUsingPOST_8
2019-04-03 15:01:09 -Generating unique operation named: removeUsingPOST_9
2019-04-03 15:01:09 -Generating unique operation named: saveUsingPOST_4
2019-04-03 15:01:09 -Generating unique operation named: updateUsingGET_3
2019-04-03 15:01:09 -Generating unique operation named: updateUsingHEAD_3
2019-04-03 15:01:09 -Generating unique operation named: updateUsingPOST_4
2019-04-03 15:01:09 -Generating unique operation named: updateUsingPUT_3
2019-04-03 15:01:09 -Generating unique operation named: updateUsingPATCH_3
2019-04-03 15:01:09 -Generating unique operation named: updateUsingDELETE_3
2019-04-03 15:01:09 -Generating unique operation named: updateUsingOPTIONS_3
2019-04-03 15:01:09 -Generating unique operation named: updateUsingTRACE_3
2019-04-03 15:01:09 -Generating unique operation named: ElecUsingGET_1
2019-04-03 15:01:09 -Generating unique operation named: addUsingGET_5
2019-04-03 15:01:09 -Generating unique operation named: editUsingGET_5
2019-04-03 15:01:09 -Generating unique operation named: listUsingGET_5
2019-04-03 15:01:09 -Generating unique operation named: removeUsingPOST_10
2019-04-03 15:01:09 -Generating unique operation named: removeUsingPOST_11
2019-04-03 15:01:09 -Generating unique operation named: saveUsingPOST_5
2019-04-03 15:01:09 -Generating unique operation named: updateUsingGET_4
2019-04-03 15:01:09 -Generating unique operation named: updateUsingHEAD_4
2019-04-03 15:01:09 -Generating unique operation named: updateUsingPOST_5
2019-04-03 15:01:09 -Generating unique operation named: updateUsingPUT_4
2019-04-03 15:01:09 -Generating unique operation named: updateUsingPATCH_4
2019-04-03 15:01:09 -Generating unique operation named: updateUsingDELETE_4
2019-04-03 15:01:09 -Generating unique operation named: updateUsingOPTIONS_4
2019-04-03 15:01:09 -Generating unique operation named: updateUsingTRACE_4
2019-04-03 15:01:09 -Generating unique operation named: editUsingGET_6
2019-04-03 15:01:09 -Generating unique operation named: listUsingGET_6
2019-04-03 15:01:09 -Generating unique operation named: updateUsingPOST_6
2019-04-03 15:01:09 -Generating unique operation named: addUsingGET_6
2019-04-03 15:01:09 -Generating unique operation named: editUsingGET_7
2019-04-03 15:01:09 -Generating unique operation named: exprotExcelUsingGET_2
2019-04-03 15:01:09 -Generating unique operation named: listUsingGET_7
2019-04-03 15:01:09 -Generating unique operation named: removeUsingPOST_12
2019-04-03 15:01:09 -Generating unique operation named: removeUsingPOST_13
2019-04-03 15:01:09 -Generating unique operation named: saveUsingPOST_6
2019-04-03 15:01:09 -Generating unique operation named: updateUsingGET_5
2019-04-03 15:01:09 -Generating unique operation named: updateUsingHEAD_5
2019-04-03 15:01:09 -Generating unique operation named: updateUsingPOST_7
2019-04-03 15:01:09 -Generating unique operation named: updateUsingPUT_5
2019-04-03 15:01:09 -Generating unique operation named: updateUsingPATCH_5
2019-04-03 15:01:09 -Generating unique operation named: updateUsingDELETE_5
2019-04-03 15:01:09 -Generating unique operation named: updateUsingOPTIONS_5
2019-04-03 15:01:09 -Generating unique operation named: updateUsingTRACE_5
2019-04-03 15:01:09 -Generating unique operation named: exprotExcelUsingGET_3
2019-04-03 15:01:09 -Generating unique operation named: addUsingGET_7
2019-04-03 15:01:09 -Generating unique operation named: editUsingGET_8
2019-04-03 15:01:09 -Generating unique operation named: listUsingGET_8
2019-04-03 15:01:09 -Generating unique operation named: removeUsingPOST_14
2019-04-03 15:01:09 -Generating unique operation named: removeUsingPOST_15
2019-04-03 15:01:09 -Generating unique operation named: saveUsingPOST_7
2019-04-03 15:01:09 -Generating unique operation named: updateUsingGET_6
2019-04-03 15:01:09 -Generating unique operation named: updateUsingHEAD_6
2019-04-03 15:01:09 -Generating unique operation named: updateUsingPOST_8
2019-04-03 15:01:09 -Generating unique operation named: updateUsingPUT_6
2019-04-03 15:01:09 -Generating unique operation named: updateUsingPATCH_6
2019-04-03 15:01:09 -Generating unique operation named: updateUsingDELETE_6
2019-04-03 15:01:09 -Generating unique operation named: updateUsingOPTIONS_6
2019-04-03 15:01:09 -Generating unique operation named: updateUsingTRACE_6
2019-04-03 15:01:09 -Generating unique operation named: addUsingGET_8
2019-04-03 15:01:09 -Generating unique operation named: editUsingGET_9
2019-04-03 15:01:09 -Generating unique operation named: listUsingGET_9
2019-04-03 15:01:09 -Generating unique operation named: removeUsingPOST_16
2019-04-03 15:01:09 -Generating unique operation named: removeUsingPOST_17
2019-04-03 15:01:09 -Generating unique operation named: saveUsingPOST_8
2019-04-03 15:01:09 -Generating unique operation named: updateUsingGET_7
2019-04-03 15:01:09 -Generating unique operation named: updateUsingHEAD_7
2019-04-03 15:01:09 -Generating unique operation named: updateUsingPOST_9
2019-04-03 15:01:09 -Generating unique operation named: updateUsingPUT_7
2019-04-03 15:01:09 -Generating unique operation named: updateUsingPATCH_7
2019-04-03 15:01:09 -Generating unique operation named: updateUsingDELETE_7
2019-04-03 15:01:09 -Generating unique operation named: updateUsingOPTIONS_7
2019-04-03 15:01:09 -Generating unique operation named: updateUsingTRACE_7
2019-04-03 15:01:09 -Generating unique operation named: addUsingGET_9
2019-04-03 15:01:09 -Generating unique operation named: editUsingGET_10
2019-04-03 15:01:09 -Generating unique operation named: infoUsingGET_1
2019-04-03 15:01:09 -Generating unique operation named: infoUsingHEAD_1
2019-04-03 15:01:09 -Generating unique operation named: infoUsingPOST_1
2019-04-03 15:01:09 -Generating unique operation named: infoUsingPUT_1
2019-04-03 15:01:09 -Generating unique operation named: infoUsingPATCH_1
2019-04-03 15:01:09 -Generating unique operation named: infoUsingDELETE_1
2019-04-03 15:01:09 -Generating unique operation named: infoUsingOPTIONS_1
2019-04-03 15:01:09 -Generating unique operation named: infoUsingTRACE_1
2019-04-03 15:01:09 -Generating unique operation named: listUsingGET_10
2019-04-03 15:01:09 -Generating unique operation named: removeUsingPOST_18
2019-04-03 15:01:09 -Generating unique operation named: removeUsingPOST_19
2019-04-03 15:01:09 -Generating unique operation named: saveUsingPOST_9
2019-04-03 15:01:09 -Generating unique operation named: updateUsingPOST_10
2019-04-03 15:01:09 -Generating unique operation named: listUsingGET_11
2019-04-03 15:01:09 -Generating unique operation named: removeUsingPOST_20
2019-04-03 15:01:09 -Generating unique operation named: welcomeUsingGET_1
2019-04-03 15:01:10 -Generating unique operation named: addUsingGET_10
2019-04-03 15:01:10 -Generating unique operation named: editUsingGET_11
2019-04-03 15:01:10 -Generating unique operation named: listUsingGET_12
2019-04-03 15:01:10 -Generating unique operation named: removeUsingPOST_21
2019-04-03 15:01:10 -Generating unique operation named: saveUsingPOST_10
2019-04-03 15:01:10 -Generating unique operation named: treeUsingGET_1
2019-04-03 15:01:10 -Generating unique operation named: treeUsingGET_2
2019-04-03 15:01:10 -Generating unique operation named: updateUsingPOST_11
2019-04-03 15:01:10 -Generating unique operation named: addUsingGET_11
2019-04-03 15:01:10 -Generating unique operation named: editUsingGET_12
2019-04-03 15:01:10 -Generating unique operation named: listUsingGET_13
2019-04-03 15:01:10 -Generating unique operation named: removeUsingPOST_22
2019-04-03 15:01:10 -Generating unique operation named: removeUsingPOST_23
2019-04-03 15:01:10 -Generating unique operation named: saveUsingPOST_11
2019-04-03 15:01:10 -Generating unique operation named: updateUsingGET_8
2019-04-03 15:01:10 -Generating unique operation named: updateUsingHEAD_8
2019-04-03 15:01:10 -Generating unique operation named: updateUsingPOST_12
2019-04-03 15:01:10 -Generating unique operation named: updateUsingPUT_8
2019-04-03 15:01:10 -Generating unique operation named: updateUsingPATCH_8
2019-04-03 15:01:10 -Generating unique operation named: updateUsingDELETE_8
2019-04-03 15:01:10 -Generating unique operation named: updateUsingOPTIONS_8
2019-04-03 15:01:10 -Generating unique operation named: updateUsingTRACE_8
2019-04-03 15:01:10 -Generating unique operation named: addUsingGET_12
2019-04-03 15:01:10 -Generating unique operation named: editUsingGET_13
2019-04-03 15:01:10 -Generating unique operation named: listUsingGET_14
2019-04-03 15:01:10 -Generating unique operation named: removeUsingPOST_24
2019-04-03 15:01:10 -Generating unique operation named: removeUsingPOST_25
2019-04-03 15:01:10 -Generating unique operation named: saveUsingPOST_12
2019-04-03 15:01:10 -Generating unique operation named: updateUsingGET_9
2019-04-03 15:01:10 -Generating unique operation named: updateUsingHEAD_9
2019-04-03 15:01:10 -Generating unique operation named: updateUsingPOST_13
2019-04-03 15:01:10 -Generating unique operation named: updateUsingPUT_9
2019-04-03 15:01:10 -Generating unique operation named: updateUsingPATCH_9
2019-04-03 15:01:10 -Generating unique operation named: updateUsingDELETE_9
2019-04-03 15:01:10 -Generating unique operation named: updateUsingOPTIONS_9
2019-04-03 15:01:10 -Generating unique operation named: updateUsingTRACE_9
2019-04-03 15:01:10 -Generating unique operation named: addUsingGET_13
2019-04-03 15:01:10 -Generating unique operation named: batchRemoveUsingPOST_1
2019-04-03 15:01:10 -Generating unique operation named: editUsingGET_14
2019-04-03 15:01:10 -Generating unique operation named: listUsingGET_15
2019-04-03 15:01:10 -Generating unique operation named: saveUsingPOST_13
2019-04-03 15:01:10 -Generating unique operation named: saveUsingPOST_14
2019-04-03 15:01:10 -Generating unique operation named: updateUsingPOST_14
2019-04-03 15:01:10 -Generating unique operation named: listUsingGET_16
2019-04-03 15:01:10 -Generating unique operation named: listUsingHEAD_1
2019-04-03 15:01:10 -Generating unique operation named: listUsingPOST_1
2019-04-03 15:01:10 -Generating unique operation named: listUsingPUT_1
2019-04-03 15:01:10 -Generating unique operation named: listUsingPATCH_1
2019-04-03 15:01:10 -Generating unique operation named: listUsingDELETE_1
2019-04-03 15:01:10 -Generating unique operation named: listUsingOPTIONS_1
2019-04-03 15:01:10 -Generating unique operation named: listUsingTRACE_1
2019-04-03 15:01:10 -Generating unique operation named: addUsingGET_14
2019-04-03 15:01:10 -Generating unique operation named: batchRemoveUsingPOST_2
2019-04-03 15:01:10 -Generating unique operation named: editUsingGET_15
2019-04-03 15:01:10 -Generating unique operation named: listUsingGET_17
2019-04-03 15:01:10 -Generating unique operation named: removeUsingPOST_26
2019-04-03 15:01:10 -Generating unique operation named: saveUsingPOST_15
2019-04-03 15:01:10 -Generating unique operation named: treeUsingGET_3
2019-04-03 15:01:10 -Generating unique operation named: treeViewUsingGET_1
2019-04-03 15:01:10 -Generating unique operation named: updateUsingPOST_15
2019-04-03 15:01:10 -Generating unique operation named: addUsingGET_15
2019-04-03 15:01:10 -Generating unique operation named: editUsingGET_16
2019-04-03 15:01:10 -Generating unique operation named: exprotExcelUsingGET_4
2019-04-03 15:01:10 -Generating unique operation named: listUsingGET_18
2019-04-03 15:01:10 -Generating unique operation named: removeUsingPOST_27
2019-04-03 15:01:10 -Generating unique operation named: removeUsingPOST_28
2019-04-03 15:01:10 -Generating unique operation named: saveUsingPOST_16
2019-04-03 15:01:10 -Generating unique operation named: updateUsingGET_10
2019-04-03 15:01:10 -Generating unique operation named: updateUsingHEAD_10
2019-04-03 15:01:10 -Generating unique operation named: updateUsingPOST_16
2019-04-03 15:01:10 -Generating unique operation named: updateUsingPUT_10
2019-04-03 15:01:10 -Generating unique operation named: updateUsingPATCH_10
2019-04-03 15:01:10 -Generating unique operation named: updateUsingDELETE_10
2019-04-03 15:01:10 -Generating unique operation named: updateUsingOPTIONS_10
2019-04-03 15:01:10 -Generating unique operation named: updateUsingTRACE_10
2019-04-03 15:01:10 -Generating unique operation named: exprotExcelUsingGET_5
2019-04-03 15:01:10 -Generating unique operation named: addUsingGET_16
2019-04-03 15:01:10 -Generating unique operation named: editUsingGET_17
2019-04-03 15:01:10 -Generating unique operation named: listUsingGET_19
2019-04-03 15:01:10 -Generating unique operation named: removeUsingPOST_29
2019-04-03 15:01:10 -Generating unique operation named: removeUsingPOST_30
2019-04-03 15:01:10 -Generating unique operation named: saveUsingPOST_17
2019-04-03 15:01:10 -Generating unique operation named: updateUsingGET_11
2019-04-03 15:01:10 -Generating unique operation named: updateUsingHEAD_11
2019-04-03 15:01:10 -Generating unique operation named: updateUsingPOST_17
2019-04-03 15:01:10 -Generating unique operation named: updateUsingPUT_11
2019-04-03 15:01:10 -Generating unique operation named: updateUsingPATCH_11
2019-04-03 15:01:10 -Generating unique operation named: updateUsingDELETE_11
2019-04-03 15:01:10 -Generating unique operation named: updateUsingOPTIONS_11
2019-04-03 15:01:10 -Generating unique operation named: updateUsingTRACE_11
2019-04-03 15:01:10 -Generating unique operation named: addUsingGET_17
2019-04-03 15:01:10 -Generating unique operation named: editUsingGET_18
2019-04-03 15:01:10 -Generating unique operation named: listUsingGET_20
2019-04-03 15:01:10 -Generating unique operation named: removeUsingPOST_31
2019-04-03 15:01:10 -Generating unique operation named: removeUsingPOST_32
2019-04-03 15:01:10 -Generating unique operation named: saveUsingPOST_18
2019-04-03 15:01:10 -Generating unique operation named: updateUsingGET_12
2019-04-03 15:01:10 -Generating unique operation named: updateUsingHEAD_12
2019-04-03 15:01:10 -Generating unique operation named: updateUsingPOST_18
2019-04-03 15:01:10 -Generating unique operation named: updateUsingPUT_12
2019-04-03 15:01:10 -Generating unique operation named: updateUsingPATCH_12
2019-04-03 15:01:10 -Generating unique operation named: updateUsingDELETE_12
2019-04-03 15:01:10 -Generating unique operation named: updateUsingOPTIONS_12
2019-04-03 15:01:10 -Generating unique operation named: updateUsingTRACE_12
2019-04-03 15:01:10 -Starting Quartz Scheduler now
2019-04-03 15:01:10 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED started.
2019-04-03 15:01:10 -Starting...
2019-04-03 15:01:10 -BrokerAvailabilityEvent[available=true, SimpleBrokerMessageHandler [DefaultSubscriptionRegistry[cache[0 destination(s)], registry[0 sessions]]]]
2019-04-03 15:01:10 -Started.
2019-04-03 15:01:10 -Starting ProtocolHandler ["http-nio-8081"]
2019-04-03 15:01:10 -Using a shared selector for servlet write/read
2019-04-03 15:01:10 -Tomcat started on port(s): 8081 (http) with context path ''
2019-04-03 15:01:10 -Started BootdoApplication in 20.464 seconds (JVM running for 21.287)
2019-04-03 15:01:11 -==>  Preparing: select `id`,`cron_expression`,`method_name`,`is_concurrent`,`description`,`update_by`,`bean_class`,`create_date`,`job_status`,`job_group`,`update_date`,`create_by`,`spring_bean`,`job_name` from sys_task order by id desc 
2019-04-03 15:01:11 -==> Parameters: 
2019-04-03 15:01:11 -<==      Total: 1
2019-04-03 15:02:05 -WebSocketSession[0 current WS(0)-HttpStream(0)-HttpPoll(0), 0 total, 0 closed abnormally (0 connect failure, 0 send limit, 0 transport error)], stompSubProtocol[processed CONNECT(0)-CONNECTED(0)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], outboundChannelpool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], sockJsScheduler[pool size = 1, active threads = 1, queued tasks = 0, completed tasks = 0]
2019-04-03 15:02:06 -Initializing Spring FrameworkServlet 'dispatcherServlet'
2019-04-03 15:02:06 -FrameworkServlet 'dispatcherServlet': initialization started
2019-04-03 15:02:06 -FrameworkServlet 'dispatcherServlet': initialization completed in 99 ms
2019-04-03 15:02:06 -Enabling session validation scheduler...
2019-04-03 15:02:07 -请求地址 : http://localhost:8081/login;JSESSIONID=d5166617-5f9d-44da-bfc1-32a877025e9a
2019-04-03 15:02:07 -HTTP METHOD : GET
2019-04-03 15:02:07 -CLASS_METHOD : com.bootdo.system.controller.LoginController.login
2019-04-03 15:02:07 -参数 : [{}]
2019-04-03 15:02:07 -耗时 : 4
2019-04-03 15:02:07 -返回值 : login
2019-04-03 15:02:08 -请求地址 : http://localhost:8081/getVerify
2019-04-03 15:02:08 -HTTP METHOD : GET
2019-04-03 15:02:08 -CLASS_METHOD : com.bootdo.system.controller.LoginController.getVerify
2019-04-03 15:02:08 -参数 : [org.apache.shiro.web.servlet.ShiroHttpServletRequest@5da9a00b, org.apache.shiro.web.servlet.ShiroHttpServletResponse@1e2ede0f]
2019-04-03 15:02:09 -9115
2019-04-03 15:02:09 -耗时 : 778
2019-04-03 15:02:09 -返回值 : null
2019-04-03 15:02:14 -请求地址 : http://localhost:8081/login
2019-04-03 15:02:14 -HTTP METHOD : POST
2019-04-03 15:02:14 -CLASS_METHOD : com.bootdo.system.controller.LoginController.ajaxLogin
2019-04-03 15:02:14 -参数 : [admin, 111111, 9115, org.apache.shiro.web.servlet.ShiroHttpServletRequest@893f7bb]
2019-04-03 15:02:14 -==>  Preparing: select `user_id`,`username`,`name`,`password`,`dept_id`,`email`,`mobile`,`status`,`user_id_create`,`gmt_create`,`gmt_modified`,`sex`,`birth`,`pic_id`,`live_address`,`hobby`,`province`,`city`,`district` from sys_user WHERE username = ? order by user_id desc 
2019-04-03 15:02:14 -==> Parameters: admin(String)
2019-04-03 15:02:14 -<==      Total: 1
2019-04-03 15:02:14 -耗时 : 292
2019-04-03 15:02:14 -返回值 : {msg=操作成功, code=0}
2019-04-03 15:02:14 -More than one TaskExecutor bean found within the context, and none is named 'taskExecutor'. Mark one of them as primary or name it 'taskExecutor' (possibly as an alias) in order to use it for async processing: [clientInboundChannelExecutor, clientOutboundChannelExecutor, brokerChannelExecutor, messageBrokerTaskScheduler]
2019-04-03 15:02:14 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 15:02:14 -==> Parameters: 1(Long), admin(String), 登录(String), 292(Integer), com.bootdo.system.controller.LoginController.ajaxLogin()(String), null, 127.0.0.1(String), 2019-04-03 15:02:14.696(Timestamp)
2019-04-03 15:02:14 -请求地址 : http://localhost:8081/index
2019-04-03 15:02:14 -HTTP METHOD : GET
2019-04-03 15:02:14 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2019-04-03 15:02:14 -参数 : [{}]
2019-04-03 15:02:15 -<==    Updates: 1
2019-04-03 15:02:15 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2019-04-03 15:02:15 -==> Parameters: 1(Long)
2019-04-03 15:02:15 -<==      Total: 46
2019-04-03 15:02:15 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2019-04-03 15:02:15 -==> Parameters: 138(Long)
2019-04-03 15:02:15 -<==      Total: 1
2019-04-03 15:02:15 -耗时 : 891
2019-04-03 15:02:15 -返回值 : index_v1
2019-04-03 15:02:15 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 15:02:15 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 891(Integer), com.bootdo.system.controller.LoginController.index()(String), {"menus":[{"attributes":{"icon":"fa fa-money","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-money","url":"/moneyList/moneyList"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"102","parentId":"106","text":"现金缴费"},{"attributes":{"icon":"fa fa-book","url":"/moneyLog/elecLog"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"107","parentId":"106","text":"缴费记录"}],"hasChildren":true,"hasParent":false,"id":"106","parentId":"0","text":"收费管理"},{"attributes":{"icon":"fa fa-lightbulb-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/elec/elec"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"121","parentId":"103","text":"电费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"elec/elecInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"122","parentId":"103","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"elec/elecUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"123","parentId":"103","text":"电表上传"},{"attributes":{"icon":"fa fa-cc","url":"/elec/elecPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"124","parentId":"103","text":"电价管理"}],"hasChildren":true,"hasParent":false,"id":"103","parentId":"0","text":"电费管理"},{"attributes":{"icon":"fa fa-tint","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/water/water"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"117","parentId":"105","text":"水费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"water/waterInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"118","parentId":"105","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"water/waterUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"119","parentId":"105","text":"水费生成"},{"attributes":{"icon":"fa fa-cc","url":"/water/waterPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"120","parentId":"105","text":"水价管理"}],"hasChildren":true,"hasParent":false,"id":"105","parentId":"0","text":"水费管理"},{"attributes":{"icon":"fa fa-fire","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/heat/heat"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"113","parentId":"104","text":"暖费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"heat/heatInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"114","parentId":"104","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"heat/heatUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"115","parentId":"104","text":"暖费生成"},{"attributes":{"icon":"","url":"/heat/heatPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"116","parentId":"104","text":"暖价管理"}],"hasChildren":true,"hasParent":false,"id":"104","parentId":"0","text":"暖费管理"},{"attributes":{"icon":"fa fa-vcard-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-bomb","url":"/print/print"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"149","parentId":"108","text":"票据记录"}],"hasChildren":true,"hasParent":false,"id":"108","parentId":"0","text":"票据管理"},{"attributes":{"icon":"fa fa-bar-chart","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-area-chart","url":"/chart/graph_echarts.html"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","text":"百度chart"},{"attributes":{"icon":"fa fa-sun-o","url":"charts/countDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"109","parentId":"97","text":"日统计报表"},{"attributes":{"icon":"fa fa-registered","url":"charts/countMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"110","parentId":"97","text":"月统计报表"},{"attributes":{"icon":"fa fa-money","url":"charts/countOwe"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"155","parentId":"97","text":"欠费报表图"},{"attributes":{"icon":"fa fa-support","url":"charts/countYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"111","parentId":"97","text":"年统计报表"},{"attributes":{"icon":"fa fa-tachometer","url":"charts/countRun"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"112","parentId":"97","text":"走势图报表"}],"hasChildren":true,"hasParent":false,"id":"97","parentId":"0","text":"统计管理"},{"attributes":{"icon":"fa fa-bars","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-book","url":"/common/dict"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"78","parentId":"1","text":"数据字典"},{"attributes":{"icon":"fa fa-folder-open","url":"/common/sysFile"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"71","parentId":"1","text":"文件管理"}],"h(String), 127.0.0.1(String), 2019-04-03 15:02:15.708(Timestamp)
2019-04-03 15:02:15 -<==    Updates: 1
2019-04-03 15:02:15 -请求地址 : http://localhost:8081/main
2019-04-03 15:02:15 -HTTP METHOD : GET
2019-04-03 15:02:15 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 15:02:15 -参数 : []
2019-04-03 15:02:15 -耗时 : 1
2019-04-03 15:02:15 -返回值 : main
2019-04-03 15:02:16 -请求地址 : http://localhost:8081/oa/notify/message
2019-04-03 15:02:16 -HTTP METHOD : GET
2019-04-03 15:02:16 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2019-04-03 15:02:16 -参数 : []
2019-04-03 15:02:16 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2019-04-03 15:02:16 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2019-04-03 15:02:16 -请求地址 : http://localhost:8081/main
2019-04-03 15:02:16 -HTTP METHOD : GET
2019-04-03 15:02:16 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 15:02:16 -参数 : []
2019-04-03 15:02:16 -耗时 : 0
2019-04-03 15:02:16 -返回值 : main
2019-04-03 15:02:16 -<==      Total: 0
2019-04-03 15:02:16 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2019-04-03 15:02:16 -==> Parameters: 1(Long), 0(String)
2019-04-03 15:02:16 -<==      Total: 1
2019-04-03 15:02:16 -耗时 : 546
2019-04-03 15:02:16 -返回值 : com.bootdo.common.utils.PageUtils@144aaf3d
2019-04-03 15:02:22 -==>  Preparing: select distinct m.perms from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id = ur.role_id where ur.user_id = ? 
2019-04-03 15:02:22 -==> Parameters: 1(Long)
2019-04-03 15:02:22 -<==      Total: 90
2019-04-03 15:02:22 -请求地址 : http://localhost:8081/moneyList/moneyList
2019-04-03 15:02:22 -HTTP METHOD : GET
2019-04-03 15:02:22 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.MoneyList
2019-04-03 15:02:22 -参数 : []
2019-04-03 15:02:22 -耗时 : 0
2019-04-03 15:02:22 -返回值 : /moneyList/moneyList
2019-04-03 15:02:27 -请求地址 : http://localhost:8081/system/sysDept/treeView
2019-04-03 15:02:27 -HTTP METHOD : GET
2019-04-03 15:02:27 -CLASS_METHOD : com.bootdo.system.controller.DeptController.treeView
2019-04-03 15:02:27 -参数 : []
2019-04-03 15:02:27 -耗时 : 1
2019-04-03 15:02:27 -返回值 : system/dept/deptTree
2019-04-03 15:02:28 -请求地址 : http://localhost:8081/system/sysDept/tree
2019-04-03 15:02:28 -HTTP METHOD : GET
2019-04-03 15:02:28 -CLASS_METHOD : com.bootdo.system.controller.DeptController.tree
2019-04-03 15:02:28 -参数 : []
2019-04-03 15:02:28 -==>  Preparing: select `dept_id`,`parent_id`,`name`,`order_num`,`del_flag` from sys_dept order by dept_id desc 
2019-04-03 15:02:28 -==> Parameters: 
2019-04-03 15:02:28 -<==      Total: 3
2019-04-03 15:02:28 -耗时 : 66
2019-04-03 15:02:28 -返回值 : {"checked":false,"children":[{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"3","parentId":"1","state":{"opened":true},"text":"牙星"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"2","parentId":"1","state":{"opened":true},"text":"五九"}],"hasChildren":true,"hasParent":false,"id":"1","parentId":"0","state":{"opened":true},"text":"总公司"}
2019-04-03 15:02:32 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUserName
2019-04-03 15:02:32 -HTTP METHOD : POST
2019-04-03 15:02:32 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.getAllUserName
2019-04-03 15:02:32 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@2dffc253]
2019-04-03 15:02:32 -==>  Preparing: select DISTINCT user_name from( select user_name from elec WHERE create_time = ? and user_name like CONCAT(CONCAT('%',?,'%')) UNION ALL select user_name from heat WHERE create_time = ? and user_name like CONCAT(CONCAT('%',?,'%')) UNION ALL select user_name from water WHERE create_time = ? and user_name like CONCAT(CONCAT('%',?,'%')) )username 
2019-04-03 15:02:32 -==> Parameters: 2019-02(String), 姜(String), 2019-02(String), 姜(String), 2019-02(String), 姜(String)
2019-04-03 15:02:32 -<==      Total: 1
2019-04-03 15:02:32 -耗时 : 198
2019-04-03 15:02:32 -返回值 : [com.bootdo.moneyList.damain.MoneyListDO@675be279]
2019-04-03 15:02:34 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUser
2019-04-03 15:02:34 -HTTP METHOD : POST
2019-04-03 15:02:34 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.queryAllUser
2019-04-03 15:02:34 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@1bcc10e6]
2019-04-03 15:02:34 -==>  Preparing: select COUNT(*) number, user_id, user_name, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, elec_type usertype, elec_price userprice, elec_amount userarea, elec_cost usercost, elec_Sum usersum from elec WHERE create_time = ? UNION ALL select COUNT(*) number, user_id, user_name, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, heat_type usertype, heat_price userprice, heat_area userarea, heat_cost usercost, heat_Sum usersum from heat WHERE create_time = ? UNION ALL select COUNT(*) number, user_id, user_name, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, water_type usertype, water_price userprice, water_price userarea, water_price usercost, water_Sum usersum from water WHERE create_time = ? 
2019-04-03 15:02:34 -==> Parameters: 2019-02(String), 2019-02(String), 2019-02(String)
2019-04-03 15:02:34 -<==      Total: 3
2019-04-03 15:02:34 -耗时 : 128
2019-04-03 15:02:34 -返回值 : [com.bootdo.moneyList.damain.MoneyListDO@1d326c3, com.bootdo.moneyList.damain.MoneyListDO@14a8725e, com.bootdo.moneyList.damain.MoneyListDO@343cc8f7]
2019-04-03 15:03:19 -请求地址 : http://localhost:8081/login;JSESSIONID=9bf205b5-2cd3-4914-a2de-e7537ad96f93
2019-04-03 15:03:19 -HTTP METHOD : GET
2019-04-03 15:03:19 -CLASS_METHOD : com.bootdo.system.controller.LoginController.login
2019-04-03 15:03:19 -参数 : [{}]
2019-04-03 15:03:19 -耗时 : 1
2019-04-03 15:03:19 -返回值 : login
2019-04-03 15:03:20 -请求地址 : http://localhost:8081/getVerify
2019-04-03 15:03:20 -HTTP METHOD : GET
2019-04-03 15:03:20 -CLASS_METHOD : com.bootdo.system.controller.LoginController.getVerify
2019-04-03 15:03:20 -参数 : [org.apache.shiro.web.servlet.ShiroHttpServletRequest@4f3d8f4d, org.apache.shiro.web.servlet.ShiroHttpServletResponse@23bc25b]
2019-04-03 15:03:20 -8416
2019-04-03 15:03:20 -耗时 : 477
2019-04-03 15:03:20 -返回值 : null
2019-04-03 15:03:20 -请求地址 : http://localhost:8081/login
2019-04-03 15:03:20 -HTTP METHOD : GET
2019-04-03 15:03:20 -CLASS_METHOD : com.bootdo.system.controller.LoginController.login
2019-04-03 15:03:20 -参数 : [{}]
2019-04-03 15:03:20 -耗时 : 1
2019-04-03 15:03:20 -返回值 : login
2019-04-03 15:03:25 -请求地址 : http://localhost:8081/login
2019-04-03 15:03:25 -HTTP METHOD : POST
2019-04-03 15:03:25 -CLASS_METHOD : com.bootdo.system.controller.LoginController.ajaxLogin
2019-04-03 15:03:25 -参数 : [admin, 111111, 8416, org.apache.shiro.web.servlet.ShiroHttpServletRequest@6208c59e]
2019-04-03 15:03:25 -==>  Preparing: select `user_id`,`username`,`name`,`password`,`dept_id`,`email`,`mobile`,`status`,`user_id_create`,`gmt_create`,`gmt_modified`,`sex`,`birth`,`pic_id`,`live_address`,`hobby`,`province`,`city`,`district` from sys_user WHERE username = ? order by user_id desc 
2019-04-03 15:03:25 -==> Parameters: admin(String)
2019-04-03 15:03:25 -<==      Total: 1
2019-04-03 15:03:25 -耗时 : 8
2019-04-03 15:03:25 -返回值 : {msg=操作成功, code=0}
2019-04-03 15:03:25 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 15:03:25 -==> Parameters: 1(Long), admin(String), 登录(String), 14(Integer), com.bootdo.system.controller.LoginController.ajaxLogin()(String), null, 127.0.0.1(String), 2019-04-03 15:03:25.298(Timestamp)
2019-04-03 15:03:25 -请求地址 : http://localhost:8081/index
2019-04-03 15:03:25 -HTTP METHOD : GET
2019-04-03 15:03:25 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2019-04-03 15:03:25 -参数 : [{}]
2019-04-03 15:03:25 -<==    Updates: 1
2019-04-03 15:03:25 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2019-04-03 15:03:25 -==> Parameters: 1(Long)
2019-04-03 15:03:25 -<==      Total: 46
2019-04-03 15:03:25 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2019-04-03 15:03:25 -==> Parameters: 138(Long)
2019-04-03 15:03:25 -<==      Total: 1
2019-04-03 15:03:25 -耗时 : 390
2019-04-03 15:03:25 -返回值 : index_v1
2019-04-03 15:03:25 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 15:03:25 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 390(Integer), com.bootdo.system.controller.LoginController.index()(String), {"menus":[{"attributes":{"icon":"fa fa-money","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-money","url":"/moneyList/moneyList"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"102","parentId":"106","text":"现金缴费"},{"attributes":{"icon":"fa fa-book","url":"/moneyLog/elecLog"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"107","parentId":"106","text":"缴费记录"}],"hasChildren":true,"hasParent":false,"id":"106","parentId":"0","text":"收费管理"},{"attributes":{"icon":"fa fa-lightbulb-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/elec/elec"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"121","parentId":"103","text":"电费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"elec/elecInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"122","parentId":"103","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"elec/elecUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"123","parentId":"103","text":"电表上传"},{"attributes":{"icon":"fa fa-cc","url":"/elec/elecPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"124","parentId":"103","text":"电价管理"}],"hasChildren":true,"hasParent":false,"id":"103","parentId":"0","text":"电费管理"},{"attributes":{"icon":"fa fa-tint","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/water/water"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"117","parentId":"105","text":"水费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"water/waterInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"118","parentId":"105","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"water/waterUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"119","parentId":"105","text":"水费生成"},{"attributes":{"icon":"fa fa-cc","url":"/water/waterPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"120","parentId":"105","text":"水价管理"}],"hasChildren":true,"hasParent":false,"id":"105","parentId":"0","text":"水费管理"},{"attributes":{"icon":"fa fa-fire","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/heat/heat"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"113","parentId":"104","text":"暖费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"heat/heatInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"114","parentId":"104","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"heat/heatUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"115","parentId":"104","text":"暖费生成"},{"attributes":{"icon":"","url":"/heat/heatPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"116","parentId":"104","text":"暖价管理"}],"hasChildren":true,"hasParent":false,"id":"104","parentId":"0","text":"暖费管理"},{"attributes":{"icon":"fa fa-vcard-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-bomb","url":"/print/print"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"149","parentId":"108","text":"票据记录"}],"hasChildren":true,"hasParent":false,"id":"108","parentId":"0","text":"票据管理"},{"attributes":{"icon":"fa fa-bar-chart","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-area-chart","url":"/chart/graph_echarts.html"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","text":"百度chart"},{"attributes":{"icon":"fa fa-sun-o","url":"charts/countDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"109","parentId":"97","text":"日统计报表"},{"attributes":{"icon":"fa fa-registered","url":"charts/countMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"110","parentId":"97","text":"月统计报表"},{"attributes":{"icon":"fa fa-support","url":"charts/countYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"111","parentId":"97","text":"年统计报表"},{"attributes":{"icon":"fa fa-money","url":"charts/countOwe"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"155","parentId":"97","text":"欠费报表图"},{"attributes":{"icon":"fa fa-tachometer","url":"charts/countRun"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"112","parentId":"97","text":"走势图报表"}],"hasChildren":true,"hasParent":false,"id":"97","parentId":"0","text":"统计管理"},{"attributes":{"icon":"fa fa-bars","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-book","url":"/common/dict"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"78","parentId":"1","text":"数据字典"},{"attributes":{"icon":"fa fa-folder-open","url":"/common/sysFile"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"71","parentId":"1","text":"文件管理"}],"h(String), 127.0.0.1(String), 2019-04-03 15:03:25.733(Timestamp)
2019-04-03 15:03:25 -请求地址 : http://localhost:8081/main
2019-04-03 15:03:25 -HTTP METHOD : GET
2019-04-03 15:03:25 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 15:03:25 -参数 : []
2019-04-03 15:03:25 -耗时 : 1
2019-04-03 15:03:25 -返回值 : main
2019-04-03 15:03:25 -<==    Updates: 1
2019-04-03 15:03:26 -请求地址 : http://localhost:8081/oa/notify/message
2019-04-03 15:03:26 -HTTP METHOD : GET
2019-04-03 15:03:26 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2019-04-03 15:03:26 -参数 : []
2019-04-03 15:03:26 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2019-04-03 15:03:26 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2019-04-03 15:03:26 -请求地址 : http://localhost:8081/main
2019-04-03 15:03:26 -HTTP METHOD : GET
2019-04-03 15:03:26 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 15:03:26 -参数 : []
2019-04-03 15:03:26 -耗时 : 1
2019-04-03 15:03:26 -返回值 : main
2019-04-03 15:03:26 -<==      Total: 0
2019-04-03 15:03:26 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2019-04-03 15:03:26 -==> Parameters: 1(Long), 0(String)
2019-04-03 15:03:26 -<==      Total: 1
2019-04-03 15:03:26 -耗时 : 724
2019-04-03 15:03:26 -返回值 : com.bootdo.common.utils.PageUtils@7023b987
2019-04-03 15:03:37 -==>  Preparing: select distinct m.perms from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id = ur.role_id where ur.user_id = ? 
2019-04-03 15:03:37 -==> Parameters: 1(Long)
2019-04-03 15:03:37 -<==      Total: 90
2019-04-03 15:03:37 -请求地址 : http://localhost:8081/moneyList/moneyList
2019-04-03 15:03:37 -HTTP METHOD : GET
2019-04-03 15:03:37 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.MoneyList
2019-04-03 15:03:37 -参数 : []
2019-04-03 15:03:37 -耗时 : 0
2019-04-03 15:03:37 -返回值 : /moneyList/moneyList
2019-04-03 15:03:46 -请求地址 : http://localhost:8081/system/sysDept/treeView
2019-04-03 15:03:46 -HTTP METHOD : GET
2019-04-03 15:03:46 -CLASS_METHOD : com.bootdo.system.controller.DeptController.treeView
2019-04-03 15:03:46 -参数 : []
2019-04-03 15:03:46 -耗时 : 1
2019-04-03 15:03:46 -返回值 : system/dept/deptTree
2019-04-03 15:03:46 -请求地址 : http://localhost:8081/system/sysDept/tree
2019-04-03 15:03:46 -HTTP METHOD : GET
2019-04-03 15:03:46 -CLASS_METHOD : com.bootdo.system.controller.DeptController.tree
2019-04-03 15:03:46 -参数 : []
2019-04-03 15:03:46 -==>  Preparing: select `dept_id`,`parent_id`,`name`,`order_num`,`del_flag` from sys_dept order by dept_id desc 
2019-04-03 15:03:46 -==> Parameters: 
2019-04-03 15:03:46 -<==      Total: 3
2019-04-03 15:03:46 -耗时 : 20
2019-04-03 15:03:46 -返回值 : {"checked":false,"children":[{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"3","parentId":"1","state":{"opened":true},"text":"牙星"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"2","parentId":"1","state":{"opened":true},"text":"五九"}],"hasChildren":true,"hasParent":false,"id":"1","parentId":"0","state":{"opened":true},"text":"总公司"}
2019-04-03 15:03:54 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUserName
2019-04-03 15:03:54 -HTTP METHOD : POST
2019-04-03 15:03:54 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.getAllUserName
2019-04-03 15:03:54 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@3b583999]
2019-04-03 15:03:54 -==>  Preparing: select DISTINCT user_name from( select user_name from elec WHERE create_time = ? and user_name like CONCAT(CONCAT('%',?,'%')) UNION ALL select user_name from heat WHERE create_time = ? and user_name like CONCAT(CONCAT('%',?,'%')) UNION ALL select user_name from water WHERE create_time = ? and user_name like CONCAT(CONCAT('%',?,'%')) )username 
2019-04-03 15:03:54 -==> Parameters: 2019-02(String), 姜(String), 2019-02(String), 姜(String), 2019-02(String), 姜(String)
2019-04-03 15:03:54 -<==      Total: 1
2019-04-03 15:03:54 -耗时 : 189
2019-04-03 15:03:54 -返回值 : [com.bootdo.moneyList.damain.MoneyListDO@67951886]
2019-04-03 15:03:56 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUser
2019-04-03 15:03:56 -HTTP METHOD : POST
2019-04-03 15:03:56 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.queryAllUser
2019-04-03 15:03:56 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@7ce64d2]
2019-04-03 15:03:56 -==>  Preparing: select COUNT(*) number, user_id, user_name, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, elec_type usertype, elec_price userprice, elec_amount userarea, elec_cost usercost, elec_Sum usersum from elec WHERE create_time = ? UNION ALL select COUNT(*) number, user_id, user_name, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, heat_type usertype, heat_price userprice, heat_area userarea, heat_cost usercost, heat_Sum usersum from heat WHERE create_time = ? UNION ALL select COUNT(*) number, user_id, user_name, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, water_type usertype, water_price userprice, water_price userarea, water_price usercost, water_Sum usersum from water WHERE create_time = ? 
2019-04-03 15:03:56 -==> Parameters: 2019-02(String), 2019-02(String), 2019-02(String)
2019-04-03 15:03:56 -<==      Total: 3
2019-04-03 15:03:56 -耗时 : 183
2019-04-03 15:03:56 -返回值 : [com.bootdo.moneyList.damain.MoneyListDO@7369a2e9, com.bootdo.moneyList.damain.MoneyListDO@5d05e4a4, com.bootdo.moneyList.damain.MoneyListDO@79dca204]
2019-04-03 15:07:31 -Starting BootdoApplication on ZJZL-20180906VX with PID 14908 (D:\eclipse2018-work\bootdo\target\classes started by Administrator in D:\eclipse2018-work\bootdo)
2019-04-03 15:07:31 -Running with Spring Boot v2.0.3.RELEASE, Spring v5.0.7.RELEASE
2019-04-03 15:07:31 -The following profiles are active: dev
2019-04-03 15:07:31 -Refreshing org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@6fdbe764: startup date [Wed Apr 03 15:07:31 CST 2019]; root of context hierarchy
2019-04-03 15:07:44 -Starting BootdoApplication on ZJZL-20180906VX with PID 10232 (D:\eclipse2018-work\bootdo\target\classes started by Administrator in D:\eclipse2018-work\bootdo)
2019-04-03 15:07:44 -Running with Spring Boot v2.0.3.RELEASE, Spring v5.0.7.RELEASE
2019-04-03 15:07:44 -The following profiles are active: dev
2019-04-03 15:07:44 -Refreshing org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@6fdbe764: startup date [Wed Apr 03 15:07:44 CST 2019]; root of context hierarchy
2019-04-03 15:07:47 -Multiple Spring Data modules found, entering strict repository configuration mode!
2019-04-03 15:07:49 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$f37a9df] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-03 15:07:49 -Bean 'shiroConfig' of type [com.bootdo.system.config.ShiroConfig$$EnhancerBySpringCGLIB$$190d886] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-03 15:07:50 -Bean 'userRealm' of type [com.bootdo.system.shiro.UserRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-03 15:07:51 -Bean 'cacheManager2' of type [net.sf.ehcache.CacheManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-03 15:07:51 -Bean 'ehCacheManager' of type [org.apache.shiro.cache.ehcache.EhCacheManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-03 15:07:51 -Cache with name 'com.bootdo.system.shiro.UserRealm.authorizationCache' does not yet exist.  Creating now.
2019-04-03 15:07:51 -Added EhCache named [com.bootdo.system.shiro.UserRealm.authorizationCache]
2019-04-03 15:07:51 -Bean 'sessionDAO' of type [org.apache.shiro.session.mgt.eis.MemorySessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-03 15:07:51 -Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-03 15:07:51 -Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-03 15:07:51 -Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-03 15:07:52 -Tomcat initialized with port(s): 8081 (http)
2019-04-03 15:07:52 -Initializing ProtocolHandler ["http-nio-8081"]
2019-04-03 15:07:52 -Starting service [Tomcat]
2019-04-03 15:07:52 -Starting Servlet Engine: Apache Tomcat/8.5.31
2019-04-03 15:07:52 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [C:\Program Files\Java\jre1.8.0_131\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:/Program Files/Java/jre1.8.0_131/bin/server;C:/Program Files/Java/jre1.8.0_131/bin;C:/Program Files/Java/jre1.8.0_131/lib/amd64;C:\ProgramData\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Windows\System32\OpenSSH\;D:\pbb\pycSafefile\x64;D:\pbb\PBB Reader\x64;C:\Program Files\MySQL\MySQL Utilities 1.6\;D:\MAVEN\apache-maven-3.6.0\bin;D:\GIT\Git\cmd;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;;C:\Users\Administrator\Desktop;;.]
2019-04-03 15:07:52 -Initializing Spring embedded WebApplicationContext
2019-04-03 15:07:52 -Root WebApplicationContext: initialization completed in 8411 ms
2019-04-03 15:07:53 -Mapping filter: 'characterEncodingFilter' to: [/*]
2019-04-03 15:07:53 -Mapping filter: 'hiddenHttpMethodFilter' to: [/*]
2019-04-03 15:07:53 -Mapping filter: 'httpPutFormContentFilter' to: [/*]
2019-04-03 15:07:53 -Mapping filter: 'requestContextFilter' to: [/*]
2019-04-03 15:07:53 -Filter xssFilter was not registered (disabled)
2019-04-03 15:07:53 -Mapping filter: 'webStatFilter' to urls: [/*]
2019-04-03 15:07:53 -Mapping filter: 'shiroFilterFactoryBean' to: [/*]
2019-04-03 15:07:53 -Servlet statViewServlet mapped to [/druid/*]
2019-04-03 15:07:53 -Servlet dispatcherServlet mapped to [/]
2019-04-03 15:07:56 -ApplicationContext registed-->org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@6fdbe764: startup date [Wed Apr 03 15:07:44 CST 2019]; root of context hierarchy
2019-04-03 15:07:57 -Using default implementation for ThreadExecutor
2019-04-03 15:07:57 -Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2019-04-03 15:07:57 -Quartz Scheduler v.2.2.1 created.
2019-04-03 15:07:57 -RAMJobStore initialized.
2019-04-03 15:07:57 -Scheduler meta-data: Quartz Scheduler (v2.2.1) 'schedulerFactoryBean' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2019-04-03 15:07:57 -Quartz scheduler 'schedulerFactoryBean' initialized from an externally provided properties instance.
2019-04-03 15:07:57 -Quartz scheduler version: 2.2.1
2019-04-03 15:07:57 -JobFactory set to: com.bootdo.common.quartz.factory.JobFactory@74431b9c
2019-04-03 15:07:57 -Initializing ExecutorService  'clientInboundChannelExecutor'
2019-04-03 15:07:57 -Initializing ExecutorService  'clientOutboundChannelExecutor'
2019-04-03 15:08:01 -Mapped "{[/charts/countDD/getCountDD],methods=[POST]}" onto public com.bootdo.charts.vo.CountDayVo com.bootdo.charts.controller.countDDController.getCountD(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo,javax.servlet.http.HttpServletRequest)
2019-04-03 15:08:01 -Mapped "{[/charts/countDD/exportCountDD],methods=[GET]}" onto public void com.bootdo.charts.controller.countDDController.exprotElecLog(com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-03 15:08:01 -Mapped "{[/charts/countDD/tableDD],methods=[POST]}" onto public java.lang.String com.bootdo.charts.controller.countDDController.tableDD()
2019-04-03 15:08:01 -Mapped "{[/charts/countDD],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.countDDController.countDD()
2019-04-03 15:08:01 -Mapped "{[/charts/countMM/exportCountMM],methods=[GET]}" onto public void com.bootdo.charts.controller.countMMController.exprotElecLog(com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-03 15:08:01 -Mapped "{[/charts/countMM/getCountMM],methods=[POST]}" onto public void com.bootdo.charts.controller.countMMController.getCountMM(org.springframework.ui.Model,com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo,javax.servlet.http.HttpServletRequest)
2019-04-03 15:08:01 -Mapped "{[/charts/countMM],methods=[GET]}" onto java.lang.String com.bootdo.charts.controller.countMMController.countMM()
2019-04-03 15:08:01 -Mapped "{[/charts/countOwe/getCountOwe],methods=[POST]}" onto public com.bootdo.charts.vo.CountOweVo com.bootdo.charts.controller.countOweController.getCountD(com.bootdo.elec.vo.ElecVo,com.bootdo.water.vo.WaterVo,com.bootdo.heat.vo.HeatVo,javax.servlet.http.HttpServletRequest)
2019-04-03 15:08:01 -Mapped "{[/charts/countOwe],methods=[GET]}" onto java.lang.String com.bootdo.charts.controller.countOweController.countOwe()
2019-04-03 15:08:01 -Mapped "{[/charts/countRun/getCountRun],methods=[POST]}" onto public int com.bootdo.charts.controller.countRunController.getCountD(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo)
2019-04-03 15:08:01 -Mapped "{[/charts/countRun/exportCountRun],methods=[GET]}" onto public void com.bootdo.charts.controller.countRunController.exprotElecLog(com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-03 15:08:01 -Mapped "{[/charts/countRun],methods=[GET]}" onto java.lang.String com.bootdo.charts.controller.countRunController.countRun()
2019-04-03 15:08:02 -Mapped "{[/charts/countYY/getCountYY],methods=[POST]}" onto public int com.bootdo.charts.controller.countYYController.getCountD(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo)
2019-04-03 15:08:02 -Mapped "{[/charts/countYY/exportCountYY],methods=[GET]}" onto public void com.bootdo.charts.controller.countYYController.exprotElecLog(com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-03 15:08:02 -Mapped "{[/charts/countYY],methods=[GET]}" onto java.lang.String com.bootdo.charts.controller.countYYController.countYY()
2019-04-03 15:08:02 -Mapped "{[/common/dict/add],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.add()
2019-04-03 15:08:02 -Mapped "{[/common/dict/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.remove(java.lang.Long)
2019-04-03 15:08:02 -Mapped "{[/common/dict/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.remove(java.lang.Long[])
2019-04-03 15:08:02 -Mapped "{[/common/dict/update]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.update(com.bootdo.common.domain.DictDO)
2019-04-03 15:08:02 -Mapped "{[/common/dict/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.common.controller.DictController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 15:08:02 -Mapped "{[/common/dict/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.save(com.bootdo.common.domain.DictDO)
2019-04-03 15:08:02 -Mapped "{[/common/dict/type],methods=[GET]}" onto public java.util.List<com.bootdo.common.domain.DictDO> com.bootdo.common.controller.DictController.listType()
2019-04-03 15:08:02 -Mapped "{[/common/dict/add/{type}/{description}],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.addD(org.springframework.ui.Model,java.lang.String,java.lang.String)
2019-04-03 15:08:02 -Mapped "{[/common/dict/list/{type}],methods=[GET]}" onto public java.util.List<com.bootdo.common.domain.DictDO> com.bootdo.common.controller.DictController.listByType(java.lang.String)
2019-04-03 15:08:02 -Mapped "{[/common/dict],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.dict()
2019-04-03 15:08:02 -Mapped "{[/common/dict/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 15:08:02 -Mapped "{[/common/sysFile/add],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.FileController.add()
2019-04-03 15:08:02 -Mapped "{[/common/sysFile/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.remove(java.lang.Long,javax.servlet.http.HttpServletRequest)
2019-04-03 15:08:02 -Mapped "{[/common/sysFile/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.remove(java.lang.Long[])
2019-04-03 15:08:02 -Mapped "{[/common/sysFile/update]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.update(com.bootdo.common.domain.FileDO)
2019-04-03 15:08:02 -Mapped "{[/common/sysFile/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.common.controller.FileController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 15:08:02 -Mapped "{[/common/sysFile/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.save(com.bootdo.common.domain.FileDO)
2019-04-03 15:08:02 -Mapped "{[/common/sysFile/info/{id}]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.info(java.lang.Long)
2019-04-03 15:08:02 -Mapped "{[/common/sysFile/edit],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.FileController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 15:08:02 -Mapped "{[/common/sysFile/upload],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.FileController.upload(org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpServletRequest)
2019-04-03 15:08:02 -Mapped "{[/common/sysFile],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.FileController.sysFile(org.springframework.ui.Model)
2019-04-03 15:08:02 -Mapped "{[/common/generator/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.GeneratorController.update(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 15:08:02 -Mapped "{[/common/generator/list],methods=[GET]}" onto java.util.List<java.util.Map<java.lang.String, java.lang.Object>> com.bootdo.common.controller.GeneratorController.list()
2019-04-03 15:08:02 -Mapped "{[/common/generator/code/{tableName}]}" onto public void com.bootdo.common.controller.GeneratorController.code(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String) throws java.io.IOException
2019-04-03 15:08:02 -Mapped "{[/common/generator],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.GeneratorController.generator()
2019-04-03 15:08:02 -Mapped "{[/common/generator/edit],methods=[GET]}" onto public java.lang.String com.bootdo.common.controller.GeneratorController.edit(org.springframework.ui.Model)
2019-04-03 15:08:02 -Mapped "{[/common/generator/batchCode]}" onto public void com.bootdo.common.controller.GeneratorController.batchCode(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String) throws java.io.IOException
2019-04-03 15:08:02 -Mapped "{[/common/job/add],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.JobController.add()
2019-04-03 15:08:02 -Mapped "{[/common/job/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.remove(java.lang.Long)
2019-04-03 15:08:02 -Mapped "{[/common/job/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.remove(java.lang.Long[])
2019-04-03 15:08:02 -Mapped "{[/common/job/update],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.update(com.bootdo.common.domain.TaskDO)
2019-04-03 15:08:02 -Mapped "{[/common/job/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.common.controller.JobController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 15:08:02 -Mapped "{[/common/job/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.save(com.bootdo.common.domain.TaskDO)
2019-04-03 15:08:02 -Mapped "{[/common/job/info/{id}]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.info(java.lang.Long)
2019-04-03 15:08:02 -Mapped "{[/common/job/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.JobController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 15:08:02 -Mapped "{[/common/job/changeJobStatus],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.changeJobStatus(java.lang.Long,java.lang.String)
2019-04-03 15:08:02 -Mapped "{[/common/job],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.JobController.taskScheduleJob()
2019-04-03 15:08:02 -Mapped "{[/common/log/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.LogController.remove(java.lang.Long)
2019-04-03 15:08:02 -Mapped "{[/common/log],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.LogController.log()
2019-04-03 15:08:02 -Mapped "{[/common/log/list],methods=[GET]}" onto com.bootdo.common.domain.PageDO<com.bootdo.common.domain.LogDO> com.bootdo.common.controller.LogController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 15:08:02 -Mapped "{[/common/log/batchRemove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.LogController.batchRemove(java.lang.Long[])
2019-04-03 15:08:02 -Mapped "{[/common/long],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.LongController.Long()
2019-04-03 15:08:02 -Mapped "{[/common/time],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.TimeController.Time()
2019-04-03 15:08:02 -Mapped "{[/error]}" onto public com.bootdo.common.utils.R com.bootdo.common.exception.MainsiteErrorController.handleError(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-04-03 15:08:02 -Mapped "{[/error],produces=[text/html]}" onto public org.springframework.web.servlet.ModelAndView com.bootdo.common.exception.MainsiteErrorController.errorHtml(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-04-03 15:08:02 -Mapped "{[/elec/elec/add],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecController.add()
2019-04-03 15:08:02 -Mapped "{[/elec/elec/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.remove(java.lang.Long)
2019-04-03 15:08:02 -Mapped "{[/elec/elec/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.remove(java.lang.Long[])
2019-04-03 15:08:02 -Mapped "{[/elec/elec/update],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.update(com.bootdo.elec.domain.ElecDO)
2019-04-03 15:08:02 -Mapped "{[/elec/elec/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.elec.controller.ElecController.list(java.util.Map<java.lang.String, java.lang.Object>,com.bootdo.elec.domain.ElecDO)
2019-04-03 15:08:02 -Mapped "{[/elec/elec/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.save(com.bootdo.elec.domain.ElecDO)
2019-04-03 15:08:02 -Mapped "{[/elec/elec/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 15:08:02 -Mapped "{[/elec/elec],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecController.Elec()
2019-04-03 15:08:02 -Mapped "{[/elec/elec/exprotElec],methods=[GET]}" onto public void com.bootdo.elec.controller.ElecController.exprotExcel(com.bootdo.elec.vo.ElecVo,javax.servlet.http.HttpServletResponse)
2019-04-03 15:08:02 -Mapped "{[/elec/elecInto/exprotElecIntoExcel],methods=[GET]}" onto public void com.bootdo.elec.controller.ElecIntoController.exprotExcel(com.bootdo.elec.vo.ElecVo,javax.servlet.http.HttpServletResponse)
2019-04-03 15:08:02 -Mapped "{[/elec/elecInto],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecIntoController.ElecInto()
2019-04-03 15:08:02 -Mapped "{[/elec/elecInto/importElecIntoExcel],methods=[POST]}" onto public java.util.Map<java.lang.String, java.lang.Object> com.bootdo.elec.controller.ElecIntoController.importElecIntoExcel(org.springframework.web.multipart.MultipartFile,com.bootdo.elec.vo.ElecVo) throws java.lang.Exception
2019-04-03 15:08:02 -Mapped "{[/elec/elecPrice/add],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecPriceController.add()
2019-04-03 15:08:02 -Mapped "{[/elec/elecPrice/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecPriceController.remove(java.lang.Long)
2019-04-03 15:08:02 -Mapped "{[/elec/elecPrice/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecPriceController.remove(java.lang.Long[])
2019-04-03 15:08:02 -Mapped "{[/elec/elecPrice/update]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecPriceController.update(com.bootdo.elec.domain.ElecPriceDO)
2019-04-03 15:08:02 -Mapped "{[/elec/elecPrice/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.elec.controller.ElecPriceController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 15:08:02 -Mapped "{[/elec/elecPrice/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecPriceController.save(com.bootdo.elec.domain.ElecPriceDO,com.bootdo.elec.domain.ElecDO)
2019-04-03 15:08:02 -Mapped "{[/elec/elecPrice/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecPriceController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 15:08:02 -Mapped "{[/elec/elecPrice],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecPriceController.ElecPrice()
2019-04-03 15:08:02 -Mapped "{[/elec/elecUpLoad],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecUpLoadController.Elec()
2019-04-03 15:08:02 -Mapped "{[/elec/elecUpLoad/importElecExcel],methods=[POST]}" onto public java.util.Map<java.lang.String, java.lang.Object> com.bootdo.elec.controller.ElecUpLoadController.importElecExcel(org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpServletRequest) throws java.lang.Exception
2019-04-03 15:08:02 -Mapped "{[/heat/heat/add],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatController.add()
2019-04-03 15:08:02 -Mapped "{[/heat/heat/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatController.remove(java.lang.Integer)
2019-04-03 15:08:02 -Mapped "{[/heat/heat/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatController.remove(java.lang.Integer[])
2019-04-03 15:08:02 -Mapped "{[/heat/heat/update]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatController.update(com.bootdo.heat.domain.HeatDO)
2019-04-03 15:08:02 -Mapped "{[/heat/heat/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.heat.controller.HeatController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 15:08:02 -Mapped "{[/heat/heat/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatController.save(com.bootdo.heat.domain.HeatDO)
2019-04-03 15:08:02 -Mapped "{[/heat/heat],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatController.Heat()
2019-04-03 15:08:02 -Mapped "{[/heat/heat/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatController.edit(java.lang.Integer,org.springframework.ui.Model)
2019-04-03 15:08:02 -Mapped "{[/heat/heat/exprotHeat],methods=[GET]}" onto public void com.bootdo.heat.controller.HeatController.exprotExcel(com.bootdo.heat.vo.HeatVo,javax.servlet.http.HttpServletResponse)
2019-04-03 15:08:02 -Mapped "{[/heat/heatInto],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatIntoController.HeatInto()
2019-04-03 15:08:02 -Mapped "{[/heat/heatInto/exprotHeatIntoExcel],methods=[GET]}" onto public void com.bootdo.heat.controller.HeatIntoController.exprotExcel(com.bootdo.heat.vo.HeatVo,javax.servlet.http.HttpServletResponse)
2019-04-03 15:08:02 -Mapped "{[/heat/heatPrice/add],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatPriceController.add()
2019-04-03 15:08:02 -Mapped "{[/heat/heatPrice/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatPriceController.remove(java.lang.Long)
2019-04-03 15:08:02 -Mapped "{[/heat/heatPrice/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatPriceController.remove(java.lang.Long[])
2019-04-03 15:08:02 -Mapped "{[/heat/heatPrice/update]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatPriceController.update(com.bootdo.heat.domain.HeatPriceDO)
2019-04-03 15:08:02 -Mapped "{[/heat/heatPrice/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.heat.controller.HeatPriceController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 15:08:02 -Mapped "{[/heat/heatPrice/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatPriceController.save(com.bootdo.heat.domain.HeatPriceDO)
2019-04-03 15:08:02 -Mapped "{[/heat/heatPrice],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatPriceController.HeatPrice()
2019-04-03 15:08:02 -Mapped "{[/heat/heatPrice/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatPriceController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 15:08:02 -Mapped "{[/heat/heatUpLoad],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatUpLoadController.HeatUpLoad()
2019-04-03 15:08:02 -Mapped "{[/heat/heatUpLoad/exprotHeatExcel],methods=[GET]}" onto public void com.bootdo.heat.controller.HeatUpLoadController.exprotHeatExcel(com.bootdo.heat.vo.HeatVo,javax.servlet.http.HttpServletResponse)
2019-04-03 15:08:02 -Mapped "{[/heat/heatUpLoad/importHeatExcel]}" onto public java.lang.String com.bootdo.heat.controller.HeatUpLoadController.importHeatExcel(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)
2019-04-03 15:08:02 -Mapped "{[/heat/heatUpLoad/createHeatExcel],methods=[POST]}" onto public java.lang.String com.bootdo.heat.controller.HeatUpLoadController.createHeatExcel(com.bootdo.heat.domain.HeatDO) throws java.lang.Exception
2019-04-03 15:08:02 -Mapped "{[/moneyList/moneyList/queryAllUserName],methods=[POST]}" onto public java.util.List<com.bootdo.moneyList.damain.MoneyListDO> com.bootdo.moneyList.controller.MoneyListController.getAllUserName(com.bootdo.moneyList.damain.MoneyListDO)
2019-04-03 15:08:02 -Mapped "{[/moneyList/moneyList/queryAllUser],methods=[POST]}" onto public java.util.List<com.bootdo.moneyList.damain.MoneyListDO> com.bootdo.moneyList.controller.MoneyListController.queryAllUser(com.bootdo.moneyList.damain.MoneyListDO)
2019-04-03 15:08:02 -Mapped "{[/moneyList/moneyList],methods=[GET]}" onto java.lang.String com.bootdo.moneyList.controller.MoneyListController.MoneyList()
2019-04-03 15:08:02 -Mapped "{[/moneyList/moneyList/updateMoney],methods=[POST]}" onto public java.util.List<com.bootdo.moneyList.damain.MoneyListDO> com.bootdo.moneyList.controller.MoneyListController.updateMoney(com.bootdo.moneyList.damain.MoneyListDO)
2019-04-03 15:08:02 -Mapped "{[/moneyLog/elecLog/add],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.ElecLogController.add()
2019-04-03 15:08:02 -Mapped "{[/moneyLog/elecLog/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.ElecLogController.remove(java.lang.Long)
2019-04-03 15:08:02 -Mapped "{[/moneyLog/elecLog/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.ElecLogController.remove(java.lang.Long[])
2019-04-03 15:08:02 -Mapped "{[/moneyLog/elecLog/update]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.ElecLogController.update(com.bootdo.moneyLog.domain.ElecLogDO)
2019-04-03 15:08:02 -Mapped "{[/moneyLog/elecLog/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.moneyLog.controller.ElecLogController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 15:08:02 -Mapped "{[/moneyLog/elecLog/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.ElecLogController.save(com.bootdo.moneyLog.domain.ElecLogDO)
2019-04-03 15:08:02 -Mapped "{[/moneyLog/elecLog],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.ElecLogController.moneyLog()
2019-04-03 15:08:02 -Mapped "{[/moneyLog/elecLog/exprotElecLog],methods=[GET]}" onto public void com.bootdo.moneyLog.controller.ElecLogController.exprotElecLog(com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-03 15:08:02 -Mapped "{[/moneyLog/elecLog/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.ElecLogController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 15:08:02 -Mapped "{[/moneyLog/heatLog/add],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.HeatLogController.add()
2019-04-03 15:08:02 -Mapped "{[/moneyLog/heatLog/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.HeatLogController.remove(java.lang.Long)
2019-04-03 15:08:02 -Mapped "{[/moneyLog/heatLog/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.HeatLogController.remove(java.lang.Long[])
2019-04-03 15:08:02 -Mapped "{[/moneyLog/heatLog/update]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.HeatLogController.update(com.bootdo.moneyLog.domain.HeatLogDO)
2019-04-03 15:08:02 -Mapped "{[/moneyLog/heatLog/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.moneyLog.controller.HeatLogController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 15:08:02 -Mapped "{[/moneyLog/heatLog/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.HeatLogController.save(com.bootdo.moneyLog.domain.HeatLogDO)
2019-04-03 15:08:02 -Mapped "{[/moneyLog/heatLog],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.HeatLogController.HeatLog()
2019-04-03 15:08:02 -Mapped "{[/moneyLog/heatLog/exprotHeatLog],methods=[GET]}" onto public void com.bootdo.moneyLog.controller.HeatLogController.exprotHeatLog(com.bootdo.moneyLog.vo.HeatLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-03 15:08:02 -Mapped "{[/moneyLog/heatLog/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.HeatLogController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 15:08:02 -Mapped "{[/moneyLog/waterLog/add],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.WaterLogController.add()
2019-04-03 15:08:02 -Mapped "{[/moneyLog/waterLog/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.WaterLogController.remove(java.lang.Long)
2019-04-03 15:08:02 -Mapped "{[/moneyLog/waterLog/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.WaterLogController.remove(java.lang.Long[])
2019-04-03 15:08:02 -Mapped "{[/moneyLog/waterLog/update]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.WaterLogController.update(com.bootdo.moneyLog.domain.WaterLogDO)
2019-04-03 15:08:02 -Mapped "{[/moneyLog/waterLog/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.moneyLog.controller.WaterLogController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 15:08:02 -Mapped "{[/moneyLog/waterLog/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.WaterLogController.save(com.bootdo.moneyLog.domain.WaterLogDO)
2019-04-03 15:08:02 -Mapped "{[/moneyLog/waterLog/exprotWaterLog],methods=[GET]}" onto public void com.bootdo.moneyLog.controller.WaterLogController.exprotWaterLog(com.bootdo.moneyLog.vo.WaterLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-03 15:08:02 -Mapped "{[/moneyLog/waterLog],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.WaterLogController.WaterLog()
2019-04-03 15:08:02 -Mapped "{[/moneyLog/waterLog/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.WaterLogController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 15:08:02 -Mapped "{[/oa/notify/add],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.add()
2019-04-03 15:08:02 -Mapped "{[/oa/notify/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.remove(java.lang.Long)
2019-04-03 15:08:02 -Mapped "{[/oa/notify/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.remove(java.lang.Long[])
2019-04-03 15:08:02 -Mapped "{[/oa/notify/update]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.update(com.bootdo.oa.domain.NotifyDO)
2019-04-03 15:08:02 -Mapped "{[/oa/notify/read/{id}],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.read(java.lang.Long,org.springframework.ui.Model)
2019-04-03 15:08:02 -Mapped "{[/oa/notify/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.oa.controller.NotifyController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 15:08:02 -Mapped "{[/oa/notify/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.save(com.bootdo.oa.domain.NotifyDO)
2019-04-03 15:08:02 -Mapped "{[/oa/notify/message],methods=[GET]}" onto com.bootdo.common.utils.PageUtils com.bootdo.oa.controller.NotifyController.message()
2019-04-03 15:08:02 -Mapped "{[/oa/notify],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.oaNotify()
2019-04-03 15:08:02 -Mapped "{[/oa/notify/selfNotify],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.selefNotify()
2019-04-03 15:08:02 -Mapped "{[/oa/notify/selfList],methods=[GET]}" onto com.bootdo.common.utils.PageUtils com.bootdo.oa.controller.NotifyController.selfList(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 15:08:02 -Mapped "{[/oa/notify/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 15:08:02 -Mapped "{[/print/print/add],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.add()
2019-04-03 15:08:02 -Mapped "{[/print/print/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.print.controller.PrintController.remove(java.lang.Long)
2019-04-03 15:08:02 -Mapped "{[/print/print/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.print.controller.PrintController.remove(java.lang.Long[])
2019-04-03 15:08:02 -Mapped "{[/print/print/update]}" onto public com.bootdo.common.utils.R com.bootdo.print.controller.PrintController.update(com.bootdo.print.domain.PrintDO)
2019-04-03 15:08:02 -Mapped "{[/print/print/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.print.controller.PrintController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 15:08:02 -Mapped "{[/print/print/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.print.controller.PrintController.save(java.lang.String,com.bootdo.print.domain.PrintDO)
2019-04-03 15:08:02 -Mapped "{[/print/print/exprotPrint],methods=[GET]}" onto public void com.bootdo.print.controller.PrintController.exprotPrint(com.bootdo.print.vo.PrintVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-03 15:08:02 -Mapped "{[/print/print],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.Print()
2019-04-03 15:08:02 -Mapped "{[/print/print/printEdit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.printEdit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 15:08:02 -Mapped "{[/print/print/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 15:08:02 -Mapped "{[/system/sysDept/add/{pId}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.add(java.lang.Long,org.springframework.ui.Model)
2019-04-03 15:08:02 -Mapped "{[/system/sysDept/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.remove(java.lang.Long)
2019-04-03 15:08:02 -Mapped "{[/system/sysDept/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.remove(java.lang.Long[])
2019-04-03 15:08:02 -Mapped "{[/system/sysDept/update]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.update(com.bootdo.system.domain.DeptDO)
2019-04-03 15:08:02 -Mapped "{[/system/sysDept/list],methods=[GET]}" onto public java.util.List<com.bootdo.system.domain.DeptDO> com.bootdo.system.controller.DeptController.list()
2019-04-03 15:08:02 -Mapped "{[/system/sysDept/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.save(com.bootdo.system.domain.DeptDO)
2019-04-03 15:08:02 -Mapped "{[/system/sysDept/tree],methods=[GET]}" onto public com.bootdo.common.domain.Tree<com.bootdo.system.domain.DeptDO> com.bootdo.system.controller.DeptController.tree()
2019-04-03 15:08:02 -Mapped "{[/system/sysDept],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.dept()
2019-04-03 15:08:02 -Mapped "{[/system/sysDept/treeView],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.treeView()
2019-04-03 15:08:02 -Mapped "{[/system/sysDept/edit/{deptId}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 15:08:02 -Mapped "{[/index],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.index(org.springframework.ui.Model)
2019-04-03 15:08:02 -Mapped "{[/main],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.main()
2019-04-03 15:08:02 -Mapped "{[/logout],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.logout()
2019-04-03 15:08:02 -Mapped "{[/login],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.LoginController.ajaxLogin(java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest)
2019-04-03 15:08:02 -Mapped "{[/ || ],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.welcome(org.springframework.ui.Model)
2019-04-03 15:08:02 -Mapped "{[/getVerify],methods=[GET]}" onto public void com.bootdo.system.controller.LoginController.getVerify(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-04-03 15:08:02 -Mapped "{[/login],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.login(org.springframework.ui.Model)
2019-04-03 15:08:02 -Mapped "{[/sys/menu/add/{pId}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.MenuController.add(org.springframework.ui.Model,java.lang.Long)
2019-04-03 15:08:02 -Mapped "{[/sys/menu/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.MenuController.remove(java.lang.Long)
2019-04-03 15:08:02 -Mapped "{[/sys/menu/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.MenuController.update(com.bootdo.system.domain.MenuDO)
2019-04-03 15:08:02 -Mapped "{[/sys/menu/list]}" onto java.util.List<com.bootdo.system.domain.MenuDO> com.bootdo.system.controller.MenuController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 15:08:02 -Mapped "{[/sys/menu/save],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.MenuController.save(com.bootdo.system.domain.MenuDO)
2019-04-03 15:08:02 -Mapped "{[/sys/menu/tree/{roleId}],methods=[GET]}" onto com.bootdo.common.domain.Tree<com.bootdo.system.domain.MenuDO> com.bootdo.system.controller.MenuController.tree(java.lang.Long)
2019-04-03 15:08:02 -Mapped "{[/sys/menu/tree],methods=[GET]}" onto com.bootdo.common.domain.Tree<com.bootdo.system.domain.MenuDO> com.bootdo.system.controller.MenuController.tree()
2019-04-03 15:08:02 -Mapped "{[/sys/menu],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.MenuController.menu(org.springframework.ui.Model)
2019-04-03 15:08:02 -Mapped "{[/sys/menu/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.MenuController.edit(org.springframework.ui.Model,java.lang.Long)
2019-04-03 15:08:02 -Mapped "{[/sys/role/add],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.RoleController.add()
2019-04-03 15:08:02 -Mapped "{[/sys/role/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.update(com.bootdo.system.domain.RoleDO)
2019-04-03 15:08:02 -Mapped "{[/sys/role/list],methods=[GET]}" onto java.util.List<com.bootdo.system.domain.RoleDO> com.bootdo.system.controller.RoleController.list()
2019-04-03 15:08:02 -Mapped "{[/sys/role/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.save(java.lang.Long)
2019-04-03 15:08:02 -Mapped "{[/sys/role/save],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.save(com.bootdo.system.domain.RoleDO)
2019-04-03 15:08:02 -Mapped "{[/sys/role/batchRemove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.batchRemove(java.lang.Long[])
2019-04-03 15:08:02 -Mapped "{[/sys/role],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.RoleController.role()
2019-04-03 15:08:02 -Mapped "{[/sys/role/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.RoleController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 15:08:02 -Mapped "{[/sys/online/list]}" onto public java.util.List<com.bootdo.system.domain.UserOnline> com.bootdo.system.controller.SessionController.list()
2019-04-03 15:08:02 -Mapped "{[/sys/online/sessionList]}" onto public java.util.Collection<org.apache.shiro.session.Session> com.bootdo.system.controller.SessionController.sessionList()
2019-04-03 15:08:02 -Mapped "{[/sys/online/forceLogout/{sessionId}]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.SessionController.forceLogout(java.lang.String,org.springframework.web.servlet.mvc.support.RedirectAttributes)
2019-04-03 15:08:02 -Mapped "{[/sys/online],methods=[GET]}" onto public java.lang.String com.bootdo.system.controller.SessionController.online()
2019-04-03 15:08:02 -Mapped "{[/sys/user/exit],methods=[POST]}" onto boolean com.bootdo.system.controller.UserController.exit(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 15:08:02 -Mapped "{[/sys/user/add],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.add(org.springframework.ui.Model)
2019-04-03 15:08:02 -Mapped "{[/sys/user/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.remove(java.lang.Long)
2019-04-03 15:08:02 -Mapped "{[/sys/user/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.update(com.bootdo.system.domain.UserDO)
2019-04-03 15:08:02 -Mapped "{[/sys/user/list],methods=[GET]}" onto com.bootdo.common.utils.PageUtils com.bootdo.system.controller.UserController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 15:08:02 -Mapped "{[/sys/user/save],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.save(com.bootdo.system.domain.UserDO)
2019-04-03 15:08:02 -Mapped "{[/sys/user/batchRemove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.batchRemove(java.lang.Long[])
2019-04-03 15:08:02 -Mapped "{[/sys/user/tree],methods=[GET]}" onto public com.bootdo.common.domain.Tree<com.bootdo.system.domain.DeptDO> com.bootdo.system.controller.UserController.tree()
2019-04-03 15:08:02 -Mapped "{[/sys/user],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.user(org.springframework.ui.Model)
2019-04-03 15:08:02 -Mapped "{[/sys/user/treeView],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.treeView()
2019-04-03 15:08:02 -Mapped "{[/sys/user/resetPwd],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.resetPwd(com.bootdo.system.vo.UserVO)
2019-04-03 15:08:02 -Mapped "{[/sys/user/resetPwd/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.resetPwd(java.lang.Long,org.springframework.ui.Model)
2019-04-03 15:08:02 -Mapped "{[/sys/user/personal],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.personal(org.springframework.ui.Model)
2019-04-03 15:08:02 -Mapped "{[/sys/user/uploadImg],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.uploadImg(org.springframework.web.multipart.MultipartFile,java.lang.String,javax.servlet.http.HttpServletRequest)
2019-04-03 15:08:02 -Mapped "{[/sys/user/adminResetPwd],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.adminResetPwd(com.bootdo.system.vo.UserVO)
2019-04-03 15:08:02 -Mapped "{[/sys/user/updatePeronal],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.updatePeronal(com.bootdo.system.domain.UserDO)
2019-04-03 15:08:02 -Mapped "{[/sys/user/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.edit(org.springframework.ui.Model,java.lang.Long)
2019-04-03 15:08:02 -Mapped "{[/file/downImport/{importType}],methods=[GET]}" onto public void com.bootdo.temple.controller.TempletController.downImport(javax.servlet.http.HttpServletResponse,java.lang.String)
2019-04-03 15:08:02 -Mapped "{[/water/water/add],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterController.add()
2019-04-03 15:08:02 -Mapped "{[/water/water/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterController.remove(java.lang.Long)
2019-04-03 15:08:02 -Mapped "{[/water/water/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterController.remove(java.lang.Long[])
2019-04-03 15:08:02 -Mapped "{[/water/water/update]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterController.update(com.bootdo.water.domain.WaterDO)
2019-04-03 15:08:02 -Mapped "{[/water/water/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.water.controller.WaterController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 15:08:02 -Mapped "{[/water/water/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterController.save(com.bootdo.water.domain.WaterDO)
2019-04-03 15:08:02 -Mapped "{[/water/water],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterController.Water()
2019-04-03 15:08:02 -Mapped "{[/water/water/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 15:08:02 -Mapped "{[/water/water/exprotWater],methods=[GET]}" onto public void com.bootdo.water.controller.WaterController.exprotExcel(com.bootdo.water.vo.WaterVo,javax.servlet.http.HttpServletResponse)
2019-04-03 15:08:02 -Mapped "{[/water/waterInto],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterIntoController.WaterInto()
2019-04-03 15:08:02 -Mapped "{[/water/waterInto/exprotWaterIntoExcel],methods=[GET]}" onto public void com.bootdo.water.controller.WaterIntoController.exprotExcel(com.bootdo.water.vo.WaterVo,javax.servlet.http.HttpServletResponse)
2019-04-03 15:08:02 -Mapped "{[/water/waterPrice/add],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterPriceController.add()
2019-04-03 15:08:02 -Mapped "{[/water/waterPrice/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterPriceController.remove(java.lang.Long)
2019-04-03 15:08:02 -Mapped "{[/water/waterPrice/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterPriceController.remove(java.lang.Long[])
2019-04-03 15:08:02 -Mapped "{[/water/waterPrice/update]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterPriceController.update(com.bootdo.water.domain.WaterPriceDO)
2019-04-03 15:08:02 -Mapped "{[/water/waterPrice/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.water.controller.WaterPriceController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 15:08:02 -Mapped "{[/water/waterPrice/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterPriceController.save(com.bootdo.water.domain.WaterPriceDO)
2019-04-03 15:08:02 -Mapped "{[/water/waterPrice],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterPriceController.WaterPrice()
2019-04-03 15:08:02 -Mapped "{[/water/waterPrice/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterPriceController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 15:08:02 -Mapped "{[/water/waterUpLoad/createWaterExcel],methods=[POST]}" onto public java.lang.String com.bootdo.water.controller.WaterUpLoadController.createWaterExcel(com.bootdo.water.domain.WaterDO) throws java.lang.Exception
2019-04-03 15:08:02 -Mapped "{[/water/waterUpLoad/exprotWaterExcel],methods=[GET]}" onto public void com.bootdo.water.controller.WaterUpLoadController.exprotWaterExcel(com.bootdo.water.vo.WaterVo,javax.servlet.http.HttpServletResponse)
2019-04-03 15:08:02 -Mapped "{[/water/waterUpLoad],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterUpLoadController.WaterUpLoad()
2019-04-03 15:08:02 -Mapped "{[/water/waterUpLoad/importWaterExcel]}" onto public java.lang.String com.bootdo.water.controller.WaterUpLoadController.importWaterExcel(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)
2019-04-03 15:08:02 -Mapped "{[/v2/api-docs],methods=[GET],produces=[application/json || application/hal+json]}" onto public org.springframework.http.ResponseEntity<springfox.documentation.spring.web.json.Json> springfox.documentation.swagger2.web.Swagger2Controller.getDocumentation(java.lang.String,javax.servlet.http.HttpServletRequest)
2019-04-03 15:08:02 -Mapped "{[/swagger-resources/configuration/security]}" onto org.springframework.http.ResponseEntity<springfox.documentation.swagger.web.SecurityConfiguration> springfox.documentation.swagger.web.ApiResourceController.securityConfiguration()
2019-04-03 15:08:02 -Mapped "{[/swagger-resources/configuration/ui]}" onto org.springframework.http.ResponseEntity<springfox.documentation.swagger.web.UiConfiguration> springfox.documentation.swagger.web.ApiResourceController.uiConfiguration()
2019-04-03 15:08:02 -Mapped "{[/swagger-resources]}" onto org.springframework.http.ResponseEntity<java.util.List<springfox.documentation.swagger.web.SwaggerResource>> springfox.documentation.swagger.web.ApiResourceController.swaggerResources()
2019-04-03 15:08:03 -Initializing ExecutorService  'messageBrokerTaskScheduler'
2019-04-03 15:08:03 -Mapped URL path [/endpointChat/**] onto handler of type [class org.springframework.web.socket.sockjs.support.SockJsHttpRequestHandler]
2019-04-03 15:08:03 -Initializing ExecutorService  'brokerChannelExecutor'
2019-04-03 15:08:04 -Mapped URL path [/**/favicon.ico] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-04-03 15:08:04 -Looking for @ControllerAdvice: org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@6fdbe764: startup date [Wed Apr 03 15:07:44 CST 2019]; root of context hierarchy
2019-04-03 15:08:05 -Mapped URL path [/webjars/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-04-03 15:08:05 -Mapped URL path [/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-04-03 15:08:05 -Mapped URL path [/files/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-04-03 15:08:05 -Detected @ExceptionHandler methods in BDExceptionHandler
2019-04-03 15:08:05 -[THYMELEAF][main] Template Mode 'LEGACYHTML5' is deprecated. Using Template Mode 'HTML' instead.
2019-04-03 15:08:07 -Registering beans for JMX exposure on startup
2019-04-03 15:08:07 -Bean with name 'dataSource' has been autodetected for JMX exposure
2019-04-03 15:08:07 -Located MBean 'dataSource': registering with JMX server as MBean [com.alibaba.druid.pool:name=dataSource,type=DruidDataSource]
2019-04-03 15:08:07 -Starting beans in phase 2147483647
2019-04-03 15:08:07 -Context refreshed
2019-04-03 15:08:07 -Found 1 custom documentation plugin(s)
2019-04-03 15:08:07 -Scanning for api listing references
2019-04-03 15:08:08 -Generating unique operation named: exprotElecLogUsingGET_1
2019-04-03 15:08:08 -Generating unique operation named: getCountDUsingPOST_1
2019-04-03 15:08:08 -Generating unique operation named: exprotElecLogUsingGET_2
2019-04-03 15:08:08 -Generating unique operation named: getCountDUsingPOST_2
2019-04-03 15:08:08 -Generating unique operation named: exprotElecLogUsingGET_3
2019-04-03 15:08:08 -Generating unique operation named: getCountDUsingPOST_3
2019-04-03 15:08:08 -Generating unique operation named: removeUsingPOST_1
2019-04-03 15:08:08 -Generating unique operation named: addUsingGET_1
2019-04-03 15:08:08 -Generating unique operation named: editUsingGET_1
2019-04-03 15:08:08 -Generating unique operation named: listUsingGET_1
2019-04-03 15:08:08 -Generating unique operation named: removeUsingPOST_2
2019-04-03 15:08:08 -Generating unique operation named: removeUsingPOST_3
2019-04-03 15:08:08 -Generating unique operation named: saveUsingPOST_1
2019-04-03 15:08:08 -Generating unique operation named: updateUsingGET_1
2019-04-03 15:08:08 -Generating unique operation named: updateUsingHEAD_1
2019-04-03 15:08:08 -Generating unique operation named: updateUsingPOST_1
2019-04-03 15:08:08 -Generating unique operation named: updateUsingPUT_1
2019-04-03 15:08:08 -Generating unique operation named: updateUsingPATCH_1
2019-04-03 15:08:08 -Generating unique operation named: updateUsingDELETE_1
2019-04-03 15:08:08 -Generating unique operation named: updateUsingOPTIONS_1
2019-04-03 15:08:08 -Generating unique operation named: updateUsingTRACE_1
2019-04-03 15:08:08 -Generating unique operation named: addUsingGET_2
2019-04-03 15:08:08 -Generating unique operation named: editUsingGET_2
2019-04-03 15:08:08 -Generating unique operation named: listUsingGET_2
2019-04-03 15:08:08 -Generating unique operation named: removeUsingPOST_4
2019-04-03 15:08:08 -Generating unique operation named: removeUsingPOST_5
2019-04-03 15:08:08 -Generating unique operation named: saveUsingPOST_2
2019-04-03 15:08:08 -Generating unique operation named: updateUsingPOST_2
2019-04-03 15:08:08 -Generating unique operation named: exprotExcelUsingGET_1
2019-04-03 15:08:08 -Generating unique operation named: addUsingGET_3
2019-04-03 15:08:08 -Generating unique operation named: editUsingGET_3
2019-04-03 15:08:08 -Generating unique operation named: exprotElecLogUsingGET_4
2019-04-03 15:08:08 -Generating unique operation named: listUsingGET_3
2019-04-03 15:08:08 -Generating unique operation named: removeUsingPOST_6
2019-04-03 15:08:08 -Generating unique operation named: removeUsingPOST_7
2019-04-03 15:08:08 -Generating unique operation named: saveUsingPOST_3
2019-04-03 15:08:08 -Generating unique operation named: updateUsingGET_2
2019-04-03 15:08:08 -Generating unique operation named: updateUsingHEAD_2
2019-04-03 15:08:08 -Generating unique operation named: updateUsingPOST_3
2019-04-03 15:08:08 -Generating unique operation named: updateUsingPUT_2
2019-04-03 15:08:08 -Generating unique operation named: updateUsingPATCH_2
2019-04-03 15:08:08 -Generating unique operation named: updateUsingDELETE_2
2019-04-03 15:08:08 -Generating unique operation named: updateUsingOPTIONS_2
2019-04-03 15:08:08 -Generating unique operation named: updateUsingTRACE_2
2019-04-03 15:08:08 -Generating unique operation named: addUsingGET_4
2019-04-03 15:08:08 -Generating unique operation named: editUsingGET_4
2019-04-03 15:08:08 -Generating unique operation named: listUsingGET_4
2019-04-03 15:08:08 -Generating unique operation named: removeUsingPOST_8
2019-04-03 15:08:08 -Generating unique operation named: removeUsingPOST_9
2019-04-03 15:08:08 -Generating unique operation named: saveUsingPOST_4
2019-04-03 15:08:08 -Generating unique operation named: updateUsingGET_3
2019-04-03 15:08:08 -Generating unique operation named: updateUsingHEAD_3
2019-04-03 15:08:08 -Generating unique operation named: updateUsingPOST_4
2019-04-03 15:08:08 -Generating unique operation named: updateUsingPUT_3
2019-04-03 15:08:08 -Generating unique operation named: updateUsingPATCH_3
2019-04-03 15:08:08 -Generating unique operation named: updateUsingDELETE_3
2019-04-03 15:08:08 -Generating unique operation named: updateUsingOPTIONS_3
2019-04-03 15:08:08 -Generating unique operation named: updateUsingTRACE_3
2019-04-03 15:08:08 -Generating unique operation named: ElecUsingGET_1
2019-04-03 15:08:09 -Generating unique operation named: addUsingGET_5
2019-04-03 15:08:09 -Generating unique operation named: editUsingGET_5
2019-04-03 15:08:09 -Generating unique operation named: listUsingGET_5
2019-04-03 15:08:09 -Generating unique operation named: removeUsingPOST_10
2019-04-03 15:08:09 -Generating unique operation named: removeUsingPOST_11
2019-04-03 15:08:09 -Generating unique operation named: saveUsingPOST_5
2019-04-03 15:08:09 -Generating unique operation named: updateUsingGET_4
2019-04-03 15:08:09 -Generating unique operation named: updateUsingHEAD_4
2019-04-03 15:08:09 -Generating unique operation named: updateUsingPOST_5
2019-04-03 15:08:09 -Generating unique operation named: updateUsingPUT_4
2019-04-03 15:08:09 -Generating unique operation named: updateUsingPATCH_4
2019-04-03 15:08:09 -Generating unique operation named: updateUsingDELETE_4
2019-04-03 15:08:09 -Generating unique operation named: updateUsingOPTIONS_4
2019-04-03 15:08:09 -Generating unique operation named: updateUsingTRACE_4
2019-04-03 15:08:09 -Generating unique operation named: editUsingGET_6
2019-04-03 15:08:09 -Generating unique operation named: listUsingGET_6
2019-04-03 15:08:09 -Generating unique operation named: updateUsingPOST_6
2019-04-03 15:08:09 -Generating unique operation named: addUsingGET_6
2019-04-03 15:08:09 -Generating unique operation named: editUsingGET_7
2019-04-03 15:08:09 -Generating unique operation named: exprotExcelUsingGET_2
2019-04-03 15:08:09 -Generating unique operation named: listUsingGET_7
2019-04-03 15:08:09 -Generating unique operation named: removeUsingPOST_12
2019-04-03 15:08:09 -Generating unique operation named: removeUsingPOST_13
2019-04-03 15:08:09 -Generating unique operation named: saveUsingPOST_6
2019-04-03 15:08:09 -Generating unique operation named: updateUsingGET_5
2019-04-03 15:08:09 -Generating unique operation named: updateUsingHEAD_5
2019-04-03 15:08:09 -Generating unique operation named: updateUsingPOST_7
2019-04-03 15:08:09 -Generating unique operation named: updateUsingPUT_5
2019-04-03 15:08:09 -Generating unique operation named: updateUsingPATCH_5
2019-04-03 15:08:09 -Generating unique operation named: updateUsingDELETE_5
2019-04-03 15:08:09 -Generating unique operation named: updateUsingOPTIONS_5
2019-04-03 15:08:09 -Generating unique operation named: updateUsingTRACE_5
2019-04-03 15:08:09 -Generating unique operation named: exprotExcelUsingGET_3
2019-04-03 15:08:09 -Generating unique operation named: addUsingGET_7
2019-04-03 15:08:09 -Generating unique operation named: editUsingGET_8
2019-04-03 15:08:09 -Generating unique operation named: listUsingGET_8
2019-04-03 15:08:09 -Generating unique operation named: removeUsingPOST_14
2019-04-03 15:08:09 -Generating unique operation named: removeUsingPOST_15
2019-04-03 15:08:09 -Generating unique operation named: saveUsingPOST_7
2019-04-03 15:08:09 -Generating unique operation named: updateUsingGET_6
2019-04-03 15:08:09 -Generating unique operation named: updateUsingHEAD_6
2019-04-03 15:08:09 -Generating unique operation named: updateUsingPOST_8
2019-04-03 15:08:09 -Generating unique operation named: updateUsingPUT_6
2019-04-03 15:08:09 -Generating unique operation named: updateUsingPATCH_6
2019-04-03 15:08:09 -Generating unique operation named: updateUsingDELETE_6
2019-04-03 15:08:09 -Generating unique operation named: updateUsingOPTIONS_6
2019-04-03 15:08:09 -Generating unique operation named: updateUsingTRACE_6
2019-04-03 15:08:09 -Generating unique operation named: addUsingGET_8
2019-04-03 15:08:09 -Generating unique operation named: editUsingGET_9
2019-04-03 15:08:09 -Generating unique operation named: listUsingGET_9
2019-04-03 15:08:09 -Generating unique operation named: removeUsingPOST_16
2019-04-03 15:08:09 -Generating unique operation named: removeUsingPOST_17
2019-04-03 15:08:09 -Generating unique operation named: saveUsingPOST_8
2019-04-03 15:08:09 -Generating unique operation named: updateUsingGET_7
2019-04-03 15:08:09 -Generating unique operation named: updateUsingHEAD_7
2019-04-03 15:08:09 -Generating unique operation named: updateUsingPOST_9
2019-04-03 15:08:09 -Generating unique operation named: updateUsingPUT_7
2019-04-03 15:08:09 -Generating unique operation named: updateUsingPATCH_7
2019-04-03 15:08:09 -Generating unique operation named: updateUsingDELETE_7
2019-04-03 15:08:09 -Generating unique operation named: updateUsingOPTIONS_7
2019-04-03 15:08:09 -Generating unique operation named: updateUsingTRACE_7
2019-04-03 15:08:09 -Generating unique operation named: addUsingGET_9
2019-04-03 15:08:09 -Generating unique operation named: editUsingGET_10
2019-04-03 15:08:09 -Generating unique operation named: infoUsingGET_1
2019-04-03 15:08:09 -Generating unique operation named: infoUsingHEAD_1
2019-04-03 15:08:09 -Generating unique operation named: infoUsingPOST_1
2019-04-03 15:08:09 -Generating unique operation named: infoUsingPUT_1
2019-04-03 15:08:09 -Generating unique operation named: infoUsingPATCH_1
2019-04-03 15:08:09 -Generating unique operation named: infoUsingDELETE_1
2019-04-03 15:08:09 -Generating unique operation named: infoUsingOPTIONS_1
2019-04-03 15:08:09 -Generating unique operation named: infoUsingTRACE_1
2019-04-03 15:08:09 -Generating unique operation named: listUsingGET_10
2019-04-03 15:08:09 -Generating unique operation named: removeUsingPOST_18
2019-04-03 15:08:09 -Generating unique operation named: removeUsingPOST_19
2019-04-03 15:08:09 -Generating unique operation named: saveUsingPOST_9
2019-04-03 15:08:09 -Generating unique operation named: updateUsingPOST_10
2019-04-03 15:08:09 -Generating unique operation named: listUsingGET_11
2019-04-03 15:08:09 -Generating unique operation named: removeUsingPOST_20
2019-04-03 15:08:09 -Generating unique operation named: welcomeUsingGET_1
2019-04-03 15:08:09 -Generating unique operation named: addUsingGET_10
2019-04-03 15:08:09 -Generating unique operation named: editUsingGET_11
2019-04-03 15:08:09 -Generating unique operation named: listUsingGET_12
2019-04-03 15:08:09 -Generating unique operation named: removeUsingPOST_21
2019-04-03 15:08:09 -Generating unique operation named: saveUsingPOST_10
2019-04-03 15:08:09 -Generating unique operation named: treeUsingGET_1
2019-04-03 15:08:09 -Generating unique operation named: treeUsingGET_2
2019-04-03 15:08:09 -Generating unique operation named: updateUsingPOST_11
2019-04-03 15:08:09 -Generating unique operation named: addUsingGET_11
2019-04-03 15:08:09 -Generating unique operation named: editUsingGET_12
2019-04-03 15:08:09 -Generating unique operation named: listUsingGET_13
2019-04-03 15:08:09 -Generating unique operation named: removeUsingPOST_22
2019-04-03 15:08:09 -Generating unique operation named: removeUsingPOST_23
2019-04-03 15:08:09 -Generating unique operation named: saveUsingPOST_11
2019-04-03 15:08:09 -Generating unique operation named: updateUsingGET_8
2019-04-03 15:08:09 -Generating unique operation named: updateUsingHEAD_8
2019-04-03 15:08:09 -Generating unique operation named: updateUsingPOST_12
2019-04-03 15:08:09 -Generating unique operation named: updateUsingPUT_8
2019-04-03 15:08:09 -Generating unique operation named: updateUsingPATCH_8
2019-04-03 15:08:09 -Generating unique operation named: updateUsingDELETE_8
2019-04-03 15:08:09 -Generating unique operation named: updateUsingOPTIONS_8
2019-04-03 15:08:09 -Generating unique operation named: updateUsingTRACE_8
2019-04-03 15:08:09 -Generating unique operation named: addUsingGET_12
2019-04-03 15:08:09 -Generating unique operation named: editUsingGET_13
2019-04-03 15:08:09 -Generating unique operation named: listUsingGET_14
2019-04-03 15:08:09 -Generating unique operation named: removeUsingPOST_24
2019-04-03 15:08:09 -Generating unique operation named: removeUsingPOST_25
2019-04-03 15:08:09 -Generating unique operation named: saveUsingPOST_12
2019-04-03 15:08:09 -Generating unique operation named: updateUsingGET_9
2019-04-03 15:08:09 -Generating unique operation named: updateUsingHEAD_9
2019-04-03 15:08:09 -Generating unique operation named: updateUsingPOST_13
2019-04-03 15:08:09 -Generating unique operation named: updateUsingPUT_9
2019-04-03 15:08:09 -Generating unique operation named: updateUsingPATCH_9
2019-04-03 15:08:09 -Generating unique operation named: updateUsingDELETE_9
2019-04-03 15:08:09 -Generating unique operation named: updateUsingOPTIONS_9
2019-04-03 15:08:09 -Generating unique operation named: updateUsingTRACE_9
2019-04-03 15:08:09 -Generating unique operation named: addUsingGET_13
2019-04-03 15:08:09 -Generating unique operation named: batchRemoveUsingPOST_1
2019-04-03 15:08:09 -Generating unique operation named: editUsingGET_14
2019-04-03 15:08:09 -Generating unique operation named: listUsingGET_15
2019-04-03 15:08:10 -Generating unique operation named: saveUsingPOST_13
2019-04-03 15:08:10 -Generating unique operation named: saveUsingPOST_14
2019-04-03 15:08:10 -Generating unique operation named: updateUsingPOST_14
2019-04-03 15:08:10 -Generating unique operation named: listUsingGET_16
2019-04-03 15:08:10 -Generating unique operation named: listUsingHEAD_1
2019-04-03 15:08:10 -Generating unique operation named: listUsingPOST_1
2019-04-03 15:08:10 -Generating unique operation named: listUsingPUT_1
2019-04-03 15:08:10 -Generating unique operation named: listUsingPATCH_1
2019-04-03 15:08:10 -Generating unique operation named: listUsingDELETE_1
2019-04-03 15:08:10 -Generating unique operation named: listUsingOPTIONS_1
2019-04-03 15:08:10 -Generating unique operation named: listUsingTRACE_1
2019-04-03 15:08:10 -Generating unique operation named: addUsingGET_14
2019-04-03 15:08:10 -Generating unique operation named: batchRemoveUsingPOST_2
2019-04-03 15:08:10 -Generating unique operation named: editUsingGET_15
2019-04-03 15:08:10 -Generating unique operation named: listUsingGET_17
2019-04-03 15:08:10 -Generating unique operation named: removeUsingPOST_26
2019-04-03 15:08:10 -Generating unique operation named: saveUsingPOST_15
2019-04-03 15:08:10 -Generating unique operation named: treeUsingGET_3
2019-04-03 15:08:10 -Generating unique operation named: treeViewUsingGET_1
2019-04-03 15:08:10 -Generating unique operation named: updateUsingPOST_15
2019-04-03 15:08:10 -Generating unique operation named: addUsingGET_15
2019-04-03 15:08:10 -Generating unique operation named: editUsingGET_16
2019-04-03 15:08:10 -Generating unique operation named: exprotExcelUsingGET_4
2019-04-03 15:08:10 -Generating unique operation named: listUsingGET_18
2019-04-03 15:08:10 -Generating unique operation named: removeUsingPOST_27
2019-04-03 15:08:10 -Generating unique operation named: removeUsingPOST_28
2019-04-03 15:08:10 -Generating unique operation named: saveUsingPOST_16
2019-04-03 15:08:10 -Generating unique operation named: updateUsingGET_10
2019-04-03 15:08:10 -Generating unique operation named: updateUsingHEAD_10
2019-04-03 15:08:10 -Generating unique operation named: updateUsingPOST_16
2019-04-03 15:08:10 -Generating unique operation named: updateUsingPUT_10
2019-04-03 15:08:10 -Generating unique operation named: updateUsingPATCH_10
2019-04-03 15:08:10 -Generating unique operation named: updateUsingDELETE_10
2019-04-03 15:08:10 -Generating unique operation named: updateUsingOPTIONS_10
2019-04-03 15:08:10 -Generating unique operation named: updateUsingTRACE_10
2019-04-03 15:08:10 -Generating unique operation named: exprotExcelUsingGET_5
2019-04-03 15:08:10 -Generating unique operation named: addUsingGET_16
2019-04-03 15:08:10 -Generating unique operation named: editUsingGET_17
2019-04-03 15:08:10 -Generating unique operation named: listUsingGET_19
2019-04-03 15:08:10 -Generating unique operation named: removeUsingPOST_29
2019-04-03 15:08:10 -Generating unique operation named: removeUsingPOST_30
2019-04-03 15:08:10 -Generating unique operation named: saveUsingPOST_17
2019-04-03 15:08:10 -Generating unique operation named: updateUsingGET_11
2019-04-03 15:08:10 -Generating unique operation named: updateUsingHEAD_11
2019-04-03 15:08:10 -Generating unique operation named: updateUsingPOST_17
2019-04-03 15:08:10 -Generating unique operation named: updateUsingPUT_11
2019-04-03 15:08:10 -Generating unique operation named: updateUsingPATCH_11
2019-04-03 15:08:10 -Generating unique operation named: updateUsingDELETE_11
2019-04-03 15:08:10 -Generating unique operation named: updateUsingOPTIONS_11
2019-04-03 15:08:10 -Generating unique operation named: updateUsingTRACE_11
2019-04-03 15:08:10 -Generating unique operation named: addUsingGET_17
2019-04-03 15:08:10 -Generating unique operation named: editUsingGET_18
2019-04-03 15:08:10 -Generating unique operation named: listUsingGET_20
2019-04-03 15:08:10 -Generating unique operation named: removeUsingPOST_31
2019-04-03 15:08:10 -Generating unique operation named: removeUsingPOST_32
2019-04-03 15:08:10 -Generating unique operation named: saveUsingPOST_18
2019-04-03 15:08:10 -Generating unique operation named: updateUsingGET_12
2019-04-03 15:08:10 -Generating unique operation named: updateUsingHEAD_12
2019-04-03 15:08:10 -Generating unique operation named: updateUsingPOST_18
2019-04-03 15:08:10 -Generating unique operation named: updateUsingPUT_12
2019-04-03 15:08:10 -Generating unique operation named: updateUsingPATCH_12
2019-04-03 15:08:10 -Generating unique operation named: updateUsingDELETE_12
2019-04-03 15:08:10 -Generating unique operation named: updateUsingOPTIONS_12
2019-04-03 15:08:10 -Generating unique operation named: updateUsingTRACE_12
2019-04-03 15:08:10 -Starting Quartz Scheduler now
2019-04-03 15:08:10 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED started.
2019-04-03 15:08:10 -Starting...
2019-04-03 15:08:10 -BrokerAvailabilityEvent[available=true, SimpleBrokerMessageHandler [DefaultSubscriptionRegistry[cache[0 destination(s)], registry[0 sessions]]]]
2019-04-03 15:08:10 -Started.
2019-04-03 15:08:10 -Starting ProtocolHandler ["http-nio-8081"]
2019-04-03 15:08:10 -Failed to start connector [Connector[HTTP/1.1-8081]]
org.apache.catalina.LifecycleException: Failed to start component [Connector[HTTP/1.1-8081]]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:167)
	at org.apache.catalina.core.StandardService.addConnector(StandardService.java:225)
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.addPreviouslyRemovedConnectors(TomcatWebServer.java:256)
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.start(TomcatWebServer.java:198)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.startWebServer(ServletWebServerApplicationContext.java:300)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.finishRefresh(ServletWebServerApplicationContext.java:162)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:553)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:140)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:759)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:395)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:327)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1255)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1243)
	at com.bootdo.BootdoApplication.main(BootdoApplication.java:21)
Caused by: org.apache.catalina.LifecycleException: Protocol handler start failed
	at org.apache.catalina.connector.Connector.startInternal(Connector.java:1020)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:150)
	... 13 common frames omitted
Caused by: java.net.BindException: Address already in use: bind
	at sun.nio.ch.Net.bind0(Native Method)
	at sun.nio.ch.Net.bind(Unknown Source)
	at sun.nio.ch.Net.bind(Unknown Source)
	at sun.nio.ch.ServerSocketChannelImpl.bind(Unknown Source)
	at sun.nio.ch.ServerSocketAdaptor.bind(Unknown Source)
	at org.apache.tomcat.util.net.NioEndpoint.bind(NioEndpoint.java:210)
	at org.apache.tomcat.util.net.AbstractEndpoint.start(AbstractEndpoint.java:1150)
	at org.apache.coyote.AbstractProtocol.start(AbstractProtocol.java:591)
	at org.apache.catalina.connector.Connector.startInternal(Connector.java:1018)
	... 14 common frames omitted
2019-04-03 15:08:10 -Pausing ProtocolHandler ["http-nio-8081"]
2019-04-03 15:08:10 -Stopping service [Tomcat]
2019-04-03 15:08:10 -The stop() method was called on component [StandardServer[-1]] after stop() had already been called. The second call will be ignored.
2019-04-03 15:08:10 -Stopping ProtocolHandler ["http-nio-8081"]
2019-04-03 15:08:10 -Destroying ProtocolHandler ["http-nio-8081"]
2019-04-03 15:08:10 -

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2019-04-03 15:08:10 -

***************************
APPLICATION FAILED TO START
***************************

Description:

The Tomcat connector configured to listen on port 8081 failed to start. The port may already be in use or the connector may be misconfigured.

Action:

Verify the connector's configuration, identify and stop any process that's listening on port 8081, or configure this application to listen on another port.

2019-04-03 15:08:10 -Closing org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@6fdbe764: startup date [Wed Apr 03 15:07:44 CST 2019]; root of context hierarchy
2019-04-03 15:08:10 -Stopping beans in phase 2147483647
2019-04-03 15:08:10 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED paused.
2019-04-03 15:08:10 -Stopping...
2019-04-03 15:08:10 -BrokerAvailabilityEvent[available=false, SimpleBrokerMessageHandler [DefaultSubscriptionRegistry[cache[0 destination(s)], registry[0 sessions]]]]
2019-04-03 15:08:10 -Stopped.
2019-04-03 15:08:11 -Unregistering JMX-exposed beans on shutdown
2019-04-03 15:08:11 -Unregistering JMX-exposed beans
2019-04-03 15:08:11 -Shutting down ExecutorService 'brokerChannelExecutor'
2019-04-03 15:08:11 -Shutting down ExecutorService 'messageBrokerTaskScheduler'
2019-04-03 15:08:11 -Shutting down ExecutorService 'clientOutboundChannelExecutor'
2019-04-03 15:08:11 -Shutting down ExecutorService 'clientInboundChannelExecutor'
2019-04-03 15:08:11 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED shutting down.
2019-04-03 15:08:11 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED paused.
2019-04-03 15:08:11 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED shutdown complete.
2019-04-03 15:08:11 -Shutting down Quartz Scheduler
2019-04-03 15:12:02 -Starting BootdoApplication on ZJZL-20180906VX with PID 1396 (D:\eclipse2018-work\bootdo\target\classes started by Administrator in D:\eclipse2018-work\bootdo)
2019-04-03 15:12:02 -Running with Spring Boot v2.0.3.RELEASE, Spring v5.0.7.RELEASE
2019-04-03 15:12:02 -The following profiles are active: dev
2019-04-03 15:12:03 -Refreshing org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@a38c7fe: startup date [Wed Apr 03 15:12:03 CST 2019]; root of context hierarchy
2019-04-03 15:12:05 -Multiple Spring Data modules found, entering strict repository configuration mode!
2019-04-03 15:12:07 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$15003363] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-03 15:12:07 -Bean 'shiroConfig' of type [com.bootdo.system.config.ShiroConfig$$EnhancerBySpringCGLIB$$759620a] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-03 15:12:08 -Bean 'userRealm' of type [com.bootdo.system.shiro.UserRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-03 15:12:09 -Bean 'cacheManager2' of type [net.sf.ehcache.CacheManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-03 15:12:09 -Bean 'ehCacheManager' of type [org.apache.shiro.cache.ehcache.EhCacheManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-03 15:12:09 -Cache with name 'com.bootdo.system.shiro.UserRealm.authorizationCache' does not yet exist.  Creating now.
2019-04-03 15:12:09 -Added EhCache named [com.bootdo.system.shiro.UserRealm.authorizationCache]
2019-04-03 15:12:09 -Bean 'sessionDAO' of type [org.apache.shiro.session.mgt.eis.MemorySessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-03 15:12:09 -Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-03 15:12:09 -Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-03 15:12:09 -Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-03 15:12:10 -Tomcat initialized with port(s): 8081 (http)
2019-04-03 15:12:10 -Initializing ProtocolHandler ["http-nio-8081"]
2019-04-03 15:12:10 -Starting service [Tomcat]
2019-04-03 15:12:10 -Starting Servlet Engine: Apache Tomcat/8.5.31
2019-04-03 15:12:10 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [C:\Program Files\Java\jre1.8.0_131\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:/Program Files/Java/jre1.8.0_131/bin/server;C:/Program Files/Java/jre1.8.0_131/bin;C:/Program Files/Java/jre1.8.0_131/lib/amd64;C:\ProgramData\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Windows\System32\OpenSSH\;D:\pbb\pycSafefile\x64;D:\pbb\PBB Reader\x64;C:\Program Files\MySQL\MySQL Utilities 1.6\;D:\MAVEN\apache-maven-3.6.0\bin;D:\GIT\Git\cmd;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;;C:\Users\Administrator\Desktop;;.]
2019-04-03 15:12:10 -Initializing Spring embedded WebApplicationContext
2019-04-03 15:12:10 -Root WebApplicationContext: initialization completed in 7414 ms
2019-04-03 15:12:11 -Mapping filter: 'characterEncodingFilter' to: [/*]
2019-04-03 15:12:11 -Mapping filter: 'hiddenHttpMethodFilter' to: [/*]
2019-04-03 15:12:11 -Mapping filter: 'httpPutFormContentFilter' to: [/*]
2019-04-03 15:12:11 -Mapping filter: 'requestContextFilter' to: [/*]
2019-04-03 15:12:11 -Filter xssFilter was not registered (disabled)
2019-04-03 15:12:11 -Mapping filter: 'webStatFilter' to urls: [/*]
2019-04-03 15:12:11 -Mapping filter: 'shiroFilterFactoryBean' to: [/*]
2019-04-03 15:12:11 -Servlet statViewServlet mapped to [/druid/*]
2019-04-03 15:12:11 -Servlet dispatcherServlet mapped to [/]
2019-04-03 15:12:13 -ApplicationContext registed-->org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@a38c7fe: startup date [Wed Apr 03 15:12:03 CST 2019]; root of context hierarchy
2019-04-03 15:12:14 -Using default implementation for ThreadExecutor
2019-04-03 15:12:14 -Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2019-04-03 15:12:14 -Quartz Scheduler v.2.2.1 created.
2019-04-03 15:12:14 -RAMJobStore initialized.
2019-04-03 15:12:14 -Scheduler meta-data: Quartz Scheduler (v2.2.1) 'schedulerFactoryBean' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2019-04-03 15:12:14 -Quartz scheduler 'schedulerFactoryBean' initialized from an externally provided properties instance.
2019-04-03 15:12:14 -Quartz scheduler version: 2.2.1
2019-04-03 15:12:14 -JobFactory set to: com.bootdo.common.quartz.factory.JobFactory@1b409a79
2019-04-03 15:12:14 -Initializing ExecutorService  'clientInboundChannelExecutor'
2019-04-03 15:12:14 -Initializing ExecutorService  'clientOutboundChannelExecutor'
2019-04-03 15:12:17 -Mapped "{[/charts/countDD/getCountDD],methods=[POST]}" onto public com.bootdo.charts.vo.CountDayVo com.bootdo.charts.controller.countDDController.getCountD(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo,javax.servlet.http.HttpServletRequest)
2019-04-03 15:12:17 -Mapped "{[/charts/countDD],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.countDDController.countDD()
2019-04-03 15:12:17 -Mapped "{[/charts/countDD/tableDD],methods=[POST]}" onto public java.lang.String com.bootdo.charts.controller.countDDController.tableDD()
2019-04-03 15:12:17 -Mapped "{[/charts/countDD/exportCountDD],methods=[GET]}" onto public void com.bootdo.charts.controller.countDDController.exprotElecLog(com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-03 15:12:17 -Mapped "{[/charts/countMM/exportCountMM],methods=[GET]}" onto public void com.bootdo.charts.controller.countMMController.exprotElecLog(com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-03 15:12:17 -Mapped "{[/charts/countMM/getCountMM],methods=[POST]}" onto public void com.bootdo.charts.controller.countMMController.getCountMM(org.springframework.ui.Model,com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo,javax.servlet.http.HttpServletRequest)
2019-04-03 15:12:17 -Mapped "{[/charts/countMM],methods=[GET]}" onto java.lang.String com.bootdo.charts.controller.countMMController.countMM()
2019-04-03 15:12:17 -Mapped "{[/charts/countOwe],methods=[GET]}" onto java.lang.String com.bootdo.charts.controller.countOweController.countOwe()
2019-04-03 15:12:17 -Mapped "{[/charts/countOwe/getCountOwe],methods=[POST]}" onto public com.bootdo.charts.vo.CountOweVo com.bootdo.charts.controller.countOweController.getCountD(com.bootdo.elec.vo.ElecVo,com.bootdo.water.vo.WaterVo,com.bootdo.heat.vo.HeatVo,javax.servlet.http.HttpServletRequest)
2019-04-03 15:12:17 -Mapped "{[/charts/countRun],methods=[GET]}" onto java.lang.String com.bootdo.charts.controller.countRunController.countRun()
2019-04-03 15:12:17 -Mapped "{[/charts/countRun/getCountRun],methods=[POST]}" onto public int com.bootdo.charts.controller.countRunController.getCountD(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo)
2019-04-03 15:12:17 -Mapped "{[/charts/countRun/exportCountRun],methods=[GET]}" onto public void com.bootdo.charts.controller.countRunController.exprotElecLog(com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-03 15:12:17 -Mapped "{[/charts/countYY],methods=[GET]}" onto java.lang.String com.bootdo.charts.controller.countYYController.countYY()
2019-04-03 15:12:17 -Mapped "{[/charts/countYY/getCountYY],methods=[POST]}" onto public int com.bootdo.charts.controller.countYYController.getCountD(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo)
2019-04-03 15:12:17 -Mapped "{[/charts/countYY/exportCountYY],methods=[GET]}" onto public void com.bootdo.charts.controller.countYYController.exprotElecLog(com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-03 15:12:17 -Mapped "{[/common/dict/add],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.add()
2019-04-03 15:12:17 -Mapped "{[/common/dict/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.remove(java.lang.Long)
2019-04-03 15:12:17 -Mapped "{[/common/dict/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.remove(java.lang.Long[])
2019-04-03 15:12:17 -Mapped "{[/common/dict/update]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.update(com.bootdo.common.domain.DictDO)
2019-04-03 15:12:17 -Mapped "{[/common/dict/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.common.controller.DictController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 15:12:17 -Mapped "{[/common/dict/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.save(com.bootdo.common.domain.DictDO)
2019-04-03 15:12:17 -Mapped "{[/common/dict/type],methods=[GET]}" onto public java.util.List<com.bootdo.common.domain.DictDO> com.bootdo.common.controller.DictController.listType()
2019-04-03 15:12:17 -Mapped "{[/common/dict/list/{type}],methods=[GET]}" onto public java.util.List<com.bootdo.common.domain.DictDO> com.bootdo.common.controller.DictController.listByType(java.lang.String)
2019-04-03 15:12:17 -Mapped "{[/common/dict/add/{type}/{description}],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.addD(org.springframework.ui.Model,java.lang.String,java.lang.String)
2019-04-03 15:12:17 -Mapped "{[/common/dict],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.dict()
2019-04-03 15:12:17 -Mapped "{[/common/dict/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 15:12:17 -Mapped "{[/common/sysFile/add],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.FileController.add()
2019-04-03 15:12:17 -Mapped "{[/common/sysFile/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.remove(java.lang.Long,javax.servlet.http.HttpServletRequest)
2019-04-03 15:12:17 -Mapped "{[/common/sysFile/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.remove(java.lang.Long[])
2019-04-03 15:12:17 -Mapped "{[/common/sysFile/update]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.update(com.bootdo.common.domain.FileDO)
2019-04-03 15:12:17 -Mapped "{[/common/sysFile/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.common.controller.FileController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 15:12:17 -Mapped "{[/common/sysFile/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.save(com.bootdo.common.domain.FileDO)
2019-04-03 15:12:17 -Mapped "{[/common/sysFile/info/{id}]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.info(java.lang.Long)
2019-04-03 15:12:17 -Mapped "{[/common/sysFile],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.FileController.sysFile(org.springframework.ui.Model)
2019-04-03 15:12:17 -Mapped "{[/common/sysFile/edit],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.FileController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 15:12:17 -Mapped "{[/common/sysFile/upload],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.FileController.upload(org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpServletRequest)
2019-04-03 15:12:17 -Mapped "{[/common/generator/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.GeneratorController.update(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 15:12:17 -Mapped "{[/common/generator/list],methods=[GET]}" onto java.util.List<java.util.Map<java.lang.String, java.lang.Object>> com.bootdo.common.controller.GeneratorController.list()
2019-04-03 15:12:17 -Mapped "{[/common/generator/code/{tableName}]}" onto public void com.bootdo.common.controller.GeneratorController.code(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String) throws java.io.IOException
2019-04-03 15:12:17 -Mapped "{[/common/generator/batchCode]}" onto public void com.bootdo.common.controller.GeneratorController.batchCode(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String) throws java.io.IOException
2019-04-03 15:12:17 -Mapped "{[/common/generator/edit],methods=[GET]}" onto public java.lang.String com.bootdo.common.controller.GeneratorController.edit(org.springframework.ui.Model)
2019-04-03 15:12:17 -Mapped "{[/common/generator],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.GeneratorController.generator()
2019-04-03 15:12:17 -Mapped "{[/common/job/add],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.JobController.add()
2019-04-03 15:12:17 -Mapped "{[/common/job/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.remove(java.lang.Long)
2019-04-03 15:12:17 -Mapped "{[/common/job/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.remove(java.lang.Long[])
2019-04-03 15:12:17 -Mapped "{[/common/job/update],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.update(com.bootdo.common.domain.TaskDO)
2019-04-03 15:12:17 -Mapped "{[/common/job/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.common.controller.JobController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 15:12:17 -Mapped "{[/common/job/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.save(com.bootdo.common.domain.TaskDO)
2019-04-03 15:12:17 -Mapped "{[/common/job/info/{id}]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.info(java.lang.Long)
2019-04-03 15:12:17 -Mapped "{[/common/job/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.JobController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 15:12:17 -Mapped "{[/common/job/changeJobStatus],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.changeJobStatus(java.lang.Long,java.lang.String)
2019-04-03 15:12:17 -Mapped "{[/common/job],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.JobController.taskScheduleJob()
2019-04-03 15:12:17 -Mapped "{[/common/log/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.LogController.remove(java.lang.Long)
2019-04-03 15:12:17 -Mapped "{[/common/log],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.LogController.log()
2019-04-03 15:12:17 -Mapped "{[/common/log/list],methods=[GET]}" onto com.bootdo.common.domain.PageDO<com.bootdo.common.domain.LogDO> com.bootdo.common.controller.LogController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 15:12:17 -Mapped "{[/common/log/batchRemove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.LogController.batchRemove(java.lang.Long[])
2019-04-03 15:12:17 -Mapped "{[/common/long],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.LongController.Long()
2019-04-03 15:12:17 -Mapped "{[/common/time],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.TimeController.Time()
2019-04-03 15:12:17 -Mapped "{[/error]}" onto public com.bootdo.common.utils.R com.bootdo.common.exception.MainsiteErrorController.handleError(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-04-03 15:12:17 -Mapped "{[/error],produces=[text/html]}" onto public org.springframework.web.servlet.ModelAndView com.bootdo.common.exception.MainsiteErrorController.errorHtml(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-04-03 15:12:17 -Mapped "{[/elec/elec/add],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecController.add()
2019-04-03 15:12:17 -Mapped "{[/elec/elec/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.remove(java.lang.Long)
2019-04-03 15:12:17 -Mapped "{[/elec/elec/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.remove(java.lang.Long[])
2019-04-03 15:12:17 -Mapped "{[/elec/elec/update],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.update(com.bootdo.elec.domain.ElecDO)
2019-04-03 15:12:17 -Mapped "{[/elec/elec/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.elec.controller.ElecController.list(java.util.Map<java.lang.String, java.lang.Object>,com.bootdo.elec.domain.ElecDO)
2019-04-03 15:12:17 -Mapped "{[/elec/elec/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.save(com.bootdo.elec.domain.ElecDO)
2019-04-03 15:12:17 -Mapped "{[/elec/elec/exprotElec],methods=[GET]}" onto public void com.bootdo.elec.controller.ElecController.exprotExcel(com.bootdo.elec.vo.ElecVo,javax.servlet.http.HttpServletResponse)
2019-04-03 15:12:17 -Mapped "{[/elec/elec/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 15:12:17 -Mapped "{[/elec/elec],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecController.Elec()
2019-04-03 15:12:17 -Mapped "{[/elec/elecInto/exprotElecIntoExcel],methods=[GET]}" onto public void com.bootdo.elec.controller.ElecIntoController.exprotExcel(com.bootdo.elec.vo.ElecVo,javax.servlet.http.HttpServletResponse)
2019-04-03 15:12:17 -Mapped "{[/elec/elecInto/importElecIntoExcel],methods=[POST]}" onto public java.util.Map<java.lang.String, java.lang.Object> com.bootdo.elec.controller.ElecIntoController.importElecIntoExcel(org.springframework.web.multipart.MultipartFile,com.bootdo.elec.vo.ElecVo) throws java.lang.Exception
2019-04-03 15:12:17 -Mapped "{[/elec/elecInto],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecIntoController.ElecInto()
2019-04-03 15:12:17 -Mapped "{[/elec/elecPrice/add],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecPriceController.add()
2019-04-03 15:12:17 -Mapped "{[/elec/elecPrice/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecPriceController.remove(java.lang.Long)
2019-04-03 15:12:17 -Mapped "{[/elec/elecPrice/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecPriceController.remove(java.lang.Long[])
2019-04-03 15:12:17 -Mapped "{[/elec/elecPrice/update]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecPriceController.update(com.bootdo.elec.domain.ElecPriceDO)
2019-04-03 15:12:17 -Mapped "{[/elec/elecPrice/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.elec.controller.ElecPriceController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 15:12:17 -Mapped "{[/elec/elecPrice/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecPriceController.save(com.bootdo.elec.domain.ElecPriceDO,com.bootdo.elec.domain.ElecDO)
2019-04-03 15:12:17 -Mapped "{[/elec/elecPrice/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecPriceController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 15:12:17 -Mapped "{[/elec/elecPrice],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecPriceController.ElecPrice()
2019-04-03 15:12:17 -Mapped "{[/elec/elecUpLoad],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecUpLoadController.Elec()
2019-04-03 15:12:17 -Mapped "{[/elec/elecUpLoad/importElecExcel],methods=[POST]}" onto public java.util.Map<java.lang.String, java.lang.Object> com.bootdo.elec.controller.ElecUpLoadController.importElecExcel(org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpServletRequest) throws java.lang.Exception
2019-04-03 15:12:17 -Mapped "{[/heat/heat/add],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatController.add()
2019-04-03 15:12:17 -Mapped "{[/heat/heat/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatController.remove(java.lang.Integer)
2019-04-03 15:12:17 -Mapped "{[/heat/heat/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatController.remove(java.lang.Integer[])
2019-04-03 15:12:17 -Mapped "{[/heat/heat/update]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatController.update(com.bootdo.heat.domain.HeatDO)
2019-04-03 15:12:17 -Mapped "{[/heat/heat/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.heat.controller.HeatController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 15:12:17 -Mapped "{[/heat/heat/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatController.save(com.bootdo.heat.domain.HeatDO)
2019-04-03 15:12:17 -Mapped "{[/heat/heat/exprotHeat],methods=[GET]}" onto public void com.bootdo.heat.controller.HeatController.exprotExcel(com.bootdo.heat.vo.HeatVo,javax.servlet.http.HttpServletResponse)
2019-04-03 15:12:17 -Mapped "{[/heat/heat/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatController.edit(java.lang.Integer,org.springframework.ui.Model)
2019-04-03 15:12:17 -Mapped "{[/heat/heat],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatController.Heat()
2019-04-03 15:12:17 -Mapped "{[/heat/heatInto/exprotHeatIntoExcel],methods=[GET]}" onto public void com.bootdo.heat.controller.HeatIntoController.exprotExcel(com.bootdo.heat.vo.HeatVo,javax.servlet.http.HttpServletResponse)
2019-04-03 15:12:17 -Mapped "{[/heat/heatInto],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatIntoController.HeatInto()
2019-04-03 15:12:17 -Mapped "{[/heat/heatPrice/add],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatPriceController.add()
2019-04-03 15:12:17 -Mapped "{[/heat/heatPrice/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatPriceController.remove(java.lang.Long)
2019-04-03 15:12:17 -Mapped "{[/heat/heatPrice/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatPriceController.remove(java.lang.Long[])
2019-04-03 15:12:17 -Mapped "{[/heat/heatPrice/update]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatPriceController.update(com.bootdo.heat.domain.HeatPriceDO)
2019-04-03 15:12:17 -Mapped "{[/heat/heatPrice/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.heat.controller.HeatPriceController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 15:12:17 -Mapped "{[/heat/heatPrice/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatPriceController.save(com.bootdo.heat.domain.HeatPriceDO)
2019-04-03 15:12:17 -Mapped "{[/heat/heatPrice/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatPriceController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 15:12:17 -Mapped "{[/heat/heatPrice],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatPriceController.HeatPrice()
2019-04-03 15:12:17 -Mapped "{[/heat/heatUpLoad],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatUpLoadController.HeatUpLoad()
2019-04-03 15:12:17 -Mapped "{[/heat/heatUpLoad/importHeatExcel]}" onto public java.lang.String com.bootdo.heat.controller.HeatUpLoadController.importHeatExcel(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)
2019-04-03 15:12:17 -Mapped "{[/heat/heatUpLoad/createHeatExcel],methods=[POST]}" onto public java.lang.String com.bootdo.heat.controller.HeatUpLoadController.createHeatExcel(com.bootdo.heat.domain.HeatDO) throws java.lang.Exception
2019-04-03 15:12:17 -Mapped "{[/heat/heatUpLoad/exprotHeatExcel],methods=[GET]}" onto public void com.bootdo.heat.controller.HeatUpLoadController.exprotHeatExcel(com.bootdo.heat.vo.HeatVo,javax.servlet.http.HttpServletResponse)
2019-04-03 15:12:17 -Mapped "{[/moneyList/moneyList/queryAllUserName],methods=[POST]}" onto public java.util.List<com.bootdo.moneyList.damain.MoneyListDO> com.bootdo.moneyList.controller.MoneyListController.getAllUserName(com.bootdo.moneyList.damain.MoneyListDO)
2019-04-03 15:12:17 -Mapped "{[/moneyList/moneyList],methods=[GET]}" onto java.lang.String com.bootdo.moneyList.controller.MoneyListController.MoneyList()
2019-04-03 15:12:17 -Mapped "{[/moneyList/moneyList/updateMoney],methods=[POST]}" onto public java.util.List<com.bootdo.moneyList.damain.MoneyListDO> com.bootdo.moneyList.controller.MoneyListController.updateMoney(com.bootdo.moneyList.damain.MoneyListDO)
2019-04-03 15:12:17 -Mapped "{[/moneyList/moneyList/queryAllUser],methods=[POST]}" onto public java.util.List<com.bootdo.moneyList.damain.MoneyListDO> com.bootdo.moneyList.controller.MoneyListController.queryAllUser(com.bootdo.moneyList.damain.MoneyListDO)
2019-04-03 15:12:17 -Mapped "{[/moneyLog/elecLog/add],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.ElecLogController.add()
2019-04-03 15:12:17 -Mapped "{[/moneyLog/elecLog/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.ElecLogController.remove(java.lang.Long)
2019-04-03 15:12:17 -Mapped "{[/moneyLog/elecLog/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.ElecLogController.remove(java.lang.Long[])
2019-04-03 15:12:17 -Mapped "{[/moneyLog/elecLog/update]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.ElecLogController.update(com.bootdo.moneyLog.domain.ElecLogDO)
2019-04-03 15:12:17 -Mapped "{[/moneyLog/elecLog/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.moneyLog.controller.ElecLogController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 15:12:17 -Mapped "{[/moneyLog/elecLog/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.ElecLogController.save(com.bootdo.moneyLog.domain.ElecLogDO)
2019-04-03 15:12:17 -Mapped "{[/moneyLog/elecLog/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.ElecLogController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 15:12:17 -Mapped "{[/moneyLog/elecLog/exprotElecLog],methods=[GET]}" onto public void com.bootdo.moneyLog.controller.ElecLogController.exprotElecLog(com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-03 15:12:17 -Mapped "{[/moneyLog/elecLog],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.ElecLogController.moneyLog()
2019-04-03 15:12:17 -Mapped "{[/moneyLog/heatLog/add],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.HeatLogController.add()
2019-04-03 15:12:17 -Mapped "{[/moneyLog/heatLog/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.HeatLogController.remove(java.lang.Long)
2019-04-03 15:12:17 -Mapped "{[/moneyLog/heatLog/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.HeatLogController.remove(java.lang.Long[])
2019-04-03 15:12:17 -Mapped "{[/moneyLog/heatLog/update]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.HeatLogController.update(com.bootdo.moneyLog.domain.HeatLogDO)
2019-04-03 15:12:17 -Mapped "{[/moneyLog/heatLog/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.moneyLog.controller.HeatLogController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 15:12:17 -Mapped "{[/moneyLog/heatLog/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.HeatLogController.save(com.bootdo.moneyLog.domain.HeatLogDO)
2019-04-03 15:12:17 -Mapped "{[/moneyLog/heatLog/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.HeatLogController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 15:12:17 -Mapped "{[/moneyLog/heatLog/exprotHeatLog],methods=[GET]}" onto public void com.bootdo.moneyLog.controller.HeatLogController.exprotHeatLog(com.bootdo.moneyLog.vo.HeatLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-03 15:12:17 -Mapped "{[/moneyLog/heatLog],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.HeatLogController.HeatLog()
2019-04-03 15:12:17 -Mapped "{[/moneyLog/waterLog/add],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.WaterLogController.add()
2019-04-03 15:12:17 -Mapped "{[/moneyLog/waterLog/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.WaterLogController.remove(java.lang.Long)
2019-04-03 15:12:17 -Mapped "{[/moneyLog/waterLog/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.WaterLogController.remove(java.lang.Long[])
2019-04-03 15:12:17 -Mapped "{[/moneyLog/waterLog/update]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.WaterLogController.update(com.bootdo.moneyLog.domain.WaterLogDO)
2019-04-03 15:12:17 -Mapped "{[/moneyLog/waterLog/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.moneyLog.controller.WaterLogController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 15:12:17 -Mapped "{[/moneyLog/waterLog/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.WaterLogController.save(com.bootdo.moneyLog.domain.WaterLogDO)
2019-04-03 15:12:17 -Mapped "{[/moneyLog/waterLog/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.WaterLogController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 15:12:17 -Mapped "{[/moneyLog/waterLog],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.WaterLogController.WaterLog()
2019-04-03 15:12:17 -Mapped "{[/moneyLog/waterLog/exprotWaterLog],methods=[GET]}" onto public void com.bootdo.moneyLog.controller.WaterLogController.exprotWaterLog(com.bootdo.moneyLog.vo.WaterLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-03 15:12:17 -Mapped "{[/oa/notify/add],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.add()
2019-04-03 15:12:17 -Mapped "{[/oa/notify/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.remove(java.lang.Long)
2019-04-03 15:12:17 -Mapped "{[/oa/notify/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.remove(java.lang.Long[])
2019-04-03 15:12:17 -Mapped "{[/oa/notify/update]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.update(com.bootdo.oa.domain.NotifyDO)
2019-04-03 15:12:17 -Mapped "{[/oa/notify/read/{id}],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.read(java.lang.Long,org.springframework.ui.Model)
2019-04-03 15:12:17 -Mapped "{[/oa/notify/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.oa.controller.NotifyController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 15:12:17 -Mapped "{[/oa/notify/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.save(com.bootdo.oa.domain.NotifyDO)
2019-04-03 15:12:17 -Mapped "{[/oa/notify/message],methods=[GET]}" onto com.bootdo.common.utils.PageUtils com.bootdo.oa.controller.NotifyController.message()
2019-04-03 15:12:17 -Mapped "{[/oa/notify/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 15:12:17 -Mapped "{[/oa/notify/selfList],methods=[GET]}" onto com.bootdo.common.utils.PageUtils com.bootdo.oa.controller.NotifyController.selfList(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 15:12:17 -Mapped "{[/oa/notify/selfNotify],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.selefNotify()
2019-04-03 15:12:17 -Mapped "{[/oa/notify],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.oaNotify()
2019-04-03 15:12:17 -Mapped "{[/print/print/add],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.add()
2019-04-03 15:12:17 -Mapped "{[/print/print/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.print.controller.PrintController.remove(java.lang.Long)
2019-04-03 15:12:17 -Mapped "{[/print/print/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.print.controller.PrintController.remove(java.lang.Long[])
2019-04-03 15:12:17 -Mapped "{[/print/print/update]}" onto public com.bootdo.common.utils.R com.bootdo.print.controller.PrintController.update(com.bootdo.print.domain.PrintDO)
2019-04-03 15:12:17 -Mapped "{[/print/print/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.print.controller.PrintController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 15:12:17 -Mapped "{[/print/print/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.print.controller.PrintController.save(java.lang.String,com.bootdo.print.domain.PrintDO)
2019-04-03 15:12:17 -Mapped "{[/print/print/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 15:12:17 -Mapped "{[/print/print],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.Print()
2019-04-03 15:12:17 -Mapped "{[/print/print/printEdit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.printEdit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 15:12:17 -Mapped "{[/print/print/exprotPrint],methods=[GET]}" onto public void com.bootdo.print.controller.PrintController.exprotPrint(com.bootdo.print.vo.PrintVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-03 15:12:17 -Mapped "{[/system/sysDept/add/{pId}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.add(java.lang.Long,org.springframework.ui.Model)
2019-04-03 15:12:17 -Mapped "{[/system/sysDept/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.remove(java.lang.Long)
2019-04-03 15:12:17 -Mapped "{[/system/sysDept/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.remove(java.lang.Long[])
2019-04-03 15:12:17 -Mapped "{[/system/sysDept/update]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.update(com.bootdo.system.domain.DeptDO)
2019-04-03 15:12:17 -Mapped "{[/system/sysDept/list],methods=[GET]}" onto public java.util.List<com.bootdo.system.domain.DeptDO> com.bootdo.system.controller.DeptController.list()
2019-04-03 15:12:17 -Mapped "{[/system/sysDept/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.save(com.bootdo.system.domain.DeptDO)
2019-04-03 15:12:17 -Mapped "{[/system/sysDept/tree],methods=[GET]}" onto public com.bootdo.common.domain.Tree<com.bootdo.system.domain.DeptDO> com.bootdo.system.controller.DeptController.tree()
2019-04-03 15:12:17 -Mapped "{[/system/sysDept/edit/{deptId}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 15:12:17 -Mapped "{[/system/sysDept/treeView],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.treeView()
2019-04-03 15:12:17 -Mapped "{[/system/sysDept],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.dept()
2019-04-03 15:12:17 -Mapped "{[/index],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.index(org.springframework.ui.Model)
2019-04-03 15:12:17 -Mapped "{[/main],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.main()
2019-04-03 15:12:17 -Mapped "{[/login],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.login(org.springframework.ui.Model)
2019-04-03 15:12:17 -Mapped "{[/getVerify],methods=[GET]}" onto public void com.bootdo.system.controller.LoginController.getVerify(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-04-03 15:12:17 -Mapped "{[/logout],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.logout()
2019-04-03 15:12:17 -Mapped "{[/login],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.LoginController.ajaxLogin(java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest)
2019-04-03 15:12:17 -Mapped "{[/ || ],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.welcome(org.springframework.ui.Model)
2019-04-03 15:12:17 -Mapped "{[/sys/menu/add/{pId}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.MenuController.add(org.springframework.ui.Model,java.lang.Long)
2019-04-03 15:12:17 -Mapped "{[/sys/menu/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.MenuController.remove(java.lang.Long)
2019-04-03 15:12:17 -Mapped "{[/sys/menu/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.MenuController.update(com.bootdo.system.domain.MenuDO)
2019-04-03 15:12:17 -Mapped "{[/sys/menu/list]}" onto java.util.List<com.bootdo.system.domain.MenuDO> com.bootdo.system.controller.MenuController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 15:12:17 -Mapped "{[/sys/menu/save],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.MenuController.save(com.bootdo.system.domain.MenuDO)
2019-04-03 15:12:17 -Mapped "{[/sys/menu/tree/{roleId}],methods=[GET]}" onto com.bootdo.common.domain.Tree<com.bootdo.system.domain.MenuDO> com.bootdo.system.controller.MenuController.tree(java.lang.Long)
2019-04-03 15:12:17 -Mapped "{[/sys/menu/tree],methods=[GET]}" onto com.bootdo.common.domain.Tree<com.bootdo.system.domain.MenuDO> com.bootdo.system.controller.MenuController.tree()
2019-04-03 15:12:17 -Mapped "{[/sys/menu/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.MenuController.edit(org.springframework.ui.Model,java.lang.Long)
2019-04-03 15:12:17 -Mapped "{[/sys/menu],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.MenuController.menu(org.springframework.ui.Model)
2019-04-03 15:12:17 -Mapped "{[/sys/role/add],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.RoleController.add()
2019-04-03 15:12:17 -Mapped "{[/sys/role/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.update(com.bootdo.system.domain.RoleDO)
2019-04-03 15:12:17 -Mapped "{[/sys/role/list],methods=[GET]}" onto java.util.List<com.bootdo.system.domain.RoleDO> com.bootdo.system.controller.RoleController.list()
2019-04-03 15:12:17 -Mapped "{[/sys/role/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.save(java.lang.Long)
2019-04-03 15:12:17 -Mapped "{[/sys/role/save],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.save(com.bootdo.system.domain.RoleDO)
2019-04-03 15:12:17 -Mapped "{[/sys/role/batchRemove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.batchRemove(java.lang.Long[])
2019-04-03 15:12:17 -Mapped "{[/sys/role],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.RoleController.role()
2019-04-03 15:12:17 -Mapped "{[/sys/role/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.RoleController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 15:12:17 -Mapped "{[/sys/online/list]}" onto public java.util.List<com.bootdo.system.domain.UserOnline> com.bootdo.system.controller.SessionController.list()
2019-04-03 15:12:17 -Mapped "{[/sys/online/sessionList]}" onto public java.util.Collection<org.apache.shiro.session.Session> com.bootdo.system.controller.SessionController.sessionList()
2019-04-03 15:12:17 -Mapped "{[/sys/online],methods=[GET]}" onto public java.lang.String com.bootdo.system.controller.SessionController.online()
2019-04-03 15:12:17 -Mapped "{[/sys/online/forceLogout/{sessionId}]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.SessionController.forceLogout(java.lang.String,org.springframework.web.servlet.mvc.support.RedirectAttributes)
2019-04-03 15:12:17 -Mapped "{[/sys/user/exit],methods=[POST]}" onto boolean com.bootdo.system.controller.UserController.exit(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 15:12:17 -Mapped "{[/sys/user/add],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.add(org.springframework.ui.Model)
2019-04-03 15:12:17 -Mapped "{[/sys/user/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.remove(java.lang.Long)
2019-04-03 15:12:17 -Mapped "{[/sys/user/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.update(com.bootdo.system.domain.UserDO)
2019-04-03 15:12:17 -Mapped "{[/sys/user/list],methods=[GET]}" onto com.bootdo.common.utils.PageUtils com.bootdo.system.controller.UserController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 15:12:17 -Mapped "{[/sys/user/save],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.save(com.bootdo.system.domain.UserDO)
2019-04-03 15:12:17 -Mapped "{[/sys/user/batchRemove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.batchRemove(java.lang.Long[])
2019-04-03 15:12:17 -Mapped "{[/sys/user/tree],methods=[GET]}" onto public com.bootdo.common.domain.Tree<com.bootdo.system.domain.DeptDO> com.bootdo.system.controller.UserController.tree()
2019-04-03 15:12:17 -Mapped "{[/sys/user],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.user(org.springframework.ui.Model)
2019-04-03 15:12:17 -Mapped "{[/sys/user/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.edit(org.springframework.ui.Model,java.lang.Long)
2019-04-03 15:12:17 -Mapped "{[/sys/user/updatePeronal],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.updatePeronal(com.bootdo.system.domain.UserDO)
2019-04-03 15:12:17 -Mapped "{[/sys/user/adminResetPwd],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.adminResetPwd(com.bootdo.system.vo.UserVO)
2019-04-03 15:12:17 -Mapped "{[/sys/user/resetPwd],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.resetPwd(com.bootdo.system.vo.UserVO)
2019-04-03 15:12:17 -Mapped "{[/sys/user/resetPwd/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.resetPwd(java.lang.Long,org.springframework.ui.Model)
2019-04-03 15:12:17 -Mapped "{[/sys/user/uploadImg],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.uploadImg(org.springframework.web.multipart.MultipartFile,java.lang.String,javax.servlet.http.HttpServletRequest)
2019-04-03 15:12:17 -Mapped "{[/sys/user/personal],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.personal(org.springframework.ui.Model)
2019-04-03 15:12:17 -Mapped "{[/sys/user/treeView],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.treeView()
2019-04-03 15:12:17 -Mapped "{[/file/downImport/{importType}],methods=[GET]}" onto public void com.bootdo.temple.controller.TempletController.downImport(javax.servlet.http.HttpServletResponse,java.lang.String)
2019-04-03 15:12:17 -Mapped "{[/water/water/add],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterController.add()
2019-04-03 15:12:17 -Mapped "{[/water/water/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterController.remove(java.lang.Long)
2019-04-03 15:12:17 -Mapped "{[/water/water/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterController.remove(java.lang.Long[])
2019-04-03 15:12:17 -Mapped "{[/water/water/update]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterController.update(com.bootdo.water.domain.WaterDO)
2019-04-03 15:12:17 -Mapped "{[/water/water/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.water.controller.WaterController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 15:12:17 -Mapped "{[/water/water/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterController.save(com.bootdo.water.domain.WaterDO)
2019-04-03 15:12:17 -Mapped "{[/water/water/exprotWater],methods=[GET]}" onto public void com.bootdo.water.controller.WaterController.exprotExcel(com.bootdo.water.vo.WaterVo,javax.servlet.http.HttpServletResponse)
2019-04-03 15:12:17 -Mapped "{[/water/water/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 15:12:17 -Mapped "{[/water/water],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterController.Water()
2019-04-03 15:12:17 -Mapped "{[/water/waterInto/exprotWaterIntoExcel],methods=[GET]}" onto public void com.bootdo.water.controller.WaterIntoController.exprotExcel(com.bootdo.water.vo.WaterVo,javax.servlet.http.HttpServletResponse)
2019-04-03 15:12:17 -Mapped "{[/water/waterInto],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterIntoController.WaterInto()
2019-04-03 15:12:17 -Mapped "{[/water/waterPrice/add],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterPriceController.add()
2019-04-03 15:12:17 -Mapped "{[/water/waterPrice/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterPriceController.remove(java.lang.Long)
2019-04-03 15:12:17 -Mapped "{[/water/waterPrice/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterPriceController.remove(java.lang.Long[])
2019-04-03 15:12:17 -Mapped "{[/water/waterPrice/update]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterPriceController.update(com.bootdo.water.domain.WaterPriceDO)
2019-04-03 15:12:17 -Mapped "{[/water/waterPrice/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.water.controller.WaterPriceController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 15:12:17 -Mapped "{[/water/waterPrice/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterPriceController.save(com.bootdo.water.domain.WaterPriceDO)
2019-04-03 15:12:17 -Mapped "{[/water/waterPrice/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterPriceController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 15:12:17 -Mapped "{[/water/waterPrice],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterPriceController.WaterPrice()
2019-04-03 15:12:17 -Mapped "{[/water/waterUpLoad],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterUpLoadController.WaterUpLoad()
2019-04-03 15:12:17 -Mapped "{[/water/waterUpLoad/createWaterExcel],methods=[POST]}" onto public java.lang.String com.bootdo.water.controller.WaterUpLoadController.createWaterExcel(com.bootdo.water.domain.WaterDO) throws java.lang.Exception
2019-04-03 15:12:17 -Mapped "{[/water/waterUpLoad/importWaterExcel]}" onto public java.lang.String com.bootdo.water.controller.WaterUpLoadController.importWaterExcel(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)
2019-04-03 15:12:17 -Mapped "{[/water/waterUpLoad/exprotWaterExcel],methods=[GET]}" onto public void com.bootdo.water.controller.WaterUpLoadController.exprotWaterExcel(com.bootdo.water.vo.WaterVo,javax.servlet.http.HttpServletResponse)
2019-04-03 15:12:17 -Mapped "{[/v2/api-docs],methods=[GET],produces=[application/json || application/hal+json]}" onto public org.springframework.http.ResponseEntity<springfox.documentation.spring.web.json.Json> springfox.documentation.swagger2.web.Swagger2Controller.getDocumentation(java.lang.String,javax.servlet.http.HttpServletRequest)
2019-04-03 15:12:17 -Mapped "{[/swagger-resources/configuration/security]}" onto org.springframework.http.ResponseEntity<springfox.documentation.swagger.web.SecurityConfiguration> springfox.documentation.swagger.web.ApiResourceController.securityConfiguration()
2019-04-03 15:12:17 -Mapped "{[/swagger-resources/configuration/ui]}" onto org.springframework.http.ResponseEntity<springfox.documentation.swagger.web.UiConfiguration> springfox.documentation.swagger.web.ApiResourceController.uiConfiguration()
2019-04-03 15:12:17 -Mapped "{[/swagger-resources]}" onto org.springframework.http.ResponseEntity<java.util.List<springfox.documentation.swagger.web.SwaggerResource>> springfox.documentation.swagger.web.ApiResourceController.swaggerResources()
2019-04-03 15:12:18 -Initializing ExecutorService  'messageBrokerTaskScheduler'
2019-04-03 15:12:18 -Mapped URL path [/endpointChat/**] onto handler of type [class org.springframework.web.socket.sockjs.support.SockJsHttpRequestHandler]
2019-04-03 15:12:18 -Initializing ExecutorService  'brokerChannelExecutor'
2019-04-03 15:12:18 -Mapped URL path [/**/favicon.ico] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-04-03 15:12:18 -Looking for @ControllerAdvice: org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@a38c7fe: startup date [Wed Apr 03 15:12:03 CST 2019]; root of context hierarchy
2019-04-03 15:12:19 -Mapped URL path [/webjars/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-04-03 15:12:19 -Mapped URL path [/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-04-03 15:12:19 -Mapped URL path [/files/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-04-03 15:12:19 -Detected @ExceptionHandler methods in BDExceptionHandler
2019-04-03 15:12:19 -[THYMELEAF][main] Template Mode 'LEGACYHTML5' is deprecated. Using Template Mode 'HTML' instead.
2019-04-03 15:12:21 -Registering beans for JMX exposure on startup
2019-04-03 15:12:21 -Bean with name 'dataSource' has been autodetected for JMX exposure
2019-04-03 15:12:21 -Located MBean 'dataSource': registering with JMX server as MBean [com.alibaba.druid.pool:name=dataSource,type=DruidDataSource]
2019-04-03 15:12:21 -Starting beans in phase 2147483647
2019-04-03 15:12:21 -Context refreshed
2019-04-03 15:12:21 -Found 1 custom documentation plugin(s)
2019-04-03 15:12:21 -Scanning for api listing references
2019-04-03 15:12:21 -Generating unique operation named: exprotElecLogUsingGET_1
2019-04-03 15:12:21 -Generating unique operation named: getCountDUsingPOST_1
2019-04-03 15:12:21 -Generating unique operation named: exprotElecLogUsingGET_2
2019-04-03 15:12:21 -Generating unique operation named: getCountDUsingPOST_2
2019-04-03 15:12:21 -Generating unique operation named: exprotElecLogUsingGET_3
2019-04-03 15:12:21 -Generating unique operation named: getCountDUsingPOST_3
2019-04-03 15:12:21 -Generating unique operation named: removeUsingPOST_1
2019-04-03 15:12:21 -Generating unique operation named: addUsingGET_1
2019-04-03 15:12:21 -Generating unique operation named: editUsingGET_1
2019-04-03 15:12:21 -Generating unique operation named: listUsingGET_1
2019-04-03 15:12:21 -Generating unique operation named: removeUsingPOST_2
2019-04-03 15:12:21 -Generating unique operation named: removeUsingPOST_3
2019-04-03 15:12:21 -Generating unique operation named: saveUsingPOST_1
2019-04-03 15:12:21 -Generating unique operation named: updateUsingGET_1
2019-04-03 15:12:21 -Generating unique operation named: updateUsingHEAD_1
2019-04-03 15:12:21 -Generating unique operation named: updateUsingPOST_1
2019-04-03 15:12:21 -Generating unique operation named: updateUsingPUT_1
2019-04-03 15:12:22 -Generating unique operation named: updateUsingPATCH_1
2019-04-03 15:12:22 -Generating unique operation named: updateUsingDELETE_1
2019-04-03 15:12:22 -Generating unique operation named: updateUsingOPTIONS_1
2019-04-03 15:12:22 -Generating unique operation named: updateUsingTRACE_1
2019-04-03 15:12:22 -Generating unique operation named: addUsingGET_2
2019-04-03 15:12:22 -Generating unique operation named: editUsingGET_2
2019-04-03 15:12:22 -Generating unique operation named: listUsingGET_2
2019-04-03 15:12:22 -Generating unique operation named: removeUsingPOST_4
2019-04-03 15:12:22 -Generating unique operation named: removeUsingPOST_5
2019-04-03 15:12:22 -Generating unique operation named: saveUsingPOST_2
2019-04-03 15:12:22 -Generating unique operation named: updateUsingPOST_2
2019-04-03 15:12:22 -Generating unique operation named: exprotExcelUsingGET_1
2019-04-03 15:12:22 -Generating unique operation named: addUsingGET_3
2019-04-03 15:12:22 -Generating unique operation named: editUsingGET_3
2019-04-03 15:12:22 -Generating unique operation named: exprotElecLogUsingGET_4
2019-04-03 15:12:22 -Generating unique operation named: listUsingGET_3
2019-04-03 15:12:22 -Generating unique operation named: removeUsingPOST_6
2019-04-03 15:12:22 -Generating unique operation named: removeUsingPOST_7
2019-04-03 15:12:22 -Generating unique operation named: saveUsingPOST_3
2019-04-03 15:12:22 -Generating unique operation named: updateUsingGET_2
2019-04-03 15:12:22 -Generating unique operation named: updateUsingHEAD_2
2019-04-03 15:12:22 -Generating unique operation named: updateUsingPOST_3
2019-04-03 15:12:22 -Generating unique operation named: updateUsingPUT_2
2019-04-03 15:12:22 -Generating unique operation named: updateUsingPATCH_2
2019-04-03 15:12:22 -Generating unique operation named: updateUsingDELETE_2
2019-04-03 15:12:22 -Generating unique operation named: updateUsingOPTIONS_2
2019-04-03 15:12:22 -Generating unique operation named: updateUsingTRACE_2
2019-04-03 15:12:22 -Generating unique operation named: addUsingGET_4
2019-04-03 15:12:22 -Generating unique operation named: editUsingGET_4
2019-04-03 15:12:22 -Generating unique operation named: listUsingGET_4
2019-04-03 15:12:22 -Generating unique operation named: removeUsingPOST_8
2019-04-03 15:12:22 -Generating unique operation named: removeUsingPOST_9
2019-04-03 15:12:22 -Generating unique operation named: saveUsingPOST_4
2019-04-03 15:12:22 -Generating unique operation named: updateUsingGET_3
2019-04-03 15:12:22 -Generating unique operation named: updateUsingHEAD_3
2019-04-03 15:12:22 -Generating unique operation named: updateUsingPOST_4
2019-04-03 15:12:22 -Generating unique operation named: updateUsingPUT_3
2019-04-03 15:12:22 -Generating unique operation named: updateUsingPATCH_3
2019-04-03 15:12:22 -Generating unique operation named: updateUsingDELETE_3
2019-04-03 15:12:22 -Generating unique operation named: updateUsingOPTIONS_3
2019-04-03 15:12:22 -Generating unique operation named: updateUsingTRACE_3
2019-04-03 15:12:22 -Generating unique operation named: ElecUsingGET_1
2019-04-03 15:12:22 -Generating unique operation named: addUsingGET_5
2019-04-03 15:12:22 -Generating unique operation named: editUsingGET_5
2019-04-03 15:12:22 -Generating unique operation named: listUsingGET_5
2019-04-03 15:12:22 -Generating unique operation named: removeUsingPOST_10
2019-04-03 15:12:22 -Generating unique operation named: removeUsingPOST_11
2019-04-03 15:12:22 -Generating unique operation named: saveUsingPOST_5
2019-04-03 15:12:22 -Generating unique operation named: updateUsingGET_4
2019-04-03 15:12:22 -Generating unique operation named: updateUsingHEAD_4
2019-04-03 15:12:22 -Generating unique operation named: updateUsingPOST_5
2019-04-03 15:12:22 -Generating unique operation named: updateUsingPUT_4
2019-04-03 15:12:22 -Generating unique operation named: updateUsingPATCH_4
2019-04-03 15:12:22 -Generating unique operation named: updateUsingDELETE_4
2019-04-03 15:12:22 -Generating unique operation named: updateUsingOPTIONS_4
2019-04-03 15:12:22 -Generating unique operation named: updateUsingTRACE_4
2019-04-03 15:12:22 -Generating unique operation named: editUsingGET_6
2019-04-03 15:12:22 -Generating unique operation named: listUsingGET_6
2019-04-03 15:12:22 -Generating unique operation named: updateUsingPOST_6
2019-04-03 15:12:22 -Generating unique operation named: addUsingGET_6
2019-04-03 15:12:22 -Generating unique operation named: editUsingGET_7
2019-04-03 15:12:22 -Generating unique operation named: exprotExcelUsingGET_2
2019-04-03 15:12:22 -Generating unique operation named: listUsingGET_7
2019-04-03 15:12:22 -Generating unique operation named: removeUsingPOST_12
2019-04-03 15:12:22 -Generating unique operation named: removeUsingPOST_13
2019-04-03 15:12:22 -Generating unique operation named: saveUsingPOST_6
2019-04-03 15:12:22 -Generating unique operation named: updateUsingGET_5
2019-04-03 15:12:22 -Generating unique operation named: updateUsingHEAD_5
2019-04-03 15:12:22 -Generating unique operation named: updateUsingPOST_7
2019-04-03 15:12:22 -Generating unique operation named: updateUsingPUT_5
2019-04-03 15:12:22 -Generating unique operation named: updateUsingPATCH_5
2019-04-03 15:12:22 -Generating unique operation named: updateUsingDELETE_5
2019-04-03 15:12:22 -Generating unique operation named: updateUsingOPTIONS_5
2019-04-03 15:12:22 -Generating unique operation named: updateUsingTRACE_5
2019-04-03 15:12:22 -Generating unique operation named: exprotExcelUsingGET_3
2019-04-03 15:12:22 -Generating unique operation named: addUsingGET_7
2019-04-03 15:12:22 -Generating unique operation named: editUsingGET_8
2019-04-03 15:12:22 -Generating unique operation named: listUsingGET_8
2019-04-03 15:12:22 -Generating unique operation named: removeUsingPOST_14
2019-04-03 15:12:22 -Generating unique operation named: removeUsingPOST_15
2019-04-03 15:12:22 -Generating unique operation named: saveUsingPOST_7
2019-04-03 15:12:22 -Generating unique operation named: updateUsingGET_6
2019-04-03 15:12:22 -Generating unique operation named: updateUsingHEAD_6
2019-04-03 15:12:22 -Generating unique operation named: updateUsingPOST_8
2019-04-03 15:12:22 -Generating unique operation named: updateUsingPUT_6
2019-04-03 15:12:22 -Generating unique operation named: updateUsingPATCH_6
2019-04-03 15:12:22 -Generating unique operation named: updateUsingDELETE_6
2019-04-03 15:12:22 -Generating unique operation named: updateUsingOPTIONS_6
2019-04-03 15:12:22 -Generating unique operation named: updateUsingTRACE_6
2019-04-03 15:12:22 -Generating unique operation named: addUsingGET_8
2019-04-03 15:12:22 -Generating unique operation named: editUsingGET_9
2019-04-03 15:12:22 -Generating unique operation named: listUsingGET_9
2019-04-03 15:12:22 -Generating unique operation named: removeUsingPOST_16
2019-04-03 15:12:22 -Generating unique operation named: removeUsingPOST_17
2019-04-03 15:12:22 -Generating unique operation named: saveUsingPOST_8
2019-04-03 15:12:22 -Generating unique operation named: updateUsingGET_7
2019-04-03 15:12:22 -Generating unique operation named: updateUsingHEAD_7
2019-04-03 15:12:22 -Generating unique operation named: updateUsingPOST_9
2019-04-03 15:12:22 -Generating unique operation named: updateUsingPUT_7
2019-04-03 15:12:22 -Generating unique operation named: updateUsingPATCH_7
2019-04-03 15:12:22 -Generating unique operation named: updateUsingDELETE_7
2019-04-03 15:12:22 -Generating unique operation named: updateUsingOPTIONS_7
2019-04-03 15:12:22 -Generating unique operation named: updateUsingTRACE_7
2019-04-03 15:12:22 -Generating unique operation named: addUsingGET_9
2019-04-03 15:12:22 -Generating unique operation named: editUsingGET_10
2019-04-03 15:12:22 -Generating unique operation named: infoUsingGET_1
2019-04-03 15:12:22 -Generating unique operation named: infoUsingHEAD_1
2019-04-03 15:12:22 -Generating unique operation named: infoUsingPOST_1
2019-04-03 15:12:22 -Generating unique operation named: infoUsingPUT_1
2019-04-03 15:12:22 -Generating unique operation named: infoUsingPATCH_1
2019-04-03 15:12:22 -Generating unique operation named: infoUsingDELETE_1
2019-04-03 15:12:22 -Generating unique operation named: infoUsingOPTIONS_1
2019-04-03 15:12:22 -Generating unique operation named: infoUsingTRACE_1
2019-04-03 15:12:23 -Generating unique operation named: listUsingGET_10
2019-04-03 15:12:23 -Generating unique operation named: removeUsingPOST_18
2019-04-03 15:12:23 -Generating unique operation named: removeUsingPOST_19
2019-04-03 15:12:23 -Generating unique operation named: saveUsingPOST_9
2019-04-03 15:12:23 -Generating unique operation named: updateUsingPOST_10
2019-04-03 15:12:23 -Generating unique operation named: listUsingGET_11
2019-04-03 15:12:23 -Generating unique operation named: removeUsingPOST_20
2019-04-03 15:12:23 -Generating unique operation named: welcomeUsingGET_1
2019-04-03 15:12:23 -Generating unique operation named: addUsingGET_10
2019-04-03 15:12:23 -Generating unique operation named: editUsingGET_11
2019-04-03 15:12:23 -Generating unique operation named: listUsingGET_12
2019-04-03 15:12:23 -Generating unique operation named: removeUsingPOST_21
2019-04-03 15:12:23 -Generating unique operation named: saveUsingPOST_10
2019-04-03 15:12:23 -Generating unique operation named: treeUsingGET_1
2019-04-03 15:12:23 -Generating unique operation named: treeUsingGET_2
2019-04-03 15:12:23 -Generating unique operation named: updateUsingPOST_11
2019-04-03 15:12:23 -Generating unique operation named: addUsingGET_11
2019-04-03 15:12:23 -Generating unique operation named: editUsingGET_12
2019-04-03 15:12:23 -Generating unique operation named: listUsingGET_13
2019-04-03 15:12:23 -Generating unique operation named: removeUsingPOST_22
2019-04-03 15:12:23 -Generating unique operation named: removeUsingPOST_23
2019-04-03 15:12:23 -Generating unique operation named: saveUsingPOST_11
2019-04-03 15:12:23 -Generating unique operation named: updateUsingGET_8
2019-04-03 15:12:23 -Generating unique operation named: updateUsingHEAD_8
2019-04-03 15:12:23 -Generating unique operation named: updateUsingPOST_12
2019-04-03 15:12:23 -Generating unique operation named: updateUsingPUT_8
2019-04-03 15:12:23 -Generating unique operation named: updateUsingPATCH_8
2019-04-03 15:12:23 -Generating unique operation named: updateUsingDELETE_8
2019-04-03 15:12:23 -Generating unique operation named: updateUsingOPTIONS_8
2019-04-03 15:12:23 -Generating unique operation named: updateUsingTRACE_8
2019-04-03 15:12:23 -Generating unique operation named: addUsingGET_12
2019-04-03 15:12:23 -Generating unique operation named: editUsingGET_13
2019-04-03 15:12:23 -Generating unique operation named: listUsingGET_14
2019-04-03 15:12:23 -Generating unique operation named: removeUsingPOST_24
2019-04-03 15:12:23 -Generating unique operation named: removeUsingPOST_25
2019-04-03 15:12:23 -Generating unique operation named: saveUsingPOST_12
2019-04-03 15:12:23 -Generating unique operation named: updateUsingGET_9
2019-04-03 15:12:23 -Generating unique operation named: updateUsingHEAD_9
2019-04-03 15:12:23 -Generating unique operation named: updateUsingPOST_13
2019-04-03 15:12:23 -Generating unique operation named: updateUsingPUT_9
2019-04-03 15:12:23 -Generating unique operation named: updateUsingPATCH_9
2019-04-03 15:12:23 -Generating unique operation named: updateUsingDELETE_9
2019-04-03 15:12:23 -Generating unique operation named: updateUsingOPTIONS_9
2019-04-03 15:12:23 -Generating unique operation named: updateUsingTRACE_9
2019-04-03 15:12:23 -Generating unique operation named: addUsingGET_13
2019-04-03 15:12:23 -Generating unique operation named: batchRemoveUsingPOST_1
2019-04-03 15:12:23 -Generating unique operation named: editUsingGET_14
2019-04-03 15:12:23 -Generating unique operation named: listUsingGET_15
2019-04-03 15:12:23 -Generating unique operation named: saveUsingPOST_13
2019-04-03 15:12:23 -Generating unique operation named: saveUsingPOST_14
2019-04-03 15:12:23 -Generating unique operation named: updateUsingPOST_14
2019-04-03 15:12:23 -Generating unique operation named: listUsingGET_16
2019-04-03 15:12:23 -Generating unique operation named: listUsingHEAD_1
2019-04-03 15:12:23 -Generating unique operation named: listUsingPOST_1
2019-04-03 15:12:23 -Generating unique operation named: listUsingPUT_1
2019-04-03 15:12:23 -Generating unique operation named: listUsingPATCH_1
2019-04-03 15:12:23 -Generating unique operation named: listUsingDELETE_1
2019-04-03 15:12:23 -Generating unique operation named: listUsingOPTIONS_1
2019-04-03 15:12:23 -Generating unique operation named: listUsingTRACE_1
2019-04-03 15:12:23 -Generating unique operation named: addUsingGET_14
2019-04-03 15:12:23 -Generating unique operation named: batchRemoveUsingPOST_2
2019-04-03 15:12:23 -Generating unique operation named: editUsingGET_15
2019-04-03 15:12:23 -Generating unique operation named: listUsingGET_17
2019-04-03 15:12:23 -Generating unique operation named: removeUsingPOST_26
2019-04-03 15:12:23 -Generating unique operation named: saveUsingPOST_15
2019-04-03 15:12:23 -Generating unique operation named: treeUsingGET_3
2019-04-03 15:12:23 -Generating unique operation named: treeViewUsingGET_1
2019-04-03 15:12:23 -Generating unique operation named: updateUsingPOST_15
2019-04-03 15:12:23 -Generating unique operation named: addUsingGET_15
2019-04-03 15:12:23 -Generating unique operation named: editUsingGET_16
2019-04-03 15:12:23 -Generating unique operation named: exprotExcelUsingGET_4
2019-04-03 15:12:23 -Generating unique operation named: listUsingGET_18
2019-04-03 15:12:23 -Generating unique operation named: removeUsingPOST_27
2019-04-03 15:12:23 -Generating unique operation named: removeUsingPOST_28
2019-04-03 15:12:23 -Generating unique operation named: saveUsingPOST_16
2019-04-03 15:12:23 -Generating unique operation named: updateUsingGET_10
2019-04-03 15:12:23 -Generating unique operation named: updateUsingHEAD_10
2019-04-03 15:12:23 -Generating unique operation named: updateUsingPOST_16
2019-04-03 15:12:23 -Generating unique operation named: updateUsingPUT_10
2019-04-03 15:12:23 -Generating unique operation named: updateUsingPATCH_10
2019-04-03 15:12:23 -Generating unique operation named: updateUsingDELETE_10
2019-04-03 15:12:23 -Generating unique operation named: updateUsingOPTIONS_10
2019-04-03 15:12:23 -Generating unique operation named: updateUsingTRACE_10
2019-04-03 15:12:23 -Generating unique operation named: exprotExcelUsingGET_5
2019-04-03 15:12:23 -Generating unique operation named: addUsingGET_16
2019-04-03 15:12:23 -Generating unique operation named: editUsingGET_17
2019-04-03 15:12:23 -Generating unique operation named: listUsingGET_19
2019-04-03 15:12:23 -Generating unique operation named: removeUsingPOST_29
2019-04-03 15:12:23 -Generating unique operation named: removeUsingPOST_30
2019-04-03 15:12:23 -Generating unique operation named: saveUsingPOST_17
2019-04-03 15:12:23 -Generating unique operation named: updateUsingGET_11
2019-04-03 15:12:23 -Generating unique operation named: updateUsingHEAD_11
2019-04-03 15:12:23 -Generating unique operation named: updateUsingPOST_17
2019-04-03 15:12:23 -Generating unique operation named: updateUsingPUT_11
2019-04-03 15:12:23 -Generating unique operation named: updateUsingPATCH_11
2019-04-03 15:12:23 -Generating unique operation named: updateUsingDELETE_11
2019-04-03 15:12:23 -Generating unique operation named: updateUsingOPTIONS_11
2019-04-03 15:12:23 -Generating unique operation named: updateUsingTRACE_11
2019-04-03 15:12:23 -Generating unique operation named: addUsingGET_17
2019-04-03 15:12:23 -Generating unique operation named: editUsingGET_18
2019-04-03 15:12:23 -Generating unique operation named: listUsingGET_20
2019-04-03 15:12:23 -Generating unique operation named: removeUsingPOST_31
2019-04-03 15:12:23 -Generating unique operation named: removeUsingPOST_32
2019-04-03 15:12:23 -Generating unique operation named: saveUsingPOST_18
2019-04-03 15:12:23 -Generating unique operation named: updateUsingGET_12
2019-04-03 15:12:23 -Generating unique operation named: updateUsingHEAD_12
2019-04-03 15:12:23 -Generating unique operation named: updateUsingPOST_18
2019-04-03 15:12:23 -Generating unique operation named: updateUsingPUT_12
2019-04-03 15:12:23 -Generating unique operation named: updateUsingPATCH_12
2019-04-03 15:12:23 -Generating unique operation named: updateUsingDELETE_12
2019-04-03 15:12:23 -Generating unique operation named: updateUsingOPTIONS_12
2019-04-03 15:12:23 -Generating unique operation named: updateUsingTRACE_12
2019-04-03 15:12:23 -Starting Quartz Scheduler now
2019-04-03 15:12:23 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED started.
2019-04-03 15:12:23 -Starting...
2019-04-03 15:12:23 -BrokerAvailabilityEvent[available=true, SimpleBrokerMessageHandler [DefaultSubscriptionRegistry[cache[0 destination(s)], registry[0 sessions]]]]
2019-04-03 15:12:23 -Started.
2019-04-03 15:12:23 -Starting ProtocolHandler ["http-nio-8081"]
2019-04-03 15:12:24 -Using a shared selector for servlet write/read
2019-04-03 15:12:24 -Tomcat started on port(s): 8081 (http) with context path ''
2019-04-03 15:12:24 -Started BootdoApplication in 22.964 seconds (JVM running for 23.845)
2019-04-03 15:12:24 -==>  Preparing: select `id`,`cron_expression`,`method_name`,`is_concurrent`,`description`,`update_by`,`bean_class`,`create_date`,`job_status`,`job_group`,`update_date`,`create_by`,`spring_bean`,`job_name` from sys_task order by id desc 
2019-04-03 15:12:24 -==> Parameters: 
2019-04-03 15:12:24 -<==      Total: 1
2019-04-03 15:12:32 -Initializing Spring FrameworkServlet 'dispatcherServlet'
2019-04-03 15:12:32 -FrameworkServlet 'dispatcherServlet': initialization started
2019-04-03 15:12:32 -FrameworkServlet 'dispatcherServlet': initialization completed in 87 ms
2019-04-03 15:12:32 -Enabling session validation scheduler...
2019-04-03 15:12:33 -请求地址 : http://localhost:8081/login;JSESSIONID=ecf0c345-4d96-4030-b7d2-47efd089766a
2019-04-03 15:12:33 -HTTP METHOD : GET
2019-04-03 15:12:33 -CLASS_METHOD : com.bootdo.system.controller.LoginController.login
2019-04-03 15:12:33 -参数 : [{}]
2019-04-03 15:12:33 -耗时 : 7
2019-04-03 15:12:33 -返回值 : login
2019-04-03 15:12:35 -请求地址 : http://localhost:8081/getVerify
2019-04-03 15:12:35 -HTTP METHOD : GET
2019-04-03 15:12:35 -CLASS_METHOD : com.bootdo.system.controller.LoginController.getVerify
2019-04-03 15:12:35 -参数 : [org.apache.shiro.web.servlet.ShiroHttpServletRequest@32f06834, org.apache.shiro.web.servlet.ShiroHttpServletResponse@14c770f5]
2019-04-03 15:12:48 -1444
2019-04-03 15:12:48 -耗时 : 13352
2019-04-03 15:12:48 -返回值 : null
2019-04-03 15:12:53 -请求地址 : http://localhost:8081/login
2019-04-03 15:12:53 -HTTP METHOD : POST
2019-04-03 15:12:53 -CLASS_METHOD : com.bootdo.system.controller.LoginController.ajaxLogin
2019-04-03 15:12:53 -参数 : [admin, 111111, 1444, org.apache.shiro.web.servlet.ShiroHttpServletRequest@78da34d9]
2019-04-03 15:12:53 -==>  Preparing: select `user_id`,`username`,`name`,`password`,`dept_id`,`email`,`mobile`,`status`,`user_id_create`,`gmt_create`,`gmt_modified`,`sex`,`birth`,`pic_id`,`live_address`,`hobby`,`province`,`city`,`district` from sys_user WHERE username = ? order by user_id desc 
2019-04-03 15:12:53 -==> Parameters: admin(String)
2019-04-03 15:12:53 -<==      Total: 1
2019-04-03 15:12:53 -耗时 : 183
2019-04-03 15:12:53 -返回值 : {msg=操作成功, code=0}
2019-04-03 15:12:53 -More than one TaskExecutor bean found within the context, and none is named 'taskExecutor'. Mark one of them as primary or name it 'taskExecutor' (possibly as an alias) in order to use it for async processing: [clientInboundChannelExecutor, clientOutboundChannelExecutor, brokerChannelExecutor, messageBrokerTaskScheduler]
2019-04-03 15:12:53 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 15:12:53 -==> Parameters: 1(Long), admin(String), 登录(String), 183(Integer), com.bootdo.system.controller.LoginController.ajaxLogin()(String), null, 127.0.0.1(String), 2019-04-03 15:12:53.667(Timestamp)
2019-04-03 15:12:53 -请求地址 : http://localhost:8081/index
2019-04-03 15:12:53 -HTTP METHOD : GET
2019-04-03 15:12:53 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2019-04-03 15:12:53 -参数 : [{}]
2019-04-03 15:12:53 -<==    Updates: 1
2019-04-03 15:12:53 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2019-04-03 15:12:54 -==> Parameters: 1(Long)
2019-04-03 15:12:54 -<==      Total: 46
2019-04-03 15:12:54 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2019-04-03 15:12:54 -==> Parameters: 138(Long)
2019-04-03 15:12:54 -<==      Total: 1
2019-04-03 15:12:54 -耗时 : 503
2019-04-03 15:12:54 -返回值 : index_v1
2019-04-03 15:12:54 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 15:12:54 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 503(Integer), com.bootdo.system.controller.LoginController.index()(String), {"menus":[{"attributes":{"icon":"fa fa-money","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-money","url":"/moneyList/moneyList"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"102","parentId":"106","text":"现金缴费"},{"attributes":{"icon":"fa fa-book","url":"/moneyLog/elecLog"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"107","parentId":"106","text":"缴费记录"}],"hasChildren":true,"hasParent":false,"id":"106","parentId":"0","text":"收费管理"},{"attributes":{"icon":"fa fa-lightbulb-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/elec/elec"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"121","parentId":"103","text":"电费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"elec/elecInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"122","parentId":"103","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"elec/elecUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"123","parentId":"103","text":"电表上传"},{"attributes":{"icon":"fa fa-cc","url":"/elec/elecPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"124","parentId":"103","text":"电价管理"}],"hasChildren":true,"hasParent":false,"id":"103","parentId":"0","text":"电费管理"},{"attributes":{"icon":"fa fa-tint","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/water/water"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"117","parentId":"105","text":"水费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"water/waterInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"118","parentId":"105","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"water/waterUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"119","parentId":"105","text":"水费生成"},{"attributes":{"icon":"fa fa-cc","url":"/water/waterPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"120","parentId":"105","text":"水价管理"}],"hasChildren":true,"hasParent":false,"id":"105","parentId":"0","text":"水费管理"},{"attributes":{"icon":"fa fa-fire","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/heat/heat"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"113","parentId":"104","text":"暖费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"heat/heatInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"114","parentId":"104","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"heat/heatUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"115","parentId":"104","text":"暖费生成"},{"attributes":{"icon":"","url":"/heat/heatPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"116","parentId":"104","text":"暖价管理"}],"hasChildren":true,"hasParent":false,"id":"104","parentId":"0","text":"暖费管理"},{"attributes":{"icon":"fa fa-vcard-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-bomb","url":"/print/print"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"149","parentId":"108","text":"票据记录"}],"hasChildren":true,"hasParent":false,"id":"108","parentId":"0","text":"票据管理"},{"attributes":{"icon":"fa fa-bar-chart","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-area-chart","url":"/chart/graph_echarts.html"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","text":"百度chart"},{"attributes":{"icon":"fa fa-sun-o","url":"charts/countDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"109","parentId":"97","text":"日统计报表"},{"attributes":{"icon":"fa fa-registered","url":"charts/countMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"110","parentId":"97","text":"月统计报表"},{"attributes":{"icon":"fa fa-support","url":"charts/countYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"111","parentId":"97","text":"年统计报表"},{"attributes":{"icon":"fa fa-money","url":"charts/countOwe"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"155","parentId":"97","text":"欠费报表图"},{"attributes":{"icon":"fa fa-tachometer","url":"charts/countRun"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"112","parentId":"97","text":"走势图报表"}],"hasChildren":true,"hasParent":false,"id":"97","parentId":"0","text":"统计管理"},{"attributes":{"icon":"fa fa-bars","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-book","url":"/common/dict"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"78","parentId":"1","text":"数据字典"},{"attributes":{"icon":"fa fa-folder-open","url":"/common/sysFile"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"71","parentId":"1","text":"文件管理"}],"h(String), 127.0.0.1(String), 2019-04-03 15:12:54.356(Timestamp)
2019-04-03 15:12:54 -请求地址 : http://localhost:8081/main
2019-04-03 15:12:54 -HTTP METHOD : GET
2019-04-03 15:12:54 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 15:12:54 -参数 : []
2019-04-03 15:12:54 -耗时 : 1
2019-04-03 15:12:54 -返回值 : main
2019-04-03 15:12:54 -<==    Updates: 1
2019-04-03 15:12:54 -请求地址 : http://localhost:8081/oa/notify/message
2019-04-03 15:12:54 -HTTP METHOD : GET
2019-04-03 15:12:54 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2019-04-03 15:12:54 -参数 : []
2019-04-03 15:12:54 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2019-04-03 15:12:54 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2019-04-03 15:12:54 -<==      Total: 0
2019-04-03 15:12:54 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2019-04-03 15:12:54 -==> Parameters: 1(Long), 0(String)
2019-04-03 15:12:54 -<==      Total: 1
2019-04-03 15:12:54 -耗时 : 105
2019-04-03 15:12:54 -返回值 : com.bootdo.common.utils.PageUtils@60337a4b
2019-04-03 15:12:55 -请求地址 : http://localhost:8081/main
2019-04-03 15:12:55 -HTTP METHOD : GET
2019-04-03 15:12:55 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 15:12:55 -参数 : []
2019-04-03 15:12:55 -耗时 : 1
2019-04-03 15:12:55 -返回值 : main
2019-04-03 15:13:01 -==>  Preparing: select distinct m.perms from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id = ur.role_id where ur.user_id = ? 
2019-04-03 15:13:01 -==> Parameters: 1(Long)
2019-04-03 15:13:01 -<==      Total: 90
2019-04-03 15:13:01 -请求地址 : http://localhost:8081/water/water
2019-04-03 15:13:01 -HTTP METHOD : GET
2019-04-03 15:13:01 -CLASS_METHOD : com.bootdo.water.controller.WaterController.Water
2019-04-03 15:13:01 -参数 : []
2019-04-03 15:13:01 -耗时 : 1
2019-04-03 15:13:01 -返回值 : water/water/water
2019-04-03 15:13:01 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-03 15:13:01 -HTTP METHOD : GET
2019-04-03 15:13:01 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 15:13:01 -参数 : [userType]
2019-04-03 15:13:01 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 15:13:01 -==> Parameters: userType(String)
2019-04-03 15:13:02 -<==      Total: 2
2019-04-03 15:13:02 -耗时 : 198
2019-04-03 15:13:02 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 15:13:02 -请求地址 : http://localhost:8081/water/water/list
2019-04-03 15:13:02 -HTTP METHOD : GET
2019-04-03 15:13:02 -CLASS_METHOD : com.bootdo.water.controller.WaterController.list
2019-04-03 15:13:02 -参数 : [{limit=3, offset=0, userType=, userOrg=, userId=, createTime=, queryType=1}]
2019-04-03 15:13:02 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`water_type`,`water_price`,`water_cost`,`water_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from water order by id asc limit ?, ? 
2019-04-03 15:13:02 -==> Parameters: 0(Integer), 3(Integer)
2019-04-03 15:13:02 -<==      Total: 3
2019-04-03 15:13:02 -==>  Preparing: select count(*) from water 
2019-04-03 15:13:02 -==> Parameters: 
2019-04-03 15:13:02 -<==      Total: 1
2019-04-03 15:13:02 -耗时 : 176
2019-04-03 15:13:02 -返回值 : com.bootdo.common.utils.PageUtils@5e870b64
2019-04-03 15:13:04 -请求地址 : http://localhost:8081/moneyList/moneyList
2019-04-03 15:13:04 -HTTP METHOD : GET
2019-04-03 15:13:04 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.MoneyList
2019-04-03 15:13:04 -参数 : []
2019-04-03 15:13:04 -耗时 : 0
2019-04-03 15:13:04 -返回值 : /moneyList/moneyList
2019-04-03 15:13:14 -请求地址 : http://localhost:8081/system/sysDept/treeView
2019-04-03 15:13:14 -HTTP METHOD : GET
2019-04-03 15:13:14 -CLASS_METHOD : com.bootdo.system.controller.DeptController.treeView
2019-04-03 15:13:14 -参数 : []
2019-04-03 15:13:14 -耗时 : 1
2019-04-03 15:13:14 -返回值 : system/dept/deptTree
2019-04-03 15:13:14 -请求地址 : http://localhost:8081/system/sysDept/tree
2019-04-03 15:13:14 -HTTP METHOD : GET
2019-04-03 15:13:14 -CLASS_METHOD : com.bootdo.system.controller.DeptController.tree
2019-04-03 15:13:14 -参数 : []
2019-04-03 15:13:14 -==>  Preparing: select `dept_id`,`parent_id`,`name`,`order_num`,`del_flag` from sys_dept order by dept_id desc 
2019-04-03 15:13:14 -==> Parameters: 
2019-04-03 15:13:14 -<==      Total: 3
2019-04-03 15:13:14 -耗时 : 23
2019-04-03 15:13:14 -返回值 : {"checked":false,"children":[{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"3","parentId":"1","state":{"opened":true},"text":"牙星"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"2","parentId":"1","state":{"opened":true},"text":"五九"}],"hasChildren":true,"hasParent":false,"id":"1","parentId":"0","state":{"opened":true},"text":"总公司"}
2019-04-03 15:13:18 -WebSocketSession[1 current WS(1)-HttpStream(0)-HttpPoll(0), 1 total, 0 closed abnormally (0 connect failure, 0 send limit, 0 transport error)], stompSubProtocol[processed CONNECT(1)-CONNECTED(1)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 8, active threads = 0, queued tasks = 0, completed tasks = 9], outboundChannelpool size = 1, active threads = 0, queued tasks = 0, completed tasks = 1], sockJsScheduler[pool size = 4, active threads = 1, queued tasks = 2, completed tasks = 5]
2019-04-03 15:13:18 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUserName
2019-04-03 15:13:18 -HTTP METHOD : POST
2019-04-03 15:13:18 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.getAllUserName
2019-04-03 15:13:18 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@66f9b3a1]
2019-04-03 15:13:18 -==>  Preparing: select DISTINCT user_name from( select user_name from elec WHERE create_time = ? and user_name like CONCAT(CONCAT('%',?,'%')) UNION ALL select user_name from heat WHERE create_time = ? and user_name like CONCAT(CONCAT('%',?,'%')) UNION ALL select user_name from water WHERE create_time = ? and user_name like CONCAT(CONCAT('%',?,'%')) )username 
2019-04-03 15:13:18 -==> Parameters: 2019-02(String), 姜(String), 2019-02(String), 姜(String), 2019-02(String), 姜(String)
2019-04-03 15:13:18 -<==      Total: 1
2019-04-03 15:13:18 -耗时 : 115
2019-04-03 15:13:18 -返回值 : [com.bootdo.moneyList.damain.MoneyListDO@2a111f8]
2019-04-03 15:13:20 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUser
2019-04-03 15:13:20 -HTTP METHOD : POST
2019-04-03 15:13:20 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.queryAllUser
2019-04-03 15:13:20 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@10aff262]
2019-04-03 15:13:20 -==>  Preparing: select COUNT(*) number, user_id, user_name, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, elec_type usertype, elec_price userprice, elec_amount userarea, elec_cost usercost, elec_Sum usersum from elec WHERE create_time = ? and user_name = ? UNION ALL select COUNT(*) number, user_id, user_name, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, heat_type usertype, heat_price userprice, heat_area userarea, heat_cost usercost, heat_Sum usersum from heat WHERE create_time = ? and user_name = ? UNION ALL select COUNT(*) number, user_id, user_name, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, water_type usertype, water_price userprice, water_price userarea, water_price usercost, water_Sum usersum from water WHERE create_time = ? and user_name = ? 
2019-04-03 15:13:20 -==> Parameters: 2019-02(String), 姜海龙(String), 2019-02(String), 姜海龙(String), 2019-02(String), 姜海龙(String)
2019-04-03 15:13:20 -<==      Total: 3
2019-04-03 15:13:20 -耗时 : 31
2019-04-03 15:13:20 -返回值 : [com.bootdo.moneyList.damain.MoneyListDO@4fa0b094, com.bootdo.moneyList.damain.MoneyListDO@2a92929f, com.bootdo.moneyList.damain.MoneyListDO@6a0183ab]
2019-04-03 15:17:24 -请求地址 : http://localhost:8081/elec/elec
2019-04-03 15:17:24 -HTTP METHOD : GET
2019-04-03 15:17:24 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.Elec
2019-04-03 15:17:24 -参数 : []
2019-04-03 15:17:24 -耗时 : 1
2019-04-03 15:17:24 -返回值 : elec/elec/elec
2019-04-03 15:17:24 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-03 15:17:24 -HTTP METHOD : GET
2019-04-03 15:17:24 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 15:17:24 -参数 : [userType]
2019-04-03 15:17:24 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 15:17:24 -==> Parameters: userType(String)
2019-04-03 15:17:24 -<==      Total: 2
2019-04-03 15:17:24 -耗时 : 13
2019-04-03 15:17:24 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 15:17:25 -请求地址 : http://localhost:8081/elec/elec/list
2019-04-03 15:17:25 -HTTP METHOD : GET
2019-04-03 15:17:25 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.list
2019-04-03 15:17:25 -参数 : [{limit=10, offset=0, userType=, userOrg=, userId=, createTime=, queryType=1}, com.bootdo.elec.domain.ElecDO@47022d74]
2019-04-03 15:17:25 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec order by id asc limit ?, ? 
2019-04-03 15:17:25 -==> Parameters: 0(Integer), 10(Integer)
2019-04-03 15:17:25 -<==      Total: 10
2019-04-03 15:17:25 -==>  Preparing: select count(*) from elec 
2019-04-03 15:17:25 -==> Parameters: 
2019-04-03 15:17:25 -<==      Total: 1
2019-04-03 15:17:25 -耗时 : 56
2019-04-03 15:17:25 -返回值 : com.bootdo.common.utils.PageUtils@139ff953
2019-04-03 15:17:29 -请求地址 : http://localhost:8081/elec/elec/list
2019-04-03 15:17:29 -HTTP METHOD : GET
2019-04-03 15:17:29 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.list
2019-04-03 15:17:29 -参数 : [{limit=10, offset=0, userType=, userOrg=, userId=, createTime=, queryType=2}, com.bootdo.elec.domain.ElecDO@2c879441]
2019-04-03 15:17:29 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec WHERE `elec_sum` < 0 order by id asc limit ?, ? 
2019-04-03 15:17:29 -==> Parameters: 0(Integer), 10(Integer)
2019-04-03 15:17:29 -<==      Total: 2
2019-04-03 15:17:29 -==>  Preparing: select count(*) from elec WHERE `elec_sum` < 0 
2019-04-03 15:17:29 -==> Parameters: 
2019-04-03 15:17:29 -<==      Total: 1
2019-04-03 15:17:29 -耗时 : 14
2019-04-03 15:17:29 -返回值 : com.bootdo.common.utils.PageUtils@47fb7994
2019-04-03 15:17:29 -请求地址 : http://localhost:8081/elec/elec/list
2019-04-03 15:17:29 -HTTP METHOD : GET
2019-04-03 15:17:29 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.list
2019-04-03 15:17:29 -参数 : [{limit=10, offset=0, userType=, userOrg=, userId=, createTime=, queryType=2}, com.bootdo.elec.domain.ElecDO@3650246f]
2019-04-03 15:17:29 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec WHERE `elec_sum` < 0 order by id asc limit ?, ? 
2019-04-03 15:17:29 -==> Parameters: 0(Integer), 10(Integer)
2019-04-03 15:17:29 -<==      Total: 2
2019-04-03 15:17:29 -==>  Preparing: select count(*) from elec WHERE `elec_sum` < 0 
2019-04-03 15:17:29 -==> Parameters: 
2019-04-03 15:17:29 -<==      Total: 1
2019-04-03 15:17:29 -耗时 : 11
2019-04-03 15:17:29 -返回值 : com.bootdo.common.utils.PageUtils@3062d46a
2019-04-03 15:17:30 -请求地址 : http://localhost:8081/elec/elec/list
2019-04-03 15:17:30 -HTTP METHOD : GET
2019-04-03 15:17:30 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.list
2019-04-03 15:17:30 -参数 : [{limit=10, offset=0, userType=, userOrg=, userId=, createTime=, queryType=2}, com.bootdo.elec.domain.ElecDO@5bf2fba8]
2019-04-03 15:17:30 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec WHERE `elec_sum` < 0 order by id asc limit ?, ? 
2019-04-03 15:17:30 -==> Parameters: 0(Integer), 10(Integer)
2019-04-03 15:17:30 -<==      Total: 2
2019-04-03 15:17:30 -==>  Preparing: select count(*) from elec WHERE `elec_sum` < 0 
2019-04-03 15:17:30 -==> Parameters: 
2019-04-03 15:17:30 -<==      Total: 1
2019-04-03 15:17:30 -耗时 : 15
2019-04-03 15:17:30 -返回值 : com.bootdo.common.utils.PageUtils@7e122758
2019-04-03 15:18:08 -请求地址 : http://localhost:8081/elec/elec/list
2019-04-03 15:18:08 -HTTP METHOD : GET
2019-04-03 15:18:08 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.list
2019-04-03 15:18:08 -参数 : [{limit=10, offset=0, userType=A, userOrg=, userId=, createTime=2019-02, queryType=2, type=A}, com.bootdo.elec.domain.ElecDO@624cbf2d]
2019-04-03 15:18:08 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec WHERE `elec_sum` < 0 and user_type = ? and CREATE_TIME = ? order by id asc limit ?, ? 
2019-04-03 15:18:08 -==> Parameters: A(String), 2019-02(String), 0(Integer), 10(Integer)
2019-04-03 15:18:08 -<==      Total: 1
2019-04-03 15:18:08 -==>  Preparing: select count(*) from elec WHERE `elec_sum` < 0 and user_type = ? and CREATE_TIME = ? 
2019-04-03 15:18:08 -==> Parameters: A(String), 2019-02(String)
2019-04-03 15:18:08 -<==      Total: 1
2019-04-03 15:18:08 -耗时 : 23
2019-04-03 15:18:08 -返回值 : com.bootdo.common.utils.PageUtils@777a44c0
2019-04-03 15:18:09 -请求地址 : http://localhost:8081/system/sysDept/treeView
2019-04-03 15:18:09 -HTTP METHOD : GET
2019-04-03 15:18:09 -CLASS_METHOD : com.bootdo.system.controller.DeptController.treeView
2019-04-03 15:18:09 -参数 : []
2019-04-03 15:18:09 -耗时 : 1
2019-04-03 15:18:09 -返回值 : system/dept/deptTree
2019-04-03 15:18:09 -请求地址 : http://localhost:8081/system/sysDept/tree
2019-04-03 15:18:09 -HTTP METHOD : GET
2019-04-03 15:18:09 -CLASS_METHOD : com.bootdo.system.controller.DeptController.tree
2019-04-03 15:18:09 -参数 : []
2019-04-03 15:18:09 -==>  Preparing: select `dept_id`,`parent_id`,`name`,`order_num`,`del_flag` from sys_dept order by dept_id desc 
2019-04-03 15:18:09 -==> Parameters: 
2019-04-03 15:18:09 -<==      Total: 3
2019-04-03 15:18:09 -耗时 : 4
2019-04-03 15:18:09 -返回值 : {"checked":false,"children":[{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"3","parentId":"1","state":{"opened":true},"text":"牙星"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"2","parentId":"1","state":{"opened":true},"text":"五九"}],"hasChildren":true,"hasParent":false,"id":"1","parentId":"0","state":{"opened":true},"text":"总公司"}
2019-04-03 15:18:13 -请求地址 : http://localhost:8081/elec/elec/list
2019-04-03 15:18:13 -HTTP METHOD : GET
2019-04-03 15:18:13 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.list
2019-04-03 15:18:13 -参数 : [{limit=10, offset=0, userType=A, userOrg=2, userId=, createTime=2019-02, queryType=1}, com.bootdo.elec.domain.ElecDO@4a46c1f8]
2019-04-03 15:18:13 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec WHERE user_type = ? and user_org = ? and CREATE_TIME = ? order by id asc limit ?, ? 
2019-04-03 15:18:13 -==> Parameters: A(String), 2(String), 2019-02(String), 0(Integer), 10(Integer)
2019-04-03 15:18:13 -<==      Total: 2
2019-04-03 15:18:13 -==>  Preparing: select count(*) from elec WHERE user_type = ? and user_org = ? and CREATE_TIME = ? 
2019-04-03 15:18:13 -==> Parameters: A(String), 2(String), 2019-02(String)
2019-04-03 15:18:13 -<==      Total: 1
2019-04-03 15:18:13 -耗时 : 18
2019-04-03 15:18:13 -返回值 : com.bootdo.common.utils.PageUtils@6d721d5e
2019-04-03 15:18:21 -请求地址 : http://localhost:8081/elec/elec/exprotElec
2019-04-03 15:18:21 -HTTP METHOD : GET
2019-04-03 15:18:21 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.exprotExcel
2019-04-03 15:18:21 -参数 : [com.bootdo.elec.vo.ElecVo@57cec8b6, org.apache.shiro.web.servlet.ShiroHttpServletResponse@2f7bea92]
2019-04-03 15:18:21 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, `user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec WHERE user_type = ? and user_org = ? and CREATE_TIME = ? 
2019-04-03 15:18:21 -==> Parameters: A(String), 2(String), 2019-02(String)
2019-04-03 15:18:21 -<==      Total: 2
2019-04-03 15:18:23 -耗时 : 1141
2019-04-03 15:18:23 -返回值 : null
2019-04-03 15:43:18 -WebSocketSession[1 current WS(1)-HttpStream(0)-HttpPoll(0), 1 total, 0 closed abnormally (0 connect failure, 0 send limit, 0 transport error)], stompSubProtocol[processed CONNECT(1)-CONNECTED(1)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 9], outboundChannelpool size = 0, active threads = 0, queued tasks = 0, completed tasks = 1], sockJsScheduler[pool size = 4, active threads = 1, queued tasks = 2, completed tasks = 438]
2019-04-03 15:52:25 -请求地址 : http://localhost:8081/login;JSESSIONID=036e6b93-5155-452a-b733-615c1b16936b
2019-04-03 15:52:25 -HTTP METHOD : GET
2019-04-03 15:52:25 -CLASS_METHOD : com.bootdo.system.controller.LoginController.login
2019-04-03 15:52:25 -参数 : [{}]
2019-04-03 15:52:25 -耗时 : 1
2019-04-03 15:52:25 -返回值 : login
2019-04-03 15:52:26 -请求地址 : http://localhost:8081/getVerify
2019-04-03 15:52:26 -HTTP METHOD : GET
2019-04-03 15:52:26 -CLASS_METHOD : com.bootdo.system.controller.LoginController.getVerify
2019-04-03 15:52:26 -参数 : [org.apache.shiro.web.servlet.ShiroHttpServletRequest@61934696, org.apache.shiro.web.servlet.ShiroHttpServletResponse@699dd0c1]
2019-04-03 15:52:26 -9879
2019-04-03 15:52:26 -耗时 : 42
2019-04-03 15:52:26 -返回值 : null
2019-04-03 15:52:26 -请求地址 : http://localhost:8081/login
2019-04-03 15:52:26 -HTTP METHOD : GET
2019-04-03 15:52:26 -CLASS_METHOD : com.bootdo.system.controller.LoginController.login
2019-04-03 15:52:26 -参数 : [{}]
2019-04-03 15:52:26 -耗时 : 0
2019-04-03 15:52:26 -返回值 : login
2019-04-03 15:52:32 -请求地址 : http://localhost:8081/login
2019-04-03 15:52:32 -HTTP METHOD : POST
2019-04-03 15:52:32 -CLASS_METHOD : com.bootdo.system.controller.LoginController.ajaxLogin
2019-04-03 15:52:32 -参数 : [admin, 111111, 9879, org.apache.shiro.web.servlet.ShiroHttpServletRequest@3546a39a]
2019-04-03 15:52:35 -==>  Preparing: select `user_id`,`username`,`name`,`password`,`dept_id`,`email`,`mobile`,`status`,`user_id_create`,`gmt_create`,`gmt_modified`,`sex`,`birth`,`pic_id`,`live_address`,`hobby`,`province`,`city`,`district` from sys_user WHERE username = ? order by user_id desc 
2019-04-03 15:52:35 -==> Parameters: admin(String)
2019-04-03 15:52:36 -<==      Total: 1
2019-04-03 15:52:36 -耗时 : 3589
2019-04-03 15:52:36 -返回值 : {msg=操作成功, code=0}
2019-04-03 15:52:36 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 15:52:37 -==> Parameters: 1(Long), admin(String), 登录(String), 3590(Integer), com.bootdo.system.controller.LoginController.ajaxLogin()(String), null, 127.0.0.1(String), 2019-04-03 15:52:36.317(Timestamp)
2019-04-03 15:52:37 -请求地址 : http://localhost:8081/index
2019-04-03 15:52:37 -HTTP METHOD : GET
2019-04-03 15:52:37 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2019-04-03 15:52:37 -参数 : [{}]
2019-04-03 15:52:37 -<==    Updates: 1
2019-04-03 15:52:38 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2019-04-03 15:52:38 -==> Parameters: 1(Long)
2019-04-03 15:52:38 -<==      Total: 46
2019-04-03 15:52:39 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2019-04-03 15:52:39 -==> Parameters: 138(Long)
2019-04-03 15:52:39 -<==      Total: 1
2019-04-03 15:52:39 -耗时 : 2014
2019-04-03 15:52:39 -返回值 : index_v1
2019-04-03 15:52:39 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 15:52:39 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 2014(Integer), com.bootdo.system.controller.LoginController.index()(String), {"menus":[{"attributes":{"icon":"fa fa-money","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-money","url":"/moneyList/moneyList"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"102","parentId":"106","text":"现金缴费"},{"attributes":{"icon":"fa fa-book","url":"/moneyLog/elecLog"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"107","parentId":"106","text":"缴费记录"}],"hasChildren":true,"hasParent":false,"id":"106","parentId":"0","text":"收费管理"},{"attributes":{"icon":"fa fa-lightbulb-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/elec/elec"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"121","parentId":"103","text":"电费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"elec/elecInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"122","parentId":"103","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"elec/elecUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"123","parentId":"103","text":"电表上传"},{"attributes":{"icon":"fa fa-cc","url":"/elec/elecPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"124","parentId":"103","text":"电价管理"}],"hasChildren":true,"hasParent":false,"id":"103","parentId":"0","text":"电费管理"},{"attributes":{"icon":"fa fa-tint","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/water/water"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"117","parentId":"105","text":"水费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"water/waterInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"118","parentId":"105","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"water/waterUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"119","parentId":"105","text":"水费生成"},{"attributes":{"icon":"fa fa-cc","url":"/water/waterPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"120","parentId":"105","text":"水价管理"}],"hasChildren":true,"hasParent":false,"id":"105","parentId":"0","text":"水费管理"},{"attributes":{"icon":"fa fa-fire","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/heat/heat"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"113","parentId":"104","text":"暖费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"heat/heatInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"114","parentId":"104","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"heat/heatUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"115","parentId":"104","text":"暖费生成"},{"attributes":{"icon":"","url":"/heat/heatPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"116","parentId":"104","text":"暖价管理"}],"hasChildren":true,"hasParent":false,"id":"104","parentId":"0","text":"暖费管理"},{"attributes":{"icon":"fa fa-vcard-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-bomb","url":"/print/print"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"149","parentId":"108","text":"票据记录"}],"hasChildren":true,"hasParent":false,"id":"108","parentId":"0","text":"票据管理"},{"attributes":{"icon":"fa fa-bar-chart","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-area-chart","url":"/chart/graph_echarts.html"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","text":"百度chart"},{"attributes":{"icon":"fa fa-sun-o","url":"charts/countDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"109","parentId":"97","text":"日统计报表"},{"attributes":{"icon":"fa fa-registered","url":"charts/countMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"110","parentId":"97","text":"月统计报表"},{"attributes":{"icon":"fa fa-money","url":"charts/countOwe"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"155","parentId":"97","text":"欠费报表图"},{"attributes":{"icon":"fa fa-support","url":"charts/countYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"111","parentId":"97","text":"年统计报表"},{"attributes":{"icon":"fa fa-tachometer","url":"charts/countRun"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"112","parentId":"97","text":"走势图报表"}],"hasChildren":true,"hasParent":false,"id":"97","parentId":"0","text":"统计管理"},{"attributes":{"icon":"fa fa-bars","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-book","url":"/common/dict"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"78","parentId":"1","text":"数据字典"},{"attributes":{"icon":"fa fa-folder-open","url":"/common/sysFile"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"71","parentId":"1","text":"文件管理"}],"h(String), 127.0.0.1(String), 2019-04-03 15:52:39.559(Timestamp)
2019-04-03 15:52:40 -<==    Updates: 1
2019-04-03 15:52:40 -请求地址 : http://localhost:8081/main
2019-04-03 15:52:40 -HTTP METHOD : GET
2019-04-03 15:52:40 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 15:52:40 -参数 : []
2019-04-03 15:52:40 -耗时 : 80
2019-04-03 15:52:40 -返回值 : main
2019-04-03 15:52:41 -请求地址 : http://localhost:8081/main
2019-04-03 15:52:41 -HTTP METHOD : GET
2019-04-03 15:52:41 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 15:52:41 -参数 : []
2019-04-03 15:52:41 -耗时 : 0
2019-04-03 15:52:41 -返回值 : main
2019-04-03 15:52:41 -请求地址 : http://localhost:8081/oa/notify/message
2019-04-03 15:52:41 -HTTP METHOD : GET
2019-04-03 15:52:41 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2019-04-03 15:52:41 -参数 : []
2019-04-03 15:52:41 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2019-04-03 15:52:41 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2019-04-03 15:52:41 -<==      Total: 0
2019-04-03 15:52:42 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2019-04-03 15:52:42 -==> Parameters: 1(Long), 0(String)
2019-04-03 15:52:42 -<==      Total: 1
2019-04-03 15:52:42 -耗时 : 949
2019-04-03 15:52:42 -返回值 : com.bootdo.common.utils.PageUtils@5d749820
2019-04-03 15:53:13 -==>  Preparing: select distinct m.perms from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id = ur.role_id where ur.user_id = ? 
2019-04-03 15:53:13 -==> Parameters: 1(Long)
2019-04-03 15:53:13 -<==      Total: 90
2019-04-03 15:53:13 -请求地址 : http://localhost:8081/elec/elec
2019-04-03 15:53:13 -HTTP METHOD : GET
2019-04-03 15:53:13 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.Elec
2019-04-03 15:53:13 -参数 : []
2019-04-03 15:53:13 -耗时 : 0
2019-04-03 15:53:13 -返回值 : elec/elec/elec
2019-04-03 15:53:14 -请求地址 : http://localhost:8081/elec/elec/list
2019-04-03 15:53:14 -HTTP METHOD : GET
2019-04-03 15:53:14 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.list
2019-04-03 15:53:14 -参数 : [{limit=10, offset=0, userType=, userOrg=, userId=, createTime=, queryType=1}, com.bootdo.elec.domain.ElecDO@74c369fa]
2019-04-03 15:53:14 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-03 15:53:14 -HTTP METHOD : GET
2019-04-03 15:53:14 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 15:53:14 -参数 : [userType]
2019-04-03 15:53:14 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 15:53:14 -==> Parameters: userType(String)
2019-04-03 15:53:14 -<==      Total: 2
2019-04-03 15:53:14 -耗时 : 23
2019-04-03 15:53:14 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 15:53:14 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec order by id asc limit ?, ? 
2019-04-03 15:53:14 -==> Parameters: 0(Integer), 10(Integer)
2019-04-03 15:53:14 -<==      Total: 10
2019-04-03 15:53:14 -==>  Preparing: select count(*) from elec 
2019-04-03 15:53:14 -==> Parameters: 
2019-04-03 15:53:14 -<==      Total: 1
2019-04-03 15:53:14 -耗时 : 47
2019-04-03 15:53:14 -返回值 : com.bootdo.common.utils.PageUtils@33b6b17f
2019-04-03 15:53:36 -请求地址 : http://localhost:8081/elec/elec/edit/1
2019-04-03 15:53:36 -HTTP METHOD : GET
2019-04-03 15:53:36 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.edit
2019-04-03 15:53:36 -参数 : [1, {}]
2019-04-03 15:53:36 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, `user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec where id = ? 
2019-04-03 15:53:36 -==> Parameters: 1(Long)
2019-04-03 15:53:36 -<==      Total: 1
2019-04-03 15:53:36 -耗时 : 68
2019-04-03 15:53:36 -返回值 : elec/elec/edit
2019-04-03 15:53:37 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-03 15:53:37 -HTTP METHOD : GET
2019-04-03 15:53:37 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 15:53:37 -参数 : [userType]
2019-04-03 15:53:37 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 15:53:37 -==> Parameters: userType(String)
2019-04-03 15:53:37 -请求地址 : http://localhost:8081/common/dict/list/userState
2019-04-03 15:53:37 -HTTP METHOD : GET
2019-04-03 15:53:37 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 15:53:37 -参数 : [userState]
2019-04-03 15:53:37 -<==      Total: 2
2019-04-03 15:53:37 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 15:53:37 -耗时 : 6
2019-04-03 15:53:37 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 15:53:37 -==> Parameters: userState(String)
2019-04-03 15:53:37 -请求地址 : http://localhost:8081/common/dict/list/elecType
2019-04-03 15:53:37 -HTTP METHOD : GET
2019-04-03 15:53:37 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 15:53:37 -参数 : [elecType]
2019-04-03 15:53:37 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 15:53:37 -==> Parameters: elecType(String)
2019-04-03 15:53:37 -<==      Total: 2
2019-04-03 15:53:37 -耗时 : 4
2019-04-03 15:53:37 -返回值 : [DictDO{id=139, name='民用电', value='1', type='elecType', description='电量性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=138, name='商业电', value='0', type='elecType', description='电量类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 15:53:37 -<==      Total: 2
2019-04-03 15:53:37 -耗时 : 168
2019-04-03 15:53:37 -返回值 : [DictDO{id=126, name='使用中', value='1', type='userState', description='用户状态', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=125, name='未使用', value='0', type='userState', description='用户状态', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 15:53:40 -请求地址 : http://localhost:8081/elec/elec/update
2019-04-03 15:53:40 -HTTP METHOD : POST
2019-04-03 15:53:40 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.update
2019-04-03 15:53:40 -参数 : [com.bootdo.elec.domain.ElecDO@159798cc]
2019-04-03 15:53:40 -==>  Preparing: update elec SET `user_id` = ?, `user_name` = ?, `user_type` = ?, `user_org` = ?, `user_tell` = ?, `user_state` = ?, `wages_id` = ?, `elec_type` = ?, `start` = ?, `end` = ?, `hu` = ?, `elec_amount` = ?, `elec_cost` = ?, `elec_sum` = ?, `create_time` = ?, `create_by` = ?, `update_time` = ?, `update_by` = ?, `remark` = ? where id = ? 
2019-04-03 15:53:40 -==> Parameters: 1-0001(String), 李文英(String), B(String), 3(String), 15815564567(String), 1(String), 1001(String), 1(String), 100(String), 250(String), 1(Integer), 100.00(BigDecimal), 100.00(BigDecimal), -100.00(BigDecimal), 2019-02(String), 1(Long), 2019-04-03 15:53:40.265(Timestamp), 1(Long), (String), 1(Long)
2019-04-03 15:53:40 -<==    Updates: 1
2019-04-03 15:53:40 -耗时 : 338
2019-04-03 15:53:40 -返回值 : {msg=操作成功, code=0}
2019-04-03 15:53:40 -请求地址 : http://localhost:8081/elec/elec/list
2019-04-03 15:53:40 -HTTP METHOD : GET
2019-04-03 15:53:40 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.list
2019-04-03 15:53:40 -参数 : [{limit=10, offset=0, userType=, userOrg=, userId=, createTime=, queryType=2}, com.bootdo.elec.domain.ElecDO@3202452c]
2019-04-03 15:53:40 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec WHERE `elec_sum` < 0 order by id asc limit ?, ? 
2019-04-03 15:53:40 -==> Parameters: 0(Integer), 10(Integer)
2019-04-03 15:53:40 -<==      Total: 2
2019-04-03 15:53:40 -==>  Preparing: select count(*) from elec WHERE `elec_sum` < 0 
2019-04-03 15:53:40 -==> Parameters: 
2019-04-03 15:53:40 -<==      Total: 1
2019-04-03 15:53:40 -耗时 : 12
2019-04-03 15:53:40 -返回值 : com.bootdo.common.utils.PageUtils@3206261
2019-04-03 15:53:44 -请求地址 : http://localhost:8081/elec/elec/add
2019-04-03 15:53:44 -HTTP METHOD : GET
2019-04-03 15:53:44 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.add
2019-04-03 15:53:44 -参数 : []
2019-04-03 15:53:44 -耗时 : 1
2019-04-03 15:53:44 -返回值 : elec/elec/add
2019-04-03 15:53:44 -请求地址 : http://localhost:8081/common/dict/list/userState
2019-04-03 15:53:44 -请求地址 : http://localhost:8081/common/dict/list/elecType
2019-04-03 15:53:44 -HTTP METHOD : GET
2019-04-03 15:53:44 -HTTP METHOD : GET
2019-04-03 15:53:44 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 15:53:44 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 15:53:44 -参数 : [elecType]
2019-04-03 15:53:44 -参数 : [userState]
2019-04-03 15:53:44 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 15:53:44 -==> Parameters: elecType(String)
2019-04-03 15:53:44 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 15:53:44 -==> Parameters: userState(String)
2019-04-03 15:53:44 -<==      Total: 2
2019-04-03 15:53:44 -耗时 : 5
2019-04-03 15:53:44 -返回值 : [DictDO{id=139, name='民用电', value='1', type='elecType', description='电量性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=138, name='商业电', value='0', type='elecType', description='电量类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 15:53:44 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-03 15:53:44 -HTTP METHOD : GET
2019-04-03 15:53:44 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 15:53:44 -参数 : [userType]
2019-04-03 15:53:44 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 15:53:44 -==> Parameters: userType(String)
2019-04-03 15:53:44 -<==      Total: 2
2019-04-03 15:53:44 -<==      Total: 2
2019-04-03 15:53:44 -耗时 : 35
2019-04-03 15:53:44 -返回值 : [DictDO{id=126, name='使用中', value='1', type='userState', description='用户状态', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=125, name='未使用', value='0', type='userState', description='用户状态', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 15:53:44 -耗时 : 25
2019-04-03 15:53:44 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 16:00:41 -请求地址 : http://localhost:8081/index
2019-04-03 16:00:41 -HTTP METHOD : GET
2019-04-03 16:00:41 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2019-04-03 16:00:41 -参数 : [{}]
2019-04-03 16:00:41 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2019-04-03 16:00:41 -==> Parameters: 1(Long)
2019-04-03 16:00:41 -<==      Total: 46
2019-04-03 16:00:41 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2019-04-03 16:00:41 -==> Parameters: 138(Long)
2019-04-03 16:00:41 -<==      Total: 1
2019-04-03 16:00:41 -耗时 : 112
2019-04-03 16:00:41 -返回值 : index_v1
2019-04-03 16:00:41 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 16:00:41 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 113(Integer), com.bootdo.system.controller.LoginController.index()(String), {"menus":[{"attributes":{"icon":"fa fa-money","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-money","url":"/moneyList/moneyList"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"102","parentId":"106","text":"现金缴费"},{"attributes":{"icon":"fa fa-book","url":"/moneyLog/elecLog"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"107","parentId":"106","text":"缴费记录"}],"hasChildren":true,"hasParent":false,"id":"106","parentId":"0","text":"收费管理"},{"attributes":{"icon":"fa fa-lightbulb-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/elec/elec"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"121","parentId":"103","text":"电费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"elec/elecInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"122","parentId":"103","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"elec/elecUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"123","parentId":"103","text":"电表上传"},{"attributes":{"icon":"fa fa-cc","url":"/elec/elecPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"124","parentId":"103","text":"电价管理"}],"hasChildren":true,"hasParent":false,"id":"103","parentId":"0","text":"电费管理"},{"attributes":{"icon":"fa fa-tint","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/water/water"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"117","parentId":"105","text":"水费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"water/waterInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"118","parentId":"105","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"water/waterUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"119","parentId":"105","text":"水费生成"},{"attributes":{"icon":"fa fa-cc","url":"/water/waterPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"120","parentId":"105","text":"水价管理"}],"hasChildren":true,"hasParent":false,"id":"105","parentId":"0","text":"水费管理"},{"attributes":{"icon":"fa fa-fire","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/heat/heat"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"113","parentId":"104","text":"暖费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"heat/heatInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"114","parentId":"104","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"heat/heatUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"115","parentId":"104","text":"暖费生成"},{"attributes":{"icon":"","url":"/heat/heatPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"116","parentId":"104","text":"暖价管理"}],"hasChildren":true,"hasParent":false,"id":"104","parentId":"0","text":"暖费管理"},{"attributes":{"icon":"fa fa-vcard-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-bomb","url":"/print/print"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"149","parentId":"108","text":"票据记录"}],"hasChildren":true,"hasParent":false,"id":"108","parentId":"0","text":"票据管理"},{"attributes":{"icon":"fa fa-bar-chart","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-area-chart","url":"/chart/graph_echarts.html"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","text":"百度chart"},{"attributes":{"icon":"fa fa-sun-o","url":"charts/countDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"109","parentId":"97","text":"日统计报表"},{"attributes":{"icon":"fa fa-registered","url":"charts/countMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"110","parentId":"97","text":"月统计报表"},{"attributes":{"icon":"fa fa-money","url":"charts/countOwe"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"155","parentId":"97","text":"欠费报表图"},{"attributes":{"icon":"fa fa-support","url":"charts/countYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"111","parentId":"97","text":"年统计报表"},{"attributes":{"icon":"fa fa-tachometer","url":"charts/countRun"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"112","parentId":"97","text":"走势图报表"}],"hasChildren":true,"hasParent":false,"id":"97","parentId":"0","text":"统计管理"},{"attributes":{"icon":"fa fa-bars","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-book","url":"/common/dict"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"78","parentId":"1","text":"数据字典"},{"attributes":{"icon":"fa fa-folder-open","url":"/common/sysFile"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"71","parentId":"1","text":"文件管理"}],"h(String), 127.0.0.1(String), 2019-04-03 16:00:41.605(Timestamp)
2019-04-03 16:00:41 -请求地址 : http://localhost:8081/main
2019-04-03 16:00:41 -HTTP METHOD : GET
2019-04-03 16:00:41 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 16:00:41 -参数 : []
2019-04-03 16:00:41 -耗时 : 0
2019-04-03 16:00:41 -返回值 : main
2019-04-03 16:00:41 -<==    Updates: 1
2019-04-03 16:00:41 -请求地址 : http://localhost:8081/oa/notify/message
2019-04-03 16:00:41 -HTTP METHOD : GET
2019-04-03 16:00:41 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2019-04-03 16:00:41 -参数 : []
2019-04-03 16:00:41 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2019-04-03 16:00:41 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2019-04-03 16:00:42 -请求地址 : http://localhost:8081/main
2019-04-03 16:00:42 -HTTP METHOD : GET
2019-04-03 16:00:42 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 16:00:42 -参数 : []
2019-04-03 16:00:42 -耗时 : 1
2019-04-03 16:00:42 -返回值 : main
2019-04-03 16:00:42 -<==      Total: 0
2019-04-03 16:00:42 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2019-04-03 16:00:42 -==> Parameters: 1(Long), 0(String)
2019-04-03 16:00:42 -<==      Total: 1
2019-04-03 16:00:42 -耗时 : 147
2019-04-03 16:00:42 -返回值 : com.bootdo.common.utils.PageUtils@4c2e407f
2019-04-03 16:00:45 -请求地址 : http://localhost:8081/moneyList/moneyList
2019-04-03 16:00:45 -HTTP METHOD : GET
2019-04-03 16:00:45 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.MoneyList
2019-04-03 16:00:45 -参数 : []
2019-04-03 16:00:45 -耗时 : 0
2019-04-03 16:00:45 -返回值 : /moneyList/moneyList
2019-04-03 16:00:57 -请求地址 : http://localhost:8081/index
2019-04-03 16:00:57 -HTTP METHOD : GET
2019-04-03 16:00:57 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2019-04-03 16:00:57 -参数 : [{}]
2019-04-03 16:00:57 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2019-04-03 16:00:57 -==> Parameters: 1(Long)
2019-04-03 16:00:57 -<==      Total: 46
2019-04-03 16:00:57 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2019-04-03 16:00:57 -==> Parameters: 138(Long)
2019-04-03 16:00:57 -<==      Total: 1
2019-04-03 16:00:57 -耗时 : 26
2019-04-03 16:00:57 -返回值 : index_v1
2019-04-03 16:00:57 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 16:00:57 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 26(Integer), com.bootdo.system.controller.LoginController.index()(String), {"menus":[{"attributes":{"icon":"fa fa-money","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-money","url":"/moneyList/moneyList"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"102","parentId":"106","text":"现金缴费"},{"attributes":{"icon":"fa fa-book","url":"/moneyLog/elecLog"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"107","parentId":"106","text":"缴费记录"}],"hasChildren":true,"hasParent":false,"id":"106","parentId":"0","text":"收费管理"},{"attributes":{"icon":"fa fa-lightbulb-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/elec/elec"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"121","parentId":"103","text":"电费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"elec/elecInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"122","parentId":"103","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"elec/elecUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"123","parentId":"103","text":"电表上传"},{"attributes":{"icon":"fa fa-cc","url":"/elec/elecPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"124","parentId":"103","text":"电价管理"}],"hasChildren":true,"hasParent":false,"id":"103","parentId":"0","text":"电费管理"},{"attributes":{"icon":"fa fa-tint","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/water/water"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"117","parentId":"105","text":"水费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"water/waterInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"118","parentId":"105","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"water/waterUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"119","parentId":"105","text":"水费生成"},{"attributes":{"icon":"fa fa-cc","url":"/water/waterPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"120","parentId":"105","text":"水价管理"}],"hasChildren":true,"hasParent":false,"id":"105","parentId":"0","text":"水费管理"},{"attributes":{"icon":"fa fa-fire","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/heat/heat"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"113","parentId":"104","text":"暖费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"heat/heatInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"114","parentId":"104","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"heat/heatUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"115","parentId":"104","text":"暖费生成"},{"attributes":{"icon":"","url":"/heat/heatPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"116","parentId":"104","text":"暖价管理"}],"hasChildren":true,"hasParent":false,"id":"104","parentId":"0","text":"暖费管理"},{"attributes":{"icon":"fa fa-vcard-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-bomb","url":"/print/print"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"149","parentId":"108","text":"票据记录"}],"hasChildren":true,"hasParent":false,"id":"108","parentId":"0","text":"票据管理"},{"attributes":{"icon":"fa fa-bar-chart","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-area-chart","url":"/chart/graph_echarts.html"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","text":"百度chart"},{"attributes":{"icon":"fa fa-sun-o","url":"charts/countDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"109","parentId":"97","text":"日统计报表"},{"attributes":{"icon":"fa fa-registered","url":"charts/countMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"110","parentId":"97","text":"月统计报表"},{"attributes":{"icon":"fa fa-money","url":"charts/countOwe"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"155","parentId":"97","text":"欠费报表图"},{"attributes":{"icon":"fa fa-support","url":"charts/countYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"111","parentId":"97","text":"年统计报表"},{"attributes":{"icon":"fa fa-tachometer","url":"charts/countRun"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"112","parentId":"97","text":"走势图报表"}],"hasChildren":true,"hasParent":false,"id":"97","parentId":"0","text":"统计管理"},{"attributes":{"icon":"fa fa-bars","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-book","url":"/common/dict"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"78","parentId":"1","text":"数据字典"},{"attributes":{"icon":"fa fa-folder-open","url":"/common/sysFile"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"71","parentId":"1","text":"文件管理"}],"h(String), 127.0.0.1(String), 2019-04-03 16:00:57.198(Timestamp)
2019-04-03 16:00:57 -<==    Updates: 1
2019-04-03 16:00:57 -请求地址 : http://localhost:8081/main
2019-04-03 16:00:57 -HTTP METHOD : GET
2019-04-03 16:00:57 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 16:00:57 -参数 : []
2019-04-03 16:00:57 -耗时 : 0
2019-04-03 16:00:57 -返回值 : main
2019-04-03 16:00:57 -请求地址 : http://localhost:8081/oa/notify/message
2019-04-03 16:00:57 -HTTP METHOD : GET
2019-04-03 16:00:57 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2019-04-03 16:00:57 -参数 : []
2019-04-03 16:00:57 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2019-04-03 16:00:57 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2019-04-03 16:00:57 -<==      Total: 0
2019-04-03 16:00:57 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2019-04-03 16:00:57 -==> Parameters: 1(Long), 0(String)
2019-04-03 16:00:57 -<==      Total: 1
2019-04-03 16:00:57 -耗时 : 7
2019-04-03 16:00:57 -返回值 : com.bootdo.common.utils.PageUtils@2fda681b
2019-04-03 16:00:57 -请求地址 : http://localhost:8081/main
2019-04-03 16:00:57 -HTTP METHOD : GET
2019-04-03 16:00:57 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 16:00:57 -参数 : []
2019-04-03 16:00:57 -耗时 : 1
2019-04-03 16:00:57 -返回值 : main
2019-04-03 16:00:59 -请求地址 : http://localhost:8081/moneyList/moneyList
2019-04-03 16:00:59 -HTTP METHOD : GET
2019-04-03 16:00:59 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.MoneyList
2019-04-03 16:00:59 -参数 : []
2019-04-03 16:00:59 -耗时 : 0
2019-04-03 16:00:59 -返回值 : /moneyList/moneyList
2019-04-03 16:01:10 -请求地址 : http://localhost:8081/elec/elec
2019-04-03 16:01:10 -HTTP METHOD : GET
2019-04-03 16:01:10 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.Elec
2019-04-03 16:01:10 -参数 : []
2019-04-03 16:01:10 -耗时 : 1
2019-04-03 16:01:10 -返回值 : elec/elec/elec
2019-04-03 16:01:10 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-03 16:01:10 -HTTP METHOD : GET
2019-04-03 16:01:10 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 16:01:10 -参数 : [userType]
2019-04-03 16:01:10 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 16:01:10 -==> Parameters: userType(String)
2019-04-03 16:01:10 -<==      Total: 2
2019-04-03 16:01:10 -耗时 : 5
2019-04-03 16:01:10 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 16:01:11 -请求地址 : http://localhost:8081/elec/elec/list
2019-04-03 16:01:11 -HTTP METHOD : GET
2019-04-03 16:01:11 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.list
2019-04-03 16:01:11 -参数 : [{limit=10, offset=0, userType=, userOrg=, userId=, createTime=, queryType=1}, com.bootdo.elec.domain.ElecDO@4880c5da]
2019-04-03 16:01:11 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec order by id asc limit ?, ? 
2019-04-03 16:01:11 -==> Parameters: 0(Integer), 10(Integer)
2019-04-03 16:01:11 -<==      Total: 10
2019-04-03 16:01:11 -==>  Preparing: select count(*) from elec 
2019-04-03 16:01:11 -==> Parameters: 
2019-04-03 16:01:11 -<==      Total: 1
2019-04-03 16:01:11 -耗时 : 21
2019-04-03 16:01:11 -返回值 : com.bootdo.common.utils.PageUtils@a02f8fa
2019-04-03 16:01:15 -请求地址 : http://localhost:8081/elec/elec/add
2019-04-03 16:01:15 -HTTP METHOD : GET
2019-04-03 16:01:15 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.add
2019-04-03 16:01:15 -参数 : []
2019-04-03 16:01:15 -耗时 : 1
2019-04-03 16:01:15 -返回值 : elec/elec/add
2019-04-03 16:01:16 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-03 16:01:16 -HTTP METHOD : GET
2019-04-03 16:01:16 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 16:01:16 -参数 : [userType]
2019-04-03 16:01:16 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 16:01:16 -==> Parameters: userType(String)
2019-04-03 16:01:16 -<==      Total: 2
2019-04-03 16:01:16 -耗时 : 8
2019-04-03 16:01:16 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 16:01:16 -请求地址 : http://localhost:8081/common/dict/list/userState
2019-04-03 16:01:16 -请求地址 : http://localhost:8081/common/dict/list/elecType
2019-04-03 16:01:16 -HTTP METHOD : GET
2019-04-03 16:01:16 -HTTP METHOD : GET
2019-04-03 16:01:16 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 16:01:16 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 16:01:16 -参数 : [userState]
2019-04-03 16:01:16 -参数 : [elecType]
2019-04-03 16:01:16 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 16:01:16 -==> Parameters: elecType(String)
2019-04-03 16:01:16 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 16:01:16 -==> Parameters: userState(String)
2019-04-03 16:01:16 -<==      Total: 2
2019-04-03 16:01:16 -耗时 : 6
2019-04-03 16:01:16 -返回值 : [DictDO{id=139, name='民用电', value='1', type='elecType', description='电量性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=138, name='商业电', value='0', type='elecType', description='电量类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 16:01:16 -<==      Total: 2
2019-04-03 16:01:16 -耗时 : 10
2019-04-03 16:01:16 -返回值 : [DictDO{id=126, name='使用中', value='1', type='userState', description='用户状态', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=125, name='未使用', value='0', type='userState', description='用户状态', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 16:12:38 -Validating all active sessions...
2019-04-03 16:12:38 -Finished session validation.  No sessions were stopped.
2019-04-03 16:13:18 -WebSocketSession[1 current WS(1)-HttpStream(0)-HttpPoll(0), 4 total, 0 closed abnormally (0 connect failure, 0 send limit, 0 transport error)], stompSubProtocol[processed CONNECT(4)-CONNECTED(4)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 45], outboundChannelpool size = 0, active threads = 0, queued tasks = 0, completed tasks = 7], sockJsScheduler[pool size = 4, active threads = 1, queued tasks = 2, completed tasks = 869]
2019-04-03 16:32:57 -请求地址 : http://localhost:8081/login;JSESSIONID=3d3cd62b-c2c6-4b97-8c36-46924255a970
2019-04-03 16:32:57 -HTTP METHOD : GET
2019-04-03 16:32:57 -CLASS_METHOD : com.bootdo.system.controller.LoginController.login
2019-04-03 16:32:57 -参数 : [{}]
2019-04-03 16:32:57 -耗时 : 1
2019-04-03 16:32:57 -返回值 : login
2019-04-03 16:32:58 -请求地址 : http://localhost:8081/getVerify
2019-04-03 16:32:58 -HTTP METHOD : GET
2019-04-03 16:32:58 -CLASS_METHOD : com.bootdo.system.controller.LoginController.getVerify
2019-04-03 16:32:58 -参数 : [org.apache.shiro.web.servlet.ShiroHttpServletRequest@4170dea8, org.apache.shiro.web.servlet.ShiroHttpServletResponse@7fe34341]
2019-04-03 16:32:58 -5966
2019-04-03 16:32:58 -耗时 : 61
2019-04-03 16:32:58 -返回值 : null
2019-04-03 16:32:58 -请求地址 : http://localhost:8081/login
2019-04-03 16:32:58 -HTTP METHOD : GET
2019-04-03 16:32:58 -CLASS_METHOD : com.bootdo.system.controller.LoginController.login
2019-04-03 16:32:58 -参数 : [{}]
2019-04-03 16:32:58 -耗时 : 0
2019-04-03 16:32:58 -返回值 : login
2019-04-03 16:33:03 -请求地址 : http://localhost:8081/login
2019-04-03 16:33:03 -HTTP METHOD : POST
2019-04-03 16:33:03 -CLASS_METHOD : com.bootdo.system.controller.LoginController.ajaxLogin
2019-04-03 16:33:03 -参数 : [admin, 111111, 5966, org.apache.shiro.web.servlet.ShiroHttpServletRequest@6bb5e93]
2019-04-03 16:33:03 -==>  Preparing: select `user_id`,`username`,`name`,`password`,`dept_id`,`email`,`mobile`,`status`,`user_id_create`,`gmt_create`,`gmt_modified`,`sex`,`birth`,`pic_id`,`live_address`,`hobby`,`province`,`city`,`district` from sys_user WHERE username = ? order by user_id desc 
2019-04-03 16:33:03 -==> Parameters: admin(String)
2019-04-03 16:33:03 -<==      Total: 1
2019-04-03 16:33:03 -耗时 : 134
2019-04-03 16:33:03 -返回值 : {msg=操作成功, code=0}
2019-04-03 16:33:03 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 16:33:03 -==> Parameters: 1(Long), admin(String), 登录(String), 134(Integer), com.bootdo.system.controller.LoginController.ajaxLogin()(String), null, 127.0.0.1(String), 2019-04-03 16:33:03.813(Timestamp)
2019-04-03 16:33:03 -请求地址 : http://localhost:8081/index
2019-04-03 16:33:03 -HTTP METHOD : GET
2019-04-03 16:33:03 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2019-04-03 16:33:03 -参数 : [{}]
2019-04-03 16:33:03 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2019-04-03 16:33:03 -==> Parameters: 1(Long)
2019-04-03 16:33:04 -<==    Updates: 1
2019-04-03 16:33:04 -<==      Total: 46
2019-04-03 16:33:04 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2019-04-03 16:33:04 -==> Parameters: 138(Long)
2019-04-03 16:33:04 -<==      Total: 1
2019-04-03 16:33:04 -耗时 : 419
2019-04-03 16:33:04 -返回值 : index_v1
2019-04-03 16:33:04 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 16:33:04 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 419(Integer), com.bootdo.system.controller.LoginController.index()(String), {"menus":[{"attributes":{"icon":"fa fa-money","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-money","url":"/moneyList/moneyList"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"102","parentId":"106","text":"现金缴费"},{"attributes":{"icon":"fa fa-book","url":"/moneyLog/elecLog"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"107","parentId":"106","text":"缴费记录"}],"hasChildren":true,"hasParent":false,"id":"106","parentId":"0","text":"收费管理"},{"attributes":{"icon":"fa fa-lightbulb-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/elec/elec"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"121","parentId":"103","text":"电费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"elec/elecInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"122","parentId":"103","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"elec/elecUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"123","parentId":"103","text":"电表上传"},{"attributes":{"icon":"fa fa-cc","url":"/elec/elecPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"124","parentId":"103","text":"电价管理"}],"hasChildren":true,"hasParent":false,"id":"103","parentId":"0","text":"电费管理"},{"attributes":{"icon":"fa fa-tint","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/water/water"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"117","parentId":"105","text":"水费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"water/waterInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"118","parentId":"105","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"water/waterUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"119","parentId":"105","text":"水费生成"},{"attributes":{"icon":"fa fa-cc","url":"/water/waterPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"120","parentId":"105","text":"水价管理"}],"hasChildren":true,"hasParent":false,"id":"105","parentId":"0","text":"水费管理"},{"attributes":{"icon":"fa fa-fire","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/heat/heat"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"113","parentId":"104","text":"暖费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"heat/heatInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"114","parentId":"104","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"heat/heatUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"115","parentId":"104","text":"暖费生成"},{"attributes":{"icon":"","url":"/heat/heatPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"116","parentId":"104","text":"暖价管理"}],"hasChildren":true,"hasParent":false,"id":"104","parentId":"0","text":"暖费管理"},{"attributes":{"icon":"fa fa-vcard-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-bomb","url":"/print/print"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"149","parentId":"108","text":"票据记录"}],"hasChildren":true,"hasParent":false,"id":"108","parentId":"0","text":"票据管理"},{"attributes":{"icon":"fa fa-bar-chart","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-area-chart","url":"/chart/graph_echarts.html"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","text":"百度chart"},{"attributes":{"icon":"fa fa-sun-o","url":"charts/countDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"109","parentId":"97","text":"日统计报表"},{"attributes":{"icon":"fa fa-registered","url":"charts/countMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"110","parentId":"97","text":"月统计报表"},{"attributes":{"icon":"fa fa-support","url":"charts/countYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"111","parentId":"97","text":"年统计报表"},{"attributes":{"icon":"fa fa-money","url":"charts/countOwe"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"155","parentId":"97","text":"欠费报表图"},{"attributes":{"icon":"fa fa-tachometer","url":"charts/countRun"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"112","parentId":"97","text":"走势图报表"}],"hasChildren":true,"hasParent":false,"id":"97","parentId":"0","text":"统计管理"},{"attributes":{"icon":"fa fa-bars","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-book","url":"/common/dict"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"78","parentId":"1","text":"数据字典"},{"attributes":{"icon":"fa fa-folder-open","url":"/common/sysFile"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"71","parentId":"1","text":"文件管理"}],"h(String), 127.0.0.1(String), 2019-04-03 16:33:04.283(Timestamp)
2019-04-03 16:33:04 -<==    Updates: 1
2019-04-03 16:33:04 -请求地址 : http://localhost:8081/main
2019-04-03 16:33:04 -HTTP METHOD : GET
2019-04-03 16:33:04 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 16:33:04 -参数 : []
2019-04-03 16:33:04 -耗时 : 0
2019-04-03 16:33:04 -返回值 : main
2019-04-03 16:33:06 -请求地址 : http://localhost:8081/oa/notify/message
2019-04-03 16:33:06 -HTTP METHOD : GET
2019-04-03 16:33:06 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2019-04-03 16:33:06 -参数 : []
2019-04-03 16:33:06 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2019-04-03 16:33:06 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2019-04-03 16:33:06 -请求地址 : http://localhost:8081/main
2019-04-03 16:33:06 -HTTP METHOD : GET
2019-04-03 16:33:06 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 16:33:06 -参数 : []
2019-04-03 16:33:06 -耗时 : 1
2019-04-03 16:33:06 -返回值 : main
2019-04-03 16:33:06 -<==      Total: 0
2019-04-03 16:33:06 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2019-04-03 16:33:06 -==> Parameters: 1(Long), 0(String)
2019-04-03 16:33:06 -<==      Total: 1
2019-04-03 16:33:06 -耗时 : 401
2019-04-03 16:33:06 -返回值 : com.bootdo.common.utils.PageUtils@563cafa2
2019-04-03 16:33:12 -==>  Preparing: select distinct m.perms from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id = ur.role_id where ur.user_id = ? 
2019-04-03 16:33:12 -==> Parameters: 1(Long)
2019-04-03 16:33:12 -<==      Total: 90
2019-04-03 16:33:12 -请求地址 : http://localhost:8081/elec/elec
2019-04-03 16:33:12 -HTTP METHOD : GET
2019-04-03 16:33:12 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.Elec
2019-04-03 16:33:12 -参数 : []
2019-04-03 16:33:12 -耗时 : 1
2019-04-03 16:33:12 -返回值 : elec/elec/elec
2019-04-03 16:33:13 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-03 16:33:13 -HTTP METHOD : GET
2019-04-03 16:33:13 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 16:33:13 -参数 : [userType]
2019-04-03 16:33:13 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 16:33:13 -==> Parameters: userType(String)
2019-04-03 16:33:13 -<==      Total: 2
2019-04-03 16:33:13 -耗时 : 5
2019-04-03 16:33:13 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 16:33:13 -请求地址 : http://localhost:8081/elec/elec/list
2019-04-03 16:33:13 -HTTP METHOD : GET
2019-04-03 16:33:13 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.list
2019-04-03 16:33:13 -参数 : [{limit=10, offset=0, userType=, userOrg=, userId=, createTime=, queryType=1}, com.bootdo.elec.domain.ElecDO@728faf9c]
2019-04-03 16:33:13 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec order by id asc limit ?, ? 
2019-04-03 16:33:13 -==> Parameters: 0(Integer), 10(Integer)
2019-04-03 16:33:13 -<==      Total: 10
2019-04-03 16:33:13 -==>  Preparing: select count(*) from elec 
2019-04-03 16:33:13 -==> Parameters: 
2019-04-03 16:33:13 -<==      Total: 1
2019-04-03 16:33:13 -耗时 : 31
2019-04-03 16:33:13 -返回值 : com.bootdo.common.utils.PageUtils@6292b67e
2019-04-03 16:33:17 -请求地址 : http://localhost:8081/elec/elec/add
2019-04-03 16:33:17 -HTTP METHOD : GET
2019-04-03 16:33:17 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.add
2019-04-03 16:33:17 -参数 : []
2019-04-03 16:33:17 -耗时 : 1
2019-04-03 16:33:17 -返回值 : elec/elec/add
2019-04-03 16:33:17 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-03 16:33:17 -HTTP METHOD : GET
2019-04-03 16:33:17 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 16:33:17 -参数 : [userType]
2019-04-03 16:33:17 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 16:33:17 -==> Parameters: userType(String)
2019-04-03 16:33:18 -请求地址 : http://localhost:8081/common/dict/list/userState
2019-04-03 16:33:18 -HTTP METHOD : GET
2019-04-03 16:33:18 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 16:33:18 -参数 : [userState]
2019-04-03 16:33:18 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 16:33:18 -==> Parameters: userState(String)
2019-04-03 16:33:18 -<==      Total: 2
2019-04-03 16:33:18 -耗时 : 44
2019-04-03 16:33:18 -返回值 : [DictDO{id=126, name='使用中', value='1', type='userState', description='用户状态', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=125, name='未使用', value='0', type='userState', description='用户状态', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 16:33:18 -<==      Total: 2
2019-04-03 16:33:18 -耗时 : 76
2019-04-03 16:33:18 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 16:33:18 -请求地址 : http://localhost:8081/common/dict/list/elecType
2019-04-03 16:33:18 -HTTP METHOD : GET
2019-04-03 16:33:18 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 16:33:18 -参数 : [elecType]
2019-04-03 16:33:18 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 16:33:18 -==> Parameters: elecType(String)
2019-04-03 16:33:18 -<==      Total: 2
2019-04-03 16:33:18 -耗时 : 6
2019-04-03 16:33:18 -返回值 : [DictDO{id=139, name='民用电', value='1', type='elecType', description='电量性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=138, name='商业电', value='0', type='elecType', description='电量类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 16:43:18 -WebSocketSession[1 current WS(1)-HttpStream(0)-HttpPoll(0), 5 total, 0 closed abnormally (0 connect failure, 0 send limit, 0 transport error)], stompSubProtocol[processed CONNECT(5)-CONNECTED(5)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 57], outboundChannelpool size = 0, active threads = 0, queued tasks = 0, completed tasks = 9], sockJsScheduler[pool size = 4, active threads = 1, queued tasks = 2, completed tasks = 1301]
2019-04-03 16:55:13 -请求地址 : http://localhost:8081/index
2019-04-03 16:55:13 -HTTP METHOD : GET
2019-04-03 16:55:13 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2019-04-03 16:55:13 -参数 : [{}]
2019-04-03 16:55:13 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2019-04-03 16:55:13 -==> Parameters: 1(Long)
2019-04-03 16:55:13 -<==      Total: 46
2019-04-03 16:55:13 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2019-04-03 16:55:13 -==> Parameters: 138(Long)
2019-04-03 16:55:13 -<==      Total: 1
2019-04-03 16:55:13 -耗时 : 131
2019-04-03 16:55:13 -返回值 : index_v1
2019-04-03 16:55:13 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 16:55:13 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 132(Integer), com.bootdo.system.controller.LoginController.index()(String), {"menus":[{"attributes":{"icon":"fa fa-money","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-money","url":"/moneyList/moneyList"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"102","parentId":"106","text":"现金缴费"},{"attributes":{"icon":"fa fa-book","url":"/moneyLog/elecLog"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"107","parentId":"106","text":"缴费记录"}],"hasChildren":true,"hasParent":false,"id":"106","parentId":"0","text":"收费管理"},{"attributes":{"icon":"fa fa-lightbulb-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/elec/elec"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"121","parentId":"103","text":"电费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"elec/elecInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"122","parentId":"103","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"elec/elecUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"123","parentId":"103","text":"电表上传"},{"attributes":{"icon":"fa fa-cc","url":"/elec/elecPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"124","parentId":"103","text":"电价管理"}],"hasChildren":true,"hasParent":false,"id":"103","parentId":"0","text":"电费管理"},{"attributes":{"icon":"fa fa-tint","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/water/water"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"117","parentId":"105","text":"水费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"water/waterInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"118","parentId":"105","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"water/waterUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"119","parentId":"105","text":"水费生成"},{"attributes":{"icon":"fa fa-cc","url":"/water/waterPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"120","parentId":"105","text":"水价管理"}],"hasChildren":true,"hasParent":false,"id":"105","parentId":"0","text":"水费管理"},{"attributes":{"icon":"fa fa-fire","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/heat/heat"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"113","parentId":"104","text":"暖费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"heat/heatInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"114","parentId":"104","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"heat/heatUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"115","parentId":"104","text":"暖费生成"},{"attributes":{"icon":"","url":"/heat/heatPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"116","parentId":"104","text":"暖价管理"}],"hasChildren":true,"hasParent":false,"id":"104","parentId":"0","text":"暖费管理"},{"attributes":{"icon":"fa fa-vcard-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-bomb","url":"/print/print"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"149","parentId":"108","text":"票据记录"}],"hasChildren":true,"hasParent":false,"id":"108","parentId":"0","text":"票据管理"},{"attributes":{"icon":"fa fa-bar-chart","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-area-chart","url":"/chart/graph_echarts.html"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","text":"百度chart"},{"attributes":{"icon":"fa fa-sun-o","url":"charts/countDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"109","parentId":"97","text":"日统计报表"},{"attributes":{"icon":"fa fa-registered","url":"charts/countMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"110","parentId":"97","text":"月统计报表"},{"attributes":{"icon":"fa fa-money","url":"charts/countOwe"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"155","parentId":"97","text":"欠费报表图"},{"attributes":{"icon":"fa fa-support","url":"charts/countYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"111","parentId":"97","text":"年统计报表"},{"attributes":{"icon":"fa fa-tachometer","url":"charts/countRun"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"112","parentId":"97","text":"走势图报表"}],"hasChildren":true,"hasParent":false,"id":"97","parentId":"0","text":"统计管理"},{"attributes":{"icon":"fa fa-bars","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-book","url":"/common/dict"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"78","parentId":"1","text":"数据字典"},{"attributes":{"icon":"fa fa-folder-open","url":"/common/sysFile"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"71","parentId":"1","text":"文件管理"}],"h(String), 127.0.0.1(String), 2019-04-03 16:55:13.551(Timestamp)
2019-04-03 16:55:13 -<==    Updates: 1
2019-04-03 16:55:13 -请求地址 : http://localhost:8081/main
2019-04-03 16:55:13 -HTTP METHOD : GET
2019-04-03 16:55:13 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 16:55:13 -参数 : []
2019-04-03 16:55:13 -耗时 : 50
2019-04-03 16:55:13 -返回值 : main
2019-04-03 16:55:14 -请求地址 : http://localhost:8081/oa/notify/message
2019-04-03 16:55:14 -HTTP METHOD : GET
2019-04-03 16:55:14 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2019-04-03 16:55:14 -参数 : []
2019-04-03 16:55:14 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2019-04-03 16:55:14 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2019-04-03 16:55:14 -<==      Total: 0
2019-04-03 16:55:14 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2019-04-03 16:55:14 -==> Parameters: 1(Long), 0(String)
2019-04-03 16:55:14 -<==      Total: 1
2019-04-03 16:55:14 -请求地址 : http://localhost:8081/main
2019-04-03 16:55:14 -HTTP METHOD : GET
2019-04-03 16:55:14 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 16:55:14 -参数 : []
2019-04-03 16:55:14 -耗时 : 1
2019-04-03 16:55:14 -返回值 : main
2019-04-03 16:55:14 -耗时 : 59
2019-04-03 16:55:14 -返回值 : com.bootdo.common.utils.PageUtils@4fa0d078
2019-04-03 16:55:39 -==>  Preparing: select distinct m.perms from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id = ur.role_id where ur.user_id = ? 
2019-04-03 16:55:39 -==> Parameters: 1(Long)
2019-04-03 16:55:39 -<==      Total: 90
2019-04-03 16:55:39 -请求地址 : http://localhost:8081/heat/heat
2019-04-03 16:55:39 -HTTP METHOD : GET
2019-04-03 16:55:39 -CLASS_METHOD : com.bootdo.heat.controller.HeatController.Heat
2019-04-03 16:55:39 -参数 : []
2019-04-03 16:55:39 -耗时 : 0
2019-04-03 16:55:39 -返回值 : heat/heat/heat
2019-04-03 16:55:40 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-03 16:55:40 -HTTP METHOD : GET
2019-04-03 16:55:40 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 16:55:40 -参数 : [userType]
2019-04-03 16:55:40 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 16:55:40 -==> Parameters: userType(String)
2019-04-03 16:55:40 -<==      Total: 2
2019-04-03 16:55:40 -耗时 : 23
2019-04-03 16:55:40 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 16:55:40 -请求地址 : http://localhost:8081/heat/heat/list
2019-04-03 16:55:40 -HTTP METHOD : GET
2019-04-03 16:55:40 -CLASS_METHOD : com.bootdo.heat.controller.HeatController.list
2019-04-03 16:55:40 -参数 : [{limit=3, offset=0, userType=, userOrg=, userId=, createTime=, queryType=1}]
2019-04-03 16:55:40 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SHEATT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`heat_type`,`heat_price`,`heat_area`,`heat_cost`,`heat_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from heat order by id asc limit ?, ? 
2019-04-03 16:55:41 -Loading XML bean definitions from class path resource [org/springframework/jdbc/support/sql-error-codes.xml]
2019-04-03 16:55:43 -SQLErrorCodes loaded: [DB2, Derby, H2, HDB, HSQL, Informix, MS-SQL, MySQL, Oracle, PostgreSQL, Sybase]
2019-04-03 16:55:43 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 16:55:43 -==> Parameters: 1(Long), admin(String), error(String), null, http://localhost:8081/heat/heat/list(String), org.springframework.jdbc.UncategorizedSQLException: 
### Error querying database.  Cause: java.sql.SQLException: sql injection violation, syntax error: syntax error, expect RPAREN, actual IDENTIFIER t : select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SHEATT  t.`name`  FROM sys_dept  t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`heat_type`,`heat_price`,`heat_area`,`heat_cost`,`heat_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from heat
          
         
                order by id asc
			 
		 
			limit ?, ?
### The error may exist in file [D:\eclipse2018-work\bootdo\target\classes\mybatis\heat\HeatMapper.xml]
### The error may involve com.bootdo.heat.dao.HeatDao.list
### The error occurred while executing a query
### SQL: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SHEATT  t.`name`  FROM sys_dept  t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`heat_type`,`heat_price`,`heat_area`,`heat_cost`,`heat_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from heat                                      order by id asc             limit ?, ?
### Cause: java.sql.SQLException: sql injection violation, syntax error: syntax error, expect RPAREN, actual IDENTIFIER t : select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SHEATT  t.`name`  FROM sys_dept  t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`heat_type`,`heat_price`,`heat_area`,`heat_cost`,`heat_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from heat
          
         
                order by id asc
			 
		 
			limit ?, ?
; uncategorized SQLException; SQL state [null]; error code [0]; sql injection violation, syntax error: syntax error, expect RPAREN, actual IDENTIFIER t : select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SHEATT  t.`name`  FROM sys_dept  t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`heat_type`,`heat_price`,`heat_area`,`heat_cost`,`heat_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from heat
          
         
                order by id asc
			 
		 
			limit ?, ?; nested exception is java.sql.SQLException: sql injection violation, syntax error: syntax error, expect RPAREN, actual IDENTIFIER t : select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SHEATT  t.`name`  FROM sys_dept  t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`heat_type`,`heat_price`,`heat_area`,`heat_cost`,`heat_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from heat
          
         
                order by id asc
			 
		 
			limit ?, ?(String), null, 2019-04-03 16:55:43.364(Timestamp)
2019-04-03 16:55:43 -<==    Updates: 1
2019-04-03 16:55:43 -
### Error querying database.  Cause: java.sql.SQLException: sql injection violation, syntax error: syntax error, expect RPAREN, actual IDENTIFIER t : select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SHEATT  t.`name`  FROM sys_dept  t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`heat_type`,`heat_price`,`heat_area`,`heat_cost`,`heat_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from heat
          
         
                order by id asc
			 
		 
			limit ?, ?
### The error may exist in file [D:\eclipse2018-work\bootdo\target\classes\mybatis\heat\HeatMapper.xml]
### The error may involve com.bootdo.heat.dao.HeatDao.list
### The error occurred while executing a query
### SQL: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SHEATT  t.`name`  FROM sys_dept  t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`heat_type`,`heat_price`,`heat_area`,`heat_cost`,`heat_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from heat                                      order by id asc             limit ?, ?
### Cause: java.sql.SQLException: sql injection violation, syntax error: syntax error, expect RPAREN, actual IDENTIFIER t : select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SHEATT  t.`name`  FROM sys_dept  t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`heat_type`,`heat_price`,`heat_area`,`heat_cost`,`heat_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from heat
          
         
                order by id asc
			 
		 
			limit ?, ?
; uncategorized SQLException; SQL state [null]; error code [0]; sql injection violation, syntax error: syntax error, expect RPAREN, actual IDENTIFIER t : select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SHEATT  t.`name`  FROM sys_dept  t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`heat_type`,`heat_price`,`heat_area`,`heat_cost`,`heat_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from heat
          
         
                order by id asc
			 
		 
			limit ?, ?; nested exception is java.sql.SQLException: sql injection violation, syntax error: syntax error, expect RPAREN, actual IDENTIFIER t : select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SHEATT  t.`name`  FROM sys_dept  t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`heat_type`,`heat_price`,`heat_area`,`heat_cost`,`heat_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from heat
          
         
                order by id asc
			 
		 
			limit ?, ?
org.springframework.jdbc.UncategorizedSQLException: 
### Error querying database.  Cause: java.sql.SQLException: sql injection violation, syntax error: syntax error, expect RPAREN, actual IDENTIFIER t : select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SHEATT  t.`name`  FROM sys_dept  t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`heat_type`,`heat_price`,`heat_area`,`heat_cost`,`heat_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from heat
          
         
                order by id asc
			 
		 
			limit ?, ?
### The error may exist in file [D:\eclipse2018-work\bootdo\target\classes\mybatis\heat\HeatMapper.xml]
### The error may involve com.bootdo.heat.dao.HeatDao.list
### The error occurred while executing a query
### SQL: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SHEATT  t.`name`  FROM sys_dept  t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`heat_type`,`heat_price`,`heat_area`,`heat_cost`,`heat_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from heat                                      order by id asc             limit ?, ?
### Cause: java.sql.SQLException: sql injection violation, syntax error: syntax error, expect RPAREN, actual IDENTIFIER t : select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SHEATT  t.`name`  FROM sys_dept  t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`heat_type`,`heat_price`,`heat_area`,`heat_cost`,`heat_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from heat
          
         
                order by id asc
			 
		 
			limit ?, ?
; uncategorized SQLException; SQL state [null]; error code [0]; sql injection violation, syntax error: syntax error, expect RPAREN, actual IDENTIFIER t : select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SHEATT  t.`name`  FROM sys_dept  t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`heat_type`,`heat_price`,`heat_area`,`heat_cost`,`heat_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from heat
          
         
                order by id asc
			 
		 
			limit ?, ?; nested exception is java.sql.SQLException: sql injection violation, syntax error: syntax error, expect RPAREN, actual IDENTIFIER t : select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SHEATT  t.`name`  FROM sys_dept  t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`heat_type`,`heat_price`,`heat_area`,`heat_cost`,`heat_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from heat
          
         
                order by id asc
			 
		 
			limit ?, ?
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:89)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:81)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:81)
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:75)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:447)
	at com.sun.proxy.$Proxy101.selectList(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:231)
	at org.apache.ibatis.binding.MapperMethod.executeForMany(MapperMethod.java:137)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:75)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy106.list(Unknown Source)
	at com.bootdo.heat.service.impl.HeatServiceImpl.list(HeatServiceImpl.java:26)
	at com.bootdo.heat.controller.HeatController.list(HeatController.java:54)
	at com.bootdo.heat.controller.HeatController$$FastClassBySpringCGLIB$$8914ee44.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:204)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:746)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.bootdo.common.aspect.WebLogAspect.doAround(WebLogAspect.java:57)
	at sun.reflect.GeneratedMethodAccessor128.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.apache.shiro.spring.security.interceptor.AopAllianceAnnotationsAuthorizingMethodInterceptor$1.proceed(AopAllianceAnnotationsAuthorizingMethodInterceptor.java:82)
	at org.apache.shiro.authz.aop.AuthorizingMethodInterceptor.invoke(AuthorizingMethodInterceptor.java:39)
	at org.apache.shiro.spring.security.interceptor.AopAllianceAnnotationsAuthorizingMethodInterceptor.invoke(AopAllianceAnnotationsAuthorizingMethodInterceptor.java:115)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.bootdo.heat.controller.HeatController$$EnhancerBySpringCGLIB$$87834ea6.list(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:209)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:877)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:783)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:991)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:925)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:974)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:866)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:635)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:851)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:61)
	at org.apache.shiro.web.servlet.AdviceFilter.executeChain(AdviceFilter.java:108)
	at org.apache.shiro.web.servlet.AdviceFilter.doFilterInternal(AdviceFilter.java:137)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:66)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)
	at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)
	at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)
	at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)
	at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:383)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:109)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:496)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:790)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1468)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.sql.SQLException: sql injection violation, syntax error: syntax error, expect RPAREN, actual IDENTIFIER t : select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SHEATT  t.`name`  FROM sys_dept  t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`heat_type`,`heat_price`,`heat_area`,`heat_cost`,`heat_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from heat
          
         
                order by id asc
			 
		 
			limit ?, ?
	at com.alibaba.druid.wall.WallFilter.check(WallFilter.java:725)
	at com.alibaba.druid.wall.WallFilter.connection_prepareStatement(WallFilter.java:253)
	at com.alibaba.druid.filter.FilterChainImpl.connection_prepareStatement(FilterChainImpl.java:448)
	at com.alibaba.druid.filter.FilterAdapter.connection_prepareStatement(FilterAdapter.java:928)
	at com.alibaba.druid.filter.FilterEventAdapter.connection_prepareStatement(FilterEventAdapter.java:122)
	at com.alibaba.druid.filter.FilterChainImpl.connection_prepareStatement(FilterChainImpl.java:448)
	at com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl.prepareStatement(ConnectionProxyImpl.java:342)
	at com.alibaba.druid.pool.DruidPooledConnection.prepareStatement(DruidPooledConnection.java:331)
	at sun.reflect.GeneratedMethodAccessor134.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.apache.ibatis.logging.jdbc.ConnectionLogger.invoke(ConnectionLogger.java:55)
	at com.sun.proxy.$Proxy172.prepareStatement(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.instantiateStatement(PreparedStatementHandler.java:87)
	at org.apache.ibatis.executor.statement.BaseStatementHandler.prepare(BaseStatementHandler.java:88)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.prepare(RoutingStatementHandler.java:59)
	at org.apache.ibatis.executor.SimpleExecutor.prepareStatement(SimpleExecutor.java:85)
	at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:62)
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:324)
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:156)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:109)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:83)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:148)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:141)
	at sun.reflect.GeneratedMethodAccessor183.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:434)
	... 104 common frames omitted
Caused by: com.alibaba.druid.sql.parser.ParserException: syntax error, expect RPAREN, actual IDENTIFIER t
	at com.alibaba.druid.sql.parser.SQLExprParser.accept(SQLExprParser.java:1827)
	at com.alibaba.druid.sql.parser.SQLExprParser.primary(SQLExprParser.java:220)
	at com.alibaba.druid.sql.dialect.mysql.parser.MySqlExprParser.primary(MySqlExprParser.java:172)
	at com.alibaba.druid.sql.parser.SQLExprParser.expr(SQLExprParser.java:85)
	at com.alibaba.druid.sql.parser.SQLExprParser.parseSelectItem(SQLExprParser.java:2153)
	at com.alibaba.druid.sql.parser.SQLSelectParser.parseSelectList(SQLSelectParser.java:373)
	at com.alibaba.druid.sql.dialect.mysql.parser.MySqlSelectParser.query(MySqlSelectParser.java:152)
	at com.alibaba.druid.sql.parser.SQLSelectParser.select(SQLSelectParser.java:59)
	at com.alibaba.druid.sql.dialect.mysql.parser.MySqlStatementParser.parseSelect(MySqlStatementParser.java:247)
	at com.alibaba.druid.sql.parser.SQLStatementParser.parseStatementList(SQLStatementParser.java:114)
	at com.alibaba.druid.sql.parser.SQLStatementParser.parseStatementList(SQLStatementParser.java:79)
	at com.alibaba.druid.wall.WallProvider.checkInternal(WallProvider.java:620)
	at com.alibaba.druid.wall.WallProvider.check(WallProvider.java:574)
	at com.alibaba.druid.wall.WallFilter.check(WallFilter.java:712)
	... 131 common frames omitted
2019-04-03 16:56:24 -请求地址 : http://localhost:8081/index
2019-04-03 16:56:24 -HTTP METHOD : GET
2019-04-03 16:56:24 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2019-04-03 16:56:24 -参数 : [{}]
2019-04-03 16:56:24 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2019-04-03 16:56:24 -==> Parameters: 1(Long)
2019-04-03 16:56:24 -<==      Total: 46
2019-04-03 16:56:24 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2019-04-03 16:56:24 -==> Parameters: 138(Long)
2019-04-03 16:56:24 -<==      Total: 1
2019-04-03 16:56:24 -耗时 : 19
2019-04-03 16:56:24 -返回值 : index_v1
2019-04-03 16:56:24 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 16:56:24 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 19(Integer), com.bootdo.system.controller.LoginController.index()(String), {"menus":[{"attributes":{"icon":"fa fa-money","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-money","url":"/moneyList/moneyList"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"102","parentId":"106","text":"现金缴费"},{"attributes":{"icon":"fa fa-book","url":"/moneyLog/elecLog"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"107","parentId":"106","text":"缴费记录"}],"hasChildren":true,"hasParent":false,"id":"106","parentId":"0","text":"收费管理"},{"attributes":{"icon":"fa fa-lightbulb-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/elec/elec"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"121","parentId":"103","text":"电费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"elec/elecInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"122","parentId":"103","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"elec/elecUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"123","parentId":"103","text":"电表上传"},{"attributes":{"icon":"fa fa-cc","url":"/elec/elecPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"124","parentId":"103","text":"电价管理"}],"hasChildren":true,"hasParent":false,"id":"103","parentId":"0","text":"电费管理"},{"attributes":{"icon":"fa fa-tint","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/water/water"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"117","parentId":"105","text":"水费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"water/waterInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"118","parentId":"105","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"water/waterUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"119","parentId":"105","text":"水费生成"},{"attributes":{"icon":"fa fa-cc","url":"/water/waterPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"120","parentId":"105","text":"水价管理"}],"hasChildren":true,"hasParent":false,"id":"105","parentId":"0","text":"水费管理"},{"attributes":{"icon":"fa fa-fire","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/heat/heat"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"113","parentId":"104","text":"暖费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"heat/heatInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"114","parentId":"104","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"heat/heatUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"115","parentId":"104","text":"暖费生成"},{"attributes":{"icon":"","url":"/heat/heatPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"116","parentId":"104","text":"暖价管理"}],"hasChildren":true,"hasParent":false,"id":"104","parentId":"0","text":"暖费管理"},{"attributes":{"icon":"fa fa-vcard-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-bomb","url":"/print/print"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"149","parentId":"108","text":"票据记录"}],"hasChildren":true,"hasParent":false,"id":"108","parentId":"0","text":"票据管理"},{"attributes":{"icon":"fa fa-bar-chart","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-area-chart","url":"/chart/graph_echarts.html"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","text":"百度chart"},{"attributes":{"icon":"fa fa-sun-o","url":"charts/countDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"109","parentId":"97","text":"日统计报表"},{"attributes":{"icon":"fa fa-registered","url":"charts/countMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"110","parentId":"97","text":"月统计报表"},{"attributes":{"icon":"fa fa-money","url":"charts/countOwe"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"155","parentId":"97","text":"欠费报表图"},{"attributes":{"icon":"fa fa-support","url":"charts/countYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"111","parentId":"97","text":"年统计报表"},{"attributes":{"icon":"fa fa-tachometer","url":"charts/countRun"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"112","parentId":"97","text":"走势图报表"}],"hasChildren":true,"hasParent":false,"id":"97","parentId":"0","text":"统计管理"},{"attributes":{"icon":"fa fa-bars","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-book","url":"/common/dict"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"78","parentId":"1","text":"数据字典"},{"attributes":{"icon":"fa fa-folder-open","url":"/common/sysFile"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"71","parentId":"1","text":"文件管理"}],"h(String), 127.0.0.1(String), 2019-04-03 16:56:24.74(Timestamp)
2019-04-03 16:56:24 -<==    Updates: 1
2019-04-03 16:56:24 -请求地址 : http://localhost:8081/main
2019-04-03 16:56:24 -HTTP METHOD : GET
2019-04-03 16:56:24 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 16:56:24 -参数 : []
2019-04-03 16:56:24 -耗时 : 1
2019-04-03 16:56:24 -返回值 : main
2019-04-03 16:56:25 -请求地址 : http://localhost:8081/oa/notify/message
2019-04-03 16:56:25 -HTTP METHOD : GET
2019-04-03 16:56:25 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2019-04-03 16:56:25 -参数 : []
2019-04-03 16:56:25 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2019-04-03 16:56:25 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2019-04-03 16:56:25 -<==      Total: 0
2019-04-03 16:56:25 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2019-04-03 16:56:25 -==> Parameters: 1(Long), 0(String)
2019-04-03 16:56:25 -<==      Total: 1
2019-04-03 16:56:25 -耗时 : 7
2019-04-03 16:56:25 -返回值 : com.bootdo.common.utils.PageUtils@292b7605
2019-04-03 16:56:25 -请求地址 : http://localhost:8081/main
2019-04-03 16:56:25 -HTTP METHOD : GET
2019-04-03 16:56:25 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 16:56:25 -参数 : []
2019-04-03 16:56:25 -耗时 : 3
2019-04-03 16:56:25 -返回值 : main
2019-04-03 16:56:26 -请求地址 : http://localhost:8081/heat/heat
2019-04-03 16:56:26 -HTTP METHOD : GET
2019-04-03 16:56:26 -CLASS_METHOD : com.bootdo.heat.controller.HeatController.Heat
2019-04-03 16:56:26 -参数 : []
2019-04-03 16:56:26 -耗时 : 1
2019-04-03 16:56:26 -返回值 : heat/heat/heat
2019-04-03 16:56:27 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-03 16:56:27 -HTTP METHOD : GET
2019-04-03 16:56:27 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 16:56:27 -参数 : [userType]
2019-04-03 16:56:27 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 16:56:27 -==> Parameters: userType(String)
2019-04-03 16:56:27 -<==      Total: 2
2019-04-03 16:56:27 -耗时 : 4
2019-04-03 16:56:27 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 16:56:27 -请求地址 : http://localhost:8081/heat/heat/list
2019-04-03 16:56:27 -HTTP METHOD : GET
2019-04-03 16:56:27 -CLASS_METHOD : com.bootdo.heat.controller.HeatController.list
2019-04-03 16:56:27 -参数 : [{limit=3, offset=0, userType=, userOrg=, userId=, createTime=, queryType=1}]
2019-04-03 16:56:27 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SHEATT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`heat_type`,`heat_price`,`heat_area`,`heat_cost`,`heat_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from heat order by id asc limit ?, ? 
2019-04-03 16:56:27 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 16:56:27 -==> Parameters: 1(Long), admin(String), error(String), null, http://localhost:8081/heat/heat/list(String), org.springframework.jdbc.UncategorizedSQLException: 
### Error querying database.  Cause: java.sql.SQLException: sql injection violation, syntax error: syntax error, expect RPAREN, actual IDENTIFIER t : select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SHEATT  t.`name`  FROM sys_dept  t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`heat_type`,`heat_price`,`heat_area`,`heat_cost`,`heat_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from heat
          
         
                order by id asc
			 
		 
			limit ?, ?
### The error may exist in file [D:\eclipse2018-work\bootdo\target\classes\mybatis\heat\HeatMapper.xml]
### The error may involve com.bootdo.heat.dao.HeatDao.list
### The error occurred while executing a query
### SQL: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SHEATT  t.`name`  FROM sys_dept  t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`heat_type`,`heat_price`,`heat_area`,`heat_cost`,`heat_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from heat                                      order by id asc             limit ?, ?
### Cause: java.sql.SQLException: sql injection violation, syntax error: syntax error, expect RPAREN, actual IDENTIFIER t : select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SHEATT  t.`name`  FROM sys_dept  t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`heat_type`,`heat_price`,`heat_area`,`heat_cost`,`heat_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from heat
          
         
                order by id asc
			 
		 
			limit ?, ?
; uncategorized SQLException; SQL state [null]; error code [0]; sql injection violation, syntax error: syntax error, expect RPAREN, actual IDENTIFIER t : select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SHEATT  t.`name`  FROM sys_dept  t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`heat_type`,`heat_price`,`heat_area`,`heat_cost`,`heat_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from heat
          
         
                order by id asc
			 
		 
			limit ?, ?; nested exception is java.sql.SQLException: sql injection violation, syntax error: syntax error, expect RPAREN, actual IDENTIFIER t : select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SHEATT  t.`name`  FROM sys_dept  t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`heat_type`,`heat_price`,`heat_area`,`heat_cost`,`heat_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from heat
          
         
                order by id asc
			 
		 
			limit ?, ?(String), null, 2019-04-03 16:56:27.127(Timestamp)
2019-04-03 16:56:27 -
### Error querying database.  Cause: java.sql.SQLException: sql injection violation, syntax error: syntax error, expect RPAREN, actual IDENTIFIER t : select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SHEATT  t.`name`  FROM sys_dept  t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`heat_type`,`heat_price`,`heat_area`,`heat_cost`,`heat_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from heat
          
         
                order by id asc
			 
		 
			limit ?, ?
### The error may exist in file [D:\eclipse2018-work\bootdo\target\classes\mybatis\heat\HeatMapper.xml]
### The error may involve com.bootdo.heat.dao.HeatDao.list
### The error occurred while executing a query
### SQL: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SHEATT  t.`name`  FROM sys_dept  t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`heat_type`,`heat_price`,`heat_area`,`heat_cost`,`heat_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from heat                                      order by id asc             limit ?, ?
### Cause: java.sql.SQLException: sql injection violation, syntax error: syntax error, expect RPAREN, actual IDENTIFIER t : select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SHEATT  t.`name`  FROM sys_dept  t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`heat_type`,`heat_price`,`heat_area`,`heat_cost`,`heat_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from heat
          
         
                order by id asc
			 
		 
			limit ?, ?
; uncategorized SQLException; SQL state [null]; error code [0]; sql injection violation, syntax error: syntax error, expect RPAREN, actual IDENTIFIER t : select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SHEATT  t.`name`  FROM sys_dept  t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`heat_type`,`heat_price`,`heat_area`,`heat_cost`,`heat_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from heat
          
         
                order by id asc
			 
		 
			limit ?, ?; nested exception is java.sql.SQLException: sql injection violation, syntax error: syntax error, expect RPAREN, actual IDENTIFIER t : select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SHEATT  t.`name`  FROM sys_dept  t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`heat_type`,`heat_price`,`heat_area`,`heat_cost`,`heat_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from heat
          
         
                order by id asc
			 
		 
			limit ?, ?
org.springframework.jdbc.UncategorizedSQLException: 
### Error querying database.  Cause: java.sql.SQLException: sql injection violation, syntax error: syntax error, expect RPAREN, actual IDENTIFIER t : select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SHEATT  t.`name`  FROM sys_dept  t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`heat_type`,`heat_price`,`heat_area`,`heat_cost`,`heat_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from heat
          
         
                order by id asc
			 
		 
			limit ?, ?
### The error may exist in file [D:\eclipse2018-work\bootdo\target\classes\mybatis\heat\HeatMapper.xml]
### The error may involve com.bootdo.heat.dao.HeatDao.list
### The error occurred while executing a query
### SQL: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SHEATT  t.`name`  FROM sys_dept  t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`heat_type`,`heat_price`,`heat_area`,`heat_cost`,`heat_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from heat                                      order by id asc             limit ?, ?
### Cause: java.sql.SQLException: sql injection violation, syntax error: syntax error, expect RPAREN, actual IDENTIFIER t : select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SHEATT  t.`name`  FROM sys_dept  t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`heat_type`,`heat_price`,`heat_area`,`heat_cost`,`heat_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from heat
          
         
                order by id asc
			 
		 
			limit ?, ?
; uncategorized SQLException; SQL state [null]; error code [0]; sql injection violation, syntax error: syntax error, expect RPAREN, actual IDENTIFIER t : select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SHEATT  t.`name`  FROM sys_dept  t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`heat_type`,`heat_price`,`heat_area`,`heat_cost`,`heat_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from heat
          
         
                order by id asc
			 
		 
			limit ?, ?; nested exception is java.sql.SQLException: sql injection violation, syntax error: syntax error, expect RPAREN, actual IDENTIFIER t : select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SHEATT  t.`name`  FROM sys_dept  t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`heat_type`,`heat_price`,`heat_area`,`heat_cost`,`heat_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from heat
          
         
                order by id asc
			 
		 
			limit ?, ?
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:89)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:81)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:81)
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:75)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:447)
	at com.sun.proxy.$Proxy101.selectList(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:231)
	at org.apache.ibatis.binding.MapperMethod.executeForMany(MapperMethod.java:137)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:75)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy106.list(Unknown Source)
	at com.bootdo.heat.service.impl.HeatServiceImpl.list(HeatServiceImpl.java:26)
	at com.bootdo.heat.controller.HeatController.list(HeatController.java:54)
	at com.bootdo.heat.controller.HeatController$$FastClassBySpringCGLIB$$8914ee44.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:204)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:746)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.bootdo.common.aspect.WebLogAspect.doAround(WebLogAspect.java:57)
	at sun.reflect.GeneratedMethodAccessor128.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.apache.shiro.spring.security.interceptor.AopAllianceAnnotationsAuthorizingMethodInterceptor$1.proceed(AopAllianceAnnotationsAuthorizingMethodInterceptor.java:82)
	at org.apache.shiro.authz.aop.AuthorizingMethodInterceptor.invoke(AuthorizingMethodInterceptor.java:39)
	at org.apache.shiro.spring.security.interceptor.AopAllianceAnnotationsAuthorizingMethodInterceptor.invoke(AopAllianceAnnotationsAuthorizingMethodInterceptor.java:115)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.bootdo.heat.controller.HeatController$$EnhancerBySpringCGLIB$$87834ea6.list(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:209)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:877)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:783)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:991)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:925)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:974)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:866)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:635)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:851)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:61)
	at org.apache.shiro.web.servlet.AdviceFilter.executeChain(AdviceFilter.java:108)
	at org.apache.shiro.web.servlet.AdviceFilter.doFilterInternal(AdviceFilter.java:137)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:66)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)
	at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)
	at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)
	at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)
	at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:383)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:109)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:496)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:790)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1468)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.sql.SQLException: sql injection violation, syntax error: syntax error, expect RPAREN, actual IDENTIFIER t : select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SHEATT  t.`name`  FROM sys_dept  t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`heat_type`,`heat_price`,`heat_area`,`heat_cost`,`heat_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from heat
          
         
                order by id asc
			 
		 
			limit ?, ?
	at com.alibaba.druid.wall.WallFilter.check(WallFilter.java:725)
	at com.alibaba.druid.wall.WallFilter.connection_prepareStatement(WallFilter.java:253)
	at com.alibaba.druid.filter.FilterChainImpl.connection_prepareStatement(FilterChainImpl.java:448)
	at com.alibaba.druid.filter.FilterAdapter.connection_prepareStatement(FilterAdapter.java:928)
	at com.alibaba.druid.filter.FilterEventAdapter.connection_prepareStatement(FilterEventAdapter.java:122)
	at com.alibaba.druid.filter.FilterChainImpl.connection_prepareStatement(FilterChainImpl.java:448)
	at com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl.prepareStatement(ConnectionProxyImpl.java:342)
	at com.alibaba.druid.pool.DruidPooledConnection.prepareStatement(DruidPooledConnection.java:331)
	at sun.reflect.GeneratedMethodAccessor134.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.apache.ibatis.logging.jdbc.ConnectionLogger.invoke(ConnectionLogger.java:55)
	at com.sun.proxy.$Proxy172.prepareStatement(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.instantiateStatement(PreparedStatementHandler.java:87)
	at org.apache.ibatis.executor.statement.BaseStatementHandler.prepare(BaseStatementHandler.java:88)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.prepare(RoutingStatementHandler.java:59)
	at org.apache.ibatis.executor.SimpleExecutor.prepareStatement(SimpleExecutor.java:85)
	at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:62)
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:324)
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:156)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:109)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:83)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:148)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:141)
	at sun.reflect.GeneratedMethodAccessor183.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:434)
	... 104 common frames omitted
Caused by: com.alibaba.druid.sql.parser.ParserException: syntax error, expect RPAREN, actual IDENTIFIER t
	at com.alibaba.druid.sql.parser.SQLExprParser.accept(SQLExprParser.java:1827)
	at com.alibaba.druid.sql.parser.SQLExprParser.primary(SQLExprParser.java:220)
	at com.alibaba.druid.sql.dialect.mysql.parser.MySqlExprParser.primary(MySqlExprParser.java:172)
	at com.alibaba.druid.sql.parser.SQLExprParser.expr(SQLExprParser.java:85)
	at com.alibaba.druid.sql.parser.SQLExprParser.parseSelectItem(SQLExprParser.java:2153)
	at com.alibaba.druid.sql.parser.SQLSelectParser.parseSelectList(SQLSelectParser.java:373)
	at com.alibaba.druid.sql.dialect.mysql.parser.MySqlSelectParser.query(MySqlSelectParser.java:152)
	at com.alibaba.druid.sql.parser.SQLSelectParser.select(SQLSelectParser.java:59)
	at com.alibaba.druid.sql.dialect.mysql.parser.MySqlStatementParser.parseSelect(MySqlStatementParser.java:247)
	at com.alibaba.druid.sql.parser.SQLStatementParser.parseStatementList(SQLStatementParser.java:114)
	at com.alibaba.druid.sql.parser.SQLStatementParser.parseStatementList(SQLStatementParser.java:79)
	at com.alibaba.druid.wall.WallProvider.checkInternal(WallProvider.java:620)
	at com.alibaba.druid.wall.WallProvider.check(WallProvider.java:574)
	at com.alibaba.druid.wall.WallFilter.check(WallFilter.java:712)
	... 131 common frames omitted
2019-04-03 16:56:27 -<==    Updates: 1
2019-04-03 17:07:04 -Starting BootdoApplication on ZJZL-20180906VX with PID 5132 (D:\eclipse2018-work\bootdo\target\classes started by Administrator in D:\eclipse2018-work\bootdo)
2019-04-03 17:07:04 -Running with Spring Boot v2.0.3.RELEASE, Spring v5.0.7.RELEASE
2019-04-03 17:07:04 -The following profiles are active: dev
2019-04-03 17:07:04 -Refreshing org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@6fdbe764: startup date [Wed Apr 03 17:07:04 CST 2019]; root of context hierarchy
2019-04-03 17:07:07 -Multiple Spring Data modules found, entering strict repository configuration mode!
2019-04-03 17:07:09 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$f37a9df] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-03 17:07:09 -Bean 'shiroConfig' of type [com.bootdo.system.config.ShiroConfig$$EnhancerBySpringCGLIB$$190d886] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-03 17:07:10 -Bean 'userRealm' of type [com.bootdo.system.shiro.UserRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-03 17:07:11 -Bean 'cacheManager2' of type [net.sf.ehcache.CacheManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-03 17:07:11 -Bean 'ehCacheManager' of type [org.apache.shiro.cache.ehcache.EhCacheManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-03 17:07:11 -Cache with name 'com.bootdo.system.shiro.UserRealm.authorizationCache' does not yet exist.  Creating now.
2019-04-03 17:07:11 -Added EhCache named [com.bootdo.system.shiro.UserRealm.authorizationCache]
2019-04-03 17:07:11 -Bean 'sessionDAO' of type [org.apache.shiro.session.mgt.eis.MemorySessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-03 17:07:11 -Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-03 17:07:11 -Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-03 17:07:11 -Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-03 17:07:12 -Tomcat initialized with port(s): 8081 (http)
2019-04-03 17:07:12 -Initializing ProtocolHandler ["http-nio-8081"]
2019-04-03 17:07:12 -Starting service [Tomcat]
2019-04-03 17:07:12 -Starting Servlet Engine: Apache Tomcat/8.5.31
2019-04-03 17:07:12 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [C:\Program Files\Java\jre1.8.0_131\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:/Program Files/Java/jre1.8.0_131/bin/server;C:/Program Files/Java/jre1.8.0_131/bin;C:/Program Files/Java/jre1.8.0_131/lib/amd64;C:\ProgramData\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Windows\System32\OpenSSH\;D:\pbb\pycSafefile\x64;D:\pbb\PBB Reader\x64;C:\Program Files\MySQL\MySQL Utilities 1.6\;D:\MAVEN\apache-maven-3.6.0\bin;D:\GIT\Git\cmd;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;;C:\Users\Administrator\Desktop;;.]
2019-04-03 17:07:12 -Initializing Spring embedded WebApplicationContext
2019-04-03 17:07:12 -Root WebApplicationContext: initialization completed in 8528 ms
2019-04-03 17:07:13 -Mapping filter: 'characterEncodingFilter' to: [/*]
2019-04-03 17:07:13 -Mapping filter: 'hiddenHttpMethodFilter' to: [/*]
2019-04-03 17:07:13 -Mapping filter: 'httpPutFormContentFilter' to: [/*]
2019-04-03 17:07:13 -Mapping filter: 'requestContextFilter' to: [/*]
2019-04-03 17:07:13 -Filter xssFilter was not registered (disabled)
2019-04-03 17:07:13 -Mapping filter: 'webStatFilter' to urls: [/*]
2019-04-03 17:07:13 -Mapping filter: 'shiroFilterFactoryBean' to: [/*]
2019-04-03 17:07:13 -Servlet statViewServlet mapped to [/druid/*]
2019-04-03 17:07:13 -Servlet dispatcherServlet mapped to [/]
2019-04-03 17:07:17 -ApplicationContext registed-->org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@6fdbe764: startup date [Wed Apr 03 17:07:04 CST 2019]; root of context hierarchy
2019-04-03 17:07:17 -Using default implementation for ThreadExecutor
2019-04-03 17:07:17 -Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2019-04-03 17:07:17 -Quartz Scheduler v.2.2.1 created.
2019-04-03 17:07:17 -RAMJobStore initialized.
2019-04-03 17:07:17 -Scheduler meta-data: Quartz Scheduler (v2.2.1) 'schedulerFactoryBean' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2019-04-03 17:07:17 -Quartz scheduler 'schedulerFactoryBean' initialized from an externally provided properties instance.
2019-04-03 17:07:17 -Quartz scheduler version: 2.2.1
2019-04-03 17:07:17 -JobFactory set to: com.bootdo.common.quartz.factory.JobFactory@74431b9c
2019-04-03 17:07:18 -Initializing ExecutorService  'clientInboundChannelExecutor'
2019-04-03 17:07:18 -Initializing ExecutorService  'clientOutboundChannelExecutor'
2019-04-03 17:07:20 -Mapped "{[/charts/countDD],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.countDDController.countDD()
2019-04-03 17:07:20 -Mapped "{[/charts/countDD/tableDD],methods=[POST]}" onto public java.lang.String com.bootdo.charts.controller.countDDController.tableDD()
2019-04-03 17:07:20 -Mapped "{[/charts/countDD/getCountDD],methods=[POST]}" onto public com.bootdo.charts.vo.CountDayVo com.bootdo.charts.controller.countDDController.getCountD(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo,javax.servlet.http.HttpServletRequest)
2019-04-03 17:07:20 -Mapped "{[/charts/countDD/exportCountDD],methods=[GET]}" onto public void com.bootdo.charts.controller.countDDController.exprotElecLog(com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-03 17:07:20 -Mapped "{[/charts/countMM/exportCountMM],methods=[GET]}" onto public void com.bootdo.charts.controller.countMMController.exprotElecLog(com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-03 17:07:20 -Mapped "{[/charts/countMM/getCountMM],methods=[POST]}" onto public void com.bootdo.charts.controller.countMMController.getCountMM(org.springframework.ui.Model,com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo,javax.servlet.http.HttpServletRequest)
2019-04-03 17:07:20 -Mapped "{[/charts/countMM],methods=[GET]}" onto java.lang.String com.bootdo.charts.controller.countMMController.countMM()
2019-04-03 17:07:20 -Mapped "{[/charts/countOwe/getCountOwe],methods=[POST]}" onto public com.bootdo.charts.vo.CountOweVo com.bootdo.charts.controller.countOweController.getCountD(com.bootdo.elec.vo.ElecVo,com.bootdo.water.vo.WaterVo,com.bootdo.heat.vo.HeatVo,javax.servlet.http.HttpServletRequest)
2019-04-03 17:07:20 -Mapped "{[/charts/countOwe],methods=[GET]}" onto java.lang.String com.bootdo.charts.controller.countOweController.countOwe()
2019-04-03 17:07:20 -Mapped "{[/charts/countRun/getCountRun],methods=[POST]}" onto public int com.bootdo.charts.controller.countRunController.getCountD(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo)
2019-04-03 17:07:20 -Mapped "{[/charts/countRun/exportCountRun],methods=[GET]}" onto public void com.bootdo.charts.controller.countRunController.exprotElecLog(com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-03 17:07:20 -Mapped "{[/charts/countRun],methods=[GET]}" onto java.lang.String com.bootdo.charts.controller.countRunController.countRun()
2019-04-03 17:07:20 -Mapped "{[/charts/countYY],methods=[GET]}" onto java.lang.String com.bootdo.charts.controller.countYYController.countYY()
2019-04-03 17:07:20 -Mapped "{[/charts/countYY/getCountYY],methods=[POST]}" onto public int com.bootdo.charts.controller.countYYController.getCountD(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo)
2019-04-03 17:07:20 -Mapped "{[/charts/countYY/exportCountYY],methods=[GET]}" onto public void com.bootdo.charts.controller.countYYController.exprotElecLog(com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-03 17:07:20 -Mapped "{[/common/dict/add],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.add()
2019-04-03 17:07:20 -Mapped "{[/common/dict/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.remove(java.lang.Long)
2019-04-03 17:07:20 -Mapped "{[/common/dict/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.remove(java.lang.Long[])
2019-04-03 17:07:20 -Mapped "{[/common/dict/update]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.update(com.bootdo.common.domain.DictDO)
2019-04-03 17:07:20 -Mapped "{[/common/dict/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.common.controller.DictController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 17:07:20 -Mapped "{[/common/dict/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.save(com.bootdo.common.domain.DictDO)
2019-04-03 17:07:20 -Mapped "{[/common/dict/type],methods=[GET]}" onto public java.util.List<com.bootdo.common.domain.DictDO> com.bootdo.common.controller.DictController.listType()
2019-04-03 17:07:20 -Mapped "{[/common/dict/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 17:07:20 -Mapped "{[/common/dict],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.dict()
2019-04-03 17:07:20 -Mapped "{[/common/dict/list/{type}],methods=[GET]}" onto public java.util.List<com.bootdo.common.domain.DictDO> com.bootdo.common.controller.DictController.listByType(java.lang.String)
2019-04-03 17:07:20 -Mapped "{[/common/dict/add/{type}/{description}],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.addD(org.springframework.ui.Model,java.lang.String,java.lang.String)
2019-04-03 17:07:20 -Mapped "{[/common/sysFile/add],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.FileController.add()
2019-04-03 17:07:20 -Mapped "{[/common/sysFile/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.remove(java.lang.Long,javax.servlet.http.HttpServletRequest)
2019-04-03 17:07:20 -Mapped "{[/common/sysFile/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.remove(java.lang.Long[])
2019-04-03 17:07:20 -Mapped "{[/common/sysFile/update]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.update(com.bootdo.common.domain.FileDO)
2019-04-03 17:07:20 -Mapped "{[/common/sysFile/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.common.controller.FileController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 17:07:20 -Mapped "{[/common/sysFile/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.save(com.bootdo.common.domain.FileDO)
2019-04-03 17:07:20 -Mapped "{[/common/sysFile/info/{id}]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.info(java.lang.Long)
2019-04-03 17:07:20 -Mapped "{[/common/sysFile/edit],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.FileController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 17:07:20 -Mapped "{[/common/sysFile/upload],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.FileController.upload(org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpServletRequest)
2019-04-03 17:07:20 -Mapped "{[/common/sysFile],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.FileController.sysFile(org.springframework.ui.Model)
2019-04-03 17:07:20 -Mapped "{[/common/generator/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.GeneratorController.update(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 17:07:20 -Mapped "{[/common/generator/list],methods=[GET]}" onto java.util.List<java.util.Map<java.lang.String, java.lang.Object>> com.bootdo.common.controller.GeneratorController.list()
2019-04-03 17:07:20 -Mapped "{[/common/generator/code/{tableName}]}" onto public void com.bootdo.common.controller.GeneratorController.code(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String) throws java.io.IOException
2019-04-03 17:07:20 -Mapped "{[/common/generator/edit],methods=[GET]}" onto public java.lang.String com.bootdo.common.controller.GeneratorController.edit(org.springframework.ui.Model)
2019-04-03 17:07:20 -Mapped "{[/common/generator/batchCode]}" onto public void com.bootdo.common.controller.GeneratorController.batchCode(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String) throws java.io.IOException
2019-04-03 17:07:20 -Mapped "{[/common/generator],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.GeneratorController.generator()
2019-04-03 17:07:20 -Mapped "{[/common/job/add],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.JobController.add()
2019-04-03 17:07:20 -Mapped "{[/common/job/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.remove(java.lang.Long)
2019-04-03 17:07:20 -Mapped "{[/common/job/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.remove(java.lang.Long[])
2019-04-03 17:07:20 -Mapped "{[/common/job/update],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.update(com.bootdo.common.domain.TaskDO)
2019-04-03 17:07:20 -Mapped "{[/common/job/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.common.controller.JobController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 17:07:20 -Mapped "{[/common/job/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.save(com.bootdo.common.domain.TaskDO)
2019-04-03 17:07:20 -Mapped "{[/common/job/info/{id}]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.info(java.lang.Long)
2019-04-03 17:07:20 -Mapped "{[/common/job/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.JobController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 17:07:20 -Mapped "{[/common/job/changeJobStatus],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.changeJobStatus(java.lang.Long,java.lang.String)
2019-04-03 17:07:20 -Mapped "{[/common/job],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.JobController.taskScheduleJob()
2019-04-03 17:07:20 -Mapped "{[/common/log/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.LogController.remove(java.lang.Long)
2019-04-03 17:07:20 -Mapped "{[/common/log],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.LogController.log()
2019-04-03 17:07:20 -Mapped "{[/common/log/list],methods=[GET]}" onto com.bootdo.common.domain.PageDO<com.bootdo.common.domain.LogDO> com.bootdo.common.controller.LogController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 17:07:20 -Mapped "{[/common/log/batchRemove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.LogController.batchRemove(java.lang.Long[])
2019-04-03 17:07:20 -Mapped "{[/common/long],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.LongController.Long()
2019-04-03 17:07:20 -Mapped "{[/common/time],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.TimeController.Time()
2019-04-03 17:07:20 -Mapped "{[/error]}" onto public com.bootdo.common.utils.R com.bootdo.common.exception.MainsiteErrorController.handleError(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-04-03 17:07:20 -Mapped "{[/error],produces=[text/html]}" onto public org.springframework.web.servlet.ModelAndView com.bootdo.common.exception.MainsiteErrorController.errorHtml(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-04-03 17:07:20 -Mapped "{[/elec/elec/add],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecController.add()
2019-04-03 17:07:20 -Mapped "{[/elec/elec/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.remove(java.lang.Long)
2019-04-03 17:07:20 -Mapped "{[/elec/elec/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.remove(java.lang.Long[])
2019-04-03 17:07:20 -Mapped "{[/elec/elec/update],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.update(com.bootdo.elec.domain.ElecDO)
2019-04-03 17:07:20 -Mapped "{[/elec/elec/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.elec.controller.ElecController.list(java.util.Map<java.lang.String, java.lang.Object>,com.bootdo.elec.domain.ElecDO)
2019-04-03 17:07:20 -Mapped "{[/elec/elec/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.save(com.bootdo.elec.domain.ElecDO)
2019-04-03 17:07:20 -Mapped "{[/elec/elec/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 17:07:20 -Mapped "{[/elec/elec/exprotElec],methods=[GET]}" onto public void com.bootdo.elec.controller.ElecController.exprotExcel(com.bootdo.elec.vo.ElecVo,javax.servlet.http.HttpServletResponse)
2019-04-03 17:07:20 -Mapped "{[/elec/elec],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecController.Elec()
2019-04-03 17:07:20 -Mapped "{[/elec/elecInto/exprotElecIntoExcel],methods=[GET]}" onto public void com.bootdo.elec.controller.ElecIntoController.exprotExcel(com.bootdo.elec.vo.ElecVo,javax.servlet.http.HttpServletResponse)
2019-04-03 17:07:20 -Mapped "{[/elec/elecInto],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecIntoController.ElecInto()
2019-04-03 17:07:20 -Mapped "{[/elec/elecInto/importElecIntoExcel],methods=[POST]}" onto public java.util.Map<java.lang.String, java.lang.Object> com.bootdo.elec.controller.ElecIntoController.importElecIntoExcel(org.springframework.web.multipart.MultipartFile,com.bootdo.elec.vo.ElecVo) throws java.lang.Exception
2019-04-03 17:07:20 -Mapped "{[/elec/elecPrice/add],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecPriceController.add()
2019-04-03 17:07:20 -Mapped "{[/elec/elecPrice/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecPriceController.remove(java.lang.Long)
2019-04-03 17:07:20 -Mapped "{[/elec/elecPrice/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecPriceController.remove(java.lang.Long[])
2019-04-03 17:07:20 -Mapped "{[/elec/elecPrice/update]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecPriceController.update(com.bootdo.elec.domain.ElecPriceDO)
2019-04-03 17:07:20 -Mapped "{[/elec/elecPrice/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.elec.controller.ElecPriceController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 17:07:20 -Mapped "{[/elec/elecPrice/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecPriceController.save(com.bootdo.elec.domain.ElecPriceDO,com.bootdo.elec.domain.ElecDO)
2019-04-03 17:07:20 -Mapped "{[/elec/elecPrice/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecPriceController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 17:07:20 -Mapped "{[/elec/elecPrice],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecPriceController.ElecPrice()
2019-04-03 17:07:20 -Mapped "{[/elec/elecUpLoad],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecUpLoadController.Elec()
2019-04-03 17:07:20 -Mapped "{[/elec/elecUpLoad/importElecExcel],methods=[POST]}" onto public java.util.Map<java.lang.String, java.lang.Object> com.bootdo.elec.controller.ElecUpLoadController.importElecExcel(org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpServletRequest) throws java.lang.Exception
2019-04-03 17:07:20 -Mapped "{[/heat/heat/add],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatController.add()
2019-04-03 17:07:20 -Mapped "{[/heat/heat/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatController.remove(java.lang.Integer)
2019-04-03 17:07:20 -Mapped "{[/heat/heat/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatController.remove(java.lang.Integer[])
2019-04-03 17:07:20 -Mapped "{[/heat/heat/update]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatController.update(com.bootdo.heat.domain.HeatDO)
2019-04-03 17:07:20 -Mapped "{[/heat/heat/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.heat.controller.HeatController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 17:07:20 -Mapped "{[/heat/heat/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatController.save(com.bootdo.heat.domain.HeatDO)
2019-04-03 17:07:20 -Mapped "{[/heat/heat/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatController.edit(java.lang.Integer,org.springframework.ui.Model)
2019-04-03 17:07:20 -Mapped "{[/heat/heat/exprotHeat],methods=[GET]}" onto public void com.bootdo.heat.controller.HeatController.exprotExcel(com.bootdo.heat.vo.HeatVo,javax.servlet.http.HttpServletResponse)
2019-04-03 17:07:20 -Mapped "{[/heat/heat],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatController.Heat()
2019-04-03 17:07:20 -Mapped "{[/heat/heatInto/exprotHeatIntoExcel],methods=[GET]}" onto public void com.bootdo.heat.controller.HeatIntoController.exprotExcel(com.bootdo.heat.vo.HeatVo,javax.servlet.http.HttpServletResponse)
2019-04-03 17:07:20 -Mapped "{[/heat/heatInto],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatIntoController.HeatInto()
2019-04-03 17:07:20 -Mapped "{[/heat/heatPrice/add],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatPriceController.add()
2019-04-03 17:07:20 -Mapped "{[/heat/heatPrice/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatPriceController.remove(java.lang.Long)
2019-04-03 17:07:20 -Mapped "{[/heat/heatPrice/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatPriceController.remove(java.lang.Long[])
2019-04-03 17:07:20 -Mapped "{[/heat/heatPrice/update]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatPriceController.update(com.bootdo.heat.domain.HeatPriceDO)
2019-04-03 17:07:20 -Mapped "{[/heat/heatPrice/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.heat.controller.HeatPriceController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 17:07:20 -Mapped "{[/heat/heatPrice/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatPriceController.save(com.bootdo.heat.domain.HeatPriceDO)
2019-04-03 17:07:20 -Mapped "{[/heat/heatPrice/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatPriceController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 17:07:20 -Mapped "{[/heat/heatPrice],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatPriceController.HeatPrice()
2019-04-03 17:07:20 -Mapped "{[/heat/heatUpLoad/createHeatExcel],methods=[POST]}" onto public java.lang.String com.bootdo.heat.controller.HeatUpLoadController.createHeatExcel(com.bootdo.heat.domain.HeatDO) throws java.lang.Exception
2019-04-03 17:07:20 -Mapped "{[/heat/heatUpLoad],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatUpLoadController.HeatUpLoad()
2019-04-03 17:07:20 -Mapped "{[/heat/heatUpLoad/importHeatExcel]}" onto public java.lang.String com.bootdo.heat.controller.HeatUpLoadController.importHeatExcel(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)
2019-04-03 17:07:20 -Mapped "{[/heat/heatUpLoad/exprotHeatExcel],methods=[GET]}" onto public void com.bootdo.heat.controller.HeatUpLoadController.exprotHeatExcel(com.bootdo.heat.vo.HeatVo,javax.servlet.http.HttpServletResponse)
2019-04-03 17:07:20 -Mapped "{[/moneyList/moneyList/queryAllUserName],methods=[POST]}" onto public java.util.List<com.bootdo.moneyList.damain.MoneyListDO> com.bootdo.moneyList.controller.MoneyListController.getAllUserName(com.bootdo.moneyList.damain.MoneyListDO)
2019-04-03 17:07:20 -Mapped "{[/moneyList/moneyList],methods=[GET]}" onto java.lang.String com.bootdo.moneyList.controller.MoneyListController.MoneyList()
2019-04-03 17:07:20 -Mapped "{[/moneyList/moneyList/updateMoney],methods=[POST]}" onto public java.util.List<com.bootdo.moneyList.damain.MoneyListDO> com.bootdo.moneyList.controller.MoneyListController.updateMoney(com.bootdo.moneyList.damain.MoneyListDO)
2019-04-03 17:07:20 -Mapped "{[/moneyList/moneyList/queryAllUser],methods=[POST]}" onto public java.util.List<com.bootdo.moneyList.damain.MoneyListDO> com.bootdo.moneyList.controller.MoneyListController.queryAllUser(com.bootdo.moneyList.damain.MoneyListDO)
2019-04-03 17:07:20 -Mapped "{[/moneyLog/elecLog/add],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.ElecLogController.add()
2019-04-03 17:07:20 -Mapped "{[/moneyLog/elecLog/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.ElecLogController.remove(java.lang.Long)
2019-04-03 17:07:20 -Mapped "{[/moneyLog/elecLog/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.ElecLogController.remove(java.lang.Long[])
2019-04-03 17:07:20 -Mapped "{[/moneyLog/elecLog/update]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.ElecLogController.update(com.bootdo.moneyLog.domain.ElecLogDO)
2019-04-03 17:07:20 -Mapped "{[/moneyLog/elecLog/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.moneyLog.controller.ElecLogController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 17:07:20 -Mapped "{[/moneyLog/elecLog/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.ElecLogController.save(com.bootdo.moneyLog.domain.ElecLogDO)
2019-04-03 17:07:20 -Mapped "{[/moneyLog/elecLog/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.ElecLogController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 17:07:20 -Mapped "{[/moneyLog/elecLog],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.ElecLogController.moneyLog()
2019-04-03 17:07:20 -Mapped "{[/moneyLog/elecLog/exprotElecLog],methods=[GET]}" onto public void com.bootdo.moneyLog.controller.ElecLogController.exprotElecLog(com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-03 17:07:20 -Mapped "{[/moneyLog/heatLog/add],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.HeatLogController.add()
2019-04-03 17:07:20 -Mapped "{[/moneyLog/heatLog/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.HeatLogController.remove(java.lang.Long)
2019-04-03 17:07:20 -Mapped "{[/moneyLog/heatLog/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.HeatLogController.remove(java.lang.Long[])
2019-04-03 17:07:20 -Mapped "{[/moneyLog/heatLog/update]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.HeatLogController.update(com.bootdo.moneyLog.domain.HeatLogDO)
2019-04-03 17:07:20 -Mapped "{[/moneyLog/heatLog/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.moneyLog.controller.HeatLogController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 17:07:20 -Mapped "{[/moneyLog/heatLog/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.HeatLogController.save(com.bootdo.moneyLog.domain.HeatLogDO)
2019-04-03 17:07:20 -Mapped "{[/moneyLog/heatLog/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.HeatLogController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 17:07:20 -Mapped "{[/moneyLog/heatLog/exprotHeatLog],methods=[GET]}" onto public void com.bootdo.moneyLog.controller.HeatLogController.exprotHeatLog(com.bootdo.moneyLog.vo.HeatLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-03 17:07:20 -Mapped "{[/moneyLog/heatLog],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.HeatLogController.HeatLog()
2019-04-03 17:07:20 -Mapped "{[/moneyLog/waterLog/add],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.WaterLogController.add()
2019-04-03 17:07:20 -Mapped "{[/moneyLog/waterLog/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.WaterLogController.remove(java.lang.Long)
2019-04-03 17:07:20 -Mapped "{[/moneyLog/waterLog/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.WaterLogController.remove(java.lang.Long[])
2019-04-03 17:07:20 -Mapped "{[/moneyLog/waterLog/update]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.WaterLogController.update(com.bootdo.moneyLog.domain.WaterLogDO)
2019-04-03 17:07:20 -Mapped "{[/moneyLog/waterLog/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.moneyLog.controller.WaterLogController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 17:07:20 -Mapped "{[/moneyLog/waterLog/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.WaterLogController.save(com.bootdo.moneyLog.domain.WaterLogDO)
2019-04-03 17:07:20 -Mapped "{[/moneyLog/waterLog/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.WaterLogController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 17:07:20 -Mapped "{[/moneyLog/waterLog/exprotWaterLog],methods=[GET]}" onto public void com.bootdo.moneyLog.controller.WaterLogController.exprotWaterLog(com.bootdo.moneyLog.vo.WaterLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-03 17:07:20 -Mapped "{[/moneyLog/waterLog],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.WaterLogController.WaterLog()
2019-04-03 17:07:20 -Mapped "{[/oa/notify/add],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.add()
2019-04-03 17:07:20 -Mapped "{[/oa/notify/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.remove(java.lang.Long)
2019-04-03 17:07:20 -Mapped "{[/oa/notify/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.remove(java.lang.Long[])
2019-04-03 17:07:20 -Mapped "{[/oa/notify/update]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.update(com.bootdo.oa.domain.NotifyDO)
2019-04-03 17:07:20 -Mapped "{[/oa/notify/read/{id}],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.read(java.lang.Long,org.springframework.ui.Model)
2019-04-03 17:07:20 -Mapped "{[/oa/notify/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.oa.controller.NotifyController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 17:07:20 -Mapped "{[/oa/notify/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.save(com.bootdo.oa.domain.NotifyDO)
2019-04-03 17:07:20 -Mapped "{[/oa/notify/message],methods=[GET]}" onto com.bootdo.common.utils.PageUtils com.bootdo.oa.controller.NotifyController.message()
2019-04-03 17:07:20 -Mapped "{[/oa/notify/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 17:07:20 -Mapped "{[/oa/notify/selfNotify],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.selefNotify()
2019-04-03 17:07:20 -Mapped "{[/oa/notify/selfList],methods=[GET]}" onto com.bootdo.common.utils.PageUtils com.bootdo.oa.controller.NotifyController.selfList(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 17:07:20 -Mapped "{[/oa/notify],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.oaNotify()
2019-04-03 17:07:20 -Mapped "{[/print/print/add],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.add()
2019-04-03 17:07:20 -Mapped "{[/print/print/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.print.controller.PrintController.remove(java.lang.Long)
2019-04-03 17:07:20 -Mapped "{[/print/print/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.print.controller.PrintController.remove(java.lang.Long[])
2019-04-03 17:07:20 -Mapped "{[/print/print/update]}" onto public com.bootdo.common.utils.R com.bootdo.print.controller.PrintController.update(com.bootdo.print.domain.PrintDO)
2019-04-03 17:07:20 -Mapped "{[/print/print/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.print.controller.PrintController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 17:07:20 -Mapped "{[/print/print/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.print.controller.PrintController.save(java.lang.String,com.bootdo.print.domain.PrintDO)
2019-04-03 17:07:20 -Mapped "{[/print/print/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 17:07:20 -Mapped "{[/print/print/printEdit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.printEdit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 17:07:20 -Mapped "{[/print/print/exprotPrint],methods=[GET]}" onto public void com.bootdo.print.controller.PrintController.exprotPrint(com.bootdo.print.vo.PrintVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-03 17:07:20 -Mapped "{[/print/print],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.Print()
2019-04-03 17:07:20 -Mapped "{[/system/sysDept/add/{pId}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.add(java.lang.Long,org.springframework.ui.Model)
2019-04-03 17:07:20 -Mapped "{[/system/sysDept/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.remove(java.lang.Long)
2019-04-03 17:07:20 -Mapped "{[/system/sysDept/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.remove(java.lang.Long[])
2019-04-03 17:07:20 -Mapped "{[/system/sysDept/update]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.update(com.bootdo.system.domain.DeptDO)
2019-04-03 17:07:20 -Mapped "{[/system/sysDept/list],methods=[GET]}" onto public java.util.List<com.bootdo.system.domain.DeptDO> com.bootdo.system.controller.DeptController.list()
2019-04-03 17:07:20 -Mapped "{[/system/sysDept/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.save(com.bootdo.system.domain.DeptDO)
2019-04-03 17:07:20 -Mapped "{[/system/sysDept/tree],methods=[GET]}" onto public com.bootdo.common.domain.Tree<com.bootdo.system.domain.DeptDO> com.bootdo.system.controller.DeptController.tree()
2019-04-03 17:07:20 -Mapped "{[/system/sysDept/edit/{deptId}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 17:07:20 -Mapped "{[/system/sysDept/treeView],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.treeView()
2019-04-03 17:07:20 -Mapped "{[/system/sysDept],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.dept()
2019-04-03 17:07:20 -Mapped "{[/index],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.index(org.springframework.ui.Model)
2019-04-03 17:07:20 -Mapped "{[/main],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.main()
2019-04-03 17:07:20 -Mapped "{[/login],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.login(org.springframework.ui.Model)
2019-04-03 17:07:20 -Mapped "{[/logout],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.logout()
2019-04-03 17:07:20 -Mapped "{[/ || ],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.welcome(org.springframework.ui.Model)
2019-04-03 17:07:20 -Mapped "{[/login],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.LoginController.ajaxLogin(java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest)
2019-04-03 17:07:20 -Mapped "{[/getVerify],methods=[GET]}" onto public void com.bootdo.system.controller.LoginController.getVerify(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-04-03 17:07:20 -Mapped "{[/sys/menu/add/{pId}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.MenuController.add(org.springframework.ui.Model,java.lang.Long)
2019-04-03 17:07:20 -Mapped "{[/sys/menu/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.MenuController.remove(java.lang.Long)
2019-04-03 17:07:20 -Mapped "{[/sys/menu/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.MenuController.update(com.bootdo.system.domain.MenuDO)
2019-04-03 17:07:20 -Mapped "{[/sys/menu/list]}" onto java.util.List<com.bootdo.system.domain.MenuDO> com.bootdo.system.controller.MenuController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 17:07:20 -Mapped "{[/sys/menu/save],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.MenuController.save(com.bootdo.system.domain.MenuDO)
2019-04-03 17:07:20 -Mapped "{[/sys/menu/tree/{roleId}],methods=[GET]}" onto com.bootdo.common.domain.Tree<com.bootdo.system.domain.MenuDO> com.bootdo.system.controller.MenuController.tree(java.lang.Long)
2019-04-03 17:07:20 -Mapped "{[/sys/menu/tree],methods=[GET]}" onto com.bootdo.common.domain.Tree<com.bootdo.system.domain.MenuDO> com.bootdo.system.controller.MenuController.tree()
2019-04-03 17:07:20 -Mapped "{[/sys/menu/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.MenuController.edit(org.springframework.ui.Model,java.lang.Long)
2019-04-03 17:07:20 -Mapped "{[/sys/menu],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.MenuController.menu(org.springframework.ui.Model)
2019-04-03 17:07:20 -Mapped "{[/sys/role/add],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.RoleController.add()
2019-04-03 17:07:20 -Mapped "{[/sys/role/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.update(com.bootdo.system.domain.RoleDO)
2019-04-03 17:07:20 -Mapped "{[/sys/role/list],methods=[GET]}" onto java.util.List<com.bootdo.system.domain.RoleDO> com.bootdo.system.controller.RoleController.list()
2019-04-03 17:07:20 -Mapped "{[/sys/role/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.save(java.lang.Long)
2019-04-03 17:07:20 -Mapped "{[/sys/role/save],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.save(com.bootdo.system.domain.RoleDO)
2019-04-03 17:07:20 -Mapped "{[/sys/role/batchRemove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.batchRemove(java.lang.Long[])
2019-04-03 17:07:20 -Mapped "{[/sys/role],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.RoleController.role()
2019-04-03 17:07:20 -Mapped "{[/sys/role/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.RoleController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 17:07:20 -Mapped "{[/sys/online/list]}" onto public java.util.List<com.bootdo.system.domain.UserOnline> com.bootdo.system.controller.SessionController.list()
2019-04-03 17:07:20 -Mapped "{[/sys/online/sessionList]}" onto public java.util.Collection<org.apache.shiro.session.Session> com.bootdo.system.controller.SessionController.sessionList()
2019-04-03 17:07:20 -Mapped "{[/sys/online/forceLogout/{sessionId}]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.SessionController.forceLogout(java.lang.String,org.springframework.web.servlet.mvc.support.RedirectAttributes)
2019-04-03 17:07:20 -Mapped "{[/sys/online],methods=[GET]}" onto public java.lang.String com.bootdo.system.controller.SessionController.online()
2019-04-03 17:07:20 -Mapped "{[/sys/user/exit],methods=[POST]}" onto boolean com.bootdo.system.controller.UserController.exit(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 17:07:20 -Mapped "{[/sys/user/add],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.add(org.springframework.ui.Model)
2019-04-03 17:07:20 -Mapped "{[/sys/user/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.remove(java.lang.Long)
2019-04-03 17:07:20 -Mapped "{[/sys/user/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.update(com.bootdo.system.domain.UserDO)
2019-04-03 17:07:20 -Mapped "{[/sys/user/list],methods=[GET]}" onto com.bootdo.common.utils.PageUtils com.bootdo.system.controller.UserController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 17:07:20 -Mapped "{[/sys/user/save],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.save(com.bootdo.system.domain.UserDO)
2019-04-03 17:07:20 -Mapped "{[/sys/user/batchRemove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.batchRemove(java.lang.Long[])
2019-04-03 17:07:20 -Mapped "{[/sys/user/tree],methods=[GET]}" onto public com.bootdo.common.domain.Tree<com.bootdo.system.domain.DeptDO> com.bootdo.system.controller.UserController.tree()
2019-04-03 17:07:20 -Mapped "{[/sys/user],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.user(org.springframework.ui.Model)
2019-04-03 17:07:20 -Mapped "{[/sys/user/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.edit(org.springframework.ui.Model,java.lang.Long)
2019-04-03 17:07:20 -Mapped "{[/sys/user/treeView],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.treeView()
2019-04-03 17:07:20 -Mapped "{[/sys/user/updatePeronal],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.updatePeronal(com.bootdo.system.domain.UserDO)
2019-04-03 17:07:20 -Mapped "{[/sys/user/resetPwd/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.resetPwd(java.lang.Long,org.springframework.ui.Model)
2019-04-03 17:07:20 -Mapped "{[/sys/user/resetPwd],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.resetPwd(com.bootdo.system.vo.UserVO)
2019-04-03 17:07:20 -Mapped "{[/sys/user/personal],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.personal(org.springframework.ui.Model)
2019-04-03 17:07:20 -Mapped "{[/sys/user/uploadImg],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.uploadImg(org.springframework.web.multipart.MultipartFile,java.lang.String,javax.servlet.http.HttpServletRequest)
2019-04-03 17:07:20 -Mapped "{[/sys/user/adminResetPwd],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.adminResetPwd(com.bootdo.system.vo.UserVO)
2019-04-03 17:07:20 -Mapped "{[/file/downImport/{importType}],methods=[GET]}" onto public void com.bootdo.temple.controller.TempletController.downImport(javax.servlet.http.HttpServletResponse,java.lang.String)
2019-04-03 17:07:20 -Mapped "{[/water/water/add],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterController.add()
2019-04-03 17:07:20 -Mapped "{[/water/water/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterController.remove(java.lang.Long)
2019-04-03 17:07:20 -Mapped "{[/water/water/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterController.remove(java.lang.Long[])
2019-04-03 17:07:20 -Mapped "{[/water/water/update]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterController.update(com.bootdo.water.domain.WaterDO)
2019-04-03 17:07:20 -Mapped "{[/water/water/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.water.controller.WaterController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 17:07:20 -Mapped "{[/water/water/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterController.save(com.bootdo.water.domain.WaterDO)
2019-04-03 17:07:20 -Mapped "{[/water/water/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 17:07:20 -Mapped "{[/water/water/exprotWater],methods=[GET]}" onto public void com.bootdo.water.controller.WaterController.exprotExcel(com.bootdo.water.vo.WaterVo,javax.servlet.http.HttpServletResponse)
2019-04-03 17:07:20 -Mapped "{[/water/water],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterController.Water()
2019-04-03 17:07:20 -Mapped "{[/water/waterInto/exprotWaterIntoExcel],methods=[GET]}" onto public void com.bootdo.water.controller.WaterIntoController.exprotExcel(com.bootdo.water.vo.WaterVo,javax.servlet.http.HttpServletResponse)
2019-04-03 17:07:20 -Mapped "{[/water/waterInto],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterIntoController.WaterInto()
2019-04-03 17:07:20 -Mapped "{[/water/waterPrice/add],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterPriceController.add()
2019-04-03 17:07:20 -Mapped "{[/water/waterPrice/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterPriceController.remove(java.lang.Long)
2019-04-03 17:07:20 -Mapped "{[/water/waterPrice/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterPriceController.remove(java.lang.Long[])
2019-04-03 17:07:20 -Mapped "{[/water/waterPrice/update]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterPriceController.update(com.bootdo.water.domain.WaterPriceDO)
2019-04-03 17:07:20 -Mapped "{[/water/waterPrice/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.water.controller.WaterPriceController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 17:07:20 -Mapped "{[/water/waterPrice/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterPriceController.save(com.bootdo.water.domain.WaterPriceDO)
2019-04-03 17:07:20 -Mapped "{[/water/waterPrice/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterPriceController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 17:07:20 -Mapped "{[/water/waterPrice],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterPriceController.WaterPrice()
2019-04-03 17:07:20 -Mapped "{[/water/waterUpLoad/importWaterExcel]}" onto public java.lang.String com.bootdo.water.controller.WaterUpLoadController.importWaterExcel(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)
2019-04-03 17:07:20 -Mapped "{[/water/waterUpLoad],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterUpLoadController.WaterUpLoad()
2019-04-03 17:07:20 -Mapped "{[/water/waterUpLoad/createWaterExcel],methods=[POST]}" onto public java.lang.String com.bootdo.water.controller.WaterUpLoadController.createWaterExcel(com.bootdo.water.domain.WaterDO) throws java.lang.Exception
2019-04-03 17:07:20 -Mapped "{[/water/waterUpLoad/exprotWaterExcel],methods=[GET]}" onto public void com.bootdo.water.controller.WaterUpLoadController.exprotWaterExcel(com.bootdo.water.vo.WaterVo,javax.servlet.http.HttpServletResponse)
2019-04-03 17:07:20 -Mapped "{[/v2/api-docs],methods=[GET],produces=[application/json || application/hal+json]}" onto public org.springframework.http.ResponseEntity<springfox.documentation.spring.web.json.Json> springfox.documentation.swagger2.web.Swagger2Controller.getDocumentation(java.lang.String,javax.servlet.http.HttpServletRequest)
2019-04-03 17:07:20 -Mapped "{[/swagger-resources/configuration/ui]}" onto org.springframework.http.ResponseEntity<springfox.documentation.swagger.web.UiConfiguration> springfox.documentation.swagger.web.ApiResourceController.uiConfiguration()
2019-04-03 17:07:20 -Mapped "{[/swagger-resources]}" onto org.springframework.http.ResponseEntity<java.util.List<springfox.documentation.swagger.web.SwaggerResource>> springfox.documentation.swagger.web.ApiResourceController.swaggerResources()
2019-04-03 17:07:20 -Mapped "{[/swagger-resources/configuration/security]}" onto org.springframework.http.ResponseEntity<springfox.documentation.swagger.web.SecurityConfiguration> springfox.documentation.swagger.web.ApiResourceController.securityConfiguration()
2019-04-03 17:07:21 -Initializing ExecutorService  'messageBrokerTaskScheduler'
2019-04-03 17:07:21 -Mapped URL path [/endpointChat/**] onto handler of type [class org.springframework.web.socket.sockjs.support.SockJsHttpRequestHandler]
2019-04-03 17:07:21 -Initializing ExecutorService  'brokerChannelExecutor'
2019-04-03 17:07:22 -Mapped URL path [/**/favicon.ico] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-04-03 17:07:22 -Looking for @ControllerAdvice: org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@6fdbe764: startup date [Wed Apr 03 17:07:04 CST 2019]; root of context hierarchy
2019-04-03 17:07:22 -Mapped URL path [/webjars/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-04-03 17:07:22 -Mapped URL path [/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-04-03 17:07:22 -Mapped URL path [/files/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-04-03 17:07:22 -Detected @ExceptionHandler methods in BDExceptionHandler
2019-04-03 17:07:23 -[THYMELEAF][main] Template Mode 'LEGACYHTML5' is deprecated. Using Template Mode 'HTML' instead.
2019-04-03 17:07:30 -Registering beans for JMX exposure on startup
2019-04-03 17:07:30 -Bean with name 'dataSource' has been autodetected for JMX exposure
2019-04-03 17:07:30 -Located MBean 'dataSource': registering with JMX server as MBean [com.alibaba.druid.pool:name=dataSource,type=DruidDataSource]
2019-04-03 17:07:30 -Starting beans in phase 2147483647
2019-04-03 17:07:30 -Context refreshed
2019-04-03 17:07:31 -Found 1 custom documentation plugin(s)
2019-04-03 17:07:31 -Scanning for api listing references
2019-04-03 17:07:31 -Generating unique operation named: exprotElecLogUsingGET_1
2019-04-03 17:07:31 -Generating unique operation named: getCountDUsingPOST_1
2019-04-03 17:07:31 -Generating unique operation named: exprotElecLogUsingGET_2
2019-04-03 17:07:31 -Generating unique operation named: getCountDUsingPOST_2
2019-04-03 17:07:31 -Generating unique operation named: exprotElecLogUsingGET_3
2019-04-03 17:07:31 -Generating unique operation named: getCountDUsingPOST_3
2019-04-03 17:07:31 -Generating unique operation named: removeUsingPOST_1
2019-04-03 17:07:31 -Generating unique operation named: addUsingGET_1
2019-04-03 17:07:31 -Generating unique operation named: editUsingGET_1
2019-04-03 17:07:31 -Generating unique operation named: listUsingGET_1
2019-04-03 17:07:31 -Generating unique operation named: removeUsingPOST_2
2019-04-03 17:07:31 -Generating unique operation named: removeUsingPOST_3
2019-04-03 17:07:31 -Generating unique operation named: saveUsingPOST_1
2019-04-03 17:07:31 -Generating unique operation named: updateUsingGET_1
2019-04-03 17:07:31 -Generating unique operation named: updateUsingHEAD_1
2019-04-03 17:07:31 -Generating unique operation named: updateUsingPOST_1
2019-04-03 17:07:31 -Generating unique operation named: updateUsingPUT_1
2019-04-03 17:07:31 -Generating unique operation named: updateUsingPATCH_1
2019-04-03 17:07:31 -Generating unique operation named: updateUsingDELETE_1
2019-04-03 17:07:31 -Generating unique operation named: updateUsingOPTIONS_1
2019-04-03 17:07:31 -Generating unique operation named: updateUsingTRACE_1
2019-04-03 17:07:31 -Generating unique operation named: addUsingGET_2
2019-04-03 17:07:31 -Generating unique operation named: editUsingGET_2
2019-04-03 17:07:31 -Generating unique operation named: listUsingGET_2
2019-04-03 17:07:31 -Generating unique operation named: removeUsingPOST_4
2019-04-03 17:07:32 -Generating unique operation named: removeUsingPOST_5
2019-04-03 17:07:32 -Generating unique operation named: saveUsingPOST_2
2019-04-03 17:07:32 -Generating unique operation named: updateUsingPOST_2
2019-04-03 17:07:32 -Generating unique operation named: exprotExcelUsingGET_1
2019-04-03 17:07:32 -Generating unique operation named: addUsingGET_3
2019-04-03 17:07:32 -Generating unique operation named: editUsingGET_3
2019-04-03 17:07:32 -Generating unique operation named: exprotElecLogUsingGET_4
2019-04-03 17:07:32 -Generating unique operation named: listUsingGET_3
2019-04-03 17:07:32 -Generating unique operation named: removeUsingPOST_6
2019-04-03 17:07:32 -Generating unique operation named: removeUsingPOST_7
2019-04-03 17:07:32 -Generating unique operation named: saveUsingPOST_3
2019-04-03 17:07:32 -Generating unique operation named: updateUsingGET_2
2019-04-03 17:07:32 -Generating unique operation named: updateUsingHEAD_2
2019-04-03 17:07:32 -Generating unique operation named: updateUsingPOST_3
2019-04-03 17:07:32 -Generating unique operation named: updateUsingPUT_2
2019-04-03 17:07:32 -Generating unique operation named: updateUsingPATCH_2
2019-04-03 17:07:32 -Generating unique operation named: updateUsingDELETE_2
2019-04-03 17:07:32 -Generating unique operation named: updateUsingOPTIONS_2
2019-04-03 17:07:32 -Generating unique operation named: updateUsingTRACE_2
2019-04-03 17:07:32 -Generating unique operation named: addUsingGET_4
2019-04-03 17:07:32 -Generating unique operation named: editUsingGET_4
2019-04-03 17:07:32 -Generating unique operation named: listUsingGET_4
2019-04-03 17:07:32 -Generating unique operation named: removeUsingPOST_8
2019-04-03 17:07:32 -Generating unique operation named: removeUsingPOST_9
2019-04-03 17:07:32 -Generating unique operation named: saveUsingPOST_4
2019-04-03 17:07:32 -Generating unique operation named: updateUsingGET_3
2019-04-03 17:07:32 -Generating unique operation named: updateUsingHEAD_3
2019-04-03 17:07:32 -Generating unique operation named: updateUsingPOST_4
2019-04-03 17:07:32 -Generating unique operation named: updateUsingPUT_3
2019-04-03 17:07:32 -Generating unique operation named: updateUsingPATCH_3
2019-04-03 17:07:32 -Generating unique operation named: updateUsingDELETE_3
2019-04-03 17:07:32 -Generating unique operation named: updateUsingOPTIONS_3
2019-04-03 17:07:32 -Generating unique operation named: updateUsingTRACE_3
2019-04-03 17:07:32 -Generating unique operation named: ElecUsingGET_1
2019-04-03 17:07:32 -Generating unique operation named: addUsingGET_5
2019-04-03 17:07:32 -Generating unique operation named: editUsingGET_5
2019-04-03 17:07:32 -Generating unique operation named: listUsingGET_5
2019-04-03 17:07:32 -Generating unique operation named: removeUsingPOST_10
2019-04-03 17:07:32 -Generating unique operation named: removeUsingPOST_11
2019-04-03 17:07:32 -Generating unique operation named: saveUsingPOST_5
2019-04-03 17:07:32 -Generating unique operation named: updateUsingGET_4
2019-04-03 17:07:32 -Generating unique operation named: updateUsingHEAD_4
2019-04-03 17:07:32 -Generating unique operation named: updateUsingPOST_5
2019-04-03 17:07:32 -Generating unique operation named: updateUsingPUT_4
2019-04-03 17:07:32 -Generating unique operation named: updateUsingPATCH_4
2019-04-03 17:07:32 -Generating unique operation named: updateUsingDELETE_4
2019-04-03 17:07:32 -Generating unique operation named: updateUsingOPTIONS_4
2019-04-03 17:07:32 -Generating unique operation named: updateUsingTRACE_4
2019-04-03 17:07:32 -Generating unique operation named: editUsingGET_6
2019-04-03 17:07:32 -Generating unique operation named: listUsingGET_6
2019-04-03 17:07:32 -Generating unique operation named: updateUsingPOST_6
2019-04-03 17:07:32 -Generating unique operation named: addUsingGET_6
2019-04-03 17:07:32 -Generating unique operation named: editUsingGET_7
2019-04-03 17:07:32 -Generating unique operation named: exprotExcelUsingGET_2
2019-04-03 17:07:32 -Generating unique operation named: listUsingGET_7
2019-04-03 17:07:32 -Generating unique operation named: removeUsingPOST_12
2019-04-03 17:07:32 -Generating unique operation named: removeUsingPOST_13
2019-04-03 17:07:32 -Generating unique operation named: saveUsingPOST_6
2019-04-03 17:07:32 -Generating unique operation named: updateUsingGET_5
2019-04-03 17:07:32 -Generating unique operation named: updateUsingHEAD_5
2019-04-03 17:07:32 -Generating unique operation named: updateUsingPOST_7
2019-04-03 17:07:32 -Generating unique operation named: updateUsingPUT_5
2019-04-03 17:07:32 -Generating unique operation named: updateUsingPATCH_5
2019-04-03 17:07:32 -Generating unique operation named: updateUsingDELETE_5
2019-04-03 17:07:32 -Generating unique operation named: updateUsingOPTIONS_5
2019-04-03 17:07:32 -Generating unique operation named: updateUsingTRACE_5
2019-04-03 17:07:32 -Generating unique operation named: exprotExcelUsingGET_3
2019-04-03 17:07:32 -Generating unique operation named: addUsingGET_7
2019-04-03 17:07:32 -Generating unique operation named: editUsingGET_8
2019-04-03 17:07:32 -Generating unique operation named: listUsingGET_8
2019-04-03 17:07:32 -Generating unique operation named: removeUsingPOST_14
2019-04-03 17:07:32 -Generating unique operation named: removeUsingPOST_15
2019-04-03 17:07:32 -Generating unique operation named: saveUsingPOST_7
2019-04-03 17:07:32 -Generating unique operation named: updateUsingGET_6
2019-04-03 17:07:32 -Generating unique operation named: updateUsingHEAD_6
2019-04-03 17:07:32 -Generating unique operation named: updateUsingPOST_8
2019-04-03 17:07:32 -Generating unique operation named: updateUsingPUT_6
2019-04-03 17:07:32 -Generating unique operation named: updateUsingPATCH_6
2019-04-03 17:07:32 -Generating unique operation named: updateUsingDELETE_6
2019-04-03 17:07:32 -Generating unique operation named: updateUsingOPTIONS_6
2019-04-03 17:07:32 -Generating unique operation named: updateUsingTRACE_6
2019-04-03 17:07:32 -Generating unique operation named: addUsingGET_8
2019-04-03 17:07:32 -Generating unique operation named: editUsingGET_9
2019-04-03 17:07:32 -Generating unique operation named: listUsingGET_9
2019-04-03 17:07:32 -Generating unique operation named: removeUsingPOST_16
2019-04-03 17:07:32 -Generating unique operation named: removeUsingPOST_17
2019-04-03 17:07:32 -Generating unique operation named: saveUsingPOST_8
2019-04-03 17:07:32 -Generating unique operation named: updateUsingGET_7
2019-04-03 17:07:32 -Generating unique operation named: updateUsingHEAD_7
2019-04-03 17:07:32 -Generating unique operation named: updateUsingPOST_9
2019-04-03 17:07:32 -Generating unique operation named: updateUsingPUT_7
2019-04-03 17:07:32 -Generating unique operation named: updateUsingPATCH_7
2019-04-03 17:07:32 -Generating unique operation named: updateUsingDELETE_7
2019-04-03 17:07:32 -Generating unique operation named: updateUsingOPTIONS_7
2019-04-03 17:07:32 -Generating unique operation named: updateUsingTRACE_7
2019-04-03 17:07:32 -Generating unique operation named: addUsingGET_9
2019-04-03 17:07:32 -Generating unique operation named: editUsingGET_10
2019-04-03 17:07:32 -Generating unique operation named: infoUsingGET_1
2019-04-03 17:07:32 -Generating unique operation named: infoUsingHEAD_1
2019-04-03 17:07:32 -Generating unique operation named: infoUsingPOST_1
2019-04-03 17:07:32 -Generating unique operation named: infoUsingPUT_1
2019-04-03 17:07:32 -Generating unique operation named: infoUsingPATCH_1
2019-04-03 17:07:32 -Generating unique operation named: infoUsingDELETE_1
2019-04-03 17:07:32 -Generating unique operation named: infoUsingOPTIONS_1
2019-04-03 17:07:32 -Generating unique operation named: infoUsingTRACE_1
2019-04-03 17:07:32 -Generating unique operation named: listUsingGET_10
2019-04-03 17:07:32 -Generating unique operation named: removeUsingPOST_18
2019-04-03 17:07:32 -Generating unique operation named: removeUsingPOST_19
2019-04-03 17:07:32 -Generating unique operation named: saveUsingPOST_9
2019-04-03 17:07:32 -Generating unique operation named: updateUsingPOST_10
2019-04-03 17:07:32 -Generating unique operation named: listUsingGET_11
2019-04-03 17:07:32 -Generating unique operation named: removeUsingPOST_20
2019-04-03 17:07:32 -Generating unique operation named: welcomeUsingGET_1
2019-04-03 17:07:32 -Generating unique operation named: addUsingGET_10
2019-04-03 17:07:32 -Generating unique operation named: editUsingGET_11
2019-04-03 17:07:32 -Generating unique operation named: listUsingGET_12
2019-04-03 17:07:32 -Generating unique operation named: removeUsingPOST_21
2019-04-03 17:07:32 -Generating unique operation named: saveUsingPOST_10
2019-04-03 17:07:32 -Generating unique operation named: treeUsingGET_1
2019-04-03 17:07:32 -Generating unique operation named: treeUsingGET_2
2019-04-03 17:07:32 -Generating unique operation named: updateUsingPOST_11
2019-04-03 17:07:33 -Generating unique operation named: addUsingGET_11
2019-04-03 17:07:33 -Generating unique operation named: editUsingGET_12
2019-04-03 17:07:33 -Generating unique operation named: listUsingGET_13
2019-04-03 17:07:33 -Generating unique operation named: removeUsingPOST_22
2019-04-03 17:07:33 -Generating unique operation named: removeUsingPOST_23
2019-04-03 17:07:33 -Generating unique operation named: saveUsingPOST_11
2019-04-03 17:07:33 -Generating unique operation named: updateUsingGET_8
2019-04-03 17:07:33 -Generating unique operation named: updateUsingHEAD_8
2019-04-03 17:07:33 -Generating unique operation named: updateUsingPOST_12
2019-04-03 17:07:33 -Generating unique operation named: updateUsingPUT_8
2019-04-03 17:07:33 -Generating unique operation named: updateUsingPATCH_8
2019-04-03 17:07:33 -Generating unique operation named: updateUsingDELETE_8
2019-04-03 17:07:33 -Generating unique operation named: updateUsingOPTIONS_8
2019-04-03 17:07:33 -Generating unique operation named: updateUsingTRACE_8
2019-04-03 17:07:33 -Generating unique operation named: addUsingGET_12
2019-04-03 17:07:33 -Generating unique operation named: editUsingGET_13
2019-04-03 17:07:33 -Generating unique operation named: listUsingGET_14
2019-04-03 17:07:33 -Generating unique operation named: removeUsingPOST_24
2019-04-03 17:07:33 -Generating unique operation named: removeUsingPOST_25
2019-04-03 17:07:33 -Generating unique operation named: saveUsingPOST_12
2019-04-03 17:07:33 -Generating unique operation named: updateUsingGET_9
2019-04-03 17:07:33 -Generating unique operation named: updateUsingHEAD_9
2019-04-03 17:07:33 -Generating unique operation named: updateUsingPOST_13
2019-04-03 17:07:33 -Generating unique operation named: updateUsingPUT_9
2019-04-03 17:07:33 -Generating unique operation named: updateUsingPATCH_9
2019-04-03 17:07:33 -Generating unique operation named: updateUsingDELETE_9
2019-04-03 17:07:33 -Generating unique operation named: updateUsingOPTIONS_9
2019-04-03 17:07:33 -Generating unique operation named: updateUsingTRACE_9
2019-04-03 17:07:33 -Generating unique operation named: addUsingGET_13
2019-04-03 17:07:33 -Generating unique operation named: batchRemoveUsingPOST_1
2019-04-03 17:07:33 -Generating unique operation named: editUsingGET_14
2019-04-03 17:07:33 -Generating unique operation named: listUsingGET_15
2019-04-03 17:07:33 -Generating unique operation named: saveUsingPOST_13
2019-04-03 17:07:33 -Generating unique operation named: saveUsingPOST_14
2019-04-03 17:07:33 -Generating unique operation named: updateUsingPOST_14
2019-04-03 17:07:33 -Generating unique operation named: listUsingGET_16
2019-04-03 17:07:33 -Generating unique operation named: listUsingHEAD_1
2019-04-03 17:07:33 -Generating unique operation named: listUsingPOST_1
2019-04-03 17:07:33 -Generating unique operation named: listUsingPUT_1
2019-04-03 17:07:33 -Generating unique operation named: listUsingPATCH_1
2019-04-03 17:07:33 -Generating unique operation named: listUsingDELETE_1
2019-04-03 17:07:33 -Generating unique operation named: listUsingOPTIONS_1
2019-04-03 17:07:33 -Generating unique operation named: listUsingTRACE_1
2019-04-03 17:07:33 -Generating unique operation named: addUsingGET_14
2019-04-03 17:07:33 -Generating unique operation named: batchRemoveUsingPOST_2
2019-04-03 17:07:33 -Generating unique operation named: editUsingGET_15
2019-04-03 17:07:33 -Generating unique operation named: listUsingGET_17
2019-04-03 17:07:33 -Generating unique operation named: removeUsingPOST_26
2019-04-03 17:07:33 -Generating unique operation named: saveUsingPOST_15
2019-04-03 17:07:33 -Generating unique operation named: treeUsingGET_3
2019-04-03 17:07:33 -Generating unique operation named: treeViewUsingGET_1
2019-04-03 17:07:33 -Generating unique operation named: updateUsingPOST_15
2019-04-03 17:07:33 -Generating unique operation named: addUsingGET_15
2019-04-03 17:07:33 -Generating unique operation named: editUsingGET_16
2019-04-03 17:07:33 -Generating unique operation named: exprotExcelUsingGET_4
2019-04-03 17:07:33 -Generating unique operation named: listUsingGET_18
2019-04-03 17:07:33 -Generating unique operation named: removeUsingPOST_27
2019-04-03 17:07:33 -Generating unique operation named: removeUsingPOST_28
2019-04-03 17:07:33 -Generating unique operation named: saveUsingPOST_16
2019-04-03 17:07:33 -Generating unique operation named: updateUsingGET_10
2019-04-03 17:07:33 -Generating unique operation named: updateUsingHEAD_10
2019-04-03 17:07:33 -Generating unique operation named: updateUsingPOST_16
2019-04-03 17:07:33 -Generating unique operation named: updateUsingPUT_10
2019-04-03 17:07:33 -Generating unique operation named: updateUsingPATCH_10
2019-04-03 17:07:33 -Generating unique operation named: updateUsingDELETE_10
2019-04-03 17:07:33 -Generating unique operation named: updateUsingOPTIONS_10
2019-04-03 17:07:33 -Generating unique operation named: updateUsingTRACE_10
2019-04-03 17:07:33 -Generating unique operation named: exprotExcelUsingGET_5
2019-04-03 17:07:33 -Generating unique operation named: addUsingGET_16
2019-04-03 17:07:33 -Generating unique operation named: editUsingGET_17
2019-04-03 17:07:33 -Generating unique operation named: listUsingGET_19
2019-04-03 17:07:33 -Generating unique operation named: removeUsingPOST_29
2019-04-03 17:07:33 -Generating unique operation named: removeUsingPOST_30
2019-04-03 17:07:33 -Generating unique operation named: saveUsingPOST_17
2019-04-03 17:07:33 -Generating unique operation named: updateUsingGET_11
2019-04-03 17:07:33 -Generating unique operation named: updateUsingHEAD_11
2019-04-03 17:07:33 -Generating unique operation named: updateUsingPOST_17
2019-04-03 17:07:33 -Generating unique operation named: updateUsingPUT_11
2019-04-03 17:07:33 -Generating unique operation named: updateUsingPATCH_11
2019-04-03 17:07:33 -Generating unique operation named: updateUsingDELETE_11
2019-04-03 17:07:33 -Generating unique operation named: updateUsingOPTIONS_11
2019-04-03 17:07:33 -Generating unique operation named: updateUsingTRACE_11
2019-04-03 17:07:33 -Generating unique operation named: addUsingGET_17
2019-04-03 17:07:33 -Generating unique operation named: editUsingGET_18
2019-04-03 17:07:33 -Generating unique operation named: listUsingGET_20
2019-04-03 17:07:33 -Generating unique operation named: removeUsingPOST_31
2019-04-03 17:07:33 -Generating unique operation named: removeUsingPOST_32
2019-04-03 17:07:33 -Generating unique operation named: saveUsingPOST_18
2019-04-03 17:07:33 -Generating unique operation named: updateUsingGET_12
2019-04-03 17:07:33 -Generating unique operation named: updateUsingHEAD_12
2019-04-03 17:07:33 -Generating unique operation named: updateUsingPOST_18
2019-04-03 17:07:33 -Generating unique operation named: updateUsingPUT_12
2019-04-03 17:07:33 -Generating unique operation named: updateUsingPATCH_12
2019-04-03 17:07:33 -Generating unique operation named: updateUsingDELETE_12
2019-04-03 17:07:33 -Generating unique operation named: updateUsingOPTIONS_12
2019-04-03 17:07:33 -Generating unique operation named: updateUsingTRACE_12
2019-04-03 17:07:33 -Starting Quartz Scheduler now
2019-04-03 17:07:33 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED started.
2019-04-03 17:07:33 -Starting...
2019-04-03 17:07:33 -BrokerAvailabilityEvent[available=true, SimpleBrokerMessageHandler [DefaultSubscriptionRegistry[cache[0 destination(s)], registry[0 sessions]]]]
2019-04-03 17:07:33 -Started.
2019-04-03 17:07:33 -Starting ProtocolHandler ["http-nio-8081"]
2019-04-03 17:07:33 -Using a shared selector for servlet write/read
2019-04-03 17:07:33 -Tomcat started on port(s): 8081 (http) with context path ''
2019-04-03 17:07:33 -Started BootdoApplication in 30.718 seconds (JVM running for 31.527)
2019-04-03 17:07:33 -==>  Preparing: select `id`,`cron_expression`,`method_name`,`is_concurrent`,`description`,`update_by`,`bean_class`,`create_date`,`job_status`,`job_group`,`update_date`,`create_by`,`spring_bean`,`job_name` from sys_task order by id desc 
2019-04-03 17:07:34 -==> Parameters: 
2019-04-03 17:07:34 -<==      Total: 1
2019-04-03 17:08:21 -WebSocketSession[0 current WS(0)-HttpStream(0)-HttpPoll(0), 0 total, 0 closed abnormally (0 connect failure, 0 send limit, 0 transport error)], stompSubProtocol[processed CONNECT(0)-CONNECTED(0)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], outboundChannelpool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], sockJsScheduler[pool size = 1, active threads = 1, queued tasks = 0, completed tasks = 0]
2019-04-03 17:09:25 -Initializing Spring FrameworkServlet 'dispatcherServlet'
2019-04-03 17:09:25 -FrameworkServlet 'dispatcherServlet': initialization started
2019-04-03 17:09:25 -FrameworkServlet 'dispatcherServlet': initialization completed in 100 ms
2019-04-03 17:09:26 -Enabling session validation scheduler...
2019-04-03 17:09:26 -请求地址 : http://localhost:8081/login;JSESSIONID=4a7d8b87-7dc1-4910-a15d-ef1c04c692ed
2019-04-03 17:09:26 -HTTP METHOD : GET
2019-04-03 17:09:26 -CLASS_METHOD : com.bootdo.system.controller.LoginController.login
2019-04-03 17:09:26 -参数 : [{}]
2019-04-03 17:09:26 -耗时 : 5
2019-04-03 17:09:26 -返回值 : login
2019-04-03 17:09:28 -请求地址 : http://localhost:8081/getVerify
2019-04-03 17:09:28 -HTTP METHOD : GET
2019-04-03 17:09:28 -CLASS_METHOD : com.bootdo.system.controller.LoginController.getVerify
2019-04-03 17:09:28 -参数 : [org.apache.shiro.web.servlet.ShiroHttpServletRequest@2007c9e5, org.apache.shiro.web.servlet.ShiroHttpServletResponse@29ead101]
2019-04-03 17:09:32 -6947
2019-04-03 17:09:32 -耗时 : 4629
2019-04-03 17:09:32 -返回值 : null
2019-04-03 17:09:38 -请求地址 : http://localhost:8081/login
2019-04-03 17:09:38 -HTTP METHOD : POST
2019-04-03 17:09:38 -CLASS_METHOD : com.bootdo.system.controller.LoginController.ajaxLogin
2019-04-03 17:09:38 -参数 : [admin, 111111, 6947, org.apache.shiro.web.servlet.ShiroHttpServletRequest@6c458053]
2019-04-03 17:09:38 -==>  Preparing: select `user_id`,`username`,`name`,`password`,`dept_id`,`email`,`mobile`,`status`,`user_id_create`,`gmt_create`,`gmt_modified`,`sex`,`birth`,`pic_id`,`live_address`,`hobby`,`province`,`city`,`district` from sys_user WHERE username = ? order by user_id desc 
2019-04-03 17:09:38 -==> Parameters: admin(String)
2019-04-03 17:09:38 -<==      Total: 1
2019-04-03 17:09:38 -耗时 : 274
2019-04-03 17:09:38 -返回值 : {msg=操作成功, code=0}
2019-04-03 17:09:38 -More than one TaskExecutor bean found within the context, and none is named 'taskExecutor'. Mark one of them as primary or name it 'taskExecutor' (possibly as an alias) in order to use it for async processing: [clientInboundChannelExecutor, clientOutboundChannelExecutor, brokerChannelExecutor, messageBrokerTaskScheduler]
2019-04-03 17:09:38 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 17:09:38 -==> Parameters: 1(Long), admin(String), 登录(String), 274(Integer), com.bootdo.system.controller.LoginController.ajaxLogin()(String), null, 127.0.0.1(String), 2019-04-03 17:09:38.473(Timestamp)
2019-04-03 17:09:38 -请求地址 : http://localhost:8081/index
2019-04-03 17:09:38 -HTTP METHOD : GET
2019-04-03 17:09:38 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2019-04-03 17:09:38 -参数 : [{}]
2019-04-03 17:09:38 -<==    Updates: 1
2019-04-03 17:09:38 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2019-04-03 17:09:39 -==> Parameters: 1(Long)
2019-04-03 17:09:39 -<==      Total: 46
2019-04-03 17:09:39 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2019-04-03 17:09:39 -==> Parameters: 138(Long)
2019-04-03 17:09:39 -<==      Total: 1
2019-04-03 17:09:39 -耗时 : 670
2019-04-03 17:09:39 -返回值 : index_v1
2019-04-03 17:09:39 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 17:09:39 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 670(Integer), com.bootdo.system.controller.LoginController.index()(String), {"menus":[{"attributes":{"icon":"fa fa-money","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-money","url":"/moneyList/moneyList"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"102","parentId":"106","text":"现金缴费"},{"attributes":{"icon":"fa fa-book","url":"/moneyLog/elecLog"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"107","parentId":"106","text":"缴费记录"}],"hasChildren":true,"hasParent":false,"id":"106","parentId":"0","text":"收费管理"},{"attributes":{"icon":"fa fa-lightbulb-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/elec/elec"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"121","parentId":"103","text":"电费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"elec/elecInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"122","parentId":"103","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"elec/elecUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"123","parentId":"103","text":"电表上传"},{"attributes":{"icon":"fa fa-cc","url":"/elec/elecPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"124","parentId":"103","text":"电价管理"}],"hasChildren":true,"hasParent":false,"id":"103","parentId":"0","text":"电费管理"},{"attributes":{"icon":"fa fa-tint","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/water/water"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"117","parentId":"105","text":"水费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"water/waterInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"118","parentId":"105","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"water/waterUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"119","parentId":"105","text":"水费生成"},{"attributes":{"icon":"fa fa-cc","url":"/water/waterPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"120","parentId":"105","text":"水价管理"}],"hasChildren":true,"hasParent":false,"id":"105","parentId":"0","text":"水费管理"},{"attributes":{"icon":"fa fa-fire","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/heat/heat"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"113","parentId":"104","text":"暖费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"heat/heatInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"114","parentId":"104","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"heat/heatUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"115","parentId":"104","text":"暖费生成"},{"attributes":{"icon":"","url":"/heat/heatPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"116","parentId":"104","text":"暖价管理"}],"hasChildren":true,"hasParent":false,"id":"104","parentId":"0","text":"暖费管理"},{"attributes":{"icon":"fa fa-vcard-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-bomb","url":"/print/print"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"149","parentId":"108","text":"票据记录"}],"hasChildren":true,"hasParent":false,"id":"108","parentId":"0","text":"票据管理"},{"attributes":{"icon":"fa fa-bar-chart","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-area-chart","url":"/chart/graph_echarts.html"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","text":"百度chart"},{"attributes":{"icon":"fa fa-sun-o","url":"charts/countDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"109","parentId":"97","text":"日统计报表"},{"attributes":{"icon":"fa fa-registered","url":"charts/countMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"110","parentId":"97","text":"月统计报表"},{"attributes":{"icon":"fa fa-money","url":"charts/countOwe"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"155","parentId":"97","text":"欠费报表图"},{"attributes":{"icon":"fa fa-support","url":"charts/countYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"111","parentId":"97","text":"年统计报表"},{"attributes":{"icon":"fa fa-tachometer","url":"charts/countRun"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"112","parentId":"97","text":"走势图报表"}],"hasChildren":true,"hasParent":false,"id":"97","parentId":"0","text":"统计管理"},{"attributes":{"icon":"fa fa-bars","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-book","url":"/common/dict"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"78","parentId":"1","text":"数据字典"},{"attributes":{"icon":"fa fa-folder-open","url":"/common/sysFile"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"71","parentId":"1","text":"文件管理"}],"h(String), 127.0.0.1(String), 2019-04-03 17:09:39.309(Timestamp)
2019-04-03 17:09:39 -请求地址 : http://localhost:8081/main
2019-04-03 17:09:39 -HTTP METHOD : GET
2019-04-03 17:09:39 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 17:09:39 -参数 : []
2019-04-03 17:09:39 -耗时 : 1
2019-04-03 17:09:39 -返回值 : main
2019-04-03 17:09:39 -<==    Updates: 1
2019-04-03 17:09:39 -请求地址 : http://localhost:8081/oa/notify/message
2019-04-03 17:09:39 -HTTP METHOD : GET
2019-04-03 17:09:39 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2019-04-03 17:09:39 -参数 : []
2019-04-03 17:09:39 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2019-04-03 17:09:39 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2019-04-03 17:09:39 -<==      Total: 0
2019-04-03 17:09:39 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2019-04-03 17:09:39 -==> Parameters: 1(Long), 0(String)
2019-04-03 17:09:39 -<==      Total: 1
2019-04-03 17:09:39 -耗时 : 82
2019-04-03 17:09:39 -返回值 : com.bootdo.common.utils.PageUtils@3c2d1273
2019-04-03 17:09:40 -请求地址 : http://localhost:8081/main
2019-04-03 17:09:40 -HTTP METHOD : GET
2019-04-03 17:09:40 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 17:09:40 -参数 : []
2019-04-03 17:09:40 -耗时 : 2
2019-04-03 17:09:40 -返回值 : main
2019-04-03 17:09:47 -==>  Preparing: select distinct m.perms from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id = ur.role_id where ur.user_id = ? 
2019-04-03 17:09:47 -==> Parameters: 1(Long)
2019-04-03 17:09:47 -<==      Total: 90
2019-04-03 17:09:47 -请求地址 : http://localhost:8081/heat/heat
2019-04-03 17:09:47 -HTTP METHOD : GET
2019-04-03 17:09:47 -CLASS_METHOD : com.bootdo.heat.controller.HeatController.Heat
2019-04-03 17:09:47 -参数 : []
2019-04-03 17:09:47 -耗时 : 1
2019-04-03 17:09:47 -返回值 : heat/heat/heat
2019-04-03 17:09:47 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-03 17:09:47 -HTTP METHOD : GET
2019-04-03 17:09:47 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 17:09:47 -参数 : [userType]
2019-04-03 17:09:47 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 17:09:47 -==> Parameters: userType(String)
2019-04-03 17:09:48 -请求地址 : http://localhost:8081/heat/heat/list
2019-04-03 17:09:48 -HTTP METHOD : GET
2019-04-03 17:09:48 -CLASS_METHOD : com.bootdo.heat.controller.HeatController.list
2019-04-03 17:09:48 -参数 : [{limit=3, offset=0, userType=, userOrg=, userId=, createTime=, queryType=1}]
2019-04-03 17:09:48 -<==      Total: 2
2019-04-03 17:09:48 -耗时 : 93
2019-04-03 17:09:48 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 17:09:48 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`heat_type`,`heat_price`,`heat_area`,`heat_cost`,`heat_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from heat order by id asc limit ?, ? 
2019-04-03 17:09:48 -==> Parameters: 0(Integer), 3(Integer)
2019-04-03 17:09:48 -<==      Total: 3
2019-04-03 17:09:48 -==>  Preparing: select count(*) from heat 
2019-04-03 17:09:48 -==> Parameters: 
2019-04-03 17:09:48 -<==      Total: 1
2019-04-03 17:09:48 -耗时 : 187
2019-04-03 17:09:48 -返回值 : com.bootdo.common.utils.PageUtils@502efc8d
2019-04-03 17:09:56 -请求地址 : http://localhost:8081/heat/heat/list
2019-04-03 17:09:56 -HTTP METHOD : GET
2019-04-03 17:09:56 -CLASS_METHOD : com.bootdo.heat.controller.HeatController.list
2019-04-03 17:09:56 -参数 : [{limit=3, offset=12, userType=, userOrg=, userId=, createTime=, queryType=1}]
2019-04-03 17:09:56 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`heat_type`,`heat_price`,`heat_area`,`heat_cost`,`heat_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from heat order by id asc limit ?, ? 
2019-04-03 17:09:56 -==> Parameters: 12(Integer), 3(Integer)
2019-04-03 17:09:56 -<==      Total: 3
2019-04-03 17:09:56 -==>  Preparing: select count(*) from heat 
2019-04-03 17:09:56 -==> Parameters: 
2019-04-03 17:09:56 -<==      Total: 1
2019-04-03 17:09:56 -耗时 : 26
2019-04-03 17:09:56 -返回值 : com.bootdo.common.utils.PageUtils@32d4bd4b
2019-04-03 17:09:56 -请求地址 : http://localhost:8081/heat/heat/list
2019-04-03 17:09:56 -HTTP METHOD : GET
2019-04-03 17:09:56 -CLASS_METHOD : com.bootdo.heat.controller.HeatController.list
2019-04-03 17:09:56 -参数 : [{limit=3, offset=15, userType=, userOrg=, userId=, createTime=, queryType=1}]
2019-04-03 17:09:56 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`heat_type`,`heat_price`,`heat_area`,`heat_cost`,`heat_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from heat order by id asc limit ?, ? 
2019-04-03 17:09:56 -==> Parameters: 15(Integer), 3(Integer)
2019-04-03 17:09:56 -<==      Total: 3
2019-04-03 17:09:56 -==>  Preparing: select count(*) from heat 
2019-04-03 17:09:56 -==> Parameters: 
2019-04-03 17:09:56 -<==      Total: 1
2019-04-03 17:09:56 -耗时 : 14
2019-04-03 17:09:56 -返回值 : com.bootdo.common.utils.PageUtils@1a019d51
2019-04-03 17:09:57 -请求地址 : http://localhost:8081/heat/heat/list
2019-04-03 17:09:57 -HTTP METHOD : GET
2019-04-03 17:09:57 -CLASS_METHOD : com.bootdo.heat.controller.HeatController.list
2019-04-03 17:09:57 -参数 : [{limit=3, offset=12, userType=, userOrg=, userId=, createTime=, queryType=1}]
2019-04-03 17:09:57 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`heat_type`,`heat_price`,`heat_area`,`heat_cost`,`heat_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from heat order by id asc limit ?, ? 
2019-04-03 17:09:57 -==> Parameters: 12(Integer), 3(Integer)
2019-04-03 17:09:57 -<==      Total: 3
2019-04-03 17:09:57 -==>  Preparing: select count(*) from heat 
2019-04-03 17:09:57 -==> Parameters: 
2019-04-03 17:09:57 -<==      Total: 1
2019-04-03 17:09:57 -耗时 : 13
2019-04-03 17:09:57 -返回值 : com.bootdo.common.utils.PageUtils@5f783ba9
2019-04-03 17:09:58 -请求地址 : http://localhost:8081/heat/heat/list
2019-04-03 17:09:58 -HTTP METHOD : GET
2019-04-03 17:09:58 -CLASS_METHOD : com.bootdo.heat.controller.HeatController.list
2019-04-03 17:09:58 -参数 : [{limit=3, offset=6, userType=, userOrg=, userId=, createTime=, queryType=1}]
2019-04-03 17:09:58 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`heat_type`,`heat_price`,`heat_area`,`heat_cost`,`heat_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from heat order by id asc limit ?, ? 
2019-04-03 17:09:58 -==> Parameters: 6(Integer), 3(Integer)
2019-04-03 17:09:58 -<==      Total: 3
2019-04-03 17:09:58 -==>  Preparing: select count(*) from heat 
2019-04-03 17:09:58 -==> Parameters: 
2019-04-03 17:09:58 -<==      Total: 1
2019-04-03 17:09:58 -耗时 : 9
2019-04-03 17:09:58 -返回值 : com.bootdo.common.utils.PageUtils@3ca570a7
2019-04-03 17:09:58 -请求地址 : http://localhost:8081/heat/heat/list
2019-04-03 17:09:58 -HTTP METHOD : GET
2019-04-03 17:09:58 -CLASS_METHOD : com.bootdo.heat.controller.HeatController.list
2019-04-03 17:09:58 -参数 : [{limit=3, offset=3, userType=, userOrg=, userId=, createTime=, queryType=1}]
2019-04-03 17:09:58 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`heat_type`,`heat_price`,`heat_area`,`heat_cost`,`heat_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from heat order by id asc limit ?, ? 
2019-04-03 17:09:58 -==> Parameters: 3(Integer), 3(Integer)
2019-04-03 17:09:58 -<==      Total: 3
2019-04-03 17:09:58 -==>  Preparing: select count(*) from heat 
2019-04-03 17:09:58 -==> Parameters: 
2019-04-03 17:09:58 -<==      Total: 1
2019-04-03 17:09:58 -耗时 : 18
2019-04-03 17:09:58 -返回值 : com.bootdo.common.utils.PageUtils@677e3ae3
2019-04-03 17:09:59 -请求地址 : http://localhost:8081/heat/heat/list
2019-04-03 17:09:59 -HTTP METHOD : GET
2019-04-03 17:09:59 -CLASS_METHOD : com.bootdo.heat.controller.HeatController.list
2019-04-03 17:09:59 -参数 : [{limit=3, offset=9, userType=, userOrg=, userId=, createTime=, queryType=1}]
2019-04-03 17:09:59 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`heat_type`,`heat_price`,`heat_area`,`heat_cost`,`heat_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from heat order by id asc limit ?, ? 
2019-04-03 17:09:59 -==> Parameters: 9(Integer), 3(Integer)
2019-04-03 17:09:59 -<==      Total: 3
2019-04-03 17:09:59 -==>  Preparing: select count(*) from heat 
2019-04-03 17:09:59 -==> Parameters: 
2019-04-03 17:09:59 -<==      Total: 1
2019-04-03 17:09:59 -耗时 : 10
2019-04-03 17:09:59 -返回值 : com.bootdo.common.utils.PageUtils@4840c086
2019-04-03 17:10:00 -请求地址 : http://localhost:8081/heat/heat/list
2019-04-03 17:10:00 -HTTP METHOD : GET
2019-04-03 17:10:00 -CLASS_METHOD : com.bootdo.heat.controller.HeatController.list
2019-04-03 17:10:00 -参数 : [{limit=3, offset=12, userType=, userOrg=, userId=, createTime=, queryType=1}]
2019-04-03 17:10:00 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`heat_type`,`heat_price`,`heat_area`,`heat_cost`,`heat_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from heat order by id asc limit ?, ? 
2019-04-03 17:10:00 -==> Parameters: 12(Integer), 3(Integer)
2019-04-03 17:10:00 -<==      Total: 3
2019-04-03 17:10:00 -==>  Preparing: select count(*) from heat 
2019-04-03 17:10:00 -==> Parameters: 
2019-04-03 17:10:00 -<==      Total: 1
2019-04-03 17:10:00 -耗时 : 7
2019-04-03 17:10:00 -返回值 : com.bootdo.common.utils.PageUtils@293758a4
2019-04-03 17:10:00 -请求地址 : http://localhost:8081/heat/heat/list
2019-04-03 17:10:00 -HTTP METHOD : GET
2019-04-03 17:10:00 -CLASS_METHOD : com.bootdo.heat.controller.HeatController.list
2019-04-03 17:10:00 -参数 : [{limit=3, offset=18, userType=, userOrg=, userId=, createTime=, queryType=1}]
2019-04-03 17:10:00 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`heat_type`,`heat_price`,`heat_area`,`heat_cost`,`heat_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from heat order by id asc limit ?, ? 
2019-04-03 17:10:00 -==> Parameters: 18(Integer), 3(Integer)
2019-04-03 17:10:00 -<==      Total: 3
2019-04-03 17:10:00 -==>  Preparing: select count(*) from heat 
2019-04-03 17:10:00 -==> Parameters: 
2019-04-03 17:10:00 -<==      Total: 1
2019-04-03 17:10:00 -耗时 : 10
2019-04-03 17:10:00 -返回值 : com.bootdo.common.utils.PageUtils@2117f6e0
2019-04-03 17:10:01 -请求地址 : http://localhost:8081/heat/heat/list
2019-04-03 17:10:01 -HTTP METHOD : GET
2019-04-03 17:10:01 -CLASS_METHOD : com.bootdo.heat.controller.HeatController.list
2019-04-03 17:10:01 -参数 : [{limit=3, offset=21, userType=, userOrg=, userId=, createTime=, queryType=1}]
2019-04-03 17:10:01 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`heat_type`,`heat_price`,`heat_area`,`heat_cost`,`heat_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from heat order by id asc limit ?, ? 
2019-04-03 17:10:01 -==> Parameters: 21(Integer), 3(Integer)
2019-04-03 17:10:01 -<==      Total: 3
2019-04-03 17:10:01 -==>  Preparing: select count(*) from heat 
2019-04-03 17:10:01 -==> Parameters: 
2019-04-03 17:10:01 -<==      Total: 1
2019-04-03 17:10:01 -耗时 : 9
2019-04-03 17:10:01 -返回值 : com.bootdo.common.utils.PageUtils@328ef7fb
2019-04-03 17:10:01 -请求地址 : http://localhost:8081/heat/heat/list
2019-04-03 17:10:01 -HTTP METHOD : GET
2019-04-03 17:10:01 -CLASS_METHOD : com.bootdo.heat.controller.HeatController.list
2019-04-03 17:10:01 -参数 : [{limit=3, offset=24, userType=, userOrg=, userId=, createTime=, queryType=1}]
2019-04-03 17:10:01 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`heat_type`,`heat_price`,`heat_area`,`heat_cost`,`heat_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from heat order by id asc limit ?, ? 
2019-04-03 17:10:01 -==> Parameters: 24(Integer), 3(Integer)
2019-04-03 17:10:01 -<==      Total: 3
2019-04-03 17:10:01 -==>  Preparing: select count(*) from heat 
2019-04-03 17:10:01 -==> Parameters: 
2019-04-03 17:10:01 -<==      Total: 1
2019-04-03 17:10:01 -耗时 : 8
2019-04-03 17:10:01 -返回值 : com.bootdo.common.utils.PageUtils@3c4d0393
2019-04-03 17:10:01 -请求地址 : http://localhost:8081/heat/heat/list
2019-04-03 17:10:01 -HTTP METHOD : GET
2019-04-03 17:10:01 -CLASS_METHOD : com.bootdo.heat.controller.HeatController.list
2019-04-03 17:10:01 -参数 : [{limit=3, offset=21, userType=, userOrg=, userId=, createTime=, queryType=1}]
2019-04-03 17:10:01 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`heat_type`,`heat_price`,`heat_area`,`heat_cost`,`heat_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from heat order by id asc limit ?, ? 
2019-04-03 17:10:01 -==> Parameters: 21(Integer), 3(Integer)
2019-04-03 17:10:01 -<==      Total: 3
2019-04-03 17:10:01 -==>  Preparing: select count(*) from heat 
2019-04-03 17:10:01 -==> Parameters: 
2019-04-03 17:10:01 -<==      Total: 1
2019-04-03 17:10:01 -耗时 : 8
2019-04-03 17:10:01 -返回值 : com.bootdo.common.utils.PageUtils@65a2d607
2019-04-03 17:10:02 -请求地址 : http://localhost:8081/heat/heat/list
2019-04-03 17:10:02 -HTTP METHOD : GET
2019-04-03 17:10:02 -CLASS_METHOD : com.bootdo.heat.controller.HeatController.list
2019-04-03 17:10:02 -参数 : [{limit=3, offset=18, userType=, userOrg=, userId=, createTime=, queryType=1}]
2019-04-03 17:10:02 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`heat_type`,`heat_price`,`heat_area`,`heat_cost`,`heat_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from heat order by id asc limit ?, ? 
2019-04-03 17:10:02 -==> Parameters: 18(Integer), 3(Integer)
2019-04-03 17:10:02 -<==      Total: 3
2019-04-03 17:10:02 -==>  Preparing: select count(*) from heat 
2019-04-03 17:10:02 -==> Parameters: 
2019-04-03 17:10:02 -<==      Total: 1
2019-04-03 17:10:02 -耗时 : 10
2019-04-03 17:10:02 -返回值 : com.bootdo.common.utils.PageUtils@62f98bb1
2019-04-03 17:10:02 -请求地址 : http://localhost:8081/heat/heat/list
2019-04-03 17:10:02 -HTTP METHOD : GET
2019-04-03 17:10:02 -CLASS_METHOD : com.bootdo.heat.controller.HeatController.list
2019-04-03 17:10:02 -参数 : [{limit=3, offset=12, userType=, userOrg=, userId=, createTime=, queryType=1}]
2019-04-03 17:10:02 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`heat_type`,`heat_price`,`heat_area`,`heat_cost`,`heat_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from heat order by id asc limit ?, ? 
2019-04-03 17:10:02 -==> Parameters: 12(Integer), 3(Integer)
2019-04-03 17:10:02 -<==      Total: 3
2019-04-03 17:10:02 -==>  Preparing: select count(*) from heat 
2019-04-03 17:10:02 -==> Parameters: 
2019-04-03 17:10:02 -<==      Total: 1
2019-04-03 17:10:02 -耗时 : 10
2019-04-03 17:10:02 -返回值 : com.bootdo.common.utils.PageUtils@128ff1dc
2019-04-03 17:10:39 -请求地址 : http://localhost:8081/heat/heat/list
2019-04-03 17:10:39 -HTTP METHOD : GET
2019-04-03 17:10:39 -CLASS_METHOD : com.bootdo.heat.controller.HeatController.list
2019-04-03 17:10:39 -参数 : [{limit=3, offset=6, userType=, userOrg=, userId=, createTime=, queryType=1}]
2019-04-03 17:10:39 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`heat_type`,`heat_price`,`heat_area`,`heat_cost`,`heat_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from heat order by id asc limit ?, ? 
2019-04-03 17:10:39 -==> Parameters: 6(Integer), 3(Integer)
2019-04-03 17:10:39 -<==      Total: 3
2019-04-03 17:10:39 -==>  Preparing: select count(*) from heat 
2019-04-03 17:10:39 -==> Parameters: 
2019-04-03 17:10:39 -<==      Total: 1
2019-04-03 17:10:39 -耗时 : 9
2019-04-03 17:10:39 -返回值 : com.bootdo.common.utils.PageUtils@5e377894
2019-04-03 17:10:40 -请求地址 : http://localhost:8081/heat/heat/list
2019-04-03 17:10:40 -HTTP METHOD : GET
2019-04-03 17:10:40 -CLASS_METHOD : com.bootdo.heat.controller.HeatController.list
2019-04-03 17:10:40 -参数 : [{limit=3, offset=0, userType=, userOrg=, userId=, createTime=, queryType=1}]
2019-04-03 17:10:40 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`heat_type`,`heat_price`,`heat_area`,`heat_cost`,`heat_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from heat order by id asc limit ?, ? 
2019-04-03 17:10:40 -==> Parameters: 0(Integer), 3(Integer)
2019-04-03 17:10:40 -<==      Total: 3
2019-04-03 17:10:40 -==>  Preparing: select count(*) from heat 
2019-04-03 17:10:40 -==> Parameters: 
2019-04-03 17:10:40 -<==      Total: 1
2019-04-03 17:10:40 -耗时 : 9
2019-04-03 17:10:40 -返回值 : com.bootdo.common.utils.PageUtils@240d467a
2019-04-03 17:10:45 -请求地址 : http://localhost:8081/heat/heat/edit/1
2019-04-03 17:10:45 -HTTP METHOD : GET
2019-04-03 17:10:45 -CLASS_METHOD : com.bootdo.heat.controller.HeatController.edit
2019-04-03 17:10:45 -参数 : [1, {}]
2019-04-03 17:10:45 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`heat_type`,`heat_price`,`heat_area`,`heat_cost`,`heat_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from heat where id = ? 
2019-04-03 17:10:45 -==> Parameters: 1(Integer)
2019-04-03 17:10:45 -<==      Total: 1
2019-04-03 17:10:45 -耗时 : 6
2019-04-03 17:10:45 -返回值 : heat/heat/edit
2019-04-03 17:10:46 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-03 17:10:46 -HTTP METHOD : GET
2019-04-03 17:10:46 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 17:10:46 -参数 : [userType]
2019-04-03 17:10:46 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 17:10:46 -==> Parameters: userType(String)
2019-04-03 17:10:46 -<==      Total: 2
2019-04-03 17:10:46 -耗时 : 4
2019-04-03 17:10:46 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 17:10:46 -请求地址 : http://localhost:8081/common/dict/list/heatType
2019-04-03 17:10:46 -HTTP METHOD : GET
2019-04-03 17:10:46 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 17:10:46 -参数 : [heatType]
2019-04-03 17:10:46 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 17:10:46 -==> Parameters: heatType(String)
2019-04-03 17:10:46 -<==      Total: 5
2019-04-03 17:10:46 -耗时 : 5
2019-04-03 17:10:46 -返回值 : [DictDO{id=137, name='特殊暖费1', value='4', type='heatType', description='暖气类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=136, name='工业非盈利', value='3', type='heatType', description='暖气类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=135, name='工业盈利', value='2', type='heatType', description='暖气类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=134, name='民用暖', value='1', type='heatType', description='暖气类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=133, name='商业暖', value='0', type='heatType', description='暖气类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 17:10:46 -请求地址 : http://localhost:8081/common/dict/list/userState
2019-04-03 17:10:46 -HTTP METHOD : GET
2019-04-03 17:10:46 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 17:10:46 -参数 : [userState]
2019-04-03 17:10:46 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 17:10:46 -==> Parameters: userState(String)
2019-04-03 17:10:46 -<==      Total: 2
2019-04-03 17:10:46 -耗时 : 8
2019-04-03 17:10:46 -返回值 : [DictDO{id=126, name='使用中', value='1', type='userState', description='用户状态', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=125, name='未使用', value='0', type='userState', description='用户状态', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 17:12:53 -请求地址 : http://localhost:8081/heat/heat/edit/2
2019-04-03 17:12:53 -HTTP METHOD : GET
2019-04-03 17:12:53 -CLASS_METHOD : com.bootdo.heat.controller.HeatController.edit
2019-04-03 17:12:53 -参数 : [2, {}]
2019-04-03 17:12:53 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`heat_type`,`heat_price`,`heat_area`,`heat_cost`,`heat_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from heat where id = ? 
2019-04-03 17:12:53 -==> Parameters: 2(Integer)
2019-04-03 17:12:53 -<==      Total: 1
2019-04-03 17:12:53 -耗时 : 8
2019-04-03 17:12:53 -返回值 : heat/heat/edit
2019-04-03 17:12:54 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-03 17:12:54 -HTTP METHOD : GET
2019-04-03 17:12:54 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 17:12:54 -参数 : [userType]
2019-04-03 17:12:54 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 17:12:54 -==> Parameters: userType(String)
2019-04-03 17:12:54 -请求地址 : http://localhost:8081/common/dict/list/heatType
2019-04-03 17:12:54 -HTTP METHOD : GET
2019-04-03 17:12:54 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 17:12:54 -参数 : [heatType]
2019-04-03 17:12:54 -<==      Total: 2
2019-04-03 17:12:54 -耗时 : 4
2019-04-03 17:12:54 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 17:12:54 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 17:12:54 -==> Parameters: heatType(String)
2019-04-03 17:12:54 -请求地址 : http://localhost:8081/common/dict/list/userState
2019-04-03 17:12:54 -HTTP METHOD : GET
2019-04-03 17:12:54 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 17:12:54 -参数 : [userState]
2019-04-03 17:12:54 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 17:12:54 -==> Parameters: userState(String)
2019-04-03 17:12:54 -<==      Total: 5
2019-04-03 17:12:54 -耗时 : 12
2019-04-03 17:12:54 -返回值 : [DictDO{id=137, name='特殊暖费1', value='4', type='heatType', description='暖气类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=136, name='工业非盈利', value='3', type='heatType', description='暖气类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=135, name='工业盈利', value='2', type='heatType', description='暖气类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=134, name='民用暖', value='1', type='heatType', description='暖气类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=133, name='商业暖', value='0', type='heatType', description='暖气类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 17:12:54 -<==      Total: 2
2019-04-03 17:12:54 -耗时 : 124
2019-04-03 17:12:54 -返回值 : [DictDO{id=126, name='使用中', value='1', type='userState', description='用户状态', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=125, name='未使用', value='0', type='userState', description='用户状态', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 17:15:25 -请求地址 : http://localhost:8081/index
2019-04-03 17:15:25 -HTTP METHOD : GET
2019-04-03 17:15:25 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2019-04-03 17:15:25 -参数 : [{}]
2019-04-03 17:15:25 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2019-04-03 17:15:25 -==> Parameters: 1(Long)
2019-04-03 17:15:25 -请求地址 : http://localhost:8081/index
2019-04-03 17:15:25 -HTTP METHOD : GET
2019-04-03 17:15:25 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2019-04-03 17:15:25 -参数 : [{}]
2019-04-03 17:15:25 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2019-04-03 17:15:25 -==> Parameters: 1(Long)
2019-04-03 17:15:25 -<==      Total: 46
2019-04-03 17:15:25 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2019-04-03 17:15:25 -==> Parameters: 138(Long)
2019-04-03 17:15:25 -<==      Total: 1
2019-04-03 17:15:25 -耗时 : 46
2019-04-03 17:15:25 -返回值 : index_v1
2019-04-03 17:15:25 -<==      Total: 46
2019-04-03 17:15:25 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2019-04-03 17:15:25 -==> Parameters: 138(Long)
2019-04-03 17:15:25 -<==      Total: 1
2019-04-03 17:15:25 -耗时 : 227
2019-04-03 17:15:25 -返回值 : index_v1
2019-04-03 17:15:25 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 17:15:25 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 17:15:25 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 46(Integer), com.bootdo.system.controller.LoginController.index()(String), {"menus":[{"attributes":{"icon":"fa fa-money","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-money","url":"/moneyList/moneyList"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"102","parentId":"106","text":"现金缴费"},{"attributes":{"icon":"fa fa-book","url":"/moneyLog/elecLog"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"107","parentId":"106","text":"缴费记录"}],"hasChildren":true,"hasParent":false,"id":"106","parentId":"0","text":"收费管理"},{"attributes":{"icon":"fa fa-lightbulb-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/elec/elec"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"121","parentId":"103","text":"电费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"elec/elecInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"122","parentId":"103","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"elec/elecUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"123","parentId":"103","text":"电表上传"},{"attributes":{"icon":"fa fa-cc","url":"/elec/elecPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"124","parentId":"103","text":"电价管理"}],"hasChildren":true,"hasParent":false,"id":"103","parentId":"0","text":"电费管理"},{"attributes":{"icon":"fa fa-tint","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/water/water"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"117","parentId":"105","text":"水费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"water/waterInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"118","parentId":"105","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"water/waterUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"119","parentId":"105","text":"水费生成"},{"attributes":{"icon":"fa fa-cc","url":"/water/waterPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"120","parentId":"105","text":"水价管理"}],"hasChildren":true,"hasParent":false,"id":"105","parentId":"0","text":"水费管理"},{"attributes":{"icon":"fa fa-fire","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/heat/heat"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"113","parentId":"104","text":"暖费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"heat/heatInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"114","parentId":"104","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"heat/heatUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"115","parentId":"104","text":"暖费生成"},{"attributes":{"icon":"","url":"/heat/heatPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"116","parentId":"104","text":"暖价管理"}],"hasChildren":true,"hasParent":false,"id":"104","parentId":"0","text":"暖费管理"},{"attributes":{"icon":"fa fa-vcard-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-bomb","url":"/print/print"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"149","parentId":"108","text":"票据记录"}],"hasChildren":true,"hasParent":false,"id":"108","parentId":"0","text":"票据管理"},{"attributes":{"icon":"fa fa-bar-chart","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-area-chart","url":"/chart/graph_echarts.html"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","text":"百度chart"},{"attributes":{"icon":"fa fa-sun-o","url":"charts/countDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"109","parentId":"97","text":"日统计报表"},{"attributes":{"icon":"fa fa-registered","url":"charts/countMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"110","parentId":"97","text":"月统计报表"},{"attributes":{"icon":"fa fa-money","url":"charts/countOwe"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"155","parentId":"97","text":"欠费报表图"},{"attributes":{"icon":"fa fa-support","url":"charts/countYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"111","parentId":"97","text":"年统计报表"},{"attributes":{"icon":"fa fa-tachometer","url":"charts/countRun"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"112","parentId":"97","text":"走势图报表"}],"hasChildren":true,"hasParent":false,"id":"97","parentId":"0","text":"统计管理"},{"attributes":{"icon":"fa fa-bars","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-book","url":"/common/dict"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"78","parentId":"1","text":"数据字典"},{"attributes":{"icon":"fa fa-folder-open","url":"/common/sysFile"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"71","parentId":"1","text":"文件管理"}],"h(String), 127.0.0.1(String), 2019-04-03 17:15:25.391(Timestamp)
2019-04-03 17:15:25 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 228(Integer), com.bootdo.system.controller.LoginController.index()(String), {"menus":[{"attributes":{"icon":"fa fa-money","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-money","url":"/moneyList/moneyList"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"102","parentId":"106","text":"现金缴费"},{"attributes":{"icon":"fa fa-book","url":"/moneyLog/elecLog"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"107","parentId":"106","text":"缴费记录"}],"hasChildren":true,"hasParent":false,"id":"106","parentId":"0","text":"收费管理"},{"attributes":{"icon":"fa fa-lightbulb-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/elec/elec"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"121","parentId":"103","text":"电费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"elec/elecInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"122","parentId":"103","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"elec/elecUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"123","parentId":"103","text":"电表上传"},{"attributes":{"icon":"fa fa-cc","url":"/elec/elecPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"124","parentId":"103","text":"电价管理"}],"hasChildren":true,"hasParent":false,"id":"103","parentId":"0","text":"电费管理"},{"attributes":{"icon":"fa fa-tint","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/water/water"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"117","parentId":"105","text":"水费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"water/waterInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"118","parentId":"105","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"water/waterUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"119","parentId":"105","text":"水费生成"},{"attributes":{"icon":"fa fa-cc","url":"/water/waterPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"120","parentId":"105","text":"水价管理"}],"hasChildren":true,"hasParent":false,"id":"105","parentId":"0","text":"水费管理"},{"attributes":{"icon":"fa fa-fire","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/heat/heat"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"113","parentId":"104","text":"暖费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"heat/heatInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"114","parentId":"104","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"heat/heatUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"115","parentId":"104","text":"暖费生成"},{"attributes":{"icon":"","url":"/heat/heatPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"116","parentId":"104","text":"暖价管理"}],"hasChildren":true,"hasParent":false,"id":"104","parentId":"0","text":"暖费管理"},{"attributes":{"icon":"fa fa-vcard-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-bomb","url":"/print/print"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"149","parentId":"108","text":"票据记录"}],"hasChildren":true,"hasParent":false,"id":"108","parentId":"0","text":"票据管理"},{"attributes":{"icon":"fa fa-bar-chart","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-area-chart","url":"/chart/graph_echarts.html"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","text":"百度chart"},{"attributes":{"icon":"fa fa-sun-o","url":"charts/countDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"109","parentId":"97","text":"日统计报表"},{"attributes":{"icon":"fa fa-registered","url":"charts/countMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"110","parentId":"97","text":"月统计报表"},{"attributes":{"icon":"fa fa-money","url":"charts/countOwe"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"155","parentId":"97","text":"欠费报表图"},{"attributes":{"icon":"fa fa-support","url":"charts/countYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"111","parentId":"97","text":"年统计报表"},{"attributes":{"icon":"fa fa-tachometer","url":"charts/countRun"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"112","parentId":"97","text":"走势图报表"}],"hasChildren":true,"hasParent":false,"id":"97","parentId":"0","text":"统计管理"},{"attributes":{"icon":"fa fa-bars","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-book","url":"/common/dict"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"78","parentId":"1","text":"数据字典"},{"attributes":{"icon":"fa fa-folder-open","url":"/common/sysFile"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"71","parentId":"1","text":"文件管理"}],"h(String), 127.0.0.1(String), 2019-04-03 17:15:25.449(Timestamp)
2019-04-03 17:15:25 -<==    Updates: 1
2019-04-03 17:15:25 -<==    Updates: 1
2019-04-03 17:15:25 -请求地址 : http://localhost:8081/main
2019-04-03 17:15:25 -HTTP METHOD : GET
2019-04-03 17:15:25 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 17:15:25 -参数 : []
2019-04-03 17:15:25 -耗时 : 1
2019-04-03 17:15:25 -返回值 : main
2019-04-03 17:15:26 -请求地址 : http://localhost:8081/oa/notify/message
2019-04-03 17:15:26 -HTTP METHOD : GET
2019-04-03 17:15:26 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2019-04-03 17:15:26 -参数 : []
2019-04-03 17:15:26 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2019-04-03 17:15:26 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2019-04-03 17:15:26 -<==      Total: 0
2019-04-03 17:15:26 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2019-04-03 17:15:26 -==> Parameters: 1(Long), 0(String)
2019-04-03 17:15:26 -<==      Total: 1
2019-04-03 17:15:26 -耗时 : 22
2019-04-03 17:15:26 -返回值 : com.bootdo.common.utils.PageUtils@4a4c2e03
2019-04-03 17:15:26 -请求地址 : http://localhost:8081/main
2019-04-03 17:15:26 -HTTP METHOD : GET
2019-04-03 17:15:26 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 17:15:26 -参数 : []
2019-04-03 17:15:26 -耗时 : 1
2019-04-03 17:15:26 -返回值 : main
2019-04-03 17:15:36 -请求地址 : http://localhost:8081/heat/heat
2019-04-03 17:15:36 -HTTP METHOD : GET
2019-04-03 17:15:36 -CLASS_METHOD : com.bootdo.heat.controller.HeatController.Heat
2019-04-03 17:15:36 -参数 : []
2019-04-03 17:15:36 -耗时 : 1
2019-04-03 17:15:36 -返回值 : heat/heat/heat
2019-04-03 17:15:37 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-03 17:15:37 -HTTP METHOD : GET
2019-04-03 17:15:37 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 17:15:37 -参数 : [userType]
2019-04-03 17:15:37 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 17:15:37 -==> Parameters: userType(String)
2019-04-03 17:15:37 -<==      Total: 2
2019-04-03 17:15:37 -耗时 : 5
2019-04-03 17:15:37 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 17:15:37 -请求地址 : http://localhost:8081/heat/heat/list
2019-04-03 17:15:37 -HTTP METHOD : GET
2019-04-03 17:15:37 -CLASS_METHOD : com.bootdo.heat.controller.HeatController.list
2019-04-03 17:15:37 -参数 : [{limit=3, offset=0, userType=, userOrg=, userId=, createTime=, queryType=1}]
2019-04-03 17:15:37 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`heat_type`,`heat_price`,`heat_area`,`heat_cost`,`heat_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from heat order by id asc limit ?, ? 
2019-04-03 17:15:37 -==> Parameters: 0(Integer), 3(Integer)
2019-04-03 17:15:37 -<==      Total: 3
2019-04-03 17:15:37 -==>  Preparing: select count(*) from heat 
2019-04-03 17:15:37 -==> Parameters: 
2019-04-03 17:15:37 -<==      Total: 1
2019-04-03 17:15:37 -耗时 : 6
2019-04-03 17:15:37 -返回值 : com.bootdo.common.utils.PageUtils@7c1f21a8
2019-04-03 17:15:57 -Failed to invoke @ExceptionHandler method: public java.lang.Object com.bootdo.common.exception.BDExceptionHandler.handleException(java.lang.Exception,javax.servlet.http.HttpServletRequest)
org.apache.shiro.UnavailableSecurityManagerException: No SecurityManager accessible to the calling code, either bound to the org.apache.shiro.util.ThreadContext or as a vm static singleton.  This is an invalid application configuration.
	at org.apache.shiro.SecurityUtils.getSecurityManager(SecurityUtils.java:123)
	at org.apache.shiro.subject.Subject$Builder.<init>(Subject.java:627)
	at org.apache.shiro.SecurityUtils.getSubject(SecurityUtils.java:56)
	at com.bootdo.common.utils.ShiroUtils.getSubjct(ShiroUtils.java:23)
	at com.bootdo.common.utils.ShiroUtils.getUser(ShiroUtils.java:26)
	at com.bootdo.common.exception.BDExceptionHandler.handleException(BDExceptionHandler.java:75)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:209)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver.doResolveHandlerMethodException(ExceptionHandlerExceptionResolver.java:404)
	at org.springframework.web.servlet.handler.AbstractHandlerMethodExceptionResolver.doResolveException(AbstractHandlerMethodExceptionResolver.java:61)
	at org.springframework.web.servlet.handler.AbstractHandlerExceptionResolver.resolveException(AbstractHandlerExceptionResolver.java:139)
	at org.springframework.web.servlet.handler.HandlerExceptionResolverComposite.resolveException(HandlerExceptionResolverComposite.java:78)
	at org.springframework.web.servlet.DispatcherServlet.processHandlerException(DispatcherServlet.java:1255)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1062)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1008)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:925)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:974)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:877)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:661)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:851)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:728)
	at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:591)
	at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:527)
	at org.apache.catalina.core.StandardHostValve.custom(StandardHostValve.java:389)
	at org.apache.catalina.core.StandardHostValve.status(StandardHostValve.java:254)
	at org.apache.catalina.core.StandardHostValve.throwable(StandardHostValve.java:349)
	at org.apache.catalina.core.AsyncContextImpl.setErrorState(AsyncContextImpl.java:424)
	at org.apache.catalina.connector.CoyoteAdapter.asyncDispatch(CoyoteAdapter.java:176)
	at org.apache.coyote.AbstractProcessor.dispatch(AbstractProcessor.java:232)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:53)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:790)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1468)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Unknown Source)
2019-04-03 17:20:13 -Starting BootdoApplication on ZJZL-20180906VX with PID 1416 (D:\eclipse2018-work\bootdo\target\classes started by Administrator in D:\eclipse2018-work\bootdo)
2019-04-03 17:20:13 -Running with Spring Boot v2.0.3.RELEASE, Spring v5.0.7.RELEASE
2019-04-03 17:20:13 -The following profiles are active: dev
2019-04-03 17:20:14 -Refreshing org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@2e6a8155: startup date [Wed Apr 03 17:20:14 CST 2019]; root of context hierarchy
2019-04-03 17:20:18 -Multiple Spring Data modules found, entering strict repository configuration mode!
2019-04-03 17:20:20 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$15003363] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-03 17:20:20 -Bean 'shiroConfig' of type [com.bootdo.system.config.ShiroConfig$$EnhancerBySpringCGLIB$$759620a] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-03 17:20:22 -Bean 'userRealm' of type [com.bootdo.system.shiro.UserRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-03 17:20:22 -Bean 'cacheManager2' of type [net.sf.ehcache.CacheManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-03 17:20:22 -Bean 'ehCacheManager' of type [org.apache.shiro.cache.ehcache.EhCacheManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-03 17:20:22 -Cache with name 'com.bootdo.system.shiro.UserRealm.authorizationCache' does not yet exist.  Creating now.
2019-04-03 17:20:22 -Added EhCache named [com.bootdo.system.shiro.UserRealm.authorizationCache]
2019-04-03 17:20:22 -Bean 'sessionDAO' of type [org.apache.shiro.session.mgt.eis.MemorySessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-03 17:20:22 -Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-03 17:20:22 -Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-03 17:20:23 -Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-03 17:20:24 -Tomcat initialized with port(s): 8081 (http)
2019-04-03 17:20:24 -Initializing ProtocolHandler ["http-nio-8081"]
2019-04-03 17:20:24 -Starting service [Tomcat]
2019-04-03 17:20:24 -Starting Servlet Engine: Apache Tomcat/8.5.31
2019-04-03 17:20:24 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [C:\Program Files\Java\jre1.8.0_131\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:/Program Files/Java/jre1.8.0_131/bin/server;C:/Program Files/Java/jre1.8.0_131/bin;C:/Program Files/Java/jre1.8.0_131/lib/amd64;C:\ProgramData\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Windows\System32\OpenSSH\;D:\pbb\pycSafefile\x64;D:\pbb\PBB Reader\x64;C:\Program Files\MySQL\MySQL Utilities 1.6\;D:\MAVEN\apache-maven-3.6.0\bin;D:\GIT\Git\cmd;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;;C:\Users\Administrator\Desktop;;.]
2019-04-03 17:20:25 -Initializing Spring embedded WebApplicationContext
2019-04-03 17:20:25 -Root WebApplicationContext: initialization completed in 10796 ms
2019-04-03 17:20:27 -Mapping filter: 'characterEncodingFilter' to: [/*]
2019-04-03 17:20:27 -Mapping filter: 'hiddenHttpMethodFilter' to: [/*]
2019-04-03 17:20:27 -Mapping filter: 'httpPutFormContentFilter' to: [/*]
2019-04-03 17:20:27 -Mapping filter: 'requestContextFilter' to: [/*]
2019-04-03 17:20:27 -Filter xssFilter was not registered (disabled)
2019-04-03 17:20:27 -Mapping filter: 'webStatFilter' to urls: [/*]
2019-04-03 17:20:27 -Mapping filter: 'shiroFilterFactoryBean' to: [/*]
2019-04-03 17:20:27 -Servlet statViewServlet mapped to [/druid/*]
2019-04-03 17:20:27 -Servlet dispatcherServlet mapped to [/]
2019-04-03 17:20:35 -ApplicationContext registed-->org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@2e6a8155: startup date [Wed Apr 03 17:20:14 CST 2019]; root of context hierarchy
2019-04-03 17:20:36 -Using default implementation for ThreadExecutor
2019-04-03 17:20:36 -Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2019-04-03 17:20:36 -Quartz Scheduler v.2.2.1 created.
2019-04-03 17:20:36 -RAMJobStore initialized.
2019-04-03 17:20:36 -Scheduler meta-data: Quartz Scheduler (v2.2.1) 'schedulerFactoryBean' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2019-04-03 17:20:36 -Quartz scheduler 'schedulerFactoryBean' initialized from an externally provided properties instance.
2019-04-03 17:20:36 -Quartz scheduler version: 2.2.1
2019-04-03 17:20:36 -JobFactory set to: com.bootdo.common.quartz.factory.JobFactory@5940b14e
2019-04-03 17:20:37 -Initializing ExecutorService  'clientInboundChannelExecutor'
2019-04-03 17:20:37 -Initializing ExecutorService  'clientOutboundChannelExecutor'
2019-04-03 17:20:40 -Mapped "{[/charts/countDD],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.countDDController.countDD()
2019-04-03 17:20:40 -Mapped "{[/charts/countDD/getCountDD],methods=[POST]}" onto public com.bootdo.charts.vo.CountDayVo com.bootdo.charts.controller.countDDController.getCountD(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo,javax.servlet.http.HttpServletRequest)
2019-04-03 17:20:40 -Mapped "{[/charts/countDD/tableDD],methods=[POST]}" onto public java.lang.String com.bootdo.charts.controller.countDDController.tableDD()
2019-04-03 17:20:40 -Mapped "{[/charts/countDD/exportCountDD],methods=[GET]}" onto public void com.bootdo.charts.controller.countDDController.exprotElecLog(com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-03 17:20:40 -Mapped "{[/charts/countMM/exportCountMM],methods=[GET]}" onto public void com.bootdo.charts.controller.countMMController.exprotElecLog(com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-03 17:20:40 -Mapped "{[/charts/countMM],methods=[GET]}" onto java.lang.String com.bootdo.charts.controller.countMMController.countMM()
2019-04-03 17:20:40 -Mapped "{[/charts/countMM/getCountMM],methods=[POST]}" onto public void com.bootdo.charts.controller.countMMController.getCountMM(org.springframework.ui.Model,com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo,javax.servlet.http.HttpServletRequest)
2019-04-03 17:20:40 -Mapped "{[/charts/countOwe/getCountOwe],methods=[POST]}" onto public com.bootdo.charts.vo.CountOweVo com.bootdo.charts.controller.countOweController.getCountD(com.bootdo.elec.vo.ElecVo,com.bootdo.water.vo.WaterVo,com.bootdo.heat.vo.HeatVo,javax.servlet.http.HttpServletRequest)
2019-04-03 17:20:40 -Mapped "{[/charts/countOwe],methods=[GET]}" onto java.lang.String com.bootdo.charts.controller.countOweController.countOwe()
2019-04-03 17:20:40 -Mapped "{[/charts/countRun/getCountRun],methods=[POST]}" onto public int com.bootdo.charts.controller.countRunController.getCountD(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo)
2019-04-03 17:20:40 -Mapped "{[/charts/countRun/exportCountRun],methods=[GET]}" onto public void com.bootdo.charts.controller.countRunController.exprotElecLog(com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-03 17:20:40 -Mapped "{[/charts/countRun],methods=[GET]}" onto java.lang.String com.bootdo.charts.controller.countRunController.countRun()
2019-04-03 17:20:40 -Mapped "{[/charts/countYY/getCountYY],methods=[POST]}" onto public int com.bootdo.charts.controller.countYYController.getCountD(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo)
2019-04-03 17:20:40 -Mapped "{[/charts/countYY],methods=[GET]}" onto java.lang.String com.bootdo.charts.controller.countYYController.countYY()
2019-04-03 17:20:40 -Mapped "{[/charts/countYY/exportCountYY],methods=[GET]}" onto public void com.bootdo.charts.controller.countYYController.exprotElecLog(com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-03 17:20:40 -Mapped "{[/common/dict/add],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.add()
2019-04-03 17:20:40 -Mapped "{[/common/dict/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.remove(java.lang.Long)
2019-04-03 17:20:40 -Mapped "{[/common/dict/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.remove(java.lang.Long[])
2019-04-03 17:20:40 -Mapped "{[/common/dict/update]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.update(com.bootdo.common.domain.DictDO)
2019-04-03 17:20:40 -Mapped "{[/common/dict/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.common.controller.DictController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 17:20:40 -Mapped "{[/common/dict/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.save(com.bootdo.common.domain.DictDO)
2019-04-03 17:20:40 -Mapped "{[/common/dict/type],methods=[GET]}" onto public java.util.List<com.bootdo.common.domain.DictDO> com.bootdo.common.controller.DictController.listType()
2019-04-03 17:20:40 -Mapped "{[/common/dict/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 17:20:40 -Mapped "{[/common/dict],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.dict()
2019-04-03 17:20:40 -Mapped "{[/common/dict/add/{type}/{description}],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.addD(org.springframework.ui.Model,java.lang.String,java.lang.String)
2019-04-03 17:20:40 -Mapped "{[/common/dict/list/{type}],methods=[GET]}" onto public java.util.List<com.bootdo.common.domain.DictDO> com.bootdo.common.controller.DictController.listByType(java.lang.String)
2019-04-03 17:20:40 -Mapped "{[/common/sysFile/add],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.FileController.add()
2019-04-03 17:20:40 -Mapped "{[/common/sysFile/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.remove(java.lang.Long,javax.servlet.http.HttpServletRequest)
2019-04-03 17:20:40 -Mapped "{[/common/sysFile/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.remove(java.lang.Long[])
2019-04-03 17:20:40 -Mapped "{[/common/sysFile/update]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.update(com.bootdo.common.domain.FileDO)
2019-04-03 17:20:40 -Mapped "{[/common/sysFile/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.common.controller.FileController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 17:20:40 -Mapped "{[/common/sysFile/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.save(com.bootdo.common.domain.FileDO)
2019-04-03 17:20:40 -Mapped "{[/common/sysFile/info/{id}]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.info(java.lang.Long)
2019-04-03 17:20:40 -Mapped "{[/common/sysFile/edit],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.FileController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 17:20:40 -Mapped "{[/common/sysFile],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.FileController.sysFile(org.springframework.ui.Model)
2019-04-03 17:20:40 -Mapped "{[/common/sysFile/upload],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.FileController.upload(org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpServletRequest)
2019-04-03 17:20:40 -Mapped "{[/common/generator/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.GeneratorController.update(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 17:20:40 -Mapped "{[/common/generator/list],methods=[GET]}" onto java.util.List<java.util.Map<java.lang.String, java.lang.Object>> com.bootdo.common.controller.GeneratorController.list()
2019-04-03 17:20:40 -Mapped "{[/common/generator/code/{tableName}]}" onto public void com.bootdo.common.controller.GeneratorController.code(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String) throws java.io.IOException
2019-04-03 17:20:40 -Mapped "{[/common/generator],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.GeneratorController.generator()
2019-04-03 17:20:40 -Mapped "{[/common/generator/edit],methods=[GET]}" onto public java.lang.String com.bootdo.common.controller.GeneratorController.edit(org.springframework.ui.Model)
2019-04-03 17:20:40 -Mapped "{[/common/generator/batchCode]}" onto public void com.bootdo.common.controller.GeneratorController.batchCode(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String) throws java.io.IOException
2019-04-03 17:20:40 -Mapped "{[/common/job/add],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.JobController.add()
2019-04-03 17:20:40 -Mapped "{[/common/job/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.remove(java.lang.Long)
2019-04-03 17:20:40 -Mapped "{[/common/job/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.remove(java.lang.Long[])
2019-04-03 17:20:40 -Mapped "{[/common/job/update],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.update(com.bootdo.common.domain.TaskDO)
2019-04-03 17:20:40 -Mapped "{[/common/job/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.common.controller.JobController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 17:20:40 -Mapped "{[/common/job/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.save(com.bootdo.common.domain.TaskDO)
2019-04-03 17:20:40 -Mapped "{[/common/job/info/{id}]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.info(java.lang.Long)
2019-04-03 17:20:40 -Mapped "{[/common/job/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.JobController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 17:20:40 -Mapped "{[/common/job/changeJobStatus],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.changeJobStatus(java.lang.Long,java.lang.String)
2019-04-03 17:20:40 -Mapped "{[/common/job],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.JobController.taskScheduleJob()
2019-04-03 17:20:40 -Mapped "{[/common/log/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.LogController.remove(java.lang.Long)
2019-04-03 17:20:40 -Mapped "{[/common/log],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.LogController.log()
2019-04-03 17:20:40 -Mapped "{[/common/log/list],methods=[GET]}" onto com.bootdo.common.domain.PageDO<com.bootdo.common.domain.LogDO> com.bootdo.common.controller.LogController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 17:20:40 -Mapped "{[/common/log/batchRemove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.LogController.batchRemove(java.lang.Long[])
2019-04-03 17:20:41 -Mapped "{[/common/long],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.LongController.Long()
2019-04-03 17:20:41 -Mapped "{[/common/time],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.TimeController.Time()
2019-04-03 17:20:41 -Mapped "{[/error]}" onto public com.bootdo.common.utils.R com.bootdo.common.exception.MainsiteErrorController.handleError(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-04-03 17:20:41 -Mapped "{[/error],produces=[text/html]}" onto public org.springframework.web.servlet.ModelAndView com.bootdo.common.exception.MainsiteErrorController.errorHtml(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-04-03 17:20:41 -Mapped "{[/elec/elec/add],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecController.add()
2019-04-03 17:20:41 -Mapped "{[/elec/elec/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.remove(java.lang.Long)
2019-04-03 17:20:41 -Mapped "{[/elec/elec/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.remove(java.lang.Long[])
2019-04-03 17:20:41 -Mapped "{[/elec/elec/update],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.update(com.bootdo.elec.domain.ElecDO)
2019-04-03 17:20:41 -Mapped "{[/elec/elec/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.elec.controller.ElecController.list(java.util.Map<java.lang.String, java.lang.Object>,com.bootdo.elec.domain.ElecDO)
2019-04-03 17:20:41 -Mapped "{[/elec/elec/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.save(com.bootdo.elec.domain.ElecDO)
2019-04-03 17:20:41 -Mapped "{[/elec/elec/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 17:20:41 -Mapped "{[/elec/elec/exprotElec],methods=[GET]}" onto public void com.bootdo.elec.controller.ElecController.exprotExcel(com.bootdo.elec.vo.ElecVo,javax.servlet.http.HttpServletResponse)
2019-04-03 17:20:41 -Mapped "{[/elec/elec],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecController.Elec()
2019-04-03 17:20:41 -Mapped "{[/elec/elecInto/exprotElecIntoExcel],methods=[GET]}" onto public void com.bootdo.elec.controller.ElecIntoController.exprotExcel(com.bootdo.elec.vo.ElecVo,javax.servlet.http.HttpServletResponse)
2019-04-03 17:20:41 -Mapped "{[/elec/elecInto],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecIntoController.ElecInto()
2019-04-03 17:20:41 -Mapped "{[/elec/elecInto/importElecIntoExcel],methods=[POST]}" onto public java.util.Map<java.lang.String, java.lang.Object> com.bootdo.elec.controller.ElecIntoController.importElecIntoExcel(org.springframework.web.multipart.MultipartFile,com.bootdo.elec.vo.ElecVo) throws java.lang.Exception
2019-04-03 17:20:41 -Mapped "{[/elec/elecPrice/add],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecPriceController.add()
2019-04-03 17:20:41 -Mapped "{[/elec/elecPrice/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecPriceController.remove(java.lang.Long)
2019-04-03 17:20:41 -Mapped "{[/elec/elecPrice/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecPriceController.remove(java.lang.Long[])
2019-04-03 17:20:41 -Mapped "{[/elec/elecPrice/update]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecPriceController.update(com.bootdo.elec.domain.ElecPriceDO)
2019-04-03 17:20:41 -Mapped "{[/elec/elecPrice/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.elec.controller.ElecPriceController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 17:20:41 -Mapped "{[/elec/elecPrice/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecPriceController.save(com.bootdo.elec.domain.ElecPriceDO,com.bootdo.elec.domain.ElecDO)
2019-04-03 17:20:41 -Mapped "{[/elec/elecPrice/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecPriceController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 17:20:41 -Mapped "{[/elec/elecPrice],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecPriceController.ElecPrice()
2019-04-03 17:20:41 -Mapped "{[/elec/elecUpLoad],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecUpLoadController.Elec()
2019-04-03 17:20:41 -Mapped "{[/elec/elecUpLoad/importElecExcel],methods=[POST]}" onto public java.util.Map<java.lang.String, java.lang.Object> com.bootdo.elec.controller.ElecUpLoadController.importElecExcel(org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpServletRequest) throws java.lang.Exception
2019-04-03 17:20:41 -Mapped "{[/heat/heat/add],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatController.add()
2019-04-03 17:20:41 -Mapped "{[/heat/heat/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatController.remove(java.lang.Integer)
2019-04-03 17:20:41 -Mapped "{[/heat/heat/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatController.remove(java.lang.Integer[])
2019-04-03 17:20:41 -Mapped "{[/heat/heat/update]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatController.update(com.bootdo.heat.domain.HeatDO)
2019-04-03 17:20:41 -Mapped "{[/heat/heat/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.heat.controller.HeatController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 17:20:41 -Mapped "{[/heat/heat/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatController.save(com.bootdo.heat.domain.HeatDO)
2019-04-03 17:20:41 -Mapped "{[/heat/heat/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatController.edit(java.lang.Integer,org.springframework.ui.Model)
2019-04-03 17:20:41 -Mapped "{[/heat/heat/exprotHeat],methods=[GET]}" onto public void com.bootdo.heat.controller.HeatController.exprotExcel(com.bootdo.heat.vo.HeatVo,javax.servlet.http.HttpServletResponse)
2019-04-03 17:20:41 -Mapped "{[/heat/heat],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatController.Heat()
2019-04-03 17:20:41 -Mapped "{[/heat/heatInto/exprotHeatIntoExcel],methods=[GET]}" onto public void com.bootdo.heat.controller.HeatIntoController.exprotExcel(com.bootdo.heat.vo.HeatVo,javax.servlet.http.HttpServletResponse)
2019-04-03 17:20:41 -Mapped "{[/heat/heatInto],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatIntoController.HeatInto()
2019-04-03 17:20:41 -Mapped "{[/heat/heatPrice/add],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatPriceController.add()
2019-04-03 17:20:41 -Mapped "{[/heat/heatPrice/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatPriceController.remove(java.lang.Long)
2019-04-03 17:20:41 -Mapped "{[/heat/heatPrice/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatPriceController.remove(java.lang.Long[])
2019-04-03 17:20:41 -Mapped "{[/heat/heatPrice/update]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatPriceController.update(com.bootdo.heat.domain.HeatPriceDO)
2019-04-03 17:20:41 -Mapped "{[/heat/heatPrice/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.heat.controller.HeatPriceController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 17:20:41 -Mapped "{[/heat/heatPrice/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatPriceController.save(com.bootdo.heat.domain.HeatPriceDO)
2019-04-03 17:20:41 -Mapped "{[/heat/heatPrice/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatPriceController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 17:20:41 -Mapped "{[/heat/heatPrice],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatPriceController.HeatPrice()
2019-04-03 17:20:41 -Mapped "{[/heat/heatUpLoad/exprotHeatExcel],methods=[GET]}" onto public void com.bootdo.heat.controller.HeatUpLoadController.exprotHeatExcel(com.bootdo.heat.vo.HeatVo,javax.servlet.http.HttpServletResponse)
2019-04-03 17:20:41 -Mapped "{[/heat/heatUpLoad/createHeatExcel],methods=[POST]}" onto public java.lang.String com.bootdo.heat.controller.HeatUpLoadController.createHeatExcel(com.bootdo.heat.domain.HeatDO) throws java.lang.Exception
2019-04-03 17:20:41 -Mapped "{[/heat/heatUpLoad],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatUpLoadController.HeatUpLoad()
2019-04-03 17:20:41 -Mapped "{[/heat/heatUpLoad/importHeatExcel]}" onto public java.lang.String com.bootdo.heat.controller.HeatUpLoadController.importHeatExcel(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)
2019-04-03 17:20:41 -Mapped "{[/moneyList/moneyList/queryAllUser],methods=[POST]}" onto public java.util.List<com.bootdo.moneyList.damain.MoneyListDO> com.bootdo.moneyList.controller.MoneyListController.queryAllUser(com.bootdo.moneyList.damain.MoneyListDO)
2019-04-03 17:20:41 -Mapped "{[/moneyList/moneyList],methods=[GET]}" onto java.lang.String com.bootdo.moneyList.controller.MoneyListController.MoneyList()
2019-04-03 17:20:41 -Mapped "{[/moneyList/moneyList/updateMoney],methods=[POST]}" onto public java.util.List<com.bootdo.moneyList.damain.MoneyListDO> com.bootdo.moneyList.controller.MoneyListController.updateMoney(com.bootdo.moneyList.damain.MoneyListDO)
2019-04-03 17:20:41 -Mapped "{[/moneyList/moneyList/queryAllUserName],methods=[POST]}" onto public java.util.List<com.bootdo.moneyList.damain.MoneyListDO> com.bootdo.moneyList.controller.MoneyListController.getAllUserName(com.bootdo.moneyList.damain.MoneyListDO)
2019-04-03 17:20:41 -Mapped "{[/moneyLog/elecLog/add],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.ElecLogController.add()
2019-04-03 17:20:41 -Mapped "{[/moneyLog/elecLog/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.ElecLogController.remove(java.lang.Long)
2019-04-03 17:20:41 -Mapped "{[/moneyLog/elecLog/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.ElecLogController.remove(java.lang.Long[])
2019-04-03 17:20:41 -Mapped "{[/moneyLog/elecLog/update]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.ElecLogController.update(com.bootdo.moneyLog.domain.ElecLogDO)
2019-04-03 17:20:41 -Mapped "{[/moneyLog/elecLog/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.moneyLog.controller.ElecLogController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 17:20:41 -Mapped "{[/moneyLog/elecLog/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.ElecLogController.save(com.bootdo.moneyLog.domain.ElecLogDO)
2019-04-03 17:20:41 -Mapped "{[/moneyLog/elecLog/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.ElecLogController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 17:20:41 -Mapped "{[/moneyLog/elecLog],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.ElecLogController.moneyLog()
2019-04-03 17:20:41 -Mapped "{[/moneyLog/elecLog/exprotElecLog],methods=[GET]}" onto public void com.bootdo.moneyLog.controller.ElecLogController.exprotElecLog(com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-03 17:20:41 -Mapped "{[/moneyLog/heatLog/add],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.HeatLogController.add()
2019-04-03 17:20:41 -Mapped "{[/moneyLog/heatLog/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.HeatLogController.remove(java.lang.Long)
2019-04-03 17:20:41 -Mapped "{[/moneyLog/heatLog/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.HeatLogController.remove(java.lang.Long[])
2019-04-03 17:20:41 -Mapped "{[/moneyLog/heatLog/update]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.HeatLogController.update(com.bootdo.moneyLog.domain.HeatLogDO)
2019-04-03 17:20:41 -Mapped "{[/moneyLog/heatLog/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.moneyLog.controller.HeatLogController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 17:20:41 -Mapped "{[/moneyLog/heatLog/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.HeatLogController.save(com.bootdo.moneyLog.domain.HeatLogDO)
2019-04-03 17:20:41 -Mapped "{[/moneyLog/heatLog/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.HeatLogController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 17:20:41 -Mapped "{[/moneyLog/heatLog],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.HeatLogController.HeatLog()
2019-04-03 17:20:41 -Mapped "{[/moneyLog/heatLog/exprotHeatLog],methods=[GET]}" onto public void com.bootdo.moneyLog.controller.HeatLogController.exprotHeatLog(com.bootdo.moneyLog.vo.HeatLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-03 17:20:41 -Mapped "{[/moneyLog/waterLog/add],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.WaterLogController.add()
2019-04-03 17:20:41 -Mapped "{[/moneyLog/waterLog/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.WaterLogController.remove(java.lang.Long)
2019-04-03 17:20:41 -Mapped "{[/moneyLog/waterLog/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.WaterLogController.remove(java.lang.Long[])
2019-04-03 17:20:41 -Mapped "{[/moneyLog/waterLog/update]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.WaterLogController.update(com.bootdo.moneyLog.domain.WaterLogDO)
2019-04-03 17:20:41 -Mapped "{[/moneyLog/waterLog/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.moneyLog.controller.WaterLogController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 17:20:41 -Mapped "{[/moneyLog/waterLog/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.WaterLogController.save(com.bootdo.moneyLog.domain.WaterLogDO)
2019-04-03 17:20:41 -Mapped "{[/moneyLog/waterLog/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.WaterLogController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 17:20:41 -Mapped "{[/moneyLog/waterLog/exprotWaterLog],methods=[GET]}" onto public void com.bootdo.moneyLog.controller.WaterLogController.exprotWaterLog(com.bootdo.moneyLog.vo.WaterLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-03 17:20:41 -Mapped "{[/moneyLog/waterLog],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.WaterLogController.WaterLog()
2019-04-03 17:20:41 -Mapped "{[/oa/notify/add],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.add()
2019-04-03 17:20:41 -Mapped "{[/oa/notify/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.remove(java.lang.Long)
2019-04-03 17:20:41 -Mapped "{[/oa/notify/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.remove(java.lang.Long[])
2019-04-03 17:20:41 -Mapped "{[/oa/notify/update]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.update(com.bootdo.oa.domain.NotifyDO)
2019-04-03 17:20:41 -Mapped "{[/oa/notify/read/{id}],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.read(java.lang.Long,org.springframework.ui.Model)
2019-04-03 17:20:41 -Mapped "{[/oa/notify/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.oa.controller.NotifyController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 17:20:41 -Mapped "{[/oa/notify/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.save(com.bootdo.oa.domain.NotifyDO)
2019-04-03 17:20:41 -Mapped "{[/oa/notify/message],methods=[GET]}" onto com.bootdo.common.utils.PageUtils com.bootdo.oa.controller.NotifyController.message()
2019-04-03 17:20:41 -Mapped "{[/oa/notify/selfList],methods=[GET]}" onto com.bootdo.common.utils.PageUtils com.bootdo.oa.controller.NotifyController.selfList(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 17:20:41 -Mapped "{[/oa/notify/selfNotify],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.selefNotify()
2019-04-03 17:20:41 -Mapped "{[/oa/notify/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 17:20:41 -Mapped "{[/oa/notify],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.oaNotify()
2019-04-03 17:20:41 -Mapped "{[/print/print/add],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.add()
2019-04-03 17:20:41 -Mapped "{[/print/print/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.print.controller.PrintController.remove(java.lang.Long)
2019-04-03 17:20:41 -Mapped "{[/print/print/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.print.controller.PrintController.remove(java.lang.Long[])
2019-04-03 17:20:41 -Mapped "{[/print/print/update]}" onto public com.bootdo.common.utils.R com.bootdo.print.controller.PrintController.update(com.bootdo.print.domain.PrintDO)
2019-04-03 17:20:41 -Mapped "{[/print/print/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.print.controller.PrintController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 17:20:41 -Mapped "{[/print/print/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.print.controller.PrintController.save(java.lang.String,com.bootdo.print.domain.PrintDO)
2019-04-03 17:20:41 -Mapped "{[/print/print],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.Print()
2019-04-03 17:20:41 -Mapped "{[/print/print/exprotPrint],methods=[GET]}" onto public void com.bootdo.print.controller.PrintController.exprotPrint(com.bootdo.print.vo.PrintVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-03 17:20:41 -Mapped "{[/print/print/printEdit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.printEdit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 17:20:41 -Mapped "{[/print/print/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 17:20:41 -Mapped "{[/system/sysDept/add/{pId}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.add(java.lang.Long,org.springframework.ui.Model)
2019-04-03 17:20:41 -Mapped "{[/system/sysDept/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.remove(java.lang.Long)
2019-04-03 17:20:41 -Mapped "{[/system/sysDept/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.remove(java.lang.Long[])
2019-04-03 17:20:41 -Mapped "{[/system/sysDept/update]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.update(com.bootdo.system.domain.DeptDO)
2019-04-03 17:20:41 -Mapped "{[/system/sysDept/list],methods=[GET]}" onto public java.util.List<com.bootdo.system.domain.DeptDO> com.bootdo.system.controller.DeptController.list()
2019-04-03 17:20:41 -Mapped "{[/system/sysDept/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.save(com.bootdo.system.domain.DeptDO)
2019-04-03 17:20:41 -Mapped "{[/system/sysDept/tree],methods=[GET]}" onto public com.bootdo.common.domain.Tree<com.bootdo.system.domain.DeptDO> com.bootdo.system.controller.DeptController.tree()
2019-04-03 17:20:41 -Mapped "{[/system/sysDept],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.dept()
2019-04-03 17:20:41 -Mapped "{[/system/sysDept/treeView],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.treeView()
2019-04-03 17:20:41 -Mapped "{[/system/sysDept/edit/{deptId}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 17:20:41 -Mapped "{[/index],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.index(org.springframework.ui.Model)
2019-04-03 17:20:41 -Mapped "{[/main],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.main()
2019-04-03 17:20:41 -Mapped "{[/logout],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.logout()
2019-04-03 17:20:41 -Mapped "{[/login],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.LoginController.ajaxLogin(java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest)
2019-04-03 17:20:41 -Mapped "{[/ || ],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.welcome(org.springframework.ui.Model)
2019-04-03 17:20:41 -Mapped "{[/getVerify],methods=[GET]}" onto public void com.bootdo.system.controller.LoginController.getVerify(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-04-03 17:20:41 -Mapped "{[/login],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.login(org.springframework.ui.Model)
2019-04-03 17:20:41 -Mapped "{[/sys/menu/add/{pId}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.MenuController.add(org.springframework.ui.Model,java.lang.Long)
2019-04-03 17:20:41 -Mapped "{[/sys/menu/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.MenuController.remove(java.lang.Long)
2019-04-03 17:20:41 -Mapped "{[/sys/menu/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.MenuController.update(com.bootdo.system.domain.MenuDO)
2019-04-03 17:20:41 -Mapped "{[/sys/menu/list]}" onto java.util.List<com.bootdo.system.domain.MenuDO> com.bootdo.system.controller.MenuController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 17:20:41 -Mapped "{[/sys/menu/save],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.MenuController.save(com.bootdo.system.domain.MenuDO)
2019-04-03 17:20:41 -Mapped "{[/sys/menu/tree/{roleId}],methods=[GET]}" onto com.bootdo.common.domain.Tree<com.bootdo.system.domain.MenuDO> com.bootdo.system.controller.MenuController.tree(java.lang.Long)
2019-04-03 17:20:41 -Mapped "{[/sys/menu/tree],methods=[GET]}" onto com.bootdo.common.domain.Tree<com.bootdo.system.domain.MenuDO> com.bootdo.system.controller.MenuController.tree()
2019-04-03 17:20:41 -Mapped "{[/sys/menu],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.MenuController.menu(org.springframework.ui.Model)
2019-04-03 17:20:41 -Mapped "{[/sys/menu/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.MenuController.edit(org.springframework.ui.Model,java.lang.Long)
2019-04-03 17:20:41 -Mapped "{[/sys/role/add],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.RoleController.add()
2019-04-03 17:20:41 -Mapped "{[/sys/role/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.update(com.bootdo.system.domain.RoleDO)
2019-04-03 17:20:41 -Mapped "{[/sys/role/list],methods=[GET]}" onto java.util.List<com.bootdo.system.domain.RoleDO> com.bootdo.system.controller.RoleController.list()
2019-04-03 17:20:41 -Mapped "{[/sys/role/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.save(java.lang.Long)
2019-04-03 17:20:41 -Mapped "{[/sys/role/save],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.save(com.bootdo.system.domain.RoleDO)
2019-04-03 17:20:41 -Mapped "{[/sys/role/batchRemove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.batchRemove(java.lang.Long[])
2019-04-03 17:20:41 -Mapped "{[/sys/role],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.RoleController.role()
2019-04-03 17:20:41 -Mapped "{[/sys/role/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.RoleController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 17:20:41 -Mapped "{[/sys/online/list]}" onto public java.util.List<com.bootdo.system.domain.UserOnline> com.bootdo.system.controller.SessionController.list()
2019-04-03 17:20:41 -Mapped "{[/sys/online/forceLogout/{sessionId}]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.SessionController.forceLogout(java.lang.String,org.springframework.web.servlet.mvc.support.RedirectAttributes)
2019-04-03 17:20:41 -Mapped "{[/sys/online],methods=[GET]}" onto public java.lang.String com.bootdo.system.controller.SessionController.online()
2019-04-03 17:20:41 -Mapped "{[/sys/online/sessionList]}" onto public java.util.Collection<org.apache.shiro.session.Session> com.bootdo.system.controller.SessionController.sessionList()
2019-04-03 17:20:41 -Mapped "{[/sys/user/exit],methods=[POST]}" onto boolean com.bootdo.system.controller.UserController.exit(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 17:20:41 -Mapped "{[/sys/user/add],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.add(org.springframework.ui.Model)
2019-04-03 17:20:41 -Mapped "{[/sys/user/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.remove(java.lang.Long)
2019-04-03 17:20:41 -Mapped "{[/sys/user/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.update(com.bootdo.system.domain.UserDO)
2019-04-03 17:20:41 -Mapped "{[/sys/user/list],methods=[GET]}" onto com.bootdo.common.utils.PageUtils com.bootdo.system.controller.UserController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 17:20:41 -Mapped "{[/sys/user/save],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.save(com.bootdo.system.domain.UserDO)
2019-04-03 17:20:41 -Mapped "{[/sys/user/batchRemove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.batchRemove(java.lang.Long[])
2019-04-03 17:20:41 -Mapped "{[/sys/user/tree],methods=[GET]}" onto public com.bootdo.common.domain.Tree<com.bootdo.system.domain.DeptDO> com.bootdo.system.controller.UserController.tree()
2019-04-03 17:20:41 -Mapped "{[/sys/user],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.user(org.springframework.ui.Model)
2019-04-03 17:20:41 -Mapped "{[/sys/user/treeView],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.treeView()
2019-04-03 17:20:41 -Mapped "{[/sys/user/updatePeronal],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.updatePeronal(com.bootdo.system.domain.UserDO)
2019-04-03 17:20:41 -Mapped "{[/sys/user/resetPwd],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.resetPwd(com.bootdo.system.vo.UserVO)
2019-04-03 17:20:41 -Mapped "{[/sys/user/resetPwd/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.resetPwd(java.lang.Long,org.springframework.ui.Model)
2019-04-03 17:20:41 -Mapped "{[/sys/user/adminResetPwd],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.adminResetPwd(com.bootdo.system.vo.UserVO)
2019-04-03 17:20:41 -Mapped "{[/sys/user/personal],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.personal(org.springframework.ui.Model)
2019-04-03 17:20:41 -Mapped "{[/sys/user/uploadImg],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.uploadImg(org.springframework.web.multipart.MultipartFile,java.lang.String,javax.servlet.http.HttpServletRequest)
2019-04-03 17:20:41 -Mapped "{[/sys/user/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.edit(org.springframework.ui.Model,java.lang.Long)
2019-04-03 17:20:41 -Mapped "{[/file/downImport/{importType}],methods=[GET]}" onto public void com.bootdo.temple.controller.TempletController.downImport(javax.servlet.http.HttpServletResponse,java.lang.String)
2019-04-03 17:20:41 -Mapped "{[/water/water/add],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterController.add()
2019-04-03 17:20:41 -Mapped "{[/water/water/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterController.remove(java.lang.Long)
2019-04-03 17:20:41 -Mapped "{[/water/water/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterController.remove(java.lang.Long[])
2019-04-03 17:20:41 -Mapped "{[/water/water/update]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterController.update(com.bootdo.water.domain.WaterDO)
2019-04-03 17:20:41 -Mapped "{[/water/water/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.water.controller.WaterController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 17:20:41 -Mapped "{[/water/water/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterController.save(com.bootdo.water.domain.WaterDO)
2019-04-03 17:20:41 -Mapped "{[/water/water],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterController.Water()
2019-04-03 17:20:41 -Mapped "{[/water/water/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 17:20:41 -Mapped "{[/water/water/exprotWater],methods=[GET]}" onto public void com.bootdo.water.controller.WaterController.exprotExcel(com.bootdo.water.vo.WaterVo,javax.servlet.http.HttpServletResponse)
2019-04-03 17:20:41 -Mapped "{[/water/waterInto],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterIntoController.WaterInto()
2019-04-03 17:20:41 -Mapped "{[/water/waterInto/exprotWaterIntoExcel],methods=[GET]}" onto public void com.bootdo.water.controller.WaterIntoController.exprotExcel(com.bootdo.water.vo.WaterVo,javax.servlet.http.HttpServletResponse)
2019-04-03 17:20:41 -Mapped "{[/water/waterPrice/add],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterPriceController.add()
2019-04-03 17:20:41 -Mapped "{[/water/waterPrice/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterPriceController.remove(java.lang.Long)
2019-04-03 17:20:41 -Mapped "{[/water/waterPrice/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterPriceController.remove(java.lang.Long[])
2019-04-03 17:20:41 -Mapped "{[/water/waterPrice/update]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterPriceController.update(com.bootdo.water.domain.WaterPriceDO)
2019-04-03 17:20:41 -Mapped "{[/water/waterPrice/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.water.controller.WaterPriceController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 17:20:41 -Mapped "{[/water/waterPrice/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterPriceController.save(com.bootdo.water.domain.WaterPriceDO)
2019-04-03 17:20:41 -Mapped "{[/water/waterPrice],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterPriceController.WaterPrice()
2019-04-03 17:20:41 -Mapped "{[/water/waterPrice/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterPriceController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 17:20:41 -Mapped "{[/water/waterUpLoad/createWaterExcel],methods=[POST]}" onto public java.lang.String com.bootdo.water.controller.WaterUpLoadController.createWaterExcel(com.bootdo.water.domain.WaterDO) throws java.lang.Exception
2019-04-03 17:20:41 -Mapped "{[/water/waterUpLoad],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterUpLoadController.WaterUpLoad()
2019-04-03 17:20:41 -Mapped "{[/water/waterUpLoad/importWaterExcel]}" onto public java.lang.String com.bootdo.water.controller.WaterUpLoadController.importWaterExcel(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)
2019-04-03 17:20:41 -Mapped "{[/water/waterUpLoad/exprotWaterExcel],methods=[GET]}" onto public void com.bootdo.water.controller.WaterUpLoadController.exprotWaterExcel(com.bootdo.water.vo.WaterVo,javax.servlet.http.HttpServletResponse)
2019-04-03 17:20:41 -Mapped "{[/v2/api-docs],methods=[GET],produces=[application/json || application/hal+json]}" onto public org.springframework.http.ResponseEntity<springfox.documentation.spring.web.json.Json> springfox.documentation.swagger2.web.Swagger2Controller.getDocumentation(java.lang.String,javax.servlet.http.HttpServletRequest)
2019-04-03 17:20:41 -Mapped "{[/swagger-resources/configuration/security]}" onto org.springframework.http.ResponseEntity<springfox.documentation.swagger.web.SecurityConfiguration> springfox.documentation.swagger.web.ApiResourceController.securityConfiguration()
2019-04-03 17:20:41 -Mapped "{[/swagger-resources/configuration/ui]}" onto org.springframework.http.ResponseEntity<springfox.documentation.swagger.web.UiConfiguration> springfox.documentation.swagger.web.ApiResourceController.uiConfiguration()
2019-04-03 17:20:41 -Mapped "{[/swagger-resources]}" onto org.springframework.http.ResponseEntity<java.util.List<springfox.documentation.swagger.web.SwaggerResource>> springfox.documentation.swagger.web.ApiResourceController.swaggerResources()
2019-04-03 17:20:41 -Initializing ExecutorService  'messageBrokerTaskScheduler'
2019-04-03 17:20:42 -Mapped URL path [/endpointChat/**] onto handler of type [class org.springframework.web.socket.sockjs.support.SockJsHttpRequestHandler]
2019-04-03 17:20:42 -Initializing ExecutorService  'brokerChannelExecutor'
2019-04-03 17:20:42 -Mapped URL path [/**/favicon.ico] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-04-03 17:20:43 -Looking for @ControllerAdvice: org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@2e6a8155: startup date [Wed Apr 03 17:20:14 CST 2019]; root of context hierarchy
2019-04-03 17:20:43 -Mapped URL path [/webjars/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-04-03 17:20:43 -Mapped URL path [/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-04-03 17:20:43 -Mapped URL path [/files/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-04-03 17:20:43 -Detected @ExceptionHandler methods in BDExceptionHandler
2019-04-03 17:20:43 -[THYMELEAF][main] Template Mode 'LEGACYHTML5' is deprecated. Using Template Mode 'HTML' instead.
2019-04-03 17:20:47 -Registering beans for JMX exposure on startup
2019-04-03 17:20:47 -Bean with name 'dataSource' has been autodetected for JMX exposure
2019-04-03 17:20:47 -Located MBean 'dataSource': registering with JMX server as MBean [com.alibaba.druid.pool:name=dataSource,type=DruidDataSource]
2019-04-03 17:20:47 -Starting beans in phase 2147483647
2019-04-03 17:20:47 -Context refreshed
2019-04-03 17:20:47 -Found 1 custom documentation plugin(s)
2019-04-03 17:20:47 -Scanning for api listing references
2019-04-03 17:20:47 -Generating unique operation named: exprotElecLogUsingGET_1
2019-04-03 17:20:47 -Generating unique operation named: getCountDUsingPOST_1
2019-04-03 17:20:47 -Generating unique operation named: exprotElecLogUsingGET_2
2019-04-03 17:20:47 -Generating unique operation named: getCountDUsingPOST_2
2019-04-03 17:20:47 -Generating unique operation named: exprotElecLogUsingGET_3
2019-04-03 17:20:47 -Generating unique operation named: getCountDUsingPOST_3
2019-04-03 17:20:48 -Generating unique operation named: removeUsingPOST_1
2019-04-03 17:20:48 -Generating unique operation named: addUsingGET_1
2019-04-03 17:20:48 -Generating unique operation named: editUsingGET_1
2019-04-03 17:20:48 -Generating unique operation named: listUsingGET_1
2019-04-03 17:20:48 -Generating unique operation named: removeUsingPOST_2
2019-04-03 17:20:48 -Generating unique operation named: removeUsingPOST_3
2019-04-03 17:20:48 -Generating unique operation named: saveUsingPOST_1
2019-04-03 17:20:48 -Generating unique operation named: updateUsingGET_1
2019-04-03 17:20:48 -Generating unique operation named: updateUsingHEAD_1
2019-04-03 17:20:48 -Generating unique operation named: updateUsingPOST_1
2019-04-03 17:20:48 -Generating unique operation named: updateUsingPUT_1
2019-04-03 17:20:48 -Generating unique operation named: updateUsingPATCH_1
2019-04-03 17:20:48 -Generating unique operation named: updateUsingDELETE_1
2019-04-03 17:20:48 -Generating unique operation named: updateUsingOPTIONS_1
2019-04-03 17:20:48 -Generating unique operation named: updateUsingTRACE_1
2019-04-03 17:20:48 -Generating unique operation named: addUsingGET_2
2019-04-03 17:20:48 -Generating unique operation named: editUsingGET_2
2019-04-03 17:20:48 -Generating unique operation named: listUsingGET_2
2019-04-03 17:20:48 -Generating unique operation named: removeUsingPOST_4
2019-04-03 17:20:48 -Generating unique operation named: removeUsingPOST_5
2019-04-03 17:20:48 -Generating unique operation named: saveUsingPOST_2
2019-04-03 17:20:48 -Generating unique operation named: updateUsingPOST_2
2019-04-03 17:20:48 -Generating unique operation named: exprotExcelUsingGET_1
2019-04-03 17:20:48 -Generating unique operation named: addUsingGET_3
2019-04-03 17:20:48 -Generating unique operation named: editUsingGET_3
2019-04-03 17:20:48 -Generating unique operation named: exprotElecLogUsingGET_4
2019-04-03 17:20:48 -Generating unique operation named: listUsingGET_3
2019-04-03 17:20:48 -Generating unique operation named: removeUsingPOST_6
2019-04-03 17:20:48 -Generating unique operation named: removeUsingPOST_7
2019-04-03 17:20:48 -Generating unique operation named: saveUsingPOST_3
2019-04-03 17:20:48 -Generating unique operation named: updateUsingGET_2
2019-04-03 17:20:48 -Generating unique operation named: updateUsingHEAD_2
2019-04-03 17:20:48 -Generating unique operation named: updateUsingPOST_3
2019-04-03 17:20:48 -Generating unique operation named: updateUsingPUT_2
2019-04-03 17:20:48 -Generating unique operation named: updateUsingPATCH_2
2019-04-03 17:20:48 -Generating unique operation named: updateUsingDELETE_2
2019-04-03 17:20:48 -Generating unique operation named: updateUsingOPTIONS_2
2019-04-03 17:20:48 -Generating unique operation named: updateUsingTRACE_2
2019-04-03 17:20:48 -Generating unique operation named: addUsingGET_4
2019-04-03 17:20:48 -Generating unique operation named: editUsingGET_4
2019-04-03 17:20:48 -Generating unique operation named: listUsingGET_4
2019-04-03 17:20:48 -Generating unique operation named: removeUsingPOST_8
2019-04-03 17:20:48 -Generating unique operation named: removeUsingPOST_9
2019-04-03 17:20:48 -Generating unique operation named: saveUsingPOST_4
2019-04-03 17:20:48 -Generating unique operation named: updateUsingGET_3
2019-04-03 17:20:48 -Generating unique operation named: updateUsingHEAD_3
2019-04-03 17:20:48 -Generating unique operation named: updateUsingPOST_4
2019-04-03 17:20:48 -Generating unique operation named: updateUsingPUT_3
2019-04-03 17:20:48 -Generating unique operation named: updateUsingPATCH_3
2019-04-03 17:20:48 -Generating unique operation named: updateUsingDELETE_3
2019-04-03 17:20:48 -Generating unique operation named: updateUsingOPTIONS_3
2019-04-03 17:20:48 -Generating unique operation named: updateUsingTRACE_3
2019-04-03 17:20:48 -Generating unique operation named: ElecUsingGET_1
2019-04-03 17:20:48 -Generating unique operation named: addUsingGET_5
2019-04-03 17:20:48 -Generating unique operation named: editUsingGET_5
2019-04-03 17:20:48 -Generating unique operation named: listUsingGET_5
2019-04-03 17:20:48 -Generating unique operation named: removeUsingPOST_10
2019-04-03 17:20:48 -Generating unique operation named: removeUsingPOST_11
2019-04-03 17:20:48 -Generating unique operation named: saveUsingPOST_5
2019-04-03 17:20:48 -Generating unique operation named: updateUsingGET_4
2019-04-03 17:20:48 -Generating unique operation named: updateUsingHEAD_4
2019-04-03 17:20:48 -Generating unique operation named: updateUsingPOST_5
2019-04-03 17:20:48 -Generating unique operation named: updateUsingPUT_4
2019-04-03 17:20:48 -Generating unique operation named: updateUsingPATCH_4
2019-04-03 17:20:48 -Generating unique operation named: updateUsingDELETE_4
2019-04-03 17:20:48 -Generating unique operation named: updateUsingOPTIONS_4
2019-04-03 17:20:48 -Generating unique operation named: updateUsingTRACE_4
2019-04-03 17:20:48 -Generating unique operation named: editUsingGET_6
2019-04-03 17:20:48 -Generating unique operation named: listUsingGET_6
2019-04-03 17:20:48 -Generating unique operation named: updateUsingPOST_6
2019-04-03 17:20:48 -Generating unique operation named: addUsingGET_6
2019-04-03 17:20:48 -Generating unique operation named: editUsingGET_7
2019-04-03 17:20:48 -Generating unique operation named: exprotExcelUsingGET_2
2019-04-03 17:20:48 -Generating unique operation named: listUsingGET_7
2019-04-03 17:20:48 -Generating unique operation named: removeUsingPOST_12
2019-04-03 17:20:48 -Generating unique operation named: removeUsingPOST_13
2019-04-03 17:20:48 -Generating unique operation named: saveUsingPOST_6
2019-04-03 17:20:48 -Generating unique operation named: updateUsingGET_5
2019-04-03 17:20:48 -Generating unique operation named: updateUsingHEAD_5
2019-04-03 17:20:48 -Generating unique operation named: updateUsingPOST_7
2019-04-03 17:20:48 -Generating unique operation named: updateUsingPUT_5
2019-04-03 17:20:48 -Generating unique operation named: updateUsingPATCH_5
2019-04-03 17:20:48 -Generating unique operation named: updateUsingDELETE_5
2019-04-03 17:20:48 -Generating unique operation named: updateUsingOPTIONS_5
2019-04-03 17:20:48 -Generating unique operation named: updateUsingTRACE_5
2019-04-03 17:20:48 -Generating unique operation named: exprotExcelUsingGET_3
2019-04-03 17:20:48 -Generating unique operation named: addUsingGET_7
2019-04-03 17:20:48 -Generating unique operation named: editUsingGET_8
2019-04-03 17:20:48 -Generating unique operation named: listUsingGET_8
2019-04-03 17:20:48 -Generating unique operation named: removeUsingPOST_14
2019-04-03 17:20:49 -Generating unique operation named: removeUsingPOST_15
2019-04-03 17:20:49 -Generating unique operation named: saveUsingPOST_7
2019-04-03 17:20:49 -Generating unique operation named: updateUsingGET_6
2019-04-03 17:20:49 -Generating unique operation named: updateUsingHEAD_6
2019-04-03 17:20:49 -Generating unique operation named: updateUsingPOST_8
2019-04-03 17:20:49 -Generating unique operation named: updateUsingPUT_6
2019-04-03 17:20:49 -Generating unique operation named: updateUsingPATCH_6
2019-04-03 17:20:49 -Generating unique operation named: updateUsingDELETE_6
2019-04-03 17:20:49 -Generating unique operation named: updateUsingOPTIONS_6
2019-04-03 17:20:49 -Generating unique operation named: updateUsingTRACE_6
2019-04-03 17:20:49 -Generating unique operation named: addUsingGET_8
2019-04-03 17:20:49 -Generating unique operation named: editUsingGET_9
2019-04-03 17:20:49 -Generating unique operation named: listUsingGET_9
2019-04-03 17:20:49 -Generating unique operation named: removeUsingPOST_16
2019-04-03 17:20:49 -Generating unique operation named: removeUsingPOST_17
2019-04-03 17:20:49 -Generating unique operation named: saveUsingPOST_8
2019-04-03 17:20:49 -Generating unique operation named: updateUsingGET_7
2019-04-03 17:20:49 -Generating unique operation named: updateUsingHEAD_7
2019-04-03 17:20:49 -Generating unique operation named: updateUsingPOST_9
2019-04-03 17:20:49 -Generating unique operation named: updateUsingPUT_7
2019-04-03 17:20:49 -Generating unique operation named: updateUsingPATCH_7
2019-04-03 17:20:49 -Generating unique operation named: updateUsingDELETE_7
2019-04-03 17:20:49 -Generating unique operation named: updateUsingOPTIONS_7
2019-04-03 17:20:49 -Generating unique operation named: updateUsingTRACE_7
2019-04-03 17:20:49 -Generating unique operation named: addUsingGET_9
2019-04-03 17:20:49 -Generating unique operation named: editUsingGET_10
2019-04-03 17:20:49 -Generating unique operation named: infoUsingGET_1
2019-04-03 17:20:49 -Generating unique operation named: infoUsingHEAD_1
2019-04-03 17:20:49 -Generating unique operation named: infoUsingPOST_1
2019-04-03 17:20:49 -Generating unique operation named: infoUsingPUT_1
2019-04-03 17:20:49 -Generating unique operation named: infoUsingPATCH_1
2019-04-03 17:20:49 -Generating unique operation named: infoUsingDELETE_1
2019-04-03 17:20:49 -Generating unique operation named: infoUsingOPTIONS_1
2019-04-03 17:20:49 -Generating unique operation named: infoUsingTRACE_1
2019-04-03 17:20:49 -Generating unique operation named: listUsingGET_10
2019-04-03 17:20:49 -Generating unique operation named: removeUsingPOST_18
2019-04-03 17:20:49 -Generating unique operation named: removeUsingPOST_19
2019-04-03 17:20:49 -Generating unique operation named: saveUsingPOST_9
2019-04-03 17:20:49 -Generating unique operation named: updateUsingPOST_10
2019-04-03 17:20:49 -Generating unique operation named: listUsingGET_11
2019-04-03 17:20:49 -Generating unique operation named: removeUsingPOST_20
2019-04-03 17:20:49 -Generating unique operation named: welcomeUsingGET_1
2019-04-03 17:20:49 -Generating unique operation named: addUsingGET_10
2019-04-03 17:20:49 -Generating unique operation named: editUsingGET_11
2019-04-03 17:20:49 -Generating unique operation named: listUsingGET_12
2019-04-03 17:20:49 -Generating unique operation named: removeUsingPOST_21
2019-04-03 17:20:49 -Generating unique operation named: saveUsingPOST_10
2019-04-03 17:20:49 -Generating unique operation named: treeUsingGET_1
2019-04-03 17:20:49 -Generating unique operation named: treeUsingGET_2
2019-04-03 17:20:49 -Generating unique operation named: updateUsingPOST_11
2019-04-03 17:20:49 -Generating unique operation named: addUsingGET_11
2019-04-03 17:20:49 -Generating unique operation named: editUsingGET_12
2019-04-03 17:20:49 -Generating unique operation named: listUsingGET_13
2019-04-03 17:20:49 -Generating unique operation named: removeUsingPOST_22
2019-04-03 17:20:49 -Generating unique operation named: removeUsingPOST_23
2019-04-03 17:20:49 -Generating unique operation named: saveUsingPOST_11
2019-04-03 17:20:49 -Generating unique operation named: updateUsingGET_8
2019-04-03 17:20:49 -Generating unique operation named: updateUsingHEAD_8
2019-04-03 17:20:49 -Generating unique operation named: updateUsingPOST_12
2019-04-03 17:20:49 -Generating unique operation named: updateUsingPUT_8
2019-04-03 17:20:49 -Generating unique operation named: updateUsingPATCH_8
2019-04-03 17:20:49 -Generating unique operation named: updateUsingDELETE_8
2019-04-03 17:20:49 -Generating unique operation named: updateUsingOPTIONS_8
2019-04-03 17:20:49 -Generating unique operation named: updateUsingTRACE_8
2019-04-03 17:20:49 -Generating unique operation named: addUsingGET_12
2019-04-03 17:20:49 -Generating unique operation named: editUsingGET_13
2019-04-03 17:20:49 -Generating unique operation named: listUsingGET_14
2019-04-03 17:20:49 -Generating unique operation named: removeUsingPOST_24
2019-04-03 17:20:49 -Generating unique operation named: removeUsingPOST_25
2019-04-03 17:20:49 -Generating unique operation named: saveUsingPOST_12
2019-04-03 17:20:49 -Generating unique operation named: updateUsingGET_9
2019-04-03 17:20:49 -Generating unique operation named: updateUsingHEAD_9
2019-04-03 17:20:49 -Generating unique operation named: updateUsingPOST_13
2019-04-03 17:20:49 -Generating unique operation named: updateUsingPUT_9
2019-04-03 17:20:49 -Generating unique operation named: updateUsingPATCH_9
2019-04-03 17:20:49 -Generating unique operation named: updateUsingDELETE_9
2019-04-03 17:20:49 -Generating unique operation named: updateUsingOPTIONS_9
2019-04-03 17:20:49 -Generating unique operation named: updateUsingTRACE_9
2019-04-03 17:20:49 -Generating unique operation named: addUsingGET_13
2019-04-03 17:20:49 -Generating unique operation named: batchRemoveUsingPOST_1
2019-04-03 17:20:49 -Generating unique operation named: editUsingGET_14
2019-04-03 17:20:49 -Generating unique operation named: listUsingGET_15
2019-04-03 17:20:49 -Generating unique operation named: saveUsingPOST_13
2019-04-03 17:20:49 -Generating unique operation named: saveUsingPOST_14
2019-04-03 17:20:49 -Generating unique operation named: updateUsingPOST_14
2019-04-03 17:20:49 -Generating unique operation named: listUsingGET_16
2019-04-03 17:20:49 -Generating unique operation named: listUsingHEAD_1
2019-04-03 17:20:49 -Generating unique operation named: listUsingPOST_1
2019-04-03 17:20:49 -Generating unique operation named: listUsingPUT_1
2019-04-03 17:20:49 -Generating unique operation named: listUsingPATCH_1
2019-04-03 17:20:49 -Generating unique operation named: listUsingDELETE_1
2019-04-03 17:20:49 -Generating unique operation named: listUsingOPTIONS_1
2019-04-03 17:20:49 -Generating unique operation named: listUsingTRACE_1
2019-04-03 17:20:49 -Generating unique operation named: addUsingGET_14
2019-04-03 17:20:49 -Generating unique operation named: batchRemoveUsingPOST_2
2019-04-03 17:20:49 -Generating unique operation named: editUsingGET_15
2019-04-03 17:20:49 -Generating unique operation named: listUsingGET_17
2019-04-03 17:20:49 -Generating unique operation named: removeUsingPOST_26
2019-04-03 17:20:49 -Generating unique operation named: saveUsingPOST_15
2019-04-03 17:20:49 -Generating unique operation named: treeUsingGET_3
2019-04-03 17:20:49 -Generating unique operation named: treeViewUsingGET_1
2019-04-03 17:20:49 -Generating unique operation named: updateUsingPOST_15
2019-04-03 17:20:49 -Generating unique operation named: addUsingGET_15
2019-04-03 17:20:49 -Generating unique operation named: editUsingGET_16
2019-04-03 17:20:49 -Generating unique operation named: exprotExcelUsingGET_4
2019-04-03 17:20:49 -Generating unique operation named: listUsingGET_18
2019-04-03 17:20:49 -Generating unique operation named: removeUsingPOST_27
2019-04-03 17:20:49 -Generating unique operation named: removeUsingPOST_28
2019-04-03 17:20:49 -Generating unique operation named: saveUsingPOST_16
2019-04-03 17:20:49 -Generating unique operation named: updateUsingGET_10
2019-04-03 17:20:49 -Generating unique operation named: updateUsingHEAD_10
2019-04-03 17:20:49 -Generating unique operation named: updateUsingPOST_16
2019-04-03 17:20:49 -Generating unique operation named: updateUsingPUT_10
2019-04-03 17:20:49 -Generating unique operation named: updateUsingPATCH_10
2019-04-03 17:20:49 -Generating unique operation named: updateUsingDELETE_10
2019-04-03 17:20:50 -Generating unique operation named: updateUsingOPTIONS_10
2019-04-03 17:20:50 -Generating unique operation named: updateUsingTRACE_10
2019-04-03 17:20:50 -Generating unique operation named: exprotExcelUsingGET_5
2019-04-03 17:20:50 -Generating unique operation named: addUsingGET_16
2019-04-03 17:20:50 -Generating unique operation named: editUsingGET_17
2019-04-03 17:20:50 -Generating unique operation named: listUsingGET_19
2019-04-03 17:20:50 -Generating unique operation named: removeUsingPOST_29
2019-04-03 17:20:50 -Generating unique operation named: removeUsingPOST_30
2019-04-03 17:20:50 -Generating unique operation named: saveUsingPOST_17
2019-04-03 17:20:50 -Generating unique operation named: updateUsingGET_11
2019-04-03 17:20:50 -Generating unique operation named: updateUsingHEAD_11
2019-04-03 17:20:50 -Generating unique operation named: updateUsingPOST_17
2019-04-03 17:20:50 -Generating unique operation named: updateUsingPUT_11
2019-04-03 17:20:50 -Generating unique operation named: updateUsingPATCH_11
2019-04-03 17:20:50 -Generating unique operation named: updateUsingDELETE_11
2019-04-03 17:20:50 -Generating unique operation named: updateUsingOPTIONS_11
2019-04-03 17:20:50 -Generating unique operation named: updateUsingTRACE_11
2019-04-03 17:20:50 -Generating unique operation named: addUsingGET_17
2019-04-03 17:20:50 -Generating unique operation named: editUsingGET_18
2019-04-03 17:20:50 -Generating unique operation named: listUsingGET_20
2019-04-03 17:20:50 -Generating unique operation named: removeUsingPOST_31
2019-04-03 17:20:50 -Generating unique operation named: removeUsingPOST_32
2019-04-03 17:20:50 -Generating unique operation named: saveUsingPOST_18
2019-04-03 17:20:50 -Generating unique operation named: updateUsingGET_12
2019-04-03 17:20:50 -Generating unique operation named: updateUsingHEAD_12
2019-04-03 17:20:50 -Generating unique operation named: updateUsingPOST_18
2019-04-03 17:20:50 -Generating unique operation named: updateUsingPUT_12
2019-04-03 17:20:50 -Generating unique operation named: updateUsingPATCH_12
2019-04-03 17:20:50 -Generating unique operation named: updateUsingDELETE_12
2019-04-03 17:20:50 -Generating unique operation named: updateUsingOPTIONS_12
2019-04-03 17:20:50 -Generating unique operation named: updateUsingTRACE_12
2019-04-03 17:20:50 -Starting Quartz Scheduler now
2019-04-03 17:20:50 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED started.
2019-04-03 17:20:50 -Starting...
2019-04-03 17:20:50 -BrokerAvailabilityEvent[available=true, SimpleBrokerMessageHandler [DefaultSubscriptionRegistry[cache[0 destination(s)], registry[0 sessions]]]]
2019-04-03 17:20:50 -Started.
2019-04-03 17:20:50 -Starting ProtocolHandler ["http-nio-8081"]
2019-04-03 17:20:50 -Failed to start connector [Connector[HTTP/1.1-8081]]
org.apache.catalina.LifecycleException: Failed to start component [Connector[HTTP/1.1-8081]]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:167)
	at org.apache.catalina.core.StandardService.addConnector(StandardService.java:225)
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.addPreviouslyRemovedConnectors(TomcatWebServer.java:256)
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.start(TomcatWebServer.java:198)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.startWebServer(ServletWebServerApplicationContext.java:300)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.finishRefresh(ServletWebServerApplicationContext.java:162)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:553)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:140)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:759)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:395)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:327)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1255)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1243)
	at com.bootdo.BootdoApplication.main(BootdoApplication.java:21)
Caused by: org.apache.catalina.LifecycleException: Protocol handler start failed
	at org.apache.catalina.connector.Connector.startInternal(Connector.java:1020)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:150)
	... 13 common frames omitted
Caused by: java.net.BindException: Address already in use: bind
	at sun.nio.ch.Net.bind0(Native Method)
	at sun.nio.ch.Net.bind(Unknown Source)
	at sun.nio.ch.Net.bind(Unknown Source)
	at sun.nio.ch.ServerSocketChannelImpl.bind(Unknown Source)
	at sun.nio.ch.ServerSocketAdaptor.bind(Unknown Source)
	at org.apache.tomcat.util.net.NioEndpoint.bind(NioEndpoint.java:210)
	at org.apache.tomcat.util.net.AbstractEndpoint.start(AbstractEndpoint.java:1150)
	at org.apache.coyote.AbstractProtocol.start(AbstractProtocol.java:591)
	at org.apache.catalina.connector.Connector.startInternal(Connector.java:1018)
	... 14 common frames omitted
2019-04-03 17:20:50 -Pausing ProtocolHandler ["http-nio-8081"]
2019-04-03 17:20:50 -Stopping service [Tomcat]
2019-04-03 17:20:50 -The stop() method was called on component [StandardServer[-1]] after stop() had already been called. The second call will be ignored.
2019-04-03 17:20:50 -Stopping ProtocolHandler ["http-nio-8081"]
2019-04-03 17:20:50 -Destroying ProtocolHandler ["http-nio-8081"]
2019-04-03 17:20:50 -

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2019-04-03 17:20:50 -

***************************
APPLICATION FAILED TO START
***************************

Description:

The Tomcat connector configured to listen on port 8081 failed to start. The port may already be in use or the connector may be misconfigured.

Action:

Verify the connector's configuration, identify and stop any process that's listening on port 8081, or configure this application to listen on another port.

2019-04-03 17:20:50 -Closing org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@2e6a8155: startup date [Wed Apr 03 17:20:14 CST 2019]; root of context hierarchy
2019-04-03 17:20:50 -Stopping beans in phase 2147483647
2019-04-03 17:20:50 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED paused.
2019-04-03 17:20:50 -Stopping...
2019-04-03 17:20:50 -BrokerAvailabilityEvent[available=false, SimpleBrokerMessageHandler [DefaultSubscriptionRegistry[cache[0 destination(s)], registry[0 sessions]]]]
2019-04-03 17:20:50 -Stopped.
2019-04-03 17:20:50 -Unregistering JMX-exposed beans on shutdown
2019-04-03 17:20:50 -Unregistering JMX-exposed beans
2019-04-03 17:20:50 -Shutting down ExecutorService 'brokerChannelExecutor'
2019-04-03 17:20:50 -Shutting down ExecutorService 'messageBrokerTaskScheduler'
2019-04-03 17:20:50 -Shutting down ExecutorService 'clientOutboundChannelExecutor'
2019-04-03 17:20:50 -Shutting down ExecutorService 'clientInboundChannelExecutor'
2019-04-03 17:20:50 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED shutting down.
2019-04-03 17:20:50 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED paused.
2019-04-03 17:20:50 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED shutdown complete.
2019-04-03 17:20:50 -Shutting down Quartz Scheduler
2019-04-03 17:22:05 -请求地址 : http://localhost:8081/login;JSESSIONID=8262cc27-a25e-4d6f-b958-f4e14fce9eab
2019-04-03 17:22:05 -HTTP METHOD : GET
2019-04-03 17:22:05 -CLASS_METHOD : com.bootdo.system.controller.LoginController.login
2019-04-03 17:22:05 -参数 : [{}]
2019-04-03 17:22:05 -耗时 : 1
2019-04-03 17:22:05 -返回值 : login
2019-04-03 17:22:06 -请求地址 : http://localhost:8081/getVerify
2019-04-03 17:22:06 -HTTP METHOD : GET
2019-04-03 17:22:06 -CLASS_METHOD : com.bootdo.system.controller.LoginController.getVerify
2019-04-03 17:22:06 -参数 : [org.apache.shiro.web.servlet.ShiroHttpServletRequest@3e93fa3d, org.apache.shiro.web.servlet.ShiroHttpServletResponse@2bfad19c]
2019-04-03 17:22:06 -5111
2019-04-03 17:22:06 -耗时 : 67
2019-04-03 17:22:06 -返回值 : null
2019-04-03 17:22:06 -请求地址 : http://localhost:8081/login
2019-04-03 17:22:06 -HTTP METHOD : GET
2019-04-03 17:22:06 -CLASS_METHOD : com.bootdo.system.controller.LoginController.login
2019-04-03 17:22:06 -参数 : [{}]
2019-04-03 17:22:06 -耗时 : 2
2019-04-03 17:22:06 -返回值 : login
2019-04-03 17:22:10 -请求地址 : http://localhost:8081/login
2019-04-03 17:22:10 -HTTP METHOD : POST
2019-04-03 17:22:10 -CLASS_METHOD : com.bootdo.system.controller.LoginController.ajaxLogin
2019-04-03 17:22:10 -参数 : [admin, 111111, 5111, org.apache.shiro.web.servlet.ShiroHttpServletRequest@4b615ca1]
2019-04-03 17:22:10 -==>  Preparing: select `user_id`,`username`,`name`,`password`,`dept_id`,`email`,`mobile`,`status`,`user_id_create`,`gmt_create`,`gmt_modified`,`sex`,`birth`,`pic_id`,`live_address`,`hobby`,`province`,`city`,`district` from sys_user WHERE username = ? order by user_id desc 
2019-04-03 17:22:10 -==> Parameters: admin(String)
2019-04-03 17:22:10 -<==      Total: 1
2019-04-03 17:22:10 -耗时 : 114
2019-04-03 17:22:10 -返回值 : {msg=操作成功, code=0}
2019-04-03 17:22:10 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 17:22:10 -==> Parameters: 1(Long), admin(String), 登录(String), 115(Integer), com.bootdo.system.controller.LoginController.ajaxLogin()(String), null, 127.0.0.1(String), 2019-04-03 17:22:10.642(Timestamp)
2019-04-03 17:22:10 -请求地址 : http://localhost:8081/index
2019-04-03 17:22:10 -HTTP METHOD : GET
2019-04-03 17:22:10 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2019-04-03 17:22:10 -参数 : [{}]
2019-04-03 17:22:10 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2019-04-03 17:22:10 -==> Parameters: 1(Long)
2019-04-03 17:22:10 -<==    Updates: 1
2019-04-03 17:22:10 -<==      Total: 46
2019-04-03 17:22:11 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2019-04-03 17:22:11 -==> Parameters: 138(Long)
2019-04-03 17:22:11 -<==      Total: 1
2019-04-03 17:22:11 -耗时 : 317
2019-04-03 17:22:11 -返回值 : index_v1
2019-04-03 17:22:11 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 17:22:11 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 317(Integer), com.bootdo.system.controller.LoginController.index()(String), {"menus":[{"attributes":{"icon":"fa fa-money","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-money","url":"/moneyList/moneyList"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"102","parentId":"106","text":"现金缴费"},{"attributes":{"icon":"fa fa-book","url":"/moneyLog/elecLog"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"107","parentId":"106","text":"缴费记录"}],"hasChildren":true,"hasParent":false,"id":"106","parentId":"0","text":"收费管理"},{"attributes":{"icon":"fa fa-lightbulb-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/elec/elec"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"121","parentId":"103","text":"电费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"elec/elecInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"122","parentId":"103","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"elec/elecUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"123","parentId":"103","text":"电表上传"},{"attributes":{"icon":"fa fa-cc","url":"/elec/elecPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"124","parentId":"103","text":"电价管理"}],"hasChildren":true,"hasParent":false,"id":"103","parentId":"0","text":"电费管理"},{"attributes":{"icon":"fa fa-tint","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/water/water"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"117","parentId":"105","text":"水费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"water/waterInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"118","parentId":"105","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"water/waterUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"119","parentId":"105","text":"水费生成"},{"attributes":{"icon":"fa fa-cc","url":"/water/waterPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"120","parentId":"105","text":"水价管理"}],"hasChildren":true,"hasParent":false,"id":"105","parentId":"0","text":"水费管理"},{"attributes":{"icon":"fa fa-fire","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/heat/heat"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"113","parentId":"104","text":"暖费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"heat/heatInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"114","parentId":"104","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"heat/heatUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"115","parentId":"104","text":"暖费生成"},{"attributes":{"icon":"","url":"/heat/heatPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"116","parentId":"104","text":"暖价管理"}],"hasChildren":true,"hasParent":false,"id":"104","parentId":"0","text":"暖费管理"},{"attributes":{"icon":"fa fa-vcard-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-bomb","url":"/print/print"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"149","parentId":"108","text":"票据记录"}],"hasChildren":true,"hasParent":false,"id":"108","parentId":"0","text":"票据管理"},{"attributes":{"icon":"fa fa-bar-chart","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-area-chart","url":"/chart/graph_echarts.html"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","text":"百度chart"},{"attributes":{"icon":"fa fa-sun-o","url":"charts/countDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"109","parentId":"97","text":"日统计报表"},{"attributes":{"icon":"fa fa-registered","url":"charts/countMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"110","parentId":"97","text":"月统计报表"},{"attributes":{"icon":"fa fa-money","url":"charts/countOwe"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"155","parentId":"97","text":"欠费报表图"},{"attributes":{"icon":"fa fa-support","url":"charts/countYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"111","parentId":"97","text":"年统计报表"},{"attributes":{"icon":"fa fa-tachometer","url":"charts/countRun"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"112","parentId":"97","text":"走势图报表"}],"hasChildren":true,"hasParent":false,"id":"97","parentId":"0","text":"统计管理"},{"attributes":{"icon":"fa fa-bars","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-book","url":"/common/dict"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"78","parentId":"1","text":"数据字典"},{"attributes":{"icon":"fa fa-folder-open","url":"/common/sysFile"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"71","parentId":"1","text":"文件管理"}],"h(String), 127.0.0.1(String), 2019-04-03 17:22:11.015(Timestamp)
2019-04-03 17:22:11 -请求地址 : http://localhost:8081/main
2019-04-03 17:22:11 -HTTP METHOD : GET
2019-04-03 17:22:11 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 17:22:11 -参数 : []
2019-04-03 17:22:11 -耗时 : 1
2019-04-03 17:22:11 -返回值 : main
2019-04-03 17:22:11 -<==    Updates: 1
2019-04-03 17:22:11 -请求地址 : http://localhost:8081/oa/notify/message
2019-04-03 17:22:11 -HTTP METHOD : GET
2019-04-03 17:22:11 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2019-04-03 17:22:11 -参数 : []
2019-04-03 17:22:11 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2019-04-03 17:22:11 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2019-04-03 17:22:11 -请求地址 : http://localhost:8081/main
2019-04-03 17:22:11 -HTTP METHOD : GET
2019-04-03 17:22:11 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 17:22:11 -参数 : []
2019-04-03 17:22:11 -耗时 : 0
2019-04-03 17:22:11 -返回值 : main
2019-04-03 17:22:11 -<==      Total: 0
2019-04-03 17:22:11 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2019-04-03 17:22:11 -==> Parameters: 1(Long), 0(String)
2019-04-03 17:22:11 -<==      Total: 1
2019-04-03 17:22:11 -耗时 : 104
2019-04-03 17:22:11 -返回值 : com.bootdo.common.utils.PageUtils@28eed7db
2019-04-03 17:22:20 -==>  Preparing: select distinct m.perms from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id = ur.role_id where ur.user_id = ? 
2019-04-03 17:22:20 -==> Parameters: 1(Long)
2019-04-03 17:22:20 -<==      Total: 90
2019-04-03 17:22:20 -请求地址 : http://localhost:8081/heat/heat
2019-04-03 17:22:20 -HTTP METHOD : GET
2019-04-03 17:22:20 -CLASS_METHOD : com.bootdo.heat.controller.HeatController.Heat
2019-04-03 17:22:20 -参数 : []
2019-04-03 17:22:20 -耗时 : 0
2019-04-03 17:22:20 -返回值 : heat/heat/heat
2019-04-03 17:22:21 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-03 17:22:21 -HTTP METHOD : GET
2019-04-03 17:22:21 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 17:22:21 -参数 : [userType]
2019-04-03 17:22:21 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 17:22:21 -==> Parameters: userType(String)
2019-04-03 17:22:21 -<==      Total: 2
2019-04-03 17:22:21 -耗时 : 5
2019-04-03 17:22:21 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 17:22:21 -请求地址 : http://localhost:8081/heat/heat/list
2019-04-03 17:22:21 -HTTP METHOD : GET
2019-04-03 17:22:21 -CLASS_METHOD : com.bootdo.heat.controller.HeatController.list
2019-04-03 17:22:21 -参数 : [{limit=10, offset=0, userType=, userOrg=, userId=, createTime=, queryType=1}]
2019-04-03 17:22:21 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`heat_type`,`heat_price`,`heat_area`,`heat_cost`,`heat_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from heat order by id asc limit ?, ? 
2019-04-03 17:22:21 -==> Parameters: 0(Integer), 10(Integer)
2019-04-03 17:22:21 -<==      Total: 10
2019-04-03 17:22:21 -==>  Preparing: select count(*) from heat 
2019-04-03 17:22:21 -==> Parameters: 
2019-04-03 17:22:21 -<==      Total: 1
2019-04-03 17:22:21 -耗时 : 361
2019-04-03 17:22:21 -返回值 : com.bootdo.common.utils.PageUtils@10cfa604
2019-04-03 17:22:27 -请求地址 : http://localhost:8081/heat/heat/add
2019-04-03 17:22:27 -HTTP METHOD : GET
2019-04-03 17:22:27 -CLASS_METHOD : com.bootdo.heat.controller.HeatController.add
2019-04-03 17:22:27 -参数 : []
2019-04-03 17:22:27 -耗时 : 0
2019-04-03 17:22:27 -返回值 : heat/heat/add
2019-04-03 17:22:27 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-03 17:22:27 -HTTP METHOD : GET
2019-04-03 17:22:27 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 17:22:27 -参数 : [userType]
2019-04-03 17:22:27 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 17:22:27 -请求地址 : http://localhost:8081/common/dict/list/userState
2019-04-03 17:22:27 -HTTP METHOD : GET
2019-04-03 17:22:27 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 17:22:27 -==> Parameters: userType(String)
2019-04-03 17:22:27 -参数 : [userState]
2019-04-03 17:22:27 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 17:22:27 -==> Parameters: userState(String)
2019-04-03 17:22:27 -<==      Total: 2
2019-04-03 17:22:27 -耗时 : 3
2019-04-03 17:22:27 -返回值 : [DictDO{id=126, name='使用中', value='1', type='userState', description='用户状态', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=125, name='未使用', value='0', type='userState', description='用户状态', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 17:22:27 -<==      Total: 2
2019-04-03 17:22:27 -耗时 : 6
2019-04-03 17:22:27 -请求地址 : http://localhost:8081/common/dict/list/heatType
2019-04-03 17:22:27 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 17:22:27 -HTTP METHOD : GET
2019-04-03 17:22:27 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 17:22:27 -参数 : [heatType]
2019-04-03 17:22:27 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 17:22:27 -==> Parameters: heatType(String)
2019-04-03 17:22:27 -<==      Total: 5
2019-04-03 17:22:27 -耗时 : 12
2019-04-03 17:22:27 -返回值 : [DictDO{id=137, name='特殊暖费1', value='4', type='heatType', description='暖气类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=136, name='工业非盈利', value='3', type='heatType', description='暖气类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=135, name='工业盈利', value='2', type='heatType', description='暖气类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=134, name='民用暖', value='1', type='heatType', description='暖气类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=133, name='商业暖', value='0', type='heatType', description='暖气类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 17:24:59 -请求地址 : http://localhost:8081/index
2019-04-03 17:24:59 -HTTP METHOD : GET
2019-04-03 17:24:59 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2019-04-03 17:24:59 -参数 : [{}]
2019-04-03 17:24:59 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2019-04-03 17:24:59 -==> Parameters: 1(Long)
2019-04-03 17:24:59 -<==      Total: 46
2019-04-03 17:24:59 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2019-04-03 17:24:59 -==> Parameters: 138(Long)
2019-04-03 17:24:59 -<==      Total: 1
2019-04-03 17:24:59 -耗时 : 49
2019-04-03 17:24:59 -返回值 : index_v1
2019-04-03 17:24:59 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 17:24:59 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 49(Integer), com.bootdo.system.controller.LoginController.index()(String), {"menus":[{"attributes":{"icon":"fa fa-money","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-money","url":"/moneyList/moneyList"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"102","parentId":"106","text":"现金缴费"},{"attributes":{"icon":"fa fa-book","url":"/moneyLog/elecLog"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"107","parentId":"106","text":"缴费记录"}],"hasChildren":true,"hasParent":false,"id":"106","parentId":"0","text":"收费管理"},{"attributes":{"icon":"fa fa-lightbulb-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/elec/elec"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"121","parentId":"103","text":"电费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"elec/elecInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"122","parentId":"103","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"elec/elecUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"123","parentId":"103","text":"电表上传"},{"attributes":{"icon":"fa fa-cc","url":"/elec/elecPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"124","parentId":"103","text":"电价管理"}],"hasChildren":true,"hasParent":false,"id":"103","parentId":"0","text":"电费管理"},{"attributes":{"icon":"fa fa-tint","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/water/water"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"117","parentId":"105","text":"水费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"water/waterInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"118","parentId":"105","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"water/waterUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"119","parentId":"105","text":"水费生成"},{"attributes":{"icon":"fa fa-cc","url":"/water/waterPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"120","parentId":"105","text":"水价管理"}],"hasChildren":true,"hasParent":false,"id":"105","parentId":"0","text":"水费管理"},{"attributes":{"icon":"fa fa-fire","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/heat/heat"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"113","parentId":"104","text":"暖费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"heat/heatInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"114","parentId":"104","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"heat/heatUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"115","parentId":"104","text":"暖费生成"},{"attributes":{"icon":"","url":"/heat/heatPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"116","parentId":"104","text":"暖价管理"}],"hasChildren":true,"hasParent":false,"id":"104","parentId":"0","text":"暖费管理"},{"attributes":{"icon":"fa fa-vcard-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-bomb","url":"/print/print"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"149","parentId":"108","text":"票据记录"}],"hasChildren":true,"hasParent":false,"id":"108","parentId":"0","text":"票据管理"},{"attributes":{"icon":"fa fa-bar-chart","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-area-chart","url":"/chart/graph_echarts.html"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","text":"百度chart"},{"attributes":{"icon":"fa fa-sun-o","url":"charts/countDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"109","parentId":"97","text":"日统计报表"},{"attributes":{"icon":"fa fa-registered","url":"charts/countMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"110","parentId":"97","text":"月统计报表"},{"attributes":{"icon":"fa fa-money","url":"charts/countOwe"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"155","parentId":"97","text":"欠费报表图"},{"attributes":{"icon":"fa fa-support","url":"charts/countYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"111","parentId":"97","text":"年统计报表"},{"attributes":{"icon":"fa fa-tachometer","url":"charts/countRun"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"112","parentId":"97","text":"走势图报表"}],"hasChildren":true,"hasParent":false,"id":"97","parentId":"0","text":"统计管理"},{"attributes":{"icon":"fa fa-bars","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-book","url":"/common/dict"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"78","parentId":"1","text":"数据字典"},{"attributes":{"icon":"fa fa-folder-open","url":"/common/sysFile"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"71","parentId":"1","text":"文件管理"}],"h(String), 127.0.0.1(String), 2019-04-03 17:24:59.663(Timestamp)
2019-04-03 17:24:59 -<==    Updates: 1
2019-04-03 17:24:59 -请求地址 : http://localhost:8081/main
2019-04-03 17:24:59 -HTTP METHOD : GET
2019-04-03 17:24:59 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 17:24:59 -参数 : []
2019-04-03 17:24:59 -耗时 : 0
2019-04-03 17:24:59 -返回值 : main
2019-04-03 17:25:00 -请求地址 : http://localhost:8081/oa/notify/message
2019-04-03 17:25:00 -HTTP METHOD : GET
2019-04-03 17:25:00 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2019-04-03 17:25:00 -参数 : []
2019-04-03 17:25:00 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2019-04-03 17:25:00 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2019-04-03 17:25:00 -<==      Total: 0
2019-04-03 17:25:00 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2019-04-03 17:25:00 -==> Parameters: 1(Long), 0(String)
2019-04-03 17:25:00 -<==      Total: 1
2019-04-03 17:25:00 -耗时 : 18
2019-04-03 17:25:00 -返回值 : com.bootdo.common.utils.PageUtils@4da156d5
2019-04-03 17:25:00 -请求地址 : http://localhost:8081/main
2019-04-03 17:25:00 -HTTP METHOD : GET
2019-04-03 17:25:00 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 17:25:00 -参数 : []
2019-04-03 17:25:00 -耗时 : 3
2019-04-03 17:25:00 -返回值 : main
2019-04-03 17:25:03 -请求地址 : http://localhost:8081/heat/heat
2019-04-03 17:25:03 -HTTP METHOD : GET
2019-04-03 17:25:03 -CLASS_METHOD : com.bootdo.heat.controller.HeatController.Heat
2019-04-03 17:25:03 -参数 : []
2019-04-03 17:25:03 -耗时 : 0
2019-04-03 17:25:03 -返回值 : heat/heat/heat
2019-04-03 17:25:03 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-03 17:25:03 -HTTP METHOD : GET
2019-04-03 17:25:03 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 17:25:03 -参数 : [userType]
2019-04-03 17:25:03 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 17:25:03 -==> Parameters: userType(String)
2019-04-03 17:25:03 -<==      Total: 2
2019-04-03 17:25:03 -耗时 : 5
2019-04-03 17:25:03 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 17:25:03 -请求地址 : http://localhost:8081/heat/heat/list
2019-04-03 17:25:03 -HTTP METHOD : GET
2019-04-03 17:25:03 -CLASS_METHOD : com.bootdo.heat.controller.HeatController.list
2019-04-03 17:25:03 -参数 : [{limit=10, offset=0, userType=, userOrg=, userId=, createTime=, queryType=1}]
2019-04-03 17:25:03 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`heat_type`,`heat_price`,`heat_area`,`heat_cost`,`heat_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from heat order by id asc limit ?, ? 
2019-04-03 17:25:03 -==> Parameters: 0(Integer), 10(Integer)
2019-04-03 17:25:03 -<==      Total: 10
2019-04-03 17:25:03 -==>  Preparing: select count(*) from heat 
2019-04-03 17:25:03 -==> Parameters: 
2019-04-03 17:25:03 -<==      Total: 1
2019-04-03 17:25:03 -耗时 : 10
2019-04-03 17:25:03 -返回值 : com.bootdo.common.utils.PageUtils@3fa52a07
2019-04-03 17:25:08 -请求地址 : http://localhost:8081/heat/heat/add
2019-04-03 17:25:08 -HTTP METHOD : GET
2019-04-03 17:25:08 -CLASS_METHOD : com.bootdo.heat.controller.HeatController.add
2019-04-03 17:25:08 -参数 : []
2019-04-03 17:25:08 -耗时 : 1
2019-04-03 17:25:08 -返回值 : heat/heat/add
2019-04-03 17:25:08 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-03 17:25:08 -HTTP METHOD : GET
2019-04-03 17:25:08 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 17:25:08 -参数 : [userType]
2019-04-03 17:25:08 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 17:25:08 -==> Parameters: userType(String)
2019-04-03 17:25:08 -<==      Total: 2
2019-04-03 17:25:08 -请求地址 : http://localhost:8081/common/dict/list/userState
2019-04-03 17:25:08 -耗时 : 4
2019-04-03 17:25:08 -HTTP METHOD : GET
2019-04-03 17:25:08 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 17:25:08 -参数 : [userState]
2019-04-03 17:25:08 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 17:25:08 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 17:25:08 -==> Parameters: userState(String)
2019-04-03 17:25:08 -请求地址 : http://localhost:8081/common/dict/list/heatType
2019-04-03 17:25:08 -HTTP METHOD : GET
2019-04-03 17:25:08 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 17:25:08 -参数 : [heatType]
2019-04-03 17:25:08 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 17:25:08 -<==      Total: 2
2019-04-03 17:25:08 -==> Parameters: heatType(String)
2019-04-03 17:25:08 -耗时 : 8
2019-04-03 17:25:08 -返回值 : [DictDO{id=126, name='使用中', value='1', type='userState', description='用户状态', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=125, name='未使用', value='0', type='userState', description='用户状态', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 17:25:08 -<==      Total: 5
2019-04-03 17:25:08 -耗时 : 6
2019-04-03 17:25:08 -返回值 : [DictDO{id=137, name='特殊暖费1', value='4', type='heatType', description='暖气类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=136, name='工业非盈利', value='3', type='heatType', description='暖气类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=135, name='工业盈利', value='2', type='heatType', description='暖气类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=134, name='民用暖', value='1', type='heatType', description='暖气类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=133, name='商业暖', value='0', type='heatType', description='暖气类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 17:25:31 -请求地址 : http://localhost:8081/system/sysDept/treeView
2019-04-03 17:25:31 -HTTP METHOD : GET
2019-04-03 17:25:31 -CLASS_METHOD : com.bootdo.system.controller.DeptController.treeView
2019-04-03 17:25:31 -参数 : []
2019-04-03 17:25:31 -耗时 : 1
2019-04-03 17:25:31 -返回值 : system/dept/deptTree
2019-04-03 17:25:31 -请求地址 : http://localhost:8081/system/sysDept/tree
2019-04-03 17:25:31 -HTTP METHOD : GET
2019-04-03 17:25:31 -CLASS_METHOD : com.bootdo.system.controller.DeptController.tree
2019-04-03 17:25:31 -参数 : []
2019-04-03 17:25:31 -==>  Preparing: select `dept_id`,`parent_id`,`name`,`order_num`,`del_flag` from sys_dept order by dept_id desc 
2019-04-03 17:25:31 -==> Parameters: 
2019-04-03 17:25:31 -<==      Total: 3
2019-04-03 17:25:31 -耗时 : 59
2019-04-03 17:25:31 -返回值 : {"checked":false,"children":[{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"3","parentId":"1","state":{"opened":true},"text":"牙星"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"2","parentId":"1","state":{"opened":true},"text":"五九"}],"hasChildren":true,"hasParent":false,"id":"1","parentId":"0","state":{"opened":true},"text":"总公司"}
2019-04-03 17:31:00 -请求地址 : http://localhost:8081/index
2019-04-03 17:31:00 -HTTP METHOD : GET
2019-04-03 17:31:00 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2019-04-03 17:31:00 -参数 : [{}]
2019-04-03 17:31:00 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2019-04-03 17:31:00 -==> Parameters: 1(Long)
2019-04-03 17:31:01 -<==      Total: 46
2019-04-03 17:31:01 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2019-04-03 17:31:01 -==> Parameters: 138(Long)
2019-04-03 17:31:01 -<==      Total: 1
2019-04-03 17:31:01 -耗时 : 31
2019-04-03 17:31:01 -返回值 : index_v1
2019-04-03 17:31:01 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 17:31:01 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 31(Integer), com.bootdo.system.controller.LoginController.index()(String), {"menus":[{"attributes":{"icon":"fa fa-money","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-money","url":"/moneyList/moneyList"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"102","parentId":"106","text":"现金缴费"},{"attributes":{"icon":"fa fa-book","url":"/moneyLog/elecLog"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"107","parentId":"106","text":"缴费记录"}],"hasChildren":true,"hasParent":false,"id":"106","parentId":"0","text":"收费管理"},{"attributes":{"icon":"fa fa-lightbulb-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/elec/elec"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"121","parentId":"103","text":"电费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"elec/elecInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"122","parentId":"103","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"elec/elecUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"123","parentId":"103","text":"电表上传"},{"attributes":{"icon":"fa fa-cc","url":"/elec/elecPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"124","parentId":"103","text":"电价管理"}],"hasChildren":true,"hasParent":false,"id":"103","parentId":"0","text":"电费管理"},{"attributes":{"icon":"fa fa-tint","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/water/water"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"117","parentId":"105","text":"水费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"water/waterInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"118","parentId":"105","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"water/waterUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"119","parentId":"105","text":"水费生成"},{"attributes":{"icon":"fa fa-cc","url":"/water/waterPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"120","parentId":"105","text":"水价管理"}],"hasChildren":true,"hasParent":false,"id":"105","parentId":"0","text":"水费管理"},{"attributes":{"icon":"fa fa-fire","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/heat/heat"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"113","parentId":"104","text":"暖费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"heat/heatInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"114","parentId":"104","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"heat/heatUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"115","parentId":"104","text":"暖费生成"},{"attributes":{"icon":"","url":"/heat/heatPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"116","parentId":"104","text":"暖价管理"}],"hasChildren":true,"hasParent":false,"id":"104","parentId":"0","text":"暖费管理"},{"attributes":{"icon":"fa fa-vcard-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-bomb","url":"/print/print"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"149","parentId":"108","text":"票据记录"}],"hasChildren":true,"hasParent":false,"id":"108","parentId":"0","text":"票据管理"},{"attributes":{"icon":"fa fa-bar-chart","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-area-chart","url":"/chart/graph_echarts.html"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","text":"百度chart"},{"attributes":{"icon":"fa fa-sun-o","url":"charts/countDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"109","parentId":"97","text":"日统计报表"},{"attributes":{"icon":"fa fa-registered","url":"charts/countMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"110","parentId":"97","text":"月统计报表"},{"attributes":{"icon":"fa fa-money","url":"charts/countOwe"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"155","parentId":"97","text":"欠费报表图"},{"attributes":{"icon":"fa fa-support","url":"charts/countYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"111","parentId":"97","text":"年统计报表"},{"attributes":{"icon":"fa fa-tachometer","url":"charts/countRun"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"112","parentId":"97","text":"走势图报表"}],"hasChildren":true,"hasParent":false,"id":"97","parentId":"0","text":"统计管理"},{"attributes":{"icon":"fa fa-bars","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-book","url":"/common/dict"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"78","parentId":"1","text":"数据字典"},{"attributes":{"icon":"fa fa-folder-open","url":"/common/sysFile"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"71","parentId":"1","text":"文件管理"}],"h(String), 127.0.0.1(String), 2019-04-03 17:31:01.017(Timestamp)
2019-04-03 17:31:01 -<==    Updates: 1
2019-04-03 17:31:01 -请求地址 : http://localhost:8081/main
2019-04-03 17:31:01 -HTTP METHOD : GET
2019-04-03 17:31:01 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 17:31:01 -参数 : []
2019-04-03 17:31:01 -耗时 : 1
2019-04-03 17:31:01 -返回值 : main
2019-04-03 17:31:01 -请求地址 : http://localhost:8081/oa/notify/message
2019-04-03 17:31:01 -HTTP METHOD : GET
2019-04-03 17:31:01 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2019-04-03 17:31:01 -参数 : []
2019-04-03 17:31:01 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2019-04-03 17:31:01 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2019-04-03 17:31:01 -<==      Total: 0
2019-04-03 17:31:01 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2019-04-03 17:31:01 -==> Parameters: 1(Long), 0(String)
2019-04-03 17:31:01 -<==      Total: 1
2019-04-03 17:31:01 -耗时 : 9
2019-04-03 17:31:01 -返回值 : com.bootdo.common.utils.PageUtils@38a99931
2019-04-03 17:31:01 -请求地址 : http://localhost:8081/main
2019-04-03 17:31:01 -HTTP METHOD : GET
2019-04-03 17:31:01 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 17:31:01 -参数 : []
2019-04-03 17:31:01 -耗时 : 2
2019-04-03 17:31:01 -返回值 : main
2019-04-03 17:31:05 -请求地址 : http://localhost:8081/heat/heat
2019-04-03 17:31:05 -HTTP METHOD : GET
2019-04-03 17:31:05 -CLASS_METHOD : com.bootdo.heat.controller.HeatController.Heat
2019-04-03 17:31:05 -参数 : []
2019-04-03 17:31:05 -耗时 : 0
2019-04-03 17:31:05 -返回值 : heat/heat/heat
2019-04-03 17:31:06 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-03 17:31:06 -HTTP METHOD : GET
2019-04-03 17:31:06 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 17:31:06 -参数 : [userType]
2019-04-03 17:31:06 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 17:31:06 -==> Parameters: userType(String)
2019-04-03 17:31:06 -<==      Total: 2
2019-04-03 17:31:06 -耗时 : 3
2019-04-03 17:31:06 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 17:31:06 -请求地址 : http://localhost:8081/heat/heat/list
2019-04-03 17:31:06 -HTTP METHOD : GET
2019-04-03 17:31:06 -CLASS_METHOD : com.bootdo.heat.controller.HeatController.list
2019-04-03 17:31:06 -参数 : [{limit=10, offset=0, userType=, userOrg=, userId=, createTime=, queryType=1}]
2019-04-03 17:31:06 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`heat_type`,`heat_price`,`heat_area`,`heat_cost`,`heat_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from heat order by id asc limit ?, ? 
2019-04-03 17:31:06 -==> Parameters: 0(Integer), 10(Integer)
2019-04-03 17:31:06 -<==      Total: 10
2019-04-03 17:31:06 -==>  Preparing: select count(*) from heat 
2019-04-03 17:31:06 -==> Parameters: 
2019-04-03 17:31:06 -<==      Total: 1
2019-04-03 17:31:06 -耗时 : 10
2019-04-03 17:31:06 -返回值 : com.bootdo.common.utils.PageUtils@1f1c18e5
2019-04-03 17:31:11 -请求地址 : http://localhost:8081/heat/heat/add
2019-04-03 17:31:11 -HTTP METHOD : GET
2019-04-03 17:31:11 -CLASS_METHOD : com.bootdo.heat.controller.HeatController.add
2019-04-03 17:31:11 -参数 : []
2019-04-03 17:31:11 -耗时 : 0
2019-04-03 17:31:11 -返回值 : heat/heat/add
2019-04-03 17:31:11 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-03 17:31:11 -HTTP METHOD : GET
2019-04-03 17:31:11 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 17:31:11 -参数 : [userType]
2019-04-03 17:31:11 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 17:31:11 -==> Parameters: userType(String)
2019-04-03 17:31:11 -<==      Total: 2
2019-04-03 17:31:11 -耗时 : 6
2019-04-03 17:31:11 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 17:31:11 -请求地址 : http://localhost:8081/common/dict/list/userState
2019-04-03 17:31:11 -HTTP METHOD : GET
2019-04-03 17:31:11 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 17:31:11 -参数 : [userState]
2019-04-03 17:31:11 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 17:31:11 -请求地址 : http://localhost:8081/common/dict/list/heatType
2019-04-03 17:31:11 -HTTP METHOD : GET
2019-04-03 17:31:11 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 17:31:11 -参数 : [heatType]
2019-04-03 17:31:11 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 17:31:11 -==> Parameters: heatType(String)
2019-04-03 17:31:11 -<==      Total: 5
2019-04-03 17:31:11 -耗时 : 5
2019-04-03 17:31:11 -返回值 : [DictDO{id=137, name='特殊暖费1', value='4', type='heatType', description='暖气类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=136, name='工业非盈利', value='3', type='heatType', description='暖气类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=135, name='工业盈利', value='2', type='heatType', description='暖气类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=134, name='民用暖', value='1', type='heatType', description='暖气类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=133, name='商业暖', value='0', type='heatType', description='暖气类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 17:31:11 -==> Parameters: userState(String)
2019-04-03 17:31:11 -<==      Total: 2
2019-04-03 17:31:11 -耗时 : 17
2019-04-03 17:31:11 -返回值 : [DictDO{id=126, name='使用中', value='1', type='userState', description='用户状态', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=125, name='未使用', value='0', type='userState', description='用户状态', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 17:32:16 -请求地址 : http://localhost:8081/heat/heat/save
2019-04-03 17:32:16 -HTTP METHOD : POST
2019-04-03 17:32:16 -CLASS_METHOD : com.bootdo.heat.controller.HeatController.save
2019-04-03 17:32:16 -参数 : [com.bootdo.heat.domain.HeatDO@47ed4a59]
2019-04-03 17:32:16 -==>  Preparing: insert into heat ( `user_id`, `user_name`, `user_type`, `user_org`, `user_tell`, `user_state`, `wages_id`, `heat_type`, `heat_price`, `heat_area`, `heat_cost`, `heat_sum`, `create_time`, `create_by`, `update_time`, `update_by`, `remark` ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 17:32:16 -==> Parameters: 11(String), 1(String), (String), (String), (String), (String), 1(String), 4(String), 1(BigDecimal), 1(BigDecimal), 1(BigDecimal), 1(BigDecimal), null, 1(Long), 2019-04-03 17:32:16.15(Timestamp), 1(Long), (String)
2019-04-03 17:32:16 -{conn-10002, pstmt-20023} execute error. insert into heat
		(
			`user_id`, 
			`user_name`, 
			`user_type`, 
			`user_org`, 
			`user_tell`, 
			`user_state`, 
			`wages_id`, 
			`heat_type`, 
			`heat_price`, 
			`heat_area`, 
			`heat_cost`, 
			`heat_sum`, 
			`create_time`, 
			`create_by`, 
			`update_time`, 
			`update_by`, 
			`remark`
		)
		values
		(
			?, 
			?, 
			?, 
			?, 
			?, 
			?, 
			?, 
			?, 
			?, 
			?, 
			?, 
			?, 
			?, 
			?, 
			?, 
			?, 
			?
		)
com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException: Column 'create_time' cannot be null
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(Unknown Source)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(Unknown Source)
	at java.lang.reflect.Constructor.newInstance(Unknown Source)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:425)
	at com.mysql.jdbc.Util.getInstance(Util.java:408)
	at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:936)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3976)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3912)
	at com.mysql.jdbc.MysqlIO.sendCommand(MysqlIO.java:2530)
	at com.mysql.jdbc.MysqlIO.sqlQueryDirect(MysqlIO.java:2683)
	at com.mysql.jdbc.ConnectionImpl.execSQL(ConnectionImpl.java:2486)
	at com.mysql.jdbc.PreparedStatement.executeInternal(PreparedStatement.java:1858)
	at com.mysql.jdbc.PreparedStatement.execute(PreparedStatement.java:1197)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2931)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2929)
	at com.alibaba.druid.wall.WallFilter.preparedStatement_execute(WallFilter.java:601)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2929)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2929)
	at com.alibaba.druid.proxy.jdbc.PreparedStatementProxyImpl.execute(PreparedStatementProxyImpl.java:131)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:493)
	at sun.reflect.GeneratedMethodAccessor125.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:59)
	at com.sun.proxy.$Proxy173.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.update(PreparedStatementHandler.java:46)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.update(RoutingStatementHandler.java:74)
	at org.apache.ibatis.executor.SimpleExecutor.doUpdate(SimpleExecutor.java:50)
	at org.apache.ibatis.executor.BaseExecutor.update(BaseExecutor.java:117)
	at org.apache.ibatis.executor.CachingExecutor.update(CachingExecutor.java:76)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:198)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.insert(DefaultSqlSession.java:185)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:434)
	at com.sun.proxy.$Proxy101.insert(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.insert(SqlSessionTemplate.java:279)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:57)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy106.save(Unknown Source)
	at com.bootdo.heat.service.impl.HeatServiceImpl.save(HeatServiceImpl.java:35)
	at com.bootdo.heat.controller.HeatController.save(HeatController.java:182)
	at com.bootdo.heat.controller.HeatController$$FastClassBySpringCGLIB$$8914ee44.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:204)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:746)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.bootdo.common.aspect.WebLogAspect.doAround(WebLogAspect.java:57)
	at sun.reflect.GeneratedMethodAccessor173.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.apache.shiro.spring.security.interceptor.AopAllianceAnnotationsAuthorizingMethodInterceptor$1.proceed(AopAllianceAnnotationsAuthorizingMethodInterceptor.java:82)
	at org.apache.shiro.authz.aop.AuthorizingMethodInterceptor.invoke(AuthorizingMethodInterceptor.java:39)
	at org.apache.shiro.spring.security.interceptor.AopAllianceAnnotationsAuthorizingMethodInterceptor.invoke(AopAllianceAnnotationsAuthorizingMethodInterceptor.java:115)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.bootdo.heat.controller.HeatController$$EnhancerBySpringCGLIB$$77c2a779.save(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:209)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:877)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:783)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:991)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:925)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:974)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:877)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:661)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:851)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:61)
	at org.apache.shiro.web.servlet.AdviceFilter.executeChain(AdviceFilter.java:108)
	at org.apache.shiro.web.servlet.AdviceFilter.doFilterInternal(AdviceFilter.java:137)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:66)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)
	at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)
	at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)
	at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)
	at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:383)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:109)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:496)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:790)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1468)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Unknown Source)
2019-04-03 17:32:16 -Loading XML bean definitions from class path resource [org/springframework/jdbc/support/sql-error-codes.xml]
2019-04-03 17:32:17 -SQLErrorCodes loaded: [DB2, Derby, H2, HDB, HSQL, Informix, MS-SQL, MySQL, Oracle, PostgreSQL, Sybase]
2019-04-03 17:32:17 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 17:32:17 -==> Parameters: 1(Long), admin(String), error(String), null, http://localhost:8081/heat/heat/save(String), org.springframework.dao.DataIntegrityViolationException: 
### Error updating database.  Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException: Column 'create_time' cannot be null
### The error may involve com.bootdo.heat.dao.HeatDao.save-Inline
### The error occurred while setting parameters
### SQL: insert into heat   (    `user_id`,     `user_name`,     `user_type`,     `user_org`,     `user_tell`,     `user_state`,     `wages_id`,     `heat_type`,     `heat_price`,     `heat_area`,     `heat_cost`,     `heat_sum`,     `create_time`,     `create_by`,     `update_time`,     `update_by`,     `remark`   )   values   (    ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?   )
### Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException: Column 'create_time' cannot be null
; ]; Column 'create_time' cannot be null; nested exception is com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException: Column 'create_time' cannot be null(String), null, 2019-04-03 17:32:17.245(Timestamp)
2019-04-03 17:32:17 -
### Error updating database.  Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException: Column 'create_time' cannot be null
### The error may involve com.bootdo.heat.dao.HeatDao.save-Inline
### The error occurred while setting parameters
### SQL: insert into heat   (    `user_id`,     `user_name`,     `user_type`,     `user_org`,     `user_tell`,     `user_state`,     `wages_id`,     `heat_type`,     `heat_price`,     `heat_area`,     `heat_cost`,     `heat_sum`,     `create_time`,     `create_by`,     `update_time`,     `update_by`,     `remark`   )   values   (    ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?   )
### Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException: Column 'create_time' cannot be null
; ]; Column 'create_time' cannot be null; nested exception is com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException: Column 'create_time' cannot be null
org.springframework.dao.DataIntegrityViolationException: 
### Error updating database.  Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException: Column 'create_time' cannot be null
### The error may involve com.bootdo.heat.dao.HeatDao.save-Inline
### The error occurred while setting parameters
### SQL: insert into heat   (    `user_id`,     `user_name`,     `user_type`,     `user_org`,     `user_tell`,     `user_state`,     `wages_id`,     `heat_type`,     `heat_price`,     `heat_area`,     `heat_cost`,     `heat_sum`,     `create_time`,     `create_by`,     `update_time`,     `update_by`,     `remark`   )   values   (    ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?   )
### Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException: Column 'create_time' cannot be null
; ]; Column 'create_time' cannot be null; nested exception is com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException: Column 'create_time' cannot be null
	at org.springframework.jdbc.support.SQLExceptionSubclassTranslator.doTranslate(SQLExceptionSubclassTranslator.java:87)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:72)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:81)
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:75)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:447)
	at com.sun.proxy.$Proxy101.insert(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.insert(SqlSessionTemplate.java:279)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:57)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy106.save(Unknown Source)
	at com.bootdo.heat.service.impl.HeatServiceImpl.save(HeatServiceImpl.java:35)
	at com.bootdo.heat.controller.HeatController.save(HeatController.java:182)
	at com.bootdo.heat.controller.HeatController$$FastClassBySpringCGLIB$$8914ee44.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:204)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:746)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.bootdo.common.aspect.WebLogAspect.doAround(WebLogAspect.java:57)
	at sun.reflect.GeneratedMethodAccessor173.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.apache.shiro.spring.security.interceptor.AopAllianceAnnotationsAuthorizingMethodInterceptor$1.proceed(AopAllianceAnnotationsAuthorizingMethodInterceptor.java:82)
	at org.apache.shiro.authz.aop.AuthorizingMethodInterceptor.invoke(AuthorizingMethodInterceptor.java:39)
	at org.apache.shiro.spring.security.interceptor.AopAllianceAnnotationsAuthorizingMethodInterceptor.invoke(AopAllianceAnnotationsAuthorizingMethodInterceptor.java:115)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.bootdo.heat.controller.HeatController$$EnhancerBySpringCGLIB$$77c2a779.save(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:209)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:877)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:783)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:991)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:925)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:974)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:877)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:661)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:851)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:61)
	at org.apache.shiro.web.servlet.AdviceFilter.executeChain(AdviceFilter.java:108)
	at org.apache.shiro.web.servlet.AdviceFilter.doFilterInternal(AdviceFilter.java:137)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:66)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)
	at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)
	at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)
	at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)
	at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:383)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:109)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:496)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:790)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1468)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Unknown Source)
Caused by: com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException: Column 'create_time' cannot be null
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(Unknown Source)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(Unknown Source)
	at java.lang.reflect.Constructor.newInstance(Unknown Source)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:425)
	at com.mysql.jdbc.Util.getInstance(Util.java:408)
	at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:936)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3976)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3912)
	at com.mysql.jdbc.MysqlIO.sendCommand(MysqlIO.java:2530)
	at com.mysql.jdbc.MysqlIO.sqlQueryDirect(MysqlIO.java:2683)
	at com.mysql.jdbc.ConnectionImpl.execSQL(ConnectionImpl.java:2486)
	at com.mysql.jdbc.PreparedStatement.executeInternal(PreparedStatement.java:1858)
	at com.mysql.jdbc.PreparedStatement.execute(PreparedStatement.java:1197)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2931)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2929)
	at com.alibaba.druid.wall.WallFilter.preparedStatement_execute(WallFilter.java:601)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2929)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2929)
	at com.alibaba.druid.proxy.jdbc.PreparedStatementProxyImpl.execute(PreparedStatementProxyImpl.java:131)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:493)
	at sun.reflect.GeneratedMethodAccessor125.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:59)
	at com.sun.proxy.$Proxy173.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.update(PreparedStatementHandler.java:46)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.update(RoutingStatementHandler.java:74)
	at org.apache.ibatis.executor.SimpleExecutor.doUpdate(SimpleExecutor.java:50)
	at org.apache.ibatis.executor.BaseExecutor.update(BaseExecutor.java:117)
	at org.apache.ibatis.executor.CachingExecutor.update(CachingExecutor.java:76)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:198)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.insert(DefaultSqlSession.java:185)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:434)
	... 103 common frames omitted
2019-04-03 17:32:17 -<==    Updates: 1
2019-04-03 17:32:24 -请求地址 : http://localhost:8081/system/sysDept/treeView
2019-04-03 17:32:24 -HTTP METHOD : GET
2019-04-03 17:32:24 -CLASS_METHOD : com.bootdo.system.controller.DeptController.treeView
2019-04-03 17:32:24 -参数 : []
2019-04-03 17:32:24 -耗时 : 1
2019-04-03 17:32:24 -返回值 : system/dept/deptTree
2019-04-03 17:32:25 -请求地址 : http://localhost:8081/system/sysDept/tree
2019-04-03 17:32:25 -HTTP METHOD : GET
2019-04-03 17:32:25 -CLASS_METHOD : com.bootdo.system.controller.DeptController.tree
2019-04-03 17:32:25 -参数 : []
2019-04-03 17:32:25 -==>  Preparing: select `dept_id`,`parent_id`,`name`,`order_num`,`del_flag` from sys_dept order by dept_id desc 
2019-04-03 17:32:25 -==> Parameters: 
2019-04-03 17:32:25 -<==      Total: 3
2019-04-03 17:32:25 -耗时 : 3
2019-04-03 17:32:25 -返回值 : {"checked":false,"children":[{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"3","parentId":"1","state":{"opened":true},"text":"牙星"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"2","parentId":"1","state":{"opened":true},"text":"五九"}],"hasChildren":true,"hasParent":false,"id":"1","parentId":"0","state":{"opened":true},"text":"总公司"}
2019-04-03 17:32:32 -==>  Preparing: select distinct m.perms from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id = ur.role_id where ur.user_id = ? 
2019-04-03 17:32:32 -==> Parameters: 1(Long)
2019-04-03 17:32:32 -<==      Total: 90
2019-04-03 17:32:32 -请求地址 : http://localhost:8081/heat/heat/save
2019-04-03 17:32:32 -HTTP METHOD : POST
2019-04-03 17:32:32 -CLASS_METHOD : com.bootdo.heat.controller.HeatController.save
2019-04-03 17:32:32 -参数 : [com.bootdo.heat.domain.HeatDO@7e5384da]
2019-04-03 17:32:32 -==>  Preparing: insert into heat ( `user_id`, `user_name`, `user_type`, `user_org`, `user_tell`, `user_state`, `wages_id`, `heat_type`, `heat_price`, `heat_area`, `heat_cost`, `heat_sum`, `create_time`, `create_by`, `update_time`, `update_by`, `remark` ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 17:32:32 -==> Parameters: 11(String), 1(String), B(String), 2(String), (String), (String), 1(String), 4(String), 1(BigDecimal), 1(BigDecimal), 1(BigDecimal), 1(BigDecimal), null, 1(Long), 2019-04-03 17:32:32.881(Timestamp), 1(Long), (String)
2019-04-03 17:32:32 -{conn-10002, pstmt-20024} execute error. insert into heat
		(
			`user_id`, 
			`user_name`, 
			`user_type`, 
			`user_org`, 
			`user_tell`, 
			`user_state`, 
			`wages_id`, 
			`heat_type`, 
			`heat_price`, 
			`heat_area`, 
			`heat_cost`, 
			`heat_sum`, 
			`create_time`, 
			`create_by`, 
			`update_time`, 
			`update_by`, 
			`remark`
		)
		values
		(
			?, 
			?, 
			?, 
			?, 
			?, 
			?, 
			?, 
			?, 
			?, 
			?, 
			?, 
			?, 
			?, 
			?, 
			?, 
			?, 
			?
		)
com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException: Column 'create_time' cannot be null
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(Unknown Source)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(Unknown Source)
	at java.lang.reflect.Constructor.newInstance(Unknown Source)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:425)
	at com.mysql.jdbc.Util.getInstance(Util.java:408)
	at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:936)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3976)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3912)
	at com.mysql.jdbc.MysqlIO.sendCommand(MysqlIO.java:2530)
	at com.mysql.jdbc.MysqlIO.sqlQueryDirect(MysqlIO.java:2683)
	at com.mysql.jdbc.ConnectionImpl.execSQL(ConnectionImpl.java:2486)
	at com.mysql.jdbc.PreparedStatement.executeInternal(PreparedStatement.java:1858)
	at com.mysql.jdbc.PreparedStatement.execute(PreparedStatement.java:1197)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2931)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2929)
	at com.alibaba.druid.wall.WallFilter.preparedStatement_execute(WallFilter.java:601)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2929)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2929)
	at com.alibaba.druid.proxy.jdbc.PreparedStatementProxyImpl.execute(PreparedStatementProxyImpl.java:131)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:493)
	at sun.reflect.GeneratedMethodAccessor125.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:59)
	at com.sun.proxy.$Proxy173.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.update(PreparedStatementHandler.java:46)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.update(RoutingStatementHandler.java:74)
	at org.apache.ibatis.executor.SimpleExecutor.doUpdate(SimpleExecutor.java:50)
	at org.apache.ibatis.executor.BaseExecutor.update(BaseExecutor.java:117)
	at org.apache.ibatis.executor.CachingExecutor.update(CachingExecutor.java:76)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:198)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.insert(DefaultSqlSession.java:185)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:434)
	at com.sun.proxy.$Proxy101.insert(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.insert(SqlSessionTemplate.java:279)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:57)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy106.save(Unknown Source)
	at com.bootdo.heat.service.impl.HeatServiceImpl.save(HeatServiceImpl.java:35)
	at com.bootdo.heat.controller.HeatController.save(HeatController.java:182)
	at com.bootdo.heat.controller.HeatController$$FastClassBySpringCGLIB$$8914ee44.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:204)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:746)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.bootdo.common.aspect.WebLogAspect.doAround(WebLogAspect.java:57)
	at sun.reflect.GeneratedMethodAccessor173.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.apache.shiro.spring.security.interceptor.AopAllianceAnnotationsAuthorizingMethodInterceptor$1.proceed(AopAllianceAnnotationsAuthorizingMethodInterceptor.java:82)
	at org.apache.shiro.authz.aop.AuthorizingMethodInterceptor.invoke(AuthorizingMethodInterceptor.java:39)
	at org.apache.shiro.spring.security.interceptor.AopAllianceAnnotationsAuthorizingMethodInterceptor.invoke(AopAllianceAnnotationsAuthorizingMethodInterceptor.java:115)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.bootdo.heat.controller.HeatController$$EnhancerBySpringCGLIB$$77c2a779.save(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:209)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:877)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:783)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:991)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:925)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:974)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:877)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:661)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:851)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:61)
	at org.apache.shiro.web.servlet.AdviceFilter.executeChain(AdviceFilter.java:108)
	at org.apache.shiro.web.servlet.AdviceFilter.doFilterInternal(AdviceFilter.java:137)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:66)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)
	at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)
	at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)
	at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)
	at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:383)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:109)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:496)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:790)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1468)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Unknown Source)
2019-04-03 17:32:32 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 17:32:32 -==> Parameters: 1(Long), admin(String), error(String), null, http://localhost:8081/heat/heat/save(String), org.springframework.dao.DataIntegrityViolationException: 
### Error updating database.  Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException: Column 'create_time' cannot be null
### The error may involve com.bootdo.heat.dao.HeatDao.save-Inline
### The error occurred while setting parameters
### SQL: insert into heat   (    `user_id`,     `user_name`,     `user_type`,     `user_org`,     `user_tell`,     `user_state`,     `wages_id`,     `heat_type`,     `heat_price`,     `heat_area`,     `heat_cost`,     `heat_sum`,     `create_time`,     `create_by`,     `update_time`,     `update_by`,     `remark`   )   values   (    ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?   )
### Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException: Column 'create_time' cannot be null
; ]; Column 'create_time' cannot be null; nested exception is com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException: Column 'create_time' cannot be null(String), null, 2019-04-03 17:32:32.894(Timestamp)
2019-04-03 17:32:32 -
### Error updating database.  Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException: Column 'create_time' cannot be null
### The error may involve com.bootdo.heat.dao.HeatDao.save-Inline
### The error occurred while setting parameters
### SQL: insert into heat   (    `user_id`,     `user_name`,     `user_type`,     `user_org`,     `user_tell`,     `user_state`,     `wages_id`,     `heat_type`,     `heat_price`,     `heat_area`,     `heat_cost`,     `heat_sum`,     `create_time`,     `create_by`,     `update_time`,     `update_by`,     `remark`   )   values   (    ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?   )
### Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException: Column 'create_time' cannot be null
; ]; Column 'create_time' cannot be null; nested exception is com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException: Column 'create_time' cannot be null
org.springframework.dao.DataIntegrityViolationException: 
### Error updating database.  Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException: Column 'create_time' cannot be null
### The error may involve com.bootdo.heat.dao.HeatDao.save-Inline
### The error occurred while setting parameters
### SQL: insert into heat   (    `user_id`,     `user_name`,     `user_type`,     `user_org`,     `user_tell`,     `user_state`,     `wages_id`,     `heat_type`,     `heat_price`,     `heat_area`,     `heat_cost`,     `heat_sum`,     `create_time`,     `create_by`,     `update_time`,     `update_by`,     `remark`   )   values   (    ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?   )
### Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException: Column 'create_time' cannot be null
; ]; Column 'create_time' cannot be null; nested exception is com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException: Column 'create_time' cannot be null
	at org.springframework.jdbc.support.SQLExceptionSubclassTranslator.doTranslate(SQLExceptionSubclassTranslator.java:87)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:72)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:81)
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:75)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:447)
	at com.sun.proxy.$Proxy101.insert(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.insert(SqlSessionTemplate.java:279)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:57)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy106.save(Unknown Source)
	at com.bootdo.heat.service.impl.HeatServiceImpl.save(HeatServiceImpl.java:35)
	at com.bootdo.heat.controller.HeatController.save(HeatController.java:182)
	at com.bootdo.heat.controller.HeatController$$FastClassBySpringCGLIB$$8914ee44.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:204)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:746)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.bootdo.common.aspect.WebLogAspect.doAround(WebLogAspect.java:57)
	at sun.reflect.GeneratedMethodAccessor173.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.apache.shiro.spring.security.interceptor.AopAllianceAnnotationsAuthorizingMethodInterceptor$1.proceed(AopAllianceAnnotationsAuthorizingMethodInterceptor.java:82)
	at org.apache.shiro.authz.aop.AuthorizingMethodInterceptor.invoke(AuthorizingMethodInterceptor.java:39)
	at org.apache.shiro.spring.security.interceptor.AopAllianceAnnotationsAuthorizingMethodInterceptor.invoke(AopAllianceAnnotationsAuthorizingMethodInterceptor.java:115)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.bootdo.heat.controller.HeatController$$EnhancerBySpringCGLIB$$77c2a779.save(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:209)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:877)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:783)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:991)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:925)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:974)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:877)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:661)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:851)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:61)
	at org.apache.shiro.web.servlet.AdviceFilter.executeChain(AdviceFilter.java:108)
	at org.apache.shiro.web.servlet.AdviceFilter.doFilterInternal(AdviceFilter.java:137)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:66)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)
	at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)
	at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)
	at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)
	at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:383)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:109)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:496)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:790)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1468)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Unknown Source)
Caused by: com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException: Column 'create_time' cannot be null
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(Unknown Source)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(Unknown Source)
	at java.lang.reflect.Constructor.newInstance(Unknown Source)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:425)
	at com.mysql.jdbc.Util.getInstance(Util.java:408)
	at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:936)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3976)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3912)
	at com.mysql.jdbc.MysqlIO.sendCommand(MysqlIO.java:2530)
	at com.mysql.jdbc.MysqlIO.sqlQueryDirect(MysqlIO.java:2683)
	at com.mysql.jdbc.ConnectionImpl.execSQL(ConnectionImpl.java:2486)
	at com.mysql.jdbc.PreparedStatement.executeInternal(PreparedStatement.java:1858)
	at com.mysql.jdbc.PreparedStatement.execute(PreparedStatement.java:1197)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2931)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2929)
	at com.alibaba.druid.wall.WallFilter.preparedStatement_execute(WallFilter.java:601)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2929)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2929)
	at com.alibaba.druid.proxy.jdbc.PreparedStatementProxyImpl.execute(PreparedStatementProxyImpl.java:131)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:493)
	at sun.reflect.GeneratedMethodAccessor125.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:59)
	at com.sun.proxy.$Proxy173.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.update(PreparedStatementHandler.java:46)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.update(RoutingStatementHandler.java:74)
	at org.apache.ibatis.executor.SimpleExecutor.doUpdate(SimpleExecutor.java:50)
	at org.apache.ibatis.executor.BaseExecutor.update(BaseExecutor.java:117)
	at org.apache.ibatis.executor.CachingExecutor.update(CachingExecutor.java:76)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:198)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.insert(DefaultSqlSession.java:185)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:434)
	... 103 common frames omitted
2019-04-03 17:32:32 -<==    Updates: 1
2019-04-03 17:32:45 -请求地址 : http://localhost:8081/heat/heat/save
2019-04-03 17:32:45 -HTTP METHOD : POST
2019-04-03 17:32:45 -CLASS_METHOD : com.bootdo.heat.controller.HeatController.save
2019-04-03 17:32:45 -参数 : [com.bootdo.heat.domain.HeatDO@703eb8df]
2019-04-03 17:32:45 -==>  Preparing: insert into heat ( `user_id`, `user_name`, `user_type`, `user_org`, `user_tell`, `user_state`, `wages_id`, `heat_type`, `heat_price`, `heat_area`, `heat_cost`, `heat_sum`, `create_time`, `create_by`, `update_time`, `update_by`, `remark` ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 17:32:45 -==> Parameters: 11(String), 1(String), B(String), 2(String), (String), (String), 1(String), 1(String), 1(BigDecimal), 1(BigDecimal), 1(BigDecimal), 1(BigDecimal), null, 1(Long), 2019-04-03 17:32:45.463(Timestamp), 1(Long), (String)
2019-04-03 17:32:45 -{conn-10002, pstmt-20025} execute error. insert into heat
		(
			`user_id`, 
			`user_name`, 
			`user_type`, 
			`user_org`, 
			`user_tell`, 
			`user_state`, 
			`wages_id`, 
			`heat_type`, 
			`heat_price`, 
			`heat_area`, 
			`heat_cost`, 
			`heat_sum`, 
			`create_time`, 
			`create_by`, 
			`update_time`, 
			`update_by`, 
			`remark`
		)
		values
		(
			?, 
			?, 
			?, 
			?, 
			?, 
			?, 
			?, 
			?, 
			?, 
			?, 
			?, 
			?, 
			?, 
			?, 
			?, 
			?, 
			?
		)
com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException: Column 'create_time' cannot be null
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(Unknown Source)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(Unknown Source)
	at java.lang.reflect.Constructor.newInstance(Unknown Source)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:425)
	at com.mysql.jdbc.Util.getInstance(Util.java:408)
	at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:936)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3976)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3912)
	at com.mysql.jdbc.MysqlIO.sendCommand(MysqlIO.java:2530)
	at com.mysql.jdbc.MysqlIO.sqlQueryDirect(MysqlIO.java:2683)
	at com.mysql.jdbc.ConnectionImpl.execSQL(ConnectionImpl.java:2486)
	at com.mysql.jdbc.PreparedStatement.executeInternal(PreparedStatement.java:1858)
	at com.mysql.jdbc.PreparedStatement.execute(PreparedStatement.java:1197)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2931)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2929)
	at com.alibaba.druid.wall.WallFilter.preparedStatement_execute(WallFilter.java:601)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2929)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2929)
	at com.alibaba.druid.proxy.jdbc.PreparedStatementProxyImpl.execute(PreparedStatementProxyImpl.java:131)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:493)
	at sun.reflect.GeneratedMethodAccessor125.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:59)
	at com.sun.proxy.$Proxy173.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.update(PreparedStatementHandler.java:46)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.update(RoutingStatementHandler.java:74)
	at org.apache.ibatis.executor.SimpleExecutor.doUpdate(SimpleExecutor.java:50)
	at org.apache.ibatis.executor.BaseExecutor.update(BaseExecutor.java:117)
	at org.apache.ibatis.executor.CachingExecutor.update(CachingExecutor.java:76)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:198)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.insert(DefaultSqlSession.java:185)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:434)
	at com.sun.proxy.$Proxy101.insert(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.insert(SqlSessionTemplate.java:279)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:57)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy106.save(Unknown Source)
	at com.bootdo.heat.service.impl.HeatServiceImpl.save(HeatServiceImpl.java:35)
	at com.bootdo.heat.controller.HeatController.save(HeatController.java:182)
	at com.bootdo.heat.controller.HeatController$$FastClassBySpringCGLIB$$8914ee44.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:204)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:746)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.bootdo.common.aspect.WebLogAspect.doAround(WebLogAspect.java:57)
	at sun.reflect.GeneratedMethodAccessor173.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.apache.shiro.spring.security.interceptor.AopAllianceAnnotationsAuthorizingMethodInterceptor$1.proceed(AopAllianceAnnotationsAuthorizingMethodInterceptor.java:82)
	at org.apache.shiro.authz.aop.AuthorizingMethodInterceptor.invoke(AuthorizingMethodInterceptor.java:39)
	at org.apache.shiro.spring.security.interceptor.AopAllianceAnnotationsAuthorizingMethodInterceptor.invoke(AopAllianceAnnotationsAuthorizingMethodInterceptor.java:115)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.bootdo.heat.controller.HeatController$$EnhancerBySpringCGLIB$$77c2a779.save(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:209)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:877)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:783)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:991)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:925)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:974)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:877)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:661)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:851)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:61)
	at org.apache.shiro.web.servlet.AdviceFilter.executeChain(AdviceFilter.java:108)
	at org.apache.shiro.web.servlet.AdviceFilter.doFilterInternal(AdviceFilter.java:137)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:66)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)
	at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)
	at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)
	at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)
	at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:383)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:109)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:496)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:790)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1468)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Unknown Source)
2019-04-03 17:32:45 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 17:32:45 -==> Parameters: 1(Long), admin(String), error(String), null, http://localhost:8081/heat/heat/save(String), org.springframework.dao.DataIntegrityViolationException: 
### Error updating database.  Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException: Column 'create_time' cannot be null
### The error may involve com.bootdo.heat.dao.HeatDao.save-Inline
### The error occurred while setting parameters
### SQL: insert into heat   (    `user_id`,     `user_name`,     `user_type`,     `user_org`,     `user_tell`,     `user_state`,     `wages_id`,     `heat_type`,     `heat_price`,     `heat_area`,     `heat_cost`,     `heat_sum`,     `create_time`,     `create_by`,     `update_time`,     `update_by`,     `remark`   )   values   (    ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?   )
### Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException: Column 'create_time' cannot be null
; ]; Column 'create_time' cannot be null; nested exception is com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException: Column 'create_time' cannot be null(String), null, 2019-04-03 17:32:45.47(Timestamp)
2019-04-03 17:32:45 -
### Error updating database.  Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException: Column 'create_time' cannot be null
### The error may involve com.bootdo.heat.dao.HeatDao.save-Inline
### The error occurred while setting parameters
### SQL: insert into heat   (    `user_id`,     `user_name`,     `user_type`,     `user_org`,     `user_tell`,     `user_state`,     `wages_id`,     `heat_type`,     `heat_price`,     `heat_area`,     `heat_cost`,     `heat_sum`,     `create_time`,     `create_by`,     `update_time`,     `update_by`,     `remark`   )   values   (    ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?   )
### Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException: Column 'create_time' cannot be null
; ]; Column 'create_time' cannot be null; nested exception is com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException: Column 'create_time' cannot be null
org.springframework.dao.DataIntegrityViolationException: 
### Error updating database.  Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException: Column 'create_time' cannot be null
### The error may involve com.bootdo.heat.dao.HeatDao.save-Inline
### The error occurred while setting parameters
### SQL: insert into heat   (    `user_id`,     `user_name`,     `user_type`,     `user_org`,     `user_tell`,     `user_state`,     `wages_id`,     `heat_type`,     `heat_price`,     `heat_area`,     `heat_cost`,     `heat_sum`,     `create_time`,     `create_by`,     `update_time`,     `update_by`,     `remark`   )   values   (    ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?   )
### Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException: Column 'create_time' cannot be null
; ]; Column 'create_time' cannot be null; nested exception is com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException: Column 'create_time' cannot be null
	at org.springframework.jdbc.support.SQLExceptionSubclassTranslator.doTranslate(SQLExceptionSubclassTranslator.java:87)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:72)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:81)
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:75)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:447)
	at com.sun.proxy.$Proxy101.insert(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.insert(SqlSessionTemplate.java:279)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:57)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy106.save(Unknown Source)
	at com.bootdo.heat.service.impl.HeatServiceImpl.save(HeatServiceImpl.java:35)
	at com.bootdo.heat.controller.HeatController.save(HeatController.java:182)
	at com.bootdo.heat.controller.HeatController$$FastClassBySpringCGLIB$$8914ee44.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:204)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:746)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.bootdo.common.aspect.WebLogAspect.doAround(WebLogAspect.java:57)
	at sun.reflect.GeneratedMethodAccessor173.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.apache.shiro.spring.security.interceptor.AopAllianceAnnotationsAuthorizingMethodInterceptor$1.proceed(AopAllianceAnnotationsAuthorizingMethodInterceptor.java:82)
	at org.apache.shiro.authz.aop.AuthorizingMethodInterceptor.invoke(AuthorizingMethodInterceptor.java:39)
	at org.apache.shiro.spring.security.interceptor.AopAllianceAnnotationsAuthorizingMethodInterceptor.invoke(AopAllianceAnnotationsAuthorizingMethodInterceptor.java:115)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.bootdo.heat.controller.HeatController$$EnhancerBySpringCGLIB$$77c2a779.save(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:209)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:877)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:783)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:991)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:925)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:974)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:877)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:661)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:851)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:61)
	at org.apache.shiro.web.servlet.AdviceFilter.executeChain(AdviceFilter.java:108)
	at org.apache.shiro.web.servlet.AdviceFilter.doFilterInternal(AdviceFilter.java:137)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:66)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)
	at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)
	at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)
	at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)
	at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:383)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:109)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:496)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:790)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1468)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Unknown Source)
Caused by: com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException: Column 'create_time' cannot be null
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(Unknown Source)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(Unknown Source)
	at java.lang.reflect.Constructor.newInstance(Unknown Source)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:425)
	at com.mysql.jdbc.Util.getInstance(Util.java:408)
	at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:936)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3976)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3912)
	at com.mysql.jdbc.MysqlIO.sendCommand(MysqlIO.java:2530)
	at com.mysql.jdbc.MysqlIO.sqlQueryDirect(MysqlIO.java:2683)
	at com.mysql.jdbc.ConnectionImpl.execSQL(ConnectionImpl.java:2486)
	at com.mysql.jdbc.PreparedStatement.executeInternal(PreparedStatement.java:1858)
	at com.mysql.jdbc.PreparedStatement.execute(PreparedStatement.java:1197)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2931)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2929)
	at com.alibaba.druid.wall.WallFilter.preparedStatement_execute(WallFilter.java:601)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2929)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2929)
	at com.alibaba.druid.proxy.jdbc.PreparedStatementProxyImpl.execute(PreparedStatementProxyImpl.java:131)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:493)
	at sun.reflect.GeneratedMethodAccessor125.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:59)
	at com.sun.proxy.$Proxy173.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.update(PreparedStatementHandler.java:46)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.update(RoutingStatementHandler.java:74)
	at org.apache.ibatis.executor.SimpleExecutor.doUpdate(SimpleExecutor.java:50)
	at org.apache.ibatis.executor.BaseExecutor.update(BaseExecutor.java:117)
	at org.apache.ibatis.executor.CachingExecutor.update(CachingExecutor.java:76)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:198)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.insert(DefaultSqlSession.java:185)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:434)
	... 103 common frames omitted
2019-04-03 17:32:45 -<==    Updates: 1
2019-04-03 17:33:41 -请求地址 : http://localhost:8081/index
2019-04-03 17:33:41 -HTTP METHOD : GET
2019-04-03 17:33:41 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2019-04-03 17:33:41 -参数 : [{}]
2019-04-03 17:33:41 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2019-04-03 17:33:41 -==> Parameters: 1(Long)
2019-04-03 17:33:41 -<==      Total: 46
2019-04-03 17:33:41 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2019-04-03 17:33:41 -==> Parameters: 138(Long)
2019-04-03 17:33:41 -<==      Total: 1
2019-04-03 17:33:41 -耗时 : 55
2019-04-03 17:33:41 -返回值 : index_v1
2019-04-03 17:33:41 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 17:33:41 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 56(Integer), com.bootdo.system.controller.LoginController.index()(String), {"menus":[{"attributes":{"icon":"fa fa-money","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-money","url":"/moneyList/moneyList"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"102","parentId":"106","text":"现金缴费"},{"attributes":{"icon":"fa fa-book","url":"/moneyLog/elecLog"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"107","parentId":"106","text":"缴费记录"}],"hasChildren":true,"hasParent":false,"id":"106","parentId":"0","text":"收费管理"},{"attributes":{"icon":"fa fa-lightbulb-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/elec/elec"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"121","parentId":"103","text":"电费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"elec/elecInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"122","parentId":"103","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"elec/elecUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"123","parentId":"103","text":"电表上传"},{"attributes":{"icon":"fa fa-cc","url":"/elec/elecPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"124","parentId":"103","text":"电价管理"}],"hasChildren":true,"hasParent":false,"id":"103","parentId":"0","text":"电费管理"},{"attributes":{"icon":"fa fa-tint","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/water/water"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"117","parentId":"105","text":"水费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"water/waterInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"118","parentId":"105","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"water/waterUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"119","parentId":"105","text":"水费生成"},{"attributes":{"icon":"fa fa-cc","url":"/water/waterPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"120","parentId":"105","text":"水价管理"}],"hasChildren":true,"hasParent":false,"id":"105","parentId":"0","text":"水费管理"},{"attributes":{"icon":"fa fa-fire","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/heat/heat"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"113","parentId":"104","text":"暖费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"heat/heatInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"114","parentId":"104","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"heat/heatUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"115","parentId":"104","text":"暖费生成"},{"attributes":{"icon":"","url":"/heat/heatPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"116","parentId":"104","text":"暖价管理"}],"hasChildren":true,"hasParent":false,"id":"104","parentId":"0","text":"暖费管理"},{"attributes":{"icon":"fa fa-vcard-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-bomb","url":"/print/print"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"149","parentId":"108","text":"票据记录"}],"hasChildren":true,"hasParent":false,"id":"108","parentId":"0","text":"票据管理"},{"attributes":{"icon":"fa fa-bar-chart","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-area-chart","url":"/chart/graph_echarts.html"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","text":"百度chart"},{"attributes":{"icon":"fa fa-sun-o","url":"charts/countDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"109","parentId":"97","text":"日统计报表"},{"attributes":{"icon":"fa fa-registered","url":"charts/countMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"110","parentId":"97","text":"月统计报表"},{"attributes":{"icon":"fa fa-money","url":"charts/countOwe"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"155","parentId":"97","text":"欠费报表图"},{"attributes":{"icon":"fa fa-support","url":"charts/countYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"111","parentId":"97","text":"年统计报表"},{"attributes":{"icon":"fa fa-tachometer","url":"charts/countRun"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"112","parentId":"97","text":"走势图报表"}],"hasChildren":true,"hasParent":false,"id":"97","parentId":"0","text":"统计管理"},{"attributes":{"icon":"fa fa-bars","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-book","url":"/common/dict"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"78","parentId":"1","text":"数据字典"},{"attributes":{"icon":"fa fa-folder-open","url":"/common/sysFile"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"71","parentId":"1","text":"文件管理"}],"h(String), 127.0.0.1(String), 2019-04-03 17:33:41.937(Timestamp)
2019-04-03 17:33:42 -<==    Updates: 1
2019-04-03 17:33:42 -请求地址 : http://localhost:8081/main
2019-04-03 17:33:42 -HTTP METHOD : GET
2019-04-03 17:33:42 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 17:33:42 -参数 : []
2019-04-03 17:33:42 -耗时 : 1
2019-04-03 17:33:42 -返回值 : main
2019-04-03 17:33:42 -请求地址 : http://localhost:8081/oa/notify/message
2019-04-03 17:33:42 -HTTP METHOD : GET
2019-04-03 17:33:42 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2019-04-03 17:33:42 -参数 : []
2019-04-03 17:33:42 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2019-04-03 17:33:42 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2019-04-03 17:33:42 -<==      Total: 0
2019-04-03 17:33:42 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2019-04-03 17:33:42 -==> Parameters: 1(Long), 0(String)
2019-04-03 17:33:42 -<==      Total: 1
2019-04-03 17:33:42 -耗时 : 7
2019-04-03 17:33:42 -返回值 : com.bootdo.common.utils.PageUtils@4380e332
2019-04-03 17:33:42 -请求地址 : http://localhost:8081/main
2019-04-03 17:33:42 -HTTP METHOD : GET
2019-04-03 17:33:42 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 17:33:42 -参数 : []
2019-04-03 17:33:42 -耗时 : 1
2019-04-03 17:33:42 -返回值 : main
2019-04-03 17:33:45 -请求地址 : http://localhost:8081/heat/heat
2019-04-03 17:33:45 -HTTP METHOD : GET
2019-04-03 17:33:45 -CLASS_METHOD : com.bootdo.heat.controller.HeatController.Heat
2019-04-03 17:33:45 -参数 : []
2019-04-03 17:33:45 -耗时 : 0
2019-04-03 17:33:45 -返回值 : heat/heat/heat
2019-04-03 17:33:46 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-03 17:33:46 -HTTP METHOD : GET
2019-04-03 17:33:46 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 17:33:46 -参数 : [userType]
2019-04-03 17:33:46 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 17:33:46 -==> Parameters: userType(String)
2019-04-03 17:33:46 -<==      Total: 2
2019-04-03 17:33:46 -耗时 : 4
2019-04-03 17:33:46 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 17:33:46 -请求地址 : http://localhost:8081/heat/heat/list
2019-04-03 17:33:46 -HTTP METHOD : GET
2019-04-03 17:33:46 -CLASS_METHOD : com.bootdo.heat.controller.HeatController.list
2019-04-03 17:33:46 -参数 : [{limit=10, offset=0, userType=, userOrg=, userId=, createTime=, queryType=1}]
2019-04-03 17:33:46 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`heat_type`,`heat_price`,`heat_area`,`heat_cost`,`heat_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from heat order by id asc limit ?, ? 
2019-04-03 17:33:46 -==> Parameters: 0(Integer), 10(Integer)
2019-04-03 17:33:46 -<==      Total: 10
2019-04-03 17:33:46 -==>  Preparing: select count(*) from heat 
2019-04-03 17:33:46 -==> Parameters: 
2019-04-03 17:33:46 -<==      Total: 1
2019-04-03 17:33:46 -耗时 : 9
2019-04-03 17:33:46 -返回值 : com.bootdo.common.utils.PageUtils@4c97b9bf
2019-04-03 17:33:50 -请求地址 : http://localhost:8081/heat/heat/add
2019-04-03 17:33:50 -HTTP METHOD : GET
2019-04-03 17:33:50 -CLASS_METHOD : com.bootdo.heat.controller.HeatController.add
2019-04-03 17:33:50 -参数 : []
2019-04-03 17:33:50 -耗时 : 0
2019-04-03 17:33:50 -返回值 : heat/heat/add
2019-04-03 17:33:50 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-03 17:33:50 -HTTP METHOD : GET
2019-04-03 17:33:50 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 17:33:50 -参数 : [userType]
2019-04-03 17:33:50 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 17:33:50 -==> Parameters: userType(String)
2019-04-03 17:33:50 -<==      Total: 2
2019-04-03 17:33:50 -请求地址 : http://localhost:8081/common/dict/list/userState
2019-04-03 17:33:50 -HTTP METHOD : GET
2019-04-03 17:33:50 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 17:33:50 -参数 : [userState]
2019-04-03 17:33:50 -耗时 : 5
2019-04-03 17:33:50 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 17:33:50 -请求地址 : http://localhost:8081/common/dict/list/heatType
2019-04-03 17:33:50 -HTTP METHOD : GET
2019-04-03 17:33:50 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 17:33:50 -参数 : [heatType]
2019-04-03 17:33:50 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 17:33:50 -==> Parameters: heatType(String)
2019-04-03 17:33:50 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 17:33:50 -==> Parameters: userState(String)
2019-04-03 17:33:50 -<==      Total: 5
2019-04-03 17:33:50 -<==      Total: 2
2019-04-03 17:33:50 -耗时 : 5
2019-04-03 17:33:50 -返回值 : [DictDO{id=137, name='特殊暖费1', value='4', type='heatType', description='暖气类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=136, name='工业非盈利', value='3', type='heatType', description='暖气类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=135, name='工业盈利', value='2', type='heatType', description='暖气类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=134, name='民用暖', value='1', type='heatType', description='暖气类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=133, name='商业暖', value='0', type='heatType', description='暖气类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 17:33:50 -耗时 : 7
2019-04-03 17:33:50 -返回值 : [DictDO{id=126, name='使用中', value='1', type='userState', description='用户状态', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=125, name='未使用', value='0', type='userState', description='用户状态', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 17:37:20 -请求地址 : http://localhost:8081/index
2019-04-03 17:37:20 -HTTP METHOD : GET
2019-04-03 17:37:20 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2019-04-03 17:37:20 -参数 : [{}]
2019-04-03 17:37:21 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2019-04-03 17:37:21 -==> Parameters: 1(Long)
2019-04-03 17:37:21 -<==      Total: 46
2019-04-03 17:37:21 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2019-04-03 17:37:21 -==> Parameters: 138(Long)
2019-04-03 17:37:21 -<==      Total: 1
2019-04-03 17:37:21 -耗时 : 31
2019-04-03 17:37:21 -返回值 : index_v1
2019-04-03 17:37:21 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 17:37:21 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 31(Integer), com.bootdo.system.controller.LoginController.index()(String), {"menus":[{"attributes":{"icon":"fa fa-money","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-money","url":"/moneyList/moneyList"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"102","parentId":"106","text":"现金缴费"},{"attributes":{"icon":"fa fa-book","url":"/moneyLog/elecLog"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"107","parentId":"106","text":"缴费记录"}],"hasChildren":true,"hasParent":false,"id":"106","parentId":"0","text":"收费管理"},{"attributes":{"icon":"fa fa-lightbulb-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/elec/elec"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"121","parentId":"103","text":"电费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"elec/elecInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"122","parentId":"103","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"elec/elecUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"123","parentId":"103","text":"电表上传"},{"attributes":{"icon":"fa fa-cc","url":"/elec/elecPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"124","parentId":"103","text":"电价管理"}],"hasChildren":true,"hasParent":false,"id":"103","parentId":"0","text":"电费管理"},{"attributes":{"icon":"fa fa-tint","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/water/water"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"117","parentId":"105","text":"水费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"water/waterInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"118","parentId":"105","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"water/waterUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"119","parentId":"105","text":"水费生成"},{"attributes":{"icon":"fa fa-cc","url":"/water/waterPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"120","parentId":"105","text":"水价管理"}],"hasChildren":true,"hasParent":false,"id":"105","parentId":"0","text":"水费管理"},{"attributes":{"icon":"fa fa-fire","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/heat/heat"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"113","parentId":"104","text":"暖费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"heat/heatInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"114","parentId":"104","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"heat/heatUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"115","parentId":"104","text":"暖费生成"},{"attributes":{"icon":"","url":"/heat/heatPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"116","parentId":"104","text":"暖价管理"}],"hasChildren":true,"hasParent":false,"id":"104","parentId":"0","text":"暖费管理"},{"attributes":{"icon":"fa fa-vcard-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-bomb","url":"/print/print"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"149","parentId":"108","text":"票据记录"}],"hasChildren":true,"hasParent":false,"id":"108","parentId":"0","text":"票据管理"},{"attributes":{"icon":"fa fa-bar-chart","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-area-chart","url":"/chart/graph_echarts.html"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","text":"百度chart"},{"attributes":{"icon":"fa fa-sun-o","url":"charts/countDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"109","parentId":"97","text":"日统计报表"},{"attributes":{"icon":"fa fa-registered","url":"charts/countMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"110","parentId":"97","text":"月统计报表"},{"attributes":{"icon":"fa fa-support","url":"charts/countYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"111","parentId":"97","text":"年统计报表"},{"attributes":{"icon":"fa fa-money","url":"charts/countOwe"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"155","parentId":"97","text":"欠费报表图"},{"attributes":{"icon":"fa fa-tachometer","url":"charts/countRun"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"112","parentId":"97","text":"走势图报表"}],"hasChildren":true,"hasParent":false,"id":"97","parentId":"0","text":"统计管理"},{"attributes":{"icon":"fa fa-bars","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-book","url":"/common/dict"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"78","parentId":"1","text":"数据字典"},{"attributes":{"icon":"fa fa-folder-open","url":"/common/sysFile"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"71","parentId":"1","text":"文件管理"}],"h(String), 127.0.0.1(String), 2019-04-03 17:37:21.025(Timestamp)
2019-04-03 17:37:21 -<==    Updates: 1
2019-04-03 17:37:21 -请求地址 : http://localhost:8081/main
2019-04-03 17:37:21 -HTTP METHOD : GET
2019-04-03 17:37:21 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 17:37:21 -参数 : []
2019-04-03 17:37:21 -耗时 : 0
2019-04-03 17:37:21 -返回值 : main
2019-04-03 17:37:21 -请求地址 : http://localhost:8081/oa/notify/message
2019-04-03 17:37:21 -HTTP METHOD : GET
2019-04-03 17:37:21 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2019-04-03 17:37:21 -参数 : []
2019-04-03 17:37:21 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2019-04-03 17:37:21 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2019-04-03 17:37:21 -<==      Total: 0
2019-04-03 17:37:21 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2019-04-03 17:37:21 -==> Parameters: 1(Long), 0(String)
2019-04-03 17:37:21 -<==      Total: 1
2019-04-03 17:37:21 -耗时 : 8
2019-04-03 17:37:21 -返回值 : com.bootdo.common.utils.PageUtils@94d694f
2019-04-03 17:37:21 -请求地址 : http://localhost:8081/main
2019-04-03 17:37:21 -HTTP METHOD : GET
2019-04-03 17:37:21 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 17:37:21 -参数 : []
2019-04-03 17:37:21 -耗时 : 2
2019-04-03 17:37:21 -返回值 : main
2019-04-03 17:37:24 -请求地址 : http://localhost:8081/heat/heat
2019-04-03 17:37:24 -HTTP METHOD : GET
2019-04-03 17:37:24 -CLASS_METHOD : com.bootdo.heat.controller.HeatController.Heat
2019-04-03 17:37:24 -参数 : []
2019-04-03 17:37:24 -耗时 : 2
2019-04-03 17:37:24 -返回值 : heat/heat/heat
2019-04-03 17:37:24 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-03 17:37:24 -HTTP METHOD : GET
2019-04-03 17:37:24 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 17:37:24 -参数 : [userType]
2019-04-03 17:37:24 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 17:37:24 -==> Parameters: userType(String)
2019-04-03 17:37:24 -<==      Total: 2
2019-04-03 17:37:24 -耗时 : 4
2019-04-03 17:37:24 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 17:37:24 -请求地址 : http://localhost:8081/heat/heat/list
2019-04-03 17:37:24 -HTTP METHOD : GET
2019-04-03 17:37:24 -CLASS_METHOD : com.bootdo.heat.controller.HeatController.list
2019-04-03 17:37:24 -参数 : [{limit=10, offset=0, userType=, userOrg=, userId=, createTime=, queryType=1}]
2019-04-03 17:37:24 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`heat_type`,`heat_price`,`heat_area`,`heat_cost`,`heat_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from heat order by id asc limit ?, ? 
2019-04-03 17:37:24 -==> Parameters: 0(Integer), 10(Integer)
2019-04-03 17:37:25 -<==      Total: 10
2019-04-03 17:37:25 -==>  Preparing: select count(*) from heat 
2019-04-03 17:37:25 -==> Parameters: 
2019-04-03 17:37:25 -<==      Total: 1
2019-04-03 17:37:25 -耗时 : 11
2019-04-03 17:37:25 -返回值 : com.bootdo.common.utils.PageUtils@2a17331d
2019-04-03 17:37:30 -请求地址 : http://localhost:8081/heat/heat/add
2019-04-03 17:37:30 -HTTP METHOD : GET
2019-04-03 17:37:30 -CLASS_METHOD : com.bootdo.heat.controller.HeatController.add
2019-04-03 17:37:30 -参数 : []
2019-04-03 17:37:30 -耗时 : 0
2019-04-03 17:37:30 -返回值 : heat/heat/add
2019-04-03 17:37:30 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-03 17:37:30 -HTTP METHOD : GET
2019-04-03 17:37:30 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 17:37:30 -参数 : [userType]
2019-04-03 17:37:30 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 17:37:30 -==> Parameters: userType(String)
2019-04-03 17:37:30 -请求地址 : http://localhost:8081/common/dict/list/userState
2019-04-03 17:37:30 -HTTP METHOD : GET
2019-04-03 17:37:30 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 17:37:30 -参数 : [userState]
2019-04-03 17:37:30 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 17:37:30 -==> Parameters: userState(String)
2019-04-03 17:37:30 -<==      Total: 2
2019-04-03 17:37:30 -耗时 : 5
2019-04-03 17:37:30 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 17:37:30 -<==      Total: 2
2019-04-03 17:37:30 -耗时 : 7
2019-04-03 17:37:30 -返回值 : [DictDO{id=126, name='使用中', value='1', type='userState', description='用户状态', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=125, name='未使用', value='0', type='userState', description='用户状态', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 17:37:30 -请求地址 : http://localhost:8081/common/dict/list/heatType
2019-04-03 17:37:30 -HTTP METHOD : GET
2019-04-03 17:37:30 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 17:37:30 -参数 : [heatType]
2019-04-03 17:37:30 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 17:37:30 -==> Parameters: heatType(String)
2019-04-03 17:37:30 -<==      Total: 5
2019-04-03 17:37:30 -耗时 : 9
2019-04-03 17:37:30 -返回值 : [DictDO{id=137, name='特殊暖费1', value='4', type='heatType', description='暖气类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=136, name='工业非盈利', value='3', type='heatType', description='暖气类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=135, name='工业盈利', value='2', type='heatType', description='暖气类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=134, name='民用暖', value='1', type='heatType', description='暖气类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=133, name='商业暖', value='0', type='heatType', description='暖气类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 17:38:21 -WebSocketSession[1 current WS(1)-HttpStream(0)-HttpPoll(0), 8 total, 0 closed abnormally (0 connect failure, 0 send limit, 0 transport error)], stompSubProtocol[processed CONNECT(7)-CONNECTED(7)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 8, active threads = 0, queued tasks = 0, completed tasks = 84], outboundChannelpool size = 1, active threads = 0, queued tasks = 0, completed tasks = 14], sockJsScheduler[pool size = 4, active threads = 1, queued tasks = 2, completed tasks = 412]
2019-04-03 17:38:44 -请求地址 : http://localhost:8081/index
2019-04-03 17:38:44 -HTTP METHOD : GET
2019-04-03 17:38:44 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2019-04-03 17:38:44 -参数 : [{}]
2019-04-03 17:38:44 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2019-04-03 17:38:44 -==> Parameters: 1(Long)
2019-04-03 17:38:44 -<==      Total: 46
2019-04-03 17:38:44 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2019-04-03 17:38:44 -==> Parameters: 138(Long)
2019-04-03 17:38:44 -<==      Total: 1
2019-04-03 17:38:44 -耗时 : 87
2019-04-03 17:38:44 -返回值 : index_v1
2019-04-03 17:38:44 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 17:38:44 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 87(Integer), com.bootdo.system.controller.LoginController.index()(String), {"menus":[{"attributes":{"icon":"fa fa-money","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-money","url":"/moneyList/moneyList"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"102","parentId":"106","text":"现金缴费"},{"attributes":{"icon":"fa fa-book","url":"/moneyLog/elecLog"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"107","parentId":"106","text":"缴费记录"}],"hasChildren":true,"hasParent":false,"id":"106","parentId":"0","text":"收费管理"},{"attributes":{"icon":"fa fa-lightbulb-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/elec/elec"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"121","parentId":"103","text":"电费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"elec/elecInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"122","parentId":"103","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"elec/elecUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"123","parentId":"103","text":"电表上传"},{"attributes":{"icon":"fa fa-cc","url":"/elec/elecPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"124","parentId":"103","text":"电价管理"}],"hasChildren":true,"hasParent":false,"id":"103","parentId":"0","text":"电费管理"},{"attributes":{"icon":"fa fa-tint","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/water/water"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"117","parentId":"105","text":"水费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"water/waterInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"118","parentId":"105","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"water/waterUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"119","parentId":"105","text":"水费生成"},{"attributes":{"icon":"fa fa-cc","url":"/water/waterPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"120","parentId":"105","text":"水价管理"}],"hasChildren":true,"hasParent":false,"id":"105","parentId":"0","text":"水费管理"},{"attributes":{"icon":"fa fa-fire","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/heat/heat"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"113","parentId":"104","text":"暖费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"heat/heatInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"114","parentId":"104","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"heat/heatUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"115","parentId":"104","text":"暖费生成"},{"attributes":{"icon":"","url":"/heat/heatPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"116","parentId":"104","text":"暖价管理"}],"hasChildren":true,"hasParent":false,"id":"104","parentId":"0","text":"暖费管理"},{"attributes":{"icon":"fa fa-vcard-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-bomb","url":"/print/print"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"149","parentId":"108","text":"票据记录"}],"hasChildren":true,"hasParent":false,"id":"108","parentId":"0","text":"票据管理"},{"attributes":{"icon":"fa fa-bar-chart","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-area-chart","url":"/chart/graph_echarts.html"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","text":"百度chart"},{"attributes":{"icon":"fa fa-sun-o","url":"charts/countDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"109","parentId":"97","text":"日统计报表"},{"attributes":{"icon":"fa fa-registered","url":"charts/countMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"110","parentId":"97","text":"月统计报表"},{"attributes":{"icon":"fa fa-money","url":"charts/countOwe"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"155","parentId":"97","text":"欠费报表图"},{"attributes":{"icon":"fa fa-support","url":"charts/countYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"111","parentId":"97","text":"年统计报表"},{"attributes":{"icon":"fa fa-tachometer","url":"charts/countRun"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"112","parentId":"97","text":"走势图报表"}],"hasChildren":true,"hasParent":false,"id":"97","parentId":"0","text":"统计管理"},{"attributes":{"icon":"fa fa-bars","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-book","url":"/common/dict"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"78","parentId":"1","text":"数据字典"},{"attributes":{"icon":"fa fa-folder-open","url":"/common/sysFile"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"71","parentId":"1","text":"文件管理"}],"h(String), 127.0.0.1(String), 2019-04-03 17:38:44.798(Timestamp)
2019-04-03 17:38:44 -<==    Updates: 1
2019-04-03 17:38:44 -请求地址 : http://localhost:8081/main
2019-04-03 17:38:44 -HTTP METHOD : GET
2019-04-03 17:38:44 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 17:38:44 -参数 : []
2019-04-03 17:38:45 -耗时 : 71
2019-04-03 17:38:45 -返回值 : main
2019-04-03 17:38:45 -请求地址 : http://localhost:8081/oa/notify/message
2019-04-03 17:38:45 -HTTP METHOD : GET
2019-04-03 17:38:45 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2019-04-03 17:38:45 -参数 : []
2019-04-03 17:38:45 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2019-04-03 17:38:45 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2019-04-03 17:38:45 -<==      Total: 0
2019-04-03 17:38:45 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2019-04-03 17:38:45 -==> Parameters: 1(Long), 0(String)
2019-04-03 17:38:45 -<==      Total: 1
2019-04-03 17:38:45 -耗时 : 6
2019-04-03 17:38:45 -返回值 : com.bootdo.common.utils.PageUtils@2572c14
2019-04-03 17:38:45 -请求地址 : http://localhost:8081/main
2019-04-03 17:38:45 -HTTP METHOD : GET
2019-04-03 17:38:45 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 17:38:45 -参数 : []
2019-04-03 17:38:45 -耗时 : 2
2019-04-03 17:38:45 -返回值 : main
2019-04-03 17:39:00 -请求地址 : http://localhost:8081/heat/heat
2019-04-03 17:39:00 -HTTP METHOD : GET
2019-04-03 17:39:00 -CLASS_METHOD : com.bootdo.heat.controller.HeatController.Heat
2019-04-03 17:39:00 -参数 : []
2019-04-03 17:39:00 -耗时 : 1
2019-04-03 17:39:00 -返回值 : heat/heat/heat
2019-04-03 17:39:01 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-03 17:39:01 -HTTP METHOD : GET
2019-04-03 17:39:01 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 17:39:01 -参数 : [userType]
2019-04-03 17:39:01 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 17:39:01 -==> Parameters: userType(String)
2019-04-03 17:39:01 -<==      Total: 2
2019-04-03 17:39:01 -耗时 : 3
2019-04-03 17:39:01 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 17:39:01 -请求地址 : http://localhost:8081/heat/heat/list
2019-04-03 17:39:01 -HTTP METHOD : GET
2019-04-03 17:39:01 -CLASS_METHOD : com.bootdo.heat.controller.HeatController.list
2019-04-03 17:39:01 -参数 : [{limit=10, offset=0, userType=, userOrg=, userId=, createTime=, queryType=1}]
2019-04-03 17:39:01 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`heat_type`,`heat_price`,`heat_area`,`heat_cost`,`heat_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from heat order by id asc limit ?, ? 
2019-04-03 17:39:01 -==> Parameters: 0(Integer), 10(Integer)
2019-04-03 17:39:01 -<==      Total: 10
2019-04-03 17:39:01 -==>  Preparing: select count(*) from heat 
2019-04-03 17:39:01 -==> Parameters: 
2019-04-03 17:39:01 -<==      Total: 1
2019-04-03 17:39:01 -耗时 : 9
2019-04-03 17:39:01 -返回值 : com.bootdo.common.utils.PageUtils@719db68e
2019-04-03 17:39:05 -请求地址 : http://localhost:8081/heat/heat/add
2019-04-03 17:39:05 -HTTP METHOD : GET
2019-04-03 17:39:05 -CLASS_METHOD : com.bootdo.heat.controller.HeatController.add
2019-04-03 17:39:05 -参数 : []
2019-04-03 17:39:05 -耗时 : 1
2019-04-03 17:39:05 -返回值 : heat/heat/add
2019-04-03 17:39:05 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-03 17:39:05 -HTTP METHOD : GET
2019-04-03 17:39:05 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 17:39:05 -参数 : [userType]
2019-04-03 17:39:05 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 17:39:05 -==> Parameters: userType(String)
2019-04-03 17:39:05 -请求地址 : http://localhost:8081/common/dict/list/userState
2019-04-03 17:39:05 -HTTP METHOD : GET
2019-04-03 17:39:05 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 17:39:05 -参数 : [userState]
2019-04-03 17:39:05 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 17:39:05 -<==      Total: 2
2019-04-03 17:39:05 -==> Parameters: userState(String)
2019-04-03 17:39:05 -耗时 : 4
2019-04-03 17:39:05 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 17:39:05 -<==      Total: 2
2019-04-03 17:39:05 -耗时 : 8
2019-04-03 17:39:05 -返回值 : [DictDO{id=126, name='使用中', value='1', type='userState', description='用户状态', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=125, name='未使用', value='0', type='userState', description='用户状态', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 17:39:05 -请求地址 : http://localhost:8081/common/dict/list/heatType
2019-04-03 17:39:05 -HTTP METHOD : GET
2019-04-03 17:39:05 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 17:39:05 -参数 : [heatType]
2019-04-03 17:39:05 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 17:39:05 -==> Parameters: heatType(String)
2019-04-03 17:39:05 -<==      Total: 5
2019-04-03 17:39:05 -耗时 : 4
2019-04-03 17:39:05 -返回值 : [DictDO{id=137, name='特殊暖费1', value='4', type='heatType', description='暖气类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=136, name='工业非盈利', value='3', type='heatType', description='暖气类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=135, name='工业盈利', value='2', type='heatType', description='暖气类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=134, name='民用暖', value='1', type='heatType', description='暖气类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=133, name='商业暖', value='0', type='heatType', description='暖气类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 17:39:49 -请求地址 : http://localhost:8081/heat/heat/save
2019-04-03 17:39:49 -HTTP METHOD : POST
2019-04-03 17:39:49 -CLASS_METHOD : com.bootdo.heat.controller.HeatController.save
2019-04-03 17:39:49 -参数 : [com.bootdo.heat.domain.HeatDO@1bb86d25]
2019-04-03 17:39:49 -==>  Preparing: insert into heat ( `user_id`, `user_name`, `user_type`, `user_org`, `user_tell`, `user_state`, `wages_id`, `heat_type`, `heat_price`, `heat_area`, `heat_cost`, `heat_sum`, `create_time`, `create_by`, `update_time`, `update_by`, `remark` ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 17:39:50 -==> Parameters: 1(String), 1(String), B(String), (String), (String), 1(String), 1(String), 1(String), 1(BigDecimal), 1(BigDecimal), 1(BigDecimal), 1(BigDecimal), null, 1(Long), 2019-04-03 17:39:49.997(Timestamp), 1(Long), (String)
2019-04-03 17:39:50 -{conn-10001, pstmt-20026} execute error. insert into heat
		(
			`user_id`, 
			`user_name`, 
			`user_type`, 
			`user_org`, 
			`user_tell`, 
			`user_state`, 
			`wages_id`, 
			`heat_type`, 
			`heat_price`, 
			`heat_area`, 
			`heat_cost`, 
			`heat_sum`, 
			`create_time`, 
			`create_by`, 
			`update_time`, 
			`update_by`, 
			`remark`
		)
		values
		(
			?, 
			?, 
			?, 
			?, 
			?, 
			?, 
			?, 
			?, 
			?, 
			?, 
			?, 
			?, 
			?, 
			?, 
			?, 
			?, 
			?
		)
com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException: Column 'create_time' cannot be null
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(Unknown Source)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(Unknown Source)
	at java.lang.reflect.Constructor.newInstance(Unknown Source)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:425)
	at com.mysql.jdbc.Util.getInstance(Util.java:408)
	at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:936)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3976)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3912)
	at com.mysql.jdbc.MysqlIO.sendCommand(MysqlIO.java:2530)
	at com.mysql.jdbc.MysqlIO.sqlQueryDirect(MysqlIO.java:2683)
	at com.mysql.jdbc.ConnectionImpl.execSQL(ConnectionImpl.java:2486)
	at com.mysql.jdbc.PreparedStatement.executeInternal(PreparedStatement.java:1858)
	at com.mysql.jdbc.PreparedStatement.execute(PreparedStatement.java:1197)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2931)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2929)
	at com.alibaba.druid.wall.WallFilter.preparedStatement_execute(WallFilter.java:601)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2929)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2929)
	at com.alibaba.druid.proxy.jdbc.PreparedStatementProxyImpl.execute(PreparedStatementProxyImpl.java:131)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:493)
	at sun.reflect.GeneratedMethodAccessor125.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:59)
	at com.sun.proxy.$Proxy173.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.update(PreparedStatementHandler.java:46)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.update(RoutingStatementHandler.java:74)
	at org.apache.ibatis.executor.SimpleExecutor.doUpdate(SimpleExecutor.java:50)
	at org.apache.ibatis.executor.BaseExecutor.update(BaseExecutor.java:117)
	at org.apache.ibatis.executor.CachingExecutor.update(CachingExecutor.java:76)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:198)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.insert(DefaultSqlSession.java:185)
	at sun.reflect.GeneratedMethodAccessor209.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:434)
	at com.sun.proxy.$Proxy101.insert(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.insert(SqlSessionTemplate.java:279)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:57)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy106.save(Unknown Source)
	at com.bootdo.heat.service.impl.HeatServiceImpl.save(HeatServiceImpl.java:35)
	at com.bootdo.heat.controller.HeatController.save(HeatController.java:182)
	at com.bootdo.heat.controller.HeatController$$FastClassBySpringCGLIB$$8914ee44.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:204)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:746)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.bootdo.common.aspect.WebLogAspect.doAround(WebLogAspect.java:57)
	at sun.reflect.GeneratedMethodAccessor173.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.apache.shiro.spring.security.interceptor.AopAllianceAnnotationsAuthorizingMethodInterceptor$1.proceed(AopAllianceAnnotationsAuthorizingMethodInterceptor.java:82)
	at org.apache.shiro.authz.aop.AuthorizingMethodInterceptor.invoke(AuthorizingMethodInterceptor.java:39)
	at org.apache.shiro.spring.security.interceptor.AopAllianceAnnotationsAuthorizingMethodInterceptor.invoke(AopAllianceAnnotationsAuthorizingMethodInterceptor.java:115)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.bootdo.heat.controller.HeatController$$EnhancerBySpringCGLIB$$77c2a779.save(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:209)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:877)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:783)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:991)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:925)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:974)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:877)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:661)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:851)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:61)
	at org.apache.shiro.web.servlet.AdviceFilter.executeChain(AdviceFilter.java:108)
	at org.apache.shiro.web.servlet.AdviceFilter.doFilterInternal(AdviceFilter.java:137)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:66)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)
	at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)
	at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)
	at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)
	at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:383)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:109)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:496)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:790)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1468)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Unknown Source)
2019-04-03 17:39:50 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 17:39:50 -==> Parameters: 1(Long), admin(String), error(String), null, http://localhost:8081/heat/heat/save(String), org.springframework.dao.DataIntegrityViolationException: 
### Error updating database.  Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException: Column 'create_time' cannot be null
### The error may involve com.bootdo.heat.dao.HeatDao.save-Inline
### The error occurred while setting parameters
### SQL: insert into heat   (    `user_id`,     `user_name`,     `user_type`,     `user_org`,     `user_tell`,     `user_state`,     `wages_id`,     `heat_type`,     `heat_price`,     `heat_area`,     `heat_cost`,     `heat_sum`,     `create_time`,     `create_by`,     `update_time`,     `update_by`,     `remark`   )   values   (    ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?   )
### Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException: Column 'create_time' cannot be null
; ]; Column 'create_time' cannot be null; nested exception is com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException: Column 'create_time' cannot be null(String), null, 2019-04-03 17:39:50.004(Timestamp)
2019-04-03 17:39:50 -
### Error updating database.  Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException: Column 'create_time' cannot be null
### The error may involve com.bootdo.heat.dao.HeatDao.save-Inline
### The error occurred while setting parameters
### SQL: insert into heat   (    `user_id`,     `user_name`,     `user_type`,     `user_org`,     `user_tell`,     `user_state`,     `wages_id`,     `heat_type`,     `heat_price`,     `heat_area`,     `heat_cost`,     `heat_sum`,     `create_time`,     `create_by`,     `update_time`,     `update_by`,     `remark`   )   values   (    ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?   )
### Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException: Column 'create_time' cannot be null
; ]; Column 'create_time' cannot be null; nested exception is com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException: Column 'create_time' cannot be null
org.springframework.dao.DataIntegrityViolationException: 
### Error updating database.  Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException: Column 'create_time' cannot be null
### The error may involve com.bootdo.heat.dao.HeatDao.save-Inline
### The error occurred while setting parameters
### SQL: insert into heat   (    `user_id`,     `user_name`,     `user_type`,     `user_org`,     `user_tell`,     `user_state`,     `wages_id`,     `heat_type`,     `heat_price`,     `heat_area`,     `heat_cost`,     `heat_sum`,     `create_time`,     `create_by`,     `update_time`,     `update_by`,     `remark`   )   values   (    ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?   )
### Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException: Column 'create_time' cannot be null
; ]; Column 'create_time' cannot be null; nested exception is com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException: Column 'create_time' cannot be null
	at org.springframework.jdbc.support.SQLExceptionSubclassTranslator.doTranslate(SQLExceptionSubclassTranslator.java:87)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:72)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:81)
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:75)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:447)
	at com.sun.proxy.$Proxy101.insert(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.insert(SqlSessionTemplate.java:279)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:57)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy106.save(Unknown Source)
	at com.bootdo.heat.service.impl.HeatServiceImpl.save(HeatServiceImpl.java:35)
	at com.bootdo.heat.controller.HeatController.save(HeatController.java:182)
	at com.bootdo.heat.controller.HeatController$$FastClassBySpringCGLIB$$8914ee44.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:204)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:746)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.bootdo.common.aspect.WebLogAspect.doAround(WebLogAspect.java:57)
	at sun.reflect.GeneratedMethodAccessor173.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.apache.shiro.spring.security.interceptor.AopAllianceAnnotationsAuthorizingMethodInterceptor$1.proceed(AopAllianceAnnotationsAuthorizingMethodInterceptor.java:82)
	at org.apache.shiro.authz.aop.AuthorizingMethodInterceptor.invoke(AuthorizingMethodInterceptor.java:39)
	at org.apache.shiro.spring.security.interceptor.AopAllianceAnnotationsAuthorizingMethodInterceptor.invoke(AopAllianceAnnotationsAuthorizingMethodInterceptor.java:115)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.bootdo.heat.controller.HeatController$$EnhancerBySpringCGLIB$$77c2a779.save(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:209)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:877)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:783)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:991)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:925)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:974)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:877)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:661)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:851)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:61)
	at org.apache.shiro.web.servlet.AdviceFilter.executeChain(AdviceFilter.java:108)
	at org.apache.shiro.web.servlet.AdviceFilter.doFilterInternal(AdviceFilter.java:137)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:66)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)
	at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)
	at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)
	at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)
	at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:383)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:109)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:496)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:790)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1468)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Unknown Source)
Caused by: com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException: Column 'create_time' cannot be null
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(Unknown Source)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(Unknown Source)
	at java.lang.reflect.Constructor.newInstance(Unknown Source)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:425)
	at com.mysql.jdbc.Util.getInstance(Util.java:408)
	at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:936)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3976)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3912)
	at com.mysql.jdbc.MysqlIO.sendCommand(MysqlIO.java:2530)
	at com.mysql.jdbc.MysqlIO.sqlQueryDirect(MysqlIO.java:2683)
	at com.mysql.jdbc.ConnectionImpl.execSQL(ConnectionImpl.java:2486)
	at com.mysql.jdbc.PreparedStatement.executeInternal(PreparedStatement.java:1858)
	at com.mysql.jdbc.PreparedStatement.execute(PreparedStatement.java:1197)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2931)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2929)
	at com.alibaba.druid.wall.WallFilter.preparedStatement_execute(WallFilter.java:601)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2929)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2929)
	at com.alibaba.druid.proxy.jdbc.PreparedStatementProxyImpl.execute(PreparedStatementProxyImpl.java:131)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:493)
	at sun.reflect.GeneratedMethodAccessor125.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:59)
	at com.sun.proxy.$Proxy173.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.update(PreparedStatementHandler.java:46)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.update(RoutingStatementHandler.java:74)
	at org.apache.ibatis.executor.SimpleExecutor.doUpdate(SimpleExecutor.java:50)
	at org.apache.ibatis.executor.BaseExecutor.update(BaseExecutor.java:117)
	at org.apache.ibatis.executor.CachingExecutor.update(CachingExecutor.java:76)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:198)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.insert(DefaultSqlSession.java:185)
	at sun.reflect.GeneratedMethodAccessor209.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:434)
	... 103 common frames omitted
2019-04-03 17:39:50 -<==    Updates: 1
2019-04-03 17:41:17 -Starting BootdoApplication on ZJZL-20180906VX with PID 4964 (D:\eclipse2018-work\bootdo\target\classes started by Administrator in D:\eclipse2018-work\bootdo)
2019-04-03 17:41:17 -Running with Spring Boot v2.0.3.RELEASE, Spring v5.0.7.RELEASE
2019-04-03 17:41:17 -The following profiles are active: dev
2019-04-03 17:41:17 -Refreshing org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@a38c7fe: startup date [Wed Apr 03 17:41:17 CST 2019]; root of context hierarchy
2019-04-03 17:41:20 -Multiple Spring Data modules found, entering strict repository configuration mode!
2019-04-03 17:41:23 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$5344f659] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-03 17:41:23 -Bean 'shiroConfig' of type [com.bootdo.system.config.ShiroConfig$$EnhancerBySpringCGLIB$$459e2500] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-03 17:41:24 -Bean 'userRealm' of type [com.bootdo.system.shiro.UserRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-03 17:41:25 -Bean 'cacheManager2' of type [net.sf.ehcache.CacheManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-03 17:41:25 -Bean 'ehCacheManager' of type [org.apache.shiro.cache.ehcache.EhCacheManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-03 17:41:25 -Cache with name 'com.bootdo.system.shiro.UserRealm.authorizationCache' does not yet exist.  Creating now.
2019-04-03 17:41:25 -Added EhCache named [com.bootdo.system.shiro.UserRealm.authorizationCache]
2019-04-03 17:41:25 -Bean 'sessionDAO' of type [org.apache.shiro.session.mgt.eis.MemorySessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-03 17:41:25 -Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-03 17:41:25 -Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-03 17:41:25 -Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-03 17:41:27 -Tomcat initialized with port(s): 8081 (http)
2019-04-03 17:41:27 -Initializing ProtocolHandler ["http-nio-8081"]
2019-04-03 17:41:27 -Starting service [Tomcat]
2019-04-03 17:41:27 -Starting Servlet Engine: Apache Tomcat/8.5.31
2019-04-03 17:41:27 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [C:\Program Files\Java\jre1.8.0_131\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:/Program Files/Java/jre1.8.0_131/bin/server;C:/Program Files/Java/jre1.8.0_131/bin;C:/Program Files/Java/jre1.8.0_131/lib/amd64;C:\ProgramData\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Windows\System32\OpenSSH\;D:\pbb\pycSafefile\x64;D:\pbb\PBB Reader\x64;C:\Program Files\MySQL\MySQL Utilities 1.6\;D:\MAVEN\apache-maven-3.6.0\bin;D:\GIT\Git\cmd;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;;C:\Users\Administrator\Desktop;;.]
2019-04-03 17:41:27 -Initializing Spring embedded WebApplicationContext
2019-04-03 17:41:27 -Root WebApplicationContext: initialization completed in 10082 ms
2019-04-03 17:41:28 -Mapping filter: 'characterEncodingFilter' to: [/*]
2019-04-03 17:41:28 -Mapping filter: 'hiddenHttpMethodFilter' to: [/*]
2019-04-03 17:41:28 -Mapping filter: 'httpPutFormContentFilter' to: [/*]
2019-04-03 17:41:28 -Mapping filter: 'requestContextFilter' to: [/*]
2019-04-03 17:41:28 -Filter xssFilter was not registered (disabled)
2019-04-03 17:41:28 -Mapping filter: 'webStatFilter' to urls: [/*]
2019-04-03 17:41:28 -Mapping filter: 'shiroFilterFactoryBean' to: [/*]
2019-04-03 17:41:28 -Servlet statViewServlet mapped to [/druid/*]
2019-04-03 17:41:28 -Servlet dispatcherServlet mapped to [/]
2019-04-03 17:41:31 -ApplicationContext registed-->org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@a38c7fe: startup date [Wed Apr 03 17:41:17 CST 2019]; root of context hierarchy
2019-04-03 17:41:31 -Using default implementation for ThreadExecutor
2019-04-03 17:41:31 -Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2019-04-03 17:41:31 -Quartz Scheduler v.2.2.1 created.
2019-04-03 17:41:31 -RAMJobStore initialized.
2019-04-03 17:41:31 -Scheduler meta-data: Quartz Scheduler (v2.2.1) 'schedulerFactoryBean' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2019-04-03 17:41:31 -Quartz scheduler 'schedulerFactoryBean' initialized from an externally provided properties instance.
2019-04-03 17:41:31 -Quartz scheduler version: 2.2.1
2019-04-03 17:41:31 -JobFactory set to: com.bootdo.common.quartz.factory.JobFactory@3e0a9b1d
2019-04-03 17:41:32 -Initializing ExecutorService  'clientInboundChannelExecutor'
2019-04-03 17:41:32 -Initializing ExecutorService  'clientOutboundChannelExecutor'
2019-04-03 17:41:35 -Mapped "{[/charts/countDD/tableDD],methods=[POST]}" onto public java.lang.String com.bootdo.charts.controller.countDDController.tableDD()
2019-04-03 17:41:35 -Mapped "{[/charts/countDD/getCountDD],methods=[POST]}" onto public com.bootdo.charts.vo.CountDayVo com.bootdo.charts.controller.countDDController.getCountD(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo,javax.servlet.http.HttpServletRequest)
2019-04-03 17:41:35 -Mapped "{[/charts/countDD],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.countDDController.countDD()
2019-04-03 17:41:35 -Mapped "{[/charts/countDD/exportCountDD],methods=[GET]}" onto public void com.bootdo.charts.controller.countDDController.exprotElecLog(com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-03 17:41:35 -Mapped "{[/charts/countMM/exportCountMM],methods=[GET]}" onto public void com.bootdo.charts.controller.countMMController.exprotElecLog(com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-03 17:41:35 -Mapped "{[/charts/countMM/getCountMM],methods=[POST]}" onto public void com.bootdo.charts.controller.countMMController.getCountMM(org.springframework.ui.Model,com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo,javax.servlet.http.HttpServletRequest)
2019-04-03 17:41:35 -Mapped "{[/charts/countMM],methods=[GET]}" onto java.lang.String com.bootdo.charts.controller.countMMController.countMM()
2019-04-03 17:41:35 -Mapped "{[/charts/countOwe/getCountOwe],methods=[POST]}" onto public com.bootdo.charts.vo.CountOweVo com.bootdo.charts.controller.countOweController.getCountD(com.bootdo.elec.vo.ElecVo,com.bootdo.water.vo.WaterVo,com.bootdo.heat.vo.HeatVo,javax.servlet.http.HttpServletRequest)
2019-04-03 17:41:35 -Mapped "{[/charts/countOwe],methods=[GET]}" onto java.lang.String com.bootdo.charts.controller.countOweController.countOwe()
2019-04-03 17:41:35 -Mapped "{[/charts/countRun/getCountRun],methods=[POST]}" onto public int com.bootdo.charts.controller.countRunController.getCountD(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo)
2019-04-03 17:41:35 -Mapped "{[/charts/countRun/exportCountRun],methods=[GET]}" onto public void com.bootdo.charts.controller.countRunController.exprotElecLog(com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-03 17:41:35 -Mapped "{[/charts/countRun],methods=[GET]}" onto java.lang.String com.bootdo.charts.controller.countRunController.countRun()
2019-04-03 17:41:35 -Mapped "{[/charts/countYY/getCountYY],methods=[POST]}" onto public int com.bootdo.charts.controller.countYYController.getCountD(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo)
2019-04-03 17:41:35 -Mapped "{[/charts/countYY/exportCountYY],methods=[GET]}" onto public void com.bootdo.charts.controller.countYYController.exprotElecLog(com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-03 17:41:35 -Mapped "{[/charts/countYY],methods=[GET]}" onto java.lang.String com.bootdo.charts.controller.countYYController.countYY()
2019-04-03 17:41:35 -Mapped "{[/common/dict/add],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.add()
2019-04-03 17:41:35 -Mapped "{[/common/dict/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.remove(java.lang.Long)
2019-04-03 17:41:35 -Mapped "{[/common/dict/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.remove(java.lang.Long[])
2019-04-03 17:41:35 -Mapped "{[/common/dict/update]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.update(com.bootdo.common.domain.DictDO)
2019-04-03 17:41:35 -Mapped "{[/common/dict/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.common.controller.DictController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 17:41:35 -Mapped "{[/common/dict/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.save(com.bootdo.common.domain.DictDO)
2019-04-03 17:41:35 -Mapped "{[/common/dict/type],methods=[GET]}" onto public java.util.List<com.bootdo.common.domain.DictDO> com.bootdo.common.controller.DictController.listType()
2019-04-03 17:41:35 -Mapped "{[/common/dict/add/{type}/{description}],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.addD(org.springframework.ui.Model,java.lang.String,java.lang.String)
2019-04-03 17:41:35 -Mapped "{[/common/dict/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 17:41:35 -Mapped "{[/common/dict/list/{type}],methods=[GET]}" onto public java.util.List<com.bootdo.common.domain.DictDO> com.bootdo.common.controller.DictController.listByType(java.lang.String)
2019-04-03 17:41:35 -Mapped "{[/common/dict],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.dict()
2019-04-03 17:41:35 -Mapped "{[/common/sysFile/add],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.FileController.add()
2019-04-03 17:41:35 -Mapped "{[/common/sysFile/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.remove(java.lang.Long,javax.servlet.http.HttpServletRequest)
2019-04-03 17:41:35 -Mapped "{[/common/sysFile/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.remove(java.lang.Long[])
2019-04-03 17:41:35 -Mapped "{[/common/sysFile/update]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.update(com.bootdo.common.domain.FileDO)
2019-04-03 17:41:35 -Mapped "{[/common/sysFile/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.common.controller.FileController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 17:41:35 -Mapped "{[/common/sysFile/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.save(com.bootdo.common.domain.FileDO)
2019-04-03 17:41:35 -Mapped "{[/common/sysFile/info/{id}]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.info(java.lang.Long)
2019-04-03 17:41:35 -Mapped "{[/common/sysFile/edit],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.FileController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 17:41:35 -Mapped "{[/common/sysFile],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.FileController.sysFile(org.springframework.ui.Model)
2019-04-03 17:41:35 -Mapped "{[/common/sysFile/upload],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.FileController.upload(org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpServletRequest)
2019-04-03 17:41:35 -Mapped "{[/common/generator/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.GeneratorController.update(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 17:41:35 -Mapped "{[/common/generator/list],methods=[GET]}" onto java.util.List<java.util.Map<java.lang.String, java.lang.Object>> com.bootdo.common.controller.GeneratorController.list()
2019-04-03 17:41:35 -Mapped "{[/common/generator/code/{tableName}]}" onto public void com.bootdo.common.controller.GeneratorController.code(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String) throws java.io.IOException
2019-04-03 17:41:35 -Mapped "{[/common/generator],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.GeneratorController.generator()
2019-04-03 17:41:35 -Mapped "{[/common/generator/edit],methods=[GET]}" onto public java.lang.String com.bootdo.common.controller.GeneratorController.edit(org.springframework.ui.Model)
2019-04-03 17:41:35 -Mapped "{[/common/generator/batchCode]}" onto public void com.bootdo.common.controller.GeneratorController.batchCode(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String) throws java.io.IOException
2019-04-03 17:41:35 -Mapped "{[/common/job/add],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.JobController.add()
2019-04-03 17:41:35 -Mapped "{[/common/job/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.remove(java.lang.Long)
2019-04-03 17:41:35 -Mapped "{[/common/job/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.remove(java.lang.Long[])
2019-04-03 17:41:35 -Mapped "{[/common/job/update],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.update(com.bootdo.common.domain.TaskDO)
2019-04-03 17:41:35 -Mapped "{[/common/job/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.common.controller.JobController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 17:41:35 -Mapped "{[/common/job/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.save(com.bootdo.common.domain.TaskDO)
2019-04-03 17:41:35 -Mapped "{[/common/job/info/{id}]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.info(java.lang.Long)
2019-04-03 17:41:35 -Mapped "{[/common/job/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.JobController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 17:41:35 -Mapped "{[/common/job/changeJobStatus],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.changeJobStatus(java.lang.Long,java.lang.String)
2019-04-03 17:41:35 -Mapped "{[/common/job],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.JobController.taskScheduleJob()
2019-04-03 17:41:35 -Mapped "{[/common/log/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.LogController.remove(java.lang.Long)
2019-04-03 17:41:35 -Mapped "{[/common/log],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.LogController.log()
2019-04-03 17:41:35 -Mapped "{[/common/log/list],methods=[GET]}" onto com.bootdo.common.domain.PageDO<com.bootdo.common.domain.LogDO> com.bootdo.common.controller.LogController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 17:41:35 -Mapped "{[/common/log/batchRemove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.LogController.batchRemove(java.lang.Long[])
2019-04-03 17:41:35 -Mapped "{[/common/long],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.LongController.Long()
2019-04-03 17:41:35 -Mapped "{[/common/time],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.TimeController.Time()
2019-04-03 17:41:35 -Mapped "{[/error]}" onto public com.bootdo.common.utils.R com.bootdo.common.exception.MainsiteErrorController.handleError(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-04-03 17:41:35 -Mapped "{[/error],produces=[text/html]}" onto public org.springframework.web.servlet.ModelAndView com.bootdo.common.exception.MainsiteErrorController.errorHtml(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-04-03 17:41:35 -Mapped "{[/elec/elec/add],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecController.add()
2019-04-03 17:41:35 -Mapped "{[/elec/elec/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.remove(java.lang.Long)
2019-04-03 17:41:35 -Mapped "{[/elec/elec/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.remove(java.lang.Long[])
2019-04-03 17:41:35 -Mapped "{[/elec/elec/update],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.update(com.bootdo.elec.domain.ElecDO)
2019-04-03 17:41:35 -Mapped "{[/elec/elec/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.elec.controller.ElecController.list(java.util.Map<java.lang.String, java.lang.Object>,com.bootdo.elec.domain.ElecDO)
2019-04-03 17:41:35 -Mapped "{[/elec/elec/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.save(com.bootdo.elec.domain.ElecDO)
2019-04-03 17:41:35 -Mapped "{[/elec/elec/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 17:41:35 -Mapped "{[/elec/elec/exprotElec],methods=[GET]}" onto public void com.bootdo.elec.controller.ElecController.exprotExcel(com.bootdo.elec.vo.ElecVo,javax.servlet.http.HttpServletResponse)
2019-04-03 17:41:35 -Mapped "{[/elec/elec],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecController.Elec()
2019-04-03 17:41:35 -Mapped "{[/elec/elecInto/importElecIntoExcel],methods=[POST]}" onto public java.util.Map<java.lang.String, java.lang.Object> com.bootdo.elec.controller.ElecIntoController.importElecIntoExcel(org.springframework.web.multipart.MultipartFile,com.bootdo.elec.vo.ElecVo) throws java.lang.Exception
2019-04-03 17:41:35 -Mapped "{[/elec/elecInto/exprotElecIntoExcel],methods=[GET]}" onto public void com.bootdo.elec.controller.ElecIntoController.exprotExcel(com.bootdo.elec.vo.ElecVo,javax.servlet.http.HttpServletResponse)
2019-04-03 17:41:35 -Mapped "{[/elec/elecInto],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecIntoController.ElecInto()
2019-04-03 17:41:35 -Mapped "{[/elec/elecPrice/add],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecPriceController.add()
2019-04-03 17:41:35 -Mapped "{[/elec/elecPrice/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecPriceController.remove(java.lang.Long)
2019-04-03 17:41:35 -Mapped "{[/elec/elecPrice/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecPriceController.remove(java.lang.Long[])
2019-04-03 17:41:35 -Mapped "{[/elec/elecPrice/update]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecPriceController.update(com.bootdo.elec.domain.ElecPriceDO)
2019-04-03 17:41:35 -Mapped "{[/elec/elecPrice/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.elec.controller.ElecPriceController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 17:41:35 -Mapped "{[/elec/elecPrice/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecPriceController.save(com.bootdo.elec.domain.ElecPriceDO,com.bootdo.elec.domain.ElecDO)
2019-04-03 17:41:35 -Mapped "{[/elec/elecPrice/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecPriceController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 17:41:35 -Mapped "{[/elec/elecPrice],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecPriceController.ElecPrice()
2019-04-03 17:41:35 -Mapped "{[/elec/elecUpLoad],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecUpLoadController.Elec()
2019-04-03 17:41:35 -Mapped "{[/elec/elecUpLoad/importElecExcel],methods=[POST]}" onto public java.util.Map<java.lang.String, java.lang.Object> com.bootdo.elec.controller.ElecUpLoadController.importElecExcel(org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpServletRequest) throws java.lang.Exception
2019-04-03 17:41:35 -Mapped "{[/heat/heat/add],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatController.add()
2019-04-03 17:41:35 -Mapped "{[/heat/heat/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatController.remove(java.lang.Integer)
2019-04-03 17:41:35 -Mapped "{[/heat/heat/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatController.remove(java.lang.Integer[])
2019-04-03 17:41:35 -Mapped "{[/heat/heat/update]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatController.update(com.bootdo.heat.domain.HeatDO)
2019-04-03 17:41:35 -Mapped "{[/heat/heat/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.heat.controller.HeatController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 17:41:35 -Mapped "{[/heat/heat/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatController.save(com.bootdo.heat.domain.HeatDO)
2019-04-03 17:41:35 -Mapped "{[/heat/heat/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatController.edit(java.lang.Integer,org.springframework.ui.Model)
2019-04-03 17:41:35 -Mapped "{[/heat/heat/exprotHeat],methods=[GET]}" onto public void com.bootdo.heat.controller.HeatController.exprotExcel(com.bootdo.heat.vo.HeatVo,javax.servlet.http.HttpServletResponse)
2019-04-03 17:41:35 -Mapped "{[/heat/heat],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatController.Heat()
2019-04-03 17:41:35 -Mapped "{[/heat/heatInto/exprotHeatIntoExcel],methods=[GET]}" onto public void com.bootdo.heat.controller.HeatIntoController.exprotExcel(com.bootdo.heat.vo.HeatVo,javax.servlet.http.HttpServletResponse)
2019-04-03 17:41:35 -Mapped "{[/heat/heatInto],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatIntoController.HeatInto()
2019-04-03 17:41:35 -Mapped "{[/heat/heatPrice/add],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatPriceController.add()
2019-04-03 17:41:35 -Mapped "{[/heat/heatPrice/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatPriceController.remove(java.lang.Long)
2019-04-03 17:41:35 -Mapped "{[/heat/heatPrice/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatPriceController.remove(java.lang.Long[])
2019-04-03 17:41:35 -Mapped "{[/heat/heatPrice/update]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatPriceController.update(com.bootdo.heat.domain.HeatPriceDO)
2019-04-03 17:41:35 -Mapped "{[/heat/heatPrice/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.heat.controller.HeatPriceController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 17:41:35 -Mapped "{[/heat/heatPrice/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatPriceController.save(com.bootdo.heat.domain.HeatPriceDO)
2019-04-03 17:41:35 -Mapped "{[/heat/heatPrice/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatPriceController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 17:41:35 -Mapped "{[/heat/heatPrice],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatPriceController.HeatPrice()
2019-04-03 17:41:35 -Mapped "{[/heat/heatUpLoad/exprotHeatExcel],methods=[GET]}" onto public void com.bootdo.heat.controller.HeatUpLoadController.exprotHeatExcel(com.bootdo.heat.vo.HeatVo,javax.servlet.http.HttpServletResponse)
2019-04-03 17:41:35 -Mapped "{[/heat/heatUpLoad],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatUpLoadController.HeatUpLoad()
2019-04-03 17:41:35 -Mapped "{[/heat/heatUpLoad/createHeatExcel],methods=[POST]}" onto public java.lang.String com.bootdo.heat.controller.HeatUpLoadController.createHeatExcel(com.bootdo.heat.domain.HeatDO) throws java.lang.Exception
2019-04-03 17:41:35 -Mapped "{[/heat/heatUpLoad/importHeatExcel]}" onto public java.lang.String com.bootdo.heat.controller.HeatUpLoadController.importHeatExcel(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)
2019-04-03 17:41:35 -Mapped "{[/moneyList/moneyList/queryAllUserName],methods=[POST]}" onto public java.util.List<com.bootdo.moneyList.damain.MoneyListDO> com.bootdo.moneyList.controller.MoneyListController.getAllUserName(com.bootdo.moneyList.damain.MoneyListDO)
2019-04-03 17:41:35 -Mapped "{[/moneyList/moneyList],methods=[GET]}" onto java.lang.String com.bootdo.moneyList.controller.MoneyListController.MoneyList()
2019-04-03 17:41:35 -Mapped "{[/moneyList/moneyList/updateMoney],methods=[POST]}" onto public java.util.List<com.bootdo.moneyList.damain.MoneyListDO> com.bootdo.moneyList.controller.MoneyListController.updateMoney(com.bootdo.moneyList.damain.MoneyListDO)
2019-04-03 17:41:35 -Mapped "{[/moneyList/moneyList/queryAllUser],methods=[POST]}" onto public java.util.List<com.bootdo.moneyList.damain.MoneyListDO> com.bootdo.moneyList.controller.MoneyListController.queryAllUser(com.bootdo.moneyList.damain.MoneyListDO)
2019-04-03 17:41:35 -Mapped "{[/moneyLog/elecLog/add],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.ElecLogController.add()
2019-04-03 17:41:35 -Mapped "{[/moneyLog/elecLog/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.ElecLogController.remove(java.lang.Long)
2019-04-03 17:41:35 -Mapped "{[/moneyLog/elecLog/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.ElecLogController.remove(java.lang.Long[])
2019-04-03 17:41:35 -Mapped "{[/moneyLog/elecLog/update]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.ElecLogController.update(com.bootdo.moneyLog.domain.ElecLogDO)
2019-04-03 17:41:35 -Mapped "{[/moneyLog/elecLog/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.moneyLog.controller.ElecLogController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 17:41:35 -Mapped "{[/moneyLog/elecLog/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.ElecLogController.save(com.bootdo.moneyLog.domain.ElecLogDO)
2019-04-03 17:41:35 -Mapped "{[/moneyLog/elecLog/exprotElecLog],methods=[GET]}" onto public void com.bootdo.moneyLog.controller.ElecLogController.exprotElecLog(com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-03 17:41:35 -Mapped "{[/moneyLog/elecLog],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.ElecLogController.moneyLog()
2019-04-03 17:41:35 -Mapped "{[/moneyLog/elecLog/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.ElecLogController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 17:41:35 -Mapped "{[/moneyLog/heatLog/add],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.HeatLogController.add()
2019-04-03 17:41:35 -Mapped "{[/moneyLog/heatLog/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.HeatLogController.remove(java.lang.Long)
2019-04-03 17:41:35 -Mapped "{[/moneyLog/heatLog/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.HeatLogController.remove(java.lang.Long[])
2019-04-03 17:41:35 -Mapped "{[/moneyLog/heatLog/update]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.HeatLogController.update(com.bootdo.moneyLog.domain.HeatLogDO)
2019-04-03 17:41:35 -Mapped "{[/moneyLog/heatLog/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.moneyLog.controller.HeatLogController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 17:41:35 -Mapped "{[/moneyLog/heatLog/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.HeatLogController.save(com.bootdo.moneyLog.domain.HeatLogDO)
2019-04-03 17:41:35 -Mapped "{[/moneyLog/heatLog],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.HeatLogController.HeatLog()
2019-04-03 17:41:35 -Mapped "{[/moneyLog/heatLog/exprotHeatLog],methods=[GET]}" onto public void com.bootdo.moneyLog.controller.HeatLogController.exprotHeatLog(com.bootdo.moneyLog.vo.HeatLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-03 17:41:35 -Mapped "{[/moneyLog/heatLog/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.HeatLogController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 17:41:35 -Mapped "{[/moneyLog/waterLog/add],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.WaterLogController.add()
2019-04-03 17:41:35 -Mapped "{[/moneyLog/waterLog/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.WaterLogController.remove(java.lang.Long)
2019-04-03 17:41:35 -Mapped "{[/moneyLog/waterLog/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.WaterLogController.remove(java.lang.Long[])
2019-04-03 17:41:35 -Mapped "{[/moneyLog/waterLog/update]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.WaterLogController.update(com.bootdo.moneyLog.domain.WaterLogDO)
2019-04-03 17:41:35 -Mapped "{[/moneyLog/waterLog/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.moneyLog.controller.WaterLogController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 17:41:35 -Mapped "{[/moneyLog/waterLog/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.WaterLogController.save(com.bootdo.moneyLog.domain.WaterLogDO)
2019-04-03 17:41:35 -Mapped "{[/moneyLog/waterLog],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.WaterLogController.WaterLog()
2019-04-03 17:41:35 -Mapped "{[/moneyLog/waterLog/exprotWaterLog],methods=[GET]}" onto public void com.bootdo.moneyLog.controller.WaterLogController.exprotWaterLog(com.bootdo.moneyLog.vo.WaterLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-03 17:41:35 -Mapped "{[/moneyLog/waterLog/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.WaterLogController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 17:41:35 -Mapped "{[/oa/notify/add],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.add()
2019-04-03 17:41:35 -Mapped "{[/oa/notify/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.remove(java.lang.Long)
2019-04-03 17:41:35 -Mapped "{[/oa/notify/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.remove(java.lang.Long[])
2019-04-03 17:41:35 -Mapped "{[/oa/notify/update]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.update(com.bootdo.oa.domain.NotifyDO)
2019-04-03 17:41:35 -Mapped "{[/oa/notify/read/{id}],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.read(java.lang.Long,org.springframework.ui.Model)
2019-04-03 17:41:35 -Mapped "{[/oa/notify/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.oa.controller.NotifyController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 17:41:35 -Mapped "{[/oa/notify/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.save(com.bootdo.oa.domain.NotifyDO)
2019-04-03 17:41:35 -Mapped "{[/oa/notify/message],methods=[GET]}" onto com.bootdo.common.utils.PageUtils com.bootdo.oa.controller.NotifyController.message()
2019-04-03 17:41:35 -Mapped "{[/oa/notify/selfList],methods=[GET]}" onto com.bootdo.common.utils.PageUtils com.bootdo.oa.controller.NotifyController.selfList(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 17:41:35 -Mapped "{[/oa/notify],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.oaNotify()
2019-04-03 17:41:35 -Mapped "{[/oa/notify/selfNotify],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.selefNotify()
2019-04-03 17:41:35 -Mapped "{[/oa/notify/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 17:41:35 -Mapped "{[/print/print/add],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.add()
2019-04-03 17:41:35 -Mapped "{[/print/print/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.print.controller.PrintController.remove(java.lang.Long)
2019-04-03 17:41:35 -Mapped "{[/print/print/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.print.controller.PrintController.remove(java.lang.Long[])
2019-04-03 17:41:35 -Mapped "{[/print/print/update]}" onto public com.bootdo.common.utils.R com.bootdo.print.controller.PrintController.update(com.bootdo.print.domain.PrintDO)
2019-04-03 17:41:35 -Mapped "{[/print/print/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.print.controller.PrintController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 17:41:35 -Mapped "{[/print/print/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.print.controller.PrintController.save(java.lang.String,com.bootdo.print.domain.PrintDO)
2019-04-03 17:41:35 -Mapped "{[/print/print/printEdit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.printEdit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 17:41:35 -Mapped "{[/print/print],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.Print()
2019-04-03 17:41:35 -Mapped "{[/print/print/exprotPrint],methods=[GET]}" onto public void com.bootdo.print.controller.PrintController.exprotPrint(com.bootdo.print.vo.PrintVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-03 17:41:35 -Mapped "{[/print/print/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 17:41:35 -Mapped "{[/system/sysDept/add/{pId}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.add(java.lang.Long,org.springframework.ui.Model)
2019-04-03 17:41:35 -Mapped "{[/system/sysDept/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.remove(java.lang.Long)
2019-04-03 17:41:35 -Mapped "{[/system/sysDept/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.remove(java.lang.Long[])
2019-04-03 17:41:35 -Mapped "{[/system/sysDept/update]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.update(com.bootdo.system.domain.DeptDO)
2019-04-03 17:41:35 -Mapped "{[/system/sysDept/list],methods=[GET]}" onto public java.util.List<com.bootdo.system.domain.DeptDO> com.bootdo.system.controller.DeptController.list()
2019-04-03 17:41:35 -Mapped "{[/system/sysDept/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.save(com.bootdo.system.domain.DeptDO)
2019-04-03 17:41:35 -Mapped "{[/system/sysDept/tree],methods=[GET]}" onto public com.bootdo.common.domain.Tree<com.bootdo.system.domain.DeptDO> com.bootdo.system.controller.DeptController.tree()
2019-04-03 17:41:35 -Mapped "{[/system/sysDept/treeView],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.treeView()
2019-04-03 17:41:35 -Mapped "{[/system/sysDept],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.dept()
2019-04-03 17:41:35 -Mapped "{[/system/sysDept/edit/{deptId}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 17:41:35 -Mapped "{[/index],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.index(org.springframework.ui.Model)
2019-04-03 17:41:35 -Mapped "{[/main],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.main()
2019-04-03 17:41:35 -Mapped "{[/logout],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.logout()
2019-04-03 17:41:35 -Mapped "{[/ || ],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.welcome(org.springframework.ui.Model)
2019-04-03 17:41:35 -Mapped "{[/getVerify],methods=[GET]}" onto public void com.bootdo.system.controller.LoginController.getVerify(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-04-03 17:41:35 -Mapped "{[/login],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.LoginController.ajaxLogin(java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest)
2019-04-03 17:41:35 -Mapped "{[/login],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.login(org.springframework.ui.Model)
2019-04-03 17:41:35 -Mapped "{[/sys/menu/add/{pId}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.MenuController.add(org.springframework.ui.Model,java.lang.Long)
2019-04-03 17:41:35 -Mapped "{[/sys/menu/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.MenuController.remove(java.lang.Long)
2019-04-03 17:41:35 -Mapped "{[/sys/menu/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.MenuController.update(com.bootdo.system.domain.MenuDO)
2019-04-03 17:41:35 -Mapped "{[/sys/menu/list]}" onto java.util.List<com.bootdo.system.domain.MenuDO> com.bootdo.system.controller.MenuController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 17:41:35 -Mapped "{[/sys/menu/save],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.MenuController.save(com.bootdo.system.domain.MenuDO)
2019-04-03 17:41:35 -Mapped "{[/sys/menu/tree/{roleId}],methods=[GET]}" onto com.bootdo.common.domain.Tree<com.bootdo.system.domain.MenuDO> com.bootdo.system.controller.MenuController.tree(java.lang.Long)
2019-04-03 17:41:35 -Mapped "{[/sys/menu/tree],methods=[GET]}" onto com.bootdo.common.domain.Tree<com.bootdo.system.domain.MenuDO> com.bootdo.system.controller.MenuController.tree()
2019-04-03 17:41:35 -Mapped "{[/sys/menu],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.MenuController.menu(org.springframework.ui.Model)
2019-04-03 17:41:35 -Mapped "{[/sys/menu/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.MenuController.edit(org.springframework.ui.Model,java.lang.Long)
2019-04-03 17:41:35 -Mapped "{[/sys/role/add],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.RoleController.add()
2019-04-03 17:41:35 -Mapped "{[/sys/role/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.update(com.bootdo.system.domain.RoleDO)
2019-04-03 17:41:35 -Mapped "{[/sys/role/list],methods=[GET]}" onto java.util.List<com.bootdo.system.domain.RoleDO> com.bootdo.system.controller.RoleController.list()
2019-04-03 17:41:35 -Mapped "{[/sys/role/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.save(java.lang.Long)
2019-04-03 17:41:35 -Mapped "{[/sys/role/save],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.save(com.bootdo.system.domain.RoleDO)
2019-04-03 17:41:35 -Mapped "{[/sys/role/batchRemove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.batchRemove(java.lang.Long[])
2019-04-03 17:41:35 -Mapped "{[/sys/role],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.RoleController.role()
2019-04-03 17:41:35 -Mapped "{[/sys/role/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.RoleController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 17:41:35 -Mapped "{[/sys/online/list]}" onto public java.util.List<com.bootdo.system.domain.UserOnline> com.bootdo.system.controller.SessionController.list()
2019-04-03 17:41:35 -Mapped "{[/sys/online],methods=[GET]}" onto public java.lang.String com.bootdo.system.controller.SessionController.online()
2019-04-03 17:41:35 -Mapped "{[/sys/online/forceLogout/{sessionId}]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.SessionController.forceLogout(java.lang.String,org.springframework.web.servlet.mvc.support.RedirectAttributes)
2019-04-03 17:41:35 -Mapped "{[/sys/online/sessionList]}" onto public java.util.Collection<org.apache.shiro.session.Session> com.bootdo.system.controller.SessionController.sessionList()
2019-04-03 17:41:35 -Mapped "{[/sys/user/exit],methods=[POST]}" onto boolean com.bootdo.system.controller.UserController.exit(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 17:41:35 -Mapped "{[/sys/user/add],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.add(org.springframework.ui.Model)
2019-04-03 17:41:35 -Mapped "{[/sys/user/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.remove(java.lang.Long)
2019-04-03 17:41:35 -Mapped "{[/sys/user/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.update(com.bootdo.system.domain.UserDO)
2019-04-03 17:41:35 -Mapped "{[/sys/user/list],methods=[GET]}" onto com.bootdo.common.utils.PageUtils com.bootdo.system.controller.UserController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 17:41:35 -Mapped "{[/sys/user/save],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.save(com.bootdo.system.domain.UserDO)
2019-04-03 17:41:35 -Mapped "{[/sys/user/batchRemove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.batchRemove(java.lang.Long[])
2019-04-03 17:41:35 -Mapped "{[/sys/user/tree],methods=[GET]}" onto public com.bootdo.common.domain.Tree<com.bootdo.system.domain.DeptDO> com.bootdo.system.controller.UserController.tree()
2019-04-03 17:41:35 -Mapped "{[/sys/user],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.user(org.springframework.ui.Model)
2019-04-03 17:41:35 -Mapped "{[/sys/user/treeView],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.treeView()
2019-04-03 17:41:35 -Mapped "{[/sys/user/updatePeronal],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.updatePeronal(com.bootdo.system.domain.UserDO)
2019-04-03 17:41:35 -Mapped "{[/sys/user/adminResetPwd],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.adminResetPwd(com.bootdo.system.vo.UserVO)
2019-04-03 17:41:35 -Mapped "{[/sys/user/uploadImg],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.uploadImg(org.springframework.web.multipart.MultipartFile,java.lang.String,javax.servlet.http.HttpServletRequest)
2019-04-03 17:41:35 -Mapped "{[/sys/user/personal],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.personal(org.springframework.ui.Model)
2019-04-03 17:41:35 -Mapped "{[/sys/user/resetPwd],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.resetPwd(com.bootdo.system.vo.UserVO)
2019-04-03 17:41:35 -Mapped "{[/sys/user/resetPwd/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.resetPwd(java.lang.Long,org.springframework.ui.Model)
2019-04-03 17:41:35 -Mapped "{[/sys/user/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.edit(org.springframework.ui.Model,java.lang.Long)
2019-04-03 17:41:35 -Mapped "{[/file/downImport/{importType}],methods=[GET]}" onto public void com.bootdo.temple.controller.TempletController.downImport(javax.servlet.http.HttpServletResponse,java.lang.String)
2019-04-03 17:41:35 -Mapped "{[/water/water/add],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterController.add()
2019-04-03 17:41:35 -Mapped "{[/water/water/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterController.remove(java.lang.Long)
2019-04-03 17:41:35 -Mapped "{[/water/water/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterController.remove(java.lang.Long[])
2019-04-03 17:41:35 -Mapped "{[/water/water/update]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterController.update(com.bootdo.water.domain.WaterDO)
2019-04-03 17:41:35 -Mapped "{[/water/water/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.water.controller.WaterController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 17:41:35 -Mapped "{[/water/water/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterController.save(com.bootdo.water.domain.WaterDO)
2019-04-03 17:41:35 -Mapped "{[/water/water],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterController.Water()
2019-04-03 17:41:35 -Mapped "{[/water/water/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 17:41:35 -Mapped "{[/water/water/exprotWater],methods=[GET]}" onto public void com.bootdo.water.controller.WaterController.exprotExcel(com.bootdo.water.vo.WaterVo,javax.servlet.http.HttpServletResponse)
2019-04-03 17:41:35 -Mapped "{[/water/waterInto],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterIntoController.WaterInto()
2019-04-03 17:41:35 -Mapped "{[/water/waterInto/exprotWaterIntoExcel],methods=[GET]}" onto public void com.bootdo.water.controller.WaterIntoController.exprotExcel(com.bootdo.water.vo.WaterVo,javax.servlet.http.HttpServletResponse)
2019-04-03 17:41:35 -Mapped "{[/water/waterPrice/add],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterPriceController.add()
2019-04-03 17:41:35 -Mapped "{[/water/waterPrice/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterPriceController.remove(java.lang.Long)
2019-04-03 17:41:35 -Mapped "{[/water/waterPrice/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterPriceController.remove(java.lang.Long[])
2019-04-03 17:41:35 -Mapped "{[/water/waterPrice/update]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterPriceController.update(com.bootdo.water.domain.WaterPriceDO)
2019-04-03 17:41:35 -Mapped "{[/water/waterPrice/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.water.controller.WaterPriceController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 17:41:35 -Mapped "{[/water/waterPrice/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterPriceController.save(com.bootdo.water.domain.WaterPriceDO)
2019-04-03 17:41:35 -Mapped "{[/water/waterPrice],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterPriceController.WaterPrice()
2019-04-03 17:41:35 -Mapped "{[/water/waterPrice/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterPriceController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 17:41:35 -Mapped "{[/water/waterUpLoad/exprotWaterExcel],methods=[GET]}" onto public void com.bootdo.water.controller.WaterUpLoadController.exprotWaterExcel(com.bootdo.water.vo.WaterVo,javax.servlet.http.HttpServletResponse)
2019-04-03 17:41:35 -Mapped "{[/water/waterUpLoad/importWaterExcel]}" onto public java.lang.String com.bootdo.water.controller.WaterUpLoadController.importWaterExcel(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)
2019-04-03 17:41:35 -Mapped "{[/water/waterUpLoad/createWaterExcel],methods=[POST]}" onto public java.lang.String com.bootdo.water.controller.WaterUpLoadController.createWaterExcel(com.bootdo.water.domain.WaterDO) throws java.lang.Exception
2019-04-03 17:41:35 -Mapped "{[/water/waterUpLoad],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterUpLoadController.WaterUpLoad()
2019-04-03 17:41:35 -Mapped "{[/v2/api-docs],methods=[GET],produces=[application/json || application/hal+json]}" onto public org.springframework.http.ResponseEntity<springfox.documentation.spring.web.json.Json> springfox.documentation.swagger2.web.Swagger2Controller.getDocumentation(java.lang.String,javax.servlet.http.HttpServletRequest)
2019-04-03 17:41:35 -Mapped "{[/swagger-resources]}" onto org.springframework.http.ResponseEntity<java.util.List<springfox.documentation.swagger.web.SwaggerResource>> springfox.documentation.swagger.web.ApiResourceController.swaggerResources()
2019-04-03 17:41:36 -Mapped "{[/swagger-resources/configuration/ui]}" onto org.springframework.http.ResponseEntity<springfox.documentation.swagger.web.UiConfiguration> springfox.documentation.swagger.web.ApiResourceController.uiConfiguration()
2019-04-03 17:41:36 -Mapped "{[/swagger-resources/configuration/security]}" onto org.springframework.http.ResponseEntity<springfox.documentation.swagger.web.SecurityConfiguration> springfox.documentation.swagger.web.ApiResourceController.securityConfiguration()
2019-04-03 17:41:36 -Initializing ExecutorService  'messageBrokerTaskScheduler'
2019-04-03 17:41:36 -Mapped URL path [/endpointChat/**] onto handler of type [class org.springframework.web.socket.sockjs.support.SockJsHttpRequestHandler]
2019-04-03 17:41:36 -Initializing ExecutorService  'brokerChannelExecutor'
2019-04-03 17:41:37 -Mapped URL path [/**/favicon.ico] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-04-03 17:41:37 -Looking for @ControllerAdvice: org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@a38c7fe: startup date [Wed Apr 03 17:41:17 CST 2019]; root of context hierarchy
2019-04-03 17:41:37 -Mapped URL path [/webjars/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-04-03 17:41:37 -Mapped URL path [/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-04-03 17:41:37 -Mapped URL path [/files/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-04-03 17:41:37 -Detected @ExceptionHandler methods in BDExceptionHandler
2019-04-03 17:41:38 -[THYMELEAF][main] Template Mode 'LEGACYHTML5' is deprecated. Using Template Mode 'HTML' instead.
2019-04-03 17:41:40 -Registering beans for JMX exposure on startup
2019-04-03 17:41:40 -Bean with name 'dataSource' has been autodetected for JMX exposure
2019-04-03 17:41:40 -Located MBean 'dataSource': registering with JMX server as MBean [com.alibaba.druid.pool:name=dataSource,type=DruidDataSource]
2019-04-03 17:41:40 -Starting beans in phase 2147483647
2019-04-03 17:41:40 -Context refreshed
2019-04-03 17:41:40 -Found 1 custom documentation plugin(s)
2019-04-03 17:41:40 -Scanning for api listing references
2019-04-03 17:41:41 -Generating unique operation named: exprotElecLogUsingGET_1
2019-04-03 17:41:41 -Generating unique operation named: getCountDUsingPOST_1
2019-04-03 17:41:41 -Generating unique operation named: exprotElecLogUsingGET_2
2019-04-03 17:41:41 -Generating unique operation named: getCountDUsingPOST_2
2019-04-03 17:41:41 -Generating unique operation named: exprotElecLogUsingGET_3
2019-04-03 17:41:41 -Generating unique operation named: getCountDUsingPOST_3
2019-04-03 17:41:41 -Generating unique operation named: removeUsingPOST_1
2019-04-03 17:41:41 -Generating unique operation named: addUsingGET_1
2019-04-03 17:41:41 -Generating unique operation named: editUsingGET_1
2019-04-03 17:41:41 -Generating unique operation named: listUsingGET_1
2019-04-03 17:41:41 -Generating unique operation named: removeUsingPOST_2
2019-04-03 17:41:41 -Generating unique operation named: removeUsingPOST_3
2019-04-03 17:41:41 -Generating unique operation named: saveUsingPOST_1
2019-04-03 17:41:41 -Generating unique operation named: updateUsingGET_1
2019-04-03 17:41:41 -Generating unique operation named: updateUsingHEAD_1
2019-04-03 17:41:41 -Generating unique operation named: updateUsingPOST_1
2019-04-03 17:41:41 -Generating unique operation named: updateUsingPUT_1
2019-04-03 17:41:41 -Generating unique operation named: updateUsingPATCH_1
2019-04-03 17:41:41 -Generating unique operation named: updateUsingDELETE_1
2019-04-03 17:41:41 -Generating unique operation named: updateUsingOPTIONS_1
2019-04-03 17:41:41 -Generating unique operation named: updateUsingTRACE_1
2019-04-03 17:41:41 -Generating unique operation named: addUsingGET_2
2019-04-03 17:41:41 -Generating unique operation named: editUsingGET_2
2019-04-03 17:41:41 -Generating unique operation named: listUsingGET_2
2019-04-03 17:41:41 -Generating unique operation named: removeUsingPOST_4
2019-04-03 17:41:41 -Generating unique operation named: removeUsingPOST_5
2019-04-03 17:41:41 -Generating unique operation named: saveUsingPOST_2
2019-04-03 17:41:41 -Generating unique operation named: updateUsingPOST_2
2019-04-03 17:41:41 -Generating unique operation named: exprotExcelUsingGET_1
2019-04-03 17:41:41 -Generating unique operation named: addUsingGET_3
2019-04-03 17:41:41 -Generating unique operation named: editUsingGET_3
2019-04-03 17:41:41 -Generating unique operation named: exprotElecLogUsingGET_4
2019-04-03 17:41:41 -Generating unique operation named: listUsingGET_3
2019-04-03 17:41:41 -Generating unique operation named: removeUsingPOST_6
2019-04-03 17:41:41 -Generating unique operation named: removeUsingPOST_7
2019-04-03 17:41:41 -Generating unique operation named: saveUsingPOST_3
2019-04-03 17:41:41 -Generating unique operation named: updateUsingGET_2
2019-04-03 17:41:41 -Generating unique operation named: updateUsingHEAD_2
2019-04-03 17:41:41 -Generating unique operation named: updateUsingPOST_3
2019-04-03 17:41:41 -Generating unique operation named: updateUsingPUT_2
2019-04-03 17:41:41 -Generating unique operation named: updateUsingPATCH_2
2019-04-03 17:41:41 -Generating unique operation named: updateUsingDELETE_2
2019-04-03 17:41:41 -Generating unique operation named: updateUsingOPTIONS_2
2019-04-03 17:41:41 -Generating unique operation named: updateUsingTRACE_2
2019-04-03 17:41:41 -Generating unique operation named: addUsingGET_4
2019-04-03 17:41:41 -Generating unique operation named: editUsingGET_4
2019-04-03 17:41:41 -Generating unique operation named: listUsingGET_4
2019-04-03 17:41:41 -Generating unique operation named: removeUsingPOST_8
2019-04-03 17:41:41 -Generating unique operation named: removeUsingPOST_9
2019-04-03 17:41:41 -Generating unique operation named: saveUsingPOST_4
2019-04-03 17:41:41 -Generating unique operation named: updateUsingGET_3
2019-04-03 17:41:41 -Generating unique operation named: updateUsingHEAD_3
2019-04-03 17:41:41 -Generating unique operation named: updateUsingPOST_4
2019-04-03 17:41:41 -Generating unique operation named: updateUsingPUT_3
2019-04-03 17:41:41 -Generating unique operation named: updateUsingPATCH_3
2019-04-03 17:41:41 -Generating unique operation named: updateUsingDELETE_3
2019-04-03 17:41:41 -Generating unique operation named: updateUsingOPTIONS_3
2019-04-03 17:41:42 -Generating unique operation named: updateUsingTRACE_3
2019-04-03 17:41:42 -Generating unique operation named: ElecUsingGET_1
2019-04-03 17:41:42 -Generating unique operation named: addUsingGET_5
2019-04-03 17:41:42 -Generating unique operation named: editUsingGET_5
2019-04-03 17:41:42 -Generating unique operation named: listUsingGET_5
2019-04-03 17:41:42 -Generating unique operation named: removeUsingPOST_10
2019-04-03 17:41:42 -Generating unique operation named: removeUsingPOST_11
2019-04-03 17:41:42 -Generating unique operation named: saveUsingPOST_5
2019-04-03 17:41:42 -Generating unique operation named: updateUsingGET_4
2019-04-03 17:41:42 -Generating unique operation named: updateUsingHEAD_4
2019-04-03 17:41:42 -Generating unique operation named: updateUsingPOST_5
2019-04-03 17:41:42 -Generating unique operation named: updateUsingPUT_4
2019-04-03 17:41:42 -Generating unique operation named: updateUsingPATCH_4
2019-04-03 17:41:42 -Generating unique operation named: updateUsingDELETE_4
2019-04-03 17:41:42 -Generating unique operation named: updateUsingOPTIONS_4
2019-04-03 17:41:42 -Generating unique operation named: updateUsingTRACE_4
2019-04-03 17:41:42 -Generating unique operation named: editUsingGET_6
2019-04-03 17:41:42 -Generating unique operation named: listUsingGET_6
2019-04-03 17:41:42 -Generating unique operation named: updateUsingPOST_6
2019-04-03 17:41:42 -Generating unique operation named: addUsingGET_6
2019-04-03 17:41:42 -Generating unique operation named: editUsingGET_7
2019-04-03 17:41:42 -Generating unique operation named: exprotExcelUsingGET_2
2019-04-03 17:41:42 -Generating unique operation named: listUsingGET_7
2019-04-03 17:41:42 -Generating unique operation named: removeUsingPOST_12
2019-04-03 17:41:42 -Generating unique operation named: removeUsingPOST_13
2019-04-03 17:41:42 -Generating unique operation named: saveUsingPOST_6
2019-04-03 17:41:42 -Generating unique operation named: updateUsingGET_5
2019-04-03 17:41:42 -Generating unique operation named: updateUsingHEAD_5
2019-04-03 17:41:42 -Generating unique operation named: updateUsingPOST_7
2019-04-03 17:41:42 -Generating unique operation named: updateUsingPUT_5
2019-04-03 17:41:42 -Generating unique operation named: updateUsingPATCH_5
2019-04-03 17:41:42 -Generating unique operation named: updateUsingDELETE_5
2019-04-03 17:41:42 -Generating unique operation named: updateUsingOPTIONS_5
2019-04-03 17:41:42 -Generating unique operation named: updateUsingTRACE_5
2019-04-03 17:41:42 -Generating unique operation named: exprotExcelUsingGET_3
2019-04-03 17:41:42 -Generating unique operation named: addUsingGET_7
2019-04-03 17:41:42 -Generating unique operation named: editUsingGET_8
2019-04-03 17:41:42 -Generating unique operation named: listUsingGET_8
2019-04-03 17:41:42 -Generating unique operation named: removeUsingPOST_14
2019-04-03 17:41:42 -Generating unique operation named: removeUsingPOST_15
2019-04-03 17:41:42 -Generating unique operation named: saveUsingPOST_7
2019-04-03 17:41:42 -Generating unique operation named: updateUsingGET_6
2019-04-03 17:41:42 -Generating unique operation named: updateUsingHEAD_6
2019-04-03 17:41:42 -Generating unique operation named: updateUsingPOST_8
2019-04-03 17:41:42 -Generating unique operation named: updateUsingPUT_6
2019-04-03 17:41:42 -Generating unique operation named: updateUsingPATCH_6
2019-04-03 17:41:42 -Generating unique operation named: updateUsingDELETE_6
2019-04-03 17:41:42 -Generating unique operation named: updateUsingOPTIONS_6
2019-04-03 17:41:42 -Generating unique operation named: updateUsingTRACE_6
2019-04-03 17:41:42 -Generating unique operation named: addUsingGET_8
2019-04-03 17:41:42 -Generating unique operation named: editUsingGET_9
2019-04-03 17:41:42 -Generating unique operation named: listUsingGET_9
2019-04-03 17:41:42 -Generating unique operation named: removeUsingPOST_16
2019-04-03 17:41:42 -Generating unique operation named: removeUsingPOST_17
2019-04-03 17:41:42 -Generating unique operation named: saveUsingPOST_8
2019-04-03 17:41:42 -Generating unique operation named: updateUsingGET_7
2019-04-03 17:41:42 -Generating unique operation named: updateUsingHEAD_7
2019-04-03 17:41:42 -Generating unique operation named: updateUsingPOST_9
2019-04-03 17:41:42 -Generating unique operation named: updateUsingPUT_7
2019-04-03 17:41:42 -Generating unique operation named: updateUsingPATCH_7
2019-04-03 17:41:42 -Generating unique operation named: updateUsingDELETE_7
2019-04-03 17:41:42 -Generating unique operation named: updateUsingOPTIONS_7
2019-04-03 17:41:42 -Generating unique operation named: updateUsingTRACE_7
2019-04-03 17:41:42 -Generating unique operation named: addUsingGET_9
2019-04-03 17:41:42 -Generating unique operation named: editUsingGET_10
2019-04-03 17:41:42 -Generating unique operation named: infoUsingGET_1
2019-04-03 17:41:42 -Generating unique operation named: infoUsingHEAD_1
2019-04-03 17:41:42 -Generating unique operation named: infoUsingPOST_1
2019-04-03 17:41:42 -Generating unique operation named: infoUsingPUT_1
2019-04-03 17:41:42 -Generating unique operation named: infoUsingPATCH_1
2019-04-03 17:41:42 -Generating unique operation named: infoUsingDELETE_1
2019-04-03 17:41:42 -Generating unique operation named: infoUsingOPTIONS_1
2019-04-03 17:41:42 -Generating unique operation named: infoUsingTRACE_1
2019-04-03 17:41:42 -Generating unique operation named: listUsingGET_10
2019-04-03 17:41:42 -Generating unique operation named: removeUsingPOST_18
2019-04-03 17:41:42 -Generating unique operation named: removeUsingPOST_19
2019-04-03 17:41:42 -Generating unique operation named: saveUsingPOST_9
2019-04-03 17:41:42 -Generating unique operation named: updateUsingPOST_10
2019-04-03 17:41:42 -Generating unique operation named: listUsingGET_11
2019-04-03 17:41:42 -Generating unique operation named: removeUsingPOST_20
2019-04-03 17:41:42 -Generating unique operation named: welcomeUsingGET_1
2019-04-03 17:41:42 -Generating unique operation named: addUsingGET_10
2019-04-03 17:41:42 -Generating unique operation named: editUsingGET_11
2019-04-03 17:41:42 -Generating unique operation named: listUsingGET_12
2019-04-03 17:41:43 -Generating unique operation named: removeUsingPOST_21
2019-04-03 17:41:43 -Generating unique operation named: saveUsingPOST_10
2019-04-03 17:41:43 -Generating unique operation named: treeUsingGET_1
2019-04-03 17:41:43 -Generating unique operation named: treeUsingGET_2
2019-04-03 17:41:43 -Generating unique operation named: updateUsingPOST_11
2019-04-03 17:41:43 -Generating unique operation named: addUsingGET_11
2019-04-03 17:41:43 -Generating unique operation named: editUsingGET_12
2019-04-03 17:41:43 -Generating unique operation named: listUsingGET_13
2019-04-03 17:41:43 -Generating unique operation named: removeUsingPOST_22
2019-04-03 17:41:43 -Generating unique operation named: removeUsingPOST_23
2019-04-03 17:41:43 -Generating unique operation named: saveUsingPOST_11
2019-04-03 17:41:43 -Generating unique operation named: updateUsingGET_8
2019-04-03 17:41:43 -Generating unique operation named: updateUsingHEAD_8
2019-04-03 17:41:43 -Generating unique operation named: updateUsingPOST_12
2019-04-03 17:41:43 -Generating unique operation named: updateUsingPUT_8
2019-04-03 17:41:43 -Generating unique operation named: updateUsingPATCH_8
2019-04-03 17:41:43 -Generating unique operation named: updateUsingDELETE_8
2019-04-03 17:41:43 -Generating unique operation named: updateUsingOPTIONS_8
2019-04-03 17:41:43 -Generating unique operation named: updateUsingTRACE_8
2019-04-03 17:41:43 -Generating unique operation named: addUsingGET_12
2019-04-03 17:41:43 -Generating unique operation named: editUsingGET_13
2019-04-03 17:41:43 -Generating unique operation named: listUsingGET_14
2019-04-03 17:41:43 -Generating unique operation named: removeUsingPOST_24
2019-04-03 17:41:43 -Generating unique operation named: removeUsingPOST_25
2019-04-03 17:41:43 -Generating unique operation named: saveUsingPOST_12
2019-04-03 17:41:43 -Generating unique operation named: updateUsingGET_9
2019-04-03 17:41:43 -Generating unique operation named: updateUsingHEAD_9
2019-04-03 17:41:43 -Generating unique operation named: updateUsingPOST_13
2019-04-03 17:41:43 -Generating unique operation named: updateUsingPUT_9
2019-04-03 17:41:43 -Generating unique operation named: updateUsingPATCH_9
2019-04-03 17:41:43 -Generating unique operation named: updateUsingDELETE_9
2019-04-03 17:41:43 -Generating unique operation named: updateUsingOPTIONS_9
2019-04-03 17:41:43 -Generating unique operation named: updateUsingTRACE_9
2019-04-03 17:41:43 -Generating unique operation named: addUsingGET_13
2019-04-03 17:41:43 -Generating unique operation named: batchRemoveUsingPOST_1
2019-04-03 17:41:43 -Generating unique operation named: editUsingGET_14
2019-04-03 17:41:43 -Generating unique operation named: listUsingGET_15
2019-04-03 17:41:43 -Generating unique operation named: saveUsingPOST_13
2019-04-03 17:41:43 -Generating unique operation named: saveUsingPOST_14
2019-04-03 17:41:43 -Generating unique operation named: updateUsingPOST_14
2019-04-03 17:41:43 -Generating unique operation named: listUsingGET_16
2019-04-03 17:41:43 -Generating unique operation named: listUsingHEAD_1
2019-04-03 17:41:43 -Generating unique operation named: listUsingPOST_1
2019-04-03 17:41:43 -Generating unique operation named: listUsingPUT_1
2019-04-03 17:41:43 -Generating unique operation named: listUsingPATCH_1
2019-04-03 17:41:43 -Generating unique operation named: listUsingDELETE_1
2019-04-03 17:41:43 -Generating unique operation named: listUsingOPTIONS_1
2019-04-03 17:41:43 -Generating unique operation named: listUsingTRACE_1
2019-04-03 17:41:43 -Generating unique operation named: addUsingGET_14
2019-04-03 17:41:43 -Generating unique operation named: batchRemoveUsingPOST_2
2019-04-03 17:41:43 -Generating unique operation named: editUsingGET_15
2019-04-03 17:41:43 -Generating unique operation named: listUsingGET_17
2019-04-03 17:41:43 -Generating unique operation named: removeUsingPOST_26
2019-04-03 17:41:43 -Generating unique operation named: saveUsingPOST_15
2019-04-03 17:41:43 -Generating unique operation named: treeUsingGET_3
2019-04-03 17:41:43 -Generating unique operation named: treeViewUsingGET_1
2019-04-03 17:41:43 -Generating unique operation named: updateUsingPOST_15
2019-04-03 17:41:43 -Generating unique operation named: addUsingGET_15
2019-04-03 17:41:43 -Generating unique operation named: editUsingGET_16
2019-04-03 17:41:43 -Generating unique operation named: exprotExcelUsingGET_4
2019-04-03 17:41:43 -Generating unique operation named: listUsingGET_18
2019-04-03 17:41:43 -Generating unique operation named: removeUsingPOST_27
2019-04-03 17:41:43 -Generating unique operation named: removeUsingPOST_28
2019-04-03 17:41:43 -Generating unique operation named: saveUsingPOST_16
2019-04-03 17:41:43 -Generating unique operation named: updateUsingGET_10
2019-04-03 17:41:43 -Generating unique operation named: updateUsingHEAD_10
2019-04-03 17:41:43 -Generating unique operation named: updateUsingPOST_16
2019-04-03 17:41:43 -Generating unique operation named: updateUsingPUT_10
2019-04-03 17:41:43 -Generating unique operation named: updateUsingPATCH_10
2019-04-03 17:41:43 -Generating unique operation named: updateUsingDELETE_10
2019-04-03 17:41:43 -Generating unique operation named: updateUsingOPTIONS_10
2019-04-03 17:41:43 -Generating unique operation named: updateUsingTRACE_10
2019-04-03 17:41:43 -Generating unique operation named: exprotExcelUsingGET_5
2019-04-03 17:41:43 -Generating unique operation named: addUsingGET_16
2019-04-03 17:41:43 -Generating unique operation named: editUsingGET_17
2019-04-03 17:41:43 -Generating unique operation named: listUsingGET_19
2019-04-03 17:41:43 -Generating unique operation named: removeUsingPOST_29
2019-04-03 17:41:43 -Generating unique operation named: removeUsingPOST_30
2019-04-03 17:41:43 -Generating unique operation named: saveUsingPOST_17
2019-04-03 17:41:43 -Generating unique operation named: updateUsingGET_11
2019-04-03 17:41:43 -Generating unique operation named: updateUsingHEAD_11
2019-04-03 17:41:43 -Generating unique operation named: updateUsingPOST_17
2019-04-03 17:41:43 -Generating unique operation named: updateUsingPUT_11
2019-04-03 17:41:43 -Generating unique operation named: updateUsingPATCH_11
2019-04-03 17:41:43 -Generating unique operation named: updateUsingDELETE_11
2019-04-03 17:41:43 -Generating unique operation named: updateUsingOPTIONS_11
2019-04-03 17:41:43 -Generating unique operation named: updateUsingTRACE_11
2019-04-03 17:41:43 -Generating unique operation named: addUsingGET_17
2019-04-03 17:41:43 -Generating unique operation named: editUsingGET_18
2019-04-03 17:41:43 -Generating unique operation named: listUsingGET_20
2019-04-03 17:41:43 -Generating unique operation named: removeUsingPOST_31
2019-04-03 17:41:43 -Generating unique operation named: removeUsingPOST_32
2019-04-03 17:41:43 -Generating unique operation named: saveUsingPOST_18
2019-04-03 17:41:43 -Generating unique operation named: updateUsingGET_12
2019-04-03 17:41:43 -Generating unique operation named: updateUsingHEAD_12
2019-04-03 17:41:43 -Generating unique operation named: updateUsingPOST_18
2019-04-03 17:41:43 -Generating unique operation named: updateUsingPUT_12
2019-04-03 17:41:43 -Generating unique operation named: updateUsingPATCH_12
2019-04-03 17:41:43 -Generating unique operation named: updateUsingDELETE_12
2019-04-03 17:41:43 -Generating unique operation named: updateUsingOPTIONS_12
2019-04-03 17:41:43 -Generating unique operation named: updateUsingTRACE_12
2019-04-03 17:41:44 -Starting Quartz Scheduler now
2019-04-03 17:41:44 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED started.
2019-04-03 17:41:44 -Starting...
2019-04-03 17:41:44 -BrokerAvailabilityEvent[available=true, SimpleBrokerMessageHandler [DefaultSubscriptionRegistry[cache[0 destination(s)], registry[0 sessions]]]]
2019-04-03 17:41:44 -Started.
2019-04-03 17:41:44 -Starting ProtocolHandler ["http-nio-8081"]
2019-04-03 17:41:44 -Using a shared selector for servlet write/read
2019-04-03 17:41:44 -Tomcat started on port(s): 8081 (http) with context path ''
2019-04-03 17:41:44 -Started BootdoApplication in 28.144 seconds (JVM running for 29.317)
2019-04-03 17:41:44 -==>  Preparing: select `id`,`cron_expression`,`method_name`,`is_concurrent`,`description`,`update_by`,`bean_class`,`create_date`,`job_status`,`job_group`,`update_date`,`create_by`,`spring_bean`,`job_name` from sys_task order by id desc 
2019-04-03 17:41:47 -==> Parameters: 
2019-04-03 17:41:48 -<==      Total: 1
2019-04-03 17:42:20 -Initializing Spring FrameworkServlet 'dispatcherServlet'
2019-04-03 17:42:20 -FrameworkServlet 'dispatcherServlet': initialization started
2019-04-03 17:42:20 -FrameworkServlet 'dispatcherServlet': initialization completed in 89 ms
2019-04-03 17:42:20 -Enabling session validation scheduler...
2019-04-03 17:42:20 -请求地址 : http://localhost:8081/login;JSESSIONID=99404992-94e5-4ada-924d-d7148e99cc4d
2019-04-03 17:42:20 -HTTP METHOD : GET
2019-04-03 17:42:20 -CLASS_METHOD : com.bootdo.system.controller.LoginController.login
2019-04-03 17:42:20 -参数 : [{}]
2019-04-03 17:42:20 -耗时 : 3
2019-04-03 17:42:20 -返回值 : login
2019-04-03 17:42:22 -请求地址 : http://localhost:8081/getVerify
2019-04-03 17:42:22 -HTTP METHOD : GET
2019-04-03 17:42:22 -CLASS_METHOD : com.bootdo.system.controller.LoginController.getVerify
2019-04-03 17:42:22 -参数 : [org.apache.shiro.web.servlet.ShiroHttpServletRequest@2f0e377c, org.apache.shiro.web.servlet.ShiroHttpServletResponse@16e66b0e]
2019-04-03 17:42:25 -5972
2019-04-03 17:42:25 -耗时 : 3259
2019-04-03 17:42:25 -返回值 : null
2019-04-03 17:42:25 -请求地址 : http://localhost:8081/login
2019-04-03 17:42:25 -HTTP METHOD : GET
2019-04-03 17:42:25 -CLASS_METHOD : com.bootdo.system.controller.LoginController.login
2019-04-03 17:42:25 -参数 : [{}]
2019-04-03 17:42:25 -耗时 : 0
2019-04-03 17:42:25 -返回值 : login
2019-04-03 17:42:33 -请求地址 : http://localhost:8081/login
2019-04-03 17:42:33 -HTTP METHOD : POST
2019-04-03 17:42:33 -CLASS_METHOD : com.bootdo.system.controller.LoginController.ajaxLogin
2019-04-03 17:42:33 -参数 : [admin, 111111, 5972, org.apache.shiro.web.servlet.ShiroHttpServletRequest@27349653]
2019-04-03 17:42:33 -==>  Preparing: select `user_id`,`username`,`name`,`password`,`dept_id`,`email`,`mobile`,`status`,`user_id_create`,`gmt_create`,`gmt_modified`,`sex`,`birth`,`pic_id`,`live_address`,`hobby`,`province`,`city`,`district` from sys_user WHERE username = ? order by user_id desc 
2019-04-03 17:42:33 -==> Parameters: admin(String)
2019-04-03 17:42:33 -<==      Total: 1
2019-04-03 17:42:33 -耗时 : 236
2019-04-03 17:42:33 -返回值 : {msg=操作成功, code=0}
2019-04-03 17:42:33 -More than one TaskExecutor bean found within the context, and none is named 'taskExecutor'. Mark one of them as primary or name it 'taskExecutor' (possibly as an alias) in order to use it for async processing: [clientInboundChannelExecutor, clientOutboundChannelExecutor, brokerChannelExecutor, messageBrokerTaskScheduler]
2019-04-03 17:42:33 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 17:42:33 -==> Parameters: 1(Long), admin(String), 登录(String), 237(Integer), com.bootdo.system.controller.LoginController.ajaxLogin()(String), null, 127.0.0.1(String), 2019-04-03 17:42:33.448(Timestamp)
2019-04-03 17:42:33 -请求地址 : http://localhost:8081/index
2019-04-03 17:42:33 -HTTP METHOD : GET
2019-04-03 17:42:33 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2019-04-03 17:42:33 -参数 : [{}]
2019-04-03 17:42:33 -<==    Updates: 1
2019-04-03 17:42:33 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2019-04-03 17:42:34 -==> Parameters: 1(Long)
2019-04-03 17:42:34 -<==      Total: 46
2019-04-03 17:42:34 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2019-04-03 17:42:34 -==> Parameters: 138(Long)
2019-04-03 17:42:34 -<==      Total: 1
2019-04-03 17:42:34 -耗时 : 569
2019-04-03 17:42:34 -返回值 : index_v1
2019-04-03 17:42:34 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 17:42:34 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 569(Integer), com.bootdo.system.controller.LoginController.index()(String), {"menus":[{"attributes":{"icon":"fa fa-money","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-money","url":"/moneyList/moneyList"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"102","parentId":"106","text":"现金缴费"},{"attributes":{"icon":"fa fa-book","url":"/moneyLog/elecLog"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"107","parentId":"106","text":"缴费记录"}],"hasChildren":true,"hasParent":false,"id":"106","parentId":"0","text":"收费管理"},{"attributes":{"icon":"fa fa-lightbulb-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/elec/elec"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"121","parentId":"103","text":"电费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"elec/elecInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"122","parentId":"103","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"elec/elecUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"123","parentId":"103","text":"电表上传"},{"attributes":{"icon":"fa fa-cc","url":"/elec/elecPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"124","parentId":"103","text":"电价管理"}],"hasChildren":true,"hasParent":false,"id":"103","parentId":"0","text":"电费管理"},{"attributes":{"icon":"fa fa-tint","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/water/water"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"117","parentId":"105","text":"水费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"water/waterInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"118","parentId":"105","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"water/waterUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"119","parentId":"105","text":"水费生成"},{"attributes":{"icon":"fa fa-cc","url":"/water/waterPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"120","parentId":"105","text":"水价管理"}],"hasChildren":true,"hasParent":false,"id":"105","parentId":"0","text":"水费管理"},{"attributes":{"icon":"fa fa-fire","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/heat/heat"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"113","parentId":"104","text":"暖费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"heat/heatInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"114","parentId":"104","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"heat/heatUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"115","parentId":"104","text":"暖费生成"},{"attributes":{"icon":"","url":"/heat/heatPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"116","parentId":"104","text":"暖价管理"}],"hasChildren":true,"hasParent":false,"id":"104","parentId":"0","text":"暖费管理"},{"attributes":{"icon":"fa fa-vcard-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-bomb","url":"/print/print"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"149","parentId":"108","text":"票据记录"}],"hasChildren":true,"hasParent":false,"id":"108","parentId":"0","text":"票据管理"},{"attributes":{"icon":"fa fa-bar-chart","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-area-chart","url":"/chart/graph_echarts.html"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","text":"百度chart"},{"attributes":{"icon":"fa fa-sun-o","url":"charts/countDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"109","parentId":"97","text":"日统计报表"},{"attributes":{"icon":"fa fa-registered","url":"charts/countMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"110","parentId":"97","text":"月统计报表"},{"attributes":{"icon":"fa fa-money","url":"charts/countOwe"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"155","parentId":"97","text":"欠费报表图"},{"attributes":{"icon":"fa fa-support","url":"charts/countYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"111","parentId":"97","text":"年统计报表"},{"attributes":{"icon":"fa fa-tachometer","url":"charts/countRun"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"112","parentId":"97","text":"走势图报表"}],"hasChildren":true,"hasParent":false,"id":"97","parentId":"0","text":"统计管理"},{"attributes":{"icon":"fa fa-bars","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-book","url":"/common/dict"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"78","parentId":"1","text":"数据字典"},{"attributes":{"icon":"fa fa-folder-open","url":"/common/sysFile"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"71","parentId":"1","text":"文件管理"}],"h(String), 127.0.0.1(String), 2019-04-03 17:42:34.193(Timestamp)
2019-04-03 17:42:34 -<==    Updates: 1
2019-04-03 17:42:34 -请求地址 : http://localhost:8081/main
2019-04-03 17:42:34 -HTTP METHOD : GET
2019-04-03 17:42:34 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 17:42:34 -参数 : []
2019-04-03 17:42:34 -耗时 : 0
2019-04-03 17:42:34 -返回值 : main
2019-04-03 17:42:34 -请求地址 : http://localhost:8081/oa/notify/message
2019-04-03 17:42:34 -HTTP METHOD : GET
2019-04-03 17:42:34 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2019-04-03 17:42:34 -参数 : []
2019-04-03 17:42:34 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2019-04-03 17:42:34 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2019-04-03 17:42:35 -<==      Total: 0
2019-04-03 17:42:35 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2019-04-03 17:42:35 -==> Parameters: 1(Long), 0(String)
2019-04-03 17:42:35 -<==      Total: 1
2019-04-03 17:42:35 -耗时 : 149
2019-04-03 17:42:35 -返回值 : com.bootdo.common.utils.PageUtils@3f0f93f4
2019-04-03 17:42:35 -请求地址 : http://localhost:8081/main
2019-04-03 17:42:35 -HTTP METHOD : GET
2019-04-03 17:42:35 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 17:42:35 -参数 : []
2019-04-03 17:42:35 -耗时 : 1
2019-04-03 17:42:35 -返回值 : main
2019-04-03 17:42:36 -WebSocketSession[1 current WS(1)-HttpStream(0)-HttpPoll(0), 1 total, 0 closed abnormally (0 connect failure, 0 send limit, 0 transport error)], stompSubProtocol[processed CONNECT(1)-CONNECTED(1)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 8, active threads = 0, queued tasks = 0, completed tasks = 9], outboundChannelpool size = 1, active threads = 0, queued tasks = 0, completed tasks = 1], sockJsScheduler[pool size = 4, active threads = 1, queued tasks = 2, completed tasks = 1]
2019-04-03 17:42:45 -==>  Preparing: select distinct m.perms from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id = ur.role_id where ur.user_id = ? 
2019-04-03 17:42:45 -==> Parameters: 1(Long)
2019-04-03 17:42:45 -<==      Total: 90
2019-04-03 17:42:45 -请求地址 : http://localhost:8081/heat/heat
2019-04-03 17:42:45 -HTTP METHOD : GET
2019-04-03 17:42:45 -CLASS_METHOD : com.bootdo.heat.controller.HeatController.Heat
2019-04-03 17:42:45 -参数 : []
2019-04-03 17:42:45 -耗时 : 0
2019-04-03 17:42:45 -返回值 : heat/heat/heat
2019-04-03 17:42:47 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-03 17:42:47 -HTTP METHOD : GET
2019-04-03 17:42:47 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 17:42:47 -参数 : [userType]
2019-04-03 17:42:47 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 17:42:47 -==> Parameters: userType(String)
2019-04-03 17:42:47 -请求地址 : http://localhost:8081/heat/heat/list
2019-04-03 17:42:47 -HTTP METHOD : GET
2019-04-03 17:42:47 -CLASS_METHOD : com.bootdo.heat.controller.HeatController.list
2019-04-03 17:42:47 -参数 : [{limit=10, offset=0, userType=, userOrg=, userId=, createTime=, queryType=1}]
2019-04-03 17:42:47 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`heat_type`,`heat_price`,`heat_area`,`heat_cost`,`heat_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from heat order by id asc limit ?, ? 
2019-04-03 17:42:47 -==> Parameters: 0(Integer), 10(Integer)
2019-04-03 17:42:47 -<==      Total: 2
2019-04-03 17:42:47 -耗时 : 155
2019-04-03 17:42:47 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 17:42:47 -<==      Total: 10
2019-04-03 17:42:47 -==>  Preparing: select count(*) from heat 
2019-04-03 17:42:47 -==> Parameters: 
2019-04-03 17:42:47 -<==      Total: 1
2019-04-03 17:42:47 -耗时 : 181
2019-04-03 17:42:47 -返回值 : com.bootdo.common.utils.PageUtils@27edd09e
2019-04-03 17:42:51 -请求地址 : http://localhost:8081/heat/heat/add
2019-04-03 17:42:51 -HTTP METHOD : GET
2019-04-03 17:42:51 -CLASS_METHOD : com.bootdo.heat.controller.HeatController.add
2019-04-03 17:42:51 -参数 : []
2019-04-03 17:42:51 -耗时 : 0
2019-04-03 17:42:51 -返回值 : heat/heat/add
2019-04-03 17:42:51 -请求地址 : http://localhost:8081/common/dict/list/userState
2019-04-03 17:42:51 -HTTP METHOD : GET
2019-04-03 17:42:51 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 17:42:51 -参数 : [userState]
2019-04-03 17:42:51 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 17:42:51 -==> Parameters: userState(String)
2019-04-03 17:42:51 -请求地址 : http://localhost:8081/common/dict/list/heatType
2019-04-03 17:42:51 -HTTP METHOD : GET
2019-04-03 17:42:51 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 17:42:51 -参数 : [heatType]
2019-04-03 17:42:51 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 17:42:51 -==> Parameters: heatType(String)
2019-04-03 17:42:51 -<==      Total: 5
2019-04-03 17:42:51 -耗时 : 12
2019-04-03 17:42:51 -返回值 : [DictDO{id=137, name='特殊暖费1', value='4', type='heatType', description='暖气类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=136, name='工业非盈利', value='3', type='heatType', description='暖气类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=135, name='工业盈利', value='2', type='heatType', description='暖气类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=134, name='民用暖', value='1', type='heatType', description='暖气类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=133, name='商业暖', value='0', type='heatType', description='暖气类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 17:42:51 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-03 17:42:51 -HTTP METHOD : GET
2019-04-03 17:42:51 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 17:42:51 -参数 : [userType]
2019-04-03 17:42:51 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 17:42:51 -==> Parameters: userType(String)
2019-04-03 17:42:51 -<==      Total: 2
2019-04-03 17:42:51 -耗时 : 7
2019-04-03 17:42:51 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 17:42:51 -<==      Total: 2
2019-04-03 17:42:51 -耗时 : 66
2019-04-03 17:42:51 -返回值 : [DictDO{id=126, name='使用中', value='1', type='userState', description='用户状态', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=125, name='未使用', value='0', type='userState', description='用户状态', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 17:43:11 -请求地址 : http://localhost:8081/heat/heat/save
2019-04-03 17:43:11 -HTTP METHOD : POST
2019-04-03 17:43:11 -CLASS_METHOD : com.bootdo.heat.controller.HeatController.save
2019-04-03 17:43:11 -参数 : [com.bootdo.heat.domain.HeatDO@47affcc2]
2019-04-03 17:43:11 -==>  Preparing: insert into heat ( `user_id`, `user_name`, `user_type`, `user_org`, `user_tell`, `user_state`, `wages_id`, `heat_type`, `heat_price`, `heat_area`, `heat_cost`, `heat_sum`, `create_time`, `create_by`, `update_time`, `update_by`, `remark` ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 17:43:11 -==> Parameters: 1(String), 1(String), (String), (String), (String), 1(String), 1(String), 1(String), 1(BigDecimal), 1(BigDecimal), 1(BigDecimal), 1(BigDecimal), null, 1(Long), 2019-04-03 17:43:11.809(Timestamp), 1(Long), (String)
2019-04-03 17:43:11 -{conn-10002, pstmt-20012} execute error. insert into heat
		(
			`user_id`, 
			`user_name`, 
			`user_type`, 
			`user_org`, 
			`user_tell`, 
			`user_state`, 
			`wages_id`, 
			`heat_type`, 
			`heat_price`, 
			`heat_area`, 
			`heat_cost`, 
			`heat_sum`, 
			`create_time`, 
			`create_by`, 
			`update_time`, 
			`update_by`, 
			`remark`
		)
		values
		(
			?, 
			?, 
			?, 
			?, 
			?, 
			?, 
			?, 
			?, 
			?, 
			?, 
			?, 
			?, 
			?, 
			?, 
			?, 
			?, 
			?
		)
com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException: Column 'create_time' cannot be null
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(Unknown Source)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(Unknown Source)
	at java.lang.reflect.Constructor.newInstance(Unknown Source)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:425)
	at com.mysql.jdbc.Util.getInstance(Util.java:408)
	at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:936)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3976)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3912)
	at com.mysql.jdbc.MysqlIO.sendCommand(MysqlIO.java:2530)
	at com.mysql.jdbc.MysqlIO.sqlQueryDirect(MysqlIO.java:2683)
	at com.mysql.jdbc.ConnectionImpl.execSQL(ConnectionImpl.java:2486)
	at com.mysql.jdbc.PreparedStatement.executeInternal(PreparedStatement.java:1858)
	at com.mysql.jdbc.PreparedStatement.execute(PreparedStatement.java:1197)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2931)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2929)
	at com.alibaba.druid.wall.WallFilter.preparedStatement_execute(WallFilter.java:601)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2929)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2929)
	at com.alibaba.druid.proxy.jdbc.PreparedStatementProxyImpl.execute(PreparedStatementProxyImpl.java:131)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:493)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:59)
	at com.sun.proxy.$Proxy173.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.update(PreparedStatementHandler.java:46)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.update(RoutingStatementHandler.java:74)
	at org.apache.ibatis.executor.SimpleExecutor.doUpdate(SimpleExecutor.java:50)
	at org.apache.ibatis.executor.BaseExecutor.update(BaseExecutor.java:117)
	at org.apache.ibatis.executor.CachingExecutor.update(CachingExecutor.java:76)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:198)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.insert(DefaultSqlSession.java:185)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:434)
	at com.sun.proxy.$Proxy101.insert(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.insert(SqlSessionTemplate.java:279)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:57)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy106.save(Unknown Source)
	at com.bootdo.heat.service.impl.HeatServiceImpl.save(HeatServiceImpl.java:35)
	at com.bootdo.heat.controller.HeatController.save(HeatController.java:182)
	at com.bootdo.heat.controller.HeatController$$FastClassBySpringCGLIB$$8914ee44.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:204)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:746)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.bootdo.common.aspect.WebLogAspect.doAround(WebLogAspect.java:57)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.apache.shiro.spring.security.interceptor.AopAllianceAnnotationsAuthorizingMethodInterceptor$1.proceed(AopAllianceAnnotationsAuthorizingMethodInterceptor.java:82)
	at org.apache.shiro.authz.aop.AuthorizingMethodInterceptor.invoke(AuthorizingMethodInterceptor.java:39)
	at org.apache.shiro.spring.security.interceptor.AopAllianceAnnotationsAuthorizingMethodInterceptor.invoke(AopAllianceAnnotationsAuthorizingMethodInterceptor.java:115)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.bootdo.heat.controller.HeatController$$EnhancerBySpringCGLIB$$95671fc2.save(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:209)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:877)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:783)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:991)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:925)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:974)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:877)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:661)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:851)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:61)
	at org.apache.shiro.web.servlet.AdviceFilter.executeChain(AdviceFilter.java:108)
	at org.apache.shiro.web.servlet.AdviceFilter.doFilterInternal(AdviceFilter.java:137)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:66)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)
	at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)
	at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)
	at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)
	at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:383)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:109)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:496)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:790)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1468)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Unknown Source)
2019-04-03 17:43:11 -Loading XML bean definitions from class path resource [org/springframework/jdbc/support/sql-error-codes.xml]
2019-04-03 17:43:11 -SQLErrorCodes loaded: [DB2, Derby, H2, HDB, HSQL, Informix, MS-SQL, MySQL, Oracle, PostgreSQL, Sybase]
2019-04-03 17:43:11 -
### Error updating database.  Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException: Column 'create_time' cannot be null
### The error may involve com.bootdo.heat.dao.HeatDao.save-Inline
### The error occurred while setting parameters
### SQL: insert into heat   (    `user_id`,     `user_name`,     `user_type`,     `user_org`,     `user_tell`,     `user_state`,     `wages_id`,     `heat_type`,     `heat_price`,     `heat_area`,     `heat_cost`,     `heat_sum`,     `create_time`,     `create_by`,     `update_time`,     `update_by`,     `remark`   )   values   (    ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?   )
### Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException: Column 'create_time' cannot be null
; ]; Column 'create_time' cannot be null; nested exception is com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException: Column 'create_time' cannot be null
org.springframework.dao.DataIntegrityViolationException: 
### Error updating database.  Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException: Column 'create_time' cannot be null
### The error may involve com.bootdo.heat.dao.HeatDao.save-Inline
### The error occurred while setting parameters
### SQL: insert into heat   (    `user_id`,     `user_name`,     `user_type`,     `user_org`,     `user_tell`,     `user_state`,     `wages_id`,     `heat_type`,     `heat_price`,     `heat_area`,     `heat_cost`,     `heat_sum`,     `create_time`,     `create_by`,     `update_time`,     `update_by`,     `remark`   )   values   (    ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?   )
### Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException: Column 'create_time' cannot be null
; ]; Column 'create_time' cannot be null; nested exception is com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException: Column 'create_time' cannot be null
	at org.springframework.jdbc.support.SQLExceptionSubclassTranslator.doTranslate(SQLExceptionSubclassTranslator.java:87)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:72)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:81)
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:75)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:447)
	at com.sun.proxy.$Proxy101.insert(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.insert(SqlSessionTemplate.java:279)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:57)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy106.save(Unknown Source)
	at com.bootdo.heat.service.impl.HeatServiceImpl.save(HeatServiceImpl.java:35)
	at com.bootdo.heat.controller.HeatController.save(HeatController.java:182)
	at com.bootdo.heat.controller.HeatController$$FastClassBySpringCGLIB$$8914ee44.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:204)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:746)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.bootdo.common.aspect.WebLogAspect.doAround(WebLogAspect.java:57)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.apache.shiro.spring.security.interceptor.AopAllianceAnnotationsAuthorizingMethodInterceptor$1.proceed(AopAllianceAnnotationsAuthorizingMethodInterceptor.java:82)
	at org.apache.shiro.authz.aop.AuthorizingMethodInterceptor.invoke(AuthorizingMethodInterceptor.java:39)
	at org.apache.shiro.spring.security.interceptor.AopAllianceAnnotationsAuthorizingMethodInterceptor.invoke(AopAllianceAnnotationsAuthorizingMethodInterceptor.java:115)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.bootdo.heat.controller.HeatController$$EnhancerBySpringCGLIB$$95671fc2.save(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:209)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:877)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:783)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:991)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:925)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:974)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:877)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:661)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:851)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:61)
	at org.apache.shiro.web.servlet.AdviceFilter.executeChain(AdviceFilter.java:108)
	at org.apache.shiro.web.servlet.AdviceFilter.doFilterInternal(AdviceFilter.java:137)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:66)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)
	at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)
	at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)
	at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)
	at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:383)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:109)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:496)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:790)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1468)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Unknown Source)
Caused by: com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException: Column 'create_time' cannot be null
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(Unknown Source)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(Unknown Source)
	at java.lang.reflect.Constructor.newInstance(Unknown Source)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:425)
	at com.mysql.jdbc.Util.getInstance(Util.java:408)
	at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:936)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3976)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3912)
	at com.mysql.jdbc.MysqlIO.sendCommand(MysqlIO.java:2530)
	at com.mysql.jdbc.MysqlIO.sqlQueryDirect(MysqlIO.java:2683)
	at com.mysql.jdbc.ConnectionImpl.execSQL(ConnectionImpl.java:2486)
	at com.mysql.jdbc.PreparedStatement.executeInternal(PreparedStatement.java:1858)
	at com.mysql.jdbc.PreparedStatement.execute(PreparedStatement.java:1197)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2931)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2929)
	at com.alibaba.druid.wall.WallFilter.preparedStatement_execute(WallFilter.java:601)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2929)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2929)
	at com.alibaba.druid.proxy.jdbc.PreparedStatementProxyImpl.execute(PreparedStatementProxyImpl.java:131)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:493)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:59)
	at com.sun.proxy.$Proxy173.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.update(PreparedStatementHandler.java:46)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.update(RoutingStatementHandler.java:74)
	at org.apache.ibatis.executor.SimpleExecutor.doUpdate(SimpleExecutor.java:50)
	at org.apache.ibatis.executor.BaseExecutor.update(BaseExecutor.java:117)
	at org.apache.ibatis.executor.CachingExecutor.update(CachingExecutor.java:76)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:198)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.insert(DefaultSqlSession.java:185)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:434)
	... 104 common frames omitted
2019-04-03 17:43:11 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 17:43:11 -==> Parameters: 1(Long), admin(String), error(String), null, http://localhost:8081/heat/heat/save(String), org.springframework.dao.DataIntegrityViolationException: 
### Error updating database.  Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException: Column 'create_time' cannot be null
### The error may involve com.bootdo.heat.dao.HeatDao.save-Inline
### The error occurred while setting parameters
### SQL: insert into heat   (    `user_id`,     `user_name`,     `user_type`,     `user_org`,     `user_tell`,     `user_state`,     `wages_id`,     `heat_type`,     `heat_price`,     `heat_area`,     `heat_cost`,     `heat_sum`,     `create_time`,     `create_by`,     `update_time`,     `update_by`,     `remark`   )   values   (    ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?   )
### Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException: Column 'create_time' cannot be null
; ]; Column 'create_time' cannot be null; nested exception is com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException: Column 'create_time' cannot be null(String), null, 2019-04-03 17:43:11.959(Timestamp)
2019-04-03 17:43:12 -<==    Updates: 1
2019-04-03 17:43:50 -请求地址 : http://localhost:8081/elec/elec
2019-04-03 17:43:50 -HTTP METHOD : GET
2019-04-03 17:43:50 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.Elec
2019-04-03 17:43:50 -参数 : []
2019-04-03 17:43:50 -耗时 : 1
2019-04-03 17:43:50 -返回值 : elec/elec/elec
2019-04-03 17:43:50 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-03 17:43:50 -HTTP METHOD : GET
2019-04-03 17:43:50 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 17:43:50 -参数 : [userType]
2019-04-03 17:43:50 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 17:43:50 -==> Parameters: userType(String)
2019-04-03 17:43:50 -<==      Total: 2
2019-04-03 17:43:50 -耗时 : 6
2019-04-03 17:43:50 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 17:43:50 -请求地址 : http://localhost:8081/elec/elec/list
2019-04-03 17:43:50 -HTTP METHOD : GET
2019-04-03 17:43:50 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.list
2019-04-03 17:43:50 -参数 : [{limit=10, offset=0, userType=, userOrg=, userId=, createTime=, queryType=1}, com.bootdo.elec.domain.ElecDO@7a589d41]
2019-04-03 17:43:50 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec order by id asc limit ?, ? 
2019-04-03 17:43:50 -==> Parameters: 0(Integer), 10(Integer)
2019-04-03 17:43:51 -<==      Total: 10
2019-04-03 17:43:51 -==>  Preparing: select count(*) from elec 
2019-04-03 17:43:51 -==> Parameters: 
2019-04-03 17:43:51 -<==      Total: 1
2019-04-03 17:43:51 -耗时 : 124
2019-04-03 17:43:51 -返回值 : com.bootdo.common.utils.PageUtils@493c2c0a
2019-04-03 17:44:03 -请求地址 : http://localhost:8081/elec/elec/add
2019-04-03 17:44:03 -HTTP METHOD : GET
2019-04-03 17:44:03 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.add
2019-04-03 17:44:03 -参数 : []
2019-04-03 17:44:03 -耗时 : 0
2019-04-03 17:44:03 -返回值 : elec/elec/add
2019-04-03 17:44:04 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-03 17:44:04 -HTTP METHOD : GET
2019-04-03 17:44:04 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 17:44:04 -参数 : [userType]
2019-04-03 17:44:04 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 17:44:04 -请求地址 : http://localhost:8081/common/dict/list/userState
2019-04-03 17:44:04 -HTTP METHOD : GET
2019-04-03 17:44:04 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 17:44:04 -参数 : [userState]
2019-04-03 17:44:04 -==> Parameters: userType(String)
2019-04-03 17:44:04 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 17:44:04 -==> Parameters: userState(String)
2019-04-03 17:44:04 -<==      Total: 2
2019-04-03 17:44:04 -耗时 : 8
2019-04-03 17:44:04 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 17:44:04 -<==      Total: 2
2019-04-03 17:44:04 -耗时 : 18
2019-04-03 17:44:04 -返回值 : [DictDO{id=126, name='使用中', value='1', type='userState', description='用户状态', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=125, name='未使用', value='0', type='userState', description='用户状态', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 17:44:04 -请求地址 : http://localhost:8081/common/dict/list/elecType
2019-04-03 17:44:04 -HTTP METHOD : GET
2019-04-03 17:44:04 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 17:44:04 -参数 : [elecType]
2019-04-03 17:44:04 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 17:44:04 -==> Parameters: elecType(String)
2019-04-03 17:44:04 -<==      Total: 2
2019-04-03 17:44:04 -耗时 : 5
2019-04-03 17:44:04 -返回值 : [DictDO{id=139, name='民用电', value='1', type='elecType', description='电量性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=138, name='商业电', value='0', type='elecType', description='电量类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 17:44:32 -请求地址 : http://localhost:8081/system/sysDept/treeView
2019-04-03 17:44:32 -HTTP METHOD : GET
2019-04-03 17:44:32 -CLASS_METHOD : com.bootdo.system.controller.DeptController.treeView
2019-04-03 17:44:32 -参数 : []
2019-04-03 17:44:32 -耗时 : 1
2019-04-03 17:44:32 -返回值 : system/dept/deptTree
2019-04-03 17:44:33 -请求地址 : http://localhost:8081/system/sysDept/tree
2019-04-03 17:44:33 -HTTP METHOD : GET
2019-04-03 17:44:33 -CLASS_METHOD : com.bootdo.system.controller.DeptController.tree
2019-04-03 17:44:33 -参数 : []
2019-04-03 17:44:33 -==>  Preparing: select `dept_id`,`parent_id`,`name`,`order_num`,`del_flag` from sys_dept order by dept_id desc 
2019-04-03 17:44:33 -==> Parameters: 
2019-04-03 17:44:33 -<==      Total: 3
2019-04-03 17:44:33 -耗时 : 34
2019-04-03 17:44:33 -返回值 : {"checked":false,"children":[{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"3","parentId":"1","state":{"opened":true},"text":"牙星"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"2","parentId":"1","state":{"opened":true},"text":"五九"}],"hasChildren":true,"hasParent":false,"id":"1","parentId":"0","state":{"opened":true},"text":"总公司"}
2019-04-03 17:44:43 -请求地址 : http://localhost:8081/elec/elec/save
2019-04-03 17:44:43 -HTTP METHOD : POST
2019-04-03 17:44:43 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.save
2019-04-03 17:44:43 -参数 : [com.bootdo.elec.domain.ElecDO@70bae1de]
2019-04-03 17:44:43 -==>  Preparing: insert into elec ( `user_id`, `user_name`, `user_type`, `user_org`, `user_tell`, `user_state`, `wages_id`, `elec_type`, `elec_price`, `start`, `end`, `hu`, `elec_amount`, `elec_cost`, `elec_sum`, `create_time`, `create_by`, `update_time`, `update_by`, `remark` ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 17:44:43 -==> Parameters: 1(String), 1(String), A(String), 2(String), (String), 1(String), 1(String), 1(String), 1(BigDecimal), 1(String), 1(String), 1(Integer), 1(BigDecimal), 1(BigDecimal), 1(BigDecimal), null, 1(Long), 2019-04-03 17:44:43.38(Timestamp), 1(Long), (String)
2019-04-03 17:44:43 -{conn-10001, pstmt-20017} execute error. insert into elec
		
		(
			`user_id`, 
			`user_name`, 
			`user_type`, 
			`user_org`, 
			`user_tell`, 
			`user_state`, 
			`wages_id`, 
			`elec_type`, 
			`elec_price`, 
			`start`, 
			`end`, 
			`hu`, 
			`elec_amount`, 
			`elec_cost`, 
			`elec_sum`, 
			`create_time`, 
			`create_by`, 
			`update_time`, 
			`update_by`, 
			`remark`
		)
		values
		(
			?, 
			?, 
			?, 
			?, 
			?, 
			?, 
			?, 
			?, 
			?, 
			?, 
			?, 
			?, 
			?, 
			?, 
			?, 
			?, 
			?, 
			?, 
			?, 
			?
		)
com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException: Column 'create_time' cannot be null
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(Unknown Source)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(Unknown Source)
	at java.lang.reflect.Constructor.newInstance(Unknown Source)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:425)
	at com.mysql.jdbc.Util.getInstance(Util.java:408)
	at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:936)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3976)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3912)
	at com.mysql.jdbc.MysqlIO.sendCommand(MysqlIO.java:2530)
	at com.mysql.jdbc.MysqlIO.sqlQueryDirect(MysqlIO.java:2683)
	at com.mysql.jdbc.ConnectionImpl.execSQL(ConnectionImpl.java:2486)
	at com.mysql.jdbc.PreparedStatement.executeInternal(PreparedStatement.java:1858)
	at com.mysql.jdbc.PreparedStatement.execute(PreparedStatement.java:1197)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2931)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2929)
	at com.alibaba.druid.wall.WallFilter.preparedStatement_execute(WallFilter.java:601)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2929)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2929)
	at com.alibaba.druid.proxy.jdbc.PreparedStatementProxyImpl.execute(PreparedStatementProxyImpl.java:131)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:493)
	at sun.reflect.GeneratedMethodAccessor128.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:59)
	at com.sun.proxy.$Proxy173.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.update(PreparedStatementHandler.java:46)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.update(RoutingStatementHandler.java:74)
	at org.apache.ibatis.executor.SimpleExecutor.doUpdate(SimpleExecutor.java:50)
	at org.apache.ibatis.executor.BaseExecutor.update(BaseExecutor.java:117)
	at org.apache.ibatis.executor.CachingExecutor.update(CachingExecutor.java:76)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:198)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.insert(DefaultSqlSession.java:185)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:434)
	at com.sun.proxy.$Proxy101.insert(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.insert(SqlSessionTemplate.java:279)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:57)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy105.save(Unknown Source)
	at com.bootdo.elec.service.impl.ElecServiceImpl.save(ElecServiceImpl.java:42)
	at com.bootdo.elec.controller.ElecController.save(ElecController.java:195)
	at com.bootdo.elec.controller.ElecController$$FastClassBySpringCGLIB$$b8b2b2ee.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:204)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:746)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.bootdo.common.aspect.WebLogAspect.doAround(WebLogAspect.java:57)
	at sun.reflect.GeneratedMethodAccessor126.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.apache.shiro.spring.security.interceptor.AopAllianceAnnotationsAuthorizingMethodInterceptor$1.proceed(AopAllianceAnnotationsAuthorizingMethodInterceptor.java:82)
	at org.apache.shiro.authz.aop.AuthorizingMethodInterceptor.invoke(AuthorizingMethodInterceptor.java:39)
	at org.apache.shiro.spring.security.interceptor.AopAllianceAnnotationsAuthorizingMethodInterceptor.invoke(AopAllianceAnnotationsAuthorizingMethodInterceptor.java:115)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.bootdo.elec.controller.ElecController$$EnhancerBySpringCGLIB$$6843a800.save(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:209)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:877)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:783)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:991)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:925)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:974)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:877)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:661)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:851)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:61)
	at org.apache.shiro.web.servlet.AdviceFilter.executeChain(AdviceFilter.java:108)
	at org.apache.shiro.web.servlet.AdviceFilter.doFilterInternal(AdviceFilter.java:137)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:66)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)
	at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)
	at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)
	at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)
	at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:383)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:109)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:496)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:790)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1468)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Unknown Source)
2019-04-03 17:44:43 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 17:44:43 -
### Error updating database.  Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException: Column 'create_time' cannot be null
### The error may involve com.bootdo.elec.dao.ElecDao.save-Inline
### The error occurred while setting parameters
### SQL: insert into elec      (    `user_id`,     `user_name`,     `user_type`,     `user_org`,     `user_tell`,     `user_state`,     `wages_id`,     `elec_type`,     `elec_price`,     `start`,     `end`,     `hu`,     `elec_amount`,     `elec_cost`,     `elec_sum`,     `create_time`,     `create_by`,     `update_time`,     `update_by`,     `remark`   )   values   (    ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?   )
### Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException: Column 'create_time' cannot be null
; ]; Column 'create_time' cannot be null; nested exception is com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException: Column 'create_time' cannot be null
org.springframework.dao.DataIntegrityViolationException: 
### Error updating database.  Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException: Column 'create_time' cannot be null
### The error may involve com.bootdo.elec.dao.ElecDao.save-Inline
### The error occurred while setting parameters
### SQL: insert into elec      (    `user_id`,     `user_name`,     `user_type`,     `user_org`,     `user_tell`,     `user_state`,     `wages_id`,     `elec_type`,     `elec_price`,     `start`,     `end`,     `hu`,     `elec_amount`,     `elec_cost`,     `elec_sum`,     `create_time`,     `create_by`,     `update_time`,     `update_by`,     `remark`   )   values   (    ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?   )
### Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException: Column 'create_time' cannot be null
; ]; Column 'create_time' cannot be null; nested exception is com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException: Column 'create_time' cannot be null
	at org.springframework.jdbc.support.SQLExceptionSubclassTranslator.doTranslate(SQLExceptionSubclassTranslator.java:87)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:72)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:81)
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:75)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:447)
	at com.sun.proxy.$Proxy101.insert(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.insert(SqlSessionTemplate.java:279)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:57)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy105.save(Unknown Source)
	at com.bootdo.elec.service.impl.ElecServiceImpl.save(ElecServiceImpl.java:42)
	at com.bootdo.elec.controller.ElecController.save(ElecController.java:195)
	at com.bootdo.elec.controller.ElecController$$FastClassBySpringCGLIB$$b8b2b2ee.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:204)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:746)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.bootdo.common.aspect.WebLogAspect.doAround(WebLogAspect.java:57)
	at sun.reflect.GeneratedMethodAccessor126.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.apache.shiro.spring.security.interceptor.AopAllianceAnnotationsAuthorizingMethodInterceptor$1.proceed(AopAllianceAnnotationsAuthorizingMethodInterceptor.java:82)
	at org.apache.shiro.authz.aop.AuthorizingMethodInterceptor.invoke(AuthorizingMethodInterceptor.java:39)
	at org.apache.shiro.spring.security.interceptor.AopAllianceAnnotationsAuthorizingMethodInterceptor.invoke(AopAllianceAnnotationsAuthorizingMethodInterceptor.java:115)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.bootdo.elec.controller.ElecController$$EnhancerBySpringCGLIB$$6843a800.save(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:209)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:877)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:783)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:991)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:925)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:974)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:877)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:661)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:851)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:61)
	at org.apache.shiro.web.servlet.AdviceFilter.executeChain(AdviceFilter.java:108)
	at org.apache.shiro.web.servlet.AdviceFilter.doFilterInternal(AdviceFilter.java:137)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:66)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)
	at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)
	at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)
	at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)
	at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:383)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:109)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:496)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:790)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1468)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Unknown Source)
Caused by: com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException: Column 'create_time' cannot be null
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(Unknown Source)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(Unknown Source)
	at java.lang.reflect.Constructor.newInstance(Unknown Source)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:425)
	at com.mysql.jdbc.Util.getInstance(Util.java:408)
	at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:936)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3976)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3912)
	at com.mysql.jdbc.MysqlIO.sendCommand(MysqlIO.java:2530)
	at com.mysql.jdbc.MysqlIO.sqlQueryDirect(MysqlIO.java:2683)
	at com.mysql.jdbc.ConnectionImpl.execSQL(ConnectionImpl.java:2486)
	at com.mysql.jdbc.PreparedStatement.executeInternal(PreparedStatement.java:1858)
	at com.mysql.jdbc.PreparedStatement.execute(PreparedStatement.java:1197)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2931)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2929)
	at com.alibaba.druid.wall.WallFilter.preparedStatement_execute(WallFilter.java:601)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2929)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2929)
	at com.alibaba.druid.proxy.jdbc.PreparedStatementProxyImpl.execute(PreparedStatementProxyImpl.java:131)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:493)
	at sun.reflect.GeneratedMethodAccessor128.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:59)
	at com.sun.proxy.$Proxy173.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.update(PreparedStatementHandler.java:46)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.update(RoutingStatementHandler.java:74)
	at org.apache.ibatis.executor.SimpleExecutor.doUpdate(SimpleExecutor.java:50)
	at org.apache.ibatis.executor.BaseExecutor.update(BaseExecutor.java:117)
	at org.apache.ibatis.executor.CachingExecutor.update(CachingExecutor.java:76)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:198)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.insert(DefaultSqlSession.java:185)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:434)
	... 103 common frames omitted
2019-04-03 17:44:43 -==> Parameters: 1(Long), admin(String), error(String), null, http://localhost:8081/elec/elec/save(String), org.springframework.dao.DataIntegrityViolationException: 
### Error updating database.  Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException: Column 'create_time' cannot be null
### The error may involve com.bootdo.elec.dao.ElecDao.save-Inline
### The error occurred while setting parameters
### SQL: insert into elec      (    `user_id`,     `user_name`,     `user_type`,     `user_org`,     `user_tell`,     `user_state`,     `wages_id`,     `elec_type`,     `elec_price`,     `start`,     `end`,     `hu`,     `elec_amount`,     `elec_cost`,     `elec_sum`,     `create_time`,     `create_by`,     `update_time`,     `update_by`,     `remark`   )   values   (    ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?   )
### Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException: Column 'create_time' cannot be null
; ]; Column 'create_time' cannot be null; nested exception is com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException: Column 'create_time' cannot be null(String), null, 2019-04-03 17:44:43.413(Timestamp)
2019-04-03 17:44:43 -<==    Updates: 1
2019-04-03 17:48:18 -请求地址 : http://localhost:8081/index
2019-04-03 17:48:18 -HTTP METHOD : GET
2019-04-03 17:48:18 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2019-04-03 17:48:18 -参数 : [{}]
2019-04-03 17:48:18 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2019-04-03 17:48:18 -==> Parameters: 1(Long)
2019-04-03 17:48:18 -<==      Total: 46
2019-04-03 17:48:18 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2019-04-03 17:48:18 -==> Parameters: 138(Long)
2019-04-03 17:48:18 -<==      Total: 1
2019-04-03 17:48:18 -耗时 : 37
2019-04-03 17:48:18 -返回值 : index_v1
2019-04-03 17:48:18 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 17:48:18 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 37(Integer), com.bootdo.system.controller.LoginController.index()(String), {"menus":[{"attributes":{"icon":"fa fa-money","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-money","url":"/moneyList/moneyList"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"102","parentId":"106","text":"现金缴费"},{"attributes":{"icon":"fa fa-book","url":"/moneyLog/elecLog"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"107","parentId":"106","text":"缴费记录"}],"hasChildren":true,"hasParent":false,"id":"106","parentId":"0","text":"收费管理"},{"attributes":{"icon":"fa fa-lightbulb-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/elec/elec"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"121","parentId":"103","text":"电费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"elec/elecInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"122","parentId":"103","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"elec/elecUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"123","parentId":"103","text":"电表上传"},{"attributes":{"icon":"fa fa-cc","url":"/elec/elecPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"124","parentId":"103","text":"电价管理"}],"hasChildren":true,"hasParent":false,"id":"103","parentId":"0","text":"电费管理"},{"attributes":{"icon":"fa fa-tint","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/water/water"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"117","parentId":"105","text":"水费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"water/waterInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"118","parentId":"105","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"water/waterUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"119","parentId":"105","text":"水费生成"},{"attributes":{"icon":"fa fa-cc","url":"/water/waterPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"120","parentId":"105","text":"水价管理"}],"hasChildren":true,"hasParent":false,"id":"105","parentId":"0","text":"水费管理"},{"attributes":{"icon":"fa fa-fire","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/heat/heat"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"113","parentId":"104","text":"暖费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"heat/heatInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"114","parentId":"104","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"heat/heatUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"115","parentId":"104","text":"暖费生成"},{"attributes":{"icon":"","url":"/heat/heatPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"116","parentId":"104","text":"暖价管理"}],"hasChildren":true,"hasParent":false,"id":"104","parentId":"0","text":"暖费管理"},{"attributes":{"icon":"fa fa-vcard-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-bomb","url":"/print/print"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"149","parentId":"108","text":"票据记录"}],"hasChildren":true,"hasParent":false,"id":"108","parentId":"0","text":"票据管理"},{"attributes":{"icon":"fa fa-bar-chart","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-area-chart","url":"/chart/graph_echarts.html"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","text":"百度chart"},{"attributes":{"icon":"fa fa-sun-o","url":"charts/countDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"109","parentId":"97","text":"日统计报表"},{"attributes":{"icon":"fa fa-registered","url":"charts/countMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"110","parentId":"97","text":"月统计报表"},{"attributes":{"icon":"fa fa-money","url":"charts/countOwe"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"155","parentId":"97","text":"欠费报表图"},{"attributes":{"icon":"fa fa-support","url":"charts/countYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"111","parentId":"97","text":"年统计报表"},{"attributes":{"icon":"fa fa-tachometer","url":"charts/countRun"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"112","parentId":"97","text":"走势图报表"}],"hasChildren":true,"hasParent":false,"id":"97","parentId":"0","text":"统计管理"},{"attributes":{"icon":"fa fa-bars","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-book","url":"/common/dict"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"78","parentId":"1","text":"数据字典"},{"attributes":{"icon":"fa fa-folder-open","url":"/common/sysFile"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"71","parentId":"1","text":"文件管理"}],"h(String), 127.0.0.1(String), 2019-04-03 17:48:18.957(Timestamp)
2019-04-03 17:48:19 -<==    Updates: 1
2019-04-03 17:48:19 -请求地址 : http://localhost:8081/main
2019-04-03 17:48:19 -HTTP METHOD : GET
2019-04-03 17:48:19 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 17:48:19 -参数 : []
2019-04-03 17:48:19 -耗时 : 2
2019-04-03 17:48:19 -返回值 : main
2019-04-03 17:48:19 -请求地址 : http://localhost:8081/oa/notify/message
2019-04-03 17:48:19 -HTTP METHOD : GET
2019-04-03 17:48:19 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2019-04-03 17:48:19 -参数 : []
2019-04-03 17:48:19 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2019-04-03 17:48:19 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2019-04-03 17:48:19 -<==      Total: 0
2019-04-03 17:48:19 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2019-04-03 17:48:19 -==> Parameters: 1(Long), 0(String)
2019-04-03 17:48:19 -<==      Total: 1
2019-04-03 17:48:19 -耗时 : 11
2019-04-03 17:48:19 -返回值 : com.bootdo.common.utils.PageUtils@af94201
2019-04-03 17:48:19 -请求地址 : http://localhost:8081/main
2019-04-03 17:48:19 -HTTP METHOD : GET
2019-04-03 17:48:19 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 17:48:19 -参数 : []
2019-04-03 17:48:19 -耗时 : 1
2019-04-03 17:48:19 -返回值 : main
2019-04-03 17:48:22 -请求地址 : http://localhost:8081/elec/elec
2019-04-03 17:48:22 -HTTP METHOD : GET
2019-04-03 17:48:22 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.Elec
2019-04-03 17:48:22 -参数 : []
2019-04-03 17:48:22 -耗时 : 0
2019-04-03 17:48:22 -返回值 : elec/elec/elec
2019-04-03 17:48:23 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-03 17:48:23 -HTTP METHOD : GET
2019-04-03 17:48:23 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 17:48:23 -参数 : [userType]
2019-04-03 17:48:23 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 17:48:23 -==> Parameters: userType(String)
2019-04-03 17:48:23 -<==      Total: 2
2019-04-03 17:48:23 -耗时 : 4
2019-04-03 17:48:23 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 17:48:23 -请求地址 : http://localhost:8081/elec/elec/list
2019-04-03 17:48:23 -HTTP METHOD : GET
2019-04-03 17:48:23 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.list
2019-04-03 17:48:23 -参数 : [{limit=10, offset=0, userType=, userOrg=, userId=, createTime=, queryType=1}, com.bootdo.elec.domain.ElecDO@36e88f5c]
2019-04-03 17:48:23 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec order by id asc limit ?, ? 
2019-04-03 17:48:23 -==> Parameters: 0(Integer), 10(Integer)
2019-04-03 17:48:23 -<==      Total: 10
2019-04-03 17:48:23 -==>  Preparing: select count(*) from elec 
2019-04-03 17:48:23 -==> Parameters: 
2019-04-03 17:48:23 -<==      Total: 1
2019-04-03 17:48:23 -耗时 : 22
2019-04-03 17:48:23 -返回值 : com.bootdo.common.utils.PageUtils@390ab5b
2019-04-03 17:48:29 -请求地址 : http://localhost:8081/elec/elec/add
2019-04-03 17:48:29 -HTTP METHOD : GET
2019-04-03 17:48:29 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.add
2019-04-03 17:48:29 -参数 : []
2019-04-03 17:48:29 -耗时 : 1
2019-04-03 17:48:29 -返回值 : elec/elec/add
2019-04-03 17:48:29 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-03 17:48:29 -HTTP METHOD : GET
2019-04-03 17:48:29 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 17:48:29 -参数 : [userType]
2019-04-03 17:48:29 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 17:48:29 -==> Parameters: userType(String)
2019-04-03 17:48:29 -请求地址 : http://localhost:8081/common/dict/list/userState
2019-04-03 17:48:29 -HTTP METHOD : GET
2019-04-03 17:48:29 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 17:48:29 -参数 : [userState]
2019-04-03 17:48:29 -请求地址 : http://localhost:8081/common/dict/list/elecType
2019-04-03 17:48:29 -<==      Total: 2
2019-04-03 17:48:29 -HTTP METHOD : GET
2019-04-03 17:48:29 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 17:48:29 -参数 : [elecType]
2019-04-03 17:48:29 -耗时 : 6
2019-04-03 17:48:29 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 17:48:29 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 17:48:29 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 17:48:29 -==> Parameters: userState(String)
2019-04-03 17:48:29 -==> Parameters: elecType(String)
2019-04-03 17:48:29 -<==      Total: 2
2019-04-03 17:48:29 -<==      Total: 2
2019-04-03 17:48:29 -耗时 : 12
2019-04-03 17:48:29 -返回值 : [DictDO{id=139, name='民用电', value='1', type='elecType', description='电量性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=138, name='商业电', value='0', type='elecType', description='电量类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 17:48:29 -耗时 : 12
2019-04-03 17:48:29 -返回值 : [DictDO{id=126, name='使用中', value='1', type='userState', description='用户状态', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=125, name='未使用', value='0', type='userState', description='用户状态', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 17:48:46 -请求地址 : http://localhost:8081/system/sysDept/treeView
2019-04-03 17:48:46 -HTTP METHOD : GET
2019-04-03 17:48:46 -CLASS_METHOD : com.bootdo.system.controller.DeptController.treeView
2019-04-03 17:48:46 -参数 : []
2019-04-03 17:48:46 -耗时 : 1
2019-04-03 17:48:46 -返回值 : system/dept/deptTree
2019-04-03 17:48:46 -请求地址 : http://localhost:8081/system/sysDept/tree
2019-04-03 17:48:46 -HTTP METHOD : GET
2019-04-03 17:48:46 -CLASS_METHOD : com.bootdo.system.controller.DeptController.tree
2019-04-03 17:48:46 -参数 : []
2019-04-03 17:48:46 -==>  Preparing: select `dept_id`,`parent_id`,`name`,`order_num`,`del_flag` from sys_dept order by dept_id desc 
2019-04-03 17:48:46 -==> Parameters: 
2019-04-03 17:48:46 -<==      Total: 3
2019-04-03 17:48:46 -耗时 : 4
2019-04-03 17:48:46 -返回值 : {"checked":false,"children":[{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"3","parentId":"1","state":{"opened":true},"text":"牙星"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"2","parentId":"1","state":{"opened":true},"text":"五九"}],"hasChildren":true,"hasParent":false,"id":"1","parentId":"0","state":{"opened":true},"text":"总公司"}
2019-04-03 17:49:00 -请求地址 : http://localhost:8081/elec/elec/save
2019-04-03 17:49:00 -HTTP METHOD : POST
2019-04-03 17:49:00 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.save
2019-04-03 17:49:00 -参数 : [com.bootdo.elec.domain.ElecDO@67c4863]
2019-04-03 17:49:00 -==>  Preparing: insert into elec ( `user_id`, `user_name`, `user_type`, `user_org`, `user_tell`, `user_state`, `wages_id`, `elec_type`, `elec_price`, `start`, `end`, `hu`, `elec_amount`, `elec_cost`, `elec_sum`, `create_time`, `create_by`, `update_time`, `update_by`, `remark` ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 17:49:00 -==> Parameters: 1(String), 1(String), A(String), 2(String), (String), 1(String), 1(String), 0(String), 1(BigDecimal), 1(String), 1(String), 1(Integer), 1(BigDecimal), 1(BigDecimal), 1(BigDecimal), 1(String), 1(Long), 2019-04-03 17:49:00.298(Timestamp), 1(Long), (String)
2019-04-03 17:49:00 -<==    Updates: 1
2019-04-03 17:49:00 -耗时 : 146
2019-04-03 17:49:00 -返回值 : {msg=操作成功, code=0}
2019-04-03 17:49:00 -请求地址 : http://localhost:8081/elec/elec/list
2019-04-03 17:49:00 -HTTP METHOD : GET
2019-04-03 17:49:00 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.list
2019-04-03 17:49:00 -参数 : [{limit=10, offset=0, userType=, userOrg=, userId=, createTime=, queryType=2}, com.bootdo.elec.domain.ElecDO@4938d099]
2019-04-03 17:49:00 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec WHERE `elec_sum` < 0 order by id asc limit ?, ? 
2019-04-03 17:49:00 -==> Parameters: 0(Integer), 10(Integer)
2019-04-03 17:49:00 -<==      Total: 2
2019-04-03 17:49:00 -==>  Preparing: select count(*) from elec WHERE `elec_sum` < 0 
2019-04-03 17:49:00 -==> Parameters: 
2019-04-03 17:49:00 -<==      Total: 1
2019-04-03 17:49:00 -耗时 : 16
2019-04-03 17:49:00 -返回值 : com.bootdo.common.utils.PageUtils@4a030c64
2019-04-03 17:49:21 -请求地址 : http://localhost:8081/index
2019-04-03 17:49:21 -HTTP METHOD : GET
2019-04-03 17:49:21 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2019-04-03 17:49:21 -参数 : [{}]
2019-04-03 17:49:21 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2019-04-03 17:49:21 -==> Parameters: 1(Long)
2019-04-03 17:49:21 -<==      Total: 46
2019-04-03 17:49:21 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2019-04-03 17:49:21 -==> Parameters: 138(Long)
2019-04-03 17:49:21 -<==      Total: 1
2019-04-03 17:49:21 -耗时 : 111
2019-04-03 17:49:21 -返回值 : index_v1
2019-04-03 17:49:21 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 17:49:21 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 111(Integer), com.bootdo.system.controller.LoginController.index()(String), {"menus":[{"attributes":{"icon":"fa fa-money","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-money","url":"/moneyList/moneyList"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"102","parentId":"106","text":"现金缴费"},{"attributes":{"icon":"fa fa-book","url":"/moneyLog/elecLog"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"107","parentId":"106","text":"缴费记录"}],"hasChildren":true,"hasParent":false,"id":"106","parentId":"0","text":"收费管理"},{"attributes":{"icon":"fa fa-lightbulb-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/elec/elec"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"121","parentId":"103","text":"电费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"elec/elecInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"122","parentId":"103","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"elec/elecUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"123","parentId":"103","text":"电表上传"},{"attributes":{"icon":"fa fa-cc","url":"/elec/elecPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"124","parentId":"103","text":"电价管理"}],"hasChildren":true,"hasParent":false,"id":"103","parentId":"0","text":"电费管理"},{"attributes":{"icon":"fa fa-tint","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/water/water"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"117","parentId":"105","text":"水费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"water/waterInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"118","parentId":"105","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"water/waterUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"119","parentId":"105","text":"水费生成"},{"attributes":{"icon":"fa fa-cc","url":"/water/waterPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"120","parentId":"105","text":"水价管理"}],"hasChildren":true,"hasParent":false,"id":"105","parentId":"0","text":"水费管理"},{"attributes":{"icon":"fa fa-fire","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/heat/heat"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"113","parentId":"104","text":"暖费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"heat/heatInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"114","parentId":"104","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"heat/heatUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"115","parentId":"104","text":"暖费生成"},{"attributes":{"icon":"","url":"/heat/heatPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"116","parentId":"104","text":"暖价管理"}],"hasChildren":true,"hasParent":false,"id":"104","parentId":"0","text":"暖费管理"},{"attributes":{"icon":"fa fa-vcard-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-bomb","url":"/print/print"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"149","parentId":"108","text":"票据记录"}],"hasChildren":true,"hasParent":false,"id":"108","parentId":"0","text":"票据管理"},{"attributes":{"icon":"fa fa-bar-chart","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-area-chart","url":"/chart/graph_echarts.html"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","text":"百度chart"},{"attributes":{"icon":"fa fa-sun-o","url":"charts/countDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"109","parentId":"97","text":"日统计报表"},{"attributes":{"icon":"fa fa-registered","url":"charts/countMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"110","parentId":"97","text":"月统计报表"},{"attributes":{"icon":"fa fa-support","url":"charts/countYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"111","parentId":"97","text":"年统计报表"},{"attributes":{"icon":"fa fa-money","url":"charts/countOwe"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"155","parentId":"97","text":"欠费报表图"},{"attributes":{"icon":"fa fa-tachometer","url":"charts/countRun"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"112","parentId":"97","text":"走势图报表"}],"hasChildren":true,"hasParent":false,"id":"97","parentId":"0","text":"统计管理"},{"attributes":{"icon":"fa fa-bars","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-book","url":"/common/dict"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"78","parentId":"1","text":"数据字典"},{"attributes":{"icon":"fa fa-folder-open","url":"/common/sysFile"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"71","parentId":"1","text":"文件管理"}],"h(String), 127.0.0.1(String), 2019-04-03 17:49:21.375(Timestamp)
2019-04-03 17:49:21 -<==    Updates: 1
2019-04-03 17:49:21 -请求地址 : http://localhost:8081/main
2019-04-03 17:49:21 -HTTP METHOD : GET
2019-04-03 17:49:21 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 17:49:21 -参数 : []
2019-04-03 17:49:21 -耗时 : 1
2019-04-03 17:49:21 -返回值 : main
2019-04-03 17:49:21 -请求地址 : http://localhost:8081/oa/notify/message
2019-04-03 17:49:21 -HTTP METHOD : GET
2019-04-03 17:49:21 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2019-04-03 17:49:21 -参数 : []
2019-04-03 17:49:21 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2019-04-03 17:49:21 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2019-04-03 17:49:21 -<==      Total: 0
2019-04-03 17:49:21 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2019-04-03 17:49:21 -==> Parameters: 1(Long), 0(String)
2019-04-03 17:49:21 -<==      Total: 1
2019-04-03 17:49:21 -耗时 : 7
2019-04-03 17:49:21 -返回值 : com.bootdo.common.utils.PageUtils@6fd211f6
2019-04-03 17:49:21 -请求地址 : http://localhost:8081/main
2019-04-03 17:49:21 -HTTP METHOD : GET
2019-04-03 17:49:21 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 17:49:21 -参数 : []
2019-04-03 17:49:21 -耗时 : 6
2019-04-03 17:49:21 -返回值 : main
2019-04-03 17:49:28 -请求地址 : http://localhost:8081/elec/elec
2019-04-03 17:49:28 -HTTP METHOD : GET
2019-04-03 17:49:28 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.Elec
2019-04-03 17:49:28 -参数 : []
2019-04-03 17:49:28 -耗时 : 0
2019-04-03 17:49:28 -返回值 : elec/elec/elec
2019-04-03 17:49:29 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-03 17:49:29 -HTTP METHOD : GET
2019-04-03 17:49:29 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 17:49:29 -参数 : [userType]
2019-04-03 17:49:29 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 17:49:29 -==> Parameters: userType(String)
2019-04-03 17:49:29 -<==      Total: 2
2019-04-03 17:49:29 -耗时 : 4
2019-04-03 17:49:29 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 17:49:29 -请求地址 : http://localhost:8081/elec/elec/list
2019-04-03 17:49:29 -HTTP METHOD : GET
2019-04-03 17:49:29 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.list
2019-04-03 17:49:29 -参数 : [{limit=10, offset=0, userType=, userOrg=, userId=, createTime=, queryType=1}, com.bootdo.elec.domain.ElecDO@581b4044]
2019-04-03 17:49:29 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec order by id asc limit ?, ? 
2019-04-03 17:49:29 -==> Parameters: 0(Integer), 10(Integer)
2019-04-03 17:49:29 -<==      Total: 10
2019-04-03 17:49:29 -==>  Preparing: select count(*) from elec 
2019-04-03 17:49:29 -==> Parameters: 
2019-04-03 17:49:29 -<==      Total: 1
2019-04-03 17:49:29 -耗时 : 9
2019-04-03 17:49:29 -返回值 : com.bootdo.common.utils.PageUtils@2a8da341
2019-04-03 17:49:43 -请求地址 : http://localhost:8081/elec/elec/list
2019-04-03 17:49:43 -HTTP METHOD : GET
2019-04-03 17:49:43 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.list
2019-04-03 17:49:43 -参数 : [{limit=10, offset=10, userType=, userOrg=, userId=, createTime=, queryType=1}, com.bootdo.elec.domain.ElecDO@6891d5d6]
2019-04-03 17:49:43 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec order by id asc limit ?, ? 
2019-04-03 17:49:43 -==> Parameters: 10(Integer), 10(Integer)
2019-04-03 17:49:43 -<==      Total: 5
2019-04-03 17:49:43 -==>  Preparing: select count(*) from elec 
2019-04-03 17:49:43 -==> Parameters: 
2019-04-03 17:49:43 -<==      Total: 1
2019-04-03 17:49:43 -耗时 : 76
2019-04-03 17:49:43 -返回值 : com.bootdo.common.utils.PageUtils@26f21e47
2019-04-03 17:49:53 -请求地址 : http://localhost:8081/index
2019-04-03 17:49:53 -HTTP METHOD : GET
2019-04-03 17:49:53 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2019-04-03 17:49:53 -参数 : [{}]
2019-04-03 17:49:53 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2019-04-03 17:49:53 -==> Parameters: 1(Long)
2019-04-03 17:49:53 -<==      Total: 46
2019-04-03 17:49:53 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2019-04-03 17:49:53 -==> Parameters: 138(Long)
2019-04-03 17:49:53 -<==      Total: 1
2019-04-03 17:49:53 -耗时 : 21
2019-04-03 17:49:53 -返回值 : index_v1
2019-04-03 17:49:53 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 17:49:53 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 21(Integer), com.bootdo.system.controller.LoginController.index()(String), {"menus":[{"attributes":{"icon":"fa fa-money","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-money","url":"/moneyList/moneyList"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"102","parentId":"106","text":"现金缴费"},{"attributes":{"icon":"fa fa-book","url":"/moneyLog/elecLog"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"107","parentId":"106","text":"缴费记录"}],"hasChildren":true,"hasParent":false,"id":"106","parentId":"0","text":"收费管理"},{"attributes":{"icon":"fa fa-lightbulb-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/elec/elec"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"121","parentId":"103","text":"电费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"elec/elecInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"122","parentId":"103","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"elec/elecUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"123","parentId":"103","text":"电表上传"},{"attributes":{"icon":"fa fa-cc","url":"/elec/elecPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"124","parentId":"103","text":"电价管理"}],"hasChildren":true,"hasParent":false,"id":"103","parentId":"0","text":"电费管理"},{"attributes":{"icon":"fa fa-tint","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/water/water"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"117","parentId":"105","text":"水费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"water/waterInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"118","parentId":"105","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"water/waterUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"119","parentId":"105","text":"水费生成"},{"attributes":{"icon":"fa fa-cc","url":"/water/waterPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"120","parentId":"105","text":"水价管理"}],"hasChildren":true,"hasParent":false,"id":"105","parentId":"0","text":"水费管理"},{"attributes":{"icon":"fa fa-fire","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/heat/heat"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"113","parentId":"104","text":"暖费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"heat/heatInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"114","parentId":"104","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"heat/heatUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"115","parentId":"104","text":"暖费生成"},{"attributes":{"icon":"","url":"/heat/heatPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"116","parentId":"104","text":"暖价管理"}],"hasChildren":true,"hasParent":false,"id":"104","parentId":"0","text":"暖费管理"},{"attributes":{"icon":"fa fa-vcard-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-bomb","url":"/print/print"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"149","parentId":"108","text":"票据记录"}],"hasChildren":true,"hasParent":false,"id":"108","parentId":"0","text":"票据管理"},{"attributes":{"icon":"fa fa-bar-chart","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-area-chart","url":"/chart/graph_echarts.html"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","text":"百度chart"},{"attributes":{"icon":"fa fa-sun-o","url":"charts/countDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"109","parentId":"97","text":"日统计报表"},{"attributes":{"icon":"fa fa-registered","url":"charts/countMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"110","parentId":"97","text":"月统计报表"},{"attributes":{"icon":"fa fa-support","url":"charts/countYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"111","parentId":"97","text":"年统计报表"},{"attributes":{"icon":"fa fa-money","url":"charts/countOwe"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"155","parentId":"97","text":"欠费报表图"},{"attributes":{"icon":"fa fa-tachometer","url":"charts/countRun"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"112","parentId":"97","text":"走势图报表"}],"hasChildren":true,"hasParent":false,"id":"97","parentId":"0","text":"统计管理"},{"attributes":{"icon":"fa fa-bars","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-book","url":"/common/dict"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"78","parentId":"1","text":"数据字典"},{"attributes":{"icon":"fa fa-folder-open","url":"/common/sysFile"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"71","parentId":"1","text":"文件管理"}],"h(String), 127.0.0.1(String), 2019-04-03 17:49:53.246(Timestamp)
2019-04-03 17:49:53 -请求地址 : http://localhost:8081/main
2019-04-03 17:49:53 -HTTP METHOD : GET
2019-04-03 17:49:53 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 17:49:53 -参数 : []
2019-04-03 17:49:53 -耗时 : 1
2019-04-03 17:49:53 -返回值 : main
2019-04-03 17:49:53 -<==    Updates: 1
2019-04-03 17:49:53 -请求地址 : http://localhost:8081/oa/notify/message
2019-04-03 17:49:53 -HTTP METHOD : GET
2019-04-03 17:49:53 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2019-04-03 17:49:53 -参数 : []
2019-04-03 17:49:53 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2019-04-03 17:49:53 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2019-04-03 17:49:53 -<==      Total: 0
2019-04-03 17:49:53 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2019-04-03 17:49:53 -==> Parameters: 1(Long), 0(String)
2019-04-03 17:49:53 -<==      Total: 1
2019-04-03 17:49:53 -耗时 : 12
2019-04-03 17:49:53 -返回值 : com.bootdo.common.utils.PageUtils@54a2c589
2019-04-03 17:49:53 -请求地址 : http://localhost:8081/main
2019-04-03 17:49:53 -HTTP METHOD : GET
2019-04-03 17:49:53 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 17:49:53 -参数 : []
2019-04-03 17:49:53 -耗时 : 2
2019-04-03 17:49:53 -返回值 : main
2019-04-03 17:49:55 -请求地址 : http://localhost:8081/elec/elec
2019-04-03 17:49:55 -HTTP METHOD : GET
2019-04-03 17:49:55 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.Elec
2019-04-03 17:49:55 -参数 : []
2019-04-03 17:49:55 -耗时 : 0
2019-04-03 17:49:55 -返回值 : elec/elec/elec
2019-04-03 17:49:55 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-03 17:49:55 -HTTP METHOD : GET
2019-04-03 17:49:55 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 17:49:55 -参数 : [userType]
2019-04-03 17:49:55 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 17:49:55 -==> Parameters: userType(String)
2019-04-03 17:49:55 -<==      Total: 2
2019-04-03 17:49:55 -耗时 : 4
2019-04-03 17:49:55 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 17:49:55 -请求地址 : http://localhost:8081/elec/elec/list
2019-04-03 17:49:55 -HTTP METHOD : GET
2019-04-03 17:49:55 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.list
2019-04-03 17:49:55 -参数 : [{limit=10, offset=0, userType=, userOrg=, userId=, createTime=, queryType=1}, com.bootdo.elec.domain.ElecDO@22e0989]
2019-04-03 17:49:55 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec order by id asc limit ?, ? 
2019-04-03 17:49:55 -==> Parameters: 0(Integer), 10(Integer)
2019-04-03 17:49:55 -<==      Total: 10
2019-04-03 17:49:55 -==>  Preparing: select count(*) from elec 
2019-04-03 17:49:55 -==> Parameters: 
2019-04-03 17:49:55 -<==      Total: 1
2019-04-03 17:49:55 -耗时 : 8
2019-04-03 17:49:55 -返回值 : com.bootdo.common.utils.PageUtils@17f51b
2019-04-03 17:49:57 -请求地址 : http://localhost:8081/elec/elec/list
2019-04-03 17:49:57 -HTTP METHOD : GET
2019-04-03 17:49:57 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.list
2019-04-03 17:49:57 -参数 : [{limit=10, offset=10, userType=, userOrg=, userId=, createTime=, queryType=1}, com.bootdo.elec.domain.ElecDO@25c85985]
2019-04-03 17:49:57 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec order by id asc limit ?, ? 
2019-04-03 17:49:57 -==> Parameters: 10(Integer), 10(Integer)
2019-04-03 17:49:57 -<==      Total: 5
2019-04-03 17:49:57 -==>  Preparing: select count(*) from elec 
2019-04-03 17:49:57 -==> Parameters: 
2019-04-03 17:49:57 -<==      Total: 1
2019-04-03 17:49:57 -耗时 : 10
2019-04-03 17:49:57 -返回值 : com.bootdo.common.utils.PageUtils@565b2821
2019-04-03 17:50:13 -请求地址 : http://localhost:8081/elec/elec/batchRemove
2019-04-03 17:50:13 -HTTP METHOD : POST
2019-04-03 17:50:13 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.remove
2019-04-03 17:50:13 -参数 : [[Ljava.lang.Long;@dbaff97]
2019-04-03 17:50:13 -==>  Preparing: delete from elec where id in ( ? , ? ) 
2019-04-03 17:50:13 -==> Parameters: 17(Long), 18(Long)
2019-04-03 17:50:14 -<==    Updates: 2
2019-04-03 17:50:14 -耗时 : 144
2019-04-03 17:50:14 -返回值 : {msg=操作成功, code=0}
2019-04-03 17:50:14 -请求地址 : http://localhost:8081/elec/elec/list
2019-04-03 17:50:14 -HTTP METHOD : GET
2019-04-03 17:50:14 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.list
2019-04-03 17:50:14 -参数 : [{limit=10, offset=10, userType=, userOrg=, userId=, createTime=, queryType=2}, com.bootdo.elec.domain.ElecDO@40ab402a]
2019-04-03 17:50:14 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec WHERE `elec_sum` < 0 order by id asc limit ?, ? 
2019-04-03 17:50:14 -==> Parameters: 10(Integer), 10(Integer)
2019-04-03 17:50:14 -<==      Total: 0
2019-04-03 17:50:14 -==>  Preparing: select count(*) from elec WHERE `elec_sum` < 0 
2019-04-03 17:50:14 -==> Parameters: 
2019-04-03 17:50:14 -<==      Total: 1
2019-04-03 17:50:14 -耗时 : 7
2019-04-03 17:50:14 -返回值 : com.bootdo.common.utils.PageUtils@29100d27
2019-04-03 17:50:19 -请求地址 : http://localhost:8081/index
2019-04-03 17:50:19 -HTTP METHOD : GET
2019-04-03 17:50:19 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2019-04-03 17:50:19 -参数 : [{}]
2019-04-03 17:50:19 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2019-04-03 17:50:19 -==> Parameters: 1(Long)
2019-04-03 17:50:19 -<==      Total: 46
2019-04-03 17:50:19 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2019-04-03 17:50:19 -==> Parameters: 138(Long)
2019-04-03 17:50:19 -<==      Total: 1
2019-04-03 17:50:19 -耗时 : 28
2019-04-03 17:50:19 -返回值 : index_v1
2019-04-03 17:50:19 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 17:50:19 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 28(Integer), com.bootdo.system.controller.LoginController.index()(String), {"menus":[{"attributes":{"icon":"fa fa-money","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-money","url":"/moneyList/moneyList"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"102","parentId":"106","text":"现金缴费"},{"attributes":{"icon":"fa fa-book","url":"/moneyLog/elecLog"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"107","parentId":"106","text":"缴费记录"}],"hasChildren":true,"hasParent":false,"id":"106","parentId":"0","text":"收费管理"},{"attributes":{"icon":"fa fa-lightbulb-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/elec/elec"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"121","parentId":"103","text":"电费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"elec/elecInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"122","parentId":"103","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"elec/elecUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"123","parentId":"103","text":"电表上传"},{"attributes":{"icon":"fa fa-cc","url":"/elec/elecPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"124","parentId":"103","text":"电价管理"}],"hasChildren":true,"hasParent":false,"id":"103","parentId":"0","text":"电费管理"},{"attributes":{"icon":"fa fa-tint","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/water/water"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"117","parentId":"105","text":"水费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"water/waterInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"118","parentId":"105","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"water/waterUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"119","parentId":"105","text":"水费生成"},{"attributes":{"icon":"fa fa-cc","url":"/water/waterPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"120","parentId":"105","text":"水价管理"}],"hasChildren":true,"hasParent":false,"id":"105","parentId":"0","text":"水费管理"},{"attributes":{"icon":"fa fa-fire","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/heat/heat"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"113","parentId":"104","text":"暖费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"heat/heatInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"114","parentId":"104","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"heat/heatUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"115","parentId":"104","text":"暖费生成"},{"attributes":{"icon":"","url":"/heat/heatPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"116","parentId":"104","text":"暖价管理"}],"hasChildren":true,"hasParent":false,"id":"104","parentId":"0","text":"暖费管理"},{"attributes":{"icon":"fa fa-vcard-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-bomb","url":"/print/print"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"149","parentId":"108","text":"票据记录"}],"hasChildren":true,"hasParent":false,"id":"108","parentId":"0","text":"票据管理"},{"attributes":{"icon":"fa fa-bar-chart","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-area-chart","url":"/chart/graph_echarts.html"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","text":"百度chart"},{"attributes":{"icon":"fa fa-sun-o","url":"charts/countDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"109","parentId":"97","text":"日统计报表"},{"attributes":{"icon":"fa fa-registered","url":"charts/countMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"110","parentId":"97","text":"月统计报表"},{"attributes":{"icon":"fa fa-support","url":"charts/countYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"111","parentId":"97","text":"年统计报表"},{"attributes":{"icon":"fa fa-money","url":"charts/countOwe"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"155","parentId":"97","text":"欠费报表图"},{"attributes":{"icon":"fa fa-tachometer","url":"charts/countRun"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"112","parentId":"97","text":"走势图报表"}],"hasChildren":true,"hasParent":false,"id":"97","parentId":"0","text":"统计管理"},{"attributes":{"icon":"fa fa-bars","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-book","url":"/common/dict"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"78","parentId":"1","text":"数据字典"},{"attributes":{"icon":"fa fa-folder-open","url":"/common/sysFile"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"71","parentId":"1","text":"文件管理"}],"h(String), 127.0.0.1(String), 2019-04-03 17:50:19.905(Timestamp)
2019-04-03 17:50:19 -<==    Updates: 1
2019-04-03 17:50:19 -请求地址 : http://localhost:8081/main
2019-04-03 17:50:19 -HTTP METHOD : GET
2019-04-03 17:50:19 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 17:50:19 -参数 : []
2019-04-03 17:50:19 -耗时 : 1
2019-04-03 17:50:19 -返回值 : main
2019-04-03 17:50:20 -请求地址 : http://localhost:8081/oa/notify/message
2019-04-03 17:50:20 -HTTP METHOD : GET
2019-04-03 17:50:20 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2019-04-03 17:50:20 -参数 : []
2019-04-03 17:50:20 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2019-04-03 17:50:20 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2019-04-03 17:50:20 -<==      Total: 0
2019-04-03 17:50:20 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2019-04-03 17:50:20 -==> Parameters: 1(Long), 0(String)
2019-04-03 17:50:20 -<==      Total: 1
2019-04-03 17:50:20 -耗时 : 13
2019-04-03 17:50:20 -返回值 : com.bootdo.common.utils.PageUtils@18b43ae
2019-04-03 17:50:20 -请求地址 : http://localhost:8081/main
2019-04-03 17:50:20 -HTTP METHOD : GET
2019-04-03 17:50:20 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 17:50:20 -参数 : []
2019-04-03 17:50:20 -耗时 : 1
2019-04-03 17:50:20 -返回值 : main
2019-04-03 17:50:22 -请求地址 : http://localhost:8081/elec/elec
2019-04-03 17:50:22 -HTTP METHOD : GET
2019-04-03 17:50:22 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.Elec
2019-04-03 17:50:22 -参数 : []
2019-04-03 17:50:22 -耗时 : 0
2019-04-03 17:50:22 -返回值 : elec/elec/elec
2019-04-03 17:50:23 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-03 17:50:23 -HTTP METHOD : GET
2019-04-03 17:50:23 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 17:50:23 -参数 : [userType]
2019-04-03 17:50:23 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 17:50:23 -==> Parameters: userType(String)
2019-04-03 17:50:23 -<==      Total: 2
2019-04-03 17:50:23 -耗时 : 5
2019-04-03 17:50:23 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 17:50:23 -请求地址 : http://localhost:8081/elec/elec/list
2019-04-03 17:50:23 -HTTP METHOD : GET
2019-04-03 17:50:23 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.list
2019-04-03 17:50:23 -参数 : [{limit=10, offset=0, userType=, userOrg=, userId=, createTime=, queryType=1}, com.bootdo.elec.domain.ElecDO@3e0bd1a9]
2019-04-03 17:50:23 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec order by id asc limit ?, ? 
2019-04-03 17:50:23 -==> Parameters: 0(Integer), 10(Integer)
2019-04-03 17:50:23 -<==      Total: 10
2019-04-03 17:50:23 -==>  Preparing: select count(*) from elec 
2019-04-03 17:50:23 -==> Parameters: 
2019-04-03 17:50:23 -<==      Total: 1
2019-04-03 17:50:23 -耗时 : 8
2019-04-03 17:50:23 -返回值 : com.bootdo.common.utils.PageUtils@4cdcad4a
2019-04-03 17:52:58 -请求地址 : http://localhost:8081/index
2019-04-03 17:52:58 -HTTP METHOD : GET
2019-04-03 17:52:58 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2019-04-03 17:52:58 -参数 : [{}]
2019-04-03 17:52:58 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2019-04-03 17:52:58 -==> Parameters: 1(Long)
2019-04-03 17:52:58 -<==      Total: 46
2019-04-03 17:52:58 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2019-04-03 17:52:58 -==> Parameters: 138(Long)
2019-04-03 17:52:58 -<==      Total: 1
2019-04-03 17:52:58 -耗时 : 19
2019-04-03 17:52:58 -返回值 : index_v1
2019-04-03 17:52:58 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 17:52:58 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 19(Integer), com.bootdo.system.controller.LoginController.index()(String), {"menus":[{"attributes":{"icon":"fa fa-money","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-money","url":"/moneyList/moneyList"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"102","parentId":"106","text":"现金缴费"},{"attributes":{"icon":"fa fa-book","url":"/moneyLog/elecLog"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"107","parentId":"106","text":"缴费记录"}],"hasChildren":true,"hasParent":false,"id":"106","parentId":"0","text":"收费管理"},{"attributes":{"icon":"fa fa-lightbulb-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/elec/elec"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"121","parentId":"103","text":"电费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"elec/elecInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"122","parentId":"103","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"elec/elecUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"123","parentId":"103","text":"电表上传"},{"attributes":{"icon":"fa fa-cc","url":"/elec/elecPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"124","parentId":"103","text":"电价管理"}],"hasChildren":true,"hasParent":false,"id":"103","parentId":"0","text":"电费管理"},{"attributes":{"icon":"fa fa-tint","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/water/water"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"117","parentId":"105","text":"水费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"water/waterInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"118","parentId":"105","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"water/waterUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"119","parentId":"105","text":"水费生成"},{"attributes":{"icon":"fa fa-cc","url":"/water/waterPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"120","parentId":"105","text":"水价管理"}],"hasChildren":true,"hasParent":false,"id":"105","parentId":"0","text":"水费管理"},{"attributes":{"icon":"fa fa-fire","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/heat/heat"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"113","parentId":"104","text":"暖费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"heat/heatInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"114","parentId":"104","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"heat/heatUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"115","parentId":"104","text":"暖费生成"},{"attributes":{"icon":"","url":"/heat/heatPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"116","parentId":"104","text":"暖价管理"}],"hasChildren":true,"hasParent":false,"id":"104","parentId":"0","text":"暖费管理"},{"attributes":{"icon":"fa fa-vcard-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-bomb","url":"/print/print"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"149","parentId":"108","text":"票据记录"}],"hasChildren":true,"hasParent":false,"id":"108","parentId":"0","text":"票据管理"},{"attributes":{"icon":"fa fa-bar-chart","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-area-chart","url":"/chart/graph_echarts.html"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","text":"百度chart"},{"attributes":{"icon":"fa fa-sun-o","url":"charts/countDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"109","parentId":"97","text":"日统计报表"},{"attributes":{"icon":"fa fa-registered","url":"charts/countMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"110","parentId":"97","text":"月统计报表"},{"attributes":{"icon":"fa fa-money","url":"charts/countOwe"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"155","parentId":"97","text":"欠费报表图"},{"attributes":{"icon":"fa fa-support","url":"charts/countYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"111","parentId":"97","text":"年统计报表"},{"attributes":{"icon":"fa fa-tachometer","url":"charts/countRun"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"112","parentId":"97","text":"走势图报表"}],"hasChildren":true,"hasParent":false,"id":"97","parentId":"0","text":"统计管理"},{"attributes":{"icon":"fa fa-bars","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-book","url":"/common/dict"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"78","parentId":"1","text":"数据字典"},{"attributes":{"icon":"fa fa-folder-open","url":"/common/sysFile"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"71","parentId":"1","text":"文件管理"}],"h(String), 127.0.0.1(String), 2019-04-03 17:52:58.737(Timestamp)
2019-04-03 17:52:58 -<==    Updates: 1
2019-04-03 17:52:58 -请求地址 : http://localhost:8081/main
2019-04-03 17:52:58 -HTTP METHOD : GET
2019-04-03 17:52:58 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 17:52:58 -参数 : []
2019-04-03 17:52:58 -耗时 : 0
2019-04-03 17:52:58 -返回值 : main
2019-04-03 17:52:59 -请求地址 : http://localhost:8081/oa/notify/message
2019-04-03 17:52:59 -HTTP METHOD : GET
2019-04-03 17:52:59 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2019-04-03 17:52:59 -参数 : []
2019-04-03 17:52:59 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2019-04-03 17:52:59 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2019-04-03 17:52:59 -<==      Total: 0
2019-04-03 17:52:59 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2019-04-03 17:52:59 -==> Parameters: 1(Long), 0(String)
2019-04-03 17:52:59 -<==      Total: 1
2019-04-03 17:52:59 -耗时 : 6
2019-04-03 17:52:59 -返回值 : com.bootdo.common.utils.PageUtils@3d88fbb0
2019-04-03 17:52:59 -请求地址 : http://localhost:8081/main
2019-04-03 17:52:59 -HTTP METHOD : GET
2019-04-03 17:52:59 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 17:52:59 -参数 : []
2019-04-03 17:52:59 -耗时 : 1
2019-04-03 17:52:59 -返回值 : main
2019-04-03 17:53:01 -==>  Preparing: select distinct m.perms from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id = ur.role_id where ur.user_id = ? 
2019-04-03 17:53:01 -==> Parameters: 1(Long)
2019-04-03 17:53:01 -<==      Total: 90
2019-04-03 17:53:01 -请求地址 : http://localhost:8081/elec/elec
2019-04-03 17:53:01 -HTTP METHOD : GET
2019-04-03 17:53:01 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.Elec
2019-04-03 17:53:01 -参数 : []
2019-04-03 17:53:01 -耗时 : 0
2019-04-03 17:53:01 -返回值 : elec/elec/elec
2019-04-03 17:53:02 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-03 17:53:02 -HTTP METHOD : GET
2019-04-03 17:53:02 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 17:53:02 -参数 : [userType]
2019-04-03 17:53:02 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 17:53:02 -==> Parameters: userType(String)
2019-04-03 17:53:02 -<==      Total: 2
2019-04-03 17:53:02 -耗时 : 3
2019-04-03 17:53:02 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 17:53:02 -请求地址 : http://localhost:8081/elec/elec/list
2019-04-03 17:53:02 -HTTP METHOD : GET
2019-04-03 17:53:02 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.list
2019-04-03 17:53:02 -参数 : [{limit=10, offset=0, userType=, userOrg=, userId=, createTime=, queryType=1}, com.bootdo.elec.domain.ElecDO@4a6ff330]
2019-04-03 17:53:02 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec order by id asc limit ?, ? 
2019-04-03 17:53:02 -==> Parameters: 0(Integer), 10(Integer)
2019-04-03 17:53:02 -<==      Total: 10
2019-04-03 17:53:02 -==>  Preparing: select count(*) from elec 
2019-04-03 17:53:02 -==> Parameters: 
2019-04-03 17:53:02 -<==      Total: 1
2019-04-03 17:53:02 -耗时 : 11
2019-04-03 17:53:02 -返回值 : com.bootdo.common.utils.PageUtils@49bd873b
2019-04-03 17:53:06 -请求地址 : http://localhost:8081/elec/elec/add
2019-04-03 17:53:06 -HTTP METHOD : GET
2019-04-03 17:53:06 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.add
2019-04-03 17:53:06 -参数 : []
2019-04-03 17:53:06 -耗时 : 0
2019-04-03 17:53:06 -返回值 : elec/elec/add
2019-04-03 17:53:06 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-03 17:53:06 -HTTP METHOD : GET
2019-04-03 17:53:06 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 17:53:06 -参数 : [userType]
2019-04-03 17:53:06 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 17:53:06 -==> Parameters: userType(String)
2019-04-03 17:53:06 -请求地址 : http://localhost:8081/common/dict/list/userState
2019-04-03 17:53:06 -请求地址 : http://localhost:8081/common/dict/list/elecType
2019-04-03 17:53:06 -HTTP METHOD : GET
2019-04-03 17:53:06 -HTTP METHOD : GET
2019-04-03 17:53:06 -<==      Total: 2
2019-04-03 17:53:06 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 17:53:06 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 17:53:06 -参数 : [userState]
2019-04-03 17:53:06 -参数 : [elecType]
2019-04-03 17:53:06 -耗时 : 4
2019-04-03 17:53:06 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 17:53:06 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 17:53:06 -==> Parameters: elecType(String)
2019-04-03 17:53:06 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 17:53:06 -==> Parameters: userState(String)
2019-04-03 17:53:06 -<==      Total: 2
2019-04-03 17:53:06 -耗时 : 5
2019-04-03 17:53:06 -返回值 : [DictDO{id=126, name='使用中', value='1', type='userState', description='用户状态', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=125, name='未使用', value='0', type='userState', description='用户状态', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 17:53:06 -<==      Total: 2
2019-04-03 17:53:06 -耗时 : 10
2019-04-03 17:53:06 -返回值 : [DictDO{id=139, name='民用电', value='1', type='elecType', description='电量性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=138, name='商业电', value='0', type='elecType', description='电量类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 17:53:29 -请求地址 : http://localhost:8081/elec/elec/save
2019-04-03 17:53:29 -HTTP METHOD : POST
2019-04-03 17:53:29 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.save
2019-04-03 17:53:29 -参数 : [com.bootdo.elec.domain.ElecDO@3ecb7610]
2019-04-03 17:53:29 -==>  Preparing: insert into elec ( `user_id`, `user_name`, `user_type`, `user_org`, `user_tell`, `user_state`, `wages_id`, `elec_type`, `elec_price`, `start`, `end`, `hu`, `elec_amount`, `elec_cost`, `elec_sum`, `create_time`, `create_by`, `update_time`, `update_by`, `remark` ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 17:53:29 -==> Parameters: 1(String), 1(String), (String), (String), (String), 1(String), 1(String), 0(String), 1(BigDecimal), 1(String), 1(String), 1(Integer), 1(BigDecimal), 1(BigDecimal), 1(BigDecimal), 2019-04(String), 1(Long), 2019-04-03 17:53:29.35(Timestamp), 1(Long), (String)
2019-04-03 17:53:29 -<==    Updates: 1
2019-04-03 17:53:29 -耗时 : 63
2019-04-03 17:53:29 -返回值 : {msg=操作成功, code=0}
2019-04-03 17:53:29 -请求地址 : http://localhost:8081/elec/elec/list
2019-04-03 17:53:29 -HTTP METHOD : GET
2019-04-03 17:53:29 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.list
2019-04-03 17:53:29 -参数 : [{limit=10, offset=0, userType=, userOrg=, userId=, createTime=, queryType=2}, com.bootdo.elec.domain.ElecDO@57a25c1c]
2019-04-03 17:53:29 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec WHERE `elec_sum` < 0 order by id asc limit ?, ? 
2019-04-03 17:53:29 -==> Parameters: 0(Integer), 10(Integer)
2019-04-03 17:53:29 -<==      Total: 2
2019-04-03 17:53:29 -==>  Preparing: select count(*) from elec WHERE `elec_sum` < 0 
2019-04-03 17:53:29 -==> Parameters: 
2019-04-03 17:53:29 -<==      Total: 1
2019-04-03 17:53:29 -耗时 : 12
2019-04-03 17:53:29 -返回值 : com.bootdo.common.utils.PageUtils@5a91d09f
2019-04-03 17:53:42 -请求地址 : http://localhost:8081/index
2019-04-03 17:53:42 -HTTP METHOD : GET
2019-04-03 17:53:42 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2019-04-03 17:53:42 -参数 : [{}]
2019-04-03 17:53:42 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2019-04-03 17:53:42 -==> Parameters: 1(Long)
2019-04-03 17:53:42 -<==      Total: 46
2019-04-03 17:53:42 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2019-04-03 17:53:42 -==> Parameters: 138(Long)
2019-04-03 17:53:42 -<==      Total: 1
2019-04-03 17:53:42 -耗时 : 21
2019-04-03 17:53:42 -返回值 : index_v1
2019-04-03 17:53:42 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 17:53:42 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 21(Integer), com.bootdo.system.controller.LoginController.index()(String), {"menus":[{"attributes":{"icon":"fa fa-money","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-money","url":"/moneyList/moneyList"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"102","parentId":"106","text":"现金缴费"},{"attributes":{"icon":"fa fa-book","url":"/moneyLog/elecLog"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"107","parentId":"106","text":"缴费记录"}],"hasChildren":true,"hasParent":false,"id":"106","parentId":"0","text":"收费管理"},{"attributes":{"icon":"fa fa-lightbulb-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/elec/elec"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"121","parentId":"103","text":"电费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"elec/elecInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"122","parentId":"103","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"elec/elecUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"123","parentId":"103","text":"电表上传"},{"attributes":{"icon":"fa fa-cc","url":"/elec/elecPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"124","parentId":"103","text":"电价管理"}],"hasChildren":true,"hasParent":false,"id":"103","parentId":"0","text":"电费管理"},{"attributes":{"icon":"fa fa-tint","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/water/water"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"117","parentId":"105","text":"水费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"water/waterInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"118","parentId":"105","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"water/waterUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"119","parentId":"105","text":"水费生成"},{"attributes":{"icon":"fa fa-cc","url":"/water/waterPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"120","parentId":"105","text":"水价管理"}],"hasChildren":true,"hasParent":false,"id":"105","parentId":"0","text":"水费管理"},{"attributes":{"icon":"fa fa-fire","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/heat/heat"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"113","parentId":"104","text":"暖费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"heat/heatInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"114","parentId":"104","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"heat/heatUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"115","parentId":"104","text":"暖费生成"},{"attributes":{"icon":"","url":"/heat/heatPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"116","parentId":"104","text":"暖价管理"}],"hasChildren":true,"hasParent":false,"id":"104","parentId":"0","text":"暖费管理"},{"attributes":{"icon":"fa fa-vcard-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-bomb","url":"/print/print"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"149","parentId":"108","text":"票据记录"}],"hasChildren":true,"hasParent":false,"id":"108","parentId":"0","text":"票据管理"},{"attributes":{"icon":"fa fa-bar-chart","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-area-chart","url":"/chart/graph_echarts.html"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","text":"百度chart"},{"attributes":{"icon":"fa fa-sun-o","url":"charts/countDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"109","parentId":"97","text":"日统计报表"},{"attributes":{"icon":"fa fa-registered","url":"charts/countMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"110","parentId":"97","text":"月统计报表"},{"attributes":{"icon":"fa fa-money","url":"charts/countOwe"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"155","parentId":"97","text":"欠费报表图"},{"attributes":{"icon":"fa fa-support","url":"charts/countYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"111","parentId":"97","text":"年统计报表"},{"attributes":{"icon":"fa fa-tachometer","url":"charts/countRun"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"112","parentId":"97","text":"走势图报表"}],"hasChildren":true,"hasParent":false,"id":"97","parentId":"0","text":"统计管理"},{"attributes":{"icon":"fa fa-bars","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-book","url":"/common/dict"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"78","parentId":"1","text":"数据字典"},{"attributes":{"icon":"fa fa-folder-open","url":"/common/sysFile"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"71","parentId":"1","text":"文件管理"}],"h(String), 127.0.0.1(String), 2019-04-03 17:53:42.429(Timestamp)
2019-04-03 17:53:42 -请求地址 : http://localhost:8081/main
2019-04-03 17:53:42 -HTTP METHOD : GET
2019-04-03 17:53:42 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 17:53:42 -参数 : []
2019-04-03 17:53:42 -耗时 : 1
2019-04-03 17:53:42 -返回值 : main
2019-04-03 17:53:42 -<==    Updates: 1
2019-04-03 17:53:42 -请求地址 : http://localhost:8081/oa/notify/message
2019-04-03 17:53:42 -HTTP METHOD : GET
2019-04-03 17:53:42 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2019-04-03 17:53:42 -参数 : []
2019-04-03 17:53:42 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2019-04-03 17:53:42 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2019-04-03 17:53:42 -<==      Total: 0
2019-04-03 17:53:42 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2019-04-03 17:53:42 -==> Parameters: 1(Long), 0(String)
2019-04-03 17:53:42 -<==      Total: 1
2019-04-03 17:53:42 -耗时 : 9
2019-04-03 17:53:42 -返回值 : com.bootdo.common.utils.PageUtils@741d3880
2019-04-03 17:53:42 -请求地址 : http://localhost:8081/main
2019-04-03 17:53:42 -HTTP METHOD : GET
2019-04-03 17:53:42 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 17:53:42 -参数 : []
2019-04-03 17:53:42 -耗时 : 1
2019-04-03 17:53:42 -返回值 : main
2019-04-03 17:53:45 -请求地址 : http://localhost:8081/elec/elecPrice
2019-04-03 17:53:45 -HTTP METHOD : GET
2019-04-03 17:53:45 -CLASS_METHOD : com.bootdo.elec.controller.ElecPriceController.ElecPrice
2019-04-03 17:53:45 -参数 : []
2019-04-03 17:53:45 -耗时 : 0
2019-04-03 17:53:45 -返回值 : elec/elecPrice/elecPrice
2019-04-03 17:53:46 -请求地址 : http://localhost:8081/elec/elecPrice/list
2019-04-03 17:53:46 -HTTP METHOD : GET
2019-04-03 17:53:46 -CLASS_METHOD : com.bootdo.elec.controller.ElecPriceController.list
2019-04-03 17:53:46 -参数 : [{limit=10, offset=0}]
2019-04-03 17:53:46 -==>  Preparing: select `id`,`elec_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `elec_org`) AS elecOrgName,`business_elec`,`civil_elec`,`noindustry_elec`,`industry_elec`,`special_1`,`special_2`,`special_3`,`special_4`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec_price order by id desc limit ?, ? 
2019-04-03 17:53:46 -==> Parameters: 0(Integer), 10(Integer)
2019-04-03 17:53:46 -<==      Total: 2
2019-04-03 17:53:46 -==>  Preparing: select count(*) from elec_price 
2019-04-03 17:53:46 -==> Parameters: 
2019-04-03 17:53:46 -<==      Total: 1
2019-04-03 17:53:46 -耗时 : 143
2019-04-03 17:53:46 -返回值 : com.bootdo.common.utils.PageUtils@246640
2019-04-03 17:53:46 -请求地址 : http://localhost:8081/elec/elec
2019-04-03 17:53:46 -HTTP METHOD : GET
2019-04-03 17:53:46 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.Elec
2019-04-03 17:53:46 -参数 : []
2019-04-03 17:53:46 -耗时 : 1
2019-04-03 17:53:46 -返回值 : elec/elec/elec
2019-04-03 17:53:46 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-03 17:53:46 -HTTP METHOD : GET
2019-04-03 17:53:46 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 17:53:46 -参数 : [userType]
2019-04-03 17:53:46 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 17:53:46 -==> Parameters: userType(String)
2019-04-03 17:53:46 -<==      Total: 2
2019-04-03 17:53:46 -耗时 : 5
2019-04-03 17:53:46 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 17:53:46 -请求地址 : http://localhost:8081/elec/elec/list
2019-04-03 17:53:46 -HTTP METHOD : GET
2019-04-03 17:53:46 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.list
2019-04-03 17:53:46 -参数 : [{limit=10, offset=0, userType=, userOrg=, userId=, createTime=, queryType=1}, com.bootdo.elec.domain.ElecDO@6841e41e]
2019-04-03 17:53:46 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec order by id asc limit ?, ? 
2019-04-03 17:53:46 -==> Parameters: 0(Integer), 10(Integer)
2019-04-03 17:53:46 -<==      Total: 10
2019-04-03 17:53:46 -==>  Preparing: select count(*) from elec 
2019-04-03 17:53:46 -==> Parameters: 
2019-04-03 17:53:46 -<==      Total: 1
2019-04-03 17:53:46 -耗时 : 13
2019-04-03 17:53:46 -返回值 : com.bootdo.common.utils.PageUtils@261a3d5f
2019-04-03 17:53:52 -请求地址 : http://localhost:8081/elec/elec/add
2019-04-03 17:53:52 -HTTP METHOD : GET
2019-04-03 17:53:52 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.add
2019-04-03 17:53:52 -参数 : []
2019-04-03 17:53:52 -耗时 : 0
2019-04-03 17:53:52 -返回值 : elec/elec/add
2019-04-03 17:53:52 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-03 17:53:52 -HTTP METHOD : GET
2019-04-03 17:53:52 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 17:53:52 -参数 : [userType]
2019-04-03 17:53:52 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 17:53:52 -==> Parameters: userType(String)
2019-04-03 17:53:52 -<==      Total: 2
2019-04-03 17:53:52 -请求地址 : http://localhost:8081/common/dict/list/userState
2019-04-03 17:53:52 -HTTP METHOD : GET
2019-04-03 17:53:52 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 17:53:52 -参数 : [userState]
2019-04-03 17:53:52 -请求地址 : http://localhost:8081/common/dict/list/elecType
2019-04-03 17:53:52 -HTTP METHOD : GET
2019-04-03 17:53:52 -耗时 : 4
2019-04-03 17:53:52 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 17:53:52 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 17:53:52 -参数 : [elecType]
2019-04-03 17:53:52 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 17:53:52 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 17:53:52 -==> Parameters: userState(String)
2019-04-03 17:53:52 -==> Parameters: elecType(String)
2019-04-03 17:53:52 -<==      Total: 2
2019-04-03 17:53:52 -耗时 : 3
2019-04-03 17:53:52 -返回值 : [DictDO{id=139, name='民用电', value='1', type='elecType', description='电量性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=138, name='商业电', value='0', type='elecType', description='电量类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 17:53:52 -<==      Total: 2
2019-04-03 17:53:52 -耗时 : 9
2019-04-03 17:53:52 -返回值 : [DictDO{id=126, name='使用中', value='1', type='userState', description='用户状态', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=125, name='未使用', value='0', type='userState', description='用户状态', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 17:54:05 -请求地址 : http://localhost:8081/system/sysDept/treeView
2019-04-03 17:54:05 -HTTP METHOD : GET
2019-04-03 17:54:05 -CLASS_METHOD : com.bootdo.system.controller.DeptController.treeView
2019-04-03 17:54:05 -参数 : []
2019-04-03 17:54:05 -耗时 : 3
2019-04-03 17:54:05 -返回值 : system/dept/deptTree
2019-04-03 17:54:05 -请求地址 : http://localhost:8081/system/sysDept/tree
2019-04-03 17:54:05 -HTTP METHOD : GET
2019-04-03 17:54:05 -CLASS_METHOD : com.bootdo.system.controller.DeptController.tree
2019-04-03 17:54:05 -参数 : []
2019-04-03 17:54:05 -==>  Preparing: select `dept_id`,`parent_id`,`name`,`order_num`,`del_flag` from sys_dept order by dept_id desc 
2019-04-03 17:54:05 -==> Parameters: 
2019-04-03 17:54:05 -<==      Total: 3
2019-04-03 17:54:05 -耗时 : 4
2019-04-03 17:54:05 -返回值 : {"checked":false,"children":[{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"3","parentId":"1","state":{"opened":true},"text":"牙星"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"2","parentId":"1","state":{"opened":true},"text":"五九"}],"hasChildren":true,"hasParent":false,"id":"1","parentId":"0","state":{"opened":true},"text":"总公司"}
2019-04-03 17:54:22 -请求地址 : http://localhost:8081/elec/elec/save
2019-04-03 17:54:22 -HTTP METHOD : POST
2019-04-03 17:54:22 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.save
2019-04-03 17:54:22 -参数 : [com.bootdo.elec.domain.ElecDO@52bee59f]
2019-04-03 17:54:22 -==>  Preparing: insert into elec ( `user_id`, `user_name`, `user_type`, `user_org`, `user_tell`, `user_state`, `wages_id`, `elec_type`, `elec_price`, `start`, `end`, `hu`, `elec_amount`, `elec_cost`, `elec_sum`, `create_time`, `create_by`, `update_time`, `update_by`, `remark` ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 17:54:22 -==> Parameters: 1(String), 1(String), A(String), 2(String), (String), 1(String), 1(String), (String), 1(BigDecimal), 1(String), 1(String), 1(Integer), 1(BigDecimal), 1(BigDecimal), 1(BigDecimal), 2019-04(String), 1(Long), 2019-04-03 17:54:22.82(Timestamp), 1(Long), (String)
2019-04-03 17:54:22 -<==    Updates: 1
2019-04-03 17:54:22 -耗时 : 74
2019-04-03 17:54:22 -返回值 : {msg=操作成功, code=0}
2019-04-03 17:54:22 -请求地址 : http://localhost:8081/elec/elec/list
2019-04-03 17:54:22 -HTTP METHOD : GET
2019-04-03 17:54:22 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.list
2019-04-03 17:54:22 -参数 : [{limit=10, offset=0, userType=, userOrg=, userId=, createTime=, queryType=2}, com.bootdo.elec.domain.ElecDO@17a2efbd]
2019-04-03 17:54:22 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec WHERE `elec_sum` < 0 order by id asc limit ?, ? 
2019-04-03 17:54:22 -==> Parameters: 0(Integer), 10(Integer)
2019-04-03 17:54:22 -<==      Total: 2
2019-04-03 17:54:22 -==>  Preparing: select count(*) from elec WHERE `elec_sum` < 0 
2019-04-03 17:54:22 -==> Parameters: 
2019-04-03 17:54:22 -<==      Total: 1
2019-04-03 17:54:22 -耗时 : 9
2019-04-03 17:54:22 -返回值 : com.bootdo.common.utils.PageUtils@8800748
2019-04-03 17:54:27 -请求地址 : http://localhost:8081/index
2019-04-03 17:54:27 -HTTP METHOD : GET
2019-04-03 17:54:27 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2019-04-03 17:54:27 -参数 : [{}]
2019-04-03 17:54:27 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2019-04-03 17:54:27 -==> Parameters: 1(Long)
2019-04-03 17:54:27 -<==      Total: 46
2019-04-03 17:54:27 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2019-04-03 17:54:27 -==> Parameters: 138(Long)
2019-04-03 17:54:27 -<==      Total: 1
2019-04-03 17:54:27 -耗时 : 33
2019-04-03 17:54:27 -返回值 : index_v1
2019-04-03 17:54:27 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 17:54:27 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 33(Integer), com.bootdo.system.controller.LoginController.index()(String), {"menus":[{"attributes":{"icon":"fa fa-money","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-money","url":"/moneyList/moneyList"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"102","parentId":"106","text":"现金缴费"},{"attributes":{"icon":"fa fa-book","url":"/moneyLog/elecLog"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"107","parentId":"106","text":"缴费记录"}],"hasChildren":true,"hasParent":false,"id":"106","parentId":"0","text":"收费管理"},{"attributes":{"icon":"fa fa-lightbulb-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/elec/elec"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"121","parentId":"103","text":"电费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"elec/elecInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"122","parentId":"103","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"elec/elecUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"123","parentId":"103","text":"电表上传"},{"attributes":{"icon":"fa fa-cc","url":"/elec/elecPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"124","parentId":"103","text":"电价管理"}],"hasChildren":true,"hasParent":false,"id":"103","parentId":"0","text":"电费管理"},{"attributes":{"icon":"fa fa-tint","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/water/water"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"117","parentId":"105","text":"水费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"water/waterInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"118","parentId":"105","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"water/waterUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"119","parentId":"105","text":"水费生成"},{"attributes":{"icon":"fa fa-cc","url":"/water/waterPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"120","parentId":"105","text":"水价管理"}],"hasChildren":true,"hasParent":false,"id":"105","parentId":"0","text":"水费管理"},{"attributes":{"icon":"fa fa-fire","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/heat/heat"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"113","parentId":"104","text":"暖费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"heat/heatInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"114","parentId":"104","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"heat/heatUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"115","parentId":"104","text":"暖费生成"},{"attributes":{"icon":"","url":"/heat/heatPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"116","parentId":"104","text":"暖价管理"}],"hasChildren":true,"hasParent":false,"id":"104","parentId":"0","text":"暖费管理"},{"attributes":{"icon":"fa fa-vcard-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-bomb","url":"/print/print"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"149","parentId":"108","text":"票据记录"}],"hasChildren":true,"hasParent":false,"id":"108","parentId":"0","text":"票据管理"},{"attributes":{"icon":"fa fa-bar-chart","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-area-chart","url":"/chart/graph_echarts.html"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","text":"百度chart"},{"attributes":{"icon":"fa fa-sun-o","url":"charts/countDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"109","parentId":"97","text":"日统计报表"},{"attributes":{"icon":"fa fa-registered","url":"charts/countMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"110","parentId":"97","text":"月统计报表"},{"attributes":{"icon":"fa fa-money","url":"charts/countOwe"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"155","parentId":"97","text":"欠费报表图"},{"attributes":{"icon":"fa fa-support","url":"charts/countYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"111","parentId":"97","text":"年统计报表"},{"attributes":{"icon":"fa fa-tachometer","url":"charts/countRun"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"112","parentId":"97","text":"走势图报表"}],"hasChildren":true,"hasParent":false,"id":"97","parentId":"0","text":"统计管理"},{"attributes":{"icon":"fa fa-bars","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-book","url":"/common/dict"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"78","parentId":"1","text":"数据字典"},{"attributes":{"icon":"fa fa-folder-open","url":"/common/sysFile"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"71","parentId":"1","text":"文件管理"}],"h(String), 127.0.0.1(String), 2019-04-03 17:54:27.431(Timestamp)
2019-04-03 17:54:27 -请求地址 : http://localhost:8081/main
2019-04-03 17:54:27 -HTTP METHOD : GET
2019-04-03 17:54:27 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 17:54:27 -参数 : []
2019-04-03 17:54:27 -耗时 : 0
2019-04-03 17:54:27 -返回值 : main
2019-04-03 17:54:27 -<==    Updates: 1
2019-04-03 17:54:27 -请求地址 : http://localhost:8081/oa/notify/message
2019-04-03 17:54:27 -HTTP METHOD : GET
2019-04-03 17:54:27 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2019-04-03 17:54:27 -参数 : []
2019-04-03 17:54:27 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2019-04-03 17:54:27 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2019-04-03 17:54:27 -<==      Total: 0
2019-04-03 17:54:27 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2019-04-03 17:54:27 -==> Parameters: 1(Long), 0(String)
2019-04-03 17:54:27 -<==      Total: 1
2019-04-03 17:54:27 -耗时 : 9
2019-04-03 17:54:27 -返回值 : com.bootdo.common.utils.PageUtils@b143113
2019-04-03 17:54:27 -请求地址 : http://localhost:8081/main
2019-04-03 17:54:27 -HTTP METHOD : GET
2019-04-03 17:54:27 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 17:54:27 -参数 : []
2019-04-03 17:54:27 -耗时 : 3
2019-04-03 17:54:27 -返回值 : main
2019-04-03 17:54:30 -请求地址 : http://localhost:8081/index
2019-04-03 17:54:30 -HTTP METHOD : GET
2019-04-03 17:54:30 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2019-04-03 17:54:30 -参数 : [{}]
2019-04-03 17:54:30 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2019-04-03 17:54:30 -==> Parameters: 1(Long)
2019-04-03 17:54:30 -<==      Total: 46
2019-04-03 17:54:30 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2019-04-03 17:54:30 -==> Parameters: 138(Long)
2019-04-03 17:54:30 -<==      Total: 1
2019-04-03 17:54:30 -耗时 : 33
2019-04-03 17:54:30 -返回值 : index_v1
2019-04-03 17:54:30 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 17:54:30 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 34(Integer), com.bootdo.system.controller.LoginController.index()(String), {"menus":[{"attributes":{"icon":"fa fa-money","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-money","url":"/moneyList/moneyList"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"102","parentId":"106","text":"现金缴费"},{"attributes":{"icon":"fa fa-book","url":"/moneyLog/elecLog"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"107","parentId":"106","text":"缴费记录"}],"hasChildren":true,"hasParent":false,"id":"106","parentId":"0","text":"收费管理"},{"attributes":{"icon":"fa fa-lightbulb-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/elec/elec"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"121","parentId":"103","text":"电费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"elec/elecInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"122","parentId":"103","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"elec/elecUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"123","parentId":"103","text":"电表上传"},{"attributes":{"icon":"fa fa-cc","url":"/elec/elecPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"124","parentId":"103","text":"电价管理"}],"hasChildren":true,"hasParent":false,"id":"103","parentId":"0","text":"电费管理"},{"attributes":{"icon":"fa fa-tint","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/water/water"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"117","parentId":"105","text":"水费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"water/waterInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"118","parentId":"105","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"water/waterUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"119","parentId":"105","text":"水费生成"},{"attributes":{"icon":"fa fa-cc","url":"/water/waterPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"120","parentId":"105","text":"水价管理"}],"hasChildren":true,"hasParent":false,"id":"105","parentId":"0","text":"水费管理"},{"attributes":{"icon":"fa fa-fire","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/heat/heat"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"113","parentId":"104","text":"暖费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"heat/heatInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"114","parentId":"104","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"heat/heatUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"115","parentId":"104","text":"暖费生成"},{"attributes":{"icon":"","url":"/heat/heatPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"116","parentId":"104","text":"暖价管理"}],"hasChildren":true,"hasParent":false,"id":"104","parentId":"0","text":"暖费管理"},{"attributes":{"icon":"fa fa-vcard-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-bomb","url":"/print/print"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"149","parentId":"108","text":"票据记录"}],"hasChildren":true,"hasParent":false,"id":"108","parentId":"0","text":"票据管理"},{"attributes":{"icon":"fa fa-bar-chart","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-area-chart","url":"/chart/graph_echarts.html"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","text":"百度chart"},{"attributes":{"icon":"fa fa-sun-o","url":"charts/countDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"109","parentId":"97","text":"日统计报表"},{"attributes":{"icon":"fa fa-registered","url":"charts/countMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"110","parentId":"97","text":"月统计报表"},{"attributes":{"icon":"fa fa-money","url":"charts/countOwe"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"155","parentId":"97","text":"欠费报表图"},{"attributes":{"icon":"fa fa-support","url":"charts/countYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"111","parentId":"97","text":"年统计报表"},{"attributes":{"icon":"fa fa-tachometer","url":"charts/countRun"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"112","parentId":"97","text":"走势图报表"}],"hasChildren":true,"hasParent":false,"id":"97","parentId":"0","text":"统计管理"},{"attributes":{"icon":"fa fa-bars","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-book","url":"/common/dict"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"78","parentId":"1","text":"数据字典"},{"attributes":{"icon":"fa fa-folder-open","url":"/common/sysFile"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"71","parentId":"1","text":"文件管理"}],"h(String), 127.0.0.1(String), 2019-04-03 17:54:30.664(Timestamp)
2019-04-03 17:54:30 -请求地址 : http://localhost:8081/main
2019-04-03 17:54:30 -HTTP METHOD : GET
2019-04-03 17:54:30 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 17:54:30 -参数 : []
2019-04-03 17:54:30 -耗时 : 0
2019-04-03 17:54:30 -返回值 : main
2019-04-03 17:54:30 -请求地址 : http://localhost:8081/oa/notify/message
2019-04-03 17:54:30 -HTTP METHOD : GET
2019-04-03 17:54:30 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2019-04-03 17:54:30 -参数 : []
2019-04-03 17:54:30 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2019-04-03 17:54:30 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2019-04-03 17:54:30 -<==      Total: 0
2019-04-03 17:54:30 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2019-04-03 17:54:30 -==> Parameters: 1(Long), 0(String)
2019-04-03 17:54:30 -<==      Total: 1
2019-04-03 17:54:30 -耗时 : 9
2019-04-03 17:54:30 -返回值 : com.bootdo.common.utils.PageUtils@1591682f
2019-04-03 17:54:30 -请求地址 : http://localhost:8081/main
2019-04-03 17:54:30 -HTTP METHOD : GET
2019-04-03 17:54:30 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 17:54:30 -参数 : []
2019-04-03 17:54:30 -耗时 : 1
2019-04-03 17:54:30 -返回值 : main
2019-04-03 17:54:30 -<==    Updates: 1
2019-04-03 17:54:33 -请求地址 : http://localhost:8081/elec/elec
2019-04-03 17:54:33 -HTTP METHOD : GET
2019-04-03 17:54:33 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.Elec
2019-04-03 17:54:33 -参数 : []
2019-04-03 17:54:33 -耗时 : 1
2019-04-03 17:54:33 -返回值 : elec/elec/elec
2019-04-03 17:54:33 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-03 17:54:33 -HTTP METHOD : GET
2019-04-03 17:54:33 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 17:54:33 -参数 : [userType]
2019-04-03 17:54:33 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 17:54:33 -==> Parameters: userType(String)
2019-04-03 17:54:33 -<==      Total: 2
2019-04-03 17:54:33 -耗时 : 4
2019-04-03 17:54:33 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 17:54:33 -请求地址 : http://localhost:8081/elec/elec/list
2019-04-03 17:54:33 -HTTP METHOD : GET
2019-04-03 17:54:33 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.list
2019-04-03 17:54:33 -参数 : [{limit=10, offset=0, userType=, userOrg=, userId=, createTime=, queryType=1}, com.bootdo.elec.domain.ElecDO@7f23bb97]
2019-04-03 17:54:33 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec order by id asc limit ?, ? 
2019-04-03 17:54:33 -==> Parameters: 0(Integer), 10(Integer)
2019-04-03 17:54:33 -<==      Total: 10
2019-04-03 17:54:33 -==>  Preparing: select count(*) from elec 
2019-04-03 17:54:33 -==> Parameters: 
2019-04-03 17:54:33 -<==      Total: 1
2019-04-03 17:54:33 -耗时 : 7
2019-04-03 17:54:33 -返回值 : com.bootdo.common.utils.PageUtils@92f7f25
2019-04-03 17:54:36 -请求地址 : http://localhost:8081/elec/elec/list
2019-04-03 17:54:36 -HTTP METHOD : GET
2019-04-03 17:54:36 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.list
2019-04-03 17:54:36 -参数 : [{limit=10, offset=10, userType=, userOrg=, userId=, createTime=, queryType=1}, com.bootdo.elec.domain.ElecDO@2a4042d5]
2019-04-03 17:54:36 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec order by id asc limit ?, ? 
2019-04-03 17:54:36 -==> Parameters: 10(Integer), 10(Integer)
2019-04-03 17:54:36 -<==      Total: 5
2019-04-03 17:54:36 -==>  Preparing: select count(*) from elec 
2019-04-03 17:54:36 -==> Parameters: 
2019-04-03 17:54:36 -<==      Total: 1
2019-04-03 17:54:36 -耗时 : 8
2019-04-03 17:54:36 -返回值 : com.bootdo.common.utils.PageUtils@50c81424
2019-04-03 17:54:45 -请求地址 : http://localhost:8081/elec/elec/batchRemove
2019-04-03 17:54:45 -HTTP METHOD : POST
2019-04-03 17:54:45 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.remove
2019-04-03 17:54:45 -参数 : [[Ljava.lang.Long;@4c983409]
2019-04-03 17:54:45 -==>  Preparing: delete from elec where id in ( ? , ? ) 
2019-04-03 17:54:45 -==> Parameters: 19(Long), 20(Long)
2019-04-03 17:54:45 -<==    Updates: 2
2019-04-03 17:54:45 -耗时 : 102
2019-04-03 17:54:45 -返回值 : {msg=操作成功, code=0}
2019-04-03 17:54:45 -请求地址 : http://localhost:8081/elec/elec/list
2019-04-03 17:54:45 -HTTP METHOD : GET
2019-04-03 17:54:45 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.list
2019-04-03 17:54:45 -参数 : [{limit=10, offset=10, userType=, userOrg=, userId=, createTime=, queryType=2}, com.bootdo.elec.domain.ElecDO@63f92564]
2019-04-03 17:54:45 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec WHERE `elec_sum` < 0 order by id asc limit ?, ? 
2019-04-03 17:54:45 -==> Parameters: 10(Integer), 10(Integer)
2019-04-03 17:54:45 -<==      Total: 0
2019-04-03 17:54:45 -==>  Preparing: select count(*) from elec WHERE `elec_sum` < 0 
2019-04-03 17:54:45 -==> Parameters: 
2019-04-03 17:54:45 -<==      Total: 1
2019-04-03 17:54:45 -耗时 : 7
2019-04-03 17:54:45 -返回值 : com.bootdo.common.utils.PageUtils@72e5b243
2019-04-03 17:54:50 -请求地址 : http://localhost:8081/index
2019-04-03 17:54:50 -HTTP METHOD : GET
2019-04-03 17:54:50 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2019-04-03 17:54:50 -参数 : [{}]
2019-04-03 17:54:50 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2019-04-03 17:54:50 -==> Parameters: 1(Long)
2019-04-03 17:54:50 -<==      Total: 46
2019-04-03 17:54:50 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2019-04-03 17:54:50 -==> Parameters: 138(Long)
2019-04-03 17:54:50 -<==      Total: 1
2019-04-03 17:54:50 -耗时 : 20
2019-04-03 17:54:50 -返回值 : index_v1
2019-04-03 17:54:50 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 17:54:50 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 20(Integer), com.bootdo.system.controller.LoginController.index()(String), {"menus":[{"attributes":{"icon":"fa fa-money","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-money","url":"/moneyList/moneyList"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"102","parentId":"106","text":"现金缴费"},{"attributes":{"icon":"fa fa-book","url":"/moneyLog/elecLog"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"107","parentId":"106","text":"缴费记录"}],"hasChildren":true,"hasParent":false,"id":"106","parentId":"0","text":"收费管理"},{"attributes":{"icon":"fa fa-lightbulb-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/elec/elec"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"121","parentId":"103","text":"电费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"elec/elecInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"122","parentId":"103","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"elec/elecUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"123","parentId":"103","text":"电表上传"},{"attributes":{"icon":"fa fa-cc","url":"/elec/elecPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"124","parentId":"103","text":"电价管理"}],"hasChildren":true,"hasParent":false,"id":"103","parentId":"0","text":"电费管理"},{"attributes":{"icon":"fa fa-tint","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/water/water"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"117","parentId":"105","text":"水费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"water/waterInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"118","parentId":"105","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"water/waterUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"119","parentId":"105","text":"水费生成"},{"attributes":{"icon":"fa fa-cc","url":"/water/waterPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"120","parentId":"105","text":"水价管理"}],"hasChildren":true,"hasParent":false,"id":"105","parentId":"0","text":"水费管理"},{"attributes":{"icon":"fa fa-fire","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/heat/heat"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"113","parentId":"104","text":"暖费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"heat/heatInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"114","parentId":"104","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"heat/heatUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"115","parentId":"104","text":"暖费生成"},{"attributes":{"icon":"","url":"/heat/heatPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"116","parentId":"104","text":"暖价管理"}],"hasChildren":true,"hasParent":false,"id":"104","parentId":"0","text":"暖费管理"},{"attributes":{"icon":"fa fa-vcard-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-bomb","url":"/print/print"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"149","parentId":"108","text":"票据记录"}],"hasChildren":true,"hasParent":false,"id":"108","parentId":"0","text":"票据管理"},{"attributes":{"icon":"fa fa-bar-chart","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-area-chart","url":"/chart/graph_echarts.html"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","text":"百度chart"},{"attributes":{"icon":"fa fa-sun-o","url":"charts/countDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"109","parentId":"97","text":"日统计报表"},{"attributes":{"icon":"fa fa-registered","url":"charts/countMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"110","parentId":"97","text":"月统计报表"},{"attributes":{"icon":"fa fa-support","url":"charts/countYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"111","parentId":"97","text":"年统计报表"},{"attributes":{"icon":"fa fa-money","url":"charts/countOwe"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"155","parentId":"97","text":"欠费报表图"},{"attributes":{"icon":"fa fa-tachometer","url":"charts/countRun"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"112","parentId":"97","text":"走势图报表"}],"hasChildren":true,"hasParent":false,"id":"97","parentId":"0","text":"统计管理"},{"attributes":{"icon":"fa fa-bars","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-book","url":"/common/dict"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"78","parentId":"1","text":"数据字典"},{"attributes":{"icon":"fa fa-folder-open","url":"/common/sysFile"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"71","parentId":"1","text":"文件管理"}],"h(String), 127.0.0.1(String), 2019-04-03 17:54:50.567(Timestamp)
2019-04-03 17:54:50 -<==    Updates: 1
2019-04-03 17:54:50 -请求地址 : http://localhost:8081/main
2019-04-03 17:54:50 -HTTP METHOD : GET
2019-04-03 17:54:50 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 17:54:50 -参数 : []
2019-04-03 17:54:50 -耗时 : 0
2019-04-03 17:54:50 -返回值 : main
2019-04-03 17:54:50 -请求地址 : http://localhost:8081/oa/notify/message
2019-04-03 17:54:50 -HTTP METHOD : GET
2019-04-03 17:54:50 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2019-04-03 17:54:50 -参数 : []
2019-04-03 17:54:50 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2019-04-03 17:54:50 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2019-04-03 17:54:50 -<==      Total: 0
2019-04-03 17:54:50 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2019-04-03 17:54:50 -==> Parameters: 1(Long), 0(String)
2019-04-03 17:54:50 -<==      Total: 1
2019-04-03 17:54:50 -耗时 : 7
2019-04-03 17:54:50 -返回值 : com.bootdo.common.utils.PageUtils@3af5571a
2019-04-03 17:54:50 -请求地址 : http://localhost:8081/main
2019-04-03 17:54:50 -HTTP METHOD : GET
2019-04-03 17:54:50 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 17:54:50 -参数 : []
2019-04-03 17:54:50 -耗时 : 2
2019-04-03 17:54:50 -返回值 : main
2019-04-03 17:54:54 -请求地址 : http://localhost:8081/elec/elec
2019-04-03 17:54:54 -HTTP METHOD : GET
2019-04-03 17:54:54 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.Elec
2019-04-03 17:54:54 -参数 : []
2019-04-03 17:54:54 -耗时 : 0
2019-04-03 17:54:54 -返回值 : elec/elec/elec
2019-04-03 17:54:54 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-03 17:54:54 -HTTP METHOD : GET
2019-04-03 17:54:54 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 17:54:54 -参数 : [userType]
2019-04-03 17:54:54 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 17:54:54 -==> Parameters: userType(String)
2019-04-03 17:54:54 -<==      Total: 2
2019-04-03 17:54:54 -耗时 : 5
2019-04-03 17:54:54 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 17:54:54 -请求地址 : http://localhost:8081/elec/elec/list
2019-04-03 17:54:54 -HTTP METHOD : GET
2019-04-03 17:54:54 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.list
2019-04-03 17:54:54 -参数 : [{limit=10, offset=0, userType=, userOrg=, userId=, createTime=, queryType=1}, com.bootdo.elec.domain.ElecDO@48d1c136]
2019-04-03 17:54:54 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec order by id asc limit ?, ? 
2019-04-03 17:54:54 -==> Parameters: 0(Integer), 10(Integer)
2019-04-03 17:54:54 -<==      Total: 10
2019-04-03 17:54:54 -==>  Preparing: select count(*) from elec 
2019-04-03 17:54:54 -==> Parameters: 
2019-04-03 17:54:54 -<==      Total: 1
2019-04-03 17:54:54 -耗时 : 8
2019-04-03 17:54:54 -返回值 : com.bootdo.common.utils.PageUtils@d1d599b
2019-04-03 17:56:28 -请求地址 : http://localhost:8081/index
2019-04-03 17:56:28 -HTTP METHOD : GET
2019-04-03 17:56:28 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2019-04-03 17:56:28 -参数 : [{}]
2019-04-03 17:56:28 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2019-04-03 17:56:28 -==> Parameters: 1(Long)
2019-04-03 17:56:28 -<==      Total: 46
2019-04-03 17:56:28 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2019-04-03 17:56:28 -==> Parameters: 138(Long)
2019-04-03 17:56:28 -<==      Total: 1
2019-04-03 17:56:28 -耗时 : 18
2019-04-03 17:56:28 -返回值 : index_v1
2019-04-03 17:56:28 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 17:56:28 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 18(Integer), com.bootdo.system.controller.LoginController.index()(String), {"menus":[{"attributes":{"icon":"fa fa-money","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-money","url":"/moneyList/moneyList"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"102","parentId":"106","text":"现金缴费"},{"attributes":{"icon":"fa fa-book","url":"/moneyLog/elecLog"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"107","parentId":"106","text":"缴费记录"}],"hasChildren":true,"hasParent":false,"id":"106","parentId":"0","text":"收费管理"},{"attributes":{"icon":"fa fa-lightbulb-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/elec/elec"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"121","parentId":"103","text":"电费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"elec/elecInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"122","parentId":"103","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"elec/elecUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"123","parentId":"103","text":"电表上传"},{"attributes":{"icon":"fa fa-cc","url":"/elec/elecPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"124","parentId":"103","text":"电价管理"}],"hasChildren":true,"hasParent":false,"id":"103","parentId":"0","text":"电费管理"},{"attributes":{"icon":"fa fa-tint","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/water/water"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"117","parentId":"105","text":"水费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"water/waterInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"118","parentId":"105","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"water/waterUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"119","parentId":"105","text":"水费生成"},{"attributes":{"icon":"fa fa-cc","url":"/water/waterPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"120","parentId":"105","text":"水价管理"}],"hasChildren":true,"hasParent":false,"id":"105","parentId":"0","text":"水费管理"},{"attributes":{"icon":"fa fa-fire","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/heat/heat"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"113","parentId":"104","text":"暖费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"heat/heatInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"114","parentId":"104","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"heat/heatUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"115","parentId":"104","text":"暖费生成"},{"attributes":{"icon":"","url":"/heat/heatPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"116","parentId":"104","text":"暖价管理"}],"hasChildren":true,"hasParent":false,"id":"104","parentId":"0","text":"暖费管理"},{"attributes":{"icon":"fa fa-vcard-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-bomb","url":"/print/print"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"149","parentId":"108","text":"票据记录"}],"hasChildren":true,"hasParent":false,"id":"108","parentId":"0","text":"票据管理"},{"attributes":{"icon":"fa fa-bar-chart","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-area-chart","url":"/chart/graph_echarts.html"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","text":"百度chart"},{"attributes":{"icon":"fa fa-sun-o","url":"charts/countDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"109","parentId":"97","text":"日统计报表"},{"attributes":{"icon":"fa fa-registered","url":"charts/countMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"110","parentId":"97","text":"月统计报表"},{"attributes":{"icon":"fa fa-money","url":"charts/countOwe"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"155","parentId":"97","text":"欠费报表图"},{"attributes":{"icon":"fa fa-support","url":"charts/countYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"111","parentId":"97","text":"年统计报表"},{"attributes":{"icon":"fa fa-tachometer","url":"charts/countRun"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"112","parentId":"97","text":"走势图报表"}],"hasChildren":true,"hasParent":false,"id":"97","parentId":"0","text":"统计管理"},{"attributes":{"icon":"fa fa-bars","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-book","url":"/common/dict"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"78","parentId":"1","text":"数据字典"},{"attributes":{"icon":"fa fa-folder-open","url":"/common/sysFile"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"71","parentId":"1","text":"文件管理"}],"h(String), 127.0.0.1(String), 2019-04-03 17:56:28.069(Timestamp)
2019-04-03 17:56:28 -请求地址 : http://localhost:8081/main
2019-04-03 17:56:28 -HTTP METHOD : GET
2019-04-03 17:56:28 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 17:56:28 -参数 : []
2019-04-03 17:56:28 -耗时 : 0
2019-04-03 17:56:28 -返回值 : main
2019-04-03 17:56:28 -<==    Updates: 1
2019-04-03 17:56:28 -请求地址 : http://localhost:8081/oa/notify/message
2019-04-03 17:56:28 -HTTP METHOD : GET
2019-04-03 17:56:28 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2019-04-03 17:56:28 -参数 : []
2019-04-03 17:56:28 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2019-04-03 17:56:28 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2019-04-03 17:56:28 -<==      Total: 0
2019-04-03 17:56:28 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2019-04-03 17:56:28 -==> Parameters: 1(Long), 0(String)
2019-04-03 17:56:28 -<==      Total: 1
2019-04-03 17:56:28 -耗时 : 13
2019-04-03 17:56:28 -返回值 : com.bootdo.common.utils.PageUtils@4757a8ee
2019-04-03 17:56:28 -请求地址 : http://localhost:8081/main
2019-04-03 17:56:28 -HTTP METHOD : GET
2019-04-03 17:56:28 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 17:56:28 -参数 : []
2019-04-03 17:56:28 -耗时 : 1
2019-04-03 17:56:28 -返回值 : main
2019-04-03 17:56:29 -请求地址 : http://localhost:8081/elec/elec
2019-04-03 17:56:29 -HTTP METHOD : GET
2019-04-03 17:56:29 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.Elec
2019-04-03 17:56:29 -参数 : []
2019-04-03 17:56:29 -耗时 : 0
2019-04-03 17:56:29 -返回值 : elec/elec/elec
2019-04-03 17:56:29 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-03 17:56:29 -HTTP METHOD : GET
2019-04-03 17:56:29 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 17:56:29 -参数 : [userType]
2019-04-03 17:56:29 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 17:56:29 -==> Parameters: userType(String)
2019-04-03 17:56:29 -<==      Total: 2
2019-04-03 17:56:29 -耗时 : 4
2019-04-03 17:56:29 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 17:56:30 -请求地址 : http://localhost:8081/elec/elec/list
2019-04-03 17:56:30 -HTTP METHOD : GET
2019-04-03 17:56:30 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.list
2019-04-03 17:56:30 -参数 : [{limit=10, offset=0, userType=, userOrg=, userId=, createTime=, queryType=1}, com.bootdo.elec.domain.ElecDO@28cfb40b]
2019-04-03 17:56:30 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec order by id asc limit ?, ? 
2019-04-03 17:56:30 -==> Parameters: 0(Integer), 10(Integer)
2019-04-03 17:56:30 -<==      Total: 10
2019-04-03 17:56:30 -==>  Preparing: select count(*) from elec 
2019-04-03 17:56:30 -==> Parameters: 
2019-04-03 17:56:30 -<==      Total: 1
2019-04-03 17:56:30 -耗时 : 7
2019-04-03 17:56:30 -返回值 : com.bootdo.common.utils.PageUtils@6d833675
2019-04-03 17:56:33 -请求地址 : http://localhost:8081/elec/elec/add
2019-04-03 17:56:33 -HTTP METHOD : GET
2019-04-03 17:56:33 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.add
2019-04-03 17:56:33 -参数 : []
2019-04-03 17:56:33 -耗时 : 0
2019-04-03 17:56:33 -返回值 : elec/elec/add
2019-04-03 17:56:34 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-03 17:56:34 -HTTP METHOD : GET
2019-04-03 17:56:34 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 17:56:34 -参数 : [userType]
2019-04-03 17:56:34 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 17:56:34 -==> Parameters: userType(String)
2019-04-03 17:56:34 -请求地址 : http://localhost:8081/common/dict/list/userState
2019-04-03 17:56:34 -HTTP METHOD : GET
2019-04-03 17:56:34 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 17:56:34 -参数 : [userState]
2019-04-03 17:56:34 -<==      Total: 2
2019-04-03 17:56:34 -耗时 : 6
2019-04-03 17:56:34 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 17:56:34 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 17:56:34 -==> Parameters: userState(String)
2019-04-03 17:56:34 -请求地址 : http://localhost:8081/common/dict/list/elecType
2019-04-03 17:56:34 -HTTP METHOD : GET
2019-04-03 17:56:34 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 17:56:34 -参数 : [elecType]
2019-04-03 17:56:34 -<==      Total: 2
2019-04-03 17:56:34 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 17:56:34 -耗时 : 4
2019-04-03 17:56:34 -==> Parameters: elecType(String)
2019-04-03 17:56:34 -返回值 : [DictDO{id=126, name='使用中', value='1', type='userState', description='用户状态', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=125, name='未使用', value='0', type='userState', description='用户状态', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 17:56:34 -<==      Total: 2
2019-04-03 17:56:34 -耗时 : 4
2019-04-03 17:56:34 -返回值 : [DictDO{id=139, name='民用电', value='1', type='elecType', description='电量性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=138, name='商业电', value='0', type='elecType', description='电量类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 17:56:46 -请求地址 : http://localhost:8081/heat/heat
2019-04-03 17:56:46 -HTTP METHOD : GET
2019-04-03 17:56:46 -CLASS_METHOD : com.bootdo.heat.controller.HeatController.Heat
2019-04-03 17:56:46 -参数 : []
2019-04-03 17:56:46 -耗时 : 1
2019-04-03 17:56:46 -返回值 : heat/heat/heat
2019-04-03 17:56:46 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-03 17:56:46 -HTTP METHOD : GET
2019-04-03 17:56:46 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 17:56:46 -参数 : [userType]
2019-04-03 17:56:46 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 17:56:46 -==> Parameters: userType(String)
2019-04-03 17:56:46 -<==      Total: 2
2019-04-03 17:56:46 -耗时 : 4
2019-04-03 17:56:46 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 17:56:46 -请求地址 : http://localhost:8081/heat/heat/list
2019-04-03 17:56:46 -HTTP METHOD : GET
2019-04-03 17:56:46 -CLASS_METHOD : com.bootdo.heat.controller.HeatController.list
2019-04-03 17:56:46 -参数 : [{limit=10, offset=0, userType=, userOrg=, userId=, createTime=, queryType=1}]
2019-04-03 17:56:46 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`heat_type`,`heat_price`,`heat_area`,`heat_cost`,`heat_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from heat order by id asc limit ?, ? 
2019-04-03 17:56:46 -==> Parameters: 0(Integer), 10(Integer)
2019-04-03 17:56:46 -<==      Total: 10
2019-04-03 17:56:46 -==>  Preparing: select count(*) from heat 
2019-04-03 17:56:46 -==> Parameters: 
2019-04-03 17:56:46 -<==      Total: 1
2019-04-03 17:56:46 -耗时 : 14
2019-04-03 17:56:46 -返回值 : com.bootdo.common.utils.PageUtils@50e54fd4
2019-04-03 17:57:58 -请求地址 : http://localhost:8081/index
2019-04-03 17:57:58 -HTTP METHOD : GET
2019-04-03 17:57:58 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2019-04-03 17:57:58 -参数 : [{}]
2019-04-03 17:57:58 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2019-04-03 17:57:58 -==> Parameters: 1(Long)
2019-04-03 17:57:58 -<==      Total: 46
2019-04-03 17:57:58 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2019-04-03 17:57:58 -==> Parameters: 138(Long)
2019-04-03 17:57:58 -<==      Total: 1
2019-04-03 17:57:58 -耗时 : 21
2019-04-03 17:57:58 -返回值 : index_v1
2019-04-03 17:57:58 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 17:57:58 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 22(Integer), com.bootdo.system.controller.LoginController.index()(String), {"menus":[{"attributes":{"icon":"fa fa-money","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-money","url":"/moneyList/moneyList"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"102","parentId":"106","text":"现金缴费"},{"attributes":{"icon":"fa fa-book","url":"/moneyLog/elecLog"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"107","parentId":"106","text":"缴费记录"}],"hasChildren":true,"hasParent":false,"id":"106","parentId":"0","text":"收费管理"},{"attributes":{"icon":"fa fa-lightbulb-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/elec/elec"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"121","parentId":"103","text":"电费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"elec/elecInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"122","parentId":"103","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"elec/elecUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"123","parentId":"103","text":"电表上传"},{"attributes":{"icon":"fa fa-cc","url":"/elec/elecPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"124","parentId":"103","text":"电价管理"}],"hasChildren":true,"hasParent":false,"id":"103","parentId":"0","text":"电费管理"},{"attributes":{"icon":"fa fa-tint","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/water/water"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"117","parentId":"105","text":"水费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"water/waterInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"118","parentId":"105","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"water/waterUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"119","parentId":"105","text":"水费生成"},{"attributes":{"icon":"fa fa-cc","url":"/water/waterPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"120","parentId":"105","text":"水价管理"}],"hasChildren":true,"hasParent":false,"id":"105","parentId":"0","text":"水费管理"},{"attributes":{"icon":"fa fa-fire","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/heat/heat"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"113","parentId":"104","text":"暖费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"heat/heatInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"114","parentId":"104","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"heat/heatUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"115","parentId":"104","text":"暖费生成"},{"attributes":{"icon":"","url":"/heat/heatPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"116","parentId":"104","text":"暖价管理"}],"hasChildren":true,"hasParent":false,"id":"104","parentId":"0","text":"暖费管理"},{"attributes":{"icon":"fa fa-vcard-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-bomb","url":"/print/print"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"149","parentId":"108","text":"票据记录"}],"hasChildren":true,"hasParent":false,"id":"108","parentId":"0","text":"票据管理"},{"attributes":{"icon":"fa fa-bar-chart","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-area-chart","url":"/chart/graph_echarts.html"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","text":"百度chart"},{"attributes":{"icon":"fa fa-sun-o","url":"charts/countDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"109","parentId":"97","text":"日统计报表"},{"attributes":{"icon":"fa fa-registered","url":"charts/countMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"110","parentId":"97","text":"月统计报表"},{"attributes":{"icon":"fa fa-money","url":"charts/countOwe"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"155","parentId":"97","text":"欠费报表图"},{"attributes":{"icon":"fa fa-support","url":"charts/countYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"111","parentId":"97","text":"年统计报表"},{"attributes":{"icon":"fa fa-tachometer","url":"charts/countRun"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"112","parentId":"97","text":"走势图报表"}],"hasChildren":true,"hasParent":false,"id":"97","parentId":"0","text":"统计管理"},{"attributes":{"icon":"fa fa-bars","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-book","url":"/common/dict"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"78","parentId":"1","text":"数据字典"},{"attributes":{"icon":"fa fa-folder-open","url":"/common/sysFile"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"71","parentId":"1","text":"文件管理"}],"h(String), 127.0.0.1(String), 2019-04-03 17:57:58.564(Timestamp)
2019-04-03 17:57:58 -<==    Updates: 1
2019-04-03 17:57:58 -请求地址 : http://localhost:8081/main
2019-04-03 17:57:58 -HTTP METHOD : GET
2019-04-03 17:57:58 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 17:57:58 -参数 : []
2019-04-03 17:57:58 -耗时 : 0
2019-04-03 17:57:58 -返回值 : main
2019-04-03 17:57:58 -请求地址 : http://localhost:8081/oa/notify/message
2019-04-03 17:57:58 -HTTP METHOD : GET
2019-04-03 17:57:58 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2019-04-03 17:57:58 -参数 : []
2019-04-03 17:57:58 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2019-04-03 17:57:58 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2019-04-03 17:57:59 -<==      Total: 0
2019-04-03 17:57:59 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2019-04-03 17:57:59 -==> Parameters: 1(Long), 0(String)
2019-04-03 17:57:59 -<==      Total: 1
2019-04-03 17:57:59 -耗时 : 7
2019-04-03 17:57:59 -返回值 : com.bootdo.common.utils.PageUtils@365fc94d
2019-04-03 17:57:59 -请求地址 : http://localhost:8081/main
2019-04-03 17:57:59 -HTTP METHOD : GET
2019-04-03 17:57:59 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 17:57:59 -参数 : []
2019-04-03 17:57:59 -耗时 : 0
2019-04-03 17:57:59 -返回值 : main
2019-04-03 17:58:01 -请求地址 : http://localhost:8081/heat/heat
2019-04-03 17:58:01 -HTTP METHOD : GET
2019-04-03 17:58:01 -CLASS_METHOD : com.bootdo.heat.controller.HeatController.Heat
2019-04-03 17:58:01 -参数 : []
2019-04-03 17:58:01 -耗时 : 1
2019-04-03 17:58:01 -返回值 : heat/heat/heat
2019-04-03 17:58:01 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-03 17:58:01 -HTTP METHOD : GET
2019-04-03 17:58:01 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 17:58:01 -参数 : [userType]
2019-04-03 17:58:01 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 17:58:01 -==> Parameters: userType(String)
2019-04-03 17:58:01 -<==      Total: 2
2019-04-03 17:58:01 -耗时 : 4
2019-04-03 17:58:01 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 17:58:01 -请求地址 : http://localhost:8081/heat/heat/list
2019-04-03 17:58:01 -HTTP METHOD : GET
2019-04-03 17:58:01 -CLASS_METHOD : com.bootdo.heat.controller.HeatController.list
2019-04-03 17:58:01 -参数 : [{limit=10, offset=0, userType=, userOrg=, userId=, createTime=, queryType=1}]
2019-04-03 17:58:01 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`heat_type`,`heat_price`,`heat_area`,`heat_cost`,`heat_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from heat order by id asc limit ?, ? 
2019-04-03 17:58:01 -==> Parameters: 0(Integer), 10(Integer)
2019-04-03 17:58:01 -<==      Total: 10
2019-04-03 17:58:01 -==>  Preparing: select count(*) from heat 
2019-04-03 17:58:01 -==> Parameters: 
2019-04-03 17:58:01 -<==      Total: 1
2019-04-03 17:58:01 -耗时 : 6
2019-04-03 17:58:01 -返回值 : com.bootdo.common.utils.PageUtils@18214ab8
2019-04-03 17:58:05 -请求地址 : http://localhost:8081/heat/heat/add
2019-04-03 17:58:05 -HTTP METHOD : GET
2019-04-03 17:58:05 -CLASS_METHOD : com.bootdo.heat.controller.HeatController.add
2019-04-03 17:58:05 -参数 : []
2019-04-03 17:58:05 -耗时 : 0
2019-04-03 17:58:05 -返回值 : heat/heat/add
2019-04-03 17:58:06 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-03 17:58:06 -HTTP METHOD : GET
2019-04-03 17:58:06 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 17:58:06 -参数 : [userType]
2019-04-03 17:58:06 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 17:58:06 -==> Parameters: userType(String)
2019-04-03 17:58:06 -请求地址 : http://localhost:8081/common/dict/list/userState
2019-04-03 17:58:06 -HTTP METHOD : GET
2019-04-03 17:58:06 -<==      Total: 2
2019-04-03 17:58:06 -请求地址 : http://localhost:8081/common/dict/list/heatType
2019-04-03 17:58:06 -HTTP METHOD : GET
2019-04-03 17:58:06 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 17:58:06 -参数 : [heatType]
2019-04-03 17:58:06 -耗时 : 4
2019-04-03 17:58:06 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 17:58:06 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 17:58:06 -==> Parameters: heatType(String)
2019-04-03 17:58:06 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 17:58:06 -参数 : [userState]
2019-04-03 17:58:06 -<==      Total: 5
2019-04-03 17:58:06 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 17:58:06 -==> Parameters: userState(String)
2019-04-03 17:58:06 -耗时 : 8
2019-04-03 17:58:06 -返回值 : [DictDO{id=137, name='特殊暖费1', value='4', type='heatType', description='暖气类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=136, name='工业非盈利', value='3', type='heatType', description='暖气类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=135, name='工业盈利', value='2', type='heatType', description='暖气类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=134, name='民用暖', value='1', type='heatType', description='暖气类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=133, name='商业暖', value='0', type='heatType', description='暖气类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 17:58:06 -<==      Total: 2
2019-04-03 17:58:06 -耗时 : 14
2019-04-03 17:58:06 -返回值 : [DictDO{id=126, name='使用中', value='1', type='userState', description='用户状态', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=125, name='未使用', value='0', type='userState', description='用户状态', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 17:58:16 -请求地址 : http://localhost:8081/system/sysDept/treeView
2019-04-03 17:58:16 -HTTP METHOD : GET
2019-04-03 17:58:16 -CLASS_METHOD : com.bootdo.system.controller.DeptController.treeView
2019-04-03 17:58:16 -参数 : []
2019-04-03 17:58:16 -耗时 : 1
2019-04-03 17:58:16 -返回值 : system/dept/deptTree
2019-04-03 17:58:16 -请求地址 : http://localhost:8081/system/sysDept/tree
2019-04-03 17:58:16 -HTTP METHOD : GET
2019-04-03 17:58:16 -CLASS_METHOD : com.bootdo.system.controller.DeptController.tree
2019-04-03 17:58:16 -参数 : []
2019-04-03 17:58:16 -==>  Preparing: select `dept_id`,`parent_id`,`name`,`order_num`,`del_flag` from sys_dept order by dept_id desc 
2019-04-03 17:58:16 -==> Parameters: 
2019-04-03 17:58:16 -<==      Total: 3
2019-04-03 17:58:16 -耗时 : 4
2019-04-03 17:58:16 -返回值 : {"checked":false,"children":[{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"3","parentId":"1","state":{"opened":true},"text":"牙星"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"2","parentId":"1","state":{"opened":true},"text":"五九"}],"hasChildren":true,"hasParent":false,"id":"1","parentId":"0","state":{"opened":true},"text":"总公司"}
2019-04-03 17:58:32 -请求地址 : http://localhost:8081/heat/heat/save
2019-04-03 17:58:32 -HTTP METHOD : POST
2019-04-03 17:58:32 -CLASS_METHOD : com.bootdo.heat.controller.HeatController.save
2019-04-03 17:58:32 -参数 : [com.bootdo.heat.domain.HeatDO@4a9dc148]
2019-04-03 17:58:32 -==>  Preparing: insert into heat ( `user_id`, `user_name`, `user_type`, `user_org`, `user_tell`, `user_state`, `wages_id`, `heat_type`, `heat_price`, `heat_area`, `heat_cost`, `heat_sum`, `create_time`, `create_by`, `update_time`, `update_by`, `remark` ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 17:58:32 -==> Parameters: 1(String), 1(String), A(String), 2(String), (String), 1(String), 1(String), 1(String), 1(BigDecimal), 1(BigDecimal), 1(BigDecimal), 1(BigDecimal), 2019-04(String), 1(Long), 2019-04-03 17:58:32.332(Timestamp), 1(Long), 1(String)
2019-04-03 17:58:32 -<==    Updates: 1
2019-04-03 17:58:32 -耗时 : 117
2019-04-03 17:58:32 -返回值 : {msg=操作成功, code=0}
2019-04-03 17:58:32 -请求地址 : http://localhost:8081/heat/heat/list
2019-04-03 17:58:32 -HTTP METHOD : GET
2019-04-03 17:58:32 -CLASS_METHOD : com.bootdo.heat.controller.HeatController.list
2019-04-03 17:58:32 -参数 : [{limit=10, offset=0, userType=, userOrg=, userId=, createTime=, queryType=2}]
2019-04-03 17:58:32 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`heat_type`,`heat_price`,`heat_area`,`heat_cost`,`heat_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from heat WHERE `heat_sum` < 0 order by id asc limit ?, ? 
2019-04-03 17:58:32 -==> Parameters: 0(Integer), 10(Integer)
2019-04-03 17:58:32 -<==      Total: 10
2019-04-03 17:58:32 -==>  Preparing: select count(*) from heat WHERE `heat_sum` < 0 
2019-04-03 17:58:32 -==> Parameters: 
2019-04-03 17:58:32 -<==      Total: 1
2019-04-03 17:58:32 -耗时 : 17
2019-04-03 17:58:32 -返回值 : com.bootdo.common.utils.PageUtils@1ec73aef
2019-04-03 17:58:45 -请求地址 : http://localhost:8081/index
2019-04-03 17:58:45 -HTTP METHOD : GET
2019-04-03 17:58:45 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2019-04-03 17:58:45 -参数 : [{}]
2019-04-03 17:58:45 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2019-04-03 17:58:45 -==> Parameters: 1(Long)
2019-04-03 17:58:45 -<==      Total: 46
2019-04-03 17:58:45 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2019-04-03 17:58:45 -==> Parameters: 138(Long)
2019-04-03 17:58:45 -<==      Total: 1
2019-04-03 17:58:45 -耗时 : 17
2019-04-03 17:58:45 -返回值 : index_v1
2019-04-03 17:58:45 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 17:58:45 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 17(Integer), com.bootdo.system.controller.LoginController.index()(String), {"menus":[{"attributes":{"icon":"fa fa-money","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-money","url":"/moneyList/moneyList"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"102","parentId":"106","text":"现金缴费"},{"attributes":{"icon":"fa fa-book","url":"/moneyLog/elecLog"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"107","parentId":"106","text":"缴费记录"}],"hasChildren":true,"hasParent":false,"id":"106","parentId":"0","text":"收费管理"},{"attributes":{"icon":"fa fa-lightbulb-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/elec/elec"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"121","parentId":"103","text":"电费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"elec/elecInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"122","parentId":"103","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"elec/elecUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"123","parentId":"103","text":"电表上传"},{"attributes":{"icon":"fa fa-cc","url":"/elec/elecPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"124","parentId":"103","text":"电价管理"}],"hasChildren":true,"hasParent":false,"id":"103","parentId":"0","text":"电费管理"},{"attributes":{"icon":"fa fa-tint","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/water/water"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"117","parentId":"105","text":"水费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"water/waterInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"118","parentId":"105","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"water/waterUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"119","parentId":"105","text":"水费生成"},{"attributes":{"icon":"fa fa-cc","url":"/water/waterPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"120","parentId":"105","text":"水价管理"}],"hasChildren":true,"hasParent":false,"id":"105","parentId":"0","text":"水费管理"},{"attributes":{"icon":"fa fa-fire","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/heat/heat"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"113","parentId":"104","text":"暖费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"heat/heatInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"114","parentId":"104","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"heat/heatUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"115","parentId":"104","text":"暖费生成"},{"attributes":{"icon":"","url":"/heat/heatPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"116","parentId":"104","text":"暖价管理"}],"hasChildren":true,"hasParent":false,"id":"104","parentId":"0","text":"暖费管理"},{"attributes":{"icon":"fa fa-vcard-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-bomb","url":"/print/print"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"149","parentId":"108","text":"票据记录"}],"hasChildren":true,"hasParent":false,"id":"108","parentId":"0","text":"票据管理"},{"attributes":{"icon":"fa fa-bar-chart","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-area-chart","url":"/chart/graph_echarts.html"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","text":"百度chart"},{"attributes":{"icon":"fa fa-sun-o","url":"charts/countDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"109","parentId":"97","text":"日统计报表"},{"attributes":{"icon":"fa fa-registered","url":"charts/countMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"110","parentId":"97","text":"月统计报表"},{"attributes":{"icon":"fa fa-money","url":"charts/countOwe"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"155","parentId":"97","text":"欠费报表图"},{"attributes":{"icon":"fa fa-support","url":"charts/countYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"111","parentId":"97","text":"年统计报表"},{"attributes":{"icon":"fa fa-tachometer","url":"charts/countRun"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"112","parentId":"97","text":"走势图报表"}],"hasChildren":true,"hasParent":false,"id":"97","parentId":"0","text":"统计管理"},{"attributes":{"icon":"fa fa-bars","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-book","url":"/common/dict"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"78","parentId":"1","text":"数据字典"},{"attributes":{"icon":"fa fa-folder-open","url":"/common/sysFile"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"71","parentId":"1","text":"文件管理"}],"h(String), 127.0.0.1(String), 2019-04-03 17:58:45.511(Timestamp)
2019-04-03 17:58:45 -请求地址 : http://localhost:8081/main
2019-04-03 17:58:45 -HTTP METHOD : GET
2019-04-03 17:58:45 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 17:58:45 -参数 : []
2019-04-03 17:58:45 -耗时 : 0
2019-04-03 17:58:45 -返回值 : main
2019-04-03 17:58:45 -<==    Updates: 1
2019-04-03 17:58:45 -请求地址 : http://localhost:8081/oa/notify/message
2019-04-03 17:58:45 -HTTP METHOD : GET
2019-04-03 17:58:45 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2019-04-03 17:58:45 -参数 : []
2019-04-03 17:58:45 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2019-04-03 17:58:45 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2019-04-03 17:58:45 -<==      Total: 0
2019-04-03 17:58:45 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2019-04-03 17:58:45 -==> Parameters: 1(Long), 0(String)
2019-04-03 17:58:45 -<==      Total: 1
2019-04-03 17:58:45 -耗时 : 5
2019-04-03 17:58:45 -返回值 : com.bootdo.common.utils.PageUtils@8cd8054
2019-04-03 17:58:45 -请求地址 : http://localhost:8081/main
2019-04-03 17:58:45 -HTTP METHOD : GET
2019-04-03 17:58:45 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 17:58:45 -参数 : []
2019-04-03 17:58:45 -耗时 : 2
2019-04-03 17:58:45 -返回值 : main
2019-04-03 17:58:49 -请求地址 : http://localhost:8081/heat/heat
2019-04-03 17:58:49 -HTTP METHOD : GET
2019-04-03 17:58:49 -CLASS_METHOD : com.bootdo.heat.controller.HeatController.Heat
2019-04-03 17:58:49 -参数 : []
2019-04-03 17:58:49 -耗时 : 1
2019-04-03 17:58:49 -返回值 : heat/heat/heat
2019-04-03 17:58:49 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-03 17:58:49 -HTTP METHOD : GET
2019-04-03 17:58:49 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 17:58:49 -参数 : [userType]
2019-04-03 17:58:49 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 17:58:49 -==> Parameters: userType(String)
2019-04-03 17:58:49 -<==      Total: 2
2019-04-03 17:58:49 -耗时 : 3
2019-04-03 17:58:49 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 17:58:49 -请求地址 : http://localhost:8081/heat/heat/list
2019-04-03 17:58:49 -HTTP METHOD : GET
2019-04-03 17:58:49 -CLASS_METHOD : com.bootdo.heat.controller.HeatController.list
2019-04-03 17:58:49 -参数 : [{limit=10, offset=0, userType=, userOrg=, userId=, createTime=, queryType=1}]
2019-04-03 17:58:49 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`heat_type`,`heat_price`,`heat_area`,`heat_cost`,`heat_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from heat order by id asc limit ?, ? 
2019-04-03 17:58:49 -==> Parameters: 0(Integer), 10(Integer)
2019-04-03 17:58:49 -<==      Total: 10
2019-04-03 17:58:49 -==>  Preparing: select count(*) from heat 
2019-04-03 17:58:49 -==> Parameters: 
2019-04-03 17:58:49 -<==      Total: 1
2019-04-03 17:58:49 -耗时 : 7
2019-04-03 17:58:49 -返回值 : com.bootdo.common.utils.PageUtils@6d1ab069
2019-04-03 17:58:57 -请求地址 : http://localhost:8081/heat/heat/list
2019-04-03 17:58:57 -HTTP METHOD : GET
2019-04-03 17:58:57 -CLASS_METHOD : com.bootdo.heat.controller.HeatController.list
2019-04-03 17:58:57 -参数 : [{limit=10, offset=20, userType=, userOrg=, userId=, createTime=, queryType=1}]
2019-04-03 17:58:57 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`heat_type`,`heat_price`,`heat_area`,`heat_cost`,`heat_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from heat order by id asc limit ?, ? 
2019-04-03 17:58:57 -==> Parameters: 20(Integer), 10(Integer)
2019-04-03 17:58:57 -<==      Total: 9
2019-04-03 17:58:57 -==>  Preparing: select count(*) from heat 
2019-04-03 17:58:57 -==> Parameters: 
2019-04-03 17:58:57 -<==      Total: 1
2019-04-03 17:58:57 -耗时 : 7
2019-04-03 17:58:57 -返回值 : com.bootdo.common.utils.PageUtils@5fbc0478
2019-04-03 17:59:06 -请求地址 : http://localhost:8081/heat/heat/batchRemove
2019-04-03 17:59:06 -HTTP METHOD : POST
2019-04-03 17:59:06 -CLASS_METHOD : com.bootdo.heat.controller.HeatController.remove
2019-04-03 17:59:06 -参数 : [[Ljava.lang.Integer;@40d59a4f]
2019-04-03 17:59:06 -==>  Preparing: delete from heat where id in ( ? , ? ) 
2019-04-03 17:59:06 -==> Parameters: 28(Integer), 29(Integer)
2019-04-03 17:59:06 -<==    Updates: 2
2019-04-03 17:59:06 -耗时 : 114
2019-04-03 17:59:06 -返回值 : {msg=操作成功, code=0}
2019-04-03 17:59:06 -请求地址 : http://localhost:8081/heat/heat/list
2019-04-03 17:59:06 -HTTP METHOD : GET
2019-04-03 17:59:06 -CLASS_METHOD : com.bootdo.heat.controller.HeatController.list
2019-04-03 17:59:06 -参数 : [{limit=10, offset=20, userType=, userOrg=, userId=, createTime=, queryType=2}]
2019-04-03 17:59:06 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`heat_type`,`heat_price`,`heat_area`,`heat_cost`,`heat_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from heat WHERE `heat_sum` < 0 order by id asc limit ?, ? 
2019-04-03 17:59:06 -==> Parameters: 20(Integer), 10(Integer)
2019-04-03 17:59:06 -<==      Total: 0
2019-04-03 17:59:06 -==>  Preparing: select count(*) from heat WHERE `heat_sum` < 0 
2019-04-03 17:59:06 -==> Parameters: 
2019-04-03 17:59:06 -<==      Total: 1
2019-04-03 17:59:06 -耗时 : 56
2019-04-03 17:59:06 -返回值 : com.bootdo.common.utils.PageUtils@5328d30
2019-04-03 17:59:46 -请求地址 : http://localhost:8081/water/water
2019-04-03 17:59:46 -HTTP METHOD : GET
2019-04-03 17:59:46 -CLASS_METHOD : com.bootdo.water.controller.WaterController.Water
2019-04-03 17:59:46 -参数 : []
2019-04-03 17:59:46 -耗时 : 0
2019-04-03 17:59:46 -返回值 : water/water/water
2019-04-03 17:59:46 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-03 17:59:46 -HTTP METHOD : GET
2019-04-03 17:59:46 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 17:59:46 -参数 : [userType]
2019-04-03 17:59:46 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 17:59:46 -==> Parameters: userType(String)
2019-04-03 17:59:46 -<==      Total: 2
2019-04-03 17:59:46 -耗时 : 4
2019-04-03 17:59:46 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 17:59:46 -请求地址 : http://localhost:8081/water/water/list
2019-04-03 17:59:46 -HTTP METHOD : GET
2019-04-03 17:59:46 -CLASS_METHOD : com.bootdo.water.controller.WaterController.list
2019-04-03 17:59:46 -参数 : [{limit=3, offset=0, userType=, userOrg=, userId=, createTime=, queryType=1}]
2019-04-03 17:59:46 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`water_type`,`water_price`,`water_cost`,`water_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from water order by id asc limit ?, ? 
2019-04-03 17:59:46 -==> Parameters: 0(Integer), 3(Integer)
2019-04-03 17:59:46 -<==      Total: 3
2019-04-03 17:59:46 -==>  Preparing: select count(*) from water 
2019-04-03 17:59:46 -==> Parameters: 
2019-04-03 17:59:46 -<==      Total: 1
2019-04-03 17:59:46 -耗时 : 70
2019-04-03 17:59:46 -返回值 : com.bootdo.common.utils.PageUtils@3199850
2019-04-03 17:59:50 -请求地址 : http://localhost:8081/water/water/add
2019-04-03 17:59:50 -HTTP METHOD : GET
2019-04-03 17:59:50 -CLASS_METHOD : com.bootdo.water.controller.WaterController.add
2019-04-03 17:59:50 -参数 : []
2019-04-03 17:59:50 -耗时 : 0
2019-04-03 17:59:50 -返回值 : water/water/add
2019-04-03 17:59:50 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-03 17:59:50 -HTTP METHOD : GET
2019-04-03 17:59:50 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 17:59:50 -参数 : [userType]
2019-04-03 17:59:50 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 17:59:50 -==> Parameters: userType(String)
2019-04-03 17:59:50 -<==      Total: 2
2019-04-03 17:59:50 -耗时 : 8
2019-04-03 17:59:50 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 17:59:50 -请求地址 : http://localhost:8081/common/dict/list/userState
2019-04-03 17:59:50 -HTTP METHOD : GET
2019-04-03 17:59:50 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 17:59:50 -参数 : [userState]
2019-04-03 17:59:50 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 17:59:50 -==> Parameters: userState(String)
2019-04-03 17:59:50 -<==      Total: 2
2019-04-03 17:59:50 -耗时 : 5
2019-04-03 17:59:50 -返回值 : [DictDO{id=126, name='使用中', value='1', type='userState', description='用户状态', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=125, name='未使用', value='0', type='userState', description='用户状态', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 17:59:50 -请求地址 : http://localhost:8081/common/dict/list/waterType
2019-04-03 17:59:50 -HTTP METHOD : GET
2019-04-03 17:59:50 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 17:59:50 -参数 : [waterType]
2019-04-03 17:59:50 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 17:59:50 -==> Parameters: waterType(String)
2019-04-03 17:59:50 -<==      Total: 6
2019-04-03 17:59:50 -耗时 : 4
2019-04-03 17:59:50 -返回值 : [DictDO{id=132, name='特殊水费4', value='5', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=131, name='特殊水费3', value='4', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=130, name='特殊水费2', value='3', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=129, name='特殊水费1', value='2', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=128, name='民用水', value='1', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=127, name='商业水', value='0', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 17:59:52 -请求地址 : http://localhost:8081/water/water/save
2019-04-03 17:59:52 -HTTP METHOD : POST
2019-04-03 17:59:52 -CLASS_METHOD : com.bootdo.water.controller.WaterController.save
2019-04-03 17:59:52 -参数 : [com.bootdo.water.domain.WaterDO@116f04b6]
2019-04-03 17:59:52 -==>  Preparing: insert into water ( `user_id`, `user_name`, `user_type`, `user_org`, `user_tell`, `user_state`, `wages_id`, `water_type`, `water_price`, `water_cost`, `water_sum`, `create_time`, `create_by`, `update_time`, `update_by`, `remark` ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 17:59:52 -==> Parameters: (String), (String), (String), (String), (String), (String), (String), (String), null, null, null, null, 1(Long), 2019-04-03 17:59:52.446(Timestamp), 1(Long), (String)
2019-04-03 17:59:52 -{conn-10001, pstmt-20040} execute error. insert into water
		(
			`user_id`, 
			`user_name`, 
			`user_type`, 
			`user_org`, 
			`user_tell`, 
			`user_state`, 
			`wages_id`, 
			`water_type`, 
			`water_price`, 
		    `water_cost`, 
			`water_sum`, 
			`create_time`, 
			`create_by`, 
			`update_time`, 
			`update_by`, 
			`remark`
		)
		values
		(
			?, 
			?, 
			?, 
			?, 
			?, 
			?, 
			?, 
			?, 
			?, 
			?, 
			?, 
			?, 
			?, 
			?, 
			?, 
			?
		)
com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException: Column 'water_price' cannot be null
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(Unknown Source)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(Unknown Source)
	at java.lang.reflect.Constructor.newInstance(Unknown Source)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:425)
	at com.mysql.jdbc.Util.getInstance(Util.java:408)
	at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:936)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3976)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3912)
	at com.mysql.jdbc.MysqlIO.sendCommand(MysqlIO.java:2530)
	at com.mysql.jdbc.MysqlIO.sqlQueryDirect(MysqlIO.java:2683)
	at com.mysql.jdbc.ConnectionImpl.execSQL(ConnectionImpl.java:2486)
	at com.mysql.jdbc.PreparedStatement.executeInternal(PreparedStatement.java:1858)
	at com.mysql.jdbc.PreparedStatement.execute(PreparedStatement.java:1197)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2931)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2929)
	at com.alibaba.druid.wall.WallFilter.preparedStatement_execute(WallFilter.java:601)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2929)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2929)
	at com.alibaba.druid.proxy.jdbc.PreparedStatementProxyImpl.execute(PreparedStatementProxyImpl.java:131)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:493)
	at sun.reflect.GeneratedMethodAccessor128.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:59)
	at com.sun.proxy.$Proxy173.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.update(PreparedStatementHandler.java:46)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.update(RoutingStatementHandler.java:74)
	at org.apache.ibatis.executor.SimpleExecutor.doUpdate(SimpleExecutor.java:50)
	at org.apache.ibatis.executor.BaseExecutor.update(BaseExecutor.java:117)
	at org.apache.ibatis.executor.CachingExecutor.update(CachingExecutor.java:76)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:198)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.insert(DefaultSqlSession.java:185)
	at sun.reflect.GeneratedMethodAccessor225.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:434)
	at com.sun.proxy.$Proxy101.insert(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.insert(SqlSessionTemplate.java:279)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:57)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy107.save(Unknown Source)
	at com.bootdo.water.service.impl.WaterServiceImpl.save(WaterServiceImpl.java:40)
	at com.bootdo.water.controller.WaterController.save(WaterController.java:188)
	at com.bootdo.water.controller.WaterController$$FastClassBySpringCGLIB$$55e6da3c.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:204)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:746)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.bootdo.common.aspect.WebLogAspect.doAround(WebLogAspect.java:57)
	at sun.reflect.GeneratedMethodAccessor126.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.apache.shiro.spring.security.interceptor.AopAllianceAnnotationsAuthorizingMethodInterceptor$1.proceed(AopAllianceAnnotationsAuthorizingMethodInterceptor.java:82)
	at org.apache.shiro.authz.aop.AuthorizingMethodInterceptor.invoke(AuthorizingMethodInterceptor.java:39)
	at org.apache.shiro.spring.security.interceptor.AopAllianceAnnotationsAuthorizingMethodInterceptor.invoke(AopAllianceAnnotationsAuthorizingMethodInterceptor.java:115)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.bootdo.water.controller.WaterController$$EnhancerBySpringCGLIB$$cb941eaa.save(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:209)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:877)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:783)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:991)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:925)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:974)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:877)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:661)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:851)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:61)
	at org.apache.shiro.web.servlet.AdviceFilter.executeChain(AdviceFilter.java:108)
	at org.apache.shiro.web.servlet.AdviceFilter.doFilterInternal(AdviceFilter.java:137)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:66)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)
	at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)
	at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)
	at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)
	at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:383)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:109)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:496)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:790)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1468)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Unknown Source)
2019-04-03 17:59:52 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 17:59:52 -==> Parameters: 1(Long), admin(String), error(String), null, http://localhost:8081/water/water/save(String), org.springframework.dao.DataIntegrityViolationException: 
### Error updating database.  Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException: Column 'water_price' cannot be null
### The error may involve com.bootdo.water.dao.WaterDao.save-Inline
### The error occurred while setting parameters
### SQL: insert into water   (    `user_id`,     `user_name`,     `user_type`,     `user_org`,     `user_tell`,     `user_state`,     `wages_id`,     `water_type`,     `water_price`,        `water_cost`,     `water_sum`,     `create_time`,     `create_by`,     `update_time`,     `update_by`,     `remark`   )   values   (    ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?   )
### Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException: Column 'water_price' cannot be null
; ]; Column 'water_price' cannot be null; nested exception is com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException: Column 'water_price' cannot be null(String), null, 2019-04-03 17:59:52.454(Timestamp)
2019-04-03 17:59:52 -
### Error updating database.  Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException: Column 'water_price' cannot be null
### The error may involve com.bootdo.water.dao.WaterDao.save-Inline
### The error occurred while setting parameters
### SQL: insert into water   (    `user_id`,     `user_name`,     `user_type`,     `user_org`,     `user_tell`,     `user_state`,     `wages_id`,     `water_type`,     `water_price`,        `water_cost`,     `water_sum`,     `create_time`,     `create_by`,     `update_time`,     `update_by`,     `remark`   )   values   (    ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?   )
### Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException: Column 'water_price' cannot be null
; ]; Column 'water_price' cannot be null; nested exception is com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException: Column 'water_price' cannot be null
org.springframework.dao.DataIntegrityViolationException: 
### Error updating database.  Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException: Column 'water_price' cannot be null
### The error may involve com.bootdo.water.dao.WaterDao.save-Inline
### The error occurred while setting parameters
### SQL: insert into water   (    `user_id`,     `user_name`,     `user_type`,     `user_org`,     `user_tell`,     `user_state`,     `wages_id`,     `water_type`,     `water_price`,        `water_cost`,     `water_sum`,     `create_time`,     `create_by`,     `update_time`,     `update_by`,     `remark`   )   values   (    ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?   )
### Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException: Column 'water_price' cannot be null
; ]; Column 'water_price' cannot be null; nested exception is com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException: Column 'water_price' cannot be null
	at org.springframework.jdbc.support.SQLExceptionSubclassTranslator.doTranslate(SQLExceptionSubclassTranslator.java:87)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:72)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:81)
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:75)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:447)
	at com.sun.proxy.$Proxy101.insert(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.insert(SqlSessionTemplate.java:279)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:57)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy107.save(Unknown Source)
	at com.bootdo.water.service.impl.WaterServiceImpl.save(WaterServiceImpl.java:40)
	at com.bootdo.water.controller.WaterController.save(WaterController.java:188)
	at com.bootdo.water.controller.WaterController$$FastClassBySpringCGLIB$$55e6da3c.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:204)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:746)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.bootdo.common.aspect.WebLogAspect.doAround(WebLogAspect.java:57)
	at sun.reflect.GeneratedMethodAccessor126.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.apache.shiro.spring.security.interceptor.AopAllianceAnnotationsAuthorizingMethodInterceptor$1.proceed(AopAllianceAnnotationsAuthorizingMethodInterceptor.java:82)
	at org.apache.shiro.authz.aop.AuthorizingMethodInterceptor.invoke(AuthorizingMethodInterceptor.java:39)
	at org.apache.shiro.spring.security.interceptor.AopAllianceAnnotationsAuthorizingMethodInterceptor.invoke(AopAllianceAnnotationsAuthorizingMethodInterceptor.java:115)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.bootdo.water.controller.WaterController$$EnhancerBySpringCGLIB$$cb941eaa.save(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:209)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:877)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:783)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:991)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:925)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:974)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:877)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:661)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:851)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:61)
	at org.apache.shiro.web.servlet.AdviceFilter.executeChain(AdviceFilter.java:108)
	at org.apache.shiro.web.servlet.AdviceFilter.doFilterInternal(AdviceFilter.java:137)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:66)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)
	at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)
	at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)
	at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)
	at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:383)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:109)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:496)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:790)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1468)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Unknown Source)
Caused by: com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException: Column 'water_price' cannot be null
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(Unknown Source)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(Unknown Source)
	at java.lang.reflect.Constructor.newInstance(Unknown Source)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:425)
	at com.mysql.jdbc.Util.getInstance(Util.java:408)
	at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:936)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3976)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3912)
	at com.mysql.jdbc.MysqlIO.sendCommand(MysqlIO.java:2530)
	at com.mysql.jdbc.MysqlIO.sqlQueryDirect(MysqlIO.java:2683)
	at com.mysql.jdbc.ConnectionImpl.execSQL(ConnectionImpl.java:2486)
	at com.mysql.jdbc.PreparedStatement.executeInternal(PreparedStatement.java:1858)
	at com.mysql.jdbc.PreparedStatement.execute(PreparedStatement.java:1197)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2931)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2929)
	at com.alibaba.druid.wall.WallFilter.preparedStatement_execute(WallFilter.java:601)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2929)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2929)
	at com.alibaba.druid.proxy.jdbc.PreparedStatementProxyImpl.execute(PreparedStatementProxyImpl.java:131)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:493)
	at sun.reflect.GeneratedMethodAccessor128.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:59)
	at com.sun.proxy.$Proxy173.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.update(PreparedStatementHandler.java:46)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.update(RoutingStatementHandler.java:74)
	at org.apache.ibatis.executor.SimpleExecutor.doUpdate(SimpleExecutor.java:50)
	at org.apache.ibatis.executor.BaseExecutor.update(BaseExecutor.java:117)
	at org.apache.ibatis.executor.CachingExecutor.update(CachingExecutor.java:76)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:198)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.insert(DefaultSqlSession.java:185)
	at sun.reflect.GeneratedMethodAccessor225.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:434)
	... 103 common frames omitted
2019-04-03 17:59:52 -<==    Updates: 1
2019-04-03 17:59:54 -请求地址 : http://localhost:8081/water/water/save
2019-04-03 17:59:54 -HTTP METHOD : POST
2019-04-03 17:59:54 -CLASS_METHOD : com.bootdo.water.controller.WaterController.save
2019-04-03 17:59:54 -参数 : [com.bootdo.water.domain.WaterDO@3bb8e9a2]
2019-04-03 17:59:54 -==>  Preparing: insert into water ( `user_id`, `user_name`, `user_type`, `user_org`, `user_tell`, `user_state`, `wages_id`, `water_type`, `water_price`, `water_cost`, `water_sum`, `create_time`, `create_by`, `update_time`, `update_by`, `remark` ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 17:59:54 -==> Parameters: (String), (String), (String), (String), (String), (String), (String), (String), null, null, null, null, 1(Long), 2019-04-03 17:59:54.441(Timestamp), 1(Long), (String)
2019-04-03 17:59:54 -{conn-10001, pstmt-20041} execute error. insert into water
		(
			`user_id`, 
			`user_name`, 
			`user_type`, 
			`user_org`, 
			`user_tell`, 
			`user_state`, 
			`wages_id`, 
			`water_type`, 
			`water_price`, 
		    `water_cost`, 
			`water_sum`, 
			`create_time`, 
			`create_by`, 
			`update_time`, 
			`update_by`, 
			`remark`
		)
		values
		(
			?, 
			?, 
			?, 
			?, 
			?, 
			?, 
			?, 
			?, 
			?, 
			?, 
			?, 
			?, 
			?, 
			?, 
			?, 
			?
		)
com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException: Column 'water_price' cannot be null
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(Unknown Source)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(Unknown Source)
	at java.lang.reflect.Constructor.newInstance(Unknown Source)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:425)
	at com.mysql.jdbc.Util.getInstance(Util.java:408)
	at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:936)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3976)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3912)
	at com.mysql.jdbc.MysqlIO.sendCommand(MysqlIO.java:2530)
	at com.mysql.jdbc.MysqlIO.sqlQueryDirect(MysqlIO.java:2683)
	at com.mysql.jdbc.ConnectionImpl.execSQL(ConnectionImpl.java:2486)
	at com.mysql.jdbc.PreparedStatement.executeInternal(PreparedStatement.java:1858)
	at com.mysql.jdbc.PreparedStatement.execute(PreparedStatement.java:1197)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2931)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2929)
	at com.alibaba.druid.wall.WallFilter.preparedStatement_execute(WallFilter.java:601)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2929)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2929)
	at com.alibaba.druid.proxy.jdbc.PreparedStatementProxyImpl.execute(PreparedStatementProxyImpl.java:131)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:493)
	at sun.reflect.GeneratedMethodAccessor128.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:59)
	at com.sun.proxy.$Proxy173.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.update(PreparedStatementHandler.java:46)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.update(RoutingStatementHandler.java:74)
	at org.apache.ibatis.executor.SimpleExecutor.doUpdate(SimpleExecutor.java:50)
	at org.apache.ibatis.executor.BaseExecutor.update(BaseExecutor.java:117)
	at org.apache.ibatis.executor.CachingExecutor.update(CachingExecutor.java:76)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:198)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.insert(DefaultSqlSession.java:185)
	at sun.reflect.GeneratedMethodAccessor225.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:434)
	at com.sun.proxy.$Proxy101.insert(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.insert(SqlSessionTemplate.java:279)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:57)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy107.save(Unknown Source)
	at com.bootdo.water.service.impl.WaterServiceImpl.save(WaterServiceImpl.java:40)
	at com.bootdo.water.controller.WaterController.save(WaterController.java:188)
	at com.bootdo.water.controller.WaterController$$FastClassBySpringCGLIB$$55e6da3c.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:204)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:746)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.bootdo.common.aspect.WebLogAspect.doAround(WebLogAspect.java:57)
	at sun.reflect.GeneratedMethodAccessor126.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.apache.shiro.spring.security.interceptor.AopAllianceAnnotationsAuthorizingMethodInterceptor$1.proceed(AopAllianceAnnotationsAuthorizingMethodInterceptor.java:82)
	at org.apache.shiro.authz.aop.AuthorizingMethodInterceptor.invoke(AuthorizingMethodInterceptor.java:39)
	at org.apache.shiro.spring.security.interceptor.AopAllianceAnnotationsAuthorizingMethodInterceptor.invoke(AopAllianceAnnotationsAuthorizingMethodInterceptor.java:115)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.bootdo.water.controller.WaterController$$EnhancerBySpringCGLIB$$cb941eaa.save(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:209)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:877)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:783)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:991)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:925)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:974)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:877)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:661)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:851)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:61)
	at org.apache.shiro.web.servlet.AdviceFilter.executeChain(AdviceFilter.java:108)
	at org.apache.shiro.web.servlet.AdviceFilter.doFilterInternal(AdviceFilter.java:137)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:66)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)
	at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)
	at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)
	at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)
	at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:383)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:109)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:496)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:790)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1468)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Unknown Source)
2019-04-03 17:59:54 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 17:59:54 -==> Parameters: 1(Long), admin(String), error(String), null, http://localhost:8081/water/water/save(String), org.springframework.dao.DataIntegrityViolationException: 
### Error updating database.  Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException: Column 'water_price' cannot be null
### The error may involve com.bootdo.water.dao.WaterDao.save-Inline
### The error occurred while setting parameters
### SQL: insert into water   (    `user_id`,     `user_name`,     `user_type`,     `user_org`,     `user_tell`,     `user_state`,     `wages_id`,     `water_type`,     `water_price`,        `water_cost`,     `water_sum`,     `create_time`,     `create_by`,     `update_time`,     `update_by`,     `remark`   )   values   (    ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?   )
### Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException: Column 'water_price' cannot be null
; ]; Column 'water_price' cannot be null; nested exception is com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException: Column 'water_price' cannot be null(String), null, 2019-04-03 17:59:54.447(Timestamp)
2019-04-03 17:59:54 -
### Error updating database.  Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException: Column 'water_price' cannot be null
### The error may involve com.bootdo.water.dao.WaterDao.save-Inline
### The error occurred while setting parameters
### SQL: insert into water   (    `user_id`,     `user_name`,     `user_type`,     `user_org`,     `user_tell`,     `user_state`,     `wages_id`,     `water_type`,     `water_price`,        `water_cost`,     `water_sum`,     `create_time`,     `create_by`,     `update_time`,     `update_by`,     `remark`   )   values   (    ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?   )
### Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException: Column 'water_price' cannot be null
; ]; Column 'water_price' cannot be null; nested exception is com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException: Column 'water_price' cannot be null
org.springframework.dao.DataIntegrityViolationException: 
### Error updating database.  Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException: Column 'water_price' cannot be null
### The error may involve com.bootdo.water.dao.WaterDao.save-Inline
### The error occurred while setting parameters
### SQL: insert into water   (    `user_id`,     `user_name`,     `user_type`,     `user_org`,     `user_tell`,     `user_state`,     `wages_id`,     `water_type`,     `water_price`,        `water_cost`,     `water_sum`,     `create_time`,     `create_by`,     `update_time`,     `update_by`,     `remark`   )   values   (    ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?   )
### Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException: Column 'water_price' cannot be null
; ]; Column 'water_price' cannot be null; nested exception is com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException: Column 'water_price' cannot be null
	at org.springframework.jdbc.support.SQLExceptionSubclassTranslator.doTranslate(SQLExceptionSubclassTranslator.java:87)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:72)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:81)
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:75)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:447)
	at com.sun.proxy.$Proxy101.insert(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.insert(SqlSessionTemplate.java:279)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:57)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy107.save(Unknown Source)
	at com.bootdo.water.service.impl.WaterServiceImpl.save(WaterServiceImpl.java:40)
	at com.bootdo.water.controller.WaterController.save(WaterController.java:188)
	at com.bootdo.water.controller.WaterController$$FastClassBySpringCGLIB$$55e6da3c.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:204)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:746)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.bootdo.common.aspect.WebLogAspect.doAround(WebLogAspect.java:57)
	at sun.reflect.GeneratedMethodAccessor126.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.apache.shiro.spring.security.interceptor.AopAllianceAnnotationsAuthorizingMethodInterceptor$1.proceed(AopAllianceAnnotationsAuthorizingMethodInterceptor.java:82)
	at org.apache.shiro.authz.aop.AuthorizingMethodInterceptor.invoke(AuthorizingMethodInterceptor.java:39)
	at org.apache.shiro.spring.security.interceptor.AopAllianceAnnotationsAuthorizingMethodInterceptor.invoke(AopAllianceAnnotationsAuthorizingMethodInterceptor.java:115)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.bootdo.water.controller.WaterController$$EnhancerBySpringCGLIB$$cb941eaa.save(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:209)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:877)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:783)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:991)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:925)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:974)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:877)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:661)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:851)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:61)
	at org.apache.shiro.web.servlet.AdviceFilter.executeChain(AdviceFilter.java:108)
	at org.apache.shiro.web.servlet.AdviceFilter.doFilterInternal(AdviceFilter.java:137)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:66)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)
	at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)
	at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)
	at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)
	at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:383)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:109)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:496)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:790)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1468)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Unknown Source)
Caused by: com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException: Column 'water_price' cannot be null
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(Unknown Source)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(Unknown Source)
	at java.lang.reflect.Constructor.newInstance(Unknown Source)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:425)
	at com.mysql.jdbc.Util.getInstance(Util.java:408)
	at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:936)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3976)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3912)
	at com.mysql.jdbc.MysqlIO.sendCommand(MysqlIO.java:2530)
	at com.mysql.jdbc.MysqlIO.sqlQueryDirect(MysqlIO.java:2683)
	at com.mysql.jdbc.ConnectionImpl.execSQL(ConnectionImpl.java:2486)
	at com.mysql.jdbc.PreparedStatement.executeInternal(PreparedStatement.java:1858)
	at com.mysql.jdbc.PreparedStatement.execute(PreparedStatement.java:1197)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2931)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2929)
	at com.alibaba.druid.wall.WallFilter.preparedStatement_execute(WallFilter.java:601)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2929)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2929)
	at com.alibaba.druid.proxy.jdbc.PreparedStatementProxyImpl.execute(PreparedStatementProxyImpl.java:131)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:493)
	at sun.reflect.GeneratedMethodAccessor128.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:59)
	at com.sun.proxy.$Proxy173.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.update(PreparedStatementHandler.java:46)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.update(RoutingStatementHandler.java:74)
	at org.apache.ibatis.executor.SimpleExecutor.doUpdate(SimpleExecutor.java:50)
	at org.apache.ibatis.executor.BaseExecutor.update(BaseExecutor.java:117)
	at org.apache.ibatis.executor.CachingExecutor.update(CachingExecutor.java:76)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:198)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.insert(DefaultSqlSession.java:185)
	at sun.reflect.GeneratedMethodAccessor225.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:434)
	... 103 common frames omitted
2019-04-03 17:59:54 -<==    Updates: 1
2019-04-03 18:05:44 -请求地址 : http://localhost:8081/index
2019-04-03 18:05:44 -HTTP METHOD : GET
2019-04-03 18:05:44 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2019-04-03 18:05:44 -参数 : [{}]
2019-04-03 18:05:44 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2019-04-03 18:05:44 -==> Parameters: 1(Long)
2019-04-03 18:05:44 -<==      Total: 46
2019-04-03 18:05:44 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2019-04-03 18:05:44 -==> Parameters: 138(Long)
2019-04-03 18:05:44 -<==      Total: 1
2019-04-03 18:05:44 -耗时 : 18
2019-04-03 18:05:44 -返回值 : index_v1
2019-04-03 18:05:44 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 18:05:44 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 18(Integer), com.bootdo.system.controller.LoginController.index()(String), {"menus":[{"attributes":{"icon":"fa fa-money","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-money","url":"/moneyList/moneyList"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"102","parentId":"106","text":"现金缴费"},{"attributes":{"icon":"fa fa-book","url":"/moneyLog/elecLog"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"107","parentId":"106","text":"缴费记录"}],"hasChildren":true,"hasParent":false,"id":"106","parentId":"0","text":"收费管理"},{"attributes":{"icon":"fa fa-lightbulb-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/elec/elec"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"121","parentId":"103","text":"电费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"elec/elecInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"122","parentId":"103","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"elec/elecUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"123","parentId":"103","text":"电表上传"},{"attributes":{"icon":"fa fa-cc","url":"/elec/elecPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"124","parentId":"103","text":"电价管理"}],"hasChildren":true,"hasParent":false,"id":"103","parentId":"0","text":"电费管理"},{"attributes":{"icon":"fa fa-tint","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/water/water"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"117","parentId":"105","text":"水费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"water/waterInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"118","parentId":"105","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"water/waterUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"119","parentId":"105","text":"水费生成"},{"attributes":{"icon":"fa fa-cc","url":"/water/waterPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"120","parentId":"105","text":"水价管理"}],"hasChildren":true,"hasParent":false,"id":"105","parentId":"0","text":"水费管理"},{"attributes":{"icon":"fa fa-fire","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/heat/heat"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"113","parentId":"104","text":"暖费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"heat/heatInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"114","parentId":"104","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"heat/heatUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"115","parentId":"104","text":"暖费生成"},{"attributes":{"icon":"","url":"/heat/heatPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"116","parentId":"104","text":"暖价管理"}],"hasChildren":true,"hasParent":false,"id":"104","parentId":"0","text":"暖费管理"},{"attributes":{"icon":"fa fa-vcard-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-bomb","url":"/print/print"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"149","parentId":"108","text":"票据记录"}],"hasChildren":true,"hasParent":false,"id":"108","parentId":"0","text":"票据管理"},{"attributes":{"icon":"fa fa-bar-chart","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-area-chart","url":"/chart/graph_echarts.html"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","text":"百度chart"},{"attributes":{"icon":"fa fa-sun-o","url":"charts/countDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"109","parentId":"97","text":"日统计报表"},{"attributes":{"icon":"fa fa-registered","url":"charts/countMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"110","parentId":"97","text":"月统计报表"},{"attributes":{"icon":"fa fa-support","url":"charts/countYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"111","parentId":"97","text":"年统计报表"},{"attributes":{"icon":"fa fa-money","url":"charts/countOwe"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"155","parentId":"97","text":"欠费报表图"},{"attributes":{"icon":"fa fa-tachometer","url":"charts/countRun"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"112","parentId":"97","text":"走势图报表"}],"hasChildren":true,"hasParent":false,"id":"97","parentId":"0","text":"统计管理"},{"attributes":{"icon":"fa fa-bars","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-book","url":"/common/dict"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"78","parentId":"1","text":"数据字典"},{"attributes":{"icon":"fa fa-folder-open","url":"/common/sysFile"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"71","parentId":"1","text":"文件管理"}],"h(String), 127.0.0.1(String), 2019-04-03 18:05:44.88(Timestamp)
2019-04-03 18:05:45 -请求地址 : http://localhost:8081/main
2019-04-03 18:05:45 -HTTP METHOD : GET
2019-04-03 18:05:45 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 18:05:45 -参数 : []
2019-04-03 18:05:45 -耗时 : 1
2019-04-03 18:05:45 -返回值 : main
2019-04-03 18:05:45 -<==    Updates: 1
2019-04-03 18:05:45 -请求地址 : http://localhost:8081/oa/notify/message
2019-04-03 18:05:45 -HTTP METHOD : GET
2019-04-03 18:05:45 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2019-04-03 18:05:45 -参数 : []
2019-04-03 18:05:45 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2019-04-03 18:05:45 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2019-04-03 18:05:45 -<==      Total: 0
2019-04-03 18:05:45 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2019-04-03 18:05:45 -==> Parameters: 1(Long), 0(String)
2019-04-03 18:05:45 -<==      Total: 1
2019-04-03 18:05:45 -耗时 : 6
2019-04-03 18:05:45 -返回值 : com.bootdo.common.utils.PageUtils@6adf2d92
2019-04-03 18:05:45 -请求地址 : http://localhost:8081/main
2019-04-03 18:05:45 -HTTP METHOD : GET
2019-04-03 18:05:45 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 18:05:45 -参数 : []
2019-04-03 18:05:45 -耗时 : 1
2019-04-03 18:05:45 -返回值 : main
2019-04-03 18:05:47 -==>  Preparing: select distinct m.perms from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id = ur.role_id where ur.user_id = ? 
2019-04-03 18:05:47 -==> Parameters: 1(Long)
2019-04-03 18:05:47 -<==      Total: 90
2019-04-03 18:05:47 -请求地址 : http://localhost:8081/water/water
2019-04-03 18:05:47 -HTTP METHOD : GET
2019-04-03 18:05:47 -CLASS_METHOD : com.bootdo.water.controller.WaterController.Water
2019-04-03 18:05:47 -参数 : []
2019-04-03 18:05:47 -耗时 : 0
2019-04-03 18:05:47 -返回值 : water/water/water
2019-04-03 18:05:47 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-03 18:05:47 -HTTP METHOD : GET
2019-04-03 18:05:47 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 18:05:47 -参数 : [userType]
2019-04-03 18:05:47 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 18:05:47 -==> Parameters: userType(String)
2019-04-03 18:05:47 -<==      Total: 2
2019-04-03 18:05:47 -耗时 : 3
2019-04-03 18:05:47 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 18:05:47 -请求地址 : http://localhost:8081/water/water/list
2019-04-03 18:05:47 -HTTP METHOD : GET
2019-04-03 18:05:47 -CLASS_METHOD : com.bootdo.water.controller.WaterController.list
2019-04-03 18:05:47 -参数 : [{limit=3, offset=0, userType=, userOrg=, userId=, createTime=, queryType=1}]
2019-04-03 18:05:47 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`water_type`,`water_price`,`water_cost`,`water_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from water order by id asc limit ?, ? 
2019-04-03 18:05:47 -==> Parameters: 0(Integer), 3(Integer)
2019-04-03 18:05:47 -<==      Total: 3
2019-04-03 18:05:47 -==>  Preparing: select count(*) from water 
2019-04-03 18:05:47 -==> Parameters: 
2019-04-03 18:05:47 -<==      Total: 1
2019-04-03 18:05:47 -耗时 : 6
2019-04-03 18:05:47 -返回值 : com.bootdo.common.utils.PageUtils@29f9dd21
2019-04-03 18:05:52 -请求地址 : http://localhost:8081/water/water/add
2019-04-03 18:05:52 -HTTP METHOD : GET
2019-04-03 18:05:52 -CLASS_METHOD : com.bootdo.water.controller.WaterController.add
2019-04-03 18:05:52 -参数 : []
2019-04-03 18:05:52 -耗时 : 0
2019-04-03 18:05:52 -返回值 : water/water/add
2019-04-03 18:05:52 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-03 18:05:52 -HTTP METHOD : GET
2019-04-03 18:05:52 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 18:05:52 -参数 : [userType]
2019-04-03 18:05:52 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 18:05:52 -==> Parameters: userType(String)
2019-04-03 18:05:52 -请求地址 : http://localhost:8081/common/dict/list/userState
2019-04-03 18:05:52 -HTTP METHOD : GET
2019-04-03 18:05:52 -<==      Total: 2
2019-04-03 18:05:52 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 18:05:52 -耗时 : 9
2019-04-03 18:05:52 -参数 : [userState]
2019-04-03 18:05:52 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 18:05:52 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 18:05:52 -==> Parameters: userState(String)
2019-04-03 18:05:52 -<==      Total: 2
2019-04-03 18:05:52 -耗时 : 9
2019-04-03 18:05:52 -返回值 : [DictDO{id=126, name='使用中', value='1', type='userState', description='用户状态', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=125, name='未使用', value='0', type='userState', description='用户状态', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 18:05:52 -请求地址 : http://localhost:8081/common/dict/list/waterType
2019-04-03 18:05:52 -HTTP METHOD : GET
2019-04-03 18:05:52 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 18:05:52 -参数 : [waterType]
2019-04-03 18:05:52 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 18:05:52 -==> Parameters: waterType(String)
2019-04-03 18:05:52 -<==      Total: 6
2019-04-03 18:05:52 -耗时 : 3
2019-04-03 18:05:52 -返回值 : [DictDO{id=132, name='特殊水费4', value='5', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=131, name='特殊水费3', value='4', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=130, name='特殊水费2', value='3', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=129, name='特殊水费1', value='2', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=128, name='民用水', value='1', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=127, name='商业水', value='0', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 18:06:31 -请求地址 : http://localhost:8081/water/water/save
2019-04-03 18:06:31 -HTTP METHOD : POST
2019-04-03 18:06:31 -CLASS_METHOD : com.bootdo.water.controller.WaterController.save
2019-04-03 18:06:31 -参数 : [com.bootdo.water.domain.WaterDO@5fb4c2d6]
2019-04-03 18:06:31 -==>  Preparing: insert into water ( `user_id`, `user_name`, `user_type`, `user_org`, `user_tell`, `user_state`, `wages_id`, `water_type`, `water_price`, `water_cost`, `water_sum`, `create_time`, `create_by`, `update_time`, `update_by`, `remark` ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 18:06:31 -==> Parameters: (String), (String), (String), (String), (String), (String), (String), (String), null, null, null, (String), 1(Long), 2019-04-03 18:06:31.621(Timestamp), 1(Long), (String)
2019-04-03 18:06:31 -{conn-10001, pstmt-20042} execute error. insert into water
		(
			`user_id`, 
			`user_name`, 
			`user_type`, 
			`user_org`, 
			`user_tell`, 
			`user_state`, 
			`wages_id`, 
			`water_type`, 
			`water_price`, 
		    `water_cost`, 
			`water_sum`, 
			`create_time`, 
			`create_by`, 
			`update_time`, 
			`update_by`, 
			`remark`
		)
		values
		(
			?, 
			?, 
			?, 
			?, 
			?, 
			?, 
			?, 
			?, 
			?, 
			?, 
			?, 
			?, 
			?, 
			?, 
			?, 
			?
		)
com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException: Column 'water_price' cannot be null
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(Unknown Source)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(Unknown Source)
	at java.lang.reflect.Constructor.newInstance(Unknown Source)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:425)
	at com.mysql.jdbc.Util.getInstance(Util.java:408)
	at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:936)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3976)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3912)
	at com.mysql.jdbc.MysqlIO.sendCommand(MysqlIO.java:2530)
	at com.mysql.jdbc.MysqlIO.sqlQueryDirect(MysqlIO.java:2683)
	at com.mysql.jdbc.ConnectionImpl.execSQL(ConnectionImpl.java:2486)
	at com.mysql.jdbc.PreparedStatement.executeInternal(PreparedStatement.java:1858)
	at com.mysql.jdbc.PreparedStatement.execute(PreparedStatement.java:1197)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2931)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2929)
	at com.alibaba.druid.wall.WallFilter.preparedStatement_execute(WallFilter.java:601)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2929)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2929)
	at com.alibaba.druid.proxy.jdbc.PreparedStatementProxyImpl.execute(PreparedStatementProxyImpl.java:131)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:493)
	at sun.reflect.GeneratedMethodAccessor128.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:59)
	at com.sun.proxy.$Proxy173.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.update(PreparedStatementHandler.java:46)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.update(RoutingStatementHandler.java:74)
	at org.apache.ibatis.executor.SimpleExecutor.doUpdate(SimpleExecutor.java:50)
	at org.apache.ibatis.executor.BaseExecutor.update(BaseExecutor.java:117)
	at org.apache.ibatis.executor.CachingExecutor.update(CachingExecutor.java:76)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:198)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.insert(DefaultSqlSession.java:185)
	at sun.reflect.GeneratedMethodAccessor225.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:434)
	at com.sun.proxy.$Proxy101.insert(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.insert(SqlSessionTemplate.java:279)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:57)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy107.save(Unknown Source)
	at com.bootdo.water.service.impl.WaterServiceImpl.save(WaterServiceImpl.java:40)
	at com.bootdo.water.controller.WaterController.save(WaterController.java:188)
	at com.bootdo.water.controller.WaterController$$FastClassBySpringCGLIB$$55e6da3c.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:204)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:746)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.bootdo.common.aspect.WebLogAspect.doAround(WebLogAspect.java:57)
	at sun.reflect.GeneratedMethodAccessor126.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.apache.shiro.spring.security.interceptor.AopAllianceAnnotationsAuthorizingMethodInterceptor$1.proceed(AopAllianceAnnotationsAuthorizingMethodInterceptor.java:82)
	at org.apache.shiro.authz.aop.AuthorizingMethodInterceptor.invoke(AuthorizingMethodInterceptor.java:39)
	at org.apache.shiro.spring.security.interceptor.AopAllianceAnnotationsAuthorizingMethodInterceptor.invoke(AopAllianceAnnotationsAuthorizingMethodInterceptor.java:115)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.bootdo.water.controller.WaterController$$EnhancerBySpringCGLIB$$cb941eaa.save(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:209)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:877)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:783)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:991)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:925)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:974)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:877)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:661)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:851)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:61)
	at org.apache.shiro.web.servlet.AdviceFilter.executeChain(AdviceFilter.java:108)
	at org.apache.shiro.web.servlet.AdviceFilter.doFilterInternal(AdviceFilter.java:137)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:66)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)
	at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)
	at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)
	at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)
	at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:383)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:109)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:496)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:790)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1468)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Unknown Source)
2019-04-03 18:06:31 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 18:06:31 -
### Error updating database.  Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException: Column 'water_price' cannot be null
### The error may involve com.bootdo.water.dao.WaterDao.save-Inline
### The error occurred while setting parameters
### SQL: insert into water   (    `user_id`,     `user_name`,     `user_type`,     `user_org`,     `user_tell`,     `user_state`,     `wages_id`,     `water_type`,     `water_price`,        `water_cost`,     `water_sum`,     `create_time`,     `create_by`,     `update_time`,     `update_by`,     `remark`   )   values   (    ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?   )
### Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException: Column 'water_price' cannot be null
; ]; Column 'water_price' cannot be null; nested exception is com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException: Column 'water_price' cannot be null
org.springframework.dao.DataIntegrityViolationException: 
### Error updating database.  Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException: Column 'water_price' cannot be null
### The error may involve com.bootdo.water.dao.WaterDao.save-Inline
### The error occurred while setting parameters
### SQL: insert into water   (    `user_id`,     `user_name`,     `user_type`,     `user_org`,     `user_tell`,     `user_state`,     `wages_id`,     `water_type`,     `water_price`,        `water_cost`,     `water_sum`,     `create_time`,     `create_by`,     `update_time`,     `update_by`,     `remark`   )   values   (    ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?   )
### Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException: Column 'water_price' cannot be null
; ]; Column 'water_price' cannot be null; nested exception is com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException: Column 'water_price' cannot be null
	at org.springframework.jdbc.support.SQLExceptionSubclassTranslator.doTranslate(SQLExceptionSubclassTranslator.java:87)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:72)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:81)
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:75)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:447)
	at com.sun.proxy.$Proxy101.insert(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.insert(SqlSessionTemplate.java:279)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:57)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy107.save(Unknown Source)
	at com.bootdo.water.service.impl.WaterServiceImpl.save(WaterServiceImpl.java:40)
	at com.bootdo.water.controller.WaterController.save(WaterController.java:188)
	at com.bootdo.water.controller.WaterController$$FastClassBySpringCGLIB$$55e6da3c.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:204)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:746)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.bootdo.common.aspect.WebLogAspect.doAround(WebLogAspect.java:57)
	at sun.reflect.GeneratedMethodAccessor126.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.apache.shiro.spring.security.interceptor.AopAllianceAnnotationsAuthorizingMethodInterceptor$1.proceed(AopAllianceAnnotationsAuthorizingMethodInterceptor.java:82)
	at org.apache.shiro.authz.aop.AuthorizingMethodInterceptor.invoke(AuthorizingMethodInterceptor.java:39)
	at org.apache.shiro.spring.security.interceptor.AopAllianceAnnotationsAuthorizingMethodInterceptor.invoke(AopAllianceAnnotationsAuthorizingMethodInterceptor.java:115)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.bootdo.water.controller.WaterController$$EnhancerBySpringCGLIB$$cb941eaa.save(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:209)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:877)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:783)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:991)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:925)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:974)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:877)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:661)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:851)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:61)
	at org.apache.shiro.web.servlet.AdviceFilter.executeChain(AdviceFilter.java:108)
	at org.apache.shiro.web.servlet.AdviceFilter.doFilterInternal(AdviceFilter.java:137)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:66)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)
	at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)
	at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)
	at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)
	at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:383)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:109)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:496)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:790)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1468)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Unknown Source)
Caused by: com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException: Column 'water_price' cannot be null
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(Unknown Source)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(Unknown Source)
	at java.lang.reflect.Constructor.newInstance(Unknown Source)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:425)
	at com.mysql.jdbc.Util.getInstance(Util.java:408)
	at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:936)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3976)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3912)
	at com.mysql.jdbc.MysqlIO.sendCommand(MysqlIO.java:2530)
	at com.mysql.jdbc.MysqlIO.sqlQueryDirect(MysqlIO.java:2683)
	at com.mysql.jdbc.ConnectionImpl.execSQL(ConnectionImpl.java:2486)
	at com.mysql.jdbc.PreparedStatement.executeInternal(PreparedStatement.java:1858)
	at com.mysql.jdbc.PreparedStatement.execute(PreparedStatement.java:1197)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2931)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2929)
	at com.alibaba.druid.wall.WallFilter.preparedStatement_execute(WallFilter.java:601)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2929)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2929)
	at com.alibaba.druid.proxy.jdbc.PreparedStatementProxyImpl.execute(PreparedStatementProxyImpl.java:131)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:493)
	at sun.reflect.GeneratedMethodAccessor128.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:59)
	at com.sun.proxy.$Proxy173.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.update(PreparedStatementHandler.java:46)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.update(RoutingStatementHandler.java:74)
	at org.apache.ibatis.executor.SimpleExecutor.doUpdate(SimpleExecutor.java:50)
	at org.apache.ibatis.executor.BaseExecutor.update(BaseExecutor.java:117)
	at org.apache.ibatis.executor.CachingExecutor.update(CachingExecutor.java:76)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:198)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.insert(DefaultSqlSession.java:185)
	at sun.reflect.GeneratedMethodAccessor225.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:434)
	... 103 common frames omitted
2019-04-03 18:06:31 -==> Parameters: 1(Long), admin(String), error(String), null, http://localhost:8081/water/water/save(String), org.springframework.dao.DataIntegrityViolationException: 
### Error updating database.  Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException: Column 'water_price' cannot be null
### The error may involve com.bootdo.water.dao.WaterDao.save-Inline
### The error occurred while setting parameters
### SQL: insert into water   (    `user_id`,     `user_name`,     `user_type`,     `user_org`,     `user_tell`,     `user_state`,     `wages_id`,     `water_type`,     `water_price`,        `water_cost`,     `water_sum`,     `create_time`,     `create_by`,     `update_time`,     `update_by`,     `remark`   )   values   (    ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?   )
### Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException: Column 'water_price' cannot be null
; ]; Column 'water_price' cannot be null; nested exception is com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException: Column 'water_price' cannot be null(String), null, 2019-04-03 18:06:31.629(Timestamp)
2019-04-03 18:06:31 -<==    Updates: 1
2019-04-03 18:07:59 -请求地址 : http://localhost:8081/index
2019-04-03 18:07:59 -HTTP METHOD : GET
2019-04-03 18:07:59 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2019-04-03 18:07:59 -参数 : [{}]
2019-04-03 18:07:59 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2019-04-03 18:07:59 -==> Parameters: 1(Long)
2019-04-03 18:07:59 -<==      Total: 46
2019-04-03 18:07:59 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2019-04-03 18:07:59 -==> Parameters: 138(Long)
2019-04-03 18:07:59 -<==      Total: 1
2019-04-03 18:07:59 -耗时 : 19
2019-04-03 18:07:59 -返回值 : index_v1
2019-04-03 18:07:59 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 18:07:59 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 20(Integer), com.bootdo.system.controller.LoginController.index()(String), {"menus":[{"attributes":{"icon":"fa fa-money","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-money","url":"/moneyList/moneyList"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"102","parentId":"106","text":"现金缴费"},{"attributes":{"icon":"fa fa-book","url":"/moneyLog/elecLog"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"107","parentId":"106","text":"缴费记录"}],"hasChildren":true,"hasParent":false,"id":"106","parentId":"0","text":"收费管理"},{"attributes":{"icon":"fa fa-lightbulb-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/elec/elec"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"121","parentId":"103","text":"电费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"elec/elecInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"122","parentId":"103","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"elec/elecUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"123","parentId":"103","text":"电表上传"},{"attributes":{"icon":"fa fa-cc","url":"/elec/elecPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"124","parentId":"103","text":"电价管理"}],"hasChildren":true,"hasParent":false,"id":"103","parentId":"0","text":"电费管理"},{"attributes":{"icon":"fa fa-tint","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/water/water"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"117","parentId":"105","text":"水费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"water/waterInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"118","parentId":"105","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"water/waterUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"119","parentId":"105","text":"水费生成"},{"attributes":{"icon":"fa fa-cc","url":"/water/waterPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"120","parentId":"105","text":"水价管理"}],"hasChildren":true,"hasParent":false,"id":"105","parentId":"0","text":"水费管理"},{"attributes":{"icon":"fa fa-fire","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/heat/heat"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"113","parentId":"104","text":"暖费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"heat/heatInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"114","parentId":"104","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"heat/heatUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"115","parentId":"104","text":"暖费生成"},{"attributes":{"icon":"","url":"/heat/heatPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"116","parentId":"104","text":"暖价管理"}],"hasChildren":true,"hasParent":false,"id":"104","parentId":"0","text":"暖费管理"},{"attributes":{"icon":"fa fa-vcard-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-bomb","url":"/print/print"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"149","parentId":"108","text":"票据记录"}],"hasChildren":true,"hasParent":false,"id":"108","parentId":"0","text":"票据管理"},{"attributes":{"icon":"fa fa-bar-chart","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-area-chart","url":"/chart/graph_echarts.html"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","text":"百度chart"},{"attributes":{"icon":"fa fa-sun-o","url":"charts/countDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"109","parentId":"97","text":"日统计报表"},{"attributes":{"icon":"fa fa-registered","url":"charts/countMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"110","parentId":"97","text":"月统计报表"},{"attributes":{"icon":"fa fa-money","url":"charts/countOwe"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"155","parentId":"97","text":"欠费报表图"},{"attributes":{"icon":"fa fa-support","url":"charts/countYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"111","parentId":"97","text":"年统计报表"},{"attributes":{"icon":"fa fa-tachometer","url":"charts/countRun"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"112","parentId":"97","text":"走势图报表"}],"hasChildren":true,"hasParent":false,"id":"97","parentId":"0","text":"统计管理"},{"attributes":{"icon":"fa fa-bars","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-book","url":"/common/dict"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"78","parentId":"1","text":"数据字典"},{"attributes":{"icon":"fa fa-folder-open","url":"/common/sysFile"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"71","parentId":"1","text":"文件管理"}],"h(String), 127.0.0.1(String), 2019-04-03 18:07:59.548(Timestamp)
2019-04-03 18:07:59 -<==    Updates: 1
2019-04-03 18:07:59 -请求地址 : http://localhost:8081/main
2019-04-03 18:07:59 -HTTP METHOD : GET
2019-04-03 18:07:59 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 18:07:59 -参数 : []
2019-04-03 18:07:59 -耗时 : 45
2019-04-03 18:07:59 -返回值 : main
2019-04-03 18:07:59 -请求地址 : http://localhost:8081/oa/notify/message
2019-04-03 18:07:59 -HTTP METHOD : GET
2019-04-03 18:07:59 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2019-04-03 18:07:59 -参数 : []
2019-04-03 18:07:59 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2019-04-03 18:07:59 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2019-04-03 18:07:59 -<==      Total: 0
2019-04-03 18:07:59 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2019-04-03 18:07:59 -==> Parameters: 1(Long), 0(String)
2019-04-03 18:07:59 -<==      Total: 1
2019-04-03 18:07:59 -耗时 : 6
2019-04-03 18:07:59 -返回值 : com.bootdo.common.utils.PageUtils@5e334a7b
2019-04-03 18:08:00 -请求地址 : http://localhost:8081/main
2019-04-03 18:08:00 -HTTP METHOD : GET
2019-04-03 18:08:00 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 18:08:00 -参数 : []
2019-04-03 18:08:00 -耗时 : 0
2019-04-03 18:08:00 -返回值 : main
2019-04-03 18:08:01 -请求地址 : http://localhost:8081/water/water
2019-04-03 18:08:01 -HTTP METHOD : GET
2019-04-03 18:08:01 -CLASS_METHOD : com.bootdo.water.controller.WaterController.Water
2019-04-03 18:08:01 -参数 : []
2019-04-03 18:08:01 -耗时 : 1
2019-04-03 18:08:01 -返回值 : water/water/water
2019-04-03 18:08:01 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-03 18:08:01 -HTTP METHOD : GET
2019-04-03 18:08:01 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 18:08:01 -参数 : [userType]
2019-04-03 18:08:01 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 18:08:01 -==> Parameters: userType(String)
2019-04-03 18:08:01 -<==      Total: 2
2019-04-03 18:08:01 -耗时 : 3
2019-04-03 18:08:01 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 18:08:01 -请求地址 : http://localhost:8081/water/water/list
2019-04-03 18:08:01 -HTTP METHOD : GET
2019-04-03 18:08:01 -CLASS_METHOD : com.bootdo.water.controller.WaterController.list
2019-04-03 18:08:01 -参数 : [{limit=3, offset=0, userType=, userOrg=, userId=, createTime=, queryType=1}]
2019-04-03 18:08:01 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`water_type`,`water_price`,`water_cost`,`water_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from water order by id asc limit ?, ? 
2019-04-03 18:08:01 -==> Parameters: 0(Integer), 3(Integer)
2019-04-03 18:08:01 -<==      Total: 3
2019-04-03 18:08:01 -==>  Preparing: select count(*) from water 
2019-04-03 18:08:01 -==> Parameters: 
2019-04-03 18:08:01 -<==      Total: 1
2019-04-03 18:08:01 -耗时 : 5
2019-04-03 18:08:01 -返回值 : com.bootdo.common.utils.PageUtils@39b30e7
2019-04-03 18:08:04 -请求地址 : http://localhost:8081/water/water/add
2019-04-03 18:08:04 -HTTP METHOD : GET
2019-04-03 18:08:04 -CLASS_METHOD : com.bootdo.water.controller.WaterController.add
2019-04-03 18:08:04 -参数 : []
2019-04-03 18:08:04 -耗时 : 1
2019-04-03 18:08:04 -返回值 : water/water/add
2019-04-03 18:08:05 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-03 18:08:05 -HTTP METHOD : GET
2019-04-03 18:08:05 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 18:08:05 -参数 : [userType]
2019-04-03 18:08:05 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 18:08:05 -==> Parameters: userType(String)
2019-04-03 18:08:05 -请求地址 : http://localhost:8081/common/dict/list/userState
2019-04-03 18:08:05 -HTTP METHOD : GET
2019-04-03 18:08:05 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 18:08:05 -参数 : [userState]
2019-04-03 18:08:05 -<==      Total: 2
2019-04-03 18:08:05 -耗时 : 5
2019-04-03 18:08:05 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 18:08:05 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 18:08:05 -请求地址 : http://localhost:8081/common/dict/list/waterType
2019-04-03 18:08:05 -HTTP METHOD : GET
2019-04-03 18:08:05 -==> Parameters: userState(String)
2019-04-03 18:08:05 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 18:08:05 -参数 : [waterType]
2019-04-03 18:08:05 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 18:08:05 -==> Parameters: waterType(String)
2019-04-03 18:08:05 -<==      Total: 2
2019-04-03 18:08:05 -耗时 : 5
2019-04-03 18:08:05 -返回值 : [DictDO{id=126, name='使用中', value='1', type='userState', description='用户状态', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=125, name='未使用', value='0', type='userState', description='用户状态', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 18:08:05 -<==      Total: 6
2019-04-03 18:08:05 -耗时 : 4
2019-04-03 18:08:05 -返回值 : [DictDO{id=132, name='特殊水费4', value='5', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=131, name='特殊水费3', value='4', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=130, name='特殊水费2', value='3', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=129, name='特殊水费1', value='2', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=128, name='民用水', value='1', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=127, name='商业水', value='0', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 18:10:15 -请求地址 : http://localhost:8081/index
2019-04-03 18:10:15 -HTTP METHOD : GET
2019-04-03 18:10:15 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2019-04-03 18:10:15 -参数 : [{}]
2019-04-03 18:10:15 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2019-04-03 18:10:15 -==> Parameters: 1(Long)
2019-04-03 18:10:15 -<==      Total: 46
2019-04-03 18:10:15 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2019-04-03 18:10:15 -==> Parameters: 138(Long)
2019-04-03 18:10:15 -<==      Total: 1
2019-04-03 18:10:15 -耗时 : 27
2019-04-03 18:10:15 -返回值 : index_v1
2019-04-03 18:10:15 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 18:10:15 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 27(Integer), com.bootdo.system.controller.LoginController.index()(String), {"menus":[{"attributes":{"icon":"fa fa-money","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-money","url":"/moneyList/moneyList"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"102","parentId":"106","text":"现金缴费"},{"attributes":{"icon":"fa fa-book","url":"/moneyLog/elecLog"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"107","parentId":"106","text":"缴费记录"}],"hasChildren":true,"hasParent":false,"id":"106","parentId":"0","text":"收费管理"},{"attributes":{"icon":"fa fa-lightbulb-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/elec/elec"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"121","parentId":"103","text":"电费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"elec/elecInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"122","parentId":"103","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"elec/elecUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"123","parentId":"103","text":"电表上传"},{"attributes":{"icon":"fa fa-cc","url":"/elec/elecPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"124","parentId":"103","text":"电价管理"}],"hasChildren":true,"hasParent":false,"id":"103","parentId":"0","text":"电费管理"},{"attributes":{"icon":"fa fa-tint","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/water/water"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"117","parentId":"105","text":"水费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"water/waterInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"118","parentId":"105","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"water/waterUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"119","parentId":"105","text":"水费生成"},{"attributes":{"icon":"fa fa-cc","url":"/water/waterPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"120","parentId":"105","text":"水价管理"}],"hasChildren":true,"hasParent":false,"id":"105","parentId":"0","text":"水费管理"},{"attributes":{"icon":"fa fa-fire","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/heat/heat"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"113","parentId":"104","text":"暖费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"heat/heatInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"114","parentId":"104","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"heat/heatUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"115","parentId":"104","text":"暖费生成"},{"attributes":{"icon":"","url":"/heat/heatPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"116","parentId":"104","text":"暖价管理"}],"hasChildren":true,"hasParent":false,"id":"104","parentId":"0","text":"暖费管理"},{"attributes":{"icon":"fa fa-vcard-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-bomb","url":"/print/print"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"149","parentId":"108","text":"票据记录"}],"hasChildren":true,"hasParent":false,"id":"108","parentId":"0","text":"票据管理"},{"attributes":{"icon":"fa fa-bar-chart","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-area-chart","url":"/chart/graph_echarts.html"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","text":"百度chart"},{"attributes":{"icon":"fa fa-sun-o","url":"charts/countDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"109","parentId":"97","text":"日统计报表"},{"attributes":{"icon":"fa fa-registered","url":"charts/countMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"110","parentId":"97","text":"月统计报表"},{"attributes":{"icon":"fa fa-money","url":"charts/countOwe"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"155","parentId":"97","text":"欠费报表图"},{"attributes":{"icon":"fa fa-support","url":"charts/countYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"111","parentId":"97","text":"年统计报表"},{"attributes":{"icon":"fa fa-tachometer","url":"charts/countRun"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"112","parentId":"97","text":"走势图报表"}],"hasChildren":true,"hasParent":false,"id":"97","parentId":"0","text":"统计管理"},{"attributes":{"icon":"fa fa-bars","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-book","url":"/common/dict"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"78","parentId":"1","text":"数据字典"},{"attributes":{"icon":"fa fa-folder-open","url":"/common/sysFile"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"71","parentId":"1","text":"文件管理"}],"h(String), 127.0.0.1(String), 2019-04-03 18:10:15.856(Timestamp)
2019-04-03 18:10:15 -请求地址 : http://localhost:8081/main
2019-04-03 18:10:15 -HTTP METHOD : GET
2019-04-03 18:10:15 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 18:10:15 -参数 : []
2019-04-03 18:10:15 -耗时 : 0
2019-04-03 18:10:15 -返回值 : main
2019-04-03 18:10:15 -<==    Updates: 1
2019-04-03 18:10:16 -请求地址 : http://localhost:8081/oa/notify/message
2019-04-03 18:10:16 -HTTP METHOD : GET
2019-04-03 18:10:16 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2019-04-03 18:10:16 -参数 : []
2019-04-03 18:10:16 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2019-04-03 18:10:16 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2019-04-03 18:10:16 -<==      Total: 0
2019-04-03 18:10:16 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2019-04-03 18:10:16 -==> Parameters: 1(Long), 0(String)
2019-04-03 18:10:16 -<==      Total: 1
2019-04-03 18:10:16 -耗时 : 28
2019-04-03 18:10:16 -返回值 : com.bootdo.common.utils.PageUtils@6aa33845
2019-04-03 18:10:16 -请求地址 : http://localhost:8081/main
2019-04-03 18:10:16 -HTTP METHOD : GET
2019-04-03 18:10:16 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 18:10:16 -参数 : []
2019-04-03 18:10:16 -耗时 : 1
2019-04-03 18:10:16 -返回值 : main
2019-04-03 18:10:18 -请求地址 : http://localhost:8081/heat/heat
2019-04-03 18:10:18 -HTTP METHOD : GET
2019-04-03 18:10:18 -CLASS_METHOD : com.bootdo.heat.controller.HeatController.Heat
2019-04-03 18:10:18 -参数 : []
2019-04-03 18:10:18 -耗时 : 0
2019-04-03 18:10:18 -返回值 : heat/heat/heat
2019-04-03 18:10:18 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-03 18:10:18 -HTTP METHOD : GET
2019-04-03 18:10:18 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 18:10:18 -参数 : [userType]
2019-04-03 18:10:18 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 18:10:18 -==> Parameters: userType(String)
2019-04-03 18:10:18 -<==      Total: 2
2019-04-03 18:10:18 -耗时 : 4
2019-04-03 18:10:18 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 18:10:18 -请求地址 : http://localhost:8081/heat/heat/list
2019-04-03 18:10:18 -HTTP METHOD : GET
2019-04-03 18:10:18 -CLASS_METHOD : com.bootdo.heat.controller.HeatController.list
2019-04-03 18:10:18 -参数 : [{limit=10, offset=0, userType=, userOrg=, userId=, createTime=, queryType=1}]
2019-04-03 18:10:18 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`heat_type`,`heat_price`,`heat_area`,`heat_cost`,`heat_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from heat order by id asc limit ?, ? 
2019-04-03 18:10:18 -==> Parameters: 0(Integer), 10(Integer)
2019-04-03 18:10:18 -<==      Total: 10
2019-04-03 18:10:18 -==>  Preparing: select count(*) from heat 
2019-04-03 18:10:18 -==> Parameters: 
2019-04-03 18:10:18 -<==      Total: 1
2019-04-03 18:10:18 -耗时 : 6
2019-04-03 18:10:18 -返回值 : com.bootdo.common.utils.PageUtils@107f54c7
2019-04-03 18:10:22 -请求地址 : http://localhost:8081/heat/heat/add
2019-04-03 18:10:22 -HTTP METHOD : GET
2019-04-03 18:10:22 -CLASS_METHOD : com.bootdo.heat.controller.HeatController.add
2019-04-03 18:10:22 -参数 : []
2019-04-03 18:10:22 -耗时 : 1
2019-04-03 18:10:22 -返回值 : heat/heat/add
2019-04-03 18:10:22 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-03 18:10:22 -HTTP METHOD : GET
2019-04-03 18:10:22 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 18:10:22 -参数 : [userType]
2019-04-03 18:10:22 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 18:10:22 -==> Parameters: userType(String)
2019-04-03 18:10:22 -请求地址 : http://localhost:8081/common/dict/list/userState
2019-04-03 18:10:22 -HTTP METHOD : GET
2019-04-03 18:10:22 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 18:10:22 -参数 : [userState]
2019-04-03 18:10:22 -<==      Total: 2
2019-04-03 18:10:22 -请求地址 : http://localhost:8081/common/dict/list/heatType
2019-04-03 18:10:22 -耗时 : 5
2019-04-03 18:10:22 -HTTP METHOD : GET
2019-04-03 18:10:22 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 18:10:22 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 18:10:22 -参数 : [heatType]
2019-04-03 18:10:22 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 18:10:22 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 18:10:22 -==> Parameters: heatType(String)
2019-04-03 18:10:22 -==> Parameters: userState(String)
2019-04-03 18:10:22 -<==      Total: 2
2019-04-03 18:10:22 -<==      Total: 5
2019-04-03 18:10:22 -耗时 : 7
2019-04-03 18:10:22 -耗时 : 5
2019-04-03 18:10:22 -返回值 : [DictDO{id=126, name='使用中', value='1', type='userState', description='用户状态', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=125, name='未使用', value='0', type='userState', description='用户状态', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 18:10:22 -返回值 : [DictDO{id=137, name='特殊暖费1', value='4', type='heatType', description='暖气类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=136, name='工业非盈利', value='3', type='heatType', description='暖气类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=135, name='工业盈利', value='2', type='heatType', description='暖气类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=134, name='民用暖', value='1', type='heatType', description='暖气类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=133, name='商业暖', value='0', type='heatType', description='暖气类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 18:10:51 -请求地址 : http://localhost:8081/elec/elec
2019-04-03 18:10:51 -HTTP METHOD : GET
2019-04-03 18:10:51 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.Elec
2019-04-03 18:10:51 -参数 : []
2019-04-03 18:10:51 -耗时 : 0
2019-04-03 18:10:51 -返回值 : elec/elec/elec
2019-04-03 18:10:51 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-03 18:10:51 -HTTP METHOD : GET
2019-04-03 18:10:51 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 18:10:51 -参数 : [userType]
2019-04-03 18:10:51 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 18:10:51 -==> Parameters: userType(String)
2019-04-03 18:10:51 -<==      Total: 2
2019-04-03 18:10:51 -耗时 : 4
2019-04-03 18:10:51 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 18:10:51 -请求地址 : http://localhost:8081/elec/elec/list
2019-04-03 18:10:51 -HTTP METHOD : GET
2019-04-03 18:10:51 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.list
2019-04-03 18:10:51 -参数 : [{limit=10, offset=0, userType=, userOrg=, userId=, createTime=, queryType=1}, com.bootdo.elec.domain.ElecDO@49e20b7b]
2019-04-03 18:10:51 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec order by id asc limit ?, ? 
2019-04-03 18:10:51 -==> Parameters: 0(Integer), 10(Integer)
2019-04-03 18:10:51 -<==      Total: 10
2019-04-03 18:10:51 -==>  Preparing: select count(*) from elec 
2019-04-03 18:10:51 -==> Parameters: 
2019-04-03 18:10:51 -<==      Total: 1
2019-04-03 18:10:51 -耗时 : 6
2019-04-03 18:10:51 -返回值 : com.bootdo.common.utils.PageUtils@1cb16dde
2019-04-03 18:10:55 -请求地址 : http://localhost:8081/elec/elec/add
2019-04-03 18:10:55 -HTTP METHOD : GET
2019-04-03 18:10:55 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.add
2019-04-03 18:10:55 -参数 : []
2019-04-03 18:10:55 -耗时 : 1
2019-04-03 18:10:55 -返回值 : elec/elec/add
2019-04-03 18:10:55 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-03 18:10:55 -HTTP METHOD : GET
2019-04-03 18:10:55 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 18:10:55 -参数 : [userType]
2019-04-03 18:10:55 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 18:10:55 -==> Parameters: userType(String)
2019-04-03 18:10:55 -请求地址 : http://localhost:8081/common/dict/list/userState
2019-04-03 18:10:55 -HTTP METHOD : GET
2019-04-03 18:10:55 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 18:10:55 -参数 : [userState]
2019-04-03 18:10:55 -<==      Total: 2
2019-04-03 18:10:55 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 18:10:55 -==> Parameters: userState(String)
2019-04-03 18:10:55 -耗时 : 3
2019-04-03 18:10:55 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 18:10:55 -请求地址 : http://localhost:8081/common/dict/list/elecType
2019-04-03 18:10:55 -HTTP METHOD : GET
2019-04-03 18:10:55 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 18:10:55 -参数 : [elecType]
2019-04-03 18:10:55 -<==      Total: 2
2019-04-03 18:10:55 -耗时 : 5
2019-04-03 18:10:55 -返回值 : [DictDO{id=126, name='使用中', value='1', type='userState', description='用户状态', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=125, name='未使用', value='0', type='userState', description='用户状态', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 18:10:55 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 18:10:55 -==> Parameters: elecType(String)
2019-04-03 18:10:55 -<==      Total: 2
2019-04-03 18:10:55 -耗时 : 7
2019-04-03 18:10:55 -返回值 : [DictDO{id=139, name='民用电', value='1', type='elecType', description='电量性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=138, name='商业电', value='0', type='elecType', description='电量类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 18:12:36 -WebSocketSession[1 current WS(1)-HttpStream(0)-HttpPoll(0), 16 total, 0 closed abnormally (0 connect failure, 0 send limit, 0 transport error)], stompSubProtocol[processed CONNECT(16)-CONNECTED(16)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 189], outboundChannelpool size = 0, active threads = 0, queued tasks = 0, completed tasks = 31], sockJsScheduler[pool size = 4, active threads = 1, queued tasks = 2, completed tasks = 425]
2019-04-03 18:13:17 -请求地址 : http://localhost:8081/index
2019-04-03 18:13:17 -HTTP METHOD : GET
2019-04-03 18:13:17 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2019-04-03 18:13:17 -参数 : [{}]
2019-04-03 18:13:17 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2019-04-03 18:13:17 -==> Parameters: 1(Long)
2019-04-03 18:13:17 -<==      Total: 46
2019-04-03 18:13:17 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2019-04-03 18:13:17 -==> Parameters: 138(Long)
2019-04-03 18:13:17 -<==      Total: 1
2019-04-03 18:13:17 -耗时 : 26
2019-04-03 18:13:17 -返回值 : index_v1
2019-04-03 18:13:17 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 18:13:17 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 26(Integer), com.bootdo.system.controller.LoginController.index()(String), {"menus":[{"attributes":{"icon":"fa fa-money","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-money","url":"/moneyList/moneyList"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"102","parentId":"106","text":"现金缴费"},{"attributes":{"icon":"fa fa-book","url":"/moneyLog/elecLog"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"107","parentId":"106","text":"缴费记录"}],"hasChildren":true,"hasParent":false,"id":"106","parentId":"0","text":"收费管理"},{"attributes":{"icon":"fa fa-lightbulb-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/elec/elec"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"121","parentId":"103","text":"电费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"elec/elecInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"122","parentId":"103","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"elec/elecUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"123","parentId":"103","text":"电表上传"},{"attributes":{"icon":"fa fa-cc","url":"/elec/elecPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"124","parentId":"103","text":"电价管理"}],"hasChildren":true,"hasParent":false,"id":"103","parentId":"0","text":"电费管理"},{"attributes":{"icon":"fa fa-tint","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/water/water"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"117","parentId":"105","text":"水费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"water/waterInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"118","parentId":"105","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"water/waterUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"119","parentId":"105","text":"水费生成"},{"attributes":{"icon":"fa fa-cc","url":"/water/waterPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"120","parentId":"105","text":"水价管理"}],"hasChildren":true,"hasParent":false,"id":"105","parentId":"0","text":"水费管理"},{"attributes":{"icon":"fa fa-fire","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/heat/heat"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"113","parentId":"104","text":"暖费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"heat/heatInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"114","parentId":"104","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"heat/heatUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"115","parentId":"104","text":"暖费生成"},{"attributes":{"icon":"","url":"/heat/heatPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"116","parentId":"104","text":"暖价管理"}],"hasChildren":true,"hasParent":false,"id":"104","parentId":"0","text":"暖费管理"},{"attributes":{"icon":"fa fa-vcard-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-bomb","url":"/print/print"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"149","parentId":"108","text":"票据记录"}],"hasChildren":true,"hasParent":false,"id":"108","parentId":"0","text":"票据管理"},{"attributes":{"icon":"fa fa-bar-chart","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-area-chart","url":"/chart/graph_echarts.html"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","text":"百度chart"},{"attributes":{"icon":"fa fa-sun-o","url":"charts/countDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"109","parentId":"97","text":"日统计报表"},{"attributes":{"icon":"fa fa-registered","url":"charts/countMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"110","parentId":"97","text":"月统计报表"},{"attributes":{"icon":"fa fa-support","url":"charts/countYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"111","parentId":"97","text":"年统计报表"},{"attributes":{"icon":"fa fa-money","url":"charts/countOwe"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"155","parentId":"97","text":"欠费报表图"},{"attributes":{"icon":"fa fa-tachometer","url":"charts/countRun"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"112","parentId":"97","text":"走势图报表"}],"hasChildren":true,"hasParent":false,"id":"97","parentId":"0","text":"统计管理"},{"attributes":{"icon":"fa fa-bars","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-book","url":"/common/dict"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"78","parentId":"1","text":"数据字典"},{"attributes":{"icon":"fa fa-folder-open","url":"/common/sysFile"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"71","parentId":"1","text":"文件管理"}],"h(String), 127.0.0.1(String), 2019-04-03 18:13:17.86(Timestamp)
2019-04-03 18:13:18 -<==    Updates: 1
2019-04-03 18:13:18 -请求地址 : http://localhost:8081/main
2019-04-03 18:13:18 -HTTP METHOD : GET
2019-04-03 18:13:18 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 18:13:18 -参数 : []
2019-04-03 18:13:18 -耗时 : 15
2019-04-03 18:13:18 -返回值 : main
2019-04-03 18:13:18 -请求地址 : http://localhost:8081/oa/notify/message
2019-04-03 18:13:18 -HTTP METHOD : GET
2019-04-03 18:13:18 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2019-04-03 18:13:18 -参数 : []
2019-04-03 18:13:18 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2019-04-03 18:13:18 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2019-04-03 18:13:18 -<==      Total: 0
2019-04-03 18:13:18 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2019-04-03 18:13:18 -==> Parameters: 1(Long), 0(String)
2019-04-03 18:13:18 -<==      Total: 1
2019-04-03 18:13:18 -耗时 : 6
2019-04-03 18:13:18 -返回值 : com.bootdo.common.utils.PageUtils@40d18894
2019-04-03 18:13:18 -请求地址 : http://localhost:8081/main
2019-04-03 18:13:18 -HTTP METHOD : GET
2019-04-03 18:13:18 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 18:13:18 -参数 : []
2019-04-03 18:13:18 -耗时 : 0
2019-04-03 18:13:18 -返回值 : main
2019-04-03 18:13:22 -请求地址 : http://localhost:8081/elec/elec
2019-04-03 18:13:22 -HTTP METHOD : GET
2019-04-03 18:13:22 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.Elec
2019-04-03 18:13:22 -参数 : []
2019-04-03 18:13:22 -耗时 : 1
2019-04-03 18:13:22 -返回值 : elec/elec/elec
2019-04-03 18:13:22 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-03 18:13:22 -HTTP METHOD : GET
2019-04-03 18:13:22 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 18:13:22 -参数 : [userType]
2019-04-03 18:13:22 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 18:13:22 -==> Parameters: userType(String)
2019-04-03 18:13:22 -<==      Total: 2
2019-04-03 18:13:22 -耗时 : 4
2019-04-03 18:13:22 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 18:13:22 -请求地址 : http://localhost:8081/elec/elec/list
2019-04-03 18:13:22 -HTTP METHOD : GET
2019-04-03 18:13:22 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.list
2019-04-03 18:13:22 -参数 : [{limit=10, offset=0, userType=, userOrg=, userId=, createTime=, queryType=1}, com.bootdo.elec.domain.ElecDO@37b3f4ee]
2019-04-03 18:13:22 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec order by id asc limit ?, ? 
2019-04-03 18:13:22 -==> Parameters: 0(Integer), 10(Integer)
2019-04-03 18:13:22 -<==      Total: 10
2019-04-03 18:13:22 -==>  Preparing: select count(*) from elec 
2019-04-03 18:13:22 -==> Parameters: 
2019-04-03 18:13:22 -<==      Total: 1
2019-04-03 18:13:22 -耗时 : 6
2019-04-03 18:13:22 -返回值 : com.bootdo.common.utils.PageUtils@230596ef
2019-04-03 18:13:26 -请求地址 : http://localhost:8081/elec/elec/add
2019-04-03 18:13:26 -HTTP METHOD : GET
2019-04-03 18:13:26 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.add
2019-04-03 18:13:26 -参数 : []
2019-04-03 18:13:26 -耗时 : 1
2019-04-03 18:13:26 -返回值 : elec/elec/add
2019-04-03 18:13:26 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-03 18:13:26 -HTTP METHOD : GET
2019-04-03 18:13:26 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 18:13:26 -参数 : [userType]
2019-04-03 18:13:26 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 18:13:26 -==> Parameters: userType(String)
2019-04-03 18:13:26 -<==      Total: 2
2019-04-03 18:13:26 -耗时 : 4
2019-04-03 18:13:26 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 18:13:26 -请求地址 : http://localhost:8081/common/dict/list/userState
2019-04-03 18:13:26 -HTTP METHOD : GET
2019-04-03 18:13:26 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 18:13:26 -参数 : [userState]
2019-04-03 18:13:26 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 18:13:26 -==> Parameters: userState(String)
2019-04-03 18:13:26 -请求地址 : http://localhost:8081/common/dict/list/elecType
2019-04-03 18:13:26 -HTTP METHOD : GET
2019-04-03 18:13:26 -<==      Total: 2
2019-04-03 18:13:26 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 18:13:26 -参数 : [elecType]
2019-04-03 18:13:26 -耗时 : 3
2019-04-03 18:13:26 -返回值 : [DictDO{id=126, name='使用中', value='1', type='userState', description='用户状态', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=125, name='未使用', value='0', type='userState', description='用户状态', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 18:13:26 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 18:13:26 -==> Parameters: elecType(String)
2019-04-03 18:13:26 -<==      Total: 2
2019-04-03 18:13:26 -耗时 : 4
2019-04-03 18:13:26 -返回值 : [DictDO{id=139, name='民用电', value='1', type='elecType', description='电量性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=138, name='商业电', value='0', type='elecType', description='电量类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 18:14:02 -请求地址 : http://localhost:8081/index
2019-04-03 18:14:02 -HTTP METHOD : GET
2019-04-03 18:14:02 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2019-04-03 18:14:02 -参数 : [{}]
2019-04-03 18:14:02 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2019-04-03 18:14:02 -==> Parameters: 1(Long)
2019-04-03 18:14:02 -<==      Total: 46
2019-04-03 18:14:02 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2019-04-03 18:14:02 -==> Parameters: 138(Long)
2019-04-03 18:14:02 -<==      Total: 1
2019-04-03 18:14:02 -耗时 : 16
2019-04-03 18:14:02 -返回值 : index_v1
2019-04-03 18:14:02 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 18:14:02 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 16(Integer), com.bootdo.system.controller.LoginController.index()(String), {"menus":[{"attributes":{"icon":"fa fa-money","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-money","url":"/moneyList/moneyList"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"102","parentId":"106","text":"现金缴费"},{"attributes":{"icon":"fa fa-book","url":"/moneyLog/elecLog"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"107","parentId":"106","text":"缴费记录"}],"hasChildren":true,"hasParent":false,"id":"106","parentId":"0","text":"收费管理"},{"attributes":{"icon":"fa fa-lightbulb-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/elec/elec"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"121","parentId":"103","text":"电费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"elec/elecInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"122","parentId":"103","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"elec/elecUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"123","parentId":"103","text":"电表上传"},{"attributes":{"icon":"fa fa-cc","url":"/elec/elecPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"124","parentId":"103","text":"电价管理"}],"hasChildren":true,"hasParent":false,"id":"103","parentId":"0","text":"电费管理"},{"attributes":{"icon":"fa fa-tint","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/water/water"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"117","parentId":"105","text":"水费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"water/waterInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"118","parentId":"105","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"water/waterUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"119","parentId":"105","text":"水费生成"},{"attributes":{"icon":"fa fa-cc","url":"/water/waterPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"120","parentId":"105","text":"水价管理"}],"hasChildren":true,"hasParent":false,"id":"105","parentId":"0","text":"水费管理"},{"attributes":{"icon":"fa fa-fire","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/heat/heat"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"113","parentId":"104","text":"暖费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"heat/heatInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"114","parentId":"104","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"heat/heatUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"115","parentId":"104","text":"暖费生成"},{"attributes":{"icon":"","url":"/heat/heatPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"116","parentId":"104","text":"暖价管理"}],"hasChildren":true,"hasParent":false,"id":"104","parentId":"0","text":"暖费管理"},{"attributes":{"icon":"fa fa-vcard-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-bomb","url":"/print/print"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"149","parentId":"108","text":"票据记录"}],"hasChildren":true,"hasParent":false,"id":"108","parentId":"0","text":"票据管理"},{"attributes":{"icon":"fa fa-bar-chart","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-area-chart","url":"/chart/graph_echarts.html"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","text":"百度chart"},{"attributes":{"icon":"fa fa-sun-o","url":"charts/countDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"109","parentId":"97","text":"日统计报表"},{"attributes":{"icon":"fa fa-registered","url":"charts/countMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"110","parentId":"97","text":"月统计报表"},{"attributes":{"icon":"fa fa-money","url":"charts/countOwe"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"155","parentId":"97","text":"欠费报表图"},{"attributes":{"icon":"fa fa-support","url":"charts/countYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"111","parentId":"97","text":"年统计报表"},{"attributes":{"icon":"fa fa-tachometer","url":"charts/countRun"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"112","parentId":"97","text":"走势图报表"}],"hasChildren":true,"hasParent":false,"id":"97","parentId":"0","text":"统计管理"},{"attributes":{"icon":"fa fa-bars","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-book","url":"/common/dict"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"78","parentId":"1","text":"数据字典"},{"attributes":{"icon":"fa fa-folder-open","url":"/common/sysFile"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"71","parentId":"1","text":"文件管理"}],"h(String), 127.0.0.1(String), 2019-04-03 18:14:02.568(Timestamp)
2019-04-03 18:14:02 -<==    Updates: 1
2019-04-03 18:14:02 -请求地址 : http://localhost:8081/main
2019-04-03 18:14:02 -HTTP METHOD : GET
2019-04-03 18:14:02 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 18:14:02 -参数 : []
2019-04-03 18:14:02 -耗时 : 0
2019-04-03 18:14:02 -返回值 : main
2019-04-03 18:14:02 -请求地址 : http://localhost:8081/oa/notify/message
2019-04-03 18:14:02 -HTTP METHOD : GET
2019-04-03 18:14:02 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2019-04-03 18:14:02 -参数 : []
2019-04-03 18:14:02 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2019-04-03 18:14:02 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2019-04-03 18:14:03 -<==      Total: 0
2019-04-03 18:14:03 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2019-04-03 18:14:03 -==> Parameters: 1(Long), 0(String)
2019-04-03 18:14:03 -<==      Total: 1
2019-04-03 18:14:03 -耗时 : 7
2019-04-03 18:14:03 -返回值 : com.bootdo.common.utils.PageUtils@3c445535
2019-04-03 18:14:03 -请求地址 : http://localhost:8081/main
2019-04-03 18:14:03 -HTTP METHOD : GET
2019-04-03 18:14:03 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 18:14:03 -参数 : []
2019-04-03 18:14:03 -耗时 : 0
2019-04-03 18:14:03 -返回值 : main
2019-04-03 18:14:04 -请求地址 : http://localhost:8081/elec/elec
2019-04-03 18:14:04 -HTTP METHOD : GET
2019-04-03 18:14:04 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.Elec
2019-04-03 18:14:04 -参数 : []
2019-04-03 18:14:04 -耗时 : 0
2019-04-03 18:14:04 -返回值 : elec/elec/elec
2019-04-03 18:14:04 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-03 18:14:04 -HTTP METHOD : GET
2019-04-03 18:14:04 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 18:14:04 -参数 : [userType]
2019-04-03 18:14:04 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 18:14:04 -==> Parameters: userType(String)
2019-04-03 18:14:04 -<==      Total: 2
2019-04-03 18:14:04 -耗时 : 3
2019-04-03 18:14:04 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 18:14:04 -请求地址 : http://localhost:8081/elec/elec/list
2019-04-03 18:14:04 -HTTP METHOD : GET
2019-04-03 18:14:04 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.list
2019-04-03 18:14:04 -参数 : [{limit=10, offset=0, userType=, userOrg=, userId=, createTime=, queryType=1}, com.bootdo.elec.domain.ElecDO@a649213]
2019-04-03 18:14:04 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec order by id asc limit ?, ? 
2019-04-03 18:14:04 -==> Parameters: 0(Integer), 10(Integer)
2019-04-03 18:14:04 -<==      Total: 10
2019-04-03 18:14:04 -==>  Preparing: select count(*) from elec 
2019-04-03 18:14:04 -==> Parameters: 
2019-04-03 18:14:04 -<==      Total: 1
2019-04-03 18:14:04 -耗时 : 6
2019-04-03 18:14:04 -返回值 : com.bootdo.common.utils.PageUtils@582e6a4
2019-04-03 18:14:08 -请求地址 : http://localhost:8081/elec/elec/add
2019-04-03 18:14:08 -HTTP METHOD : GET
2019-04-03 18:14:08 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.add
2019-04-03 18:14:08 -参数 : []
2019-04-03 18:14:08 -耗时 : 1
2019-04-03 18:14:08 -返回值 : elec/elec/add
2019-04-03 18:14:08 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-03 18:14:08 -HTTP METHOD : GET
2019-04-03 18:14:08 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 18:14:08 -参数 : [userType]
2019-04-03 18:14:08 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 18:14:08 -==> Parameters: userType(String)
2019-04-03 18:14:08 -请求地址 : http://localhost:8081/common/dict/list/userState
2019-04-03 18:14:08 -<==      Total: 2
2019-04-03 18:14:08 -耗时 : 5
2019-04-03 18:14:08 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 18:14:08 -请求地址 : http://localhost:8081/common/dict/list/elecType
2019-04-03 18:14:08 -HTTP METHOD : GET
2019-04-03 18:14:08 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 18:14:08 -参数 : [elecType]
2019-04-03 18:14:08 -HTTP METHOD : GET
2019-04-03 18:14:08 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 18:14:08 -参数 : [userState]
2019-04-03 18:14:08 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 18:14:08 -==> Parameters: userState(String)
2019-04-03 18:14:08 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 18:14:08 -<==      Total: 2
2019-04-03 18:14:08 -==> Parameters: elecType(String)
2019-04-03 18:14:08 -耗时 : 16
2019-04-03 18:14:08 -返回值 : [DictDO{id=126, name='使用中', value='1', type='userState', description='用户状态', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=125, name='未使用', value='0', type='userState', description='用户状态', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 18:14:08 -<==      Total: 2
2019-04-03 18:14:08 -耗时 : 16
2019-04-03 18:14:08 -返回值 : [DictDO{id=139, name='民用电', value='1', type='elecType', description='电量性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=138, name='商业电', value='0', type='elecType', description='电量类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 18:14:39 -请求地址 : http://localhost:8081/elec/elec/edit/1
2019-04-03 18:14:39 -HTTP METHOD : GET
2019-04-03 18:14:39 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.edit
2019-04-03 18:14:39 -参数 : [1, {}]
2019-04-03 18:14:39 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, `user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec where id = ? 
2019-04-03 18:14:39 -==> Parameters: 1(Long)
2019-04-03 18:14:39 -<==      Total: 1
2019-04-03 18:14:39 -耗时 : 7
2019-04-03 18:14:39 -返回值 : elec/elec/edit
2019-04-03 18:14:39 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-03 18:14:39 -HTTP METHOD : GET
2019-04-03 18:14:39 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 18:14:39 -参数 : [userType]
2019-04-03 18:14:39 -请求地址 : http://localhost:8081/common/dict/list/userState
2019-04-03 18:14:39 -HTTP METHOD : GET
2019-04-03 18:14:39 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 18:14:39 -参数 : [userState]
2019-04-03 18:14:39 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 18:14:39 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 18:14:39 -==> Parameters: userState(String)
2019-04-03 18:14:39 -==> Parameters: userType(String)
2019-04-03 18:14:39 -请求地址 : http://localhost:8081/common/dict/list/elecType
2019-04-03 18:14:39 -HTTP METHOD : GET
2019-04-03 18:14:39 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 18:14:39 -参数 : [elecType]
2019-04-03 18:14:39 -<==      Total: 2
2019-04-03 18:14:39 -<==      Total: 2
2019-04-03 18:14:39 -耗时 : 4
2019-04-03 18:14:39 -耗时 : 3
2019-04-03 18:14:39 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 18:14:39 -返回值 : [DictDO{id=126, name='使用中', value='1', type='userState', description='用户状态', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=125, name='未使用', value='0', type='userState', description='用户状态', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 18:14:39 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 18:14:39 -==> Parameters: elecType(String)
2019-04-03 18:14:39 -<==      Total: 2
2019-04-03 18:14:39 -耗时 : 6
2019-04-03 18:14:39 -返回值 : [DictDO{id=139, name='民用电', value='1', type='elecType', description='电量性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=138, name='商业电', value='0', type='elecType', description='电量类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 18:23:10 -==>  Preparing: select distinct m.perms from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id = ur.role_id where ur.user_id = ? 
2019-04-03 18:23:10 -==> Parameters: 1(Long)
2019-04-03 18:23:10 -<==      Total: 90
2019-04-03 18:23:10 -请求地址 : http://localhost:8081/elec/elec/list
2019-04-03 18:23:10 -HTTP METHOD : GET
2019-04-03 18:23:10 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.list
2019-04-03 18:23:10 -参数 : [{limit=10, offset=10, userType=, userOrg=, userId=, createTime=, queryType=1}, com.bootdo.elec.domain.ElecDO@2ff4f572]
2019-04-03 18:23:10 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec order by id asc limit ?, ? 
2019-04-03 18:23:10 -==> Parameters: 10(Integer), 10(Integer)
2019-04-03 18:23:10 -<==      Total: 3
2019-04-03 18:23:10 -==>  Preparing: select count(*) from elec 
2019-04-03 18:23:10 -==> Parameters: 
2019-04-03 18:23:10 -<==      Total: 1
2019-04-03 18:23:10 -耗时 : 207
2019-04-03 18:23:10 -返回值 : com.bootdo.common.utils.PageUtils@2494b044
2019-04-03 18:28:44 -请求地址 : http://localhost:8081/index
2019-04-03 18:28:44 -HTTP METHOD : GET
2019-04-03 18:28:44 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2019-04-03 18:28:44 -参数 : [{}]
2019-04-03 18:28:44 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2019-04-03 18:28:44 -==> Parameters: 1(Long)
2019-04-03 18:28:44 -<==      Total: 46
2019-04-03 18:28:44 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2019-04-03 18:28:44 -==> Parameters: 138(Long)
2019-04-03 18:28:44 -<==      Total: 1
2019-04-03 18:28:44 -耗时 : 89
2019-04-03 18:28:44 -返回值 : index_v1
2019-04-03 18:28:44 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 18:28:44 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 89(Integer), com.bootdo.system.controller.LoginController.index()(String), {"menus":[{"attributes":{"icon":"fa fa-money","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-money","url":"/moneyList/moneyList"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"102","parentId":"106","text":"现金缴费"},{"attributes":{"icon":"fa fa-book","url":"/moneyLog/elecLog"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"107","parentId":"106","text":"缴费记录"}],"hasChildren":true,"hasParent":false,"id":"106","parentId":"0","text":"收费管理"},{"attributes":{"icon":"fa fa-lightbulb-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/elec/elec"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"121","parentId":"103","text":"电费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"elec/elecInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"122","parentId":"103","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"elec/elecUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"123","parentId":"103","text":"电表上传"},{"attributes":{"icon":"fa fa-cc","url":"/elec/elecPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"124","parentId":"103","text":"电价管理"}],"hasChildren":true,"hasParent":false,"id":"103","parentId":"0","text":"电费管理"},{"attributes":{"icon":"fa fa-tint","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/water/water"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"117","parentId":"105","text":"水费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"water/waterInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"118","parentId":"105","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"water/waterUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"119","parentId":"105","text":"水费生成"},{"attributes":{"icon":"fa fa-cc","url":"/water/waterPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"120","parentId":"105","text":"水价管理"}],"hasChildren":true,"hasParent":false,"id":"105","parentId":"0","text":"水费管理"},{"attributes":{"icon":"fa fa-fire","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/heat/heat"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"113","parentId":"104","text":"暖费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"heat/heatInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"114","parentId":"104","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"heat/heatUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"115","parentId":"104","text":"暖费生成"},{"attributes":{"icon":"","url":"/heat/heatPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"116","parentId":"104","text":"暖价管理"}],"hasChildren":true,"hasParent":false,"id":"104","parentId":"0","text":"暖费管理"},{"attributes":{"icon":"fa fa-vcard-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-bomb","url":"/print/print"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"149","parentId":"108","text":"票据记录"}],"hasChildren":true,"hasParent":false,"id":"108","parentId":"0","text":"票据管理"},{"attributes":{"icon":"fa fa-bar-chart","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-area-chart","url":"/chart/graph_echarts.html"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","text":"百度chart"},{"attributes":{"icon":"fa fa-sun-o","url":"charts/countDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"109","parentId":"97","text":"日统计报表"},{"attributes":{"icon":"fa fa-registered","url":"charts/countMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"110","parentId":"97","text":"月统计报表"},{"attributes":{"icon":"fa fa-support","url":"charts/countYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"111","parentId":"97","text":"年统计报表"},{"attributes":{"icon":"fa fa-money","url":"charts/countOwe"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"155","parentId":"97","text":"欠费报表图"},{"attributes":{"icon":"fa fa-tachometer","url":"charts/countRun"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"112","parentId":"97","text":"走势图报表"}],"hasChildren":true,"hasParent":false,"id":"97","parentId":"0","text":"统计管理"},{"attributes":{"icon":"fa fa-bars","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-book","url":"/common/dict"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"78","parentId":"1","text":"数据字典"},{"attributes":{"icon":"fa fa-folder-open","url":"/common/sysFile"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"71","parentId":"1","text":"文件管理"}],"h(String), 127.0.0.1(String), 2019-04-03 18:28:44.325(Timestamp)
2019-04-03 18:28:44 -<==    Updates: 1
2019-04-03 18:28:44 -请求地址 : http://localhost:8081/main
2019-04-03 18:28:44 -HTTP METHOD : GET
2019-04-03 18:28:44 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 18:28:44 -参数 : []
2019-04-03 18:28:44 -耗时 : 0
2019-04-03 18:28:44 -返回值 : main
2019-04-03 18:28:44 -请求地址 : http://localhost:8081/oa/notify/message
2019-04-03 18:28:44 -HTTP METHOD : GET
2019-04-03 18:28:44 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2019-04-03 18:28:44 -参数 : []
2019-04-03 18:28:44 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2019-04-03 18:28:44 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2019-04-03 18:28:44 -<==      Total: 0
2019-04-03 18:28:44 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2019-04-03 18:28:44 -==> Parameters: 1(Long), 0(String)
2019-04-03 18:28:44 -<==      Total: 1
2019-04-03 18:28:44 -耗时 : 58
2019-04-03 18:28:44 -返回值 : com.bootdo.common.utils.PageUtils@5c5ed849
2019-04-03 18:28:44 -请求地址 : http://localhost:8081/main
2019-04-03 18:28:44 -HTTP METHOD : GET
2019-04-03 18:28:44 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 18:28:44 -参数 : []
2019-04-03 18:28:44 -耗时 : 0
2019-04-03 18:28:44 -返回值 : main
2019-04-03 18:28:52 -请求地址 : http://localhost:8081/water/water
2019-04-03 18:28:52 -HTTP METHOD : GET
2019-04-03 18:28:52 -CLASS_METHOD : com.bootdo.water.controller.WaterController.Water
2019-04-03 18:28:52 -参数 : []
2019-04-03 18:28:52 -耗时 : 1
2019-04-03 18:28:52 -返回值 : water/water/water
2019-04-03 18:28:53 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-03 18:28:53 -HTTP METHOD : GET
2019-04-03 18:28:53 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 18:28:53 -参数 : [userType]
2019-04-03 18:28:53 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 18:28:53 -==> Parameters: userType(String)
2019-04-03 18:28:53 -请求地址 : http://localhost:8081/water/water/list
2019-04-03 18:28:53 -HTTP METHOD : GET
2019-04-03 18:28:53 -CLASS_METHOD : com.bootdo.water.controller.WaterController.list
2019-04-03 18:28:53 -参数 : [{limit=3, offset=0, userType=, userOrg=, userId=, createTime=, queryType=1}]
2019-04-03 18:28:53 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`water_type`,`water_price`,`water_cost`,`water_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from water order by id asc limit ?, ? 
2019-04-03 18:28:53 -==> Parameters: 0(Integer), 3(Integer)
2019-04-03 18:28:53 -<==      Total: 3
2019-04-03 18:28:53 -==>  Preparing: select count(*) from water 
2019-04-03 18:28:53 -==> Parameters: 
2019-04-03 18:28:53 -<==      Total: 1
2019-04-03 18:28:53 -耗时 : 13
2019-04-03 18:28:53 -返回值 : com.bootdo.common.utils.PageUtils@5ca7d4b1
2019-04-03 18:28:53 -<==      Total: 2
2019-04-03 18:28:53 -耗时 : 39
2019-04-03 18:28:53 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 18:29:06 -请求地址 : http://localhost:8081/water/water/add
2019-04-03 18:29:06 -HTTP METHOD : GET
2019-04-03 18:29:06 -CLASS_METHOD : com.bootdo.water.controller.WaterController.add
2019-04-03 18:29:06 -参数 : []
2019-04-03 18:29:06 -耗时 : 0
2019-04-03 18:29:06 -返回值 : water/water/add
2019-04-03 18:29:07 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-03 18:29:07 -HTTP METHOD : GET
2019-04-03 18:29:07 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 18:29:07 -参数 : [userType]
2019-04-03 18:29:07 -请求地址 : http://localhost:8081/common/dict/list/userState
2019-04-03 18:29:07 -HTTP METHOD : GET
2019-04-03 18:29:07 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 18:29:07 -参数 : [userState]
2019-04-03 18:29:07 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 18:29:07 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 18:29:07 -==> Parameters: userState(String)
2019-04-03 18:29:07 -请求地址 : http://localhost:8081/common/dict/list/waterType
2019-04-03 18:29:07 -HTTP METHOD : GET
2019-04-03 18:29:07 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 18:29:07 -<==      Total: 2
2019-04-03 18:29:07 -参数 : [waterType]
2019-04-03 18:29:07 -耗时 : 4
2019-04-03 18:29:07 -返回值 : [DictDO{id=126, name='使用中', value='1', type='userState', description='用户状态', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=125, name='未使用', value='0', type='userState', description='用户状态', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 18:29:07 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 18:29:07 -==> Parameters: waterType(String)
2019-04-03 18:29:07 -<==      Total: 6
2019-04-03 18:29:07 -耗时 : 5
2019-04-03 18:29:07 -返回值 : [DictDO{id=132, name='特殊水费4', value='5', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=131, name='特殊水费3', value='4', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=130, name='特殊水费2', value='3', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=129, name='特殊水费1', value='2', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=128, name='民用水', value='1', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=127, name='商业水', value='0', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 18:29:07 -==> Parameters: userType(String)
2019-04-03 18:29:07 -<==      Total: 2
2019-04-03 18:29:07 -耗时 : 25
2019-04-03 18:29:07 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 18:29:08 -请求地址 : http://localhost:8081/water/water/save
2019-04-03 18:29:08 -HTTP METHOD : POST
2019-04-03 18:29:08 -CLASS_METHOD : com.bootdo.water.controller.WaterController.save
2019-04-03 18:29:08 -参数 : [com.bootdo.water.domain.WaterDO@167d77fb]
2019-04-03 18:29:08 -==>  Preparing: insert into water ( `user_id`, `user_name`, `user_type`, `user_org`, `user_tell`, `user_state`, `wages_id`, `water_type`, `water_price`, `water_cost`, `water_sum`, `create_time`, `create_by`, `update_time`, `update_by`, `remark` ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 18:29:08 -==> Parameters: (String), (String), (String), (String), (String), (String), (String), (String), null, null, null, (String), 1(Long), 2019-04-03 18:29:08.441(Timestamp), 1(Long), (String)
2019-04-03 18:29:08 -{conn-10003, pstmt-20055} execute error. insert into water
		(
			`user_id`, 
			`user_name`, 
			`user_type`, 
			`user_org`, 
			`user_tell`, 
			`user_state`, 
			`wages_id`, 
			`water_type`, 
			`water_price`, 
		    `water_cost`, 
			`water_sum`, 
			`create_time`, 
			`create_by`, 
			`update_time`, 
			`update_by`, 
			`remark`
		)
		values
		(
			?, 
			?, 
			?, 
			?, 
			?, 
			?, 
			?, 
			?, 
			?, 
			?, 
			?, 
			?, 
			?, 
			?, 
			?, 
			?
		)
com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException: Column 'water_price' cannot be null
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(Unknown Source)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(Unknown Source)
	at java.lang.reflect.Constructor.newInstance(Unknown Source)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:425)
	at com.mysql.jdbc.Util.getInstance(Util.java:408)
	at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:936)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3976)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3912)
	at com.mysql.jdbc.MysqlIO.sendCommand(MysqlIO.java:2530)
	at com.mysql.jdbc.MysqlIO.sqlQueryDirect(MysqlIO.java:2683)
	at com.mysql.jdbc.ConnectionImpl.execSQL(ConnectionImpl.java:2486)
	at com.mysql.jdbc.PreparedStatement.executeInternal(PreparedStatement.java:1858)
	at com.mysql.jdbc.PreparedStatement.execute(PreparedStatement.java:1197)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2931)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2929)
	at com.alibaba.druid.wall.WallFilter.preparedStatement_execute(WallFilter.java:601)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2929)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2929)
	at com.alibaba.druid.proxy.jdbc.PreparedStatementProxyImpl.execute(PreparedStatementProxyImpl.java:131)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:493)
	at sun.reflect.GeneratedMethodAccessor128.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:59)
	at com.sun.proxy.$Proxy173.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.update(PreparedStatementHandler.java:46)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.update(RoutingStatementHandler.java:74)
	at org.apache.ibatis.executor.SimpleExecutor.doUpdate(SimpleExecutor.java:50)
	at org.apache.ibatis.executor.BaseExecutor.update(BaseExecutor.java:117)
	at org.apache.ibatis.executor.CachingExecutor.update(CachingExecutor.java:76)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:198)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.insert(DefaultSqlSession.java:185)
	at sun.reflect.GeneratedMethodAccessor225.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:434)
	at com.sun.proxy.$Proxy101.insert(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.insert(SqlSessionTemplate.java:279)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:57)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy107.save(Unknown Source)
	at com.bootdo.water.service.impl.WaterServiceImpl.save(WaterServiceImpl.java:40)
	at com.bootdo.water.controller.WaterController.save(WaterController.java:188)
	at com.bootdo.water.controller.WaterController$$FastClassBySpringCGLIB$$55e6da3c.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:204)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:746)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.bootdo.common.aspect.WebLogAspect.doAround(WebLogAspect.java:57)
	at sun.reflect.GeneratedMethodAccessor126.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.apache.shiro.spring.security.interceptor.AopAllianceAnnotationsAuthorizingMethodInterceptor$1.proceed(AopAllianceAnnotationsAuthorizingMethodInterceptor.java:82)
	at org.apache.shiro.authz.aop.AuthorizingMethodInterceptor.invoke(AuthorizingMethodInterceptor.java:39)
	at org.apache.shiro.spring.security.interceptor.AopAllianceAnnotationsAuthorizingMethodInterceptor.invoke(AopAllianceAnnotationsAuthorizingMethodInterceptor.java:115)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.bootdo.water.controller.WaterController$$EnhancerBySpringCGLIB$$cb941eaa.save(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:209)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:877)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:783)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:991)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:925)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:974)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:877)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:661)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:851)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:61)
	at org.apache.shiro.web.servlet.AdviceFilter.executeChain(AdviceFilter.java:108)
	at org.apache.shiro.web.servlet.AdviceFilter.doFilterInternal(AdviceFilter.java:137)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:66)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)
	at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)
	at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)
	at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)
	at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:383)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:109)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:496)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:790)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1468)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Unknown Source)
2019-04-03 18:29:08 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 18:29:08 -==> Parameters: 1(Long), admin(String), error(String), null, http://localhost:8081/water/water/save(String), org.springframework.dao.DataIntegrityViolationException: 
### Error updating database.  Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException: Column 'water_price' cannot be null
### The error may involve com.bootdo.water.dao.WaterDao.save-Inline
### The error occurred while setting parameters
### SQL: insert into water   (    `user_id`,     `user_name`,     `user_type`,     `user_org`,     `user_tell`,     `user_state`,     `wages_id`,     `water_type`,     `water_price`,        `water_cost`,     `water_sum`,     `create_time`,     `create_by`,     `update_time`,     `update_by`,     `remark`   )   values   (    ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?   )
### Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException: Column 'water_price' cannot be null
; ]; Column 'water_price' cannot be null; nested exception is com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException: Column 'water_price' cannot be null(String), null, 2019-04-03 18:29:08.45(Timestamp)
2019-04-03 18:29:08 -
### Error updating database.  Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException: Column 'water_price' cannot be null
### The error may involve com.bootdo.water.dao.WaterDao.save-Inline
### The error occurred while setting parameters
### SQL: insert into water   (    `user_id`,     `user_name`,     `user_type`,     `user_org`,     `user_tell`,     `user_state`,     `wages_id`,     `water_type`,     `water_price`,        `water_cost`,     `water_sum`,     `create_time`,     `create_by`,     `update_time`,     `update_by`,     `remark`   )   values   (    ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?   )
### Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException: Column 'water_price' cannot be null
; ]; Column 'water_price' cannot be null; nested exception is com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException: Column 'water_price' cannot be null
org.springframework.dao.DataIntegrityViolationException: 
### Error updating database.  Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException: Column 'water_price' cannot be null
### The error may involve com.bootdo.water.dao.WaterDao.save-Inline
### The error occurred while setting parameters
### SQL: insert into water   (    `user_id`,     `user_name`,     `user_type`,     `user_org`,     `user_tell`,     `user_state`,     `wages_id`,     `water_type`,     `water_price`,        `water_cost`,     `water_sum`,     `create_time`,     `create_by`,     `update_time`,     `update_by`,     `remark`   )   values   (    ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?   )
### Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException: Column 'water_price' cannot be null
; ]; Column 'water_price' cannot be null; nested exception is com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException: Column 'water_price' cannot be null
	at org.springframework.jdbc.support.SQLExceptionSubclassTranslator.doTranslate(SQLExceptionSubclassTranslator.java:87)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:72)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:81)
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:75)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:447)
	at com.sun.proxy.$Proxy101.insert(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.insert(SqlSessionTemplate.java:279)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:57)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy107.save(Unknown Source)
	at com.bootdo.water.service.impl.WaterServiceImpl.save(WaterServiceImpl.java:40)
	at com.bootdo.water.controller.WaterController.save(WaterController.java:188)
	at com.bootdo.water.controller.WaterController$$FastClassBySpringCGLIB$$55e6da3c.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:204)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:746)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.bootdo.common.aspect.WebLogAspect.doAround(WebLogAspect.java:57)
	at sun.reflect.GeneratedMethodAccessor126.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.apache.shiro.spring.security.interceptor.AopAllianceAnnotationsAuthorizingMethodInterceptor$1.proceed(AopAllianceAnnotationsAuthorizingMethodInterceptor.java:82)
	at org.apache.shiro.authz.aop.AuthorizingMethodInterceptor.invoke(AuthorizingMethodInterceptor.java:39)
	at org.apache.shiro.spring.security.interceptor.AopAllianceAnnotationsAuthorizingMethodInterceptor.invoke(AopAllianceAnnotationsAuthorizingMethodInterceptor.java:115)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.bootdo.water.controller.WaterController$$EnhancerBySpringCGLIB$$cb941eaa.save(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:209)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:877)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:783)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:991)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:925)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:974)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:877)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:661)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:851)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:61)
	at org.apache.shiro.web.servlet.AdviceFilter.executeChain(AdviceFilter.java:108)
	at org.apache.shiro.web.servlet.AdviceFilter.doFilterInternal(AdviceFilter.java:137)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:66)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)
	at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)
	at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)
	at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)
	at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:383)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:109)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:496)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:790)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1468)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Unknown Source)
Caused by: com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException: Column 'water_price' cannot be null
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(Unknown Source)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(Unknown Source)
	at java.lang.reflect.Constructor.newInstance(Unknown Source)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:425)
	at com.mysql.jdbc.Util.getInstance(Util.java:408)
	at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:936)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3976)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3912)
	at com.mysql.jdbc.MysqlIO.sendCommand(MysqlIO.java:2530)
	at com.mysql.jdbc.MysqlIO.sqlQueryDirect(MysqlIO.java:2683)
	at com.mysql.jdbc.ConnectionImpl.execSQL(ConnectionImpl.java:2486)
	at com.mysql.jdbc.PreparedStatement.executeInternal(PreparedStatement.java:1858)
	at com.mysql.jdbc.PreparedStatement.execute(PreparedStatement.java:1197)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2931)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2929)
	at com.alibaba.druid.wall.WallFilter.preparedStatement_execute(WallFilter.java:601)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2929)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2929)
	at com.alibaba.druid.proxy.jdbc.PreparedStatementProxyImpl.execute(PreparedStatementProxyImpl.java:131)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:493)
	at sun.reflect.GeneratedMethodAccessor128.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:59)
	at com.sun.proxy.$Proxy173.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.update(PreparedStatementHandler.java:46)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.update(RoutingStatementHandler.java:74)
	at org.apache.ibatis.executor.SimpleExecutor.doUpdate(SimpleExecutor.java:50)
	at org.apache.ibatis.executor.BaseExecutor.update(BaseExecutor.java:117)
	at org.apache.ibatis.executor.CachingExecutor.update(CachingExecutor.java:76)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:198)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.insert(DefaultSqlSession.java:185)
	at sun.reflect.GeneratedMethodAccessor225.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:434)
	... 103 common frames omitted
2019-04-03 18:29:08 -<==    Updates: 1
2019-04-03 18:29:13 -请求地址 : http://localhost:8081/index
2019-04-03 18:29:13 -HTTP METHOD : GET
2019-04-03 18:29:13 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2019-04-03 18:29:13 -参数 : [{}]
2019-04-03 18:29:13 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2019-04-03 18:29:13 -==> Parameters: 1(Long)
2019-04-03 18:29:13 -<==      Total: 46
2019-04-03 18:29:13 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2019-04-03 18:29:13 -==> Parameters: 138(Long)
2019-04-03 18:29:13 -<==      Total: 1
2019-04-03 18:29:13 -耗时 : 26
2019-04-03 18:29:13 -返回值 : index_v1
2019-04-03 18:29:13 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 18:29:13 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 26(Integer), com.bootdo.system.controller.LoginController.index()(String), {"menus":[{"attributes":{"icon":"fa fa-money","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-money","url":"/moneyList/moneyList"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"102","parentId":"106","text":"现金缴费"},{"attributes":{"icon":"fa fa-book","url":"/moneyLog/elecLog"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"107","parentId":"106","text":"缴费记录"}],"hasChildren":true,"hasParent":false,"id":"106","parentId":"0","text":"收费管理"},{"attributes":{"icon":"fa fa-lightbulb-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/elec/elec"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"121","parentId":"103","text":"电费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"elec/elecInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"122","parentId":"103","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"elec/elecUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"123","parentId":"103","text":"电表上传"},{"attributes":{"icon":"fa fa-cc","url":"/elec/elecPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"124","parentId":"103","text":"电价管理"}],"hasChildren":true,"hasParent":false,"id":"103","parentId":"0","text":"电费管理"},{"attributes":{"icon":"fa fa-tint","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/water/water"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"117","parentId":"105","text":"水费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"water/waterInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"118","parentId":"105","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"water/waterUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"119","parentId":"105","text":"水费生成"},{"attributes":{"icon":"fa fa-cc","url":"/water/waterPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"120","parentId":"105","text":"水价管理"}],"hasChildren":true,"hasParent":false,"id":"105","parentId":"0","text":"水费管理"},{"attributes":{"icon":"fa fa-fire","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/heat/heat"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"113","parentId":"104","text":"暖费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"heat/heatInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"114","parentId":"104","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"heat/heatUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"115","parentId":"104","text":"暖费生成"},{"attributes":{"icon":"","url":"/heat/heatPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"116","parentId":"104","text":"暖价管理"}],"hasChildren":true,"hasParent":false,"id":"104","parentId":"0","text":"暖费管理"},{"attributes":{"icon":"fa fa-vcard-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-bomb","url":"/print/print"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"149","parentId":"108","text":"票据记录"}],"hasChildren":true,"hasParent":false,"id":"108","parentId":"0","text":"票据管理"},{"attributes":{"icon":"fa fa-bar-chart","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-area-chart","url":"/chart/graph_echarts.html"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","text":"百度chart"},{"attributes":{"icon":"fa fa-sun-o","url":"charts/countDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"109","parentId":"97","text":"日统计报表"},{"attributes":{"icon":"fa fa-registered","url":"charts/countMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"110","parentId":"97","text":"月统计报表"},{"attributes":{"icon":"fa fa-money","url":"charts/countOwe"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"155","parentId":"97","text":"欠费报表图"},{"attributes":{"icon":"fa fa-support","url":"charts/countYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"111","parentId":"97","text":"年统计报表"},{"attributes":{"icon":"fa fa-tachometer","url":"charts/countRun"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"112","parentId":"97","text":"走势图报表"}],"hasChildren":true,"hasParent":false,"id":"97","parentId":"0","text":"统计管理"},{"attributes":{"icon":"fa fa-bars","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-book","url":"/common/dict"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"78","parentId":"1","text":"数据字典"},{"attributes":{"icon":"fa fa-folder-open","url":"/common/sysFile"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"71","parentId":"1","text":"文件管理"}],"h(String), 127.0.0.1(String), 2019-04-03 18:29:13.787(Timestamp)
2019-04-03 18:29:13 -请求地址 : http://localhost:8081/main
2019-04-03 18:29:13 -HTTP METHOD : GET
2019-04-03 18:29:13 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 18:29:13 -参数 : []
2019-04-03 18:29:13 -耗时 : 0
2019-04-03 18:29:13 -返回值 : main
2019-04-03 18:29:13 -<==    Updates: 1
2019-04-03 18:29:14 -请求地址 : http://localhost:8081/oa/notify/message
2019-04-03 18:29:14 -HTTP METHOD : GET
2019-04-03 18:29:14 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2019-04-03 18:29:14 -参数 : []
2019-04-03 18:29:14 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2019-04-03 18:29:14 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2019-04-03 18:29:14 -<==      Total: 0
2019-04-03 18:29:14 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2019-04-03 18:29:14 -==> Parameters: 1(Long), 0(String)
2019-04-03 18:29:14 -<==      Total: 1
2019-04-03 18:29:14 -耗时 : 4
2019-04-03 18:29:14 -返回值 : com.bootdo.common.utils.PageUtils@5231a042
2019-04-03 18:29:14 -请求地址 : http://localhost:8081/main
2019-04-03 18:29:14 -HTTP METHOD : GET
2019-04-03 18:29:14 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 18:29:14 -参数 : []
2019-04-03 18:29:14 -耗时 : 0
2019-04-03 18:29:14 -返回值 : main
2019-04-03 18:29:16 -请求地址 : http://localhost:8081/water/water
2019-04-03 18:29:16 -HTTP METHOD : GET
2019-04-03 18:29:16 -CLASS_METHOD : com.bootdo.water.controller.WaterController.Water
2019-04-03 18:29:16 -参数 : []
2019-04-03 18:29:16 -耗时 : 1
2019-04-03 18:29:16 -返回值 : water/water/water
2019-04-03 18:29:16 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-03 18:29:16 -HTTP METHOD : GET
2019-04-03 18:29:16 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 18:29:16 -参数 : [userType]
2019-04-03 18:29:16 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 18:29:16 -==> Parameters: userType(String)
2019-04-03 18:29:16 -<==      Total: 2
2019-04-03 18:29:16 -耗时 : 6
2019-04-03 18:29:16 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 18:29:16 -请求地址 : http://localhost:8081/water/water/list
2019-04-03 18:29:16 -HTTP METHOD : GET
2019-04-03 18:29:16 -CLASS_METHOD : com.bootdo.water.controller.WaterController.list
2019-04-03 18:29:16 -参数 : [{limit=3, offset=0, userType=, userOrg=, userId=, createTime=, queryType=1}]
2019-04-03 18:29:16 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`water_type`,`water_price`,`water_cost`,`water_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from water order by id asc limit ?, ? 
2019-04-03 18:29:16 -==> Parameters: 0(Integer), 3(Integer)
2019-04-03 18:29:16 -<==      Total: 3
2019-04-03 18:29:16 -==>  Preparing: select count(*) from water 
2019-04-03 18:29:16 -==> Parameters: 
2019-04-03 18:29:16 -<==      Total: 1
2019-04-03 18:29:16 -耗时 : 6
2019-04-03 18:29:16 -返回值 : com.bootdo.common.utils.PageUtils@6cd9740c
2019-04-03 18:29:18 -请求地址 : http://localhost:8081/water/water/add
2019-04-03 18:29:18 -HTTP METHOD : GET
2019-04-03 18:29:18 -CLASS_METHOD : com.bootdo.water.controller.WaterController.add
2019-04-03 18:29:18 -参数 : []
2019-04-03 18:29:18 -耗时 : 1
2019-04-03 18:29:18 -返回值 : water/water/add
2019-04-03 18:29:19 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-03 18:29:19 -HTTP METHOD : GET
2019-04-03 18:29:19 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 18:29:19 -参数 : [userType]
2019-04-03 18:29:19 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 18:29:19 -==> Parameters: userType(String)
2019-04-03 18:29:19 -<==      Total: 2
2019-04-03 18:29:19 -请求地址 : http://localhost:8081/common/dict/list/waterType
2019-04-03 18:29:19 -HTTP METHOD : GET
2019-04-03 18:29:19 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 18:29:19 -参数 : [waterType]
2019-04-03 18:29:19 -请求地址 : http://localhost:8081/common/dict/list/userState
2019-04-03 18:29:19 -HTTP METHOD : GET
2019-04-03 18:29:19 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 18:29:19 -参数 : [userState]
2019-04-03 18:29:19 -耗时 : 7
2019-04-03 18:29:19 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 18:29:19 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 18:29:19 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 18:29:19 -==> Parameters: userState(String)
2019-04-03 18:29:19 -==> Parameters: waterType(String)
2019-04-03 18:29:19 -<==      Total: 2
2019-04-03 18:29:19 -<==      Total: 6
2019-04-03 18:29:19 -耗时 : 3
2019-04-03 18:29:19 -耗时 : 3
2019-04-03 18:29:19 -返回值 : [DictDO{id=126, name='使用中', value='1', type='userState', description='用户状态', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=125, name='未使用', value='0', type='userState', description='用户状态', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 18:29:19 -返回值 : [DictDO{id=132, name='特殊水费4', value='5', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=131, name='特殊水费3', value='4', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=130, name='特殊水费2', value='3', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=129, name='特殊水费1', value='2', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=128, name='民用水', value='1', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=127, name='商业水', value='0', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 18:29:20 -请求地址 : http://localhost:8081/water/water/save
2019-04-03 18:29:20 -HTTP METHOD : POST
2019-04-03 18:29:20 -CLASS_METHOD : com.bootdo.water.controller.WaterController.save
2019-04-03 18:29:20 -参数 : [com.bootdo.water.domain.WaterDO@2e5bfe3d]
2019-04-03 18:29:20 -==>  Preparing: insert into water ( `user_id`, `user_name`, `user_type`, `user_org`, `user_tell`, `user_state`, `wages_id`, `water_type`, `water_price`, `water_cost`, `water_sum`, `create_time`, `create_by`, `update_time`, `update_by`, `remark` ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 18:29:20 -==> Parameters: (String), (String), (String), (String), (String), (String), (String), (String), null, null, null, (String), 1(Long), 2019-04-03 18:29:20.498(Timestamp), 1(Long), (String)
2019-04-03 18:29:20 -{conn-10002, pstmt-20058} execute error. insert into water
		(
			`user_id`, 
			`user_name`, 
			`user_type`, 
			`user_org`, 
			`user_tell`, 
			`user_state`, 
			`wages_id`, 
			`water_type`, 
			`water_price`, 
		    `water_cost`, 
			`water_sum`, 
			`create_time`, 
			`create_by`, 
			`update_time`, 
			`update_by`, 
			`remark`
		)
		values
		(
			?, 
			?, 
			?, 
			?, 
			?, 
			?, 
			?, 
			?, 
			?, 
			?, 
			?, 
			?, 
			?, 
			?, 
			?, 
			?
		)
com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException: Column 'water_price' cannot be null
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(Unknown Source)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(Unknown Source)
	at java.lang.reflect.Constructor.newInstance(Unknown Source)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:425)
	at com.mysql.jdbc.Util.getInstance(Util.java:408)
	at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:936)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3976)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3912)
	at com.mysql.jdbc.MysqlIO.sendCommand(MysqlIO.java:2530)
	at com.mysql.jdbc.MysqlIO.sqlQueryDirect(MysqlIO.java:2683)
	at com.mysql.jdbc.ConnectionImpl.execSQL(ConnectionImpl.java:2486)
	at com.mysql.jdbc.PreparedStatement.executeInternal(PreparedStatement.java:1858)
	at com.mysql.jdbc.PreparedStatement.execute(PreparedStatement.java:1197)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2931)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2929)
	at com.alibaba.druid.wall.WallFilter.preparedStatement_execute(WallFilter.java:601)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2929)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2929)
	at com.alibaba.druid.proxy.jdbc.PreparedStatementProxyImpl.execute(PreparedStatementProxyImpl.java:131)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:493)
	at sun.reflect.GeneratedMethodAccessor128.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:59)
	at com.sun.proxy.$Proxy173.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.update(PreparedStatementHandler.java:46)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.update(RoutingStatementHandler.java:74)
	at org.apache.ibatis.executor.SimpleExecutor.doUpdate(SimpleExecutor.java:50)
	at org.apache.ibatis.executor.BaseExecutor.update(BaseExecutor.java:117)
	at org.apache.ibatis.executor.CachingExecutor.update(CachingExecutor.java:76)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:198)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.insert(DefaultSqlSession.java:185)
	at sun.reflect.GeneratedMethodAccessor225.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:434)
	at com.sun.proxy.$Proxy101.insert(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.insert(SqlSessionTemplate.java:279)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:57)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy107.save(Unknown Source)
	at com.bootdo.water.service.impl.WaterServiceImpl.save(WaterServiceImpl.java:40)
	at com.bootdo.water.controller.WaterController.save(WaterController.java:188)
	at com.bootdo.water.controller.WaterController$$FastClassBySpringCGLIB$$55e6da3c.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:204)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:746)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.bootdo.common.aspect.WebLogAspect.doAround(WebLogAspect.java:57)
	at sun.reflect.GeneratedMethodAccessor126.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.apache.shiro.spring.security.interceptor.AopAllianceAnnotationsAuthorizingMethodInterceptor$1.proceed(AopAllianceAnnotationsAuthorizingMethodInterceptor.java:82)
	at org.apache.shiro.authz.aop.AuthorizingMethodInterceptor.invoke(AuthorizingMethodInterceptor.java:39)
	at org.apache.shiro.spring.security.interceptor.AopAllianceAnnotationsAuthorizingMethodInterceptor.invoke(AopAllianceAnnotationsAuthorizingMethodInterceptor.java:115)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.bootdo.water.controller.WaterController$$EnhancerBySpringCGLIB$$cb941eaa.save(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:209)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:877)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:783)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:991)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:925)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:974)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:877)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:661)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:851)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:61)
	at org.apache.shiro.web.servlet.AdviceFilter.executeChain(AdviceFilter.java:108)
	at org.apache.shiro.web.servlet.AdviceFilter.doFilterInternal(AdviceFilter.java:137)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:66)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)
	at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)
	at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)
	at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)
	at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:383)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:109)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:496)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:790)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1468)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Unknown Source)
2019-04-03 18:29:20 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 18:29:20 -==> Parameters: 1(Long), admin(String), error(String), null, http://localhost:8081/water/water/save(String), org.springframework.dao.DataIntegrityViolationException: 
### Error updating database.  Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException: Column 'water_price' cannot be null
### The error may involve com.bootdo.water.dao.WaterDao.save-Inline
### The error occurred while setting parameters
### SQL: insert into water   (    `user_id`,     `user_name`,     `user_type`,     `user_org`,     `user_tell`,     `user_state`,     `wages_id`,     `water_type`,     `water_price`,        `water_cost`,     `water_sum`,     `create_time`,     `create_by`,     `update_time`,     `update_by`,     `remark`   )   values   (    ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?   )
### Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException: Column 'water_price' cannot be null
; ]; Column 'water_price' cannot be null; nested exception is com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException: Column 'water_price' cannot be null(String), null, 2019-04-03 18:29:20.502(Timestamp)
2019-04-03 18:29:20 -
### Error updating database.  Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException: Column 'water_price' cannot be null
### The error may involve com.bootdo.water.dao.WaterDao.save-Inline
### The error occurred while setting parameters
### SQL: insert into water   (    `user_id`,     `user_name`,     `user_type`,     `user_org`,     `user_tell`,     `user_state`,     `wages_id`,     `water_type`,     `water_price`,        `water_cost`,     `water_sum`,     `create_time`,     `create_by`,     `update_time`,     `update_by`,     `remark`   )   values   (    ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?   )
### Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException: Column 'water_price' cannot be null
; ]; Column 'water_price' cannot be null; nested exception is com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException: Column 'water_price' cannot be null
org.springframework.dao.DataIntegrityViolationException: 
### Error updating database.  Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException: Column 'water_price' cannot be null
### The error may involve com.bootdo.water.dao.WaterDao.save-Inline
### The error occurred while setting parameters
### SQL: insert into water   (    `user_id`,     `user_name`,     `user_type`,     `user_org`,     `user_tell`,     `user_state`,     `wages_id`,     `water_type`,     `water_price`,        `water_cost`,     `water_sum`,     `create_time`,     `create_by`,     `update_time`,     `update_by`,     `remark`   )   values   (    ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?,     ?   )
### Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException: Column 'water_price' cannot be null
; ]; Column 'water_price' cannot be null; nested exception is com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException: Column 'water_price' cannot be null
	at org.springframework.jdbc.support.SQLExceptionSubclassTranslator.doTranslate(SQLExceptionSubclassTranslator.java:87)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:72)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:81)
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:75)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:447)
	at com.sun.proxy.$Proxy101.insert(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.insert(SqlSessionTemplate.java:279)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:57)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy107.save(Unknown Source)
	at com.bootdo.water.service.impl.WaterServiceImpl.save(WaterServiceImpl.java:40)
	at com.bootdo.water.controller.WaterController.save(WaterController.java:188)
	at com.bootdo.water.controller.WaterController$$FastClassBySpringCGLIB$$55e6da3c.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:204)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:746)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.bootdo.common.aspect.WebLogAspect.doAround(WebLogAspect.java:57)
	at sun.reflect.GeneratedMethodAccessor126.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.apache.shiro.spring.security.interceptor.AopAllianceAnnotationsAuthorizingMethodInterceptor$1.proceed(AopAllianceAnnotationsAuthorizingMethodInterceptor.java:82)
	at org.apache.shiro.authz.aop.AuthorizingMethodInterceptor.invoke(AuthorizingMethodInterceptor.java:39)
	at org.apache.shiro.spring.security.interceptor.AopAllianceAnnotationsAuthorizingMethodInterceptor.invoke(AopAllianceAnnotationsAuthorizingMethodInterceptor.java:115)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.bootdo.water.controller.WaterController$$EnhancerBySpringCGLIB$$cb941eaa.save(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:209)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:877)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:783)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:991)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:925)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:974)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:877)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:661)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:851)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:61)
	at org.apache.shiro.web.servlet.AdviceFilter.executeChain(AdviceFilter.java:108)
	at org.apache.shiro.web.servlet.AdviceFilter.doFilterInternal(AdviceFilter.java:137)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:66)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)
	at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)
	at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)
	at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)
	at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:383)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:109)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:496)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:790)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1468)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Unknown Source)
Caused by: com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException: Column 'water_price' cannot be null
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(Unknown Source)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(Unknown Source)
	at java.lang.reflect.Constructor.newInstance(Unknown Source)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:425)
	at com.mysql.jdbc.Util.getInstance(Util.java:408)
	at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:936)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3976)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3912)
	at com.mysql.jdbc.MysqlIO.sendCommand(MysqlIO.java:2530)
	at com.mysql.jdbc.MysqlIO.sqlQueryDirect(MysqlIO.java:2683)
	at com.mysql.jdbc.ConnectionImpl.execSQL(ConnectionImpl.java:2486)
	at com.mysql.jdbc.PreparedStatement.executeInternal(PreparedStatement.java:1858)
	at com.mysql.jdbc.PreparedStatement.execute(PreparedStatement.java:1197)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2931)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2929)
	at com.alibaba.druid.wall.WallFilter.preparedStatement_execute(WallFilter.java:601)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2929)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:2929)
	at com.alibaba.druid.proxy.jdbc.PreparedStatementProxyImpl.execute(PreparedStatementProxyImpl.java:131)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:493)
	at sun.reflect.GeneratedMethodAccessor128.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:59)
	at com.sun.proxy.$Proxy173.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.update(PreparedStatementHandler.java:46)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.update(RoutingStatementHandler.java:74)
	at org.apache.ibatis.executor.SimpleExecutor.doUpdate(SimpleExecutor.java:50)
	at org.apache.ibatis.executor.BaseExecutor.update(BaseExecutor.java:117)
	at org.apache.ibatis.executor.CachingExecutor.update(CachingExecutor.java:76)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:198)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.insert(DefaultSqlSession.java:185)
	at sun.reflect.GeneratedMethodAccessor225.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:434)
	... 103 common frames omitted
2019-04-03 18:29:20 -<==    Updates: 1
2019-04-03 18:29:46 -请求地址 : http://localhost:8081/login;JSESSIONID=b5657ee4-dbeb-4772-a8d1-32ff9c1f4780
2019-04-03 18:29:46 -HTTP METHOD : GET
2019-04-03 18:29:46 -CLASS_METHOD : com.bootdo.system.controller.LoginController.login
2019-04-03 18:29:46 -参数 : [{}]
2019-04-03 18:29:46 -耗时 : 1
2019-04-03 18:29:46 -返回值 : login
2019-04-03 18:29:46 -请求地址 : http://localhost:8081/getVerify
2019-04-03 18:29:46 -HTTP METHOD : GET
2019-04-03 18:29:46 -CLASS_METHOD : com.bootdo.system.controller.LoginController.getVerify
2019-04-03 18:29:46 -参数 : [org.apache.shiro.web.servlet.ShiroHttpServletRequest@7d50ef4d, org.apache.shiro.web.servlet.ShiroHttpServletResponse@22bc7315]
2019-04-03 18:29:46 -5349
2019-04-03 18:29:46 -耗时 : 27
2019-04-03 18:29:46 -返回值 : null
2019-04-03 18:29:46 -请求地址 : http://localhost:8081/login
2019-04-03 18:29:46 -HTTP METHOD : GET
2019-04-03 18:29:46 -CLASS_METHOD : com.bootdo.system.controller.LoginController.login
2019-04-03 18:29:46 -参数 : [{}]
2019-04-03 18:29:46 -耗时 : 0
2019-04-03 18:29:46 -返回值 : login
2019-04-03 18:29:52 -请求地址 : http://localhost:8081/login
2019-04-03 18:29:52 -HTTP METHOD : POST
2019-04-03 18:29:52 -CLASS_METHOD : com.bootdo.system.controller.LoginController.ajaxLogin
2019-04-03 18:29:52 -参数 : [admin, 111111, 5349, org.apache.shiro.web.servlet.ShiroHttpServletRequest@53e4019]
2019-04-03 18:29:52 -==>  Preparing: select `user_id`,`username`,`name`,`password`,`dept_id`,`email`,`mobile`,`status`,`user_id_create`,`gmt_create`,`gmt_modified`,`sex`,`birth`,`pic_id`,`live_address`,`hobby`,`province`,`city`,`district` from sys_user WHERE username = ? order by user_id desc 
2019-04-03 18:29:52 -==> Parameters: admin(String)
2019-04-03 18:29:52 -<==      Total: 1
2019-04-03 18:29:52 -耗时 : 94
2019-04-03 18:29:52 -返回值 : {msg=操作成功, code=0}
2019-04-03 18:29:52 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 18:29:52 -==> Parameters: 1(Long), admin(String), 登录(String), 95(Integer), com.bootdo.system.controller.LoginController.ajaxLogin()(String), null, 127.0.0.1(String), 2019-04-03 18:29:52.484(Timestamp)
2019-04-03 18:29:52 -请求地址 : http://localhost:8081/index
2019-04-03 18:29:52 -HTTP METHOD : GET
2019-04-03 18:29:52 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2019-04-03 18:29:52 -参数 : [{}]
2019-04-03 18:29:52 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2019-04-03 18:29:52 -==> Parameters: 1(Long)
2019-04-03 18:29:52 -<==      Total: 46
2019-04-03 18:29:52 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2019-04-03 18:29:52 -==> Parameters: 138(Long)
2019-04-03 18:29:52 -<==    Updates: 1
2019-04-03 18:29:52 -<==      Total: 1
2019-04-03 18:29:52 -耗时 : 107
2019-04-03 18:29:52 -返回值 : index_v1
2019-04-03 18:29:52 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 18:29:52 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 107(Integer), com.bootdo.system.controller.LoginController.index()(String), {"menus":[{"attributes":{"icon":"fa fa-money","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-money","url":"/moneyList/moneyList"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"102","parentId":"106","text":"现金缴费"},{"attributes":{"icon":"fa fa-book","url":"/moneyLog/elecLog"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"107","parentId":"106","text":"缴费记录"}],"hasChildren":true,"hasParent":false,"id":"106","parentId":"0","text":"收费管理"},{"attributes":{"icon":"fa fa-lightbulb-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/elec/elec"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"121","parentId":"103","text":"电费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"elec/elecInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"122","parentId":"103","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"elec/elecUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"123","parentId":"103","text":"电表上传"},{"attributes":{"icon":"fa fa-cc","url":"/elec/elecPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"124","parentId":"103","text":"电价管理"}],"hasChildren":true,"hasParent":false,"id":"103","parentId":"0","text":"电费管理"},{"attributes":{"icon":"fa fa-tint","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/water/water"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"117","parentId":"105","text":"水费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"water/waterInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"118","parentId":"105","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"water/waterUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"119","parentId":"105","text":"水费生成"},{"attributes":{"icon":"fa fa-cc","url":"/water/waterPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"120","parentId":"105","text":"水价管理"}],"hasChildren":true,"hasParent":false,"id":"105","parentId":"0","text":"水费管理"},{"attributes":{"icon":"fa fa-fire","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/heat/heat"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"113","parentId":"104","text":"暖费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"heat/heatInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"114","parentId":"104","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"heat/heatUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"115","parentId":"104","text":"暖费生成"},{"attributes":{"icon":"","url":"/heat/heatPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"116","parentId":"104","text":"暖价管理"}],"hasChildren":true,"hasParent":false,"id":"104","parentId":"0","text":"暖费管理"},{"attributes":{"icon":"fa fa-vcard-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-bomb","url":"/print/print"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"149","parentId":"108","text":"票据记录"}],"hasChildren":true,"hasParent":false,"id":"108","parentId":"0","text":"票据管理"},{"attributes":{"icon":"fa fa-bar-chart","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-area-chart","url":"/chart/graph_echarts.html"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","text":"百度chart"},{"attributes":{"icon":"fa fa-sun-o","url":"charts/countDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"109","parentId":"97","text":"日统计报表"},{"attributes":{"icon":"fa fa-registered","url":"charts/countMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"110","parentId":"97","text":"月统计报表"},{"attributes":{"icon":"fa fa-support","url":"charts/countYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"111","parentId":"97","text":"年统计报表"},{"attributes":{"icon":"fa fa-money","url":"charts/countOwe"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"155","parentId":"97","text":"欠费报表图"},{"attributes":{"icon":"fa fa-tachometer","url":"charts/countRun"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"112","parentId":"97","text":"走势图报表"}],"hasChildren":true,"hasParent":false,"id":"97","parentId":"0","text":"统计管理"},{"attributes":{"icon":"fa fa-bars","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-book","url":"/common/dict"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"78","parentId":"1","text":"数据字典"},{"attributes":{"icon":"fa fa-folder-open","url":"/common/sysFile"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"71","parentId":"1","text":"文件管理"}],"h(String), 127.0.0.1(String), 2019-04-03 18:29:52.63(Timestamp)
2019-04-03 18:29:52 -请求地址 : http://localhost:8081/main
2019-04-03 18:29:52 -HTTP METHOD : GET
2019-04-03 18:29:52 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 18:29:52 -参数 : []
2019-04-03 18:29:52 -耗时 : 0
2019-04-03 18:29:52 -返回值 : main
2019-04-03 18:29:52 -<==    Updates: 1
2019-04-03 18:29:52 -请求地址 : http://localhost:8081/oa/notify/message
2019-04-03 18:29:52 -HTTP METHOD : GET
2019-04-03 18:29:52 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2019-04-03 18:29:52 -参数 : []
2019-04-03 18:29:52 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2019-04-03 18:29:52 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2019-04-03 18:29:53 -请求地址 : http://localhost:8081/main
2019-04-03 18:29:53 -HTTP METHOD : GET
2019-04-03 18:29:53 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 18:29:53 -参数 : []
2019-04-03 18:29:53 -耗时 : 0
2019-04-03 18:29:53 -返回值 : main
2019-04-03 18:29:53 -<==      Total: 0
2019-04-03 18:29:53 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2019-04-03 18:29:53 -==> Parameters: 1(Long), 0(String)
2019-04-03 18:29:53 -<==      Total: 1
2019-04-03 18:29:53 -耗时 : 80
2019-04-03 18:29:53 -返回值 : com.bootdo.common.utils.PageUtils@169873f5
2019-04-03 18:30:05 -==>  Preparing: select distinct m.perms from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id = ur.role_id where ur.user_id = ? 
2019-04-03 18:30:05 -==> Parameters: 1(Long)
2019-04-03 18:30:05 -<==      Total: 90
2019-04-03 18:30:05 -请求地址 : http://localhost:8081/elec/elec
2019-04-03 18:30:05 -HTTP METHOD : GET
2019-04-03 18:30:05 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.Elec
2019-04-03 18:30:05 -参数 : []
2019-04-03 18:30:05 -耗时 : 0
2019-04-03 18:30:05 -返回值 : elec/elec/elec
2019-04-03 18:30:05 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-03 18:30:05 -HTTP METHOD : GET
2019-04-03 18:30:05 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 18:30:05 -参数 : [userType]
2019-04-03 18:30:05 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 18:30:05 -==> Parameters: userType(String)
2019-04-03 18:30:05 -<==      Total: 2
2019-04-03 18:30:05 -耗时 : 3
2019-04-03 18:30:05 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 18:30:05 -请求地址 : http://localhost:8081/elec/elec/list
2019-04-03 18:30:05 -HTTP METHOD : GET
2019-04-03 18:30:05 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.list
2019-04-03 18:30:05 -参数 : [{limit=10, offset=0, userType=, userOrg=, userId=, createTime=, queryType=1}, com.bootdo.elec.domain.ElecDO@4c34c94e]
2019-04-03 18:30:05 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec order by id asc limit ?, ? 
2019-04-03 18:30:05 -==> Parameters: 0(Integer), 10(Integer)
2019-04-03 18:30:05 -<==      Total: 10
2019-04-03 18:30:05 -==>  Preparing: select count(*) from elec 
2019-04-03 18:30:05 -==> Parameters: 
2019-04-03 18:30:05 -<==      Total: 1
2019-04-03 18:30:05 -耗时 : 8
2019-04-03 18:30:05 -返回值 : com.bootdo.common.utils.PageUtils@5c955fe7
2019-04-03 18:30:09 -请求地址 : http://localhost:8081/water/water
2019-04-03 18:30:09 -HTTP METHOD : GET
2019-04-03 18:30:09 -CLASS_METHOD : com.bootdo.water.controller.WaterController.Water
2019-04-03 18:30:09 -参数 : []
2019-04-03 18:30:09 -耗时 : 0
2019-04-03 18:30:09 -返回值 : water/water/water
2019-04-03 18:30:10 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-03 18:30:10 -HTTP METHOD : GET
2019-04-03 18:30:10 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 18:30:10 -参数 : [userType]
2019-04-03 18:30:10 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 18:30:10 -==> Parameters: userType(String)
2019-04-03 18:30:10 -<==      Total: 2
2019-04-03 18:30:10 -耗时 : 3
2019-04-03 18:30:10 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 18:30:10 -请求地址 : http://localhost:8081/water/water/list
2019-04-03 18:30:10 -HTTP METHOD : GET
2019-04-03 18:30:10 -CLASS_METHOD : com.bootdo.water.controller.WaterController.list
2019-04-03 18:30:10 -参数 : [{limit=3, offset=0, userType=, userOrg=, userId=, createTime=, queryType=1}]
2019-04-03 18:30:10 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`water_type`,`water_price`,`water_cost`,`water_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from water order by id asc limit ?, ? 
2019-04-03 18:30:10 -==> Parameters: 0(Integer), 3(Integer)
2019-04-03 18:30:10 -<==      Total: 3
2019-04-03 18:30:10 -==>  Preparing: select count(*) from water 
2019-04-03 18:30:10 -==> Parameters: 
2019-04-03 18:30:10 -<==      Total: 1
2019-04-03 18:30:10 -耗时 : 12
2019-04-03 18:30:10 -返回值 : com.bootdo.common.utils.PageUtils@73259b87
2019-04-03 18:30:12 -请求地址 : http://localhost:8081/water/water/add
2019-04-03 18:30:12 -HTTP METHOD : GET
2019-04-03 18:30:12 -CLASS_METHOD : com.bootdo.water.controller.WaterController.add
2019-04-03 18:30:12 -参数 : []
2019-04-03 18:30:12 -耗时 : 1
2019-04-03 18:30:12 -返回值 : water/water/add
2019-04-03 18:30:12 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-03 18:30:12 -HTTP METHOD : GET
2019-04-03 18:30:12 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 18:30:12 -参数 : [userType]
2019-04-03 18:30:12 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 18:30:12 -==> Parameters: userType(String)
2019-04-03 18:30:12 -请求地址 : http://localhost:8081/common/dict/list/userState
2019-04-03 18:30:12 -HTTP METHOD : GET
2019-04-03 18:30:12 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 18:30:12 -<==      Total: 2
2019-04-03 18:30:12 -参数 : [userState]
2019-04-03 18:30:12 -耗时 : 3
2019-04-03 18:30:12 -请求地址 : http://localhost:8081/common/dict/list/waterType
2019-04-03 18:30:12 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 18:30:12 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 18:30:12 -HTTP METHOD : GET
2019-04-03 18:30:12 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 18:30:12 -==> Parameters: userState(String)
2019-04-03 18:30:12 -参数 : [waterType]
2019-04-03 18:30:12 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 18:30:12 -==> Parameters: waterType(String)
2019-04-03 18:30:12 -<==      Total: 2
2019-04-03 18:30:12 -耗时 : 4
2019-04-03 18:30:12 -返回值 : [DictDO{id=126, name='使用中', value='1', type='userState', description='用户状态', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=125, name='未使用', value='0', type='userState', description='用户状态', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 18:30:12 -<==      Total: 6
2019-04-03 18:30:12 -耗时 : 5
2019-04-03 18:30:12 -返回值 : [DictDO{id=132, name='特殊水费4', value='5', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=131, name='特殊水费3', value='4', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=130, name='特殊水费2', value='3', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=129, name='特殊水费1', value='2', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=128, name='民用水', value='1', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=127, name='商业水', value='0', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 18:32:23 -请求地址 : http://localhost:8081/water/water/add
2019-04-03 18:32:23 -HTTP METHOD : GET
2019-04-03 18:32:23 -CLASS_METHOD : com.bootdo.water.controller.WaterController.add
2019-04-03 18:32:23 -参数 : []
2019-04-03 18:32:23 -耗时 : 1
2019-04-03 18:32:23 -返回值 : water/water/add
2019-04-03 18:32:23 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-03 18:32:23 -HTTP METHOD : GET
2019-04-03 18:32:23 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 18:32:23 -参数 : [userType]
2019-04-03 18:32:23 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 18:32:23 -==> Parameters: userType(String)
2019-04-03 18:32:23 -请求地址 : http://localhost:8081/common/dict/list/userState
2019-04-03 18:32:23 -HTTP METHOD : GET
2019-04-03 18:32:23 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 18:32:23 -参数 : [userState]
2019-04-03 18:32:23 -<==      Total: 2
2019-04-03 18:32:23 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 18:32:23 -耗时 : 7
2019-04-03 18:32:23 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 18:32:23 -==> Parameters: userState(String)
2019-04-03 18:32:23 -<==      Total: 2
2019-04-03 18:32:23 -耗时 : 4
2019-04-03 18:32:23 -返回值 : [DictDO{id=126, name='使用中', value='1', type='userState', description='用户状态', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=125, name='未使用', value='0', type='userState', description='用户状态', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 18:32:23 -请求地址 : http://localhost:8081/common/dict/list/waterType
2019-04-03 18:32:23 -HTTP METHOD : GET
2019-04-03 18:32:23 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 18:32:23 -参数 : [waterType]
2019-04-03 18:32:23 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 18:32:23 -==> Parameters: waterType(String)
2019-04-03 18:32:23 -<==      Total: 6
2019-04-03 18:32:23 -耗时 : 6
2019-04-03 18:32:23 -返回值 : [DictDO{id=132, name='特殊水费4', value='5', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=131, name='特殊水费3', value='4', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=130, name='特殊水费2', value='3', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=129, name='特殊水费1', value='2', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=128, name='民用水', value='1', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=127, name='商业水', value='0', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 18:32:47 -请求地址 : http://localhost:8081/heat/heat
2019-04-03 18:32:47 -HTTP METHOD : GET
2019-04-03 18:32:47 -CLASS_METHOD : com.bootdo.heat.controller.HeatController.Heat
2019-04-03 18:32:47 -参数 : []
2019-04-03 18:32:47 -耗时 : 1
2019-04-03 18:32:47 -返回值 : heat/heat/heat
2019-04-03 18:32:48 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-03 18:32:48 -HTTP METHOD : GET
2019-04-03 18:32:48 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 18:32:48 -参数 : [userType]
2019-04-03 18:32:48 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 18:32:48 -==> Parameters: userType(String)
2019-04-03 18:32:48 -<==      Total: 2
2019-04-03 18:32:48 -耗时 : 3
2019-04-03 18:32:48 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 18:32:48 -请求地址 : http://localhost:8081/heat/heat/list
2019-04-03 18:32:48 -HTTP METHOD : GET
2019-04-03 18:32:48 -CLASS_METHOD : com.bootdo.heat.controller.HeatController.list
2019-04-03 18:32:48 -参数 : [{limit=10, offset=0, userType=, userOrg=, userId=, createTime=, queryType=1}]
2019-04-03 18:32:48 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`heat_type`,`heat_price`,`heat_area`,`heat_cost`,`heat_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from heat order by id asc limit ?, ? 
2019-04-03 18:32:48 -==> Parameters: 0(Integer), 10(Integer)
2019-04-03 18:32:48 -<==      Total: 10
2019-04-03 18:32:48 -==>  Preparing: select count(*) from heat 
2019-04-03 18:32:48 -==> Parameters: 
2019-04-03 18:32:48 -<==      Total: 1
2019-04-03 18:32:48 -耗时 : 102
2019-04-03 18:32:48 -返回值 : com.bootdo.common.utils.PageUtils@316e6c25
2019-04-03 18:32:51 -请求地址 : http://localhost:8081/heat/heat/add
2019-04-03 18:32:51 -HTTP METHOD : GET
2019-04-03 18:32:51 -CLASS_METHOD : com.bootdo.heat.controller.HeatController.add
2019-04-03 18:32:51 -参数 : []
2019-04-03 18:32:51 -耗时 : 0
2019-04-03 18:32:51 -返回值 : heat/heat/add
2019-04-03 18:32:51 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-03 18:32:51 -HTTP METHOD : GET
2019-04-03 18:32:51 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 18:32:51 -参数 : [userType]
2019-04-03 18:32:51 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 18:32:51 -请求地址 : http://localhost:8081/common/dict/list/userState
2019-04-03 18:32:51 -HTTP METHOD : GET
2019-04-03 18:32:51 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 18:32:51 -参数 : [userState]
2019-04-03 18:32:51 -==> Parameters: userType(String)
2019-04-03 18:32:51 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 18:32:51 -==> Parameters: userState(String)
2019-04-03 18:32:51 -<==      Total: 2
2019-04-03 18:32:51 -耗时 : 5
2019-04-03 18:32:51 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 18:32:51 -<==      Total: 2
2019-04-03 18:32:51 -耗时 : 4
2019-04-03 18:32:51 -返回值 : [DictDO{id=126, name='使用中', value='1', type='userState', description='用户状态', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=125, name='未使用', value='0', type='userState', description='用户状态', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 18:32:51 -请求地址 : http://localhost:8081/common/dict/list/heatType
2019-04-03 18:32:51 -HTTP METHOD : GET
2019-04-03 18:32:51 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 18:32:51 -参数 : [heatType]
2019-04-03 18:32:51 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 18:32:51 -==> Parameters: heatType(String)
2019-04-03 18:32:51 -<==      Total: 5
2019-04-03 18:32:51 -耗时 : 7
2019-04-03 18:32:51 -返回值 : [DictDO{id=137, name='特殊暖费1', value='4', type='heatType', description='暖气类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=136, name='工业非盈利', value='3', type='heatType', description='暖气类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=135, name='工业盈利', value='2', type='heatType', description='暖气类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=134, name='民用暖', value='1', type='heatType', description='暖气类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=133, name='商业暖', value='0', type='heatType', description='暖气类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 18:33:39 -请求地址 : http://localhost:8081/elec/elec/add
2019-04-03 18:33:39 -HTTP METHOD : GET
2019-04-03 18:33:39 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.add
2019-04-03 18:33:39 -参数 : []
2019-04-03 18:33:39 -耗时 : 1
2019-04-03 18:33:39 -返回值 : elec/elec/add
2019-04-03 18:33:39 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-03 18:33:39 -HTTP METHOD : GET
2019-04-03 18:33:39 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 18:33:39 -参数 : [userType]
2019-04-03 18:33:39 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 18:33:39 -==> Parameters: userType(String)
2019-04-03 18:33:39 -请求地址 : http://localhost:8081/common/dict/list/elecType
2019-04-03 18:33:39 -HTTP METHOD : GET
2019-04-03 18:33:39 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 18:33:39 -请求地址 : http://localhost:8081/common/dict/list/userState
2019-04-03 18:33:39 -HTTP METHOD : GET
2019-04-03 18:33:39 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 18:33:39 -参数 : [userState]
2019-04-03 18:33:39 -<==      Total: 2
2019-04-03 18:33:39 -参数 : [elecType]
2019-04-03 18:33:39 -耗时 : 4
2019-04-03 18:33:39 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 18:33:39 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 18:33:39 -==> Parameters: elecType(String)
2019-04-03 18:33:39 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 18:33:39 -<==      Total: 2
2019-04-03 18:33:39 -==> Parameters: userState(String)
2019-04-03 18:33:39 -耗时 : 6
2019-04-03 18:33:39 -返回值 : [DictDO{id=139, name='民用电', value='1', type='elecType', description='电量性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=138, name='商业电', value='0', type='elecType', description='电量类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 18:33:39 -<==      Total: 2
2019-04-03 18:33:39 -耗时 : 9
2019-04-03 18:33:39 -返回值 : [DictDO{id=126, name='使用中', value='1', type='userState', description='用户状态', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=125, name='未使用', value='0', type='userState', description='用户状态', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 19:20:26 -Starting BootdoApplication on ZJZL-20180906VX with PID 9928 (D:\eclipse2018-work\bootdo\target\classes started by Administrator in D:\eclipse2018-work\bootdo)
2019-04-03 19:20:26 -Running with Spring Boot v2.0.3.RELEASE, Spring v5.0.7.RELEASE
2019-04-03 19:20:26 -The following profiles are active: dev
2019-04-03 19:20:27 -Refreshing org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@6fdbe764: startup date [Wed Apr 03 19:20:27 CST 2019]; root of context hierarchy
2019-04-03 19:20:33 -Multiple Spring Data modules found, entering strict repository configuration mode!
2019-04-03 19:20:35 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$6c68c88e] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-03 19:20:35 -Bean 'shiroConfig' of type [com.bootdo.system.config.ShiroConfig$$EnhancerBySpringCGLIB$$5ec1f735] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-03 19:20:36 -Bean 'userRealm' of type [com.bootdo.system.shiro.UserRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-03 19:20:37 -Bean 'cacheManager2' of type [net.sf.ehcache.CacheManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-03 19:20:37 -Bean 'ehCacheManager' of type [org.apache.shiro.cache.ehcache.EhCacheManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-03 19:20:37 -Cache with name 'com.bootdo.system.shiro.UserRealm.authorizationCache' does not yet exist.  Creating now.
2019-04-03 19:20:37 -Added EhCache named [com.bootdo.system.shiro.UserRealm.authorizationCache]
2019-04-03 19:20:37 -Bean 'sessionDAO' of type [org.apache.shiro.session.mgt.eis.MemorySessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-03 19:20:37 -Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-03 19:20:37 -Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-03 19:20:37 -Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-03 19:20:39 -Tomcat initialized with port(s): 8081 (http)
2019-04-03 19:20:39 -Initializing ProtocolHandler ["http-nio-8081"]
2019-04-03 19:20:39 -Starting service [Tomcat]
2019-04-03 19:20:39 -Starting Servlet Engine: Apache Tomcat/8.5.31
2019-04-03 19:20:39 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [C:\Program Files\Java\jre1.8.0_131\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:/Program Files/Java/jre1.8.0_131/bin/server;C:/Program Files/Java/jre1.8.0_131/bin;C:/Program Files/Java/jre1.8.0_131/lib/amd64;C:\ProgramData\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Windows\System32\OpenSSH\;D:\pbb\pycSafefile\x64;D:\pbb\PBB Reader\x64;C:\Program Files\MySQL\MySQL Utilities 1.6\;D:\MAVEN\apache-maven-3.6.0\bin;D:\GIT\Git\cmd;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;;C:\Users\Administrator\Desktop;;.]
2019-04-03 19:20:39 -Initializing Spring embedded WebApplicationContext
2019-04-03 19:20:39 -Root WebApplicationContext: initialization completed in 12487 ms
2019-04-03 19:20:40 -Mapping filter: 'characterEncodingFilter' to: [/*]
2019-04-03 19:20:40 -Mapping filter: 'hiddenHttpMethodFilter' to: [/*]
2019-04-03 19:20:40 -Mapping filter: 'httpPutFormContentFilter' to: [/*]
2019-04-03 19:20:40 -Mapping filter: 'requestContextFilter' to: [/*]
2019-04-03 19:20:40 -Filter xssFilter was not registered (disabled)
2019-04-03 19:20:40 -Mapping filter: 'webStatFilter' to urls: [/*]
2019-04-03 19:20:40 -Mapping filter: 'shiroFilterFactoryBean' to: [/*]
2019-04-03 19:20:40 -Servlet statViewServlet mapped to [/druid/*]
2019-04-03 19:20:40 -Servlet dispatcherServlet mapped to [/]
2019-04-03 19:20:42 -Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'countDDController': Unsatisfied dependency expressed through field 'elecLogService'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'elecLogServiceImpl': Unsatisfied dependency expressed through field 'elecLogDao'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'elecLogDao' defined in file [D:\eclipse2018-work\bootdo\target\classes\com\bootdo\moneyLog\dao\ElecLogDao.class]: Unsatisfied dependency expressed through bean property 'sqlSessionFactory'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [org/mybatis/spring/boot/autoconfigure/MybatisAutoConfiguration.class]: Unsatisfied dependency expressed through method 'sqlSessionFactory' parameter 0; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSource' defined in class path resource [com/bootdo/common/config/DruidDBConfig.class]: Invocation of init method failed; nested exception is com.mysql.jdbc.exceptions.jdbc4.CommunicationsException: Communications link failure

The last packet sent successfully to the server was 0 milliseconds ago. The driver has not received any packets from the server.
2019-04-03 19:20:42 -Stopping service [Tomcat]
2019-04-03 19:20:42 -

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2019-04-03 19:20:43 -Application run failed
org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'countDDController': Unsatisfied dependency expressed through field 'elecLogService'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'elecLogServiceImpl': Unsatisfied dependency expressed through field 'elecLogDao'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'elecLogDao' defined in file [D:\eclipse2018-work\bootdo\target\classes\com\bootdo\moneyLog\dao\ElecLogDao.class]: Unsatisfied dependency expressed through bean property 'sqlSessionFactory'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [org/mybatis/spring/boot/autoconfigure/MybatisAutoConfiguration.class]: Unsatisfied dependency expressed through method 'sqlSessionFactory' parameter 0; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSource' defined in class path resource [com/bootdo/common/config/DruidDBConfig.class]: Invocation of init method failed; nested exception is com.mysql.jdbc.exceptions.jdbc4.CommunicationsException: Communications link failure

The last packet sent successfully to the server was 0 milliseconds ago. The driver has not received any packets from the server.
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:587)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:91)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:373)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1350)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:580)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:503)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:317)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:315)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:760)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:869)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:550)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:140)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:759)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:395)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:327)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1255)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1243)
	at com.bootdo.BootdoApplication.main(BootdoApplication.java:21)
Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'elecLogServiceImpl': Unsatisfied dependency expressed through field 'elecLogDao'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'elecLogDao' defined in file [D:\eclipse2018-work\bootdo\target\classes\com\bootdo\moneyLog\dao\ElecLogDao.class]: Unsatisfied dependency expressed through bean property 'sqlSessionFactory'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [org/mybatis/spring/boot/autoconfigure/MybatisAutoConfiguration.class]: Unsatisfied dependency expressed through method 'sqlSessionFactory' parameter 0; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSource' defined in class path resource [com/bootdo/common/config/DruidDBConfig.class]: Invocation of init method failed; nested exception is com.mysql.jdbc.exceptions.jdbc4.CommunicationsException: Communications link failure

The last packet sent successfully to the server was 0 milliseconds ago. The driver has not received any packets from the server.
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:587)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:91)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:373)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1350)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:580)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:503)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:317)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:315)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:251)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1138)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1065)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:584)
	... 19 common frames omitted
Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'elecLogDao' defined in file [D:\eclipse2018-work\bootdo\target\classes\com\bootdo\moneyLog\dao\ElecLogDao.class]: Unsatisfied dependency expressed through bean property 'sqlSessionFactory'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [org/mybatis/spring/boot/autoconfigure/MybatisAutoConfiguration.class]: Unsatisfied dependency expressed through method 'sqlSessionFactory' parameter 0; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSource' defined in class path resource [com/bootdo/common/config/DruidDBConfig.class]: Invocation of init method failed; nested exception is com.mysql.jdbc.exceptions.jdbc4.CommunicationsException: Communications link failure

The last packet sent successfully to the server was 0 milliseconds ago. The driver has not received any packets from the server.
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1445)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1332)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:580)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:503)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:317)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:315)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:251)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1138)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1065)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:584)
	... 32 common frames omitted
Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [org/mybatis/spring/boot/autoconfigure/MybatisAutoConfiguration.class]: Unsatisfied dependency expressed through method 'sqlSessionFactory' parameter 0; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSource' defined in class path resource [com/bootdo/common/config/DruidDBConfig.class]: Invocation of init method failed; nested exception is com.mysql.jdbc.exceptions.jdbc4.CommunicationsException: Communications link failure

The last packet sent successfully to the server was 0 milliseconds ago. The driver has not received any packets from the server.
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:732)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:474)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1256)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1105)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:503)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:317)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:315)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:251)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1138)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1065)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1430)
	... 43 common frames omitted
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSource' defined in class path resource [com/bootdo/common/config/DruidDBConfig.class]: Invocation of init method failed; nested exception is com.mysql.jdbc.exceptions.jdbc4.CommunicationsException: Communications link failure

The last packet sent successfully to the server was 0 milliseconds ago. The driver has not received any packets from the server.
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1708)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:581)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:503)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:317)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:315)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:251)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1138)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1065)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:818)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:724)
	... 56 common frames omitted
Caused by: com.mysql.jdbc.exceptions.jdbc4.CommunicationsException: Communications link failure

The last packet sent successfully to the server was 0 milliseconds ago. The driver has not received any packets from the server.
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(Unknown Source)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(Unknown Source)
	at java.lang.reflect.Constructor.newInstance(Unknown Source)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:425)
	at com.mysql.jdbc.SQLError.createCommunicationsException(SQLError.java:990)
	at com.mysql.jdbc.MysqlIO.<init>(MysqlIO.java:342)
	at com.mysql.jdbc.ConnectionImpl.coreConnect(ConnectionImpl.java:2188)
	at com.mysql.jdbc.ConnectionImpl.connectOneTryOnly(ConnectionImpl.java:2221)
	at com.mysql.jdbc.ConnectionImpl.createNewIO(ConnectionImpl.java:2016)
	at com.mysql.jdbc.ConnectionImpl.<init>(ConnectionImpl.java:776)
	at com.mysql.jdbc.JDBC4Connection.<init>(JDBC4Connection.java:47)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(Unknown Source)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(Unknown Source)
	at java.lang.reflect.Constructor.newInstance(Unknown Source)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:425)
	at com.mysql.jdbc.ConnectionImpl.getInstance(ConnectionImpl.java:386)
	at com.mysql.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:330)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:148)
	at com.alibaba.druid.filter.FilterAdapter.connection_connect(FilterAdapter.java:785)
	at com.alibaba.druid.filter.FilterEventAdapter.connection_connect(FilterEventAdapter.java:38)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.filter.FilterAdapter.connection_connect(FilterAdapter.java:785)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.filter.stat.StatFilter.connection_connect(StatFilter.java:211)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1454)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1516)
	at com.alibaba.druid.pool.DruidDataSource.init(DruidDataSource.java:734)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeCustomInitMethod(AbstractAutowireCapableBeanFactory.java:1833)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1776)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1704)
	... 67 common frames omitted
Caused by: java.net.ConnectException: Connection refused: connect
	at java.net.DualStackPlainSocketImpl.connect0(Native Method)
	at java.net.DualStackPlainSocketImpl.socketConnect(Unknown Source)
	at java.net.AbstractPlainSocketImpl.doConnect(Unknown Source)
	at java.net.AbstractPlainSocketImpl.connectToAddress(Unknown Source)
	at java.net.AbstractPlainSocketImpl.connect(Unknown Source)
	at java.net.PlainSocketImpl.connect(Unknown Source)
	at java.net.SocksSocketImpl.connect(Unknown Source)
	at java.net.Socket.connect(Unknown Source)
	at com.mysql.jdbc.StandardSocketFactory.connect(StandardSocketFactory.java:211)
	at com.mysql.jdbc.MysqlIO.<init>(MysqlIO.java:301)
	... 97 common frames omitted
2019-04-03 19:22:17 -Starting BootdoApplication on ZJZL-20180906VX with PID 5808 (D:\eclipse2018-work\bootdo\target\classes started by Administrator in D:\eclipse2018-work\bootdo)
2019-04-03 19:22:17 -Running with Spring Boot v2.0.3.RELEASE, Spring v5.0.7.RELEASE
2019-04-03 19:22:17 -The following profiles are active: dev
2019-04-03 19:22:17 -Refreshing org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@a38c7fe: startup date [Wed Apr 03 19:22:17 CST 2019]; root of context hierarchy
2019-04-03 19:22:20 -Multiple Spring Data modules found, entering strict repository configuration mode!
2019-04-03 19:22:22 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$7f0c0d77] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-03 19:22:22 -Bean 'shiroConfig' of type [com.bootdo.system.config.ShiroConfig$$EnhancerBySpringCGLIB$$71653c1e] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-03 19:22:23 -Bean 'userRealm' of type [com.bootdo.system.shiro.UserRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-03 19:22:23 -Bean 'cacheManager2' of type [net.sf.ehcache.CacheManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-03 19:22:23 -Bean 'ehCacheManager' of type [org.apache.shiro.cache.ehcache.EhCacheManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-03 19:22:23 -Cache with name 'com.bootdo.system.shiro.UserRealm.authorizationCache' does not yet exist.  Creating now.
2019-04-03 19:22:23 -Added EhCache named [com.bootdo.system.shiro.UserRealm.authorizationCache]
2019-04-03 19:22:23 -Bean 'sessionDAO' of type [org.apache.shiro.session.mgt.eis.MemorySessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-03 19:22:23 -Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-03 19:22:23 -Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-03 19:22:23 -Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-03 19:22:24 -Tomcat initialized with port(s): 8081 (http)
2019-04-03 19:22:24 -Initializing ProtocolHandler ["http-nio-8081"]
2019-04-03 19:22:24 -Starting service [Tomcat]
2019-04-03 19:22:24 -Starting Servlet Engine: Apache Tomcat/8.5.31
2019-04-03 19:22:24 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [C:\Program Files\Java\jre1.8.0_131\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:/Program Files/Java/jre1.8.0_131/bin/server;C:/Program Files/Java/jre1.8.0_131/bin;C:/Program Files/Java/jre1.8.0_131/lib/amd64;C:\ProgramData\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Windows\System32\OpenSSH\;D:\pbb\pycSafefile\x64;D:\pbb\PBB Reader\x64;C:\Program Files\MySQL\MySQL Utilities 1.6\;D:\MAVEN\apache-maven-3.6.0\bin;D:\GIT\Git\cmd;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;;C:\Users\Administrator\Desktop;;.]
2019-04-03 19:22:24 -Initializing Spring embedded WebApplicationContext
2019-04-03 19:22:24 -Root WebApplicationContext: initialization completed in 7570 ms
2019-04-03 19:22:25 -Mapping filter: 'characterEncodingFilter' to: [/*]
2019-04-03 19:22:25 -Mapping filter: 'hiddenHttpMethodFilter' to: [/*]
2019-04-03 19:22:25 -Mapping filter: 'httpPutFormContentFilter' to: [/*]
2019-04-03 19:22:25 -Mapping filter: 'requestContextFilter' to: [/*]
2019-04-03 19:22:25 -Filter xssFilter was not registered (disabled)
2019-04-03 19:22:25 -Mapping filter: 'webStatFilter' to urls: [/*]
2019-04-03 19:22:25 -Mapping filter: 'shiroFilterFactoryBean' to: [/*]
2019-04-03 19:22:25 -Servlet statViewServlet mapped to [/druid/*]
2019-04-03 19:22:25 -Servlet dispatcherServlet mapped to [/]
2019-04-03 19:22:27 -Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'countDDController': Unsatisfied dependency expressed through field 'elecLogService'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'elecLogServiceImpl': Unsatisfied dependency expressed through field 'elecLogDao'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'elecLogDao' defined in file [D:\eclipse2018-work\bootdo\target\classes\com\bootdo\moneyLog\dao\ElecLogDao.class]: Unsatisfied dependency expressed through bean property 'sqlSessionFactory'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [org/mybatis/spring/boot/autoconfigure/MybatisAutoConfiguration.class]: Unsatisfied dependency expressed through method 'sqlSessionFactory' parameter 0; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSource' defined in class path resource [com/bootdo/common/config/DruidDBConfig.class]: Invocation of init method failed; nested exception is com.mysql.jdbc.exceptions.jdbc4.CommunicationsException: Communications link failure

The last packet sent successfully to the server was 0 milliseconds ago. The driver has not received any packets from the server.
2019-04-03 19:22:27 -Stopping service [Tomcat]
2019-04-03 19:22:27 -

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2019-04-03 19:22:27 -Application run failed
org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'countDDController': Unsatisfied dependency expressed through field 'elecLogService'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'elecLogServiceImpl': Unsatisfied dependency expressed through field 'elecLogDao'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'elecLogDao' defined in file [D:\eclipse2018-work\bootdo\target\classes\com\bootdo\moneyLog\dao\ElecLogDao.class]: Unsatisfied dependency expressed through bean property 'sqlSessionFactory'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [org/mybatis/spring/boot/autoconfigure/MybatisAutoConfiguration.class]: Unsatisfied dependency expressed through method 'sqlSessionFactory' parameter 0; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSource' defined in class path resource [com/bootdo/common/config/DruidDBConfig.class]: Invocation of init method failed; nested exception is com.mysql.jdbc.exceptions.jdbc4.CommunicationsException: Communications link failure

The last packet sent successfully to the server was 0 milliseconds ago. The driver has not received any packets from the server.
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:587)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:91)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:373)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1350)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:580)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:503)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:317)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:315)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:760)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:869)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:550)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:140)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:759)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:395)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:327)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1255)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1243)
	at com.bootdo.BootdoApplication.main(BootdoApplication.java:21)
Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'elecLogServiceImpl': Unsatisfied dependency expressed through field 'elecLogDao'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'elecLogDao' defined in file [D:\eclipse2018-work\bootdo\target\classes\com\bootdo\moneyLog\dao\ElecLogDao.class]: Unsatisfied dependency expressed through bean property 'sqlSessionFactory'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [org/mybatis/spring/boot/autoconfigure/MybatisAutoConfiguration.class]: Unsatisfied dependency expressed through method 'sqlSessionFactory' parameter 0; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSource' defined in class path resource [com/bootdo/common/config/DruidDBConfig.class]: Invocation of init method failed; nested exception is com.mysql.jdbc.exceptions.jdbc4.CommunicationsException: Communications link failure

The last packet sent successfully to the server was 0 milliseconds ago. The driver has not received any packets from the server.
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:587)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:91)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:373)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1350)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:580)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:503)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:317)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:315)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:251)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1138)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1065)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:584)
	... 19 common frames omitted
Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'elecLogDao' defined in file [D:\eclipse2018-work\bootdo\target\classes\com\bootdo\moneyLog\dao\ElecLogDao.class]: Unsatisfied dependency expressed through bean property 'sqlSessionFactory'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [org/mybatis/spring/boot/autoconfigure/MybatisAutoConfiguration.class]: Unsatisfied dependency expressed through method 'sqlSessionFactory' parameter 0; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSource' defined in class path resource [com/bootdo/common/config/DruidDBConfig.class]: Invocation of init method failed; nested exception is com.mysql.jdbc.exceptions.jdbc4.CommunicationsException: Communications link failure

The last packet sent successfully to the server was 0 milliseconds ago. The driver has not received any packets from the server.
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1445)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1332)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:580)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:503)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:317)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:315)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:251)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1138)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1065)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:584)
	... 32 common frames omitted
Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [org/mybatis/spring/boot/autoconfigure/MybatisAutoConfiguration.class]: Unsatisfied dependency expressed through method 'sqlSessionFactory' parameter 0; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSource' defined in class path resource [com/bootdo/common/config/DruidDBConfig.class]: Invocation of init method failed; nested exception is com.mysql.jdbc.exceptions.jdbc4.CommunicationsException: Communications link failure

The last packet sent successfully to the server was 0 milliseconds ago. The driver has not received any packets from the server.
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:732)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:474)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1256)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1105)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:503)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:317)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:315)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:251)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1138)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1065)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1430)
	... 43 common frames omitted
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSource' defined in class path resource [com/bootdo/common/config/DruidDBConfig.class]: Invocation of init method failed; nested exception is com.mysql.jdbc.exceptions.jdbc4.CommunicationsException: Communications link failure

The last packet sent successfully to the server was 0 milliseconds ago. The driver has not received any packets from the server.
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1708)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:581)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:503)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:317)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:315)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:251)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1138)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1065)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:818)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:724)
	... 56 common frames omitted
Caused by: com.mysql.jdbc.exceptions.jdbc4.CommunicationsException: Communications link failure

The last packet sent successfully to the server was 0 milliseconds ago. The driver has not received any packets from the server.
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(Unknown Source)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(Unknown Source)
	at java.lang.reflect.Constructor.newInstance(Unknown Source)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:425)
	at com.mysql.jdbc.SQLError.createCommunicationsException(SQLError.java:990)
	at com.mysql.jdbc.MysqlIO.<init>(MysqlIO.java:342)
	at com.mysql.jdbc.ConnectionImpl.coreConnect(ConnectionImpl.java:2188)
	at com.mysql.jdbc.ConnectionImpl.connectOneTryOnly(ConnectionImpl.java:2221)
	at com.mysql.jdbc.ConnectionImpl.createNewIO(ConnectionImpl.java:2016)
	at com.mysql.jdbc.ConnectionImpl.<init>(ConnectionImpl.java:776)
	at com.mysql.jdbc.JDBC4Connection.<init>(JDBC4Connection.java:47)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(Unknown Source)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(Unknown Source)
	at java.lang.reflect.Constructor.newInstance(Unknown Source)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:425)
	at com.mysql.jdbc.ConnectionImpl.getInstance(ConnectionImpl.java:386)
	at com.mysql.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:330)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:148)
	at com.alibaba.druid.filter.FilterAdapter.connection_connect(FilterAdapter.java:785)
	at com.alibaba.druid.filter.FilterEventAdapter.connection_connect(FilterEventAdapter.java:38)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.filter.FilterAdapter.connection_connect(FilterAdapter.java:785)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.filter.stat.StatFilter.connection_connect(StatFilter.java:211)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1454)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1516)
	at com.alibaba.druid.pool.DruidDataSource.init(DruidDataSource.java:734)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeCustomInitMethod(AbstractAutowireCapableBeanFactory.java:1833)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1776)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1704)
	... 67 common frames omitted
Caused by: java.net.ConnectException: Connection refused: connect
	at java.net.DualStackPlainSocketImpl.connect0(Native Method)
	at java.net.DualStackPlainSocketImpl.socketConnect(Unknown Source)
	at java.net.AbstractPlainSocketImpl.doConnect(Unknown Source)
	at java.net.AbstractPlainSocketImpl.connectToAddress(Unknown Source)
	at java.net.AbstractPlainSocketImpl.connect(Unknown Source)
	at java.net.PlainSocketImpl.connect(Unknown Source)
	at java.net.SocksSocketImpl.connect(Unknown Source)
	at java.net.Socket.connect(Unknown Source)
	at com.mysql.jdbc.StandardSocketFactory.connect(StandardSocketFactory.java:211)
	at com.mysql.jdbc.MysqlIO.<init>(MysqlIO.java:301)
	... 97 common frames omitted
2019-04-03 19:22:56 -Starting BootdoApplication on ZJZL-20180906VX with PID 1040 (D:\eclipse2018-work\bootdo\target\classes started by Administrator in D:\eclipse2018-work\bootdo)
2019-04-03 19:22:56 -Running with Spring Boot v2.0.3.RELEASE, Spring v5.0.7.RELEASE
2019-04-03 19:22:56 -The following profiles are active: dev
2019-04-03 19:22:56 -Refreshing org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@6fdbe764: startup date [Wed Apr 03 19:22:56 CST 2019]; root of context hierarchy
2019-04-03 19:22:59 -Multiple Spring Data modules found, entering strict repository configuration mode!
2019-04-03 19:23:01 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$adaffbcd] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-03 19:23:01 -Bean 'shiroConfig' of type [com.bootdo.system.config.ShiroConfig$$EnhancerBySpringCGLIB$$a0092a74] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-03 19:23:02 -Bean 'userRealm' of type [com.bootdo.system.shiro.UserRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-03 19:23:02 -Bean 'cacheManager2' of type [net.sf.ehcache.CacheManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-03 19:23:02 -Bean 'ehCacheManager' of type [org.apache.shiro.cache.ehcache.EhCacheManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-03 19:23:02 -Cache with name 'com.bootdo.system.shiro.UserRealm.authorizationCache' does not yet exist.  Creating now.
2019-04-03 19:23:02 -Added EhCache named [com.bootdo.system.shiro.UserRealm.authorizationCache]
2019-04-03 19:23:02 -Bean 'sessionDAO' of type [org.apache.shiro.session.mgt.eis.MemorySessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-03 19:23:02 -Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-03 19:23:02 -Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-03 19:23:02 -Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-03 19:23:03 -Tomcat initialized with port(s): 8081 (http)
2019-04-03 19:23:03 -Initializing ProtocolHandler ["http-nio-8081"]
2019-04-03 19:23:03 -Starting service [Tomcat]
2019-04-03 19:23:03 -Starting Servlet Engine: Apache Tomcat/8.5.31
2019-04-03 19:23:03 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [C:\Program Files\Java\jre1.8.0_131\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:/Program Files/Java/jre1.8.0_131/bin/server;C:/Program Files/Java/jre1.8.0_131/bin;C:/Program Files/Java/jre1.8.0_131/lib/amd64;C:\ProgramData\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Windows\System32\OpenSSH\;D:\pbb\pycSafefile\x64;D:\pbb\PBB Reader\x64;C:\Program Files\MySQL\MySQL Utilities 1.6\;D:\MAVEN\apache-maven-3.6.0\bin;D:\GIT\Git\cmd;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;;C:\Users\Administrator\Desktop;;.]
2019-04-03 19:23:03 -Initializing Spring embedded WebApplicationContext
2019-04-03 19:23:03 -Root WebApplicationContext: initialization completed in 7030 ms
2019-04-03 19:23:04 -Mapping filter: 'characterEncodingFilter' to: [/*]
2019-04-03 19:23:04 -Mapping filter: 'hiddenHttpMethodFilter' to: [/*]
2019-04-03 19:23:04 -Mapping filter: 'httpPutFormContentFilter' to: [/*]
2019-04-03 19:23:04 -Mapping filter: 'requestContextFilter' to: [/*]
2019-04-03 19:23:04 -Filter xssFilter was not registered (disabled)
2019-04-03 19:23:04 -Mapping filter: 'webStatFilter' to urls: [/*]
2019-04-03 19:23:04 -Mapping filter: 'shiroFilterFactoryBean' to: [/*]
2019-04-03 19:23:04 -Servlet statViewServlet mapped to [/druid/*]
2019-04-03 19:23:04 -Servlet dispatcherServlet mapped to [/]
2019-04-03 19:23:06 -Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'countDDController': Unsatisfied dependency expressed through field 'elecLogService'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'elecLogServiceImpl': Unsatisfied dependency expressed through field 'elecLogDao'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'elecLogDao' defined in file [D:\eclipse2018-work\bootdo\target\classes\com\bootdo\moneyLog\dao\ElecLogDao.class]: Unsatisfied dependency expressed through bean property 'sqlSessionFactory'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [org/mybatis/spring/boot/autoconfigure/MybatisAutoConfiguration.class]: Unsatisfied dependency expressed through method 'sqlSessionFactory' parameter 0; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSource' defined in class path resource [com/bootdo/common/config/DruidDBConfig.class]: Invocation of init method failed; nested exception is com.mysql.jdbc.exceptions.jdbc4.CommunicationsException: Communications link failure

The last packet sent successfully to the server was 0 milliseconds ago. The driver has not received any packets from the server.
2019-04-03 19:23:06 -Stopping service [Tomcat]
2019-04-03 19:23:06 -

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2019-04-03 19:23:06 -Application run failed
org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'countDDController': Unsatisfied dependency expressed through field 'elecLogService'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'elecLogServiceImpl': Unsatisfied dependency expressed through field 'elecLogDao'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'elecLogDao' defined in file [D:\eclipse2018-work\bootdo\target\classes\com\bootdo\moneyLog\dao\ElecLogDao.class]: Unsatisfied dependency expressed through bean property 'sqlSessionFactory'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [org/mybatis/spring/boot/autoconfigure/MybatisAutoConfiguration.class]: Unsatisfied dependency expressed through method 'sqlSessionFactory' parameter 0; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSource' defined in class path resource [com/bootdo/common/config/DruidDBConfig.class]: Invocation of init method failed; nested exception is com.mysql.jdbc.exceptions.jdbc4.CommunicationsException: Communications link failure

The last packet sent successfully to the server was 0 milliseconds ago. The driver has not received any packets from the server.
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:587)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:91)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:373)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1350)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:580)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:503)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:317)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:315)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:760)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:869)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:550)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:140)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:759)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:395)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:327)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1255)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1243)
	at com.bootdo.BootdoApplication.main(BootdoApplication.java:21)
Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'elecLogServiceImpl': Unsatisfied dependency expressed through field 'elecLogDao'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'elecLogDao' defined in file [D:\eclipse2018-work\bootdo\target\classes\com\bootdo\moneyLog\dao\ElecLogDao.class]: Unsatisfied dependency expressed through bean property 'sqlSessionFactory'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [org/mybatis/spring/boot/autoconfigure/MybatisAutoConfiguration.class]: Unsatisfied dependency expressed through method 'sqlSessionFactory' parameter 0; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSource' defined in class path resource [com/bootdo/common/config/DruidDBConfig.class]: Invocation of init method failed; nested exception is com.mysql.jdbc.exceptions.jdbc4.CommunicationsException: Communications link failure

The last packet sent successfully to the server was 0 milliseconds ago. The driver has not received any packets from the server.
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:587)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:91)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:373)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1350)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:580)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:503)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:317)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:315)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:251)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1138)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1065)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:584)
	... 19 common frames omitted
Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'elecLogDao' defined in file [D:\eclipse2018-work\bootdo\target\classes\com\bootdo\moneyLog\dao\ElecLogDao.class]: Unsatisfied dependency expressed through bean property 'sqlSessionFactory'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [org/mybatis/spring/boot/autoconfigure/MybatisAutoConfiguration.class]: Unsatisfied dependency expressed through method 'sqlSessionFactory' parameter 0; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSource' defined in class path resource [com/bootdo/common/config/DruidDBConfig.class]: Invocation of init method failed; nested exception is com.mysql.jdbc.exceptions.jdbc4.CommunicationsException: Communications link failure

The last packet sent successfully to the server was 0 milliseconds ago. The driver has not received any packets from the server.
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1445)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1332)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:580)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:503)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:317)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:315)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:251)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1138)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1065)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:584)
	... 32 common frames omitted
Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [org/mybatis/spring/boot/autoconfigure/MybatisAutoConfiguration.class]: Unsatisfied dependency expressed through method 'sqlSessionFactory' parameter 0; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSource' defined in class path resource [com/bootdo/common/config/DruidDBConfig.class]: Invocation of init method failed; nested exception is com.mysql.jdbc.exceptions.jdbc4.CommunicationsException: Communications link failure

The last packet sent successfully to the server was 0 milliseconds ago. The driver has not received any packets from the server.
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:732)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:474)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1256)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1105)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:503)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:317)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:315)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:251)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1138)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1065)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1430)
	... 43 common frames omitted
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSource' defined in class path resource [com/bootdo/common/config/DruidDBConfig.class]: Invocation of init method failed; nested exception is com.mysql.jdbc.exceptions.jdbc4.CommunicationsException: Communications link failure

The last packet sent successfully to the server was 0 milliseconds ago. The driver has not received any packets from the server.
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1708)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:581)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:503)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:317)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:315)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:251)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1138)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1065)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:818)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:724)
	... 56 common frames omitted
Caused by: com.mysql.jdbc.exceptions.jdbc4.CommunicationsException: Communications link failure

The last packet sent successfully to the server was 0 milliseconds ago. The driver has not received any packets from the server.
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(Unknown Source)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(Unknown Source)
	at java.lang.reflect.Constructor.newInstance(Unknown Source)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:425)
	at com.mysql.jdbc.SQLError.createCommunicationsException(SQLError.java:990)
	at com.mysql.jdbc.MysqlIO.<init>(MysqlIO.java:342)
	at com.mysql.jdbc.ConnectionImpl.coreConnect(ConnectionImpl.java:2188)
	at com.mysql.jdbc.ConnectionImpl.connectOneTryOnly(ConnectionImpl.java:2221)
	at com.mysql.jdbc.ConnectionImpl.createNewIO(ConnectionImpl.java:2016)
	at com.mysql.jdbc.ConnectionImpl.<init>(ConnectionImpl.java:776)
	at com.mysql.jdbc.JDBC4Connection.<init>(JDBC4Connection.java:47)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(Unknown Source)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(Unknown Source)
	at java.lang.reflect.Constructor.newInstance(Unknown Source)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:425)
	at com.mysql.jdbc.ConnectionImpl.getInstance(ConnectionImpl.java:386)
	at com.mysql.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:330)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:148)
	at com.alibaba.druid.filter.FilterAdapter.connection_connect(FilterAdapter.java:785)
	at com.alibaba.druid.filter.FilterEventAdapter.connection_connect(FilterEventAdapter.java:38)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.filter.FilterAdapter.connection_connect(FilterAdapter.java:785)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.filter.stat.StatFilter.connection_connect(StatFilter.java:211)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1454)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1516)
	at com.alibaba.druid.pool.DruidDataSource.init(DruidDataSource.java:734)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeCustomInitMethod(AbstractAutowireCapableBeanFactory.java:1833)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1776)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1704)
	... 67 common frames omitted
Caused by: java.net.ConnectException: Connection refused: connect
	at java.net.DualStackPlainSocketImpl.connect0(Native Method)
	at java.net.DualStackPlainSocketImpl.socketConnect(Unknown Source)
	at java.net.AbstractPlainSocketImpl.doConnect(Unknown Source)
	at java.net.AbstractPlainSocketImpl.connectToAddress(Unknown Source)
	at java.net.AbstractPlainSocketImpl.connect(Unknown Source)
	at java.net.PlainSocketImpl.connect(Unknown Source)
	at java.net.SocksSocketImpl.connect(Unknown Source)
	at java.net.Socket.connect(Unknown Source)
	at com.mysql.jdbc.StandardSocketFactory.connect(StandardSocketFactory.java:211)
	at com.mysql.jdbc.MysqlIO.<init>(MysqlIO.java:301)
	... 97 common frames omitted
2019-04-03 19:26:27 -Starting BootdoApplication on ZJZL-20180906VX with PID 8612 (D:\eclipse2018-work\bootdo\target\classes started by Administrator in D:\eclipse2018-work\bootdo)
2019-04-03 19:26:27 -Running with Spring Boot v2.0.3.RELEASE, Spring v5.0.7.RELEASE
2019-04-03 19:26:27 -The following profiles are active: dev
2019-04-03 19:26:27 -Refreshing org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@6fdbe764: startup date [Wed Apr 03 19:26:27 CST 2019]; root of context hierarchy
2019-04-03 19:26:30 -Multiple Spring Data modules found, entering strict repository configuration mode!
2019-04-03 19:26:32 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$fba0e363] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-03 19:26:32 -Bean 'shiroConfig' of type [com.bootdo.system.config.ShiroConfig$$EnhancerBySpringCGLIB$$edfa120a] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-03 19:26:33 -Bean 'userRealm' of type [com.bootdo.system.shiro.UserRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-03 19:26:33 -Bean 'cacheManager2' of type [net.sf.ehcache.CacheManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-03 19:26:33 -Bean 'ehCacheManager' of type [org.apache.shiro.cache.ehcache.EhCacheManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-03 19:26:33 -Cache with name 'com.bootdo.system.shiro.UserRealm.authorizationCache' does not yet exist.  Creating now.
2019-04-03 19:26:33 -Added EhCache named [com.bootdo.system.shiro.UserRealm.authorizationCache]
2019-04-03 19:26:33 -Bean 'sessionDAO' of type [org.apache.shiro.session.mgt.eis.MemorySessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-03 19:26:33 -Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-03 19:26:33 -Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-03 19:26:34 -Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-03 19:26:34 -Tomcat initialized with port(s): 8081 (http)
2019-04-03 19:26:34 -Initializing ProtocolHandler ["http-nio-8081"]
2019-04-03 19:26:34 -Starting service [Tomcat]
2019-04-03 19:26:34 -Starting Servlet Engine: Apache Tomcat/8.5.31
2019-04-03 19:26:34 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [C:\Program Files\Java\jre1.8.0_131\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:/Program Files/Java/jre1.8.0_131/bin/server;C:/Program Files/Java/jre1.8.0_131/bin;C:/Program Files/Java/jre1.8.0_131/lib/amd64;C:\ProgramData\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Windows\System32\OpenSSH\;D:\pbb\pycSafefile\x64;D:\pbb\PBB Reader\x64;C:\Program Files\MySQL\MySQL Utilities 1.6\;D:\MAVEN\apache-maven-3.6.0\bin;D:\GIT\Git\cmd;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;;C:\Users\Administrator\Desktop;;.]
2019-04-03 19:26:35 -Initializing Spring embedded WebApplicationContext
2019-04-03 19:26:35 -Root WebApplicationContext: initialization completed in 7360 ms
2019-04-03 19:26:35 -Mapping filter: 'characterEncodingFilter' to: [/*]
2019-04-03 19:26:35 -Mapping filter: 'hiddenHttpMethodFilter' to: [/*]
2019-04-03 19:26:35 -Mapping filter: 'httpPutFormContentFilter' to: [/*]
2019-04-03 19:26:35 -Mapping filter: 'requestContextFilter' to: [/*]
2019-04-03 19:26:35 -Filter xssFilter was not registered (disabled)
2019-04-03 19:26:35 -Mapping filter: 'webStatFilter' to urls: [/*]
2019-04-03 19:26:35 -Mapping filter: 'shiroFilterFactoryBean' to: [/*]
2019-04-03 19:26:35 -Servlet statViewServlet mapped to [/druid/*]
2019-04-03 19:26:35 -Servlet dispatcherServlet mapped to [/]
2019-04-03 19:26:39 -ApplicationContext registed-->org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@6fdbe764: startup date [Wed Apr 03 19:26:27 CST 2019]; root of context hierarchy
2019-04-03 19:26:39 -Using default implementation for ThreadExecutor
2019-04-03 19:26:40 -Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2019-04-03 19:26:40 -Quartz Scheduler v.2.2.1 created.
2019-04-03 19:26:40 -RAMJobStore initialized.
2019-04-03 19:26:40 -Scheduler meta-data: Quartz Scheduler (v2.2.1) 'schedulerFactoryBean' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2019-04-03 19:26:40 -Quartz scheduler 'schedulerFactoryBean' initialized from an externally provided properties instance.
2019-04-03 19:26:40 -Quartz scheduler version: 2.2.1
2019-04-03 19:26:40 -JobFactory set to: com.bootdo.common.quartz.factory.JobFactory@1883871b
2019-04-03 19:26:40 -Initializing ExecutorService  'clientInboundChannelExecutor'
2019-04-03 19:26:40 -Initializing ExecutorService  'clientOutboundChannelExecutor'
2019-04-03 19:26:42 -Mapped "{[/charts/countDD],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.countDDController.countDD()
2019-04-03 19:26:42 -Mapped "{[/charts/countDD/getCountDD],methods=[POST]}" onto public com.bootdo.charts.vo.CountDayVo com.bootdo.charts.controller.countDDController.getCountD(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo,javax.servlet.http.HttpServletRequest)
2019-04-03 19:26:42 -Mapped "{[/charts/countDD/tableDD],methods=[POST]}" onto public java.lang.String com.bootdo.charts.controller.countDDController.tableDD()
2019-04-03 19:26:42 -Mapped "{[/charts/countDD/exportCountDD],methods=[GET]}" onto public void com.bootdo.charts.controller.countDDController.exprotElecLog(com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-03 19:26:42 -Mapped "{[/charts/countMM/exportCountMM],methods=[GET]}" onto public void com.bootdo.charts.controller.countMMController.exprotElecLog(com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-03 19:26:42 -Mapped "{[/charts/countMM],methods=[GET]}" onto java.lang.String com.bootdo.charts.controller.countMMController.countMM()
2019-04-03 19:26:42 -Mapped "{[/charts/countMM/getCountMM],methods=[POST]}" onto public void com.bootdo.charts.controller.countMMController.getCountMM(org.springframework.ui.Model,com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo,javax.servlet.http.HttpServletRequest)
2019-04-03 19:26:42 -Mapped "{[/charts/countOwe/getCountOwe],methods=[POST]}" onto public com.bootdo.charts.vo.CountOweVo com.bootdo.charts.controller.countOweController.getCountD(com.bootdo.elec.vo.ElecVo,com.bootdo.water.vo.WaterVo,com.bootdo.heat.vo.HeatVo,javax.servlet.http.HttpServletRequest)
2019-04-03 19:26:42 -Mapped "{[/charts/countOwe],methods=[GET]}" onto java.lang.String com.bootdo.charts.controller.countOweController.countOwe()
2019-04-03 19:26:42 -Mapped "{[/charts/countRun/getCountRun],methods=[POST]}" onto public int com.bootdo.charts.controller.countRunController.getCountD(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo)
2019-04-03 19:26:42 -Mapped "{[/charts/countRun/exportCountRun],methods=[GET]}" onto public void com.bootdo.charts.controller.countRunController.exprotElecLog(com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-03 19:26:42 -Mapped "{[/charts/countRun],methods=[GET]}" onto java.lang.String com.bootdo.charts.controller.countRunController.countRun()
2019-04-03 19:26:42 -Mapped "{[/charts/countYY/getCountYY],methods=[POST]}" onto public int com.bootdo.charts.controller.countYYController.getCountD(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo)
2019-04-03 19:26:42 -Mapped "{[/charts/countYY/exportCountYY],methods=[GET]}" onto public void com.bootdo.charts.controller.countYYController.exprotElecLog(com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-03 19:26:42 -Mapped "{[/charts/countYY],methods=[GET]}" onto java.lang.String com.bootdo.charts.controller.countYYController.countYY()
2019-04-03 19:26:43 -Mapped "{[/common/dict/add],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.add()
2019-04-03 19:26:43 -Mapped "{[/common/dict/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.remove(java.lang.Long)
2019-04-03 19:26:43 -Mapped "{[/common/dict/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.remove(java.lang.Long[])
2019-04-03 19:26:43 -Mapped "{[/common/dict/update]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.update(com.bootdo.common.domain.DictDO)
2019-04-03 19:26:43 -Mapped "{[/common/dict/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.common.controller.DictController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 19:26:43 -Mapped "{[/common/dict/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.save(com.bootdo.common.domain.DictDO)
2019-04-03 19:26:43 -Mapped "{[/common/dict/type],methods=[GET]}" onto public java.util.List<com.bootdo.common.domain.DictDO> com.bootdo.common.controller.DictController.listType()
2019-04-03 19:26:43 -Mapped "{[/common/dict/list/{type}],methods=[GET]}" onto public java.util.List<com.bootdo.common.domain.DictDO> com.bootdo.common.controller.DictController.listByType(java.lang.String)
2019-04-03 19:26:43 -Mapped "{[/common/dict/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 19:26:43 -Mapped "{[/common/dict/add/{type}/{description}],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.addD(org.springframework.ui.Model,java.lang.String,java.lang.String)
2019-04-03 19:26:43 -Mapped "{[/common/dict],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.dict()
2019-04-03 19:26:43 -Mapped "{[/common/sysFile/add],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.FileController.add()
2019-04-03 19:26:43 -Mapped "{[/common/sysFile/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.remove(java.lang.Long,javax.servlet.http.HttpServletRequest)
2019-04-03 19:26:43 -Mapped "{[/common/sysFile/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.remove(java.lang.Long[])
2019-04-03 19:26:43 -Mapped "{[/common/sysFile/update]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.update(com.bootdo.common.domain.FileDO)
2019-04-03 19:26:43 -Mapped "{[/common/sysFile/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.common.controller.FileController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 19:26:43 -Mapped "{[/common/sysFile/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.save(com.bootdo.common.domain.FileDO)
2019-04-03 19:26:43 -Mapped "{[/common/sysFile/info/{id}]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.info(java.lang.Long)
2019-04-03 19:26:43 -Mapped "{[/common/sysFile/edit],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.FileController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 19:26:43 -Mapped "{[/common/sysFile],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.FileController.sysFile(org.springframework.ui.Model)
2019-04-03 19:26:43 -Mapped "{[/common/sysFile/upload],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.FileController.upload(org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpServletRequest)
2019-04-03 19:26:43 -Mapped "{[/common/generator/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.GeneratorController.update(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 19:26:43 -Mapped "{[/common/generator/list],methods=[GET]}" onto java.util.List<java.util.Map<java.lang.String, java.lang.Object>> com.bootdo.common.controller.GeneratorController.list()
2019-04-03 19:26:43 -Mapped "{[/common/generator/code/{tableName}]}" onto public void com.bootdo.common.controller.GeneratorController.code(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String) throws java.io.IOException
2019-04-03 19:26:43 -Mapped "{[/common/generator],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.GeneratorController.generator()
2019-04-03 19:26:43 -Mapped "{[/common/generator/batchCode]}" onto public void com.bootdo.common.controller.GeneratorController.batchCode(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String) throws java.io.IOException
2019-04-03 19:26:43 -Mapped "{[/common/generator/edit],methods=[GET]}" onto public java.lang.String com.bootdo.common.controller.GeneratorController.edit(org.springframework.ui.Model)
2019-04-03 19:26:43 -Mapped "{[/common/job/add],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.JobController.add()
2019-04-03 19:26:43 -Mapped "{[/common/job/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.remove(java.lang.Long)
2019-04-03 19:26:43 -Mapped "{[/common/job/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.remove(java.lang.Long[])
2019-04-03 19:26:43 -Mapped "{[/common/job/update],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.update(com.bootdo.common.domain.TaskDO)
2019-04-03 19:26:43 -Mapped "{[/common/job/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.common.controller.JobController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 19:26:43 -Mapped "{[/common/job/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.save(com.bootdo.common.domain.TaskDO)
2019-04-03 19:26:43 -Mapped "{[/common/job/info/{id}]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.info(java.lang.Long)
2019-04-03 19:26:43 -Mapped "{[/common/job/changeJobStatus],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.changeJobStatus(java.lang.Long,java.lang.String)
2019-04-03 19:26:43 -Mapped "{[/common/job/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.JobController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 19:26:43 -Mapped "{[/common/job],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.JobController.taskScheduleJob()
2019-04-03 19:26:43 -Mapped "{[/common/log/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.LogController.remove(java.lang.Long)
2019-04-03 19:26:43 -Mapped "{[/common/log],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.LogController.log()
2019-04-03 19:26:43 -Mapped "{[/common/log/list],methods=[GET]}" onto com.bootdo.common.domain.PageDO<com.bootdo.common.domain.LogDO> com.bootdo.common.controller.LogController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 19:26:43 -Mapped "{[/common/log/batchRemove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.LogController.batchRemove(java.lang.Long[])
2019-04-03 19:26:43 -Mapped "{[/common/long],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.LongController.Long()
2019-04-03 19:26:43 -Mapped "{[/common/time],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.TimeController.Time()
2019-04-03 19:26:43 -Mapped "{[/error]}" onto public com.bootdo.common.utils.R com.bootdo.common.exception.MainsiteErrorController.handleError(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-04-03 19:26:43 -Mapped "{[/error],produces=[text/html]}" onto public org.springframework.web.servlet.ModelAndView com.bootdo.common.exception.MainsiteErrorController.errorHtml(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-04-03 19:26:43 -Mapped "{[/elec/elec/add],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecController.add()
2019-04-03 19:26:43 -Mapped "{[/elec/elec/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.remove(java.lang.Long)
2019-04-03 19:26:43 -Mapped "{[/elec/elec/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.remove(java.lang.Long[])
2019-04-03 19:26:43 -Mapped "{[/elec/elec/update],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.update(com.bootdo.elec.domain.ElecDO)
2019-04-03 19:26:43 -Mapped "{[/elec/elec/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.elec.controller.ElecController.list(java.util.Map<java.lang.String, java.lang.Object>,com.bootdo.elec.domain.ElecDO)
2019-04-03 19:26:43 -Mapped "{[/elec/elec/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.save(com.bootdo.elec.domain.ElecDO)
2019-04-03 19:26:43 -Mapped "{[/elec/elec/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 19:26:43 -Mapped "{[/elec/elec],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecController.Elec()
2019-04-03 19:26:43 -Mapped "{[/elec/elec/exprotElec],methods=[GET]}" onto public void com.bootdo.elec.controller.ElecController.exprotExcel(com.bootdo.elec.vo.ElecVo,javax.servlet.http.HttpServletResponse)
2019-04-03 19:26:43 -Mapped "{[/elec/elecInto/exprotElecIntoExcel],methods=[GET]}" onto public void com.bootdo.elec.controller.ElecIntoController.exprotExcel(com.bootdo.elec.vo.ElecVo,javax.servlet.http.HttpServletResponse)
2019-04-03 19:26:43 -Mapped "{[/elec/elecInto],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecIntoController.ElecInto()
2019-04-03 19:26:43 -Mapped "{[/elec/elecInto/importElecIntoExcel],methods=[POST]}" onto public java.util.Map<java.lang.String, java.lang.Object> com.bootdo.elec.controller.ElecIntoController.importElecIntoExcel(org.springframework.web.multipart.MultipartFile,com.bootdo.elec.vo.ElecVo) throws java.lang.Exception
2019-04-03 19:26:43 -Mapped "{[/elec/elecPrice/add],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecPriceController.add()
2019-04-03 19:26:43 -Mapped "{[/elec/elecPrice/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecPriceController.remove(java.lang.Long)
2019-04-03 19:26:43 -Mapped "{[/elec/elecPrice/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecPriceController.remove(java.lang.Long[])
2019-04-03 19:26:43 -Mapped "{[/elec/elecPrice/update]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecPriceController.update(com.bootdo.elec.domain.ElecPriceDO)
2019-04-03 19:26:43 -Mapped "{[/elec/elecPrice/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.elec.controller.ElecPriceController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 19:26:43 -Mapped "{[/elec/elecPrice/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecPriceController.save(com.bootdo.elec.domain.ElecPriceDO,com.bootdo.elec.domain.ElecDO)
2019-04-03 19:26:43 -Mapped "{[/elec/elecPrice/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecPriceController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 19:26:43 -Mapped "{[/elec/elecPrice],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecPriceController.ElecPrice()
2019-04-03 19:26:43 -Mapped "{[/elec/elecUpLoad],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecUpLoadController.Elec()
2019-04-03 19:26:43 -Mapped "{[/elec/elecUpLoad/importElecExcel],methods=[POST]}" onto public java.util.Map<java.lang.String, java.lang.Object> com.bootdo.elec.controller.ElecUpLoadController.importElecExcel(org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpServletRequest) throws java.lang.Exception
2019-04-03 19:26:43 -Mapped "{[/heat/heat/add],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatController.add()
2019-04-03 19:26:43 -Mapped "{[/heat/heat/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatController.remove(java.lang.Integer)
2019-04-03 19:26:43 -Mapped "{[/heat/heat/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatController.remove(java.lang.Integer[])
2019-04-03 19:26:43 -Mapped "{[/heat/heat/update]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatController.update(com.bootdo.heat.domain.HeatDO)
2019-04-03 19:26:43 -Mapped "{[/heat/heat/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.heat.controller.HeatController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 19:26:43 -Mapped "{[/heat/heat/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatController.save(com.bootdo.heat.domain.HeatDO)
2019-04-03 19:26:43 -Mapped "{[/heat/heat/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatController.edit(java.lang.Integer,org.springframework.ui.Model)
2019-04-03 19:26:43 -Mapped "{[/heat/heat/exprotHeat],methods=[GET]}" onto public void com.bootdo.heat.controller.HeatController.exprotExcel(com.bootdo.heat.vo.HeatVo,javax.servlet.http.HttpServletResponse)
2019-04-03 19:26:43 -Mapped "{[/heat/heat],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatController.Heat()
2019-04-03 19:26:43 -Mapped "{[/heat/heatInto/exprotHeatIntoExcel],methods=[GET]}" onto public void com.bootdo.heat.controller.HeatIntoController.exprotExcel(com.bootdo.heat.vo.HeatVo,javax.servlet.http.HttpServletResponse)
2019-04-03 19:26:43 -Mapped "{[/heat/heatInto],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatIntoController.HeatInto()
2019-04-03 19:26:43 -Mapped "{[/heat/heatPrice/add],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatPriceController.add()
2019-04-03 19:26:43 -Mapped "{[/heat/heatPrice/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatPriceController.remove(java.lang.Long)
2019-04-03 19:26:43 -Mapped "{[/heat/heatPrice/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatPriceController.remove(java.lang.Long[])
2019-04-03 19:26:43 -Mapped "{[/heat/heatPrice/update]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatPriceController.update(com.bootdo.heat.domain.HeatPriceDO)
2019-04-03 19:26:43 -Mapped "{[/heat/heatPrice/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.heat.controller.HeatPriceController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 19:26:43 -Mapped "{[/heat/heatPrice/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatPriceController.save(com.bootdo.heat.domain.HeatPriceDO)
2019-04-03 19:26:43 -Mapped "{[/heat/heatPrice/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatPriceController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 19:26:43 -Mapped "{[/heat/heatPrice],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatPriceController.HeatPrice()
2019-04-03 19:26:43 -Mapped "{[/heat/heatUpLoad],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatUpLoadController.HeatUpLoad()
2019-04-03 19:26:43 -Mapped "{[/heat/heatUpLoad/exprotHeatExcel],methods=[GET]}" onto public void com.bootdo.heat.controller.HeatUpLoadController.exprotHeatExcel(com.bootdo.heat.vo.HeatVo,javax.servlet.http.HttpServletResponse)
2019-04-03 19:26:43 -Mapped "{[/heat/heatUpLoad/createHeatExcel],methods=[POST]}" onto public java.lang.String com.bootdo.heat.controller.HeatUpLoadController.createHeatExcel(com.bootdo.heat.domain.HeatDO) throws java.lang.Exception
2019-04-03 19:26:43 -Mapped "{[/heat/heatUpLoad/importHeatExcel]}" onto public java.lang.String com.bootdo.heat.controller.HeatUpLoadController.importHeatExcel(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)
2019-04-03 19:26:43 -Mapped "{[/moneyList/moneyList],methods=[GET]}" onto java.lang.String com.bootdo.moneyList.controller.MoneyListController.MoneyList()
2019-04-03 19:26:43 -Mapped "{[/moneyList/moneyList/queryAllUser],methods=[POST]}" onto public java.util.List<com.bootdo.moneyList.damain.MoneyListDO> com.bootdo.moneyList.controller.MoneyListController.queryAllUser(com.bootdo.moneyList.damain.MoneyListDO)
2019-04-03 19:26:43 -Mapped "{[/moneyList/moneyList/updateMoney],methods=[POST]}" onto public java.util.List<com.bootdo.moneyList.damain.MoneyListDO> com.bootdo.moneyList.controller.MoneyListController.updateMoney(com.bootdo.moneyList.damain.MoneyListDO)
2019-04-03 19:26:43 -Mapped "{[/moneyList/moneyList/queryAllUserName],methods=[POST]}" onto public java.util.List<com.bootdo.moneyList.damain.MoneyListDO> com.bootdo.moneyList.controller.MoneyListController.getAllUserName(com.bootdo.moneyList.damain.MoneyListDO)
2019-04-03 19:26:43 -Mapped "{[/moneyLog/elecLog/add],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.ElecLogController.add()
2019-04-03 19:26:43 -Mapped "{[/moneyLog/elecLog/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.ElecLogController.remove(java.lang.Long)
2019-04-03 19:26:43 -Mapped "{[/moneyLog/elecLog/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.ElecLogController.remove(java.lang.Long[])
2019-04-03 19:26:43 -Mapped "{[/moneyLog/elecLog/update]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.ElecLogController.update(com.bootdo.moneyLog.domain.ElecLogDO)
2019-04-03 19:26:43 -Mapped "{[/moneyLog/elecLog/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.moneyLog.controller.ElecLogController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 19:26:43 -Mapped "{[/moneyLog/elecLog/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.ElecLogController.save(com.bootdo.moneyLog.domain.ElecLogDO)
2019-04-03 19:26:43 -Mapped "{[/moneyLog/elecLog/exprotElecLog],methods=[GET]}" onto public void com.bootdo.moneyLog.controller.ElecLogController.exprotElecLog(com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-03 19:26:43 -Mapped "{[/moneyLog/elecLog/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.ElecLogController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 19:26:43 -Mapped "{[/moneyLog/elecLog],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.ElecLogController.moneyLog()
2019-04-03 19:26:43 -Mapped "{[/moneyLog/heatLog/add],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.HeatLogController.add()
2019-04-03 19:26:43 -Mapped "{[/moneyLog/heatLog/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.HeatLogController.remove(java.lang.Long)
2019-04-03 19:26:43 -Mapped "{[/moneyLog/heatLog/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.HeatLogController.remove(java.lang.Long[])
2019-04-03 19:26:43 -Mapped "{[/moneyLog/heatLog/update]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.HeatLogController.update(com.bootdo.moneyLog.domain.HeatLogDO)
2019-04-03 19:26:43 -Mapped "{[/moneyLog/heatLog/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.moneyLog.controller.HeatLogController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 19:26:43 -Mapped "{[/moneyLog/heatLog/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.HeatLogController.save(com.bootdo.moneyLog.domain.HeatLogDO)
2019-04-03 19:26:43 -Mapped "{[/moneyLog/heatLog/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.HeatLogController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 19:26:43 -Mapped "{[/moneyLog/heatLog/exprotHeatLog],methods=[GET]}" onto public void com.bootdo.moneyLog.controller.HeatLogController.exprotHeatLog(com.bootdo.moneyLog.vo.HeatLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-03 19:26:43 -Mapped "{[/moneyLog/heatLog],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.HeatLogController.HeatLog()
2019-04-03 19:26:43 -Mapped "{[/moneyLog/waterLog/add],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.WaterLogController.add()
2019-04-03 19:26:43 -Mapped "{[/moneyLog/waterLog/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.WaterLogController.remove(java.lang.Long)
2019-04-03 19:26:43 -Mapped "{[/moneyLog/waterLog/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.WaterLogController.remove(java.lang.Long[])
2019-04-03 19:26:43 -Mapped "{[/moneyLog/waterLog/update]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.WaterLogController.update(com.bootdo.moneyLog.domain.WaterLogDO)
2019-04-03 19:26:43 -Mapped "{[/moneyLog/waterLog/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.moneyLog.controller.WaterLogController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 19:26:43 -Mapped "{[/moneyLog/waterLog/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.WaterLogController.save(com.bootdo.moneyLog.domain.WaterLogDO)
2019-04-03 19:26:43 -Mapped "{[/moneyLog/waterLog/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.WaterLogController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 19:26:43 -Mapped "{[/moneyLog/waterLog],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.WaterLogController.WaterLog()
2019-04-03 19:26:43 -Mapped "{[/moneyLog/waterLog/exprotWaterLog],methods=[GET]}" onto public void com.bootdo.moneyLog.controller.WaterLogController.exprotWaterLog(com.bootdo.moneyLog.vo.WaterLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-03 19:26:43 -Mapped "{[/oa/notify/add],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.add()
2019-04-03 19:26:43 -Mapped "{[/oa/notify/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.remove(java.lang.Long)
2019-04-03 19:26:43 -Mapped "{[/oa/notify/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.remove(java.lang.Long[])
2019-04-03 19:26:43 -Mapped "{[/oa/notify/update]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.update(com.bootdo.oa.domain.NotifyDO)
2019-04-03 19:26:43 -Mapped "{[/oa/notify/read/{id}],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.read(java.lang.Long,org.springframework.ui.Model)
2019-04-03 19:26:43 -Mapped "{[/oa/notify/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.oa.controller.NotifyController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 19:26:43 -Mapped "{[/oa/notify/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.save(com.bootdo.oa.domain.NotifyDO)
2019-04-03 19:26:43 -Mapped "{[/oa/notify/message],methods=[GET]}" onto com.bootdo.common.utils.PageUtils com.bootdo.oa.controller.NotifyController.message()
2019-04-03 19:26:43 -Mapped "{[/oa/notify/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 19:26:43 -Mapped "{[/oa/notify/selfList],methods=[GET]}" onto com.bootdo.common.utils.PageUtils com.bootdo.oa.controller.NotifyController.selfList(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 19:26:43 -Mapped "{[/oa/notify/selfNotify],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.selefNotify()
2019-04-03 19:26:43 -Mapped "{[/oa/notify],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.oaNotify()
2019-04-03 19:26:43 -Mapped "{[/print/print/add],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.add()
2019-04-03 19:26:43 -Mapped "{[/print/print/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.print.controller.PrintController.remove(java.lang.Long)
2019-04-03 19:26:43 -Mapped "{[/print/print/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.print.controller.PrintController.remove(java.lang.Long[])
2019-04-03 19:26:43 -Mapped "{[/print/print/update]}" onto public com.bootdo.common.utils.R com.bootdo.print.controller.PrintController.update(com.bootdo.print.domain.PrintDO)
2019-04-03 19:26:43 -Mapped "{[/print/print/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.print.controller.PrintController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 19:26:43 -Mapped "{[/print/print/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.print.controller.PrintController.save(java.lang.String,com.bootdo.print.domain.PrintDO)
2019-04-03 19:26:43 -Mapped "{[/print/print/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 19:26:43 -Mapped "{[/print/print/exprotPrint],methods=[GET]}" onto public void com.bootdo.print.controller.PrintController.exprotPrint(com.bootdo.print.vo.PrintVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-03 19:26:43 -Mapped "{[/print/print],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.Print()
2019-04-03 19:26:43 -Mapped "{[/print/print/printEdit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.printEdit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 19:26:43 -Mapped "{[/system/sysDept/add/{pId}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.add(java.lang.Long,org.springframework.ui.Model)
2019-04-03 19:26:43 -Mapped "{[/system/sysDept/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.remove(java.lang.Long)
2019-04-03 19:26:43 -Mapped "{[/system/sysDept/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.remove(java.lang.Long[])
2019-04-03 19:26:43 -Mapped "{[/system/sysDept/update]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.update(com.bootdo.system.domain.DeptDO)
2019-04-03 19:26:43 -Mapped "{[/system/sysDept/list],methods=[GET]}" onto public java.util.List<com.bootdo.system.domain.DeptDO> com.bootdo.system.controller.DeptController.list()
2019-04-03 19:26:43 -Mapped "{[/system/sysDept/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.save(com.bootdo.system.domain.DeptDO)
2019-04-03 19:26:43 -Mapped "{[/system/sysDept/tree],methods=[GET]}" onto public com.bootdo.common.domain.Tree<com.bootdo.system.domain.DeptDO> com.bootdo.system.controller.DeptController.tree()
2019-04-03 19:26:43 -Mapped "{[/system/sysDept/edit/{deptId}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 19:26:43 -Mapped "{[/system/sysDept],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.dept()
2019-04-03 19:26:43 -Mapped "{[/system/sysDept/treeView],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.treeView()
2019-04-03 19:26:43 -Mapped "{[/index],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.index(org.springframework.ui.Model)
2019-04-03 19:26:43 -Mapped "{[/main],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.main()
2019-04-03 19:26:43 -Mapped "{[/login],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.login(org.springframework.ui.Model)
2019-04-03 19:26:43 -Mapped "{[/logout],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.logout()
2019-04-03 19:26:43 -Mapped "{[/login],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.LoginController.ajaxLogin(java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest)
2019-04-03 19:26:43 -Mapped "{[/ || ],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.welcome(org.springframework.ui.Model)
2019-04-03 19:26:43 -Mapped "{[/getVerify],methods=[GET]}" onto public void com.bootdo.system.controller.LoginController.getVerify(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-04-03 19:26:43 -Mapped "{[/sys/menu/add/{pId}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.MenuController.add(org.springframework.ui.Model,java.lang.Long)
2019-04-03 19:26:43 -Mapped "{[/sys/menu/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.MenuController.remove(java.lang.Long)
2019-04-03 19:26:43 -Mapped "{[/sys/menu/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.MenuController.update(com.bootdo.system.domain.MenuDO)
2019-04-03 19:26:43 -Mapped "{[/sys/menu/list]}" onto java.util.List<com.bootdo.system.domain.MenuDO> com.bootdo.system.controller.MenuController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 19:26:43 -Mapped "{[/sys/menu/save],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.MenuController.save(com.bootdo.system.domain.MenuDO)
2019-04-03 19:26:43 -Mapped "{[/sys/menu/tree/{roleId}],methods=[GET]}" onto com.bootdo.common.domain.Tree<com.bootdo.system.domain.MenuDO> com.bootdo.system.controller.MenuController.tree(java.lang.Long)
2019-04-03 19:26:43 -Mapped "{[/sys/menu/tree],methods=[GET]}" onto com.bootdo.common.domain.Tree<com.bootdo.system.domain.MenuDO> com.bootdo.system.controller.MenuController.tree()
2019-04-03 19:26:43 -Mapped "{[/sys/menu/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.MenuController.edit(org.springframework.ui.Model,java.lang.Long)
2019-04-03 19:26:43 -Mapped "{[/sys/menu],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.MenuController.menu(org.springframework.ui.Model)
2019-04-03 19:26:43 -Mapped "{[/sys/role/add],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.RoleController.add()
2019-04-03 19:26:43 -Mapped "{[/sys/role/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.update(com.bootdo.system.domain.RoleDO)
2019-04-03 19:26:43 -Mapped "{[/sys/role/list],methods=[GET]}" onto java.util.List<com.bootdo.system.domain.RoleDO> com.bootdo.system.controller.RoleController.list()
2019-04-03 19:26:43 -Mapped "{[/sys/role/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.save(java.lang.Long)
2019-04-03 19:26:43 -Mapped "{[/sys/role/save],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.save(com.bootdo.system.domain.RoleDO)
2019-04-03 19:26:43 -Mapped "{[/sys/role/batchRemove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.batchRemove(java.lang.Long[])
2019-04-03 19:26:43 -Mapped "{[/sys/role/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.RoleController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 19:26:43 -Mapped "{[/sys/role],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.RoleController.role()
2019-04-03 19:26:43 -Mapped "{[/sys/online/list]}" onto public java.util.List<com.bootdo.system.domain.UserOnline> com.bootdo.system.controller.SessionController.list()
2019-04-03 19:26:43 -Mapped "{[/sys/online/forceLogout/{sessionId}]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.SessionController.forceLogout(java.lang.String,org.springframework.web.servlet.mvc.support.RedirectAttributes)
2019-04-03 19:26:43 -Mapped "{[/sys/online/sessionList]}" onto public java.util.Collection<org.apache.shiro.session.Session> com.bootdo.system.controller.SessionController.sessionList()
2019-04-03 19:26:43 -Mapped "{[/sys/online],methods=[GET]}" onto public java.lang.String com.bootdo.system.controller.SessionController.online()
2019-04-03 19:26:43 -Mapped "{[/sys/user/exit],methods=[POST]}" onto boolean com.bootdo.system.controller.UserController.exit(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 19:26:43 -Mapped "{[/sys/user/add],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.add(org.springframework.ui.Model)
2019-04-03 19:26:43 -Mapped "{[/sys/user/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.remove(java.lang.Long)
2019-04-03 19:26:43 -Mapped "{[/sys/user/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.update(com.bootdo.system.domain.UserDO)
2019-04-03 19:26:43 -Mapped "{[/sys/user/list],methods=[GET]}" onto com.bootdo.common.utils.PageUtils com.bootdo.system.controller.UserController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 19:26:43 -Mapped "{[/sys/user/save],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.save(com.bootdo.system.domain.UserDO)
2019-04-03 19:26:43 -Mapped "{[/sys/user/batchRemove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.batchRemove(java.lang.Long[])
2019-04-03 19:26:43 -Mapped "{[/sys/user/tree],methods=[GET]}" onto public com.bootdo.common.domain.Tree<com.bootdo.system.domain.DeptDO> com.bootdo.system.controller.UserController.tree()
2019-04-03 19:26:43 -Mapped "{[/sys/user],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.user(org.springframework.ui.Model)
2019-04-03 19:26:43 -Mapped "{[/sys/user/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.edit(org.springframework.ui.Model,java.lang.Long)
2019-04-03 19:26:43 -Mapped "{[/sys/user/treeView],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.treeView()
2019-04-03 19:26:43 -Mapped "{[/sys/user/uploadImg],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.uploadImg(org.springframework.web.multipart.MultipartFile,java.lang.String,javax.servlet.http.HttpServletRequest)
2019-04-03 19:26:43 -Mapped "{[/sys/user/updatePeronal],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.updatePeronal(com.bootdo.system.domain.UserDO)
2019-04-03 19:26:43 -Mapped "{[/sys/user/resetPwd],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.resetPwd(com.bootdo.system.vo.UserVO)
2019-04-03 19:26:43 -Mapped "{[/sys/user/resetPwd/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.resetPwd(java.lang.Long,org.springframework.ui.Model)
2019-04-03 19:26:43 -Mapped "{[/sys/user/personal],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.personal(org.springframework.ui.Model)
2019-04-03 19:26:43 -Mapped "{[/sys/user/adminResetPwd],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.adminResetPwd(com.bootdo.system.vo.UserVO)
2019-04-03 19:26:43 -Mapped "{[/file/downImport/{importType}],methods=[GET]}" onto public void com.bootdo.temple.controller.TempletController.downImport(javax.servlet.http.HttpServletResponse,java.lang.String)
2019-04-03 19:26:43 -Mapped "{[/water/water/add],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterController.add()
2019-04-03 19:26:43 -Mapped "{[/water/water/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterController.remove(java.lang.Long)
2019-04-03 19:26:43 -Mapped "{[/water/water/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterController.remove(java.lang.Long[])
2019-04-03 19:26:43 -Mapped "{[/water/water/update]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterController.update(com.bootdo.water.domain.WaterDO)
2019-04-03 19:26:43 -Mapped "{[/water/water/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.water.controller.WaterController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 19:26:43 -Mapped "{[/water/water/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterController.save(com.bootdo.water.domain.WaterDO)
2019-04-03 19:26:43 -Mapped "{[/water/water/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 19:26:43 -Mapped "{[/water/water/exprotWater],methods=[GET]}" onto public void com.bootdo.water.controller.WaterController.exprotExcel(com.bootdo.water.vo.WaterVo,javax.servlet.http.HttpServletResponse)
2019-04-03 19:26:43 -Mapped "{[/water/water],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterController.Water()
2019-04-03 19:26:43 -Mapped "{[/water/waterInto/exprotWaterIntoExcel],methods=[GET]}" onto public void com.bootdo.water.controller.WaterIntoController.exprotExcel(com.bootdo.water.vo.WaterVo,javax.servlet.http.HttpServletResponse)
2019-04-03 19:26:43 -Mapped "{[/water/waterInto],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterIntoController.WaterInto()
2019-04-03 19:26:43 -Mapped "{[/water/waterPrice/add],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterPriceController.add()
2019-04-03 19:26:43 -Mapped "{[/water/waterPrice/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterPriceController.remove(java.lang.Long)
2019-04-03 19:26:43 -Mapped "{[/water/waterPrice/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterPriceController.remove(java.lang.Long[])
2019-04-03 19:26:43 -Mapped "{[/water/waterPrice/update]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterPriceController.update(com.bootdo.water.domain.WaterPriceDO)
2019-04-03 19:26:43 -Mapped "{[/water/waterPrice/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.water.controller.WaterPriceController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-03 19:26:43 -Mapped "{[/water/waterPrice/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterPriceController.save(com.bootdo.water.domain.WaterPriceDO)
2019-04-03 19:26:43 -Mapped "{[/water/waterPrice/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterPriceController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-03 19:26:43 -Mapped "{[/water/waterPrice],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterPriceController.WaterPrice()
2019-04-03 19:26:43 -Mapped "{[/water/waterUpLoad/importWaterExcel]}" onto public java.lang.String com.bootdo.water.controller.WaterUpLoadController.importWaterExcel(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)
2019-04-03 19:26:43 -Mapped "{[/water/waterUpLoad],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterUpLoadController.WaterUpLoad()
2019-04-03 19:26:43 -Mapped "{[/water/waterUpLoad/createWaterExcel],methods=[POST]}" onto public java.lang.String com.bootdo.water.controller.WaterUpLoadController.createWaterExcel(com.bootdo.water.domain.WaterDO) throws java.lang.Exception
2019-04-03 19:26:43 -Mapped "{[/water/waterUpLoad/exprotWaterExcel],methods=[GET]}" onto public void com.bootdo.water.controller.WaterUpLoadController.exprotWaterExcel(com.bootdo.water.vo.WaterVo,javax.servlet.http.HttpServletResponse)
2019-04-03 19:26:43 -Mapped "{[/v2/api-docs],methods=[GET],produces=[application/json || application/hal+json]}" onto public org.springframework.http.ResponseEntity<springfox.documentation.spring.web.json.Json> springfox.documentation.swagger2.web.Swagger2Controller.getDocumentation(java.lang.String,javax.servlet.http.HttpServletRequest)
2019-04-03 19:26:43 -Mapped "{[/swagger-resources]}" onto org.springframework.http.ResponseEntity<java.util.List<springfox.documentation.swagger.web.SwaggerResource>> springfox.documentation.swagger.web.ApiResourceController.swaggerResources()
2019-04-03 19:26:43 -Mapped "{[/swagger-resources/configuration/ui]}" onto org.springframework.http.ResponseEntity<springfox.documentation.swagger.web.UiConfiguration> springfox.documentation.swagger.web.ApiResourceController.uiConfiguration()
2019-04-03 19:26:43 -Mapped "{[/swagger-resources/configuration/security]}" onto org.springframework.http.ResponseEntity<springfox.documentation.swagger.web.SecurityConfiguration> springfox.documentation.swagger.web.ApiResourceController.securityConfiguration()
2019-04-03 19:26:44 -Initializing ExecutorService  'messageBrokerTaskScheduler'
2019-04-03 19:26:44 -Mapped URL path [/endpointChat/**] onto handler of type [class org.springframework.web.socket.sockjs.support.SockJsHttpRequestHandler]
2019-04-03 19:26:44 -Initializing ExecutorService  'brokerChannelExecutor'
2019-04-03 19:26:44 -Mapped URL path [/**/favicon.ico] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-04-03 19:26:44 -Looking for @ControllerAdvice: org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@6fdbe764: startup date [Wed Apr 03 19:26:27 CST 2019]; root of context hierarchy
2019-04-03 19:26:45 -Mapped URL path [/webjars/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-04-03 19:26:45 -Mapped URL path [/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-04-03 19:26:45 -Mapped URL path [/files/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-04-03 19:26:45 -Detected @ExceptionHandler methods in BDExceptionHandler
2019-04-03 19:26:45 -[THYMELEAF][main] Template Mode 'LEGACYHTML5' is deprecated. Using Template Mode 'HTML' instead.
2019-04-03 19:26:47 -Registering beans for JMX exposure on startup
2019-04-03 19:26:47 -Bean with name 'dataSource' has been autodetected for JMX exposure
2019-04-03 19:26:48 -Located MBean 'dataSource': registering with JMX server as MBean [com.alibaba.druid.pool:name=dataSource,type=DruidDataSource]
2019-04-03 19:26:48 -Starting beans in phase 2147483647
2019-04-03 19:26:48 -Context refreshed
2019-04-03 19:26:48 -Found 1 custom documentation plugin(s)
2019-04-03 19:26:48 -Scanning for api listing references
2019-04-03 19:26:48 -Generating unique operation named: exprotElecLogUsingGET_1
2019-04-03 19:26:48 -Generating unique operation named: getCountDUsingPOST_1
2019-04-03 19:26:48 -Generating unique operation named: exprotElecLogUsingGET_2
2019-04-03 19:26:48 -Generating unique operation named: getCountDUsingPOST_2
2019-04-03 19:26:48 -Generating unique operation named: exprotElecLogUsingGET_3
2019-04-03 19:26:48 -Generating unique operation named: getCountDUsingPOST_3
2019-04-03 19:26:48 -Generating unique operation named: removeUsingPOST_1
2019-04-03 19:26:48 -Generating unique operation named: addUsingGET_1
2019-04-03 19:26:48 -Generating unique operation named: editUsingGET_1
2019-04-03 19:26:48 -Generating unique operation named: listUsingGET_1
2019-04-03 19:26:48 -Generating unique operation named: removeUsingPOST_2
2019-04-03 19:26:48 -Generating unique operation named: removeUsingPOST_3
2019-04-03 19:26:48 -Generating unique operation named: saveUsingPOST_1
2019-04-03 19:26:48 -Generating unique operation named: updateUsingGET_1
2019-04-03 19:26:48 -Generating unique operation named: updateUsingHEAD_1
2019-04-03 19:26:48 -Generating unique operation named: updateUsingPOST_1
2019-04-03 19:26:48 -Generating unique operation named: updateUsingPUT_1
2019-04-03 19:26:48 -Generating unique operation named: updateUsingPATCH_1
2019-04-03 19:26:48 -Generating unique operation named: updateUsingDELETE_1
2019-04-03 19:26:48 -Generating unique operation named: updateUsingOPTIONS_1
2019-04-03 19:26:48 -Generating unique operation named: updateUsingTRACE_1
2019-04-03 19:26:49 -Generating unique operation named: addUsingGET_2
2019-04-03 19:26:49 -Generating unique operation named: editUsingGET_2
2019-04-03 19:26:49 -Generating unique operation named: listUsingGET_2
2019-04-03 19:26:49 -Generating unique operation named: removeUsingPOST_4
2019-04-03 19:26:49 -Generating unique operation named: removeUsingPOST_5
2019-04-03 19:26:49 -Generating unique operation named: saveUsingPOST_2
2019-04-03 19:26:49 -Generating unique operation named: updateUsingPOST_2
2019-04-03 19:26:49 -Generating unique operation named: exprotExcelUsingGET_1
2019-04-03 19:26:49 -Generating unique operation named: addUsingGET_3
2019-04-03 19:26:49 -Generating unique operation named: editUsingGET_3
2019-04-03 19:26:49 -Generating unique operation named: exprotElecLogUsingGET_4
2019-04-03 19:26:49 -Generating unique operation named: listUsingGET_3
2019-04-03 19:26:49 -Generating unique operation named: removeUsingPOST_6
2019-04-03 19:26:49 -Generating unique operation named: removeUsingPOST_7
2019-04-03 19:26:49 -Generating unique operation named: saveUsingPOST_3
2019-04-03 19:26:49 -Generating unique operation named: updateUsingGET_2
2019-04-03 19:26:49 -Generating unique operation named: updateUsingHEAD_2
2019-04-03 19:26:49 -Generating unique operation named: updateUsingPOST_3
2019-04-03 19:26:49 -Generating unique operation named: updateUsingPUT_2
2019-04-03 19:26:49 -Generating unique operation named: updateUsingPATCH_2
2019-04-03 19:26:49 -Generating unique operation named: updateUsingDELETE_2
2019-04-03 19:26:49 -Generating unique operation named: updateUsingOPTIONS_2
2019-04-03 19:26:49 -Generating unique operation named: updateUsingTRACE_2
2019-04-03 19:26:49 -Generating unique operation named: addUsingGET_4
2019-04-03 19:26:49 -Generating unique operation named: editUsingGET_4
2019-04-03 19:26:49 -Generating unique operation named: listUsingGET_4
2019-04-03 19:26:49 -Generating unique operation named: removeUsingPOST_8
2019-04-03 19:26:49 -Generating unique operation named: removeUsingPOST_9
2019-04-03 19:26:49 -Generating unique operation named: saveUsingPOST_4
2019-04-03 19:26:49 -Generating unique operation named: updateUsingGET_3
2019-04-03 19:26:49 -Generating unique operation named: updateUsingHEAD_3
2019-04-03 19:26:49 -Generating unique operation named: updateUsingPOST_4
2019-04-03 19:26:49 -Generating unique operation named: updateUsingPUT_3
2019-04-03 19:26:49 -Generating unique operation named: updateUsingPATCH_3
2019-04-03 19:26:49 -Generating unique operation named: updateUsingDELETE_3
2019-04-03 19:26:49 -Generating unique operation named: updateUsingOPTIONS_3
2019-04-03 19:26:49 -Generating unique operation named: updateUsingTRACE_3
2019-04-03 19:26:49 -Generating unique operation named: ElecUsingGET_1
2019-04-03 19:26:49 -Generating unique operation named: addUsingGET_5
2019-04-03 19:26:49 -Generating unique operation named: editUsingGET_5
2019-04-03 19:26:49 -Generating unique operation named: listUsingGET_5
2019-04-03 19:26:49 -Generating unique operation named: removeUsingPOST_10
2019-04-03 19:26:49 -Generating unique operation named: removeUsingPOST_11
2019-04-03 19:26:49 -Generating unique operation named: saveUsingPOST_5
2019-04-03 19:26:49 -Generating unique operation named: updateUsingGET_4
2019-04-03 19:26:49 -Generating unique operation named: updateUsingHEAD_4
2019-04-03 19:26:49 -Generating unique operation named: updateUsingPOST_5
2019-04-03 19:26:49 -Generating unique operation named: updateUsingPUT_4
2019-04-03 19:26:49 -Generating unique operation named: updateUsingPATCH_4
2019-04-03 19:26:49 -Generating unique operation named: updateUsingDELETE_4
2019-04-03 19:26:49 -Generating unique operation named: updateUsingOPTIONS_4
2019-04-03 19:26:49 -Generating unique operation named: updateUsingTRACE_4
2019-04-03 19:26:49 -Generating unique operation named: editUsingGET_6
2019-04-03 19:26:49 -Generating unique operation named: listUsingGET_6
2019-04-03 19:26:49 -Generating unique operation named: updateUsingPOST_6
2019-04-03 19:26:49 -Generating unique operation named: addUsingGET_6
2019-04-03 19:26:49 -Generating unique operation named: editUsingGET_7
2019-04-03 19:26:49 -Generating unique operation named: exprotExcelUsingGET_2
2019-04-03 19:26:49 -Generating unique operation named: listUsingGET_7
2019-04-03 19:26:49 -Generating unique operation named: removeUsingPOST_12
2019-04-03 19:26:49 -Generating unique operation named: removeUsingPOST_13
2019-04-03 19:26:49 -Generating unique operation named: saveUsingPOST_6
2019-04-03 19:26:49 -Generating unique operation named: updateUsingGET_5
2019-04-03 19:26:49 -Generating unique operation named: updateUsingHEAD_5
2019-04-03 19:26:49 -Generating unique operation named: updateUsingPOST_7
2019-04-03 19:26:49 -Generating unique operation named: updateUsingPUT_5
2019-04-03 19:26:49 -Generating unique operation named: updateUsingPATCH_5
2019-04-03 19:26:49 -Generating unique operation named: updateUsingDELETE_5
2019-04-03 19:26:49 -Generating unique operation named: updateUsingOPTIONS_5
2019-04-03 19:26:49 -Generating unique operation named: updateUsingTRACE_5
2019-04-03 19:26:49 -Generating unique operation named: exprotExcelUsingGET_3
2019-04-03 19:26:49 -Generating unique operation named: addUsingGET_7
2019-04-03 19:26:49 -Generating unique operation named: editUsingGET_8
2019-04-03 19:26:49 -Generating unique operation named: listUsingGET_8
2019-04-03 19:26:49 -Generating unique operation named: removeUsingPOST_14
2019-04-03 19:26:49 -Generating unique operation named: removeUsingPOST_15
2019-04-03 19:26:49 -Generating unique operation named: saveUsingPOST_7
2019-04-03 19:26:49 -Generating unique operation named: updateUsingGET_6
2019-04-03 19:26:49 -Generating unique operation named: updateUsingHEAD_6
2019-04-03 19:26:49 -Generating unique operation named: updateUsingPOST_8
2019-04-03 19:26:49 -Generating unique operation named: updateUsingPUT_6
2019-04-03 19:26:49 -Generating unique operation named: updateUsingPATCH_6
2019-04-03 19:26:49 -Generating unique operation named: updateUsingDELETE_6
2019-04-03 19:26:49 -Generating unique operation named: updateUsingOPTIONS_6
2019-04-03 19:26:49 -Generating unique operation named: updateUsingTRACE_6
2019-04-03 19:26:49 -Generating unique operation named: addUsingGET_8
2019-04-03 19:26:49 -Generating unique operation named: editUsingGET_9
2019-04-03 19:26:49 -Generating unique operation named: listUsingGET_9
2019-04-03 19:26:49 -Generating unique operation named: removeUsingPOST_16
2019-04-03 19:26:49 -Generating unique operation named: removeUsingPOST_17
2019-04-03 19:26:49 -Generating unique operation named: saveUsingPOST_8
2019-04-03 19:26:49 -Generating unique operation named: updateUsingGET_7
2019-04-03 19:26:49 -Generating unique operation named: updateUsingHEAD_7
2019-04-03 19:26:49 -Generating unique operation named: updateUsingPOST_9
2019-04-03 19:26:49 -Generating unique operation named: updateUsingPUT_7
2019-04-03 19:26:49 -Generating unique operation named: updateUsingPATCH_7
2019-04-03 19:26:49 -Generating unique operation named: updateUsingDELETE_7
2019-04-03 19:26:49 -Generating unique operation named: updateUsingOPTIONS_7
2019-04-03 19:26:49 -Generating unique operation named: updateUsingTRACE_7
2019-04-03 19:26:49 -Generating unique operation named: addUsingGET_9
2019-04-03 19:26:49 -Generating unique operation named: editUsingGET_10
2019-04-03 19:26:49 -Generating unique operation named: infoUsingGET_1
2019-04-03 19:26:49 -Generating unique operation named: infoUsingHEAD_1
2019-04-03 19:26:49 -Generating unique operation named: infoUsingPOST_1
2019-04-03 19:26:49 -Generating unique operation named: infoUsingPUT_1
2019-04-03 19:26:49 -Generating unique operation named: infoUsingPATCH_1
2019-04-03 19:26:49 -Generating unique operation named: infoUsingDELETE_1
2019-04-03 19:26:49 -Generating unique operation named: infoUsingOPTIONS_1
2019-04-03 19:26:49 -Generating unique operation named: infoUsingTRACE_1
2019-04-03 19:26:49 -Generating unique operation named: listUsingGET_10
2019-04-03 19:26:49 -Generating unique operation named: removeUsingPOST_18
2019-04-03 19:26:49 -Generating unique operation named: removeUsingPOST_19
2019-04-03 19:26:49 -Generating unique operation named: saveUsingPOST_9
2019-04-03 19:26:49 -Generating unique operation named: updateUsingPOST_10
2019-04-03 19:26:49 -Generating unique operation named: listUsingGET_11
2019-04-03 19:26:49 -Generating unique operation named: removeUsingPOST_20
2019-04-03 19:26:49 -Generating unique operation named: welcomeUsingGET_1
2019-04-03 19:26:49 -Generating unique operation named: addUsingGET_10
2019-04-03 19:26:49 -Generating unique operation named: editUsingGET_11
2019-04-03 19:26:49 -Generating unique operation named: listUsingGET_12
2019-04-03 19:26:49 -Generating unique operation named: removeUsingPOST_21
2019-04-03 19:26:49 -Generating unique operation named: saveUsingPOST_10
2019-04-03 19:26:49 -Generating unique operation named: treeUsingGET_1
2019-04-03 19:26:49 -Generating unique operation named: treeUsingGET_2
2019-04-03 19:26:49 -Generating unique operation named: updateUsingPOST_11
2019-04-03 19:26:49 -Generating unique operation named: addUsingGET_11
2019-04-03 19:26:49 -Generating unique operation named: editUsingGET_12
2019-04-03 19:26:49 -Generating unique operation named: listUsingGET_13
2019-04-03 19:26:49 -Generating unique operation named: removeUsingPOST_22
2019-04-03 19:26:49 -Generating unique operation named: removeUsingPOST_23
2019-04-03 19:26:49 -Generating unique operation named: saveUsingPOST_11
2019-04-03 19:26:49 -Generating unique operation named: updateUsingGET_8
2019-04-03 19:26:49 -Generating unique operation named: updateUsingHEAD_8
2019-04-03 19:26:49 -Generating unique operation named: updateUsingPOST_12
2019-04-03 19:26:49 -Generating unique operation named: updateUsingPUT_8
2019-04-03 19:26:49 -Generating unique operation named: updateUsingPATCH_8
2019-04-03 19:26:49 -Generating unique operation named: updateUsingDELETE_8
2019-04-03 19:26:49 -Generating unique operation named: updateUsingOPTIONS_8
2019-04-03 19:26:49 -Generating unique operation named: updateUsingTRACE_8
2019-04-03 19:26:49 -Generating unique operation named: addUsingGET_12
2019-04-03 19:26:49 -Generating unique operation named: editUsingGET_13
2019-04-03 19:26:49 -Generating unique operation named: listUsingGET_14
2019-04-03 19:26:49 -Generating unique operation named: removeUsingPOST_24
2019-04-03 19:26:49 -Generating unique operation named: removeUsingPOST_25
2019-04-03 19:26:49 -Generating unique operation named: saveUsingPOST_12
2019-04-03 19:26:50 -Generating unique operation named: updateUsingGET_9
2019-04-03 19:26:50 -Generating unique operation named: updateUsingHEAD_9
2019-04-03 19:26:50 -Generating unique operation named: updateUsingPOST_13
2019-04-03 19:26:50 -Generating unique operation named: updateUsingPUT_9
2019-04-03 19:26:50 -Generating unique operation named: updateUsingPATCH_9
2019-04-03 19:26:50 -Generating unique operation named: updateUsingDELETE_9
2019-04-03 19:26:50 -Generating unique operation named: updateUsingOPTIONS_9
2019-04-03 19:26:50 -Generating unique operation named: updateUsingTRACE_9
2019-04-03 19:26:50 -Generating unique operation named: addUsingGET_13
2019-04-03 19:26:50 -Generating unique operation named: batchRemoveUsingPOST_1
2019-04-03 19:26:50 -Generating unique operation named: editUsingGET_14
2019-04-03 19:26:50 -Generating unique operation named: listUsingGET_15
2019-04-03 19:26:50 -Generating unique operation named: saveUsingPOST_13
2019-04-03 19:26:50 -Generating unique operation named: saveUsingPOST_14
2019-04-03 19:26:50 -Generating unique operation named: updateUsingPOST_14
2019-04-03 19:26:50 -Generating unique operation named: listUsingGET_16
2019-04-03 19:26:50 -Generating unique operation named: listUsingHEAD_1
2019-04-03 19:26:50 -Generating unique operation named: listUsingPOST_1
2019-04-03 19:26:50 -Generating unique operation named: listUsingPUT_1
2019-04-03 19:26:50 -Generating unique operation named: listUsingPATCH_1
2019-04-03 19:26:50 -Generating unique operation named: listUsingDELETE_1
2019-04-03 19:26:50 -Generating unique operation named: listUsingOPTIONS_1
2019-04-03 19:26:50 -Generating unique operation named: listUsingTRACE_1
2019-04-03 19:26:50 -Generating unique operation named: addUsingGET_14
2019-04-03 19:26:50 -Generating unique operation named: batchRemoveUsingPOST_2
2019-04-03 19:26:50 -Generating unique operation named: editUsingGET_15
2019-04-03 19:26:50 -Generating unique operation named: listUsingGET_17
2019-04-03 19:26:50 -Generating unique operation named: removeUsingPOST_26
2019-04-03 19:26:50 -Generating unique operation named: saveUsingPOST_15
2019-04-03 19:26:50 -Generating unique operation named: treeUsingGET_3
2019-04-03 19:26:50 -Generating unique operation named: treeViewUsingGET_1
2019-04-03 19:26:50 -Generating unique operation named: updateUsingPOST_15
2019-04-03 19:26:50 -Generating unique operation named: addUsingGET_15
2019-04-03 19:26:50 -Generating unique operation named: editUsingGET_16
2019-04-03 19:26:50 -Generating unique operation named: exprotExcelUsingGET_4
2019-04-03 19:26:50 -Generating unique operation named: listUsingGET_18
2019-04-03 19:26:50 -Generating unique operation named: removeUsingPOST_27
2019-04-03 19:26:50 -Generating unique operation named: removeUsingPOST_28
2019-04-03 19:26:50 -Generating unique operation named: saveUsingPOST_16
2019-04-03 19:26:50 -Generating unique operation named: updateUsingGET_10
2019-04-03 19:26:50 -Generating unique operation named: updateUsingHEAD_10
2019-04-03 19:26:50 -Generating unique operation named: updateUsingPOST_16
2019-04-03 19:26:50 -Generating unique operation named: updateUsingPUT_10
2019-04-03 19:26:50 -Generating unique operation named: updateUsingPATCH_10
2019-04-03 19:26:50 -Generating unique operation named: updateUsingDELETE_10
2019-04-03 19:26:50 -Generating unique operation named: updateUsingOPTIONS_10
2019-04-03 19:26:50 -Generating unique operation named: updateUsingTRACE_10
2019-04-03 19:26:50 -Generating unique operation named: exprotExcelUsingGET_5
2019-04-03 19:26:50 -Generating unique operation named: addUsingGET_16
2019-04-03 19:26:50 -Generating unique operation named: editUsingGET_17
2019-04-03 19:26:50 -Generating unique operation named: listUsingGET_19
2019-04-03 19:26:50 -Generating unique operation named: removeUsingPOST_29
2019-04-03 19:26:50 -Generating unique operation named: removeUsingPOST_30
2019-04-03 19:26:50 -Generating unique operation named: saveUsingPOST_17
2019-04-03 19:26:50 -Generating unique operation named: updateUsingGET_11
2019-04-03 19:26:50 -Generating unique operation named: updateUsingHEAD_11
2019-04-03 19:26:50 -Generating unique operation named: updateUsingPOST_17
2019-04-03 19:26:50 -Generating unique operation named: updateUsingPUT_11
2019-04-03 19:26:50 -Generating unique operation named: updateUsingPATCH_11
2019-04-03 19:26:50 -Generating unique operation named: updateUsingDELETE_11
2019-04-03 19:26:50 -Generating unique operation named: updateUsingOPTIONS_11
2019-04-03 19:26:50 -Generating unique operation named: updateUsingTRACE_11
2019-04-03 19:26:50 -Generating unique operation named: addUsingGET_17
2019-04-03 19:26:50 -Generating unique operation named: editUsingGET_18
2019-04-03 19:26:50 -Generating unique operation named: listUsingGET_20
2019-04-03 19:26:50 -Generating unique operation named: removeUsingPOST_31
2019-04-03 19:26:50 -Generating unique operation named: removeUsingPOST_32
2019-04-03 19:26:50 -Generating unique operation named: saveUsingPOST_18
2019-04-03 19:26:50 -Generating unique operation named: updateUsingGET_12
2019-04-03 19:26:50 -Generating unique operation named: updateUsingHEAD_12
2019-04-03 19:26:50 -Generating unique operation named: updateUsingPOST_18
2019-04-03 19:26:50 -Generating unique operation named: updateUsingPUT_12
2019-04-03 19:26:50 -Generating unique operation named: updateUsingPATCH_12
2019-04-03 19:26:50 -Generating unique operation named: updateUsingDELETE_12
2019-04-03 19:26:50 -Generating unique operation named: updateUsingOPTIONS_12
2019-04-03 19:26:50 -Generating unique operation named: updateUsingTRACE_12
2019-04-03 19:26:50 -Starting Quartz Scheduler now
2019-04-03 19:26:50 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED started.
2019-04-03 19:26:50 -Starting...
2019-04-03 19:26:50 -BrokerAvailabilityEvent[available=true, SimpleBrokerMessageHandler [DefaultSubscriptionRegistry[cache[0 destination(s)], registry[0 sessions]]]]
2019-04-03 19:26:50 -Started.
2019-04-03 19:26:50 -Starting ProtocolHandler ["http-nio-8081"]
2019-04-03 19:26:50 -Using a shared selector for servlet write/read
2019-04-03 19:26:50 -Tomcat started on port(s): 8081 (http) with context path ''
2019-04-03 19:26:50 -Started BootdoApplication in 24.161 seconds (JVM running for 25.044)
2019-04-03 19:26:50 -==>  Preparing: select `id`,`cron_expression`,`method_name`,`is_concurrent`,`description`,`update_by`,`bean_class`,`create_date`,`job_status`,`job_group`,`update_date`,`create_by`,`spring_bean`,`job_name` from sys_task order by id desc 
2019-04-03 19:26:51 -==> Parameters: 
2019-04-03 19:26:51 -<==      Total: 1
2019-04-03 19:27:36 -Initializing Spring FrameworkServlet 'dispatcherServlet'
2019-04-03 19:27:36 -FrameworkServlet 'dispatcherServlet': initialization started
2019-04-03 19:27:36 -FrameworkServlet 'dispatcherServlet': initialization completed in 52 ms
2019-04-03 19:27:36 -Enabling session validation scheduler...
2019-04-03 19:27:36 -请求地址 : http://localhost:8081/login;JSESSIONID=a25e55d4-9f58-4b92-8f42-590eb94c8bf9
2019-04-03 19:27:36 -HTTP METHOD : GET
2019-04-03 19:27:36 -CLASS_METHOD : com.bootdo.system.controller.LoginController.login
2019-04-03 19:27:36 -参数 : [{}]
2019-04-03 19:27:36 -耗时 : 5
2019-04-03 19:27:36 -返回值 : login
2019-04-03 19:27:42 -请求地址 : http://localhost:8081/getVerify
2019-04-03 19:27:42 -HTTP METHOD : GET
2019-04-03 19:27:42 -CLASS_METHOD : com.bootdo.system.controller.LoginController.getVerify
2019-04-03 19:27:42 -参数 : [org.apache.shiro.web.servlet.ShiroHttpServletRequest@2a0129fa, org.apache.shiro.web.servlet.ShiroHttpServletResponse@2e3ea862]
2019-04-03 19:27:44 -WebSocketSession[0 current WS(0)-HttpStream(0)-HttpPoll(0), 0 total, 0 closed abnormally (0 connect failure, 0 send limit, 0 transport error)], stompSubProtocol[processed CONNECT(0)-CONNECTED(0)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], outboundChannelpool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], sockJsScheduler[pool size = 1, active threads = 1, queued tasks = 0, completed tasks = 0]
2019-04-03 19:27:44 -1456
2019-04-03 19:27:44 -耗时 : 2624
2019-04-03 19:27:44 -返回值 : null
2019-04-03 19:27:55 -请求地址 : http://localhost:8081/login
2019-04-03 19:27:55 -HTTP METHOD : POST
2019-04-03 19:27:55 -CLASS_METHOD : com.bootdo.system.controller.LoginController.ajaxLogin
2019-04-03 19:27:55 -参数 : [admin, 111111, 1456, org.apache.shiro.web.servlet.ShiroHttpServletRequest@1f8e2e39]
2019-04-03 19:27:55 -==>  Preparing: select `user_id`,`username`,`name`,`password`,`dept_id`,`email`,`mobile`,`status`,`user_id_create`,`gmt_create`,`gmt_modified`,`sex`,`birth`,`pic_id`,`live_address`,`hobby`,`province`,`city`,`district` from sys_user WHERE username = ? order by user_id desc 
2019-04-03 19:27:55 -==> Parameters: admin(String)
2019-04-03 19:27:55 -<==      Total: 1
2019-04-03 19:27:55 -耗时 : 317
2019-04-03 19:27:55 -返回值 : {msg=操作成功, code=0}
2019-04-03 19:27:55 -More than one TaskExecutor bean found within the context, and none is named 'taskExecutor'. Mark one of them as primary or name it 'taskExecutor' (possibly as an alias) in order to use it for async processing: [clientInboundChannelExecutor, clientOutboundChannelExecutor, brokerChannelExecutor, messageBrokerTaskScheduler]
2019-04-03 19:27:55 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 19:27:55 -==> Parameters: 1(Long), admin(String), 登录(String), 317(Integer), com.bootdo.system.controller.LoginController.ajaxLogin()(String), null, 127.0.0.1(String), 2019-04-03 19:27:55.438(Timestamp)
2019-04-03 19:27:55 -请求地址 : http://localhost:8081/index
2019-04-03 19:27:55 -HTTP METHOD : GET
2019-04-03 19:27:55 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2019-04-03 19:27:55 -参数 : [{}]
2019-04-03 19:27:55 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2019-04-03 19:27:56 -==> Parameters: 1(Long)
2019-04-03 19:27:56 -<==    Updates: 1
2019-04-03 19:27:57 -<==      Total: 46
2019-04-03 19:27:57 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2019-04-03 19:27:57 -==> Parameters: 138(Long)
2019-04-03 19:27:57 -<==      Total: 1
2019-04-03 19:27:57 -耗时 : 1277
2019-04-03 19:27:57 -返回值 : index_v1
2019-04-03 19:27:57 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 19:27:57 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 1277(Integer), com.bootdo.system.controller.LoginController.index()(String), {"menus":[{"attributes":{"icon":"fa fa-money","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-money","url":"/moneyList/moneyList"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"102","parentId":"106","text":"现金缴费"},{"attributes":{"icon":"fa fa-book","url":"/moneyLog/elecLog"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"107","parentId":"106","text":"缴费记录"}],"hasChildren":true,"hasParent":false,"id":"106","parentId":"0","text":"收费管理"},{"attributes":{"icon":"fa fa-lightbulb-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/elec/elec"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"121","parentId":"103","text":"电费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"elec/elecInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"122","parentId":"103","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"elec/elecUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"123","parentId":"103","text":"电表上传"},{"attributes":{"icon":"fa fa-cc","url":"/elec/elecPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"124","parentId":"103","text":"电价管理"}],"hasChildren":true,"hasParent":false,"id":"103","parentId":"0","text":"电费管理"},{"attributes":{"icon":"fa fa-tint","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/water/water"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"117","parentId":"105","text":"水费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"water/waterInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"118","parentId":"105","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"water/waterUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"119","parentId":"105","text":"水费生成"},{"attributes":{"icon":"fa fa-cc","url":"/water/waterPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"120","parentId":"105","text":"水价管理"}],"hasChildren":true,"hasParent":false,"id":"105","parentId":"0","text":"水费管理"},{"attributes":{"icon":"fa fa-fire","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/heat/heat"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"113","parentId":"104","text":"暖费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"heat/heatInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"114","parentId":"104","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"heat/heatUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"115","parentId":"104","text":"暖费生成"},{"attributes":{"icon":"","url":"/heat/heatPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"116","parentId":"104","text":"暖价管理"}],"hasChildren":true,"hasParent":false,"id":"104","parentId":"0","text":"暖费管理"},{"attributes":{"icon":"fa fa-vcard-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-bomb","url":"/print/print"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"149","parentId":"108","text":"票据记录"}],"hasChildren":true,"hasParent":false,"id":"108","parentId":"0","text":"票据管理"},{"attributes":{"icon":"fa fa-bar-chart","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-area-chart","url":"/chart/graph_echarts.html"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","text":"百度chart"},{"attributes":{"icon":"fa fa-sun-o","url":"charts/countDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"109","parentId":"97","text":"日统计报表"},{"attributes":{"icon":"fa fa-registered","url":"charts/countMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"110","parentId":"97","text":"月统计报表"},{"attributes":{"icon":"fa fa-money","url":"charts/countOwe"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"155","parentId":"97","text":"欠费报表图"},{"attributes":{"icon":"fa fa-support","url":"charts/countYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"111","parentId":"97","text":"年统计报表"},{"attributes":{"icon":"fa fa-tachometer","url":"charts/countRun"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"112","parentId":"97","text":"走势图报表"}],"hasChildren":true,"hasParent":false,"id":"97","parentId":"0","text":"统计管理"},{"attributes":{"icon":"fa fa-bars","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-book","url":"/common/dict"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"78","parentId":"1","text":"数据字典"},{"attributes":{"icon":"fa fa-folder-open","url":"/common/sysFile"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"71","parentId":"1","text":"文件管理"}],"h(String), 127.0.0.1(String), 2019-04-03 19:27:57.241(Timestamp)
2019-04-03 19:27:57 -<==    Updates: 1
2019-04-03 19:27:57 -请求地址 : http://localhost:8081/main
2019-04-03 19:27:57 -HTTP METHOD : GET
2019-04-03 19:27:57 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 19:27:57 -参数 : []
2019-04-03 19:27:57 -耗时 : 1
2019-04-03 19:27:57 -返回值 : main
2019-04-03 19:28:00 -请求地址 : http://localhost:8081/oa/notify/message
2019-04-03 19:28:00 -HTTP METHOD : GET
2019-04-03 19:28:00 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2019-04-03 19:28:00 -参数 : []
2019-04-03 19:28:00 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2019-04-03 19:28:00 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2019-04-03 19:28:00 -请求地址 : http://localhost:8081/main
2019-04-03 19:28:00 -HTTP METHOD : GET
2019-04-03 19:28:00 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 19:28:00 -参数 : []
2019-04-03 19:28:00 -耗时 : 0
2019-04-03 19:28:00 -返回值 : main
2019-04-03 19:28:00 -<==      Total: 0
2019-04-03 19:28:00 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2019-04-03 19:28:00 -==> Parameters: 1(Long), 0(String)
2019-04-03 19:28:00 -<==      Total: 1
2019-04-03 19:28:00 -耗时 : 655
2019-04-03 19:28:00 -返回值 : com.bootdo.common.utils.PageUtils@49526abb
2019-04-03 19:57:44 -WebSocketSession[1 current WS(1)-HttpStream(0)-HttpPoll(0), 1 total, 0 closed abnormally (0 connect failure, 0 send limit, 0 transport error)], stompSubProtocol[processed CONNECT(1)-CONNECTED(1)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 9], outboundChannelpool size = 0, active threads = 0, queued tasks = 0, completed tasks = 1], sockJsScheduler[pool size = 4, active threads = 1, queued tasks = 2, completed tasks = 429]
2019-04-03 20:14:29 -请求地址 : http://localhost:8081/login;JSESSIONID=e8ce4669-49af-493b-8381-1377636b0785
2019-04-03 20:14:29 -HTTP METHOD : GET
2019-04-03 20:14:29 -CLASS_METHOD : com.bootdo.system.controller.LoginController.login
2019-04-03 20:14:29 -参数 : [{}]
2019-04-03 20:14:29 -耗时 : 0
2019-04-03 20:14:29 -返回值 : login
2019-04-03 20:14:29 -请求地址 : http://localhost:8081/login;JSESSIONID=e8ce4669-49af-493b-8381-1377636b0785
2019-04-03 20:14:29 -HTTP METHOD : GET
2019-04-03 20:14:29 -CLASS_METHOD : com.bootdo.system.controller.LoginController.login
2019-04-03 20:14:29 -参数 : [{}]
2019-04-03 20:14:29 -耗时 : 0
2019-04-03 20:14:29 -返回值 : login
2019-04-03 20:14:29 -请求地址 : http://localhost:8081/getVerify
2019-04-03 20:14:29 -HTTP METHOD : GET
2019-04-03 20:14:29 -CLASS_METHOD : com.bootdo.system.controller.LoginController.getVerify
2019-04-03 20:14:29 -参数 : [org.apache.shiro.web.servlet.ShiroHttpServletRequest@5c1c7e6b, org.apache.shiro.web.servlet.ShiroHttpServletResponse@52b878eb]
2019-04-03 20:14:29 -7000
2019-04-03 20:14:29 -耗时 : 19
2019-04-03 20:14:29 -返回值 : null
2019-04-03 20:14:29 -请求地址 : http://localhost:8081/getVerify
2019-04-03 20:14:29 -HTTP METHOD : GET
2019-04-03 20:14:29 -CLASS_METHOD : com.bootdo.system.controller.LoginController.getVerify
2019-04-03 20:14:29 -参数 : [org.apache.shiro.web.servlet.ShiroHttpServletRequest@f379994, org.apache.shiro.web.servlet.ShiroHttpServletResponse@4a351616]
2019-04-03 20:14:29 -5392
2019-04-03 20:14:29 -耗时 : 15
2019-04-03 20:14:29 -返回值 : null
2019-04-03 20:14:38 -请求地址 : http://localhost:8081/login
2019-04-03 20:14:38 -HTTP METHOD : POST
2019-04-03 20:14:38 -CLASS_METHOD : com.bootdo.system.controller.LoginController.ajaxLogin
2019-04-03 20:14:38 -参数 : [admin, 111111, 5392, org.apache.shiro.web.servlet.ShiroHttpServletRequest@12e36260]
2019-04-03 20:14:38 -==>  Preparing: select `user_id`,`username`,`name`,`password`,`dept_id`,`email`,`mobile`,`status`,`user_id_create`,`gmt_create`,`gmt_modified`,`sex`,`birth`,`pic_id`,`live_address`,`hobby`,`province`,`city`,`district` from sys_user WHERE username = ? order by user_id desc 
2019-04-03 20:14:38 -==> Parameters: admin(String)
2019-04-03 20:14:38 -<==      Total: 1
2019-04-03 20:14:38 -耗时 : 83
2019-04-03 20:14:38 -返回值 : {msg=操作成功, code=0}
2019-04-03 20:14:38 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 20:14:38 -==> Parameters: 1(Long), admin(String), 登录(String), 83(Integer), com.bootdo.system.controller.LoginController.ajaxLogin()(String), null, 127.0.0.1(String), 2019-04-03 20:14:38.224(Timestamp)
2019-04-03 20:14:38 -请求地址 : http://localhost:8081/index
2019-04-03 20:14:38 -HTTP METHOD : GET
2019-04-03 20:14:38 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2019-04-03 20:14:38 -参数 : [{}]
2019-04-03 20:14:38 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2019-04-03 20:14:38 -==> Parameters: 1(Long)
2019-04-03 20:14:38 -<==    Updates: 1
2019-04-03 20:14:38 -<==      Total: 46
2019-04-03 20:14:38 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2019-04-03 20:14:38 -==> Parameters: 138(Long)
2019-04-03 20:14:38 -<==      Total: 1
2019-04-03 20:14:38 -耗时 : 129
2019-04-03 20:14:38 -返回值 : index_v1
2019-04-03 20:14:38 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 20:14:38 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 129(Integer), com.bootdo.system.controller.LoginController.index()(String), {"menus":[{"attributes":{"icon":"fa fa-money","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-money","url":"/moneyList/moneyList"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"102","parentId":"106","text":"现金缴费"},{"attributes":{"icon":"fa fa-book","url":"/moneyLog/elecLog"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"107","parentId":"106","text":"缴费记录"}],"hasChildren":true,"hasParent":false,"id":"106","parentId":"0","text":"收费管理"},{"attributes":{"icon":"fa fa-lightbulb-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/elec/elec"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"121","parentId":"103","text":"电费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"elec/elecInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"122","parentId":"103","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"elec/elecUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"123","parentId":"103","text":"电表上传"},{"attributes":{"icon":"fa fa-cc","url":"/elec/elecPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"124","parentId":"103","text":"电价管理"}],"hasChildren":true,"hasParent":false,"id":"103","parentId":"0","text":"电费管理"},{"attributes":{"icon":"fa fa-tint","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/water/water"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"117","parentId":"105","text":"水费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"water/waterInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"118","parentId":"105","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"water/waterUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"119","parentId":"105","text":"水费生成"},{"attributes":{"icon":"fa fa-cc","url":"/water/waterPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"120","parentId":"105","text":"水价管理"}],"hasChildren":true,"hasParent":false,"id":"105","parentId":"0","text":"水费管理"},{"attributes":{"icon":"fa fa-fire","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/heat/heat"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"113","parentId":"104","text":"暖费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"heat/heatInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"114","parentId":"104","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"heat/heatUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"115","parentId":"104","text":"暖费生成"},{"attributes":{"icon":"","url":"/heat/heatPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"116","parentId":"104","text":"暖价管理"}],"hasChildren":true,"hasParent":false,"id":"104","parentId":"0","text":"暖费管理"},{"attributes":{"icon":"fa fa-vcard-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-bomb","url":"/print/print"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"149","parentId":"108","text":"票据记录"}],"hasChildren":true,"hasParent":false,"id":"108","parentId":"0","text":"票据管理"},{"attributes":{"icon":"fa fa-bar-chart","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-area-chart","url":"/chart/graph_echarts.html"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","text":"百度chart"},{"attributes":{"icon":"fa fa-sun-o","url":"charts/countDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"109","parentId":"97","text":"日统计报表"},{"attributes":{"icon":"fa fa-registered","url":"charts/countMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"110","parentId":"97","text":"月统计报表"},{"attributes":{"icon":"fa fa-money","url":"charts/countOwe"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"155","parentId":"97","text":"欠费报表图"},{"attributes":{"icon":"fa fa-support","url":"charts/countYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"111","parentId":"97","text":"年统计报表"},{"attributes":{"icon":"fa fa-tachometer","url":"charts/countRun"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"112","parentId":"97","text":"走势图报表"}],"hasChildren":true,"hasParent":false,"id":"97","parentId":"0","text":"统计管理"},{"attributes":{"icon":"fa fa-bars","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-book","url":"/common/dict"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"78","parentId":"1","text":"数据字典"},{"attributes":{"icon":"fa fa-folder-open","url":"/common/sysFile"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"71","parentId":"1","text":"文件管理"}],"h(String), 127.0.0.1(String), 2019-04-03 20:14:38.386(Timestamp)
2019-04-03 20:14:38 -请求地址 : http://localhost:8081/main
2019-04-03 20:14:38 -HTTP METHOD : GET
2019-04-03 20:14:38 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 20:14:38 -参数 : []
2019-04-03 20:14:38 -耗时 : 0
2019-04-03 20:14:38 -返回值 : main
2019-04-03 20:14:38 -<==    Updates: 1
2019-04-03 20:14:39 -请求地址 : http://localhost:8081/oa/notify/message
2019-04-03 20:14:39 -HTTP METHOD : GET
2019-04-03 20:14:39 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2019-04-03 20:14:39 -参数 : []
2019-04-03 20:14:39 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2019-04-03 20:14:39 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2019-04-03 20:14:39 -<==      Total: 0
2019-04-03 20:14:39 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2019-04-03 20:14:39 -==> Parameters: 1(Long), 0(String)
2019-04-03 20:14:39 -<==      Total: 1
2019-04-03 20:14:39 -耗时 : 34
2019-04-03 20:14:39 -返回值 : com.bootdo.common.utils.PageUtils@328f12dc
2019-04-03 20:14:39 -请求地址 : http://localhost:8081/main
2019-04-03 20:14:39 -HTTP METHOD : GET
2019-04-03 20:14:39 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 20:14:39 -参数 : []
2019-04-03 20:14:39 -耗时 : 1
2019-04-03 20:14:39 -返回值 : main
2019-04-03 20:14:53 -==>  Preparing: select distinct m.perms from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id = ur.role_id where ur.user_id = ? 
2019-04-03 20:14:53 -==> Parameters: 1(Long)
2019-04-03 20:14:53 -<==      Total: 90
2019-04-03 20:14:53 -请求地址 : http://localhost:8081/elec/elec
2019-04-03 20:14:53 -HTTP METHOD : GET
2019-04-03 20:14:53 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.Elec
2019-04-03 20:14:53 -参数 : []
2019-04-03 20:14:53 -耗时 : 1
2019-04-03 20:14:53 -返回值 : elec/elec/elec
2019-04-03 20:14:54 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-03 20:14:54 -HTTP METHOD : GET
2019-04-03 20:14:54 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 20:14:54 -参数 : [userType]
2019-04-03 20:14:54 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 20:14:54 -==> Parameters: userType(String)
2019-04-03 20:14:54 -<==      Total: 2
2019-04-03 20:14:54 -耗时 : 46
2019-04-03 20:14:54 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 20:14:54 -请求地址 : http://localhost:8081/elec/elec/list
2019-04-03 20:14:54 -HTTP METHOD : GET
2019-04-03 20:14:54 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.list
2019-04-03 20:14:54 -参数 : [{limit=10, offset=0, userType=, userOrg=, userId=, createTime=, queryType=1}, com.bootdo.elec.domain.ElecDO@2509e2cf]
2019-04-03 20:14:54 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec order by id asc limit ?, ? 
2019-04-03 20:14:54 -==> Parameters: 0(Integer), 10(Integer)
2019-04-03 20:14:55 -<==      Total: 10
2019-04-03 20:14:55 -==>  Preparing: select count(*) from elec 
2019-04-03 20:14:55 -==> Parameters: 
2019-04-03 20:14:55 -<==      Total: 1
2019-04-03 20:14:55 -耗时 : 294
2019-04-03 20:14:55 -返回值 : com.bootdo.common.utils.PageUtils@2193c6bb
2019-04-03 20:14:59 -请求地址 : http://localhost:8081/elec/elec/edit/2
2019-04-03 20:14:59 -HTTP METHOD : GET
2019-04-03 20:14:59 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.edit
2019-04-03 20:14:59 -参数 : [2, {}]
2019-04-03 20:14:59 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, `user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec where id = ? 
2019-04-03 20:14:59 -==> Parameters: 2(Long)
2019-04-03 20:14:59 -<==      Total: 1
2019-04-03 20:14:59 -耗时 : 15
2019-04-03 20:14:59 -返回值 : elec/elec/edit
2019-04-03 20:14:59 -请求地址 : http://localhost:8081/common/dict/list/userState
2019-04-03 20:14:59 -HTTP METHOD : GET
2019-04-03 20:14:59 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 20:14:59 -参数 : [userState]
2019-04-03 20:14:59 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-03 20:14:59 -HTTP METHOD : GET
2019-04-03 20:14:59 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 20:14:59 -参数 : [userType]
2019-04-03 20:14:59 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 20:14:59 -==> Parameters: userState(String)
2019-04-03 20:14:59 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 20:14:59 -==> Parameters: userType(String)
2019-04-03 20:14:59 -<==      Total: 2
2019-04-03 20:14:59 -耗时 : 5
2019-04-03 20:14:59 -返回值 : [DictDO{id=126, name='使用中', value='1', type='userState', description='用户状态', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=125, name='未使用', value='0', type='userState', description='用户状态', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 20:14:59 -<==      Total: 2
2019-04-03 20:14:59 -耗时 : 11
2019-04-03 20:14:59 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 20:14:59 -请求地址 : http://localhost:8081/common/dict/list/elecType
2019-04-03 20:14:59 -HTTP METHOD : GET
2019-04-03 20:14:59 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 20:14:59 -参数 : [elecType]
2019-04-03 20:14:59 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 20:14:59 -==> Parameters: elecType(String)
2019-04-03 20:14:59 -<==      Total: 2
2019-04-03 20:14:59 -耗时 : 7
2019-04-03 20:14:59 -返回值 : [DictDO{id=139, name='民用电', value='1', type='elecType', description='电量性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=138, name='商业电', value='0', type='elecType', description='电量类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 20:15:08 -请求地址 : http://localhost:8081/elec/elec/update
2019-04-03 20:15:08 -HTTP METHOD : POST
2019-04-03 20:15:08 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.update
2019-04-03 20:15:08 -参数 : [com.bootdo.elec.domain.ElecDO@5e3e5d32]
2019-04-03 20:15:08 -==>  Preparing: update elec SET `user_id` = ?, `user_name` = ?, `user_type` = ?, `user_org` = ?, `user_tell` = ?, `user_state` = ?, `wages_id` = ?, `elec_type` = ?, `start` = ?, `end` = ?, `hu` = ?, `elec_amount` = ?, `elec_cost` = ?, `elec_sum` = ?, `create_time` = ?, `create_by` = ?, `update_time` = ?, `update_by` = ?, `remark` = ? where id = ? 
2019-04-03 20:15:08 -==> Parameters: 1-0004(String), 姜海龙(String), A(String), 2(String), 15815564657(String), 1(String), 1002(String), 0(String), 200(String), 100(String), 1(Integer), 100.00(BigDecimal), 100.00(BigDecimal), -100.00(BigDecimal), 2019-02(String), 1(Long), 2019-04-03 20:15:08.926(Timestamp), 1(Long), (String), 2(Long)
2019-04-03 20:15:09 -<==    Updates: 1
2019-04-03 20:15:09 -耗时 : 239
2019-04-03 20:15:09 -返回值 : {msg=操作成功, code=0}
2019-04-03 20:15:09 -请求地址 : http://localhost:8081/elec/elec/list
2019-04-03 20:15:09 -HTTP METHOD : GET
2019-04-03 20:15:09 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.list
2019-04-03 20:15:09 -参数 : [{limit=10, offset=0, userType=, userOrg=, userId=, createTime=, queryType=2}, com.bootdo.elec.domain.ElecDO@1103ba18]
2019-04-03 20:15:09 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec WHERE `elec_sum` < 0 order by id asc limit ?, ? 
2019-04-03 20:15:09 -==> Parameters: 0(Integer), 10(Integer)
2019-04-03 20:15:09 -<==      Total: 2
2019-04-03 20:15:09 -==>  Preparing: select count(*) from elec WHERE `elec_sum` < 0 
2019-04-03 20:15:09 -==> Parameters: 
2019-04-03 20:15:09 -<==      Total: 1
2019-04-03 20:15:09 -耗时 : 77
2019-04-03 20:15:09 -返回值 : com.bootdo.common.utils.PageUtils@56a2b4f0
2019-04-03 20:15:10 -请求地址 : http://localhost:8081/elec/elec/edit/1
2019-04-03 20:15:10 -HTTP METHOD : GET
2019-04-03 20:15:10 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.edit
2019-04-03 20:15:10 -参数 : [1, {}]
2019-04-03 20:15:10 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, `user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec where id = ? 
2019-04-03 20:15:10 -==> Parameters: 1(Long)
2019-04-03 20:15:10 -<==      Total: 1
2019-04-03 20:15:10 -耗时 : 6
2019-04-03 20:15:10 -返回值 : elec/elec/edit
2019-04-03 20:15:11 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-03 20:15:11 -HTTP METHOD : GET
2019-04-03 20:15:11 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 20:15:11 -参数 : [userType]
2019-04-03 20:15:11 -请求地址 : http://localhost:8081/common/dict/list/userState
2019-04-03 20:15:11 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 20:15:11 -HTTP METHOD : GET
2019-04-03 20:15:11 -请求地址 : http://localhost:8081/common/dict/list/elecType
2019-04-03 20:15:11 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 20:15:11 -HTTP METHOD : GET
2019-04-03 20:15:11 -==> Parameters: userType(String)
2019-04-03 20:15:11 -参数 : [userState]
2019-04-03 20:15:11 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 20:15:11 -参数 : [elecType]
2019-04-03 20:15:11 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 20:15:11 -==> Parameters: elecType(String)
2019-04-03 20:15:11 -<==      Total: 2
2019-04-03 20:15:11 -耗时 : 4
2019-04-03 20:15:11 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 20:15:11 -<==      Total: 2
2019-04-03 20:15:11 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 20:15:11 -耗时 : 4
2019-04-03 20:15:11 -==> Parameters: userState(String)
2019-04-03 20:15:11 -返回值 : [DictDO{id=139, name='民用电', value='1', type='elecType', description='电量性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=138, name='商业电', value='0', type='elecType', description='电量类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 20:15:11 -<==      Total: 2
2019-04-03 20:15:11 -耗时 : 11
2019-04-03 20:15:11 -返回值 : [DictDO{id=126, name='使用中', value='1', type='userState', description='用户状态', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=125, name='未使用', value='0', type='userState', description='用户状态', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 20:20:44 -请求地址 : http://localhost:8081/index
2019-04-03 20:20:44 -HTTP METHOD : GET
2019-04-03 20:20:44 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2019-04-03 20:20:44 -参数 : [{}]
2019-04-03 20:20:44 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2019-04-03 20:20:44 -==> Parameters: 1(Long)
2019-04-03 20:20:44 -<==      Total: 46
2019-04-03 20:20:44 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2019-04-03 20:20:44 -==> Parameters: 138(Long)
2019-04-03 20:20:44 -<==      Total: 1
2019-04-03 20:20:44 -耗时 : 38
2019-04-03 20:20:44 -返回值 : index_v1
2019-04-03 20:20:44 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 20:20:44 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 40(Integer), com.bootdo.system.controller.LoginController.index()(String), {"menus":[{"attributes":{"icon":"fa fa-money","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-money","url":"/moneyList/moneyList"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"102","parentId":"106","text":"现金缴费"},{"attributes":{"icon":"fa fa-book","url":"/moneyLog/elecLog"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"107","parentId":"106","text":"缴费记录"}],"hasChildren":true,"hasParent":false,"id":"106","parentId":"0","text":"收费管理"},{"attributes":{"icon":"fa fa-lightbulb-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/elec/elec"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"121","parentId":"103","text":"电费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"elec/elecInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"122","parentId":"103","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"elec/elecUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"123","parentId":"103","text":"电表上传"},{"attributes":{"icon":"fa fa-cc","url":"/elec/elecPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"124","parentId":"103","text":"电价管理"}],"hasChildren":true,"hasParent":false,"id":"103","parentId":"0","text":"电费管理"},{"attributes":{"icon":"fa fa-tint","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/water/water"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"117","parentId":"105","text":"水费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"water/waterInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"118","parentId":"105","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"water/waterUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"119","parentId":"105","text":"水费生成"},{"attributes":{"icon":"fa fa-cc","url":"/water/waterPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"120","parentId":"105","text":"水价管理"}],"hasChildren":true,"hasParent":false,"id":"105","parentId":"0","text":"水费管理"},{"attributes":{"icon":"fa fa-fire","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/heat/heat"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"113","parentId":"104","text":"暖费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"heat/heatInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"114","parentId":"104","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"heat/heatUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"115","parentId":"104","text":"暖费生成"},{"attributes":{"icon":"","url":"/heat/heatPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"116","parentId":"104","text":"暖价管理"}],"hasChildren":true,"hasParent":false,"id":"104","parentId":"0","text":"暖费管理"},{"attributes":{"icon":"fa fa-vcard-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-bomb","url":"/print/print"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"149","parentId":"108","text":"票据记录"}],"hasChildren":true,"hasParent":false,"id":"108","parentId":"0","text":"票据管理"},{"attributes":{"icon":"fa fa-bar-chart","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-area-chart","url":"/chart/graph_echarts.html"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","text":"百度chart"},{"attributes":{"icon":"fa fa-sun-o","url":"charts/countDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"109","parentId":"97","text":"日统计报表"},{"attributes":{"icon":"fa fa-registered","url":"charts/countMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"110","parentId":"97","text":"月统计报表"},{"attributes":{"icon":"fa fa-money","url":"charts/countOwe"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"155","parentId":"97","text":"欠费报表图"},{"attributes":{"icon":"fa fa-support","url":"charts/countYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"111","parentId":"97","text":"年统计报表"},{"attributes":{"icon":"fa fa-tachometer","url":"charts/countRun"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"112","parentId":"97","text":"走势图报表"}],"hasChildren":true,"hasParent":false,"id":"97","parentId":"0","text":"统计管理"},{"attributes":{"icon":"fa fa-bars","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-book","url":"/common/dict"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"78","parentId":"1","text":"数据字典"},{"attributes":{"icon":"fa fa-folder-open","url":"/common/sysFile"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"71","parentId":"1","text":"文件管理"}],"h(String), 127.0.0.1(String), 2019-04-03 20:20:44.316(Timestamp)
2019-04-03 20:20:44 -请求地址 : http://localhost:8081/main
2019-04-03 20:20:44 -HTTP METHOD : GET
2019-04-03 20:20:44 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 20:20:44 -参数 : []
2019-04-03 20:20:44 -耗时 : 0
2019-04-03 20:20:44 -返回值 : main
2019-04-03 20:20:44 -<==    Updates: 1
2019-04-03 20:20:45 -请求地址 : http://localhost:8081/oa/notify/message
2019-04-03 20:20:45 -HTTP METHOD : GET
2019-04-03 20:20:45 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2019-04-03 20:20:45 -参数 : []
2019-04-03 20:20:45 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2019-04-03 20:20:45 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2019-04-03 20:20:45 -<==      Total: 0
2019-04-03 20:20:45 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2019-04-03 20:20:45 -==> Parameters: 1(Long), 0(String)
2019-04-03 20:20:45 -<==      Total: 1
2019-04-03 20:20:45 -耗时 : 14
2019-04-03 20:20:45 -返回值 : com.bootdo.common.utils.PageUtils@40fc60ec
2019-04-03 20:20:45 -请求地址 : http://localhost:8081/main
2019-04-03 20:20:45 -HTTP METHOD : GET
2019-04-03 20:20:45 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 20:20:45 -参数 : []
2019-04-03 20:20:45 -耗时 : 3
2019-04-03 20:20:45 -返回值 : main
2019-04-03 20:20:48 -请求地址 : http://localhost:8081/water/water
2019-04-03 20:20:48 -HTTP METHOD : GET
2019-04-03 20:20:48 -CLASS_METHOD : com.bootdo.water.controller.WaterController.Water
2019-04-03 20:20:48 -参数 : []
2019-04-03 20:20:48 -耗时 : 1
2019-04-03 20:20:48 -返回值 : water/water/water
2019-04-03 20:20:48 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-03 20:20:48 -HTTP METHOD : GET
2019-04-03 20:20:48 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 20:20:48 -参数 : [userType]
2019-04-03 20:20:48 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 20:20:48 -==> Parameters: userType(String)
2019-04-03 20:20:48 -<==      Total: 2
2019-04-03 20:20:48 -耗时 : 11
2019-04-03 20:20:48 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 20:20:48 -请求地址 : http://localhost:8081/water/water/list
2019-04-03 20:20:48 -HTTP METHOD : GET
2019-04-03 20:20:48 -CLASS_METHOD : com.bootdo.water.controller.WaterController.list
2019-04-03 20:20:48 -参数 : [{limit=3, offset=0, userType=, userOrg=, userId=, createTime=, queryType=1}]
2019-04-03 20:20:48 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`water_type`,`water_price`,`water_cost`,`water_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from water order by id asc limit ?, ? 
2019-04-03 20:20:48 -==> Parameters: 0(Integer), 3(Integer)
2019-04-03 20:20:48 -<==      Total: 3
2019-04-03 20:20:48 -==>  Preparing: select count(*) from water 
2019-04-03 20:20:48 -==> Parameters: 
2019-04-03 20:20:48 -<==      Total: 1
2019-04-03 20:20:48 -耗时 : 45
2019-04-03 20:20:48 -返回值 : com.bootdo.common.utils.PageUtils@134c9136
2019-04-03 20:20:52 -请求地址 : http://localhost:8081/water/water/edit/1
2019-04-03 20:20:52 -HTTP METHOD : GET
2019-04-03 20:20:52 -CLASS_METHOD : com.bootdo.water.controller.WaterController.edit
2019-04-03 20:20:52 -参数 : [1, {}]
2019-04-03 20:20:52 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`water_type`,`water_price`,`water_cost`,`water_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from water where id = ? 
2019-04-03 20:20:52 -==> Parameters: 1(Long)
2019-04-03 20:20:52 -<==      Total: 1
2019-04-03 20:20:52 -耗时 : 9
2019-04-03 20:20:52 -返回值 : water/water/edit
2019-04-03 20:20:53 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-03 20:20:53 -HTTP METHOD : GET
2019-04-03 20:20:53 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 20:20:53 -参数 : [userType]
2019-04-03 20:20:53 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 20:20:53 -==> Parameters: userType(String)
2019-04-03 20:20:53 -请求地址 : http://localhost:8081/common/dict/list/userState
2019-04-03 20:20:53 -HTTP METHOD : GET
2019-04-03 20:20:53 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 20:20:53 -参数 : [userState]
2019-04-03 20:20:53 -请求地址 : http://localhost:8081/common/dict/list/waterType
2019-04-03 20:20:53 -HTTP METHOD : GET
2019-04-03 20:20:53 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 20:20:53 -参数 : [waterType]
2019-04-03 20:20:53 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 20:20:53 -==> Parameters: userState(String)
2019-04-03 20:20:53 -<==      Total: 2
2019-04-03 20:20:53 -耗时 : 5
2019-04-03 20:20:53 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 20:20:53 -<==      Total: 2
2019-04-03 20:20:53 -耗时 : 4
2019-04-03 20:20:53 -返回值 : [DictDO{id=126, name='使用中', value='1', type='userState', description='用户状态', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=125, name='未使用', value='0', type='userState', description='用户状态', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 20:20:53 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 20:20:53 -==> Parameters: waterType(String)
2019-04-03 20:20:53 -<==      Total: 6
2019-04-03 20:20:53 -耗时 : 16
2019-04-03 20:20:53 -返回值 : [DictDO{id=132, name='特殊水费4', value='5', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=131, name='特殊水费3', value='4', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=130, name='特殊水费2', value='3', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=129, name='特殊水费1', value='2', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=128, name='民用水', value='1', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=127, name='商业水', value='0', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 20:20:57 -请求地址 : http://localhost:8081/elec/elec
2019-04-03 20:20:57 -HTTP METHOD : GET
2019-04-03 20:20:57 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.Elec
2019-04-03 20:20:57 -参数 : []
2019-04-03 20:20:57 -耗时 : 1
2019-04-03 20:20:57 -返回值 : elec/elec/elec
2019-04-03 20:20:57 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-03 20:20:57 -HTTP METHOD : GET
2019-04-03 20:20:57 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 20:20:57 -参数 : [userType]
2019-04-03 20:20:57 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 20:20:57 -==> Parameters: userType(String)
2019-04-03 20:20:57 -<==      Total: 2
2019-04-03 20:20:57 -耗时 : 6
2019-04-03 20:20:57 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 20:20:57 -请求地址 : http://localhost:8081/elec/elec/list
2019-04-03 20:20:57 -HTTP METHOD : GET
2019-04-03 20:20:57 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.list
2019-04-03 20:20:57 -参数 : [{limit=10, offset=0, userType=, userOrg=, userId=, createTime=, queryType=1}, com.bootdo.elec.domain.ElecDO@5abb8848]
2019-04-03 20:20:57 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec order by id asc limit ?, ? 
2019-04-03 20:20:57 -==> Parameters: 0(Integer), 10(Integer)
2019-04-03 20:20:57 -<==      Total: 10
2019-04-03 20:20:57 -==>  Preparing: select count(*) from elec 
2019-04-03 20:20:57 -==> Parameters: 
2019-04-03 20:20:57 -<==      Total: 1
2019-04-03 20:20:57 -耗时 : 19
2019-04-03 20:20:57 -返回值 : com.bootdo.common.utils.PageUtils@2c7d1b27
2019-04-03 20:21:00 -请求地址 : http://localhost:8081/elec/elec/edit/2
2019-04-03 20:21:00 -HTTP METHOD : GET
2019-04-03 20:21:00 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.edit
2019-04-03 20:21:00 -参数 : [2, {}]
2019-04-03 20:21:00 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, `user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec where id = ? 
2019-04-03 20:21:00 -==> Parameters: 2(Long)
2019-04-03 20:21:00 -<==      Total: 1
2019-04-03 20:21:00 -耗时 : 4
2019-04-03 20:21:00 -返回值 : elec/elec/edit
2019-04-03 20:21:01 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-03 20:21:01 -HTTP METHOD : GET
2019-04-03 20:21:01 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 20:21:01 -参数 : [userType]
2019-04-03 20:21:01 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 20:21:01 -==> Parameters: userType(String)
2019-04-03 20:21:01 -请求地址 : http://localhost:8081/common/dict/list/elecType
2019-04-03 20:21:01 -请求地址 : http://localhost:8081/common/dict/list/userState
2019-04-03 20:21:01 -HTTP METHOD : GET
2019-04-03 20:21:01 -HTTP METHOD : GET
2019-04-03 20:21:01 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 20:21:01 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 20:21:01 -参数 : [elecType]
2019-04-03 20:21:01 -参数 : [userState]
2019-04-03 20:21:01 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 20:21:01 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 20:21:01 -==> Parameters: elecType(String)
2019-04-03 20:21:01 -==> Parameters: userState(String)
2019-04-03 20:21:01 -<==      Total: 2
2019-04-03 20:21:01 -耗时 : 5
2019-04-03 20:21:01 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 20:21:01 -<==      Total: 2
2019-04-03 20:21:01 -耗时 : 5
2019-04-03 20:21:01 -返回值 : [DictDO{id=126, name='使用中', value='1', type='userState', description='用户状态', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=125, name='未使用', value='0', type='userState', description='用户状态', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 20:21:01 -<==      Total: 2
2019-04-03 20:21:01 -耗时 : 13
2019-04-03 20:21:01 -返回值 : [DictDO{id=139, name='民用电', value='1', type='elecType', description='电量性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=138, name='商业电', value='0', type='elecType', description='电量类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 20:27:44 -WebSocketSession[1 current WS(1)-HttpStream(0)-HttpPoll(0), 3 total, 0 closed abnormally (0 connect failure, 0 send limit, 0 transport error)], stompSubProtocol[processed CONNECT(3)-CONNECTED(3)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 33], outboundChannelpool size = 0, active threads = 0, queued tasks = 0, completed tasks = 5], sockJsScheduler[pool size = 4, active threads = 1, queued tasks = 2, completed tasks = 843]
2019-04-03 20:29:47 -请求地址 : http://localhost:8081/index
2019-04-03 20:29:47 -HTTP METHOD : GET
2019-04-03 20:29:47 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2019-04-03 20:29:47 -参数 : [{}]
2019-04-03 20:29:47 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2019-04-03 20:29:47 -==> Parameters: 1(Long)
2019-04-03 20:29:47 -<==      Total: 46
2019-04-03 20:29:47 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2019-04-03 20:29:47 -==> Parameters: 138(Long)
2019-04-03 20:29:47 -<==      Total: 1
2019-04-03 20:29:47 -耗时 : 29
2019-04-03 20:29:47 -返回值 : index_v1
2019-04-03 20:29:47 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 20:29:47 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 29(Integer), com.bootdo.system.controller.LoginController.index()(String), {"menus":[{"attributes":{"icon":"fa fa-money","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-money","url":"/moneyList/moneyList"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"102","parentId":"106","text":"现金缴费"},{"attributes":{"icon":"fa fa-book","url":"/moneyLog/elecLog"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"107","parentId":"106","text":"缴费记录"}],"hasChildren":true,"hasParent":false,"id":"106","parentId":"0","text":"收费管理"},{"attributes":{"icon":"fa fa-lightbulb-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/elec/elec"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"121","parentId":"103","text":"电费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"elec/elecInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"122","parentId":"103","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"elec/elecUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"123","parentId":"103","text":"电表上传"},{"attributes":{"icon":"fa fa-cc","url":"/elec/elecPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"124","parentId":"103","text":"电价管理"}],"hasChildren":true,"hasParent":false,"id":"103","parentId":"0","text":"电费管理"},{"attributes":{"icon":"fa fa-tint","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/water/water"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"117","parentId":"105","text":"水费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"water/waterInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"118","parentId":"105","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"water/waterUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"119","parentId":"105","text":"水费生成"},{"attributes":{"icon":"fa fa-cc","url":"/water/waterPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"120","parentId":"105","text":"水价管理"}],"hasChildren":true,"hasParent":false,"id":"105","parentId":"0","text":"水费管理"},{"attributes":{"icon":"fa fa-fire","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/heat/heat"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"113","parentId":"104","text":"暖费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"heat/heatInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"114","parentId":"104","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"heat/heatUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"115","parentId":"104","text":"暖费生成"},{"attributes":{"icon":"","url":"/heat/heatPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"116","parentId":"104","text":"暖价管理"}],"hasChildren":true,"hasParent":false,"id":"104","parentId":"0","text":"暖费管理"},{"attributes":{"icon":"fa fa-vcard-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-bomb","url":"/print/print"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"149","parentId":"108","text":"票据记录"}],"hasChildren":true,"hasParent":false,"id":"108","parentId":"0","text":"票据管理"},{"attributes":{"icon":"fa fa-bar-chart","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-area-chart","url":"/chart/graph_echarts.html"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","text":"百度chart"},{"attributes":{"icon":"fa fa-sun-o","url":"charts/countDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"109","parentId":"97","text":"日统计报表"},{"attributes":{"icon":"fa fa-registered","url":"charts/countMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"110","parentId":"97","text":"月统计报表"},{"attributes":{"icon":"fa fa-money","url":"charts/countOwe"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"155","parentId":"97","text":"欠费报表图"},{"attributes":{"icon":"fa fa-support","url":"charts/countYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"111","parentId":"97","text":"年统计报表"},{"attributes":{"icon":"fa fa-tachometer","url":"charts/countRun"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"112","parentId":"97","text":"走势图报表"}],"hasChildren":true,"hasParent":false,"id":"97","parentId":"0","text":"统计管理"},{"attributes":{"icon":"fa fa-bars","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-book","url":"/common/dict"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"78","parentId":"1","text":"数据字典"},{"attributes":{"icon":"fa fa-folder-open","url":"/common/sysFile"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"71","parentId":"1","text":"文件管理"}],"h(String), 127.0.0.1(String), 2019-04-03 20:29:47.545(Timestamp)
2019-04-03 20:29:47 -请求地址 : http://localhost:8081/main
2019-04-03 20:29:47 -HTTP METHOD : GET
2019-04-03 20:29:47 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 20:29:47 -参数 : []
2019-04-03 20:29:47 -耗时 : 1
2019-04-03 20:29:47 -返回值 : main
2019-04-03 20:29:47 -<==    Updates: 1
2019-04-03 20:29:47 -请求地址 : http://localhost:8081/oa/notify/message
2019-04-03 20:29:47 -HTTP METHOD : GET
2019-04-03 20:29:47 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2019-04-03 20:29:47 -参数 : []
2019-04-03 20:29:47 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2019-04-03 20:29:47 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2019-04-03 20:29:47 -<==      Total: 0
2019-04-03 20:29:47 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2019-04-03 20:29:47 -==> Parameters: 1(Long), 0(String)
2019-04-03 20:29:47 -<==      Total: 1
2019-04-03 20:29:47 -耗时 : 8
2019-04-03 20:29:47 -返回值 : com.bootdo.common.utils.PageUtils@1a431e73
2019-04-03 20:29:47 -请求地址 : http://localhost:8081/main
2019-04-03 20:29:47 -HTTP METHOD : GET
2019-04-03 20:29:47 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 20:29:47 -参数 : []
2019-04-03 20:29:47 -耗时 : 2
2019-04-03 20:29:47 -返回值 : main
2019-04-03 20:29:50 -==>  Preparing: select distinct m.perms from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id = ur.role_id where ur.user_id = ? 
2019-04-03 20:29:50 -==> Parameters: 1(Long)
2019-04-03 20:29:50 -<==      Total: 90
2019-04-03 20:29:50 -请求地址 : http://localhost:8081/elec/elec
2019-04-03 20:29:50 -HTTP METHOD : GET
2019-04-03 20:29:50 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.Elec
2019-04-03 20:29:50 -参数 : []
2019-04-03 20:29:50 -耗时 : 1
2019-04-03 20:29:50 -返回值 : elec/elec/elec
2019-04-03 20:29:51 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-03 20:29:51 -HTTP METHOD : GET
2019-04-03 20:29:51 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 20:29:51 -参数 : [userType]
2019-04-03 20:29:51 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 20:29:51 -==> Parameters: userType(String)
2019-04-03 20:29:51 -<==      Total: 2
2019-04-03 20:29:51 -耗时 : 6
2019-04-03 20:29:51 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 20:29:51 -请求地址 : http://localhost:8081/elec/elec/list
2019-04-03 20:29:51 -HTTP METHOD : GET
2019-04-03 20:29:51 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.list
2019-04-03 20:29:51 -参数 : [{limit=10, offset=0, userType=, userOrg=, userId=, createTime=, queryType=1}, com.bootdo.elec.domain.ElecDO@7931a3e3]
2019-04-03 20:29:51 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec order by id asc limit ?, ? 
2019-04-03 20:29:51 -==> Parameters: 0(Integer), 10(Integer)
2019-04-03 20:29:51 -<==      Total: 10
2019-04-03 20:29:51 -==>  Preparing: select count(*) from elec 
2019-04-03 20:29:51 -==> Parameters: 
2019-04-03 20:29:51 -<==      Total: 1
2019-04-03 20:29:51 -耗时 : 14
2019-04-03 20:29:51 -返回值 : com.bootdo.common.utils.PageUtils@155e7573
2019-04-03 20:29:56 -请求地址 : http://localhost:8081/elec/elec/edit/1
2019-04-03 20:29:56 -HTTP METHOD : GET
2019-04-03 20:29:56 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.edit
2019-04-03 20:29:56 -参数 : [1, {}]
2019-04-03 20:29:56 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, `user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec where id = ? 
2019-04-03 20:29:56 -==> Parameters: 1(Long)
2019-04-03 20:29:56 -<==      Total: 1
2019-04-03 20:29:56 -耗时 : 5
2019-04-03 20:29:56 -返回值 : elec/elec/edit
2019-04-03 20:29:56 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-03 20:29:56 -HTTP METHOD : GET
2019-04-03 20:29:56 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 20:29:56 -参数 : [userType]
2019-04-03 20:29:56 -请求地址 : http://localhost:8081/common/dict/list/userState
2019-04-03 20:29:56 -HTTP METHOD : GET
2019-04-03 20:29:56 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 20:29:56 -参数 : [userState]
2019-04-03 20:29:56 -请求地址 : http://localhost:8081/common/dict/list/elecType
2019-04-03 20:29:56 -HTTP METHOD : GET
2019-04-03 20:29:56 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 20:29:56 -参数 : [elecType]
2019-04-03 20:29:56 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 20:29:56 -==> Parameters: userType(String)
2019-04-03 20:29:56 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 20:29:56 -==> Parameters: elecType(String)
2019-04-03 20:29:56 -<==      Total: 2
2019-04-03 20:29:56 -耗时 : 6
2019-04-03 20:29:56 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 20:29:56 -<==      Total: 2
2019-04-03 20:29:56 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 20:29:56 -==> Parameters: userState(String)
2019-04-03 20:29:56 -<==      Total: 2
2019-04-03 20:29:56 -耗时 : 9
2019-04-03 20:29:56 -返回值 : [DictDO{id=139, name='民用电', value='1', type='elecType', description='电量性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=138, name='商业电', value='0', type='elecType', description='电量类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 20:29:56 -耗时 : 11
2019-04-03 20:29:56 -返回值 : [DictDO{id=126, name='使用中', value='1', type='userState', description='用户状态', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=125, name='未使用', value='0', type='userState', description='用户状态', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 20:32:00 -请求地址 : http://localhost:8081/water/water
2019-04-03 20:32:00 -HTTP METHOD : GET
2019-04-03 20:32:00 -CLASS_METHOD : com.bootdo.water.controller.WaterController.Water
2019-04-03 20:32:00 -参数 : []
2019-04-03 20:32:00 -耗时 : 1
2019-04-03 20:32:00 -返回值 : water/water/water
2019-04-03 20:32:00 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-03 20:32:00 -HTTP METHOD : GET
2019-04-03 20:32:00 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 20:32:00 -参数 : [userType]
2019-04-03 20:32:00 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 20:32:00 -==> Parameters: userType(String)
2019-04-03 20:32:00 -<==      Total: 2
2019-04-03 20:32:00 -耗时 : 5
2019-04-03 20:32:00 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 20:32:00 -请求地址 : http://localhost:8081/water/water/list
2019-04-03 20:32:00 -HTTP METHOD : GET
2019-04-03 20:32:00 -CLASS_METHOD : com.bootdo.water.controller.WaterController.list
2019-04-03 20:32:00 -参数 : [{limit=3, offset=0, userType=, userOrg=, userId=, createTime=, queryType=1}]
2019-04-03 20:32:00 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`water_type`,`water_price`,`water_cost`,`water_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from water order by id asc limit ?, ? 
2019-04-03 20:32:00 -==> Parameters: 0(Integer), 3(Integer)
2019-04-03 20:32:00 -<==      Total: 3
2019-04-03 20:32:00 -==>  Preparing: select count(*) from water 
2019-04-03 20:32:00 -==> Parameters: 
2019-04-03 20:32:00 -<==      Total: 1
2019-04-03 20:32:00 -耗时 : 8
2019-04-03 20:32:00 -返回值 : com.bootdo.common.utils.PageUtils@69f6a337
2019-04-03 20:32:05 -请求地址 : http://localhost:8081/water/water/edit/1
2019-04-03 20:32:05 -HTTP METHOD : GET
2019-04-03 20:32:05 -CLASS_METHOD : com.bootdo.water.controller.WaterController.edit
2019-04-03 20:32:05 -参数 : [1, {}]
2019-04-03 20:32:05 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`water_type`,`water_price`,`water_cost`,`water_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from water where id = ? 
2019-04-03 20:32:05 -==> Parameters: 1(Long)
2019-04-03 20:32:05 -<==      Total: 1
2019-04-03 20:32:05 -耗时 : 6
2019-04-03 20:32:05 -返回值 : water/water/edit
2019-04-03 20:32:05 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-03 20:32:05 -HTTP METHOD : GET
2019-04-03 20:32:05 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 20:32:05 -参数 : [userType]
2019-04-03 20:32:05 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 20:32:05 -==> Parameters: userType(String)
2019-04-03 20:32:05 -请求地址 : http://localhost:8081/common/dict/list/userState
2019-04-03 20:32:05 -请求地址 : http://localhost:8081/common/dict/list/waterType
2019-04-03 20:32:05 -HTTP METHOD : GET
2019-04-03 20:32:05 -HTTP METHOD : GET
2019-04-03 20:32:05 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 20:32:05 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 20:32:05 -参数 : [userState]
2019-04-03 20:32:05 -参数 : [waterType]
2019-04-03 20:32:05 -<==      Total: 2
2019-04-03 20:32:05 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 20:32:05 -耗时 : 5
2019-04-03 20:32:05 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 20:32:05 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 20:32:05 -==> Parameters: waterType(String)
2019-04-03 20:32:05 -==> Parameters: userState(String)
2019-04-03 20:32:05 -<==      Total: 6
2019-04-03 20:32:05 -耗时 : 6
2019-04-03 20:32:05 -返回值 : [DictDO{id=132, name='特殊水费4', value='5', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=131, name='特殊水费3', value='4', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=130, name='特殊水费2', value='3', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=129, name='特殊水费1', value='2', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=128, name='民用水', value='1', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=127, name='商业水', value='0', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 20:32:05 -<==      Total: 2
2019-04-03 20:32:05 -耗时 : 9
2019-04-03 20:32:05 -返回值 : [DictDO{id=126, name='使用中', value='1', type='userState', description='用户状态', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=125, name='未使用', value='0', type='userState', description='用户状态', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 20:32:10 -请求地址 : http://localhost:8081/water/water/update
2019-04-03 20:32:10 -HTTP METHOD : POST
2019-04-03 20:32:10 -CLASS_METHOD : com.bootdo.water.controller.WaterController.update
2019-04-03 20:32:10 -参数 : [com.bootdo.water.domain.WaterDO@326f2b61]
2019-04-03 20:32:10 -==>  Preparing: update water SET `user_id` = ?, `user_name` = ?, `user_type` = ?, `user_org` = ?, `user_tell` = ?, `user_state` = ?, `wages_id` = ?, `water_type` = ?, `water_price` = ?, `water_cost` = ?, `water_sum` = ?, `create_by` = ?, `update_time` = ?, `update_by` = ?, `remark` = ? where id = ? 
2019-04-03 20:32:10 -==> Parameters: 1-0004(String), 姜海龙(String), A(String), 2(String), 16716675678(String), 1(String), 10005(String), 1(String), 15.00(BigDecimal), 15.00(BigDecimal), -110.00(BigDecimal), 1(Long), 2019-04-03 20:32:10.177(Timestamp), 1(Long), (String), 1(Long)
2019-04-03 20:32:10 -<==    Updates: 1
2019-04-03 20:32:10 -耗时 : 223
2019-04-03 20:32:10 -返回值 : {msg=操作成功, code=0}
2019-04-03 20:32:10 -请求地址 : http://localhost:8081/water/water/list
2019-04-03 20:32:10 -HTTP METHOD : GET
2019-04-03 20:32:10 -CLASS_METHOD : com.bootdo.water.controller.WaterController.list
2019-04-03 20:32:10 -参数 : [{limit=3, offset=0, userType=, userOrg=, userId=, createTime=, queryType=2}]
2019-04-03 20:32:10 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`water_type`,`water_price`,`water_cost`,`water_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from water WHERE `water_sum` < 0 order by id asc limit ?, ? 
2019-04-03 20:32:10 -==> Parameters: 0(Integer), 3(Integer)
2019-04-03 20:32:10 -<==      Total: 2
2019-04-03 20:32:10 -==>  Preparing: select count(*) from water WHERE `water_sum` < 0 
2019-04-03 20:32:10 -==> Parameters: 
2019-04-03 20:32:10 -<==      Total: 1
2019-04-03 20:32:10 -耗时 : 23
2019-04-03 20:32:10 -返回值 : com.bootdo.common.utils.PageUtils@4620c757
2019-04-03 20:32:15 -请求地址 : http://localhost:8081/water/water/edit/1
2019-04-03 20:32:15 -HTTP METHOD : GET
2019-04-03 20:32:15 -CLASS_METHOD : com.bootdo.water.controller.WaterController.edit
2019-04-03 20:32:15 -参数 : [1, {}]
2019-04-03 20:32:15 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`water_type`,`water_price`,`water_cost`,`water_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from water where id = ? 
2019-04-03 20:32:15 -==> Parameters: 1(Long)
2019-04-03 20:32:15 -<==      Total: 1
2019-04-03 20:32:15 -耗时 : 4
2019-04-03 20:32:15 -返回值 : water/water/edit
2019-04-03 20:32:15 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-03 20:32:15 -HTTP METHOD : GET
2019-04-03 20:32:15 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 20:32:15 -参数 : [userType]
2019-04-03 20:32:15 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 20:32:15 -==> Parameters: userType(String)
2019-04-03 20:32:15 -请求地址 : http://localhost:8081/common/dict/list/userState
2019-04-03 20:32:15 -HTTP METHOD : GET
2019-04-03 20:32:15 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 20:32:15 -参数 : [userState]
2019-04-03 20:32:15 -请求地址 : http://localhost:8081/common/dict/list/waterType
2019-04-03 20:32:15 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 20:32:15 -HTTP METHOD : GET
2019-04-03 20:32:15 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 20:32:15 -参数 : [waterType]
2019-04-03 20:32:15 -==> Parameters: userState(String)
2019-04-03 20:32:15 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 20:32:15 -==> Parameters: waterType(String)
2019-04-03 20:32:15 -<==      Total: 2
2019-04-03 20:32:15 -耗时 : 7
2019-04-03 20:32:15 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 20:32:15 -<==      Total: 2
2019-04-03 20:32:15 -耗时 : 5
2019-04-03 20:32:15 -返回值 : [DictDO{id=126, name='使用中', value='1', type='userState', description='用户状态', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=125, name='未使用', value='0', type='userState', description='用户状态', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 20:32:15 -<==      Total: 6
2019-04-03 20:32:15 -耗时 : 7
2019-04-03 20:32:15 -返回值 : [DictDO{id=132, name='特殊水费4', value='5', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=131, name='特殊水费3', value='4', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=130, name='特殊水费2', value='3', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=129, name='特殊水费1', value='2', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=128, name='民用水', value='1', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=127, name='商业水', value='0', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 20:34:56 -Validating all active sessions...
2019-04-03 20:34:56 -Finished session validation.  No sessions were stopped.
2019-04-03 20:42:51 -请求地址 : http://localhost:8081/index
2019-04-03 20:42:51 -HTTP METHOD : GET
2019-04-03 20:42:51 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2019-04-03 20:42:51 -参数 : [{}]
2019-04-03 20:42:51 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2019-04-03 20:42:51 -==> Parameters: 1(Long)
2019-04-03 20:42:51 -<==      Total: 46
2019-04-03 20:42:51 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2019-04-03 20:42:51 -==> Parameters: 138(Long)
2019-04-03 20:42:51 -<==      Total: 1
2019-04-03 20:42:51 -耗时 : 21
2019-04-03 20:42:51 -返回值 : index_v1
2019-04-03 20:42:51 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 20:42:51 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 23(Integer), com.bootdo.system.controller.LoginController.index()(String), {"menus":[{"attributes":{"icon":"fa fa-money","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-money","url":"/moneyList/moneyList"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"102","parentId":"106","text":"现金缴费"},{"attributes":{"icon":"fa fa-book","url":"/moneyLog/elecLog"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"107","parentId":"106","text":"缴费记录"}],"hasChildren":true,"hasParent":false,"id":"106","parentId":"0","text":"收费管理"},{"attributes":{"icon":"fa fa-lightbulb-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/elec/elec"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"121","parentId":"103","text":"电费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"elec/elecInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"122","parentId":"103","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"elec/elecUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"123","parentId":"103","text":"电表上传"},{"attributes":{"icon":"fa fa-cc","url":"/elec/elecPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"124","parentId":"103","text":"电价管理"}],"hasChildren":true,"hasParent":false,"id":"103","parentId":"0","text":"电费管理"},{"attributes":{"icon":"fa fa-tint","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/water/water"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"117","parentId":"105","text":"水费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"water/waterInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"118","parentId":"105","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"water/waterUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"119","parentId":"105","text":"水费生成"},{"attributes":{"icon":"fa fa-cc","url":"/water/waterPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"120","parentId":"105","text":"水价管理"}],"hasChildren":true,"hasParent":false,"id":"105","parentId":"0","text":"水费管理"},{"attributes":{"icon":"fa fa-fire","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/heat/heat"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"113","parentId":"104","text":"暖费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"heat/heatInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"114","parentId":"104","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"heat/heatUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"115","parentId":"104","text":"暖费生成"},{"attributes":{"icon":"","url":"/heat/heatPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"116","parentId":"104","text":"暖价管理"}],"hasChildren":true,"hasParent":false,"id":"104","parentId":"0","text":"暖费管理"},{"attributes":{"icon":"fa fa-vcard-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-bomb","url":"/print/print"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"149","parentId":"108","text":"票据记录"}],"hasChildren":true,"hasParent":false,"id":"108","parentId":"0","text":"票据管理"},{"attributes":{"icon":"fa fa-bar-chart","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-area-chart","url":"/chart/graph_echarts.html"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","text":"百度chart"},{"attributes":{"icon":"fa fa-sun-o","url":"charts/countDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"109","parentId":"97","text":"日统计报表"},{"attributes":{"icon":"fa fa-registered","url":"charts/countMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"110","parentId":"97","text":"月统计报表"},{"attributes":{"icon":"fa fa-support","url":"charts/countYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"111","parentId":"97","text":"年统计报表"},{"attributes":{"icon":"fa fa-money","url":"charts/countOwe"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"155","parentId":"97","text":"欠费报表图"},{"attributes":{"icon":"fa fa-tachometer","url":"charts/countRun"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"112","parentId":"97","text":"走势图报表"}],"hasChildren":true,"hasParent":false,"id":"97","parentId":"0","text":"统计管理"},{"attributes":{"icon":"fa fa-bars","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-book","url":"/common/dict"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"78","parentId":"1","text":"数据字典"},{"attributes":{"icon":"fa fa-folder-open","url":"/common/sysFile"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"71","parentId":"1","text":"文件管理"}],"h(String), 127.0.0.1(String), 2019-04-03 20:42:51.619(Timestamp)
2019-04-03 20:42:51 -请求地址 : http://localhost:8081/main
2019-04-03 20:42:51 -HTTP METHOD : GET
2019-04-03 20:42:51 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 20:42:51 -参数 : []
2019-04-03 20:42:51 -耗时 : 0
2019-04-03 20:42:51 -返回值 : main
2019-04-03 20:42:51 -<==    Updates: 1
2019-04-03 20:42:51 -请求地址 : http://localhost:8081/oa/notify/message
2019-04-03 20:42:51 -HTTP METHOD : GET
2019-04-03 20:42:51 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2019-04-03 20:42:51 -参数 : []
2019-04-03 20:42:51 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2019-04-03 20:42:51 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2019-04-03 20:42:51 -<==      Total: 0
2019-04-03 20:42:51 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2019-04-03 20:42:51 -==> Parameters: 1(Long), 0(String)
2019-04-03 20:42:51 -<==      Total: 1
2019-04-03 20:42:51 -耗时 : 10
2019-04-03 20:42:51 -返回值 : com.bootdo.common.utils.PageUtils@6f8fabc0
2019-04-03 20:42:52 -请求地址 : http://localhost:8081/main
2019-04-03 20:42:52 -HTTP METHOD : GET
2019-04-03 20:42:52 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 20:42:52 -参数 : []
2019-04-03 20:42:52 -耗时 : 0
2019-04-03 20:42:52 -返回值 : main
2019-04-03 20:42:53 -==>  Preparing: select distinct m.perms from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id = ur.role_id where ur.user_id = ? 
2019-04-03 20:42:53 -==> Parameters: 1(Long)
2019-04-03 20:42:53 -<==      Total: 90
2019-04-03 20:42:53 -请求地址 : http://localhost:8081/water/water
2019-04-03 20:42:53 -HTTP METHOD : GET
2019-04-03 20:42:53 -CLASS_METHOD : com.bootdo.water.controller.WaterController.Water
2019-04-03 20:42:53 -参数 : []
2019-04-03 20:42:53 -耗时 : 1
2019-04-03 20:42:53 -返回值 : water/water/water
2019-04-03 20:42:53 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-03 20:42:53 -HTTP METHOD : GET
2019-04-03 20:42:53 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 20:42:53 -参数 : [userType]
2019-04-03 20:42:53 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 20:42:53 -==> Parameters: userType(String)
2019-04-03 20:42:53 -<==      Total: 2
2019-04-03 20:42:53 -耗时 : 4
2019-04-03 20:42:53 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 20:42:53 -请求地址 : http://localhost:8081/water/water/list
2019-04-03 20:42:53 -HTTP METHOD : GET
2019-04-03 20:42:53 -CLASS_METHOD : com.bootdo.water.controller.WaterController.list
2019-04-03 20:42:53 -参数 : [{limit=3, offset=0, userType=, userOrg=, userId=, createTime=, queryType=1}]
2019-04-03 20:42:53 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`water_type`,`water_price`,`water_cost`,`water_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from water order by id asc limit ?, ? 
2019-04-03 20:42:53 -==> Parameters: 0(Integer), 3(Integer)
2019-04-03 20:42:53 -<==      Total: 3
2019-04-03 20:42:53 -==>  Preparing: select count(*) from water 
2019-04-03 20:42:53 -==> Parameters: 
2019-04-03 20:42:53 -<==      Total: 1
2019-04-03 20:42:53 -耗时 : 7
2019-04-03 20:42:53 -返回值 : com.bootdo.common.utils.PageUtils@2a0d448
2019-04-03 20:42:57 -请求地址 : http://localhost:8081/water/water/edit/1
2019-04-03 20:42:57 -HTTP METHOD : GET
2019-04-03 20:42:57 -CLASS_METHOD : com.bootdo.water.controller.WaterController.edit
2019-04-03 20:42:57 -参数 : [1, {}]
2019-04-03 20:42:57 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`water_type`,`water_price`,`water_cost`,`water_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from water where id = ? 
2019-04-03 20:42:57 -==> Parameters: 1(Long)
2019-04-03 20:42:57 -<==      Total: 1
2019-04-03 20:42:57 -耗时 : 4
2019-04-03 20:42:57 -返回值 : water/water/edit
2019-04-03 20:42:57 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-03 20:42:57 -HTTP METHOD : GET
2019-04-03 20:42:57 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 20:42:57 -参数 : [userType]
2019-04-03 20:42:57 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 20:42:57 -==> Parameters: userType(String)
2019-04-03 20:42:57 -请求地址 : http://localhost:8081/common/dict/list/userState
2019-04-03 20:42:57 -HTTP METHOD : GET
2019-04-03 20:42:57 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 20:42:57 -参数 : [userState]
2019-04-03 20:42:57 -<==      Total: 2
2019-04-03 20:42:57 -耗时 : 5
2019-04-03 20:42:57 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 20:42:57 -请求地址 : http://localhost:8081/common/dict/list/waterType
2019-04-03 20:42:57 -HTTP METHOD : GET
2019-04-03 20:42:57 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 20:42:57 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 20:42:57 -参数 : [waterType]
2019-04-03 20:42:57 -==> Parameters: userState(String)
2019-04-03 20:42:57 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 20:42:57 -==> Parameters: waterType(String)
2019-04-03 20:42:57 -<==      Total: 2
2019-04-03 20:42:57 -耗时 : 6
2019-04-03 20:42:57 -返回值 : [DictDO{id=126, name='使用中', value='1', type='userState', description='用户状态', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=125, name='未使用', value='0', type='userState', description='用户状态', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 20:42:57 -<==      Total: 6
2019-04-03 20:42:57 -耗时 : 6
2019-04-03 20:42:57 -返回值 : [DictDO{id=132, name='特殊水费4', value='5', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=131, name='特殊水费3', value='4', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=130, name='特殊水费2', value='3', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=129, name='特殊水费1', value='2', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=128, name='民用水', value='1', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=127, name='商业水', value='0', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 20:43:43 -请求地址 : http://localhost:8081/index
2019-04-03 20:43:43 -HTTP METHOD : GET
2019-04-03 20:43:43 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2019-04-03 20:43:43 -参数 : [{}]
2019-04-03 20:43:43 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2019-04-03 20:43:43 -==> Parameters: 1(Long)
2019-04-03 20:43:43 -<==      Total: 46
2019-04-03 20:43:43 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2019-04-03 20:43:43 -==> Parameters: 138(Long)
2019-04-03 20:43:43 -<==      Total: 1
2019-04-03 20:43:43 -耗时 : 35
2019-04-03 20:43:43 -返回值 : index_v1
2019-04-03 20:43:43 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 20:43:43 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 35(Integer), com.bootdo.system.controller.LoginController.index()(String), {"menus":[{"attributes":{"icon":"fa fa-money","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-money","url":"/moneyList/moneyList"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"102","parentId":"106","text":"现金缴费"},{"attributes":{"icon":"fa fa-book","url":"/moneyLog/elecLog"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"107","parentId":"106","text":"缴费记录"}],"hasChildren":true,"hasParent":false,"id":"106","parentId":"0","text":"收费管理"},{"attributes":{"icon":"fa fa-lightbulb-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/elec/elec"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"121","parentId":"103","text":"电费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"elec/elecInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"122","parentId":"103","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"elec/elecUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"123","parentId":"103","text":"电表上传"},{"attributes":{"icon":"fa fa-cc","url":"/elec/elecPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"124","parentId":"103","text":"电价管理"}],"hasChildren":true,"hasParent":false,"id":"103","parentId":"0","text":"电费管理"},{"attributes":{"icon":"fa fa-tint","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/water/water"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"117","parentId":"105","text":"水费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"water/waterInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"118","parentId":"105","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"water/waterUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"119","parentId":"105","text":"水费生成"},{"attributes":{"icon":"fa fa-cc","url":"/water/waterPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"120","parentId":"105","text":"水价管理"}],"hasChildren":true,"hasParent":false,"id":"105","parentId":"0","text":"水费管理"},{"attributes":{"icon":"fa fa-fire","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/heat/heat"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"113","parentId":"104","text":"暖费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"heat/heatInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"114","parentId":"104","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"heat/heatUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"115","parentId":"104","text":"暖费生成"},{"attributes":{"icon":"","url":"/heat/heatPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"116","parentId":"104","text":"暖价管理"}],"hasChildren":true,"hasParent":false,"id":"104","parentId":"0","text":"暖费管理"},{"attributes":{"icon":"fa fa-vcard-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-bomb","url":"/print/print"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"149","parentId":"108","text":"票据记录"}],"hasChildren":true,"hasParent":false,"id":"108","parentId":"0","text":"票据管理"},{"attributes":{"icon":"fa fa-bar-chart","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-area-chart","url":"/chart/graph_echarts.html"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","text":"百度chart"},{"attributes":{"icon":"fa fa-sun-o","url":"charts/countDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"109","parentId":"97","text":"日统计报表"},{"attributes":{"icon":"fa fa-registered","url":"charts/countMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"110","parentId":"97","text":"月统计报表"},{"attributes":{"icon":"fa fa-support","url":"charts/countYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"111","parentId":"97","text":"年统计报表"},{"attributes":{"icon":"fa fa-money","url":"charts/countOwe"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"155","parentId":"97","text":"欠费报表图"},{"attributes":{"icon":"fa fa-tachometer","url":"charts/countRun"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"112","parentId":"97","text":"走势图报表"}],"hasChildren":true,"hasParent":false,"id":"97","parentId":"0","text":"统计管理"},{"attributes":{"icon":"fa fa-bars","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-book","url":"/common/dict"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"78","parentId":"1","text":"数据字典"},{"attributes":{"icon":"fa fa-folder-open","url":"/common/sysFile"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"71","parentId":"1","text":"文件管理"}],"h(String), 127.0.0.1(String), 2019-04-03 20:43:43.888(Timestamp)
2019-04-03 20:43:44 -<==    Updates: 1
2019-04-03 20:43:44 -请求地址 : http://localhost:8081/main
2019-04-03 20:43:44 -HTTP METHOD : GET
2019-04-03 20:43:44 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 20:43:44 -参数 : []
2019-04-03 20:43:44 -耗时 : 0
2019-04-03 20:43:44 -返回值 : main
2019-04-03 20:43:44 -请求地址 : http://localhost:8081/oa/notify/message
2019-04-03 20:43:44 -HTTP METHOD : GET
2019-04-03 20:43:44 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2019-04-03 20:43:44 -参数 : []
2019-04-03 20:43:44 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2019-04-03 20:43:44 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2019-04-03 20:43:44 -<==      Total: 0
2019-04-03 20:43:44 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2019-04-03 20:43:44 -==> Parameters: 1(Long), 0(String)
2019-04-03 20:43:44 -<==      Total: 1
2019-04-03 20:43:44 -耗时 : 7
2019-04-03 20:43:44 -返回值 : com.bootdo.common.utils.PageUtils@3cdf6365
2019-04-03 20:43:44 -请求地址 : http://localhost:8081/main
2019-04-03 20:43:44 -HTTP METHOD : GET
2019-04-03 20:43:44 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 20:43:44 -参数 : []
2019-04-03 20:43:44 -耗时 : 1
2019-04-03 20:43:44 -返回值 : main
2019-04-03 20:43:46 -请求地址 : http://localhost:8081/water/water
2019-04-03 20:43:46 -HTTP METHOD : GET
2019-04-03 20:43:46 -CLASS_METHOD : com.bootdo.water.controller.WaterController.Water
2019-04-03 20:43:46 -参数 : []
2019-04-03 20:43:46 -耗时 : 0
2019-04-03 20:43:46 -返回值 : water/water/water
2019-04-03 20:43:46 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-03 20:43:46 -HTTP METHOD : GET
2019-04-03 20:43:46 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 20:43:46 -参数 : [userType]
2019-04-03 20:43:46 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 20:43:46 -==> Parameters: userType(String)
2019-04-03 20:43:46 -<==      Total: 2
2019-04-03 20:43:46 -耗时 : 3
2019-04-03 20:43:46 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 20:43:46 -请求地址 : http://localhost:8081/water/water/list
2019-04-03 20:43:46 -HTTP METHOD : GET
2019-04-03 20:43:46 -CLASS_METHOD : com.bootdo.water.controller.WaterController.list
2019-04-03 20:43:46 -参数 : [{limit=3, offset=0, userType=, userOrg=, userId=, createTime=, queryType=1}]
2019-04-03 20:43:46 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`water_type`,`water_price`,`water_cost`,`water_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from water order by id asc limit ?, ? 
2019-04-03 20:43:46 -==> Parameters: 0(Integer), 3(Integer)
2019-04-03 20:43:46 -<==      Total: 3
2019-04-03 20:43:46 -==>  Preparing: select count(*) from water 
2019-04-03 20:43:46 -==> Parameters: 
2019-04-03 20:43:46 -<==      Total: 1
2019-04-03 20:43:46 -耗时 : 15
2019-04-03 20:43:46 -返回值 : com.bootdo.common.utils.PageUtils@6b327e92
2019-04-03 20:43:50 -请求地址 : http://localhost:8081/water/water/edit/1
2019-04-03 20:43:50 -HTTP METHOD : GET
2019-04-03 20:43:50 -CLASS_METHOD : com.bootdo.water.controller.WaterController.edit
2019-04-03 20:43:50 -参数 : [1, {}]
2019-04-03 20:43:50 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`water_type`,`water_price`,`water_cost`,`water_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from water where id = ? 
2019-04-03 20:43:50 -==> Parameters: 1(Long)
2019-04-03 20:43:50 -<==      Total: 1
2019-04-03 20:43:50 -耗时 : 5
2019-04-03 20:43:50 -返回值 : water/water/edit
2019-04-03 20:43:50 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-03 20:43:50 -HTTP METHOD : GET
2019-04-03 20:43:50 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 20:43:50 -参数 : [userType]
2019-04-03 20:43:50 -请求地址 : http://localhost:8081/common/dict/list/userState
2019-04-03 20:43:50 -HTTP METHOD : GET
2019-04-03 20:43:50 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 20:43:50 -参数 : [userState]
2019-04-03 20:43:50 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 20:43:50 -==> Parameters: userState(String)
2019-04-03 20:43:50 -<==      Total: 2
2019-04-03 20:43:50 -请求地址 : http://localhost:8081/common/dict/list/waterType
2019-04-03 20:43:50 -HTTP METHOD : GET
2019-04-03 20:43:50 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 20:43:50 -参数 : [waterType]
2019-04-03 20:43:50 -耗时 : 6
2019-04-03 20:43:50 -返回值 : [DictDO{id=126, name='使用中', value='1', type='userState', description='用户状态', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=125, name='未使用', value='0', type='userState', description='用户状态', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 20:43:50 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 20:43:50 -==> Parameters: waterType(String)
2019-04-03 20:43:50 -<==      Total: 6
2019-04-03 20:43:50 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 20:43:50 -耗时 : 4
2019-04-03 20:43:50 -==> Parameters: userType(String)
2019-04-03 20:43:50 -<==      Total: 2
2019-04-03 20:43:50 -返回值 : [DictDO{id=132, name='特殊水费4', value='5', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=131, name='特殊水费3', value='4', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=130, name='特殊水费2', value='3', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=129, name='特殊水费1', value='2', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=128, name='民用水', value='1', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=127, name='商业水', value='0', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 20:43:50 -耗时 : 21
2019-04-03 20:43:50 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 20:44:11 -请求地址 : http://localhost:8081/water/water/update
2019-04-03 20:44:11 -HTTP METHOD : POST
2019-04-03 20:44:11 -CLASS_METHOD : com.bootdo.water.controller.WaterController.update
2019-04-03 20:44:11 -参数 : [com.bootdo.water.domain.WaterDO@37cabea0]
2019-04-03 20:44:11 -==>  Preparing: update water SET `user_id` = ?, `user_name` = ?, `user_type` = ?, `user_org` = ?, `user_tell` = ?, `user_state` = ?, `wages_id` = ?, `water_type` = ?, `water_price` = ?, `water_cost` = ?, `water_sum` = ?, `create_time` = ?, `create_by` = ?, `update_time` = ?, `update_by` = ?, `remark` = ? where id = ? 
2019-04-03 20:44:11 -==> Parameters: 1-0004(String), 姜海龙(String), A(String), 2(String), 16716675678(String), 1(String), 10005(String), 1(String), 15(BigDecimal), 15(BigDecimal), -110(BigDecimal), 2019-02(String), 1(Long), 2019-04-03 20:44:11.661(Timestamp), 1(Long), (String), 1(Long)
2019-04-03 20:44:11 -<==    Updates: 1
2019-04-03 20:44:11 -耗时 : 126
2019-04-03 20:44:11 -返回值 : {msg=操作成功, code=0}
2019-04-03 20:44:11 -请求地址 : http://localhost:8081/water/water/list
2019-04-03 20:44:11 -HTTP METHOD : GET
2019-04-03 20:44:11 -CLASS_METHOD : com.bootdo.water.controller.WaterController.list
2019-04-03 20:44:11 -参数 : [{limit=3, offset=0, userType=, userOrg=, userId=, createTime=, queryType=2}]
2019-04-03 20:44:11 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`water_type`,`water_price`,`water_cost`,`water_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from water WHERE `water_sum` < 0 order by id asc limit ?, ? 
2019-04-03 20:44:11 -==> Parameters: 0(Integer), 3(Integer)
2019-04-03 20:44:11 -<==      Total: 2
2019-04-03 20:44:11 -==>  Preparing: select count(*) from water WHERE `water_sum` < 0 
2019-04-03 20:44:11 -==> Parameters: 
2019-04-03 20:44:11 -<==      Total: 1
2019-04-03 20:44:11 -耗时 : 9
2019-04-03 20:44:11 -返回值 : com.bootdo.common.utils.PageUtils@35acedec
2019-04-03 20:44:44 -请求地址 : http://localhost:8081/water/water/add
2019-04-03 20:44:44 -HTTP METHOD : GET
2019-04-03 20:44:44 -CLASS_METHOD : com.bootdo.water.controller.WaterController.add
2019-04-03 20:44:44 -参数 : []
2019-04-03 20:44:44 -耗时 : 0
2019-04-03 20:44:44 -返回值 : water/water/add
2019-04-03 20:44:44 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-03 20:44:44 -HTTP METHOD : GET
2019-04-03 20:44:44 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 20:44:44 -参数 : [userType]
2019-04-03 20:44:44 -请求地址 : http://localhost:8081/common/dict/list/userState
2019-04-03 20:44:44 -HTTP METHOD : GET
2019-04-03 20:44:44 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 20:44:44 -参数 : [userState]
2019-04-03 20:44:44 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 20:44:44 -请求地址 : http://localhost:8081/common/dict/list/waterType
2019-04-03 20:44:44 -HTTP METHOD : GET
2019-04-03 20:44:44 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 20:44:44 -参数 : [waterType]
2019-04-03 20:44:44 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 20:44:44 -==> Parameters: userState(String)
2019-04-03 20:44:44 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 20:44:44 -==> Parameters: waterType(String)
2019-04-03 20:44:44 -==> Parameters: userType(String)
2019-04-03 20:44:44 -<==      Total: 2
2019-04-03 20:44:44 -<==      Total: 6
2019-04-03 20:44:44 -耗时 : 4
2019-04-03 20:44:44 -耗时 : 6
2019-04-03 20:44:44 -返回值 : [DictDO{id=132, name='特殊水费4', value='5', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=131, name='特殊水费3', value='4', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=130, name='特殊水费2', value='3', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=129, name='特殊水费1', value='2', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=128, name='民用水', value='1', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=127, name='商业水', value='0', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 20:44:44 -<==      Total: 2
2019-04-03 20:44:44 -返回值 : [DictDO{id=126, name='使用中', value='1', type='userState', description='用户状态', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=125, name='未使用', value='0', type='userState', description='用户状态', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 20:44:44 -耗时 : 18
2019-04-03 20:44:44 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 20:44:58 -请求地址 : http://localhost:8081/heat/heat
2019-04-03 20:44:58 -HTTP METHOD : GET
2019-04-03 20:44:58 -CLASS_METHOD : com.bootdo.heat.controller.HeatController.Heat
2019-04-03 20:44:58 -参数 : []
2019-04-03 20:44:58 -耗时 : 0
2019-04-03 20:44:58 -返回值 : heat/heat/heat
2019-04-03 20:44:59 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-03 20:44:59 -HTTP METHOD : GET
2019-04-03 20:44:59 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 20:44:59 -参数 : [userType]
2019-04-03 20:44:59 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 20:44:59 -==> Parameters: userType(String)
2019-04-03 20:44:59 -<==      Total: 2
2019-04-03 20:44:59 -耗时 : 4
2019-04-03 20:44:59 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 20:44:59 -请求地址 : http://localhost:8081/heat/heat/list
2019-04-03 20:44:59 -HTTP METHOD : GET
2019-04-03 20:44:59 -CLASS_METHOD : com.bootdo.heat.controller.HeatController.list
2019-04-03 20:44:59 -参数 : [{limit=10, offset=0, userType=, userOrg=, userId=, createTime=, queryType=1}]
2019-04-03 20:44:59 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`heat_type`,`heat_price`,`heat_area`,`heat_cost`,`heat_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from heat order by id asc limit ?, ? 
2019-04-03 20:44:59 -==> Parameters: 0(Integer), 10(Integer)
2019-04-03 20:44:59 -<==      Total: 10
2019-04-03 20:44:59 -==>  Preparing: select count(*) from heat 
2019-04-03 20:44:59 -==> Parameters: 
2019-04-03 20:44:59 -<==      Total: 1
2019-04-03 20:44:59 -耗时 : 77
2019-04-03 20:44:59 -返回值 : com.bootdo.common.utils.PageUtils@5fcfae2e
2019-04-03 20:45:21 -请求地址 : http://localhost:8081/heat/heat/edit/2
2019-04-03 20:45:21 -HTTP METHOD : GET
2019-04-03 20:45:21 -CLASS_METHOD : com.bootdo.heat.controller.HeatController.edit
2019-04-03 20:45:21 -参数 : [2, {}]
2019-04-03 20:45:21 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`heat_type`,`heat_price`,`heat_area`,`heat_cost`,`heat_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from heat where id = ? 
2019-04-03 20:45:21 -==> Parameters: 2(Integer)
2019-04-03 20:45:21 -<==      Total: 1
2019-04-03 20:45:21 -耗时 : 11
2019-04-03 20:45:21 -返回值 : heat/heat/edit
2019-04-03 20:45:21 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-03 20:45:21 -HTTP METHOD : GET
2019-04-03 20:45:21 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 20:45:21 -参数 : [userType]
2019-04-03 20:45:21 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 20:45:21 -==> Parameters: userType(String)
2019-04-03 20:45:21 -请求地址 : http://localhost:8081/common/dict/list/userState
2019-04-03 20:45:21 -HTTP METHOD : GET
2019-04-03 20:45:21 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 20:45:21 -参数 : [userState]
2019-04-03 20:45:21 -请求地址 : http://localhost:8081/common/dict/list/heatType
2019-04-03 20:45:21 -HTTP METHOD : GET
2019-04-03 20:45:21 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 20:45:21 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 20:45:21 -参数 : [heatType]
2019-04-03 20:45:21 -<==      Total: 2
2019-04-03 20:45:21 -==> Parameters: userState(String)
2019-04-03 20:45:21 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 20:45:21 -耗时 : 3
2019-04-03 20:45:21 -==> Parameters: heatType(String)
2019-04-03 20:45:21 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 20:45:21 -<==      Total: 2
2019-04-03 20:45:21 -耗时 : 3
2019-04-03 20:45:21 -返回值 : [DictDO{id=126, name='使用中', value='1', type='userState', description='用户状态', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=125, name='未使用', value='0', type='userState', description='用户状态', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 20:45:21 -<==      Total: 5
2019-04-03 20:45:21 -耗时 : 7
2019-04-03 20:45:21 -返回值 : [DictDO{id=137, name='特殊暖费1', value='4', type='heatType', description='暖气类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=136, name='工业非盈利', value='3', type='heatType', description='暖气类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=135, name='工业盈利', value='2', type='heatType', description='暖气类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=134, name='民用暖', value='1', type='heatType', description='暖气类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=133, name='商业暖', value='0', type='heatType', description='暖气类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 20:45:24 -请求地址 : http://localhost:8081/heat/heat/update
2019-04-03 20:45:24 -HTTP METHOD : POST
2019-04-03 20:45:24 -CLASS_METHOD : com.bootdo.heat.controller.HeatController.update
2019-04-03 20:45:24 -参数 : [com.bootdo.heat.domain.HeatDO@23d308f7]
2019-04-03 20:45:24 -==>  Preparing: update heat SET `user_id` = ?, `user_name` = ?, `user_type` = ?, `user_org` = ?, `user_tell` = ?, `user_state` = ?, `wages_id` = ?, `heat_type` = ?, `heat_price` = ?, `heat_area` = ?, `heat_cost` = ?, `heat_sum` = ?, `create_by` = ?, `update_time` = ?, `update_by` = ?, `remark` = ? where id = ? 
2019-04-03 20:45:24 -==> Parameters: 1-002(String), 新东方(String), A(String), 2(String), (String), 1(String), 10002(String), 1(String), 1.00(BigDecimal), 100.00(BigDecimal), 100.00(BigDecimal), 100.00(BigDecimal), 1(Long), 2019-04-03 20:45:24.386(Timestamp), 1(Long), (String), 2(Integer)
2019-04-03 20:45:24 -<==    Updates: 1
2019-04-03 20:45:24 -耗时 : 83
2019-04-03 20:45:24 -返回值 : {msg=操作成功, code=0}
2019-04-03 20:45:24 -请求地址 : http://localhost:8081/heat/heat/list
2019-04-03 20:45:24 -HTTP METHOD : GET
2019-04-03 20:45:24 -CLASS_METHOD : com.bootdo.heat.controller.HeatController.list
2019-04-03 20:45:24 -参数 : [{limit=10, offset=0, userType=, userOrg=, userId=, createTime=, queryType=2}]
2019-04-03 20:45:24 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`heat_type`,`heat_price`,`heat_area`,`heat_cost`,`heat_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from heat WHERE `heat_sum` < 0 order by id asc limit ?, ? 
2019-04-03 20:45:24 -==> Parameters: 0(Integer), 10(Integer)
2019-04-03 20:45:24 -<==      Total: 10
2019-04-03 20:45:24 -==>  Preparing: select count(*) from heat WHERE `heat_sum` < 0 
2019-04-03 20:45:24 -==> Parameters: 
2019-04-03 20:45:24 -<==      Total: 1
2019-04-03 20:45:24 -耗时 : 17
2019-04-03 20:45:24 -返回值 : com.bootdo.common.utils.PageUtils@1df08462
2019-04-03 20:45:25 -请求地址 : http://localhost:8081/heat/heat/edit/1
2019-04-03 20:45:25 -HTTP METHOD : GET
2019-04-03 20:45:25 -CLASS_METHOD : com.bootdo.heat.controller.HeatController.edit
2019-04-03 20:45:25 -参数 : [1, {}]
2019-04-03 20:45:25 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`heat_type`,`heat_price`,`heat_area`,`heat_cost`,`heat_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from heat where id = ? 
2019-04-03 20:45:25 -==> Parameters: 1(Integer)
2019-04-03 20:45:25 -<==      Total: 1
2019-04-03 20:45:25 -耗时 : 7
2019-04-03 20:45:25 -返回值 : heat/heat/edit
2019-04-03 20:45:26 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-03 20:45:26 -HTTP METHOD : GET
2019-04-03 20:45:26 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 20:45:26 -参数 : [userType]
2019-04-03 20:45:26 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 20:45:26 -==> Parameters: userType(String)
2019-04-03 20:45:26 -请求地址 : http://localhost:8081/common/dict/list/userState
2019-04-03 20:45:26 -HTTP METHOD : GET
2019-04-03 20:45:26 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 20:45:26 -参数 : [userState]
2019-04-03 20:45:26 -请求地址 : http://localhost:8081/common/dict/list/heatType
2019-04-03 20:45:26 -HTTP METHOD : GET
2019-04-03 20:45:26 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 20:45:26 -参数 : [heatType]
2019-04-03 20:45:26 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 20:45:26 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 20:45:26 -==> Parameters: heatType(String)
2019-04-03 20:45:26 -==> Parameters: userState(String)
2019-04-03 20:45:26 -<==      Total: 2
2019-04-03 20:45:26 -耗时 : 4
2019-04-03 20:45:26 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 20:45:26 -<==      Total: 2
2019-04-03 20:45:26 -<==      Total: 5
2019-04-03 20:45:26 -耗时 : 4
2019-04-03 20:45:26 -耗时 : 4
2019-04-03 20:45:26 -返回值 : [DictDO{id=126, name='使用中', value='1', type='userState', description='用户状态', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=125, name='未使用', value='0', type='userState', description='用户状态', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 20:45:26 -返回值 : [DictDO{id=137, name='特殊暖费1', value='4', type='heatType', description='暖气类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=136, name='工业非盈利', value='3', type='heatType', description='暖气类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=135, name='工业盈利', value='2', type='heatType', description='暖气类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=134, name='民用暖', value='1', type='heatType', description='暖气类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=133, name='商业暖', value='0', type='heatType', description='暖气类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 20:57:44 -WebSocketSession[1 current WS(1)-HttpStream(0)-HttpPoll(0), 6 total, 0 closed abnormally (0 connect failure, 0 send limit, 0 transport error)], stompSubProtocol[processed CONNECT(6)-CONNECTED(6)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 69], outboundChannelpool size = 0, active threads = 0, queued tasks = 0, completed tasks = 11], sockJsScheduler[pool size = 4, active threads = 1, queued tasks = 2, completed tasks = 1275]
2019-04-03 20:59:15 -请求地址 : http://localhost:8081/index
2019-04-03 20:59:15 -HTTP METHOD : GET
2019-04-03 20:59:15 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2019-04-03 20:59:15 -参数 : [{}]
2019-04-03 20:59:15 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2019-04-03 20:59:15 -==> Parameters: 1(Long)
2019-04-03 20:59:15 -<==      Total: 46
2019-04-03 20:59:15 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2019-04-03 20:59:15 -==> Parameters: 138(Long)
2019-04-03 20:59:15 -<==      Total: 1
2019-04-03 20:59:15 -耗时 : 25
2019-04-03 20:59:15 -返回值 : index_v1
2019-04-03 20:59:15 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 20:59:15 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 26(Integer), com.bootdo.system.controller.LoginController.index()(String), {"menus":[{"attributes":{"icon":"fa fa-money","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-money","url":"/moneyList/moneyList"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"102","parentId":"106","text":"现金缴费"},{"attributes":{"icon":"fa fa-book","url":"/moneyLog/elecLog"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"107","parentId":"106","text":"缴费记录"}],"hasChildren":true,"hasParent":false,"id":"106","parentId":"0","text":"收费管理"},{"attributes":{"icon":"fa fa-lightbulb-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/elec/elec"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"121","parentId":"103","text":"电费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"elec/elecInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"122","parentId":"103","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"elec/elecUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"123","parentId":"103","text":"电表上传"},{"attributes":{"icon":"fa fa-cc","url":"/elec/elecPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"124","parentId":"103","text":"电价管理"}],"hasChildren":true,"hasParent":false,"id":"103","parentId":"0","text":"电费管理"},{"attributes":{"icon":"fa fa-tint","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/water/water"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"117","parentId":"105","text":"水费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"water/waterInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"118","parentId":"105","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"water/waterUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"119","parentId":"105","text":"水费生成"},{"attributes":{"icon":"fa fa-cc","url":"/water/waterPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"120","parentId":"105","text":"水价管理"}],"hasChildren":true,"hasParent":false,"id":"105","parentId":"0","text":"水费管理"},{"attributes":{"icon":"fa fa-fire","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/heat/heat"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"113","parentId":"104","text":"暖费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"heat/heatInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"114","parentId":"104","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"heat/heatUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"115","parentId":"104","text":"暖费生成"},{"attributes":{"icon":"","url":"/heat/heatPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"116","parentId":"104","text":"暖价管理"}],"hasChildren":true,"hasParent":false,"id":"104","parentId":"0","text":"暖费管理"},{"attributes":{"icon":"fa fa-vcard-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-bomb","url":"/print/print"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"149","parentId":"108","text":"票据记录"}],"hasChildren":true,"hasParent":false,"id":"108","parentId":"0","text":"票据管理"},{"attributes":{"icon":"fa fa-bar-chart","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-area-chart","url":"/chart/graph_echarts.html"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","text":"百度chart"},{"attributes":{"icon":"fa fa-sun-o","url":"charts/countDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"109","parentId":"97","text":"日统计报表"},{"attributes":{"icon":"fa fa-registered","url":"charts/countMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"110","parentId":"97","text":"月统计报表"},{"attributes":{"icon":"fa fa-support","url":"charts/countYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"111","parentId":"97","text":"年统计报表"},{"attributes":{"icon":"fa fa-money","url":"charts/countOwe"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"155","parentId":"97","text":"欠费报表图"},{"attributes":{"icon":"fa fa-tachometer","url":"charts/countRun"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"112","parentId":"97","text":"走势图报表"}],"hasChildren":true,"hasParent":false,"id":"97","parentId":"0","text":"统计管理"},{"attributes":{"icon":"fa fa-bars","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-book","url":"/common/dict"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"78","parentId":"1","text":"数据字典"},{"attributes":{"icon":"fa fa-folder-open","url":"/common/sysFile"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"71","parentId":"1","text":"文件管理"}],"h(String), 127.0.0.1(String), 2019-04-03 20:59:15.06(Timestamp)
2019-04-03 20:59:15 -请求地址 : http://localhost:8081/main
2019-04-03 20:59:15 -HTTP METHOD : GET
2019-04-03 20:59:15 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 20:59:15 -参数 : []
2019-04-03 20:59:15 -耗时 : 0
2019-04-03 20:59:15 -返回值 : main
2019-04-03 20:59:15 -<==    Updates: 1
2019-04-03 20:59:15 -请求地址 : http://localhost:8081/oa/notify/message
2019-04-03 20:59:15 -HTTP METHOD : GET
2019-04-03 20:59:15 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2019-04-03 20:59:15 -参数 : []
2019-04-03 20:59:15 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2019-04-03 20:59:15 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2019-04-03 20:59:15 -<==      Total: 0
2019-04-03 20:59:15 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2019-04-03 20:59:15 -==> Parameters: 1(Long), 0(String)
2019-04-03 20:59:15 -<==      Total: 1
2019-04-03 20:59:15 -耗时 : 9
2019-04-03 20:59:15 -返回值 : com.bootdo.common.utils.PageUtils@6aa3279f
2019-04-03 20:59:15 -请求地址 : http://localhost:8081/main
2019-04-03 20:59:15 -HTTP METHOD : GET
2019-04-03 20:59:15 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 20:59:15 -参数 : []
2019-04-03 20:59:15 -耗时 : 1
2019-04-03 20:59:15 -返回值 : main
2019-04-03 20:59:17 -==>  Preparing: select distinct m.perms from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id = ur.role_id where ur.user_id = ? 
2019-04-03 20:59:17 -==> Parameters: 1(Long)
2019-04-03 20:59:17 -<==      Total: 90
2019-04-03 20:59:17 -请求地址 : http://localhost:8081/water/water
2019-04-03 20:59:17 -HTTP METHOD : GET
2019-04-03 20:59:17 -CLASS_METHOD : com.bootdo.water.controller.WaterController.Water
2019-04-03 20:59:17 -参数 : []
2019-04-03 20:59:17 -耗时 : 0
2019-04-03 20:59:17 -返回值 : water/water/water
2019-04-03 20:59:17 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-03 20:59:17 -HTTP METHOD : GET
2019-04-03 20:59:17 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 20:59:17 -参数 : [userType]
2019-04-03 20:59:17 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 20:59:17 -==> Parameters: userType(String)
2019-04-03 20:59:17 -<==      Total: 2
2019-04-03 20:59:17 -耗时 : 5
2019-04-03 20:59:17 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 20:59:17 -请求地址 : http://localhost:8081/water/water/list
2019-04-03 20:59:17 -HTTP METHOD : GET
2019-04-03 20:59:17 -CLASS_METHOD : com.bootdo.water.controller.WaterController.list
2019-04-03 20:59:17 -参数 : [{limit=3, offset=0, userType=, userOrg=, userId=, createTime=, queryType=1}]
2019-04-03 20:59:17 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`water_type`,`water_price`,`water_cost`,`water_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from water order by id asc limit ?, ? 
2019-04-03 20:59:17 -==> Parameters: 0(Integer), 3(Integer)
2019-04-03 20:59:17 -<==      Total: 3
2019-04-03 20:59:17 -==>  Preparing: select count(*) from water 
2019-04-03 20:59:17 -==> Parameters: 
2019-04-03 20:59:17 -<==      Total: 1
2019-04-03 20:59:17 -耗时 : 6
2019-04-03 20:59:17 -返回值 : com.bootdo.common.utils.PageUtils@5aec7ace
2019-04-03 20:59:20 -请求地址 : http://localhost:8081/water/water/edit/1
2019-04-03 20:59:20 -HTTP METHOD : GET
2019-04-03 20:59:20 -CLASS_METHOD : com.bootdo.water.controller.WaterController.edit
2019-04-03 20:59:20 -参数 : [1, {}]
2019-04-03 20:59:20 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`water_type`,`water_price`,`water_cost`,`water_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from water where id = ? 
2019-04-03 20:59:20 -==> Parameters: 1(Long)
2019-04-03 20:59:20 -<==      Total: 1
2019-04-03 20:59:20 -耗时 : 6
2019-04-03 20:59:20 -返回值 : water/water/edit
2019-04-03 20:59:20 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-03 20:59:20 -HTTP METHOD : GET
2019-04-03 20:59:20 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 20:59:20 -参数 : [userType]
2019-04-03 20:59:20 -请求地址 : http://localhost:8081/common/dict/list/userState
2019-04-03 20:59:20 -请求地址 : http://localhost:8081/common/dict/list/waterType
2019-04-03 20:59:20 -HTTP METHOD : GET
2019-04-03 20:59:20 -HTTP METHOD : GET
2019-04-03 20:59:20 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 20:59:20 -参数 : [userState]
2019-04-03 20:59:20 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 20:59:20 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 20:59:20 -参数 : [waterType]
2019-04-03 20:59:20 -==> Parameters: userType(String)
2019-04-03 20:59:20 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 20:59:20 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 20:59:20 -==> Parameters: userState(String)
2019-04-03 20:59:20 -==> Parameters: waterType(String)
2019-04-03 20:59:20 -<==      Total: 2
2019-04-03 20:59:20 -耗时 : 40
2019-04-03 20:59:20 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 20:59:20 -<==      Total: 2
2019-04-03 20:59:20 -耗时 : 42
2019-04-03 20:59:20 -返回值 : [DictDO{id=126, name='使用中', value='1', type='userState', description='用户状态', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=125, name='未使用', value='0', type='userState', description='用户状态', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 20:59:20 -<==      Total: 6
2019-04-03 20:59:20 -耗时 : 48
2019-04-03 20:59:20 -返回值 : [DictDO{id=132, name='特殊水费4', value='5', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=131, name='特殊水费3', value='4', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=130, name='特殊水费2', value='3', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=129, name='特殊水费1', value='2', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=128, name='民用水', value='1', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=127, name='商业水', value='0', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 20:59:34 -请求地址 : http://localhost:8081/water/water/update
2019-04-03 20:59:34 -HTTP METHOD : POST
2019-04-03 20:59:34 -CLASS_METHOD : com.bootdo.water.controller.WaterController.update
2019-04-03 20:59:34 -参数 : [com.bootdo.water.domain.WaterDO@2535c45f]
2019-04-03 20:59:34 -==>  Preparing: update water SET `user_id` = ?, `user_name` = ?, `user_type` = ?, `user_org` = ?, `user_tell` = ?, `user_state` = ?, `wages_id` = ?, `water_type` = ?, `water_price` = ?, `water_cost` = ?, `water_sum` = ?, `create_time` = ?, `create_by` = ?, `update_time` = ?, `update_by` = ?, `remark` = ? where id = ? 
2019-04-03 20:59:34 -==> Parameters: 1-0004(String), 姜海龙(String), A(String), 2(String), 16716675678(String), 1(String), 10005(String), 1(String), 15(BigDecimal), 15(BigDecimal), -110(BigDecimal), 2019-02(String), 1(Long), 2019-04-03 20:59:34.051(Timestamp), 1(Long), (String), 1(Long)
2019-04-03 20:59:34 -<==    Updates: 1
2019-04-03 20:59:34 -耗时 : 109
2019-04-03 20:59:34 -返回值 : {msg=操作成功, code=0}
2019-04-03 20:59:34 -请求地址 : http://localhost:8081/water/water/list
2019-04-03 20:59:34 -HTTP METHOD : GET
2019-04-03 20:59:34 -CLASS_METHOD : com.bootdo.water.controller.WaterController.list
2019-04-03 20:59:34 -参数 : [{limit=3, offset=0, userType=, userOrg=, userId=, createTime=, queryType=2}]
2019-04-03 20:59:34 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`water_type`,`water_price`,`water_cost`,`water_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from water WHERE `water_sum` < 0 order by id asc limit ?, ? 
2019-04-03 20:59:34 -==> Parameters: 0(Integer), 3(Integer)
2019-04-03 20:59:34 -<==      Total: 2
2019-04-03 20:59:34 -==>  Preparing: select count(*) from water WHERE `water_sum` < 0 
2019-04-03 20:59:34 -==> Parameters: 
2019-04-03 20:59:34 -<==      Total: 1
2019-04-03 20:59:34 -耗时 : 8
2019-04-03 20:59:34 -返回值 : com.bootdo.common.utils.PageUtils@557ca6d3
2019-04-03 21:00:06 -请求地址 : http://localhost:8081/water/water/edit/1
2019-04-03 21:00:06 -HTTP METHOD : GET
2019-04-03 21:00:07 -CLASS_METHOD : com.bootdo.water.controller.WaterController.edit
2019-04-03 21:00:07 -参数 : [1, {}]
2019-04-03 21:00:07 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`water_type`,`water_price`,`water_cost`,`water_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from water where id = ? 
2019-04-03 21:00:07 -==> Parameters: 1(Long)
2019-04-03 21:00:07 -<==      Total: 1
2019-04-03 21:00:07 -耗时 : 4
2019-04-03 21:00:07 -返回值 : water/water/edit
2019-04-03 21:00:07 -请求地址 : http://localhost:8081/common/dict/list/waterType
2019-04-03 21:00:07 -HTTP METHOD : GET
2019-04-03 21:00:07 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 21:00:07 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-03 21:00:07 -请求地址 : http://localhost:8081/common/dict/list/userState
2019-04-03 21:00:07 -参数 : [waterType]
2019-04-03 21:00:07 -HTTP METHOD : GET
2019-04-03 21:00:07 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 21:00:07 -参数 : [userType]
2019-04-03 21:00:07 -HTTP METHOD : GET
2019-04-03 21:00:07 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 21:00:07 -参数 : [userState]
2019-04-03 21:00:07 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 21:00:07 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 21:00:07 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 21:00:07 -==> Parameters: waterType(String)
2019-04-03 21:00:07 -==> Parameters: userState(String)
2019-04-03 21:00:07 -==> Parameters: userType(String)
2019-04-03 21:00:07 -<==      Total: 2
2019-04-03 21:00:07 -<==      Total: 2
2019-04-03 21:00:07 -<==      Total: 6
2019-04-03 21:00:07 -耗时 : 4
2019-04-03 21:00:07 -耗时 : 4
2019-04-03 21:00:07 -耗时 : 4
2019-04-03 21:00:07 -返回值 : [DictDO{id=126, name='使用中', value='1', type='userState', description='用户状态', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=125, name='未使用', value='0', type='userState', description='用户状态', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 21:00:07 -返回值 : [DictDO{id=132, name='特殊水费4', value='5', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=131, name='特殊水费3', value='4', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=130, name='特殊水费2', value='3', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=129, name='特殊水费1', value='2', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=128, name='民用水', value='1', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=127, name='商业水', value='0', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 21:00:07 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 21:00:30 -请求地址 : http://localhost:8081/print/print
2019-04-03 21:00:30 -HTTP METHOD : GET
2019-04-03 21:00:30 -CLASS_METHOD : com.bootdo.print.controller.PrintController.Print
2019-04-03 21:00:30 -参数 : []
2019-04-03 21:00:30 -耗时 : 0
2019-04-03 21:00:30 -返回值 : print/print/print
2019-04-03 21:00:30 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-03 21:00:30 -HTTP METHOD : GET
2019-04-03 21:00:30 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 21:00:30 -参数 : [userType]
2019-04-03 21:00:30 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 21:00:30 -==> Parameters: userType(String)
2019-04-03 21:00:30 -<==      Total: 2
2019-04-03 21:00:30 -耗时 : 4
2019-04-03 21:00:30 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 21:00:30 -请求地址 : http://localhost:8081/print/print/list
2019-04-03 21:00:30 -HTTP METHOD : GET
2019-04-03 21:00:30 -CLASS_METHOD : com.bootdo.print.controller.PrintController.list
2019-04-03 21:00:30 -参数 : [{limit=10, offset=0, createTime=, userType=, userOrg=, userId=}]
2019-04-03 21:00:30 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`start`,`end`,`hu`,`elec_price`,`elec_amount`,`elec_cost`,`elec_sum`,`elec_money`,`heat_price`,`heat_area`,`heat_cost`,`heat_sum`,`heat_money`,`water_price`,`water_cost`,`water_sum`,`water_money`,`cost_poper`,`print_state`,`print_date`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from print order by id asc limit ?, ? 
2019-04-03 21:00:30 -==> Parameters: 0(Integer), 10(Integer)
2019-04-03 21:00:30 -<==      Total: 3
2019-04-03 21:00:30 -==>  Preparing: select count(*) from print 
2019-04-03 21:00:30 -==> Parameters: 
2019-04-03 21:00:30 -<==      Total: 1
2019-04-03 21:00:30 -耗时 : 87
2019-04-03 21:00:30 -返回值 : com.bootdo.common.utils.PageUtils@5466b1c9
2019-04-03 21:00:34 -请求地址 : http://localhost:8081/print/print/add
2019-04-03 21:00:34 -HTTP METHOD : GET
2019-04-03 21:00:34 -CLASS_METHOD : com.bootdo.print.controller.PrintController.add
2019-04-03 21:00:34 -参数 : []
2019-04-03 21:00:34 -耗时 : 0
2019-04-03 21:00:34 -返回值 : print/print/add
2019-04-03 21:00:34 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-03 21:00:34 -HTTP METHOD : GET
2019-04-03 21:00:34 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 21:00:34 -参数 : [userType]
2019-04-03 21:00:34 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 21:00:34 -==> Parameters: userType(String)
2019-04-03 21:00:34 -<==      Total: 2
2019-04-03 21:00:34 -耗时 : 3
2019-04-03 21:00:34 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 21:13:46 -请求地址 : http://localhost:8081/index
2019-04-03 21:13:46 -HTTP METHOD : GET
2019-04-03 21:13:46 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2019-04-03 21:13:46 -参数 : [{}]
2019-04-03 21:13:46 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2019-04-03 21:13:46 -==> Parameters: 1(Long)
2019-04-03 21:13:46 -<==      Total: 46
2019-04-03 21:13:46 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2019-04-03 21:13:46 -==> Parameters: 138(Long)
2019-04-03 21:13:46 -<==      Total: 1
2019-04-03 21:13:46 -耗时 : 93
2019-04-03 21:13:46 -返回值 : index_v1
2019-04-03 21:13:46 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 21:13:46 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 93(Integer), com.bootdo.system.controller.LoginController.index()(String), {"menus":[{"attributes":{"icon":"fa fa-money","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-money","url":"/moneyList/moneyList"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"102","parentId":"106","text":"现金缴费"},{"attributes":{"icon":"fa fa-book","url":"/moneyLog/elecLog"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"107","parentId":"106","text":"缴费记录"}],"hasChildren":true,"hasParent":false,"id":"106","parentId":"0","text":"收费管理"},{"attributes":{"icon":"fa fa-lightbulb-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/elec/elec"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"121","parentId":"103","text":"电费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"elec/elecInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"122","parentId":"103","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"elec/elecUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"123","parentId":"103","text":"电表上传"},{"attributes":{"icon":"fa fa-cc","url":"/elec/elecPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"124","parentId":"103","text":"电价管理"}],"hasChildren":true,"hasParent":false,"id":"103","parentId":"0","text":"电费管理"},{"attributes":{"icon":"fa fa-tint","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/water/water"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"117","parentId":"105","text":"水费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"water/waterInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"118","parentId":"105","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"water/waterUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"119","parentId":"105","text":"水费生成"},{"attributes":{"icon":"fa fa-cc","url":"/water/waterPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"120","parentId":"105","text":"水价管理"}],"hasChildren":true,"hasParent":false,"id":"105","parentId":"0","text":"水费管理"},{"attributes":{"icon":"fa fa-fire","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/heat/heat"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"113","parentId":"104","text":"暖费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"heat/heatInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"114","parentId":"104","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"heat/heatUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"115","parentId":"104","text":"暖费生成"},{"attributes":{"icon":"","url":"/heat/heatPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"116","parentId":"104","text":"暖价管理"}],"hasChildren":true,"hasParent":false,"id":"104","parentId":"0","text":"暖费管理"},{"attributes":{"icon":"fa fa-vcard-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-bomb","url":"/print/print"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"149","parentId":"108","text":"票据记录"}],"hasChildren":true,"hasParent":false,"id":"108","parentId":"0","text":"票据管理"},{"attributes":{"icon":"fa fa-bar-chart","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-area-chart","url":"/chart/graph_echarts.html"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","text":"百度chart"},{"attributes":{"icon":"fa fa-sun-o","url":"charts/countDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"109","parentId":"97","text":"日统计报表"},{"attributes":{"icon":"fa fa-registered","url":"charts/countMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"110","parentId":"97","text":"月统计报表"},{"attributes":{"icon":"fa fa-money","url":"charts/countOwe"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"155","parentId":"97","text":"欠费报表图"},{"attributes":{"icon":"fa fa-support","url":"charts/countYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"111","parentId":"97","text":"年统计报表"},{"attributes":{"icon":"fa fa-tachometer","url":"charts/countRun"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"112","parentId":"97","text":"走势图报表"}],"hasChildren":true,"hasParent":false,"id":"97","parentId":"0","text":"统计管理"},{"attributes":{"icon":"fa fa-bars","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-book","url":"/common/dict"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"78","parentId":"1","text":"数据字典"},{"attributes":{"icon":"fa fa-folder-open","url":"/common/sysFile"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"71","parentId":"1","text":"文件管理"}],"h(String), 127.0.0.1(String), 2019-04-03 21:13:46.369(Timestamp)
2019-04-03 21:13:46 -<==    Updates: 1
2019-04-03 21:13:46 -请求地址 : http://localhost:8081/main
2019-04-03 21:13:46 -HTTP METHOD : GET
2019-04-03 21:13:46 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 21:13:46 -参数 : []
2019-04-03 21:13:46 -耗时 : 1
2019-04-03 21:13:46 -返回值 : main
2019-04-03 21:13:46 -请求地址 : http://localhost:8081/oa/notify/message
2019-04-03 21:13:46 -HTTP METHOD : GET
2019-04-03 21:13:46 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2019-04-03 21:13:46 -参数 : []
2019-04-03 21:13:46 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2019-04-03 21:13:46 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2019-04-03 21:13:46 -<==      Total: 0
2019-04-03 21:13:46 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2019-04-03 21:13:46 -==> Parameters: 1(Long), 0(String)
2019-04-03 21:13:46 -<==      Total: 1
2019-04-03 21:13:46 -耗时 : 8
2019-04-03 21:13:46 -返回值 : com.bootdo.common.utils.PageUtils@52b5c35e
2019-04-03 21:13:46 -请求地址 : http://localhost:8081/main
2019-04-03 21:13:46 -HTTP METHOD : GET
2019-04-03 21:13:46 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 21:13:46 -参数 : []
2019-04-03 21:13:46 -耗时 : 0
2019-04-03 21:13:46 -返回值 : main
2019-04-03 21:13:48 -==>  Preparing: select distinct m.perms from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id = ur.role_id where ur.user_id = ? 
2019-04-03 21:13:48 -==> Parameters: 1(Long)
2019-04-03 21:13:48 -<==      Total: 90
2019-04-03 21:13:48 -请求地址 : http://localhost:8081/print/print
2019-04-03 21:13:48 -HTTP METHOD : GET
2019-04-03 21:13:48 -CLASS_METHOD : com.bootdo.print.controller.PrintController.Print
2019-04-03 21:13:48 -参数 : []
2019-04-03 21:13:48 -耗时 : 70
2019-04-03 21:13:48 -返回值 : print/print/print
2019-04-03 21:13:48 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-03 21:13:48 -HTTP METHOD : GET
2019-04-03 21:13:48 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 21:13:48 -参数 : [userType]
2019-04-03 21:13:48 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 21:13:48 -==> Parameters: userType(String)
2019-04-03 21:13:48 -<==      Total: 2
2019-04-03 21:13:48 -耗时 : 5
2019-04-03 21:13:48 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 21:13:48 -请求地址 : http://localhost:8081/print/print/list
2019-04-03 21:13:48 -HTTP METHOD : GET
2019-04-03 21:13:48 -CLASS_METHOD : com.bootdo.print.controller.PrintController.list
2019-04-03 21:13:48 -参数 : [{limit=10, offset=0, createTime=, userType=, userOrg=, userId=}]
2019-04-03 21:13:48 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`start`,`end`,`hu`,`elec_price`,`elec_amount`,`elec_cost`,`elec_sum`,`elec_money`,`heat_price`,`heat_area`,`heat_cost`,`heat_sum`,`heat_money`,`water_price`,`water_cost`,`water_sum`,`water_money`,`cost_poper`,`print_state`,`print_date`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from print order by id asc limit ?, ? 
2019-04-03 21:13:48 -==> Parameters: 0(Integer), 10(Integer)
2019-04-03 21:13:48 -<==      Total: 3
2019-04-03 21:13:48 -==>  Preparing: select count(*) from print 
2019-04-03 21:13:48 -==> Parameters: 
2019-04-03 21:13:48 -<==      Total: 1
2019-04-03 21:13:48 -耗时 : 8
2019-04-03 21:13:48 -返回值 : com.bootdo.common.utils.PageUtils@5eb7876f
2019-04-03 21:13:50 -请求地址 : http://localhost:8081/print/print/add
2019-04-03 21:13:50 -HTTP METHOD : GET
2019-04-03 21:13:50 -CLASS_METHOD : com.bootdo.print.controller.PrintController.add
2019-04-03 21:13:50 -参数 : []
2019-04-03 21:13:50 -耗时 : 1
2019-04-03 21:13:50 -返回值 : print/print/add
2019-04-03 21:13:51 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-03 21:13:51 -HTTP METHOD : GET
2019-04-03 21:13:51 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 21:13:51 -参数 : [userType]
2019-04-03 21:13:51 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 21:13:51 -==> Parameters: userType(String)
2019-04-03 21:13:51 -<==      Total: 2
2019-04-03 21:13:51 -耗时 : 3
2019-04-03 21:13:51 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 21:14:34 -请求地址 : http://localhost:8081/index
2019-04-03 21:14:34 -HTTP METHOD : GET
2019-04-03 21:14:34 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2019-04-03 21:14:34 -参数 : [{}]
2019-04-03 21:14:34 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2019-04-03 21:14:34 -==> Parameters: 1(Long)
2019-04-03 21:14:34 -<==      Total: 46
2019-04-03 21:14:34 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2019-04-03 21:14:34 -==> Parameters: 138(Long)
2019-04-03 21:14:34 -<==      Total: 1
2019-04-03 21:14:34 -耗时 : 15
2019-04-03 21:14:34 -返回值 : index_v1
2019-04-03 21:14:34 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 21:14:34 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 15(Integer), com.bootdo.system.controller.LoginController.index()(String), {"menus":[{"attributes":{"icon":"fa fa-money","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-money","url":"/moneyList/moneyList"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"102","parentId":"106","text":"现金缴费"},{"attributes":{"icon":"fa fa-book","url":"/moneyLog/elecLog"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"107","parentId":"106","text":"缴费记录"}],"hasChildren":true,"hasParent":false,"id":"106","parentId":"0","text":"收费管理"},{"attributes":{"icon":"fa fa-lightbulb-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/elec/elec"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"121","parentId":"103","text":"电费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"elec/elecInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"122","parentId":"103","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"elec/elecUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"123","parentId":"103","text":"电表上传"},{"attributes":{"icon":"fa fa-cc","url":"/elec/elecPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"124","parentId":"103","text":"电价管理"}],"hasChildren":true,"hasParent":false,"id":"103","parentId":"0","text":"电费管理"},{"attributes":{"icon":"fa fa-tint","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/water/water"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"117","parentId":"105","text":"水费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"water/waterInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"118","parentId":"105","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"water/waterUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"119","parentId":"105","text":"水费生成"},{"attributes":{"icon":"fa fa-cc","url":"/water/waterPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"120","parentId":"105","text":"水价管理"}],"hasChildren":true,"hasParent":false,"id":"105","parentId":"0","text":"水费管理"},{"attributes":{"icon":"fa fa-fire","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/heat/heat"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"113","parentId":"104","text":"暖费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"heat/heatInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"114","parentId":"104","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"heat/heatUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"115","parentId":"104","text":"暖费生成"},{"attributes":{"icon":"","url":"/heat/heatPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"116","parentId":"104","text":"暖价管理"}],"hasChildren":true,"hasParent":false,"id":"104","parentId":"0","text":"暖费管理"},{"attributes":{"icon":"fa fa-vcard-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-bomb","url":"/print/print"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"149","parentId":"108","text":"票据记录"}],"hasChildren":true,"hasParent":false,"id":"108","parentId":"0","text":"票据管理"},{"attributes":{"icon":"fa fa-bar-chart","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-area-chart","url":"/chart/graph_echarts.html"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","text":"百度chart"},{"attributes":{"icon":"fa fa-sun-o","url":"charts/countDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"109","parentId":"97","text":"日统计报表"},{"attributes":{"icon":"fa fa-registered","url":"charts/countMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"110","parentId":"97","text":"月统计报表"},{"attributes":{"icon":"fa fa-support","url":"charts/countYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"111","parentId":"97","text":"年统计报表"},{"attributes":{"icon":"fa fa-money","url":"charts/countOwe"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"155","parentId":"97","text":"欠费报表图"},{"attributes":{"icon":"fa fa-tachometer","url":"charts/countRun"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"112","parentId":"97","text":"走势图报表"}],"hasChildren":true,"hasParent":false,"id":"97","parentId":"0","text":"统计管理"},{"attributes":{"icon":"fa fa-bars","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-book","url":"/common/dict"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"78","parentId":"1","text":"数据字典"},{"attributes":{"icon":"fa fa-folder-open","url":"/common/sysFile"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"71","parentId":"1","text":"文件管理"}],"h(String), 127.0.0.1(String), 2019-04-03 21:14:34.465(Timestamp)
2019-04-03 21:14:34 -<==    Updates: 1
2019-04-03 21:14:34 -请求地址 : http://localhost:8081/main
2019-04-03 21:14:34 -HTTP METHOD : GET
2019-04-03 21:14:34 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 21:14:34 -参数 : []
2019-04-03 21:14:34 -耗时 : 1
2019-04-03 21:14:34 -返回值 : main
2019-04-03 21:14:35 -请求地址 : http://localhost:8081/oa/notify/message
2019-04-03 21:14:35 -HTTP METHOD : GET
2019-04-03 21:14:35 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2019-04-03 21:14:35 -参数 : []
2019-04-03 21:14:35 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2019-04-03 21:14:35 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2019-04-03 21:14:35 -<==      Total: 0
2019-04-03 21:14:35 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2019-04-03 21:14:35 -==> Parameters: 1(Long), 0(String)
2019-04-03 21:14:35 -<==      Total: 1
2019-04-03 21:14:35 -耗时 : 7
2019-04-03 21:14:35 -返回值 : com.bootdo.common.utils.PageUtils@2b67c8f
2019-04-03 21:14:35 -请求地址 : http://localhost:8081/main
2019-04-03 21:14:35 -HTTP METHOD : GET
2019-04-03 21:14:35 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 21:14:35 -参数 : []
2019-04-03 21:14:35 -耗时 : 0
2019-04-03 21:14:35 -返回值 : main
2019-04-03 21:14:36 -请求地址 : http://localhost:8081/print/print
2019-04-03 21:14:36 -HTTP METHOD : GET
2019-04-03 21:14:36 -CLASS_METHOD : com.bootdo.print.controller.PrintController.Print
2019-04-03 21:14:36 -参数 : []
2019-04-03 21:14:36 -耗时 : 0
2019-04-03 21:14:36 -返回值 : print/print/print
2019-04-03 21:14:36 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-03 21:14:36 -HTTP METHOD : GET
2019-04-03 21:14:36 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 21:14:36 -参数 : [userType]
2019-04-03 21:14:36 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 21:14:36 -==> Parameters: userType(String)
2019-04-03 21:14:36 -<==      Total: 2
2019-04-03 21:14:36 -耗时 : 5
2019-04-03 21:14:36 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 21:14:37 -请求地址 : http://localhost:8081/print/print/list
2019-04-03 21:14:37 -HTTP METHOD : GET
2019-04-03 21:14:37 -CLASS_METHOD : com.bootdo.print.controller.PrintController.list
2019-04-03 21:14:37 -参数 : [{limit=10, offset=0, createTime=, userType=, userOrg=, userId=}]
2019-04-03 21:14:37 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`start`,`end`,`hu`,`elec_price`,`elec_amount`,`elec_cost`,`elec_sum`,`elec_money`,`heat_price`,`heat_area`,`heat_cost`,`heat_sum`,`heat_money`,`water_price`,`water_cost`,`water_sum`,`water_money`,`cost_poper`,`print_state`,`print_date`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from print order by id asc limit ?, ? 
2019-04-03 21:14:37 -==> Parameters: 0(Integer), 10(Integer)
2019-04-03 21:14:37 -<==      Total: 3
2019-04-03 21:14:37 -==>  Preparing: select count(*) from print 
2019-04-03 21:14:37 -==> Parameters: 
2019-04-03 21:14:37 -<==      Total: 1
2019-04-03 21:14:37 -耗时 : 7
2019-04-03 21:14:37 -返回值 : com.bootdo.common.utils.PageUtils@780b261d
2019-04-03 21:14:38 -请求地址 : http://localhost:8081/print/print/add
2019-04-03 21:14:38 -HTTP METHOD : GET
2019-04-03 21:14:38 -CLASS_METHOD : com.bootdo.print.controller.PrintController.add
2019-04-03 21:14:38 -参数 : []
2019-04-03 21:14:38 -耗时 : 0
2019-04-03 21:14:38 -返回值 : print/print/add
2019-04-03 21:14:38 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-03 21:14:38 -HTTP METHOD : GET
2019-04-03 21:14:38 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 21:14:38 -参数 : [userType]
2019-04-03 21:14:38 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 21:14:38 -==> Parameters: userType(String)
2019-04-03 21:14:38 -<==      Total: 2
2019-04-03 21:14:38 -耗时 : 6
2019-04-03 21:14:38 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 21:24:41 -==>  Preparing: select distinct m.perms from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id = ur.role_id where ur.user_id = ? 
2019-04-03 21:24:41 -==> Parameters: 1(Long)
2019-04-03 21:24:41 -<==      Total: 90
2019-04-03 21:24:41 -请求地址 : http://localhost:8081/print/print/edit/1
2019-04-03 21:24:41 -HTTP METHOD : GET
2019-04-03 21:24:41 -CLASS_METHOD : com.bootdo.print.controller.PrintController.edit
2019-04-03 21:24:41 -参数 : [1, {}]
2019-04-03 21:24:41 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`start`,`end`,`hu`,`elec_price`,`elec_amount`,`elec_cost`,`elec_sum`,`elec_money`,`heat_price`,`heat_area`,`heat_cost`,`heat_sum`,`heat_money`,`water_price`,`water_cost`,`water_sum`,`water_money`,`cost_poper`,`print_state`,`print_date`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from print where id = ? 
2019-04-03 21:24:41 -==> Parameters: 1(Long)
2019-04-03 21:24:41 -<==      Total: 1
2019-04-03 21:24:41 -耗时 : 8
2019-04-03 21:24:41 -返回值 : print/print/edit
2019-04-03 21:24:41 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-03 21:24:41 -HTTP METHOD : GET
2019-04-03 21:24:41 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 21:24:41 -参数 : [userType]
2019-04-03 21:24:41 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 21:24:41 -==> Parameters: userType(String)
2019-04-03 21:24:41 -<==      Total: 2
2019-04-03 21:24:41 -耗时 : 3
2019-04-03 21:24:41 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 21:27:36 -Validating all active sessions...
2019-04-03 21:27:36 -Finished session validation.  No sessions were stopped.
2019-04-03 21:27:44 -WebSocketSession[1 current WS(1)-HttpStream(0)-HttpPoll(0), 9 total, 0 closed abnormally (0 connect failure, 0 send limit, 0 transport error)], stompSubProtocol[processed CONNECT(9)-CONNECTED(9)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 105], outboundChannelpool size = 0, active threads = 0, queued tasks = 0, completed tasks = 17], sockJsScheduler[pool size = 4, active threads = 1, queued tasks = 2, completed tasks = 1706]
2019-04-03 21:29:39 -请求地址 : http://localhost:8081/index
2019-04-03 21:29:39 -HTTP METHOD : GET
2019-04-03 21:29:39 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2019-04-03 21:29:39 -参数 : [{}]
2019-04-03 21:29:39 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2019-04-03 21:29:39 -==> Parameters: 1(Long)
2019-04-03 21:29:39 -<==      Total: 46
2019-04-03 21:29:39 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2019-04-03 21:29:39 -==> Parameters: 138(Long)
2019-04-03 21:29:39 -<==      Total: 1
2019-04-03 21:29:39 -耗时 : 22
2019-04-03 21:29:39 -返回值 : index_v1
2019-04-03 21:29:39 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 21:29:39 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 23(Integer), com.bootdo.system.controller.LoginController.index()(String), {"menus":[{"attributes":{"icon":"fa fa-money","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-money","url":"/moneyList/moneyList"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"102","parentId":"106","text":"现金缴费"},{"attributes":{"icon":"fa fa-book","url":"/moneyLog/elecLog"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"107","parentId":"106","text":"缴费记录"}],"hasChildren":true,"hasParent":false,"id":"106","parentId":"0","text":"收费管理"},{"attributes":{"icon":"fa fa-lightbulb-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/elec/elec"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"121","parentId":"103","text":"电费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"elec/elecInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"122","parentId":"103","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"elec/elecUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"123","parentId":"103","text":"电表上传"},{"attributes":{"icon":"fa fa-cc","url":"/elec/elecPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"124","parentId":"103","text":"电价管理"}],"hasChildren":true,"hasParent":false,"id":"103","parentId":"0","text":"电费管理"},{"attributes":{"icon":"fa fa-tint","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/water/water"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"117","parentId":"105","text":"水费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"water/waterInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"118","parentId":"105","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"water/waterUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"119","parentId":"105","text":"水费生成"},{"attributes":{"icon":"fa fa-cc","url":"/water/waterPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"120","parentId":"105","text":"水价管理"}],"hasChildren":true,"hasParent":false,"id":"105","parentId":"0","text":"水费管理"},{"attributes":{"icon":"fa fa-fire","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/heat/heat"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"113","parentId":"104","text":"暖费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"heat/heatInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"114","parentId":"104","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"heat/heatUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"115","parentId":"104","text":"暖费生成"},{"attributes":{"icon":"","url":"/heat/heatPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"116","parentId":"104","text":"暖价管理"}],"hasChildren":true,"hasParent":false,"id":"104","parentId":"0","text":"暖费管理"},{"attributes":{"icon":"fa fa-vcard-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-bomb","url":"/print/print"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"149","parentId":"108","text":"票据记录"}],"hasChildren":true,"hasParent":false,"id":"108","parentId":"0","text":"票据管理"},{"attributes":{"icon":"fa fa-bar-chart","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-area-chart","url":"/chart/graph_echarts.html"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","text":"百度chart"},{"attributes":{"icon":"fa fa-sun-o","url":"charts/countDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"109","parentId":"97","text":"日统计报表"},{"attributes":{"icon":"fa fa-registered","url":"charts/countMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"110","parentId":"97","text":"月统计报表"},{"attributes":{"icon":"fa fa-money","url":"charts/countOwe"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"155","parentId":"97","text":"欠费报表图"},{"attributes":{"icon":"fa fa-support","url":"charts/countYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"111","parentId":"97","text":"年统计报表"},{"attributes":{"icon":"fa fa-tachometer","url":"charts/countRun"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"112","parentId":"97","text":"走势图报表"}],"hasChildren":true,"hasParent":false,"id":"97","parentId":"0","text":"统计管理"},{"attributes":{"icon":"fa fa-bars","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-book","url":"/common/dict"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"78","parentId":"1","text":"数据字典"},{"attributes":{"icon":"fa fa-folder-open","url":"/common/sysFile"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"71","parentId":"1","text":"文件管理"}],"h(String), 127.0.0.1(String), 2019-04-03 21:29:39.13(Timestamp)
2019-04-03 21:29:39 -请求地址 : http://localhost:8081/main
2019-04-03 21:29:39 -HTTP METHOD : GET
2019-04-03 21:29:39 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 21:29:39 -参数 : []
2019-04-03 21:29:39 -耗时 : 1
2019-04-03 21:29:39 -返回值 : main
2019-04-03 21:29:39 -<==    Updates: 1
2019-04-03 21:29:39 -请求地址 : http://localhost:8081/oa/notify/message
2019-04-03 21:29:39 -HTTP METHOD : GET
2019-04-03 21:29:39 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2019-04-03 21:29:39 -参数 : []
2019-04-03 21:29:39 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2019-04-03 21:29:39 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2019-04-03 21:29:39 -<==      Total: 0
2019-04-03 21:29:39 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2019-04-03 21:29:39 -==> Parameters: 1(Long), 0(String)
2019-04-03 21:29:39 -<==      Total: 1
2019-04-03 21:29:39 -耗时 : 6
2019-04-03 21:29:39 -返回值 : com.bootdo.common.utils.PageUtils@1ddb6ad7
2019-04-03 21:29:39 -请求地址 : http://localhost:8081/main
2019-04-03 21:29:39 -HTTP METHOD : GET
2019-04-03 21:29:39 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 21:29:39 -参数 : []
2019-04-03 21:29:39 -耗时 : 0
2019-04-03 21:29:39 -返回值 : main
2019-04-03 21:29:40 -请求地址 : http://localhost:8081/print/print
2019-04-03 21:29:40 -HTTP METHOD : GET
2019-04-03 21:29:40 -CLASS_METHOD : com.bootdo.print.controller.PrintController.Print
2019-04-03 21:29:40 -参数 : []
2019-04-03 21:29:40 -耗时 : 1
2019-04-03 21:29:40 -返回值 : print/print/print
2019-04-03 21:29:41 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-03 21:29:41 -HTTP METHOD : GET
2019-04-03 21:29:41 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 21:29:41 -参数 : [userType]
2019-04-03 21:29:41 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 21:29:41 -==> Parameters: userType(String)
2019-04-03 21:29:41 -<==      Total: 2
2019-04-03 21:29:41 -耗时 : 4
2019-04-03 21:29:41 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 21:29:41 -请求地址 : http://localhost:8081/print/print/list
2019-04-03 21:29:41 -HTTP METHOD : GET
2019-04-03 21:29:41 -CLASS_METHOD : com.bootdo.print.controller.PrintController.list
2019-04-03 21:29:41 -参数 : [{limit=10, offset=0, createTime=, userType=, userOrg=, userId=}]
2019-04-03 21:29:41 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`start`,`end`,`hu`,`elec_price`,`elec_amount`,`elec_cost`,`elec_sum`,`elec_money`,`heat_price`,`heat_area`,`heat_cost`,`heat_sum`,`heat_money`,`water_price`,`water_cost`,`water_sum`,`water_money`,`cost_poper`,`print_state`,`print_date`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from print order by id asc limit ?, ? 
2019-04-03 21:29:41 -==> Parameters: 0(Integer), 10(Integer)
2019-04-03 21:29:41 -<==      Total: 3
2019-04-03 21:29:41 -==>  Preparing: select count(*) from print 
2019-04-03 21:29:41 -==> Parameters: 
2019-04-03 21:29:41 -<==      Total: 1
2019-04-03 21:29:41 -耗时 : 9
2019-04-03 21:29:41 -返回值 : com.bootdo.common.utils.PageUtils@fc2845f
2019-04-03 21:29:42 -请求地址 : http://localhost:8081/print/print/edit/1
2019-04-03 21:29:42 -HTTP METHOD : GET
2019-04-03 21:29:42 -CLASS_METHOD : com.bootdo.print.controller.PrintController.edit
2019-04-03 21:29:42 -参数 : [1, {}]
2019-04-03 21:29:42 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`start`,`end`,`hu`,`elec_price`,`elec_amount`,`elec_cost`,`elec_sum`,`elec_money`,`heat_price`,`heat_area`,`heat_cost`,`heat_sum`,`heat_money`,`water_price`,`water_cost`,`water_sum`,`water_money`,`cost_poper`,`print_state`,`print_date`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from print where id = ? 
2019-04-03 21:29:42 -==> Parameters: 1(Long)
2019-04-03 21:29:42 -<==      Total: 1
2019-04-03 21:29:42 -耗时 : 4
2019-04-03 21:29:42 -返回值 : print/print/edit
2019-04-03 21:29:42 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-03 21:29:42 -HTTP METHOD : GET
2019-04-03 21:29:42 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 21:29:42 -参数 : [userType]
2019-04-03 21:29:42 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 21:29:42 -==> Parameters: userType(String)
2019-04-03 21:29:42 -<==      Total: 2
2019-04-03 21:29:42 -耗时 : 4
2019-04-03 21:29:42 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 21:30:19 -请求地址 : http://localhost:8081/index
2019-04-03 21:30:19 -HTTP METHOD : GET
2019-04-03 21:30:19 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2019-04-03 21:30:19 -参数 : [{}]
2019-04-03 21:30:19 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2019-04-03 21:30:19 -==> Parameters: 1(Long)
2019-04-03 21:30:19 -<==      Total: 46
2019-04-03 21:30:19 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2019-04-03 21:30:19 -==> Parameters: 138(Long)
2019-04-03 21:30:19 -<==      Total: 1
2019-04-03 21:30:19 -耗时 : 20
2019-04-03 21:30:19 -返回值 : index_v1
2019-04-03 21:30:19 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 21:30:19 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 21(Integer), com.bootdo.system.controller.LoginController.index()(String), {"menus":[{"attributes":{"icon":"fa fa-money","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-money","url":"/moneyList/moneyList"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"102","parentId":"106","text":"现金缴费"},{"attributes":{"icon":"fa fa-book","url":"/moneyLog/elecLog"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"107","parentId":"106","text":"缴费记录"}],"hasChildren":true,"hasParent":false,"id":"106","parentId":"0","text":"收费管理"},{"attributes":{"icon":"fa fa-lightbulb-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/elec/elec"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"121","parentId":"103","text":"电费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"elec/elecInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"122","parentId":"103","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"elec/elecUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"123","parentId":"103","text":"电表上传"},{"attributes":{"icon":"fa fa-cc","url":"/elec/elecPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"124","parentId":"103","text":"电价管理"}],"hasChildren":true,"hasParent":false,"id":"103","parentId":"0","text":"电费管理"},{"attributes":{"icon":"fa fa-tint","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/water/water"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"117","parentId":"105","text":"水费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"water/waterInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"118","parentId":"105","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"water/waterUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"119","parentId":"105","text":"水费生成"},{"attributes":{"icon":"fa fa-cc","url":"/water/waterPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"120","parentId":"105","text":"水价管理"}],"hasChildren":true,"hasParent":false,"id":"105","parentId":"0","text":"水费管理"},{"attributes":{"icon":"fa fa-fire","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/heat/heat"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"113","parentId":"104","text":"暖费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"heat/heatInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"114","parentId":"104","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"heat/heatUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"115","parentId":"104","text":"暖费生成"},{"attributes":{"icon":"","url":"/heat/heatPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"116","parentId":"104","text":"暖价管理"}],"hasChildren":true,"hasParent":false,"id":"104","parentId":"0","text":"暖费管理"},{"attributes":{"icon":"fa fa-vcard-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-bomb","url":"/print/print"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"149","parentId":"108","text":"票据记录"}],"hasChildren":true,"hasParent":false,"id":"108","parentId":"0","text":"票据管理"},{"attributes":{"icon":"fa fa-bar-chart","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-area-chart","url":"/chart/graph_echarts.html"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","text":"百度chart"},{"attributes":{"icon":"fa fa-sun-o","url":"charts/countDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"109","parentId":"97","text":"日统计报表"},{"attributes":{"icon":"fa fa-registered","url":"charts/countMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"110","parentId":"97","text":"月统计报表"},{"attributes":{"icon":"fa fa-money","url":"charts/countOwe"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"155","parentId":"97","text":"欠费报表图"},{"attributes":{"icon":"fa fa-support","url":"charts/countYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"111","parentId":"97","text":"年统计报表"},{"attributes":{"icon":"fa fa-tachometer","url":"charts/countRun"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"112","parentId":"97","text":"走势图报表"}],"hasChildren":true,"hasParent":false,"id":"97","parentId":"0","text":"统计管理"},{"attributes":{"icon":"fa fa-bars","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-book","url":"/common/dict"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"78","parentId":"1","text":"数据字典"},{"attributes":{"icon":"fa fa-folder-open","url":"/common/sysFile"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"71","parentId":"1","text":"文件管理"}],"h(String), 127.0.0.1(String), 2019-04-03 21:30:19.184(Timestamp)
2019-04-03 21:30:19 -<==    Updates: 1
2019-04-03 21:30:19 -请求地址 : http://localhost:8081/main
2019-04-03 21:30:19 -HTTP METHOD : GET
2019-04-03 21:30:19 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 21:30:19 -参数 : []
2019-04-03 21:30:19 -耗时 : 1
2019-04-03 21:30:19 -返回值 : main
2019-04-03 21:30:19 -请求地址 : http://localhost:8081/oa/notify/message
2019-04-03 21:30:19 -HTTP METHOD : GET
2019-04-03 21:30:19 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2019-04-03 21:30:19 -参数 : []
2019-04-03 21:30:19 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2019-04-03 21:30:19 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2019-04-03 21:30:19 -<==      Total: 0
2019-04-03 21:30:19 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2019-04-03 21:30:19 -==> Parameters: 1(Long), 0(String)
2019-04-03 21:30:19 -<==      Total: 1
2019-04-03 21:30:19 -耗时 : 10
2019-04-03 21:30:19 -返回值 : com.bootdo.common.utils.PageUtils@3ca0f1e6
2019-04-03 21:30:19 -请求地址 : http://localhost:8081/main
2019-04-03 21:30:19 -HTTP METHOD : GET
2019-04-03 21:30:19 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 21:30:19 -参数 : []
2019-04-03 21:30:19 -耗时 : 1
2019-04-03 21:30:19 -返回值 : main
2019-04-03 21:30:22 -请求地址 : http://localhost:8081/print/print
2019-04-03 21:30:22 -HTTP METHOD : GET
2019-04-03 21:30:22 -CLASS_METHOD : com.bootdo.print.controller.PrintController.Print
2019-04-03 21:30:22 -参数 : []
2019-04-03 21:30:22 -耗时 : 1
2019-04-03 21:30:22 -返回值 : print/print/print
2019-04-03 21:30:22 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-03 21:30:22 -HTTP METHOD : GET
2019-04-03 21:30:22 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 21:30:22 -参数 : [userType]
2019-04-03 21:30:22 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 21:30:22 -==> Parameters: userType(String)
2019-04-03 21:30:22 -<==      Total: 2
2019-04-03 21:30:22 -耗时 : 4
2019-04-03 21:30:22 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 21:30:22 -请求地址 : http://localhost:8081/print/print/list
2019-04-03 21:30:22 -HTTP METHOD : GET
2019-04-03 21:30:22 -CLASS_METHOD : com.bootdo.print.controller.PrintController.list
2019-04-03 21:30:22 -参数 : [{limit=10, offset=0, createTime=, userType=, userOrg=, userId=}]
2019-04-03 21:30:22 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`start`,`end`,`hu`,`elec_price`,`elec_amount`,`elec_cost`,`elec_sum`,`elec_money`,`heat_price`,`heat_area`,`heat_cost`,`heat_sum`,`heat_money`,`water_price`,`water_cost`,`water_sum`,`water_money`,`cost_poper`,`print_state`,`print_date`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from print order by id asc limit ?, ? 
2019-04-03 21:30:22 -==> Parameters: 0(Integer), 10(Integer)
2019-04-03 21:30:22 -<==      Total: 3
2019-04-03 21:30:22 -==>  Preparing: select count(*) from print 
2019-04-03 21:30:22 -==> Parameters: 
2019-04-03 21:30:22 -<==      Total: 1
2019-04-03 21:30:22 -耗时 : 15
2019-04-03 21:30:22 -返回值 : com.bootdo.common.utils.PageUtils@62fff240
2019-04-03 21:30:24 -请求地址 : http://localhost:8081/print/print/edit/1
2019-04-03 21:30:24 -HTTP METHOD : GET
2019-04-03 21:30:24 -CLASS_METHOD : com.bootdo.print.controller.PrintController.edit
2019-04-03 21:30:24 -参数 : [1, {}]
2019-04-03 21:30:24 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`start`,`end`,`hu`,`elec_price`,`elec_amount`,`elec_cost`,`elec_sum`,`elec_money`,`heat_price`,`heat_area`,`heat_cost`,`heat_sum`,`heat_money`,`water_price`,`water_cost`,`water_sum`,`water_money`,`cost_poper`,`print_state`,`print_date`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from print where id = ? 
2019-04-03 21:30:24 -==> Parameters: 1(Long)
2019-04-03 21:30:24 -<==      Total: 1
2019-04-03 21:30:24 -耗时 : 5
2019-04-03 21:30:24 -返回值 : print/print/edit
2019-04-03 21:30:24 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-03 21:30:24 -HTTP METHOD : GET
2019-04-03 21:30:24 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 21:30:24 -参数 : [userType]
2019-04-03 21:30:24 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 21:30:24 -==> Parameters: userType(String)
2019-04-03 21:30:24 -<==      Total: 2
2019-04-03 21:30:24 -耗时 : 6
2019-04-03 21:30:24 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 21:35:18 -请求地址 : http://localhost:8081/index
2019-04-03 21:35:18 -HTTP METHOD : GET
2019-04-03 21:35:18 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2019-04-03 21:35:18 -参数 : [{}]
2019-04-03 21:35:18 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2019-04-03 21:35:18 -==> Parameters: 1(Long)
2019-04-03 21:35:18 -<==      Total: 46
2019-04-03 21:35:18 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2019-04-03 21:35:18 -==> Parameters: 138(Long)
2019-04-03 21:35:18 -<==      Total: 1
2019-04-03 21:35:18 -耗时 : 29
2019-04-03 21:35:18 -返回值 : index_v1
2019-04-03 21:35:18 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-03 21:35:18 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 30(Integer), com.bootdo.system.controller.LoginController.index()(String), {"menus":[{"attributes":{"icon":"fa fa-money","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-money","url":"/moneyList/moneyList"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"102","parentId":"106","text":"现金缴费"},{"attributes":{"icon":"fa fa-book","url":"/moneyLog/elecLog"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"107","parentId":"106","text":"缴费记录"}],"hasChildren":true,"hasParent":false,"id":"106","parentId":"0","text":"收费管理"},{"attributes":{"icon":"fa fa-lightbulb-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/elec/elec"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"121","parentId":"103","text":"电费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"elec/elecInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"122","parentId":"103","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"elec/elecUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"123","parentId":"103","text":"电表上传"},{"attributes":{"icon":"fa fa-cc","url":"/elec/elecPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"124","parentId":"103","text":"电价管理"}],"hasChildren":true,"hasParent":false,"id":"103","parentId":"0","text":"电费管理"},{"attributes":{"icon":"fa fa-tint","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/water/water"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"117","parentId":"105","text":"水费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"water/waterInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"118","parentId":"105","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"water/waterUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"119","parentId":"105","text":"水费生成"},{"attributes":{"icon":"fa fa-cc","url":"/water/waterPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"120","parentId":"105","text":"水价管理"}],"hasChildren":true,"hasParent":false,"id":"105","parentId":"0","text":"水费管理"},{"attributes":{"icon":"fa fa-fire","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/heat/heat"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"113","parentId":"104","text":"暖费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"heat/heatInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"114","parentId":"104","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"heat/heatUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"115","parentId":"104","text":"暖费生成"},{"attributes":{"icon":"","url":"/heat/heatPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"116","parentId":"104","text":"暖价管理"}],"hasChildren":true,"hasParent":false,"id":"104","parentId":"0","text":"暖费管理"},{"attributes":{"icon":"fa fa-vcard-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-bomb","url":"/print/print"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"149","parentId":"108","text":"票据记录"}],"hasChildren":true,"hasParent":false,"id":"108","parentId":"0","text":"票据管理"},{"attributes":{"icon":"fa fa-bar-chart","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-area-chart","url":"/chart/graph_echarts.html"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","text":"百度chart"},{"attributes":{"icon":"fa fa-sun-o","url":"charts/countDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"109","parentId":"97","text":"日统计报表"},{"attributes":{"icon":"fa fa-registered","url":"charts/countMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"110","parentId":"97","text":"月统计报表"},{"attributes":{"icon":"fa fa-money","url":"charts/countOwe"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"155","parentId":"97","text":"欠费报表图"},{"attributes":{"icon":"fa fa-support","url":"charts/countYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"111","parentId":"97","text":"年统计报表"},{"attributes":{"icon":"fa fa-tachometer","url":"charts/countRun"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"112","parentId":"97","text":"走势图报表"}],"hasChildren":true,"hasParent":false,"id":"97","parentId":"0","text":"统计管理"},{"attributes":{"icon":"fa fa-bars","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-book","url":"/common/dict"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"78","parentId":"1","text":"数据字典"},{"attributes":{"icon":"fa fa-folder-open","url":"/common/sysFile"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"71","parentId":"1","text":"文件管理"}],"h(String), 127.0.0.1(String), 2019-04-03 21:35:18.4(Timestamp)
2019-04-03 21:35:18 -<==    Updates: 1
2019-04-03 21:35:19 -请求地址 : http://localhost:8081/main
2019-04-03 21:35:19 -HTTP METHOD : GET
2019-04-03 21:35:19 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 21:35:19 -参数 : []
2019-04-03 21:35:19 -耗时 : 3
2019-04-03 21:35:19 -返回值 : main
2019-04-03 21:35:19 -请求地址 : http://localhost:8081/oa/notify/message
2019-04-03 21:35:19 -HTTP METHOD : GET
2019-04-03 21:35:19 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2019-04-03 21:35:19 -参数 : []
2019-04-03 21:35:19 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2019-04-03 21:35:19 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2019-04-03 21:35:19 -<==      Total: 0
2019-04-03 21:35:19 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2019-04-03 21:35:19 -==> Parameters: 1(Long), 0(String)
2019-04-03 21:35:19 -<==      Total: 1
2019-04-03 21:35:19 -耗时 : 8
2019-04-03 21:35:19 -返回值 : com.bootdo.common.utils.PageUtils@6ed0d55d
2019-04-03 21:35:19 -请求地址 : http://localhost:8081/main
2019-04-03 21:35:19 -HTTP METHOD : GET
2019-04-03 21:35:19 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-03 21:35:19 -参数 : []
2019-04-03 21:35:19 -耗时 : 1
2019-04-03 21:35:19 -返回值 : main
2019-04-03 21:35:23 -==>  Preparing: select distinct m.perms from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id = ur.role_id where ur.user_id = ? 
2019-04-03 21:35:23 -==> Parameters: 1(Long)
2019-04-03 21:35:23 -<==      Total: 90
2019-04-03 21:35:23 -请求地址 : http://localhost:8081/print/print
2019-04-03 21:35:23 -HTTP METHOD : GET
2019-04-03 21:35:23 -CLASS_METHOD : com.bootdo.print.controller.PrintController.Print
2019-04-03 21:35:23 -参数 : []
2019-04-03 21:35:23 -耗时 : 1
2019-04-03 21:35:23 -返回值 : print/print/print
2019-04-03 21:35:23 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-03 21:35:23 -HTTP METHOD : GET
2019-04-03 21:35:23 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 21:35:23 -参数 : [userType]
2019-04-03 21:35:23 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 21:35:23 -==> Parameters: userType(String)
2019-04-03 21:35:23 -<==      Total: 2
2019-04-03 21:35:23 -耗时 : 4
2019-04-03 21:35:23 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 21:35:23 -请求地址 : http://localhost:8081/print/print/list
2019-04-03 21:35:23 -HTTP METHOD : GET
2019-04-03 21:35:23 -CLASS_METHOD : com.bootdo.print.controller.PrintController.list
2019-04-03 21:35:23 -参数 : [{limit=10, offset=0, createTime=, userType=, userOrg=, userId=}]
2019-04-03 21:35:23 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`start`,`end`,`hu`,`elec_price`,`elec_amount`,`elec_cost`,`elec_sum`,`elec_money`,`heat_price`,`heat_area`,`heat_cost`,`heat_sum`,`heat_money`,`water_price`,`water_cost`,`water_sum`,`water_money`,`cost_poper`,`print_state`,`print_date`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from print order by id asc limit ?, ? 
2019-04-03 21:35:23 -==> Parameters: 0(Integer), 10(Integer)
2019-04-03 21:35:23 -<==      Total: 3
2019-04-03 21:35:23 -==>  Preparing: select count(*) from print 
2019-04-03 21:35:23 -==> Parameters: 
2019-04-03 21:35:23 -<==      Total: 1
2019-04-03 21:35:23 -耗时 : 7
2019-04-03 21:35:23 -返回值 : com.bootdo.common.utils.PageUtils@4033f060
2019-04-03 21:35:24 -请求地址 : http://localhost:8081/print/print/edit/1
2019-04-03 21:35:24 -HTTP METHOD : GET
2019-04-03 21:35:24 -CLASS_METHOD : com.bootdo.print.controller.PrintController.edit
2019-04-03 21:35:24 -参数 : [1, {}]
2019-04-03 21:35:24 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`start`,`end`,`hu`,`elec_price`,`elec_amount`,`elec_cost`,`elec_sum`,`elec_money`,`heat_price`,`heat_area`,`heat_cost`,`heat_sum`,`heat_money`,`water_price`,`water_cost`,`water_sum`,`water_money`,`cost_poper`,`print_state`,`print_date`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from print where id = ? 
2019-04-03 21:35:24 -==> Parameters: 1(Long)
2019-04-03 21:35:24 -<==      Total: 1
2019-04-03 21:35:24 -耗时 : 5
2019-04-03 21:35:24 -返回值 : print/print/edit
2019-04-03 21:35:25 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-03 21:35:25 -HTTP METHOD : GET
2019-04-03 21:35:25 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 21:35:25 -参数 : [userType]
2019-04-03 21:35:25 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 21:35:25 -==> Parameters: userType(String)
2019-04-03 21:35:25 -<==      Total: 2
2019-04-03 21:35:25 -耗时 : 5
2019-04-03 21:35:25 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-03 21:35:47 -请求地址 : http://localhost:8081/print/print/add
2019-04-03 21:35:47 -HTTP METHOD : GET
2019-04-03 21:35:47 -CLASS_METHOD : com.bootdo.print.controller.PrintController.add
2019-04-03 21:35:47 -参数 : []
2019-04-03 21:35:47 -耗时 : 1
2019-04-03 21:35:47 -返回值 : print/print/add
2019-04-03 21:35:47 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-03 21:35:47 -HTTP METHOD : GET
2019-04-03 21:35:47 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-03 21:35:47 -参数 : [userType]
2019-04-03 21:35:47 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-03 21:35:47 -==> Parameters: userType(String)
2019-04-03 21:35:47 -<==      Total: 2
2019-04-03 21:35:47 -耗时 : 3
2019-04-03 21:35:47 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
