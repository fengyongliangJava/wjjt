2020-03-04 17:37:30 -Starting BootdoApplication on PC-201905091110 with PID 3692 (D:\eclipse2018-work\bootdo\target\classes started by Administrator in D:\eclipse2018-work\bootdo)
2020-03-04 17:37:30 -Running with Spring Boot v2.0.3.RELEASE, Spring v5.0.7.RELEASE
2020-03-04 17:37:30 -The following profiles are active: dev
2020-03-04 17:37:32 -Refreshing org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@64dafeed: startup date [Wed Mar 04 17:37:32 CST 2020]; root of context hierarchy
2020-03-04 17:38:18 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-04 17:38:24 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$3e74828f] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-04 17:38:25 -Bean 'shiroConfig' of type [com.bootdo.system.config.ShiroConfig$$EnhancerBySpringCGLIB$$30cdb136] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-04 17:38:28 -Bean 'userRealm' of type [com.bootdo.system.shiro.UserRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-04 17:38:30 -Bean 'cacheManager2' of type [net.sf.ehcache.CacheManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-04 17:38:30 -Bean 'ehCacheManager' of type [org.apache.shiro.cache.ehcache.EhCacheManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-04 17:38:30 -Cache with name 'com.bootdo.system.shiro.UserRealm.authorizationCache' does not yet exist.  Creating now.
2020-03-04 17:38:30 -Added EhCache named [com.bootdo.system.shiro.UserRealm.authorizationCache]
2020-03-04 17:38:30 -Bean 'sessionDAO' of type [org.apache.shiro.session.mgt.eis.MemorySessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-04 17:38:30 -Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-04 17:38:30 -Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-04 17:38:31 -Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-04 17:38:34 -Tomcat initialized with port(s): 8081 (http)
2020-03-04 17:38:34 -Initializing ProtocolHandler ["http-nio-8081"]
2020-03-04 17:38:35 -Starting service [Tomcat]
2020-03-04 17:38:35 -Starting Servlet Engine: Apache Tomcat/8.5.31
2020-03-04 17:38:35 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [D:\Java\JDK\jdk1.8.0_102\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;D:\Java\JDK\jdk1.8.0_102\jre\bin;D:/Java/JRE/bin/server;D:/Java/JRE/bin;D:/Java/JRE/lib/amd64;C:\ProgramData\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Windows\System32\OpenSSH\;%JAVA_HOME\bin%;;C:\Program Files (x86)\pycSafefile\x64;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;C:\Program Files\JetBrains\WebStorm 2019.2.4\bin;;D:\eclipse2018\eclipse;;.]
2020-03-04 17:38:36 -Initializing Spring embedded WebApplicationContext
2020-03-04 17:38:36 -Root WebApplicationContext: initialization completed in 64172 ms
2020-03-04 17:38:38 -Mapping filter: 'characterEncodingFilter' to: [/*]
2020-03-04 17:38:38 -Mapping filter: 'hiddenHttpMethodFilter' to: [/*]
2020-03-04 17:38:38 -Mapping filter: 'httpPutFormContentFilter' to: [/*]
2020-03-04 17:38:38 -Mapping filter: 'requestContextFilter' to: [/*]
2020-03-04 17:38:38 -Filter xssFilter was not registered (disabled)
2020-03-04 17:38:38 -Mapping filter: 'webStatFilter' to urls: [/*]
2020-03-04 17:38:38 -Mapping filter: 'shiroFilterFactoryBean' to: [/*]
2020-03-04 17:38:38 -Servlet statViewServlet mapped to [/druid/*]
2020-03-04 17:38:38 -Servlet dispatcherServlet mapped to [/]
2020-03-04 17:38:45 -Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'countDDController': Unsatisfied dependency expressed through field 'elecLogService'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'elecLogServiceImpl': Unsatisfied dependency expressed through field 'elecLogDao'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'elecLogDao' defined in file [D:\eclipse2018-work\bootdo\target\classes\com\bootdo\moneyLog\dao\ElecLogDao.class]: Unsatisfied dependency expressed through bean property 'sqlSessionFactory'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [org/mybatis/spring/boot/autoconfigure/MybatisAutoConfiguration.class]: Unsatisfied dependency expressed through method 'sqlSessionFactory' parameter 0; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSource' defined in class path resource [com/bootdo/common/config/DruidDBConfig.class]: Invocation of init method failed; nested exception is java.sql.SQLException: Access denied for user 'root'@'localhost' (using password: YES)
2020-03-04 17:38:45 -Stopping service [Tomcat]
2020-03-04 17:38:46 -

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2020-03-04 17:38:46 -Application run failed
org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'countDDController': Unsatisfied dependency expressed through field 'elecLogService'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'elecLogServiceImpl': Unsatisfied dependency expressed through field 'elecLogDao'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'elecLogDao' defined in file [D:\eclipse2018-work\bootdo\target\classes\com\bootdo\moneyLog\dao\ElecLogDao.class]: Unsatisfied dependency expressed through bean property 'sqlSessionFactory'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [org/mybatis/spring/boot/autoconfigure/MybatisAutoConfiguration.class]: Unsatisfied dependency expressed through method 'sqlSessionFactory' parameter 0; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSource' defined in class path resource [com/bootdo/common/config/DruidDBConfig.class]: Invocation of init method failed; nested exception is java.sql.SQLException: Access denied for user 'root'@'localhost' (using password: YES)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:587)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:91)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:373)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1350)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:580)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:503)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:317)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:315)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:760)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:869)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:550)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:140)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:759)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:395)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:327)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1255)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1243)
	at com.bootdo.BootdoApplication.main(BootdoApplication.java:22)
Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'elecLogServiceImpl': Unsatisfied dependency expressed through field 'elecLogDao'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'elecLogDao' defined in file [D:\eclipse2018-work\bootdo\target\classes\com\bootdo\moneyLog\dao\ElecLogDao.class]: Unsatisfied dependency expressed through bean property 'sqlSessionFactory'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [org/mybatis/spring/boot/autoconfigure/MybatisAutoConfiguration.class]: Unsatisfied dependency expressed through method 'sqlSessionFactory' parameter 0; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSource' defined in class path resource [com/bootdo/common/config/DruidDBConfig.class]: Invocation of init method failed; nested exception is java.sql.SQLException: Access denied for user 'root'@'localhost' (using password: YES)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:587)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:91)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:373)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1350)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:580)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:503)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:317)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:315)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:251)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1138)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1065)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:584)
	... 19 common frames omitted
Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'elecLogDao' defined in file [D:\eclipse2018-work\bootdo\target\classes\com\bootdo\moneyLog\dao\ElecLogDao.class]: Unsatisfied dependency expressed through bean property 'sqlSessionFactory'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [org/mybatis/spring/boot/autoconfigure/MybatisAutoConfiguration.class]: Unsatisfied dependency expressed through method 'sqlSessionFactory' parameter 0; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSource' defined in class path resource [com/bootdo/common/config/DruidDBConfig.class]: Invocation of init method failed; nested exception is java.sql.SQLException: Access denied for user 'root'@'localhost' (using password: YES)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1445)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1332)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:580)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:503)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:317)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:315)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:251)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1138)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1065)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:584)
	... 32 common frames omitted
Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [org/mybatis/spring/boot/autoconfigure/MybatisAutoConfiguration.class]: Unsatisfied dependency expressed through method 'sqlSessionFactory' parameter 0; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSource' defined in class path resource [com/bootdo/common/config/DruidDBConfig.class]: Invocation of init method failed; nested exception is java.sql.SQLException: Access denied for user 'root'@'localhost' (using password: YES)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:732)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:474)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1256)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1105)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:503)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:317)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:315)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:251)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1138)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1065)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1430)
	... 43 common frames omitted
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSource' defined in class path resource [com/bootdo/common/config/DruidDBConfig.class]: Invocation of init method failed; nested exception is java.sql.SQLException: Access denied for user 'root'@'localhost' (using password: YES)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1708)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:581)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:503)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:317)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:315)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:251)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1138)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1065)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:818)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:724)
	... 56 common frames omitted
Caused by: java.sql.SQLException: Access denied for user 'root'@'localhost' (using password: YES)
	at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:965)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3976)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3912)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:871)
	at com.mysql.jdbc.MysqlIO.proceedHandshakeWithPluggableAuthentication(MysqlIO.java:1714)
	at com.mysql.jdbc.MysqlIO.doHandshake(MysqlIO.java:1224)
	at com.mysql.jdbc.ConnectionImpl.coreConnect(ConnectionImpl.java:2190)
	at com.mysql.jdbc.ConnectionImpl.connectOneTryOnly(ConnectionImpl.java:2221)
	at com.mysql.jdbc.ConnectionImpl.createNewIO(ConnectionImpl.java:2016)
	at com.mysql.jdbc.ConnectionImpl.<init>(ConnectionImpl.java:776)
	at com.mysql.jdbc.JDBC4Connection.<init>(JDBC4Connection.java:47)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:425)
	at com.mysql.jdbc.ConnectionImpl.getInstance(ConnectionImpl.java:386)
	at com.mysql.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:330)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:148)
	at com.alibaba.druid.filter.FilterAdapter.connection_connect(FilterAdapter.java:785)
	at com.alibaba.druid.filter.FilterEventAdapter.connection_connect(FilterEventAdapter.java:38)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.filter.FilterAdapter.connection_connect(FilterAdapter.java:785)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.filter.stat.StatFilter.connection_connect(StatFilter.java:211)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1454)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1516)
	at com.alibaba.druid.pool.DruidDataSource.init(DruidDataSource.java:734)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeCustomInitMethod(AbstractAutowireCapableBeanFactory.java:1833)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1776)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1704)
	... 67 common frames omitted
2020-03-04 17:46:58 -Starting BootdoApplication on PC-201905091110 with PID 16564 (D:\eclipse2018-work\bootdo\target\classes started by Administrator in D:\eclipse2018-work\bootdo)
2020-03-04 17:46:58 -Running with Spring Boot v2.0.3.RELEASE, Spring v5.0.7.RELEASE
2020-03-04 17:46:58 -The following profiles are active: dev
2020-03-04 17:46:59 -Refreshing org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@74e47444: startup date [Wed Mar 04 17:46:59 CST 2020]; root of context hierarchy
2020-03-04 17:47:07 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-04 17:47:11 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$f858ac84] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-04 17:47:11 -Bean 'shiroConfig' of type [com.bootdo.system.config.ShiroConfig$$EnhancerBySpringCGLIB$$eab1db2b] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-04 17:47:12 -Bean 'userRealm' of type [com.bootdo.system.shiro.UserRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-04 17:47:13 -Bean 'cacheManager2' of type [net.sf.ehcache.CacheManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-04 17:47:13 -Bean 'ehCacheManager' of type [org.apache.shiro.cache.ehcache.EhCacheManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-04 17:47:13 -Cache with name 'com.bootdo.system.shiro.UserRealm.authorizationCache' does not yet exist.  Creating now.
2020-03-04 17:47:13 -Added EhCache named [com.bootdo.system.shiro.UserRealm.authorizationCache]
2020-03-04 17:47:13 -Bean 'sessionDAO' of type [org.apache.shiro.session.mgt.eis.MemorySessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-04 17:47:13 -Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-04 17:47:13 -Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-04 17:47:14 -Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-04 17:47:15 -Tomcat initialized with port(s): 8081 (http)
2020-03-04 17:47:15 -Initializing ProtocolHandler ["http-nio-8081"]
2020-03-04 17:47:15 -Starting service [Tomcat]
2020-03-04 17:47:15 -Starting Servlet Engine: Apache Tomcat/8.5.31
2020-03-04 17:47:15 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [D:\Java\JDK\jdk1.8.0_102\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;D:\Java\JDK\jdk1.8.0_102\jre\bin;D:/Java/JRE/bin/server;D:/Java/JRE/bin;D:/Java/JRE/lib/amd64;C:\ProgramData\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Windows\System32\OpenSSH\;%JAVA_HOME\bin%;;C:\Program Files (x86)\pycSafefile\x64;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;C:\Program Files\JetBrains\WebStorm 2019.2.4\bin;;D:\eclipse2018\eclipse;;.]
2020-03-04 17:47:16 -Initializing Spring embedded WebApplicationContext
2020-03-04 17:47:16 -Root WebApplicationContext: initialization completed in 16952 ms
2020-03-04 17:47:17 -Mapping filter: 'characterEncodingFilter' to: [/*]
2020-03-04 17:47:17 -Mapping filter: 'hiddenHttpMethodFilter' to: [/*]
2020-03-04 17:47:17 -Mapping filter: 'httpPutFormContentFilter' to: [/*]
2020-03-04 17:47:17 -Mapping filter: 'requestContextFilter' to: [/*]
2020-03-04 17:47:17 -Filter xssFilter was not registered (disabled)
2020-03-04 17:47:17 -Mapping filter: 'webStatFilter' to urls: [/*]
2020-03-04 17:47:17 -Mapping filter: 'shiroFilterFactoryBean' to: [/*]
2020-03-04 17:47:17 -Servlet statViewServlet mapped to [/druid/*]
2020-03-04 17:47:17 -Servlet dispatcherServlet mapped to [/]
2020-03-04 17:47:19 -Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'countDDController': Unsatisfied dependency expressed through field 'elecLogService'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'elecLogServiceImpl': Unsatisfied dependency expressed through field 'elecLogDao'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'elecLogDao' defined in file [D:\eclipse2018-work\bootdo\target\classes\com\bootdo\moneyLog\dao\ElecLogDao.class]: Unsatisfied dependency expressed through bean property 'sqlSessionFactory'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [org/mybatis/spring/boot/autoconfigure/MybatisAutoConfiguration.class]: Unsatisfied dependency expressed through method 'sqlSessionFactory' parameter 0; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSource' defined in class path resource [com/bootdo/common/config/DruidDBConfig.class]: Invocation of init method failed; nested exception is java.sql.SQLException: Access denied for user 'root'@'localhost' (using password: YES)
2020-03-04 17:47:19 -Stopping service [Tomcat]
2020-03-04 17:47:20 -

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2020-03-04 17:47:20 -Application run failed
org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'countDDController': Unsatisfied dependency expressed through field 'elecLogService'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'elecLogServiceImpl': Unsatisfied dependency expressed through field 'elecLogDao'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'elecLogDao' defined in file [D:\eclipse2018-work\bootdo\target\classes\com\bootdo\moneyLog\dao\ElecLogDao.class]: Unsatisfied dependency expressed through bean property 'sqlSessionFactory'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [org/mybatis/spring/boot/autoconfigure/MybatisAutoConfiguration.class]: Unsatisfied dependency expressed through method 'sqlSessionFactory' parameter 0; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSource' defined in class path resource [com/bootdo/common/config/DruidDBConfig.class]: Invocation of init method failed; nested exception is java.sql.SQLException: Access denied for user 'root'@'localhost' (using password: YES)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:587)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:91)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:373)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1350)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:580)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:503)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:317)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:315)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:760)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:869)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:550)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:140)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:759)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:395)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:327)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1255)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1243)
	at com.bootdo.BootdoApplication.main(BootdoApplication.java:22)
Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'elecLogServiceImpl': Unsatisfied dependency expressed through field 'elecLogDao'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'elecLogDao' defined in file [D:\eclipse2018-work\bootdo\target\classes\com\bootdo\moneyLog\dao\ElecLogDao.class]: Unsatisfied dependency expressed through bean property 'sqlSessionFactory'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [org/mybatis/spring/boot/autoconfigure/MybatisAutoConfiguration.class]: Unsatisfied dependency expressed through method 'sqlSessionFactory' parameter 0; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSource' defined in class path resource [com/bootdo/common/config/DruidDBConfig.class]: Invocation of init method failed; nested exception is java.sql.SQLException: Access denied for user 'root'@'localhost' (using password: YES)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:587)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:91)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:373)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1350)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:580)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:503)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:317)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:315)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:251)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1138)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1065)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:584)
	... 19 common frames omitted
Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'elecLogDao' defined in file [D:\eclipse2018-work\bootdo\target\classes\com\bootdo\moneyLog\dao\ElecLogDao.class]: Unsatisfied dependency expressed through bean property 'sqlSessionFactory'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [org/mybatis/spring/boot/autoconfigure/MybatisAutoConfiguration.class]: Unsatisfied dependency expressed through method 'sqlSessionFactory' parameter 0; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSource' defined in class path resource [com/bootdo/common/config/DruidDBConfig.class]: Invocation of init method failed; nested exception is java.sql.SQLException: Access denied for user 'root'@'localhost' (using password: YES)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1445)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1332)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:580)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:503)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:317)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:315)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:251)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1138)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1065)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:584)
	... 32 common frames omitted
Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [org/mybatis/spring/boot/autoconfigure/MybatisAutoConfiguration.class]: Unsatisfied dependency expressed through method 'sqlSessionFactory' parameter 0; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSource' defined in class path resource [com/bootdo/common/config/DruidDBConfig.class]: Invocation of init method failed; nested exception is java.sql.SQLException: Access denied for user 'root'@'localhost' (using password: YES)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:732)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:474)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1256)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1105)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:503)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:317)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:315)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:251)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1138)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1065)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1430)
	... 43 common frames omitted
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSource' defined in class path resource [com/bootdo/common/config/DruidDBConfig.class]: Invocation of init method failed; nested exception is java.sql.SQLException: Access denied for user 'root'@'localhost' (using password: YES)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1708)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:581)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:503)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:317)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:315)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:251)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1138)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1065)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:818)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:724)
	... 56 common frames omitted
Caused by: java.sql.SQLException: Access denied for user 'root'@'localhost' (using password: YES)
	at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:965)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3976)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3912)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:871)
	at com.mysql.jdbc.MysqlIO.proceedHandshakeWithPluggableAuthentication(MysqlIO.java:1714)
	at com.mysql.jdbc.MysqlIO.doHandshake(MysqlIO.java:1224)
	at com.mysql.jdbc.ConnectionImpl.coreConnect(ConnectionImpl.java:2190)
	at com.mysql.jdbc.ConnectionImpl.connectOneTryOnly(ConnectionImpl.java:2221)
	at com.mysql.jdbc.ConnectionImpl.createNewIO(ConnectionImpl.java:2016)
	at com.mysql.jdbc.ConnectionImpl.<init>(ConnectionImpl.java:776)
	at com.mysql.jdbc.JDBC4Connection.<init>(JDBC4Connection.java:47)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:425)
	at com.mysql.jdbc.ConnectionImpl.getInstance(ConnectionImpl.java:386)
	at com.mysql.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:330)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:148)
	at com.alibaba.druid.filter.FilterAdapter.connection_connect(FilterAdapter.java:785)
	at com.alibaba.druid.filter.FilterEventAdapter.connection_connect(FilterEventAdapter.java:38)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.filter.FilterAdapter.connection_connect(FilterAdapter.java:785)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.filter.stat.StatFilter.connection_connect(StatFilter.java:211)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1454)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1516)
	at com.alibaba.druid.pool.DruidDataSource.init(DruidDataSource.java:734)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeCustomInitMethod(AbstractAutowireCapableBeanFactory.java:1833)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1776)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1704)
	... 67 common frames omitted
2020-03-04 18:36:24 -Starting BootdoApplication on PC-201905091110 with PID 13112 (D:\eclipse2018-work\bootdo\target\classes started by Administrator in D:\eclipse2018-work\bootdo)
2020-03-04 18:36:24 -Running with Spring Boot v2.0.3.RELEASE, Spring v5.0.7.RELEASE
2020-03-04 18:36:24 -The following profiles are active: dev
2020-03-04 18:36:25 -Refreshing org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@30990c1b: startup date [Wed Mar 04 18:36:25 CST 2020]; root of context hierarchy
2020-03-04 18:36:34 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-04 18:36:37 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$3047e4ae] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-04 18:36:37 -Bean 'shiroConfig' of type [com.bootdo.system.config.ShiroConfig$$EnhancerBySpringCGLIB$$22a11355] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-04 18:36:38 -Bean 'userRealm' of type [com.bootdo.system.shiro.UserRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-04 18:36:39 -Bean 'cacheManager2' of type [net.sf.ehcache.CacheManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-04 18:36:39 -Bean 'ehCacheManager' of type [org.apache.shiro.cache.ehcache.EhCacheManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-04 18:36:39 -Cache with name 'com.bootdo.system.shiro.UserRealm.authorizationCache' does not yet exist.  Creating now.
2020-03-04 18:36:39 -Added EhCache named [com.bootdo.system.shiro.UserRealm.authorizationCache]
2020-03-04 18:36:39 -Bean 'sessionDAO' of type [org.apache.shiro.session.mgt.eis.MemorySessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-04 18:36:39 -Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-04 18:36:40 -Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-04 18:36:40 -Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-04 18:36:42 -Tomcat initialized with port(s): 8081 (http)
2020-03-04 18:36:42 -Initializing ProtocolHandler ["http-nio-8081"]
2020-03-04 18:36:42 -Starting service [Tomcat]
2020-03-04 18:36:42 -Starting Servlet Engine: Apache Tomcat/8.5.31
2020-03-04 18:36:42 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [D:\Java\JDK\jdk1.8.0_102\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;D:\Java\JDK\jdk1.8.0_102\jre\bin;D:/Java/JRE/bin/server;D:/Java/JRE/bin;D:/Java/JRE/lib/amd64;C:\ProgramData\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Windows\System32\OpenSSH\;%JAVA_HOME\bin%;;C:\Program Files (x86)\pycSafefile\x64;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;C:\Program Files\JetBrains\WebStorm 2019.2.4\bin;;D:\eclipse2018\eclipse;;.]
2020-03-04 18:36:43 -Initializing Spring embedded WebApplicationContext
2020-03-04 18:36:43 -Root WebApplicationContext: initialization completed in 18085 ms
2020-03-04 18:36:44 -Mapping filter: 'characterEncodingFilter' to: [/*]
2020-03-04 18:36:44 -Mapping filter: 'hiddenHttpMethodFilter' to: [/*]
2020-03-04 18:36:44 -Mapping filter: 'httpPutFormContentFilter' to: [/*]
2020-03-04 18:36:44 -Mapping filter: 'requestContextFilter' to: [/*]
2020-03-04 18:36:44 -Filter xssFilter was not registered (disabled)
2020-03-04 18:36:44 -Mapping filter: 'webStatFilter' to urls: [/*]
2020-03-04 18:36:44 -Mapping filter: 'shiroFilterFactoryBean' to: [/*]
2020-03-04 18:36:44 -Servlet statViewServlet mapped to [/druid/*]
2020-03-04 18:36:44 -Servlet dispatcherServlet mapped to [/]
2020-03-04 18:36:52 -ApplicationContext registed-->org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@30990c1b: startup date [Wed Mar 04 18:36:25 CST 2020]; root of context hierarchy
2020-03-04 18:36:53 -Using default implementation for ThreadExecutor
2020-03-04 18:36:53 -Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-03-04 18:36:53 -Quartz Scheduler v.2.3.0 created.
2020-03-04 18:36:53 -RAMJobStore initialized.
2020-03-04 18:36:53 -Scheduler meta-data: Quartz Scheduler (v2.3.0) 'schedulerFactoryBean' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-03-04 18:36:53 -Quartz scheduler 'schedulerFactoryBean' initialized from an externally provided properties instance.
2020-03-04 18:36:53 -Quartz scheduler version: 2.3.0
2020-03-04 18:36:53 -JobFactory set to: com.bootdo.common.quartz.factory.JobFactory@7944c323
2020-03-04 18:36:54 -Initializing ExecutorService  'clientInboundChannelExecutor'
2020-03-04 18:36:54 -Initializing ExecutorService  'clientOutboundChannelExecutor'
2020-03-04 18:36:59 -Mapped "{[/charts/countDD],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.countDDController.countDD()
2020-03-04 18:36:59 -Mapped "{[/charts/countDD/exportDD],methods=[GET]}" onto public void com.bootdo.charts.controller.countDDController.exportDD(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.HeatLogVo,com.bootdo.moneyLog.vo.WaterLogVo,javax.servlet.http.HttpServletResponse)
2020-03-04 18:36:59 -Mapped "{[/charts/countDD/getCountDD],methods=[POST]}" onto public java.util.Map<java.lang.String, java.lang.Object> com.bootdo.charts.controller.countDDController.getCountD(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo)
2020-03-04 18:36:59 -Mapped "{[/charts/countMM/exportMM],methods=[GET]}" onto public void com.bootdo.charts.controller.countMMController.exportMM(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.HeatLogVo,com.bootdo.moneyLog.vo.WaterLogVo,javax.servlet.http.HttpServletResponse)
2020-03-04 18:36:59 -Mapped "{[/charts/countMM],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.countMMController.countMM()
2020-03-04 18:36:59 -Mapped "{[/charts/countMM/getCountMM],methods=[POST]}" onto public java.util.Map<java.lang.String, java.lang.Object> com.bootdo.charts.controller.countMMController.getCountMM(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo)
2020-03-04 18:36:59 -Mapped "{[/charts/countOwe],methods=[GET]}" onto java.lang.String com.bootdo.charts.controller.countOweController.countOwe()
2020-03-04 18:36:59 -Mapped "{[/charts/countOwe/getCountOwe],methods=[POST]}" onto public java.util.Map<java.lang.String, java.lang.Object> com.bootdo.charts.controller.countOweController.getCountOwe(com.bootdo.elec.vo.ElecVo,com.bootdo.water.vo.WaterVo,com.bootdo.heat.vo.HeatVo)
2020-03-04 18:36:59 -Mapped "{[/charts/countOwe/exportOwe],methods=[GET]}" onto public void com.bootdo.charts.controller.countOweController.exportOwe(com.bootdo.elec.vo.ElecVo,com.bootdo.heat.vo.HeatVo,com.bootdo.water.vo.WaterVo,javax.servlet.http.HttpServletResponse)
2020-03-04 18:36:59 -Mapped "{[/charts/countRun/getCountRun],methods=[POST]}" onto public java.util.Map<java.lang.String, java.lang.Object> com.bootdo.charts.controller.countRunController.getCountRun(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo)
2020-03-04 18:36:59 -Mapped "{[/charts/countRun],methods=[GET]}" onto java.lang.String com.bootdo.charts.controller.countRunController.countRun()
2020-03-04 18:36:59 -Mapped "{[/charts/countRun/exportRun],methods=[GET]}" onto public void com.bootdo.charts.controller.countRunController.exportRun(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.HeatLogVo,com.bootdo.moneyLog.vo.WaterLogVo,javax.servlet.http.HttpServletResponse)
2020-03-04 18:36:59 -Mapped "{[/charts/countYY/getCountYY],methods=[POST]}" onto public java.util.Map<java.lang.String, java.lang.Object> com.bootdo.charts.controller.countYYController.getCountYY(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo)
2020-03-04 18:36:59 -Mapped "{[/charts/countYY/exportYY],methods=[GET]}" onto public void com.bootdo.charts.controller.countYYController.exportYY(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.HeatLogVo,com.bootdo.moneyLog.vo.WaterLogVo,javax.servlet.http.HttpServletResponse)
2020-03-04 18:36:59 -Mapped "{[/charts/countYY],methods=[GET]}" onto java.lang.String com.bootdo.charts.controller.countYYController.countYY()
2020-03-04 18:36:59 -Mapped "{[/charts/tableDD],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.tableDDController.countDD()
2020-03-04 18:36:59 -Mapped "{[/charts/tableDD/exportDD],methods=[GET]}" onto public void com.bootdo.charts.controller.tableDDController.exportDD(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.HeatLogVo,com.bootdo.moneyLog.vo.WaterLogVo,javax.servlet.http.HttpServletResponse)
2020-03-04 18:36:59 -Mapped "{[/charts/tableDD/getTableDD],methods=[POST]}" onto public java.util.Map<java.lang.String, java.lang.Object> com.bootdo.charts.controller.tableDDController.getTableDD(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo)
2020-03-04 18:36:59 -Mapped "{[/charts/tableElecMM/exportElecMM],methods=[GET]}" onto public void com.bootdo.charts.controller.tableElecMMController.exportElecMM(com.bootdo.elec.vo.ElecVo,com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse)
2020-03-04 18:36:59 -Mapped "{[/charts/tableElecMM],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.tableElecMMController.tableElecMM()
2020-03-04 18:36:59 -Mapped "{[/charts/tableElecMM/tableElecMM],methods=[POST]}" onto public java.util.Map<java.lang.String, java.lang.Object> com.bootdo.charts.controller.tableElecMMController.tableElecMM(com.bootdo.elec.vo.ElecVo,com.bootdo.moneyLog.vo.ElecLogVo)
2020-03-04 18:36:59 -Mapped "{[/charts/tableElecYY/tableElecYY],methods=[POST]}" onto public java.util.Map<java.lang.String, java.lang.Object> com.bootdo.charts.controller.tableElecYYController.tableElecYY(com.bootdo.elec.vo.ElecVo,com.bootdo.moneyLog.vo.ElecLogVo)
2020-03-04 18:36:59 -Mapped "{[/charts/tableElecYY],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.tableElecYYController.tableElecYY()
2020-03-04 18:36:59 -Mapped "{[/charts/tableElecYY/exportElecYY],methods=[GET]}" onto public void com.bootdo.charts.controller.tableElecYYController.exportElecYY(com.bootdo.elec.vo.ElecVo,com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse)
2020-03-04 18:36:59 -Mapped "{[/charts/tableHeatMM/tableHeatMM],methods=[POST]}" onto public java.util.Map<java.lang.String, java.lang.Object> com.bootdo.charts.controller.tableHeatMMController.tableHeatMM(com.bootdo.heat.vo.HeatVo,com.bootdo.moneyLog.vo.HeatLogVo)
2020-03-04 18:36:59 -Mapped "{[/charts/tableHeatMM],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.tableHeatMMController.tableHeatMM()
2020-03-04 18:36:59 -Mapped "{[/charts/tableHeatMM/exportHeatMM],methods=[GET]}" onto public void com.bootdo.charts.controller.tableHeatMMController.exportHeatMM(com.bootdo.heat.vo.HeatVo,com.bootdo.moneyLog.vo.HeatLogVo,javax.servlet.http.HttpServletResponse)
2020-03-04 18:36:59 -Mapped "{[/charts/tableHeatYY/tableHeatYY],methods=[POST]}" onto public java.util.Map<java.lang.String, java.lang.Object> com.bootdo.charts.controller.tableHeatYYController.tableHeatYY(com.bootdo.heat.vo.HeatVo,com.bootdo.moneyLog.vo.HeatLogVo)
2020-03-04 18:36:59 -Mapped "{[/charts/tableHeatYY],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.tableHeatYYController.tableHeatYY()
2020-03-04 18:36:59 -Mapped "{[/charts/tableHeatYY/exportHeatYY],methods=[GET]}" onto public void com.bootdo.charts.controller.tableHeatYYController.exportHeatYY(com.bootdo.heat.vo.HeatVo,com.bootdo.moneyLog.vo.HeatLogVo,javax.servlet.http.HttpServletResponse)
2020-03-04 18:36:59 -Mapped "{[/charts/tableWaterMM/exportWaterMM],methods=[GET]}" onto public void com.bootdo.charts.controller.tableWaterMMController.exportWaterMM(com.bootdo.water.vo.WaterVo,com.bootdo.moneyLog.vo.WaterLogVo,javax.servlet.http.HttpServletResponse)
2020-03-04 18:36:59 -Mapped "{[/charts/tableWaterMM],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.tableWaterMMController.tableWaterMM()
2020-03-04 18:36:59 -Mapped "{[/charts/tableWaterMM/tableWaterMM],methods=[POST]}" onto public java.util.Map<java.lang.String, java.lang.Object> com.bootdo.charts.controller.tableWaterMMController.tableWaterMM(com.bootdo.water.vo.WaterVo,com.bootdo.moneyLog.vo.WaterLogVo)
2020-03-04 18:36:59 -Mapped "{[/charts/tableWaterYY/tableWaterYY],methods=[POST]}" onto public java.util.Map<java.lang.String, java.lang.Integer> com.bootdo.charts.controller.tableWaterYYController.tableWaterYY(com.bootdo.water.vo.WaterVo,com.bootdo.moneyLog.vo.WaterLogVo)
2020-03-04 18:36:59 -Mapped "{[/charts/tableWaterYY],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.tableWaterYYController.tableWaterYY()
2020-03-04 18:36:59 -Mapped "{[/charts/tableWaterYY/exportWaterYY],methods=[GET]}" onto public void com.bootdo.charts.controller.tableWaterYYController.exportWaterYY(com.bootdo.water.vo.WaterVo,com.bootdo.moneyLog.vo.WaterLogVo,javax.servlet.http.HttpServletResponse)
2020-03-04 18:36:59 -Mapped "{[/common/dict/add],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.add()
2020-03-04 18:36:59 -Mapped "{[/common/dict/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.remove(java.lang.Long)
2020-03-04 18:36:59 -Mapped "{[/common/dict/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.remove(java.lang.Long[])
2020-03-04 18:36:59 -Mapped "{[/common/dict/update]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.update(com.bootdo.common.domain.DictDO)
2020-03-04 18:36:59 -Mapped "{[/common/dict/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.common.controller.DictController.list(java.util.Map<java.lang.String, java.lang.Object>)
2020-03-04 18:36:59 -Mapped "{[/common/dict/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.save(com.bootdo.common.domain.DictDO)
2020-03-04 18:36:59 -Mapped "{[/common/dict/type],methods=[GET]}" onto public java.util.List<com.bootdo.common.domain.DictDO> com.bootdo.common.controller.DictController.listType()
2020-03-04 18:36:59 -Mapped "{[/common/dict/list/{type}],methods=[GET]}" onto public java.util.List<com.bootdo.common.domain.DictDO> com.bootdo.common.controller.DictController.listByType(java.lang.String)
2020-03-04 18:36:59 -Mapped "{[/common/dict],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.dict()
2020-03-04 18:36:59 -Mapped "{[/common/dict/add/{type}/{description}],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.addD(org.springframework.ui.Model,java.lang.String,java.lang.String)
2020-03-04 18:36:59 -Mapped "{[/common/dict/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.edit(java.lang.Long,org.springframework.ui.Model)
2020-03-04 18:36:59 -Mapped "{[/common/sysFile/add],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.FileController.add()
2020-03-04 18:36:59 -Mapped "{[/common/sysFile/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.remove(java.lang.Long,javax.servlet.http.HttpServletRequest)
2020-03-04 18:36:59 -Mapped "{[/common/sysFile/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.remove(java.lang.Long[])
2020-03-04 18:36:59 -Mapped "{[/common/sysFile/update]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.update(com.bootdo.common.domain.FileDO)
2020-03-04 18:36:59 -Mapped "{[/common/sysFile/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.common.controller.FileController.list(java.util.Map<java.lang.String, java.lang.Object>)
2020-03-04 18:36:59 -Mapped "{[/common/sysFile/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.save(com.bootdo.common.domain.FileDO)
2020-03-04 18:36:59 -Mapped "{[/common/sysFile/info/{id}]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.info(java.lang.Long)
2020-03-04 18:36:59 -Mapped "{[/common/sysFile],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.FileController.sysFile(org.springframework.ui.Model)
2020-03-04 18:36:59 -Mapped "{[/common/sysFile/upload],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.FileController.upload(org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpServletRequest)
2020-03-04 18:36:59 -Mapped "{[/common/sysFile/edit],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.FileController.edit(java.lang.Long,org.springframework.ui.Model)
2020-03-04 18:36:59 -Mapped "{[/common/generator/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.GeneratorController.update(java.util.Map<java.lang.String, java.lang.Object>)
2020-03-04 18:36:59 -Mapped "{[/common/generator/list],methods=[GET]}" onto java.util.List<java.util.Map<java.lang.String, java.lang.Object>> com.bootdo.common.controller.GeneratorController.list()
2020-03-04 18:36:59 -Mapped "{[/common/generator/code/{tableName}]}" onto public void com.bootdo.common.controller.GeneratorController.code(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String) throws java.io.IOException
2020-03-04 18:36:59 -Mapped "{[/common/generator],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.GeneratorController.generator()
2020-03-04 18:36:59 -Mapped "{[/common/generator/batchCode]}" onto public void com.bootdo.common.controller.GeneratorController.batchCode(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String) throws java.io.IOException
2020-03-04 18:36:59 -Mapped "{[/common/generator/edit],methods=[GET]}" onto public java.lang.String com.bootdo.common.controller.GeneratorController.edit(org.springframework.ui.Model)
2020-03-04 18:36:59 -Mapped "{[/common/job/add],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.JobController.add()
2020-03-04 18:36:59 -Mapped "{[/common/job/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.remove(java.lang.Long)
2020-03-04 18:36:59 -Mapped "{[/common/job/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.remove(java.lang.Long[])
2020-03-04 18:36:59 -Mapped "{[/common/job/update],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.update(com.bootdo.common.domain.TaskDO)
2020-03-04 18:36:59 -Mapped "{[/common/job/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.common.controller.JobController.list(java.util.Map<java.lang.String, java.lang.Object>)
2020-03-04 18:36:59 -Mapped "{[/common/job/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.save(com.bootdo.common.domain.TaskDO)
2020-03-04 18:36:59 -Mapped "{[/common/job/info/{id}]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.info(java.lang.Long)
2020-03-04 18:36:59 -Mapped "{[/common/job/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.JobController.edit(java.lang.Long,org.springframework.ui.Model)
2020-03-04 18:36:59 -Mapped "{[/common/job],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.JobController.taskScheduleJob()
2020-03-04 18:36:59 -Mapped "{[/common/job/changeJobStatus],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.changeJobStatus(java.lang.Long,java.lang.String)
2020-03-04 18:36:59 -Mapped "{[/common/log/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.LogController.remove(java.lang.Long)
2020-03-04 18:36:59 -Mapped "{[/common/log],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.LogController.log()
2020-03-04 18:36:59 -Mapped "{[/common/log/list],methods=[GET]}" onto com.bootdo.common.domain.PageDO<com.bootdo.common.domain.LogDO> com.bootdo.common.controller.LogController.list(java.util.Map<java.lang.String, java.lang.Object>)
2020-03-04 18:36:59 -Mapped "{[/common/log/batchRemove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.LogController.batchRemove(java.lang.Long[])
2020-03-04 18:36:59 -Mapped "{[/common/long],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.LongController.Long()
2020-03-04 18:36:59 -Mapped "{[/common/time],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.TimeController.Time()
2020-03-04 18:36:59 -Mapped "{[/error],produces=[text/html]}" onto public org.springframework.web.servlet.ModelAndView com.bootdo.common.exception.MainsiteErrorController.errorHtml(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2020-03-04 18:36:59 -Mapped "{[/error]}" onto public com.bootdo.common.utils.R com.bootdo.common.exception.MainsiteErrorController.handleError(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2020-03-04 18:36:59 -Mapped "{[/elec/elec/add],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecController.add()
2020-03-04 18:36:59 -Mapped "{[/elec/elec/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.remove(java.lang.Long)
2020-03-04 18:36:59 -Mapped "{[/elec/elec/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.remove(java.lang.Long[])
2020-03-04 18:36:59 -Mapped "{[/elec/elec/update],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.update(com.bootdo.elec.domain.ElecDO)
2020-03-04 18:36:59 -Mapped "{[/elec/elec/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.elec.controller.ElecController.list(java.util.Map<java.lang.String, java.lang.Object>,com.bootdo.elec.domain.ElecDO)
2020-03-04 18:36:59 -Mapped "{[/elec/elec/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.save(com.bootdo.elec.domain.ElecDO)
2020-03-04 18:36:59 -Mapped "{[/elec/elec/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecController.edit(java.lang.Long,org.springframework.ui.Model)
2020-03-04 18:36:59 -Mapped "{[/elec/elec],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecController.Elec()
2020-03-04 18:36:59 -Mapped "{[/elec/elec/exprotElec],methods=[GET]}" onto public void com.bootdo.elec.controller.ElecController.exprotExcel(com.bootdo.elec.vo.ElecVo,javax.servlet.http.HttpServletResponse)
2020-03-04 18:36:59 -Mapped "{[/elec/elecInto],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecIntoController.ElecInto()
2020-03-04 18:36:59 -Mapped "{[/elec/elecInto/exprotElecIntoExcel],methods=[GET]}" onto public void com.bootdo.elec.controller.ElecIntoController.exprotExcel(com.bootdo.elec.vo.ElecVo,javax.servlet.http.HttpServletResponse)
2020-03-04 18:36:59 -Mapped "{[/elec/elecInto/importElecIntoExcel],methods=[POST]}" onto public java.lang.String com.bootdo.elec.controller.ElecIntoController.importElecIntoExcel(org.springframework.web.multipart.MultipartFile,com.bootdo.elec.vo.ElecVo,javax.servlet.http.HttpServletResponse) throws java.lang.Exception
2020-03-04 18:36:59 -Mapped "{[/elec/elecPrice/add],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecPriceController.add()
2020-03-04 18:36:59 -Mapped "{[/elec/elecPrice/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecPriceController.remove(java.lang.Long)
2020-03-04 18:36:59 -Mapped "{[/elec/elecPrice/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecPriceController.remove(java.lang.Long[])
2020-03-04 18:36:59 -Mapped "{[/elec/elecPrice/update]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecPriceController.update(com.bootdo.elec.domain.ElecPriceDO)
2020-03-04 18:36:59 -Mapped "{[/elec/elecPrice/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.elec.controller.ElecPriceController.list(java.util.Map<java.lang.String, java.lang.Object>)
2020-03-04 18:36:59 -Mapped "{[/elec/elecPrice/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecPriceController.save(com.bootdo.elec.domain.ElecPriceDO,com.bootdo.elec.domain.ElecDO)
2020-03-04 18:36:59 -Mapped "{[/elec/elecPrice/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecPriceController.edit(java.lang.Long,org.springframework.ui.Model)
2020-03-04 18:36:59 -Mapped "{[/elec/elecPrice],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecPriceController.ElecPrice()
2020-03-04 18:36:59 -Mapped "{[/elec/elecUpLoad],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecUpLoadController.Elec()
2020-03-04 18:36:59 -Mapped "{[/elec/elecUpLoad/importElecExcel],methods=[POST]}" onto public java.util.Map<java.lang.String, java.lang.Object> com.bootdo.elec.controller.ElecUpLoadController.importElecExcel(org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpServletRequest) throws java.lang.Exception
2020-03-04 18:36:59 -Mapped "{[/elec/elecUpLoad/importElecUser]}" onto public java.lang.String com.bootdo.elec.controller.ElecUpLoadController.importElecUser(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)
2020-03-04 18:36:59 -Mapped "{[/elec/elecUpLoad/exprotElecExcel],methods=[GET]}" onto public void com.bootdo.elec.controller.ElecUpLoadController.exprotElecExcel(com.bootdo.elec.vo.ElecVo,javax.servlet.http.HttpServletResponse)
2020-03-04 18:36:59 -Mapped "{[/heat/heat/add],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatController.add()
2020-03-04 18:36:59 -Mapped "{[/heat/heat/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatController.remove(java.lang.Integer)
2020-03-04 18:36:59 -Mapped "{[/heat/heat/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatController.remove(java.lang.Integer[])
2020-03-04 18:36:59 -Mapped "{[/heat/heat/update]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatController.update(com.bootdo.heat.domain.HeatDO)
2020-03-04 18:36:59 -Mapped "{[/heat/heat/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.heat.controller.HeatController.list(java.util.Map<java.lang.String, java.lang.Object>)
2020-03-04 18:36:59 -Mapped "{[/heat/heat/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatController.save(com.bootdo.heat.domain.HeatDO)
2020-03-04 18:36:59 -Mapped "{[/heat/heat/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatController.edit(java.lang.Integer,org.springframework.ui.Model)
2020-03-04 18:36:59 -Mapped "{[/heat/heat/exprotHeat],methods=[GET]}" onto public void com.bootdo.heat.controller.HeatController.exprotExcel(com.bootdo.heat.vo.HeatVo,javax.servlet.http.HttpServletResponse)
2020-03-04 18:36:59 -Mapped "{[/heat/heat],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatController.Heat()
2020-03-04 18:36:59 -Mapped "{[/heat/heatInto/exprotHeatIntoExcel],methods=[GET]}" onto public void com.bootdo.heat.controller.HeatIntoController.exprotExcel(com.bootdo.heat.vo.HeatVo,javax.servlet.http.HttpServletResponse)
2020-03-04 18:36:59 -Mapped "{[/heat/heatInto],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatIntoController.HeatInto()
2020-03-04 18:36:59 -Mapped "{[/heat/heatInto/importHeatIntoExcel],methods=[POST]}" onto public java.lang.String com.bootdo.heat.controller.HeatIntoController.importHeatIntoExcel(org.springframework.web.multipart.MultipartFile,com.bootdo.heat.vo.HeatVo,javax.servlet.http.HttpServletResponse) throws java.lang.Exception
2020-03-04 18:36:59 -Mapped "{[/heat/heatPrice/add],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatPriceController.add()
2020-03-04 18:36:59 -Mapped "{[/heat/heatPrice/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatPriceController.remove(java.lang.Long)
2020-03-04 18:36:59 -Mapped "{[/heat/heatPrice/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatPriceController.remove(java.lang.Long[])
2020-03-04 18:36:59 -Mapped "{[/heat/heatPrice/update]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatPriceController.update(com.bootdo.heat.domain.HeatPriceDO)
2020-03-04 18:36:59 -Mapped "{[/heat/heatPrice/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.heat.controller.HeatPriceController.list(java.util.Map<java.lang.String, java.lang.Object>)
2020-03-04 18:36:59 -Mapped "{[/heat/heatPrice/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatPriceController.save(com.bootdo.heat.domain.HeatPriceDO)
2020-03-04 18:36:59 -Mapped "{[/heat/heatPrice],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatPriceController.HeatPrice()
2020-03-04 18:36:59 -Mapped "{[/heat/heatPrice/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatPriceController.edit(java.lang.Long,org.springframework.ui.Model)
2020-03-04 18:36:59 -Mapped "{[/heat/heatUpLoad/importHeatExcel]}" onto public java.lang.String com.bootdo.heat.controller.HeatUpLoadController.importHeatExcel(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)
2020-03-04 18:36:59 -Mapped "{[/heat/heatUpLoad],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatUpLoadController.HeatUpLoad()
2020-03-04 18:36:59 -Mapped "{[/heat/heatUpLoad/halfHeatExcel],methods=[POST]}" onto public java.lang.String com.bootdo.heat.controller.HeatUpLoadController.halfHeatExcel(com.bootdo.heat.domain.HeatDO) throws java.lang.Exception
2020-03-04 18:36:59 -Mapped "{[/heat/heatUpLoad/createHeatExcel],methods=[POST]}" onto public java.lang.String com.bootdo.heat.controller.HeatUpLoadController.createHeatExcel(com.bootdo.heat.domain.HeatDO) throws java.lang.Exception
2020-03-04 18:36:59 -Mapped "{[/heat/heatUpLoad/exprotHeatExcel],methods=[GET]}" onto public void com.bootdo.heat.controller.HeatUpLoadController.exprotHeatExcel(com.bootdo.heat.vo.HeatVo,javax.servlet.http.HttpServletResponse)
2020-03-04 18:36:59 -Mapped "{[/heat/heatUpLoad/nextHeatExcel],methods=[POST]}" onto public java.lang.String com.bootdo.heat.controller.HeatUpLoadController.nextHeatExcel(com.bootdo.heat.domain.HeatDO) throws java.lang.Exception
2020-03-04 18:36:59 -Mapped "{[/moneyList/moneyList],methods=[GET]}" onto java.lang.String com.bootdo.moneyList.controller.MoneyListController.MoneyList()
2020-03-04 18:36:59 -Mapped "{[/moneyList/moneyList/queryAllUser],methods=[POST]}" onto public java.util.List<com.bootdo.moneyList.damain.MoneyListDO> com.bootdo.moneyList.controller.MoneyListController.queryAllUser(com.bootdo.moneyList.damain.MoneyListDO)
2020-03-04 18:36:59 -Mapped "{[/moneyList/moneyList/moneyPrint/{id}/{userNo}],methods=[GET]}" onto java.lang.String com.bootdo.moneyList.controller.MoneyListController.printEdit(java.lang.Long,java.lang.String,org.springframework.ui.Model,com.bootdo.moneyList.damain.MoneyListDO,javax.servlet.http.HttpServletRequest)
2020-03-04 18:36:59 -Mapped "{[/moneyList/moneyList/updateMoney],methods=[POST]}" onto public java.lang.Long com.bootdo.moneyList.controller.MoneyListController.updateMoney(com.bootdo.moneyList.damain.MoneyListDO,javax.servlet.http.HttpServletRequest)
2020-03-04 18:36:59 -Mapped "{[/moneyList/moneyList/queryAllUserName],methods=[POST]}" onto public java.util.List<com.bootdo.moneyList.damain.MoneyListDO> com.bootdo.moneyList.controller.MoneyListController.getAllUserName(com.bootdo.moneyList.damain.MoneyListDO)
2020-03-04 18:36:59 -Mapped "{[/moneyList/moneyWZ/add],methods=[GET]}" onto java.lang.String com.bootdo.moneyList.controller.MoneyListWZController.add()
2020-03-04 18:36:59 -Mapped "{[/moneyList/moneyWZ/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyList.controller.MoneyListWZController.remove(java.lang.Long)
2020-03-04 18:36:59 -Mapped "{[/moneyList/moneyWZ/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyList.controller.MoneyListWZController.remove(java.lang.Long[])
2020-03-04 18:36:59 -Mapped "{[/moneyList/moneyWZ/update],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyList.controller.MoneyListWZController.update(com.bootdo.elec.domain.ElecDO)
2020-03-04 18:36:59 -Mapped "{[/moneyList/moneyWZ/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.moneyList.controller.MoneyListWZController.list(java.util.Map<java.lang.String, java.lang.Object>,com.bootdo.elec.domain.ElecDO)
2020-03-04 18:36:59 -Mapped "{[/moneyList/moneyWZ/exprotWZ],methods=[GET]}" onto public void com.bootdo.moneyList.controller.MoneyListWZController.exportElecYY(com.bootdo.elec.vo.ElecVo,com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse)
2020-03-04 18:36:59 -Mapped "{[/moneyList/moneyWZ/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.moneyList.controller.MoneyListWZController.edit(java.lang.Long,org.springframework.ui.Model)
2020-03-04 18:36:59 -Mapped "{[/moneyList/moneyWZ],methods=[GET]}" onto java.lang.String com.bootdo.moneyList.controller.MoneyListWZController.MoneyWZ()
2020-03-04 18:36:59 -Mapped "{[/moneyList/moneyWZ/batchMoney],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyList.controller.MoneyListWZController.batchMoney(java.lang.Long[])
2020-03-04 18:36:59 -Mapped "{[/moneyLog/elecLog/add],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.ElecLogController.add()
2020-03-04 18:36:59 -Mapped "{[/moneyLog/elecLog/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.ElecLogController.remove(java.lang.Long)
2020-03-04 18:36:59 -Mapped "{[/moneyLog/elecLog/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.ElecLogController.remove(java.lang.Long[])
2020-03-04 18:36:59 -Mapped "{[/moneyLog/elecLog/update]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.ElecLogController.update(java.util.Map<java.lang.String, java.lang.Object>,com.bootdo.moneyLog.domain.ElecLogDO)
2020-03-04 18:36:59 -Mapped "{[/moneyLog/elecLog/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.moneyLog.controller.ElecLogController.list(java.util.Map<java.lang.String, java.lang.Object>)
2020-03-04 18:36:59 -Mapped "{[/moneyLog/elecLog/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.ElecLogController.save(com.bootdo.moneyLog.domain.ElecLogDO)
2020-03-04 18:36:59 -Mapped "{[/moneyLog/elecLog/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.ElecLogController.edit(java.lang.Long,org.springframework.ui.Model)
2020-03-04 18:36:59 -Mapped "{[/moneyLog/elecLog/exprotElecLog],methods=[GET]}" onto public void com.bootdo.moneyLog.controller.ElecLogController.exprotElecLog(com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2020-03-04 18:36:59 -Mapped "{[/moneyLog/elecLog],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.ElecLogController.moneyLog()
2020-03-04 18:36:59 -Mapped "{[/moneyLog/heatLog/add],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.HeatLogController.add()
2020-03-04 18:36:59 -Mapped "{[/moneyLog/heatLog/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.HeatLogController.remove(java.lang.Long)
2020-03-04 18:36:59 -Mapped "{[/moneyLog/heatLog/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.HeatLogController.remove(java.lang.Long[])
2020-03-04 18:36:59 -Mapped "{[/moneyLog/heatLog/update]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.HeatLogController.update(java.util.Map<java.lang.String, java.lang.Object>,com.bootdo.moneyLog.domain.HeatLogDO)
2020-03-04 18:36:59 -Mapped "{[/moneyLog/heatLog/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.moneyLog.controller.HeatLogController.list(java.util.Map<java.lang.String, java.lang.Object>)
2020-03-04 18:36:59 -Mapped "{[/moneyLog/heatLog/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.HeatLogController.save(com.bootdo.moneyLog.domain.HeatLogDO)
2020-03-04 18:36:59 -Mapped "{[/moneyLog/heatLog/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.HeatLogController.edit(java.lang.Long,org.springframework.ui.Model)
2020-03-04 18:36:59 -Mapped "{[/moneyLog/heatLog/exprotHeatLog],methods=[GET]}" onto public void com.bootdo.moneyLog.controller.HeatLogController.exprotHeatLog(com.bootdo.moneyLog.vo.HeatLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2020-03-04 18:36:59 -Mapped "{[/moneyLog/heatLog],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.HeatLogController.HeatLog()
2020-03-04 18:36:59 -Mapped "{[/moneyLog/waterLog/add],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.WaterLogController.add()
2020-03-04 18:36:59 -Mapped "{[/moneyLog/waterLog/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.WaterLogController.remove(java.lang.Long)
2020-03-04 18:36:59 -Mapped "{[/moneyLog/waterLog/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.WaterLogController.remove(java.lang.Long[])
2020-03-04 18:36:59 -Mapped "{[/moneyLog/waterLog/update]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.WaterLogController.update(java.util.Map<java.lang.String, java.lang.Object>,com.bootdo.moneyLog.domain.WaterLogDO)
2020-03-04 18:36:59 -Mapped "{[/moneyLog/waterLog/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.moneyLog.controller.WaterLogController.list(java.util.Map<java.lang.String, java.lang.Object>)
2020-03-04 18:36:59 -Mapped "{[/moneyLog/waterLog/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.WaterLogController.save(com.bootdo.moneyLog.domain.WaterLogDO)
2020-03-04 18:36:59 -Mapped "{[/moneyLog/waterLog/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.WaterLogController.edit(java.lang.Long,org.springframework.ui.Model)
2020-03-04 18:36:59 -Mapped "{[/moneyLog/waterLog/exprotWaterLog],methods=[GET]}" onto public void com.bootdo.moneyLog.controller.WaterLogController.exprotWaterLog(com.bootdo.moneyLog.vo.WaterLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2020-03-04 18:36:59 -Mapped "{[/moneyLog/waterLog],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.WaterLogController.WaterLog()
2020-03-04 18:36:59 -Mapped "{[/moneyUpLoad/ElecLogUpLoad],methods=[GET]}" onto java.lang.String com.bootdo.moneyUpLoad.Controller.ElecLogUpLoadController.ElecLogUpLoad()
2020-03-04 18:36:59 -Mapped "{[/moneyUpLoad/ElecLogUpLoad/exprotElecLogExcel],methods=[GET]}" onto public void com.bootdo.moneyUpLoad.Controller.ElecLogUpLoadController.exprotElecLogExcel(com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2020-03-04 18:36:59 -Mapped "{[/moneyUpLoad/ElecLogUpLoad/importElecLogExcel]}" onto public java.lang.String com.bootdo.moneyUpLoad.Controller.ElecLogUpLoadController.importElecLogExcel(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)
2020-03-04 18:36:59 -Mapped "{[/moneyUpLoad/HeatLogUpLoad],methods=[GET]}" onto java.lang.String com.bootdo.moneyUpLoad.Controller.HeatLogUpLoadController.HeatLogUpLoad()
2020-03-04 18:36:59 -Mapped "{[/moneyUpLoad/HeatLogUpLoad/importHeatLogExcel]}" onto public java.lang.String com.bootdo.moneyUpLoad.Controller.HeatLogUpLoadController.importHeatLogExcel(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)
2020-03-04 18:36:59 -Mapped "{[/moneyUpLoad/HeatLogUpLoad/exprotHeatLogExcel],methods=[GET]}" onto public void com.bootdo.moneyUpLoad.Controller.HeatLogUpLoadController.exprotHeatLogExcel(com.bootdo.moneyLog.vo.HeatLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2020-03-04 18:36:59 -Mapped "{[/moneyUpLoad/WaterLogUpLoad],methods=[GET]}" onto java.lang.String com.bootdo.moneyUpLoad.Controller.WaterLogUpLoadController.WaterLogLogUpLoad()
2020-03-04 18:36:59 -Mapped "{[/moneyUpLoad/WaterLogUpLoad/exprotWaterLogExcel],methods=[GET]}" onto public void com.bootdo.moneyUpLoad.Controller.WaterLogUpLoadController.exprotWaterLogExcel(com.bootdo.moneyLog.vo.WaterLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2020-03-04 18:36:59 -Mapped "{[/moneyUpLoad/WaterLogUpLoad/importWaterLogExcel]}" onto public java.lang.String com.bootdo.moneyUpLoad.Controller.WaterLogUpLoadController.importWaterLogExcel(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)
2020-03-04 18:36:59 -Mapped "{[/oa/notify/add],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.add()
2020-03-04 18:36:59 -Mapped "{[/oa/notify/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.remove(java.lang.Long)
2020-03-04 18:36:59 -Mapped "{[/oa/notify/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.remove(java.lang.Long[])
2020-03-04 18:36:59 -Mapped "{[/oa/notify/update]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.update(com.bootdo.oa.domain.NotifyDO)
2020-03-04 18:36:59 -Mapped "{[/oa/notify/read/{id}],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.read(java.lang.Long,org.springframework.ui.Model)
2020-03-04 18:36:59 -Mapped "{[/oa/notify/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.oa.controller.NotifyController.list(java.util.Map<java.lang.String, java.lang.Object>)
2020-03-04 18:36:59 -Mapped "{[/oa/notify/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.save(com.bootdo.oa.domain.NotifyDO)
2020-03-04 18:36:59 -Mapped "{[/oa/notify/message],methods=[GET]}" onto com.bootdo.common.utils.PageUtils com.bootdo.oa.controller.NotifyController.message()
2020-03-04 18:36:59 -Mapped "{[/oa/notify/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.edit(java.lang.Long,org.springframework.ui.Model)
2020-03-04 18:36:59 -Mapped "{[/oa/notify],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.oaNotify()
2020-03-04 18:36:59 -Mapped "{[/oa/notify/selfList],methods=[GET]}" onto com.bootdo.common.utils.PageUtils com.bootdo.oa.controller.NotifyController.selfList(java.util.Map<java.lang.String, java.lang.Object>)
2020-03-04 18:36:59 -Mapped "{[/oa/notify/selfNotify],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.selefNotify()
2020-03-04 18:36:59 -Mapped "{[/print/print/add],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.add()
2020-03-04 18:36:59 -Mapped "{[/print/print/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.print.controller.PrintController.remove(java.lang.Long)
2020-03-04 18:36:59 -Mapped "{[/print/print/update]}" onto public com.bootdo.common.utils.R com.bootdo.print.controller.PrintController.update(com.bootdo.print.domain.PrintDO)
2020-03-04 18:36:59 -Mapped "{[/print/print/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.print.controller.PrintController.list(java.util.Map<java.lang.String, java.lang.Object>)
2020-03-04 18:36:59 -Mapped "{[/print/print/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.print.controller.PrintController.save(java.lang.String,com.bootdo.print.domain.PrintDO)
2020-03-04 18:36:59 -Mapped "{[/print/print/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.print.controller.PrintController.batchRemove(java.lang.Long[])
2020-03-04 18:36:59 -Mapped "{[/print/print/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.edit(java.lang.Long,org.springframework.ui.Model)
2020-03-04 18:36:59 -Mapped "{[/print/print/printEdit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.printEdit(java.lang.Long,org.springframework.ui.Model)
2020-03-04 18:36:59 -Mapped "{[/print/print/printMoney],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.printMoney()
2020-03-04 18:36:59 -Mapped "{[/print/print/batchPrint],methods=[POST]}" onto public java.util.List<com.bootdo.print.vo.PrintVo> com.bootdo.print.controller.PrintController.batchPrint(java.lang.Long[])
2020-03-04 18:36:59 -Mapped "{[/print/print],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.Print()
2020-03-04 18:36:59 -Mapped "{[/print/print/exprotPrint],methods=[GET]}" onto public void com.bootdo.print.controller.PrintController.exprotPrint(com.bootdo.print.vo.PrintVo,javax.servlet.http.HttpServletResponse)
2020-03-04 18:36:59 -Mapped "{[/system/sysDept/add/{pId}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.add(java.lang.Long,org.springframework.ui.Model)
2020-03-04 18:36:59 -Mapped "{[/system/sysDept/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.remove(java.lang.Long)
2020-03-04 18:36:59 -Mapped "{[/system/sysDept/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.remove(java.lang.Long[])
2020-03-04 18:36:59 -Mapped "{[/system/sysDept/update]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.update(com.bootdo.system.domain.DeptDO)
2020-03-04 18:36:59 -Mapped "{[/system/sysDept/list],methods=[GET]}" onto public java.util.List<com.bootdo.system.domain.DeptDO> com.bootdo.system.controller.DeptController.list()
2020-03-04 18:36:59 -Mapped "{[/system/sysDept/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.save(com.bootdo.system.domain.DeptDO)
2020-03-04 18:36:59 -Mapped "{[/system/sysDept/tree],methods=[GET]}" onto public com.bootdo.common.domain.Tree<com.bootdo.system.domain.DeptDO> com.bootdo.system.controller.DeptController.tree()
2020-03-04 18:36:59 -Mapped "{[/system/sysDept/edit/{deptId}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.edit(java.lang.Long,org.springframework.ui.Model)
2020-03-04 18:36:59 -Mapped "{[/system/sysDept/treeView],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.treeView(org.springframework.web.servlet.ModelAndView)
2020-03-04 18:36:59 -Mapped "{[/system/sysDept],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.dept()
2020-03-04 18:36:59 -Mapped "{[/index],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.index(org.springframework.ui.Model)
2020-03-04 18:36:59 -Mapped "{[/main],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.main()
2020-03-04 18:36:59 -Mapped "{[/login],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.login(org.springframework.ui.Model)
2020-03-04 18:36:59 -Mapped "{[/logout],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.logout()
2020-03-04 18:36:59 -Mapped "{[/ || ],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.welcome(org.springframework.ui.Model)
2020-03-04 18:36:59 -Mapped "{[/getVerify],methods=[GET]}" onto public void com.bootdo.system.controller.LoginController.getVerify(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2020-03-04 18:36:59 -Mapped "{[/login],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.LoginController.ajaxLogin(java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest)
2020-03-04 18:36:59 -Mapped "{[/sys/menu/add/{pId}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.MenuController.add(org.springframework.ui.Model,java.lang.Long)
2020-03-04 18:36:59 -Mapped "{[/sys/menu/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.MenuController.remove(java.lang.Long)
2020-03-04 18:36:59 -Mapped "{[/sys/menu/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.MenuController.update(com.bootdo.system.domain.MenuDO)
2020-03-04 18:36:59 -Mapped "{[/sys/menu/list]}" onto java.util.List<com.bootdo.system.domain.MenuDO> com.bootdo.system.controller.MenuController.list(java.util.Map<java.lang.String, java.lang.Object>)
2020-03-04 18:36:59 -Mapped "{[/sys/menu/save],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.MenuController.save(com.bootdo.system.domain.MenuDO)
2020-03-04 18:36:59 -Mapped "{[/sys/menu/tree/{roleId}],methods=[GET]}" onto com.bootdo.common.domain.Tree<com.bootdo.system.domain.MenuDO> com.bootdo.system.controller.MenuController.tree(java.lang.Long)
2020-03-04 18:36:59 -Mapped "{[/sys/menu/tree],methods=[GET]}" onto com.bootdo.common.domain.Tree<com.bootdo.system.domain.MenuDO> com.bootdo.system.controller.MenuController.tree()
2020-03-04 18:36:59 -Mapped "{[/sys/menu/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.MenuController.edit(org.springframework.ui.Model,java.lang.Long)
2020-03-04 18:36:59 -Mapped "{[/sys/menu],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.MenuController.menu(org.springframework.ui.Model)
2020-03-04 18:36:59 -Mapped "{[/sys/role/add],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.RoleController.add()
2020-03-04 18:36:59 -Mapped "{[/sys/role/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.update(com.bootdo.system.domain.RoleDO)
2020-03-04 18:36:59 -Mapped "{[/sys/role/list],methods=[GET]}" onto java.util.List<com.bootdo.system.domain.RoleDO> com.bootdo.system.controller.RoleController.list()
2020-03-04 18:36:59 -Mapped "{[/sys/role/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.save(java.lang.Long)
2020-03-04 18:36:59 -Mapped "{[/sys/role/save],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.save(com.bootdo.system.domain.RoleDO)
2020-03-04 18:36:59 -Mapped "{[/sys/role/batchRemove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.batchRemove(java.lang.Long[])
2020-03-04 18:36:59 -Mapped "{[/sys/role/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.RoleController.edit(java.lang.Long,org.springframework.ui.Model)
2020-03-04 18:36:59 -Mapped "{[/sys/role],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.RoleController.role()
2020-03-04 18:36:59 -Mapped "{[/sys/online/list]}" onto public java.util.List<com.bootdo.system.domain.UserOnline> com.bootdo.system.controller.SessionController.list()
2020-03-04 18:36:59 -Mapped "{[/sys/online/forceLogout/{sessionId}]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.SessionController.forceLogout(java.lang.String,org.springframework.web.servlet.mvc.support.RedirectAttributes)
2020-03-04 18:36:59 -Mapped "{[/sys/online],methods=[GET]}" onto public java.lang.String com.bootdo.system.controller.SessionController.online()
2020-03-04 18:36:59 -Mapped "{[/sys/online/sessionList]}" onto public java.util.Collection<org.apache.shiro.session.Session> com.bootdo.system.controller.SessionController.sessionList()
2020-03-04 18:36:59 -Mapped "{[/sys/user/exit],methods=[POST]}" onto boolean com.bootdo.system.controller.UserController.exit(java.util.Map<java.lang.String, java.lang.Object>)
2020-03-04 18:36:59 -Mapped "{[/sys/user/add],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.add(org.springframework.ui.Model)
2020-03-04 18:36:59 -Mapped "{[/sys/user/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.remove(java.lang.Long)
2020-03-04 18:36:59 -Mapped "{[/sys/user/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.update(com.bootdo.system.domain.UserDO)
2020-03-04 18:36:59 -Mapped "{[/sys/user/list],methods=[GET]}" onto com.bootdo.common.utils.PageUtils com.bootdo.system.controller.UserController.list(java.util.Map<java.lang.String, java.lang.Object>)
2020-03-04 18:36:59 -Mapped "{[/sys/user/save],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.save(com.bootdo.system.domain.UserDO)
2020-03-04 18:36:59 -Mapped "{[/sys/user/batchRemove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.batchRemove(java.lang.Long[])
2020-03-04 18:36:59 -Mapped "{[/sys/user/tree],methods=[GET]}" onto public com.bootdo.common.domain.Tree<com.bootdo.system.domain.DeptDO> com.bootdo.system.controller.UserController.tree()
2020-03-04 18:36:59 -Mapped "{[/sys/user/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.edit(org.springframework.ui.Model,java.lang.Long)
2020-03-04 18:36:59 -Mapped "{[/sys/user/treeView],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.treeView()
2020-03-04 18:36:59 -Mapped "{[/sys/user/resetPwd],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.resetPwd(com.bootdo.system.vo.UserVO)
2020-03-04 18:36:59 -Mapped "{[/sys/user/resetPwd/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.resetPwd(java.lang.Long,org.springframework.ui.Model)
2020-03-04 18:36:59 -Mapped "{[/sys/user/updatePeronal],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.updatePeronal(com.bootdo.system.domain.UserDO)
2020-03-04 18:36:59 -Mapped "{[/sys/user/adminResetPwd],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.adminResetPwd(com.bootdo.system.vo.UserVO)
2020-03-04 18:36:59 -Mapped "{[/sys/user/uploadImg],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.uploadImg(org.springframework.web.multipart.MultipartFile,java.lang.String,javax.servlet.http.HttpServletRequest)
2020-03-04 18:36:59 -Mapped "{[/sys/user/personal],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.personal(org.springframework.ui.Model)
2020-03-04 18:36:59 -Mapped "{[/sys/user],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.user(org.springframework.ui.Model)
2020-03-04 18:36:59 -Mapped "{[/file/downImport/{importType}],methods=[GET]}" onto public void com.bootdo.temple.controller.TempletController.downImport(javax.servlet.http.HttpServletResponse,java.lang.String)
2020-03-04 18:36:59 -Mapped "{[/water/water/add],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterController.add()
2020-03-04 18:36:59 -Mapped "{[/water/water/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterController.remove(java.lang.Long)
2020-03-04 18:36:59 -Mapped "{[/water/water/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterController.remove(java.lang.Long[])
2020-03-04 18:36:59 -Mapped "{[/water/water/update]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterController.update(com.bootdo.water.domain.WaterDO)
2020-03-04 18:36:59 -Mapped "{[/water/water/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.water.controller.WaterController.list(java.util.Map<java.lang.String, java.lang.Object>)
2020-03-04 18:36:59 -Mapped "{[/water/water/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterController.save(com.bootdo.water.domain.WaterDO)
2020-03-04 18:36:59 -Mapped "{[/water/water],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterController.Water()
2020-03-04 18:36:59 -Mapped "{[/water/water/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterController.edit(java.lang.Long,org.springframework.ui.Model)
2020-03-04 18:36:59 -Mapped "{[/water/water/exprotWater],methods=[GET]}" onto public void com.bootdo.water.controller.WaterController.exprotExcel(com.bootdo.water.vo.WaterVo,javax.servlet.http.HttpServletResponse)
2020-03-04 18:36:59 -Mapped "{[/water/waterInto],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterIntoController.WaterInto()
2020-03-04 18:36:59 -Mapped "{[/water/waterInto/exprotWaterIntoExcel],methods=[GET]}" onto public void com.bootdo.water.controller.WaterIntoController.exprotExcel(com.bootdo.water.vo.WaterVo,javax.servlet.http.HttpServletResponse)
2020-03-04 18:36:59 -Mapped "{[/water/waterInto/importWaterIntoExcel],methods=[POST]}" onto public java.lang.String com.bootdo.water.controller.WaterIntoController.importWaterIntoExcel(org.springframework.web.multipart.MultipartFile,com.bootdo.water.vo.WaterVo,javax.servlet.http.HttpServletResponse) throws java.lang.Exception
2020-03-04 18:36:59 -Mapped "{[/water/waterPrice/add],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterPriceController.add()
2020-03-04 18:36:59 -Mapped "{[/water/waterPrice/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterPriceController.remove(java.lang.Long)
2020-03-04 18:36:59 -Mapped "{[/water/waterPrice/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterPriceController.remove(java.lang.Long[])
2020-03-04 18:36:59 -Mapped "{[/water/waterPrice/update]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterPriceController.update(com.bootdo.water.domain.WaterPriceDO)
2020-03-04 18:36:59 -Mapped "{[/water/waterPrice/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.water.controller.WaterPriceController.list(java.util.Map<java.lang.String, java.lang.Object>)
2020-03-04 18:36:59 -Mapped "{[/water/waterPrice/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterPriceController.save(com.bootdo.water.domain.WaterPriceDO)
2020-03-04 18:36:59 -Mapped "{[/water/waterPrice],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterPriceController.WaterPrice()
2020-03-04 18:36:59 -Mapped "{[/water/waterPrice/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterPriceController.edit(java.lang.Long,org.springframework.ui.Model)
2020-03-04 18:36:59 -Mapped "{[/water/waterUpLoad/createWaterExcel],methods=[POST]}" onto public java.lang.String com.bootdo.water.controller.WaterUpLoadController.createWaterExcel(com.bootdo.water.domain.WaterDO) throws java.lang.Exception
2020-03-04 18:36:59 -Mapped "{[/water/waterUpLoad],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterUpLoadController.WaterUpLoad()
2020-03-04 18:36:59 -Mapped "{[/water/waterUpLoad/importWaterExcel]}" onto public java.lang.String com.bootdo.water.controller.WaterUpLoadController.importWaterExcel(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)
2020-03-04 18:36:59 -Mapped "{[/water/waterUpLoad/exprotWaterExcel],methods=[GET]}" onto public void com.bootdo.water.controller.WaterUpLoadController.exprotWaterExcel(com.bootdo.water.vo.WaterVo,javax.servlet.http.HttpServletResponse)
2020-03-04 18:36:59 -Mapped "{[/v2/api-docs],methods=[GET],produces=[application/json || application/hal+json]}" onto public org.springframework.http.ResponseEntity<springfox.documentation.spring.web.json.Json> springfox.documentation.swagger2.web.Swagger2Controller.getDocumentation(java.lang.String,javax.servlet.http.HttpServletRequest)
2020-03-04 18:36:59 -Mapped "{[/swagger-resources/configuration/ui]}" onto org.springframework.http.ResponseEntity<springfox.documentation.swagger.web.UiConfiguration> springfox.documentation.swagger.web.ApiResourceController.uiConfiguration()
2020-03-04 18:36:59 -Mapped "{[/swagger-resources]}" onto org.springframework.http.ResponseEntity<java.util.List<springfox.documentation.swagger.web.SwaggerResource>> springfox.documentation.swagger.web.ApiResourceController.swaggerResources()
2020-03-04 18:36:59 -Mapped "{[/swagger-resources/configuration/security]}" onto org.springframework.http.ResponseEntity<springfox.documentation.swagger.web.SecurityConfiguration> springfox.documentation.swagger.web.ApiResourceController.securityConfiguration()
2020-03-04 18:37:00 -Initializing ExecutorService  'messageBrokerTaskScheduler'
2020-03-04 18:37:00 -Mapped URL path [/endpointChat/**] onto handler of type [class org.springframework.web.socket.sockjs.support.SockJsHttpRequestHandler]
2020-03-04 18:37:00 -Initializing ExecutorService  'brokerChannelExecutor'
2020-03-04 18:37:02 -Mapped URL path [/**/favicon.ico] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2020-03-04 18:37:02 -Looking for @ControllerAdvice: org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@30990c1b: startup date [Wed Mar 04 18:36:25 CST 2020]; root of context hierarchy
2020-03-04 18:37:02 -Mapped URL path [/webjars/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2020-03-04 18:37:02 -Mapped URL path [/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2020-03-04 18:37:02 -Detected @ExceptionHandler methods in BDExceptionHandler
2020-03-04 18:37:03 -[THYMELEAF][main] Template Mode 'LEGACYHTML5' is deprecated. Using Template Mode 'HTML' instead.
2020-03-04 18:37:08 -Registering beans for JMX exposure on startup
2020-03-04 18:37:08 -Bean with name 'dataSource' has been autodetected for JMX exposure
2020-03-04 18:37:08 -Located MBean 'dataSource': registering with JMX server as MBean [com.alibaba.druid.pool:name=dataSource,type=DruidDataSource]
2020-03-04 18:37:08 -Starting beans in phase 2147483647
2020-03-04 18:37:08 -Context refreshed
2020-03-04 18:37:08 -Found 1 custom documentation plugin(s)
2020-03-04 18:37:08 -Scanning for api listing references
2020-03-04 18:37:10 -Generating unique operation named: removeUsingPOST_1
2020-03-04 18:37:10 -Generating unique operation named: addUsingGET_1
2020-03-04 18:37:10 -Generating unique operation named: editUsingGET_1
2020-03-04 18:37:10 -Generating unique operation named: listUsingGET_1
2020-03-04 18:37:10 -Generating unique operation named: removeUsingPOST_2
2020-03-04 18:37:10 -Generating unique operation named: removeUsingPOST_3
2020-03-04 18:37:10 -Generating unique operation named: saveUsingPOST_1
2020-03-04 18:37:10 -Generating unique operation named: updateUsingGET_1
2020-03-04 18:37:10 -Generating unique operation named: updateUsingHEAD_1
2020-03-04 18:37:10 -Generating unique operation named: updateUsingPOST_1
2020-03-04 18:37:10 -Generating unique operation named: updateUsingPUT_1
2020-03-04 18:37:10 -Generating unique operation named: updateUsingPATCH_1
2020-03-04 18:37:10 -Generating unique operation named: updateUsingDELETE_1
2020-03-04 18:37:10 -Generating unique operation named: updateUsingOPTIONS_1
2020-03-04 18:37:10 -Generating unique operation named: updateUsingTRACE_1
2020-03-04 18:37:10 -Generating unique operation named: addUsingGET_2
2020-03-04 18:37:10 -Generating unique operation named: editUsingGET_2
2020-03-04 18:37:10 -Generating unique operation named: listUsingGET_2
2020-03-04 18:37:10 -Generating unique operation named: removeUsingPOST_4
2020-03-04 18:37:10 -Generating unique operation named: removeUsingPOST_5
2020-03-04 18:37:10 -Generating unique operation named: saveUsingPOST_2
2020-03-04 18:37:10 -Generating unique operation named: updateUsingPOST_2
2020-03-04 18:37:10 -Generating unique operation named: exprotExcelUsingGET_1
2020-03-04 18:37:10 -Generating unique operation named: addUsingGET_3
2020-03-04 18:37:10 -Generating unique operation named: editUsingGET_3
2020-03-04 18:37:10 -Generating unique operation named: listUsingGET_3
2020-03-04 18:37:10 -Generating unique operation named: removeUsingPOST_6
2020-03-04 18:37:10 -Generating unique operation named: removeUsingPOST_7
2020-03-04 18:37:10 -Generating unique operation named: saveUsingPOST_3
2020-03-04 18:37:10 -Generating unique operation named: updateUsingGET_2
2020-03-04 18:37:10 -Generating unique operation named: updateUsingHEAD_2
2020-03-04 18:37:10 -Generating unique operation named: updateUsingPOST_3
2020-03-04 18:37:10 -Generating unique operation named: updateUsingPUT_2
2020-03-04 18:37:10 -Generating unique operation named: updateUsingPATCH_2
2020-03-04 18:37:10 -Generating unique operation named: updateUsingDELETE_2
2020-03-04 18:37:10 -Generating unique operation named: updateUsingOPTIONS_2
2020-03-04 18:37:10 -Generating unique operation named: updateUsingTRACE_2
2020-03-04 18:37:10 -Generating unique operation named: addUsingGET_4
2020-03-04 18:37:10 -Generating unique operation named: editUsingGET_4
2020-03-04 18:37:10 -Generating unique operation named: listUsingGET_4
2020-03-04 18:37:10 -Generating unique operation named: removeUsingPOST_8
2020-03-04 18:37:10 -Generating unique operation named: removeUsingPOST_9
2020-03-04 18:37:10 -Generating unique operation named: saveUsingPOST_4
2020-03-04 18:37:10 -Generating unique operation named: updateUsingGET_3
2020-03-04 18:37:10 -Generating unique operation named: updateUsingHEAD_3
2020-03-04 18:37:10 -Generating unique operation named: updateUsingPOST_4
2020-03-04 18:37:10 -Generating unique operation named: updateUsingPUT_3
2020-03-04 18:37:10 -Generating unique operation named: updateUsingPATCH_3
2020-03-04 18:37:10 -Generating unique operation named: updateUsingDELETE_3
2020-03-04 18:37:10 -Generating unique operation named: updateUsingOPTIONS_3
2020-03-04 18:37:10 -Generating unique operation named: updateUsingTRACE_3
2020-03-04 18:37:10 -Generating unique operation named: ElecUsingGET_1
2020-03-04 18:37:10 -Generating unique operation named: addUsingGET_5
2020-03-04 18:37:10 -Generating unique operation named: editUsingGET_5
2020-03-04 18:37:10 -Generating unique operation named: listUsingGET_5
2020-03-04 18:37:10 -Generating unique operation named: removeUsingPOST_10
2020-03-04 18:37:10 -Generating unique operation named: removeUsingPOST_11
2020-03-04 18:37:10 -Generating unique operation named: saveUsingPOST_5
2020-03-04 18:37:11 -Generating unique operation named: updateUsingGET_4
2020-03-04 18:37:11 -Generating unique operation named: updateUsingHEAD_4
2020-03-04 18:37:11 -Generating unique operation named: updateUsingPOST_5
2020-03-04 18:37:11 -Generating unique operation named: updateUsingPUT_4
2020-03-04 18:37:11 -Generating unique operation named: updateUsingPATCH_4
2020-03-04 18:37:11 -Generating unique operation named: updateUsingDELETE_4
2020-03-04 18:37:11 -Generating unique operation named: updateUsingOPTIONS_4
2020-03-04 18:37:11 -Generating unique operation named: updateUsingTRACE_4
2020-03-04 18:37:11 -Generating unique operation named: editUsingGET_6
2020-03-04 18:37:11 -Generating unique operation named: listUsingGET_6
2020-03-04 18:37:11 -Generating unique operation named: updateUsingPOST_6
2020-03-04 18:37:11 -Generating unique operation named: addUsingGET_6
2020-03-04 18:37:11 -Generating unique operation named: editUsingGET_7
2020-03-04 18:37:11 -Generating unique operation named: exprotExcelUsingGET_2
2020-03-04 18:37:11 -Generating unique operation named: listUsingGET_7
2020-03-04 18:37:11 -Generating unique operation named: removeUsingPOST_12
2020-03-04 18:37:11 -Generating unique operation named: removeUsingPOST_13
2020-03-04 18:37:11 -Generating unique operation named: saveUsingPOST_6
2020-03-04 18:37:11 -Generating unique operation named: updateUsingGET_5
2020-03-04 18:37:11 -Generating unique operation named: updateUsingHEAD_5
2020-03-04 18:37:11 -Generating unique operation named: updateUsingPOST_7
2020-03-04 18:37:11 -Generating unique operation named: updateUsingPUT_5
2020-03-04 18:37:11 -Generating unique operation named: updateUsingPATCH_5
2020-03-04 18:37:11 -Generating unique operation named: updateUsingDELETE_5
2020-03-04 18:37:11 -Generating unique operation named: updateUsingOPTIONS_5
2020-03-04 18:37:11 -Generating unique operation named: updateUsingTRACE_5
2020-03-04 18:37:11 -Generating unique operation named: exprotExcelUsingGET_3
2020-03-04 18:37:11 -Generating unique operation named: addUsingGET_7
2020-03-04 18:37:11 -Generating unique operation named: editUsingGET_8
2020-03-04 18:37:11 -Generating unique operation named: listUsingGET_8
2020-03-04 18:37:11 -Generating unique operation named: removeUsingPOST_14
2020-03-04 18:37:11 -Generating unique operation named: removeUsingPOST_15
2020-03-04 18:37:11 -Generating unique operation named: saveUsingPOST_7
2020-03-04 18:37:11 -Generating unique operation named: updateUsingGET_6
2020-03-04 18:37:11 -Generating unique operation named: updateUsingHEAD_6
2020-03-04 18:37:11 -Generating unique operation named: updateUsingPOST_8
2020-03-04 18:37:11 -Generating unique operation named: updateUsingPUT_6
2020-03-04 18:37:11 -Generating unique operation named: updateUsingPATCH_6
2020-03-04 18:37:11 -Generating unique operation named: updateUsingDELETE_6
2020-03-04 18:37:11 -Generating unique operation named: updateUsingOPTIONS_6
2020-03-04 18:37:11 -Generating unique operation named: updateUsingTRACE_6
2020-03-04 18:37:11 -Generating unique operation named: addUsingGET_8
2020-03-04 18:37:11 -Generating unique operation named: editUsingGET_9
2020-03-04 18:37:11 -Generating unique operation named: listUsingGET_9
2020-03-04 18:37:11 -Generating unique operation named: removeUsingPOST_16
2020-03-04 18:37:11 -Generating unique operation named: removeUsingPOST_17
2020-03-04 18:37:11 -Generating unique operation named: saveUsingPOST_8
2020-03-04 18:37:11 -Generating unique operation named: updateUsingGET_7
2020-03-04 18:37:11 -Generating unique operation named: updateUsingHEAD_7
2020-03-04 18:37:11 -Generating unique operation named: updateUsingPOST_9
2020-03-04 18:37:11 -Generating unique operation named: updateUsingPUT_7
2020-03-04 18:37:11 -Generating unique operation named: updateUsingPATCH_7
2020-03-04 18:37:11 -Generating unique operation named: updateUsingDELETE_7
2020-03-04 18:37:11 -Generating unique operation named: updateUsingOPTIONS_7
2020-03-04 18:37:11 -Generating unique operation named: updateUsingTRACE_7
2020-03-04 18:37:11 -Generating unique operation named: addUsingGET_9
2020-03-04 18:37:11 -Generating unique operation named: editUsingGET_10
2020-03-04 18:37:11 -Generating unique operation named: infoUsingGET_1
2020-03-04 18:37:11 -Generating unique operation named: infoUsingHEAD_1
2020-03-04 18:37:11 -Generating unique operation named: infoUsingPOST_1
2020-03-04 18:37:11 -Generating unique operation named: infoUsingPUT_1
2020-03-04 18:37:11 -Generating unique operation named: infoUsingPATCH_1
2020-03-04 18:37:11 -Generating unique operation named: infoUsingDELETE_1
2020-03-04 18:37:11 -Generating unique operation named: infoUsingOPTIONS_1
2020-03-04 18:37:11 -Generating unique operation named: infoUsingTRACE_1
2020-03-04 18:37:11 -Generating unique operation named: listUsingGET_10
2020-03-04 18:37:11 -Generating unique operation named: removeUsingPOST_18
2020-03-04 18:37:11 -Generating unique operation named: removeUsingPOST_19
2020-03-04 18:37:11 -Generating unique operation named: saveUsingPOST_9
2020-03-04 18:37:11 -Generating unique operation named: updateUsingPOST_10
2020-03-04 18:37:11 -Generating unique operation named: listUsingGET_11
2020-03-04 18:37:11 -Generating unique operation named: removeUsingPOST_20
2020-03-04 18:37:11 -Generating unique operation named: welcomeUsingGET_1
2020-03-04 18:37:11 -Generating unique operation named: addUsingGET_10
2020-03-04 18:37:12 -Generating unique operation named: editUsingGET_11
2020-03-04 18:37:12 -Generating unique operation named: listUsingGET_12
2020-03-04 18:37:12 -Generating unique operation named: removeUsingPOST_21
2020-03-04 18:37:12 -Generating unique operation named: saveUsingPOST_10
2020-03-04 18:37:12 -Generating unique operation named: treeUsingGET_1
2020-03-04 18:37:12 -Generating unique operation named: treeUsingGET_2
2020-03-04 18:37:12 -Generating unique operation named: updateUsingPOST_11
2020-03-04 18:37:12 -Generating unique operation named: addUsingGET_11
2020-03-04 18:37:12 -Generating unique operation named: editUsingGET_12
2020-03-04 18:37:12 -Generating unique operation named: listUsingGET_13
2020-03-04 18:37:12 -Generating unique operation named: removeUsingPOST_22
2020-03-04 18:37:12 -Generating unique operation named: removeUsingPOST_23
2020-03-04 18:37:12 -Generating unique operation named: updateUsingPOST_12
2020-03-04 18:37:12 -Generating unique operation named: addUsingGET_12
2020-03-04 18:37:12 -Generating unique operation named: editUsingGET_13
2020-03-04 18:37:12 -Generating unique operation named: listUsingGET_14
2020-03-04 18:37:12 -Generating unique operation named: removeUsingPOST_24
2020-03-04 18:37:12 -Generating unique operation named: removeUsingPOST_25
2020-03-04 18:37:12 -Generating unique operation named: saveUsingPOST_11
2020-03-04 18:37:12 -Generating unique operation named: updateUsingGET_8
2020-03-04 18:37:12 -Generating unique operation named: updateUsingHEAD_8
2020-03-04 18:37:12 -Generating unique operation named: updateUsingPOST_13
2020-03-04 18:37:12 -Generating unique operation named: updateUsingPUT_8
2020-03-04 18:37:12 -Generating unique operation named: updateUsingPATCH_8
2020-03-04 18:37:12 -Generating unique operation named: updateUsingDELETE_8
2020-03-04 18:37:12 -Generating unique operation named: updateUsingOPTIONS_8
2020-03-04 18:37:12 -Generating unique operation named: updateUsingTRACE_8
2020-03-04 18:37:12 -Generating unique operation named: addUsingGET_13
2020-03-04 18:37:12 -Generating unique operation named: batchRemoveUsingPOST_1
2020-03-04 18:37:12 -Generating unique operation named: editUsingGET_14
2020-03-04 18:37:12 -Generating unique operation named: listUsingGET_15
2020-03-04 18:37:12 -Generating unique operation named: printEditUsingGET_1
2020-03-04 18:37:12 -Generating unique operation named: removeUsingPOST_26
2020-03-04 18:37:12 -Generating unique operation named: saveUsingPOST_12
2020-03-04 18:37:12 -Generating unique operation named: updateUsingGET_9
2020-03-04 18:37:12 -Generating unique operation named: updateUsingHEAD_9
2020-03-04 18:37:12 -Generating unique operation named: updateUsingPOST_14
2020-03-04 18:37:12 -Generating unique operation named: updateUsingPUT_9
2020-03-04 18:37:12 -Generating unique operation named: updateUsingPATCH_9
2020-03-04 18:37:12 -Generating unique operation named: updateUsingDELETE_9
2020-03-04 18:37:12 -Generating unique operation named: updateUsingOPTIONS_9
2020-03-04 18:37:12 -Generating unique operation named: updateUsingTRACE_9
2020-03-04 18:37:12 -Generating unique operation named: addUsingGET_14
2020-03-04 18:37:12 -Generating unique operation named: batchRemoveUsingPOST_2
2020-03-04 18:37:12 -Generating unique operation named: editUsingGET_15
2020-03-04 18:37:12 -Generating unique operation named: listUsingGET_16
2020-03-04 18:37:12 -Generating unique operation named: saveUsingPOST_13
2020-03-04 18:37:12 -Generating unique operation named: saveUsingPOST_14
2020-03-04 18:37:12 -Generating unique operation named: updateUsingPOST_15
2020-03-04 18:37:12 -Generating unique operation named: listUsingGET_17
2020-03-04 18:37:12 -Generating unique operation named: listUsingHEAD_1
2020-03-04 18:37:13 -Generating unique operation named: listUsingPOST_1
2020-03-04 18:37:13 -Generating unique operation named: listUsingPUT_1
2020-03-04 18:37:13 -Generating unique operation named: listUsingPATCH_1
2020-03-04 18:37:13 -Generating unique operation named: listUsingDELETE_1
2020-03-04 18:37:13 -Generating unique operation named: listUsingOPTIONS_1
2020-03-04 18:37:13 -Generating unique operation named: listUsingTRACE_1
2020-03-04 18:37:13 -Generating unique operation named: countDDUsingGET_1
2020-03-04 18:37:13 -Generating unique operation named: exportDDUsingGET_1
2020-03-04 18:37:13 -Generating unique operation named: exportElecYYUsingGET_1
2020-03-04 18:37:13 -Generating unique operation named: addUsingGET_15
2020-03-04 18:37:13 -Generating unique operation named: batchRemoveUsingPOST_3
2020-03-04 18:37:13 -Generating unique operation named: editUsingGET_16
2020-03-04 18:37:13 -Generating unique operation named: listUsingGET_18
2020-03-04 18:37:13 -Generating unique operation named: removeUsingPOST_27
2020-03-04 18:37:13 -Generating unique operation named: saveUsingPOST_15
2020-03-04 18:37:13 -Generating unique operation named: treeUsingGET_3
2020-03-04 18:37:13 -Generating unique operation named: treeViewUsingGET_1
2020-03-04 18:37:13 -Generating unique operation named: updateUsingPOST_16
2020-03-04 18:37:13 -Generating unique operation named: addUsingGET_16
2020-03-04 18:37:13 -Generating unique operation named: editUsingGET_17
2020-03-04 18:37:13 -Generating unique operation named: exprotExcelUsingGET_4
2020-03-04 18:37:13 -Generating unique operation named: listUsingGET_19
2020-03-04 18:37:13 -Generating unique operation named: removeUsingPOST_28
2020-03-04 18:37:13 -Generating unique operation named: removeUsingPOST_29
2020-03-04 18:37:13 -Generating unique operation named: saveUsingPOST_16
2020-03-04 18:37:13 -Generating unique operation named: updateUsingGET_10
2020-03-04 18:37:13 -Generating unique operation named: updateUsingHEAD_10
2020-03-04 18:37:13 -Generating unique operation named: updateUsingPOST_17
2020-03-04 18:37:13 -Generating unique operation named: updateUsingPUT_10
2020-03-04 18:37:13 -Generating unique operation named: updateUsingPATCH_10
2020-03-04 18:37:13 -Generating unique operation named: updateUsingDELETE_10
2020-03-04 18:37:13 -Generating unique operation named: updateUsingOPTIONS_10
2020-03-04 18:37:13 -Generating unique operation named: updateUsingTRACE_10
2020-03-04 18:37:13 -Generating unique operation named: exprotExcelUsingGET_5
2020-03-04 18:37:13 -Generating unique operation named: addUsingGET_17
2020-03-04 18:37:13 -Generating unique operation named: editUsingGET_18
2020-03-04 18:37:13 -Generating unique operation named: listUsingGET_20
2020-03-04 18:37:13 -Generating unique operation named: removeUsingPOST_30
2020-03-04 18:37:13 -Generating unique operation named: removeUsingPOST_31
2020-03-04 18:37:13 -Generating unique operation named: saveUsingPOST_17
2020-03-04 18:37:13 -Generating unique operation named: updateUsingGET_11
2020-03-04 18:37:13 -Generating unique operation named: updateUsingHEAD_11
2020-03-04 18:37:13 -Generating unique operation named: updateUsingPOST_18
2020-03-04 18:37:13 -Generating unique operation named: updateUsingPUT_11
2020-03-04 18:37:13 -Generating unique operation named: updateUsingPATCH_11
2020-03-04 18:37:13 -Generating unique operation named: updateUsingDELETE_11
2020-03-04 18:37:13 -Generating unique operation named: updateUsingOPTIONS_11
2020-03-04 18:37:13 -Generating unique operation named: updateUsingTRACE_11
2020-03-04 18:37:13 -Generating unique operation named: addUsingGET_18
2020-03-04 18:37:13 -Generating unique operation named: editUsingGET_19
2020-03-04 18:37:13 -Generating unique operation named: listUsingGET_21
2020-03-04 18:37:13 -Generating unique operation named: removeUsingPOST_32
2020-03-04 18:37:13 -Generating unique operation named: removeUsingPOST_33
2020-03-04 18:37:13 -Generating unique operation named: saveUsingPOST_18
2020-03-04 18:37:13 -Generating unique operation named: updateUsingGET_12
2020-03-04 18:37:13 -Generating unique operation named: updateUsingHEAD_12
2020-03-04 18:37:13 -Generating unique operation named: updateUsingPOST_19
2020-03-04 18:37:13 -Generating unique operation named: updateUsingPUT_12
2020-03-04 18:37:13 -Generating unique operation named: updateUsingPATCH_12
2020-03-04 18:37:13 -Generating unique operation named: updateUsingDELETE_12
2020-03-04 18:37:13 -Generating unique operation named: updateUsingOPTIONS_12
2020-03-04 18:37:13 -Generating unique operation named: updateUsingTRACE_12
2020-03-04 18:37:13 -Starting Quartz Scheduler now
2020-03-04 18:37:13 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED started.
2020-03-04 18:37:13 -Starting...
2020-03-04 18:37:13 -BrokerAvailabilityEvent[available=true, SimpleBrokerMessageHandler [DefaultSubscriptionRegistry[cache[0 destination(s)], registry[0 sessions]]]]
2020-03-04 18:37:13 -Started.
2020-03-04 18:37:13 -Starting ProtocolHandler ["http-nio-8081"]
2020-03-04 18:37:14 -Using a shared selector for servlet write/read
2020-03-04 18:37:14 -Tomcat started on port(s): 8081 (http) with context path ''
2020-03-04 18:37:14 -Started BootdoApplication in 52.495 seconds (JVM running for 54.313)
2020-03-04 18:37:14 -==>  Preparing: select `id`,`cron_expression`,`method_name`,`is_concurrent`,`description`,`update_by`,`bean_class`,`create_date`,`job_status`,`job_group`,`update_date`,`create_by`,`spring_bean`,`job_name` from sys_task order by id desc 
2020-03-04 18:37:15 -==> Parameters: 
2020-03-04 18:37:16 -<==      Total: 1
2020-03-04 18:38:00 -WebSocketSession[0 current WS(0)-HttpStream(0)-HttpPoll(0), 0 total, 0 closed abnormally (0 connect failure, 0 send limit, 0 transport error)], stompSubProtocol[processed CONNECT(0)-CONNECTED(0)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], outboundChannelpool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], sockJsScheduler[pool size = 1, active threads = 1, queued tasks = 0, completed tasks = 0]
2020-03-04 18:39:01 -A cookie header was received [1581922663,1582108428,1583149660] that contained an invalid cookie. That cookie will be ignored.Note: further occurrences of this error will be logged at DEBUG level.
2020-03-04 18:39:01 -Initializing Spring FrameworkServlet 'dispatcherServlet'
2020-03-04 18:39:01 -FrameworkServlet 'dispatcherServlet': initialization started
2020-03-04 18:39:01 -FrameworkServlet 'dispatcherServlet': initialization completed in 185 ms
2020-03-04 18:39:02 -Enabling session validation scheduler...
2020-03-04 18:39:02 -请求地址 : http://localhost:8081/
2020-03-04 18:39:02 -HTTP METHOD : GET
2020-03-04 18:39:02 -CLASS_METHOD : com.bootdo.system.controller.LoginController.welcome
2020-03-04 18:39:02 -参数 : [{}]
2020-03-04 18:39:02 -耗时 : 5
2020-03-04 18:39:02 -返回值 : redirect:/index
2020-03-04 18:39:03 -请求地址 : http://localhost:8081/login;JSESSIONID=44a39355-55a1-42ae-ab9f-c4370177fa4b
2020-03-04 18:39:03 -HTTP METHOD : GET
2020-03-04 18:39:03 -CLASS_METHOD : com.bootdo.system.controller.LoginController.login
2020-03-04 18:39:03 -参数 : [{}]
2020-03-04 18:39:03 -耗时 : 1
2020-03-04 18:39:03 -返回值 : login
2020-03-04 18:39:09 -请求地址 : http://localhost:8081/getVerify
2020-03-04 18:39:09 -HTTP METHOD : GET
2020-03-04 18:39:09 -CLASS_METHOD : com.bootdo.system.controller.LoginController.getVerify
2020-03-04 18:39:09 -参数 : [org.apache.shiro.web.servlet.ShiroHttpServletRequest@13410d29, org.apache.shiro.web.servlet.ShiroHttpServletResponse@72782d3a]
2020-03-04 18:39:16 -3303
2020-03-04 18:39:16 -耗时 : 7038
2020-03-04 18:39:16 -返回值 : null
2020-03-04 18:39:17 -请求地址 : http://localhost:8081/login
2020-03-04 18:39:17 -HTTP METHOD : GET
2020-03-04 18:39:17 -CLASS_METHOD : com.bootdo.system.controller.LoginController.login
2020-03-04 18:39:17 -参数 : [{}]
2020-03-04 18:39:17 -耗时 : 1
2020-03-04 18:39:17 -返回值 : login
2020-03-04 18:39:34 -请求地址 : http://localhost:8081/login
2020-03-04 18:39:34 -HTTP METHOD : POST
2020-03-04 18:39:34 -CLASS_METHOD : com.bootdo.system.controller.LoginController.ajaxLogin
2020-03-04 18:39:34 -参数 : [admin, 111111, 3303, org.apache.shiro.web.servlet.ShiroHttpServletRequest@1c9b011f]
2020-03-04 18:39:34 -==>  Preparing: select `user_id`,`username`,`name`,`password`,`dept_id`,`email`,`mobile`,`status`,`user_id_create`,`gmt_create`,`gmt_modified`,`sex`,`birth`,`pic_id`,`live_address`,`hobby`,`province`,`city`,`district` from sys_user WHERE username = ? order by user_id desc 
2020-03-04 18:39:35 -==> Parameters: admin(String)
2020-03-04 18:39:36 -<==      Total: 1
2020-03-04 18:39:37 -耗时 : 2512
2020-03-04 18:39:37 -返回值 : {msg=操作成功, code=0}
2020-03-04 18:39:37 -More than one TaskExecutor bean found within the context, and none is named 'taskExecutor'. Mark one of them as primary or name it 'taskExecutor' (possibly as an alias) in order to use it for async processing: [clientInboundChannelExecutor, clientOutboundChannelExecutor, brokerChannelExecutor, messageBrokerTaskScheduler]
2020-03-04 18:39:37 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-03-04 18:39:37 -==> Parameters: 1(Long), admin(String), 登录(String), 2512(Integer), com.bootdo.system.controller.LoginController.ajaxLogin()(String), null, 127.0.0.1(String), 2020-03-04 18:39:37.325(Timestamp)
2020-03-04 18:39:38 -<==    Updates: 1
2020-03-04 18:39:38 -请求地址 : http://localhost:8081/index
2020-03-04 18:39:38 -HTTP METHOD : GET
2020-03-04 18:39:38 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2020-03-04 18:39:38 -参数 : [{}]
2020-03-04 18:39:38 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2020-03-04 18:39:38 -==> Parameters: 1(Long)
2020-03-04 18:39:39 -<==      Total: 50
2020-03-04 18:39:40 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2020-03-04 18:39:40 -==> Parameters: 138(Long)
2020-03-04 18:39:40 -<==      Total: 1
2020-03-04 18:39:40 -耗时 : 1544
2020-03-04 18:39:40 -返回值 : index_v1
2020-03-04 18:39:40 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-03-04 18:39:40 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 1544(Integer), com.bootdo.system.controller.LoginController.index()(String), {"menus":[{"attributes":{"icon":"fa fa-money","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-money","url":"/moneyList/moneyList"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"102","parentId":"106","text":"现金缴费"},{"attributes":{"icon":"fa fa-book","url":"/moneyLog/elecLog"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"107","parentId":"106","text":"缴费记录"},{"attributes":{"icon":"fa fa-image","url":"/moneyList/moneyWZ"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"164","parentId":"106","text":"乌镇管理"}],"hasChildren":true,"hasParent":false,"id":"106","parentId":"0","text":"收费管理"},{"attributes":{"icon":"fa fa-lightbulb-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/elec/elec"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"121","parentId":"103","text":"电费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"elec/elecInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"122","parentId":"103","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"elec/elecUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"123","parentId":"103","text":"电表上传"},{"attributes":{"icon":"fa fa-cc","url":"/elec/elecPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"124","parentId":"103","text":"电价管理"}],"hasChildren":true,"hasParent":false,"id":"103","parentId":"0","text":"电费管理"},{"attributes":{"icon":"fa fa-tint","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/water/water"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"117","parentId":"105","text":"水费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"water/waterInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"118","parentId":"105","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"water/waterUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"119","parentId":"105","text":"水费生成"},{"attributes":{"icon":"fa fa-cc","url":"/water/waterPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"120","parentId":"105","text":"水价管理"}],"hasChildren":true,"hasParent":false,"id":"105","parentId":"0","text":"水费管理"},{"attributes":{"icon":"fa fa-fire","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/heat/heat"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"113","parentId":"104","text":"暖费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"heat/heatInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"114","parentId":"104","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"heat/heatUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"115","parentId":"104","text":"暖费生成"},{"attributes":{"icon":"","url":"/heat/heatPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"116","parentId":"104","text":"暖价管理"}],"hasChildren":true,"hasParent":false,"id":"104","parentId":"0","text":"暖费管理"},{"attributes":{"icon":"fa fa-vcard-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-bomb","url":"/print/print"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"149","parentId":"108","text":"票据记录"}],"hasChildren":true,"hasParent":false,"id":"108","parentId":"0","text":"票据管理"},{"attributes":{"icon":"fa fa-bar-chart","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-area-chart","url":"/chart/graph_echarts.html"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","text":"百度chart"},{"attributes":{"icon":"fa fa-sun-o","url":"charts/countDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"109","parentId":"97","text":"日统计报表"},{"attributes":{"icon":"fa fa-calendar","url":"charts/tableDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"161","parentId":"97","text":"日统计表格"},{"attributes":{"icon":"fa fa-registered","url":"charts/countMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"110","parentId":"97","text":"月统计报表"},{"attributes":{"icon":"fa fa-building-o","url":"charts/tableElecMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"162","parentId":"97","text":"月统计表格"},{"attributes":{"icon":"fa fa-support","url":"charts/countYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"111","parentId":"97","text":"年统计报表"},{"attributes":{"icon":"fa fa-book","url":"charts/tableElecYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"163","parentId":"97","text":"年统计表格"},{"attributes":{"icon":"fa fa-money","url":"charts/countOwe"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"155","(String), 127.0.0.1(String), 2020-03-04 18:39:40.464(Timestamp)
2020-03-04 18:39:40 -<==    Updates: 1
2020-03-04 18:39:41 -请求地址 : http://localhost:8081/main
2020-03-04 18:39:41 -HTTP METHOD : GET
2020-03-04 18:39:41 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2020-03-04 18:39:41 -参数 : []
2020-03-04 18:39:41 -耗时 : 1
2020-03-04 18:39:41 -返回值 : main
2020-03-04 18:39:42 -请求地址 : http://localhost:8081/oa/notify/message
2020-03-04 18:39:42 -HTTP METHOD : GET
2020-03-04 18:39:42 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2020-03-04 18:39:42 -参数 : []
2020-03-04 18:39:42 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2020-03-04 18:39:43 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2020-03-04 18:39:43 -请求地址 : http://localhost:8081/main
2020-03-04 18:39:43 -HTTP METHOD : GET
2020-03-04 18:39:43 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2020-03-04 18:39:43 -参数 : []
2020-03-04 18:39:43 -耗时 : 0
2020-03-04 18:39:43 -返回值 : main
2020-03-04 18:39:44 -<==      Total: 0
2020-03-04 18:39:44 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2020-03-04 18:39:44 -==> Parameters: 1(Long), 0(String)
2020-03-04 18:39:44 -<==      Total: 1
2020-03-04 18:39:44 -耗时 : 1303
2020-03-04 18:39:44 -返回值 : com.bootdo.common.utils.PageUtils@1ad6e5a
2020-03-04 18:45:44 -==>  Preparing: select distinct m.perms from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id = ur.role_id where ur.user_id = ? 
2020-03-04 18:45:44 -==> Parameters: 1(Long)
2020-03-04 18:45:45 -<==      Total: 94
2020-03-04 18:45:45 -请求地址 : http://localhost:8081/elec/elecUpLoad
2020-03-04 18:45:45 -HTTP METHOD : GET
2020-03-04 18:45:45 -CLASS_METHOD : com.bootdo.elec.controller.ElecUpLoadController.Elec
2020-03-04 18:45:45 -参数 : []
2020-03-04 18:45:45 -耗时 : 1
2020-03-04 18:45:45 -返回值 : elec/elecUpLoad/elecUpLoad
2020-03-04 18:45:58 -请求地址 : http://localhost:8081/file/downImport/elecUpload
2020-03-04 18:45:58 -HTTP METHOD : GET
2020-03-04 18:45:58 -CLASS_METHOD : com.bootdo.temple.controller.TempletController.downImport
2020-03-04 18:45:58 -参数 : [org.apache.shiro.web.servlet.ShiroHttpServletResponse@5b963f01, elecUpload]
2020-03-04 18:45:58 -文件不存在 --> D:/WJ/template/电字上传模板.xlsx
2020-03-04 18:45:58 -耗时 : 128
2020-03-04 18:45:58 -返回值 : null
2020-03-04 18:50:18 -请求地址 : http://localhost:8081/system/sysDept/treeView
2020-03-04 18:50:18 -HTTP METHOD : GET
2020-03-04 18:50:18 -CLASS_METHOD : com.bootdo.system.controller.DeptController.treeView
2020-03-04 18:50:18 -参数 : [ModelAndView: materialized View is [null]; model is null]
2020-03-04 18:50:18 -耗时 : 1
2020-03-04 18:50:18 -返回值 : system/dept/deptTree
2020-03-04 18:50:19 -请求地址 : http://localhost:8081/system/sysDept/tree
2020-03-04 18:50:19 -HTTP METHOD : GET
2020-03-04 18:50:19 -CLASS_METHOD : com.bootdo.system.controller.DeptController.tree
2020-03-04 18:50:19 -参数 : []
2020-03-04 18:50:19 -==>  Preparing: select `dept_id`,`parent_id`,`name`,`order_num`,`del_flag` from sys_dept order by dept_id desc 
2020-03-04 18:50:19 -==> Parameters: 
2020-03-04 18:50:19 -<==      Total: 3
2020-03-04 18:50:19 -耗时 : 458
2020-03-04 18:50:19 -返回值 : {"checked":false,"children":[{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"3","parentId":"1","state":{"opened":true},"text":"牙星"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"2","parentId":"1","state":{"opened":true},"text":"五九"}],"hasChildren":true,"hasParent":false,"id":"1","parentId":"0","state":{"opened":true},"text":"总公司"}
2020-03-04 18:51:01 -请求地址 : http://localhost:8081/elec/elecUpLoad/importElecExcel
2020-03-04 18:51:01 -HTTP METHOD : POST
2020-03-04 18:51:01 -CLASS_METHOD : com.bootdo.elec.controller.ElecUpLoadController.importElecExcel
2020-03-04 18:51:01 -参数 : [org.springframework.web.multipart.support.StandardMultipartHttpServletRequest$StandardMultipartFile@3e9c6596, org.springframework.web.multipart.support.StandardMultipartHttpServletRequest@cacea1e]
2020-03-04 18:51:05 -==>  Preparing: SELECT `id`, `user_id`, `user_name`, `user_type`, `user_org`, `user_tell`, `user_state`, `wages_id`, `elec_type`, `elec_price`, `start`, `end`, `hu`, `elec_amount`, `elec_cost`, `elec_sum`, `create_time`, `create_by`, `update_time`, `update_by`, `remark` FROM ELEC WHERE `create_time` = ? and user_org = ? and user_id = ? 
2020-03-04 18:51:05 -==> Parameters: 2019-12(String), 2(String), 1-0001(String)
2020-03-04 18:51:05 -<==      Total: 1
2020-03-04 18:56:01 -==>  Preparing: SELECT `id`, `user_id`, `user_name`, `user_type`, `user_org`, `user_tell`, `user_state`, `wages_id`, `elec_type`, `elec_price`, `start`, `end`, `hu`, `elec_amount`, `elec_cost`, `elec_sum`, `create_time`, `create_by`, `update_time`, `update_by`, `remark` FROM ELEC WHERE `create_time` = ? and user_org = ? and user_id = ? 
2020-03-04 18:56:01 -==> Parameters: 2019-12(String), 2(String), 1-0001(String)
2020-03-04 18:56:01 -<==      Total: 1
2020-03-04 18:56:01 -==>  Preparing: INSERT INTO ELEC (USER_ID,USER_NAME,USER_TYPE,USER_ORG,USER_TELL,USER_STATE,WAGES_ID,ELEC_TYPE, ELEC_PRICE, START,END,ELEC_AMOUNT,HU, ELEC_COST,ELEC_SUM,CREATE_TIME,CREATE_BY,UPDATE_TIME,UPDATE_BY,REMARK) VALUES(?,?,?,?,?,?,?,?,?, ?,?,?,?,?,?,?,?,?,?,?) 
2020-03-04 18:56:01 -==> Parameters: 1-0001(String), 李文英(String), A(String), 2(String), 13847098285(String), 1(String), 500039(String), 1(String), 0.465(BigDecimal), 1(BigDecimal), 10(BigDecimal), 9(BigDecimal), 1(Integer), 4.185(BigDecimal), -2.915(BigDecimal), 2019-01(String), 刘桂艳(String), 2019-12-11 09:49:51.0(Timestamp), 刘桂艳(String), (String)
2020-03-04 18:56:01 -<==    Updates: 1
2020-03-04 18:56:01 -耗时 : 300788
2020-03-04 18:56:01 -返回值 : {result=success}
2020-03-04 18:57:15 -==>  Preparing: select distinct m.perms from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id = ur.role_id where ur.user_id = ? 
2020-03-04 18:57:15 -==> Parameters: 1(Long)
2020-03-04 18:57:15 -<==      Total: 94
2020-03-04 18:57:15 -请求地址 : http://localhost:8081/elec/elec
2020-03-04 18:57:15 -HTTP METHOD : GET
2020-03-04 18:57:15 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.Elec
2020-03-04 18:57:15 -参数 : []
2020-03-04 18:57:15 -耗时 : 1
2020-03-04 18:57:15 -返回值 : elec/elec/elec
2020-03-04 18:57:16 -请求地址 : http://localhost:8081/common/dict/list/userType
2020-03-04 18:57:16 -HTTP METHOD : GET
2020-03-04 18:57:16 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2020-03-04 18:57:16 -参数 : [userType]
2020-03-04 18:57:16 -请求地址 : http://localhost:8081/common/dict/list/elecType
2020-03-04 18:57:16 -HTTP METHOD : GET
2020-03-04 18:57:16 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2020-03-04 18:57:16 -参数 : [elecType]
2020-03-04 18:57:16 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2020-03-04 18:57:16 -==> Parameters: userType(String)
2020-03-04 18:57:17 -<==      Total: 4
2020-03-04 18:57:17 -耗时 : 632
2020-03-04 18:57:17 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2020-03-04 18:57:17 -返回值 : [DictDO{id=145, name='银行转账', value='D', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=144, name='微信支付', value='C', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2020-03-04 18:57:17 -==> Parameters: elecType(String)
2020-03-04 18:57:17 -<==      Total: 11
2020-03-04 18:57:17 -耗时 : 745
2020-03-04 18:57:17 -返回值 : [DictDO{id=180, name='矿民用', value='1', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=179, name='矿商业', value='2', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=178, name='矿工业1', value='3', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=177, name='矿工业2', value='4', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=176, name='矿工业3', value='5', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=175, name='乌民用', value='6', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=174, name='乌商用', value='7', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=173, name='乌工业', value='8', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=172, name='煤民用', value='9', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=171, name='煤商业', value='10', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=170, name='政府用电', value='11', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2020-03-04 18:57:18 -请求地址 : http://localhost:8081/elec/elec/list
2020-03-04 18:57:18 -HTTP METHOD : GET
2020-03-04 18:57:18 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.list
2020-03-04 18:57:18 -参数 : [{limit=10, offset=0, userType=, elecType=, userOrg=, userId=, createTime=, queryType=1}, com.bootdo.elec.domain.ElecDO@7b611e6e]
2020-03-04 18:57:18 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, `user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec order by id asc limit ?, ? 
2020-03-04 18:57:18 -==> Parameters: 0(Integer), 10(Integer)
2020-03-04 18:57:18 -<==      Total: 10
2020-03-04 18:57:18 -==>  Preparing: select count(*) from elec 
2020-03-04 18:57:18 -==> Parameters: 
2020-03-04 18:57:19 -<==      Total: 1
2020-03-04 18:57:19 -耗时 : 1127
2020-03-04 18:57:19 -返回值 : com.bootdo.common.utils.PageUtils@17e156e5
2020-03-04 18:57:23 -请求地址 : http://localhost:8081/elec/elec/list
2020-03-04 18:57:23 -HTTP METHOD : GET
2020-03-04 18:57:23 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.list
2020-03-04 18:57:23 -参数 : [{limit=10, offset=0, userType=, elecType=, userOrg=, userId=1-0001, createTime=, queryType=1}, com.bootdo.elec.domain.ElecDO@7b24a053]
2020-03-04 18:57:23 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, `user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec WHERE user_id = ? order by id asc limit ?, ? 
2020-03-04 18:57:23 -==> Parameters: 1-0001(String), 0(Integer), 10(Integer)
2020-03-04 18:57:24 -<==      Total: 9
2020-03-04 18:57:24 -==>  Preparing: select count(*) from elec WHERE user_id = ? 
2020-03-04 18:57:24 -==> Parameters: 1-0001(String)
2020-03-04 18:57:24 -<==      Total: 1
2020-03-04 18:57:24 -耗时 : 261
2020-03-04 18:57:24 -返回值 : com.bootdo.common.utils.PageUtils@1159c239
2020-03-04 18:58:23 -请求地址 : http://localhost:8081/elec/elec/remove
2020-03-04 18:58:23 -HTTP METHOD : POST
2020-03-04 18:58:23 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.remove
2020-03-04 18:58:23 -参数 : [64990]
2020-03-04 18:58:23 -==>  Preparing: delete from elec where id = ? 
2020-03-04 18:58:23 -==> Parameters: 64990(Long)
2020-03-04 18:58:24 -<==    Updates: 1
2020-03-04 18:58:24 -耗时 : 309
2020-03-04 18:58:24 -返回值 : {msg=操作成功, code=0}
2020-03-04 18:58:46 -请求地址 : http://localhost:8081/elec/elec/list
2020-03-04 18:58:46 -HTTP METHOD : GET
2020-03-04 18:58:46 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.list
2020-03-04 18:58:46 -参数 : [{limit=10, offset=0, userType=, elecType=, userOrg=, userId=1-0001, createTime=, queryType=1}, com.bootdo.elec.domain.ElecDO@461c6bba]
2020-03-04 18:58:46 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, `user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec WHERE user_id = ? order by id asc limit ?, ? 
2020-03-04 18:58:46 -==> Parameters: 1-0001(String), 0(Integer), 10(Integer)
2020-03-04 18:58:47 -<==      Total: 8
2020-03-04 18:58:47 -==>  Preparing: select count(*) from elec WHERE user_id = ? 
2020-03-04 18:58:47 -==> Parameters: 1-0001(String)
2020-03-04 18:58:47 -<==      Total: 1
2020-03-04 18:58:47 -耗时 : 460
2020-03-04 18:58:47 -返回值 : com.bootdo.common.utils.PageUtils@7515a746
2020-03-04 18:58:55 -请求地址 : http://localhost:8081/elec/elecUpLoad/importElecExcel
2020-03-04 18:58:56 -HTTP METHOD : POST
2020-03-04 18:58:56 -CLASS_METHOD : com.bootdo.elec.controller.ElecUpLoadController.importElecExcel
2020-03-04 18:58:56 -参数 : [org.springframework.web.multipart.support.StandardMultipartHttpServletRequest$StandardMultipartFile@2182eeee, org.springframework.web.multipart.support.StandardMultipartHttpServletRequest@31bd3aae]
2020-03-04 18:58:56 -==>  Preparing: SELECT `id`, `user_id`, `user_name`, `user_type`, `user_org`, `user_tell`, `user_state`, `wages_id`, `elec_type`, `elec_price`, `start`, `end`, `hu`, `elec_amount`, `elec_cost`, `elec_sum`, `create_time`, `create_by`, `update_time`, `update_by`, `remark` FROM ELEC WHERE `create_time` = ? and user_org = ? and user_id = ? 
2020-03-04 18:58:56 -==> Parameters: 2019-12(String), 2(String), 1-0001(String)
2020-03-04 18:58:56 -<==      Total: 1
2020-03-04 18:58:56 -==>  Preparing: INSERT INTO ELEC (USER_ID,USER_NAME,USER_TYPE,USER_ORG,USER_TELL,USER_STATE,WAGES_ID,ELEC_TYPE, ELEC_PRICE, START,END,ELEC_AMOUNT,HU, ELEC_COST,ELEC_SUM,CREATE_TIME,CREATE_BY,UPDATE_TIME,UPDATE_BY,REMARK) VALUES(?,?,?,?,?,?,?,?,?, ?,?,?,?,?,?,?,?,?,?,?) 
2020-03-04 18:58:56 -==> Parameters: 1-0001(String), 李文英(String), A(String), 2(String), 13847098285(String), 1(String), 500039(String), 1(String), 0.465(BigDecimal), 1(BigDecimal), 10(BigDecimal), 9(BigDecimal), 1(Integer), 4.185(BigDecimal), -2.915(BigDecimal), 2019-01(String), 刘桂艳(String), 2019-12-11 09:49:51.0(Timestamp), 刘桂艳(String), (String)
2020-03-04 18:58:56 -<==    Updates: 1
2020-03-04 18:58:56 -耗时 : 400
2020-03-04 18:58:56 -返回值 : {result=success}
2020-03-04 18:59:01 -请求地址 : http://localhost:8081/elec/elec/list
2020-03-04 18:59:01 -HTTP METHOD : GET
2020-03-04 18:59:01 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.list
2020-03-04 18:59:01 -参数 : [{limit=10, offset=0, userType=, elecType=, userOrg=, userId=1-0001, createTime=, queryType=1}, com.bootdo.elec.domain.ElecDO@72b6ae85]
2020-03-04 18:59:01 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, `user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec WHERE user_id = ? order by id asc limit ?, ? 
2020-03-04 18:59:01 -==> Parameters: 1-0001(String), 0(Integer), 10(Integer)
2020-03-04 18:59:01 -<==      Total: 9
2020-03-04 18:59:01 -==>  Preparing: select count(*) from elec WHERE user_id = ? 
2020-03-04 18:59:01 -==> Parameters: 1-0001(String)
2020-03-04 18:59:01 -<==      Total: 1
2020-03-04 18:59:01 -耗时 : 394
2020-03-04 18:59:01 -返回值 : com.bootdo.common.utils.PageUtils@722f105d
2020-03-04 19:00:01 -请求地址 : http://localhost:8081/elec/elec/remove
2020-03-04 19:00:01 -HTTP METHOD : POST
2020-03-04 19:00:01 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.remove
2020-03-04 19:00:01 -参数 : [64991]
2020-03-04 19:00:01 -==>  Preparing: delete from elec where id = ? 
2020-03-04 19:00:01 -==> Parameters: 64991(Long)
2020-03-04 19:00:02 -<==    Updates: 1
2020-03-04 19:00:02 -耗时 : 98
2020-03-04 19:00:02 -返回值 : {msg=操作成功, code=0}
2020-03-04 19:00:12 -请求地址 : http://localhost:8081/elec/elecUpLoad/importElecExcel
2020-03-04 19:00:12 -HTTP METHOD : POST
2020-03-04 19:00:12 -CLASS_METHOD : com.bootdo.elec.controller.ElecUpLoadController.importElecExcel
2020-03-04 19:00:12 -参数 : [org.springframework.web.multipart.support.StandardMultipartHttpServletRequest$StandardMultipartFile@46e4dd2, org.springframework.web.multipart.support.StandardMultipartHttpServletRequest@62109430]
2020-03-04 19:00:12 -==>  Preparing: SELECT `id`, `user_id`, `user_name`, `user_type`, `user_org`, `user_tell`, `user_state`, `wages_id`, `elec_type`, `elec_price`, `start`, `end`, `hu`, `elec_amount`, `elec_cost`, `elec_sum`, `create_time`, `create_by`, `update_time`, `update_by`, `remark` FROM ELEC WHERE `create_time` = ? and user_org = ? and user_id = ? 
2020-03-04 19:00:12 -==> Parameters: 2019-12(String), 2(String), 1-0001(String)
2020-03-04 19:00:12 -<==      Total: 1
2020-03-04 19:00:12 -==>  Preparing: INSERT INTO ELEC (USER_ID,USER_NAME,USER_TYPE,USER_ORG,USER_TELL,USER_STATE,WAGES_ID,ELEC_TYPE, ELEC_PRICE, START,END,ELEC_AMOUNT,HU, ELEC_COST,ELEC_SUM,CREATE_TIME,CREATE_BY,UPDATE_TIME,UPDATE_BY,REMARK) VALUES(?,?,?,?,?,?,?,?,?, ?,?,?,?,?,?,?,?,?,?,?) 
2020-03-04 19:00:12 -==> Parameters: 1-0001(String), 李文英(String), A(String), 2(String), 13847098285(String), 1(String), 500039(String), 1(String), 0.465(BigDecimal), 1(BigDecimal), 10(BigDecimal), 9(BigDecimal), 1(Integer), 4.185(BigDecimal), -2.915(BigDecimal), 2020-01(String), 刘桂艳(String), 2019-12-11 09:49:51.0(Timestamp), 刘桂艳(String), (String)
2020-03-04 19:00:12 -<==    Updates: 1
2020-03-04 19:00:12 -耗时 : 786
2020-03-04 19:00:12 -返回值 : {result=success}
2020-03-04 19:00:15 -请求地址 : http://localhost:8081/elec/elec/list
2020-03-04 19:00:15 -HTTP METHOD : GET
2020-03-04 19:00:15 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.list
2020-03-04 19:00:15 -参数 : [{limit=10, offset=0, userType=, elecType=, userOrg=, userId=1-0001, createTime=, queryType=1}, com.bootdo.elec.domain.ElecDO@3300ca68]
2020-03-04 19:00:15 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, `user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec WHERE user_id = ? order by id asc limit ?, ? 
2020-03-04 19:00:15 -==> Parameters: 1-0001(String), 0(Integer), 10(Integer)
2020-03-04 19:00:16 -<==      Total: 9
2020-03-04 19:00:16 -==>  Preparing: select count(*) from elec WHERE user_id = ? 
2020-03-04 19:00:16 -==> Parameters: 1-0001(String)
2020-03-04 19:00:16 -<==      Total: 1
2020-03-04 19:00:16 -耗时 : 342
2020-03-04 19:00:16 -返回值 : com.bootdo.common.utils.PageUtils@2751e33a
2020-03-04 19:08:01 -WebSocketSession[1 current WS(0)-HttpStream(1)-HttpPoll(0), 2 total, 0 closed abnormally (0 connect failure, 0 send limit, 3 transport error)], stompSubProtocol[processed CONNECT(1)-CONNECTED(1)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 12], outboundChannelpool size = 0, active threads = 0, queued tasks = 0, completed tasks = 2], sockJsScheduler[pool size = 4, active threads = 1, queued tasks = 2, completed tasks = 407]
2020-03-04 19:10:06 -==>  Preparing: select distinct m.perms from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id = ur.role_id where ur.user_id = ? 
2020-03-04 19:10:06 -==> Parameters: 1(Long)
2020-03-04 19:10:06 -<==      Total: 94
2020-03-04 19:10:06 -请求地址 : http://localhost:8081/elec/elec/remove
2020-03-04 19:10:06 -HTTP METHOD : POST
2020-03-04 19:10:06 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.remove
2020-03-04 19:10:06 -参数 : [64992]
2020-03-04 19:10:06 -==>  Preparing: delete from elec where id = ? 
2020-03-04 19:10:06 -==> Parameters: 64992(Long)
2020-03-04 19:10:06 -<==    Updates: 1
2020-03-04 19:10:06 -耗时 : 137
2020-03-04 19:10:06 -返回值 : {msg=操作成功, code=0}
2020-03-04 19:10:09 -请求地址 : http://localhost:8081/elec/elecUpLoad/importElecExcel
2020-03-04 19:10:09 -HTTP METHOD : POST
2020-03-04 19:10:09 -CLASS_METHOD : com.bootdo.elec.controller.ElecUpLoadController.importElecExcel
2020-03-04 19:10:09 -参数 : [org.springframework.web.multipart.support.StandardMultipartHttpServletRequest$StandardMultipartFile@6898cf17, org.springframework.web.multipart.support.StandardMultipartHttpServletRequest@4d8e700]
2020-03-04 19:10:10 -==>  Preparing: SELECT `id`, `user_id`, `user_name`, `user_type`, `user_org`, `user_tell`, `user_state`, `wages_id`, `elec_type`, `elec_price`, `start`, `end`, `hu`, `elec_amount`, `elec_cost`, `elec_sum`, `create_time`, `create_by`, `update_time`, `update_by`, `remark` FROM ELEC WHERE `create_time` = ? and user_org = ? and user_id = ? 
2020-03-04 19:10:10 -==> Parameters: 2019-12(String), 2(String), 1-0001(String)
2020-03-04 19:10:10 -<==      Total: 1
2020-03-04 19:10:10 -==>  Preparing: INSERT INTO ELEC (USER_ID,USER_NAME,USER_TYPE,USER_ORG,USER_TELL,USER_STATE,WAGES_ID,ELEC_TYPE, ELEC_PRICE, START,END,ELEC_AMOUNT,HU, ELEC_COST,ELEC_SUM,CREATE_TIME,CREATE_BY,UPDATE_TIME,UPDATE_BY,REMARK) VALUES(?,?,?,?,?,?,?,?,?, ?,?,?,?,?,?,?,?,?,?,?) 
2020-03-04 19:10:10 -==> Parameters: 1-0001(String), 李文英(String), A(String), 2(String), 13847098285(String), 1(String), 500039(String), 1(String), 0.465(BigDecimal), 1(BigDecimal), 10(BigDecimal), 9(BigDecimal), 1(Integer), 4.185(BigDecimal), -2.915(BigDecimal), 2020-01(String), admin(String), 2020-03-04 19:10:10.361(Timestamp), admin(String), (String)
2020-03-04 19:10:10 -<==    Updates: 1
2020-03-04 19:10:10 -耗时 : 912
2020-03-04 19:10:10 -返回值 : {result=success}
2020-03-04 19:10:13 -请求地址 : http://localhost:8081/elec/elec/list
2020-03-04 19:10:13 -HTTP METHOD : GET
2020-03-04 19:10:13 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.list
2020-03-04 19:10:13 -参数 : [{limit=10, offset=0, userType=, elecType=, userOrg=, userId=1-0001, createTime=, queryType=1}, com.bootdo.elec.domain.ElecDO@35aa4a1b]
2020-03-04 19:10:13 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, `user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec WHERE user_id = ? order by id asc limit ?, ? 
2020-03-04 19:10:13 -==> Parameters: 1-0001(String), 0(Integer), 10(Integer)
2020-03-04 19:10:13 -<==      Total: 9
2020-03-04 19:10:13 -==>  Preparing: select count(*) from elec WHERE user_id = ? 
2020-03-04 19:10:13 -==> Parameters: 1-0001(String)
2020-03-04 19:10:13 -<==      Total: 1
2020-03-04 19:10:13 -耗时 : 536
2020-03-04 19:10:13 -返回值 : com.bootdo.common.utils.PageUtils@290908d6
2020-03-04 19:17:01 -请求地址 : http://localhost:8081/elec/elecInto
2020-03-04 19:17:01 -HTTP METHOD : GET
2020-03-04 19:17:01 -CLASS_METHOD : com.bootdo.elec.controller.ElecIntoController.ElecInto
2020-03-04 19:17:01 -参数 : []
2020-03-04 19:17:01 -耗时 : 2
2020-03-04 19:17:01 -返回值 : elec/elecInto/elecInto
2020-03-04 19:17:16 -请求地址 : http://localhost:8081/elec/elec/list
2020-03-04 19:17:16 -HTTP METHOD : GET
2020-03-04 19:17:16 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.list
2020-03-04 19:17:16 -参数 : [{limit=10, offset=0, userType=B, elecType=, userOrg=, userId=1-0001, createTime=, queryType=1, type=B}, com.bootdo.elec.domain.ElecDO@7306be51]
2020-03-04 19:17:16 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, `user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec WHERE user_type = ? and user_id = ? order by id asc limit ?, ? 
2020-03-04 19:17:16 -==> Parameters: B(String), 1-0001(String), 0(Integer), 10(Integer)
2020-03-04 19:17:16 -<==      Total: 0
2020-03-04 19:17:16 -==>  Preparing: select count(*) from elec WHERE user_type = ? and user_id = ? 
2020-03-04 19:17:16 -==> Parameters: B(String), 1-0001(String)
2020-03-04 19:17:16 -<==      Total: 1
2020-03-04 19:17:16 -耗时 : 184
2020-03-04 19:17:16 -返回值 : com.bootdo.common.utils.PageUtils@6616d75a
2020-03-04 19:17:17 -请求地址 : http://localhost:8081/elec/elec/list
2020-03-04 19:17:17 -HTTP METHOD : GET
2020-03-04 19:17:17 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.list
2020-03-04 19:17:17 -参数 : [{limit=10, offset=0, userType=B, elecType=, userOrg=, userId=1-0001, createTime=, queryType=1}, com.bootdo.elec.domain.ElecDO@42e51e3]
2020-03-04 19:17:17 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, `user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec WHERE user_type = ? and user_id = ? order by id asc limit ?, ? 
2020-03-04 19:17:17 -==> Parameters: B(String), 1-0001(String), 0(Integer), 10(Integer)
2020-03-04 19:17:17 -<==      Total: 0
2020-03-04 19:17:17 -==>  Preparing: select count(*) from elec WHERE user_type = ? and user_id = ? 
2020-03-04 19:17:17 -==> Parameters: B(String), 1-0001(String)
2020-03-04 19:17:17 -<==      Total: 1
2020-03-04 19:17:17 -耗时 : 126
2020-03-04 19:17:17 -返回值 : com.bootdo.common.utils.PageUtils@69b4283e
2020-03-04 19:17:21 -请求地址 : http://localhost:8081/elec/elec/list
2020-03-04 19:17:21 -HTTP METHOD : GET
2020-03-04 19:17:21 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.list
2020-03-04 19:17:21 -参数 : [{limit=10, offset=0, userType=B, elecType=, userOrg=, userId=, createTime=, queryType=1}, com.bootdo.elec.domain.ElecDO@522de1d]
2020-03-04 19:17:21 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, `user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec WHERE user_type = ? order by id asc limit ?, ? 
2020-03-04 19:17:21 -==> Parameters: B(String), 0(Integer), 10(Integer)
2020-03-04 19:17:22 -<==      Total: 10
2020-03-04 19:17:22 -==>  Preparing: select count(*) from elec WHERE user_type = ? 
2020-03-04 19:17:22 -==> Parameters: B(String)
2020-03-04 19:17:22 -<==      Total: 1
2020-03-04 19:17:22 -耗时 : 180
2020-03-04 19:17:22 -返回值 : com.bootdo.common.utils.PageUtils@462e11dc
2020-03-04 19:38:00 -WebSocketSession[1 current WS(0)-HttpStream(1)-HttpPoll(0), 2 total, 0 closed abnormally (0 connect failure, 0 send limit, 3 transport error)], stompSubProtocol[processed CONNECT(1)-CONNECTED(1)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 12], outboundChannelpool size = 0, active threads = 0, queued tasks = 0, completed tasks = 2], sockJsScheduler[pool size = 4, active threads = 1, queued tasks = 2, completed tasks = 840]
2020-03-04 19:39:02 -Validating all active sessions...
2020-03-04 19:39:02 -Finished session validation.  No sessions were stopped.
2020-03-04 19:41:11 -==>  Preparing: select distinct m.perms from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id = ur.role_id where ur.user_id = ? 
2020-03-04 19:41:11 -==> Parameters: 1(Long)
2020-03-04 19:41:11 -<==      Total: 94
2020-03-04 19:41:11 -请求地址 : http://localhost:8081/elec/elec/list
2020-03-04 19:41:11 -HTTP METHOD : GET
2020-03-04 19:41:11 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.list
2020-03-04 19:41:11 -参数 : [{limit=10, offset=0, userType=B, elecType=, userOrg=, userId=, createTime=2019-12, queryType=1}, com.bootdo.elec.domain.ElecDO@63143dc9]
2020-03-04 19:41:11 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, `user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec WHERE `create_time` = ? and user_type = ? order by id asc limit ?, ? 
2020-03-04 19:41:11 -==> Parameters: 2019-12(String), B(String), 0(Integer), 10(Integer)
2020-03-04 19:41:11 -<==      Total: 10
2020-03-04 19:41:11 -==>  Preparing: select count(*) from elec WHERE `create_time` = ? and user_type = ? 
2020-03-04 19:41:11 -==> Parameters: 2019-12(String), B(String)
2020-03-04 19:41:11 -<==      Total: 1
2020-03-04 19:41:11 -耗时 : 170
2020-03-04 19:41:11 -返回值 : com.bootdo.common.utils.PageUtils@75950747
2020-03-04 19:43:10 -请求地址 : http://localhost:8081/system/sysDept/treeView
2020-03-04 19:43:10 -HTTP METHOD : GET
2020-03-04 19:43:10 -CLASS_METHOD : com.bootdo.system.controller.DeptController.treeView
2020-03-04 19:43:10 -参数 : [ModelAndView: materialized View is [null]; model is null]
2020-03-04 19:43:10 -耗时 : 8
2020-03-04 19:43:10 -返回值 : system/dept/deptTree
2020-03-04 19:43:12 -请求地址 : http://localhost:8081/system/sysDept/tree
2020-03-04 19:43:12 -HTTP METHOD : GET
2020-03-04 19:43:12 -CLASS_METHOD : com.bootdo.system.controller.DeptController.tree
2020-03-04 19:43:12 -参数 : []
2020-03-04 19:43:12 -==>  Preparing: select `dept_id`,`parent_id`,`name`,`order_num`,`del_flag` from sys_dept order by dept_id desc 
2020-03-04 19:43:12 -==> Parameters: 
2020-03-04 19:43:12 -<==      Total: 3
2020-03-04 19:43:12 -耗时 : 66
2020-03-04 19:43:12 -返回值 : {"checked":false,"children":[{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"3","parentId":"1","state":{"opened":true},"text":"牙星"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"2","parentId":"1","state":{"opened":true},"text":"五九"}],"hasChildren":true,"hasParent":false,"id":"1","parentId":"0","state":{"opened":true},"text":"总公司"}
2020-03-04 19:43:17 -请求地址 : http://localhost:8081/elec/elecInto/importElecIntoExcel
2020-03-04 19:43:17 -HTTP METHOD : POST
2020-03-04 19:43:17 -CLASS_METHOD : com.bootdo.elec.controller.ElecIntoController.importElecIntoExcel
2020-03-04 19:43:17 -参数 : [org.springframework.web.multipart.support.StandardMultipartHttpServletRequest$StandardMultipartFile@367703e4, com.bootdo.elec.vo.ElecVo@71460cfa, org.apache.shiro.web.servlet.ShiroHttpServletResponse@47d043ff]
2020-03-04 19:43:19 -==>  Preparing: UPDATE ELEC SET ELEC_SUM = ELEC_SUM + ? WHERE CREATE_TIME = ? and user_org = ? and USER_ID = ? and USER_NAME = ? and `user_type` = 'B' 
2020-03-04 19:43:20 -==> Parameters: 100(BigDecimal), 2019-12(String), 2(String), 1-0005(String), 李生(String)
2020-03-04 19:43:20 -<==    Updates: 1
2020-03-04 19:43:21 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, `user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec WHERE CREATE_TIME = ? and user_org = ? and USER_ID = ? and USER_NAME = ? and `user_type` = 'B' 
2020-03-04 19:43:21 -==> Parameters: 2019-12(String), 2(String), 1-0005(String), 李生(String)
2020-03-04 19:43:21 -<==      Total: 1
2020-03-04 19:43:21 -==>  Preparing: insert into elec_log ( `user_id`, `user_name`, `user_type`, `user_org`, `elec_type`, `elec_money`, `money_date`, `create_time`, `create_by`, `update_time`, `update_by`, `remark` ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-03-04 19:43:21 -==> Parameters: 1-0005(String), 李生(String), B(String), 2(String), 1(String), 100(BigDecimal), 2020-03-04 19:43:21.424(Timestamp), 2019-12(String), admin(String), 2020-03-04 19:43:21.424(Timestamp), admin(String), null
2020-03-04 19:43:22 -<==    Updates: 1
2020-03-04 19:43:22 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`start`,`end`,`hu`,`elec_price`,`elec_amount`,`elec_cost`,`elec_sum`,`elec_money`,`heat_price`,`heat_area`,`heat_cost`,`heat_sum`,`heat_money`,`water_price`,`water_cost`,`water_sum`,`water_money`,`print_date`,`print_money`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from print where user_id = ? and user_org = ? and create_time = ? and date_format(print_date,'%Y-%m-%d') = date_format(?,'%Y-%m-%d') 
2020-03-04 19:43:22 -==> Parameters: 1-0005(String), 2(String), 2019-12(String), 2020-03-04 19:43:21.424(Timestamp)
2020-03-04 19:43:22 -<==      Total: 0
2020-03-04 19:43:22 -==>  Preparing: insert into print ( `user_id`, `user_name`, `user_type`, `user_org`, `start`, `end`, `hu`, `elec_price`, `elec_amount`, `elec_cost`, `elec_sum`, `elec_money`, `heat_price`, `heat_area`, `heat_cost`, `heat_sum`, `heat_money`, `water_price`, `water_cost`, `water_sum`, `water_money`, `print_date`, `print_money`, `create_time`, `create_by`, `update_time`, `update_by`, `remark` ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-03-04 19:43:22 -==> Parameters: 1-0005(String), 李生(String), B(String), 2(String), 8481.0(BigDecimal), 8581.0(BigDecimal), 1(Integer), 0.465(BigDecimal), 100.00(BigDecimal), 46.50(BigDecimal), 100.01(BigDecimal), 100(BigDecimal), null, null, null, null, null, null, null, null, null, 2020-03-04 19:43:22.853(Timestamp), null, 2019-12(String), admin(String), 2020-03-04 19:43:22.853(Timestamp), admin(String), null
2020-03-04 19:43:23 -<==    Updates: 1
2020-03-04 19:43:23 -==>  Preparing: UPDATE ELEC SET ELEC_SUM = ELEC_SUM + ? WHERE CREATE_TIME = ? and user_org = ? and USER_ID = ? and USER_NAME = ? and `user_type` = 'B' 
2020-03-04 19:43:23 -==> Parameters: 100(BigDecimal), 2019-12(String), 2(String), 1-0008(String), 王明刚(String)
2020-03-04 19:43:23 -<==    Updates: 1
2020-03-04 19:43:23 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, `user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec WHERE CREATE_TIME = ? and user_org = ? and USER_ID = ? and USER_NAME = ? and `user_type` = 'B' 
2020-03-04 19:43:23 -==> Parameters: 2019-12(String), 2(String), 1-0008(String), 王明刚(String)
2020-03-04 19:43:23 -<==      Total: 1
2020-03-04 19:43:23 -==>  Preparing: insert into elec_log ( `user_id`, `user_name`, `user_type`, `user_org`, `elec_type`, `elec_money`, `money_date`, `create_time`, `create_by`, `update_time`, `update_by`, `remark` ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-03-04 19:43:23 -==> Parameters: 1-0008(String), 王明刚(String), B(String), 2(String), 1(String), 100(BigDecimal), 2020-03-04 19:43:23.98(Timestamp), 2019-12(String), admin(String), 2020-03-04 19:43:23.98(Timestamp), admin(String), null
2020-03-04 19:43:24 -<==    Updates: 1
2020-03-04 19:43:24 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`start`,`end`,`hu`,`elec_price`,`elec_amount`,`elec_cost`,`elec_sum`,`elec_money`,`heat_price`,`heat_area`,`heat_cost`,`heat_sum`,`heat_money`,`water_price`,`water_cost`,`water_sum`,`water_money`,`print_date`,`print_money`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from print where user_id = ? and user_org = ? and create_time = ? and date_format(print_date,'%Y-%m-%d') = date_format(?,'%Y-%m-%d') 
2020-03-04 19:43:24 -==> Parameters: 1-0008(String), 2(String), 2019-12(String), 2020-03-04 19:43:23.98(Timestamp)
2020-03-04 19:43:24 -<==      Total: 0
2020-03-04 19:43:24 -==>  Preparing: insert into print ( `user_id`, `user_name`, `user_type`, `user_org`, `start`, `end`, `hu`, `elec_price`, `elec_amount`, `elec_cost`, `elec_sum`, `elec_money`, `heat_price`, `heat_area`, `heat_cost`, `heat_sum`, `heat_money`, `water_price`, `water_cost`, `water_sum`, `water_money`, `print_date`, `print_money`, `create_time`, `create_by`, `update_time`, `update_by`, `remark` ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-03-04 19:43:24 -==> Parameters: 1-0008(String), 王明刚(String), B(String), 2(String), 2931.0(BigDecimal), 3097.0(BigDecimal), 1(Integer), 0.465(BigDecimal), 166.00(BigDecimal), 77.19(BigDecimal), 100.02(BigDecimal), 100(BigDecimal), null, null, null, null, null, null, null, null, null, 2020-03-04 19:43:24.071(Timestamp), null, 2019-12(String), admin(String), 2020-03-04 19:43:24.071(Timestamp), admin(String), null
2020-03-04 19:43:24 -<==    Updates: 1
2020-03-04 19:43:24 -耗时 : 7019
2020-03-04 19:43:24 -返回值 : success
2020-03-04 19:43:33 -请求地址 : http://localhost:8081/elec/elec/list
2020-03-04 19:43:33 -HTTP METHOD : GET
2020-03-04 19:43:33 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.list
2020-03-04 19:43:33 -参数 : [{limit=10, offset=0, userType=B, elecType=, userOrg=, userId=, createTime=2019-12, queryType=1}, com.bootdo.elec.domain.ElecDO@6246ac08]
2020-03-04 19:43:33 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, `user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec WHERE `create_time` = ? and user_type = ? order by id asc limit ?, ? 
2020-03-04 19:43:33 -==> Parameters: 2019-12(String), B(String), 0(Integer), 10(Integer)
2020-03-04 19:43:33 -<==      Total: 10
2020-03-04 19:43:33 -==>  Preparing: select count(*) from elec WHERE `create_time` = ? and user_type = ? 
2020-03-04 19:43:33 -==> Parameters: 2019-12(String), B(String)
2020-03-04 19:43:34 -<==      Total: 1
2020-03-04 19:43:34 -耗时 : 273
2020-03-04 19:43:34 -返回值 : com.bootdo.common.utils.PageUtils@61f77d58
2020-03-04 19:44:23 -请求地址 : http://localhost:8081/elec/elecInto/importElecIntoExcel
2020-03-04 19:44:23 -HTTP METHOD : POST
2020-03-04 19:44:23 -CLASS_METHOD : com.bootdo.elec.controller.ElecIntoController.importElecIntoExcel
2020-03-04 19:44:23 -参数 : [org.springframework.web.multipart.support.StandardMultipartHttpServletRequest$StandardMultipartFile@4f6f995b, com.bootdo.elec.vo.ElecVo@682f0c8f, org.apache.shiro.web.servlet.ShiroHttpServletResponse@4c2934aa]
2020-03-04 19:44:24 -==>  Preparing: UPDATE ELEC SET ELEC_SUM = ELEC_SUM + ? WHERE CREATE_TIME = ? and user_org = ? and USER_ID = ? and USER_NAME = ? and `user_type` = 'B' 
2020-03-04 19:44:24 -==> Parameters: 100(BigDecimal), 2019-12(String), 2(String), 1-0005(String), 李生(String)
2020-03-04 19:44:24 -<==    Updates: 1
2020-03-04 19:44:24 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, `user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec WHERE CREATE_TIME = ? and user_org = ? and USER_ID = ? and USER_NAME = ? and `user_type` = 'B' 
2020-03-04 19:44:24 -==> Parameters: 2019-12(String), 2(String), 1-0005(String), 李生(String)
2020-03-04 19:44:24 -<==      Total: 1
2020-03-04 19:44:24 -==>  Preparing: insert into elec_log ( `user_id`, `user_name`, `user_type`, `user_org`, `elec_type`, `elec_money`, `money_date`, `create_time`, `create_by`, `update_time`, `update_by`, `remark` ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-03-04 19:44:24 -==> Parameters: 1-0005(String), 李生(String), B(String), 2(String), 1(String), 100(BigDecimal), 2020-03-04 19:44:24.412(Timestamp), 2019-12(String), admin(String), 2020-03-04 19:44:24.412(Timestamp), admin(String), null
2020-03-04 19:44:24 -<==    Updates: 1
2020-03-04 19:44:24 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`start`,`end`,`hu`,`elec_price`,`elec_amount`,`elec_cost`,`elec_sum`,`elec_money`,`heat_price`,`heat_area`,`heat_cost`,`heat_sum`,`heat_money`,`water_price`,`water_cost`,`water_sum`,`water_money`,`print_date`,`print_money`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from print where user_id = ? and user_org = ? and create_time = ? and date_format(print_date,'%Y-%m-%d') = date_format(?,'%Y-%m-%d') 
2020-03-04 19:44:24 -==> Parameters: 1-0005(String), 2(String), 2019-12(String), 2020-03-04 19:44:24.412(Timestamp)
2020-03-04 19:44:24 -<==      Total: 1
2020-03-04 19:44:24 -==>  Preparing: update print SET `user_id` = ?, `user_name` = ?, `user_type` = ?, `user_org` = ?, `start` = ?, `end` = ?, `hu` = ?, `elec_price` = ?, `elec_amount` = ?, `elec_cost` = ?, `elec_sum` = ?, `elec_money` = ?, `print_date` = ?, `create_time` = ?, `create_by` = ?, `update_time` = ?, `update_by` = ? where id = ? 
2020-03-04 19:44:24 -==> Parameters: 1-0005(String), 李生(String), B(String), 2(String), 8481.0(BigDecimal), 8581.0(BigDecimal), 1(Integer), 0.465(BigDecimal), 100.00(BigDecimal), 46.50(BigDecimal), 200.01(BigDecimal), 100(BigDecimal), 2020-03-04 19:44:24.627(Timestamp), 2019-12(String), admin(String), 2020-03-04 19:44:24.627(Timestamp), admin(String), 12253(Long)
2020-03-04 19:44:24 -<==    Updates: 1
2020-03-04 19:44:24 -==>  Preparing: UPDATE ELEC SET ELEC_SUM = ELEC_SUM + ? WHERE CREATE_TIME = ? and user_org = ? and USER_ID = ? and USER_NAME = ? and `user_type` = 'B' 
2020-03-04 19:44:24 -==> Parameters: 100(BigDecimal), 2019-12(String), 2(String), 1-0008(String), 王明刚1(String)
2020-03-04 19:44:25 -<==    Updates: 0
2020-03-04 19:44:25 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, `user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec WHERE CREATE_TIME = ? and user_org = ? and USER_ID = ? and USER_NAME = ? and `user_type` = 'B' 
2020-03-04 19:44:25 -==> Parameters: 2019-12(String), 2(String), 1-0008(String), 王明刚1(String)
2020-03-04 19:44:25 -<==      Total: 0
2020-03-04 19:44:25 -耗时 : 1899
2020-03-04 19:44:25 -返回值 : 第3行，数据与数据库不匹配请认真编写
2020-03-04 19:45:19 -请求地址 : http://localhost:8081/elec/elec/list
2020-03-04 19:45:19 -HTTP METHOD : GET
2020-03-04 19:45:19 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.list
2020-03-04 19:45:19 -参数 : [{limit=10, offset=0, userType=B, elecType=, userOrg=, userId=, createTime=2019-12, queryType=1}, com.bootdo.elec.domain.ElecDO@477af097]
2020-03-04 19:45:19 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, `user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec WHERE `create_time` = ? and user_type = ? order by id asc limit ?, ? 
2020-03-04 19:45:19 -==> Parameters: 2019-12(String), B(String), 0(Integer), 10(Integer)
2020-03-04 19:45:19 -<==      Total: 10
2020-03-04 19:45:19 -==>  Preparing: select count(*) from elec WHERE `create_time` = ? and user_type = ? 
2020-03-04 19:45:19 -==> Parameters: 2019-12(String), B(String)
2020-03-04 19:45:19 -<==      Total: 1
2020-03-04 19:45:19 -耗时 : 454
2020-03-04 19:45:19 -返回值 : com.bootdo.common.utils.PageUtils@2360cbec
2020-03-04 20:08:00 -WebSocketSession[1 current WS(0)-HttpStream(1)-HttpPoll(0), 2 total, 0 closed abnormally (0 connect failure, 0 send limit, 3 transport error)], stompSubProtocol[processed CONNECT(1)-CONNECTED(1)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 12], outboundChannelpool size = 0, active threads = 0, queued tasks = 0, completed tasks = 2], sockJsScheduler[pool size = 4, active threads = 1, queued tasks = 2, completed tasks = 1273]
2020-03-04 20:27:09 -Failed to invoke @ExceptionHandler method: public java.lang.Object com.bootdo.common.exception.BDExceptionHandler.handleException(java.lang.Exception,javax.servlet.http.HttpServletRequest)
org.apache.shiro.UnavailableSecurityManagerException: No SecurityManager accessible to the calling code, either bound to the org.apache.shiro.util.ThreadContext or as a vm static singleton.  This is an invalid application configuration.
	at org.apache.shiro.SecurityUtils.getSecurityManager(SecurityUtils.java:123)
	at org.apache.shiro.subject.Subject$Builder.<init>(Subject.java:627)
	at org.apache.shiro.SecurityUtils.getSubject(SecurityUtils.java:56)
	at com.bootdo.common.utils.ShiroUtils.getSubjct(ShiroUtils.java:20)
	at com.bootdo.common.utils.ShiroUtils.getUser(ShiroUtils.java:23)
	at com.bootdo.common.exception.BDExceptionHandler.handleException(BDExceptionHandler.java:73)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:209)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver.doResolveHandlerMethodException(ExceptionHandlerExceptionResolver.java:404)
	at org.springframework.web.servlet.handler.AbstractHandlerMethodExceptionResolver.doResolveException(AbstractHandlerMethodExceptionResolver.java:61)
	at org.springframework.web.servlet.handler.AbstractHandlerExceptionResolver.resolveException(AbstractHandlerExceptionResolver.java:139)
	at org.springframework.web.servlet.handler.HandlerExceptionResolverComposite.resolveException(HandlerExceptionResolverComposite.java:78)
	at org.springframework.web.servlet.DispatcherServlet.processHandlerException(DispatcherServlet.java:1255)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1062)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1008)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:925)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:974)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:877)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:661)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:851)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:728)
	at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:591)
	at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:527)
	at org.apache.catalina.core.StandardHostValve.custom(StandardHostValve.java:389)
	at org.apache.catalina.core.StandardHostValve.status(StandardHostValve.java:254)
	at org.apache.catalina.core.StandardHostValve.throwable(StandardHostValve.java:349)
	at org.apache.catalina.core.AsyncContextImpl.setErrorState(AsyncContextImpl.java:424)
	at org.apache.catalina.connector.CoyoteAdapter.asyncDispatch(CoyoteAdapter.java:176)
	at org.apache.coyote.AbstractProcessor.dispatch(AbstractProcessor.java:232)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:53)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:790)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1468)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:745)
2020-03-04 20:35:52 -请求地址 : http://localhost:8081/login;JSESSIONID=3118d66b-78cd-42ed-95aa-be3674cd79e2
2020-03-04 20:35:52 -HTTP METHOD : GET
2020-03-04 20:35:52 -CLASS_METHOD : com.bootdo.system.controller.LoginController.login
2020-03-04 20:35:52 -参数 : [{}]
2020-03-04 20:35:52 -耗时 : 247
2020-03-04 20:35:52 -返回值 : login
2020-03-04 20:35:59 -请求地址 : http://localhost:8081/
2020-03-04 20:35:59 -HTTP METHOD : GET
2020-03-04 20:35:59 -CLASS_METHOD : com.bootdo.system.controller.LoginController.welcome
2020-03-04 20:35:59 -参数 : [{}]
2020-03-04 20:35:59 -耗时 : 0
2020-03-04 20:35:59 -返回值 : redirect:/index
2020-03-04 20:35:59 -请求地址 : http://localhost:8081/login
2020-03-04 20:35:59 -HTTP METHOD : GET
2020-03-04 20:35:59 -CLASS_METHOD : com.bootdo.system.controller.LoginController.login
2020-03-04 20:35:59 -参数 : [{}]
2020-03-04 20:35:59 -耗时 : 0
2020-03-04 20:35:59 -返回值 : login
2020-03-04 20:36:08 -请求地址 : http://localhost:8081/getVerify
2020-03-04 20:36:08 -HTTP METHOD : GET
2020-03-04 20:36:08 -CLASS_METHOD : com.bootdo.system.controller.LoginController.getVerify
2020-03-04 20:36:08 -参数 : [org.apache.shiro.web.servlet.ShiroHttpServletRequest@338e795f, org.apache.shiro.web.servlet.ShiroHttpServletResponse@4715bf10]
2020-03-04 20:36:09 -1863
2020-03-04 20:36:10 -耗时 : 1775
2020-03-04 20:36:10 -返回值 : null
2020-03-04 20:36:40 -请求地址 : http://localhost:8081/login
2020-03-04 20:36:40 -HTTP METHOD : POST
2020-03-04 20:36:40 -CLASS_METHOD : com.bootdo.system.controller.LoginController.ajaxLogin
2020-03-04 20:36:40 -参数 : [admin, 111111, 1863, org.apache.shiro.web.servlet.ShiroHttpServletRequest@4b621e6e]
2020-03-04 20:36:41 -==>  Preparing: select `user_id`,`username`,`name`,`password`,`dept_id`,`email`,`mobile`,`status`,`user_id_create`,`gmt_create`,`gmt_modified`,`sex`,`birth`,`pic_id`,`live_address`,`hobby`,`province`,`city`,`district` from sys_user WHERE username = ? order by user_id desc 
2020-03-04 20:36:41 -==> Parameters: admin(String)
2020-03-04 20:36:42 -<==      Total: 1
2020-03-04 20:36:42 -耗时 : 1696
2020-03-04 20:36:42 -返回值 : {msg=操作成功, code=0}
2020-03-04 20:36:42 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-03-04 20:36:42 -==> Parameters: 1(Long), admin(String), 登录(String), 1696(Integer), com.bootdo.system.controller.LoginController.ajaxLogin()(String), null, 127.0.0.1(String), 2020-03-04 20:36:42.369(Timestamp)
2020-03-04 20:36:43 -<==    Updates: 1
2020-03-04 20:36:44 -请求地址 : http://localhost:8081/index
2020-03-04 20:36:44 -HTTP METHOD : GET
2020-03-04 20:36:44 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2020-03-04 20:36:44 -参数 : [{}]
2020-03-04 20:36:45 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2020-03-04 20:36:45 -==> Parameters: 1(Long)
2020-03-04 20:36:46 -<==      Total: 50
2020-03-04 20:36:46 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2020-03-04 20:36:46 -==> Parameters: 138(Long)
2020-03-04 20:36:46 -<==      Total: 1
2020-03-04 20:36:46 -耗时 : 1763
2020-03-04 20:36:46 -返回值 : index_v1
2020-03-04 20:36:47 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-03-04 20:36:47 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 1763(Integer), com.bootdo.system.controller.LoginController.index()(String), {"menus":[{"attributes":{"icon":"fa fa-money","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-money","url":"/moneyList/moneyList"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"102","parentId":"106","text":"现金缴费"},{"attributes":{"icon":"fa fa-book","url":"/moneyLog/elecLog"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"107","parentId":"106","text":"缴费记录"},{"attributes":{"icon":"fa fa-image","url":"/moneyList/moneyWZ"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"164","parentId":"106","text":"乌镇管理"}],"hasChildren":true,"hasParent":false,"id":"106","parentId":"0","text":"收费管理"},{"attributes":{"icon":"fa fa-lightbulb-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/elec/elec"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"121","parentId":"103","text":"电费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"elec/elecInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"122","parentId":"103","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"elec/elecUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"123","parentId":"103","text":"电表上传"},{"attributes":{"icon":"fa fa-cc","url":"/elec/elecPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"124","parentId":"103","text":"电价管理"}],"hasChildren":true,"hasParent":false,"id":"103","parentId":"0","text":"电费管理"},{"attributes":{"icon":"fa fa-tint","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/water/water"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"117","parentId":"105","text":"水费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"water/waterInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"118","parentId":"105","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"water/waterUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"119","parentId":"105","text":"水费生成"},{"attributes":{"icon":"fa fa-cc","url":"/water/waterPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"120","parentId":"105","text":"水价管理"}],"hasChildren":true,"hasParent":false,"id":"105","parentId":"0","text":"水费管理"},{"attributes":{"icon":"fa fa-fire","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/heat/heat"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"113","parentId":"104","text":"暖费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"heat/heatInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"114","parentId":"104","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"heat/heatUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"115","parentId":"104","text":"暖费生成"},{"attributes":{"icon":"","url":"/heat/heatPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"116","parentId":"104","text":"暖价管理"}],"hasChildren":true,"hasParent":false,"id":"104","parentId":"0","text":"暖费管理"},{"attributes":{"icon":"fa fa-vcard-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-bomb","url":"/print/print"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"149","parentId":"108","text":"票据记录"}],"hasChildren":true,"hasParent":false,"id":"108","parentId":"0","text":"票据管理"},{"attributes":{"icon":"fa fa-bar-chart","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-area-chart","url":"/chart/graph_echarts.html"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","text":"百度chart"},{"attributes":{"icon":"fa fa-sun-o","url":"charts/countDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"109","parentId":"97","text":"日统计报表"},{"attributes":{"icon":"fa fa-calendar","url":"charts/tableDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"161","parentId":"97","text":"日统计表格"},{"attributes":{"icon":"fa fa-registered","url":"charts/countMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"110","parentId":"97","text":"月统计报表"},{"attributes":{"icon":"fa fa-building-o","url":"charts/tableElecMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"162","parentId":"97","text":"月统计表格"},{"attributes":{"icon":"fa fa-support","url":"charts/countYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"111","parentId":"97","text":"年统计报表"},{"attributes":{"icon":"fa fa-book","url":"charts/tableElecYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"163","parentId":"97","text":"年统计表格"},{"attributes":{"icon":"fa fa-money","url":"charts/countOwe"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"155","(String), 127.0.0.1(String), 2020-03-04 20:36:46.681(Timestamp)
2020-03-04 20:36:47 -<==    Updates: 1
2020-03-04 20:36:49 -请求地址 : http://localhost:8081/main
2020-03-04 20:36:49 -HTTP METHOD : GET
2020-03-04 20:36:49 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2020-03-04 20:36:49 -参数 : []
2020-03-04 20:36:49 -耗时 : 1
2020-03-04 20:36:49 -返回值 : main
2020-03-04 20:36:53 -请求地址 : http://localhost:8081/oa/notify/message
2020-03-04 20:36:53 -HTTP METHOD : GET
2020-03-04 20:36:53 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2020-03-04 20:36:53 -参数 : []
2020-03-04 20:36:53 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2020-03-04 20:36:53 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2020-03-04 20:36:54 -<==      Total: 0
2020-03-04 20:36:54 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2020-03-04 20:36:54 -==> Parameters: 1(Long), 0(String)
2020-03-04 20:36:54 -<==      Total: 1
2020-03-04 20:36:54 -耗时 : 1134
2020-03-04 20:36:54 -返回值 : com.bootdo.common.utils.PageUtils@6fd22616
2020-03-04 20:36:54 -请求地址 : http://localhost:8081/main
2020-03-04 20:36:54 -HTTP METHOD : GET
2020-03-04 20:36:54 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2020-03-04 20:36:54 -参数 : []
2020-03-04 20:36:54 -耗时 : 1
2020-03-04 20:36:54 -返回值 : main
2020-03-04 20:37:48 -==>  Preparing: select distinct m.perms from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id = ur.role_id where ur.user_id = ? 
2020-03-04 20:37:48 -==> Parameters: 1(Long)
2020-03-04 20:37:48 -<==      Total: 94
2020-03-04 20:37:48 -请求地址 : http://localhost:8081/moneyList/moneyList
2020-03-04 20:37:48 -HTTP METHOD : GET
2020-03-04 20:37:48 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.MoneyList
2020-03-04 20:37:48 -参数 : []
2020-03-04 20:37:48 -耗时 : 20
2020-03-04 20:37:48 -返回值 : moneyList/moneyList
2020-03-04 20:38:00 -WebSocketSession[1 current WS(1)-HttpStream(0)-HttpPoll(0), 3 total, 0 closed abnormally (0 connect failure, 0 send limit, 3 transport error)], stompSubProtocol[processed CONNECT(2)-CONNECTED(2)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 8, active threads = 0, queued tasks = 0, completed tasks = 24], outboundChannelpool size = 1, active threads = 0, queued tasks = 0, completed tasks = 4], sockJsScheduler[pool size = 4, active threads = 1, queued tasks = 2, completed tasks = 1682]
2020-03-04 20:38:05 -请求地址 : http://localhost:8081/elec/elec
2020-03-04 20:38:05 -HTTP METHOD : GET
2020-03-04 20:38:05 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.Elec
2020-03-04 20:38:05 -参数 : []
2020-03-04 20:38:05 -耗时 : 1
2020-03-04 20:38:05 -返回值 : elec/elec/elec
2020-03-04 20:38:07 -请求地址 : http://localhost:8081/common/dict/list/userType
2020-03-04 20:38:07 -请求地址 : http://localhost:8081/common/dict/list/elecType
2020-03-04 20:38:07 -HTTP METHOD : GET
2020-03-04 20:38:07 -HTTP METHOD : GET
2020-03-04 20:38:07 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2020-03-04 20:38:07 -参数 : [userType]
2020-03-04 20:38:07 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2020-03-04 20:38:07 -参数 : [elecType]
2020-03-04 20:38:07 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2020-03-04 20:38:07 -==> Parameters: elecType(String)
2020-03-04 20:38:07 -请求地址 : http://localhost:8081/elec/elec/list
2020-03-04 20:38:07 -HTTP METHOD : GET
2020-03-04 20:38:07 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.list
2020-03-04 20:38:07 -参数 : [{limit=10, offset=0, userType=, elecType=, userOrg=, userId=, createTime=, queryType=1}, com.bootdo.elec.domain.ElecDO@493e7a5e]
2020-03-04 20:38:07 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2020-03-04 20:38:07 -==> Parameters: userType(String)
2020-03-04 20:38:08 -<==      Total: 4
2020-03-04 20:38:08 -耗时 : 760
2020-03-04 20:38:08 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, `user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec order by id asc limit ?, ? 
2020-03-04 20:38:08 -<==      Total: 11
2020-03-04 20:38:08 -返回值 : [DictDO{id=145, name='银行转账', value='D', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=144, name='微信支付', value='C', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2020-03-04 20:38:08 -==> Parameters: 0(Integer), 10(Integer)
2020-03-04 20:38:08 -耗时 : 830
2020-03-04 20:38:08 -返回值 : [DictDO{id=180, name='矿民用', value='1', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=179, name='矿商业', value='2', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=178, name='矿工业1', value='3', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=177, name='矿工业2', value='4', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=176, name='矿工业3', value='5', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=175, name='乌民用', value='6', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=174, name='乌商用', value='7', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=173, name='乌工业', value='8', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=172, name='煤民用', value='9', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=171, name='煤商业', value='10', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=170, name='政府用电', value='11', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2020-03-04 20:38:08 -<==      Total: 10
2020-03-04 20:38:08 -==>  Preparing: select count(*) from elec 
2020-03-04 20:38:08 -==> Parameters: 
2020-03-04 20:38:09 -<==      Total: 1
2020-03-04 20:38:09 -耗时 : 2083
2020-03-04 20:38:09 -返回值 : com.bootdo.common.utils.PageUtils@151a613c
2020-03-04 20:38:10 -请求地址 : http://localhost:8081/elec/elecInto
2020-03-04 20:38:10 -HTTP METHOD : GET
2020-03-04 20:38:10 -CLASS_METHOD : com.bootdo.elec.controller.ElecIntoController.ElecInto
2020-03-04 20:38:10 -参数 : []
2020-03-04 20:38:10 -耗时 : 0
2020-03-04 20:38:10 -返回值 : elec/elecInto/elecInto
2020-03-04 20:38:21 -请求地址 : http://localhost:8081/system/sysDept/treeView
2020-03-04 20:38:21 -HTTP METHOD : GET
2020-03-04 20:38:21 -CLASS_METHOD : com.bootdo.system.controller.DeptController.treeView
2020-03-04 20:38:21 -参数 : [ModelAndView: materialized View is [null]; model is null]
2020-03-04 20:38:21 -耗时 : 0
2020-03-04 20:38:21 -返回值 : system/dept/deptTree
2020-03-04 20:38:21 -请求地址 : http://localhost:8081/system/sysDept/tree
2020-03-04 20:38:21 -HTTP METHOD : GET
2020-03-04 20:38:21 -CLASS_METHOD : com.bootdo.system.controller.DeptController.tree
2020-03-04 20:38:21 -参数 : []
2020-03-04 20:38:21 -==>  Preparing: select `dept_id`,`parent_id`,`name`,`order_num`,`del_flag` from sys_dept order by dept_id desc 
2020-03-04 20:38:21 -==> Parameters: 
2020-03-04 20:38:21 -<==      Total: 3
2020-03-04 20:38:21 -耗时 : 194
2020-03-04 20:38:21 -返回值 : {"checked":false,"children":[{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"3","parentId":"1","state":{"opened":true},"text":"牙星"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"2","parentId":"1","state":{"opened":true},"text":"五九"}],"hasChildren":true,"hasParent":false,"id":"1","parentId":"0","state":{"opened":true},"text":"总公司"}
2020-03-04 20:38:31 -请求地址 : http://localhost:8081/elec/elec/list
2020-03-04 20:38:31 -HTTP METHOD : GET
2020-03-04 20:38:31 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.list
2020-03-04 20:38:31 -参数 : [{limit=10, offset=0, userType=B, elecType=, userOrg=, userId=, createTime=2019-12, queryType=1, type=B}, com.bootdo.elec.domain.ElecDO@497a2029]
2020-03-04 20:38:31 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, `user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec WHERE `create_time` = ? and user_type = ? order by id asc limit ?, ? 
2020-03-04 20:38:31 -==> Parameters: 2019-12(String), B(String), 0(Integer), 10(Integer)
2020-03-04 20:38:31 -<==      Total: 10
2020-03-04 20:38:31 -==>  Preparing: select count(*) from elec WHERE `create_time` = ? and user_type = ? 
2020-03-04 20:38:31 -==> Parameters: 2019-12(String), B(String)
2020-03-04 20:38:31 -<==      Total: 1
2020-03-04 20:38:31 -耗时 : 217
2020-03-04 20:38:31 -返回值 : com.bootdo.common.utils.PageUtils@14048f18
2020-03-04 20:38:32 -请求地址 : http://localhost:8081/elec/elec/list
2020-03-04 20:38:32 -HTTP METHOD : GET
2020-03-04 20:38:32 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.list
2020-03-04 20:38:32 -参数 : [{limit=10, offset=0, userType=B, elecType=, userOrg=, userId=, createTime=2019-12, queryType=1}, com.bootdo.elec.domain.ElecDO@1fe3cda2]
2020-03-04 20:38:32 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, `user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec WHERE `create_time` = ? and user_type = ? order by id asc limit ?, ? 
2020-03-04 20:38:32 -==> Parameters: 2019-12(String), B(String), 0(Integer), 10(Integer)
2020-03-04 20:38:32 -<==      Total: 10
2020-03-04 20:38:32 -==>  Preparing: select count(*) from elec WHERE `create_time` = ? and user_type = ? 
2020-03-04 20:38:32 -==> Parameters: 2019-12(String), B(String)
2020-03-04 20:38:32 -<==      Total: 1
2020-03-04 20:38:32 -耗时 : 154
2020-03-04 20:38:32 -返回值 : com.bootdo.common.utils.PageUtils@554fc977
2020-03-04 20:39:02 -Validating all active sessions...
2020-03-04 20:39:02 -Finished session validation.  No sessions were stopped.
2020-03-04 20:39:18 -请求地址 : http://localhost:8081/system/sysDept/treeView
2020-03-04 20:39:18 -HTTP METHOD : GET
2020-03-04 20:39:18 -CLASS_METHOD : com.bootdo.system.controller.DeptController.treeView
2020-03-04 20:39:18 -参数 : [ModelAndView: materialized View is [null]; model is null]
2020-03-04 20:39:18 -耗时 : 1
2020-03-04 20:39:18 -返回值 : system/dept/deptTree
2020-03-04 20:39:19 -请求地址 : http://localhost:8081/system/sysDept/tree
2020-03-04 20:39:19 -HTTP METHOD : GET
2020-03-04 20:39:19 -CLASS_METHOD : com.bootdo.system.controller.DeptController.tree
2020-03-04 20:39:19 -参数 : []
2020-03-04 20:39:19 -==>  Preparing: select `dept_id`,`parent_id`,`name`,`order_num`,`del_flag` from sys_dept order by dept_id desc 
2020-03-04 20:39:19 -==> Parameters: 
2020-03-04 20:39:19 -<==      Total: 3
2020-03-04 20:39:19 -耗时 : 4
2020-03-04 20:39:19 -返回值 : {"checked":false,"children":[{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"3","parentId":"1","state":{"opened":true},"text":"牙星"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"2","parentId":"1","state":{"opened":true},"text":"五九"}],"hasChildren":true,"hasParent":false,"id":"1","parentId":"0","state":{"opened":true},"text":"总公司"}
2020-03-04 20:57:09 -请求地址 : http://localhost:8081/elec/elecInto/importElecIntoExcel
2020-03-04 20:57:09 -HTTP METHOD : POST
2020-03-04 20:57:09 -CLASS_METHOD : com.bootdo.elec.controller.ElecIntoController.importElecIntoExcel
2020-03-04 20:57:09 -参数 : [org.springframework.web.multipart.support.StandardMultipartHttpServletRequest$StandardMultipartFile@3b7b829a, com.bootdo.elec.vo.ElecVo@502b3cf5, org.apache.shiro.web.servlet.ShiroHttpServletResponse@36c8d33e]
2020-03-04 20:57:10 -==>  Preparing: UPDATE ELEC SET ELEC_SUM = ELEC_SUM + ? WHERE CREATE_TIME = ? and user_org = ? and USER_ID = ? and USER_NAME = ? and `user_type` = 'B' 
2020-03-04 20:57:10 -==> Parameters: 100(BigDecimal), 2019-12(String), 2(String), 1-0005(String), 李生(String)
2020-03-04 20:57:11 -<==    Updates: 1
2020-03-04 20:57:11 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, `user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec WHERE CREATE_TIME = ? and user_org = ? and USER_ID = ? and USER_NAME = ? and `user_type` = 'B' 
2020-03-04 20:57:11 -==> Parameters: 2019-12(String), 2(String), 1-0005(String), 李生(String)
2020-03-04 20:57:11 -<==      Total: 1
2020-03-04 20:57:11 -==>  Preparing: insert into elec_log ( `user_id`, `user_name`, `user_type`, `user_org`, `elec_type`, `elec_money`, `money_date`, `create_time`, `create_by`, `update_time`, `update_by`, `remark` ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-03-04 20:57:11 -==> Parameters: 1-0005(String), 李生(String), B(String), 2(String), 1(String), 100(BigDecimal), 2020-03-04 20:57:11.627(Timestamp), 2019-12(String), admin(String), 2020-03-04 20:57:11.627(Timestamp), admin(String), null
2020-03-04 20:57:11 -<==    Updates: 1
2020-03-04 20:57:11 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`start`,`end`,`hu`,`elec_price`,`elec_amount`,`elec_cost`,`elec_sum`,`elec_money`,`heat_price`,`heat_area`,`heat_cost`,`heat_sum`,`heat_money`,`water_price`,`water_cost`,`water_sum`,`water_money`,`print_date`,`print_money`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from print where user_id = ? and user_org = ? and create_time = ? and date_format(print_date,'%Y-%m-%d') = date_format(?,'%Y-%m-%d') 
2020-03-04 20:57:11 -==> Parameters: 1-0005(String), 2(String), 2019-12(String), 2020-03-04 20:57:11.627(Timestamp)
2020-03-04 20:57:12 -<==      Total: 1
2020-03-04 20:57:12 -==>  Preparing: update print SET `user_id` = ?, `user_name` = ?, `user_type` = ?, `user_org` = ?, `start` = ?, `end` = ?, `hu` = ?, `elec_price` = ?, `elec_amount` = ?, `elec_cost` = ?, `elec_sum` = ?, `elec_money` = ?, `print_date` = ?, `create_time` = ?, `create_by` = ?, `update_time` = ?, `update_by` = ? where id = ? 
2020-03-04 20:57:12 -==> Parameters: 1-0005(String), 李生(String), B(String), 2(String), 8481.0(BigDecimal), 8581.0(BigDecimal), 1(Integer), 0.465(BigDecimal), 100.00(BigDecimal), 46.50(BigDecimal), 300.01(BigDecimal), 100(BigDecimal), 2020-03-04 20:57:12.003(Timestamp), 2019-12(String), admin(String), 2020-03-04 20:57:12.003(Timestamp), admin(String), 12253(Long)
2020-03-04 20:57:12 -<==    Updates: 1
2020-03-04 20:57:12 -==>  Preparing: UPDATE ELEC SET ELEC_SUM = ELEC_SUM + ? WHERE CREATE_TIME = ? and user_org = ? and USER_ID = ? and USER_NAME = ? and `user_type` = 'B' 
2020-03-04 20:57:12 -==> Parameters: 100(BigDecimal), 2019-12(String), 2(String), 1-0008(String), 王明刚1(String)
2020-03-04 20:57:12 -<==    Updates: 0
2020-03-04 20:57:12 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, `user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec WHERE CREATE_TIME = ? and user_org = ? and USER_ID = ? and USER_NAME = ? and `user_type` = 'B' 
2020-03-04 20:57:12 -==> Parameters: 2019-12(String), 2(String), 1-0008(String), 王明刚1(String)
2020-03-04 20:57:12 -<==      Total: 0
2020-03-04 20:57:13 -耗时 : 3736
2020-03-04 20:57:13 -返回值 : 第3行，数据与数据库不匹配请认真编写
2020-03-04 20:58:14 -==>  Preparing: select distinct m.perms from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id = ur.role_id where ur.user_id = ? 
2020-03-04 20:58:14 -==> Parameters: 1(Long)
2020-03-04 20:58:14 -<==      Total: 94
2020-03-04 20:58:15 -请求地址 : http://localhost:8081/elec/elec/list
2020-03-04 20:58:15 -HTTP METHOD : GET
2020-03-04 20:58:15 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.list
2020-03-04 20:58:15 -参数 : [{limit=10, offset=0, userType=B, elecType=, userOrg=, userId=, createTime=2019-12, queryType=1}, com.bootdo.elec.domain.ElecDO@5f6d8762]
2020-03-04 20:58:15 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, `user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec WHERE `create_time` = ? and user_type = ? order by id asc limit ?, ? 
2020-03-04 20:58:15 -==> Parameters: 2019-12(String), B(String), 0(Integer), 10(Integer)
2020-03-04 20:58:15 -<==      Total: 10
2020-03-04 20:58:15 -==>  Preparing: select count(*) from elec WHERE `create_time` = ? and user_type = ? 
2020-03-04 20:58:15 -==> Parameters: 2019-12(String), B(String)
2020-03-04 20:58:15 -<==      Total: 1
2020-03-04 20:58:15 -耗时 : 434
2020-03-04 20:58:15 -返回值 : com.bootdo.common.utils.PageUtils@5f5b1dcb
2020-03-04 20:59:17 -请求地址 : http://localhost:8081/elec/elecInto/importElecIntoExcel
2020-03-04 20:59:17 -HTTP METHOD : POST
2020-03-04 20:59:17 -CLASS_METHOD : com.bootdo.elec.controller.ElecIntoController.importElecIntoExcel
2020-03-04 20:59:17 -参数 : [org.springframework.web.multipart.support.StandardMultipartHttpServletRequest$StandardMultipartFile@4c2015cb, com.bootdo.elec.vo.ElecVo@723df9c2, org.apache.shiro.web.servlet.ShiroHttpServletResponse@ad9558d]
2020-03-04 21:03:41 -==>  Preparing: UPDATE ELEC SET ELEC_SUM = ELEC_SUM + ? WHERE CREATE_TIME = ? and user_org = ? and USER_ID = ? and USER_NAME = ? and `user_type` = 'B' 
2020-03-04 21:03:41 -==> Parameters: 100(BigDecimal), 2019-12(String), 2(String), 1-0005(String), 李生(String)
2020-03-04 21:03:41 -<==    Updates: 1
2020-03-04 21:04:26 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, `user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec WHERE CREATE_TIME = ? and user_org = ? and USER_ID = ? and USER_NAME = ? and `user_type` = 'B' 
2020-03-04 21:04:26 -==> Parameters: 2019-12(String), 2(String), 1-0005(String), 李生(String)
2020-03-04 21:04:27 -<==      Total: 1
2020-03-04 21:04:48 -==>  Preparing: insert into elec_log ( `user_id`, `user_name`, `user_type`, `user_org`, `elec_type`, `elec_money`, `money_date`, `create_time`, `create_by`, `update_time`, `update_by`, `remark` ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-03-04 21:04:49 -==> Parameters: 1-0005(String), 李生(String), B(String), 2(String), 1(String), 100(BigDecimal), 2020-03-04 21:04:48.86(Timestamp), 2019-12(String), admin(String), 2020-03-04 21:04:48.86(Timestamp), admin(String), null
2020-03-04 21:04:49 -<==    Updates: 1
2020-03-04 21:04:49 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`start`,`end`,`hu`,`elec_price`,`elec_amount`,`elec_cost`,`elec_sum`,`elec_money`,`heat_price`,`heat_area`,`heat_cost`,`heat_sum`,`heat_money`,`water_price`,`water_cost`,`water_sum`,`water_money`,`print_date`,`print_money`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from print where user_id = ? and user_org = ? and create_time = ? and date_format(print_date,'%Y-%m-%d') = date_format(?,'%Y-%m-%d') 
2020-03-04 21:04:49 -==> Parameters: 1-0005(String), 2(String), 2019-12(String), 2020-03-04 21:04:48.86(Timestamp)
2020-03-04 21:04:49 -<==      Total: 1
2020-03-04 21:04:49 -==>  Preparing: update print SET `user_id` = ?, `user_name` = ?, `user_type` = ?, `user_org` = ?, `start` = ?, `end` = ?, `hu` = ?, `elec_price` = ?, `elec_amount` = ?, `elec_cost` = ?, `elec_sum` = ?, `elec_money` = ?, `print_date` = ?, `create_time` = ?, `create_by` = ?, `update_time` = ?, `update_by` = ? where id = ? 
2020-03-04 21:04:49 -==> Parameters: 1-0005(String), 李生(String), B(String), 2(String), 8481.0(BigDecimal), 8581.0(BigDecimal), 1(Integer), 0.465(BigDecimal), 100.00(BigDecimal), 46.50(BigDecimal), 400.01(BigDecimal), 100(BigDecimal), 2020-03-04 21:04:49.346(Timestamp), 2019-12(String), admin(String), 2020-03-04 21:04:49.346(Timestamp), admin(String), 12253(Long)
2020-03-04 21:04:49 -<==    Updates: 1
2020-03-04 21:05:05 -==>  Preparing: UPDATE ELEC SET ELEC_SUM = ELEC_SUM + ? WHERE CREATE_TIME = ? and user_org = ? and USER_ID = ? and USER_NAME = ? and `user_type` = 'B' 
2020-03-04 21:05:05 -==> Parameters: 100(BigDecimal), 2019-12(String), 2(String), 1-0008(String), 王明刚1(String)
2020-03-04 21:05:06 -<==    Updates: 0
2020-03-04 21:05:09 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, `user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec WHERE CREATE_TIME = ? and user_org = ? and USER_ID = ? and USER_NAME = ? and `user_type` = 'B' 
2020-03-04 21:05:09 -==> Parameters: 2019-12(String), 2(String), 1-0008(String), 王明刚1(String)
2020-03-04 21:05:09 -<==      Total: 0
2020-03-04 21:05:09 -耗时 : 352058
2020-03-04 21:05:09 -返回值 : 第3行，数据与数据库不匹配请认真编写
2020-03-04 21:08:01 -WebSocketSession[1 current WS(1)-HttpStream(0)-HttpPoll(0), 3 total, 0 closed abnormally (0 connect failure, 0 send limit, 3 transport error)], stompSubProtocol[processed CONNECT(2)-CONNECTED(2)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 24], outboundChannelpool size = 0, active threads = 0, queued tasks = 0, completed tasks = 4], sockJsScheduler[pool size = 4, active threads = 1, queued tasks = 2, completed tasks = 2114]
2020-03-04 21:23:53 -Starting BootdoApplication on PC-201905091110 with PID 824 (D:\eclipse2018-work\bootdo\target\classes started by Administrator in D:\eclipse2018-work\bootdo)
2020-03-04 21:23:53 -Running with Spring Boot v2.0.3.RELEASE, Spring v5.0.7.RELEASE
2020-03-04 21:23:53 -The following profiles are active: dev
2020-03-04 21:23:53 -Refreshing org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@7fc44dec: startup date [Wed Mar 04 21:23:53 CST 2020]; root of context hierarchy
2020-03-04 21:24:09 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-04 21:24:14 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$5e1987b] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-04 21:24:14 -Bean 'shiroConfig' of type [com.bootdo.system.config.ShiroConfig$$EnhancerBySpringCGLIB$$f83ac722] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-04 21:24:17 -Bean 'userRealm' of type [com.bootdo.system.shiro.UserRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-04 21:24:18 -Bean 'cacheManager2' of type [net.sf.ehcache.CacheManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-04 21:24:18 -Bean 'ehCacheManager' of type [org.apache.shiro.cache.ehcache.EhCacheManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-04 21:24:18 -Cache with name 'com.bootdo.system.shiro.UserRealm.authorizationCache' does not yet exist.  Creating now.
2020-03-04 21:24:18 -Added EhCache named [com.bootdo.system.shiro.UserRealm.authorizationCache]
2020-03-04 21:24:18 -Bean 'sessionDAO' of type [org.apache.shiro.session.mgt.eis.MemorySessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-04 21:24:18 -Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-04 21:24:18 -Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-04 21:24:19 -Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-04 21:24:23 -Tomcat initialized with port(s): 8081 (http)
2020-03-04 21:24:24 -Initializing ProtocolHandler ["http-nio-8081"]
2020-03-04 21:24:24 -Starting service [Tomcat]
2020-03-04 21:24:24 -Starting Servlet Engine: Apache Tomcat/8.5.31
2020-03-04 21:24:24 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [D:\Java\JDK\jdk1.8.0_102\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;D:\Java\JDK\jdk1.8.0_102\jre\bin;D:/Java/JRE/bin/server;D:/Java/JRE/bin;D:/Java/JRE/lib/amd64;C:\ProgramData\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Windows\System32\OpenSSH\;%JAVA_HOME\bin%;;C:\Program Files (x86)\pycSafefile\x64;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;C:\Program Files\JetBrains\WebStorm 2019.2.4\bin;;D:\eclipse2018\eclipse;;.]
2020-03-04 21:24:25 -Initializing Spring embedded WebApplicationContext
2020-03-04 21:24:25 -Root WebApplicationContext: initialization completed in 31219 ms
2020-03-04 21:24:27 -Mapping filter: 'characterEncodingFilter' to: [/*]
2020-03-04 21:24:27 -Mapping filter: 'hiddenHttpMethodFilter' to: [/*]
2020-03-04 21:24:27 -Mapping filter: 'httpPutFormContentFilter' to: [/*]
2020-03-04 21:24:27 -Mapping filter: 'requestContextFilter' to: [/*]
2020-03-04 21:24:27 -Filter xssFilter was not registered (disabled)
2020-03-04 21:24:27 -Mapping filter: 'webStatFilter' to urls: [/*]
2020-03-04 21:24:27 -Mapping filter: 'shiroFilterFactoryBean' to: [/*]
2020-03-04 21:24:27 -Servlet statViewServlet mapped to [/druid/*]
2020-03-04 21:24:27 -Servlet dispatcherServlet mapped to [/]
2020-03-04 21:24:35 -ApplicationContext registed-->org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@7fc44dec: startup date [Wed Mar 04 21:23:53 CST 2020]; root of context hierarchy
2020-03-04 21:24:37 -Using default implementation for ThreadExecutor
2020-03-04 21:24:37 -Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-03-04 21:24:37 -Quartz Scheduler v.2.3.0 created.
2020-03-04 21:24:37 -RAMJobStore initialized.
2020-03-04 21:24:37 -Scheduler meta-data: Quartz Scheduler (v2.3.0) 'schedulerFactoryBean' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-03-04 21:24:37 -Quartz scheduler 'schedulerFactoryBean' initialized from an externally provided properties instance.
2020-03-04 21:24:37 -Quartz scheduler version: 2.3.0
2020-03-04 21:24:37 -JobFactory set to: com.bootdo.common.quartz.factory.JobFactory@40c0437f
2020-03-04 21:24:39 -Initializing ExecutorService  'clientInboundChannelExecutor'
2020-03-04 21:24:39 -Initializing ExecutorService  'clientOutboundChannelExecutor'
2020-03-04 21:24:46 -Mapped "{[/charts/countDD/getCountDD],methods=[POST]}" onto public java.util.Map<java.lang.String, java.lang.Object> com.bootdo.charts.controller.countDDController.getCountD(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo)
2020-03-04 21:24:46 -Mapped "{[/charts/countDD],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.countDDController.countDD()
2020-03-04 21:24:46 -Mapped "{[/charts/countDD/exportDD],methods=[GET]}" onto public void com.bootdo.charts.controller.countDDController.exportDD(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.HeatLogVo,com.bootdo.moneyLog.vo.WaterLogVo,javax.servlet.http.HttpServletResponse)
2020-03-04 21:24:46 -Mapped "{[/charts/countMM/exportMM],methods=[GET]}" onto public void com.bootdo.charts.controller.countMMController.exportMM(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.HeatLogVo,com.bootdo.moneyLog.vo.WaterLogVo,javax.servlet.http.HttpServletResponse)
2020-03-04 21:24:46 -Mapped "{[/charts/countMM/getCountMM],methods=[POST]}" onto public java.util.Map<java.lang.String, java.lang.Object> com.bootdo.charts.controller.countMMController.getCountMM(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo)
2020-03-04 21:24:46 -Mapped "{[/charts/countMM],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.countMMController.countMM()
2020-03-04 21:24:46 -Mapped "{[/charts/countOwe/exportOwe],methods=[GET]}" onto public void com.bootdo.charts.controller.countOweController.exportOwe(com.bootdo.elec.vo.ElecVo,com.bootdo.heat.vo.HeatVo,com.bootdo.water.vo.WaterVo,javax.servlet.http.HttpServletResponse)
2020-03-04 21:24:46 -Mapped "{[/charts/countOwe],methods=[GET]}" onto java.lang.String com.bootdo.charts.controller.countOweController.countOwe()
2020-03-04 21:24:46 -Mapped "{[/charts/countOwe/getCountOwe],methods=[POST]}" onto public java.util.Map<java.lang.String, java.lang.Object> com.bootdo.charts.controller.countOweController.getCountOwe(com.bootdo.elec.vo.ElecVo,com.bootdo.water.vo.WaterVo,com.bootdo.heat.vo.HeatVo)
2020-03-04 21:24:46 -Mapped "{[/charts/countRun/getCountRun],methods=[POST]}" onto public java.util.Map<java.lang.String, java.lang.Object> com.bootdo.charts.controller.countRunController.getCountRun(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo)
2020-03-04 21:24:46 -Mapped "{[/charts/countRun],methods=[GET]}" onto java.lang.String com.bootdo.charts.controller.countRunController.countRun()
2020-03-04 21:24:46 -Mapped "{[/charts/countRun/exportRun],methods=[GET]}" onto public void com.bootdo.charts.controller.countRunController.exportRun(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.HeatLogVo,com.bootdo.moneyLog.vo.WaterLogVo,javax.servlet.http.HttpServletResponse)
2020-03-04 21:24:46 -Mapped "{[/charts/countYY/exportYY],methods=[GET]}" onto public void com.bootdo.charts.controller.countYYController.exportYY(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.HeatLogVo,com.bootdo.moneyLog.vo.WaterLogVo,javax.servlet.http.HttpServletResponse)
2020-03-04 21:24:46 -Mapped "{[/charts/countYY],methods=[GET]}" onto java.lang.String com.bootdo.charts.controller.countYYController.countYY()
2020-03-04 21:24:46 -Mapped "{[/charts/countYY/getCountYY],methods=[POST]}" onto public java.util.Map<java.lang.String, java.lang.Object> com.bootdo.charts.controller.countYYController.getCountYY(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo)
2020-03-04 21:24:46 -Mapped "{[/charts/tableDD],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.tableDDController.countDD()
2020-03-04 21:24:46 -Mapped "{[/charts/tableDD/exportDD],methods=[GET]}" onto public void com.bootdo.charts.controller.tableDDController.exportDD(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.HeatLogVo,com.bootdo.moneyLog.vo.WaterLogVo,javax.servlet.http.HttpServletResponse)
2020-03-04 21:24:46 -Mapped "{[/charts/tableDD/getTableDD],methods=[POST]}" onto public java.util.Map<java.lang.String, java.lang.Object> com.bootdo.charts.controller.tableDDController.getTableDD(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo)
2020-03-04 21:24:46 -Mapped "{[/charts/tableElecMM/exportElecMM],methods=[GET]}" onto public void com.bootdo.charts.controller.tableElecMMController.exportElecMM(com.bootdo.elec.vo.ElecVo,com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse)
2020-03-04 21:24:46 -Mapped "{[/charts/tableElecMM],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.tableElecMMController.tableElecMM()
2020-03-04 21:24:46 -Mapped "{[/charts/tableElecMM/tableElecMM],methods=[POST]}" onto public java.util.Map<java.lang.String, java.lang.Object> com.bootdo.charts.controller.tableElecMMController.tableElecMM(com.bootdo.elec.vo.ElecVo,com.bootdo.moneyLog.vo.ElecLogVo)
2020-03-04 21:24:46 -Mapped "{[/charts/tableElecYY/tableElecYY],methods=[POST]}" onto public java.util.Map<java.lang.String, java.lang.Object> com.bootdo.charts.controller.tableElecYYController.tableElecYY(com.bootdo.elec.vo.ElecVo,com.bootdo.moneyLog.vo.ElecLogVo)
2020-03-04 21:24:46 -Mapped "{[/charts/tableElecYY],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.tableElecYYController.tableElecYY()
2020-03-04 21:24:46 -Mapped "{[/charts/tableElecYY/exportElecYY],methods=[GET]}" onto public void com.bootdo.charts.controller.tableElecYYController.exportElecYY(com.bootdo.elec.vo.ElecVo,com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse)
2020-03-04 21:24:46 -Mapped "{[/charts/tableHeatMM/tableHeatMM],methods=[POST]}" onto public java.util.Map<java.lang.String, java.lang.Object> com.bootdo.charts.controller.tableHeatMMController.tableHeatMM(com.bootdo.heat.vo.HeatVo,com.bootdo.moneyLog.vo.HeatLogVo)
2020-03-04 21:24:46 -Mapped "{[/charts/tableHeatMM],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.tableHeatMMController.tableHeatMM()
2020-03-04 21:24:46 -Mapped "{[/charts/tableHeatMM/exportHeatMM],methods=[GET]}" onto public void com.bootdo.charts.controller.tableHeatMMController.exportHeatMM(com.bootdo.heat.vo.HeatVo,com.bootdo.moneyLog.vo.HeatLogVo,javax.servlet.http.HttpServletResponse)
2020-03-04 21:24:46 -Mapped "{[/charts/tableHeatYY/exportHeatYY],methods=[GET]}" onto public void com.bootdo.charts.controller.tableHeatYYController.exportHeatYY(com.bootdo.heat.vo.HeatVo,com.bootdo.moneyLog.vo.HeatLogVo,javax.servlet.http.HttpServletResponse)
2020-03-04 21:24:46 -Mapped "{[/charts/tableHeatYY],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.tableHeatYYController.tableHeatYY()
2020-03-04 21:24:46 -Mapped "{[/charts/tableHeatYY/tableHeatYY],methods=[POST]}" onto public java.util.Map<java.lang.String, java.lang.Object> com.bootdo.charts.controller.tableHeatYYController.tableHeatYY(com.bootdo.heat.vo.HeatVo,com.bootdo.moneyLog.vo.HeatLogVo)
2020-03-04 21:24:46 -Mapped "{[/charts/tableWaterMM/tableWaterMM],methods=[POST]}" onto public java.util.Map<java.lang.String, java.lang.Object> com.bootdo.charts.controller.tableWaterMMController.tableWaterMM(com.bootdo.water.vo.WaterVo,com.bootdo.moneyLog.vo.WaterLogVo)
2020-03-04 21:24:46 -Mapped "{[/charts/tableWaterMM],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.tableWaterMMController.tableWaterMM()
2020-03-04 21:24:46 -Mapped "{[/charts/tableWaterMM/exportWaterMM],methods=[GET]}" onto public void com.bootdo.charts.controller.tableWaterMMController.exportWaterMM(com.bootdo.water.vo.WaterVo,com.bootdo.moneyLog.vo.WaterLogVo,javax.servlet.http.HttpServletResponse)
2020-03-04 21:24:46 -Mapped "{[/charts/tableWaterYY/exportWaterYY],methods=[GET]}" onto public void com.bootdo.charts.controller.tableWaterYYController.exportWaterYY(com.bootdo.water.vo.WaterVo,com.bootdo.moneyLog.vo.WaterLogVo,javax.servlet.http.HttpServletResponse)
2020-03-04 21:24:46 -Mapped "{[/charts/tableWaterYY],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.tableWaterYYController.tableWaterYY()
2020-03-04 21:24:46 -Mapped "{[/charts/tableWaterYY/tableWaterYY],methods=[POST]}" onto public java.util.Map<java.lang.String, java.lang.Integer> com.bootdo.charts.controller.tableWaterYYController.tableWaterYY(com.bootdo.water.vo.WaterVo,com.bootdo.moneyLog.vo.WaterLogVo)
2020-03-04 21:24:46 -Mapped "{[/common/dict/add],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.add()
2020-03-04 21:24:46 -Mapped "{[/common/dict/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.remove(java.lang.Long)
2020-03-04 21:24:46 -Mapped "{[/common/dict/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.remove(java.lang.Long[])
2020-03-04 21:24:46 -Mapped "{[/common/dict/update]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.update(com.bootdo.common.domain.DictDO)
2020-03-04 21:24:46 -Mapped "{[/common/dict/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.common.controller.DictController.list(java.util.Map<java.lang.String, java.lang.Object>)
2020-03-04 21:24:46 -Mapped "{[/common/dict/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.save(com.bootdo.common.domain.DictDO)
2020-03-04 21:24:46 -Mapped "{[/common/dict/type],methods=[GET]}" onto public java.util.List<com.bootdo.common.domain.DictDO> com.bootdo.common.controller.DictController.listType()
2020-03-04 21:24:46 -Mapped "{[/common/dict/list/{type}],methods=[GET]}" onto public java.util.List<com.bootdo.common.domain.DictDO> com.bootdo.common.controller.DictController.listByType(java.lang.String)
2020-03-04 21:24:46 -Mapped "{[/common/dict/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.edit(java.lang.Long,org.springframework.ui.Model)
2020-03-04 21:24:46 -Mapped "{[/common/dict/add/{type}/{description}],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.addD(org.springframework.ui.Model,java.lang.String,java.lang.String)
2020-03-04 21:24:46 -Mapped "{[/common/dict],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.dict()
2020-03-04 21:24:46 -Mapped "{[/common/sysFile/add],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.FileController.add()
2020-03-04 21:24:46 -Mapped "{[/common/sysFile/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.remove(java.lang.Long,javax.servlet.http.HttpServletRequest)
2020-03-04 21:24:46 -Mapped "{[/common/sysFile/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.remove(java.lang.Long[])
2020-03-04 21:24:46 -Mapped "{[/common/sysFile/update]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.update(com.bootdo.common.domain.FileDO)
2020-03-04 21:24:46 -Mapped "{[/common/sysFile/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.common.controller.FileController.list(java.util.Map<java.lang.String, java.lang.Object>)
2020-03-04 21:24:46 -Mapped "{[/common/sysFile/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.save(com.bootdo.common.domain.FileDO)
2020-03-04 21:24:46 -Mapped "{[/common/sysFile/info/{id}]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.info(java.lang.Long)
2020-03-04 21:24:46 -Mapped "{[/common/sysFile/upload],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.FileController.upload(org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpServletRequest)
2020-03-04 21:24:46 -Mapped "{[/common/sysFile],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.FileController.sysFile(org.springframework.ui.Model)
2020-03-04 21:24:46 -Mapped "{[/common/sysFile/edit],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.FileController.edit(java.lang.Long,org.springframework.ui.Model)
2020-03-04 21:24:46 -Mapped "{[/common/generator/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.GeneratorController.update(java.util.Map<java.lang.String, java.lang.Object>)
2020-03-04 21:24:46 -Mapped "{[/common/generator/list],methods=[GET]}" onto java.util.List<java.util.Map<java.lang.String, java.lang.Object>> com.bootdo.common.controller.GeneratorController.list()
2020-03-04 21:24:46 -Mapped "{[/common/generator/code/{tableName}]}" onto public void com.bootdo.common.controller.GeneratorController.code(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String) throws java.io.IOException
2020-03-04 21:24:46 -Mapped "{[/common/generator/edit],methods=[GET]}" onto public java.lang.String com.bootdo.common.controller.GeneratorController.edit(org.springframework.ui.Model)
2020-03-04 21:24:46 -Mapped "{[/common/generator/batchCode]}" onto public void com.bootdo.common.controller.GeneratorController.batchCode(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String) throws java.io.IOException
2020-03-04 21:24:46 -Mapped "{[/common/generator],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.GeneratorController.generator()
2020-03-04 21:24:46 -Mapped "{[/common/job/add],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.JobController.add()
2020-03-04 21:24:46 -Mapped "{[/common/job/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.remove(java.lang.Long)
2020-03-04 21:24:46 -Mapped "{[/common/job/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.remove(java.lang.Long[])
2020-03-04 21:24:46 -Mapped "{[/common/job/update],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.update(com.bootdo.common.domain.TaskDO)
2020-03-04 21:24:46 -Mapped "{[/common/job/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.common.controller.JobController.list(java.util.Map<java.lang.String, java.lang.Object>)
2020-03-04 21:24:46 -Mapped "{[/common/job/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.save(com.bootdo.common.domain.TaskDO)
2020-03-04 21:24:46 -Mapped "{[/common/job/info/{id}]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.info(java.lang.Long)
2020-03-04 21:24:46 -Mapped "{[/common/job/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.JobController.edit(java.lang.Long,org.springframework.ui.Model)
2020-03-04 21:24:46 -Mapped "{[/common/job],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.JobController.taskScheduleJob()
2020-03-04 21:24:46 -Mapped "{[/common/job/changeJobStatus],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.changeJobStatus(java.lang.Long,java.lang.String)
2020-03-04 21:24:46 -Mapped "{[/common/log/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.LogController.remove(java.lang.Long)
2020-03-04 21:24:46 -Mapped "{[/common/log],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.LogController.log()
2020-03-04 21:24:46 -Mapped "{[/common/log/list],methods=[GET]}" onto com.bootdo.common.domain.PageDO<com.bootdo.common.domain.LogDO> com.bootdo.common.controller.LogController.list(java.util.Map<java.lang.String, java.lang.Object>)
2020-03-04 21:24:46 -Mapped "{[/common/log/batchRemove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.LogController.batchRemove(java.lang.Long[])
2020-03-04 21:24:46 -Mapped "{[/common/long],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.LongController.Long()
2020-03-04 21:24:46 -Mapped "{[/common/time],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.TimeController.Time()
2020-03-04 21:24:46 -Mapped "{[/error]}" onto public com.bootdo.common.utils.R com.bootdo.common.exception.MainsiteErrorController.handleError(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2020-03-04 21:24:46 -Mapped "{[/error],produces=[text/html]}" onto public org.springframework.web.servlet.ModelAndView com.bootdo.common.exception.MainsiteErrorController.errorHtml(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2020-03-04 21:24:46 -Mapped "{[/elec/elec/add],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecController.add()
2020-03-04 21:24:46 -Mapped "{[/elec/elec/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.remove(java.lang.Long)
2020-03-04 21:24:46 -Mapped "{[/elec/elec/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.remove(java.lang.Long[])
2020-03-04 21:24:46 -Mapped "{[/elec/elec/update],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.update(com.bootdo.elec.domain.ElecDO)
2020-03-04 21:24:46 -Mapped "{[/elec/elec/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.elec.controller.ElecController.list(java.util.Map<java.lang.String, java.lang.Object>,com.bootdo.elec.domain.ElecDO)
2020-03-04 21:24:46 -Mapped "{[/elec/elec/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.save(com.bootdo.elec.domain.ElecDO)
2020-03-04 21:24:46 -Mapped "{[/elec/elec/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecController.edit(java.lang.Long,org.springframework.ui.Model)
2020-03-04 21:24:46 -Mapped "{[/elec/elec],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecController.Elec()
2020-03-04 21:24:46 -Mapped "{[/elec/elec/exprotElec],methods=[GET]}" onto public void com.bootdo.elec.controller.ElecController.exprotExcel(com.bootdo.elec.vo.ElecVo,javax.servlet.http.HttpServletResponse)
2020-03-04 21:24:46 -Mapped "{[/elec/elecInto],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecIntoController.ElecInto()
2020-03-04 21:24:46 -Mapped "{[/elec/elecInto/exprotElecIntoExcel],methods=[GET]}" onto public void com.bootdo.elec.controller.ElecIntoController.exprotExcel(com.bootdo.elec.vo.ElecVo,javax.servlet.http.HttpServletResponse)
2020-03-04 21:24:46 -Mapped "{[/elec/elecInto/importElecIntoExcel],methods=[POST]}" onto public java.lang.String com.bootdo.elec.controller.ElecIntoController.importElecIntoExcel(org.springframework.web.multipart.MultipartFile,com.bootdo.elec.vo.ElecVo,javax.servlet.http.HttpServletResponse) throws java.lang.Exception
2020-03-04 21:24:46 -Mapped "{[/elec/elecPrice/add],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecPriceController.add()
2020-03-04 21:24:46 -Mapped "{[/elec/elecPrice/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecPriceController.remove(java.lang.Long)
2020-03-04 21:24:46 -Mapped "{[/elec/elecPrice/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecPriceController.remove(java.lang.Long[])
2020-03-04 21:24:46 -Mapped "{[/elec/elecPrice/update]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecPriceController.update(com.bootdo.elec.domain.ElecPriceDO)
2020-03-04 21:24:46 -Mapped "{[/elec/elecPrice/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.elec.controller.ElecPriceController.list(java.util.Map<java.lang.String, java.lang.Object>)
2020-03-04 21:24:46 -Mapped "{[/elec/elecPrice/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecPriceController.save(com.bootdo.elec.domain.ElecPriceDO,com.bootdo.elec.domain.ElecDO)
2020-03-04 21:24:46 -Mapped "{[/elec/elecPrice],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecPriceController.ElecPrice()
2020-03-04 21:24:46 -Mapped "{[/elec/elecPrice/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecPriceController.edit(java.lang.Long,org.springframework.ui.Model)
2020-03-04 21:24:46 -Mapped "{[/elec/elecUpLoad],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecUpLoadController.Elec()
2020-03-04 21:24:46 -Mapped "{[/elec/elecUpLoad/importElecExcel],methods=[POST]}" onto public java.util.Map<java.lang.String, java.lang.Object> com.bootdo.elec.controller.ElecUpLoadController.importElecExcel(org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpServletRequest) throws java.lang.Exception
2020-03-04 21:24:46 -Mapped "{[/elec/elecUpLoad/importElecUser]}" onto public java.lang.String com.bootdo.elec.controller.ElecUpLoadController.importElecUser(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)
2020-03-04 21:24:46 -Mapped "{[/elec/elecUpLoad/exprotElecExcel],methods=[GET]}" onto public void com.bootdo.elec.controller.ElecUpLoadController.exprotElecExcel(com.bootdo.elec.vo.ElecVo,javax.servlet.http.HttpServletResponse)
2020-03-04 21:24:46 -Mapped "{[/heat/heat/add],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatController.add()
2020-03-04 21:24:46 -Mapped "{[/heat/heat/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatController.remove(java.lang.Integer)
2020-03-04 21:24:46 -Mapped "{[/heat/heat/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatController.remove(java.lang.Integer[])
2020-03-04 21:24:46 -Mapped "{[/heat/heat/update]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatController.update(com.bootdo.heat.domain.HeatDO)
2020-03-04 21:24:46 -Mapped "{[/heat/heat/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.heat.controller.HeatController.list(java.util.Map<java.lang.String, java.lang.Object>)
2020-03-04 21:24:46 -Mapped "{[/heat/heat/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatController.save(com.bootdo.heat.domain.HeatDO)
2020-03-04 21:24:46 -Mapped "{[/heat/heat/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatController.edit(java.lang.Integer,org.springframework.ui.Model)
2020-03-04 21:24:46 -Mapped "{[/heat/heat/exprotHeat],methods=[GET]}" onto public void com.bootdo.heat.controller.HeatController.exprotExcel(com.bootdo.heat.vo.HeatVo,javax.servlet.http.HttpServletResponse)
2020-03-04 21:24:46 -Mapped "{[/heat/heat],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatController.Heat()
2020-03-04 21:24:46 -Mapped "{[/heat/heatInto/exprotHeatIntoExcel],methods=[GET]}" onto public void com.bootdo.heat.controller.HeatIntoController.exprotExcel(com.bootdo.heat.vo.HeatVo,javax.servlet.http.HttpServletResponse)
2020-03-04 21:24:46 -Mapped "{[/heat/heatInto],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatIntoController.HeatInto()
2020-03-04 21:24:46 -Mapped "{[/heat/heatInto/importHeatIntoExcel],methods=[POST]}" onto public java.lang.String com.bootdo.heat.controller.HeatIntoController.importHeatIntoExcel(org.springframework.web.multipart.MultipartFile,com.bootdo.heat.vo.HeatVo,javax.servlet.http.HttpServletResponse) throws java.lang.Exception
2020-03-04 21:24:46 -Mapped "{[/heat/heatPrice/add],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatPriceController.add()
2020-03-04 21:24:46 -Mapped "{[/heat/heatPrice/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatPriceController.remove(java.lang.Long)
2020-03-04 21:24:46 -Mapped "{[/heat/heatPrice/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatPriceController.remove(java.lang.Long[])
2020-03-04 21:24:46 -Mapped "{[/heat/heatPrice/update]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatPriceController.update(com.bootdo.heat.domain.HeatPriceDO)
2020-03-04 21:24:46 -Mapped "{[/heat/heatPrice/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.heat.controller.HeatPriceController.list(java.util.Map<java.lang.String, java.lang.Object>)
2020-03-04 21:24:46 -Mapped "{[/heat/heatPrice/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatPriceController.save(com.bootdo.heat.domain.HeatPriceDO)
2020-03-04 21:24:46 -Mapped "{[/heat/heatPrice],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatPriceController.HeatPrice()
2020-03-04 21:24:46 -Mapped "{[/heat/heatPrice/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatPriceController.edit(java.lang.Long,org.springframework.ui.Model)
2020-03-04 21:24:46 -Mapped "{[/heat/heatUpLoad/createHeatExcel],methods=[POST]}" onto public java.lang.String com.bootdo.heat.controller.HeatUpLoadController.createHeatExcel(com.bootdo.heat.domain.HeatDO) throws java.lang.Exception
2020-03-04 21:24:46 -Mapped "{[/heat/heatUpLoad/importHeatExcel]}" onto public java.lang.String com.bootdo.heat.controller.HeatUpLoadController.importHeatExcel(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)
2020-03-04 21:24:46 -Mapped "{[/heat/heatUpLoad/nextHeatExcel],methods=[POST]}" onto public java.lang.String com.bootdo.heat.controller.HeatUpLoadController.nextHeatExcel(com.bootdo.heat.domain.HeatDO) throws java.lang.Exception
2020-03-04 21:24:46 -Mapped "{[/heat/heatUpLoad],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatUpLoadController.HeatUpLoad()
2020-03-04 21:24:46 -Mapped "{[/heat/heatUpLoad/exprotHeatExcel],methods=[GET]}" onto public void com.bootdo.heat.controller.HeatUpLoadController.exprotHeatExcel(com.bootdo.heat.vo.HeatVo,javax.servlet.http.HttpServletResponse)
2020-03-04 21:24:46 -Mapped "{[/heat/heatUpLoad/halfHeatExcel],methods=[POST]}" onto public java.lang.String com.bootdo.heat.controller.HeatUpLoadController.halfHeatExcel(com.bootdo.heat.domain.HeatDO) throws java.lang.Exception
2020-03-04 21:24:46 -Mapped "{[/moneyList/moneyList/moneyPrint/{id}/{userNo}],methods=[GET]}" onto java.lang.String com.bootdo.moneyList.controller.MoneyListController.printEdit(java.lang.Long,java.lang.String,org.springframework.ui.Model,com.bootdo.moneyList.damain.MoneyListDO,javax.servlet.http.HttpServletRequest)
2020-03-04 21:24:46 -Mapped "{[/moneyList/moneyList],methods=[GET]}" onto java.lang.String com.bootdo.moneyList.controller.MoneyListController.MoneyList()
2020-03-04 21:24:46 -Mapped "{[/moneyList/moneyList/updateMoney],methods=[POST]}" onto public java.lang.Long com.bootdo.moneyList.controller.MoneyListController.updateMoney(com.bootdo.moneyList.damain.MoneyListDO,javax.servlet.http.HttpServletRequest)
2020-03-04 21:24:46 -Mapped "{[/moneyList/moneyList/queryAllUser],methods=[POST]}" onto public java.util.List<com.bootdo.moneyList.damain.MoneyListDO> com.bootdo.moneyList.controller.MoneyListController.queryAllUser(com.bootdo.moneyList.damain.MoneyListDO)
2020-03-04 21:24:46 -Mapped "{[/moneyList/moneyList/queryAllUserName],methods=[POST]}" onto public java.util.List<com.bootdo.moneyList.damain.MoneyListDO> com.bootdo.moneyList.controller.MoneyListController.getAllUserName(com.bootdo.moneyList.damain.MoneyListDO)
2020-03-04 21:24:46 -Mapped "{[/moneyList/moneyWZ/add],methods=[GET]}" onto java.lang.String com.bootdo.moneyList.controller.MoneyListWZController.add()
2020-03-04 21:24:46 -Mapped "{[/moneyList/moneyWZ/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyList.controller.MoneyListWZController.remove(java.lang.Long)
2020-03-04 21:24:46 -Mapped "{[/moneyList/moneyWZ/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyList.controller.MoneyListWZController.remove(java.lang.Long[])
2020-03-04 21:24:46 -Mapped "{[/moneyList/moneyWZ/update],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyList.controller.MoneyListWZController.update(com.bootdo.elec.domain.ElecDO)
2020-03-04 21:24:46 -Mapped "{[/moneyList/moneyWZ/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.moneyList.controller.MoneyListWZController.list(java.util.Map<java.lang.String, java.lang.Object>,com.bootdo.elec.domain.ElecDO)
2020-03-04 21:24:46 -Mapped "{[/moneyList/moneyWZ/exprotWZ],methods=[GET]}" onto public void com.bootdo.moneyList.controller.MoneyListWZController.exportElecYY(com.bootdo.elec.vo.ElecVo,com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse)
2020-03-04 21:24:46 -Mapped "{[/moneyList/moneyWZ/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.moneyList.controller.MoneyListWZController.edit(java.lang.Long,org.springframework.ui.Model)
2020-03-04 21:24:46 -Mapped "{[/moneyList/moneyWZ],methods=[GET]}" onto java.lang.String com.bootdo.moneyList.controller.MoneyListWZController.MoneyWZ()
2020-03-04 21:24:46 -Mapped "{[/moneyList/moneyWZ/batchMoney],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyList.controller.MoneyListWZController.batchMoney(java.lang.Long[])
2020-03-04 21:24:46 -Mapped "{[/moneyLog/elecLog/add],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.ElecLogController.add()
2020-03-04 21:24:46 -Mapped "{[/moneyLog/elecLog/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.ElecLogController.remove(java.lang.Long)
2020-03-04 21:24:46 -Mapped "{[/moneyLog/elecLog/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.ElecLogController.remove(java.lang.Long[])
2020-03-04 21:24:46 -Mapped "{[/moneyLog/elecLog/update]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.ElecLogController.update(java.util.Map<java.lang.String, java.lang.Object>,com.bootdo.moneyLog.domain.ElecLogDO)
2020-03-04 21:24:46 -Mapped "{[/moneyLog/elecLog/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.moneyLog.controller.ElecLogController.list(java.util.Map<java.lang.String, java.lang.Object>)
2020-03-04 21:24:46 -Mapped "{[/moneyLog/elecLog/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.ElecLogController.save(com.bootdo.moneyLog.domain.ElecLogDO)
2020-03-04 21:24:46 -Mapped "{[/moneyLog/elecLog/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.ElecLogController.edit(java.lang.Long,org.springframework.ui.Model)
2020-03-04 21:24:46 -Mapped "{[/moneyLog/elecLog],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.ElecLogController.moneyLog()
2020-03-04 21:24:46 -Mapped "{[/moneyLog/elecLog/exprotElecLog],methods=[GET]}" onto public void com.bootdo.moneyLog.controller.ElecLogController.exprotElecLog(com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2020-03-04 21:24:46 -Mapped "{[/moneyLog/heatLog/add],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.HeatLogController.add()
2020-03-04 21:24:46 -Mapped "{[/moneyLog/heatLog/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.HeatLogController.remove(java.lang.Long)
2020-03-04 21:24:46 -Mapped "{[/moneyLog/heatLog/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.HeatLogController.remove(java.lang.Long[])
2020-03-04 21:24:46 -Mapped "{[/moneyLog/heatLog/update]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.HeatLogController.update(java.util.Map<java.lang.String, java.lang.Object>,com.bootdo.moneyLog.domain.HeatLogDO)
2020-03-04 21:24:46 -Mapped "{[/moneyLog/heatLog/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.moneyLog.controller.HeatLogController.list(java.util.Map<java.lang.String, java.lang.Object>)
2020-03-04 21:24:46 -Mapped "{[/moneyLog/heatLog/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.HeatLogController.save(com.bootdo.moneyLog.domain.HeatLogDO)
2020-03-04 21:24:46 -Mapped "{[/moneyLog/heatLog/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.HeatLogController.edit(java.lang.Long,org.springframework.ui.Model)
2020-03-04 21:24:46 -Mapped "{[/moneyLog/heatLog],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.HeatLogController.HeatLog()
2020-03-04 21:24:46 -Mapped "{[/moneyLog/heatLog/exprotHeatLog],methods=[GET]}" onto public void com.bootdo.moneyLog.controller.HeatLogController.exprotHeatLog(com.bootdo.moneyLog.vo.HeatLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2020-03-04 21:24:46 -Mapped "{[/moneyLog/waterLog/add],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.WaterLogController.add()
2020-03-04 21:24:46 -Mapped "{[/moneyLog/waterLog/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.WaterLogController.remove(java.lang.Long)
2020-03-04 21:24:46 -Mapped "{[/moneyLog/waterLog/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.WaterLogController.remove(java.lang.Long[])
2020-03-04 21:24:46 -Mapped "{[/moneyLog/waterLog/update]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.WaterLogController.update(java.util.Map<java.lang.String, java.lang.Object>,com.bootdo.moneyLog.domain.WaterLogDO)
2020-03-04 21:24:46 -Mapped "{[/moneyLog/waterLog/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.moneyLog.controller.WaterLogController.list(java.util.Map<java.lang.String, java.lang.Object>)
2020-03-04 21:24:46 -Mapped "{[/moneyLog/waterLog/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.WaterLogController.save(com.bootdo.moneyLog.domain.WaterLogDO)
2020-03-04 21:24:46 -Mapped "{[/moneyLog/waterLog/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.WaterLogController.edit(java.lang.Long,org.springframework.ui.Model)
2020-03-04 21:24:46 -Mapped "{[/moneyLog/waterLog/exprotWaterLog],methods=[GET]}" onto public void com.bootdo.moneyLog.controller.WaterLogController.exprotWaterLog(com.bootdo.moneyLog.vo.WaterLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2020-03-04 21:24:46 -Mapped "{[/moneyLog/waterLog],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.WaterLogController.WaterLog()
2020-03-04 21:24:46 -Mapped "{[/moneyUpLoad/ElecLogUpLoad],methods=[GET]}" onto java.lang.String com.bootdo.moneyUpLoad.Controller.ElecLogUpLoadController.ElecLogUpLoad()
2020-03-04 21:24:46 -Mapped "{[/moneyUpLoad/ElecLogUpLoad/exprotElecLogExcel],methods=[GET]}" onto public void com.bootdo.moneyUpLoad.Controller.ElecLogUpLoadController.exprotElecLogExcel(com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2020-03-04 21:24:46 -Mapped "{[/moneyUpLoad/ElecLogUpLoad/importElecLogExcel]}" onto public java.lang.String com.bootdo.moneyUpLoad.Controller.ElecLogUpLoadController.importElecLogExcel(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)
2020-03-04 21:24:46 -Mapped "{[/moneyUpLoad/HeatLogUpLoad],methods=[GET]}" onto java.lang.String com.bootdo.moneyUpLoad.Controller.HeatLogUpLoadController.HeatLogUpLoad()
2020-03-04 21:24:46 -Mapped "{[/moneyUpLoad/HeatLogUpLoad/importHeatLogExcel]}" onto public java.lang.String com.bootdo.moneyUpLoad.Controller.HeatLogUpLoadController.importHeatLogExcel(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)
2020-03-04 21:24:46 -Mapped "{[/moneyUpLoad/HeatLogUpLoad/exprotHeatLogExcel],methods=[GET]}" onto public void com.bootdo.moneyUpLoad.Controller.HeatLogUpLoadController.exprotHeatLogExcel(com.bootdo.moneyLog.vo.HeatLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2020-03-04 21:24:46 -Mapped "{[/moneyUpLoad/WaterLogUpLoad/exprotWaterLogExcel],methods=[GET]}" onto public void com.bootdo.moneyUpLoad.Controller.WaterLogUpLoadController.exprotWaterLogExcel(com.bootdo.moneyLog.vo.WaterLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2020-03-04 21:24:46 -Mapped "{[/moneyUpLoad/WaterLogUpLoad/importWaterLogExcel]}" onto public java.lang.String com.bootdo.moneyUpLoad.Controller.WaterLogUpLoadController.importWaterLogExcel(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)
2020-03-04 21:24:46 -Mapped "{[/moneyUpLoad/WaterLogUpLoad],methods=[GET]}" onto java.lang.String com.bootdo.moneyUpLoad.Controller.WaterLogUpLoadController.WaterLogLogUpLoad()
2020-03-04 21:24:46 -Mapped "{[/oa/notify/add],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.add()
2020-03-04 21:24:46 -Mapped "{[/oa/notify/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.remove(java.lang.Long)
2020-03-04 21:24:46 -Mapped "{[/oa/notify/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.remove(java.lang.Long[])
2020-03-04 21:24:46 -Mapped "{[/oa/notify/update]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.update(com.bootdo.oa.domain.NotifyDO)
2020-03-04 21:24:46 -Mapped "{[/oa/notify/read/{id}],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.read(java.lang.Long,org.springframework.ui.Model)
2020-03-04 21:24:46 -Mapped "{[/oa/notify/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.oa.controller.NotifyController.list(java.util.Map<java.lang.String, java.lang.Object>)
2020-03-04 21:24:46 -Mapped "{[/oa/notify/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.save(com.bootdo.oa.domain.NotifyDO)
2020-03-04 21:24:46 -Mapped "{[/oa/notify/message],methods=[GET]}" onto com.bootdo.common.utils.PageUtils com.bootdo.oa.controller.NotifyController.message()
2020-03-04 21:24:46 -Mapped "{[/oa/notify/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.edit(java.lang.Long,org.springframework.ui.Model)
2020-03-04 21:24:46 -Mapped "{[/oa/notify/selfList],methods=[GET]}" onto com.bootdo.common.utils.PageUtils com.bootdo.oa.controller.NotifyController.selfList(java.util.Map<java.lang.String, java.lang.Object>)
2020-03-04 21:24:46 -Mapped "{[/oa/notify/selfNotify],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.selefNotify()
2020-03-04 21:24:46 -Mapped "{[/oa/notify],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.oaNotify()
2020-03-04 21:24:46 -Mapped "{[/print/print/add],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.add()
2020-03-04 21:24:46 -Mapped "{[/print/print/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.print.controller.PrintController.remove(java.lang.Long)
2020-03-04 21:24:46 -Mapped "{[/print/print/update]}" onto public com.bootdo.common.utils.R com.bootdo.print.controller.PrintController.update(com.bootdo.print.domain.PrintDO)
2020-03-04 21:24:46 -Mapped "{[/print/print/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.print.controller.PrintController.list(java.util.Map<java.lang.String, java.lang.Object>)
2020-03-04 21:24:46 -Mapped "{[/print/print/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.print.controller.PrintController.save(java.lang.String,com.bootdo.print.domain.PrintDO)
2020-03-04 21:24:46 -Mapped "{[/print/print/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.print.controller.PrintController.batchRemove(java.lang.Long[])
2020-03-04 21:24:46 -Mapped "{[/print/print/batchPrint],methods=[POST]}" onto public java.util.List<com.bootdo.print.vo.PrintVo> com.bootdo.print.controller.PrintController.batchPrint(java.lang.Long[])
2020-03-04 21:24:46 -Mapped "{[/print/print/printMoney],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.printMoney()
2020-03-04 21:24:46 -Mapped "{[/print/print/exprotPrint],methods=[GET]}" onto public void com.bootdo.print.controller.PrintController.exprotPrint(com.bootdo.print.vo.PrintVo,javax.servlet.http.HttpServletResponse)
2020-03-04 21:24:46 -Mapped "{[/print/print],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.Print()
2020-03-04 21:24:46 -Mapped "{[/print/print/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.edit(java.lang.Long,org.springframework.ui.Model)
2020-03-04 21:24:46 -Mapped "{[/print/print/printEdit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.printEdit(java.lang.Long,org.springframework.ui.Model)
2020-03-04 21:24:46 -Mapped "{[/system/sysDept/add/{pId}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.add(java.lang.Long,org.springframework.ui.Model)
2020-03-04 21:24:46 -Mapped "{[/system/sysDept/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.remove(java.lang.Long)
2020-03-04 21:24:46 -Mapped "{[/system/sysDept/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.remove(java.lang.Long[])
2020-03-04 21:24:46 -Mapped "{[/system/sysDept/update]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.update(com.bootdo.system.domain.DeptDO)
2020-03-04 21:24:46 -Mapped "{[/system/sysDept/list],methods=[GET]}" onto public java.util.List<com.bootdo.system.domain.DeptDO> com.bootdo.system.controller.DeptController.list()
2020-03-04 21:24:46 -Mapped "{[/system/sysDept/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.save(com.bootdo.system.domain.DeptDO)
2020-03-04 21:24:46 -Mapped "{[/system/sysDept/tree],methods=[GET]}" onto public com.bootdo.common.domain.Tree<com.bootdo.system.domain.DeptDO> com.bootdo.system.controller.DeptController.tree()
2020-03-04 21:24:46 -Mapped "{[/system/sysDept/edit/{deptId}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.edit(java.lang.Long,org.springframework.ui.Model)
2020-03-04 21:24:46 -Mapped "{[/system/sysDept],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.dept()
2020-03-04 21:24:46 -Mapped "{[/system/sysDept/treeView],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.treeView(org.springframework.web.servlet.ModelAndView)
2020-03-04 21:24:46 -Mapped "{[/index],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.index(org.springframework.ui.Model)
2020-03-04 21:24:46 -Mapped "{[/main],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.main()
2020-03-04 21:24:46 -Mapped "{[/getVerify],methods=[GET]}" onto public void com.bootdo.system.controller.LoginController.getVerify(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2020-03-04 21:24:46 -Mapped "{[/logout],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.logout()
2020-03-04 21:24:46 -Mapped "{[/login],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.login(org.springframework.ui.Model)
2020-03-04 21:24:46 -Mapped "{[/ || ],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.welcome(org.springframework.ui.Model)
2020-03-04 21:24:46 -Mapped "{[/login],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.LoginController.ajaxLogin(java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest)
2020-03-04 21:24:46 -Mapped "{[/sys/menu/add/{pId}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.MenuController.add(org.springframework.ui.Model,java.lang.Long)
2020-03-04 21:24:46 -Mapped "{[/sys/menu/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.MenuController.remove(java.lang.Long)
2020-03-04 21:24:46 -Mapped "{[/sys/menu/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.MenuController.update(com.bootdo.system.domain.MenuDO)
2020-03-04 21:24:46 -Mapped "{[/sys/menu/list]}" onto java.util.List<com.bootdo.system.domain.MenuDO> com.bootdo.system.controller.MenuController.list(java.util.Map<java.lang.String, java.lang.Object>)
2020-03-04 21:24:46 -Mapped "{[/sys/menu/save],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.MenuController.save(com.bootdo.system.domain.MenuDO)
2020-03-04 21:24:46 -Mapped "{[/sys/menu/tree/{roleId}],methods=[GET]}" onto com.bootdo.common.domain.Tree<com.bootdo.system.domain.MenuDO> com.bootdo.system.controller.MenuController.tree(java.lang.Long)
2020-03-04 21:24:46 -Mapped "{[/sys/menu/tree],methods=[GET]}" onto com.bootdo.common.domain.Tree<com.bootdo.system.domain.MenuDO> com.bootdo.system.controller.MenuController.tree()
2020-03-04 21:24:46 -Mapped "{[/sys/menu/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.MenuController.edit(org.springframework.ui.Model,java.lang.Long)
2020-03-04 21:24:46 -Mapped "{[/sys/menu],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.MenuController.menu(org.springframework.ui.Model)
2020-03-04 21:24:46 -Mapped "{[/sys/role/add],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.RoleController.add()
2020-03-04 21:24:46 -Mapped "{[/sys/role/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.update(com.bootdo.system.domain.RoleDO)
2020-03-04 21:24:46 -Mapped "{[/sys/role/list],methods=[GET]}" onto java.util.List<com.bootdo.system.domain.RoleDO> com.bootdo.system.controller.RoleController.list()
2020-03-04 21:24:46 -Mapped "{[/sys/role/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.save(java.lang.Long)
2020-03-04 21:24:46 -Mapped "{[/sys/role/save],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.save(com.bootdo.system.domain.RoleDO)
2020-03-04 21:24:46 -Mapped "{[/sys/role/batchRemove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.batchRemove(java.lang.Long[])
2020-03-04 21:24:46 -Mapped "{[/sys/role/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.RoleController.edit(java.lang.Long,org.springframework.ui.Model)
2020-03-04 21:24:46 -Mapped "{[/sys/role],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.RoleController.role()
2020-03-04 21:24:46 -Mapped "{[/sys/online/list]}" onto public java.util.List<com.bootdo.system.domain.UserOnline> com.bootdo.system.controller.SessionController.list()
2020-03-04 21:24:46 -Mapped "{[/sys/online/forceLogout/{sessionId}]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.SessionController.forceLogout(java.lang.String,org.springframework.web.servlet.mvc.support.RedirectAttributes)
2020-03-04 21:24:46 -Mapped "{[/sys/online/sessionList]}" onto public java.util.Collection<org.apache.shiro.session.Session> com.bootdo.system.controller.SessionController.sessionList()
2020-03-04 21:24:46 -Mapped "{[/sys/online],methods=[GET]}" onto public java.lang.String com.bootdo.system.controller.SessionController.online()
2020-03-04 21:24:46 -Mapped "{[/sys/user/exit],methods=[POST]}" onto boolean com.bootdo.system.controller.UserController.exit(java.util.Map<java.lang.String, java.lang.Object>)
2020-03-04 21:24:46 -Mapped "{[/sys/user/add],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.add(org.springframework.ui.Model)
2020-03-04 21:24:46 -Mapped "{[/sys/user/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.remove(java.lang.Long)
2020-03-04 21:24:46 -Mapped "{[/sys/user/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.update(com.bootdo.system.domain.UserDO)
2020-03-04 21:24:46 -Mapped "{[/sys/user/list],methods=[GET]}" onto com.bootdo.common.utils.PageUtils com.bootdo.system.controller.UserController.list(java.util.Map<java.lang.String, java.lang.Object>)
2020-03-04 21:24:46 -Mapped "{[/sys/user/save],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.save(com.bootdo.system.domain.UserDO)
2020-03-04 21:24:46 -Mapped "{[/sys/user/batchRemove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.batchRemove(java.lang.Long[])
2020-03-04 21:24:46 -Mapped "{[/sys/user/tree],methods=[GET]}" onto public com.bootdo.common.domain.Tree<com.bootdo.system.domain.DeptDO> com.bootdo.system.controller.UserController.tree()
2020-03-04 21:24:46 -Mapped "{[/sys/user/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.edit(org.springframework.ui.Model,java.lang.Long)
2020-03-04 21:24:46 -Mapped "{[/sys/user/treeView],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.treeView()
2020-03-04 21:24:46 -Mapped "{[/sys/user/updatePeronal],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.updatePeronal(com.bootdo.system.domain.UserDO)
2020-03-04 21:24:46 -Mapped "{[/sys/user/resetPwd],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.resetPwd(com.bootdo.system.vo.UserVO)
2020-03-04 21:24:46 -Mapped "{[/sys/user/resetPwd/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.resetPwd(java.lang.Long,org.springframework.ui.Model)
2020-03-04 21:24:46 -Mapped "{[/sys/user/uploadImg],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.uploadImg(org.springframework.web.multipart.MultipartFile,java.lang.String,javax.servlet.http.HttpServletRequest)
2020-03-04 21:24:46 -Mapped "{[/sys/user/personal],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.personal(org.springframework.ui.Model)
2020-03-04 21:24:46 -Mapped "{[/sys/user/adminResetPwd],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.adminResetPwd(com.bootdo.system.vo.UserVO)
2020-03-04 21:24:46 -Mapped "{[/sys/user],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.user(org.springframework.ui.Model)
2020-03-04 21:24:46 -Mapped "{[/file/downImport/{importType}],methods=[GET]}" onto public void com.bootdo.temple.controller.TempletController.downImport(javax.servlet.http.HttpServletResponse,java.lang.String)
2020-03-04 21:24:46 -Mapped "{[/water/water/add],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterController.add()
2020-03-04 21:24:46 -Mapped "{[/water/water/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterController.remove(java.lang.Long)
2020-03-04 21:24:46 -Mapped "{[/water/water/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterController.remove(java.lang.Long[])
2020-03-04 21:24:46 -Mapped "{[/water/water/update]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterController.update(com.bootdo.water.domain.WaterDO)
2020-03-04 21:24:46 -Mapped "{[/water/water/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.water.controller.WaterController.list(java.util.Map<java.lang.String, java.lang.Object>)
2020-03-04 21:24:46 -Mapped "{[/water/water/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterController.save(com.bootdo.water.domain.WaterDO)
2020-03-04 21:24:46 -Mapped "{[/water/water/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterController.edit(java.lang.Long,org.springframework.ui.Model)
2020-03-04 21:24:46 -Mapped "{[/water/water/exprotWater],methods=[GET]}" onto public void com.bootdo.water.controller.WaterController.exprotExcel(com.bootdo.water.vo.WaterVo,javax.servlet.http.HttpServletResponse)
2020-03-04 21:24:46 -Mapped "{[/water/water],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterController.Water()
2020-03-04 21:24:46 -Mapped "{[/water/waterInto/exprotWaterIntoExcel],methods=[GET]}" onto public void com.bootdo.water.controller.WaterIntoController.exprotExcel(com.bootdo.water.vo.WaterVo,javax.servlet.http.HttpServletResponse)
2020-03-04 21:24:46 -Mapped "{[/water/waterInto/importWaterIntoExcel],methods=[POST]}" onto public java.lang.String com.bootdo.water.controller.WaterIntoController.importWaterIntoExcel(org.springframework.web.multipart.MultipartFile,com.bootdo.water.vo.WaterVo,javax.servlet.http.HttpServletResponse) throws java.lang.Exception
2020-03-04 21:24:46 -Mapped "{[/water/waterInto],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterIntoController.WaterInto()
2020-03-04 21:24:46 -Mapped "{[/water/waterPrice/add],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterPriceController.add()
2020-03-04 21:24:46 -Mapped "{[/water/waterPrice/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterPriceController.remove(java.lang.Long)
2020-03-04 21:24:46 -Mapped "{[/water/waterPrice/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterPriceController.remove(java.lang.Long[])
2020-03-04 21:24:46 -Mapped "{[/water/waterPrice/update]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterPriceController.update(com.bootdo.water.domain.WaterPriceDO)
2020-03-04 21:24:46 -Mapped "{[/water/waterPrice/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.water.controller.WaterPriceController.list(java.util.Map<java.lang.String, java.lang.Object>)
2020-03-04 21:24:46 -Mapped "{[/water/waterPrice/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterPriceController.save(com.bootdo.water.domain.WaterPriceDO)
2020-03-04 21:24:46 -Mapped "{[/water/waterPrice],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterPriceController.WaterPrice()
2020-03-04 21:24:46 -Mapped "{[/water/waterPrice/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterPriceController.edit(java.lang.Long,org.springframework.ui.Model)
2020-03-04 21:24:46 -Mapped "{[/water/waterUpLoad/exprotWaterExcel],methods=[GET]}" onto public void com.bootdo.water.controller.WaterUpLoadController.exprotWaterExcel(com.bootdo.water.vo.WaterVo,javax.servlet.http.HttpServletResponse)
2020-03-04 21:24:46 -Mapped "{[/water/waterUpLoad],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterUpLoadController.WaterUpLoad()
2020-03-04 21:24:46 -Mapped "{[/water/waterUpLoad/importWaterExcel]}" onto public java.lang.String com.bootdo.water.controller.WaterUpLoadController.importWaterExcel(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)
2020-03-04 21:24:46 -Mapped "{[/water/waterUpLoad/createWaterExcel],methods=[POST]}" onto public java.lang.String com.bootdo.water.controller.WaterUpLoadController.createWaterExcel(com.bootdo.water.domain.WaterDO) throws java.lang.Exception
2020-03-04 21:24:46 -Mapped "{[/v2/api-docs],methods=[GET],produces=[application/json || application/hal+json]}" onto public org.springframework.http.ResponseEntity<springfox.documentation.spring.web.json.Json> springfox.documentation.swagger2.web.Swagger2Controller.getDocumentation(java.lang.String,javax.servlet.http.HttpServletRequest)
2020-03-04 21:24:46 -Mapped "{[/swagger-resources/configuration/security]}" onto org.springframework.http.ResponseEntity<springfox.documentation.swagger.web.SecurityConfiguration> springfox.documentation.swagger.web.ApiResourceController.securityConfiguration()
2020-03-04 21:24:46 -Mapped "{[/swagger-resources/configuration/ui]}" onto org.springframework.http.ResponseEntity<springfox.documentation.swagger.web.UiConfiguration> springfox.documentation.swagger.web.ApiResourceController.uiConfiguration()
2020-03-04 21:24:46 -Mapped "{[/swagger-resources]}" onto org.springframework.http.ResponseEntity<java.util.List<springfox.documentation.swagger.web.SwaggerResource>> springfox.documentation.swagger.web.ApiResourceController.swaggerResources()
2020-03-04 21:24:48 -Initializing ExecutorService  'messageBrokerTaskScheduler'
2020-03-04 21:24:48 -Mapped URL path [/endpointChat/**] onto handler of type [class org.springframework.web.socket.sockjs.support.SockJsHttpRequestHandler]
2020-03-04 21:24:48 -Initializing ExecutorService  'brokerChannelExecutor'
2020-03-04 21:24:50 -Mapped URL path [/**/favicon.ico] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2020-03-04 21:24:50 -Looking for @ControllerAdvice: org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@7fc44dec: startup date [Wed Mar 04 21:23:53 CST 2020]; root of context hierarchy
2020-03-04 21:24:51 -Mapped URL path [/webjars/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2020-03-04 21:24:51 -Mapped URL path [/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2020-03-04 21:24:51 -Detected @ExceptionHandler methods in BDExceptionHandler
2020-03-04 21:24:51 -[THYMELEAF][main] Template Mode 'LEGACYHTML5' is deprecated. Using Template Mode 'HTML' instead.
2020-03-04 21:25:00 -Registering beans for JMX exposure on startup
2020-03-04 21:25:00 -Bean with name 'dataSource' has been autodetected for JMX exposure
2020-03-04 21:25:00 -Located MBean 'dataSource': registering with JMX server as MBean [com.alibaba.druid.pool:name=dataSource,type=DruidDataSource]
2020-03-04 21:25:00 -Starting beans in phase 2147483647
2020-03-04 21:25:00 -Context refreshed
2020-03-04 21:25:00 -Found 1 custom documentation plugin(s)
2020-03-04 21:25:00 -Scanning for api listing references
2020-03-04 21:25:02 -Generating unique operation named: removeUsingPOST_1
2020-03-04 21:25:02 -Generating unique operation named: addUsingGET_1
2020-03-04 21:25:03 -Generating unique operation named: editUsingGET_1
2020-03-04 21:25:03 -Generating unique operation named: listUsingGET_1
2020-03-04 21:25:03 -Generating unique operation named: removeUsingPOST_2
2020-03-04 21:25:03 -Generating unique operation named: removeUsingPOST_3
2020-03-04 21:25:03 -Generating unique operation named: saveUsingPOST_1
2020-03-04 21:25:03 -Generating unique operation named: updateUsingGET_1
2020-03-04 21:25:03 -Generating unique operation named: updateUsingHEAD_1
2020-03-04 21:25:03 -Generating unique operation named: updateUsingPOST_1
2020-03-04 21:25:03 -Generating unique operation named: updateUsingPUT_1
2020-03-04 21:25:03 -Generating unique operation named: updateUsingPATCH_1
2020-03-04 21:25:03 -Generating unique operation named: updateUsingDELETE_1
2020-03-04 21:25:03 -Generating unique operation named: updateUsingOPTIONS_1
2020-03-04 21:25:03 -Generating unique operation named: updateUsingTRACE_1
2020-03-04 21:25:03 -Generating unique operation named: addUsingGET_2
2020-03-04 21:25:03 -Generating unique operation named: editUsingGET_2
2020-03-04 21:25:03 -Generating unique operation named: listUsingGET_2
2020-03-04 21:25:03 -Generating unique operation named: removeUsingPOST_4
2020-03-04 21:25:03 -Generating unique operation named: removeUsingPOST_5
2020-03-04 21:25:03 -Generating unique operation named: saveUsingPOST_2
2020-03-04 21:25:03 -Generating unique operation named: updateUsingPOST_2
2020-03-04 21:25:03 -Generating unique operation named: exprotExcelUsingGET_1
2020-03-04 21:25:03 -Generating unique operation named: addUsingGET_3
2020-03-04 21:25:03 -Generating unique operation named: editUsingGET_3
2020-03-04 21:25:03 -Generating unique operation named: listUsingGET_3
2020-03-04 21:25:03 -Generating unique operation named: removeUsingPOST_6
2020-03-04 21:25:03 -Generating unique operation named: removeUsingPOST_7
2020-03-04 21:25:03 -Generating unique operation named: saveUsingPOST_3
2020-03-04 21:25:03 -Generating unique operation named: updateUsingGET_2
2020-03-04 21:25:03 -Generating unique operation named: updateUsingHEAD_2
2020-03-04 21:25:03 -Generating unique operation named: updateUsingPOST_3
2020-03-04 21:25:04 -Generating unique operation named: updateUsingPUT_2
2020-03-04 21:25:04 -Generating unique operation named: updateUsingPATCH_2
2020-03-04 21:25:04 -Generating unique operation named: updateUsingDELETE_2
2020-03-04 21:25:04 -Generating unique operation named: updateUsingOPTIONS_2
2020-03-04 21:25:04 -Generating unique operation named: updateUsingTRACE_2
2020-03-04 21:25:04 -Generating unique operation named: addUsingGET_4
2020-03-04 21:25:04 -Generating unique operation named: editUsingGET_4
2020-03-04 21:25:04 -Generating unique operation named: listUsingGET_4
2020-03-04 21:25:04 -Generating unique operation named: removeUsingPOST_8
2020-03-04 21:25:04 -Generating unique operation named: removeUsingPOST_9
2020-03-04 21:25:04 -Generating unique operation named: saveUsingPOST_4
2020-03-04 21:25:04 -Generating unique operation named: updateUsingGET_3
2020-03-04 21:25:04 -Generating unique operation named: updateUsingHEAD_3
2020-03-04 21:25:04 -Generating unique operation named: updateUsingPOST_4
2020-03-04 21:25:04 -Generating unique operation named: updateUsingPUT_3
2020-03-04 21:25:04 -Generating unique operation named: updateUsingPATCH_3
2020-03-04 21:25:04 -Generating unique operation named: updateUsingDELETE_3
2020-03-04 21:25:04 -Generating unique operation named: updateUsingOPTIONS_3
2020-03-04 21:25:04 -Generating unique operation named: updateUsingTRACE_3
2020-03-04 21:25:04 -Generating unique operation named: ElecUsingGET_1
2020-03-04 21:25:04 -Generating unique operation named: addUsingGET_5
2020-03-04 21:25:04 -Generating unique operation named: editUsingGET_5
2020-03-04 21:25:04 -Generating unique operation named: listUsingGET_5
2020-03-04 21:25:04 -Generating unique operation named: removeUsingPOST_10
2020-03-04 21:25:04 -Generating unique operation named: removeUsingPOST_11
2020-03-04 21:25:04 -Generating unique operation named: saveUsingPOST_5
2020-03-04 21:25:04 -Generating unique operation named: updateUsingGET_4
2020-03-04 21:25:04 -Generating unique operation named: updateUsingHEAD_4
2020-03-04 21:25:04 -Generating unique operation named: updateUsingPOST_5
2020-03-04 21:25:04 -Generating unique operation named: updateUsingPUT_4
2020-03-04 21:25:04 -Generating unique operation named: updateUsingPATCH_4
2020-03-04 21:25:04 -Generating unique operation named: updateUsingDELETE_4
2020-03-04 21:25:04 -Generating unique operation named: updateUsingOPTIONS_4
2020-03-04 21:25:04 -Generating unique operation named: updateUsingTRACE_4
2020-03-04 21:25:04 -Generating unique operation named: editUsingGET_6
2020-03-04 21:25:05 -Generating unique operation named: listUsingGET_6
2020-03-04 21:25:05 -Generating unique operation named: updateUsingPOST_6
2020-03-04 21:25:05 -Generating unique operation named: addUsingGET_6
2020-03-04 21:25:05 -Generating unique operation named: editUsingGET_7
2020-03-04 21:25:05 -Generating unique operation named: exprotExcelUsingGET_2
2020-03-04 21:25:05 -Generating unique operation named: listUsingGET_7
2020-03-04 21:25:05 -Generating unique operation named: removeUsingPOST_12
2020-03-04 21:25:05 -Generating unique operation named: removeUsingPOST_13
2020-03-04 21:25:05 -Generating unique operation named: saveUsingPOST_6
2020-03-04 21:25:05 -Generating unique operation named: updateUsingGET_5
2020-03-04 21:25:05 -Generating unique operation named: updateUsingHEAD_5
2020-03-04 21:25:05 -Generating unique operation named: updateUsingPOST_7
2020-03-04 21:25:05 -Generating unique operation named: updateUsingPUT_5
2020-03-04 21:25:05 -Generating unique operation named: updateUsingPATCH_5
2020-03-04 21:25:05 -Generating unique operation named: updateUsingDELETE_5
2020-03-04 21:25:05 -Generating unique operation named: updateUsingOPTIONS_5
2020-03-04 21:25:05 -Generating unique operation named: updateUsingTRACE_5
2020-03-04 21:25:05 -Generating unique operation named: exprotExcelUsingGET_3
2020-03-04 21:25:05 -Generating unique operation named: addUsingGET_7
2020-03-04 21:25:05 -Generating unique operation named: editUsingGET_8
2020-03-04 21:25:05 -Generating unique operation named: listUsingGET_8
2020-03-04 21:25:05 -Generating unique operation named: removeUsingPOST_14
2020-03-04 21:25:05 -Generating unique operation named: removeUsingPOST_15
2020-03-04 21:25:05 -Generating unique operation named: saveUsingPOST_7
2020-03-04 21:25:05 -Generating unique operation named: updateUsingGET_6
2020-03-04 21:25:05 -Generating unique operation named: updateUsingHEAD_6
2020-03-04 21:25:05 -Generating unique operation named: updateUsingPOST_8
2020-03-04 21:25:05 -Generating unique operation named: updateUsingPUT_6
2020-03-04 21:25:05 -Generating unique operation named: updateUsingPATCH_6
2020-03-04 21:25:05 -Generating unique operation named: updateUsingDELETE_6
2020-03-04 21:25:05 -Generating unique operation named: updateUsingOPTIONS_6
2020-03-04 21:25:05 -Generating unique operation named: updateUsingTRACE_6
2020-03-04 21:25:05 -Generating unique operation named: addUsingGET_8
2020-03-04 21:25:05 -Generating unique operation named: editUsingGET_9
2020-03-04 21:25:05 -Generating unique operation named: listUsingGET_9
2020-03-04 21:25:05 -Generating unique operation named: removeUsingPOST_16
2020-03-04 21:25:05 -Generating unique operation named: removeUsingPOST_17
2020-03-04 21:25:05 -Generating unique operation named: saveUsingPOST_8
2020-03-04 21:25:05 -Generating unique operation named: updateUsingGET_7
2020-03-04 21:25:05 -Generating unique operation named: updateUsingHEAD_7
2020-03-04 21:25:05 -Generating unique operation named: updateUsingPOST_9
2020-03-04 21:25:05 -Generating unique operation named: updateUsingPUT_7
2020-03-04 21:25:05 -Generating unique operation named: updateUsingPATCH_7
2020-03-04 21:25:05 -Generating unique operation named: updateUsingDELETE_7
2020-03-04 21:25:05 -Generating unique operation named: updateUsingOPTIONS_7
2020-03-04 21:25:05 -Generating unique operation named: updateUsingTRACE_7
2020-03-04 21:25:05 -Generating unique operation named: addUsingGET_9
2020-03-04 21:25:05 -Generating unique operation named: editUsingGET_10
2020-03-04 21:25:05 -Generating unique operation named: infoUsingGET_1
2020-03-04 21:25:05 -Generating unique operation named: infoUsingHEAD_1
2020-03-04 21:25:05 -Generating unique operation named: infoUsingPOST_1
2020-03-04 21:25:05 -Generating unique operation named: infoUsingPUT_1
2020-03-04 21:25:05 -Generating unique operation named: infoUsingPATCH_1
2020-03-04 21:25:05 -Generating unique operation named: infoUsingDELETE_1
2020-03-04 21:25:05 -Generating unique operation named: infoUsingOPTIONS_1
2020-03-04 21:25:05 -Generating unique operation named: infoUsingTRACE_1
2020-03-04 21:25:05 -Generating unique operation named: listUsingGET_10
2020-03-04 21:25:05 -Generating unique operation named: removeUsingPOST_18
2020-03-04 21:25:06 -Generating unique operation named: removeUsingPOST_19
2020-03-04 21:25:06 -Generating unique operation named: saveUsingPOST_9
2020-03-04 21:25:06 -Generating unique operation named: updateUsingPOST_10
2020-03-04 21:25:06 -Generating unique operation named: listUsingGET_11
2020-03-04 21:25:06 -Generating unique operation named: removeUsingPOST_20
2020-03-04 21:25:06 -Generating unique operation named: welcomeUsingGET_1
2020-03-04 21:25:06 -Generating unique operation named: addUsingGET_10
2020-03-04 21:25:06 -Generating unique operation named: editUsingGET_11
2020-03-04 21:25:06 -Generating unique operation named: listUsingGET_12
2020-03-04 21:25:06 -Generating unique operation named: removeUsingPOST_21
2020-03-04 21:25:06 -Generating unique operation named: saveUsingPOST_10
2020-03-04 21:25:06 -Generating unique operation named: treeUsingGET_1
2020-03-04 21:25:06 -Generating unique operation named: treeUsingGET_2
2020-03-04 21:25:06 -Generating unique operation named: updateUsingPOST_11
2020-03-04 21:25:06 -Generating unique operation named: addUsingGET_11
2020-03-04 21:25:06 -Generating unique operation named: editUsingGET_12
2020-03-04 21:25:06 -Generating unique operation named: listUsingGET_13
2020-03-04 21:25:06 -Generating unique operation named: removeUsingPOST_22
2020-03-04 21:25:06 -Generating unique operation named: removeUsingPOST_23
2020-03-04 21:25:06 -Generating unique operation named: updateUsingPOST_12
2020-03-04 21:25:06 -Generating unique operation named: addUsingGET_12
2020-03-04 21:25:06 -Generating unique operation named: editUsingGET_13
2020-03-04 21:25:06 -Generating unique operation named: listUsingGET_14
2020-03-04 21:25:06 -Generating unique operation named: removeUsingPOST_24
2020-03-04 21:25:06 -Generating unique operation named: removeUsingPOST_25
2020-03-04 21:25:06 -Generating unique operation named: saveUsingPOST_11
2020-03-04 21:25:06 -Generating unique operation named: updateUsingGET_8
2020-03-04 21:25:06 -Generating unique operation named: updateUsingHEAD_8
2020-03-04 21:25:06 -Generating unique operation named: updateUsingPOST_13
2020-03-04 21:25:06 -Generating unique operation named: updateUsingPUT_8
2020-03-04 21:25:06 -Generating unique operation named: updateUsingPATCH_8
2020-03-04 21:25:06 -Generating unique operation named: updateUsingDELETE_8
2020-03-04 21:25:06 -Generating unique operation named: updateUsingOPTIONS_8
2020-03-04 21:25:06 -Generating unique operation named: updateUsingTRACE_8
2020-03-04 21:25:06 -Generating unique operation named: addUsingGET_13
2020-03-04 21:25:07 -Generating unique operation named: batchRemoveUsingPOST_1
2020-03-04 21:25:07 -Generating unique operation named: editUsingGET_14
2020-03-04 21:25:07 -Generating unique operation named: listUsingGET_15
2020-03-04 21:25:07 -Generating unique operation named: printEditUsingGET_1
2020-03-04 21:25:07 -Generating unique operation named: removeUsingPOST_26
2020-03-04 21:25:07 -Generating unique operation named: saveUsingPOST_12
2020-03-04 21:25:07 -Generating unique operation named: updateUsingGET_9
2020-03-04 21:25:07 -Generating unique operation named: updateUsingHEAD_9
2020-03-04 21:25:07 -Generating unique operation named: updateUsingPOST_14
2020-03-04 21:25:07 -Generating unique operation named: updateUsingPUT_9
2020-03-04 21:25:07 -Generating unique operation named: updateUsingPATCH_9
2020-03-04 21:25:07 -Generating unique operation named: updateUsingDELETE_9
2020-03-04 21:25:07 -Generating unique operation named: updateUsingOPTIONS_9
2020-03-04 21:25:07 -Generating unique operation named: updateUsingTRACE_9
2020-03-04 21:25:07 -Generating unique operation named: addUsingGET_14
2020-03-04 21:25:07 -Generating unique operation named: batchRemoveUsingPOST_2
2020-03-04 21:25:07 -Generating unique operation named: editUsingGET_15
2020-03-04 21:25:07 -Generating unique operation named: listUsingGET_16
2020-03-04 21:25:07 -Generating unique operation named: saveUsingPOST_13
2020-03-04 21:25:07 -Generating unique operation named: saveUsingPOST_14
2020-03-04 21:25:07 -Generating unique operation named: updateUsingPOST_15
2020-03-04 21:25:07 -Generating unique operation named: listUsingGET_17
2020-03-04 21:25:07 -Generating unique operation named: listUsingHEAD_1
2020-03-04 21:25:07 -Generating unique operation named: listUsingPOST_1
2020-03-04 21:25:07 -Generating unique operation named: listUsingPUT_1
2020-03-04 21:25:07 -Generating unique operation named: listUsingPATCH_1
2020-03-04 21:25:07 -Generating unique operation named: listUsingDELETE_1
2020-03-04 21:25:07 -Generating unique operation named: listUsingOPTIONS_1
2020-03-04 21:25:07 -Generating unique operation named: listUsingTRACE_1
2020-03-04 21:25:07 -Generating unique operation named: countDDUsingGET_1
2020-03-04 21:25:07 -Generating unique operation named: exportDDUsingGET_1
2020-03-04 21:25:07 -Generating unique operation named: exportElecYYUsingGET_1
2020-03-04 21:25:07 -Generating unique operation named: addUsingGET_15
2020-03-04 21:25:07 -Generating unique operation named: batchRemoveUsingPOST_3
2020-03-04 21:25:07 -Generating unique operation named: editUsingGET_16
2020-03-04 21:25:07 -Generating unique operation named: listUsingGET_18
2020-03-04 21:25:07 -Generating unique operation named: removeUsingPOST_27
2020-03-04 21:25:07 -Generating unique operation named: saveUsingPOST_15
2020-03-04 21:25:08 -Generating unique operation named: treeUsingGET_3
2020-03-04 21:25:08 -Generating unique operation named: treeViewUsingGET_1
2020-03-04 21:25:08 -Generating unique operation named: updateUsingPOST_16
2020-03-04 21:25:08 -Generating unique operation named: addUsingGET_16
2020-03-04 21:25:08 -Generating unique operation named: editUsingGET_17
2020-03-04 21:25:08 -Generating unique operation named: exprotExcelUsingGET_4
2020-03-04 21:25:08 -Generating unique operation named: listUsingGET_19
2020-03-04 21:25:08 -Generating unique operation named: removeUsingPOST_28
2020-03-04 21:25:08 -Generating unique operation named: removeUsingPOST_29
2020-03-04 21:25:08 -Generating unique operation named: saveUsingPOST_16
2020-03-04 21:25:08 -Generating unique operation named: updateUsingGET_10
2020-03-04 21:25:08 -Generating unique operation named: updateUsingHEAD_10
2020-03-04 21:25:08 -Generating unique operation named: updateUsingPOST_17
2020-03-04 21:25:08 -Generating unique operation named: updateUsingPUT_10
2020-03-04 21:25:08 -Generating unique operation named: updateUsingPATCH_10
2020-03-04 21:25:08 -Generating unique operation named: updateUsingDELETE_10
2020-03-04 21:25:08 -Generating unique operation named: updateUsingOPTIONS_10
2020-03-04 21:25:08 -Generating unique operation named: updateUsingTRACE_10
2020-03-04 21:25:08 -Generating unique operation named: exprotExcelUsingGET_5
2020-03-04 21:25:08 -Generating unique operation named: addUsingGET_17
2020-03-04 21:25:08 -Generating unique operation named: editUsingGET_18
2020-03-04 21:25:08 -Generating unique operation named: listUsingGET_20
2020-03-04 21:25:08 -Generating unique operation named: removeUsingPOST_30
2020-03-04 21:25:08 -Generating unique operation named: removeUsingPOST_31
2020-03-04 21:25:08 -Generating unique operation named: saveUsingPOST_17
2020-03-04 21:25:08 -Generating unique operation named: updateUsingGET_11
2020-03-04 21:25:08 -Generating unique operation named: updateUsingHEAD_11
2020-03-04 21:25:08 -Generating unique operation named: updateUsingPOST_18
2020-03-04 21:25:08 -Generating unique operation named: updateUsingPUT_11
2020-03-04 21:25:08 -Generating unique operation named: updateUsingPATCH_11
2020-03-04 21:25:08 -Generating unique operation named: updateUsingDELETE_11
2020-03-04 21:25:08 -Generating unique operation named: updateUsingOPTIONS_11
2020-03-04 21:25:08 -Generating unique operation named: updateUsingTRACE_11
2020-03-04 21:25:08 -Generating unique operation named: addUsingGET_18
2020-03-04 21:25:08 -Generating unique operation named: editUsingGET_19
2020-03-04 21:25:08 -Generating unique operation named: listUsingGET_21
2020-03-04 21:25:08 -Generating unique operation named: removeUsingPOST_32
2020-03-04 21:25:08 -Generating unique operation named: removeUsingPOST_33
2020-03-04 21:25:08 -Generating unique operation named: saveUsingPOST_18
2020-03-04 21:25:08 -Generating unique operation named: updateUsingGET_12
2020-03-04 21:25:08 -Generating unique operation named: updateUsingHEAD_12
2020-03-04 21:25:08 -Generating unique operation named: updateUsingPOST_19
2020-03-04 21:25:08 -Generating unique operation named: updateUsingPUT_12
2020-03-04 21:25:08 -Generating unique operation named: updateUsingPATCH_12
2020-03-04 21:25:08 -Generating unique operation named: updateUsingDELETE_12
2020-03-04 21:25:08 -Generating unique operation named: updateUsingOPTIONS_12
2020-03-04 21:25:08 -Generating unique operation named: updateUsingTRACE_12
2020-03-04 21:25:08 -Starting Quartz Scheduler now
2020-03-04 21:25:08 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED started.
2020-03-04 21:25:08 -Starting...
2020-03-04 21:25:08 -BrokerAvailabilityEvent[available=true, SimpleBrokerMessageHandler [DefaultSubscriptionRegistry[cache[0 destination(s)], registry[0 sessions]]]]
2020-03-04 21:25:08 -Started.
2020-03-04 21:25:08 -Starting ProtocolHandler ["http-nio-8081"]
2020-03-04 21:25:09 -Using a shared selector for servlet write/read
2020-03-04 21:25:09 -Tomcat started on port(s): 8081 (http) with context path ''
2020-03-04 21:25:09 -Started BootdoApplication in 81.304 seconds (JVM running for 83.704)
2020-03-04 21:25:09 -==>  Preparing: select `id`,`cron_expression`,`method_name`,`is_concurrent`,`description`,`update_by`,`bean_class`,`create_date`,`job_status`,`job_group`,`update_date`,`create_by`,`spring_bean`,`job_name` from sys_task order by id desc 
2020-03-04 21:25:10 -==> Parameters: 
2020-03-04 21:25:10 -<==      Total: 1
2020-03-04 21:25:43 -A cookie header was received [1581922663,1582108428,1583149660; JSESSIONID=3118d66b-78cd-42ed-95aa-be3674cd79e2] that contained an invalid cookie. That cookie will be ignored.Note: further occurrences of this error will be logged at DEBUG level.
2020-03-04 21:25:43 -Initializing Spring FrameworkServlet 'dispatcherServlet'
2020-03-04 21:25:43 -FrameworkServlet 'dispatcherServlet': initialization started
2020-03-04 21:25:43 -FrameworkServlet 'dispatcherServlet': initialization completed in 121 ms
2020-03-04 21:25:44 -Enabling session validation scheduler...
2020-03-04 21:25:44 -请求地址 : http://localhost:8081/login;JSESSIONID=c7e0f883-3141-4098-8f0f-59adf94ce4d9
2020-03-04 21:25:44 -HTTP METHOD : GET
2020-03-04 21:25:44 -CLASS_METHOD : com.bootdo.system.controller.LoginController.login
2020-03-04 21:25:44 -参数 : [{}]
2020-03-04 21:25:44 -耗时 : 7
2020-03-04 21:25:44 -返回值 : login
2020-03-04 21:25:48 -WebSocketSession[0 current WS(0)-HttpStream(0)-HttpPoll(0), 0 total, 0 closed abnormally (0 connect failure, 0 send limit, 0 transport error)], stompSubProtocol[processed CONNECT(0)-CONNECTED(0)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], outboundChannelpool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], sockJsScheduler[pool size = 1, active threads = 1, queued tasks = 0, completed tasks = 0]
2020-03-04 21:25:49 -请求地址 : http://localhost:8081/getVerify
2020-03-04 21:25:49 -HTTP METHOD : GET
2020-03-04 21:25:49 -CLASS_METHOD : com.bootdo.system.controller.LoginController.getVerify
2020-03-04 21:25:49 -参数 : [org.apache.shiro.web.servlet.ShiroHttpServletRequest@9316f66, org.apache.shiro.web.servlet.ShiroHttpServletResponse@21f8e075]
2020-03-04 21:26:16 -5032
2020-03-04 21:26:17 -耗时 : 27979
2020-03-04 21:26:17 -返回值 : null
2020-03-04 21:26:17 -请求地址 : http://localhost:8081/login
2020-03-04 21:26:17 -HTTP METHOD : GET
2020-03-04 21:26:17 -CLASS_METHOD : com.bootdo.system.controller.LoginController.login
2020-03-04 21:26:17 -参数 : [{}]
2020-03-04 21:26:17 -耗时 : 1
2020-03-04 21:26:17 -返回值 : login
2020-03-04 21:26:21 -请求地址 : http://localhost:8081/login
2020-03-04 21:26:21 -HTTP METHOD : POST
2020-03-04 21:26:21 -CLASS_METHOD : com.bootdo.system.controller.LoginController.ajaxLogin
2020-03-04 21:26:21 -参数 : [admin, 111111, 5032, org.apache.shiro.web.servlet.ShiroHttpServletRequest@3a909659]
2020-03-04 21:26:21 -==>  Preparing: select `user_id`,`username`,`name`,`password`,`dept_id`,`email`,`mobile`,`status`,`user_id_create`,`gmt_create`,`gmt_modified`,`sex`,`birth`,`pic_id`,`live_address`,`hobby`,`province`,`city`,`district` from sys_user WHERE username = ? order by user_id desc 
2020-03-04 21:26:21 -==> Parameters: admin(String)
2020-03-04 21:26:22 -<==      Total: 1
2020-03-04 21:26:22 -耗时 : 675
2020-03-04 21:26:22 -返回值 : {msg=操作成功, code=0}
2020-03-04 21:26:22 -More than one TaskExecutor bean found within the context, and none is named 'taskExecutor'. Mark one of them as primary or name it 'taskExecutor' (possibly as an alias) in order to use it for async processing: [clientInboundChannelExecutor, clientOutboundChannelExecutor, brokerChannelExecutor, messageBrokerTaskScheduler]
2020-03-04 21:26:22 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-03-04 21:26:22 -==> Parameters: 1(Long), admin(String), 登录(String), 675(Integer), com.bootdo.system.controller.LoginController.ajaxLogin()(String), null, 127.0.0.1(String), 2020-03-04 21:26:22.533(Timestamp)
2020-03-04 21:26:22 -请求地址 : http://localhost:8081/index
2020-03-04 21:26:22 -HTTP METHOD : GET
2020-03-04 21:26:22 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2020-03-04 21:26:22 -参数 : [{}]
2020-03-04 21:26:23 -<==    Updates: 1
2020-03-04 21:26:23 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2020-03-04 21:26:23 -==> Parameters: 1(Long)
2020-03-04 21:26:23 -<==      Total: 50
2020-03-04 21:26:23 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2020-03-04 21:26:23 -==> Parameters: 138(Long)
2020-03-04 21:26:23 -<==      Total: 1
2020-03-04 21:26:23 -耗时 : 1046
2020-03-04 21:26:23 -返回值 : index_v1
2020-03-04 21:26:24 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-03-04 21:26:24 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 1046(Integer), com.bootdo.system.controller.LoginController.index()(String), {"menus":[{"attributes":{"icon":"fa fa-money","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-money","url":"/moneyList/moneyList"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"102","parentId":"106","text":"现金缴费"},{"attributes":{"icon":"fa fa-book","url":"/moneyLog/elecLog"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"107","parentId":"106","text":"缴费记录"},{"attributes":{"icon":"fa fa-image","url":"/moneyList/moneyWZ"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"164","parentId":"106","text":"乌镇管理"}],"hasChildren":true,"hasParent":false,"id":"106","parentId":"0","text":"收费管理"},{"attributes":{"icon":"fa fa-lightbulb-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/elec/elec"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"121","parentId":"103","text":"电费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"elec/elecInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"122","parentId":"103","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"elec/elecUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"123","parentId":"103","text":"电表上传"},{"attributes":{"icon":"fa fa-cc","url":"/elec/elecPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"124","parentId":"103","text":"电价管理"}],"hasChildren":true,"hasParent":false,"id":"103","parentId":"0","text":"电费管理"},{"attributes":{"icon":"fa fa-tint","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/water/water"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"117","parentId":"105","text":"水费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"water/waterInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"118","parentId":"105","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"water/waterUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"119","parentId":"105","text":"水费生成"},{"attributes":{"icon":"fa fa-cc","url":"/water/waterPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"120","parentId":"105","text":"水价管理"}],"hasChildren":true,"hasParent":false,"id":"105","parentId":"0","text":"水费管理"},{"attributes":{"icon":"fa fa-fire","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/heat/heat"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"113","parentId":"104","text":"暖费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"heat/heatInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"114","parentId":"104","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"heat/heatUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"115","parentId":"104","text":"暖费生成"},{"attributes":{"icon":"","url":"/heat/heatPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"116","parentId":"104","text":"暖价管理"}],"hasChildren":true,"hasParent":false,"id":"104","parentId":"0","text":"暖费管理"},{"attributes":{"icon":"fa fa-vcard-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-bomb","url":"/print/print"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"149","parentId":"108","text":"票据记录"}],"hasChildren":true,"hasParent":false,"id":"108","parentId":"0","text":"票据管理"},{"attributes":{"icon":"fa fa-bar-chart","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-area-chart","url":"/chart/graph_echarts.html"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","text":"百度chart"},{"attributes":{"icon":"fa fa-sun-o","url":"charts/countDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"109","parentId":"97","text":"日统计报表"},{"attributes":{"icon":"fa fa-calendar","url":"charts/tableDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"161","parentId":"97","text":"日统计表格"},{"attributes":{"icon":"fa fa-registered","url":"charts/countMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"110","parentId":"97","text":"月统计报表"},{"attributes":{"icon":"fa fa-building-o","url":"charts/tableElecMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"162","parentId":"97","text":"月统计表格"},{"attributes":{"icon":"fa fa-support","url":"charts/countYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"111","parentId":"97","text":"年统计报表"},{"attributes":{"icon":"fa fa-book","url":"charts/tableElecYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"163","parentId":"97","text":"年统计表格"},{"attributes":{"icon":"fa fa-money","url":"charts/countOwe"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"155","(String), 127.0.0.1(String), 2020-03-04 21:26:24.236(Timestamp)
2020-03-04 21:26:24 -<==    Updates: 1
2020-03-04 21:26:25 -请求地址 : http://localhost:8081/main
2020-03-04 21:26:25 -HTTP METHOD : GET
2020-03-04 21:26:25 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2020-03-04 21:26:25 -参数 : []
2020-03-04 21:26:25 -耗时 : 2
2020-03-04 21:26:25 -返回值 : main
2020-03-04 21:26:25 -请求地址 : http://localhost:8081/oa/notify/message
2020-03-04 21:26:25 -HTTP METHOD : GET
2020-03-04 21:26:25 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2020-03-04 21:26:25 -参数 : []
2020-03-04 21:26:25 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2020-03-04 21:26:25 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2020-03-04 21:26:25 -请求地址 : http://localhost:8081/main
2020-03-04 21:26:25 -HTTP METHOD : GET
2020-03-04 21:26:25 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2020-03-04 21:26:25 -参数 : []
2020-03-04 21:26:25 -耗时 : 0
2020-03-04 21:26:25 -返回值 : main
2020-03-04 21:26:26 -<==      Total: 0
2020-03-04 21:26:26 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2020-03-04 21:26:26 -==> Parameters: 1(Long), 0(String)
2020-03-04 21:26:26 -<==      Total: 1
2020-03-04 21:26:26 -耗时 : 531
2020-03-04 21:26:26 -返回值 : com.bootdo.common.utils.PageUtils@3f4bbb7b
2020-03-04 21:26:35 -==>  Preparing: select distinct m.perms from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id = ur.role_id where ur.user_id = ? 
2020-03-04 21:26:35 -==> Parameters: 1(Long)
2020-03-04 21:26:35 -<==      Total: 94
2020-03-04 21:26:35 -请求地址 : http://localhost:8081/elec/elec
2020-03-04 21:26:35 -HTTP METHOD : GET
2020-03-04 21:26:35 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.Elec
2020-03-04 21:26:35 -参数 : []
2020-03-04 21:26:35 -耗时 : 0
2020-03-04 21:26:35 -返回值 : elec/elec/elec
2020-03-04 21:26:38 -请求地址 : http://localhost:8081/common/dict/list/userType
2020-03-04 21:26:38 -HTTP METHOD : GET
2020-03-04 21:26:38 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2020-03-04 21:26:38 -参数 : [userType]
2020-03-04 21:26:38 -请求地址 : http://localhost:8081/common/dict/list/elecType
2020-03-04 21:26:38 -HTTP METHOD : GET
2020-03-04 21:26:38 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2020-03-04 21:26:38 -参数 : [elecType]
2020-03-04 21:26:38 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2020-03-04 21:26:38 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2020-03-04 21:26:38 -==> Parameters: elecType(String)
2020-03-04 21:26:38 -==> Parameters: userType(String)
2020-03-04 21:26:38 -请求地址 : http://localhost:8081/elec/elec/list
2020-03-04 21:26:38 -HTTP METHOD : GET
2020-03-04 21:26:38 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.list
2020-03-04 21:26:38 -参数 : [{limit=10, offset=0, userType=, elecType=, userOrg=, userId=, createTime=, queryType=1}, com.bootdo.elec.domain.ElecDO@184d60cd]
2020-03-04 21:26:38 -<==      Total: 11
2020-03-04 21:26:38 -耗时 : 234
2020-03-04 21:26:38 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, `user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec order by id asc limit ?, ? 
2020-03-04 21:26:38 -返回值 : [DictDO{id=180, name='矿民用', value='1', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=179, name='矿商业', value='2', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=178, name='矿工业1', value='3', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=177, name='矿工业2', value='4', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=176, name='矿工业3', value='5', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=175, name='乌民用', value='6', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=174, name='乌商用', value='7', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=173, name='乌工业', value='8', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=172, name='煤民用', value='9', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=171, name='煤商业', value='10', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=170, name='政府用电', value='11', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2020-03-04 21:26:38 -==> Parameters: 0(Integer), 10(Integer)
2020-03-04 21:26:38 -<==      Total: 4
2020-03-04 21:26:38 -耗时 : 337
2020-03-04 21:26:38 -返回值 : [DictDO{id=145, name='银行转账', value='D', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=144, name='微信支付', value='C', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2020-03-04 21:26:38 -<==      Total: 10
2020-03-04 21:26:38 -==>  Preparing: select count(*) from elec 
2020-03-04 21:26:38 -==> Parameters: 
2020-03-04 21:26:39 -<==      Total: 1
2020-03-04 21:26:39 -耗时 : 1217
2020-03-04 21:26:39 -返回值 : com.bootdo.common.utils.PageUtils@65fa2605
2020-03-04 21:26:50 -请求地址 : http://localhost:8081/elec/elec/list
2020-03-04 21:26:50 -HTTP METHOD : GET
2020-03-04 21:26:50 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.list
2020-03-04 21:26:50 -参数 : [{limit=10, offset=0, userType=B, elecType=, userOrg=, userId=, createTime=2019-12, queryType=1, type=B}, com.bootdo.elec.domain.ElecDO@6e19c0b8]
2020-03-04 21:26:50 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, `user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec WHERE `create_time` = ? and user_type = ? order by id asc limit ?, ? 
2020-03-04 21:26:50 -==> Parameters: 2019-12(String), B(String), 0(Integer), 10(Integer)
2020-03-04 21:26:50 -<==      Total: 10
2020-03-04 21:26:50 -==>  Preparing: select count(*) from elec WHERE `create_time` = ? and user_type = ? 
2020-03-04 21:26:50 -==> Parameters: 2019-12(String), B(String)
2020-03-04 21:26:50 -<==      Total: 1
2020-03-04 21:26:50 -耗时 : 186
2020-03-04 21:26:50 -返回值 : com.bootdo.common.utils.PageUtils@31bbec53
2020-03-04 21:27:09 -请求地址 : http://localhost:8081/elec/elecInto
2020-03-04 21:27:09 -HTTP METHOD : GET
2020-03-04 21:27:09 -CLASS_METHOD : com.bootdo.elec.controller.ElecIntoController.ElecInto
2020-03-04 21:27:09 -参数 : []
2020-03-04 21:27:09 -耗时 : 0
2020-03-04 21:27:09 -返回值 : elec/elecInto/elecInto
2020-03-04 21:27:21 -请求地址 : http://localhost:8081/system/sysDept/treeView
2020-03-04 21:27:21 -HTTP METHOD : GET
2020-03-04 21:27:21 -CLASS_METHOD : com.bootdo.system.controller.DeptController.treeView
2020-03-04 21:27:21 -参数 : [ModelAndView: materialized View is [null]; model is null]
2020-03-04 21:27:21 -耗时 : 0
2020-03-04 21:27:21 -返回值 : system/dept/deptTree
2020-03-04 21:27:21 -请求地址 : http://localhost:8081/system/sysDept/tree
2020-03-04 21:27:21 -HTTP METHOD : GET
2020-03-04 21:27:21 -CLASS_METHOD : com.bootdo.system.controller.DeptController.tree
2020-03-04 21:27:21 -参数 : []
2020-03-04 21:27:21 -==>  Preparing: select `dept_id`,`parent_id`,`name`,`order_num`,`del_flag` from sys_dept order by dept_id desc 
2020-03-04 21:27:21 -==> Parameters: 
2020-03-04 21:27:21 -<==      Total: 3
2020-03-04 21:27:21 -耗时 : 32
2020-03-04 21:27:21 -返回值 : {"checked":false,"children":[{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"3","parentId":"1","state":{"opened":true},"text":"牙星"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"2","parentId":"1","state":{"opened":true},"text":"五九"}],"hasChildren":true,"hasParent":false,"id":"1","parentId":"0","state":{"opened":true},"text":"总公司"}
2020-03-04 21:27:37 -请求地址 : http://localhost:8081/elec/elecInto/importElecIntoExcel
2020-03-04 21:27:37 -HTTP METHOD : POST
2020-03-04 21:27:37 -CLASS_METHOD : com.bootdo.elec.controller.ElecIntoController.importElecIntoExcel
2020-03-04 21:27:37 -参数 : [org.springframework.web.multipart.support.StandardMultipartHttpServletRequest$StandardMultipartFile@6202bacc, com.bootdo.elec.vo.ElecVo@63926e3c, org.apache.shiro.web.servlet.ShiroHttpServletResponse@2705825d]
2020-03-04 21:27:43 -==>  Preparing: UPDATE ELEC SET ELEC_SUM = ELEC_SUM + ? WHERE CREATE_TIME = ? and user_org = ? and USER_ID = ? and USER_NAME = ? and `user_type` = 'B' 
2020-03-04 21:27:43 -==> Parameters: 100(BigDecimal), 2019-12(String), 2(String), 1-0005(String), 李生(String)
2020-03-04 21:27:43 -<==    Updates: 1
2020-03-04 21:27:43 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, `user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec WHERE CREATE_TIME = ? and user_org = ? and USER_ID = ? and USER_NAME = ? and `user_type` = 'B' 
2020-03-04 21:27:43 -==> Parameters: 2019-12(String), 2(String), 1-0005(String), 李生(String)
2020-03-04 21:27:43 -<==      Total: 1
2020-03-04 21:27:43 -==>  Preparing: insert into elec_log ( `user_id`, `user_name`, `user_type`, `user_org`, `elec_type`, `elec_money`, `money_date`, `create_time`, `create_by`, `update_time`, `update_by`, `remark` ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-03-04 21:27:43 -==> Parameters: 1-0005(String), 李生(String), B(String), 2(String), 1(String), 100(BigDecimal), 2020-03-04 21:27:43.59(Timestamp), 2019-12(String), admin(String), 2020-03-04 21:27:43.59(Timestamp), admin(String), null
2020-03-04 21:27:43 -<==    Updates: 1
2020-03-04 21:27:43 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`start`,`end`,`hu`,`elec_price`,`elec_amount`,`elec_cost`,`elec_sum`,`elec_money`,`heat_price`,`heat_area`,`heat_cost`,`heat_sum`,`heat_money`,`water_price`,`water_cost`,`water_sum`,`water_money`,`print_date`,`print_money`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from print where user_id = ? and user_org = ? and create_time = ? and date_format(print_date,'%Y-%m-%d') = date_format(?,'%Y-%m-%d') 
2020-03-04 21:27:43 -==> Parameters: 1-0005(String), 2(String), 2019-12(String), 2020-03-04 21:27:43.59(Timestamp)
2020-03-04 21:27:43 -<==      Total: 1
2020-03-04 21:27:43 -==>  Preparing: update print SET `user_id` = ?, `user_name` = ?, `user_type` = ?, `user_org` = ?, `start` = ?, `end` = ?, `hu` = ?, `elec_price` = ?, `elec_amount` = ?, `elec_cost` = ?, `elec_sum` = ?, `elec_money` = ?, `print_date` = ?, `create_time` = ?, `create_by` = ?, `update_time` = ?, `update_by` = ? where id = ? 
2020-03-04 21:27:43 -==> Parameters: 1-0005(String), 李生(String), B(String), 2(String), 8481.0(BigDecimal), 8581.0(BigDecimal), 1(Integer), 0.465(BigDecimal), 100.00(BigDecimal), 46.50(BigDecimal), 500.01(BigDecimal), 100(BigDecimal), 2020-03-04 21:27:43.879(Timestamp), 2019-12(String), admin(String), 2020-03-04 21:27:43.88(Timestamp), admin(String), 12253(Long)
2020-03-04 21:27:44 -<==    Updates: 1
2020-03-04 21:27:44 -==>  Preparing: UPDATE ELEC SET ELEC_SUM = ELEC_SUM + ? WHERE CREATE_TIME = ? and user_org = ? and USER_ID = ? and USER_NAME = ? and `user_type` = 'B' 
2020-03-04 21:27:44 -==> Parameters: 100(BigDecimal), 2019-12(String), 2(String), 1-0008(String), 王明刚1(String)
2020-03-04 21:27:44 -<==    Updates: 0
2020-03-04 21:27:44 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, `user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec WHERE CREATE_TIME = ? and user_org = ? and USER_ID = ? and USER_NAME = ? and `user_type` = 'B' 
2020-03-04 21:27:44 -==> Parameters: 2019-12(String), 2(String), 1-0008(String), 王明刚1(String)
2020-03-04 21:27:44 -<==      Total: 0
2020-03-04 21:27:44 -耗时 : 6707
2020-03-04 21:27:44 -返回值 : 第3行，数据与数据库不匹配请认真编写
2020-03-04 21:28:05 -请求地址 : http://localhost:8081/index
2020-03-04 21:28:05 -HTTP METHOD : GET
2020-03-04 21:28:05 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2020-03-04 21:28:05 -参数 : [{}]
2020-03-04 21:28:05 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2020-03-04 21:28:05 -==> Parameters: 1(Long)
2020-03-04 21:28:05 -<==      Total: 50
2020-03-04 21:28:05 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2020-03-04 21:28:05 -==> Parameters: 138(Long)
2020-03-04 21:28:05 -<==      Total: 1
2020-03-04 21:28:05 -耗时 : 310
2020-03-04 21:28:05 -返回值 : index_v1
2020-03-04 21:28:05 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-03-04 21:28:05 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 310(Integer), com.bootdo.system.controller.LoginController.index()(String), {"menus":[{"attributes":{"icon":"fa fa-money","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-money","url":"/moneyList/moneyList"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"102","parentId":"106","text":"现金缴费"},{"attributes":{"icon":"fa fa-book","url":"/moneyLog/elecLog"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"107","parentId":"106","text":"缴费记录"},{"attributes":{"icon":"fa fa-image","url":"/moneyList/moneyWZ"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"164","parentId":"106","text":"乌镇管理"}],"hasChildren":true,"hasParent":false,"id":"106","parentId":"0","text":"收费管理"},{"attributes":{"icon":"fa fa-lightbulb-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/elec/elec"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"121","parentId":"103","text":"电费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"elec/elecInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"122","parentId":"103","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"elec/elecUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"123","parentId":"103","text":"电表上传"},{"attributes":{"icon":"fa fa-cc","url":"/elec/elecPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"124","parentId":"103","text":"电价管理"}],"hasChildren":true,"hasParent":false,"id":"103","parentId":"0","text":"电费管理"},{"attributes":{"icon":"fa fa-tint","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/water/water"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"117","parentId":"105","text":"水费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"water/waterInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"118","parentId":"105","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"water/waterUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"119","parentId":"105","text":"水费生成"},{"attributes":{"icon":"fa fa-cc","url":"/water/waterPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"120","parentId":"105","text":"水价管理"}],"hasChildren":true,"hasParent":false,"id":"105","parentId":"0","text":"水费管理"},{"attributes":{"icon":"fa fa-fire","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/heat/heat"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"113","parentId":"104","text":"暖费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"heat/heatInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"114","parentId":"104","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"heat/heatUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"115","parentId":"104","text":"暖费生成"},{"attributes":{"icon":"","url":"/heat/heatPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"116","parentId":"104","text":"暖价管理"}],"hasChildren":true,"hasParent":false,"id":"104","parentId":"0","text":"暖费管理"},{"attributes":{"icon":"fa fa-vcard-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-bomb","url":"/print/print"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"149","parentId":"108","text":"票据记录"}],"hasChildren":true,"hasParent":false,"id":"108","parentId":"0","text":"票据管理"},{"attributes":{"icon":"fa fa-bar-chart","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-area-chart","url":"/chart/graph_echarts.html"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","text":"百度chart"},{"attributes":{"icon":"fa fa-sun-o","url":"charts/countDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"109","parentId":"97","text":"日统计报表"},{"attributes":{"icon":"fa fa-calendar","url":"charts/tableDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"161","parentId":"97","text":"日统计表格"},{"attributes":{"icon":"fa fa-registered","url":"charts/countMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"110","parentId":"97","text":"月统计报表"},{"attributes":{"icon":"fa fa-building-o","url":"charts/tableElecMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"162","parentId":"97","text":"月统计表格"},{"attributes":{"icon":"fa fa-support","url":"charts/countYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"111","parentId":"97","text":"年统计报表"},{"attributes":{"icon":"fa fa-book","url":"charts/tableElecYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"163","parentId":"97","text":"年统计表格"},{"attributes":{"icon":"fa fa-money","url":"charts/countOwe"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"155","(String), 127.0.0.1(String), 2020-03-04 21:28:05.348(Timestamp)
2020-03-04 21:28:05 -请求地址 : http://localhost:8081/main
2020-03-04 21:28:05 -HTTP METHOD : GET
2020-03-04 21:28:05 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2020-03-04 21:28:05 -参数 : []
2020-03-04 21:28:05 -耗时 : 0
2020-03-04 21:28:05 -返回值 : main
2020-03-04 21:28:05 -<==    Updates: 1
2020-03-04 21:28:05 -请求地址 : http://localhost:8081/oa/notify/message
2020-03-04 21:28:05 -HTTP METHOD : GET
2020-03-04 21:28:05 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2020-03-04 21:28:05 -参数 : []
2020-03-04 21:28:05 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2020-03-04 21:28:05 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2020-03-04 21:28:05 -<==      Total: 0
2020-03-04 21:28:05 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2020-03-04 21:28:05 -==> Parameters: 1(Long), 0(String)
2020-03-04 21:28:05 -<==      Total: 1
2020-03-04 21:28:05 -耗时 : 62
2020-03-04 21:28:05 -返回值 : com.bootdo.common.utils.PageUtils@4b03cc94
2020-03-04 21:28:05 -请求地址 : http://localhost:8081/main
2020-03-04 21:28:05 -HTTP METHOD : GET
2020-03-04 21:28:05 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2020-03-04 21:28:05 -参数 : []
2020-03-04 21:28:05 -耗时 : 1
2020-03-04 21:28:05 -返回值 : main
2020-03-04 21:28:17 -请求地址 : http://localhost:8081/elec/elec
2020-03-04 21:28:17 -HTTP METHOD : GET
2020-03-04 21:28:17 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.Elec
2020-03-04 21:28:17 -参数 : []
2020-03-04 21:28:17 -耗时 : 0
2020-03-04 21:28:17 -返回值 : elec/elec/elec
2020-03-04 21:28:17 -请求地址 : http://localhost:8081/common/dict/list/userType
2020-03-04 21:28:17 -HTTP METHOD : GET
2020-03-04 21:28:17 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2020-03-04 21:28:17 -请求地址 : http://localhost:8081/common/dict/list/elecType
2020-03-04 21:28:17 -参数 : [userType]
2020-03-04 21:28:17 -HTTP METHOD : GET
2020-03-04 21:28:17 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2020-03-04 21:28:17 -参数 : [elecType]
2020-03-04 21:28:17 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2020-03-04 21:28:17 -==> Parameters: userType(String)
2020-03-04 21:28:17 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2020-03-04 21:28:17 -==> Parameters: elecType(String)
2020-03-04 21:28:17 -请求地址 : http://localhost:8081/elec/elec/list
2020-03-04 21:28:17 -HTTP METHOD : GET
2020-03-04 21:28:17 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.list
2020-03-04 21:28:17 -参数 : [{limit=10, offset=0, userType=, elecType=, userOrg=, userId=, createTime=, queryType=1}, com.bootdo.elec.domain.ElecDO@5939086d]
2020-03-04 21:28:17 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, `user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec order by id asc limit ?, ? 
2020-03-04 21:28:17 -==> Parameters: 0(Integer), 10(Integer)
2020-03-04 21:28:17 -<==      Total: 4
2020-03-04 21:28:17 -耗时 : 90
2020-03-04 21:28:17 -返回值 : [DictDO{id=145, name='银行转账', value='D', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=144, name='微信支付', value='C', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2020-03-04 21:28:17 -<==      Total: 11
2020-03-04 21:28:17 -耗时 : 277
2020-03-04 21:28:17 -返回值 : [DictDO{id=180, name='矿民用', value='1', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=179, name='矿商业', value='2', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=178, name='矿工业1', value='3', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=177, name='矿工业2', value='4', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=176, name='矿工业3', value='5', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=175, name='乌民用', value='6', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=174, name='乌商用', value='7', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=173, name='乌工业', value='8', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=172, name='煤民用', value='9', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=171, name='煤商业', value='10', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=170, name='政府用电', value='11', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2020-03-04 21:28:18 -<==      Total: 10
2020-03-04 21:28:18 -==>  Preparing: select count(*) from elec 
2020-03-04 21:28:18 -==> Parameters: 
2020-03-04 21:28:18 -<==      Total: 1
2020-03-04 21:28:18 -耗时 : 528
2020-03-04 21:28:18 -返回值 : com.bootdo.common.utils.PageUtils@22241c31
2020-03-04 21:28:25 -请求地址 : http://localhost:8081/elec/elec/list
2020-03-04 21:28:25 -HTTP METHOD : GET
2020-03-04 21:28:25 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.list
2020-03-04 21:28:25 -参数 : [{limit=10, offset=0, userType=B, elecType=, userOrg=, userId=, createTime=2019-12, queryType=1, type=B}, com.bootdo.elec.domain.ElecDO@6c435db6]
2020-03-04 21:28:25 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, `user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec WHERE `create_time` = ? and user_type = ? order by id asc limit ?, ? 
2020-03-04 21:28:25 -==> Parameters: 2019-12(String), B(String), 0(Integer), 10(Integer)
2020-03-04 21:28:26 -<==      Total: 10
2020-03-04 21:28:26 -==>  Preparing: select count(*) from elec WHERE `create_time` = ? and user_type = ? 
2020-03-04 21:28:26 -==> Parameters: 2019-12(String), B(String)
2020-03-04 21:28:26 -<==      Total: 1
2020-03-04 21:28:26 -耗时 : 152
2020-03-04 21:28:26 -返回值 : com.bootdo.common.utils.PageUtils@27891080
2020-03-04 21:28:28 -请求地址 : http://localhost:8081/elec/elec/list
2020-03-04 21:28:28 -HTTP METHOD : GET
2020-03-04 21:28:28 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.list
2020-03-04 21:28:28 -参数 : [{limit=10, offset=0, userType=B, elecType=, userOrg=, userId=, createTime=2019-12, queryType=1}, com.bootdo.elec.domain.ElecDO@275e58eb]
2020-03-04 21:28:28 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, `user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec WHERE `create_time` = ? and user_type = ? order by id asc limit ?, ? 
2020-03-04 21:28:28 -==> Parameters: 2019-12(String), B(String), 0(Integer), 10(Integer)
2020-03-04 21:28:28 -<==      Total: 10
2020-03-04 21:28:28 -==>  Preparing: select count(*) from elec WHERE `create_time` = ? and user_type = ? 
2020-03-04 21:28:28 -==> Parameters: 2019-12(String), B(String)
2020-03-04 21:28:28 -<==      Total: 1
2020-03-04 21:28:28 -耗时 : 136
2020-03-04 21:28:28 -返回值 : com.bootdo.common.utils.PageUtils@12180f58
2020-03-04 21:28:46 -请求地址 : http://localhost:8081/elec/elecInto
2020-03-04 21:28:46 -HTTP METHOD : GET
2020-03-04 21:28:46 -CLASS_METHOD : com.bootdo.elec.controller.ElecIntoController.ElecInto
2020-03-04 21:28:46 -参数 : []
2020-03-04 21:28:46 -耗时 : 0
2020-03-04 21:28:46 -返回值 : elec/elecInto/elecInto
2020-03-04 21:28:58 -请求地址 : http://localhost:8081/system/sysDept/treeView
2020-03-04 21:28:58 -HTTP METHOD : GET
2020-03-04 21:28:58 -CLASS_METHOD : com.bootdo.system.controller.DeptController.treeView
2020-03-04 21:28:58 -参数 : [ModelAndView: materialized View is [null]; model is null]
2020-03-04 21:28:58 -耗时 : 1
2020-03-04 21:28:58 -返回值 : system/dept/deptTree
2020-03-04 21:28:58 -请求地址 : http://localhost:8081/system/sysDept/tree
2020-03-04 21:28:58 -HTTP METHOD : GET
2020-03-04 21:28:58 -CLASS_METHOD : com.bootdo.system.controller.DeptController.tree
2020-03-04 21:28:58 -参数 : []
2020-03-04 21:28:58 -==>  Preparing: select `dept_id`,`parent_id`,`name`,`order_num`,`del_flag` from sys_dept order by dept_id desc 
2020-03-04 21:28:58 -==> Parameters: 
2020-03-04 21:28:58 -<==      Total: 3
2020-03-04 21:28:58 -耗时 : 4
2020-03-04 21:28:58 -返回值 : {"checked":false,"children":[{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"3","parentId":"1","state":{"opened":true},"text":"牙星"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"2","parentId":"1","state":{"opened":true},"text":"五九"}],"hasChildren":true,"hasParent":false,"id":"1","parentId":"0","state":{"opened":true},"text":"总公司"}
2020-03-04 21:29:03 -请求地址 : http://localhost:8081/elec/elecInto/importElecIntoExcel
2020-03-04 21:29:03 -HTTP METHOD : POST
2020-03-04 21:29:03 -CLASS_METHOD : com.bootdo.elec.controller.ElecIntoController.importElecIntoExcel
2020-03-04 21:29:03 -参数 : [org.springframework.web.multipart.support.StandardMultipartHttpServletRequest$StandardMultipartFile@5ccfdbf3, com.bootdo.elec.vo.ElecVo@5b0ef262, org.apache.shiro.web.servlet.ShiroHttpServletResponse@1592d8ed]
2020-03-04 21:29:03 -==>  Preparing: UPDATE ELEC SET ELEC_SUM = ELEC_SUM + ? WHERE CREATE_TIME = ? and user_org = ? and USER_ID = ? and USER_NAME = ? and `user_type` = 'B' 
2020-03-04 21:29:03 -==> Parameters: 100(BigDecimal), 2019-12(String), 2(String), 1-0005(String), 李生(String)
2020-03-04 21:29:03 -<==    Updates: 1
2020-03-04 21:29:03 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, `user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec WHERE CREATE_TIME = ? and user_org = ? and USER_ID = ? and USER_NAME = ? and `user_type` = 'B' 
2020-03-04 21:29:03 -==> Parameters: 2019-12(String), 2(String), 1-0005(String), 李生(String)
2020-03-04 21:29:03 -<==      Total: 1
2020-03-04 21:29:03 -==>  Preparing: insert into elec_log ( `user_id`, `user_name`, `user_type`, `user_org`, `elec_type`, `elec_money`, `money_date`, `create_time`, `create_by`, `update_time`, `update_by`, `remark` ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-03-04 21:29:03 -==> Parameters: 1-0005(String), 李生(String), B(String), 2(String), 1(String), 100(BigDecimal), 2020-03-04 21:29:03.876(Timestamp), 2019-12(String), admin(String), 2020-03-04 21:29:03.876(Timestamp), admin(String), null
2020-03-04 21:29:03 -<==    Updates: 1
2020-03-04 21:29:03 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`start`,`end`,`hu`,`elec_price`,`elec_amount`,`elec_cost`,`elec_sum`,`elec_money`,`heat_price`,`heat_area`,`heat_cost`,`heat_sum`,`heat_money`,`water_price`,`water_cost`,`water_sum`,`water_money`,`print_date`,`print_money`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from print where user_id = ? and user_org = ? and create_time = ? and date_format(print_date,'%Y-%m-%d') = date_format(?,'%Y-%m-%d') 
2020-03-04 21:29:03 -==> Parameters: 1-0005(String), 2(String), 2019-12(String), 2020-03-04 21:29:03.876(Timestamp)
2020-03-04 21:29:03 -<==      Total: 1
2020-03-04 21:29:03 -==>  Preparing: update print SET `user_id` = ?, `user_name` = ?, `user_type` = ?, `user_org` = ?, `start` = ?, `end` = ?, `hu` = ?, `elec_price` = ?, `elec_amount` = ?, `elec_cost` = ?, `elec_sum` = ?, `elec_money` = ?, `print_date` = ?, `create_time` = ?, `create_by` = ?, `update_time` = ?, `update_by` = ? where id = ? 
2020-03-04 21:29:03 -==> Parameters: 1-0005(String), 李生(String), B(String), 2(String), 8481.0(BigDecimal), 8581.0(BigDecimal), 1(Integer), 0.465(BigDecimal), 100.00(BigDecimal), 46.50(BigDecimal), 600.01(BigDecimal), 100(BigDecimal), 2020-03-04 21:29:03.917(Timestamp), 2019-12(String), admin(String), 2020-03-04 21:29:03.917(Timestamp), admin(String), 12253(Long)
2020-03-04 21:29:03 -<==    Updates: 1
2020-03-04 21:29:03 -==>  Preparing: UPDATE ELEC SET ELEC_SUM = ELEC_SUM + ? WHERE CREATE_TIME = ? and user_org = ? and USER_ID = ? and USER_NAME = ? and `user_type` = 'B' 
2020-03-04 21:29:03 -==> Parameters: 100(BigDecimal), 2019-12(String), 2(String), 1-0008(String), 王明刚1(String)
2020-03-04 21:29:04 -<==    Updates: 0
2020-03-04 21:29:04 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, `user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec WHERE CREATE_TIME = ? and user_org = ? and USER_ID = ? and USER_NAME = ? and `user_type` = 'B' 
2020-03-04 21:29:04 -==> Parameters: 2019-12(String), 2(String), 1-0008(String), 王明刚1(String)
2020-03-04 21:29:04 -<==      Total: 0
2020-03-04 21:29:04 -耗时 : 697
2020-03-04 21:29:04 -返回值 : 第3行，数据与数据库不匹配请认真编写
2020-03-04 21:29:15 -请求地址 : http://localhost:8081/elec/elec/list
2020-03-04 21:29:15 -HTTP METHOD : GET
2020-03-04 21:29:15 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.list
2020-03-04 21:29:15 -参数 : [{limit=10, offset=0, userType=B, elecType=, userOrg=, userId=, createTime=2019-12, queryType=1}, com.bootdo.elec.domain.ElecDO@5e5bcfc4]
2020-03-04 21:29:15 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, `user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec WHERE `create_time` = ? and user_type = ? order by id asc limit ?, ? 
2020-03-04 21:29:15 -==> Parameters: 2019-12(String), B(String), 0(Integer), 10(Integer)
2020-03-04 21:29:16 -<==      Total: 10
2020-03-04 21:29:16 -==>  Preparing: select count(*) from elec WHERE `create_time` = ? and user_type = ? 
2020-03-04 21:29:16 -==> Parameters: 2019-12(String), B(String)
2020-03-04 21:29:16 -<==      Total: 1
2020-03-04 21:29:16 -耗时 : 766
2020-03-04 21:29:16 -返回值 : com.bootdo.common.utils.PageUtils@41fe4dc2
2020-03-04 21:31:44 -请求地址 : http://localhost:8081/index
2020-03-04 21:31:44 -HTTP METHOD : GET
2020-03-04 21:31:44 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2020-03-04 21:31:44 -参数 : [{}]
2020-03-04 21:31:44 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2020-03-04 21:31:44 -==> Parameters: 1(Long)
2020-03-04 21:31:44 -<==      Total: 50
2020-03-04 21:31:44 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2020-03-04 21:31:44 -==> Parameters: 138(Long)
2020-03-04 21:31:44 -<==      Total: 1
2020-03-04 21:31:44 -耗时 : 306
2020-03-04 21:31:44 -返回值 : index_v1
2020-03-04 21:31:44 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-03-04 21:31:44 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 306(Integer), com.bootdo.system.controller.LoginController.index()(String), {"menus":[{"attributes":{"icon":"fa fa-money","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-money","url":"/moneyList/moneyList"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"102","parentId":"106","text":"现金缴费"},{"attributes":{"icon":"fa fa-book","url":"/moneyLog/elecLog"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"107","parentId":"106","text":"缴费记录"},{"attributes":{"icon":"fa fa-image","url":"/moneyList/moneyWZ"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"164","parentId":"106","text":"乌镇管理"}],"hasChildren":true,"hasParent":false,"id":"106","parentId":"0","text":"收费管理"},{"attributes":{"icon":"fa fa-lightbulb-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/elec/elec"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"121","parentId":"103","text":"电费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"elec/elecInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"122","parentId":"103","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"elec/elecUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"123","parentId":"103","text":"电表上传"},{"attributes":{"icon":"fa fa-cc","url":"/elec/elecPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"124","parentId":"103","text":"电价管理"}],"hasChildren":true,"hasParent":false,"id":"103","parentId":"0","text":"电费管理"},{"attributes":{"icon":"fa fa-tint","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/water/water"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"117","parentId":"105","text":"水费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"water/waterInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"118","parentId":"105","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"water/waterUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"119","parentId":"105","text":"水费生成"},{"attributes":{"icon":"fa fa-cc","url":"/water/waterPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"120","parentId":"105","text":"水价管理"}],"hasChildren":true,"hasParent":false,"id":"105","parentId":"0","text":"水费管理"},{"attributes":{"icon":"fa fa-fire","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/heat/heat"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"113","parentId":"104","text":"暖费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"heat/heatInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"114","parentId":"104","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"heat/heatUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"115","parentId":"104","text":"暖费生成"},{"attributes":{"icon":"","url":"/heat/heatPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"116","parentId":"104","text":"暖价管理"}],"hasChildren":true,"hasParent":false,"id":"104","parentId":"0","text":"暖费管理"},{"attributes":{"icon":"fa fa-vcard-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-bomb","url":"/print/print"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"149","parentId":"108","text":"票据记录"}],"hasChildren":true,"hasParent":false,"id":"108","parentId":"0","text":"票据管理"},{"attributes":{"icon":"fa fa-bar-chart","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-area-chart","url":"/chart/graph_echarts.html"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","text":"百度chart"},{"attributes":{"icon":"fa fa-sun-o","url":"charts/countDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"109","parentId":"97","text":"日统计报表"},{"attributes":{"icon":"fa fa-calendar","url":"charts/tableDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"161","parentId":"97","text":"日统计表格"},{"attributes":{"icon":"fa fa-registered","url":"charts/countMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"110","parentId":"97","text":"月统计报表"},{"attributes":{"icon":"fa fa-building-o","url":"charts/tableElecMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"162","parentId":"97","text":"月统计表格"},{"attributes":{"icon":"fa fa-support","url":"charts/countYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"111","parentId":"97","text":"年统计报表"},{"attributes":{"icon":"fa fa-book","url":"charts/tableElecYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"163","parentId":"97","text":"年统计表格"},{"attributes":{"icon":"fa fa-money","url":"charts/countOwe"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"155","(String), 127.0.0.1(String), 2020-03-04 21:31:44.829(Timestamp)
2020-03-04 21:31:45 -请求地址 : http://localhost:8081/main
2020-03-04 21:31:45 -HTTP METHOD : GET
2020-03-04 21:31:45 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2020-03-04 21:31:45 -参数 : []
2020-03-04 21:31:45 -耗时 : 0
2020-03-04 21:31:45 -返回值 : main
2020-03-04 21:31:45 -<==    Updates: 1
2020-03-04 21:31:45 -请求地址 : http://localhost:8081/oa/notify/message
2020-03-04 21:31:45 -HTTP METHOD : GET
2020-03-04 21:31:45 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2020-03-04 21:31:45 -参数 : []
2020-03-04 21:31:45 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2020-03-04 21:31:45 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2020-03-04 21:31:45 -请求地址 : http://localhost:8081/main
2020-03-04 21:31:45 -HTTP METHOD : GET
2020-03-04 21:31:45 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2020-03-04 21:31:45 -参数 : []
2020-03-04 21:31:45 -耗时 : 0
2020-03-04 21:31:45 -返回值 : main
2020-03-04 21:31:45 -<==      Total: 0
2020-03-04 21:31:45 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2020-03-04 21:31:45 -==> Parameters: 1(Long), 0(String)
2020-03-04 21:31:45 -<==      Total: 1
2020-03-04 21:31:45 -耗时 : 209
2020-03-04 21:31:45 -返回值 : com.bootdo.common.utils.PageUtils@48c1dd9d
2020-03-04 21:31:48 -请求地址 : http://localhost:8081/elec/elecInto
2020-03-04 21:31:48 -HTTP METHOD : GET
2020-03-04 21:31:48 -CLASS_METHOD : com.bootdo.elec.controller.ElecIntoController.ElecInto
2020-03-04 21:31:48 -参数 : []
2020-03-04 21:31:48 -耗时 : 1
2020-03-04 21:31:48 -返回值 : elec/elecInto/elecInto
2020-03-04 21:31:54 -请求地址 : http://localhost:8081/system/sysDept/treeView
2020-03-04 21:31:54 -HTTP METHOD : GET
2020-03-04 21:31:54 -CLASS_METHOD : com.bootdo.system.controller.DeptController.treeView
2020-03-04 21:31:54 -参数 : [ModelAndView: materialized View is [null]; model is null]
2020-03-04 21:31:54 -耗时 : 0
2020-03-04 21:31:54 -返回值 : system/dept/deptTree
2020-03-04 21:31:54 -请求地址 : http://localhost:8081/system/sysDept/tree
2020-03-04 21:31:54 -HTTP METHOD : GET
2020-03-04 21:31:54 -CLASS_METHOD : com.bootdo.system.controller.DeptController.tree
2020-03-04 21:31:54 -参数 : []
2020-03-04 21:31:54 -==>  Preparing: select `dept_id`,`parent_id`,`name`,`order_num`,`del_flag` from sys_dept order by dept_id desc 
2020-03-04 21:31:54 -==> Parameters: 
2020-03-04 21:31:54 -<==      Total: 3
2020-03-04 21:31:54 -耗时 : 4
2020-03-04 21:31:54 -返回值 : {"checked":false,"children":[{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"3","parentId":"1","state":{"opened":true},"text":"牙星"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"2","parentId":"1","state":{"opened":true},"text":"五九"}],"hasChildren":true,"hasParent":false,"id":"1","parentId":"0","state":{"opened":true},"text":"总公司"}
2020-03-04 21:32:02 -请求地址 : http://localhost:8081/elec/elecInto/importElecIntoExcel
2020-03-04 21:32:02 -HTTP METHOD : POST
2020-03-04 21:32:02 -CLASS_METHOD : com.bootdo.elec.controller.ElecIntoController.importElecIntoExcel
2020-03-04 21:32:02 -参数 : [org.springframework.web.multipart.support.StandardMultipartHttpServletRequest$StandardMultipartFile@7ae98838, com.bootdo.elec.vo.ElecVo@1fe43963, org.apache.shiro.web.servlet.ShiroHttpServletResponse@83d97b0]
2020-03-04 21:32:02 -==>  Preparing: UPDATE ELEC SET ELEC_SUM = ELEC_SUM + ? WHERE CREATE_TIME = ? and user_org = ? and USER_ID = ? and USER_NAME = ? and `user_type` = 'B' 
2020-03-04 21:32:02 -==> Parameters: 100(BigDecimal), 2019-12(String), 2(String), 1-0005(String), 李生(String)
2020-03-04 21:32:03 -<==    Updates: 1
2020-03-04 21:32:03 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, `user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec WHERE CREATE_TIME = ? and user_org = ? and USER_ID = ? and USER_NAME = ? and `user_type` = 'B' 
2020-03-04 21:32:03 -==> Parameters: 2019-12(String), 2(String), 1-0005(String), 李生(String)
2020-03-04 21:32:03 -<==      Total: 1
2020-03-04 21:32:03 -==>  Preparing: insert into elec_log ( `user_id`, `user_name`, `user_type`, `user_org`, `elec_type`, `elec_money`, `money_date`, `create_time`, `create_by`, `update_time`, `update_by`, `remark` ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-03-04 21:32:03 -==> Parameters: 1-0005(String), 李生(String), B(String), 2(String), 1(String), 100(BigDecimal), 2020-03-04 21:32:03.139(Timestamp), 2019-12(String), admin(String), 2020-03-04 21:32:03.139(Timestamp), admin(String), null
2020-03-04 21:32:03 -<==    Updates: 1
2020-03-04 21:32:03 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`start`,`end`,`hu`,`elec_price`,`elec_amount`,`elec_cost`,`elec_sum`,`elec_money`,`heat_price`,`heat_area`,`heat_cost`,`heat_sum`,`heat_money`,`water_price`,`water_cost`,`water_sum`,`water_money`,`print_date`,`print_money`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from print where user_id = ? and user_org = ? and create_time = ? and date_format(print_date,'%Y-%m-%d') = date_format(?,'%Y-%m-%d') 
2020-03-04 21:32:03 -==> Parameters: 1-0005(String), 2(String), 2019-12(String), 2020-03-04 21:32:03.139(Timestamp)
2020-03-04 21:32:03 -<==      Total: 1
2020-03-04 21:32:03 -==>  Preparing: update print SET `user_id` = ?, `user_name` = ?, `user_type` = ?, `user_org` = ?, `start` = ?, `end` = ?, `hu` = ?, `elec_price` = ?, `elec_amount` = ?, `elec_cost` = ?, `elec_sum` = ?, `elec_money` = ?, `print_date` = ?, `create_time` = ?, `create_by` = ?, `update_time` = ?, `update_by` = ? where id = ? 
2020-03-04 21:32:03 -==> Parameters: 1-0005(String), 李生(String), B(String), 2(String), 8481.0(BigDecimal), 8581.0(BigDecimal), 1(Integer), 0.465(BigDecimal), 100.00(BigDecimal), 46.50(BigDecimal), 700.01(BigDecimal), 100(BigDecimal), 2020-03-04 21:32:03.312(Timestamp), 2019-12(String), admin(String), 2020-03-04 21:32:03.312(Timestamp), admin(String), 12253(Long)
2020-03-04 21:32:03 -<==    Updates: 1
2020-03-04 21:32:03 -==>  Preparing: UPDATE ELEC SET ELEC_SUM = ELEC_SUM + ? WHERE CREATE_TIME = ? and user_org = ? and USER_ID = ? and USER_NAME = ? and `user_type` = 'B' 
2020-03-04 21:32:03 -==> Parameters: 100(BigDecimal), 2019-12(String), 2(String), 1-0008(String), 王明刚1(String)
2020-03-04 21:32:03 -<==    Updates: 0
2020-03-04 21:32:03 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, `user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec WHERE CREATE_TIME = ? and user_org = ? and USER_ID = ? and USER_NAME = ? and `user_type` = 'B' 
2020-03-04 21:32:03 -==> Parameters: 2019-12(String), 2(String), 1-0008(String), 王明刚1(String)
2020-03-04 21:32:03 -<==      Total: 0
2020-03-04 21:32:03 -耗时 : 1106
2020-03-04 21:32:03 -返回值 : 第3行，数据与数据库不匹配请认真编写
2020-03-04 21:33:49 -请求地址 : http://localhost:8081/index
2020-03-04 21:33:49 -HTTP METHOD : GET
2020-03-04 21:33:49 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2020-03-04 21:33:49 -参数 : [{}]
2020-03-04 21:33:49 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2020-03-04 21:33:49 -==> Parameters: 1(Long)
2020-03-04 21:33:49 -<==      Total: 50
2020-03-04 21:33:49 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2020-03-04 21:33:49 -==> Parameters: 138(Long)
2020-03-04 21:33:49 -<==      Total: 1
2020-03-04 21:33:49 -耗时 : 407
2020-03-04 21:33:49 -返回值 : index_v1
2020-03-04 21:33:49 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-03-04 21:33:49 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 407(Integer), com.bootdo.system.controller.LoginController.index()(String), {"menus":[{"attributes":{"icon":"fa fa-money","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-money","url":"/moneyList/moneyList"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"102","parentId":"106","text":"现金缴费"},{"attributes":{"icon":"fa fa-book","url":"/moneyLog/elecLog"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"107","parentId":"106","text":"缴费记录"},{"attributes":{"icon":"fa fa-image","url":"/moneyList/moneyWZ"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"164","parentId":"106","text":"乌镇管理"}],"hasChildren":true,"hasParent":false,"id":"106","parentId":"0","text":"收费管理"},{"attributes":{"icon":"fa fa-lightbulb-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/elec/elec"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"121","parentId":"103","text":"电费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"elec/elecInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"122","parentId":"103","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"elec/elecUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"123","parentId":"103","text":"电表上传"},{"attributes":{"icon":"fa fa-cc","url":"/elec/elecPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"124","parentId":"103","text":"电价管理"}],"hasChildren":true,"hasParent":false,"id":"103","parentId":"0","text":"电费管理"},{"attributes":{"icon":"fa fa-tint","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/water/water"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"117","parentId":"105","text":"水费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"water/waterInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"118","parentId":"105","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"water/waterUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"119","parentId":"105","text":"水费生成"},{"attributes":{"icon":"fa fa-cc","url":"/water/waterPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"120","parentId":"105","text":"水价管理"}],"hasChildren":true,"hasParent":false,"id":"105","parentId":"0","text":"水费管理"},{"attributes":{"icon":"fa fa-fire","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/heat/heat"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"113","parentId":"104","text":"暖费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"heat/heatInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"114","parentId":"104","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"heat/heatUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"115","parentId":"104","text":"暖费生成"},{"attributes":{"icon":"","url":"/heat/heatPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"116","parentId":"104","text":"暖价管理"}],"hasChildren":true,"hasParent":false,"id":"104","parentId":"0","text":"暖费管理"},{"attributes":{"icon":"fa fa-vcard-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-bomb","url":"/print/print"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"149","parentId":"108","text":"票据记录"}],"hasChildren":true,"hasParent":false,"id":"108","parentId":"0","text":"票据管理"},{"attributes":{"icon":"fa fa-bar-chart","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-area-chart","url":"/chart/graph_echarts.html"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","text":"百度chart"},{"attributes":{"icon":"fa fa-sun-o","url":"charts/countDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"109","parentId":"97","text":"日统计报表"},{"attributes":{"icon":"fa fa-calendar","url":"charts/tableDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"161","parentId":"97","text":"日统计表格"},{"attributes":{"icon":"fa fa-registered","url":"charts/countMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"110","parentId":"97","text":"月统计报表"},{"attributes":{"icon":"fa fa-building-o","url":"charts/tableElecMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"162","parentId":"97","text":"月统计表格"},{"attributes":{"icon":"fa fa-support","url":"charts/countYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"111","parentId":"97","text":"年统计报表"},{"attributes":{"icon":"fa fa-book","url":"charts/tableElecYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"163","parentId":"97","text":"年统计表格"},{"attributes":{"icon":"fa fa-money","url":"charts/countOwe"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"155","(String), 127.0.0.1(String), 2020-03-04 21:33:49.87(Timestamp)
2020-03-04 21:33:50 -请求地址 : http://localhost:8081/main
2020-03-04 21:33:50 -HTTP METHOD : GET
2020-03-04 21:33:50 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2020-03-04 21:33:50 -参数 : []
2020-03-04 21:33:50 -耗时 : 2
2020-03-04 21:33:50 -返回值 : main
2020-03-04 21:33:50 -请求地址 : http://localhost:8081/oa/notify/message
2020-03-04 21:33:50 -HTTP METHOD : GET
2020-03-04 21:33:50 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2020-03-04 21:33:50 -参数 : []
2020-03-04 21:33:50 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2020-03-04 21:33:50 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2020-03-04 21:33:50 -请求地址 : http://localhost:8081/main
2020-03-04 21:33:50 -HTTP METHOD : GET
2020-03-04 21:33:50 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2020-03-04 21:33:50 -参数 : []
2020-03-04 21:33:50 -耗时 : 2
2020-03-04 21:33:50 -返回值 : main
2020-03-04 21:33:50 -<==    Updates: 1
2020-03-04 21:33:50 -<==      Total: 0
2020-03-04 21:33:50 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2020-03-04 21:33:50 -==> Parameters: 1(Long), 0(String)
2020-03-04 21:33:50 -<==      Total: 1
2020-03-04 21:33:50 -耗时 : 292
2020-03-04 21:33:50 -返回值 : com.bootdo.common.utils.PageUtils@30f7693a
2020-03-04 21:33:55 -请求地址 : http://localhost:8081/elec/elec
2020-03-04 21:33:55 -HTTP METHOD : GET
2020-03-04 21:33:55 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.Elec
2020-03-04 21:33:55 -参数 : []
2020-03-04 21:33:55 -耗时 : 1
2020-03-04 21:33:55 -返回值 : elec/elec/elec
2020-03-04 21:33:55 -请求地址 : http://localhost:8081/common/dict/list/userType
2020-03-04 21:33:55 -HTTP METHOD : GET
2020-03-04 21:33:55 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2020-03-04 21:33:55 -参数 : [userType]
2020-03-04 21:33:55 -请求地址 : http://localhost:8081/common/dict/list/elecType
2020-03-04 21:33:55 -HTTP METHOD : GET
2020-03-04 21:33:55 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2020-03-04 21:33:55 -参数 : [elecType]
2020-03-04 21:33:55 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2020-03-04 21:33:55 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2020-03-04 21:33:55 -==> Parameters: userType(String)
2020-03-04 21:33:55 -==> Parameters: elecType(String)
2020-03-04 21:33:55 -<==      Total: 4
2020-03-04 21:33:55 -耗时 : 22
2020-03-04 21:33:55 -返回值 : [DictDO{id=145, name='银行转账', value='D', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=144, name='微信支付', value='C', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2020-03-04 21:33:55 -<==      Total: 11
2020-03-04 21:33:55 -耗时 : 25
2020-03-04 21:33:55 -返回值 : [DictDO{id=180, name='矿民用', value='1', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=179, name='矿商业', value='2', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=178, name='矿工业1', value='3', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=177, name='矿工业2', value='4', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=176, name='矿工业3', value='5', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=175, name='乌民用', value='6', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=174, name='乌商用', value='7', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=173, name='乌工业', value='8', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=172, name='煤民用', value='9', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=171, name='煤商业', value='10', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=170, name='政府用电', value='11', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2020-03-04 21:33:55 -请求地址 : http://localhost:8081/elec/elec/list
2020-03-04 21:33:55 -HTTP METHOD : GET
2020-03-04 21:33:55 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.list
2020-03-04 21:33:55 -参数 : [{limit=10, offset=0, userType=, elecType=, userOrg=, userId=, createTime=, queryType=1}, com.bootdo.elec.domain.ElecDO@2cc7754e]
2020-03-04 21:33:55 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, `user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec order by id asc limit ?, ? 
2020-03-04 21:33:55 -==> Parameters: 0(Integer), 10(Integer)
2020-03-04 21:33:56 -<==      Total: 10
2020-03-04 21:33:56 -==>  Preparing: select count(*) from elec 
2020-03-04 21:33:56 -==> Parameters: 
2020-03-04 21:33:56 -<==      Total: 1
2020-03-04 21:33:56 -耗时 : 295
2020-03-04 21:33:56 -返回值 : com.bootdo.common.utils.PageUtils@46108d9
2020-03-04 21:34:01 -请求地址 : http://localhost:8081/system/sysDept/treeView
2020-03-04 21:34:01 -HTTP METHOD : GET
2020-03-04 21:34:01 -CLASS_METHOD : com.bootdo.system.controller.DeptController.treeView
2020-03-04 21:34:01 -参数 : [ModelAndView: materialized View is [null]; model is null]
2020-03-04 21:34:01 -耗时 : 0
2020-03-04 21:34:01 -返回值 : system/dept/deptTree
2020-03-04 21:34:01 -请求地址 : http://localhost:8081/system/sysDept/tree
2020-03-04 21:34:01 -HTTP METHOD : GET
2020-03-04 21:34:01 -CLASS_METHOD : com.bootdo.system.controller.DeptController.tree
2020-03-04 21:34:01 -参数 : []
2020-03-04 21:34:01 -==>  Preparing: select `dept_id`,`parent_id`,`name`,`order_num`,`del_flag` from sys_dept order by dept_id desc 
2020-03-04 21:34:01 -==> Parameters: 
2020-03-04 21:34:01 -<==      Total: 3
2020-03-04 21:34:01 -耗时 : 4
2020-03-04 21:34:01 -返回值 : {"checked":false,"children":[{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"3","parentId":"1","state":{"opened":true},"text":"牙星"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"2","parentId":"1","state":{"opened":true},"text":"五九"}],"hasChildren":true,"hasParent":false,"id":"1","parentId":"0","state":{"opened":true},"text":"总公司"}
2020-03-04 21:34:03 -请求地址 : http://localhost:8081/elec/elec/list
2020-03-04 21:34:03 -HTTP METHOD : GET
2020-03-04 21:34:03 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.list
2020-03-04 21:34:03 -参数 : [{limit=10, offset=0, userType=, elecType=, userOrg=2, userId=, createTime=2019-12, queryType=1}, com.bootdo.elec.domain.ElecDO@2944c454]
2020-03-04 21:34:03 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, `user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec WHERE `create_time` = ? and user_org = ? order by id asc limit ?, ? 
2020-03-04 21:34:03 -==> Parameters: 2019-12(String), 2(String), 0(Integer), 10(Integer)
2020-03-04 21:34:03 -<==      Total: 10
2020-03-04 21:34:03 -==>  Preparing: select count(*) from elec WHERE `create_time` = ? and user_org = ? 
2020-03-04 21:34:03 -==> Parameters: 2019-12(String), 2(String)
2020-03-04 21:34:03 -<==      Total: 1
2020-03-04 21:34:03 -耗时 : 146
2020-03-04 21:34:03 -返回值 : com.bootdo.common.utils.PageUtils@7135a7e5
2020-03-04 21:34:24 -请求地址 : http://localhost:8081/elec/elec/list
2020-03-04 21:34:24 -HTTP METHOD : GET
2020-03-04 21:34:24 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.list
2020-03-04 21:34:24 -参数 : [{limit=10, offset=0, userType=B, elecType=, userOrg=2, userId=, createTime=2019-12, queryType=1, type=B}, com.bootdo.elec.domain.ElecDO@131b701e]
2020-03-04 21:34:24 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, `user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec WHERE `create_time` = ? and user_type = ? and user_org = ? order by id asc limit ?, ? 
2020-03-04 21:34:24 -==> Parameters: 2019-12(String), B(String), 2(String), 0(Integer), 10(Integer)
2020-03-04 21:34:24 -<==      Total: 10
2020-03-04 21:34:24 -==>  Preparing: select count(*) from elec WHERE `create_time` = ? and user_type = ? and user_org = ? 
2020-03-04 21:34:24 -==> Parameters: 2019-12(String), B(String), 2(String)
2020-03-04 21:34:24 -<==      Total: 1
2020-03-04 21:34:24 -耗时 : 197
2020-03-04 21:34:24 -返回值 : com.bootdo.common.utils.PageUtils@68892c8f
2020-03-04 21:34:25 -请求地址 : http://localhost:8081/elec/elec/list
2020-03-04 21:34:25 -HTTP METHOD : GET
2020-03-04 21:34:25 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.list
2020-03-04 21:34:25 -参数 : [{limit=10, offset=0, userType=B, elecType=, userOrg=2, userId=, createTime=2019-12, queryType=1}, com.bootdo.elec.domain.ElecDO@46eac210]
2020-03-04 21:34:25 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, `user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec WHERE `create_time` = ? and user_type = ? and user_org = ? order by id asc limit ?, ? 
2020-03-04 21:34:25 -==> Parameters: 2019-12(String), B(String), 2(String), 0(Integer), 10(Integer)
2020-03-04 21:34:25 -<==      Total: 10
2020-03-04 21:34:25 -==>  Preparing: select count(*) from elec WHERE `create_time` = ? and user_type = ? and user_org = ? 
2020-03-04 21:34:25 -==> Parameters: 2019-12(String), B(String), 2(String)
2020-03-04 21:34:25 -<==      Total: 1
2020-03-04 21:34:25 -耗时 : 118
2020-03-04 21:34:25 -返回值 : com.bootdo.common.utils.PageUtils@638e2685
2020-03-04 21:34:32 -请求地址 : http://localhost:8081/elec/elecInto
2020-03-04 21:34:32 -HTTP METHOD : GET
2020-03-04 21:34:32 -CLASS_METHOD : com.bootdo.elec.controller.ElecIntoController.ElecInto
2020-03-04 21:34:32 -参数 : []
2020-03-04 21:34:32 -耗时 : 2
2020-03-04 21:34:32 -返回值 : elec/elecInto/elecInto
2020-03-04 21:34:42 -请求地址 : http://localhost:8081/system/sysDept/treeView
2020-03-04 21:34:42 -HTTP METHOD : GET
2020-03-04 21:34:42 -CLASS_METHOD : com.bootdo.system.controller.DeptController.treeView
2020-03-04 21:34:42 -参数 : [ModelAndView: materialized View is [null]; model is null]
2020-03-04 21:34:42 -耗时 : 0
2020-03-04 21:34:42 -返回值 : system/dept/deptTree
2020-03-04 21:34:42 -请求地址 : http://localhost:8081/system/sysDept/tree
2020-03-04 21:34:42 -HTTP METHOD : GET
2020-03-04 21:34:42 -CLASS_METHOD : com.bootdo.system.controller.DeptController.tree
2020-03-04 21:34:42 -参数 : []
2020-03-04 21:34:42 -==>  Preparing: select `dept_id`,`parent_id`,`name`,`order_num`,`del_flag` from sys_dept order by dept_id desc 
2020-03-04 21:34:42 -==> Parameters: 
2020-03-04 21:34:42 -<==      Total: 3
2020-03-04 21:34:42 -耗时 : 5
2020-03-04 21:34:42 -返回值 : {"checked":false,"children":[{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"3","parentId":"1","state":{"opened":true},"text":"牙星"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"2","parentId":"1","state":{"opened":true},"text":"五九"}],"hasChildren":true,"hasParent":false,"id":"1","parentId":"0","state":{"opened":true},"text":"总公司"}
2020-03-04 21:34:43 -请求地址 : http://localhost:8081/elec/elecInto/importElecIntoExcel
2020-03-04 21:34:43 -HTTP METHOD : POST
2020-03-04 21:34:43 -CLASS_METHOD : com.bootdo.elec.controller.ElecIntoController.importElecIntoExcel
2020-03-04 21:34:43 -参数 : [org.springframework.web.multipart.support.StandardMultipartHttpServletRequest$StandardMultipartFile@22e1f58e, com.bootdo.elec.vo.ElecVo@707f53b3, org.apache.shiro.web.servlet.ShiroHttpServletResponse@4c329a51]
2020-03-04 21:34:44 -==>  Preparing: UPDATE ELEC SET ELEC_SUM = ELEC_SUM + ? WHERE CREATE_TIME = ? and user_org = ? and USER_ID = ? and USER_NAME = ? and `user_type` = 'B' 
2020-03-04 21:34:44 -==> Parameters: 100(BigDecimal), 2019-12(String), 2(String), 1-0005(String), 李生(String)
2020-03-04 21:34:44 -<==    Updates: 1
2020-03-04 21:34:44 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, `user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec WHERE CREATE_TIME = ? and user_org = ? and USER_ID = ? and USER_NAME = ? and `user_type` = 'B' 
2020-03-04 21:34:44 -==> Parameters: 2019-12(String), 2(String), 1-0005(String), 李生(String)
2020-03-04 21:34:44 -<==      Total: 1
2020-03-04 21:34:44 -==>  Preparing: insert into elec_log ( `user_id`, `user_name`, `user_type`, `user_org`, `elec_type`, `elec_money`, `money_date`, `create_time`, `create_by`, `update_time`, `update_by`, `remark` ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-03-04 21:34:44 -==> Parameters: 1-0005(String), 李生(String), B(String), 2(String), 1(String), 100(BigDecimal), 2020-03-04 21:34:44.391(Timestamp), 2019-12(String), admin(String), 2020-03-04 21:34:44.391(Timestamp), admin(String), null
2020-03-04 21:34:44 -<==    Updates: 1
2020-03-04 21:34:44 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`start`,`end`,`hu`,`elec_price`,`elec_amount`,`elec_cost`,`elec_sum`,`elec_money`,`heat_price`,`heat_area`,`heat_cost`,`heat_sum`,`heat_money`,`water_price`,`water_cost`,`water_sum`,`water_money`,`print_date`,`print_money`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from print where user_id = ? and user_org = ? and create_time = ? and date_format(print_date,'%Y-%m-%d') = date_format(?,'%Y-%m-%d') 
2020-03-04 21:34:44 -==> Parameters: 1-0005(String), 2(String), 2019-12(String), 2020-03-04 21:34:44.391(Timestamp)
2020-03-04 21:34:44 -<==      Total: 1
2020-03-04 21:34:44 -==>  Preparing: update print SET `user_id` = ?, `user_name` = ?, `user_type` = ?, `user_org` = ?, `start` = ?, `end` = ?, `hu` = ?, `elec_price` = ?, `elec_amount` = ?, `elec_cost` = ?, `elec_sum` = ?, `elec_money` = ?, `print_date` = ?, `create_time` = ?, `create_by` = ?, `update_time` = ?, `update_by` = ? where id = ? 
2020-03-04 21:34:44 -==> Parameters: 1-0005(String), 李生(String), B(String), 2(String), 8481.0(BigDecimal), 8581.0(BigDecimal), 1(Integer), 0.465(BigDecimal), 100.00(BigDecimal), 46.50(BigDecimal), 800.01(BigDecimal), 100(BigDecimal), 2020-03-04 21:34:44.447(Timestamp), 2019-12(String), admin(String), 2020-03-04 21:34:44.447(Timestamp), admin(String), 12253(Long)
2020-03-04 21:34:44 -<==    Updates: 1
2020-03-04 21:34:44 -==>  Preparing: UPDATE ELEC SET ELEC_SUM = ELEC_SUM + ? WHERE CREATE_TIME = ? and user_org = ? and USER_ID = ? and USER_NAME = ? and `user_type` = 'B' 
2020-03-04 21:34:44 -==> Parameters: 100(BigDecimal), 2019-12(String), 2(String), 1-0008(String), 王明刚1(String)
2020-03-04 21:34:44 -<==    Updates: 0
2020-03-04 21:34:44 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, `user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec WHERE CREATE_TIME = ? and user_org = ? and USER_ID = ? and USER_NAME = ? and `user_type` = 'B' 
2020-03-04 21:34:44 -==> Parameters: 2019-12(String), 2(String), 1-0008(String), 王明刚1(String)
2020-03-04 21:34:44 -<==      Total: 0
2020-03-04 21:34:44 -耗时 : 838
2020-03-04 21:34:44 -返回值 : 第3行，数据与数据库不匹配请认真编写
2020-03-04 21:35:25 -请求地址 : http://localhost:8081/elec/elec/list
2020-03-04 21:35:25 -HTTP METHOD : GET
2020-03-04 21:35:25 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.list
2020-03-04 21:35:25 -参数 : [{limit=10, offset=0, userType=B, elecType=, userOrg=2, userId=, createTime=2019-12, queryType=1}, com.bootdo.elec.domain.ElecDO@8b21dc9]
2020-03-04 21:35:25 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, `user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec WHERE `create_time` = ? and user_type = ? and user_org = ? order by id asc limit ?, ? 
2020-03-04 21:35:25 -==> Parameters: 2019-12(String), B(String), 2(String), 0(Integer), 10(Integer)
2020-03-04 21:35:25 -<==      Total: 10
2020-03-04 21:35:25 -==>  Preparing: select count(*) from elec WHERE `create_time` = ? and user_type = ? and user_org = ? 
2020-03-04 21:35:25 -==> Parameters: 2019-12(String), B(String), 2(String)
2020-03-04 21:35:25 -<==      Total: 1
2020-03-04 21:35:25 -耗时 : 337
2020-03-04 21:35:25 -返回值 : com.bootdo.common.utils.PageUtils@673b8aae
2020-03-04 21:39:11 -==>  Preparing: select distinct m.perms from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id = ur.role_id where ur.user_id = ? 
2020-03-04 21:39:11 -==> Parameters: 1(Long)
2020-03-04 21:39:11 -<==      Total: 94
2020-03-04 21:39:11 -请求地址 : http://localhost:8081/elec/elecInto
2020-03-04 21:39:11 -HTTP METHOD : GET
2020-03-04 21:39:11 -CLASS_METHOD : com.bootdo.elec.controller.ElecIntoController.ElecInto
2020-03-04 21:39:11 -参数 : []
2020-03-04 21:39:11 -耗时 : 3
2020-03-04 21:39:11 -返回值 : elec/elecInto/elecInto
2020-03-04 21:39:26 -请求地址 : http://localhost:8081/system/sysDept/treeView
2020-03-04 21:39:26 -HTTP METHOD : GET
2020-03-04 21:39:26 -CLASS_METHOD : com.bootdo.system.controller.DeptController.treeView
2020-03-04 21:39:26 -参数 : [ModelAndView: materialized View is [null]; model is null]
2020-03-04 21:39:26 -耗时 : 0
2020-03-04 21:39:26 -返回值 : system/dept/deptTree
2020-03-04 21:39:26 -请求地址 : http://localhost:8081/system/sysDept/tree
2020-03-04 21:39:26 -HTTP METHOD : GET
2020-03-04 21:39:26 -CLASS_METHOD : com.bootdo.system.controller.DeptController.tree
2020-03-04 21:39:26 -参数 : []
2020-03-04 21:39:26 -==>  Preparing: select `dept_id`,`parent_id`,`name`,`order_num`,`del_flag` from sys_dept order by dept_id desc 
2020-03-04 21:39:26 -==> Parameters: 
2020-03-04 21:39:26 -<==      Total: 3
2020-03-04 21:39:26 -耗时 : 11
2020-03-04 21:39:26 -返回值 : {"checked":false,"children":[{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"3","parentId":"1","state":{"opened":true},"text":"牙星"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"2","parentId":"1","state":{"opened":true},"text":"五九"}],"hasChildren":true,"hasParent":false,"id":"1","parentId":"0","state":{"opened":true},"text":"总公司"}
2020-03-04 21:39:45 -请求地址 : http://localhost:8081/elec/elecInto/importElecIntoExcel
2020-03-04 21:39:45 -HTTP METHOD : POST
2020-03-04 21:39:45 -CLASS_METHOD : com.bootdo.elec.controller.ElecIntoController.importElecIntoExcel
2020-03-04 21:39:45 -参数 : [org.springframework.web.multipart.support.StandardMultipartHttpServletRequest$StandardMultipartFile@161e14d3, com.bootdo.elec.vo.ElecVo@6a8eeff, org.apache.shiro.web.servlet.ShiroHttpServletResponse@3b5fcf9a]
2020-03-04 21:39:45 -==>  Preparing: UPDATE ELEC SET ELEC_SUM = ELEC_SUM + ? WHERE CREATE_TIME = ? and user_org = ? and USER_ID = ? and USER_NAME = ? and `user_type` = 'B' 
2020-03-04 21:39:45 -==> Parameters: 100(BigDecimal), 2019-12(String), 2(String), 1-0005(String), 李生(String)
2020-03-04 21:39:45 -<==    Updates: 1
2020-03-04 21:39:45 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, `user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec WHERE CREATE_TIME = ? and user_org = ? and USER_ID = ? and USER_NAME = ? and `user_type` = 'B' 
2020-03-04 21:39:45 -==> Parameters: 2019-12(String), 2(String), 1-0005(String), 李生(String)
2020-03-04 21:39:45 -<==      Total: 1
2020-03-04 21:39:45 -==>  Preparing: insert into elec_log ( `user_id`, `user_name`, `user_type`, `user_org`, `elec_type`, `elec_money`, `money_date`, `create_time`, `create_by`, `update_time`, `update_by`, `remark` ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-03-04 21:39:45 -==> Parameters: 1-0005(String), 李生(String), B(String), 2(String), 1(String), 100(BigDecimal), 2020-03-04 21:39:45.571(Timestamp), 2019-12(String), admin(String), 2020-03-04 21:39:45.571(Timestamp), admin(String), null
2020-03-04 21:39:45 -<==    Updates: 1
2020-03-04 21:39:45 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`start`,`end`,`hu`,`elec_price`,`elec_amount`,`elec_cost`,`elec_sum`,`elec_money`,`heat_price`,`heat_area`,`heat_cost`,`heat_sum`,`heat_money`,`water_price`,`water_cost`,`water_sum`,`water_money`,`print_date`,`print_money`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from print where user_id = ? and user_org = ? and create_time = ? and date_format(print_date,'%Y-%m-%d') = date_format(?,'%Y-%m-%d') 
2020-03-04 21:39:45 -==> Parameters: 1-0005(String), 2(String), 2019-12(String), 2020-03-04 21:39:45.571(Timestamp)
2020-03-04 21:39:45 -<==      Total: 1
2020-03-04 21:39:45 -==>  Preparing: update print SET `user_id` = ?, `user_name` = ?, `user_type` = ?, `user_org` = ?, `start` = ?, `end` = ?, `hu` = ?, `elec_price` = ?, `elec_amount` = ?, `elec_cost` = ?, `elec_sum` = ?, `elec_money` = ?, `print_date` = ?, `create_time` = ?, `create_by` = ?, `update_time` = ?, `update_by` = ? where id = ? 
2020-03-04 21:39:45 -==> Parameters: 1-0005(String), 李生(String), B(String), 2(String), 8481.0(BigDecimal), 8581.0(BigDecimal), 1(Integer), 0.465(BigDecimal), 100.00(BigDecimal), 46.50(BigDecimal), 900.01(BigDecimal), 100(BigDecimal), 2020-03-04 21:39:45.795(Timestamp), 2019-12(String), admin(String), 2020-03-04 21:39:45.795(Timestamp), admin(String), 12253(Long)
2020-03-04 21:39:45 -<==    Updates: 1
2020-03-04 21:39:45 -==>  Preparing: UPDATE ELEC SET ELEC_SUM = ELEC_SUM + ? WHERE CREATE_TIME = ? and user_org = ? and USER_ID = ? and USER_NAME = ? and `user_type` = 'B' 
2020-03-04 21:39:45 -==> Parameters: 100(BigDecimal), 2019-12(String), 2(String), 1-0008(String), 王明刚1(String)
2020-03-04 21:39:45 -<==    Updates: 0
2020-03-04 21:39:45 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, `user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec WHERE CREATE_TIME = ? and user_org = ? and USER_ID = ? and USER_NAME = ? and `user_type` = 'B' 
2020-03-04 21:39:45 -==> Parameters: 2019-12(String), 2(String), 1-0008(String), 王明刚1(String)
2020-03-04 21:39:46 -<==      Total: 0
2020-03-04 21:39:46 -耗时 : 1085
2020-03-04 21:39:46 -返回值 : 第3行，数据与数据库不匹配请认真编写
2020-03-04 21:39:52 -请求地址 : http://localhost:8081/elec/elec/list
2020-03-04 21:39:52 -HTTP METHOD : GET
2020-03-04 21:39:52 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.list
2020-03-04 21:39:52 -参数 : [{limit=10, offset=0, userType=B, elecType=, userOrg=2, userId=, createTime=2019-12, queryType=1}, com.bootdo.elec.domain.ElecDO@7dab4137]
2020-03-04 21:39:52 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, `user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec WHERE `create_time` = ? and user_type = ? and user_org = ? order by id asc limit ?, ? 
2020-03-04 21:39:52 -==> Parameters: 2019-12(String), B(String), 2(String), 0(Integer), 10(Integer)
2020-03-04 21:39:52 -<==      Total: 10
2020-03-04 21:39:52 -==>  Preparing: select count(*) from elec WHERE `create_time` = ? and user_type = ? and user_org = ? 
2020-03-04 21:39:52 -==> Parameters: 2019-12(String), B(String), 2(String)
2020-03-04 21:39:52 -<==      Total: 1
2020-03-04 21:39:52 -耗时 : 395
2020-03-04 21:39:52 -返回值 : com.bootdo.common.utils.PageUtils@16d6b9e2
2020-03-04 21:41:34 -请求地址 : http://localhost:8081/elec/elec
2020-03-04 21:41:34 -HTTP METHOD : GET
2020-03-04 21:41:34 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.Elec
2020-03-04 21:41:34 -参数 : []
2020-03-04 21:41:34 -耗时 : 1
2020-03-04 21:41:34 -返回值 : elec/elec/elec
2020-03-04 21:41:34 -请求地址 : http://localhost:8081/common/dict/list/userType
2020-03-04 21:41:34 -HTTP METHOD : GET
2020-03-04 21:41:34 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2020-03-04 21:41:34 -参数 : [userType]
2020-03-04 21:41:34 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2020-03-04 21:41:34 -请求地址 : http://localhost:8081/common/dict/list/elecType
2020-03-04 21:41:34 -HTTP METHOD : GET
2020-03-04 21:41:34 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2020-03-04 21:41:34 -参数 : [elecType]
2020-03-04 21:41:34 -==> Parameters: userType(String)
2020-03-04 21:41:34 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2020-03-04 21:41:34 -==> Parameters: elecType(String)
2020-03-04 21:41:34 -请求地址 : http://localhost:8081/elec/elec/list
2020-03-04 21:41:34 -HTTP METHOD : GET
2020-03-04 21:41:34 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.list
2020-03-04 21:41:34 -参数 : [{limit=10, offset=0, userType=, elecType=, userOrg=, userId=, createTime=, queryType=1}, com.bootdo.elec.domain.ElecDO@7172afc3]
2020-03-04 21:41:34 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, `user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec order by id asc limit ?, ? 
2020-03-04 21:41:34 -==> Parameters: 0(Integer), 10(Integer)
2020-03-04 21:41:34 -<==      Total: 10
2020-03-04 21:41:34 -==>  Preparing: select count(*) from elec 
2020-03-04 21:41:34 -==> Parameters: 
2020-03-04 21:41:34 -<==      Total: 11
2020-03-04 21:41:34 -耗时 : 83
2020-03-04 21:41:34 -返回值 : [DictDO{id=180, name='矿民用', value='1', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=179, name='矿商业', value='2', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=178, name='矿工业1', value='3', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=177, name='矿工业2', value='4', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=176, name='矿工业3', value='5', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=175, name='乌民用', value='6', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=174, name='乌商用', value='7', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=173, name='乌工业', value='8', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=172, name='煤民用', value='9', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=171, name='煤商业', value='10', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=170, name='政府用电', value='11', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2020-03-04 21:41:34 -<==      Total: 4
2020-03-04 21:41:34 -耗时 : 99
2020-03-04 21:41:34 -返回值 : [DictDO{id=145, name='银行转账', value='D', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=144, name='微信支付', value='C', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2020-03-04 21:41:34 -<==      Total: 1
2020-03-04 21:41:34 -耗时 : 58
2020-03-04 21:41:34 -返回值 : com.bootdo.common.utils.PageUtils@232c9583
2020-03-04 21:42:48 -请求地址 : http://localhost:8081/index
2020-03-04 21:42:49 -HTTP METHOD : GET
2020-03-04 21:42:49 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2020-03-04 21:42:49 -参数 : [{}]
2020-03-04 21:42:49 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2020-03-04 21:42:49 -==> Parameters: 1(Long)
2020-03-04 21:42:49 -<==      Total: 50
2020-03-04 21:42:49 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2020-03-04 21:42:49 -==> Parameters: 138(Long)
2020-03-04 21:42:49 -<==      Total: 1
2020-03-04 21:42:49 -耗时 : 272
2020-03-04 21:42:49 -返回值 : index_v1
2020-03-04 21:42:49 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-03-04 21:42:49 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 272(Integer), com.bootdo.system.controller.LoginController.index()(String), {"menus":[{"attributes":{"icon":"fa fa-money","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-money","url":"/moneyList/moneyList"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"102","parentId":"106","text":"现金缴费"},{"attributes":{"icon":"fa fa-book","url":"/moneyLog/elecLog"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"107","parentId":"106","text":"缴费记录"},{"attributes":{"icon":"fa fa-image","url":"/moneyList/moneyWZ"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"164","parentId":"106","text":"乌镇管理"}],"hasChildren":true,"hasParent":false,"id":"106","parentId":"0","text":"收费管理"},{"attributes":{"icon":"fa fa-lightbulb-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/elec/elec"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"121","parentId":"103","text":"电费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"elec/elecInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"122","parentId":"103","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"elec/elecUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"123","parentId":"103","text":"电表上传"},{"attributes":{"icon":"fa fa-cc","url":"/elec/elecPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"124","parentId":"103","text":"电价管理"}],"hasChildren":true,"hasParent":false,"id":"103","parentId":"0","text":"电费管理"},{"attributes":{"icon":"fa fa-tint","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/water/water"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"117","parentId":"105","text":"水费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"water/waterInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"118","parentId":"105","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"water/waterUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"119","parentId":"105","text":"水费生成"},{"attributes":{"icon":"fa fa-cc","url":"/water/waterPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"120","parentId":"105","text":"水价管理"}],"hasChildren":true,"hasParent":false,"id":"105","parentId":"0","text":"水费管理"},{"attributes":{"icon":"fa fa-fire","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/heat/heat"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"113","parentId":"104","text":"暖费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"heat/heatInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"114","parentId":"104","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"heat/heatUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"115","parentId":"104","text":"暖费生成"},{"attributes":{"icon":"","url":"/heat/heatPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"116","parentId":"104","text":"暖价管理"}],"hasChildren":true,"hasParent":false,"id":"104","parentId":"0","text":"暖费管理"},{"attributes":{"icon":"fa fa-vcard-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-bomb","url":"/print/print"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"149","parentId":"108","text":"票据记录"}],"hasChildren":true,"hasParent":false,"id":"108","parentId":"0","text":"票据管理"},{"attributes":{"icon":"fa fa-bar-chart","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-area-chart","url":"/chart/graph_echarts.html"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","text":"百度chart"},{"attributes":{"icon":"fa fa-sun-o","url":"charts/countDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"109","parentId":"97","text":"日统计报表"},{"attributes":{"icon":"fa fa-calendar","url":"charts/tableDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"161","parentId":"97","text":"日统计表格"},{"attributes":{"icon":"fa fa-registered","url":"charts/countMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"110","parentId":"97","text":"月统计报表"},{"attributes":{"icon":"fa fa-building-o","url":"charts/tableElecMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"162","parentId":"97","text":"月统计表格"},{"attributes":{"icon":"fa fa-support","url":"charts/countYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"111","parentId":"97","text":"年统计报表"},{"attributes":{"icon":"fa fa-book","url":"charts/tableElecYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"163","parentId":"97","text":"年统计表格"},{"attributes":{"icon":"fa fa-money","url":"charts/countOwe"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"155","(String), 127.0.0.1(String), 2020-03-04 21:42:49.274(Timestamp)
2020-03-04 21:42:49 -<==    Updates: 1
2020-03-04 21:42:49 -请求地址 : http://localhost:8081/oa/notify/message
2020-03-04 21:42:49 -请求地址 : http://localhost:8081/main
2020-03-04 21:42:49 -HTTP METHOD : GET
2020-03-04 21:42:49 -HTTP METHOD : GET
2020-03-04 21:42:49 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2020-03-04 21:42:49 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2020-03-04 21:42:49 -参数 : []
2020-03-04 21:42:49 -参数 : []
2020-03-04 21:42:49 -耗时 : 1
2020-03-04 21:42:49 -返回值 : main
2020-03-04 21:42:49 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2020-03-04 21:42:49 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2020-03-04 21:42:49 -请求地址 : http://localhost:8081/main
2020-03-04 21:42:49 -HTTP METHOD : GET
2020-03-04 21:42:49 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2020-03-04 21:42:49 -参数 : []
2020-03-04 21:42:49 -耗时 : 0
2020-03-04 21:42:49 -返回值 : main
2020-03-04 21:42:50 -<==      Total: 0
2020-03-04 21:42:50 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2020-03-04 21:42:50 -==> Parameters: 1(Long), 0(String)
2020-03-04 21:42:50 -<==      Total: 1
2020-03-04 21:42:50 -耗时 : 497
2020-03-04 21:42:50 -返回值 : com.bootdo.common.utils.PageUtils@23382667
2020-03-04 21:42:54 -请求地址 : http://localhost:8081/elec/elecInto
2020-03-04 21:42:54 -HTTP METHOD : GET
2020-03-04 21:42:54 -CLASS_METHOD : com.bootdo.elec.controller.ElecIntoController.ElecInto
2020-03-04 21:42:54 -参数 : []
2020-03-04 21:42:54 -耗时 : 0
2020-03-04 21:42:54 -返回值 : elec/elecInto/elecInto
2020-03-04 21:43:01 -请求地址 : http://localhost:8081/system/sysDept/treeView
2020-03-04 21:43:01 -HTTP METHOD : GET
2020-03-04 21:43:01 -CLASS_METHOD : com.bootdo.system.controller.DeptController.treeView
2020-03-04 21:43:01 -参数 : [ModelAndView: materialized View is [null]; model is null]
2020-03-04 21:43:01 -耗时 : 1
2020-03-04 21:43:01 -返回值 : system/dept/deptTree
2020-03-04 21:43:01 -请求地址 : http://localhost:8081/system/sysDept/tree
2020-03-04 21:43:01 -HTTP METHOD : GET
2020-03-04 21:43:01 -CLASS_METHOD : com.bootdo.system.controller.DeptController.tree
2020-03-04 21:43:01 -参数 : []
2020-03-04 21:43:01 -==>  Preparing: select `dept_id`,`parent_id`,`name`,`order_num`,`del_flag` from sys_dept order by dept_id desc 
2020-03-04 21:43:01 -==> Parameters: 
2020-03-04 21:43:01 -<==      Total: 3
2020-03-04 21:43:01 -耗时 : 22
2020-03-04 21:43:01 -返回值 : {"checked":false,"children":[{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"3","parentId":"1","state":{"opened":true},"text":"牙星"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"2","parentId":"1","state":{"opened":true},"text":"五九"}],"hasChildren":true,"hasParent":false,"id":"1","parentId":"0","state":{"opened":true},"text":"总公司"}
2020-03-04 21:43:09 -请求地址 : http://localhost:8081/elec/elecInto/importElecIntoExcel
2020-03-04 21:43:09 -HTTP METHOD : POST
2020-03-04 21:43:09 -CLASS_METHOD : com.bootdo.elec.controller.ElecIntoController.importElecIntoExcel
2020-03-04 21:43:09 -参数 : [org.springframework.web.multipart.support.StandardMultipartHttpServletRequest$StandardMultipartFile@8032286, com.bootdo.elec.vo.ElecVo@72dd2a5, org.apache.shiro.web.servlet.ShiroHttpServletResponse@1a15e912]
2020-03-04 21:43:10 -==>  Preparing: UPDATE ELEC SET ELEC_SUM = ELEC_SUM + ? WHERE CREATE_TIME = ? and user_org = ? and USER_ID = ? and USER_NAME = ? and `user_type` = 'B' 
2020-03-04 21:43:10 -==> Parameters: 100(BigDecimal), 2019-12(String), 2(String), 1-0005(String), 李生(String)
2020-03-04 21:43:10 -<==    Updates: 1
2020-03-04 21:43:10 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, `user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec WHERE CREATE_TIME = ? and user_org = ? and USER_ID = ? and USER_NAME = ? and `user_type` = 'B' 
2020-03-04 21:43:10 -==> Parameters: 2019-12(String), 2(String), 1-0005(String), 李生(String)
2020-03-04 21:43:10 -<==      Total: 1
2020-03-04 21:43:10 -==>  Preparing: insert into elec_log ( `user_id`, `user_name`, `user_type`, `user_org`, `elec_type`, `elec_money`, `money_date`, `create_time`, `create_by`, `update_time`, `update_by`, `remark` ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-03-04 21:43:10 -==> Parameters: 1-0005(String), 李生(String), B(String), 2(String), 1(String), 100(BigDecimal), 2020-03-04 21:43:10.571(Timestamp), 2019-12(String), admin(String), 2020-03-04 21:43:10.571(Timestamp), admin(String), null
2020-03-04 21:43:10 -<==    Updates: 1
2020-03-04 21:43:10 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`start`,`end`,`hu`,`elec_price`,`elec_amount`,`elec_cost`,`elec_sum`,`elec_money`,`heat_price`,`heat_area`,`heat_cost`,`heat_sum`,`heat_money`,`water_price`,`water_cost`,`water_sum`,`water_money`,`print_date`,`print_money`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from print where user_id = ? and user_org = ? and create_time = ? and date_format(print_date,'%Y-%m-%d') = date_format(?,'%Y-%m-%d') 
2020-03-04 21:43:10 -==> Parameters: 1-0005(String), 2(String), 2019-12(String), 2020-03-04 21:43:10.571(Timestamp)
2020-03-04 21:43:10 -<==      Total: 1
2020-03-04 21:43:10 -==>  Preparing: update print SET `user_id` = ?, `user_name` = ?, `user_type` = ?, `user_org` = ?, `start` = ?, `end` = ?, `hu` = ?, `elec_price` = ?, `elec_amount` = ?, `elec_cost` = ?, `elec_sum` = ?, `elec_money` = ?, `print_date` = ?, `create_time` = ?, `create_by` = ?, `update_time` = ?, `update_by` = ? where id = ? 
2020-03-04 21:43:10 -==> Parameters: 1-0005(String), 李生(String), B(String), 2(String), 8481.0(BigDecimal), 8581.0(BigDecimal), 1(Integer), 0.465(BigDecimal), 100.00(BigDecimal), 46.50(BigDecimal), 1000.01(BigDecimal), 100(BigDecimal), 2020-03-04 21:43:10.686(Timestamp), 2019-12(String), admin(String), 2020-03-04 21:43:10.686(Timestamp), admin(String), 12253(Long)
2020-03-04 21:43:10 -<==    Updates: 1
2020-03-04 21:43:10 -==>  Preparing: UPDATE ELEC SET ELEC_SUM = ELEC_SUM + ? WHERE CREATE_TIME = ? and user_org = ? and USER_ID = ? and USER_NAME = ? and `user_type` = 'B' 
2020-03-04 21:43:10 -==> Parameters: 100(BigDecimal), 2019-12(String), 2(String), 1-0008(String), 王明刚1(String)
2020-03-04 21:43:10 -<==    Updates: 0
2020-03-04 21:43:10 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, `user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec WHERE CREATE_TIME = ? and user_org = ? and USER_ID = ? and USER_NAME = ? and `user_type` = 'B' 
2020-03-04 21:43:10 -==> Parameters: 2019-12(String), 2(String), 1-0008(String), 王明刚1(String)
2020-03-04 21:43:10 -<==      Total: 0
2020-03-04 21:43:11 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-03-04 21:43:11 -==> Parameters: 1(Long), admin(String), error(String), null, http://localhost:8081/elec/elecInto/importElecIntoExcel(String), java.lang.reflect.UndeclaredThrowableException(String), null, 2020-03-04 21:43:11.329(Timestamp)
2020-03-04 21:43:11 -<==    Updates: 1
2020-03-04 21:43:11 -null
java.lang.reflect.UndeclaredThrowableException: null
	at com.bootdo.elec.service.impl.ElecIntoServiceImpl$$EnhancerBySpringCGLIB$$d16c0b50.importElecIntoExcel(<generated>)
	at com.bootdo.elec.controller.ElecIntoController.importElecIntoExcel(ElecIntoController.java:65)
	at com.bootdo.elec.controller.ElecIntoController$$FastClassBySpringCGLIB$$3f35846e.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:204)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:746)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.bootdo.common.aspect.WebLogAspect.doAround(WebLogAspect.java:58)
	at sun.reflect.GeneratedMethodAccessor170.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.bootdo.elec.controller.ElecIntoController$$EnhancerBySpringCGLIB$$d87de91d.importElecIntoExcel(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:209)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:877)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:783)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:991)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:925)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:974)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:877)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:661)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:851)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:61)
	at org.apache.shiro.web.servlet.AdviceFilter.executeChain(AdviceFilter.java:108)
	at org.apache.shiro.web.servlet.AdviceFilter.doFilterInternal(AdviceFilter.java:137)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:66)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)
	at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)
	at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)
	at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)
	at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:383)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:109)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:496)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:790)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1468)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:745)
Caused by: java.lang.Exception: java.lang.Exception: 第3行，数据与数据库不匹配请认真编写
	at com.bootdo.elec.service.impl.ElecIntoServiceImpl.importElecIntoExcel(ElecIntoServiceImpl.java:182)
	at com.bootdo.elec.service.impl.ElecIntoServiceImpl$$FastClassBySpringCGLIB$$a9130840.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:204)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:746)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:294)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:98)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	... 94 common frames omitted
Caused by: java.lang.Exception: 第3行，数据与数据库不匹配请认真编写
	at com.bootdo.elec.service.impl.ElecIntoServiceImpl.importElecIntoExcel(ElecIntoServiceImpl.java:91)
	... 102 common frames omitted
2020-03-04 21:43:24 -请求地址 : http://localhost:8081/elec/elec
2020-03-04 21:43:24 -HTTP METHOD : GET
2020-03-04 21:43:24 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.Elec
2020-03-04 21:43:24 -参数 : []
2020-03-04 21:43:24 -耗时 : 0
2020-03-04 21:43:24 -返回值 : elec/elec/elec
2020-03-04 21:43:25 -请求地址 : http://localhost:8081/common/dict/list/elecType
2020-03-04 21:43:25 -HTTP METHOD : GET
2020-03-04 21:43:25 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2020-03-04 21:43:25 -参数 : [elecType]
2020-03-04 21:43:25 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2020-03-04 21:43:25 -==> Parameters: elecType(String)
2020-03-04 21:43:25 -请求地址 : http://localhost:8081/common/dict/list/userType
2020-03-04 21:43:25 -HTTP METHOD : GET
2020-03-04 21:43:25 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2020-03-04 21:43:25 -参数 : [userType]
2020-03-04 21:43:25 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2020-03-04 21:43:25 -==> Parameters: userType(String)
2020-03-04 21:43:25 -请求地址 : http://localhost:8081/elec/elec/list
2020-03-04 21:43:25 -HTTP METHOD : GET
2020-03-04 21:43:25 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.list
2020-03-04 21:43:25 -参数 : [{limit=10, offset=0, userType=, elecType=, userOrg=, userId=, createTime=, queryType=1}, com.bootdo.elec.domain.ElecDO@5ac6aaea]
2020-03-04 21:43:25 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, `user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec order by id asc limit ?, ? 
2020-03-04 21:43:25 -==> Parameters: 0(Integer), 10(Integer)
2020-03-04 21:43:25 -<==      Total: 4
2020-03-04 21:43:25 -<==      Total: 11
2020-03-04 21:43:25 -耗时 : 123
2020-03-04 21:43:25 -返回值 : [DictDO{id=145, name='银行转账', value='D', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=144, name='微信支付', value='C', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2020-03-04 21:43:25 -耗时 : 145
2020-03-04 21:43:25 -返回值 : [DictDO{id=180, name='矿民用', value='1', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=179, name='矿商业', value='2', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=178, name='矿工业1', value='3', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=177, name='矿工业2', value='4', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=176, name='矿工业3', value='5', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=175, name='乌民用', value='6', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=174, name='乌商用', value='7', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=173, name='乌工业', value='8', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=172, name='煤民用', value='9', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=171, name='煤商业', value='10', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=170, name='政府用电', value='11', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2020-03-04 21:43:25 -<==      Total: 10
2020-03-04 21:43:25 -==>  Preparing: select count(*) from elec 
2020-03-04 21:43:25 -==> Parameters: 
2020-03-04 21:43:25 -<==      Total: 1
2020-03-04 21:43:25 -耗时 : 499
2020-03-04 21:43:25 -返回值 : com.bootdo.common.utils.PageUtils@523c89a9
2020-03-04 21:43:37 -请求地址 : http://localhost:8081/elec/elec/list
2020-03-04 21:43:37 -HTTP METHOD : GET
2020-03-04 21:43:37 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.list
2020-03-04 21:43:37 -参数 : [{limit=10, offset=0, userType=B, elecType=, userOrg=, userId=, createTime=2019-12, queryType=1, type=B}, com.bootdo.elec.domain.ElecDO@77fe80d1]
2020-03-04 21:43:37 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, `user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec WHERE `create_time` = ? and user_type = ? order by id asc limit ?, ? 
2020-03-04 21:43:37 -==> Parameters: 2019-12(String), B(String), 0(Integer), 10(Integer)
2020-03-04 21:43:37 -<==      Total: 10
2020-03-04 21:43:37 -==>  Preparing: select count(*) from elec WHERE `create_time` = ? and user_type = ? 
2020-03-04 21:43:37 -==> Parameters: 2019-12(String), B(String)
2020-03-04 21:43:37 -<==      Total: 1
2020-03-04 21:43:37 -耗时 : 158
2020-03-04 21:43:37 -返回值 : com.bootdo.common.utils.PageUtils@38912c8c
2020-03-04 21:43:37 -请求地址 : http://localhost:8081/elec/elec/list
2020-03-04 21:43:37 -HTTP METHOD : GET
2020-03-04 21:43:37 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.list
2020-03-04 21:43:37 -参数 : [{limit=10, offset=0, userType=B, elecType=, userOrg=, userId=, createTime=2019-12, queryType=1}, com.bootdo.elec.domain.ElecDO@318f248a]
2020-03-04 21:43:37 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, `user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec WHERE `create_time` = ? and user_type = ? order by id asc limit ?, ? 
2020-03-04 21:43:37 -==> Parameters: 2019-12(String), B(String), 0(Integer), 10(Integer)
2020-03-04 21:43:38 -<==      Total: 10
2020-03-04 21:43:38 -==>  Preparing: select count(*) from elec WHERE `create_time` = ? and user_type = ? 
2020-03-04 21:43:38 -==> Parameters: 2019-12(String), B(String)
2020-03-04 21:43:38 -<==      Total: 1
2020-03-04 21:43:38 -耗时 : 127
2020-03-04 21:43:38 -返回值 : com.bootdo.common.utils.PageUtils@5eeccc11
2020-03-04 21:44:48 -Starting BootdoApplication on PC-201905091110 with PID 6020 (D:\eclipse2018-work\bootdo\target\classes started by Administrator in D:\eclipse2018-work\bootdo)
2020-03-04 21:44:48 -Running with Spring Boot v2.0.3.RELEASE, Spring v5.0.7.RELEASE
2020-03-04 21:44:48 -The following profiles are active: dev
2020-03-04 21:44:48 -Refreshing org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@76c7beb3: startup date [Wed Mar 04 21:44:48 CST 2020]; root of context hierarchy
2020-03-04 21:45:00 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-04 21:45:04 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$abbfcaca] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-04 21:45:04 -Bean 'shiroConfig' of type [com.bootdo.system.config.ShiroConfig$$EnhancerBySpringCGLIB$$9e18f971] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-04 21:45:06 -Bean 'userRealm' of type [com.bootdo.system.shiro.UserRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-04 21:45:07 -Bean 'cacheManager2' of type [net.sf.ehcache.CacheManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-04 21:45:07 -Bean 'ehCacheManager' of type [org.apache.shiro.cache.ehcache.EhCacheManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-04 21:45:07 -Cache with name 'com.bootdo.system.shiro.UserRealm.authorizationCache' does not yet exist.  Creating now.
2020-03-04 21:45:07 -Added EhCache named [com.bootdo.system.shiro.UserRealm.authorizationCache]
2020-03-04 21:45:07 -Bean 'sessionDAO' of type [org.apache.shiro.session.mgt.eis.MemorySessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-04 21:45:07 -Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-04 21:45:07 -Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-04 21:45:08 -Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-04 21:45:10 -Tomcat initialized with port(s): 8081 (http)
2020-03-04 21:45:10 -Initializing ProtocolHandler ["http-nio-8081"]
2020-03-04 21:45:10 -Starting service [Tomcat]
2020-03-04 21:45:10 -Starting Servlet Engine: Apache Tomcat/8.5.31
2020-03-04 21:45:10 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [D:\Java\JDK\jdk1.8.0_102\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;D:\Java\JDK\jdk1.8.0_102\jre\bin;D:/Java/JRE/bin/server;D:/Java/JRE/bin;D:/Java/JRE/lib/amd64;C:\ProgramData\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Windows\System32\OpenSSH\;%JAVA_HOME\bin%;;C:\Program Files (x86)\pycSafefile\x64;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;C:\Program Files\JetBrains\WebStorm 2019.2.4\bin;;D:\eclipse2018\eclipse;;.]
2020-03-04 21:45:11 -Initializing Spring embedded WebApplicationContext
2020-03-04 21:45:11 -Root WebApplicationContext: initialization completed in 22429 ms
2020-03-04 21:45:12 -Mapping filter: 'characterEncodingFilter' to: [/*]
2020-03-04 21:45:12 -Mapping filter: 'hiddenHttpMethodFilter' to: [/*]
2020-03-04 21:45:12 -Mapping filter: 'httpPutFormContentFilter' to: [/*]
2020-03-04 21:45:12 -Mapping filter: 'requestContextFilter' to: [/*]
2020-03-04 21:45:12 -Filter xssFilter was not registered (disabled)
2020-03-04 21:45:12 -Mapping filter: 'webStatFilter' to urls: [/*]
2020-03-04 21:45:12 -Mapping filter: 'shiroFilterFactoryBean' to: [/*]
2020-03-04 21:45:12 -Servlet statViewServlet mapped to [/druid/*]
2020-03-04 21:45:12 -Servlet dispatcherServlet mapped to [/]
2020-03-04 21:45:20 -ApplicationContext registed-->org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@76c7beb3: startup date [Wed Mar 04 21:44:48 CST 2020]; root of context hierarchy
2020-03-04 21:45:23 -Using default implementation for ThreadExecutor
2020-03-04 21:45:23 -Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-03-04 21:45:23 -Quartz Scheduler v.2.3.0 created.
2020-03-04 21:45:23 -RAMJobStore initialized.
2020-03-04 21:45:23 -Scheduler meta-data: Quartz Scheduler (v2.3.0) 'schedulerFactoryBean' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-03-04 21:45:23 -Quartz scheduler 'schedulerFactoryBean' initialized from an externally provided properties instance.
2020-03-04 21:45:23 -Quartz scheduler version: 2.3.0
2020-03-04 21:45:23 -JobFactory set to: com.bootdo.common.quartz.factory.JobFactory@228958a
2020-03-04 21:45:25 -Initializing ExecutorService  'clientInboundChannelExecutor'
2020-03-04 21:45:25 -Initializing ExecutorService  'clientOutboundChannelExecutor'
2020-03-04 21:45:30 -Mapped "{[/charts/countDD/exportDD],methods=[GET]}" onto public void com.bootdo.charts.controller.countDDController.exportDD(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.HeatLogVo,com.bootdo.moneyLog.vo.WaterLogVo,javax.servlet.http.HttpServletResponse)
2020-03-04 21:45:30 -Mapped "{[/charts/countDD],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.countDDController.countDD()
2020-03-04 21:45:30 -Mapped "{[/charts/countDD/getCountDD],methods=[POST]}" onto public java.util.Map<java.lang.String, java.lang.Object> com.bootdo.charts.controller.countDDController.getCountD(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo)
2020-03-04 21:45:30 -Mapped "{[/charts/countMM],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.countMMController.countMM()
2020-03-04 21:45:30 -Mapped "{[/charts/countMM/getCountMM],methods=[POST]}" onto public java.util.Map<java.lang.String, java.lang.Object> com.bootdo.charts.controller.countMMController.getCountMM(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo)
2020-03-04 21:45:30 -Mapped "{[/charts/countMM/exportMM],methods=[GET]}" onto public void com.bootdo.charts.controller.countMMController.exportMM(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.HeatLogVo,com.bootdo.moneyLog.vo.WaterLogVo,javax.servlet.http.HttpServletResponse)
2020-03-04 21:45:30 -Mapped "{[/charts/countOwe],methods=[GET]}" onto java.lang.String com.bootdo.charts.controller.countOweController.countOwe()
2020-03-04 21:45:30 -Mapped "{[/charts/countOwe/getCountOwe],methods=[POST]}" onto public java.util.Map<java.lang.String, java.lang.Object> com.bootdo.charts.controller.countOweController.getCountOwe(com.bootdo.elec.vo.ElecVo,com.bootdo.water.vo.WaterVo,com.bootdo.heat.vo.HeatVo)
2020-03-04 21:45:30 -Mapped "{[/charts/countOwe/exportOwe],methods=[GET]}" onto public void com.bootdo.charts.controller.countOweController.exportOwe(com.bootdo.elec.vo.ElecVo,com.bootdo.heat.vo.HeatVo,com.bootdo.water.vo.WaterVo,javax.servlet.http.HttpServletResponse)
2020-03-04 21:45:30 -Mapped "{[/charts/countRun],methods=[GET]}" onto java.lang.String com.bootdo.charts.controller.countRunController.countRun()
2020-03-04 21:45:30 -Mapped "{[/charts/countRun/getCountRun],methods=[POST]}" onto public java.util.Map<java.lang.String, java.lang.Object> com.bootdo.charts.controller.countRunController.getCountRun(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo)
2020-03-04 21:45:30 -Mapped "{[/charts/countRun/exportRun],methods=[GET]}" onto public void com.bootdo.charts.controller.countRunController.exportRun(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.HeatLogVo,com.bootdo.moneyLog.vo.WaterLogVo,javax.servlet.http.HttpServletResponse)
2020-03-04 21:45:30 -Mapped "{[/charts/countYY/exportYY],methods=[GET]}" onto public void com.bootdo.charts.controller.countYYController.exportYY(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.HeatLogVo,com.bootdo.moneyLog.vo.WaterLogVo,javax.servlet.http.HttpServletResponse)
2020-03-04 21:45:30 -Mapped "{[/charts/countYY],methods=[GET]}" onto java.lang.String com.bootdo.charts.controller.countYYController.countYY()
2020-03-04 21:45:30 -Mapped "{[/charts/countYY/getCountYY],methods=[POST]}" onto public java.util.Map<java.lang.String, java.lang.Object> com.bootdo.charts.controller.countYYController.getCountYY(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo)
2020-03-04 21:45:30 -Mapped "{[/charts/tableDD/exportDD],methods=[GET]}" onto public void com.bootdo.charts.controller.tableDDController.exportDD(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.HeatLogVo,com.bootdo.moneyLog.vo.WaterLogVo,javax.servlet.http.HttpServletResponse)
2020-03-04 21:45:30 -Mapped "{[/charts/tableDD],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.tableDDController.countDD()
2020-03-04 21:45:30 -Mapped "{[/charts/tableDD/getTableDD],methods=[POST]}" onto public java.util.Map<java.lang.String, java.lang.Object> com.bootdo.charts.controller.tableDDController.getTableDD(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo)
2020-03-04 21:45:30 -Mapped "{[/charts/tableElecMM/tableElecMM],methods=[POST]}" onto public java.util.Map<java.lang.String, java.lang.Object> com.bootdo.charts.controller.tableElecMMController.tableElecMM(com.bootdo.elec.vo.ElecVo,com.bootdo.moneyLog.vo.ElecLogVo)
2020-03-04 21:45:30 -Mapped "{[/charts/tableElecMM],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.tableElecMMController.tableElecMM()
2020-03-04 21:45:30 -Mapped "{[/charts/tableElecMM/exportElecMM],methods=[GET]}" onto public void com.bootdo.charts.controller.tableElecMMController.exportElecMM(com.bootdo.elec.vo.ElecVo,com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse)
2020-03-04 21:45:30 -Mapped "{[/charts/tableElecYY/tableElecYY],methods=[POST]}" onto public java.util.Map<java.lang.String, java.lang.Object> com.bootdo.charts.controller.tableElecYYController.tableElecYY(com.bootdo.elec.vo.ElecVo,com.bootdo.moneyLog.vo.ElecLogVo)
2020-03-04 21:45:30 -Mapped "{[/charts/tableElecYY],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.tableElecYYController.tableElecYY()
2020-03-04 21:45:30 -Mapped "{[/charts/tableElecYY/exportElecYY],methods=[GET]}" onto public void com.bootdo.charts.controller.tableElecYYController.exportElecYY(com.bootdo.elec.vo.ElecVo,com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse)
2020-03-04 21:45:30 -Mapped "{[/charts/tableHeatMM/tableHeatMM],methods=[POST]}" onto public java.util.Map<java.lang.String, java.lang.Object> com.bootdo.charts.controller.tableHeatMMController.tableHeatMM(com.bootdo.heat.vo.HeatVo,com.bootdo.moneyLog.vo.HeatLogVo)
2020-03-04 21:45:30 -Mapped "{[/charts/tableHeatMM],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.tableHeatMMController.tableHeatMM()
2020-03-04 21:45:30 -Mapped "{[/charts/tableHeatMM/exportHeatMM],methods=[GET]}" onto public void com.bootdo.charts.controller.tableHeatMMController.exportHeatMM(com.bootdo.heat.vo.HeatVo,com.bootdo.moneyLog.vo.HeatLogVo,javax.servlet.http.HttpServletResponse)
2020-03-04 21:45:30 -Mapped "{[/charts/tableHeatYY/exportHeatYY],methods=[GET]}" onto public void com.bootdo.charts.controller.tableHeatYYController.exportHeatYY(com.bootdo.heat.vo.HeatVo,com.bootdo.moneyLog.vo.HeatLogVo,javax.servlet.http.HttpServletResponse)
2020-03-04 21:45:30 -Mapped "{[/charts/tableHeatYY],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.tableHeatYYController.tableHeatYY()
2020-03-04 21:45:30 -Mapped "{[/charts/tableHeatYY/tableHeatYY],methods=[POST]}" onto public java.util.Map<java.lang.String, java.lang.Object> com.bootdo.charts.controller.tableHeatYYController.tableHeatYY(com.bootdo.heat.vo.HeatVo,com.bootdo.moneyLog.vo.HeatLogVo)
2020-03-04 21:45:30 -Mapped "{[/charts/tableWaterMM/exportWaterMM],methods=[GET]}" onto public void com.bootdo.charts.controller.tableWaterMMController.exportWaterMM(com.bootdo.water.vo.WaterVo,com.bootdo.moneyLog.vo.WaterLogVo,javax.servlet.http.HttpServletResponse)
2020-03-04 21:45:30 -Mapped "{[/charts/tableWaterMM],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.tableWaterMMController.tableWaterMM()
2020-03-04 21:45:30 -Mapped "{[/charts/tableWaterMM/tableWaterMM],methods=[POST]}" onto public java.util.Map<java.lang.String, java.lang.Object> com.bootdo.charts.controller.tableWaterMMController.tableWaterMM(com.bootdo.water.vo.WaterVo,com.bootdo.moneyLog.vo.WaterLogVo)
2020-03-04 21:45:30 -Mapped "{[/charts/tableWaterYY/tableWaterYY],methods=[POST]}" onto public java.util.Map<java.lang.String, java.lang.Integer> com.bootdo.charts.controller.tableWaterYYController.tableWaterYY(com.bootdo.water.vo.WaterVo,com.bootdo.moneyLog.vo.WaterLogVo)
2020-03-04 21:45:30 -Mapped "{[/charts/tableWaterYY],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.tableWaterYYController.tableWaterYY()
2020-03-04 21:45:30 -Mapped "{[/charts/tableWaterYY/exportWaterYY],methods=[GET]}" onto public void com.bootdo.charts.controller.tableWaterYYController.exportWaterYY(com.bootdo.water.vo.WaterVo,com.bootdo.moneyLog.vo.WaterLogVo,javax.servlet.http.HttpServletResponse)
2020-03-04 21:45:30 -Mapped "{[/common/dict/add],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.add()
2020-03-04 21:45:30 -Mapped "{[/common/dict/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.remove(java.lang.Long)
2020-03-04 21:45:30 -Mapped "{[/common/dict/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.remove(java.lang.Long[])
2020-03-04 21:45:30 -Mapped "{[/common/dict/update]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.update(com.bootdo.common.domain.DictDO)
2020-03-04 21:45:30 -Mapped "{[/common/dict/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.common.controller.DictController.list(java.util.Map<java.lang.String, java.lang.Object>)
2020-03-04 21:45:30 -Mapped "{[/common/dict/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.save(com.bootdo.common.domain.DictDO)
2020-03-04 21:45:30 -Mapped "{[/common/dict/type],methods=[GET]}" onto public java.util.List<com.bootdo.common.domain.DictDO> com.bootdo.common.controller.DictController.listType()
2020-03-04 21:45:30 -Mapped "{[/common/dict/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.edit(java.lang.Long,org.springframework.ui.Model)
2020-03-04 21:45:30 -Mapped "{[/common/dict/add/{type}/{description}],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.addD(org.springframework.ui.Model,java.lang.String,java.lang.String)
2020-03-04 21:45:30 -Mapped "{[/common/dict/list/{type}],methods=[GET]}" onto public java.util.List<com.bootdo.common.domain.DictDO> com.bootdo.common.controller.DictController.listByType(java.lang.String)
2020-03-04 21:45:30 -Mapped "{[/common/dict],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.dict()
2020-03-04 21:45:30 -Mapped "{[/common/sysFile/add],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.FileController.add()
2020-03-04 21:45:30 -Mapped "{[/common/sysFile/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.remove(java.lang.Long,javax.servlet.http.HttpServletRequest)
2020-03-04 21:45:30 -Mapped "{[/common/sysFile/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.remove(java.lang.Long[])
2020-03-04 21:45:30 -Mapped "{[/common/sysFile/update]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.update(com.bootdo.common.domain.FileDO)
2020-03-04 21:45:30 -Mapped "{[/common/sysFile/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.common.controller.FileController.list(java.util.Map<java.lang.String, java.lang.Object>)
2020-03-04 21:45:30 -Mapped "{[/common/sysFile/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.save(com.bootdo.common.domain.FileDO)
2020-03-04 21:45:30 -Mapped "{[/common/sysFile/info/{id}]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.info(java.lang.Long)
2020-03-04 21:45:30 -Mapped "{[/common/sysFile],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.FileController.sysFile(org.springframework.ui.Model)
2020-03-04 21:45:30 -Mapped "{[/common/sysFile/edit],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.FileController.edit(java.lang.Long,org.springframework.ui.Model)
2020-03-04 21:45:30 -Mapped "{[/common/sysFile/upload],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.FileController.upload(org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpServletRequest)
2020-03-04 21:45:30 -Mapped "{[/common/generator/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.GeneratorController.update(java.util.Map<java.lang.String, java.lang.Object>)
2020-03-04 21:45:30 -Mapped "{[/common/generator/list],methods=[GET]}" onto java.util.List<java.util.Map<java.lang.String, java.lang.Object>> com.bootdo.common.controller.GeneratorController.list()
2020-03-04 21:45:30 -Mapped "{[/common/generator/code/{tableName}]}" onto public void com.bootdo.common.controller.GeneratorController.code(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String) throws java.io.IOException
2020-03-04 21:45:30 -Mapped "{[/common/generator],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.GeneratorController.generator()
2020-03-04 21:45:30 -Mapped "{[/common/generator/edit],methods=[GET]}" onto public java.lang.String com.bootdo.common.controller.GeneratorController.edit(org.springframework.ui.Model)
2020-03-04 21:45:30 -Mapped "{[/common/generator/batchCode]}" onto public void com.bootdo.common.controller.GeneratorController.batchCode(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String) throws java.io.IOException
2020-03-04 21:45:30 -Mapped "{[/common/job/add],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.JobController.add()
2020-03-04 21:45:30 -Mapped "{[/common/job/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.remove(java.lang.Long)
2020-03-04 21:45:30 -Mapped "{[/common/job/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.remove(java.lang.Long[])
2020-03-04 21:45:30 -Mapped "{[/common/job/update],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.update(com.bootdo.common.domain.TaskDO)
2020-03-04 21:45:30 -Mapped "{[/common/job/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.common.controller.JobController.list(java.util.Map<java.lang.String, java.lang.Object>)
2020-03-04 21:45:30 -Mapped "{[/common/job/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.save(com.bootdo.common.domain.TaskDO)
2020-03-04 21:45:30 -Mapped "{[/common/job/info/{id}]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.info(java.lang.Long)
2020-03-04 21:45:30 -Mapped "{[/common/job/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.JobController.edit(java.lang.Long,org.springframework.ui.Model)
2020-03-04 21:45:30 -Mapped "{[/common/job],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.JobController.taskScheduleJob()
2020-03-04 21:45:30 -Mapped "{[/common/job/changeJobStatus],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.changeJobStatus(java.lang.Long,java.lang.String)
2020-03-04 21:45:30 -Mapped "{[/common/log/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.LogController.remove(java.lang.Long)
2020-03-04 21:45:30 -Mapped "{[/common/log],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.LogController.log()
2020-03-04 21:45:30 -Mapped "{[/common/log/list],methods=[GET]}" onto com.bootdo.common.domain.PageDO<com.bootdo.common.domain.LogDO> com.bootdo.common.controller.LogController.list(java.util.Map<java.lang.String, java.lang.Object>)
2020-03-04 21:45:30 -Mapped "{[/common/log/batchRemove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.LogController.batchRemove(java.lang.Long[])
2020-03-04 21:45:30 -Mapped "{[/common/long],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.LongController.Long()
2020-03-04 21:45:30 -Mapped "{[/common/time],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.TimeController.Time()
2020-03-04 21:45:30 -Mapped "{[/error]}" onto public com.bootdo.common.utils.R com.bootdo.common.exception.MainsiteErrorController.handleError(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2020-03-04 21:45:30 -Mapped "{[/error],produces=[text/html]}" onto public org.springframework.web.servlet.ModelAndView com.bootdo.common.exception.MainsiteErrorController.errorHtml(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2020-03-04 21:45:30 -Mapped "{[/elec/elec/add],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecController.add()
2020-03-04 21:45:30 -Mapped "{[/elec/elec/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.remove(java.lang.Long)
2020-03-04 21:45:30 -Mapped "{[/elec/elec/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.remove(java.lang.Long[])
2020-03-04 21:45:30 -Mapped "{[/elec/elec/update],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.update(com.bootdo.elec.domain.ElecDO)
2020-03-04 21:45:30 -Mapped "{[/elec/elec/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.elec.controller.ElecController.list(java.util.Map<java.lang.String, java.lang.Object>,com.bootdo.elec.domain.ElecDO)
2020-03-04 21:45:30 -Mapped "{[/elec/elec/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.save(com.bootdo.elec.domain.ElecDO)
2020-03-04 21:45:30 -Mapped "{[/elec/elec/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecController.edit(java.lang.Long,org.springframework.ui.Model)
2020-03-04 21:45:30 -Mapped "{[/elec/elec/exprotElec],methods=[GET]}" onto public void com.bootdo.elec.controller.ElecController.exprotExcel(com.bootdo.elec.vo.ElecVo,javax.servlet.http.HttpServletResponse)
2020-03-04 21:45:30 -Mapped "{[/elec/elec],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecController.Elec()
2020-03-04 21:45:30 -Mapped "{[/elec/elecInto/importElecIntoExcel],methods=[POST]}" onto public java.lang.String com.bootdo.elec.controller.ElecIntoController.importElecIntoExcel(org.springframework.web.multipart.MultipartFile,com.bootdo.elec.vo.ElecVo,javax.servlet.http.HttpServletResponse) throws java.lang.Exception
2020-03-04 21:45:30 -Mapped "{[/elec/elecInto/exprotElecIntoExcel],methods=[GET]}" onto public void com.bootdo.elec.controller.ElecIntoController.exprotExcel(com.bootdo.elec.vo.ElecVo,javax.servlet.http.HttpServletResponse)
2020-03-04 21:45:30 -Mapped "{[/elec/elecInto],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecIntoController.ElecInto()
2020-03-04 21:45:30 -Mapped "{[/elec/elecPrice/add],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecPriceController.add()
2020-03-04 21:45:30 -Mapped "{[/elec/elecPrice/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecPriceController.remove(java.lang.Long)
2020-03-04 21:45:30 -Mapped "{[/elec/elecPrice/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecPriceController.remove(java.lang.Long[])
2020-03-04 21:45:30 -Mapped "{[/elec/elecPrice/update]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecPriceController.update(com.bootdo.elec.domain.ElecPriceDO)
2020-03-04 21:45:30 -Mapped "{[/elec/elecPrice/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.elec.controller.ElecPriceController.list(java.util.Map<java.lang.String, java.lang.Object>)
2020-03-04 21:45:30 -Mapped "{[/elec/elecPrice/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecPriceController.save(com.bootdo.elec.domain.ElecPriceDO,com.bootdo.elec.domain.ElecDO)
2020-03-04 21:45:30 -Mapped "{[/elec/elecPrice],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecPriceController.ElecPrice()
2020-03-04 21:45:30 -Mapped "{[/elec/elecPrice/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecPriceController.edit(java.lang.Long,org.springframework.ui.Model)
2020-03-04 21:45:30 -Mapped "{[/elec/elecUpLoad],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecUpLoadController.Elec()
2020-03-04 21:45:30 -Mapped "{[/elec/elecUpLoad/importElecExcel],methods=[POST]}" onto public java.util.Map<java.lang.String, java.lang.Object> com.bootdo.elec.controller.ElecUpLoadController.importElecExcel(org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpServletRequest) throws java.lang.Exception
2020-03-04 21:45:30 -Mapped "{[/elec/elecUpLoad/importElecUser]}" onto public java.lang.String com.bootdo.elec.controller.ElecUpLoadController.importElecUser(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)
2020-03-04 21:45:30 -Mapped "{[/elec/elecUpLoad/exprotElecExcel],methods=[GET]}" onto public void com.bootdo.elec.controller.ElecUpLoadController.exprotElecExcel(com.bootdo.elec.vo.ElecVo,javax.servlet.http.HttpServletResponse)
2020-03-04 21:45:30 -Mapped "{[/heat/heat/add],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatController.add()
2020-03-04 21:45:30 -Mapped "{[/heat/heat/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatController.remove(java.lang.Integer)
2020-03-04 21:45:30 -Mapped "{[/heat/heat/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatController.remove(java.lang.Integer[])
2020-03-04 21:45:30 -Mapped "{[/heat/heat/update]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatController.update(com.bootdo.heat.domain.HeatDO)
2020-03-04 21:45:30 -Mapped "{[/heat/heat/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.heat.controller.HeatController.list(java.util.Map<java.lang.String, java.lang.Object>)
2020-03-04 21:45:30 -Mapped "{[/heat/heat/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatController.save(com.bootdo.heat.domain.HeatDO)
2020-03-04 21:45:30 -Mapped "{[/heat/heat/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatController.edit(java.lang.Integer,org.springframework.ui.Model)
2020-03-04 21:45:30 -Mapped "{[/heat/heat/exprotHeat],methods=[GET]}" onto public void com.bootdo.heat.controller.HeatController.exprotExcel(com.bootdo.heat.vo.HeatVo,javax.servlet.http.HttpServletResponse)
2020-03-04 21:45:30 -Mapped "{[/heat/heat],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatController.Heat()
2020-03-04 21:45:30 -Mapped "{[/heat/heatInto/importHeatIntoExcel],methods=[POST]}" onto public java.lang.String com.bootdo.heat.controller.HeatIntoController.importHeatIntoExcel(org.springframework.web.multipart.MultipartFile,com.bootdo.heat.vo.HeatVo,javax.servlet.http.HttpServletResponse) throws java.lang.Exception
2020-03-04 21:45:30 -Mapped "{[/heat/heatInto/exprotHeatIntoExcel],methods=[GET]}" onto public void com.bootdo.heat.controller.HeatIntoController.exprotExcel(com.bootdo.heat.vo.HeatVo,javax.servlet.http.HttpServletResponse)
2020-03-04 21:45:30 -Mapped "{[/heat/heatInto],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatIntoController.HeatInto()
2020-03-04 21:45:30 -Mapped "{[/heat/heatPrice/add],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatPriceController.add()
2020-03-04 21:45:30 -Mapped "{[/heat/heatPrice/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatPriceController.remove(java.lang.Long)
2020-03-04 21:45:30 -Mapped "{[/heat/heatPrice/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatPriceController.remove(java.lang.Long[])
2020-03-04 21:45:30 -Mapped "{[/heat/heatPrice/update]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatPriceController.update(com.bootdo.heat.domain.HeatPriceDO)
2020-03-04 21:45:30 -Mapped "{[/heat/heatPrice/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.heat.controller.HeatPriceController.list(java.util.Map<java.lang.String, java.lang.Object>)
2020-03-04 21:45:30 -Mapped "{[/heat/heatPrice/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatPriceController.save(com.bootdo.heat.domain.HeatPriceDO)
2020-03-04 21:45:30 -Mapped "{[/heat/heatPrice],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatPriceController.HeatPrice()
2020-03-04 21:45:30 -Mapped "{[/heat/heatPrice/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatPriceController.edit(java.lang.Long,org.springframework.ui.Model)
2020-03-04 21:45:30 -Mapped "{[/heat/heatUpLoad/halfHeatExcel],methods=[POST]}" onto public java.lang.String com.bootdo.heat.controller.HeatUpLoadController.halfHeatExcel(com.bootdo.heat.domain.HeatDO) throws java.lang.Exception
2020-03-04 21:45:30 -Mapped "{[/heat/heatUpLoad/exprotHeatExcel],methods=[GET]}" onto public void com.bootdo.heat.controller.HeatUpLoadController.exprotHeatExcel(com.bootdo.heat.vo.HeatVo,javax.servlet.http.HttpServletResponse)
2020-03-04 21:45:30 -Mapped "{[/heat/heatUpLoad/createHeatExcel],methods=[POST]}" onto public java.lang.String com.bootdo.heat.controller.HeatUpLoadController.createHeatExcel(com.bootdo.heat.domain.HeatDO) throws java.lang.Exception
2020-03-04 21:45:30 -Mapped "{[/heat/heatUpLoad/nextHeatExcel],methods=[POST]}" onto public java.lang.String com.bootdo.heat.controller.HeatUpLoadController.nextHeatExcel(com.bootdo.heat.domain.HeatDO) throws java.lang.Exception
2020-03-04 21:45:30 -Mapped "{[/heat/heatUpLoad],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatUpLoadController.HeatUpLoad()
2020-03-04 21:45:30 -Mapped "{[/heat/heatUpLoad/importHeatExcel]}" onto public java.lang.String com.bootdo.heat.controller.HeatUpLoadController.importHeatExcel(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)
2020-03-04 21:45:30 -Mapped "{[/moneyList/moneyList/queryAllUserName],methods=[POST]}" onto public java.util.List<com.bootdo.moneyList.damain.MoneyListDO> com.bootdo.moneyList.controller.MoneyListController.getAllUserName(com.bootdo.moneyList.damain.MoneyListDO)
2020-03-04 21:45:30 -Mapped "{[/moneyList/moneyList],methods=[GET]}" onto java.lang.String com.bootdo.moneyList.controller.MoneyListController.MoneyList()
2020-03-04 21:45:30 -Mapped "{[/moneyList/moneyList/moneyPrint/{id}/{userNo}],methods=[GET]}" onto java.lang.String com.bootdo.moneyList.controller.MoneyListController.printEdit(java.lang.Long,java.lang.String,org.springframework.ui.Model,com.bootdo.moneyList.damain.MoneyListDO,javax.servlet.http.HttpServletRequest)
2020-03-04 21:45:30 -Mapped "{[/moneyList/moneyList/queryAllUser],methods=[POST]}" onto public java.util.List<com.bootdo.moneyList.damain.MoneyListDO> com.bootdo.moneyList.controller.MoneyListController.queryAllUser(com.bootdo.moneyList.damain.MoneyListDO)
2020-03-04 21:45:30 -Mapped "{[/moneyList/moneyList/updateMoney],methods=[POST]}" onto public java.lang.Long com.bootdo.moneyList.controller.MoneyListController.updateMoney(com.bootdo.moneyList.damain.MoneyListDO,javax.servlet.http.HttpServletRequest)
2020-03-04 21:45:30 -Mapped "{[/moneyList/moneyWZ/add],methods=[GET]}" onto java.lang.String com.bootdo.moneyList.controller.MoneyListWZController.add()
2020-03-04 21:45:30 -Mapped "{[/moneyList/moneyWZ/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyList.controller.MoneyListWZController.remove(java.lang.Long)
2020-03-04 21:45:30 -Mapped "{[/moneyList/moneyWZ/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyList.controller.MoneyListWZController.remove(java.lang.Long[])
2020-03-04 21:45:30 -Mapped "{[/moneyList/moneyWZ/update],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyList.controller.MoneyListWZController.update(com.bootdo.elec.domain.ElecDO)
2020-03-04 21:45:30 -Mapped "{[/moneyList/moneyWZ/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.moneyList.controller.MoneyListWZController.list(java.util.Map<java.lang.String, java.lang.Object>,com.bootdo.elec.domain.ElecDO)
2020-03-04 21:45:30 -Mapped "{[/moneyList/moneyWZ/exprotWZ],methods=[GET]}" onto public void com.bootdo.moneyList.controller.MoneyListWZController.exportElecYY(com.bootdo.elec.vo.ElecVo,com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse)
2020-03-04 21:45:30 -Mapped "{[/moneyList/moneyWZ/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.moneyList.controller.MoneyListWZController.edit(java.lang.Long,org.springframework.ui.Model)
2020-03-04 21:45:30 -Mapped "{[/moneyList/moneyWZ],methods=[GET]}" onto java.lang.String com.bootdo.moneyList.controller.MoneyListWZController.MoneyWZ()
2020-03-04 21:45:30 -Mapped "{[/moneyList/moneyWZ/batchMoney],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyList.controller.MoneyListWZController.batchMoney(java.lang.Long[])
2020-03-04 21:45:30 -Mapped "{[/moneyLog/elecLog/add],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.ElecLogController.add()
2020-03-04 21:45:30 -Mapped "{[/moneyLog/elecLog/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.ElecLogController.remove(java.lang.Long)
2020-03-04 21:45:30 -Mapped "{[/moneyLog/elecLog/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.ElecLogController.remove(java.lang.Long[])
2020-03-04 21:45:30 -Mapped "{[/moneyLog/elecLog/update]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.ElecLogController.update(java.util.Map<java.lang.String, java.lang.Object>,com.bootdo.moneyLog.domain.ElecLogDO)
2020-03-04 21:45:30 -Mapped "{[/moneyLog/elecLog/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.moneyLog.controller.ElecLogController.list(java.util.Map<java.lang.String, java.lang.Object>)
2020-03-04 21:45:30 -Mapped "{[/moneyLog/elecLog/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.ElecLogController.save(com.bootdo.moneyLog.domain.ElecLogDO)
2020-03-04 21:45:30 -Mapped "{[/moneyLog/elecLog/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.ElecLogController.edit(java.lang.Long,org.springframework.ui.Model)
2020-03-04 21:45:30 -Mapped "{[/moneyLog/elecLog],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.ElecLogController.moneyLog()
2020-03-04 21:45:30 -Mapped "{[/moneyLog/elecLog/exprotElecLog],methods=[GET]}" onto public void com.bootdo.moneyLog.controller.ElecLogController.exprotElecLog(com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2020-03-04 21:45:31 -Mapped "{[/moneyLog/heatLog/add],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.HeatLogController.add()
2020-03-04 21:45:31 -Mapped "{[/moneyLog/heatLog/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.HeatLogController.remove(java.lang.Long)
2020-03-04 21:45:31 -Mapped "{[/moneyLog/heatLog/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.HeatLogController.remove(java.lang.Long[])
2020-03-04 21:45:31 -Mapped "{[/moneyLog/heatLog/update]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.HeatLogController.update(java.util.Map<java.lang.String, java.lang.Object>,com.bootdo.moneyLog.domain.HeatLogDO)
2020-03-04 21:45:31 -Mapped "{[/moneyLog/heatLog/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.moneyLog.controller.HeatLogController.list(java.util.Map<java.lang.String, java.lang.Object>)
2020-03-04 21:45:31 -Mapped "{[/moneyLog/heatLog/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.HeatLogController.save(com.bootdo.moneyLog.domain.HeatLogDO)
2020-03-04 21:45:31 -Mapped "{[/moneyLog/heatLog/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.HeatLogController.edit(java.lang.Long,org.springframework.ui.Model)
2020-03-04 21:45:31 -Mapped "{[/moneyLog/heatLog],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.HeatLogController.HeatLog()
2020-03-04 21:45:31 -Mapped "{[/moneyLog/heatLog/exprotHeatLog],methods=[GET]}" onto public void com.bootdo.moneyLog.controller.HeatLogController.exprotHeatLog(com.bootdo.moneyLog.vo.HeatLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2020-03-04 21:45:31 -Mapped "{[/moneyLog/waterLog/add],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.WaterLogController.add()
2020-03-04 21:45:31 -Mapped "{[/moneyLog/waterLog/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.WaterLogController.remove(java.lang.Long)
2020-03-04 21:45:31 -Mapped "{[/moneyLog/waterLog/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.WaterLogController.remove(java.lang.Long[])
2020-03-04 21:45:31 -Mapped "{[/moneyLog/waterLog/update]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.WaterLogController.update(java.util.Map<java.lang.String, java.lang.Object>,com.bootdo.moneyLog.domain.WaterLogDO)
2020-03-04 21:45:31 -Mapped "{[/moneyLog/waterLog/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.moneyLog.controller.WaterLogController.list(java.util.Map<java.lang.String, java.lang.Object>)
2020-03-04 21:45:31 -Mapped "{[/moneyLog/waterLog/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.WaterLogController.save(com.bootdo.moneyLog.domain.WaterLogDO)
2020-03-04 21:45:31 -Mapped "{[/moneyLog/waterLog/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.WaterLogController.edit(java.lang.Long,org.springframework.ui.Model)
2020-03-04 21:45:31 -Mapped "{[/moneyLog/waterLog],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.WaterLogController.WaterLog()
2020-03-04 21:45:31 -Mapped "{[/moneyLog/waterLog/exprotWaterLog],methods=[GET]}" onto public void com.bootdo.moneyLog.controller.WaterLogController.exprotWaterLog(com.bootdo.moneyLog.vo.WaterLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2020-03-04 21:45:31 -Mapped "{[/moneyUpLoad/ElecLogUpLoad/importElecLogExcel]}" onto public java.lang.String com.bootdo.moneyUpLoad.Controller.ElecLogUpLoadController.importElecLogExcel(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)
2020-03-04 21:45:31 -Mapped "{[/moneyUpLoad/ElecLogUpLoad/exprotElecLogExcel],methods=[GET]}" onto public void com.bootdo.moneyUpLoad.Controller.ElecLogUpLoadController.exprotElecLogExcel(com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2020-03-04 21:45:31 -Mapped "{[/moneyUpLoad/ElecLogUpLoad],methods=[GET]}" onto java.lang.String com.bootdo.moneyUpLoad.Controller.ElecLogUpLoadController.ElecLogUpLoad()
2020-03-04 21:45:31 -Mapped "{[/moneyUpLoad/HeatLogUpLoad/exprotHeatLogExcel],methods=[GET]}" onto public void com.bootdo.moneyUpLoad.Controller.HeatLogUpLoadController.exprotHeatLogExcel(com.bootdo.moneyLog.vo.HeatLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2020-03-04 21:45:31 -Mapped "{[/moneyUpLoad/HeatLogUpLoad/importHeatLogExcel]}" onto public java.lang.String com.bootdo.moneyUpLoad.Controller.HeatLogUpLoadController.importHeatLogExcel(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)
2020-03-04 21:45:31 -Mapped "{[/moneyUpLoad/HeatLogUpLoad],methods=[GET]}" onto java.lang.String com.bootdo.moneyUpLoad.Controller.HeatLogUpLoadController.HeatLogUpLoad()
2020-03-04 21:45:31 -Mapped "{[/moneyUpLoad/WaterLogUpLoad/importWaterLogExcel]}" onto public java.lang.String com.bootdo.moneyUpLoad.Controller.WaterLogUpLoadController.importWaterLogExcel(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)
2020-03-04 21:45:31 -Mapped "{[/moneyUpLoad/WaterLogUpLoad],methods=[GET]}" onto java.lang.String com.bootdo.moneyUpLoad.Controller.WaterLogUpLoadController.WaterLogLogUpLoad()
2020-03-04 21:45:31 -Mapped "{[/moneyUpLoad/WaterLogUpLoad/exprotWaterLogExcel],methods=[GET]}" onto public void com.bootdo.moneyUpLoad.Controller.WaterLogUpLoadController.exprotWaterLogExcel(com.bootdo.moneyLog.vo.WaterLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2020-03-04 21:45:31 -Mapped "{[/oa/notify/add],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.add()
2020-03-04 21:45:31 -Mapped "{[/oa/notify/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.remove(java.lang.Long)
2020-03-04 21:45:31 -Mapped "{[/oa/notify/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.remove(java.lang.Long[])
2020-03-04 21:45:31 -Mapped "{[/oa/notify/update]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.update(com.bootdo.oa.domain.NotifyDO)
2020-03-04 21:45:31 -Mapped "{[/oa/notify/read/{id}],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.read(java.lang.Long,org.springframework.ui.Model)
2020-03-04 21:45:31 -Mapped "{[/oa/notify/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.oa.controller.NotifyController.list(java.util.Map<java.lang.String, java.lang.Object>)
2020-03-04 21:45:31 -Mapped "{[/oa/notify/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.save(com.bootdo.oa.domain.NotifyDO)
2020-03-04 21:45:31 -Mapped "{[/oa/notify/message],methods=[GET]}" onto com.bootdo.common.utils.PageUtils com.bootdo.oa.controller.NotifyController.message()
2020-03-04 21:45:31 -Mapped "{[/oa/notify/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.edit(java.lang.Long,org.springframework.ui.Model)
2020-03-04 21:45:31 -Mapped "{[/oa/notify/selfList],methods=[GET]}" onto com.bootdo.common.utils.PageUtils com.bootdo.oa.controller.NotifyController.selfList(java.util.Map<java.lang.String, java.lang.Object>)
2020-03-04 21:45:31 -Mapped "{[/oa/notify],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.oaNotify()
2020-03-04 21:45:31 -Mapped "{[/oa/notify/selfNotify],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.selefNotify()
2020-03-04 21:45:31 -Mapped "{[/print/print/add],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.add()
2020-03-04 21:45:31 -Mapped "{[/print/print/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.print.controller.PrintController.remove(java.lang.Long)
2020-03-04 21:45:31 -Mapped "{[/print/print/update]}" onto public com.bootdo.common.utils.R com.bootdo.print.controller.PrintController.update(com.bootdo.print.domain.PrintDO)
2020-03-04 21:45:31 -Mapped "{[/print/print/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.print.controller.PrintController.list(java.util.Map<java.lang.String, java.lang.Object>)
2020-03-04 21:45:31 -Mapped "{[/print/print/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.print.controller.PrintController.save(java.lang.String,com.bootdo.print.domain.PrintDO)
2020-03-04 21:45:31 -Mapped "{[/print/print/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.print.controller.PrintController.batchRemove(java.lang.Long[])
2020-03-04 21:45:31 -Mapped "{[/print/print/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.edit(java.lang.Long,org.springframework.ui.Model)
2020-03-04 21:45:31 -Mapped "{[/print/print/printEdit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.printEdit(java.lang.Long,org.springframework.ui.Model)
2020-03-04 21:45:31 -Mapped "{[/print/print/batchPrint],methods=[POST]}" onto public java.util.List<com.bootdo.print.vo.PrintVo> com.bootdo.print.controller.PrintController.batchPrint(java.lang.Long[])
2020-03-04 21:45:31 -Mapped "{[/print/print/printMoney],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.printMoney()
2020-03-04 21:45:31 -Mapped "{[/print/print/exprotPrint],methods=[GET]}" onto public void com.bootdo.print.controller.PrintController.exprotPrint(com.bootdo.print.vo.PrintVo,javax.servlet.http.HttpServletResponse)
2020-03-04 21:45:31 -Mapped "{[/print/print],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.Print()
2020-03-04 21:45:31 -Mapped "{[/system/sysDept/add/{pId}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.add(java.lang.Long,org.springframework.ui.Model)
2020-03-04 21:45:31 -Mapped "{[/system/sysDept/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.remove(java.lang.Long)
2020-03-04 21:45:31 -Mapped "{[/system/sysDept/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.remove(java.lang.Long[])
2020-03-04 21:45:31 -Mapped "{[/system/sysDept/update]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.update(com.bootdo.system.domain.DeptDO)
2020-03-04 21:45:31 -Mapped "{[/system/sysDept/list],methods=[GET]}" onto public java.util.List<com.bootdo.system.domain.DeptDO> com.bootdo.system.controller.DeptController.list()
2020-03-04 21:45:31 -Mapped "{[/system/sysDept/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.save(com.bootdo.system.domain.DeptDO)
2020-03-04 21:45:31 -Mapped "{[/system/sysDept/tree],methods=[GET]}" onto public com.bootdo.common.domain.Tree<com.bootdo.system.domain.DeptDO> com.bootdo.system.controller.DeptController.tree()
2020-03-04 21:45:31 -Mapped "{[/system/sysDept/edit/{deptId}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.edit(java.lang.Long,org.springframework.ui.Model)
2020-03-04 21:45:31 -Mapped "{[/system/sysDept],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.dept()
2020-03-04 21:45:31 -Mapped "{[/system/sysDept/treeView],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.treeView(org.springframework.web.servlet.ModelAndView)
2020-03-04 21:45:31 -Mapped "{[/index],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.index(org.springframework.ui.Model)
2020-03-04 21:45:31 -Mapped "{[/main],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.main()
2020-03-04 21:45:31 -Mapped "{[/login],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.login(org.springframework.ui.Model)
2020-03-04 21:45:31 -Mapped "{[/logout],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.logout()
2020-03-04 21:45:31 -Mapped "{[/login],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.LoginController.ajaxLogin(java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest)
2020-03-04 21:45:31 -Mapped "{[/getVerify],methods=[GET]}" onto public void com.bootdo.system.controller.LoginController.getVerify(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2020-03-04 21:45:31 -Mapped "{[/ || ],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.welcome(org.springframework.ui.Model)
2020-03-04 21:45:31 -Mapped "{[/sys/menu/add/{pId}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.MenuController.add(org.springframework.ui.Model,java.lang.Long)
2020-03-04 21:45:31 -Mapped "{[/sys/menu/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.MenuController.remove(java.lang.Long)
2020-03-04 21:45:31 -Mapped "{[/sys/menu/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.MenuController.update(com.bootdo.system.domain.MenuDO)
2020-03-04 21:45:31 -Mapped "{[/sys/menu/list]}" onto java.util.List<com.bootdo.system.domain.MenuDO> com.bootdo.system.controller.MenuController.list(java.util.Map<java.lang.String, java.lang.Object>)
2020-03-04 21:45:31 -Mapped "{[/sys/menu/save],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.MenuController.save(com.bootdo.system.domain.MenuDO)
2020-03-04 21:45:31 -Mapped "{[/sys/menu/tree/{roleId}],methods=[GET]}" onto com.bootdo.common.domain.Tree<com.bootdo.system.domain.MenuDO> com.bootdo.system.controller.MenuController.tree(java.lang.Long)
2020-03-04 21:45:31 -Mapped "{[/sys/menu/tree],methods=[GET]}" onto com.bootdo.common.domain.Tree<com.bootdo.system.domain.MenuDO> com.bootdo.system.controller.MenuController.tree()
2020-03-04 21:45:31 -Mapped "{[/sys/menu/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.MenuController.edit(org.springframework.ui.Model,java.lang.Long)
2020-03-04 21:45:31 -Mapped "{[/sys/menu],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.MenuController.menu(org.springframework.ui.Model)
2020-03-04 21:45:31 -Mapped "{[/sys/role/add],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.RoleController.add()
2020-03-04 21:45:31 -Mapped "{[/sys/role/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.update(com.bootdo.system.domain.RoleDO)
2020-03-04 21:45:31 -Mapped "{[/sys/role/list],methods=[GET]}" onto java.util.List<com.bootdo.system.domain.RoleDO> com.bootdo.system.controller.RoleController.list()
2020-03-04 21:45:31 -Mapped "{[/sys/role/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.save(java.lang.Long)
2020-03-04 21:45:31 -Mapped "{[/sys/role/save],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.save(com.bootdo.system.domain.RoleDO)
2020-03-04 21:45:31 -Mapped "{[/sys/role/batchRemove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.batchRemove(java.lang.Long[])
2020-03-04 21:45:31 -Mapped "{[/sys/role],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.RoleController.role()
2020-03-04 21:45:31 -Mapped "{[/sys/role/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.RoleController.edit(java.lang.Long,org.springframework.ui.Model)
2020-03-04 21:45:31 -Mapped "{[/sys/online/list]}" onto public java.util.List<com.bootdo.system.domain.UserOnline> com.bootdo.system.controller.SessionController.list()
2020-03-04 21:45:31 -Mapped "{[/sys/online],methods=[GET]}" onto public java.lang.String com.bootdo.system.controller.SessionController.online()
2020-03-04 21:45:31 -Mapped "{[/sys/online/sessionList]}" onto public java.util.Collection<org.apache.shiro.session.Session> com.bootdo.system.controller.SessionController.sessionList()
2020-03-04 21:45:31 -Mapped "{[/sys/online/forceLogout/{sessionId}]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.SessionController.forceLogout(java.lang.String,org.springframework.web.servlet.mvc.support.RedirectAttributes)
2020-03-04 21:45:31 -Mapped "{[/sys/user/exit],methods=[POST]}" onto boolean com.bootdo.system.controller.UserController.exit(java.util.Map<java.lang.String, java.lang.Object>)
2020-03-04 21:45:31 -Mapped "{[/sys/user/add],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.add(org.springframework.ui.Model)
2020-03-04 21:45:31 -Mapped "{[/sys/user/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.remove(java.lang.Long)
2020-03-04 21:45:31 -Mapped "{[/sys/user/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.update(com.bootdo.system.domain.UserDO)
2020-03-04 21:45:31 -Mapped "{[/sys/user/list],methods=[GET]}" onto com.bootdo.common.utils.PageUtils com.bootdo.system.controller.UserController.list(java.util.Map<java.lang.String, java.lang.Object>)
2020-03-04 21:45:31 -Mapped "{[/sys/user/save],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.save(com.bootdo.system.domain.UserDO)
2020-03-04 21:45:31 -Mapped "{[/sys/user/batchRemove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.batchRemove(java.lang.Long[])
2020-03-04 21:45:31 -Mapped "{[/sys/user/tree],methods=[GET]}" onto public com.bootdo.common.domain.Tree<com.bootdo.system.domain.DeptDO> com.bootdo.system.controller.UserController.tree()
2020-03-04 21:45:31 -Mapped "{[/sys/user],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.user(org.springframework.ui.Model)
2020-03-04 21:45:31 -Mapped "{[/sys/user/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.edit(org.springframework.ui.Model,java.lang.Long)
2020-03-04 21:45:31 -Mapped "{[/sys/user/treeView],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.treeView()
2020-03-04 21:45:31 -Mapped "{[/sys/user/adminResetPwd],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.adminResetPwd(com.bootdo.system.vo.UserVO)
2020-03-04 21:45:31 -Mapped "{[/sys/user/personal],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.personal(org.springframework.ui.Model)
2020-03-04 21:45:31 -Mapped "{[/sys/user/updatePeronal],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.updatePeronal(com.bootdo.system.domain.UserDO)
2020-03-04 21:45:31 -Mapped "{[/sys/user/resetPwd/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.resetPwd(java.lang.Long,org.springframework.ui.Model)
2020-03-04 21:45:31 -Mapped "{[/sys/user/resetPwd],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.resetPwd(com.bootdo.system.vo.UserVO)
2020-03-04 21:45:31 -Mapped "{[/sys/user/uploadImg],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.uploadImg(org.springframework.web.multipart.MultipartFile,java.lang.String,javax.servlet.http.HttpServletRequest)
2020-03-04 21:45:31 -Mapped "{[/file/downImport/{importType}],methods=[GET]}" onto public void com.bootdo.temple.controller.TempletController.downImport(javax.servlet.http.HttpServletResponse,java.lang.String)
2020-03-04 21:45:31 -Mapped "{[/water/water/add],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterController.add()
2020-03-04 21:45:31 -Mapped "{[/water/water/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterController.remove(java.lang.Long)
2020-03-04 21:45:31 -Mapped "{[/water/water/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterController.remove(java.lang.Long[])
2020-03-04 21:45:31 -Mapped "{[/water/water/update]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterController.update(com.bootdo.water.domain.WaterDO)
2020-03-04 21:45:31 -Mapped "{[/water/water/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.water.controller.WaterController.list(java.util.Map<java.lang.String, java.lang.Object>)
2020-03-04 21:45:31 -Mapped "{[/water/water/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterController.save(com.bootdo.water.domain.WaterDO)
2020-03-04 21:45:31 -Mapped "{[/water/water/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterController.edit(java.lang.Long,org.springframework.ui.Model)
2020-03-04 21:45:31 -Mapped "{[/water/water/exprotWater],methods=[GET]}" onto public void com.bootdo.water.controller.WaterController.exprotExcel(com.bootdo.water.vo.WaterVo,javax.servlet.http.HttpServletResponse)
2020-03-04 21:45:31 -Mapped "{[/water/water],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterController.Water()
2020-03-04 21:45:31 -Mapped "{[/water/waterInto/importWaterIntoExcel],methods=[POST]}" onto public java.lang.String com.bootdo.water.controller.WaterIntoController.importWaterIntoExcel(org.springframework.web.multipart.MultipartFile,com.bootdo.water.vo.WaterVo,javax.servlet.http.HttpServletResponse) throws java.lang.Exception
2020-03-04 21:45:31 -Mapped "{[/water/waterInto/exprotWaterIntoExcel],methods=[GET]}" onto public void com.bootdo.water.controller.WaterIntoController.exprotExcel(com.bootdo.water.vo.WaterVo,javax.servlet.http.HttpServletResponse)
2020-03-04 21:45:31 -Mapped "{[/water/waterInto],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterIntoController.WaterInto()
2020-03-04 21:45:31 -Mapped "{[/water/waterPrice/add],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterPriceController.add()
2020-03-04 21:45:31 -Mapped "{[/water/waterPrice/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterPriceController.remove(java.lang.Long)
2020-03-04 21:45:31 -Mapped "{[/water/waterPrice/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterPriceController.remove(java.lang.Long[])
2020-03-04 21:45:31 -Mapped "{[/water/waterPrice/update]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterPriceController.update(com.bootdo.water.domain.WaterPriceDO)
2020-03-04 21:45:31 -Mapped "{[/water/waterPrice/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.water.controller.WaterPriceController.list(java.util.Map<java.lang.String, java.lang.Object>)
2020-03-04 21:45:31 -Mapped "{[/water/waterPrice/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterPriceController.save(com.bootdo.water.domain.WaterPriceDO)
2020-03-04 21:45:31 -Mapped "{[/water/waterPrice],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterPriceController.WaterPrice()
2020-03-04 21:45:31 -Mapped "{[/water/waterPrice/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterPriceController.edit(java.lang.Long,org.springframework.ui.Model)
2020-03-04 21:45:31 -Mapped "{[/water/waterUpLoad/importWaterExcel]}" onto public java.lang.String com.bootdo.water.controller.WaterUpLoadController.importWaterExcel(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)
2020-03-04 21:45:31 -Mapped "{[/water/waterUpLoad/exprotWaterExcel],methods=[GET]}" onto public void com.bootdo.water.controller.WaterUpLoadController.exprotWaterExcel(com.bootdo.water.vo.WaterVo,javax.servlet.http.HttpServletResponse)
2020-03-04 21:45:31 -Mapped "{[/water/waterUpLoad/createWaterExcel],methods=[POST]}" onto public java.lang.String com.bootdo.water.controller.WaterUpLoadController.createWaterExcel(com.bootdo.water.domain.WaterDO) throws java.lang.Exception
2020-03-04 21:45:31 -Mapped "{[/water/waterUpLoad],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterUpLoadController.WaterUpLoad()
2020-03-04 21:45:31 -Mapped "{[/v2/api-docs],methods=[GET],produces=[application/json || application/hal+json]}" onto public org.springframework.http.ResponseEntity<springfox.documentation.spring.web.json.Json> springfox.documentation.swagger2.web.Swagger2Controller.getDocumentation(java.lang.String,javax.servlet.http.HttpServletRequest)
2020-03-04 21:45:31 -Mapped "{[/swagger-resources]}" onto org.springframework.http.ResponseEntity<java.util.List<springfox.documentation.swagger.web.SwaggerResource>> springfox.documentation.swagger.web.ApiResourceController.swaggerResources()
2020-03-04 21:45:31 -Mapped "{[/swagger-resources/configuration/ui]}" onto org.springframework.http.ResponseEntity<springfox.documentation.swagger.web.UiConfiguration> springfox.documentation.swagger.web.ApiResourceController.uiConfiguration()
2020-03-04 21:45:31 -Mapped "{[/swagger-resources/configuration/security]}" onto org.springframework.http.ResponseEntity<springfox.documentation.swagger.web.SecurityConfiguration> springfox.documentation.swagger.web.ApiResourceController.securityConfiguration()
2020-03-04 21:45:32 -Initializing ExecutorService  'messageBrokerTaskScheduler'
2020-03-04 21:45:32 -Mapped URL path [/endpointChat/**] onto handler of type [class org.springframework.web.socket.sockjs.support.SockJsHttpRequestHandler]
2020-03-04 21:45:32 -Initializing ExecutorService  'brokerChannelExecutor'
2020-03-04 21:45:33 -Mapped URL path [/**/favicon.ico] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2020-03-04 21:45:34 -Looking for @ControllerAdvice: org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@76c7beb3: startup date [Wed Mar 04 21:44:48 CST 2020]; root of context hierarchy
2020-03-04 21:45:34 -Mapped URL path [/webjars/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2020-03-04 21:45:34 -Mapped URL path [/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2020-03-04 21:45:34 -Detected @ExceptionHandler methods in BDExceptionHandler
2020-03-04 21:45:35 -[THYMELEAF][main] Template Mode 'LEGACYHTML5' is deprecated. Using Template Mode 'HTML' instead.
2020-03-04 21:45:39 -Registering beans for JMX exposure on startup
2020-03-04 21:45:39 -Bean with name 'dataSource' has been autodetected for JMX exposure
2020-03-04 21:45:39 -Located MBean 'dataSource': registering with JMX server as MBean [com.alibaba.druid.pool:name=dataSource,type=DruidDataSource]
2020-03-04 21:45:39 -Starting beans in phase 2147483647
2020-03-04 21:45:39 -Context refreshed
2020-03-04 21:45:40 -Found 1 custom documentation plugin(s)
2020-03-04 21:45:40 -Scanning for api listing references
2020-03-04 21:45:41 -Generating unique operation named: removeUsingPOST_1
2020-03-04 21:45:41 -Generating unique operation named: addUsingGET_1
2020-03-04 21:45:41 -Generating unique operation named: editUsingGET_1
2020-03-04 21:45:41 -Generating unique operation named: listUsingGET_1
2020-03-04 21:45:41 -Generating unique operation named: removeUsingPOST_2
2020-03-04 21:45:41 -Generating unique operation named: removeUsingPOST_3
2020-03-04 21:45:42 -Generating unique operation named: saveUsingPOST_1
2020-03-04 21:45:42 -Generating unique operation named: updateUsingGET_1
2020-03-04 21:45:42 -Generating unique operation named: updateUsingHEAD_1
2020-03-04 21:45:42 -Generating unique operation named: updateUsingPOST_1
2020-03-04 21:45:42 -Generating unique operation named: updateUsingPUT_1
2020-03-04 21:45:42 -Generating unique operation named: updateUsingPATCH_1
2020-03-04 21:45:42 -Generating unique operation named: updateUsingDELETE_1
2020-03-04 21:45:42 -Generating unique operation named: updateUsingOPTIONS_1
2020-03-04 21:45:42 -Generating unique operation named: updateUsingTRACE_1
2020-03-04 21:45:42 -Generating unique operation named: addUsingGET_2
2020-03-04 21:45:42 -Generating unique operation named: editUsingGET_2
2020-03-04 21:45:42 -Generating unique operation named: listUsingGET_2
2020-03-04 21:45:42 -Generating unique operation named: removeUsingPOST_4
2020-03-04 21:45:42 -Generating unique operation named: removeUsingPOST_5
2020-03-04 21:45:42 -Generating unique operation named: saveUsingPOST_2
2020-03-04 21:45:42 -Generating unique operation named: updateUsingPOST_2
2020-03-04 21:45:42 -Generating unique operation named: exprotExcelUsingGET_1
2020-03-04 21:45:42 -Generating unique operation named: addUsingGET_3
2020-03-04 21:45:42 -Generating unique operation named: editUsingGET_3
2020-03-04 21:45:42 -Generating unique operation named: listUsingGET_3
2020-03-04 21:45:42 -Generating unique operation named: removeUsingPOST_6
2020-03-04 21:45:42 -Generating unique operation named: removeUsingPOST_7
2020-03-04 21:45:42 -Generating unique operation named: saveUsingPOST_3
2020-03-04 21:45:42 -Generating unique operation named: updateUsingGET_2
2020-03-04 21:45:42 -Generating unique operation named: updateUsingHEAD_2
2020-03-04 21:45:42 -Generating unique operation named: updateUsingPOST_3
2020-03-04 21:45:42 -Generating unique operation named: updateUsingPUT_2
2020-03-04 21:45:42 -Generating unique operation named: updateUsingPATCH_2
2020-03-04 21:45:42 -Generating unique operation named: updateUsingDELETE_2
2020-03-04 21:45:42 -Generating unique operation named: updateUsingOPTIONS_2
2020-03-04 21:45:42 -Generating unique operation named: updateUsingTRACE_2
2020-03-04 21:45:42 -Generating unique operation named: addUsingGET_4
2020-03-04 21:45:42 -Generating unique operation named: editUsingGET_4
2020-03-04 21:45:42 -Generating unique operation named: listUsingGET_4
2020-03-04 21:45:42 -Generating unique operation named: removeUsingPOST_8
2020-03-04 21:45:42 -Generating unique operation named: removeUsingPOST_9
2020-03-04 21:45:42 -Generating unique operation named: saveUsingPOST_4
2020-03-04 21:45:42 -Generating unique operation named: updateUsingGET_3
2020-03-04 21:45:43 -Generating unique operation named: updateUsingHEAD_3
2020-03-04 21:45:43 -Generating unique operation named: updateUsingPOST_4
2020-03-04 21:45:43 -Generating unique operation named: updateUsingPUT_3
2020-03-04 21:45:43 -Generating unique operation named: updateUsingPATCH_3
2020-03-04 21:45:43 -Generating unique operation named: updateUsingDELETE_3
2020-03-04 21:45:43 -Generating unique operation named: updateUsingOPTIONS_3
2020-03-04 21:45:43 -Generating unique operation named: updateUsingTRACE_3
2020-03-04 21:45:43 -Generating unique operation named: ElecUsingGET_1
2020-03-04 21:45:43 -Generating unique operation named: addUsingGET_5
2020-03-04 21:45:43 -Generating unique operation named: editUsingGET_5
2020-03-04 21:45:43 -Generating unique operation named: listUsingGET_5
2020-03-04 21:45:43 -Generating unique operation named: removeUsingPOST_10
2020-03-04 21:45:43 -Generating unique operation named: removeUsingPOST_11
2020-03-04 21:45:43 -Generating unique operation named: saveUsingPOST_5
2020-03-04 21:45:43 -Generating unique operation named: updateUsingGET_4
2020-03-04 21:45:43 -Generating unique operation named: updateUsingHEAD_4
2020-03-04 21:45:43 -Generating unique operation named: updateUsingPOST_5
2020-03-04 21:45:43 -Generating unique operation named: updateUsingPUT_4
2020-03-04 21:45:43 -Generating unique operation named: updateUsingPATCH_4
2020-03-04 21:45:43 -Generating unique operation named: updateUsingDELETE_4
2020-03-04 21:45:43 -Generating unique operation named: updateUsingOPTIONS_4
2020-03-04 21:45:43 -Generating unique operation named: updateUsingTRACE_4
2020-03-04 21:45:43 -Generating unique operation named: editUsingGET_6
2020-03-04 21:45:43 -Generating unique operation named: listUsingGET_6
2020-03-04 21:45:43 -Generating unique operation named: updateUsingPOST_6
2020-03-04 21:45:43 -Generating unique operation named: addUsingGET_6
2020-03-04 21:45:43 -Generating unique operation named: editUsingGET_7
2020-03-04 21:45:43 -Generating unique operation named: exprotExcelUsingGET_2
2020-03-04 21:45:43 -Generating unique operation named: listUsingGET_7
2020-03-04 21:45:44 -Generating unique operation named: removeUsingPOST_12
2020-03-04 21:45:44 -Generating unique operation named: removeUsingPOST_13
2020-03-04 21:45:44 -Generating unique operation named: saveUsingPOST_6
2020-03-04 21:45:44 -Generating unique operation named: updateUsingGET_5
2020-03-04 21:45:44 -Generating unique operation named: updateUsingHEAD_5
2020-03-04 21:45:44 -Generating unique operation named: updateUsingPOST_7
2020-03-04 21:45:44 -Generating unique operation named: updateUsingPUT_5
2020-03-04 21:45:44 -Generating unique operation named: updateUsingPATCH_5
2020-03-04 21:45:44 -Generating unique operation named: updateUsingDELETE_5
2020-03-04 21:45:44 -Generating unique operation named: updateUsingOPTIONS_5
2020-03-04 21:45:44 -Generating unique operation named: updateUsingTRACE_5
2020-03-04 21:45:44 -Generating unique operation named: exprotExcelUsingGET_3
2020-03-04 21:45:44 -Generating unique operation named: addUsingGET_7
2020-03-04 21:45:44 -Generating unique operation named: editUsingGET_8
2020-03-04 21:45:44 -Generating unique operation named: listUsingGET_8
2020-03-04 21:45:44 -Generating unique operation named: removeUsingPOST_14
2020-03-04 21:45:44 -Generating unique operation named: removeUsingPOST_15
2020-03-04 21:45:44 -Generating unique operation named: saveUsingPOST_7
2020-03-04 21:45:44 -Generating unique operation named: updateUsingGET_6
2020-03-04 21:45:44 -Generating unique operation named: updateUsingHEAD_6
2020-03-04 21:45:44 -Generating unique operation named: updateUsingPOST_8
2020-03-04 21:45:44 -Generating unique operation named: updateUsingPUT_6
2020-03-04 21:45:44 -Generating unique operation named: updateUsingPATCH_6
2020-03-04 21:45:44 -Generating unique operation named: updateUsingDELETE_6
2020-03-04 21:45:44 -Generating unique operation named: updateUsingOPTIONS_6
2020-03-04 21:45:44 -Generating unique operation named: updateUsingTRACE_6
2020-03-04 21:45:44 -Generating unique operation named: addUsingGET_8
2020-03-04 21:45:44 -Generating unique operation named: editUsingGET_9
2020-03-04 21:45:44 -Generating unique operation named: listUsingGET_9
2020-03-04 21:45:44 -Generating unique operation named: removeUsingPOST_16
2020-03-04 21:45:44 -Generating unique operation named: removeUsingPOST_17
2020-03-04 21:45:44 -Generating unique operation named: saveUsingPOST_8
2020-03-04 21:45:44 -Generating unique operation named: updateUsingGET_7
2020-03-04 21:45:44 -Generating unique operation named: updateUsingHEAD_7
2020-03-04 21:45:44 -Generating unique operation named: updateUsingPOST_9
2020-03-04 21:45:44 -Generating unique operation named: updateUsingPUT_7
2020-03-04 21:45:44 -Generating unique operation named: updateUsingPATCH_7
2020-03-04 21:45:44 -Generating unique operation named: updateUsingDELETE_7
2020-03-04 21:45:44 -Generating unique operation named: updateUsingOPTIONS_7
2020-03-04 21:45:44 -Generating unique operation named: updateUsingTRACE_7
2020-03-04 21:45:44 -Generating unique operation named: addUsingGET_9
2020-03-04 21:45:44 -Generating unique operation named: editUsingGET_10
2020-03-04 21:45:44 -Generating unique operation named: infoUsingGET_1
2020-03-04 21:45:44 -Generating unique operation named: infoUsingHEAD_1
2020-03-04 21:45:44 -Generating unique operation named: infoUsingPOST_1
2020-03-04 21:45:44 -Generating unique operation named: infoUsingPUT_1
2020-03-04 21:45:44 -Generating unique operation named: infoUsingPATCH_1
2020-03-04 21:45:44 -Generating unique operation named: infoUsingDELETE_1
2020-03-04 21:45:44 -Generating unique operation named: infoUsingOPTIONS_1
2020-03-04 21:45:44 -Generating unique operation named: infoUsingTRACE_1
2020-03-04 21:45:44 -Generating unique operation named: listUsingGET_10
2020-03-04 21:45:45 -Generating unique operation named: removeUsingPOST_18
2020-03-04 21:45:45 -Generating unique operation named: removeUsingPOST_19
2020-03-04 21:45:45 -Generating unique operation named: saveUsingPOST_9
2020-03-04 21:45:45 -Generating unique operation named: updateUsingPOST_10
2020-03-04 21:45:45 -Generating unique operation named: listUsingGET_11
2020-03-04 21:45:45 -Generating unique operation named: removeUsingPOST_20
2020-03-04 21:45:45 -Generating unique operation named: welcomeUsingGET_1
2020-03-04 21:45:45 -Generating unique operation named: addUsingGET_10
2020-03-04 21:45:45 -Generating unique operation named: editUsingGET_11
2020-03-04 21:45:45 -Generating unique operation named: listUsingGET_12
2020-03-04 21:45:45 -Generating unique operation named: removeUsingPOST_21
2020-03-04 21:45:45 -Generating unique operation named: saveUsingPOST_10
2020-03-04 21:45:45 -Generating unique operation named: treeUsingGET_1
2020-03-04 21:45:45 -Generating unique operation named: treeUsingGET_2
2020-03-04 21:45:45 -Generating unique operation named: updateUsingPOST_11
2020-03-04 21:45:45 -Generating unique operation named: addUsingGET_11
2020-03-04 21:45:45 -Generating unique operation named: editUsingGET_12
2020-03-04 21:45:45 -Generating unique operation named: listUsingGET_13
2020-03-04 21:45:45 -Generating unique operation named: removeUsingPOST_22
2020-03-04 21:45:45 -Generating unique operation named: removeUsingPOST_23
2020-03-04 21:45:45 -Generating unique operation named: updateUsingPOST_12
2020-03-04 21:45:45 -Generating unique operation named: addUsingGET_12
2020-03-04 21:45:45 -Generating unique operation named: editUsingGET_13
2020-03-04 21:45:45 -Generating unique operation named: listUsingGET_14
2020-03-04 21:45:45 -Generating unique operation named: removeUsingPOST_24
2020-03-04 21:45:45 -Generating unique operation named: removeUsingPOST_25
2020-03-04 21:45:45 -Generating unique operation named: saveUsingPOST_11
2020-03-04 21:45:45 -Generating unique operation named: updateUsingGET_8
2020-03-04 21:45:45 -Generating unique operation named: updateUsingHEAD_8
2020-03-04 21:45:45 -Generating unique operation named: updateUsingPOST_13
2020-03-04 21:45:45 -Generating unique operation named: updateUsingPUT_8
2020-03-04 21:45:45 -Generating unique operation named: updateUsingPATCH_8
2020-03-04 21:45:45 -Generating unique operation named: updateUsingDELETE_8
2020-03-04 21:45:45 -Generating unique operation named: updateUsingOPTIONS_8
2020-03-04 21:45:45 -Generating unique operation named: updateUsingTRACE_8
2020-03-04 21:45:46 -Generating unique operation named: addUsingGET_13
2020-03-04 21:45:46 -Generating unique operation named: batchRemoveUsingPOST_1
2020-03-04 21:45:46 -Generating unique operation named: editUsingGET_14
2020-03-04 21:45:46 -Generating unique operation named: listUsingGET_15
2020-03-04 21:45:46 -Generating unique operation named: printEditUsingGET_1
2020-03-04 21:45:46 -Generating unique operation named: removeUsingPOST_26
2020-03-04 21:45:46 -Generating unique operation named: saveUsingPOST_12
2020-03-04 21:45:46 -Generating unique operation named: updateUsingGET_9
2020-03-04 21:45:46 -Generating unique operation named: updateUsingHEAD_9
2020-03-04 21:45:46 -Generating unique operation named: updateUsingPOST_14
2020-03-04 21:45:46 -Generating unique operation named: updateUsingPUT_9
2020-03-04 21:45:46 -Generating unique operation named: updateUsingPATCH_9
2020-03-04 21:45:46 -Generating unique operation named: updateUsingDELETE_9
2020-03-04 21:45:46 -Generating unique operation named: updateUsingOPTIONS_9
2020-03-04 21:45:46 -Generating unique operation named: updateUsingTRACE_9
2020-03-04 21:45:46 -Generating unique operation named: addUsingGET_14
2020-03-04 21:45:46 -Generating unique operation named: batchRemoveUsingPOST_2
2020-03-04 21:45:46 -Generating unique operation named: editUsingGET_15
2020-03-04 21:45:46 -Generating unique operation named: listUsingGET_16
2020-03-04 21:45:46 -Generating unique operation named: saveUsingPOST_13
2020-03-04 21:45:46 -Generating unique operation named: saveUsingPOST_14
2020-03-04 21:45:46 -Generating unique operation named: updateUsingPOST_15
2020-03-04 21:45:46 -Generating unique operation named: listUsingGET_17
2020-03-04 21:45:46 -Generating unique operation named: listUsingHEAD_1
2020-03-04 21:45:46 -Generating unique operation named: listUsingPOST_1
2020-03-04 21:45:46 -Generating unique operation named: listUsingPUT_1
2020-03-04 21:45:46 -Generating unique operation named: listUsingPATCH_1
2020-03-04 21:45:46 -Generating unique operation named: listUsingDELETE_1
2020-03-04 21:45:46 -Generating unique operation named: listUsingOPTIONS_1
2020-03-04 21:45:46 -Generating unique operation named: listUsingTRACE_1
2020-03-04 21:45:46 -Generating unique operation named: countDDUsingGET_1
2020-03-04 21:45:46 -Generating unique operation named: exportDDUsingGET_1
2020-03-04 21:45:46 -Generating unique operation named: exportElecYYUsingGET_1
2020-03-04 21:45:46 -Generating unique operation named: addUsingGET_15
2020-03-04 21:45:46 -Generating unique operation named: batchRemoveUsingPOST_3
2020-03-04 21:45:46 -Generating unique operation named: editUsingGET_16
2020-03-04 21:45:46 -Generating unique operation named: listUsingGET_18
2020-03-04 21:45:46 -Generating unique operation named: removeUsingPOST_27
2020-03-04 21:45:46 -Generating unique operation named: saveUsingPOST_15
2020-03-04 21:45:46 -Generating unique operation named: treeUsingGET_3
2020-03-04 21:45:46 -Generating unique operation named: treeViewUsingGET_1
2020-03-04 21:45:46 -Generating unique operation named: updateUsingPOST_16
2020-03-04 21:45:47 -Generating unique operation named: addUsingGET_16
2020-03-04 21:45:47 -Generating unique operation named: editUsingGET_17
2020-03-04 21:45:47 -Generating unique operation named: exprotExcelUsingGET_4
2020-03-04 21:45:47 -Generating unique operation named: listUsingGET_19
2020-03-04 21:45:47 -Generating unique operation named: removeUsingPOST_28
2020-03-04 21:45:47 -Generating unique operation named: removeUsingPOST_29
2020-03-04 21:45:47 -Generating unique operation named: saveUsingPOST_16
2020-03-04 21:45:47 -Generating unique operation named: updateUsingGET_10
2020-03-04 21:45:47 -Generating unique operation named: updateUsingHEAD_10
2020-03-04 21:45:47 -Generating unique operation named: updateUsingPOST_17
2020-03-04 21:45:47 -Generating unique operation named: updateUsingPUT_10
2020-03-04 21:45:47 -Generating unique operation named: updateUsingPATCH_10
2020-03-04 21:45:47 -Generating unique operation named: updateUsingDELETE_10
2020-03-04 21:45:47 -Generating unique operation named: updateUsingOPTIONS_10
2020-03-04 21:45:47 -Generating unique operation named: updateUsingTRACE_10
2020-03-04 21:45:47 -Generating unique operation named: exprotExcelUsingGET_5
2020-03-04 21:45:47 -Generating unique operation named: addUsingGET_17
2020-03-04 21:45:47 -Generating unique operation named: editUsingGET_18
2020-03-04 21:45:47 -Generating unique operation named: listUsingGET_20
2020-03-04 21:45:47 -Generating unique operation named: removeUsingPOST_30
2020-03-04 21:45:47 -Generating unique operation named: removeUsingPOST_31
2020-03-04 21:45:47 -Generating unique operation named: saveUsingPOST_17
2020-03-04 21:45:47 -Generating unique operation named: updateUsingGET_11
2020-03-04 21:45:47 -Generating unique operation named: updateUsingHEAD_11
2020-03-04 21:45:47 -Generating unique operation named: updateUsingPOST_18
2020-03-04 21:45:47 -Generating unique operation named: updateUsingPUT_11
2020-03-04 21:45:47 -Generating unique operation named: updateUsingPATCH_11
2020-03-04 21:45:47 -Generating unique operation named: updateUsingDELETE_11
2020-03-04 21:45:47 -Generating unique operation named: updateUsingOPTIONS_11
2020-03-04 21:45:47 -Generating unique operation named: updateUsingTRACE_11
2020-03-04 21:45:47 -Generating unique operation named: addUsingGET_18
2020-03-04 21:45:47 -Generating unique operation named: editUsingGET_19
2020-03-04 21:45:47 -Generating unique operation named: listUsingGET_21
2020-03-04 21:45:47 -Generating unique operation named: removeUsingPOST_32
2020-03-04 21:45:47 -Generating unique operation named: removeUsingPOST_33
2020-03-04 21:45:47 -Generating unique operation named: saveUsingPOST_18
2020-03-04 21:45:47 -Generating unique operation named: updateUsingGET_12
2020-03-04 21:45:47 -Generating unique operation named: updateUsingHEAD_12
2020-03-04 21:45:47 -Generating unique operation named: updateUsingPOST_19
2020-03-04 21:45:47 -Generating unique operation named: updateUsingPUT_12
2020-03-04 21:45:47 -Generating unique operation named: updateUsingPATCH_12
2020-03-04 21:45:47 -Generating unique operation named: updateUsingDELETE_12
2020-03-04 21:45:47 -Generating unique operation named: updateUsingOPTIONS_12
2020-03-04 21:45:47 -Generating unique operation named: updateUsingTRACE_12
2020-03-04 21:45:47 -Starting Quartz Scheduler now
2020-03-04 21:45:47 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED started.
2020-03-04 21:45:47 -Starting...
2020-03-04 21:45:47 -BrokerAvailabilityEvent[available=true, SimpleBrokerMessageHandler [DefaultSubscriptionRegistry[cache[0 destination(s)], registry[0 sessions]]]]
2020-03-04 21:45:47 -Started.
2020-03-04 21:45:47 -Starting ProtocolHandler ["http-nio-8081"]
2020-03-04 21:45:47 -Using a shared selector for servlet write/read
2020-03-04 21:45:47 -Tomcat started on port(s): 8081 (http) with context path ''
2020-03-04 21:45:47 -Started BootdoApplication in 62.751 seconds (JVM running for 64.851)
2020-03-04 21:45:48 -==>  Preparing: select `id`,`cron_expression`,`method_name`,`is_concurrent`,`description`,`update_by`,`bean_class`,`create_date`,`job_status`,`job_group`,`update_date`,`create_by`,`spring_bean`,`job_name` from sys_task order by id desc 
2020-03-04 21:45:48 -==> Parameters: 
2020-03-04 21:45:48 -<==      Total: 1
2020-03-04 21:45:54 -A cookie header was received [1581922663,1582108428,1583149660; JSESSIONID=c7e0f883-3141-4098-8f0f-59adf94ce4d9] that contained an invalid cookie. That cookie will be ignored.Note: further occurrences of this error will be logged at DEBUG level.
2020-03-04 21:45:54 -Initializing Spring FrameworkServlet 'dispatcherServlet'
2020-03-04 21:45:54 -FrameworkServlet 'dispatcherServlet': initialization started
2020-03-04 21:45:54 -FrameworkServlet 'dispatcherServlet': initialization completed in 162 ms
2020-03-04 21:45:55 -Enabling session validation scheduler...
2020-03-04 21:45:55 -请求地址 : http://localhost:8081/login;JSESSIONID=85ebddc7-1bbe-49b0-9523-650b37402ce9
2020-03-04 21:45:55 -HTTP METHOD : GET
2020-03-04 21:45:55 -CLASS_METHOD : com.bootdo.system.controller.LoginController.login
2020-03-04 21:45:55 -参数 : [{}]
2020-03-04 21:45:55 -耗时 : 5
2020-03-04 21:45:55 -返回值 : login
2020-03-04 21:45:57 -请求地址 : http://localhost:8081/getVerify
2020-03-04 21:45:57 -HTTP METHOD : GET
2020-03-04 21:45:57 -CLASS_METHOD : com.bootdo.system.controller.LoginController.getVerify
2020-03-04 21:45:57 -参数 : [org.apache.shiro.web.servlet.ShiroHttpServletRequest@746b236b, org.apache.shiro.web.servlet.ShiroHttpServletResponse@7aacd396]
2020-03-04 21:46:04 -3592
2020-03-04 21:46:05 -耗时 : 8301
2020-03-04 21:46:05 -返回值 : null
2020-03-04 21:46:10 -请求地址 : http://localhost:8081/login
2020-03-04 21:46:10 -HTTP METHOD : POST
2020-03-04 21:46:10 -CLASS_METHOD : com.bootdo.system.controller.LoginController.ajaxLogin
2020-03-04 21:46:10 -参数 : [admin, 111111, 3592, org.apache.shiro.web.servlet.ShiroHttpServletRequest@3e9399f2]
2020-03-04 21:46:10 -==>  Preparing: select `user_id`,`username`,`name`,`password`,`dept_id`,`email`,`mobile`,`status`,`user_id_create`,`gmt_create`,`gmt_modified`,`sex`,`birth`,`pic_id`,`live_address`,`hobby`,`province`,`city`,`district` from sys_user WHERE username = ? order by user_id desc 
2020-03-04 21:46:10 -==> Parameters: admin(String)
2020-03-04 21:46:10 -<==      Total: 1
2020-03-04 21:46:10 -耗时 : 275
2020-03-04 21:46:10 -返回值 : {msg=操作成功, code=0}
2020-03-04 21:46:11 -More than one TaskExecutor bean found within the context, and none is named 'taskExecutor'. Mark one of them as primary or name it 'taskExecutor' (possibly as an alias) in order to use it for async processing: [clientInboundChannelExecutor, clientOutboundChannelExecutor, brokerChannelExecutor, messageBrokerTaskScheduler]
2020-03-04 21:46:11 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-03-04 21:46:11 -==> Parameters: 1(Long), admin(String), 登录(String), 275(Integer), com.bootdo.system.controller.LoginController.ajaxLogin()(String), null, 127.0.0.1(String), 2020-03-04 21:46:11.018(Timestamp)
2020-03-04 21:46:11 -<==    Updates: 1
2020-03-04 21:46:11 -请求地址 : http://localhost:8081/index
2020-03-04 21:46:11 -HTTP METHOD : GET
2020-03-04 21:46:11 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2020-03-04 21:46:11 -参数 : [{}]
2020-03-04 21:46:11 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2020-03-04 21:46:11 -==> Parameters: 1(Long)
2020-03-04 21:46:11 -<==      Total: 50
2020-03-04 21:46:11 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2020-03-04 21:46:11 -==> Parameters: 138(Long)
2020-03-04 21:46:11 -<==      Total: 1
2020-03-04 21:46:11 -耗时 : 364
2020-03-04 21:46:11 -返回值 : index_v1
2020-03-04 21:46:11 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-03-04 21:46:11 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 364(Integer), com.bootdo.system.controller.LoginController.index()(String), {"menus":[{"attributes":{"icon":"fa fa-money","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-money","url":"/moneyList/moneyList"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"102","parentId":"106","text":"现金缴费"},{"attributes":{"icon":"fa fa-book","url":"/moneyLog/elecLog"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"107","parentId":"106","text":"缴费记录"},{"attributes":{"icon":"fa fa-image","url":"/moneyList/moneyWZ"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"164","parentId":"106","text":"乌镇管理"}],"hasChildren":true,"hasParent":false,"id":"106","parentId":"0","text":"收费管理"},{"attributes":{"icon":"fa fa-lightbulb-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/elec/elec"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"121","parentId":"103","text":"电费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"elec/elecInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"122","parentId":"103","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"elec/elecUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"123","parentId":"103","text":"电表上传"},{"attributes":{"icon":"fa fa-cc","url":"/elec/elecPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"124","parentId":"103","text":"电价管理"}],"hasChildren":true,"hasParent":false,"id":"103","parentId":"0","text":"电费管理"},{"attributes":{"icon":"fa fa-tint","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/water/water"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"117","parentId":"105","text":"水费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"water/waterInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"118","parentId":"105","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"water/waterUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"119","parentId":"105","text":"水费生成"},{"attributes":{"icon":"fa fa-cc","url":"/water/waterPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"120","parentId":"105","text":"水价管理"}],"hasChildren":true,"hasParent":false,"id":"105","parentId":"0","text":"水费管理"},{"attributes":{"icon":"fa fa-fire","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/heat/heat"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"113","parentId":"104","text":"暖费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"heat/heatInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"114","parentId":"104","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"heat/heatUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"115","parentId":"104","text":"暖费生成"},{"attributes":{"icon":"","url":"/heat/heatPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"116","parentId":"104","text":"暖价管理"}],"hasChildren":true,"hasParent":false,"id":"104","parentId":"0","text":"暖费管理"},{"attributes":{"icon":"fa fa-vcard-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-bomb","url":"/print/print"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"149","parentId":"108","text":"票据记录"}],"hasChildren":true,"hasParent":false,"id":"108","parentId":"0","text":"票据管理"},{"attributes":{"icon":"fa fa-bar-chart","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-area-chart","url":"/chart/graph_echarts.html"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","text":"百度chart"},{"attributes":{"icon":"fa fa-sun-o","url":"charts/countDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"109","parentId":"97","text":"日统计报表"},{"attributes":{"icon":"fa fa-calendar","url":"charts/tableDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"161","parentId":"97","text":"日统计表格"},{"attributes":{"icon":"fa fa-registered","url":"charts/countMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"110","parentId":"97","text":"月统计报表"},{"attributes":{"icon":"fa fa-building-o","url":"charts/tableElecMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"162","parentId":"97","text":"月统计表格"},{"attributes":{"icon":"fa fa-support","url":"charts/countYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"111","parentId":"97","text":"年统计报表"},{"attributes":{"icon":"fa fa-book","url":"charts/tableElecYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"163","parentId":"97","text":"年统计表格"},{"attributes":{"icon":"fa fa-money","url":"charts/countOwe"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"155","(String), 127.0.0.1(String), 2020-03-04 21:46:11.921(Timestamp)
2020-03-04 21:46:12 -<==    Updates: 1
2020-03-04 21:46:12 -请求地址 : http://localhost:8081/main
2020-03-04 21:46:12 -HTTP METHOD : GET
2020-03-04 21:46:12 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2020-03-04 21:46:12 -参数 : []
2020-03-04 21:46:12 -耗时 : 2
2020-03-04 21:46:12 -返回值 : main
2020-03-04 21:46:12 -请求地址 : http://localhost:8081/oa/notify/message
2020-03-04 21:46:12 -HTTP METHOD : GET
2020-03-04 21:46:12 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2020-03-04 21:46:12 -参数 : []
2020-03-04 21:46:12 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2020-03-04 21:46:12 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2020-03-04 21:46:12 -请求地址 : http://localhost:8081/main
2020-03-04 21:46:12 -HTTP METHOD : GET
2020-03-04 21:46:12 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2020-03-04 21:46:12 -参数 : []
2020-03-04 21:46:12 -耗时 : 0
2020-03-04 21:46:12 -返回值 : main
2020-03-04 21:46:12 -<==      Total: 0
2020-03-04 21:46:12 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2020-03-04 21:46:12 -==> Parameters: 1(Long), 0(String)
2020-03-04 21:46:12 -<==      Total: 1
2020-03-04 21:46:12 -耗时 : 119
2020-03-04 21:46:12 -返回值 : com.bootdo.common.utils.PageUtils@14f37ace
2020-03-04 21:46:17 -==>  Preparing: select distinct m.perms from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id = ur.role_id where ur.user_id = ? 
2020-03-04 21:46:17 -==> Parameters: 1(Long)
2020-03-04 21:46:17 -<==      Total: 94
2020-03-04 21:46:17 -请求地址 : http://localhost:8081/elec/elecInto
2020-03-04 21:46:17 -HTTP METHOD : GET
2020-03-04 21:46:17 -CLASS_METHOD : com.bootdo.elec.controller.ElecIntoController.ElecInto
2020-03-04 21:46:17 -参数 : []
2020-03-04 21:46:17 -耗时 : 1
2020-03-04 21:46:17 -返回值 : elec/elecInto/elecInto
2020-03-04 21:46:22 -请求地址 : http://localhost:8081/system/sysDept/treeView
2020-03-04 21:46:22 -HTTP METHOD : GET
2020-03-04 21:46:22 -CLASS_METHOD : com.bootdo.system.controller.DeptController.treeView
2020-03-04 21:46:22 -参数 : [ModelAndView: materialized View is [null]; model is null]
2020-03-04 21:46:22 -耗时 : 1
2020-03-04 21:46:22 -返回值 : system/dept/deptTree
2020-03-04 21:46:22 -请求地址 : http://localhost:8081/system/sysDept/tree
2020-03-04 21:46:22 -HTTP METHOD : GET
2020-03-04 21:46:22 -CLASS_METHOD : com.bootdo.system.controller.DeptController.tree
2020-03-04 21:46:22 -参数 : []
2020-03-04 21:46:22 -==>  Preparing: select `dept_id`,`parent_id`,`name`,`order_num`,`del_flag` from sys_dept order by dept_id desc 
2020-03-04 21:46:22 -==> Parameters: 
2020-03-04 21:46:22 -<==      Total: 3
2020-03-04 21:46:22 -耗时 : 49
2020-03-04 21:46:22 -返回值 : {"checked":false,"children":[{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"3","parentId":"1","state":{"opened":true},"text":"牙星"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"2","parentId":"1","state":{"opened":true},"text":"五九"}],"hasChildren":true,"hasParent":false,"id":"1","parentId":"0","state":{"opened":true},"text":"总公司"}
2020-03-04 21:46:30 -请求地址 : http://localhost:8081/elec/elecInto/importElecIntoExcel
2020-03-04 21:46:30 -HTTP METHOD : POST
2020-03-04 21:46:30 -CLASS_METHOD : com.bootdo.elec.controller.ElecIntoController.importElecIntoExcel
2020-03-04 21:46:30 -参数 : [org.springframework.web.multipart.support.StandardMultipartHttpServletRequest$StandardMultipartFile@27f5fba8, com.bootdo.elec.vo.ElecVo@6c50bd5f, org.apache.shiro.web.servlet.ShiroHttpServletResponse@47b1e0a1]
2020-03-04 21:46:32 -WebSocketSession[1 current WS(0)-HttpStream(1)-HttpPoll(0), 2 total, 0 closed abnormally (0 connect failure, 0 send limit, 3 transport error)], stompSubProtocol[processed CONNECT(1)-CONNECTED(1)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 8, active threads = 0, queued tasks = 0, completed tasks = 12], outboundChannelpool size = 2, active threads = 0, queued tasks = 0, completed tasks = 2], sockJsScheduler[pool size = 4, active threads = 1, queued tasks = 2, completed tasks = 4]
2020-03-04 21:46:33 -==>  Preparing: UPDATE ELEC SET ELEC_SUM = ELEC_SUM + ? WHERE CREATE_TIME = ? and user_org = ? and USER_ID = ? and USER_NAME = ? and `user_type` = 'B' 
2020-03-04 21:46:33 -==> Parameters: 100(BigDecimal), 2019-12(String), 2(String), 1-0005(String), 李生(String)
2020-03-04 21:46:34 -<==    Updates: 1
2020-03-04 21:46:34 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, `user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec WHERE CREATE_TIME = ? and user_org = ? and USER_ID = ? and USER_NAME = ? and `user_type` = 'B' 
2020-03-04 21:46:34 -==> Parameters: 2019-12(String), 2(String), 1-0005(String), 李生(String)
2020-03-04 21:46:34 -<==      Total: 1
2020-03-04 21:46:34 -==>  Preparing: insert into elec_log ( `user_id`, `user_name`, `user_type`, `user_org`, `elec_type`, `elec_money`, `money_date`, `create_time`, `create_by`, `update_time`, `update_by`, `remark` ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-03-04 21:46:34 -==> Parameters: 1-0005(String), 李生(String), B(String), 2(String), 1(String), 100(BigDecimal), 2020-03-04 21:46:34.196(Timestamp), 2019-12(String), admin(String), 2020-03-04 21:46:34.197(Timestamp), admin(String), null
2020-03-04 21:46:34 -<==    Updates: 1
2020-03-04 21:46:34 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`start`,`end`,`hu`,`elec_price`,`elec_amount`,`elec_cost`,`elec_sum`,`elec_money`,`heat_price`,`heat_area`,`heat_cost`,`heat_sum`,`heat_money`,`water_price`,`water_cost`,`water_sum`,`water_money`,`print_date`,`print_money`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from print where user_id = ? and user_org = ? and create_time = ? and date_format(print_date,'%Y-%m-%d') = date_format(?,'%Y-%m-%d') 
2020-03-04 21:46:34 -==> Parameters: 1-0005(String), 2(String), 2019-12(String), 2020-03-04 21:46:34.196(Timestamp)
2020-03-04 21:46:34 -<==      Total: 1
2020-03-04 21:46:34 -==>  Preparing: update print SET `user_id` = ?, `user_name` = ?, `user_type` = ?, `user_org` = ?, `start` = ?, `end` = ?, `hu` = ?, `elec_price` = ?, `elec_amount` = ?, `elec_cost` = ?, `elec_sum` = ?, `elec_money` = ?, `print_date` = ?, `create_time` = ?, `create_by` = ?, `update_time` = ?, `update_by` = ? where id = ? 
2020-03-04 21:46:34 -==> Parameters: 1-0005(String), 李生(String), B(String), 2(String), 8481.0(BigDecimal), 8581.0(BigDecimal), 1(Integer), 0.465(BigDecimal), 100.00(BigDecimal), 46.50(BigDecimal), 1100.01(BigDecimal), 100(BigDecimal), 2020-03-04 21:46:34.288(Timestamp), 2019-12(String), admin(String), 2020-03-04 21:46:34.288(Timestamp), admin(String), 12253(Long)
2020-03-04 21:46:34 -<==    Updates: 1
2020-03-04 21:46:34 -==>  Preparing: UPDATE ELEC SET ELEC_SUM = ELEC_SUM + ? WHERE CREATE_TIME = ? and user_org = ? and USER_ID = ? and USER_NAME = ? and `user_type` = 'B' 
2020-03-04 21:46:34 -==> Parameters: 100(BigDecimal), 2019-12(String), 2(String), 1-0008(String), 王明刚1(String)
2020-03-04 21:46:34 -<==    Updates: 0
2020-03-04 21:46:34 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, `user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec WHERE CREATE_TIME = ? and user_org = ? and USER_ID = ? and USER_NAME = ? and `user_type` = 'B' 
2020-03-04 21:46:34 -==> Parameters: 2019-12(String), 2(String), 1-0008(String), 王明刚1(String)
2020-03-04 21:46:34 -<==      Total: 0
2020-03-04 21:46:34 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-03-04 21:46:34 -==> Parameters: 1(Long), admin(String), error(String), null, http://localhost:8081/elec/elecInto/importElecIntoExcel(String), java.lang.Exception: java.lang.Exception: 第3行，数据与数据库不匹配请认真编写(String), null, 2020-03-04 21:46:34.756(Timestamp)
2020-03-04 21:46:34 -java.lang.Exception: 第3行，数据与数据库不匹配请认真编写
java.lang.Exception: java.lang.Exception: 第3行，数据与数据库不匹配请认真编写
	at com.bootdo.elec.service.impl.ElecIntoServiceImpl.importElecIntoExcel(ElecIntoServiceImpl.java:182)
	at com.bootdo.elec.service.impl.ElecIntoServiceImpl$$FastClassBySpringCGLIB$$a9130840.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:204)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:746)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:294)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:98)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.bootdo.elec.service.impl.ElecIntoServiceImpl$$EnhancerBySpringCGLIB$$a7c08ffd.importElecIntoExcel(<generated>)
	at com.bootdo.elec.controller.ElecIntoController.importElecIntoExcel(ElecIntoController.java:65)
	at com.bootdo.elec.controller.ElecIntoController$$FastClassBySpringCGLIB$$3f35846e.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:204)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:746)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.bootdo.common.aspect.WebLogAspect.doAround(WebLogAspect.java:58)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.bootdo.elec.controller.ElecIntoController$$EnhancerBySpringCGLIB$$c82242fb.importElecIntoExcel(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:209)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:877)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:783)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:991)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:925)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:974)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:877)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:661)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:851)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:61)
	at org.apache.shiro.web.servlet.AdviceFilter.executeChain(AdviceFilter.java:108)
	at org.apache.shiro.web.servlet.AdviceFilter.doFilterInternal(AdviceFilter.java:137)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:66)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)
	at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)
	at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)
	at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)
	at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:383)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:109)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:496)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:790)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1468)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:745)
Caused by: java.lang.Exception: 第3行，数据与数据库不匹配请认真编写
	at com.bootdo.elec.service.impl.ElecIntoServiceImpl.importElecIntoExcel(ElecIntoServiceImpl.java:91)
	... 103 common frames omitted
2020-03-04 21:46:34 -<==    Updates: 1
2020-03-04 21:46:39 -请求地址 : http://localhost:8081/elec/elec
2020-03-04 21:46:39 -HTTP METHOD : GET
2020-03-04 21:46:39 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.Elec
2020-03-04 21:46:39 -参数 : []
2020-03-04 21:46:39 -耗时 : 1
2020-03-04 21:46:39 -返回值 : elec/elec/elec
2020-03-04 21:46:40 -请求地址 : http://localhost:8081/common/dict/list/userType
2020-03-04 21:46:40 -HTTP METHOD : GET
2020-03-04 21:46:40 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2020-03-04 21:46:40 -参数 : [userType]
2020-03-04 21:46:40 -请求地址 : http://localhost:8081/common/dict/list/elecType
2020-03-04 21:46:40 -HTTP METHOD : GET
2020-03-04 21:46:40 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2020-03-04 21:46:40 -参数 : [elecType]
2020-03-04 21:46:40 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2020-03-04 21:46:40 -==> Parameters: elecType(String)
2020-03-04 21:46:40 -<==      Total: 11
2020-03-04 21:46:40 -耗时 : 52
2020-03-04 21:46:40 -返回值 : [DictDO{id=180, name='矿民用', value='1', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=179, name='矿商业', value='2', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=178, name='矿工业1', value='3', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=177, name='矿工业2', value='4', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=176, name='矿工业3', value='5', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=175, name='乌民用', value='6', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=174, name='乌商用', value='7', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=173, name='乌工业', value='8', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=172, name='煤民用', value='9', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=171, name='煤商业', value='10', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=170, name='政府用电', value='11', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2020-03-04 21:46:40 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2020-03-04 21:46:40 -==> Parameters: userType(String)
2020-03-04 21:46:40 -<==      Total: 4
2020-03-04 21:46:40 -耗时 : 82
2020-03-04 21:46:40 -返回值 : [DictDO{id=145, name='银行转账', value='D', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=144, name='微信支付', value='C', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2020-03-04 21:46:40 -请求地址 : http://localhost:8081/elec/elec/list
2020-03-04 21:46:40 -HTTP METHOD : GET
2020-03-04 21:46:40 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.list
2020-03-04 21:46:40 -参数 : [{limit=10, offset=0, userType=, elecType=, userOrg=, userId=, createTime=, queryType=1}, com.bootdo.elec.domain.ElecDO@7643ff23]
2020-03-04 21:46:40 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, `user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec order by id asc limit ?, ? 
2020-03-04 21:46:40 -==> Parameters: 0(Integer), 10(Integer)
2020-03-04 21:46:40 -<==      Total: 10
2020-03-04 21:46:40 -==>  Preparing: select count(*) from elec 
2020-03-04 21:46:40 -==> Parameters: 
2020-03-04 21:46:41 -<==      Total: 1
2020-03-04 21:46:41 -耗时 : 414
2020-03-04 21:46:41 -返回值 : com.bootdo.common.utils.PageUtils@1691ebab
2020-03-04 21:46:51 -请求地址 : http://localhost:8081/elec/elec/list
2020-03-04 21:46:51 -HTTP METHOD : GET
2020-03-04 21:46:51 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.list
2020-03-04 21:46:51 -参数 : [{limit=10, offset=0, userType=B, elecType=, userOrg=, userId=, createTime=2019-12, queryType=1, type=B}, com.bootdo.elec.domain.ElecDO@597e8536]
2020-03-04 21:46:51 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, `user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec WHERE `create_time` = ? and user_type = ? order by id asc limit ?, ? 
2020-03-04 21:46:51 -==> Parameters: 2019-12(String), B(String), 0(Integer), 10(Integer)
2020-03-04 21:46:51 -<==      Total: 10
2020-03-04 21:46:51 -==>  Preparing: select count(*) from elec WHERE `create_time` = ? and user_type = ? 
2020-03-04 21:46:51 -==> Parameters: 2019-12(String), B(String)
2020-03-04 21:46:52 -<==      Total: 1
2020-03-04 21:46:52 -耗时 : 233
2020-03-04 21:46:52 -返回值 : com.bootdo.common.utils.PageUtils@33b28780
2020-03-04 21:46:53 -请求地址 : http://localhost:8081/elec/elec/list
2020-03-04 21:46:53 -HTTP METHOD : GET
2020-03-04 21:46:53 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.list
2020-03-04 21:46:53 -参数 : [{limit=10, offset=0, userType=B, elecType=, userOrg=, userId=, createTime=2019-12, queryType=1}, com.bootdo.elec.domain.ElecDO@1a88e58e]
2020-03-04 21:46:53 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, `user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec WHERE `create_time` = ? and user_type = ? order by id asc limit ?, ? 
2020-03-04 21:46:53 -==> Parameters: 2019-12(String), B(String), 0(Integer), 10(Integer)
2020-03-04 21:46:53 -<==      Total: 10
2020-03-04 21:46:53 -==>  Preparing: select count(*) from elec WHERE `create_time` = ? and user_type = ? 
2020-03-04 21:46:53 -==> Parameters: 2019-12(String), B(String)
2020-03-04 21:46:53 -<==      Total: 1
2020-03-04 21:46:53 -耗时 : 131
2020-03-04 21:46:53 -返回值 : com.bootdo.common.utils.PageUtils@3649d27e
2020-03-04 21:47:19 -请求地址 : http://localhost:8081/elec/elecInto/importElecIntoExcel
2020-03-04 21:47:19 -HTTP METHOD : POST
2020-03-04 21:47:19 -CLASS_METHOD : com.bootdo.elec.controller.ElecIntoController.importElecIntoExcel
2020-03-04 21:47:19 -参数 : [org.springframework.web.multipart.support.StandardMultipartHttpServletRequest$StandardMultipartFile@75446f52, com.bootdo.elec.vo.ElecVo@737ebcd2, org.apache.shiro.web.servlet.ShiroHttpServletResponse@2d054e4c]
2020-03-04 21:47:19 -==>  Preparing: UPDATE ELEC SET ELEC_SUM = ELEC_SUM + ? WHERE CREATE_TIME = ? and user_org = ? and USER_ID = ? and USER_NAME = ? and `user_type` = 'B' 
2020-03-04 21:47:19 -==> Parameters: 100(BigDecimal), 2019-12(String), 2(String), 1-0005(String), 李生(String)
2020-03-04 21:47:19 -<==    Updates: 1
2020-03-04 21:47:19 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, `user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec WHERE CREATE_TIME = ? and user_org = ? and USER_ID = ? and USER_NAME = ? and `user_type` = 'B' 
2020-03-04 21:47:19 -==> Parameters: 2019-12(String), 2(String), 1-0005(String), 李生(String)
2020-03-04 21:47:19 -<==      Total: 1
2020-03-04 21:47:19 -==>  Preparing: insert into elec_log ( `user_id`, `user_name`, `user_type`, `user_org`, `elec_type`, `elec_money`, `money_date`, `create_time`, `create_by`, `update_time`, `update_by`, `remark` ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-03-04 21:47:19 -==> Parameters: 1-0005(String), 李生(String), B(String), 2(String), 1(String), 100(BigDecimal), 2020-03-04 21:47:19.673(Timestamp), 2019-12(String), admin(String), 2020-03-04 21:47:19.673(Timestamp), admin(String), null
2020-03-04 21:47:19 -<==    Updates: 1
2020-03-04 21:47:19 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`start`,`end`,`hu`,`elec_price`,`elec_amount`,`elec_cost`,`elec_sum`,`elec_money`,`heat_price`,`heat_area`,`heat_cost`,`heat_sum`,`heat_money`,`water_price`,`water_cost`,`water_sum`,`water_money`,`print_date`,`print_money`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from print where user_id = ? and user_org = ? and create_time = ? and date_format(print_date,'%Y-%m-%d') = date_format(?,'%Y-%m-%d') 
2020-03-04 21:47:19 -==> Parameters: 1-0005(String), 2(String), 2019-12(String), 2020-03-04 21:47:19.673(Timestamp)
2020-03-04 21:47:19 -<==      Total: 1
2020-03-04 21:47:19 -==>  Preparing: update print SET `user_id` = ?, `user_name` = ?, `user_type` = ?, `user_org` = ?, `start` = ?, `end` = ?, `hu` = ?, `elec_price` = ?, `elec_amount` = ?, `elec_cost` = ?, `elec_sum` = ?, `elec_money` = ?, `print_date` = ?, `create_time` = ?, `create_by` = ?, `update_time` = ?, `update_by` = ? where id = ? 
2020-03-04 21:47:19 -==> Parameters: 1-0005(String), 李生(String), B(String), 2(String), 8481.0(BigDecimal), 8581.0(BigDecimal), 1(Integer), 0.465(BigDecimal), 100.00(BigDecimal), 46.50(BigDecimal), 1100.01(BigDecimal), 100(BigDecimal), 2020-03-04 21:47:19.711(Timestamp), 2019-12(String), admin(String), 2020-03-04 21:47:19.711(Timestamp), admin(String), 12253(Long)
2020-03-04 21:47:19 -<==    Updates: 1
2020-03-04 21:47:19 -==>  Preparing: UPDATE ELEC SET ELEC_SUM = ELEC_SUM + ? WHERE CREATE_TIME = ? and user_org = ? and USER_ID = ? and USER_NAME = ? and `user_type` = 'B' 
2020-03-04 21:47:19 -==> Parameters: 100(BigDecimal), 2019-12(String), 2(String), 1-0008(String), 王明刚1(String)
2020-03-04 21:47:19 -<==    Updates: 0
2020-03-04 21:47:19 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, `user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec WHERE CREATE_TIME = ? and user_org = ? and USER_ID = ? and USER_NAME = ? and `user_type` = 'B' 
2020-03-04 21:47:19 -==> Parameters: 2019-12(String), 2(String), 1-0008(String), 王明刚1(String)
2020-03-04 21:47:19 -<==      Total: 0
2020-03-04 21:47:20 -java.lang.Exception: 第3行，数据与数据库不匹配请认真编写
java.lang.Exception: java.lang.Exception: 第3行，数据与数据库不匹配请认真编写
	at com.bootdo.elec.service.impl.ElecIntoServiceImpl.importElecIntoExcel(ElecIntoServiceImpl.java:182)
	at com.bootdo.elec.service.impl.ElecIntoServiceImpl$$FastClassBySpringCGLIB$$a9130840.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:204)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:746)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:294)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:98)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.bootdo.elec.service.impl.ElecIntoServiceImpl$$EnhancerBySpringCGLIB$$a7c08ffd.importElecIntoExcel(<generated>)
	at com.bootdo.elec.controller.ElecIntoController.importElecIntoExcel(ElecIntoController.java:65)
	at com.bootdo.elec.controller.ElecIntoController$$FastClassBySpringCGLIB$$3f35846e.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:204)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:746)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.bootdo.common.aspect.WebLogAspect.doAround(WebLogAspect.java:58)
	at sun.reflect.GeneratedMethodAccessor134.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.bootdo.elec.controller.ElecIntoController$$EnhancerBySpringCGLIB$$c82242fb.importElecIntoExcel(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:209)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:877)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:783)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:991)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:925)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:974)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:877)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:661)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:851)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:61)
	at org.apache.shiro.web.servlet.AdviceFilter.executeChain(AdviceFilter.java:108)
	at org.apache.shiro.web.servlet.AdviceFilter.doFilterInternal(AdviceFilter.java:137)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:66)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)
	at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)
	at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)
	at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)
	at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:383)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:109)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:496)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:790)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1468)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:745)
Caused by: java.lang.Exception: 第3行，数据与数据库不匹配请认真编写
	at com.bootdo.elec.service.impl.ElecIntoServiceImpl.importElecIntoExcel(ElecIntoServiceImpl.java:91)
	... 102 common frames omitted
2020-03-04 21:47:20 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-03-04 21:47:20 -==> Parameters: 1(Long), admin(String), error(String), null, http://localhost:8081/elec/elecInto/importElecIntoExcel(String), java.lang.Exception: java.lang.Exception: 第3行，数据与数据库不匹配请认真编写(String), null, 2020-03-04 21:47:20.22(Timestamp)
2020-03-04 21:47:20 -<==    Updates: 1
2020-03-04 21:47:25 -请求地址 : http://localhost:8081/elec/elec/list
2020-03-04 21:47:25 -HTTP METHOD : GET
2020-03-04 21:47:25 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.list
2020-03-04 21:47:25 -参数 : [{limit=10, offset=0, userType=B, elecType=, userOrg=, userId=, createTime=2019-12, queryType=1}, com.bootdo.elec.domain.ElecDO@6c338815]
2020-03-04 21:47:25 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, `user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec WHERE `create_time` = ? and user_type = ? order by id asc limit ?, ? 
2020-03-04 21:47:25 -==> Parameters: 2019-12(String), B(String), 0(Integer), 10(Integer)
2020-03-04 21:47:26 -<==      Total: 10
2020-03-04 21:47:26 -==>  Preparing: select count(*) from elec WHERE `create_time` = ? and user_type = ? 
2020-03-04 21:47:26 -==> Parameters: 2019-12(String), B(String)
2020-03-04 21:47:26 -<==      Total: 1
2020-03-04 21:47:26 -耗时 : 360
2020-03-04 21:47:26 -返回值 : com.bootdo.common.utils.PageUtils@767c3d01
2020-03-04 21:50:22 -请求地址 : http://localhost:8081/index
2020-03-04 21:50:22 -HTTP METHOD : GET
2020-03-04 21:50:22 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2020-03-04 21:50:22 -参数 : [{}]
2020-03-04 21:50:22 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2020-03-04 21:50:22 -==> Parameters: 1(Long)
2020-03-04 21:50:22 -<==      Total: 50
2020-03-04 21:50:22 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2020-03-04 21:50:22 -==> Parameters: 138(Long)
2020-03-04 21:50:23 -<==      Total: 1
2020-03-04 21:50:23 -耗时 : 548
2020-03-04 21:50:23 -返回值 : index_v1
2020-03-04 21:50:23 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-03-04 21:50:23 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 548(Integer), com.bootdo.system.controller.LoginController.index()(String), {"menus":[{"attributes":{"icon":"fa fa-money","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-money","url":"/moneyList/moneyList"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"102","parentId":"106","text":"现金缴费"},{"attributes":{"icon":"fa fa-book","url":"/moneyLog/elecLog"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"107","parentId":"106","text":"缴费记录"},{"attributes":{"icon":"fa fa-image","url":"/moneyList/moneyWZ"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"164","parentId":"106","text":"乌镇管理"}],"hasChildren":true,"hasParent":false,"id":"106","parentId":"0","text":"收费管理"},{"attributes":{"icon":"fa fa-lightbulb-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/elec/elec"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"121","parentId":"103","text":"电费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"elec/elecInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"122","parentId":"103","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"elec/elecUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"123","parentId":"103","text":"电表上传"},{"attributes":{"icon":"fa fa-cc","url":"/elec/elecPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"124","parentId":"103","text":"电价管理"}],"hasChildren":true,"hasParent":false,"id":"103","parentId":"0","text":"电费管理"},{"attributes":{"icon":"fa fa-tint","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/water/water"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"117","parentId":"105","text":"水费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"water/waterInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"118","parentId":"105","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"water/waterUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"119","parentId":"105","text":"水费生成"},{"attributes":{"icon":"fa fa-cc","url":"/water/waterPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"120","parentId":"105","text":"水价管理"}],"hasChildren":true,"hasParent":false,"id":"105","parentId":"0","text":"水费管理"},{"attributes":{"icon":"fa fa-fire","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/heat/heat"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"113","parentId":"104","text":"暖费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"heat/heatInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"114","parentId":"104","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"heat/heatUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"115","parentId":"104","text":"暖费生成"},{"attributes":{"icon":"","url":"/heat/heatPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"116","parentId":"104","text":"暖价管理"}],"hasChildren":true,"hasParent":false,"id":"104","parentId":"0","text":"暖费管理"},{"attributes":{"icon":"fa fa-vcard-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-bomb","url":"/print/print"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"149","parentId":"108","text":"票据记录"}],"hasChildren":true,"hasParent":false,"id":"108","parentId":"0","text":"票据管理"},{"attributes":{"icon":"fa fa-bar-chart","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-area-chart","url":"/chart/graph_echarts.html"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","text":"百度chart"},{"attributes":{"icon":"fa fa-sun-o","url":"charts/countDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"109","parentId":"97","text":"日统计报表"},{"attributes":{"icon":"fa fa-calendar","url":"charts/tableDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"161","parentId":"97","text":"日统计表格"},{"attributes":{"icon":"fa fa-registered","url":"charts/countMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"110","parentId":"97","text":"月统计报表"},{"attributes":{"icon":"fa fa-building-o","url":"charts/tableElecMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"162","parentId":"97","text":"月统计表格"},{"attributes":{"icon":"fa fa-support","url":"charts/countYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"111","parentId":"97","text":"年统计报表"},{"attributes":{"icon":"fa fa-book","url":"charts/tableElecYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"163","parentId":"97","text":"年统计表格"},{"attributes":{"icon":"fa fa-money","url":"charts/countOwe"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"155","(String), 127.0.0.1(String), 2020-03-04 21:50:23.058(Timestamp)
2020-03-04 21:50:23 -<==    Updates: 1
2020-03-04 21:50:23 -请求地址 : http://localhost:8081/main
2020-03-04 21:50:23 -HTTP METHOD : GET
2020-03-04 21:50:23 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2020-03-04 21:50:23 -参数 : []
2020-03-04 21:50:23 -耗时 : 1
2020-03-04 21:50:23 -返回值 : main
2020-03-04 21:50:24 -请求地址 : http://localhost:8081/oa/notify/message
2020-03-04 21:50:24 -HTTP METHOD : GET
2020-03-04 21:50:24 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2020-03-04 21:50:24 -参数 : []
2020-03-04 21:50:24 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2020-03-04 21:50:24 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2020-03-04 21:50:24 -请求地址 : http://localhost:8081/main
2020-03-04 21:50:24 -HTTP METHOD : GET
2020-03-04 21:50:24 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2020-03-04 21:50:24 -参数 : []
2020-03-04 21:50:24 -耗时 : 0
2020-03-04 21:50:24 -返回值 : main
2020-03-04 21:50:24 -<==      Total: 0
2020-03-04 21:50:24 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2020-03-04 21:50:24 -==> Parameters: 1(Long), 0(String)
2020-03-04 21:50:24 -<==      Total: 1
2020-03-04 21:50:24 -耗时 : 104
2020-03-04 21:50:24 -返回值 : com.bootdo.common.utils.PageUtils@202723ae
2020-03-04 21:50:27 -请求地址 : http://localhost:8081/elec/elecInto
2020-03-04 21:50:27 -HTTP METHOD : GET
2020-03-04 21:50:27 -CLASS_METHOD : com.bootdo.elec.controller.ElecIntoController.ElecInto
2020-03-04 21:50:27 -参数 : []
2020-03-04 21:50:27 -耗时 : 0
2020-03-04 21:50:27 -返回值 : elec/elecInto/elecInto
2020-03-04 21:50:33 -请求地址 : http://localhost:8081/system/sysDept/treeView
2020-03-04 21:50:33 -HTTP METHOD : GET
2020-03-04 21:50:33 -CLASS_METHOD : com.bootdo.system.controller.DeptController.treeView
2020-03-04 21:50:33 -参数 : [ModelAndView: materialized View is [null]; model is null]
2020-03-04 21:50:33 -耗时 : 0
2020-03-04 21:50:33 -返回值 : system/dept/deptTree
2020-03-04 21:50:33 -请求地址 : http://localhost:8081/system/sysDept/tree
2020-03-04 21:50:33 -HTTP METHOD : GET
2020-03-04 21:50:33 -CLASS_METHOD : com.bootdo.system.controller.DeptController.tree
2020-03-04 21:50:33 -参数 : []
2020-03-04 21:50:33 -==>  Preparing: select `dept_id`,`parent_id`,`name`,`order_num`,`del_flag` from sys_dept order by dept_id desc 
2020-03-04 21:50:33 -==> Parameters: 
2020-03-04 21:50:33 -<==      Total: 3
2020-03-04 21:50:33 -耗时 : 5
2020-03-04 21:50:33 -返回值 : {"checked":false,"children":[{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"3","parentId":"1","state":{"opened":true},"text":"牙星"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"2","parentId":"1","state":{"opened":true},"text":"五九"}],"hasChildren":true,"hasParent":false,"id":"1","parentId":"0","state":{"opened":true},"text":"总公司"}
2020-03-04 21:50:40 -请求地址 : http://localhost:8081/elec/elecInto/importElecIntoExcel
2020-03-04 21:50:40 -HTTP METHOD : POST
2020-03-04 21:50:40 -CLASS_METHOD : com.bootdo.elec.controller.ElecIntoController.importElecIntoExcel
2020-03-04 21:50:40 -参数 : [org.springframework.web.multipart.support.StandardMultipartHttpServletRequest$StandardMultipartFile@27222bec, com.bootdo.elec.vo.ElecVo@6611519, org.apache.shiro.web.servlet.ShiroHttpServletResponse@1e9d22df]
2020-03-04 21:50:40 -==>  Preparing: UPDATE ELEC SET ELEC_SUM = ELEC_SUM + ? WHERE CREATE_TIME = ? and user_org = ? and USER_ID = ? and USER_NAME = ? and `user_type` = 'B' 
2020-03-04 21:50:40 -==> Parameters: 100(BigDecimal), 2019-12(String), 2(String), 1-0005(String), 李生(String)
2020-03-04 21:50:40 -<==    Updates: 1
2020-03-04 21:50:40 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, `user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec WHERE CREATE_TIME = ? and user_org = ? and USER_ID = ? and USER_NAME = ? and `user_type` = 'B' 
2020-03-04 21:50:40 -==> Parameters: 2019-12(String), 2(String), 1-0005(String), 李生(String)
2020-03-04 21:50:40 -<==      Total: 1
2020-03-04 21:50:40 -==>  Preparing: insert into elec_log ( `user_id`, `user_name`, `user_type`, `user_org`, `elec_type`, `elec_money`, `money_date`, `create_time`, `create_by`, `update_time`, `update_by`, `remark` ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-03-04 21:50:40 -==> Parameters: 1-0005(String), 李生(String), B(String), 2(String), 1(String), 100(BigDecimal), 2020-03-04 21:50:40.934(Timestamp), 2019-12(String), admin(String), 2020-03-04 21:50:40.934(Timestamp), admin(String), null
2020-03-04 21:50:40 -<==    Updates: 1
2020-03-04 21:50:40 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`start`,`end`,`hu`,`elec_price`,`elec_amount`,`elec_cost`,`elec_sum`,`elec_money`,`heat_price`,`heat_area`,`heat_cost`,`heat_sum`,`heat_money`,`water_price`,`water_cost`,`water_sum`,`water_money`,`print_date`,`print_money`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from print where user_id = ? and user_org = ? and create_time = ? and date_format(print_date,'%Y-%m-%d') = date_format(?,'%Y-%m-%d') 
2020-03-04 21:50:40 -==> Parameters: 1-0005(String), 2(String), 2019-12(String), 2020-03-04 21:50:40.934(Timestamp)
2020-03-04 21:50:40 -<==      Total: 1
2020-03-04 21:50:40 -==>  Preparing: update print SET `user_id` = ?, `user_name` = ?, `user_type` = ?, `user_org` = ?, `start` = ?, `end` = ?, `hu` = ?, `elec_price` = ?, `elec_amount` = ?, `elec_cost` = ?, `elec_sum` = ?, `elec_money` = ?, `print_date` = ?, `create_time` = ?, `create_by` = ?, `update_time` = ?, `update_by` = ? where id = ? 
2020-03-04 21:50:40 -==> Parameters: 1-0005(String), 李生(String), B(String), 2(String), 8481.0(BigDecimal), 8581.0(BigDecimal), 1(Integer), 0.465(BigDecimal), 100.00(BigDecimal), 46.50(BigDecimal), 1100.01(BigDecimal), 100(BigDecimal), 2020-03-04 21:50:40.984(Timestamp), 2019-12(String), admin(String), 2020-03-04 21:50:40.984(Timestamp), admin(String), 12253(Long)
2020-03-04 21:50:40 -<==    Updates: 1
2020-03-04 21:50:40 -==>  Preparing: UPDATE ELEC SET ELEC_SUM = ELEC_SUM + ? WHERE CREATE_TIME = ? and user_org = ? and USER_ID = ? and USER_NAME = ? and `user_type` = 'B' 
2020-03-04 21:50:40 -==> Parameters: 100(BigDecimal), 2019-12(String), 2(String), 1-0008(String), 王明刚1(String)
2020-03-04 21:50:41 -<==    Updates: 0
2020-03-04 21:50:41 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, `user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec WHERE CREATE_TIME = ? and user_org = ? and USER_ID = ? and USER_NAME = ? and `user_type` = 'B' 
2020-03-04 21:50:41 -==> Parameters: 2019-12(String), 2(String), 1-0008(String), 王明刚1(String)
2020-03-04 21:50:41 -<==      Total: 0
2020-03-04 21:50:41 -耗时 : 878
2020-03-04 21:50:41 -返回值 : java.lang.Exception: 第3行，数据与数据库不匹配请认真编写
2020-03-04 21:50:49 -Failed to invoke @ExceptionHandler method: public java.lang.Object com.bootdo.common.exception.BDExceptionHandler.handleException(java.lang.Exception,javax.servlet.http.HttpServletRequest)
org.apache.shiro.UnavailableSecurityManagerException: No SecurityManager accessible to the calling code, either bound to the org.apache.shiro.util.ThreadContext or as a vm static singleton.  This is an invalid application configuration.
	at org.apache.shiro.SecurityUtils.getSecurityManager(SecurityUtils.java:123)
	at org.apache.shiro.subject.Subject$Builder.<init>(Subject.java:627)
	at org.apache.shiro.SecurityUtils.getSubject(SecurityUtils.java:56)
	at com.bootdo.common.utils.ShiroUtils.getSubjct(ShiroUtils.java:20)
	at com.bootdo.common.utils.ShiroUtils.getUser(ShiroUtils.java:23)
	at com.bootdo.common.exception.BDExceptionHandler.handleException(BDExceptionHandler.java:73)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:209)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver.doResolveHandlerMethodException(ExceptionHandlerExceptionResolver.java:404)
	at org.springframework.web.servlet.handler.AbstractHandlerMethodExceptionResolver.doResolveException(AbstractHandlerMethodExceptionResolver.java:61)
	at org.springframework.web.servlet.handler.AbstractHandlerExceptionResolver.resolveException(AbstractHandlerExceptionResolver.java:139)
	at org.springframework.web.servlet.handler.HandlerExceptionResolverComposite.resolveException(HandlerExceptionResolverComposite.java:78)
	at org.springframework.web.servlet.DispatcherServlet.processHandlerException(DispatcherServlet.java:1255)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1062)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1008)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:925)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:974)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:877)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:661)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:851)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:728)
	at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:591)
	at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:527)
	at org.apache.catalina.core.StandardHostValve.custom(StandardHostValve.java:389)
	at org.apache.catalina.core.StandardHostValve.status(StandardHostValve.java:254)
	at org.apache.catalina.core.StandardHostValve.throwable(StandardHostValve.java:349)
	at org.apache.catalina.core.AsyncContextImpl.setErrorState(AsyncContextImpl.java:424)
	at org.apache.catalina.connector.CoyoteAdapter.asyncDispatch(CoyoteAdapter.java:176)
	at org.apache.coyote.AbstractProcessor.dispatch(AbstractProcessor.java:232)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:53)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:790)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1468)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:745)
2020-03-04 21:50:54 -请求地址 : http://localhost:8081/elec/elec
2020-03-04 21:50:54 -HTTP METHOD : GET
2020-03-04 21:50:54 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.Elec
2020-03-04 21:50:54 -参数 : []
2020-03-04 21:50:54 -耗时 : 1
2020-03-04 21:50:54 -返回值 : elec/elec/elec
2020-03-04 21:50:54 -请求地址 : http://localhost:8081/common/dict/list/userType
2020-03-04 21:50:54 -HTTP METHOD : GET
2020-03-04 21:50:54 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2020-03-04 21:50:54 -参数 : [userType]
2020-03-04 21:50:54 -请求地址 : http://localhost:8081/common/dict/list/elecType
2020-03-04 21:50:54 -HTTP METHOD : GET
2020-03-04 21:50:54 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2020-03-04 21:50:54 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2020-03-04 21:50:54 -==> Parameters: userType(String)
2020-03-04 21:50:54 -参数 : [elecType]
2020-03-04 21:50:54 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2020-03-04 21:50:54 -==> Parameters: elecType(String)
2020-03-04 21:50:54 -<==      Total: 4
2020-03-04 21:50:54 -耗时 : 31
2020-03-04 21:50:54 -返回值 : [DictDO{id=145, name='银行转账', value='D', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=144, name='微信支付', value='C', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2020-03-04 21:50:54 -<==      Total: 11
2020-03-04 21:50:54 -耗时 : 32
2020-03-04 21:50:54 -返回值 : [DictDO{id=180, name='矿民用', value='1', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=179, name='矿商业', value='2', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=178, name='矿工业1', value='3', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=177, name='矿工业2', value='4', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=176, name='矿工业3', value='5', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=175, name='乌民用', value='6', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=174, name='乌商用', value='7', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=173, name='乌工业', value='8', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=172, name='煤民用', value='9', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=171, name='煤商业', value='10', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=170, name='政府用电', value='11', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2020-03-04 21:50:54 -请求地址 : http://localhost:8081/elec/elec/list
2020-03-04 21:50:54 -HTTP METHOD : GET
2020-03-04 21:50:54 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.list
2020-03-04 21:50:54 -参数 : [{limit=10, offset=0, userType=, elecType=, userOrg=, userId=, createTime=, queryType=1}, com.bootdo.elec.domain.ElecDO@35d47b8e]
2020-03-04 21:50:54 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, `user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec order by id asc limit ?, ? 
2020-03-04 21:50:54 -==> Parameters: 0(Integer), 10(Integer)
2020-03-04 21:50:55 -<==      Total: 10
2020-03-04 21:50:55 -==>  Preparing: select count(*) from elec 
2020-03-04 21:50:55 -==> Parameters: 
2020-03-04 21:50:55 -<==      Total: 1
2020-03-04 21:50:55 -耗时 : 285
2020-03-04 21:50:55 -返回值 : com.bootdo.common.utils.PageUtils@285f7d5b
2020-03-04 21:50:56 -请求地址 : http://localhost:8081/system/sysDept/treeView
2020-03-04 21:50:56 -HTTP METHOD : GET
2020-03-04 21:50:56 -CLASS_METHOD : com.bootdo.system.controller.DeptController.treeView
2020-03-04 21:50:56 -参数 : [ModelAndView: materialized View is [null]; model is null]
2020-03-04 21:50:56 -耗时 : 0
2020-03-04 21:50:56 -返回值 : system/dept/deptTree
2020-03-04 21:50:57 -请求地址 : http://localhost:8081/system/sysDept/tree
2020-03-04 21:50:57 -HTTP METHOD : GET
2020-03-04 21:50:57 -CLASS_METHOD : com.bootdo.system.controller.DeptController.tree
2020-03-04 21:50:57 -参数 : []
2020-03-04 21:50:57 -==>  Preparing: select `dept_id`,`parent_id`,`name`,`order_num`,`del_flag` from sys_dept order by dept_id desc 
2020-03-04 21:50:57 -==> Parameters: 
2020-03-04 21:50:57 -<==      Total: 3
2020-03-04 21:50:57 -耗时 : 4
2020-03-04 21:50:57 -返回值 : {"checked":false,"children":[{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"3","parentId":"1","state":{"opened":true},"text":"牙星"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"2","parentId":"1","state":{"opened":true},"text":"五九"}],"hasChildren":true,"hasParent":false,"id":"1","parentId":"0","state":{"opened":true},"text":"总公司"}
2020-03-04 21:50:59 -请求地址 : http://localhost:8081/system/sysDept/treeView
2020-03-04 21:50:59 -HTTP METHOD : GET
2020-03-04 21:50:59 -CLASS_METHOD : com.bootdo.system.controller.DeptController.treeView
2020-03-04 21:50:59 -参数 : [ModelAndView: materialized View is [null]; model is null]
2020-03-04 21:50:59 -耗时 : 0
2020-03-04 21:50:59 -返回值 : system/dept/deptTree
2020-03-04 21:50:59 -请求地址 : http://localhost:8081/system/sysDept/tree
2020-03-04 21:50:59 -HTTP METHOD : GET
2020-03-04 21:50:59 -CLASS_METHOD : com.bootdo.system.controller.DeptController.tree
2020-03-04 21:50:59 -参数 : []
2020-03-04 21:50:59 -==>  Preparing: select `dept_id`,`parent_id`,`name`,`order_num`,`del_flag` from sys_dept order by dept_id desc 
2020-03-04 21:50:59 -==> Parameters: 
2020-03-04 21:50:59 -<==      Total: 3
2020-03-04 21:50:59 -耗时 : 3
2020-03-04 21:50:59 -返回值 : {"checked":false,"children":[{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"3","parentId":"1","state":{"opened":true},"text":"牙星"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"2","parentId":"1","state":{"opened":true},"text":"五九"}],"hasChildren":true,"hasParent":false,"id":"1","parentId":"0","state":{"opened":true},"text":"总公司"}
2020-03-04 21:51:11 -请求地址 : http://localhost:8081/elec/elec/list
2020-03-04 21:51:11 -HTTP METHOD : GET
2020-03-04 21:51:11 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.list
2020-03-04 21:51:11 -参数 : [{limit=10, offset=0, userType=B, elecType=, userOrg=2, userId=, createTime=2019-12, queryType=1, type=B}, com.bootdo.elec.domain.ElecDO@66d43c3e]
2020-03-04 21:51:11 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, `user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec WHERE `create_time` = ? and user_type = ? and user_org = ? order by id asc limit ?, ? 
2020-03-04 21:51:11 -==> Parameters: 2019-12(String), B(String), 2(String), 0(Integer), 10(Integer)
2020-03-04 21:51:11 -<==      Total: 10
2020-03-04 21:51:11 -==>  Preparing: select count(*) from elec WHERE `create_time` = ? and user_type = ? and user_org = ? 
2020-03-04 21:51:11 -==> Parameters: 2019-12(String), B(String), 2(String)
2020-03-04 21:51:11 -<==      Total: 1
2020-03-04 21:51:11 -耗时 : 170
2020-03-04 21:51:11 -返回值 : com.bootdo.common.utils.PageUtils@6fdc6bdf
2020-03-04 21:51:12 -请求地址 : http://localhost:8081/elec/elec/list
2020-03-04 21:51:12 -HTTP METHOD : GET
2020-03-04 21:51:12 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.list
2020-03-04 21:51:12 -参数 : [{limit=10, offset=0, userType=B, elecType=, userOrg=2, userId=, createTime=2019-12, queryType=1}, com.bootdo.elec.domain.ElecDO@deef97a]
2020-03-04 21:51:12 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, `user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec WHERE `create_time` = ? and user_type = ? and user_org = ? order by id asc limit ?, ? 
2020-03-04 21:51:12 -==> Parameters: 2019-12(String), B(String), 2(String), 0(Integer), 10(Integer)
2020-03-04 21:51:12 -<==      Total: 10
2020-03-04 21:51:12 -==>  Preparing: select count(*) from elec WHERE `create_time` = ? and user_type = ? and user_org = ? 
2020-03-04 21:51:12 -==> Parameters: 2019-12(String), B(String), 2(String)
2020-03-04 21:51:12 -<==      Total: 1
2020-03-04 21:51:12 -耗时 : 153
2020-03-04 21:51:12 -返回值 : com.bootdo.common.utils.PageUtils@18566232
2020-03-04 21:52:22 -请求地址 : http://localhost:8081/index
2020-03-04 21:52:22 -HTTP METHOD : GET
2020-03-04 21:52:22 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2020-03-04 21:52:22 -参数 : [{}]
2020-03-04 21:52:22 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2020-03-04 21:52:22 -==> Parameters: 1(Long)
2020-03-04 21:52:22 -<==      Total: 50
2020-03-04 21:52:22 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2020-03-04 21:52:22 -==> Parameters: 138(Long)
2020-03-04 21:52:22 -<==      Total: 1
2020-03-04 21:52:22 -耗时 : 165
2020-03-04 21:52:22 -返回值 : index_v1
2020-03-04 21:52:22 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-03-04 21:52:22 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 165(Integer), com.bootdo.system.controller.LoginController.index()(String), {"menus":[{"attributes":{"icon":"fa fa-money","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-money","url":"/moneyList/moneyList"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"102","parentId":"106","text":"现金缴费"},{"attributes":{"icon":"fa fa-book","url":"/moneyLog/elecLog"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"107","parentId":"106","text":"缴费记录"},{"attributes":{"icon":"fa fa-image","url":"/moneyList/moneyWZ"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"164","parentId":"106","text":"乌镇管理"}],"hasChildren":true,"hasParent":false,"id":"106","parentId":"0","text":"收费管理"},{"attributes":{"icon":"fa fa-lightbulb-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/elec/elec"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"121","parentId":"103","text":"电费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"elec/elecInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"122","parentId":"103","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"elec/elecUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"123","parentId":"103","text":"电表上传"},{"attributes":{"icon":"fa fa-cc","url":"/elec/elecPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"124","parentId":"103","text":"电价管理"}],"hasChildren":true,"hasParent":false,"id":"103","parentId":"0","text":"电费管理"},{"attributes":{"icon":"fa fa-tint","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/water/water"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"117","parentId":"105","text":"水费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"water/waterInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"118","parentId":"105","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"water/waterUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"119","parentId":"105","text":"水费生成"},{"attributes":{"icon":"fa fa-cc","url":"/water/waterPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"120","parentId":"105","text":"水价管理"}],"hasChildren":true,"hasParent":false,"id":"105","parentId":"0","text":"水费管理"},{"attributes":{"icon":"fa fa-fire","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/heat/heat"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"113","parentId":"104","text":"暖费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"heat/heatInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"114","parentId":"104","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"heat/heatUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"115","parentId":"104","text":"暖费生成"},{"attributes":{"icon":"","url":"/heat/heatPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"116","parentId":"104","text":"暖价管理"}],"hasChildren":true,"hasParent":false,"id":"104","parentId":"0","text":"暖费管理"},{"attributes":{"icon":"fa fa-vcard-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-bomb","url":"/print/print"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"149","parentId":"108","text":"票据记录"}],"hasChildren":true,"hasParent":false,"id":"108","parentId":"0","text":"票据管理"},{"attributes":{"icon":"fa fa-bar-chart","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-area-chart","url":"/chart/graph_echarts.html"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","text":"百度chart"},{"attributes":{"icon":"fa fa-sun-o","url":"charts/countDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"109","parentId":"97","text":"日统计报表"},{"attributes":{"icon":"fa fa-calendar","url":"charts/tableDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"161","parentId":"97","text":"日统计表格"},{"attributes":{"icon":"fa fa-registered","url":"charts/countMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"110","parentId":"97","text":"月统计报表"},{"attributes":{"icon":"fa fa-building-o","url":"charts/tableElecMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"162","parentId":"97","text":"月统计表格"},{"attributes":{"icon":"fa fa-support","url":"charts/countYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"111","parentId":"97","text":"年统计报表"},{"attributes":{"icon":"fa fa-book","url":"charts/tableElecYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"163","parentId":"97","text":"年统计表格"},{"attributes":{"icon":"fa fa-money","url":"charts/countOwe"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"155","(String), 127.0.0.1(String), 2020-03-04 21:52:22.49(Timestamp)
2020-03-04 21:52:23 -<==    Updates: 1
2020-03-04 21:52:23 -请求地址 : http://localhost:8081/main
2020-03-04 21:52:23 -HTTP METHOD : GET
2020-03-04 21:52:23 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2020-03-04 21:52:23 -参数 : []
2020-03-04 21:52:23 -耗时 : 1
2020-03-04 21:52:23 -返回值 : main
2020-03-04 21:52:24 -请求地址 : http://localhost:8081/oa/notify/message
2020-03-04 21:52:24 -HTTP METHOD : GET
2020-03-04 21:52:24 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2020-03-04 21:52:24 -参数 : []
2020-03-04 21:52:24 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2020-03-04 21:52:24 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2020-03-04 21:52:24 -请求地址 : http://localhost:8081/main
2020-03-04 21:52:24 -HTTP METHOD : GET
2020-03-04 21:52:24 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2020-03-04 21:52:24 -参数 : []
2020-03-04 21:52:24 -耗时 : 0
2020-03-04 21:52:24 -返回值 : main
2020-03-04 21:52:24 -<==      Total: 0
2020-03-04 21:52:24 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2020-03-04 21:52:24 -==> Parameters: 1(Long), 0(String)
2020-03-04 21:52:24 -<==      Total: 1
2020-03-04 21:52:24 -耗时 : 165
2020-03-04 21:52:24 -返回值 : com.bootdo.common.utils.PageUtils@14c8d4ba
2020-03-04 21:52:27 -请求地址 : http://localhost:8081/elec/elecInto
2020-03-04 21:52:27 -HTTP METHOD : GET
2020-03-04 21:52:27 -CLASS_METHOD : com.bootdo.elec.controller.ElecIntoController.ElecInto
2020-03-04 21:52:27 -参数 : []
2020-03-04 21:52:27 -耗时 : 0
2020-03-04 21:52:27 -返回值 : elec/elecInto/elecInto
2020-03-04 21:52:43 -请求地址 : http://localhost:8081/system/sysDept/treeView
2020-03-04 21:52:43 -HTTP METHOD : GET
2020-03-04 21:52:43 -CLASS_METHOD : com.bootdo.system.controller.DeptController.treeView
2020-03-04 21:52:43 -参数 : [ModelAndView: materialized View is [null]; model is null]
2020-03-04 21:52:43 -耗时 : 0
2020-03-04 21:52:43 -返回值 : system/dept/deptTree
2020-03-04 21:52:44 -请求地址 : http://localhost:8081/system/sysDept/tree
2020-03-04 21:52:44 -HTTP METHOD : GET
2020-03-04 21:52:44 -CLASS_METHOD : com.bootdo.system.controller.DeptController.tree
2020-03-04 21:52:44 -参数 : []
2020-03-04 21:52:44 -==>  Preparing: select `dept_id`,`parent_id`,`name`,`order_num`,`del_flag` from sys_dept order by dept_id desc 
2020-03-04 21:52:44 -==> Parameters: 
2020-03-04 21:52:44 -<==      Total: 3
2020-03-04 21:52:44 -耗时 : 134
2020-03-04 21:52:44 -返回值 : {"checked":false,"children":[{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"3","parentId":"1","state":{"opened":true},"text":"牙星"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"2","parentId":"1","state":{"opened":true},"text":"五九"}],"hasChildren":true,"hasParent":false,"id":"1","parentId":"0","state":{"opened":true},"text":"总公司"}
2020-03-04 21:52:53 -请求地址 : http://localhost:8081/elec/elecInto/importElecIntoExcel
2020-03-04 21:52:53 -HTTP METHOD : POST
2020-03-04 21:52:53 -CLASS_METHOD : com.bootdo.elec.controller.ElecIntoController.importElecIntoExcel
2020-03-04 21:52:53 -参数 : [org.springframework.web.multipart.support.StandardMultipartHttpServletRequest$StandardMultipartFile@1c13606f, com.bootdo.elec.vo.ElecVo@661f49bc, org.apache.shiro.web.servlet.ShiroHttpServletResponse@16fb09c7]
2020-03-04 21:52:53 -==>  Preparing: UPDATE ELEC SET ELEC_SUM = ELEC_SUM + ? WHERE CREATE_TIME = ? and user_org = ? and USER_ID = ? and USER_NAME = ? and `user_type` = 'B' 
2020-03-04 21:52:53 -==> Parameters: 100(BigDecimal), 2019-12(String), 2(String), 1-0005(String), 李生(String)
2020-03-04 21:52:53 -<==    Updates: 1
2020-03-04 21:52:53 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, `user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec WHERE CREATE_TIME = ? and user_org = ? and USER_ID = ? and USER_NAME = ? and `user_type` = 'B' 
2020-03-04 21:52:53 -==> Parameters: 2019-12(String), 2(String), 1-0005(String), 李生(String)
2020-03-04 21:52:53 -<==      Total: 1
2020-03-04 21:52:53 -==>  Preparing: insert into elec_log ( `user_id`, `user_name`, `user_type`, `user_org`, `elec_type`, `elec_money`, `money_date`, `create_time`, `create_by`, `update_time`, `update_by`, `remark` ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-03-04 21:52:53 -==> Parameters: 1-0005(String), 李生(String), B(String), 2(String), 1(String), 100(BigDecimal), 2020-03-04 21:52:53.834(Timestamp), 2019-12(String), admin(String), 2020-03-04 21:52:53.834(Timestamp), admin(String), null
2020-03-04 21:52:53 -<==    Updates: 1
2020-03-04 21:52:53 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`start`,`end`,`hu`,`elec_price`,`elec_amount`,`elec_cost`,`elec_sum`,`elec_money`,`heat_price`,`heat_area`,`heat_cost`,`heat_sum`,`heat_money`,`water_price`,`water_cost`,`water_sum`,`water_money`,`print_date`,`print_money`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from print where user_id = ? and user_org = ? and create_time = ? and date_format(print_date,'%Y-%m-%d') = date_format(?,'%Y-%m-%d') 
2020-03-04 21:52:53 -==> Parameters: 1-0005(String), 2(String), 2019-12(String), 2020-03-04 21:52:53.834(Timestamp)
2020-03-04 21:52:53 -<==      Total: 1
2020-03-04 21:52:53 -==>  Preparing: update print SET `user_id` = ?, `user_name` = ?, `user_type` = ?, `user_org` = ?, `start` = ?, `end` = ?, `hu` = ?, `elec_price` = ?, `elec_amount` = ?, `elec_cost` = ?, `elec_sum` = ?, `elec_money` = ?, `print_date` = ?, `create_time` = ?, `create_by` = ?, `update_time` = ?, `update_by` = ? where id = ? 
2020-03-04 21:52:53 -==> Parameters: 1-0005(String), 李生(String), B(String), 2(String), 8481.0(BigDecimal), 8581.0(BigDecimal), 1(Integer), 0.465(BigDecimal), 100.00(BigDecimal), 46.50(BigDecimal), 1100.01(BigDecimal), 100(BigDecimal), 2020-03-04 21:52:53.886(Timestamp), 2019-12(String), admin(String), 2020-03-04 21:52:53.886(Timestamp), admin(String), 12253(Long)
2020-03-04 21:52:53 -<==    Updates: 1
2020-03-04 21:52:53 -==>  Preparing: UPDATE ELEC SET ELEC_SUM = ELEC_SUM + ? WHERE CREATE_TIME = ? and user_org = ? and USER_ID = ? and USER_NAME = ? and `user_type` = 'B' 
2020-03-04 21:52:53 -==> Parameters: 100(BigDecimal), 2019-12(String), 2(String), 1-0008(String), 王明刚1(String)
2020-03-04 21:52:54 -<==    Updates: 0
2020-03-04 21:52:54 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, `user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec WHERE CREATE_TIME = ? and user_org = ? and USER_ID = ? and USER_NAME = ? and `user_type` = 'B' 
2020-03-04 21:52:54 -==> Parameters: 2019-12(String), 2(String), 1-0008(String), 王明刚1(String)
2020-03-04 21:52:54 -<==      Total: 0
2020-03-04 21:52:54 -耗时 : 983
2020-03-04 21:52:54 -返回值 : java.lang.Exception: 第3行，数据与数据库不匹配请认真编写
2020-03-04 21:55:26 -请求地址 : http://localhost:8081/elec/elecInto
2020-03-04 21:55:26 -HTTP METHOD : GET
2020-03-04 21:55:26 -CLASS_METHOD : com.bootdo.elec.controller.ElecIntoController.ElecInto
2020-03-04 21:55:26 -参数 : []
2020-03-04 21:55:26 -耗时 : 0
2020-03-04 21:55:26 -返回值 : elec/elecInto/elecInto
2020-03-04 21:56:18 -请求地址 : http://localhost:8081/system/sysDept/treeView
2020-03-04 21:56:18 -HTTP METHOD : GET
2020-03-04 21:56:18 -CLASS_METHOD : com.bootdo.system.controller.DeptController.treeView
2020-03-04 21:56:18 -参数 : [ModelAndView: materialized View is [null]; model is null]
2020-03-04 21:56:18 -耗时 : 1
2020-03-04 21:56:18 -返回值 : system/dept/deptTree
2020-03-04 21:56:18 -请求地址 : http://localhost:8081/system/sysDept/tree
2020-03-04 21:56:18 -HTTP METHOD : GET
2020-03-04 21:56:18 -CLASS_METHOD : com.bootdo.system.controller.DeptController.tree
2020-03-04 21:56:18 -参数 : []
2020-03-04 21:56:18 -==>  Preparing: select `dept_id`,`parent_id`,`name`,`order_num`,`del_flag` from sys_dept order by dept_id desc 
2020-03-04 21:56:18 -==> Parameters: 
2020-03-04 21:56:18 -<==      Total: 3
2020-03-04 21:56:18 -耗时 : 37
2020-03-04 21:56:18 -返回值 : {"checked":false,"children":[{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"3","parentId":"1","state":{"opened":true},"text":"牙星"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"2","parentId":"1","state":{"opened":true},"text":"五九"}],"hasChildren":true,"hasParent":false,"id":"1","parentId":"0","state":{"opened":true},"text":"总公司"}
2020-03-04 21:56:26 -请求地址 : http://localhost:8081/elec/elecInto/importElecIntoExcel
2020-03-04 21:56:26 -HTTP METHOD : POST
2020-03-04 21:56:26 -CLASS_METHOD : com.bootdo.elec.controller.ElecIntoController.importElecIntoExcel
2020-03-04 21:56:26 -参数 : [org.springframework.web.multipart.support.StandardMultipartHttpServletRequest$StandardMultipartFile@62097d6b, com.bootdo.elec.vo.ElecVo@ab0852, org.apache.shiro.web.servlet.ShiroHttpServletResponse@53c1a5c]
2020-03-04 21:56:26 -==>  Preparing: UPDATE ELEC SET ELEC_SUM = ELEC_SUM + ? WHERE CREATE_TIME = ? and user_org = ? and USER_ID = ? and USER_NAME = ? and `user_type` = 'B' 
2020-03-04 21:56:26 -==> Parameters: 100(BigDecimal), 2019-12(String), 2(String), 1-0005(String), 李生(String)
2020-03-04 21:56:26 -<==    Updates: 1
2020-03-04 21:56:26 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, `user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec WHERE CREATE_TIME = ? and user_org = ? and USER_ID = ? and USER_NAME = ? and `user_type` = 'B' 
2020-03-04 21:56:26 -==> Parameters: 2019-12(String), 2(String), 1-0005(String), 李生(String)
2020-03-04 21:56:26 -<==      Total: 1
2020-03-04 21:56:26 -==>  Preparing: insert into elec_log ( `user_id`, `user_name`, `user_type`, `user_org`, `elec_type`, `elec_money`, `money_date`, `create_time`, `create_by`, `update_time`, `update_by`, `remark` ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-03-04 21:56:26 -==> Parameters: 1-0005(String), 李生(String), B(String), 2(String), 1(String), 100(BigDecimal), 2020-03-04 21:56:26.959(Timestamp), 2019-12(String), admin(String), 2020-03-04 21:56:26.959(Timestamp), admin(String), null
2020-03-04 21:56:26 -<==    Updates: 1
2020-03-04 21:56:26 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`start`,`end`,`hu`,`elec_price`,`elec_amount`,`elec_cost`,`elec_sum`,`elec_money`,`heat_price`,`heat_area`,`heat_cost`,`heat_sum`,`heat_money`,`water_price`,`water_cost`,`water_sum`,`water_money`,`print_date`,`print_money`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from print where user_id = ? and user_org = ? and create_time = ? and date_format(print_date,'%Y-%m-%d') = date_format(?,'%Y-%m-%d') 
2020-03-04 21:56:26 -==> Parameters: 1-0005(String), 2(String), 2019-12(String), 2020-03-04 21:56:26.959(Timestamp)
2020-03-04 21:56:26 -<==      Total: 1
2020-03-04 21:56:26 -==>  Preparing: update print SET `user_id` = ?, `user_name` = ?, `user_type` = ?, `user_org` = ?, `start` = ?, `end` = ?, `hu` = ?, `elec_price` = ?, `elec_amount` = ?, `elec_cost` = ?, `elec_sum` = ?, `elec_money` = ?, `print_date` = ?, `create_time` = ?, `create_by` = ?, `update_time` = ?, `update_by` = ? where id = ? 
2020-03-04 21:56:26 -==> Parameters: 1-0005(String), 李生(String), B(String), 2(String), 8481.0(BigDecimal), 8581.0(BigDecimal), 1(Integer), 0.465(BigDecimal), 100.00(BigDecimal), 46.50(BigDecimal), 1100.01(BigDecimal), 100(BigDecimal), 2020-03-04 21:56:26.988(Timestamp), 2019-12(String), admin(String), 2020-03-04 21:56:26.988(Timestamp), admin(String), 12253(Long)
2020-03-04 21:56:27 -<==    Updates: 1
2020-03-04 21:56:27 -==>  Preparing: UPDATE ELEC SET ELEC_SUM = ELEC_SUM + ? WHERE CREATE_TIME = ? and user_org = ? and USER_ID = ? and USER_NAME = ? and `user_type` = 'B' 
2020-03-04 21:56:27 -==> Parameters: 100(BigDecimal), 2019-12(String), 2(String), 1-0008(String), 王明刚1(String)
2020-03-04 21:56:27 -<==    Updates: 0
2020-03-04 21:56:27 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, `user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec WHERE CREATE_TIME = ? and user_org = ? and USER_ID = ? and USER_NAME = ? and `user_type` = 'B' 
2020-03-04 21:56:27 -==> Parameters: 2019-12(String), 2(String), 1-0008(String), 王明刚1(String)
2020-03-04 21:56:27 -<==      Total: 0
2020-03-04 21:56:27 -耗时 : 1106
2020-03-04 21:56:27 -返回值 : java.lang.Exception: 第3行，数据与数据库不匹配请认真编写
2020-03-04 21:56:58 -请求地址 : http://localhost:8081/elec/elecInto/importElecIntoExcel
2020-03-04 21:56:58 -HTTP METHOD : POST
2020-03-04 21:56:58 -CLASS_METHOD : com.bootdo.elec.controller.ElecIntoController.importElecIntoExcel
2020-03-04 21:56:58 -参数 : [org.springframework.web.multipart.support.StandardMultipartHttpServletRequest$StandardMultipartFile@6607dd05, com.bootdo.elec.vo.ElecVo@5b3d89e, org.apache.shiro.web.servlet.ShiroHttpServletResponse@564c0148]
2020-03-04 21:56:58 -==>  Preparing: UPDATE ELEC SET ELEC_SUM = ELEC_SUM + ? WHERE CREATE_TIME = ? and user_org = ? and USER_ID = ? and USER_NAME = ? and `user_type` = 'B' 
2020-03-04 21:56:58 -==> Parameters: 100(BigDecimal), 2019-12(String), 2(String), 1-0005(String), 李生(String)
2020-03-04 21:56:58 -<==    Updates: 1
2020-03-04 21:56:58 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, `user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec WHERE CREATE_TIME = ? and user_org = ? and USER_ID = ? and USER_NAME = ? and `user_type` = 'B' 
2020-03-04 21:56:58 -==> Parameters: 2019-12(String), 2(String), 1-0005(String), 李生(String)
2020-03-04 21:56:58 -<==      Total: 1
2020-03-04 21:56:58 -==>  Preparing: insert into elec_log ( `user_id`, `user_name`, `user_type`, `user_org`, `elec_type`, `elec_money`, `money_date`, `create_time`, `create_by`, `update_time`, `update_by`, `remark` ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-03-04 21:56:58 -==> Parameters: 1-0005(String), 李生(String), B(String), 2(String), 1(String), 100(BigDecimal), 2020-03-04 21:56:58.928(Timestamp), 2019-12(String), admin(String), 2020-03-04 21:56:58.928(Timestamp), admin(String), null
2020-03-04 21:56:59 -<==    Updates: 1
2020-03-04 21:56:59 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`start`,`end`,`hu`,`elec_price`,`elec_amount`,`elec_cost`,`elec_sum`,`elec_money`,`heat_price`,`heat_area`,`heat_cost`,`heat_sum`,`heat_money`,`water_price`,`water_cost`,`water_sum`,`water_money`,`print_date`,`print_money`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from print where user_id = ? and user_org = ? and create_time = ? and date_format(print_date,'%Y-%m-%d') = date_format(?,'%Y-%m-%d') 
2020-03-04 21:56:59 -==> Parameters: 1-0005(String), 2(String), 2019-12(String), 2020-03-04 21:56:58.928(Timestamp)
2020-03-04 21:56:59 -<==      Total: 1
2020-03-04 21:56:59 -==>  Preparing: update print SET `user_id` = ?, `user_name` = ?, `user_type` = ?, `user_org` = ?, `start` = ?, `end` = ?, `hu` = ?, `elec_price` = ?, `elec_amount` = ?, `elec_cost` = ?, `elec_sum` = ?, `elec_money` = ?, `print_date` = ?, `create_time` = ?, `create_by` = ?, `update_time` = ?, `update_by` = ? where id = ? 
2020-03-04 21:56:59 -==> Parameters: 1-0005(String), 李生(String), B(String), 2(String), 8481.0(BigDecimal), 8581.0(BigDecimal), 1(Integer), 0.465(BigDecimal), 100.00(BigDecimal), 46.50(BigDecimal), 1100.01(BigDecimal), 100(BigDecimal), 2020-03-04 21:56:59.042(Timestamp), 2019-12(String), admin(String), 2020-03-04 21:56:59.042(Timestamp), admin(String), 12253(Long)
2020-03-04 21:56:59 -<==    Updates: 1
2020-03-04 21:56:59 -==>  Preparing: UPDATE ELEC SET ELEC_SUM = ELEC_SUM + ? WHERE CREATE_TIME = ? and user_org = ? and USER_ID = ? and USER_NAME = ? and `user_type` = 'B' 
2020-03-04 21:56:59 -==> Parameters: 100(BigDecimal), 2019-12(String), 2(String), 1-0008(String), 王明刚1(String)
2020-03-04 21:56:59 -<==    Updates: 0
2020-03-04 21:56:59 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, `user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec WHERE CREATE_TIME = ? and user_org = ? and USER_ID = ? and USER_NAME = ? and `user_type` = 'B' 
2020-03-04 21:56:59 -==> Parameters: 2019-12(String), 2(String), 1-0008(String), 王明刚1(String)
2020-03-04 21:56:59 -<==      Total: 0
2020-03-04 21:56:59 -耗时 : 1144
2020-03-04 21:56:59 -返回值 : java.lang.Exception: 第3行，数据与数据库不匹配请认真编写
2020-03-04 21:58:24 -==>  Preparing: select distinct m.perms from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id = ur.role_id where ur.user_id = ? 
2020-03-04 21:58:24 -==> Parameters: 1(Long)
2020-03-04 21:58:24 -<==      Total: 94
2020-03-04 21:58:24 -请求地址 : http://localhost:8081/elec/elecInto
2020-03-04 21:58:24 -HTTP METHOD : GET
2020-03-04 21:58:24 -CLASS_METHOD : com.bootdo.elec.controller.ElecIntoController.ElecInto
2020-03-04 21:58:24 -参数 : []
2020-03-04 21:58:24 -耗时 : 1
2020-03-04 21:58:24 -返回值 : elec/elecInto/elecInto
2020-03-04 21:58:30 -请求地址 : http://localhost:8081/system/sysDept/treeView
2020-03-04 21:58:30 -HTTP METHOD : GET
2020-03-04 21:58:30 -CLASS_METHOD : com.bootdo.system.controller.DeptController.treeView
2020-03-04 21:58:30 -参数 : [ModelAndView: materialized View is [null]; model is null]
2020-03-04 21:58:30 -耗时 : 20
2020-03-04 21:58:30 -返回值 : system/dept/deptTree
2020-03-04 21:58:31 -请求地址 : http://localhost:8081/system/sysDept/tree
2020-03-04 21:58:31 -HTTP METHOD : GET
2020-03-04 21:58:31 -CLASS_METHOD : com.bootdo.system.controller.DeptController.tree
2020-03-04 21:58:31 -参数 : []
2020-03-04 21:58:31 -==>  Preparing: select `dept_id`,`parent_id`,`name`,`order_num`,`del_flag` from sys_dept order by dept_id desc 
2020-03-04 21:58:31 -==> Parameters: 
2020-03-04 21:58:31 -<==      Total: 3
2020-03-04 21:58:31 -耗时 : 5
2020-03-04 21:58:31 -返回值 : {"checked":false,"children":[{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"3","parentId":"1","state":{"opened":true},"text":"牙星"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"2","parentId":"1","state":{"opened":true},"text":"五九"}],"hasChildren":true,"hasParent":false,"id":"1","parentId":"0","state":{"opened":true},"text":"总公司"}
2020-03-04 21:58:41 -请求地址 : http://localhost:8081/elec/elecInto/importElecIntoExcel
2020-03-04 21:58:41 -HTTP METHOD : POST
2020-03-04 21:58:41 -CLASS_METHOD : com.bootdo.elec.controller.ElecIntoController.importElecIntoExcel
2020-03-04 21:58:41 -参数 : [org.springframework.web.multipart.support.StandardMultipartHttpServletRequest$StandardMultipartFile@4d392f0a, com.bootdo.elec.vo.ElecVo@459cc507, org.apache.shiro.web.servlet.ShiroHttpServletResponse@60241eb1]
2020-03-04 21:58:42 -==>  Preparing: UPDATE ELEC SET ELEC_SUM = ELEC_SUM + ? WHERE CREATE_TIME = ? and user_org = ? and USER_ID = ? and USER_NAME = ? and `user_type` = 'B' 
2020-03-04 21:58:42 -==> Parameters: 100(BigDecimal), 2019-12(String), 2(String), 1-0005(String), 李生(String)
2020-03-04 21:58:42 -<==    Updates: 1
2020-03-04 21:58:42 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, `user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec WHERE CREATE_TIME = ? and user_org = ? and USER_ID = ? and USER_NAME = ? and `user_type` = 'B' 
2020-03-04 21:58:42 -==> Parameters: 2019-12(String), 2(String), 1-0005(String), 李生(String)
2020-03-04 21:58:42 -<==      Total: 1
2020-03-04 21:58:42 -==>  Preparing: insert into elec_log ( `user_id`, `user_name`, `user_type`, `user_org`, `elec_type`, `elec_money`, `money_date`, `create_time`, `create_by`, `update_time`, `update_by`, `remark` ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-03-04 21:58:42 -==> Parameters: 1-0005(String), 李生(String), B(String), 2(String), 1(String), 100(BigDecimal), 2020-03-04 21:58:42.912(Timestamp), 2019-12(String), admin(String), 2020-03-04 21:58:42.912(Timestamp), admin(String), null
2020-03-04 21:58:42 -<==    Updates: 1
2020-03-04 21:58:42 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`start`,`end`,`hu`,`elec_price`,`elec_amount`,`elec_cost`,`elec_sum`,`elec_money`,`heat_price`,`heat_area`,`heat_cost`,`heat_sum`,`heat_money`,`water_price`,`water_cost`,`water_sum`,`water_money`,`print_date`,`print_money`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from print where user_id = ? and user_org = ? and create_time = ? and date_format(print_date,'%Y-%m-%d') = date_format(?,'%Y-%m-%d') 
2020-03-04 21:58:42 -==> Parameters: 1-0005(String), 2(String), 2019-12(String), 2020-03-04 21:58:42.912(Timestamp)
2020-03-04 21:58:42 -<==      Total: 1
2020-03-04 21:58:42 -==>  Preparing: update print SET `user_id` = ?, `user_name` = ?, `user_type` = ?, `user_org` = ?, `start` = ?, `end` = ?, `hu` = ?, `elec_price` = ?, `elec_amount` = ?, `elec_cost` = ?, `elec_sum` = ?, `elec_money` = ?, `print_date` = ?, `create_time` = ?, `create_by` = ?, `update_time` = ?, `update_by` = ? where id = ? 
2020-03-04 21:58:42 -==> Parameters: 1-0005(String), 李生(String), B(String), 2(String), 8481.0(BigDecimal), 8581.0(BigDecimal), 1(Integer), 0.465(BigDecimal), 100.00(BigDecimal), 46.50(BigDecimal), 1100.01(BigDecimal), 100(BigDecimal), 2020-03-04 21:58:42.974(Timestamp), 2019-12(String), admin(String), 2020-03-04 21:58:42.974(Timestamp), admin(String), 12253(Long)
2020-03-04 21:58:42 -<==    Updates: 1
2020-03-04 21:58:42 -==>  Preparing: UPDATE ELEC SET ELEC_SUM = ELEC_SUM + ? WHERE CREATE_TIME = ? and user_org = ? and USER_ID = ? and USER_NAME = ? and `user_type` = 'B' 
2020-03-04 21:58:42 -==> Parameters: 100(BigDecimal), 2019-12(String), 2(String), 1-0008(String), 王明刚1(String)
2020-03-04 21:58:43 -<==    Updates: 0
2020-03-04 21:58:43 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, `user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec WHERE CREATE_TIME = ? and user_org = ? and USER_ID = ? and USER_NAME = ? and `user_type` = 'B' 
2020-03-04 21:58:43 -==> Parameters: 2019-12(String), 2(String), 1-0008(String), 王明刚1(String)
2020-03-04 21:58:43 -<==      Total: 0
2020-03-04 21:58:43 -耗时 : 1390
2020-03-04 21:58:43 -返回值 : java.lang.Exception: 第3行，数据与数据库不匹配请认真编写
2020-03-04 22:02:00 -请求地址 : http://localhost:8081/elec/elecInto
2020-03-04 22:02:00 -HTTP METHOD : GET
2020-03-04 22:02:00 -CLASS_METHOD : com.bootdo.elec.controller.ElecIntoController.ElecInto
2020-03-04 22:02:00 -参数 : []
2020-03-04 22:02:00 -耗时 : 2
2020-03-04 22:02:00 -返回值 : elec/elecInto/elecInto
2020-03-04 22:04:34 -请求地址 : http://localhost:8081/system/sysDept/treeView
2020-03-04 22:04:34 -HTTP METHOD : GET
2020-03-04 22:04:34 -CLASS_METHOD : com.bootdo.system.controller.DeptController.treeView
2020-03-04 22:04:34 -参数 : [ModelAndView: materialized View is [null]; model is null]
2020-03-04 22:04:34 -耗时 : 1
2020-03-04 22:04:34 -返回值 : system/dept/deptTree
2020-03-04 22:04:35 -请求地址 : http://localhost:8081/system/sysDept/tree
2020-03-04 22:04:35 -HTTP METHOD : GET
2020-03-04 22:04:35 -CLASS_METHOD : com.bootdo.system.controller.DeptController.tree
2020-03-04 22:04:35 -参数 : []
2020-03-04 22:04:35 -==>  Preparing: select `dept_id`,`parent_id`,`name`,`order_num`,`del_flag` from sys_dept order by dept_id desc 
2020-03-04 22:04:35 -==> Parameters: 
2020-03-04 22:04:35 -<==      Total: 3
2020-03-04 22:04:35 -耗时 : 35
2020-03-04 22:04:35 -返回值 : {"checked":false,"children":[{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"3","parentId":"1","state":{"opened":true},"text":"牙星"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"2","parentId":"1","state":{"opened":true},"text":"五九"}],"hasChildren":true,"hasParent":false,"id":"1","parentId":"0","state":{"opened":true},"text":"总公司"}
2020-03-04 22:04:44 -请求地址 : http://localhost:8081/elec/elecInto
2020-03-04 22:04:44 -HTTP METHOD : GET
2020-03-04 22:04:44 -CLASS_METHOD : com.bootdo.elec.controller.ElecIntoController.ElecInto
2020-03-04 22:04:44 -参数 : []
2020-03-04 22:04:44 -耗时 : 1
2020-03-04 22:04:44 -返回值 : elec/elecInto/elecInto
2020-03-04 22:04:52 -请求地址 : http://localhost:8081/system/sysDept/treeView
2020-03-04 22:04:52 -HTTP METHOD : GET
2020-03-04 22:04:52 -CLASS_METHOD : com.bootdo.system.controller.DeptController.treeView
2020-03-04 22:04:52 -参数 : [ModelAndView: materialized View is [null]; model is null]
2020-03-04 22:04:52 -耗时 : 1
2020-03-04 22:04:52 -返回值 : system/dept/deptTree
2020-03-04 22:04:53 -请求地址 : http://localhost:8081/system/sysDept/tree
2020-03-04 22:04:53 -HTTP METHOD : GET
2020-03-04 22:04:53 -CLASS_METHOD : com.bootdo.system.controller.DeptController.tree
2020-03-04 22:04:53 -参数 : []
2020-03-04 22:04:53 -==>  Preparing: select `dept_id`,`parent_id`,`name`,`order_num`,`del_flag` from sys_dept order by dept_id desc 
2020-03-04 22:04:53 -==> Parameters: 
2020-03-04 22:04:53 -<==      Total: 3
2020-03-04 22:04:53 -耗时 : 4
2020-03-04 22:04:53 -返回值 : {"checked":false,"children":[{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"3","parentId":"1","state":{"opened":true},"text":"牙星"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"2","parentId":"1","state":{"opened":true},"text":"五九"}],"hasChildren":true,"hasParent":false,"id":"1","parentId":"0","state":{"opened":true},"text":"总公司"}
2020-03-04 22:05:01 -请求地址 : http://localhost:8081/elec/elecInto/importElecIntoExcel
2020-03-04 22:05:01 -HTTP METHOD : POST
2020-03-04 22:05:01 -CLASS_METHOD : com.bootdo.elec.controller.ElecIntoController.importElecIntoExcel
2020-03-04 22:05:01 -参数 : [org.springframework.web.multipart.support.StandardMultipartHttpServletRequest$StandardMultipartFile@694504b5, com.bootdo.elec.vo.ElecVo@34e9c4a1, org.apache.shiro.web.servlet.ShiroHttpServletResponse@467a2671]
2020-03-04 22:05:01 -==>  Preparing: UPDATE ELEC SET ELEC_SUM = ELEC_SUM + ? WHERE CREATE_TIME = ? and user_org = ? and USER_ID = ? and USER_NAME = ? and `user_type` = 'B' 
2020-03-04 22:05:01 -==> Parameters: 100(BigDecimal), 2019-12(String), 2(String), 1-0005(String), 李生(String)
2020-03-04 22:05:02 -<==    Updates: 1
2020-03-04 22:05:02 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, `user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec WHERE CREATE_TIME = ? and user_org = ? and USER_ID = ? and USER_NAME = ? and `user_type` = 'B' 
2020-03-04 22:05:02 -==> Parameters: 2019-12(String), 2(String), 1-0005(String), 李生(String)
2020-03-04 22:05:02 -<==      Total: 1
2020-03-04 22:05:02 -==>  Preparing: insert into elec_log ( `user_id`, `user_name`, `user_type`, `user_org`, `elec_type`, `elec_money`, `money_date`, `create_time`, `create_by`, `update_time`, `update_by`, `remark` ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-03-04 22:05:02 -==> Parameters: 1-0005(String), 李生(String), B(String), 2(String), 1(String), 100(BigDecimal), 2020-03-04 22:05:02.223(Timestamp), 2019-12(String), admin(String), 2020-03-04 22:05:02.223(Timestamp), admin(String), null
2020-03-04 22:05:02 -<==    Updates: 1
2020-03-04 22:05:02 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`start`,`end`,`hu`,`elec_price`,`elec_amount`,`elec_cost`,`elec_sum`,`elec_money`,`heat_price`,`heat_area`,`heat_cost`,`heat_sum`,`heat_money`,`water_price`,`water_cost`,`water_sum`,`water_money`,`print_date`,`print_money`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from print where user_id = ? and user_org = ? and create_time = ? and date_format(print_date,'%Y-%m-%d') = date_format(?,'%Y-%m-%d') 
2020-03-04 22:05:02 -==> Parameters: 1-0005(String), 2(String), 2019-12(String), 2020-03-04 22:05:02.223(Timestamp)
2020-03-04 22:05:02 -<==      Total: 1
2020-03-04 22:05:02 -==>  Preparing: update print SET `user_id` = ?, `user_name` = ?, `user_type` = ?, `user_org` = ?, `start` = ?, `end` = ?, `hu` = ?, `elec_price` = ?, `elec_amount` = ?, `elec_cost` = ?, `elec_sum` = ?, `elec_money` = ?, `print_date` = ?, `create_time` = ?, `create_by` = ?, `update_time` = ?, `update_by` = ? where id = ? 
2020-03-04 22:05:02 -==> Parameters: 1-0005(String), 李生(String), B(String), 2(String), 8481.0(BigDecimal), 8581.0(BigDecimal), 1(Integer), 0.465(BigDecimal), 100.00(BigDecimal), 46.50(BigDecimal), 1100.01(BigDecimal), 100(BigDecimal), 2020-03-04 22:05:02.25(Timestamp), 2019-12(String), admin(String), 2020-03-04 22:05:02.251(Timestamp), admin(String), 12253(Long)
2020-03-04 22:05:02 -<==    Updates: 1
2020-03-04 22:05:02 -==>  Preparing: UPDATE ELEC SET ELEC_SUM = ELEC_SUM + ? WHERE CREATE_TIME = ? and user_org = ? and USER_ID = ? and USER_NAME = ? and `user_type` = 'B' 
2020-03-04 22:05:02 -==> Parameters: 100(BigDecimal), 2019-12(String), 2(String), 1-0008(String), 王明刚1(String)
2020-03-04 22:05:02 -<==    Updates: 0
2020-03-04 22:05:02 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, `user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec WHERE CREATE_TIME = ? and user_org = ? and USER_ID = ? and USER_NAME = ? and `user_type` = 'B' 
2020-03-04 22:05:02 -==> Parameters: 2019-12(String), 2(String), 1-0008(String), 王明刚1(String)
2020-03-04 22:05:02 -<==      Total: 0
2020-03-04 22:05:02 -耗时 : 1038
2020-03-04 22:05:02 -返回值 : java.lang.Exception: 第3行，数据与数据库不匹配请认真编写
2020-03-04 22:06:10 -请求地址 : http://localhost:8081/index
2020-03-04 22:06:10 -HTTP METHOD : GET
2020-03-04 22:06:10 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2020-03-04 22:06:10 -参数 : [{}]
2020-03-04 22:06:10 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2020-03-04 22:06:10 -==> Parameters: 1(Long)
2020-03-04 22:06:10 -<==      Total: 50
2020-03-04 22:06:10 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2020-03-04 22:06:10 -==> Parameters: 138(Long)
2020-03-04 22:06:10 -<==      Total: 1
2020-03-04 22:06:10 -耗时 : 181
2020-03-04 22:06:10 -返回值 : index_v1
2020-03-04 22:06:10 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-03-04 22:06:10 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 181(Integer), com.bootdo.system.controller.LoginController.index()(String), {"menus":[{"attributes":{"icon":"fa fa-money","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-money","url":"/moneyList/moneyList"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"102","parentId":"106","text":"现金缴费"},{"attributes":{"icon":"fa fa-book","url":"/moneyLog/elecLog"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"107","parentId":"106","text":"缴费记录"},{"attributes":{"icon":"fa fa-image","url":"/moneyList/moneyWZ"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"164","parentId":"106","text":"乌镇管理"}],"hasChildren":true,"hasParent":false,"id":"106","parentId":"0","text":"收费管理"},{"attributes":{"icon":"fa fa-lightbulb-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/elec/elec"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"121","parentId":"103","text":"电费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"elec/elecInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"122","parentId":"103","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"elec/elecUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"123","parentId":"103","text":"电表上传"},{"attributes":{"icon":"fa fa-cc","url":"/elec/elecPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"124","parentId":"103","text":"电价管理"}],"hasChildren":true,"hasParent":false,"id":"103","parentId":"0","text":"电费管理"},{"attributes":{"icon":"fa fa-tint","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/water/water"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"117","parentId":"105","text":"水费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"water/waterInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"118","parentId":"105","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"water/waterUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"119","parentId":"105","text":"水费生成"},{"attributes":{"icon":"fa fa-cc","url":"/water/waterPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"120","parentId":"105","text":"水价管理"}],"hasChildren":true,"hasParent":false,"id":"105","parentId":"0","text":"水费管理"},{"attributes":{"icon":"fa fa-fire","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/heat/heat"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"113","parentId":"104","text":"暖费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"heat/heatInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"114","parentId":"104","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"heat/heatUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"115","parentId":"104","text":"暖费生成"},{"attributes":{"icon":"","url":"/heat/heatPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"116","parentId":"104","text":"暖价管理"}],"hasChildren":true,"hasParent":false,"id":"104","parentId":"0","text":"暖费管理"},{"attributes":{"icon":"fa fa-vcard-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-bomb","url":"/print/print"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"149","parentId":"108","text":"票据记录"}],"hasChildren":true,"hasParent":false,"id":"108","parentId":"0","text":"票据管理"},{"attributes":{"icon":"fa fa-bar-chart","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-area-chart","url":"/chart/graph_echarts.html"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","text":"百度chart"},{"attributes":{"icon":"fa fa-sun-o","url":"charts/countDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"109","parentId":"97","text":"日统计报表"},{"attributes":{"icon":"fa fa-calendar","url":"charts/tableDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"161","parentId":"97","text":"日统计表格"},{"attributes":{"icon":"fa fa-registered","url":"charts/countMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"110","parentId":"97","text":"月统计报表"},{"attributes":{"icon":"fa fa-building-o","url":"charts/tableElecMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"162","parentId":"97","text":"月统计表格"},{"attributes":{"icon":"fa fa-support","url":"charts/countYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"111","parentId":"97","text":"年统计报表"},{"attributes":{"icon":"fa fa-book","url":"charts/tableElecYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"163","parentId":"97","text":"年统计表格"},{"attributes":{"icon":"fa fa-money","url":"charts/countOwe"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"155","(String), 127.0.0.1(String), 2020-03-04 22:06:10.867(Timestamp)
2020-03-04 22:06:11 -<==    Updates: 1
2020-03-04 22:06:11 -请求地址 : http://localhost:8081/main
2020-03-04 22:06:11 -HTTP METHOD : GET
2020-03-04 22:06:11 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2020-03-04 22:06:11 -参数 : []
2020-03-04 22:06:11 -耗时 : 0
2020-03-04 22:06:11 -返回值 : main
2020-03-04 22:06:11 -请求地址 : http://localhost:8081/oa/notify/message
2020-03-04 22:06:11 -HTTP METHOD : GET
2020-03-04 22:06:11 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2020-03-04 22:06:11 -参数 : []
2020-03-04 22:06:11 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2020-03-04 22:06:11 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2020-03-04 22:06:11 -<==      Total: 0
2020-03-04 22:06:11 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2020-03-04 22:06:11 -==> Parameters: 1(Long), 0(String)
2020-03-04 22:06:11 -<==      Total: 1
2020-03-04 22:06:11 -耗时 : 98
2020-03-04 22:06:11 -返回值 : com.bootdo.common.utils.PageUtils@6269b8b9
2020-03-04 22:06:11 -请求地址 : http://localhost:8081/main
2020-03-04 22:06:11 -HTTP METHOD : GET
2020-03-04 22:06:11 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2020-03-04 22:06:11 -参数 : []
2020-03-04 22:06:11 -耗时 : 33
2020-03-04 22:06:11 -返回值 : main
2020-03-04 22:06:57 -请求地址 : http://localhost:8081/login;JSESSIONID=7ec558aa-504f-47cf-ba5d-572eb03e70ec
2020-03-04 22:06:57 -HTTP METHOD : GET
2020-03-04 22:06:57 -CLASS_METHOD : com.bootdo.system.controller.LoginController.login
2020-03-04 22:06:57 -参数 : [{}]
2020-03-04 22:06:57 -耗时 : 0
2020-03-04 22:06:57 -返回值 : login
2020-03-04 22:06:59 -请求地址 : http://localhost:8081/getVerify
2020-03-04 22:06:59 -HTTP METHOD : GET
2020-03-04 22:06:59 -CLASS_METHOD : com.bootdo.system.controller.LoginController.getVerify
2020-03-04 22:06:59 -参数 : [org.apache.shiro.web.servlet.ShiroHttpServletRequest@690266fa, org.apache.shiro.web.servlet.ShiroHttpServletResponse@283b9887]
2020-03-04 22:07:00 -6950
2020-03-04 22:07:01 -耗时 : 1618
2020-03-04 22:07:01 -返回值 : null
2020-03-04 22:07:01 -请求地址 : http://localhost:8081/login
2020-03-04 22:07:01 -HTTP METHOD : GET
2020-03-04 22:07:01 -CLASS_METHOD : com.bootdo.system.controller.LoginController.login
2020-03-04 22:07:01 -参数 : [{}]
2020-03-04 22:07:01 -耗时 : 1
2020-03-04 22:07:01 -返回值 : login
2020-03-04 22:07:16 -请求地址 : http://localhost:8081/login
2020-03-04 22:07:16 -HTTP METHOD : POST
2020-03-04 22:07:16 -CLASS_METHOD : com.bootdo.system.controller.LoginController.ajaxLogin
2020-03-04 22:07:16 -参数 : [admin, 111111, 6950, org.apache.shiro.web.servlet.ShiroHttpServletRequest@2bd8b3ca]
2020-03-04 22:07:16 -==>  Preparing: select `user_id`,`username`,`name`,`password`,`dept_id`,`email`,`mobile`,`status`,`user_id_create`,`gmt_create`,`gmt_modified`,`sex`,`birth`,`pic_id`,`live_address`,`hobby`,`province`,`city`,`district` from sys_user WHERE username = ? order by user_id desc 
2020-03-04 22:07:16 -==> Parameters: admin(String)
2020-03-04 22:07:16 -<==      Total: 1
2020-03-04 22:07:16 -耗时 : 380
2020-03-04 22:07:16 -返回值 : {msg=操作成功, code=0}
2020-03-04 22:07:16 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-03-04 22:07:16 -==> Parameters: 1(Long), admin(String), 登录(String), 380(Integer), com.bootdo.system.controller.LoginController.ajaxLogin()(String), null, 127.0.0.1(String), 2020-03-04 22:07:16.917(Timestamp)
2020-03-04 22:07:16 -请求地址 : http://localhost:8081/index
2020-03-04 22:07:16 -HTTP METHOD : GET
2020-03-04 22:07:16 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2020-03-04 22:07:16 -参数 : [{}]
2020-03-04 22:07:16 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2020-03-04 22:07:17 -==> Parameters: 1(Long)
2020-03-04 22:07:17 -<==    Updates: 1
2020-03-04 22:07:17 -<==      Total: 50
2020-03-04 22:07:17 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2020-03-04 22:07:17 -==> Parameters: 138(Long)
2020-03-04 22:07:17 -<==      Total: 1
2020-03-04 22:07:17 -耗时 : 159
2020-03-04 22:07:17 -返回值 : index_v1
2020-03-04 22:07:17 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-03-04 22:07:17 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 159(Integer), com.bootdo.system.controller.LoginController.index()(String), {"menus":[{"attributes":{"icon":"fa fa-money","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-money","url":"/moneyList/moneyList"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"102","parentId":"106","text":"现金缴费"},{"attributes":{"icon":"fa fa-book","url":"/moneyLog/elecLog"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"107","parentId":"106","text":"缴费记录"},{"attributes":{"icon":"fa fa-image","url":"/moneyList/moneyWZ"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"164","parentId":"106","text":"乌镇管理"}],"hasChildren":true,"hasParent":false,"id":"106","parentId":"0","text":"收费管理"},{"attributes":{"icon":"fa fa-lightbulb-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/elec/elec"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"121","parentId":"103","text":"电费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"elec/elecInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"122","parentId":"103","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"elec/elecUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"123","parentId":"103","text":"电表上传"},{"attributes":{"icon":"fa fa-cc","url":"/elec/elecPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"124","parentId":"103","text":"电价管理"}],"hasChildren":true,"hasParent":false,"id":"103","parentId":"0","text":"电费管理"},{"attributes":{"icon":"fa fa-tint","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/water/water"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"117","parentId":"105","text":"水费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"water/waterInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"118","parentId":"105","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"water/waterUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"119","parentId":"105","text":"水费生成"},{"attributes":{"icon":"fa fa-cc","url":"/water/waterPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"120","parentId":"105","text":"水价管理"}],"hasChildren":true,"hasParent":false,"id":"105","parentId":"0","text":"水费管理"},{"attributes":{"icon":"fa fa-fire","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/heat/heat"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"113","parentId":"104","text":"暖费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"heat/heatInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"114","parentId":"104","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"heat/heatUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"115","parentId":"104","text":"暖费生成"},{"attributes":{"icon":"","url":"/heat/heatPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"116","parentId":"104","text":"暖价管理"}],"hasChildren":true,"hasParent":false,"id":"104","parentId":"0","text":"暖费管理"},{"attributes":{"icon":"fa fa-vcard-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-bomb","url":"/print/print"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"149","parentId":"108","text":"票据记录"}],"hasChildren":true,"hasParent":false,"id":"108","parentId":"0","text":"票据管理"},{"attributes":{"icon":"fa fa-bar-chart","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-area-chart","url":"/chart/graph_echarts.html"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","text":"百度chart"},{"attributes":{"icon":"fa fa-sun-o","url":"charts/countDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"109","parentId":"97","text":"日统计报表"},{"attributes":{"icon":"fa fa-calendar","url":"charts/tableDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"161","parentId":"97","text":"日统计表格"},{"attributes":{"icon":"fa fa-registered","url":"charts/countMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"110","parentId":"97","text":"月统计报表"},{"attributes":{"icon":"fa fa-building-o","url":"charts/tableElecMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"162","parentId":"97","text":"月统计表格"},{"attributes":{"icon":"fa fa-support","url":"charts/countYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"111","parentId":"97","text":"年统计报表"},{"attributes":{"icon":"fa fa-book","url":"charts/tableElecYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"163","parentId":"97","text":"年统计表格"},{"attributes":{"icon":"fa fa-money","url":"charts/countOwe"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"155","(String), 127.0.0.1(String), 2020-03-04 22:07:17.129(Timestamp)
2020-03-04 22:07:17 -<==    Updates: 1
2020-03-04 22:07:17 -请求地址 : http://localhost:8081/main
2020-03-04 22:07:17 -HTTP METHOD : GET
2020-03-04 22:07:17 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2020-03-04 22:07:17 -参数 : []
2020-03-04 22:07:17 -耗时 : 0
2020-03-04 22:07:17 -返回值 : main
2020-03-04 22:07:18 -请求地址 : http://localhost:8081/oa/notify/message
2020-03-04 22:07:18 -HTTP METHOD : GET
2020-03-04 22:07:18 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2020-03-04 22:07:18 -参数 : []
2020-03-04 22:07:18 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2020-03-04 22:07:18 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2020-03-04 22:07:18 -<==      Total: 0
2020-03-04 22:07:18 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2020-03-04 22:07:18 -==> Parameters: 1(Long), 0(String)
2020-03-04 22:07:18 -<==      Total: 1
2020-03-04 22:07:18 -耗时 : 30
2020-03-04 22:07:18 -返回值 : com.bootdo.common.utils.PageUtils@1ef527b6
2020-03-04 22:07:18 -请求地址 : http://localhost:8081/main
2020-03-04 22:07:18 -HTTP METHOD : GET
2020-03-04 22:07:18 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2020-03-04 22:07:18 -参数 : []
2020-03-04 22:07:18 -耗时 : 1
2020-03-04 22:07:18 -返回值 : main
2020-03-04 22:07:21 -==>  Preparing: select distinct m.perms from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id = ur.role_id where ur.user_id = ? 
2020-03-04 22:07:21 -==> Parameters: 1(Long)
2020-03-04 22:07:21 -<==      Total: 94
2020-03-04 22:07:21 -请求地址 : http://localhost:8081/elec/elec
2020-03-04 22:07:21 -HTTP METHOD : GET
2020-03-04 22:07:21 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.Elec
2020-03-04 22:07:21 -参数 : []
2020-03-04 22:07:21 -耗时 : 0
2020-03-04 22:07:21 -返回值 : elec/elec/elec
2020-03-04 22:07:23 -请求地址 : http://localhost:8081/elec/elecInto
2020-03-04 22:07:23 -HTTP METHOD : GET
2020-03-04 22:07:23 -CLASS_METHOD : com.bootdo.elec.controller.ElecIntoController.ElecInto
2020-03-04 22:07:23 -参数 : []
2020-03-04 22:07:23 -耗时 : 1
2020-03-04 22:07:23 -返回值 : elec/elecInto/elecInto
2020-03-04 22:07:24 -请求地址 : http://localhost:8081/common/dict/list/userType
2020-03-04 22:07:24 -HTTP METHOD : GET
2020-03-04 22:07:24 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2020-03-04 22:07:24 -参数 : [userType]
2020-03-04 22:07:24 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2020-03-04 22:07:24 -==> Parameters: userType(String)
2020-03-04 22:07:24 -请求地址 : http://localhost:8081/common/dict/list/elecType
2020-03-04 22:07:24 -HTTP METHOD : GET
2020-03-04 22:07:24 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2020-03-04 22:07:24 -参数 : [elecType]
2020-03-04 22:07:24 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2020-03-04 22:07:24 -==> Parameters: elecType(String)
2020-03-04 22:07:24 -请求地址 : http://localhost:8081/elec/elec/list
2020-03-04 22:07:24 -HTTP METHOD : GET
2020-03-04 22:07:24 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.list
2020-03-04 22:07:24 -参数 : [{limit=10, offset=0, userType=, elecType=, userOrg=, userId=, createTime=, queryType=1}, com.bootdo.elec.domain.ElecDO@3b307bc7]
2020-03-04 22:07:24 -<==      Total: 4
2020-03-04 22:07:24 -耗时 : 94
2020-03-04 22:07:24 -返回值 : [DictDO{id=145, name='银行转账', value='D', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=144, name='微信支付', value='C', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2020-03-04 22:07:24 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, `user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec order by id asc limit ?, ? 
2020-03-04 22:07:24 -<==      Total: 11
2020-03-04 22:07:24 -耗时 : 103
2020-03-04 22:07:24 -返回值 : [DictDO{id=180, name='矿民用', value='1', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=179, name='矿商业', value='2', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=178, name='矿工业1', value='3', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=177, name='矿工业2', value='4', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=176, name='矿工业3', value='5', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=175, name='乌民用', value='6', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=174, name='乌商用', value='7', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=173, name='乌工业', value='8', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=172, name='煤民用', value='9', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=171, name='煤商业', value='10', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=170, name='政府用电', value='11', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2020-03-04 22:07:24 -==> Parameters: 0(Integer), 10(Integer)
2020-03-04 22:07:24 -<==      Total: 10
2020-03-04 22:07:24 -==>  Preparing: select count(*) from elec 
2020-03-04 22:07:24 -==> Parameters: 
2020-03-04 22:07:25 -<==      Total: 1
2020-03-04 22:07:25 -耗时 : 742
2020-03-04 22:07:25 -返回值 : com.bootdo.common.utils.PageUtils@4a76dbfa
2020-03-04 22:07:28 -请求地址 : http://localhost:8081/system/sysDept/treeView
2020-03-04 22:07:28 -HTTP METHOD : GET
2020-03-04 22:07:28 -CLASS_METHOD : com.bootdo.system.controller.DeptController.treeView
2020-03-04 22:07:28 -参数 : [ModelAndView: materialized View is [null]; model is null]
2020-03-04 22:07:28 -耗时 : 1
2020-03-04 22:07:28 -返回值 : system/dept/deptTree
2020-03-04 22:07:28 -请求地址 : http://localhost:8081/system/sysDept/tree
2020-03-04 22:07:28 -HTTP METHOD : GET
2020-03-04 22:07:28 -CLASS_METHOD : com.bootdo.system.controller.DeptController.tree
2020-03-04 22:07:28 -参数 : []
2020-03-04 22:07:28 -==>  Preparing: select `dept_id`,`parent_id`,`name`,`order_num`,`del_flag` from sys_dept order by dept_id desc 
2020-03-04 22:07:28 -==> Parameters: 
2020-03-04 22:07:28 -<==      Total: 3
2020-03-04 22:07:28 -耗时 : 2
2020-03-04 22:07:28 -返回值 : {"checked":false,"children":[{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"3","parentId":"1","state":{"opened":true},"text":"牙星"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"2","parentId":"1","state":{"opened":true},"text":"五九"}],"hasChildren":true,"hasParent":false,"id":"1","parentId":"0","state":{"opened":true},"text":"总公司"}
2020-03-04 22:07:46 -请求地址 : http://localhost:8081/elec/elecInto/importElecIntoExcel
2020-03-04 22:07:46 -HTTP METHOD : POST
2020-03-04 22:07:46 -CLASS_METHOD : com.bootdo.elec.controller.ElecIntoController.importElecIntoExcel
2020-03-04 22:07:46 -参数 : [org.springframework.web.multipart.support.StandardMultipartHttpServletRequest$StandardMultipartFile@67d2159a, com.bootdo.elec.vo.ElecVo@7c7011f5, org.apache.shiro.web.servlet.ShiroHttpServletResponse@4c4c17]
2020-03-04 22:07:47 -==>  Preparing: UPDATE ELEC SET ELEC_SUM = ELEC_SUM + ? WHERE CREATE_TIME = ? and user_org = ? and USER_ID = ? and USER_NAME = ? and `user_type` = 'B' 
2020-03-04 22:07:47 -==> Parameters: 100(BigDecimal), 2019-12(String), 2(String), 1-0005(String), 李生(String)
2020-03-04 22:07:48 -<==    Updates: 1
2020-03-04 22:07:48 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, `user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec WHERE CREATE_TIME = ? and user_org = ? and USER_ID = ? and USER_NAME = ? and `user_type` = 'B' 
2020-03-04 22:07:48 -==> Parameters: 2019-12(String), 2(String), 1-0005(String), 李生(String)
2020-03-04 22:07:49 -<==      Total: 1
2020-03-04 22:07:49 -==>  Preparing: insert into elec_log ( `user_id`, `user_name`, `user_type`, `user_org`, `elec_type`, `elec_money`, `money_date`, `create_time`, `create_by`, `update_time`, `update_by`, `remark` ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-03-04 22:07:49 -==> Parameters: 1-0005(String), 李生(String), B(String), 2(String), 1(String), 100(BigDecimal), 2020-03-04 22:07:49.005(Timestamp), 2019-12(String), admin(String), 2020-03-04 22:07:49.005(Timestamp), admin(String), null
2020-03-04 22:07:49 -<==    Updates: 1
2020-03-04 22:07:49 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`start`,`end`,`hu`,`elec_price`,`elec_amount`,`elec_cost`,`elec_sum`,`elec_money`,`heat_price`,`heat_area`,`heat_cost`,`heat_sum`,`heat_money`,`water_price`,`water_cost`,`water_sum`,`water_money`,`print_date`,`print_money`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from print where user_id = ? and user_org = ? and create_time = ? and date_format(print_date,'%Y-%m-%d') = date_format(?,'%Y-%m-%d') 
2020-03-04 22:07:49 -==> Parameters: 1-0005(String), 2(String), 2019-12(String), 2020-03-04 22:07:49.005(Timestamp)
2020-03-04 22:07:49 -<==      Total: 1
2020-03-04 22:07:49 -==>  Preparing: update print SET `user_id` = ?, `user_name` = ?, `user_type` = ?, `user_org` = ?, `start` = ?, `end` = ?, `hu` = ?, `elec_price` = ?, `elec_amount` = ?, `elec_cost` = ?, `elec_sum` = ?, `elec_money` = ?, `print_date` = ?, `create_time` = ?, `create_by` = ?, `update_time` = ?, `update_by` = ? where id = ? 
2020-03-04 22:07:49 -==> Parameters: 1-0005(String), 李生(String), B(String), 2(String), 8481.0(BigDecimal), 8581.0(BigDecimal), 1(Integer), 0.465(BigDecimal), 100.00(BigDecimal), 46.50(BigDecimal), 1100.01(BigDecimal), 100(BigDecimal), 2020-03-04 22:07:49.852(Timestamp), 2019-12(String), admin(String), 2020-03-04 22:07:49.852(Timestamp), admin(String), 12253(Long)
2020-03-04 22:07:49 -<==    Updates: 1
2020-03-04 22:07:49 -==>  Preparing: UPDATE ELEC SET ELEC_SUM = ELEC_SUM + ? WHERE CREATE_TIME = ? and user_org = ? and USER_ID = ? and USER_NAME = ? and `user_type` = 'B' 
2020-03-04 22:07:49 -==> Parameters: 100(BigDecimal), 2019-12(String), 2(String), 1-0008(String), 王明刚1(String)
2020-03-04 22:07:49 -<==    Updates: 0
2020-03-04 22:07:49 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, `user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec WHERE CREATE_TIME = ? and user_org = ? and USER_ID = ? and USER_NAME = ? and `user_type` = 'B' 
2020-03-04 22:07:49 -==> Parameters: 2019-12(String), 2(String), 1-0008(String), 王明刚1(String)
2020-03-04 22:07:50 -<==      Total: 0
2020-03-04 22:07:50 -耗时 : 4119
2020-03-04 22:07:50 -返回值 : java.lang.Exception: 第3行，数据与数据库不匹配请认真编写
2020-03-04 22:09:15 -请求地址 : http://localhost:8081/elec/elecInto/importElecIntoExcel
2020-03-04 22:09:15 -HTTP METHOD : POST
2020-03-04 22:09:15 -CLASS_METHOD : com.bootdo.elec.controller.ElecIntoController.importElecIntoExcel
2020-03-04 22:09:15 -参数 : [org.springframework.web.multipart.support.StandardMultipartHttpServletRequest$StandardMultipartFile@2e2c5228, com.bootdo.elec.vo.ElecVo@22266db6, org.apache.shiro.web.servlet.ShiroHttpServletResponse@3ddb06c6]
2020-03-04 22:09:15 -==>  Preparing: UPDATE ELEC SET ELEC_SUM = ELEC_SUM + ? WHERE CREATE_TIME = ? and user_org = ? and USER_ID = ? and USER_NAME = ? and `user_type` = 'B' 
2020-03-04 22:09:15 -==> Parameters: 100(BigDecimal), 2019-12(String), 2(String), 1-0005(String), 李生(String)
2020-03-04 22:09:15 -<==    Updates: 1
2020-03-04 22:09:15 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, `user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec WHERE CREATE_TIME = ? and user_org = ? and USER_ID = ? and USER_NAME = ? and `user_type` = 'B' 
2020-03-04 22:09:15 -==> Parameters: 2019-12(String), 2(String), 1-0005(String), 李生(String)
2020-03-04 22:09:15 -<==      Total: 1
2020-03-04 22:09:15 -==>  Preparing: insert into elec_log ( `user_id`, `user_name`, `user_type`, `user_org`, `elec_type`, `elec_money`, `money_date`, `create_time`, `create_by`, `update_time`, `update_by`, `remark` ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-03-04 22:09:15 -==> Parameters: 1-0005(String), 李生(String), B(String), 2(String), 1(String), 100(BigDecimal), 2020-03-04 22:09:15.919(Timestamp), 2019-12(String), admin(String), 2020-03-04 22:09:15.919(Timestamp), admin(String), null
2020-03-04 22:09:16 -<==    Updates: 1
2020-03-04 22:09:16 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`start`,`end`,`hu`,`elec_price`,`elec_amount`,`elec_cost`,`elec_sum`,`elec_money`,`heat_price`,`heat_area`,`heat_cost`,`heat_sum`,`heat_money`,`water_price`,`water_cost`,`water_sum`,`water_money`,`print_date`,`print_money`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from print where user_id = ? and user_org = ? and create_time = ? and date_format(print_date,'%Y-%m-%d') = date_format(?,'%Y-%m-%d') 
2020-03-04 22:09:16 -==> Parameters: 1-0005(String), 2(String), 2019-12(String), 2020-03-04 22:09:15.919(Timestamp)
2020-03-04 22:09:16 -<==      Total: 1
2020-03-04 22:09:16 -==>  Preparing: update print SET `user_id` = ?, `user_name` = ?, `user_type` = ?, `user_org` = ?, `start` = ?, `end` = ?, `hu` = ?, `elec_price` = ?, `elec_amount` = ?, `elec_cost` = ?, `elec_sum` = ?, `elec_money` = ?, `print_date` = ?, `create_time` = ?, `create_by` = ?, `update_time` = ?, `update_by` = ? where id = ? 
2020-03-04 22:09:16 -==> Parameters: 1-0005(String), 李生(String), B(String), 2(String), 8481.0(BigDecimal), 8581.0(BigDecimal), 1(Integer), 0.465(BigDecimal), 100.00(BigDecimal), 46.50(BigDecimal), 1100.01(BigDecimal), 100(BigDecimal), 2020-03-04 22:09:16.023(Timestamp), 2019-12(String), admin(String), 2020-03-04 22:09:16.023(Timestamp), admin(String), 12253(Long)
2020-03-04 22:09:16 -<==    Updates: 1
2020-03-04 22:09:16 -==>  Preparing: UPDATE ELEC SET ELEC_SUM = ELEC_SUM + ? WHERE CREATE_TIME = ? and user_org = ? and USER_ID = ? and USER_NAME = ? and `user_type` = 'B' 
2020-03-04 22:09:16 -==> Parameters: 100(BigDecimal), 2019-12(String), 2(String), 1-0008(String), 王明刚1(String)
2020-03-04 22:09:16 -<==    Updates: 0
2020-03-04 22:09:16 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, `user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec WHERE CREATE_TIME = ? and user_org = ? and USER_ID = ? and USER_NAME = ? and `user_type` = 'B' 
2020-03-04 22:09:16 -==> Parameters: 2019-12(String), 2(String), 1-0008(String), 王明刚1(String)
2020-03-04 22:09:16 -<==      Total: 0
2020-03-04 22:09:16 -耗时 : 1404
2020-03-04 22:09:16 -返回值 : java.lang.Exception: 第3行，数据与数据库不匹配请认真编写
2020-03-04 22:16:32 -WebSocketSession[1 current WS(1)-HttpStream(0)-HttpPoll(0), 6 total, 0 closed abnormally (0 connect failure, 0 send limit, 3 transport error)], stompSubProtocol[processed CONNECT(5)-CONNECTED(5)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 60], outboundChannelpool size = 0, active threads = 0, queued tasks = 0, completed tasks = 10], sockJsScheduler[pool size = 4, active threads = 1, queued tasks = 2, completed tasks = 436]
2020-03-04 22:45:55 -Validating all active sessions...
2020-03-04 22:45:55 -Finished session validation.  No sessions were stopped.
2020-03-04 22:46:32 -WebSocketSession[1 current WS(1)-HttpStream(0)-HttpPoll(0), 6 total, 0 closed abnormally (0 connect failure, 0 send limit, 3 transport error)], stompSubProtocol[processed CONNECT(5)-CONNECTED(5)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 60], outboundChannelpool size = 0, active threads = 0, queued tasks = 0, completed tasks = 10], sockJsScheduler[pool size = 4, active threads = 1, queued tasks = 2, completed tasks = 869]
