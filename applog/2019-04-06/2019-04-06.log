2019-04-06 12:25:33 -Starting BootdoApplication on ZJZL-20180906VX with PID 12248 (D:\eclipse2018-work\bootdo\target\classes started by Administrator in D:\eclipse2018-work\bootdo)
2019-04-06 12:25:33 -Running with Spring Boot v2.0.3.RELEASE, Spring v5.0.7.RELEASE
2019-04-06 12:25:33 -The following profiles are active: dev
2019-04-06 12:25:33 -Refreshing org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@a38c7fe: startup date [Sat Apr 06 12:25:33 CST 2019]; root of context hierarchy
2019-04-06 12:25:38 -Multiple Spring Data modules found, entering strict repository configuration mode!
2019-04-06 12:25:42 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$b5512975] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-06 12:25:42 -Bean 'shiroConfig' of type [com.bootdo.system.config.ShiroConfig$$EnhancerBySpringCGLIB$$a7aa581c] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-06 12:25:43 -Bean 'userRealm' of type [com.bootdo.system.shiro.UserRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-06 12:25:43 -Bean 'cacheManager2' of type [net.sf.ehcache.CacheManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-06 12:25:43 -Bean 'ehCacheManager' of type [org.apache.shiro.cache.ehcache.EhCacheManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-06 12:25:43 -Cache with name 'com.bootdo.system.shiro.UserRealm.authorizationCache' does not yet exist.  Creating now.
2019-04-06 12:25:44 -Added EhCache named [com.bootdo.system.shiro.UserRealm.authorizationCache]
2019-04-06 12:25:44 -Bean 'sessionDAO' of type [org.apache.shiro.session.mgt.eis.MemorySessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-06 12:25:44 -Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-06 12:25:44 -Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-06 12:25:44 -Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-06 12:25:45 -Tomcat initialized with port(s): 8081 (http)
2019-04-06 12:25:45 -Initializing ProtocolHandler ["http-nio-8081"]
2019-04-06 12:25:45 -Starting service [Tomcat]
2019-04-06 12:25:45 -Starting Servlet Engine: Apache Tomcat/8.5.31
2019-04-06 12:25:45 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [C:\Program Files\Java\jre1.8.0_131\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:/Program Files/Java/jre1.8.0_131/bin/server;C:/Program Files/Java/jre1.8.0_131/bin;C:/Program Files/Java/jre1.8.0_131/lib/amd64;C:\ProgramData\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Windows\System32\OpenSSH\;D:\pbb\pycSafefile\x64;D:\pbb\PBB Reader\x64;C:\Program Files\MySQL\MySQL Utilities 1.6\;D:\MAVEN\apache-maven-3.6.0\bin;D:\GIT\Git\cmd;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;;C:\Users\Administrator\Desktop;;.]
2019-04-06 12:25:46 -Initializing Spring embedded WebApplicationContext
2019-04-06 12:25:46 -Root WebApplicationContext: initialization completed in 12292 ms
2019-04-06 12:25:47 -Mapping filter: 'characterEncodingFilter' to: [/*]
2019-04-06 12:25:47 -Mapping filter: 'hiddenHttpMethodFilter' to: [/*]
2019-04-06 12:25:47 -Mapping filter: 'httpPutFormContentFilter' to: [/*]
2019-04-06 12:25:47 -Mapping filter: 'requestContextFilter' to: [/*]
2019-04-06 12:25:47 -Filter xssFilter was not registered (disabled)
2019-04-06 12:25:47 -Mapping filter: 'webStatFilter' to urls: [/*]
2019-04-06 12:25:47 -Mapping filter: 'shiroFilterFactoryBean' to: [/*]
2019-04-06 12:25:47 -Servlet statViewServlet mapped to [/druid/*]
2019-04-06 12:25:47 -Servlet dispatcherServlet mapped to [/]
2019-04-06 12:25:51 -ApplicationContext registed-->org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@a38c7fe: startup date [Sat Apr 06 12:25:33 CST 2019]; root of context hierarchy
2019-04-06 12:25:52 -Using default implementation for ThreadExecutor
2019-04-06 12:25:52 -Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2019-04-06 12:25:52 -Quartz Scheduler v.2.2.1 created.
2019-04-06 12:25:52 -RAMJobStore initialized.
2019-04-06 12:25:52 -Scheduler meta-data: Quartz Scheduler (v2.2.1) 'schedulerFactoryBean' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2019-04-06 12:25:52 -Quartz scheduler 'schedulerFactoryBean' initialized from an externally provided properties instance.
2019-04-06 12:25:52 -Quartz scheduler version: 2.2.1
2019-04-06 12:25:52 -JobFactory set to: com.bootdo.common.quartz.factory.JobFactory@762a10b6
2019-04-06 12:25:53 -Initializing ExecutorService  'clientInboundChannelExecutor'
2019-04-06 12:25:53 -Initializing ExecutorService  'clientOutboundChannelExecutor'
2019-04-06 12:25:55 -Mapped "{[/charts/countDD],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.countDDController.countDD()
2019-04-06 12:25:55 -Mapped "{[/charts/countDD/getCountDD],methods=[POST]}" onto public com.bootdo.charts.vo.CountDayVo com.bootdo.charts.controller.countDDController.getCountD(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo,javax.servlet.http.HttpServletRequest)
2019-04-06 12:25:55 -Mapped "{[/charts/countDD/tableDD],methods=[POST]}" onto public java.lang.String com.bootdo.charts.controller.countDDController.tableDD()
2019-04-06 12:25:55 -Mapped "{[/charts/countDD/exportCountDD],methods=[GET]}" onto public void com.bootdo.charts.controller.countDDController.exprotElecLog(com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-06 12:25:55 -Mapped "{[/charts/countMM],methods=[GET]}" onto java.lang.String com.bootdo.charts.controller.countMMController.countMM()
2019-04-06 12:25:55 -Mapped "{[/charts/countMM/getCountMM],methods=[POST]}" onto public void com.bootdo.charts.controller.countMMController.getCountMM(org.springframework.ui.Model,com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo,javax.servlet.http.HttpServletRequest)
2019-04-06 12:25:55 -Mapped "{[/charts/countMM/exportCountMM],methods=[GET]}" onto public void com.bootdo.charts.controller.countMMController.exprotElecLog(com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-06 12:25:55 -Mapped "{[/charts/countOwe],methods=[GET]}" onto java.lang.String com.bootdo.charts.controller.countOweController.countOwe()
2019-04-06 12:25:55 -Mapped "{[/charts/countOwe/getCountOwe],methods=[POST]}" onto public com.bootdo.charts.vo.CountOweVo com.bootdo.charts.controller.countOweController.getCountD(com.bootdo.elec.vo.ElecVo,com.bootdo.water.vo.WaterVo,com.bootdo.heat.vo.HeatVo,javax.servlet.http.HttpServletRequest)
2019-04-06 12:25:55 -Mapped "{[/charts/countRun],methods=[GET]}" onto java.lang.String com.bootdo.charts.controller.countRunController.countRun()
2019-04-06 12:25:55 -Mapped "{[/charts/countRun/getCountRun],methods=[POST]}" onto public int com.bootdo.charts.controller.countRunController.getCountD(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo)
2019-04-06 12:25:55 -Mapped "{[/charts/countRun/exportCountRun],methods=[GET]}" onto public void com.bootdo.charts.controller.countRunController.exprotElecLog(com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-06 12:25:55 -Mapped "{[/charts/countYY],methods=[GET]}" onto java.lang.String com.bootdo.charts.controller.countYYController.countYY()
2019-04-06 12:25:55 -Mapped "{[/charts/countYY/getCountYY],methods=[POST]}" onto public int com.bootdo.charts.controller.countYYController.getCountD(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo)
2019-04-06 12:25:55 -Mapped "{[/charts/countYY/exportCountYY],methods=[GET]}" onto public void com.bootdo.charts.controller.countYYController.exprotElecLog(com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-06 12:25:56 -Mapped "{[/common/dict/add],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.add()
2019-04-06 12:25:56 -Mapped "{[/common/dict/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.remove(java.lang.Long)
2019-04-06 12:25:56 -Mapped "{[/common/dict/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.remove(java.lang.Long[])
2019-04-06 12:25:56 -Mapped "{[/common/dict/update]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.update(com.bootdo.common.domain.DictDO)
2019-04-06 12:25:56 -Mapped "{[/common/dict/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.common.controller.DictController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-06 12:25:56 -Mapped "{[/common/dict/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.save(com.bootdo.common.domain.DictDO)
2019-04-06 12:25:56 -Mapped "{[/common/dict/type],methods=[GET]}" onto public java.util.List<com.bootdo.common.domain.DictDO> com.bootdo.common.controller.DictController.listType()
2019-04-06 12:25:56 -Mapped "{[/common/dict/add/{type}/{description}],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.addD(org.springframework.ui.Model,java.lang.String,java.lang.String)
2019-04-06 12:25:56 -Mapped "{[/common/dict/list/{type}],methods=[GET]}" onto public java.util.List<com.bootdo.common.domain.DictDO> com.bootdo.common.controller.DictController.listByType(java.lang.String)
2019-04-06 12:25:56 -Mapped "{[/common/dict],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.dict()
2019-04-06 12:25:56 -Mapped "{[/common/dict/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-06 12:25:56 -Mapped "{[/common/sysFile/add],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.FileController.add()
2019-04-06 12:25:56 -Mapped "{[/common/sysFile/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.remove(java.lang.Long,javax.servlet.http.HttpServletRequest)
2019-04-06 12:25:56 -Mapped "{[/common/sysFile/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.remove(java.lang.Long[])
2019-04-06 12:25:56 -Mapped "{[/common/sysFile/update]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.update(com.bootdo.common.domain.FileDO)
2019-04-06 12:25:56 -Mapped "{[/common/sysFile/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.common.controller.FileController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-06 12:25:56 -Mapped "{[/common/sysFile/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.save(com.bootdo.common.domain.FileDO)
2019-04-06 12:25:56 -Mapped "{[/common/sysFile/info/{id}]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.info(java.lang.Long)
2019-04-06 12:25:56 -Mapped "{[/common/sysFile],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.FileController.sysFile(org.springframework.ui.Model)
2019-04-06 12:25:56 -Mapped "{[/common/sysFile/upload],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.FileController.upload(org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpServletRequest)
2019-04-06 12:25:56 -Mapped "{[/common/sysFile/edit],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.FileController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-06 12:25:56 -Mapped "{[/common/generator/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.GeneratorController.update(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-06 12:25:56 -Mapped "{[/common/generator/list],methods=[GET]}" onto java.util.List<java.util.Map<java.lang.String, java.lang.Object>> com.bootdo.common.controller.GeneratorController.list()
2019-04-06 12:25:56 -Mapped "{[/common/generator/code/{tableName}]}" onto public void com.bootdo.common.controller.GeneratorController.code(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String) throws java.io.IOException
2019-04-06 12:25:56 -Mapped "{[/common/generator],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.GeneratorController.generator()
2019-04-06 12:25:56 -Mapped "{[/common/generator/batchCode]}" onto public void com.bootdo.common.controller.GeneratorController.batchCode(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String) throws java.io.IOException
2019-04-06 12:25:56 -Mapped "{[/common/generator/edit],methods=[GET]}" onto public java.lang.String com.bootdo.common.controller.GeneratorController.edit(org.springframework.ui.Model)
2019-04-06 12:25:56 -Mapped "{[/common/job/add],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.JobController.add()
2019-04-06 12:25:56 -Mapped "{[/common/job/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.remove(java.lang.Long)
2019-04-06 12:25:56 -Mapped "{[/common/job/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.remove(java.lang.Long[])
2019-04-06 12:25:56 -Mapped "{[/common/job/update],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.update(com.bootdo.common.domain.TaskDO)
2019-04-06 12:25:56 -Mapped "{[/common/job/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.common.controller.JobController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-06 12:25:56 -Mapped "{[/common/job/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.save(com.bootdo.common.domain.TaskDO)
2019-04-06 12:25:56 -Mapped "{[/common/job/info/{id}]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.info(java.lang.Long)
2019-04-06 12:25:56 -Mapped "{[/common/job/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.JobController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-06 12:25:56 -Mapped "{[/common/job],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.JobController.taskScheduleJob()
2019-04-06 12:25:56 -Mapped "{[/common/job/changeJobStatus],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.changeJobStatus(java.lang.Long,java.lang.String)
2019-04-06 12:25:56 -Mapped "{[/common/log/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.LogController.remove(java.lang.Long)
2019-04-06 12:25:56 -Mapped "{[/common/log],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.LogController.log()
2019-04-06 12:25:56 -Mapped "{[/common/log/list],methods=[GET]}" onto com.bootdo.common.domain.PageDO<com.bootdo.common.domain.LogDO> com.bootdo.common.controller.LogController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-06 12:25:56 -Mapped "{[/common/log/batchRemove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.LogController.batchRemove(java.lang.Long[])
2019-04-06 12:25:56 -Mapped "{[/common/long],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.LongController.Long()
2019-04-06 12:25:56 -Mapped "{[/common/time],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.TimeController.Time()
2019-04-06 12:25:56 -Mapped "{[/error]}" onto public com.bootdo.common.utils.R com.bootdo.common.exception.MainsiteErrorController.handleError(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-04-06 12:25:56 -Mapped "{[/error],produces=[text/html]}" onto public org.springframework.web.servlet.ModelAndView com.bootdo.common.exception.MainsiteErrorController.errorHtml(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-04-06 12:25:56 -Mapped "{[/elec/elec/add],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecController.add()
2019-04-06 12:25:56 -Mapped "{[/elec/elec/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.remove(java.lang.Long)
2019-04-06 12:25:56 -Mapped "{[/elec/elec/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.remove(java.lang.Long[])
2019-04-06 12:25:56 -Mapped "{[/elec/elec/update],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.update(com.bootdo.elec.domain.ElecDO)
2019-04-06 12:25:56 -Mapped "{[/elec/elec/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.elec.controller.ElecController.list(java.util.Map<java.lang.String, java.lang.Object>,com.bootdo.elec.domain.ElecDO)
2019-04-06 12:25:56 -Mapped "{[/elec/elec/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.save(com.bootdo.elec.domain.ElecDO)
2019-04-06 12:25:56 -Mapped "{[/elec/elec/exprotElec],methods=[GET]}" onto public void com.bootdo.elec.controller.ElecController.exprotExcel(com.bootdo.elec.vo.ElecVo,javax.servlet.http.HttpServletResponse)
2019-04-06 12:25:56 -Mapped "{[/elec/elec],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecController.Elec()
2019-04-06 12:25:56 -Mapped "{[/elec/elec/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-06 12:25:56 -Mapped "{[/elec/elecInto/importElecIntoExcel],methods=[POST]}" onto public java.util.Map<java.lang.String, java.lang.Object> com.bootdo.elec.controller.ElecIntoController.importElecIntoExcel(org.springframework.web.multipart.MultipartFile,com.bootdo.elec.vo.ElecVo) throws java.lang.Exception
2019-04-06 12:25:56 -Mapped "{[/elec/elecInto/exprotElecIntoExcel],methods=[GET]}" onto public void com.bootdo.elec.controller.ElecIntoController.exprotExcel(com.bootdo.elec.vo.ElecVo,javax.servlet.http.HttpServletResponse)
2019-04-06 12:25:56 -Mapped "{[/elec/elecInto],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecIntoController.ElecInto()
2019-04-06 12:25:56 -Mapped "{[/elec/elecPrice/add],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecPriceController.add()
2019-04-06 12:25:56 -Mapped "{[/elec/elecPrice/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecPriceController.remove(java.lang.Long)
2019-04-06 12:25:56 -Mapped "{[/elec/elecPrice/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecPriceController.remove(java.lang.Long[])
2019-04-06 12:25:56 -Mapped "{[/elec/elecPrice/update]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecPriceController.update(com.bootdo.elec.domain.ElecPriceDO)
2019-04-06 12:25:56 -Mapped "{[/elec/elecPrice/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.elec.controller.ElecPriceController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-06 12:25:56 -Mapped "{[/elec/elecPrice/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecPriceController.save(com.bootdo.elec.domain.ElecPriceDO,com.bootdo.elec.domain.ElecDO)
2019-04-06 12:25:56 -Mapped "{[/elec/elecPrice],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecPriceController.ElecPrice()
2019-04-06 12:25:56 -Mapped "{[/elec/elecPrice/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecPriceController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-06 12:25:56 -Mapped "{[/elec/elecUpLoad],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecUpLoadController.Elec()
2019-04-06 12:25:56 -Mapped "{[/elec/elecUpLoad/importElecExcel],methods=[POST]}" onto public java.util.Map<java.lang.String, java.lang.Object> com.bootdo.elec.controller.ElecUpLoadController.importElecExcel(org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpServletRequest) throws java.lang.Exception
2019-04-06 12:25:56 -Mapped "{[/heat/heat/add],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatController.add()
2019-04-06 12:25:56 -Mapped "{[/heat/heat/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatController.remove(java.lang.Integer)
2019-04-06 12:25:56 -Mapped "{[/heat/heat/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatController.remove(java.lang.Integer[])
2019-04-06 12:25:56 -Mapped "{[/heat/heat/update]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatController.update(com.bootdo.heat.domain.HeatDO)
2019-04-06 12:25:56 -Mapped "{[/heat/heat/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.heat.controller.HeatController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-06 12:25:56 -Mapped "{[/heat/heat/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatController.save(com.bootdo.heat.domain.HeatDO)
2019-04-06 12:25:56 -Mapped "{[/heat/heat/exprotHeat],methods=[GET]}" onto public void com.bootdo.heat.controller.HeatController.exprotExcel(com.bootdo.heat.vo.HeatVo,javax.servlet.http.HttpServletResponse)
2019-04-06 12:25:56 -Mapped "{[/heat/heat],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatController.Heat()
2019-04-06 12:25:56 -Mapped "{[/heat/heat/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatController.edit(java.lang.Integer,org.springframework.ui.Model)
2019-04-06 12:25:56 -Mapped "{[/heat/heatInto/exprotHeatIntoExcel],methods=[GET]}" onto public void com.bootdo.heat.controller.HeatIntoController.exprotExcel(com.bootdo.heat.vo.HeatVo,javax.servlet.http.HttpServletResponse)
2019-04-06 12:25:56 -Mapped "{[/heat/heatInto],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatIntoController.HeatInto()
2019-04-06 12:25:56 -Mapped "{[/heat/heatPrice/add],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatPriceController.add()
2019-04-06 12:25:56 -Mapped "{[/heat/heatPrice/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatPriceController.remove(java.lang.Long)
2019-04-06 12:25:56 -Mapped "{[/heat/heatPrice/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatPriceController.remove(java.lang.Long[])
2019-04-06 12:25:56 -Mapped "{[/heat/heatPrice/update]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatPriceController.update(com.bootdo.heat.domain.HeatPriceDO)
2019-04-06 12:25:56 -Mapped "{[/heat/heatPrice/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.heat.controller.HeatPriceController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-06 12:25:56 -Mapped "{[/heat/heatPrice/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatPriceController.save(com.bootdo.heat.domain.HeatPriceDO)
2019-04-06 12:25:56 -Mapped "{[/heat/heatPrice],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatPriceController.HeatPrice()
2019-04-06 12:25:56 -Mapped "{[/heat/heatPrice/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatPriceController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-06 12:25:56 -Mapped "{[/heat/heatUpLoad/exprotHeatExcel],methods=[GET]}" onto public void com.bootdo.heat.controller.HeatUpLoadController.exprotHeatExcel(com.bootdo.heat.vo.HeatVo,javax.servlet.http.HttpServletResponse)
2019-04-06 12:25:56 -Mapped "{[/heat/heatUpLoad/importHeatExcel]}" onto public java.lang.String com.bootdo.heat.controller.HeatUpLoadController.importHeatExcel(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)
2019-04-06 12:25:56 -Mapped "{[/heat/heatUpLoad/createHeatExcel],methods=[POST]}" onto public java.lang.String com.bootdo.heat.controller.HeatUpLoadController.createHeatExcel(com.bootdo.heat.domain.HeatDO) throws java.lang.Exception
2019-04-06 12:25:56 -Mapped "{[/heat/heatUpLoad],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatUpLoadController.HeatUpLoad()
2019-04-06 12:25:56 -Mapped "{[/moneyList/moneyList/queryAllUserName],methods=[POST]}" onto public java.util.List<com.bootdo.moneyList.damain.MoneyListDO> com.bootdo.moneyList.controller.MoneyListController.getAllUserName(com.bootdo.moneyList.damain.MoneyListDO)
2019-04-06 12:25:56 -Mapped "{[/moneyList/moneyList],methods=[GET]}" onto java.lang.String com.bootdo.moneyList.controller.MoneyListController.MoneyList()
2019-04-06 12:25:56 -Mapped "{[/moneyList/moneyList/queryAllUser],methods=[POST]}" onto public java.util.List<com.bootdo.moneyList.damain.MoneyListDO> com.bootdo.moneyList.controller.MoneyListController.queryAllUser(com.bootdo.moneyList.damain.MoneyListDO)
2019-04-06 12:25:56 -Mapped "{[/moneyList/moneyList/updateMoney],methods=[POST]}" onto public java.util.List<com.bootdo.moneyList.damain.MoneyListDO> com.bootdo.moneyList.controller.MoneyListController.updateMoney(com.bootdo.moneyList.damain.MoneyListDO)
2019-04-06 12:25:56 -Mapped "{[/moneyLog/elecLog/add],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.ElecLogController.add()
2019-04-06 12:25:56 -Mapped "{[/moneyLog/elecLog/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.ElecLogController.remove(java.lang.Long)
2019-04-06 12:25:56 -Mapped "{[/moneyLog/elecLog/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.ElecLogController.remove(java.lang.Long[])
2019-04-06 12:25:56 -Mapped "{[/moneyLog/elecLog/update]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.ElecLogController.update(com.bootdo.moneyLog.domain.ElecLogDO)
2019-04-06 12:25:56 -Mapped "{[/moneyLog/elecLog/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.moneyLog.controller.ElecLogController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-06 12:25:56 -Mapped "{[/moneyLog/elecLog/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.ElecLogController.save(com.bootdo.moneyLog.domain.ElecLogDO)
2019-04-06 12:25:56 -Mapped "{[/moneyLog/elecLog],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.ElecLogController.moneyLog()
2019-04-06 12:25:56 -Mapped "{[/moneyLog/elecLog/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.ElecLogController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-06 12:25:56 -Mapped "{[/moneyLog/elecLog/exprotElecLog],methods=[GET]}" onto public void com.bootdo.moneyLog.controller.ElecLogController.exprotElecLog(com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-06 12:25:56 -Mapped "{[/moneyLog/heatLog/add],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.HeatLogController.add()
2019-04-06 12:25:56 -Mapped "{[/moneyLog/heatLog/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.HeatLogController.remove(java.lang.Long)
2019-04-06 12:25:56 -Mapped "{[/moneyLog/heatLog/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.HeatLogController.remove(java.lang.Long[])
2019-04-06 12:25:56 -Mapped "{[/moneyLog/heatLog/update]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.HeatLogController.update(com.bootdo.moneyLog.domain.HeatLogDO)
2019-04-06 12:25:56 -Mapped "{[/moneyLog/heatLog/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.moneyLog.controller.HeatLogController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-06 12:25:56 -Mapped "{[/moneyLog/heatLog/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.HeatLogController.save(com.bootdo.moneyLog.domain.HeatLogDO)
2019-04-06 12:25:56 -Mapped "{[/moneyLog/heatLog],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.HeatLogController.HeatLog()
2019-04-06 12:25:56 -Mapped "{[/moneyLog/heatLog/exprotHeatLog],methods=[GET]}" onto public void com.bootdo.moneyLog.controller.HeatLogController.exprotHeatLog(com.bootdo.moneyLog.vo.HeatLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-06 12:25:56 -Mapped "{[/moneyLog/heatLog/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.HeatLogController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-06 12:25:56 -Mapped "{[/moneyLog/waterLog/add],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.WaterLogController.add()
2019-04-06 12:25:56 -Mapped "{[/moneyLog/waterLog/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.WaterLogController.remove(java.lang.Long)
2019-04-06 12:25:56 -Mapped "{[/moneyLog/waterLog/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.WaterLogController.remove(java.lang.Long[])
2019-04-06 12:25:56 -Mapped "{[/moneyLog/waterLog/update]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.WaterLogController.update(com.bootdo.moneyLog.domain.WaterLogDO)
2019-04-06 12:25:56 -Mapped "{[/moneyLog/waterLog/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.moneyLog.controller.WaterLogController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-06 12:25:56 -Mapped "{[/moneyLog/waterLog/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.WaterLogController.save(com.bootdo.moneyLog.domain.WaterLogDO)
2019-04-06 12:25:56 -Mapped "{[/moneyLog/waterLog],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.WaterLogController.WaterLog()
2019-04-06 12:25:56 -Mapped "{[/moneyLog/waterLog/exprotWaterLog],methods=[GET]}" onto public void com.bootdo.moneyLog.controller.WaterLogController.exprotWaterLog(com.bootdo.moneyLog.vo.WaterLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-06 12:25:56 -Mapped "{[/moneyLog/waterLog/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.WaterLogController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-06 12:25:56 -Mapped "{[/oa/notify/add],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.add()
2019-04-06 12:25:56 -Mapped "{[/oa/notify/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.remove(java.lang.Long)
2019-04-06 12:25:56 -Mapped "{[/oa/notify/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.remove(java.lang.Long[])
2019-04-06 12:25:56 -Mapped "{[/oa/notify/update]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.update(com.bootdo.oa.domain.NotifyDO)
2019-04-06 12:25:56 -Mapped "{[/oa/notify/read/{id}],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.read(java.lang.Long,org.springframework.ui.Model)
2019-04-06 12:25:56 -Mapped "{[/oa/notify/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.oa.controller.NotifyController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-06 12:25:56 -Mapped "{[/oa/notify/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.save(com.bootdo.oa.domain.NotifyDO)
2019-04-06 12:25:56 -Mapped "{[/oa/notify/message],methods=[GET]}" onto com.bootdo.common.utils.PageUtils com.bootdo.oa.controller.NotifyController.message()
2019-04-06 12:25:56 -Mapped "{[/oa/notify/selfList],methods=[GET]}" onto com.bootdo.common.utils.PageUtils com.bootdo.oa.controller.NotifyController.selfList(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-06 12:25:56 -Mapped "{[/oa/notify],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.oaNotify()
2019-04-06 12:25:56 -Mapped "{[/oa/notify/selfNotify],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.selefNotify()
2019-04-06 12:25:56 -Mapped "{[/oa/notify/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-06 12:25:56 -Mapped "{[/print/print/add],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.add()
2019-04-06 12:25:56 -Mapped "{[/print/print/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.print.controller.PrintController.remove(java.lang.Long)
2019-04-06 12:25:56 -Mapped "{[/print/print/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.print.controller.PrintController.remove(java.lang.Long[])
2019-04-06 12:25:56 -Mapped "{[/print/print/update]}" onto public com.bootdo.common.utils.R com.bootdo.print.controller.PrintController.update(com.bootdo.print.domain.PrintDO)
2019-04-06 12:25:56 -Mapped "{[/print/print/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.print.controller.PrintController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-06 12:25:56 -Mapped "{[/print/print/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.print.controller.PrintController.save(java.lang.String,com.bootdo.print.domain.PrintDO)
2019-04-06 12:25:56 -Mapped "{[/print/print],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.Print()
2019-04-06 12:25:56 -Mapped "{[/print/print/exprotPrint],methods=[GET]}" onto public void com.bootdo.print.controller.PrintController.exprotPrint(com.bootdo.print.vo.PrintVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-06 12:25:56 -Mapped "{[/print/print/printEdit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.printEdit(java.lang.Long,org.springframework.ui.Model)
2019-04-06 12:25:56 -Mapped "{[/print/print/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-06 12:25:56 -Mapped "{[/system/sysDept/add/{pId}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.add(java.lang.Long,org.springframework.ui.Model)
2019-04-06 12:25:56 -Mapped "{[/system/sysDept/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.remove(java.lang.Long)
2019-04-06 12:25:56 -Mapped "{[/system/sysDept/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.remove(java.lang.Long[])
2019-04-06 12:25:56 -Mapped "{[/system/sysDept/update]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.update(com.bootdo.system.domain.DeptDO)
2019-04-06 12:25:56 -Mapped "{[/system/sysDept/list],methods=[GET]}" onto public java.util.List<com.bootdo.system.domain.DeptDO> com.bootdo.system.controller.DeptController.list()
2019-04-06 12:25:56 -Mapped "{[/system/sysDept/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.save(com.bootdo.system.domain.DeptDO)
2019-04-06 12:25:56 -Mapped "{[/system/sysDept/tree],methods=[GET]}" onto public com.bootdo.common.domain.Tree<com.bootdo.system.domain.DeptDO> com.bootdo.system.controller.DeptController.tree()
2019-04-06 12:25:56 -Mapped "{[/system/sysDept],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.dept()
2019-04-06 12:25:56 -Mapped "{[/system/sysDept/treeView],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.treeView()
2019-04-06 12:25:56 -Mapped "{[/system/sysDept/edit/{deptId}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-06 12:25:56 -Mapped "{[/index],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.index(org.springframework.ui.Model)
2019-04-06 12:25:56 -Mapped "{[/main],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.main()
2019-04-06 12:25:56 -Mapped "{[/logout],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.logout()
2019-04-06 12:25:56 -Mapped "{[/login],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.LoginController.ajaxLogin(java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest)
2019-04-06 12:25:56 -Mapped "{[/getVerify],methods=[GET]}" onto public void com.bootdo.system.controller.LoginController.getVerify(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-04-06 12:25:56 -Mapped "{[/ || ],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.welcome(org.springframework.ui.Model)
2019-04-06 12:25:56 -Mapped "{[/login],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.login(org.springframework.ui.Model)
2019-04-06 12:25:56 -Mapped "{[/sys/menu/add/{pId}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.MenuController.add(org.springframework.ui.Model,java.lang.Long)
2019-04-06 12:25:56 -Mapped "{[/sys/menu/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.MenuController.remove(java.lang.Long)
2019-04-06 12:25:56 -Mapped "{[/sys/menu/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.MenuController.update(com.bootdo.system.domain.MenuDO)
2019-04-06 12:25:56 -Mapped "{[/sys/menu/list]}" onto java.util.List<com.bootdo.system.domain.MenuDO> com.bootdo.system.controller.MenuController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-06 12:25:56 -Mapped "{[/sys/menu/save],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.MenuController.save(com.bootdo.system.domain.MenuDO)
2019-04-06 12:25:56 -Mapped "{[/sys/menu/tree/{roleId}],methods=[GET]}" onto com.bootdo.common.domain.Tree<com.bootdo.system.domain.MenuDO> com.bootdo.system.controller.MenuController.tree(java.lang.Long)
2019-04-06 12:25:56 -Mapped "{[/sys/menu/tree],methods=[GET]}" onto com.bootdo.common.domain.Tree<com.bootdo.system.domain.MenuDO> com.bootdo.system.controller.MenuController.tree()
2019-04-06 12:25:56 -Mapped "{[/sys/menu],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.MenuController.menu(org.springframework.ui.Model)
2019-04-06 12:25:56 -Mapped "{[/sys/menu/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.MenuController.edit(org.springframework.ui.Model,java.lang.Long)
2019-04-06 12:25:56 -Mapped "{[/sys/role/add],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.RoleController.add()
2019-04-06 12:25:56 -Mapped "{[/sys/role/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.update(com.bootdo.system.domain.RoleDO)
2019-04-06 12:25:56 -Mapped "{[/sys/role/list],methods=[GET]}" onto java.util.List<com.bootdo.system.domain.RoleDO> com.bootdo.system.controller.RoleController.list()
2019-04-06 12:25:56 -Mapped "{[/sys/role/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.save(java.lang.Long)
2019-04-06 12:25:56 -Mapped "{[/sys/role/save],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.save(com.bootdo.system.domain.RoleDO)
2019-04-06 12:25:56 -Mapped "{[/sys/role/batchRemove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.batchRemove(java.lang.Long[])
2019-04-06 12:25:56 -Mapped "{[/sys/role],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.RoleController.role()
2019-04-06 12:25:56 -Mapped "{[/sys/role/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.RoleController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-06 12:25:56 -Mapped "{[/sys/online/list]}" onto public java.util.List<com.bootdo.system.domain.UserOnline> com.bootdo.system.controller.SessionController.list()
2019-04-06 12:25:56 -Mapped "{[/sys/online/sessionList]}" onto public java.util.Collection<org.apache.shiro.session.Session> com.bootdo.system.controller.SessionController.sessionList()
2019-04-06 12:25:56 -Mapped "{[/sys/online],methods=[GET]}" onto public java.lang.String com.bootdo.system.controller.SessionController.online()
2019-04-06 12:25:56 -Mapped "{[/sys/online/forceLogout/{sessionId}]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.SessionController.forceLogout(java.lang.String,org.springframework.web.servlet.mvc.support.RedirectAttributes)
2019-04-06 12:25:56 -Mapped "{[/sys/user/exit],methods=[POST]}" onto boolean com.bootdo.system.controller.UserController.exit(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-06 12:25:56 -Mapped "{[/sys/user/add],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.add(org.springframework.ui.Model)
2019-04-06 12:25:56 -Mapped "{[/sys/user/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.remove(java.lang.Long)
2019-04-06 12:25:56 -Mapped "{[/sys/user/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.update(com.bootdo.system.domain.UserDO)
2019-04-06 12:25:56 -Mapped "{[/sys/user/list],methods=[GET]}" onto com.bootdo.common.utils.PageUtils com.bootdo.system.controller.UserController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-06 12:25:56 -Mapped "{[/sys/user/save],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.save(com.bootdo.system.domain.UserDO)
2019-04-06 12:25:56 -Mapped "{[/sys/user/batchRemove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.batchRemove(java.lang.Long[])
2019-04-06 12:25:56 -Mapped "{[/sys/user/tree],methods=[GET]}" onto public com.bootdo.common.domain.Tree<com.bootdo.system.domain.DeptDO> com.bootdo.system.controller.UserController.tree()
2019-04-06 12:25:56 -Mapped "{[/sys/user/treeView],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.treeView()
2019-04-06 12:25:56 -Mapped "{[/sys/user/personal],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.personal(org.springframework.ui.Model)
2019-04-06 12:25:56 -Mapped "{[/sys/user/resetPwd],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.resetPwd(com.bootdo.system.vo.UserVO)
2019-04-06 12:25:56 -Mapped "{[/sys/user/resetPwd/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.resetPwd(java.lang.Long,org.springframework.ui.Model)
2019-04-06 12:25:56 -Mapped "{[/sys/user/updatePeronal],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.updatePeronal(com.bootdo.system.domain.UserDO)
2019-04-06 12:25:56 -Mapped "{[/sys/user/uploadImg],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.uploadImg(org.springframework.web.multipart.MultipartFile,java.lang.String,javax.servlet.http.HttpServletRequest)
2019-04-06 12:25:56 -Mapped "{[/sys/user/adminResetPwd],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.adminResetPwd(com.bootdo.system.vo.UserVO)
2019-04-06 12:25:56 -Mapped "{[/sys/user/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.edit(org.springframework.ui.Model,java.lang.Long)
2019-04-06 12:25:56 -Mapped "{[/sys/user],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.user(org.springframework.ui.Model)
2019-04-06 12:25:56 -Mapped "{[/file/downImport/{importType}],methods=[GET]}" onto public void com.bootdo.temple.controller.TempletController.downImport(javax.servlet.http.HttpServletResponse,java.lang.String)
2019-04-06 12:25:56 -Mapped "{[/water/water/add],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterController.add()
2019-04-06 12:25:56 -Mapped "{[/water/water/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterController.remove(java.lang.Long)
2019-04-06 12:25:56 -Mapped "{[/water/water/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterController.remove(java.lang.Long[])
2019-04-06 12:25:56 -Mapped "{[/water/water/update]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterController.update(com.bootdo.water.domain.WaterDO)
2019-04-06 12:25:56 -Mapped "{[/water/water/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.water.controller.WaterController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-06 12:25:56 -Mapped "{[/water/water/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterController.save(com.bootdo.water.domain.WaterDO)
2019-04-06 12:25:56 -Mapped "{[/water/water/exprotWater],methods=[GET]}" onto public void com.bootdo.water.controller.WaterController.exprotExcel(com.bootdo.water.vo.WaterVo,javax.servlet.http.HttpServletResponse)
2019-04-06 12:25:56 -Mapped "{[/water/water/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-06 12:25:56 -Mapped "{[/water/water],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterController.Water()
2019-04-06 12:25:56 -Mapped "{[/water/waterInto/exprotWaterIntoExcel],methods=[GET]}" onto public void com.bootdo.water.controller.WaterIntoController.exprotExcel(com.bootdo.water.vo.WaterVo,javax.servlet.http.HttpServletResponse)
2019-04-06 12:25:56 -Mapped "{[/water/waterInto],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterIntoController.WaterInto()
2019-04-06 12:25:56 -Mapped "{[/water/waterPrice/add],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterPriceController.add()
2019-04-06 12:25:56 -Mapped "{[/water/waterPrice/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterPriceController.remove(java.lang.Long)
2019-04-06 12:25:56 -Mapped "{[/water/waterPrice/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterPriceController.remove(java.lang.Long[])
2019-04-06 12:25:56 -Mapped "{[/water/waterPrice/update]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterPriceController.update(com.bootdo.water.domain.WaterPriceDO)
2019-04-06 12:25:56 -Mapped "{[/water/waterPrice/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.water.controller.WaterPriceController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-06 12:25:56 -Mapped "{[/water/waterPrice/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterPriceController.save(com.bootdo.water.domain.WaterPriceDO)
2019-04-06 12:25:56 -Mapped "{[/water/waterPrice/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterPriceController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-06 12:25:56 -Mapped "{[/water/waterPrice],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterPriceController.WaterPrice()
2019-04-06 12:25:56 -Mapped "{[/water/waterUpLoad],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterUpLoadController.WaterUpLoad()
2019-04-06 12:25:56 -Mapped "{[/water/waterUpLoad/importWaterExcel]}" onto public java.lang.String com.bootdo.water.controller.WaterUpLoadController.importWaterExcel(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)
2019-04-06 12:25:56 -Mapped "{[/water/waterUpLoad/exprotWaterExcel],methods=[GET]}" onto public void com.bootdo.water.controller.WaterUpLoadController.exprotWaterExcel(com.bootdo.water.vo.WaterVo,javax.servlet.http.HttpServletResponse)
2019-04-06 12:25:56 -Mapped "{[/water/waterUpLoad/createWaterExcel],methods=[POST]}" onto public java.lang.String com.bootdo.water.controller.WaterUpLoadController.createWaterExcel(com.bootdo.water.domain.WaterDO) throws java.lang.Exception
2019-04-06 12:25:56 -Mapped "{[/v2/api-docs],methods=[GET],produces=[application/json || application/hal+json]}" onto public org.springframework.http.ResponseEntity<springfox.documentation.spring.web.json.Json> springfox.documentation.swagger2.web.Swagger2Controller.getDocumentation(java.lang.String,javax.servlet.http.HttpServletRequest)
2019-04-06 12:25:56 -Mapped "{[/swagger-resources/configuration/security]}" onto org.springframework.http.ResponseEntity<springfox.documentation.swagger.web.SecurityConfiguration> springfox.documentation.swagger.web.ApiResourceController.securityConfiguration()
2019-04-06 12:25:56 -Mapped "{[/swagger-resources]}" onto org.springframework.http.ResponseEntity<java.util.List<springfox.documentation.swagger.web.SwaggerResource>> springfox.documentation.swagger.web.ApiResourceController.swaggerResources()
2019-04-06 12:25:56 -Mapped "{[/swagger-resources/configuration/ui]}" onto org.springframework.http.ResponseEntity<springfox.documentation.swagger.web.UiConfiguration> springfox.documentation.swagger.web.ApiResourceController.uiConfiguration()
2019-04-06 12:25:57 -Initializing ExecutorService  'messageBrokerTaskScheduler'
2019-04-06 12:25:57 -Mapped URL path [/endpointChat/**] onto handler of type [class org.springframework.web.socket.sockjs.support.SockJsHttpRequestHandler]
2019-04-06 12:25:57 -Initializing ExecutorService  'brokerChannelExecutor'
2019-04-06 12:25:57 -Mapped URL path [/**/favicon.ico] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-04-06 12:25:58 -Looking for @ControllerAdvice: org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@a38c7fe: startup date [Sat Apr 06 12:25:33 CST 2019]; root of context hierarchy
2019-04-06 12:25:58 -Mapped URL path [/webjars/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-04-06 12:25:58 -Mapped URL path [/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-04-06 12:25:58 -Mapped URL path [/files/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-04-06 12:25:58 -Detected @ExceptionHandler methods in BDExceptionHandler
2019-04-06 12:25:58 -[THYMELEAF][main] Template Mode 'LEGACYHTML5' is deprecated. Using Template Mode 'HTML' instead.
2019-04-06 12:26:02 -Registering beans for JMX exposure on startup
2019-04-06 12:26:02 -Bean with name 'dataSource' has been autodetected for JMX exposure
2019-04-06 12:26:02 -Located MBean 'dataSource': registering with JMX server as MBean [com.alibaba.druid.pool:name=dataSource,type=DruidDataSource]
2019-04-06 12:26:02 -Starting beans in phase 2147483647
2019-04-06 12:26:02 -Context refreshed
2019-04-06 12:26:02 -Found 1 custom documentation plugin(s)
2019-04-06 12:26:02 -Scanning for api listing references
2019-04-06 12:26:03 -Generating unique operation named: exprotElecLogUsingGET_1
2019-04-06 12:26:03 -Generating unique operation named: getCountDUsingPOST_1
2019-04-06 12:26:03 -Generating unique operation named: exprotElecLogUsingGET_2
2019-04-06 12:26:03 -Generating unique operation named: getCountDUsingPOST_2
2019-04-06 12:26:03 -Generating unique operation named: exprotElecLogUsingGET_3
2019-04-06 12:26:03 -Generating unique operation named: getCountDUsingPOST_3
2019-04-06 12:26:03 -Generating unique operation named: removeUsingPOST_1
2019-04-06 12:26:03 -Generating unique operation named: addUsingGET_1
2019-04-06 12:26:03 -Generating unique operation named: editUsingGET_1
2019-04-06 12:26:03 -Generating unique operation named: listUsingGET_1
2019-04-06 12:26:03 -Generating unique operation named: removeUsingPOST_2
2019-04-06 12:26:03 -Generating unique operation named: removeUsingPOST_3
2019-04-06 12:26:03 -Generating unique operation named: saveUsingPOST_1
2019-04-06 12:26:03 -Generating unique operation named: updateUsingGET_1
2019-04-06 12:26:03 -Generating unique operation named: updateUsingHEAD_1
2019-04-06 12:26:03 -Generating unique operation named: updateUsingPOST_1
2019-04-06 12:26:03 -Generating unique operation named: updateUsingPUT_1
2019-04-06 12:26:03 -Generating unique operation named: updateUsingPATCH_1
2019-04-06 12:26:03 -Generating unique operation named: updateUsingDELETE_1
2019-04-06 12:26:03 -Generating unique operation named: updateUsingOPTIONS_1
2019-04-06 12:26:03 -Generating unique operation named: updateUsingTRACE_1
2019-04-06 12:26:03 -Generating unique operation named: addUsingGET_2
2019-04-06 12:26:03 -Generating unique operation named: editUsingGET_2
2019-04-06 12:26:03 -Generating unique operation named: listUsingGET_2
2019-04-06 12:26:03 -Generating unique operation named: removeUsingPOST_4
2019-04-06 12:26:03 -Generating unique operation named: removeUsingPOST_5
2019-04-06 12:26:03 -Generating unique operation named: saveUsingPOST_2
2019-04-06 12:26:03 -Generating unique operation named: updateUsingPOST_2
2019-04-06 12:26:03 -Generating unique operation named: exprotExcelUsingGET_1
2019-04-06 12:26:03 -Generating unique operation named: addUsingGET_3
2019-04-06 12:26:03 -Generating unique operation named: editUsingGET_3
2019-04-06 12:26:03 -Generating unique operation named: exprotElecLogUsingGET_4
2019-04-06 12:26:03 -Generating unique operation named: listUsingGET_3
2019-04-06 12:26:03 -Generating unique operation named: removeUsingPOST_6
2019-04-06 12:26:03 -Generating unique operation named: removeUsingPOST_7
2019-04-06 12:26:03 -Generating unique operation named: saveUsingPOST_3
2019-04-06 12:26:03 -Generating unique operation named: updateUsingGET_2
2019-04-06 12:26:03 -Generating unique operation named: updateUsingHEAD_2
2019-04-06 12:26:03 -Generating unique operation named: updateUsingPOST_3
2019-04-06 12:26:03 -Generating unique operation named: updateUsingPUT_2
2019-04-06 12:26:03 -Generating unique operation named: updateUsingPATCH_2
2019-04-06 12:26:03 -Generating unique operation named: updateUsingDELETE_2
2019-04-06 12:26:03 -Generating unique operation named: updateUsingOPTIONS_2
2019-04-06 12:26:03 -Generating unique operation named: updateUsingTRACE_2
2019-04-06 12:26:03 -Generating unique operation named: addUsingGET_4
2019-04-06 12:26:03 -Generating unique operation named: editUsingGET_4
2019-04-06 12:26:03 -Generating unique operation named: listUsingGET_4
2019-04-06 12:26:03 -Generating unique operation named: removeUsingPOST_8
2019-04-06 12:26:03 -Generating unique operation named: removeUsingPOST_9
2019-04-06 12:26:03 -Generating unique operation named: saveUsingPOST_4
2019-04-06 12:26:03 -Generating unique operation named: updateUsingGET_3
2019-04-06 12:26:03 -Generating unique operation named: updateUsingHEAD_3
2019-04-06 12:26:03 -Generating unique operation named: updateUsingPOST_4
2019-04-06 12:26:03 -Generating unique operation named: updateUsingPUT_3
2019-04-06 12:26:03 -Generating unique operation named: updateUsingPATCH_3
2019-04-06 12:26:03 -Generating unique operation named: updateUsingDELETE_3
2019-04-06 12:26:03 -Generating unique operation named: updateUsingOPTIONS_3
2019-04-06 12:26:03 -Generating unique operation named: updateUsingTRACE_3
2019-04-06 12:26:03 -Generating unique operation named: ElecUsingGET_1
2019-04-06 12:26:03 -Generating unique operation named: addUsingGET_5
2019-04-06 12:26:03 -Generating unique operation named: editUsingGET_5
2019-04-06 12:26:03 -Generating unique operation named: listUsingGET_5
2019-04-06 12:26:03 -Generating unique operation named: removeUsingPOST_10
2019-04-06 12:26:03 -Generating unique operation named: removeUsingPOST_11
2019-04-06 12:26:03 -Generating unique operation named: saveUsingPOST_5
2019-04-06 12:26:03 -Generating unique operation named: updateUsingGET_4
2019-04-06 12:26:03 -Generating unique operation named: updateUsingHEAD_4
2019-04-06 12:26:03 -Generating unique operation named: updateUsingPOST_5
2019-04-06 12:26:03 -Generating unique operation named: updateUsingPUT_4
2019-04-06 12:26:03 -Generating unique operation named: updateUsingPATCH_4
2019-04-06 12:26:03 -Generating unique operation named: updateUsingDELETE_4
2019-04-06 12:26:03 -Generating unique operation named: updateUsingOPTIONS_4
2019-04-06 12:26:03 -Generating unique operation named: updateUsingTRACE_4
2019-04-06 12:26:04 -Generating unique operation named: editUsingGET_6
2019-04-06 12:26:04 -Generating unique operation named: listUsingGET_6
2019-04-06 12:26:04 -Generating unique operation named: updateUsingPOST_6
2019-04-06 12:26:04 -Generating unique operation named: addUsingGET_6
2019-04-06 12:26:04 -Generating unique operation named: editUsingGET_7
2019-04-06 12:26:04 -Generating unique operation named: exprotExcelUsingGET_2
2019-04-06 12:26:04 -Generating unique operation named: listUsingGET_7
2019-04-06 12:26:04 -Generating unique operation named: removeUsingPOST_12
2019-04-06 12:26:04 -Generating unique operation named: removeUsingPOST_13
2019-04-06 12:26:04 -Generating unique operation named: saveUsingPOST_6
2019-04-06 12:26:04 -Generating unique operation named: updateUsingGET_5
2019-04-06 12:26:04 -Generating unique operation named: updateUsingHEAD_5
2019-04-06 12:26:04 -Generating unique operation named: updateUsingPOST_7
2019-04-06 12:26:04 -Generating unique operation named: updateUsingPUT_5
2019-04-06 12:26:04 -Generating unique operation named: updateUsingPATCH_5
2019-04-06 12:26:04 -Generating unique operation named: updateUsingDELETE_5
2019-04-06 12:26:04 -Generating unique operation named: updateUsingOPTIONS_5
2019-04-06 12:26:04 -Generating unique operation named: updateUsingTRACE_5
2019-04-06 12:26:04 -Generating unique operation named: exprotExcelUsingGET_3
2019-04-06 12:26:04 -Generating unique operation named: addUsingGET_7
2019-04-06 12:26:04 -Generating unique operation named: editUsingGET_8
2019-04-06 12:26:04 -Generating unique operation named: listUsingGET_8
2019-04-06 12:26:04 -Generating unique operation named: removeUsingPOST_14
2019-04-06 12:26:04 -Generating unique operation named: removeUsingPOST_15
2019-04-06 12:26:04 -Generating unique operation named: saveUsingPOST_7
2019-04-06 12:26:04 -Generating unique operation named: updateUsingGET_6
2019-04-06 12:26:04 -Generating unique operation named: updateUsingHEAD_6
2019-04-06 12:26:04 -Generating unique operation named: updateUsingPOST_8
2019-04-06 12:26:04 -Generating unique operation named: updateUsingPUT_6
2019-04-06 12:26:04 -Generating unique operation named: updateUsingPATCH_6
2019-04-06 12:26:04 -Generating unique operation named: updateUsingDELETE_6
2019-04-06 12:26:04 -Generating unique operation named: updateUsingOPTIONS_6
2019-04-06 12:26:04 -Generating unique operation named: updateUsingTRACE_6
2019-04-06 12:26:04 -Generating unique operation named: addUsingGET_8
2019-04-06 12:26:04 -Generating unique operation named: editUsingGET_9
2019-04-06 12:26:04 -Generating unique operation named: listUsingGET_9
2019-04-06 12:26:04 -Generating unique operation named: removeUsingPOST_16
2019-04-06 12:26:04 -Generating unique operation named: removeUsingPOST_17
2019-04-06 12:26:04 -Generating unique operation named: saveUsingPOST_8
2019-04-06 12:26:04 -Generating unique operation named: updateUsingGET_7
2019-04-06 12:26:04 -Generating unique operation named: updateUsingHEAD_7
2019-04-06 12:26:04 -Generating unique operation named: updateUsingPOST_9
2019-04-06 12:26:04 -Generating unique operation named: updateUsingPUT_7
2019-04-06 12:26:04 -Generating unique operation named: updateUsingPATCH_7
2019-04-06 12:26:04 -Generating unique operation named: updateUsingDELETE_7
2019-04-06 12:26:04 -Generating unique operation named: updateUsingOPTIONS_7
2019-04-06 12:26:04 -Generating unique operation named: updateUsingTRACE_7
2019-04-06 12:26:04 -Generating unique operation named: addUsingGET_9
2019-04-06 12:26:04 -Generating unique operation named: editUsingGET_10
2019-04-06 12:26:04 -Generating unique operation named: infoUsingGET_1
2019-04-06 12:26:04 -Generating unique operation named: infoUsingHEAD_1
2019-04-06 12:26:04 -Generating unique operation named: infoUsingPOST_1
2019-04-06 12:26:04 -Generating unique operation named: infoUsingPUT_1
2019-04-06 12:26:04 -Generating unique operation named: infoUsingPATCH_1
2019-04-06 12:26:04 -Generating unique operation named: infoUsingDELETE_1
2019-04-06 12:26:04 -Generating unique operation named: infoUsingOPTIONS_1
2019-04-06 12:26:04 -Generating unique operation named: infoUsingTRACE_1
2019-04-06 12:26:04 -Generating unique operation named: listUsingGET_10
2019-04-06 12:26:04 -Generating unique operation named: removeUsingPOST_18
2019-04-06 12:26:04 -Generating unique operation named: removeUsingPOST_19
2019-04-06 12:26:04 -Generating unique operation named: saveUsingPOST_9
2019-04-06 12:26:04 -Generating unique operation named: updateUsingPOST_10
2019-04-06 12:26:04 -Generating unique operation named: listUsingGET_11
2019-04-06 12:26:04 -Generating unique operation named: removeUsingPOST_20
2019-04-06 12:26:04 -Generating unique operation named: welcomeUsingGET_1
2019-04-06 12:26:04 -Generating unique operation named: addUsingGET_10
2019-04-06 12:26:04 -Generating unique operation named: editUsingGET_11
2019-04-06 12:26:04 -Generating unique operation named: listUsingGET_12
2019-04-06 12:26:04 -Generating unique operation named: removeUsingPOST_21
2019-04-06 12:26:04 -Generating unique operation named: saveUsingPOST_10
2019-04-06 12:26:04 -Generating unique operation named: treeUsingGET_1
2019-04-06 12:26:04 -Generating unique operation named: treeUsingGET_2
2019-04-06 12:26:04 -Generating unique operation named: updateUsingPOST_11
2019-04-06 12:26:04 -Generating unique operation named: addUsingGET_11
2019-04-06 12:26:04 -Generating unique operation named: editUsingGET_12
2019-04-06 12:26:04 -Generating unique operation named: listUsingGET_13
2019-04-06 12:26:04 -Generating unique operation named: removeUsingPOST_22
2019-04-06 12:26:04 -Generating unique operation named: removeUsingPOST_23
2019-04-06 12:26:04 -Generating unique operation named: saveUsingPOST_11
2019-04-06 12:26:04 -Generating unique operation named: updateUsingGET_8
2019-04-06 12:26:04 -Generating unique operation named: updateUsingHEAD_8
2019-04-06 12:26:04 -Generating unique operation named: updateUsingPOST_12
2019-04-06 12:26:04 -Generating unique operation named: updateUsingPUT_8
2019-04-06 12:26:04 -Generating unique operation named: updateUsingPATCH_8
2019-04-06 12:26:04 -Generating unique operation named: updateUsingDELETE_8
2019-04-06 12:26:04 -Generating unique operation named: updateUsingOPTIONS_8
2019-04-06 12:26:04 -Generating unique operation named: updateUsingTRACE_8
2019-04-06 12:26:04 -Generating unique operation named: addUsingGET_12
2019-04-06 12:26:04 -Generating unique operation named: editUsingGET_13
2019-04-06 12:26:04 -Generating unique operation named: listUsingGET_14
2019-04-06 12:26:04 -Generating unique operation named: removeUsingPOST_24
2019-04-06 12:26:04 -Generating unique operation named: removeUsingPOST_25
2019-04-06 12:26:04 -Generating unique operation named: saveUsingPOST_12
2019-04-06 12:26:04 -Generating unique operation named: updateUsingGET_9
2019-04-06 12:26:04 -Generating unique operation named: updateUsingHEAD_9
2019-04-06 12:26:04 -Generating unique operation named: updateUsingPOST_13
2019-04-06 12:26:04 -Generating unique operation named: updateUsingPUT_9
2019-04-06 12:26:04 -Generating unique operation named: updateUsingPATCH_9
2019-04-06 12:26:04 -Generating unique operation named: updateUsingDELETE_9
2019-04-06 12:26:04 -Generating unique operation named: updateUsingOPTIONS_9
2019-04-06 12:26:04 -Generating unique operation named: updateUsingTRACE_9
2019-04-06 12:26:04 -Generating unique operation named: addUsingGET_13
2019-04-06 12:26:04 -Generating unique operation named: batchRemoveUsingPOST_1
2019-04-06 12:26:04 -Generating unique operation named: editUsingGET_14
2019-04-06 12:26:04 -Generating unique operation named: listUsingGET_15
2019-04-06 12:26:04 -Generating unique operation named: saveUsingPOST_13
2019-04-06 12:26:04 -Generating unique operation named: saveUsingPOST_14
2019-04-06 12:26:04 -Generating unique operation named: updateUsingPOST_14
2019-04-06 12:26:04 -Generating unique operation named: listUsingGET_16
2019-04-06 12:26:04 -Generating unique operation named: listUsingHEAD_1
2019-04-06 12:26:04 -Generating unique operation named: listUsingPOST_1
2019-04-06 12:26:04 -Generating unique operation named: listUsingPUT_1
2019-04-06 12:26:04 -Generating unique operation named: listUsingPATCH_1
2019-04-06 12:26:04 -Generating unique operation named: listUsingDELETE_1
2019-04-06 12:26:04 -Generating unique operation named: listUsingOPTIONS_1
2019-04-06 12:26:04 -Generating unique operation named: listUsingTRACE_1
2019-04-06 12:26:04 -Generating unique operation named: addUsingGET_14
2019-04-06 12:26:04 -Generating unique operation named: batchRemoveUsingPOST_2
2019-04-06 12:26:04 -Generating unique operation named: editUsingGET_15
2019-04-06 12:26:04 -Generating unique operation named: listUsingGET_17
2019-04-06 12:26:04 -Generating unique operation named: removeUsingPOST_26
2019-04-06 12:26:04 -Generating unique operation named: saveUsingPOST_15
2019-04-06 12:26:04 -Generating unique operation named: treeUsingGET_3
2019-04-06 12:26:05 -Generating unique operation named: treeViewUsingGET_1
2019-04-06 12:26:05 -Generating unique operation named: updateUsingPOST_15
2019-04-06 12:26:05 -Generating unique operation named: addUsingGET_15
2019-04-06 12:26:05 -Generating unique operation named: editUsingGET_16
2019-04-06 12:26:05 -Generating unique operation named: exprotExcelUsingGET_4
2019-04-06 12:26:05 -Generating unique operation named: listUsingGET_18
2019-04-06 12:26:05 -Generating unique operation named: removeUsingPOST_27
2019-04-06 12:26:05 -Generating unique operation named: removeUsingPOST_28
2019-04-06 12:26:05 -Generating unique operation named: saveUsingPOST_16
2019-04-06 12:26:05 -Generating unique operation named: updateUsingGET_10
2019-04-06 12:26:05 -Generating unique operation named: updateUsingHEAD_10
2019-04-06 12:26:05 -Generating unique operation named: updateUsingPOST_16
2019-04-06 12:26:05 -Generating unique operation named: updateUsingPUT_10
2019-04-06 12:26:05 -Generating unique operation named: updateUsingPATCH_10
2019-04-06 12:26:05 -Generating unique operation named: updateUsingDELETE_10
2019-04-06 12:26:05 -Generating unique operation named: updateUsingOPTIONS_10
2019-04-06 12:26:05 -Generating unique operation named: updateUsingTRACE_10
2019-04-06 12:26:05 -Generating unique operation named: exprotExcelUsingGET_5
2019-04-06 12:26:05 -Generating unique operation named: addUsingGET_16
2019-04-06 12:26:05 -Generating unique operation named: editUsingGET_17
2019-04-06 12:26:05 -Generating unique operation named: listUsingGET_19
2019-04-06 12:26:05 -Generating unique operation named: removeUsingPOST_29
2019-04-06 12:26:05 -Generating unique operation named: removeUsingPOST_30
2019-04-06 12:26:05 -Generating unique operation named: saveUsingPOST_17
2019-04-06 12:26:05 -Generating unique operation named: updateUsingGET_11
2019-04-06 12:26:05 -Generating unique operation named: updateUsingHEAD_11
2019-04-06 12:26:05 -Generating unique operation named: updateUsingPOST_17
2019-04-06 12:26:05 -Generating unique operation named: updateUsingPUT_11
2019-04-06 12:26:05 -Generating unique operation named: updateUsingPATCH_11
2019-04-06 12:26:05 -Generating unique operation named: updateUsingDELETE_11
2019-04-06 12:26:05 -Generating unique operation named: updateUsingOPTIONS_11
2019-04-06 12:26:05 -Generating unique operation named: updateUsingTRACE_11
2019-04-06 12:26:05 -Generating unique operation named: addUsingGET_17
2019-04-06 12:26:05 -Generating unique operation named: editUsingGET_18
2019-04-06 12:26:05 -Generating unique operation named: listUsingGET_20
2019-04-06 12:26:05 -Generating unique operation named: removeUsingPOST_31
2019-04-06 12:26:05 -Generating unique operation named: removeUsingPOST_32
2019-04-06 12:26:05 -Generating unique operation named: saveUsingPOST_18
2019-04-06 12:26:05 -Generating unique operation named: updateUsingGET_12
2019-04-06 12:26:05 -Generating unique operation named: updateUsingHEAD_12
2019-04-06 12:26:05 -Generating unique operation named: updateUsingPOST_18
2019-04-06 12:26:05 -Generating unique operation named: updateUsingPUT_12
2019-04-06 12:26:05 -Generating unique operation named: updateUsingPATCH_12
2019-04-06 12:26:05 -Generating unique operation named: updateUsingDELETE_12
2019-04-06 12:26:05 -Generating unique operation named: updateUsingOPTIONS_12
2019-04-06 12:26:05 -Generating unique operation named: updateUsingTRACE_12
2019-04-06 12:26:05 -Starting Quartz Scheduler now
2019-04-06 12:26:05 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED started.
2019-04-06 12:26:05 -Starting...
2019-04-06 12:26:05 -BrokerAvailabilityEvent[available=true, SimpleBrokerMessageHandler [DefaultSubscriptionRegistry[cache[0 destination(s)], registry[0 sessions]]]]
2019-04-06 12:26:05 -Started.
2019-04-06 12:26:05 -Starting ProtocolHandler ["http-nio-8081"]
2019-04-06 12:26:05 -Using a shared selector for servlet write/read
2019-04-06 12:26:05 -Tomcat started on port(s): 8081 (http) with context path ''
2019-04-06 12:26:05 -Started BootdoApplication in 33.41 seconds (JVM running for 34.36)
2019-04-06 12:26:05 -==>  Preparing: select `id`,`cron_expression`,`method_name`,`is_concurrent`,`description`,`update_by`,`bean_class`,`create_date`,`job_status`,`job_group`,`update_date`,`create_by`,`spring_bean`,`job_name` from sys_task order by id desc 
2019-04-06 12:26:05 -==> Parameters: 
2019-04-06 12:26:06 -<==      Total: 1
2019-04-06 12:26:15 -Initializing Spring FrameworkServlet 'dispatcherServlet'
2019-04-06 12:26:15 -FrameworkServlet 'dispatcherServlet': initialization started
2019-04-06 12:26:15 -FrameworkServlet 'dispatcherServlet': initialization completed in 70 ms
2019-04-06 12:26:15 -Enabling session validation scheduler...
2019-04-06 12:26:16 -请求地址 : http://localhost:8081/login;JSESSIONID=50fa41c5-9e1a-4c1c-b5c5-8b596fd705fa
2019-04-06 12:26:16 -HTTP METHOD : GET
2019-04-06 12:26:16 -CLASS_METHOD : com.bootdo.system.controller.LoginController.login
2019-04-06 12:26:16 -参数 : [{}]
2019-04-06 12:26:16 -耗时 : 5
2019-04-06 12:26:16 -返回值 : login
2019-04-06 12:26:22 -请求地址 : http://localhost:8081/getVerify
2019-04-06 12:26:22 -HTTP METHOD : GET
2019-04-06 12:26:22 -CLASS_METHOD : com.bootdo.system.controller.LoginController.getVerify
2019-04-06 12:26:22 -参数 : [org.apache.shiro.web.servlet.ShiroHttpServletRequest@23216b37, org.apache.shiro.web.servlet.ShiroHttpServletResponse@2d6ca615]
2019-04-06 12:26:27 -1293
2019-04-06 12:26:27 -耗时 : 5234
2019-04-06 12:26:27 -返回值 : null
2019-04-06 12:26:48 -请求地址 : http://localhost:8081/login
2019-04-06 12:26:48 -HTTP METHOD : POST
2019-04-06 12:26:48 -CLASS_METHOD : com.bootdo.system.controller.LoginController.ajaxLogin
2019-04-06 12:26:48 -参数 : [admin, 111111, 1293, org.apache.shiro.web.servlet.ShiroHttpServletRequest@61fc1b9d]
2019-04-06 12:26:48 -==>  Preparing: select `user_id`,`username`,`name`,`password`,`dept_id`,`email`,`mobile`,`status`,`user_id_create`,`gmt_create`,`gmt_modified`,`sex`,`birth`,`pic_id`,`live_address`,`hobby`,`province`,`city`,`district` from sys_user WHERE username = ? order by user_id desc 
2019-04-06 12:26:48 -==> Parameters: admin(String)
2019-04-06 12:26:48 -<==      Total: 1
2019-04-06 12:26:48 -耗时 : 256
2019-04-06 12:26:48 -返回值 : {msg=操作成功, code=0}
2019-04-06 12:26:48 -More than one TaskExecutor bean found within the context, and none is named 'taskExecutor'. Mark one of them as primary or name it 'taskExecutor' (possibly as an alias) in order to use it for async processing: [clientInboundChannelExecutor, clientOutboundChannelExecutor, brokerChannelExecutor, messageBrokerTaskScheduler]
2019-04-06 12:26:48 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-06 12:26:48 -==> Parameters: 1(Long), admin(String), 登录(String), 257(Integer), com.bootdo.system.controller.LoginController.ajaxLogin()(String), null, 127.0.0.1(String), 2019-04-06 12:26:48.81(Timestamp)
2019-04-06 12:26:49 -请求地址 : http://localhost:8081/index
2019-04-06 12:26:49 -HTTP METHOD : GET
2019-04-06 12:26:49 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2019-04-06 12:26:49 -参数 : [{}]
2019-04-06 12:26:49 -<==    Updates: 1
2019-04-06 12:26:49 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2019-04-06 12:26:49 -==> Parameters: 1(Long)
2019-04-06 12:26:50 -<==      Total: 46
2019-04-06 12:26:50 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2019-04-06 12:26:50 -==> Parameters: 138(Long)
2019-04-06 12:26:50 -<==      Total: 1
2019-04-06 12:26:50 -耗时 : 1060
2019-04-06 12:26:50 -返回值 : index_v1
2019-04-06 12:26:50 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-06 12:26:50 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 1060(Integer), com.bootdo.system.controller.LoginController.index()(String), {"menus":[{"attributes":{"icon":"fa fa-money","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-money","url":"/moneyList/moneyList"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"102","parentId":"106","text":"现金缴费"},{"attributes":{"icon":"fa fa-book","url":"/moneyLog/elecLog"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"107","parentId":"106","text":"缴费记录"}],"hasChildren":true,"hasParent":false,"id":"106","parentId":"0","text":"收费管理"},{"attributes":{"icon":"fa fa-lightbulb-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/elec/elec"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"121","parentId":"103","text":"电费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"elec/elecInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"122","parentId":"103","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"elec/elecUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"123","parentId":"103","text":"电表上传"},{"attributes":{"icon":"fa fa-cc","url":"/elec/elecPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"124","parentId":"103","text":"电价管理"}],"hasChildren":true,"hasParent":false,"id":"103","parentId":"0","text":"电费管理"},{"attributes":{"icon":"fa fa-tint","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/water/water"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"117","parentId":"105","text":"水费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"water/waterInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"118","parentId":"105","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"water/waterUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"119","parentId":"105","text":"水费生成"},{"attributes":{"icon":"fa fa-cc","url":"/water/waterPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"120","parentId":"105","text":"水价管理"}],"hasChildren":true,"hasParent":false,"id":"105","parentId":"0","text":"水费管理"},{"attributes":{"icon":"fa fa-fire","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/heat/heat"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"113","parentId":"104","text":"暖费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"heat/heatInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"114","parentId":"104","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"heat/heatUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"115","parentId":"104","text":"暖费生成"},{"attributes":{"icon":"","url":"/heat/heatPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"116","parentId":"104","text":"暖价管理"}],"hasChildren":true,"hasParent":false,"id":"104","parentId":"0","text":"暖费管理"},{"attributes":{"icon":"fa fa-vcard-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-bomb","url":"/print/print"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"149","parentId":"108","text":"票据记录"}],"hasChildren":true,"hasParent":false,"id":"108","parentId":"0","text":"票据管理"},{"attributes":{"icon":"fa fa-bar-chart","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-area-chart","url":"/chart/graph_echarts.html"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","text":"百度chart"},{"attributes":{"icon":"fa fa-sun-o","url":"charts/countDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"109","parentId":"97","text":"日统计报表"},{"attributes":{"icon":"fa fa-registered","url":"charts/countMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"110","parentId":"97","text":"月统计报表"},{"attributes":{"icon":"fa fa-support","url":"charts/countYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"111","parentId":"97","text":"年统计报表"},{"attributes":{"icon":"fa fa-money","url":"charts/countOwe"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"155","parentId":"97","text":"欠费报表图"},{"attributes":{"icon":"fa fa-tachometer","url":"charts/countRun"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"112","parentId":"97","text":"走势图报表"}],"hasChildren":true,"hasParent":false,"id":"97","parentId":"0","text":"统计管理"},{"attributes":{"icon":"fa fa-bars","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-book","url":"/common/dict"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"78","parentId":"1","text":"数据字典"},{"attributes":{"icon":"fa fa-folder-open","url":"/common/sysFile"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"71","parentId":"1","text":"文件管理"}],"h(String), 127.0.0.1(String), 2019-04-06 12:26:50.427(Timestamp)
2019-04-06 12:26:50 -<==    Updates: 1
2019-04-06 12:26:51 -请求地址 : http://localhost:8081/main
2019-04-06 12:26:51 -HTTP METHOD : GET
2019-04-06 12:26:51 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-06 12:26:51 -参数 : []
2019-04-06 12:26:51 -耗时 : 0
2019-04-06 12:26:51 -返回值 : main
2019-04-06 12:26:54 -请求地址 : http://localhost:8081/oa/notify/message
2019-04-06 12:26:54 -HTTP METHOD : GET
2019-04-06 12:26:54 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2019-04-06 12:26:54 -参数 : []
2019-04-06 12:26:54 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2019-04-06 12:26:54 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2019-04-06 12:26:54 -请求地址 : http://localhost:8081/main
2019-04-06 12:26:54 -HTTP METHOD : GET
2019-04-06 12:26:54 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-06 12:26:54 -参数 : []
2019-04-06 12:26:54 -耗时 : 0
2019-04-06 12:26:54 -返回值 : main
2019-04-06 12:26:54 -<==      Total: 0
2019-04-06 12:26:54 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2019-04-06 12:26:54 -==> Parameters: 1(Long), 0(String)
2019-04-06 12:26:54 -<==      Total: 1
2019-04-06 12:26:54 -耗时 : 521
2019-04-06 12:26:54 -返回值 : com.bootdo.common.utils.PageUtils@4707ef85
2019-04-06 12:26:57 -WebSocketSession[1 current WS(0)-HttpStream(1)-HttpPoll(0), 2 total, 0 closed abnormally (0 connect failure, 0 send limit, 3 transport error)], stompSubProtocol[processed CONNECT(1)-CONNECTED(1)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 8, active threads = 0, queued tasks = 0, completed tasks = 12], outboundChannelpool size = 2, active threads = 0, queued tasks = 0, completed tasks = 2], sockJsScheduler[pool size = 4, active threads = 1, queued tasks = 2, completed tasks = 1]
2019-04-06 12:27:00 -==>  Preparing: select distinct m.perms from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id = ur.role_id where ur.user_id = ? 
2019-04-06 12:27:00 -==> Parameters: 1(Long)
2019-04-06 12:27:00 -<==      Total: 90
2019-04-06 12:27:00 -请求地址 : http://localhost:8081/moneyLog/elecLog
2019-04-06 12:27:00 -HTTP METHOD : GET
2019-04-06 12:27:00 -CLASS_METHOD : com.bootdo.moneyLog.controller.ElecLogController.moneyLog
2019-04-06 12:27:00 -参数 : []
2019-04-06 12:27:00 -耗时 : 1
2019-04-06 12:27:00 -返回值 : /moneyLog/elecLog/elecLog
2019-04-06 12:27:02 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-06 12:27:02 -HTTP METHOD : GET
2019-04-06 12:27:02 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-06 12:27:02 -参数 : [userType]
2019-04-06 12:27:02 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-06 12:27:02 -==> Parameters: userType(String)
2019-04-06 12:27:02 -<==      Total: 2
2019-04-06 12:27:02 -耗时 : 29
2019-04-06 12:27:02 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-06 12:27:02 -请求地址 : http://localhost:8081/moneyLog/elecLog/list
2019-04-06 12:27:02 -HTTP METHOD : GET
2019-04-06 12:27:02 -CLASS_METHOD : com.bootdo.moneyLog.controller.ElecLogController.list
2019-04-06 12:27:02 -参数 : [{limit=10, offset=0, userType=, userOrg=, userId=, elecDate=}]
2019-04-06 12:27:02 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`elec_type`,`elec_money`,`elec_date`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec_log order by id asc limit ?, ? 
2019-04-06 12:27:02 -==> Parameters: 0(Integer), 10(Integer)
2019-04-06 12:27:02 -<==      Total: 7
2019-04-06 12:27:02 -==>  Preparing: select count(*) from elec_log 
2019-04-06 12:27:02 -==> Parameters: 
2019-04-06 12:27:02 -<==      Total: 1
2019-04-06 12:27:02 -耗时 : 436
2019-04-06 12:27:02 -返回值 : com.bootdo.common.utils.PageUtils@316c0a23
2019-04-06 12:27:03 -请求地址 : http://localhost:8081/moneyLog/heatLog
2019-04-06 12:27:03 -HTTP METHOD : GET
2019-04-06 12:27:03 -CLASS_METHOD : com.bootdo.moneyLog.controller.HeatLogController.HeatLog
2019-04-06 12:27:03 -参数 : []
2019-04-06 12:27:03 -耗时 : 0
2019-04-06 12:27:03 -返回值 : /moneyLog/heatLog/heatLog
2019-04-06 12:27:04 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-06 12:27:04 -HTTP METHOD : GET
2019-04-06 12:27:04 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-06 12:27:04 -参数 : [userType]
2019-04-06 12:27:04 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-06 12:27:04 -==> Parameters: userType(String)
2019-04-06 12:27:04 -<==      Total: 2
2019-04-06 12:27:04 -耗时 : 4
2019-04-06 12:27:04 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-06 12:27:04 -请求地址 : http://localhost:8081/moneyLog/heatLog/list
2019-04-06 12:27:04 -HTTP METHOD : GET
2019-04-06 12:27:04 -CLASS_METHOD : com.bootdo.moneyLog.controller.HeatLogController.list
2019-04-06 12:27:04 -参数 : [{limit=10, offset=0, userType=, userOrg=, userId=, heatDate=}]
2019-04-06 12:27:04 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-06 12:27:04 -==> Parameters: 1(Long), admin(String), error(String), null, http://localhost:8081/moneyLog/heatLog/list(String), org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.builder.BuilderException: Error evaluating expression 'updateTime != null and '. Cause: org.apache.ibatis.ognl.ExpressionSyntaxException: Malformed OGNL expression: updateTime != null and  [org.apache.ibatis.ognl.ParseException: Encountered "<EOF>" at line 1, column 23.
Was expecting one of:
    ":" ...
    "not" ...
    "+" ...
    "-" ...
    "~" ...
    "!" ...
    "(" ...
    "true" ...
    "false" ...
    "null" ...
    "#this" ...
    "#root" ...
    "#" ...
    "[" ...
    "{" ...
    "@" ...
    "new" ...
    <IDENT> ...
    <DYNAMIC_SUBSCRIPT> ...
    "\'" ...
    "`" ...
    "\"" ...
    <INT_LITERAL> ...
    <FLT_LITERAL> ...
    ](String), null, 2019-04-06 12:27:04.255(Timestamp)
2019-04-06 12:27:04 -nested exception is org.apache.ibatis.builder.BuilderException: Error evaluating expression 'updateTime != null and '. Cause: org.apache.ibatis.ognl.ExpressionSyntaxException: Malformed OGNL expression: updateTime != null and  [org.apache.ibatis.ognl.ParseException: Encountered "<EOF>" at line 1, column 23.
Was expecting one of:
    ":" ...
    "not" ...
    "+" ...
    "-" ...
    "~" ...
    "!" ...
    "(" ...
    "true" ...
    "false" ...
    "null" ...
    "#this" ...
    "#root" ...
    "#" ...
    "[" ...
    "{" ...
    "@" ...
    "new" ...
    <IDENT> ...
    <DYNAMIC_SUBSCRIPT> ...
    "\'" ...
    "`" ...
    "\"" ...
    <INT_LITERAL> ...
    <FLT_LITERAL> ...
    ]
org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.builder.BuilderException: Error evaluating expression 'updateTime != null and '. Cause: org.apache.ibatis.ognl.ExpressionSyntaxException: Malformed OGNL expression: updateTime != null and  [org.apache.ibatis.ognl.ParseException: Encountered "<EOF>" at line 1, column 23.
Was expecting one of:
    ":" ...
    "not" ...
    "+" ...
    "-" ...
    "~" ...
    "!" ...
    "(" ...
    "true" ...
    "false" ...
    "null" ...
    "#this" ...
    "#root" ...
    "#" ...
    "[" ...
    "{" ...
    "@" ...
    "new" ...
    <IDENT> ...
    <DYNAMIC_SUBSCRIPT> ...
    "\'" ...
    "`" ...
    "\"" ...
    <INT_LITERAL> ...
    <FLT_LITERAL> ...
    ]
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:79)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:447)
	at com.sun.proxy.$Proxy101.selectList(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:231)
	at org.apache.ibatis.binding.MapperMethod.executeForMany(MapperMethod.java:137)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:75)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy103.list(Unknown Source)
	at com.bootdo.moneyLog.service.impl.HeatLogServiceImpl.list(HeatLogServiceImpl.java:21)
	at com.bootdo.moneyLog.controller.HeatLogController.list(HeatLogController.java:70)
	at com.bootdo.moneyLog.controller.HeatLogController$$FastClassBySpringCGLIB$$930b0464.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:204)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:746)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.bootdo.common.aspect.WebLogAspect.doAround(WebLogAspect.java:57)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.apache.shiro.spring.security.interceptor.AopAllianceAnnotationsAuthorizingMethodInterceptor$1.proceed(AopAllianceAnnotationsAuthorizingMethodInterceptor.java:82)
	at org.apache.shiro.authz.aop.AuthorizingMethodInterceptor.invoke(AuthorizingMethodInterceptor.java:39)
	at org.apache.shiro.spring.security.interceptor.AopAllianceAnnotationsAuthorizingMethodInterceptor.invoke(AopAllianceAnnotationsAuthorizingMethodInterceptor.java:115)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.bootdo.moneyLog.controller.HeatLogController$$EnhancerBySpringCGLIB$$791a22cc.list(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:209)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:877)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:783)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:991)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:925)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:974)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:866)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:635)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:851)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:61)
	at org.apache.shiro.web.servlet.AdviceFilter.executeChain(AdviceFilter.java:108)
	at org.apache.shiro.web.servlet.AdviceFilter.doFilterInternal(AdviceFilter.java:137)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:66)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)
	at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)
	at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)
	at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)
	at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:383)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:109)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:496)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:790)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1468)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Unknown Source)
Caused by: org.apache.ibatis.builder.BuilderException: Error evaluating expression 'updateTime != null and '. Cause: org.apache.ibatis.ognl.ExpressionSyntaxException: Malformed OGNL expression: updateTime != null and  [org.apache.ibatis.ognl.ParseException: Encountered "<EOF>" at line 1, column 23.
Was expecting one of:
    ":" ...
    "not" ...
    "+" ...
    "-" ...
    "~" ...
    "!" ...
    "(" ...
    "true" ...
    "false" ...
    "null" ...
    "#this" ...
    "#root" ...
    "#" ...
    "[" ...
    "{" ...
    "@" ...
    "new" ...
    <IDENT> ...
    <DYNAMIC_SUBSCRIPT> ...
    "\'" ...
    "`" ...
    "\"" ...
    <INT_LITERAL> ...
    <FLT_LITERAL> ...
    ]
	at org.apache.ibatis.scripting.xmltags.OgnlCache.getValue(OgnlCache.java:46)
	at org.apache.ibatis.scripting.xmltags.ExpressionEvaluator.evaluateBoolean(ExpressionEvaluator.java:32)
	at org.apache.ibatis.scripting.xmltags.IfSqlNode.apply(IfSqlNode.java:34)
	at org.apache.ibatis.scripting.xmltags.MixedSqlNode.apply(MixedSqlNode.java:33)
	at org.apache.ibatis.scripting.xmltags.TrimSqlNode.apply(TrimSqlNode.java:55)
	at org.apache.ibatis.scripting.xmltags.MixedSqlNode.apply(MixedSqlNode.java:33)
	at org.apache.ibatis.scripting.xmltags.DynamicSqlSource.getBoundSql(DynamicSqlSource.java:41)
	at org.apache.ibatis.mapping.MappedStatement.getBoundSql(MappedStatement.java:292)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:81)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:148)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:141)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:434)
	... 105 common frames omitted
Caused by: org.apache.ibatis.ognl.ExpressionSyntaxException: Malformed OGNL expression: updateTime != null and 
	at org.apache.ibatis.ognl.Ognl.parseExpression(Ognl.java:112)
	at org.apache.ibatis.scripting.xmltags.OgnlCache.parseExpression(OgnlCache.java:53)
	at org.apache.ibatis.scripting.xmltags.OgnlCache.getValue(OgnlCache.java:44)
	... 120 common frames omitted
Caused by: org.apache.ibatis.ognl.ParseException: Encountered "<EOF>" at line 1, column 23.
Was expecting one of:
    ":" ...
    "not" ...
    "+" ...
    "-" ...
    "~" ...
    "!" ...
    "(" ...
    "true" ...
    "false" ...
    "null" ...
    "#this" ...
    "#root" ...
    "#" ...
    "[" ...
    "{" ...
    "@" ...
    "new" ...
    <IDENT> ...
    <DYNAMIC_SUBSCRIPT> ...
    "\'" ...
    "`" ...
    "\"" ...
    <INT_LITERAL> ...
    <FLT_LITERAL> ...
    
	at org.apache.ibatis.ognl.OgnlParser.generateParseException(OgnlParser.java:3172)
	at org.apache.ibatis.ognl.OgnlParser.jj_consume_token(OgnlParser.java:3051)
	at org.apache.ibatis.ognl.OgnlParser.unaryExpression(OgnlParser.java:1236)
	at org.apache.ibatis.ognl.OgnlParser.multiplicativeExpression(OgnlParser.java:971)
	at org.apache.ibatis.ognl.OgnlParser.additiveExpression(OgnlParser.java:894)
	at org.apache.ibatis.ognl.OgnlParser.shiftExpression(OgnlParser.java:750)
	at org.apache.ibatis.ognl.OgnlParser.relationalExpression(OgnlParser.java:508)
	at org.apache.ibatis.ognl.OgnlParser.equalityExpression(OgnlParser.java:405)
	at org.apache.ibatis.ognl.OgnlParser.andExpression(OgnlParser.java:352)
	at org.apache.ibatis.ognl.OgnlParser.exclusiveOrExpression(OgnlParser.java:299)
	at org.apache.ibatis.ognl.OgnlParser.inclusiveOrExpression(OgnlParser.java:246)
	at org.apache.ibatis.ognl.OgnlParser.logicalAndExpression(OgnlParser.java:221)
	at org.apache.ibatis.ognl.OgnlParser.logicalOrExpression(OgnlParser.java:140)
	at org.apache.ibatis.ognl.OgnlParser.conditionalTestExpression(OgnlParser.java:101)
	at org.apache.ibatis.ognl.OgnlParser.assignmentExpression(OgnlParser.java:64)
	at org.apache.ibatis.ognl.OgnlParser.expression(OgnlParser.java:23)
	at org.apache.ibatis.ognl.OgnlParser.topLevelExpression(OgnlParser.java:15)
	at org.apache.ibatis.ognl.Ognl.parseExpression(Ognl.java:110)
	... 122 common frames omitted
2019-04-06 12:27:04 -<==    Updates: 1
2019-04-06 12:27:05 -请求地址 : http://localhost:8081/moneyLog/heatLog
2019-04-06 12:27:05 -HTTP METHOD : GET
2019-04-06 12:27:05 -CLASS_METHOD : com.bootdo.moneyLog.controller.HeatLogController.HeatLog
2019-04-06 12:27:05 -参数 : []
2019-04-06 12:27:05 -耗时 : 1
2019-04-06 12:27:05 -返回值 : /moneyLog/heatLog/heatLog
2019-04-06 12:27:05 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-06 12:27:05 -HTTP METHOD : GET
2019-04-06 12:27:05 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-06 12:27:05 -参数 : [userType]
2019-04-06 12:27:05 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-06 12:27:05 -==> Parameters: userType(String)
2019-04-06 12:27:05 -<==      Total: 2
2019-04-06 12:27:05 -耗时 : 12
2019-04-06 12:27:05 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-06 12:27:05 -请求地址 : http://localhost:8081/moneyLog/heatLog/list
2019-04-06 12:27:05 -HTTP METHOD : GET
2019-04-06 12:27:05 -CLASS_METHOD : com.bootdo.moneyLog.controller.HeatLogController.list
2019-04-06 12:27:05 -参数 : [{limit=10, offset=0, userType=, userOrg=, userId=, heatDate=}]
2019-04-06 12:27:05 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-06 12:27:05 -==> Parameters: 1(Long), admin(String), error(String), null, http://localhost:8081/moneyLog/heatLog/list(String), org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.builder.BuilderException: Error evaluating expression 'updateTime != null and '. Cause: org.apache.ibatis.ognl.ExpressionSyntaxException: Malformed OGNL expression: updateTime != null and  [org.apache.ibatis.ognl.ParseException: Encountered "<EOF>" at line 1, column 23.
Was expecting one of:
    ":" ...
    "not" ...
    "+" ...
    "-" ...
    "~" ...
    "!" ...
    "(" ...
    "true" ...
    "false" ...
    "null" ...
    "#this" ...
    "#root" ...
    "#" ...
    "[" ...
    "{" ...
    "@" ...
    "new" ...
    <IDENT> ...
    <DYNAMIC_SUBSCRIPT> ...
    "\'" ...
    "`" ...
    "\"" ...
    <INT_LITERAL> ...
    <FLT_LITERAL> ...
    ](String), null, 2019-04-06 12:27:05.695(Timestamp)
2019-04-06 12:27:05 -nested exception is org.apache.ibatis.builder.BuilderException: Error evaluating expression 'updateTime != null and '. Cause: org.apache.ibatis.ognl.ExpressionSyntaxException: Malformed OGNL expression: updateTime != null and  [org.apache.ibatis.ognl.ParseException: Encountered "<EOF>" at line 1, column 23.
Was expecting one of:
    ":" ...
    "not" ...
    "+" ...
    "-" ...
    "~" ...
    "!" ...
    "(" ...
    "true" ...
    "false" ...
    "null" ...
    "#this" ...
    "#root" ...
    "#" ...
    "[" ...
    "{" ...
    "@" ...
    "new" ...
    <IDENT> ...
    <DYNAMIC_SUBSCRIPT> ...
    "\'" ...
    "`" ...
    "\"" ...
    <INT_LITERAL> ...
    <FLT_LITERAL> ...
    ]
org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.builder.BuilderException: Error evaluating expression 'updateTime != null and '. Cause: org.apache.ibatis.ognl.ExpressionSyntaxException: Malformed OGNL expression: updateTime != null and  [org.apache.ibatis.ognl.ParseException: Encountered "<EOF>" at line 1, column 23.
Was expecting one of:
    ":" ...
    "not" ...
    "+" ...
    "-" ...
    "~" ...
    "!" ...
    "(" ...
    "true" ...
    "false" ...
    "null" ...
    "#this" ...
    "#root" ...
    "#" ...
    "[" ...
    "{" ...
    "@" ...
    "new" ...
    <IDENT> ...
    <DYNAMIC_SUBSCRIPT> ...
    "\'" ...
    "`" ...
    "\"" ...
    <INT_LITERAL> ...
    <FLT_LITERAL> ...
    ]
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:79)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:447)
	at com.sun.proxy.$Proxy101.selectList(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:231)
	at org.apache.ibatis.binding.MapperMethod.executeForMany(MapperMethod.java:137)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:75)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy103.list(Unknown Source)
	at com.bootdo.moneyLog.service.impl.HeatLogServiceImpl.list(HeatLogServiceImpl.java:21)
	at com.bootdo.moneyLog.controller.HeatLogController.list(HeatLogController.java:70)
	at com.bootdo.moneyLog.controller.HeatLogController$$FastClassBySpringCGLIB$$930b0464.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:204)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:746)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.bootdo.common.aspect.WebLogAspect.doAround(WebLogAspect.java:57)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.apache.shiro.spring.security.interceptor.AopAllianceAnnotationsAuthorizingMethodInterceptor$1.proceed(AopAllianceAnnotationsAuthorizingMethodInterceptor.java:82)
	at org.apache.shiro.authz.aop.AuthorizingMethodInterceptor.invoke(AuthorizingMethodInterceptor.java:39)
	at org.apache.shiro.spring.security.interceptor.AopAllianceAnnotationsAuthorizingMethodInterceptor.invoke(AopAllianceAnnotationsAuthorizingMethodInterceptor.java:115)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.bootdo.moneyLog.controller.HeatLogController$$EnhancerBySpringCGLIB$$791a22cc.list(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:209)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:877)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:783)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:991)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:925)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:974)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:866)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:635)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:851)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:61)
	at org.apache.shiro.web.servlet.AdviceFilter.executeChain(AdviceFilter.java:108)
	at org.apache.shiro.web.servlet.AdviceFilter.doFilterInternal(AdviceFilter.java:137)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:66)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)
	at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)
	at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)
	at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)
	at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:383)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:109)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:496)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:790)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1468)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Unknown Source)
Caused by: org.apache.ibatis.builder.BuilderException: Error evaluating expression 'updateTime != null and '. Cause: org.apache.ibatis.ognl.ExpressionSyntaxException: Malformed OGNL expression: updateTime != null and  [org.apache.ibatis.ognl.ParseException: Encountered "<EOF>" at line 1, column 23.
Was expecting one of:
    ":" ...
    "not" ...
    "+" ...
    "-" ...
    "~" ...
    "!" ...
    "(" ...
    "true" ...
    "false" ...
    "null" ...
    "#this" ...
    "#root" ...
    "#" ...
    "[" ...
    "{" ...
    "@" ...
    "new" ...
    <IDENT> ...
    <DYNAMIC_SUBSCRIPT> ...
    "\'" ...
    "`" ...
    "\"" ...
    <INT_LITERAL> ...
    <FLT_LITERAL> ...
    ]
	at org.apache.ibatis.scripting.xmltags.OgnlCache.getValue(OgnlCache.java:46)
	at org.apache.ibatis.scripting.xmltags.ExpressionEvaluator.evaluateBoolean(ExpressionEvaluator.java:32)
	at org.apache.ibatis.scripting.xmltags.IfSqlNode.apply(IfSqlNode.java:34)
	at org.apache.ibatis.scripting.xmltags.MixedSqlNode.apply(MixedSqlNode.java:33)
	at org.apache.ibatis.scripting.xmltags.TrimSqlNode.apply(TrimSqlNode.java:55)
	at org.apache.ibatis.scripting.xmltags.MixedSqlNode.apply(MixedSqlNode.java:33)
	at org.apache.ibatis.scripting.xmltags.DynamicSqlSource.getBoundSql(DynamicSqlSource.java:41)
	at org.apache.ibatis.mapping.MappedStatement.getBoundSql(MappedStatement.java:292)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:81)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:148)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:141)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:434)
	... 105 common frames omitted
Caused by: org.apache.ibatis.ognl.ExpressionSyntaxException: Malformed OGNL expression: updateTime != null and 
	at org.apache.ibatis.ognl.Ognl.parseExpression(Ognl.java:112)
	at org.apache.ibatis.scripting.xmltags.OgnlCache.parseExpression(OgnlCache.java:53)
	at org.apache.ibatis.scripting.xmltags.OgnlCache.getValue(OgnlCache.java:44)
	... 120 common frames omitted
Caused by: org.apache.ibatis.ognl.ParseException: Encountered "<EOF>" at line 1, column 23.
Was expecting one of:
    ":" ...
    "not" ...
    "+" ...
    "-" ...
    "~" ...
    "!" ...
    "(" ...
    "true" ...
    "false" ...
    "null" ...
    "#this" ...
    "#root" ...
    "#" ...
    "[" ...
    "{" ...
    "@" ...
    "new" ...
    <IDENT> ...
    <DYNAMIC_SUBSCRIPT> ...
    "\'" ...
    "`" ...
    "\"" ...
    <INT_LITERAL> ...
    <FLT_LITERAL> ...
    
	at org.apache.ibatis.ognl.OgnlParser.generateParseException(OgnlParser.java:3172)
	at org.apache.ibatis.ognl.OgnlParser.jj_consume_token(OgnlParser.java:3051)
	at org.apache.ibatis.ognl.OgnlParser.unaryExpression(OgnlParser.java:1236)
	at org.apache.ibatis.ognl.OgnlParser.multiplicativeExpression(OgnlParser.java:971)
	at org.apache.ibatis.ognl.OgnlParser.additiveExpression(OgnlParser.java:894)
	at org.apache.ibatis.ognl.OgnlParser.shiftExpression(OgnlParser.java:750)
	at org.apache.ibatis.ognl.OgnlParser.relationalExpression(OgnlParser.java:508)
	at org.apache.ibatis.ognl.OgnlParser.equalityExpression(OgnlParser.java:405)
	at org.apache.ibatis.ognl.OgnlParser.andExpression(OgnlParser.java:352)
	at org.apache.ibatis.ognl.OgnlParser.exclusiveOrExpression(OgnlParser.java:299)
	at org.apache.ibatis.ognl.OgnlParser.inclusiveOrExpression(OgnlParser.java:246)
	at org.apache.ibatis.ognl.OgnlParser.logicalAndExpression(OgnlParser.java:221)
	at org.apache.ibatis.ognl.OgnlParser.logicalOrExpression(OgnlParser.java:140)
	at org.apache.ibatis.ognl.OgnlParser.conditionalTestExpression(OgnlParser.java:101)
	at org.apache.ibatis.ognl.OgnlParser.assignmentExpression(OgnlParser.java:64)
	at org.apache.ibatis.ognl.OgnlParser.expression(OgnlParser.java:23)
	at org.apache.ibatis.ognl.OgnlParser.topLevelExpression(OgnlParser.java:15)
	at org.apache.ibatis.ognl.Ognl.parseExpression(Ognl.java:110)
	... 122 common frames omitted
2019-04-06 12:27:05 -<==    Updates: 1
2019-04-06 12:27:07 -请求地址 : http://localhost:8081/moneyLog/elecLog
2019-04-06 12:27:07 -HTTP METHOD : GET
2019-04-06 12:27:07 -CLASS_METHOD : com.bootdo.moneyLog.controller.ElecLogController.moneyLog
2019-04-06 12:27:07 -参数 : []
2019-04-06 12:27:07 -耗时 : 0
2019-04-06 12:27:07 -返回值 : /moneyLog/elecLog/elecLog
2019-04-06 12:27:07 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-06 12:27:07 -HTTP METHOD : GET
2019-04-06 12:27:07 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-06 12:27:07 -参数 : [userType]
2019-04-06 12:27:07 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-06 12:27:07 -==> Parameters: userType(String)
2019-04-06 12:27:07 -请求地址 : http://localhost:8081/moneyLog/elecLog/list
2019-04-06 12:27:07 -HTTP METHOD : GET
2019-04-06 12:27:07 -CLASS_METHOD : com.bootdo.moneyLog.controller.ElecLogController.list
2019-04-06 12:27:07 -参数 : [{limit=10, offset=0, userType=, userOrg=, userId=, elecDate=}]
2019-04-06 12:27:07 -<==      Total: 2
2019-04-06 12:27:07 -耗时 : 6
2019-04-06 12:27:07 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-06 12:27:07 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`elec_type`,`elec_money`,`elec_date`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec_log order by id asc limit ?, ? 
2019-04-06 12:27:07 -==> Parameters: 0(Integer), 10(Integer)
2019-04-06 12:27:07 -<==      Total: 7
2019-04-06 12:27:07 -==>  Preparing: select count(*) from elec_log 
2019-04-06 12:27:07 -==> Parameters: 
2019-04-06 12:27:07 -<==      Total: 1
2019-04-06 12:27:07 -耗时 : 22
2019-04-06 12:27:07 -返回值 : com.bootdo.common.utils.PageUtils@682ae648
2019-04-06 12:27:09 -请求地址 : http://localhost:8081/moneyLog/waterLog
2019-04-06 12:27:09 -HTTP METHOD : GET
2019-04-06 12:27:09 -CLASS_METHOD : com.bootdo.moneyLog.controller.WaterLogController.WaterLog
2019-04-06 12:27:09 -参数 : []
2019-04-06 12:27:09 -耗时 : 1
2019-04-06 12:27:09 -返回值 : /moneyLog/waterLog/waterLog
2019-04-06 12:27:09 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-06 12:27:09 -HTTP METHOD : GET
2019-04-06 12:27:09 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-06 12:27:09 -参数 : [userType]
2019-04-06 12:27:09 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-06 12:27:09 -==> Parameters: userType(String)
2019-04-06 12:27:09 -<==      Total: 2
2019-04-06 12:27:09 -耗时 : 12
2019-04-06 12:27:09 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-06 12:27:09 -请求地址 : http://localhost:8081/moneyLog/waterLog/list
2019-04-06 12:27:09 -HTTP METHOD : GET
2019-04-06 12:27:09 -CLASS_METHOD : com.bootdo.moneyLog.controller.WaterLogController.list
2019-04-06 12:27:09 -参数 : [{limit=10, offset=0, userType=, userOrg=, userId=, waterDate=}]
2019-04-06 12:27:09 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,`water_type`,`water_money`,`water_date`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from water_log order by id asc limit ?, ? 
2019-04-06 12:27:09 -==> Parameters: 0(Integer), 10(Integer)
2019-04-06 12:27:09 -<==      Total: 5
2019-04-06 12:27:09 -==>  Preparing: select count(*) from water_log 
2019-04-06 12:27:09 -==> Parameters: 
2019-04-06 12:27:09 -<==      Total: 1
2019-04-06 12:27:09 -耗时 : 54
2019-04-06 12:27:09 -返回值 : com.bootdo.common.utils.PageUtils@4945f7cf
2019-04-06 12:27:10 -请求地址 : http://localhost:8081/moneyLog/heatLog
2019-04-06 12:27:10 -HTTP METHOD : GET
2019-04-06 12:27:10 -CLASS_METHOD : com.bootdo.moneyLog.controller.HeatLogController.HeatLog
2019-04-06 12:27:10 -参数 : []
2019-04-06 12:27:10 -耗时 : 1
2019-04-06 12:27:10 -返回值 : /moneyLog/heatLog/heatLog
2019-04-06 12:27:10 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-06 12:27:10 -HTTP METHOD : GET
2019-04-06 12:27:10 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-06 12:27:10 -参数 : [userType]
2019-04-06 12:27:10 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-06 12:27:10 -==> Parameters: userType(String)
2019-04-06 12:27:10 -<==      Total: 2
2019-04-06 12:27:10 -耗时 : 4
2019-04-06 12:27:10 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-06 12:27:10 -请求地址 : http://localhost:8081/moneyLog/heatLog/list
2019-04-06 12:27:10 -HTTP METHOD : GET
2019-04-06 12:27:10 -CLASS_METHOD : com.bootdo.moneyLog.controller.HeatLogController.list
2019-04-06 12:27:10 -参数 : [{limit=10, offset=0, userType=, userOrg=, userId=, heatDate=}]
2019-04-06 12:27:10 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-06 12:27:10 -nested exception is org.apache.ibatis.builder.BuilderException: Error evaluating expression 'updateTime != null and '. Cause: org.apache.ibatis.ognl.ExpressionSyntaxException: Malformed OGNL expression: updateTime != null and  [org.apache.ibatis.ognl.ParseException: Encountered "<EOF>" at line 1, column 23.
Was expecting one of:
    ":" ...
    "not" ...
    "+" ...
    "-" ...
    "~" ...
    "!" ...
    "(" ...
    "true" ...
    "false" ...
    "null" ...
    "#this" ...
    "#root" ...
    "#" ...
    "[" ...
    "{" ...
    "@" ...
    "new" ...
    <IDENT> ...
    <DYNAMIC_SUBSCRIPT> ...
    "\'" ...
    "`" ...
    "\"" ...
    <INT_LITERAL> ...
    <FLT_LITERAL> ...
    ]
org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.builder.BuilderException: Error evaluating expression 'updateTime != null and '. Cause: org.apache.ibatis.ognl.ExpressionSyntaxException: Malformed OGNL expression: updateTime != null and  [org.apache.ibatis.ognl.ParseException: Encountered "<EOF>" at line 1, column 23.
Was expecting one of:
    ":" ...
    "not" ...
    "+" ...
    "-" ...
    "~" ...
    "!" ...
    "(" ...
    "true" ...
    "false" ...
    "null" ...
    "#this" ...
    "#root" ...
    "#" ...
    "[" ...
    "{" ...
    "@" ...
    "new" ...
    <IDENT> ...
    <DYNAMIC_SUBSCRIPT> ...
    "\'" ...
    "`" ...
    "\"" ...
    <INT_LITERAL> ...
    <FLT_LITERAL> ...
    ]
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:79)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:447)
	at com.sun.proxy.$Proxy101.selectList(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:231)
	at org.apache.ibatis.binding.MapperMethod.executeForMany(MapperMethod.java:137)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:75)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy103.list(Unknown Source)
	at com.bootdo.moneyLog.service.impl.HeatLogServiceImpl.list(HeatLogServiceImpl.java:21)
	at com.bootdo.moneyLog.controller.HeatLogController.list(HeatLogController.java:70)
	at com.bootdo.moneyLog.controller.HeatLogController$$FastClassBySpringCGLIB$$930b0464.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:204)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:746)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.bootdo.common.aspect.WebLogAspect.doAround(WebLogAspect.java:57)
	at sun.reflect.GeneratedMethodAccessor125.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.apache.shiro.spring.security.interceptor.AopAllianceAnnotationsAuthorizingMethodInterceptor$1.proceed(AopAllianceAnnotationsAuthorizingMethodInterceptor.java:82)
	at org.apache.shiro.authz.aop.AuthorizingMethodInterceptor.invoke(AuthorizingMethodInterceptor.java:39)
	at org.apache.shiro.spring.security.interceptor.AopAllianceAnnotationsAuthorizingMethodInterceptor.invoke(AopAllianceAnnotationsAuthorizingMethodInterceptor.java:115)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.bootdo.moneyLog.controller.HeatLogController$$EnhancerBySpringCGLIB$$791a22cc.list(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:209)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:877)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:783)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:991)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:925)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:974)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:866)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:635)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:851)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:61)
	at org.apache.shiro.web.servlet.AdviceFilter.executeChain(AdviceFilter.java:108)
	at org.apache.shiro.web.servlet.AdviceFilter.doFilterInternal(AdviceFilter.java:137)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:66)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)
	at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)
	at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)
	at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)
	at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:383)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:109)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:496)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:790)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1468)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Unknown Source)
Caused by: org.apache.ibatis.builder.BuilderException: Error evaluating expression 'updateTime != null and '. Cause: org.apache.ibatis.ognl.ExpressionSyntaxException: Malformed OGNL expression: updateTime != null and  [org.apache.ibatis.ognl.ParseException: Encountered "<EOF>" at line 1, column 23.
Was expecting one of:
    ":" ...
    "not" ...
    "+" ...
    "-" ...
    "~" ...
    "!" ...
    "(" ...
    "true" ...
    "false" ...
    "null" ...
    "#this" ...
    "#root" ...
    "#" ...
    "[" ...
    "{" ...
    "@" ...
    "new" ...
    <IDENT> ...
    <DYNAMIC_SUBSCRIPT> ...
    "\'" ...
    "`" ...
    "\"" ...
    <INT_LITERAL> ...
    <FLT_LITERAL> ...
    ]
	at org.apache.ibatis.scripting.xmltags.OgnlCache.getValue(OgnlCache.java:46)
	at org.apache.ibatis.scripting.xmltags.ExpressionEvaluator.evaluateBoolean(ExpressionEvaluator.java:32)
	at org.apache.ibatis.scripting.xmltags.IfSqlNode.apply(IfSqlNode.java:34)
	at org.apache.ibatis.scripting.xmltags.MixedSqlNode.apply(MixedSqlNode.java:33)
	at org.apache.ibatis.scripting.xmltags.TrimSqlNode.apply(TrimSqlNode.java:55)
	at org.apache.ibatis.scripting.xmltags.MixedSqlNode.apply(MixedSqlNode.java:33)
	at org.apache.ibatis.scripting.xmltags.DynamicSqlSource.getBoundSql(DynamicSqlSource.java:41)
	at org.apache.ibatis.mapping.MappedStatement.getBoundSql(MappedStatement.java:292)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:81)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:148)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:141)
	at sun.reflect.GeneratedMethodAccessor139.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:434)
	... 104 common frames omitted
Caused by: org.apache.ibatis.ognl.ExpressionSyntaxException: Malformed OGNL expression: updateTime != null and 
	at org.apache.ibatis.ognl.Ognl.parseExpression(Ognl.java:112)
	at org.apache.ibatis.scripting.xmltags.OgnlCache.parseExpression(OgnlCache.java:53)
	at org.apache.ibatis.scripting.xmltags.OgnlCache.getValue(OgnlCache.java:44)
	... 118 common frames omitted
Caused by: org.apache.ibatis.ognl.ParseException: Encountered "<EOF>" at line 1, column 23.
Was expecting one of:
    ":" ...
    "not" ...
    "+" ...
    "-" ...
    "~" ...
    "!" ...
    "(" ...
    "true" ...
    "false" ...
    "null" ...
    "#this" ...
    "#root" ...
    "#" ...
    "[" ...
    "{" ...
    "@" ...
    "new" ...
    <IDENT> ...
    <DYNAMIC_SUBSCRIPT> ...
    "\'" ...
    "`" ...
    "\"" ...
    <INT_LITERAL> ...
    <FLT_LITERAL> ...
    
	at org.apache.ibatis.ognl.OgnlParser.generateParseException(OgnlParser.java:3172)
	at org.apache.ibatis.ognl.OgnlParser.jj_consume_token(OgnlParser.java:3051)
	at org.apache.ibatis.ognl.OgnlParser.unaryExpression(OgnlParser.java:1236)
	at org.apache.ibatis.ognl.OgnlParser.multiplicativeExpression(OgnlParser.java:971)
	at org.apache.ibatis.ognl.OgnlParser.additiveExpression(OgnlParser.java:894)
	at org.apache.ibatis.ognl.OgnlParser.shiftExpression(OgnlParser.java:750)
	at org.apache.ibatis.ognl.OgnlParser.relationalExpression(OgnlParser.java:508)
	at org.apache.ibatis.ognl.OgnlParser.equalityExpression(OgnlParser.java:405)
	at org.apache.ibatis.ognl.OgnlParser.andExpression(OgnlParser.java:352)
	at org.apache.ibatis.ognl.OgnlParser.exclusiveOrExpression(OgnlParser.java:299)
	at org.apache.ibatis.ognl.OgnlParser.inclusiveOrExpression(OgnlParser.java:246)
	at org.apache.ibatis.ognl.OgnlParser.logicalAndExpression(OgnlParser.java:221)
	at org.apache.ibatis.ognl.OgnlParser.logicalOrExpression(OgnlParser.java:140)
	at org.apache.ibatis.ognl.OgnlParser.conditionalTestExpression(OgnlParser.java:101)
	at org.apache.ibatis.ognl.OgnlParser.assignmentExpression(OgnlParser.java:64)
	at org.apache.ibatis.ognl.OgnlParser.expression(OgnlParser.java:23)
	at org.apache.ibatis.ognl.OgnlParser.topLevelExpression(OgnlParser.java:15)
	at org.apache.ibatis.ognl.Ognl.parseExpression(Ognl.java:110)
	... 120 common frames omitted
2019-04-06 12:27:10 -==> Parameters: 1(Long), admin(String), error(String), null, http://localhost:8081/moneyLog/heatLog/list(String), org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.builder.BuilderException: Error evaluating expression 'updateTime != null and '. Cause: org.apache.ibatis.ognl.ExpressionSyntaxException: Malformed OGNL expression: updateTime != null and  [org.apache.ibatis.ognl.ParseException: Encountered "<EOF>" at line 1, column 23.
Was expecting one of:
    ":" ...
    "not" ...
    "+" ...
    "-" ...
    "~" ...
    "!" ...
    "(" ...
    "true" ...
    "false" ...
    "null" ...
    "#this" ...
    "#root" ...
    "#" ...
    "[" ...
    "{" ...
    "@" ...
    "new" ...
    <IDENT> ...
    <DYNAMIC_SUBSCRIPT> ...
    "\'" ...
    "`" ...
    "\"" ...
    <INT_LITERAL> ...
    <FLT_LITERAL> ...
    ](String), null, 2019-04-06 12:27:10.337(Timestamp)
2019-04-06 12:27:10 -<==    Updates: 1
2019-04-06 12:27:10 -请求地址 : http://localhost:8081/moneyLog/elecLog
2019-04-06 12:27:10 -HTTP METHOD : GET
2019-04-06 12:27:10 -CLASS_METHOD : com.bootdo.moneyLog.controller.ElecLogController.moneyLog
2019-04-06 12:27:10 -参数 : []
2019-04-06 12:27:10 -耗时 : 0
2019-04-06 12:27:10 -返回值 : /moneyLog/elecLog/elecLog
2019-04-06 12:27:11 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-06 12:27:11 -HTTP METHOD : GET
2019-04-06 12:27:11 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-06 12:27:11 -参数 : [userType]
2019-04-06 12:27:11 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-06 12:27:11 -==> Parameters: userType(String)
2019-04-06 12:27:11 -<==      Total: 2
2019-04-06 12:27:11 -耗时 : 6
2019-04-06 12:27:11 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-06 12:27:11 -请求地址 : http://localhost:8081/moneyLog/elecLog/list
2019-04-06 12:27:11 -HTTP METHOD : GET
2019-04-06 12:27:11 -CLASS_METHOD : com.bootdo.moneyLog.controller.ElecLogController.list
2019-04-06 12:27:11 -参数 : [{limit=10, offset=0, userType=, userOrg=, userId=, elecDate=}]
2019-04-06 12:27:11 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`elec_type`,`elec_money`,`elec_date`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec_log order by id asc limit ?, ? 
2019-04-06 12:27:11 -==> Parameters: 0(Integer), 10(Integer)
2019-04-06 12:27:11 -<==      Total: 7
2019-04-06 12:27:11 -==>  Preparing: select count(*) from elec_log 
2019-04-06 12:27:11 -==> Parameters: 
2019-04-06 12:27:11 -<==      Total: 1
2019-04-06 12:27:11 -耗时 : 20
2019-04-06 12:27:11 -返回值 : com.bootdo.common.utils.PageUtils@3979623c
2019-04-06 12:27:11 -请求地址 : http://localhost:8081/moneyLog/waterLog
2019-04-06 12:27:11 -HTTP METHOD : GET
2019-04-06 12:27:11 -CLASS_METHOD : com.bootdo.moneyLog.controller.WaterLogController.WaterLog
2019-04-06 12:27:11 -参数 : []
2019-04-06 12:27:11 -耗时 : 1
2019-04-06 12:27:11 -返回值 : /moneyLog/waterLog/waterLog
2019-04-06 12:27:11 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-06 12:27:11 -HTTP METHOD : GET
2019-04-06 12:27:11 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-06 12:27:11 -参数 : [userType]
2019-04-06 12:27:11 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-06 12:27:11 -==> Parameters: userType(String)
2019-04-06 12:27:11 -<==      Total: 2
2019-04-06 12:27:11 -耗时 : 7
2019-04-06 12:27:11 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-06 12:27:11 -请求地址 : http://localhost:8081/moneyLog/waterLog/list
2019-04-06 12:27:11 -HTTP METHOD : GET
2019-04-06 12:27:11 -CLASS_METHOD : com.bootdo.moneyLog.controller.WaterLogController.list
2019-04-06 12:27:11 -参数 : [{limit=10, offset=0, userType=, userOrg=, userId=, waterDate=}]
2019-04-06 12:27:11 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,`water_type`,`water_money`,`water_date`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from water_log order by id asc limit ?, ? 
2019-04-06 12:27:11 -==> Parameters: 0(Integer), 10(Integer)
2019-04-06 12:27:11 -<==      Total: 5
2019-04-06 12:27:11 -==>  Preparing: select count(*) from water_log 
2019-04-06 12:27:11 -==> Parameters: 
2019-04-06 12:27:11 -<==      Total: 1
2019-04-06 12:27:11 -耗时 : 10
2019-04-06 12:27:11 -返回值 : com.bootdo.common.utils.PageUtils@2c1849ea
2019-04-06 12:33:14 -Starting BootdoApplication on ZJZL-20180906VX with PID 2856 (D:\eclipse2018-work\bootdo\target\classes started by Administrator in D:\eclipse2018-work\bootdo)
2019-04-06 12:33:14 -Running with Spring Boot v2.0.3.RELEASE, Spring v5.0.7.RELEASE
2019-04-06 12:33:14 -The following profiles are active: dev
2019-04-06 12:33:14 -Refreshing org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@a38c7fe: startup date [Sat Apr 06 12:33:14 CST 2019]; root of context hierarchy
2019-04-06 12:33:18 -Multiple Spring Data modules found, entering strict repository configuration mode!
2019-04-06 12:33:21 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$a3e53bcf] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-06 12:33:21 -Bean 'shiroConfig' of type [com.bootdo.system.config.ShiroConfig$$EnhancerBySpringCGLIB$$963e6a76] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-06 12:33:22 -Bean 'userRealm' of type [com.bootdo.system.shiro.UserRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-06 12:33:22 -Bean 'cacheManager2' of type [net.sf.ehcache.CacheManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-06 12:33:22 -Bean 'ehCacheManager' of type [org.apache.shiro.cache.ehcache.EhCacheManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-06 12:33:22 -Cache with name 'com.bootdo.system.shiro.UserRealm.authorizationCache' does not yet exist.  Creating now.
2019-04-06 12:33:22 -Added EhCache named [com.bootdo.system.shiro.UserRealm.authorizationCache]
2019-04-06 12:33:22 -Bean 'sessionDAO' of type [org.apache.shiro.session.mgt.eis.MemorySessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-06 12:33:22 -Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-06 12:33:22 -Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-06 12:33:22 -Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-06 12:33:24 -Tomcat initialized with port(s): 8081 (http)
2019-04-06 12:33:24 -Initializing ProtocolHandler ["http-nio-8081"]
2019-04-06 12:33:24 -Starting service [Tomcat]
2019-04-06 12:33:24 -Starting Servlet Engine: Apache Tomcat/8.5.31
2019-04-06 12:33:24 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [C:\Program Files\Java\jre1.8.0_131\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:/Program Files/Java/jre1.8.0_131/bin/server;C:/Program Files/Java/jre1.8.0_131/bin;C:/Program Files/Java/jre1.8.0_131/lib/amd64;C:\ProgramData\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Windows\System32\OpenSSH\;D:\pbb\pycSafefile\x64;D:\pbb\PBB Reader\x64;C:\Program Files\MySQL\MySQL Utilities 1.6\;D:\MAVEN\apache-maven-3.6.0\bin;D:\GIT\Git\cmd;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;;C:\Users\Administrator\Desktop;;.]
2019-04-06 12:33:24 -Initializing Spring embedded WebApplicationContext
2019-04-06 12:33:24 -Root WebApplicationContext: initialization completed in 9722 ms
2019-04-06 12:33:25 -Mapping filter: 'characterEncodingFilter' to: [/*]
2019-04-06 12:33:25 -Mapping filter: 'hiddenHttpMethodFilter' to: [/*]
2019-04-06 12:33:25 -Mapping filter: 'httpPutFormContentFilter' to: [/*]
2019-04-06 12:33:25 -Mapping filter: 'requestContextFilter' to: [/*]
2019-04-06 12:33:25 -Filter xssFilter was not registered (disabled)
2019-04-06 12:33:25 -Mapping filter: 'webStatFilter' to urls: [/*]
2019-04-06 12:33:25 -Mapping filter: 'shiroFilterFactoryBean' to: [/*]
2019-04-06 12:33:25 -Servlet statViewServlet mapped to [/druid/*]
2019-04-06 12:33:25 -Servlet dispatcherServlet mapped to [/]
2019-04-06 12:33:28 -ApplicationContext registed-->org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@a38c7fe: startup date [Sat Apr 06 12:33:14 CST 2019]; root of context hierarchy
2019-04-06 12:33:28 -Using default implementation for ThreadExecutor
2019-04-06 12:33:28 -Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2019-04-06 12:33:28 -Quartz Scheduler v.2.2.1 created.
2019-04-06 12:33:28 -RAMJobStore initialized.
2019-04-06 12:33:28 -Scheduler meta-data: Quartz Scheduler (v2.2.1) 'schedulerFactoryBean' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2019-04-06 12:33:28 -Quartz scheduler 'schedulerFactoryBean' initialized from an externally provided properties instance.
2019-04-06 12:33:28 -Quartz scheduler version: 2.2.1
2019-04-06 12:33:28 -JobFactory set to: com.bootdo.common.quartz.factory.JobFactory@1d2d8846
2019-04-06 12:33:29 -Initializing ExecutorService  'clientInboundChannelExecutor'
2019-04-06 12:33:29 -Initializing ExecutorService  'clientOutboundChannelExecutor'
2019-04-06 12:33:32 -Mapped "{[/charts/countDD],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.countDDController.countDD()
2019-04-06 12:33:32 -Mapped "{[/charts/countDD/getCountDD],methods=[POST]}" onto public com.bootdo.charts.vo.CountDayVo com.bootdo.charts.controller.countDDController.getCountD(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo,javax.servlet.http.HttpServletRequest)
2019-04-06 12:33:32 -Mapped "{[/charts/countDD/tableDD],methods=[POST]}" onto public java.lang.String com.bootdo.charts.controller.countDDController.tableDD()
2019-04-06 12:33:32 -Mapped "{[/charts/countDD/exportCountDD],methods=[GET]}" onto public void com.bootdo.charts.controller.countDDController.exprotElecLog(com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-06 12:33:32 -Mapped "{[/charts/countMM/getCountMM],methods=[POST]}" onto public void com.bootdo.charts.controller.countMMController.getCountMM(org.springframework.ui.Model,com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo,javax.servlet.http.HttpServletRequest)
2019-04-06 12:33:32 -Mapped "{[/charts/countMM],methods=[GET]}" onto java.lang.String com.bootdo.charts.controller.countMMController.countMM()
2019-04-06 12:33:32 -Mapped "{[/charts/countMM/exportCountMM],methods=[GET]}" onto public void com.bootdo.charts.controller.countMMController.exprotElecLog(com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-06 12:33:32 -Mapped "{[/charts/countOwe/getCountOwe],methods=[POST]}" onto public com.bootdo.charts.vo.CountOweVo com.bootdo.charts.controller.countOweController.getCountD(com.bootdo.elec.vo.ElecVo,com.bootdo.water.vo.WaterVo,com.bootdo.heat.vo.HeatVo,javax.servlet.http.HttpServletRequest)
2019-04-06 12:33:32 -Mapped "{[/charts/countOwe],methods=[GET]}" onto java.lang.String com.bootdo.charts.controller.countOweController.countOwe()
2019-04-06 12:33:32 -Mapped "{[/charts/countRun/getCountRun],methods=[POST]}" onto public int com.bootdo.charts.controller.countRunController.getCountD(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo)
2019-04-06 12:33:32 -Mapped "{[/charts/countRun/exportCountRun],methods=[GET]}" onto public void com.bootdo.charts.controller.countRunController.exprotElecLog(com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-06 12:33:32 -Mapped "{[/charts/countRun],methods=[GET]}" onto java.lang.String com.bootdo.charts.controller.countRunController.countRun()
2019-04-06 12:33:32 -Mapped "{[/charts/countYY/getCountYY],methods=[POST]}" onto public int com.bootdo.charts.controller.countYYController.getCountD(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo)
2019-04-06 12:33:32 -Mapped "{[/charts/countYY/exportCountYY],methods=[GET]}" onto public void com.bootdo.charts.controller.countYYController.exprotElecLog(com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-06 12:33:32 -Mapped "{[/charts/countYY],methods=[GET]}" onto java.lang.String com.bootdo.charts.controller.countYYController.countYY()
2019-04-06 12:33:32 -Mapped "{[/common/dict/add],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.add()
2019-04-06 12:33:32 -Mapped "{[/common/dict/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.remove(java.lang.Long)
2019-04-06 12:33:32 -Mapped "{[/common/dict/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.remove(java.lang.Long[])
2019-04-06 12:33:32 -Mapped "{[/common/dict/update]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.update(com.bootdo.common.domain.DictDO)
2019-04-06 12:33:32 -Mapped "{[/common/dict/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.common.controller.DictController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-06 12:33:32 -Mapped "{[/common/dict/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.save(com.bootdo.common.domain.DictDO)
2019-04-06 12:33:32 -Mapped "{[/common/dict/type],methods=[GET]}" onto public java.util.List<com.bootdo.common.domain.DictDO> com.bootdo.common.controller.DictController.listType()
2019-04-06 12:33:32 -Mapped "{[/common/dict],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.dict()
2019-04-06 12:33:32 -Mapped "{[/common/dict/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-06 12:33:32 -Mapped "{[/common/dict/list/{type}],methods=[GET]}" onto public java.util.List<com.bootdo.common.domain.DictDO> com.bootdo.common.controller.DictController.listByType(java.lang.String)
2019-04-06 12:33:32 -Mapped "{[/common/dict/add/{type}/{description}],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.addD(org.springframework.ui.Model,java.lang.String,java.lang.String)
2019-04-06 12:33:32 -Mapped "{[/common/sysFile/add],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.FileController.add()
2019-04-06 12:33:32 -Mapped "{[/common/sysFile/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.remove(java.lang.Long,javax.servlet.http.HttpServletRequest)
2019-04-06 12:33:32 -Mapped "{[/common/sysFile/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.remove(java.lang.Long[])
2019-04-06 12:33:32 -Mapped "{[/common/sysFile/update]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.update(com.bootdo.common.domain.FileDO)
2019-04-06 12:33:32 -Mapped "{[/common/sysFile/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.common.controller.FileController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-06 12:33:32 -Mapped "{[/common/sysFile/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.save(com.bootdo.common.domain.FileDO)
2019-04-06 12:33:32 -Mapped "{[/common/sysFile/info/{id}]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.info(java.lang.Long)
2019-04-06 12:33:32 -Mapped "{[/common/sysFile/edit],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.FileController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-06 12:33:32 -Mapped "{[/common/sysFile],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.FileController.sysFile(org.springframework.ui.Model)
2019-04-06 12:33:32 -Mapped "{[/common/sysFile/upload],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.FileController.upload(org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpServletRequest)
2019-04-06 12:33:32 -Mapped "{[/common/generator/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.GeneratorController.update(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-06 12:33:32 -Mapped "{[/common/generator/list],methods=[GET]}" onto java.util.List<java.util.Map<java.lang.String, java.lang.Object>> com.bootdo.common.controller.GeneratorController.list()
2019-04-06 12:33:32 -Mapped "{[/common/generator/code/{tableName}]}" onto public void com.bootdo.common.controller.GeneratorController.code(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String) throws java.io.IOException
2019-04-06 12:33:32 -Mapped "{[/common/generator],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.GeneratorController.generator()
2019-04-06 12:33:32 -Mapped "{[/common/generator/edit],methods=[GET]}" onto public java.lang.String com.bootdo.common.controller.GeneratorController.edit(org.springframework.ui.Model)
2019-04-06 12:33:32 -Mapped "{[/common/generator/batchCode]}" onto public void com.bootdo.common.controller.GeneratorController.batchCode(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String) throws java.io.IOException
2019-04-06 12:33:32 -Mapped "{[/common/job/add],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.JobController.add()
2019-04-06 12:33:32 -Mapped "{[/common/job/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.remove(java.lang.Long)
2019-04-06 12:33:32 -Mapped "{[/common/job/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.remove(java.lang.Long[])
2019-04-06 12:33:32 -Mapped "{[/common/job/update],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.update(com.bootdo.common.domain.TaskDO)
2019-04-06 12:33:32 -Mapped "{[/common/job/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.common.controller.JobController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-06 12:33:32 -Mapped "{[/common/job/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.save(com.bootdo.common.domain.TaskDO)
2019-04-06 12:33:32 -Mapped "{[/common/job/info/{id}]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.info(java.lang.Long)
2019-04-06 12:33:32 -Mapped "{[/common/job/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.JobController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-06 12:33:32 -Mapped "{[/common/job/changeJobStatus],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.changeJobStatus(java.lang.Long,java.lang.String)
2019-04-06 12:33:32 -Mapped "{[/common/job],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.JobController.taskScheduleJob()
2019-04-06 12:33:32 -Mapped "{[/common/log/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.LogController.remove(java.lang.Long)
2019-04-06 12:33:32 -Mapped "{[/common/log],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.LogController.log()
2019-04-06 12:33:32 -Mapped "{[/common/log/list],methods=[GET]}" onto com.bootdo.common.domain.PageDO<com.bootdo.common.domain.LogDO> com.bootdo.common.controller.LogController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-06 12:33:32 -Mapped "{[/common/log/batchRemove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.LogController.batchRemove(java.lang.Long[])
2019-04-06 12:33:32 -Mapped "{[/common/long],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.LongController.Long()
2019-04-06 12:33:32 -Mapped "{[/common/time],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.TimeController.Time()
2019-04-06 12:33:32 -Mapped "{[/error]}" onto public com.bootdo.common.utils.R com.bootdo.common.exception.MainsiteErrorController.handleError(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-04-06 12:33:32 -Mapped "{[/error],produces=[text/html]}" onto public org.springframework.web.servlet.ModelAndView com.bootdo.common.exception.MainsiteErrorController.errorHtml(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-04-06 12:33:32 -Mapped "{[/elec/elec/add],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecController.add()
2019-04-06 12:33:32 -Mapped "{[/elec/elec/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.remove(java.lang.Long)
2019-04-06 12:33:32 -Mapped "{[/elec/elec/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.remove(java.lang.Long[])
2019-04-06 12:33:32 -Mapped "{[/elec/elec/update],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.update(com.bootdo.elec.domain.ElecDO)
2019-04-06 12:33:32 -Mapped "{[/elec/elec/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.elec.controller.ElecController.list(java.util.Map<java.lang.String, java.lang.Object>,com.bootdo.elec.domain.ElecDO)
2019-04-06 12:33:32 -Mapped "{[/elec/elec/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.save(com.bootdo.elec.domain.ElecDO)
2019-04-06 12:33:32 -Mapped "{[/elec/elec/exprotElec],methods=[GET]}" onto public void com.bootdo.elec.controller.ElecController.exprotExcel(com.bootdo.elec.vo.ElecVo,javax.servlet.http.HttpServletResponse)
2019-04-06 12:33:32 -Mapped "{[/elec/elec],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecController.Elec()
2019-04-06 12:33:32 -Mapped "{[/elec/elec/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-06 12:33:32 -Mapped "{[/elec/elecInto/importElecIntoExcel],methods=[POST]}" onto public java.util.Map<java.lang.String, java.lang.Object> com.bootdo.elec.controller.ElecIntoController.importElecIntoExcel(org.springframework.web.multipart.MultipartFile,com.bootdo.elec.vo.ElecVo) throws java.lang.Exception
2019-04-06 12:33:32 -Mapped "{[/elec/elecInto/exprotElecIntoExcel],methods=[GET]}" onto public void com.bootdo.elec.controller.ElecIntoController.exprotExcel(com.bootdo.elec.vo.ElecVo,javax.servlet.http.HttpServletResponse)
2019-04-06 12:33:32 -Mapped "{[/elec/elecInto],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecIntoController.ElecInto()
2019-04-06 12:33:32 -Mapped "{[/elec/elecPrice/add],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecPriceController.add()
2019-04-06 12:33:32 -Mapped "{[/elec/elecPrice/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecPriceController.remove(java.lang.Long)
2019-04-06 12:33:32 -Mapped "{[/elec/elecPrice/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecPriceController.remove(java.lang.Long[])
2019-04-06 12:33:32 -Mapped "{[/elec/elecPrice/update]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecPriceController.update(com.bootdo.elec.domain.ElecPriceDO)
2019-04-06 12:33:32 -Mapped "{[/elec/elecPrice/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.elec.controller.ElecPriceController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-06 12:33:32 -Mapped "{[/elec/elecPrice/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecPriceController.save(com.bootdo.elec.domain.ElecPriceDO,com.bootdo.elec.domain.ElecDO)
2019-04-06 12:33:32 -Mapped "{[/elec/elecPrice],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecPriceController.ElecPrice()
2019-04-06 12:33:32 -Mapped "{[/elec/elecPrice/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecPriceController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-06 12:33:32 -Mapped "{[/elec/elecUpLoad/importElecExcel],methods=[POST]}" onto public java.util.Map<java.lang.String, java.lang.Object> com.bootdo.elec.controller.ElecUpLoadController.importElecExcel(org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpServletRequest) throws java.lang.Exception
2019-04-06 12:33:32 -Mapped "{[/elec/elecUpLoad],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecUpLoadController.Elec()
2019-04-06 12:33:32 -Mapped "{[/heat/heat/add],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatController.add()
2019-04-06 12:33:32 -Mapped "{[/heat/heat/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatController.remove(java.lang.Integer)
2019-04-06 12:33:32 -Mapped "{[/heat/heat/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatController.remove(java.lang.Integer[])
2019-04-06 12:33:32 -Mapped "{[/heat/heat/update]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatController.update(com.bootdo.heat.domain.HeatDO)
2019-04-06 12:33:32 -Mapped "{[/heat/heat/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.heat.controller.HeatController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-06 12:33:32 -Mapped "{[/heat/heat/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatController.save(com.bootdo.heat.domain.HeatDO)
2019-04-06 12:33:32 -Mapped "{[/heat/heat],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatController.Heat()
2019-04-06 12:33:32 -Mapped "{[/heat/heat/exprotHeat],methods=[GET]}" onto public void com.bootdo.heat.controller.HeatController.exprotExcel(com.bootdo.heat.vo.HeatVo,javax.servlet.http.HttpServletResponse)
2019-04-06 12:33:32 -Mapped "{[/heat/heat/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatController.edit(java.lang.Integer,org.springframework.ui.Model)
2019-04-06 12:33:32 -Mapped "{[/heat/heatInto],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatIntoController.HeatInto()
2019-04-06 12:33:32 -Mapped "{[/heat/heatInto/exprotHeatIntoExcel],methods=[GET]}" onto public void com.bootdo.heat.controller.HeatIntoController.exprotExcel(com.bootdo.heat.vo.HeatVo,javax.servlet.http.HttpServletResponse)
2019-04-06 12:33:32 -Mapped "{[/heat/heatPrice/add],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatPriceController.add()
2019-04-06 12:33:32 -Mapped "{[/heat/heatPrice/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatPriceController.remove(java.lang.Long)
2019-04-06 12:33:32 -Mapped "{[/heat/heatPrice/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatPriceController.remove(java.lang.Long[])
2019-04-06 12:33:32 -Mapped "{[/heat/heatPrice/update]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatPriceController.update(com.bootdo.heat.domain.HeatPriceDO)
2019-04-06 12:33:32 -Mapped "{[/heat/heatPrice/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.heat.controller.HeatPriceController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-06 12:33:32 -Mapped "{[/heat/heatPrice/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatPriceController.save(com.bootdo.heat.domain.HeatPriceDO)
2019-04-06 12:33:32 -Mapped "{[/heat/heatPrice],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatPriceController.HeatPrice()
2019-04-06 12:33:32 -Mapped "{[/heat/heatPrice/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatPriceController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-06 12:33:32 -Mapped "{[/heat/heatUpLoad/importHeatExcel]}" onto public java.lang.String com.bootdo.heat.controller.HeatUpLoadController.importHeatExcel(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)
2019-04-06 12:33:32 -Mapped "{[/heat/heatUpLoad/createHeatExcel],methods=[POST]}" onto public java.lang.String com.bootdo.heat.controller.HeatUpLoadController.createHeatExcel(com.bootdo.heat.domain.HeatDO) throws java.lang.Exception
2019-04-06 12:33:32 -Mapped "{[/heat/heatUpLoad],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatUpLoadController.HeatUpLoad()
2019-04-06 12:33:32 -Mapped "{[/heat/heatUpLoad/exprotHeatExcel],methods=[GET]}" onto public void com.bootdo.heat.controller.HeatUpLoadController.exprotHeatExcel(com.bootdo.heat.vo.HeatVo,javax.servlet.http.HttpServletResponse)
2019-04-06 12:33:32 -Mapped "{[/moneyList/moneyList],methods=[GET]}" onto java.lang.String com.bootdo.moneyList.controller.MoneyListController.MoneyList()
2019-04-06 12:33:32 -Mapped "{[/moneyList/moneyList/updateMoney],methods=[POST]}" onto public java.util.List<com.bootdo.moneyList.damain.MoneyListDO> com.bootdo.moneyList.controller.MoneyListController.updateMoney(com.bootdo.moneyList.damain.MoneyListDO)
2019-04-06 12:33:32 -Mapped "{[/moneyList/moneyList/queryAllUser],methods=[POST]}" onto public java.util.List<com.bootdo.moneyList.damain.MoneyListDO> com.bootdo.moneyList.controller.MoneyListController.queryAllUser(com.bootdo.moneyList.damain.MoneyListDO)
2019-04-06 12:33:32 -Mapped "{[/moneyList/moneyList/queryAllUserName],methods=[POST]}" onto public java.util.List<com.bootdo.moneyList.damain.MoneyListDO> com.bootdo.moneyList.controller.MoneyListController.getAllUserName(com.bootdo.moneyList.damain.MoneyListDO)
2019-04-06 12:33:32 -Mapped "{[/moneyLog/elecLog/add],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.ElecLogController.add()
2019-04-06 12:33:32 -Mapped "{[/moneyLog/elecLog/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.ElecLogController.remove(java.lang.Long)
2019-04-06 12:33:32 -Mapped "{[/moneyLog/elecLog/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.ElecLogController.remove(java.lang.Long[])
2019-04-06 12:33:32 -Mapped "{[/moneyLog/elecLog/update]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.ElecLogController.update(com.bootdo.moneyLog.domain.ElecLogDO)
2019-04-06 12:33:32 -Mapped "{[/moneyLog/elecLog/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.moneyLog.controller.ElecLogController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-06 12:33:32 -Mapped "{[/moneyLog/elecLog/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.ElecLogController.save(com.bootdo.moneyLog.domain.ElecLogDO)
2019-04-06 12:33:32 -Mapped "{[/moneyLog/elecLog],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.ElecLogController.moneyLog()
2019-04-06 12:33:32 -Mapped "{[/moneyLog/elecLog/exprotElecLog],methods=[GET]}" onto public void com.bootdo.moneyLog.controller.ElecLogController.exprotElecLog(com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-06 12:33:32 -Mapped "{[/moneyLog/elecLog/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.ElecLogController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-06 12:33:32 -Mapped "{[/moneyLog/heatLog/add],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.HeatLogController.add()
2019-04-06 12:33:32 -Mapped "{[/moneyLog/heatLog/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.HeatLogController.remove(java.lang.Long)
2019-04-06 12:33:32 -Mapped "{[/moneyLog/heatLog/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.HeatLogController.remove(java.lang.Long[])
2019-04-06 12:33:32 -Mapped "{[/moneyLog/heatLog/update]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.HeatLogController.update(com.bootdo.moneyLog.domain.HeatLogDO)
2019-04-06 12:33:32 -Mapped "{[/moneyLog/heatLog/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.moneyLog.controller.HeatLogController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-06 12:33:32 -Mapped "{[/moneyLog/heatLog/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.HeatLogController.save(com.bootdo.moneyLog.domain.HeatLogDO)
2019-04-06 12:33:32 -Mapped "{[/moneyLog/heatLog/exprotHeatLog],methods=[GET]}" onto public void com.bootdo.moneyLog.controller.HeatLogController.exprotHeatLog(com.bootdo.moneyLog.vo.HeatLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-06 12:33:32 -Mapped "{[/moneyLog/heatLog],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.HeatLogController.HeatLog()
2019-04-06 12:33:32 -Mapped "{[/moneyLog/heatLog/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.HeatLogController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-06 12:33:32 -Mapped "{[/moneyLog/waterLog/add],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.WaterLogController.add()
2019-04-06 12:33:32 -Mapped "{[/moneyLog/waterLog/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.WaterLogController.remove(java.lang.Long)
2019-04-06 12:33:32 -Mapped "{[/moneyLog/waterLog/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.WaterLogController.remove(java.lang.Long[])
2019-04-06 12:33:32 -Mapped "{[/moneyLog/waterLog/update]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.WaterLogController.update(com.bootdo.moneyLog.domain.WaterLogDO)
2019-04-06 12:33:32 -Mapped "{[/moneyLog/waterLog/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.moneyLog.controller.WaterLogController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-06 12:33:32 -Mapped "{[/moneyLog/waterLog/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.WaterLogController.save(com.bootdo.moneyLog.domain.WaterLogDO)
2019-04-06 12:33:32 -Mapped "{[/moneyLog/waterLog/exprotWaterLog],methods=[GET]}" onto public void com.bootdo.moneyLog.controller.WaterLogController.exprotWaterLog(com.bootdo.moneyLog.vo.WaterLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-06 12:33:32 -Mapped "{[/moneyLog/waterLog],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.WaterLogController.WaterLog()
2019-04-06 12:33:32 -Mapped "{[/moneyLog/waterLog/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.WaterLogController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-06 12:33:32 -Mapped "{[/oa/notify/add],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.add()
2019-04-06 12:33:32 -Mapped "{[/oa/notify/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.remove(java.lang.Long)
2019-04-06 12:33:32 -Mapped "{[/oa/notify/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.remove(java.lang.Long[])
2019-04-06 12:33:32 -Mapped "{[/oa/notify/update]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.update(com.bootdo.oa.domain.NotifyDO)
2019-04-06 12:33:32 -Mapped "{[/oa/notify/read/{id}],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.read(java.lang.Long,org.springframework.ui.Model)
2019-04-06 12:33:32 -Mapped "{[/oa/notify/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.oa.controller.NotifyController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-06 12:33:32 -Mapped "{[/oa/notify/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.save(com.bootdo.oa.domain.NotifyDO)
2019-04-06 12:33:32 -Mapped "{[/oa/notify/message],methods=[GET]}" onto com.bootdo.common.utils.PageUtils com.bootdo.oa.controller.NotifyController.message()
2019-04-06 12:33:32 -Mapped "{[/oa/notify],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.oaNotify()
2019-04-06 12:33:32 -Mapped "{[/oa/notify/selfNotify],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.selefNotify()
2019-04-06 12:33:32 -Mapped "{[/oa/notify/selfList],methods=[GET]}" onto com.bootdo.common.utils.PageUtils com.bootdo.oa.controller.NotifyController.selfList(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-06 12:33:32 -Mapped "{[/oa/notify/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-06 12:33:32 -Mapped "{[/print/print/add],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.add()
2019-04-06 12:33:32 -Mapped "{[/print/print/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.print.controller.PrintController.remove(java.lang.Long)
2019-04-06 12:33:32 -Mapped "{[/print/print/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.print.controller.PrintController.remove(java.lang.Long[])
2019-04-06 12:33:32 -Mapped "{[/print/print/update]}" onto public com.bootdo.common.utils.R com.bootdo.print.controller.PrintController.update(com.bootdo.print.domain.PrintDO)
2019-04-06 12:33:32 -Mapped "{[/print/print/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.print.controller.PrintController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-06 12:33:32 -Mapped "{[/print/print/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.print.controller.PrintController.save(java.lang.String,com.bootdo.print.domain.PrintDO)
2019-04-06 12:33:32 -Mapped "{[/print/print/exprotPrint],methods=[GET]}" onto public void com.bootdo.print.controller.PrintController.exprotPrint(com.bootdo.print.vo.PrintVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-06 12:33:32 -Mapped "{[/print/print/printEdit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.printEdit(java.lang.Long,org.springframework.ui.Model)
2019-04-06 12:33:32 -Mapped "{[/print/print],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.Print()
2019-04-06 12:33:32 -Mapped "{[/print/print/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-06 12:33:32 -Mapped "{[/system/sysDept/add/{pId}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.add(java.lang.Long,org.springframework.ui.Model)
2019-04-06 12:33:32 -Mapped "{[/system/sysDept/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.remove(java.lang.Long)
2019-04-06 12:33:32 -Mapped "{[/system/sysDept/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.remove(java.lang.Long[])
2019-04-06 12:33:32 -Mapped "{[/system/sysDept/update]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.update(com.bootdo.system.domain.DeptDO)
2019-04-06 12:33:32 -Mapped "{[/system/sysDept/list],methods=[GET]}" onto public java.util.List<com.bootdo.system.domain.DeptDO> com.bootdo.system.controller.DeptController.list()
2019-04-06 12:33:32 -Mapped "{[/system/sysDept/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.save(com.bootdo.system.domain.DeptDO)
2019-04-06 12:33:32 -Mapped "{[/system/sysDept/tree],methods=[GET]}" onto public com.bootdo.common.domain.Tree<com.bootdo.system.domain.DeptDO> com.bootdo.system.controller.DeptController.tree()
2019-04-06 12:33:32 -Mapped "{[/system/sysDept],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.dept()
2019-04-06 12:33:32 -Mapped "{[/system/sysDept/treeView],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.treeView()
2019-04-06 12:33:32 -Mapped "{[/system/sysDept/edit/{deptId}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-06 12:33:32 -Mapped "{[/index],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.index(org.springframework.ui.Model)
2019-04-06 12:33:32 -Mapped "{[/main],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.main()
2019-04-06 12:33:32 -Mapped "{[/logout],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.logout()
2019-04-06 12:33:32 -Mapped "{[/login],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.LoginController.ajaxLogin(java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest)
2019-04-06 12:33:32 -Mapped "{[/getVerify],methods=[GET]}" onto public void com.bootdo.system.controller.LoginController.getVerify(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-04-06 12:33:32 -Mapped "{[/ || ],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.welcome(org.springframework.ui.Model)
2019-04-06 12:33:32 -Mapped "{[/login],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.login(org.springframework.ui.Model)
2019-04-06 12:33:32 -Mapped "{[/sys/menu/add/{pId}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.MenuController.add(org.springframework.ui.Model,java.lang.Long)
2019-04-06 12:33:32 -Mapped "{[/sys/menu/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.MenuController.remove(java.lang.Long)
2019-04-06 12:33:32 -Mapped "{[/sys/menu/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.MenuController.update(com.bootdo.system.domain.MenuDO)
2019-04-06 12:33:32 -Mapped "{[/sys/menu/list]}" onto java.util.List<com.bootdo.system.domain.MenuDO> com.bootdo.system.controller.MenuController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-06 12:33:32 -Mapped "{[/sys/menu/save],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.MenuController.save(com.bootdo.system.domain.MenuDO)
2019-04-06 12:33:32 -Mapped "{[/sys/menu/tree/{roleId}],methods=[GET]}" onto com.bootdo.common.domain.Tree<com.bootdo.system.domain.MenuDO> com.bootdo.system.controller.MenuController.tree(java.lang.Long)
2019-04-06 12:33:32 -Mapped "{[/sys/menu/tree],methods=[GET]}" onto com.bootdo.common.domain.Tree<com.bootdo.system.domain.MenuDO> com.bootdo.system.controller.MenuController.tree()
2019-04-06 12:33:32 -Mapped "{[/sys/menu],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.MenuController.menu(org.springframework.ui.Model)
2019-04-06 12:33:32 -Mapped "{[/sys/menu/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.MenuController.edit(org.springframework.ui.Model,java.lang.Long)
2019-04-06 12:33:32 -Mapped "{[/sys/role/add],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.RoleController.add()
2019-04-06 12:33:32 -Mapped "{[/sys/role/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.update(com.bootdo.system.domain.RoleDO)
2019-04-06 12:33:32 -Mapped "{[/sys/role/list],methods=[GET]}" onto java.util.List<com.bootdo.system.domain.RoleDO> com.bootdo.system.controller.RoleController.list()
2019-04-06 12:33:32 -Mapped "{[/sys/role/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.save(java.lang.Long)
2019-04-06 12:33:32 -Mapped "{[/sys/role/save],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.save(com.bootdo.system.domain.RoleDO)
2019-04-06 12:33:32 -Mapped "{[/sys/role/batchRemove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.batchRemove(java.lang.Long[])
2019-04-06 12:33:32 -Mapped "{[/sys/role],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.RoleController.role()
2019-04-06 12:33:32 -Mapped "{[/sys/role/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.RoleController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-06 12:33:32 -Mapped "{[/sys/online/list]}" onto public java.util.List<com.bootdo.system.domain.UserOnline> com.bootdo.system.controller.SessionController.list()
2019-04-06 12:33:32 -Mapped "{[/sys/online/sessionList]}" onto public java.util.Collection<org.apache.shiro.session.Session> com.bootdo.system.controller.SessionController.sessionList()
2019-04-06 12:33:32 -Mapped "{[/sys/online],methods=[GET]}" onto public java.lang.String com.bootdo.system.controller.SessionController.online()
2019-04-06 12:33:32 -Mapped "{[/sys/online/forceLogout/{sessionId}]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.SessionController.forceLogout(java.lang.String,org.springframework.web.servlet.mvc.support.RedirectAttributes)
2019-04-06 12:33:32 -Mapped "{[/sys/user/exit],methods=[POST]}" onto boolean com.bootdo.system.controller.UserController.exit(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-06 12:33:32 -Mapped "{[/sys/user/add],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.add(org.springframework.ui.Model)
2019-04-06 12:33:32 -Mapped "{[/sys/user/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.remove(java.lang.Long)
2019-04-06 12:33:32 -Mapped "{[/sys/user/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.update(com.bootdo.system.domain.UserDO)
2019-04-06 12:33:32 -Mapped "{[/sys/user/list],methods=[GET]}" onto com.bootdo.common.utils.PageUtils com.bootdo.system.controller.UserController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-06 12:33:32 -Mapped "{[/sys/user/save],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.save(com.bootdo.system.domain.UserDO)
2019-04-06 12:33:32 -Mapped "{[/sys/user/batchRemove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.batchRemove(java.lang.Long[])
2019-04-06 12:33:32 -Mapped "{[/sys/user/tree],methods=[GET]}" onto public com.bootdo.common.domain.Tree<com.bootdo.system.domain.DeptDO> com.bootdo.system.controller.UserController.tree()
2019-04-06 12:33:32 -Mapped "{[/sys/user/treeView],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.treeView()
2019-04-06 12:33:32 -Mapped "{[/sys/user/resetPwd],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.resetPwd(com.bootdo.system.vo.UserVO)
2019-04-06 12:33:32 -Mapped "{[/sys/user/resetPwd/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.resetPwd(java.lang.Long,org.springframework.ui.Model)
2019-04-06 12:33:32 -Mapped "{[/sys/user/adminResetPwd],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.adminResetPwd(com.bootdo.system.vo.UserVO)
2019-04-06 12:33:32 -Mapped "{[/sys/user/uploadImg],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.uploadImg(org.springframework.web.multipart.MultipartFile,java.lang.String,javax.servlet.http.HttpServletRequest)
2019-04-06 12:33:32 -Mapped "{[/sys/user/personal],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.personal(org.springframework.ui.Model)
2019-04-06 12:33:32 -Mapped "{[/sys/user/updatePeronal],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.updatePeronal(com.bootdo.system.domain.UserDO)
2019-04-06 12:33:32 -Mapped "{[/sys/user],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.user(org.springframework.ui.Model)
2019-04-06 12:33:32 -Mapped "{[/sys/user/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.edit(org.springframework.ui.Model,java.lang.Long)
2019-04-06 12:33:32 -Mapped "{[/file/downImport/{importType}],methods=[GET]}" onto public void com.bootdo.temple.controller.TempletController.downImport(javax.servlet.http.HttpServletResponse,java.lang.String)
2019-04-06 12:33:32 -Mapped "{[/water/water/add],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterController.add()
2019-04-06 12:33:32 -Mapped "{[/water/water/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterController.remove(java.lang.Long)
2019-04-06 12:33:32 -Mapped "{[/water/water/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterController.remove(java.lang.Long[])
2019-04-06 12:33:32 -Mapped "{[/water/water/update]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterController.update(com.bootdo.water.domain.WaterDO)
2019-04-06 12:33:32 -Mapped "{[/water/water/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.water.controller.WaterController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-06 12:33:32 -Mapped "{[/water/water/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterController.save(com.bootdo.water.domain.WaterDO)
2019-04-06 12:33:32 -Mapped "{[/water/water],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterController.Water()
2019-04-06 12:33:32 -Mapped "{[/water/water/exprotWater],methods=[GET]}" onto public void com.bootdo.water.controller.WaterController.exprotExcel(com.bootdo.water.vo.WaterVo,javax.servlet.http.HttpServletResponse)
2019-04-06 12:33:32 -Mapped "{[/water/water/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-06 12:33:32 -Mapped "{[/water/waterInto],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterIntoController.WaterInto()
2019-04-06 12:33:32 -Mapped "{[/water/waterInto/exprotWaterIntoExcel],methods=[GET]}" onto public void com.bootdo.water.controller.WaterIntoController.exprotExcel(com.bootdo.water.vo.WaterVo,javax.servlet.http.HttpServletResponse)
2019-04-06 12:33:32 -Mapped "{[/water/waterPrice/add],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterPriceController.add()
2019-04-06 12:33:32 -Mapped "{[/water/waterPrice/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterPriceController.remove(java.lang.Long)
2019-04-06 12:33:32 -Mapped "{[/water/waterPrice/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterPriceController.remove(java.lang.Long[])
2019-04-06 12:33:32 -Mapped "{[/water/waterPrice/update]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterPriceController.update(com.bootdo.water.domain.WaterPriceDO)
2019-04-06 12:33:32 -Mapped "{[/water/waterPrice/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.water.controller.WaterPriceController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-06 12:33:32 -Mapped "{[/water/waterPrice/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterPriceController.save(com.bootdo.water.domain.WaterPriceDO)
2019-04-06 12:33:32 -Mapped "{[/water/waterPrice],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterPriceController.WaterPrice()
2019-04-06 12:33:32 -Mapped "{[/water/waterPrice/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterPriceController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-06 12:33:32 -Mapped "{[/water/waterUpLoad/importWaterExcel]}" onto public java.lang.String com.bootdo.water.controller.WaterUpLoadController.importWaterExcel(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)
2019-04-06 12:33:32 -Mapped "{[/water/waterUpLoad/exprotWaterExcel],methods=[GET]}" onto public void com.bootdo.water.controller.WaterUpLoadController.exprotWaterExcel(com.bootdo.water.vo.WaterVo,javax.servlet.http.HttpServletResponse)
2019-04-06 12:33:32 -Mapped "{[/water/waterUpLoad/createWaterExcel],methods=[POST]}" onto public java.lang.String com.bootdo.water.controller.WaterUpLoadController.createWaterExcel(com.bootdo.water.domain.WaterDO) throws java.lang.Exception
2019-04-06 12:33:32 -Mapped "{[/water/waterUpLoad],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterUpLoadController.WaterUpLoad()
2019-04-06 12:33:32 -Mapped "{[/v2/api-docs],methods=[GET],produces=[application/json || application/hal+json]}" onto public org.springframework.http.ResponseEntity<springfox.documentation.spring.web.json.Json> springfox.documentation.swagger2.web.Swagger2Controller.getDocumentation(java.lang.String,javax.servlet.http.HttpServletRequest)
2019-04-06 12:33:32 -Mapped "{[/swagger-resources/configuration/ui]}" onto org.springframework.http.ResponseEntity<springfox.documentation.swagger.web.UiConfiguration> springfox.documentation.swagger.web.ApiResourceController.uiConfiguration()
2019-04-06 12:33:32 -Mapped "{[/swagger-resources]}" onto org.springframework.http.ResponseEntity<java.util.List<springfox.documentation.swagger.web.SwaggerResource>> springfox.documentation.swagger.web.ApiResourceController.swaggerResources()
2019-04-06 12:33:32 -Mapped "{[/swagger-resources/configuration/security]}" onto org.springframework.http.ResponseEntity<springfox.documentation.swagger.web.SecurityConfiguration> springfox.documentation.swagger.web.ApiResourceController.securityConfiguration()
2019-04-06 12:33:32 -Initializing ExecutorService  'messageBrokerTaskScheduler'
2019-04-06 12:33:33 -Mapped URL path [/endpointChat/**] onto handler of type [class org.springframework.web.socket.sockjs.support.SockJsHttpRequestHandler]
2019-04-06 12:33:33 -Initializing ExecutorService  'brokerChannelExecutor'
2019-04-06 12:33:33 -Mapped URL path [/**/favicon.ico] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-04-06 12:33:33 -Looking for @ControllerAdvice: org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@a38c7fe: startup date [Sat Apr 06 12:33:14 CST 2019]; root of context hierarchy
2019-04-06 12:33:33 -Mapped URL path [/webjars/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-04-06 12:33:33 -Mapped URL path [/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-04-06 12:33:33 -Mapped URL path [/files/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-04-06 12:33:33 -Detected @ExceptionHandler methods in BDExceptionHandler
2019-04-06 12:33:34 -[THYMELEAF][main] Template Mode 'LEGACYHTML5' is deprecated. Using Template Mode 'HTML' instead.
2019-04-06 12:33:36 -Registering beans for JMX exposure on startup
2019-04-06 12:33:36 -Bean with name 'dataSource' has been autodetected for JMX exposure
2019-04-06 12:33:36 -Located MBean 'dataSource': registering with JMX server as MBean [com.alibaba.druid.pool:name=dataSource,type=DruidDataSource]
2019-04-06 12:33:36 -Starting beans in phase 2147483647
2019-04-06 12:33:36 -Context refreshed
2019-04-06 12:33:36 -Found 1 custom documentation plugin(s)
2019-04-06 12:33:36 -Scanning for api listing references
2019-04-06 12:33:36 -Generating unique operation named: exprotElecLogUsingGET_1
2019-04-06 12:33:37 -Generating unique operation named: getCountDUsingPOST_1
2019-04-06 12:33:37 -Generating unique operation named: exprotElecLogUsingGET_2
2019-04-06 12:33:37 -Generating unique operation named: getCountDUsingPOST_2
2019-04-06 12:33:37 -Generating unique operation named: exprotElecLogUsingGET_3
2019-04-06 12:33:37 -Generating unique operation named: getCountDUsingPOST_3
2019-04-06 12:33:37 -Generating unique operation named: removeUsingPOST_1
2019-04-06 12:33:37 -Generating unique operation named: addUsingGET_1
2019-04-06 12:33:37 -Generating unique operation named: editUsingGET_1
2019-04-06 12:33:37 -Generating unique operation named: listUsingGET_1
2019-04-06 12:33:37 -Generating unique operation named: removeUsingPOST_2
2019-04-06 12:33:37 -Generating unique operation named: removeUsingPOST_3
2019-04-06 12:33:37 -Generating unique operation named: saveUsingPOST_1
2019-04-06 12:33:37 -Generating unique operation named: updateUsingGET_1
2019-04-06 12:33:37 -Generating unique operation named: updateUsingHEAD_1
2019-04-06 12:33:37 -Generating unique operation named: updateUsingPOST_1
2019-04-06 12:33:37 -Generating unique operation named: updateUsingPUT_1
2019-04-06 12:33:37 -Generating unique operation named: updateUsingPATCH_1
2019-04-06 12:33:37 -Generating unique operation named: updateUsingDELETE_1
2019-04-06 12:33:37 -Generating unique operation named: updateUsingOPTIONS_1
2019-04-06 12:33:37 -Generating unique operation named: updateUsingTRACE_1
2019-04-06 12:33:37 -Generating unique operation named: addUsingGET_2
2019-04-06 12:33:37 -Generating unique operation named: editUsingGET_2
2019-04-06 12:33:37 -Generating unique operation named: listUsingGET_2
2019-04-06 12:33:37 -Generating unique operation named: removeUsingPOST_4
2019-04-06 12:33:37 -Generating unique operation named: removeUsingPOST_5
2019-04-06 12:33:37 -Generating unique operation named: saveUsingPOST_2
2019-04-06 12:33:37 -Generating unique operation named: updateUsingPOST_2
2019-04-06 12:33:37 -Generating unique operation named: exprotExcelUsingGET_1
2019-04-06 12:33:37 -Generating unique operation named: addUsingGET_3
2019-04-06 12:33:37 -Generating unique operation named: editUsingGET_3
2019-04-06 12:33:37 -Generating unique operation named: exprotElecLogUsingGET_4
2019-04-06 12:33:37 -Generating unique operation named: listUsingGET_3
2019-04-06 12:33:37 -Generating unique operation named: removeUsingPOST_6
2019-04-06 12:33:37 -Generating unique operation named: removeUsingPOST_7
2019-04-06 12:33:37 -Generating unique operation named: saveUsingPOST_3
2019-04-06 12:33:37 -Generating unique operation named: updateUsingGET_2
2019-04-06 12:33:37 -Generating unique operation named: updateUsingHEAD_2
2019-04-06 12:33:37 -Generating unique operation named: updateUsingPOST_3
2019-04-06 12:33:37 -Generating unique operation named: updateUsingPUT_2
2019-04-06 12:33:37 -Generating unique operation named: updateUsingPATCH_2
2019-04-06 12:33:37 -Generating unique operation named: updateUsingDELETE_2
2019-04-06 12:33:37 -Generating unique operation named: updateUsingOPTIONS_2
2019-04-06 12:33:37 -Generating unique operation named: updateUsingTRACE_2
2019-04-06 12:33:37 -Generating unique operation named: addUsingGET_4
2019-04-06 12:33:37 -Generating unique operation named: editUsingGET_4
2019-04-06 12:33:37 -Generating unique operation named: listUsingGET_4
2019-04-06 12:33:37 -Generating unique operation named: removeUsingPOST_8
2019-04-06 12:33:37 -Generating unique operation named: removeUsingPOST_9
2019-04-06 12:33:37 -Generating unique operation named: saveUsingPOST_4
2019-04-06 12:33:37 -Generating unique operation named: updateUsingGET_3
2019-04-06 12:33:37 -Generating unique operation named: updateUsingHEAD_3
2019-04-06 12:33:37 -Generating unique operation named: updateUsingPOST_4
2019-04-06 12:33:37 -Generating unique operation named: updateUsingPUT_3
2019-04-06 12:33:37 -Generating unique operation named: updateUsingPATCH_3
2019-04-06 12:33:37 -Generating unique operation named: updateUsingDELETE_3
2019-04-06 12:33:37 -Generating unique operation named: updateUsingOPTIONS_3
2019-04-06 12:33:37 -Generating unique operation named: updateUsingTRACE_3
2019-04-06 12:33:37 -Generating unique operation named: ElecUsingGET_1
2019-04-06 12:33:37 -Generating unique operation named: addUsingGET_5
2019-04-06 12:33:37 -Generating unique operation named: editUsingGET_5
2019-04-06 12:33:37 -Generating unique operation named: listUsingGET_5
2019-04-06 12:33:37 -Generating unique operation named: removeUsingPOST_10
2019-04-06 12:33:37 -Generating unique operation named: removeUsingPOST_11
2019-04-06 12:33:37 -Generating unique operation named: saveUsingPOST_5
2019-04-06 12:33:37 -Generating unique operation named: updateUsingGET_4
2019-04-06 12:33:37 -Generating unique operation named: updateUsingHEAD_4
2019-04-06 12:33:37 -Generating unique operation named: updateUsingPOST_5
2019-04-06 12:33:37 -Generating unique operation named: updateUsingPUT_4
2019-04-06 12:33:37 -Generating unique operation named: updateUsingPATCH_4
2019-04-06 12:33:37 -Generating unique operation named: updateUsingDELETE_4
2019-04-06 12:33:37 -Generating unique operation named: updateUsingOPTIONS_4
2019-04-06 12:33:37 -Generating unique operation named: updateUsingTRACE_4
2019-04-06 12:33:37 -Generating unique operation named: editUsingGET_6
2019-04-06 12:33:37 -Generating unique operation named: listUsingGET_6
2019-04-06 12:33:37 -Generating unique operation named: updateUsingPOST_6
2019-04-06 12:33:38 -Generating unique operation named: addUsingGET_6
2019-04-06 12:33:38 -Generating unique operation named: editUsingGET_7
2019-04-06 12:33:38 -Generating unique operation named: exprotExcelUsingGET_2
2019-04-06 12:33:38 -Generating unique operation named: listUsingGET_7
2019-04-06 12:33:38 -Generating unique operation named: removeUsingPOST_12
2019-04-06 12:33:38 -Generating unique operation named: removeUsingPOST_13
2019-04-06 12:33:38 -Generating unique operation named: saveUsingPOST_6
2019-04-06 12:33:38 -Generating unique operation named: updateUsingGET_5
2019-04-06 12:33:38 -Generating unique operation named: updateUsingHEAD_5
2019-04-06 12:33:38 -Generating unique operation named: updateUsingPOST_7
2019-04-06 12:33:38 -Generating unique operation named: updateUsingPUT_5
2019-04-06 12:33:38 -Generating unique operation named: updateUsingPATCH_5
2019-04-06 12:33:38 -Generating unique operation named: updateUsingDELETE_5
2019-04-06 12:33:38 -Generating unique operation named: updateUsingOPTIONS_5
2019-04-06 12:33:38 -Generating unique operation named: updateUsingTRACE_5
2019-04-06 12:33:38 -Generating unique operation named: exprotExcelUsingGET_3
2019-04-06 12:33:38 -Generating unique operation named: addUsingGET_7
2019-04-06 12:33:38 -Generating unique operation named: editUsingGET_8
2019-04-06 12:33:38 -Generating unique operation named: listUsingGET_8
2019-04-06 12:33:38 -Generating unique operation named: removeUsingPOST_14
2019-04-06 12:33:38 -Generating unique operation named: removeUsingPOST_15
2019-04-06 12:33:38 -Generating unique operation named: saveUsingPOST_7
2019-04-06 12:33:38 -Generating unique operation named: updateUsingGET_6
2019-04-06 12:33:38 -Generating unique operation named: updateUsingHEAD_6
2019-04-06 12:33:38 -Generating unique operation named: updateUsingPOST_8
2019-04-06 12:33:38 -Generating unique operation named: updateUsingPUT_6
2019-04-06 12:33:38 -Generating unique operation named: updateUsingPATCH_6
2019-04-06 12:33:38 -Generating unique operation named: updateUsingDELETE_6
2019-04-06 12:33:38 -Generating unique operation named: updateUsingOPTIONS_6
2019-04-06 12:33:38 -Generating unique operation named: updateUsingTRACE_6
2019-04-06 12:33:38 -Generating unique operation named: addUsingGET_8
2019-04-06 12:33:38 -Generating unique operation named: editUsingGET_9
2019-04-06 12:33:38 -Generating unique operation named: listUsingGET_9
2019-04-06 12:33:38 -Generating unique operation named: removeUsingPOST_16
2019-04-06 12:33:38 -Generating unique operation named: removeUsingPOST_17
2019-04-06 12:33:38 -Generating unique operation named: saveUsingPOST_8
2019-04-06 12:33:38 -Generating unique operation named: updateUsingGET_7
2019-04-06 12:33:38 -Generating unique operation named: updateUsingHEAD_7
2019-04-06 12:33:38 -Generating unique operation named: updateUsingPOST_9
2019-04-06 12:33:38 -Generating unique operation named: updateUsingPUT_7
2019-04-06 12:33:38 -Generating unique operation named: updateUsingPATCH_7
2019-04-06 12:33:38 -Generating unique operation named: updateUsingDELETE_7
2019-04-06 12:33:38 -Generating unique operation named: updateUsingOPTIONS_7
2019-04-06 12:33:38 -Generating unique operation named: updateUsingTRACE_7
2019-04-06 12:33:38 -Generating unique operation named: addUsingGET_9
2019-04-06 12:33:38 -Generating unique operation named: editUsingGET_10
2019-04-06 12:33:38 -Generating unique operation named: infoUsingGET_1
2019-04-06 12:33:38 -Generating unique operation named: infoUsingHEAD_1
2019-04-06 12:33:38 -Generating unique operation named: infoUsingPOST_1
2019-04-06 12:33:38 -Generating unique operation named: infoUsingPUT_1
2019-04-06 12:33:38 -Generating unique operation named: infoUsingPATCH_1
2019-04-06 12:33:38 -Generating unique operation named: infoUsingDELETE_1
2019-04-06 12:33:38 -Generating unique operation named: infoUsingOPTIONS_1
2019-04-06 12:33:38 -Generating unique operation named: infoUsingTRACE_1
2019-04-06 12:33:38 -Generating unique operation named: listUsingGET_10
2019-04-06 12:33:38 -Generating unique operation named: removeUsingPOST_18
2019-04-06 12:33:38 -Generating unique operation named: removeUsingPOST_19
2019-04-06 12:33:38 -Generating unique operation named: saveUsingPOST_9
2019-04-06 12:33:38 -Generating unique operation named: updateUsingPOST_10
2019-04-06 12:33:38 -Generating unique operation named: listUsingGET_11
2019-04-06 12:33:38 -Generating unique operation named: removeUsingPOST_20
2019-04-06 12:33:38 -Generating unique operation named: welcomeUsingGET_1
2019-04-06 12:33:38 -Generating unique operation named: addUsingGET_10
2019-04-06 12:33:38 -Generating unique operation named: editUsingGET_11
2019-04-06 12:33:38 -Generating unique operation named: listUsingGET_12
2019-04-06 12:33:38 -Generating unique operation named: removeUsingPOST_21
2019-04-06 12:33:38 -Generating unique operation named: saveUsingPOST_10
2019-04-06 12:33:38 -Generating unique operation named: treeUsingGET_1
2019-04-06 12:33:38 -Generating unique operation named: treeUsingGET_2
2019-04-06 12:33:38 -Generating unique operation named: updateUsingPOST_11
2019-04-06 12:33:38 -Generating unique operation named: addUsingGET_11
2019-04-06 12:33:38 -Generating unique operation named: editUsingGET_12
2019-04-06 12:33:38 -Generating unique operation named: listUsingGET_13
2019-04-06 12:33:38 -Generating unique operation named: removeUsingPOST_22
2019-04-06 12:33:38 -Generating unique operation named: removeUsingPOST_23
2019-04-06 12:33:38 -Generating unique operation named: saveUsingPOST_11
2019-04-06 12:33:38 -Generating unique operation named: updateUsingGET_8
2019-04-06 12:33:38 -Generating unique operation named: updateUsingHEAD_8
2019-04-06 12:33:38 -Generating unique operation named: updateUsingPOST_12
2019-04-06 12:33:38 -Generating unique operation named: updateUsingPUT_8
2019-04-06 12:33:38 -Generating unique operation named: updateUsingPATCH_8
2019-04-06 12:33:38 -Generating unique operation named: updateUsingDELETE_8
2019-04-06 12:33:38 -Generating unique operation named: updateUsingOPTIONS_8
2019-04-06 12:33:38 -Generating unique operation named: updateUsingTRACE_8
2019-04-06 12:33:38 -Generating unique operation named: addUsingGET_12
2019-04-06 12:33:38 -Generating unique operation named: editUsingGET_13
2019-04-06 12:33:38 -Generating unique operation named: listUsingGET_14
2019-04-06 12:33:38 -Generating unique operation named: removeUsingPOST_24
2019-04-06 12:33:38 -Generating unique operation named: removeUsingPOST_25
2019-04-06 12:33:38 -Generating unique operation named: saveUsingPOST_12
2019-04-06 12:33:38 -Generating unique operation named: updateUsingGET_9
2019-04-06 12:33:38 -Generating unique operation named: updateUsingHEAD_9
2019-04-06 12:33:38 -Generating unique operation named: updateUsingPOST_13
2019-04-06 12:33:38 -Generating unique operation named: updateUsingPUT_9
2019-04-06 12:33:38 -Generating unique operation named: updateUsingPATCH_9
2019-04-06 12:33:38 -Generating unique operation named: updateUsingDELETE_9
2019-04-06 12:33:38 -Generating unique operation named: updateUsingOPTIONS_9
2019-04-06 12:33:38 -Generating unique operation named: updateUsingTRACE_9
2019-04-06 12:33:38 -Generating unique operation named: addUsingGET_13
2019-04-06 12:33:38 -Generating unique operation named: batchRemoveUsingPOST_1
2019-04-06 12:33:38 -Generating unique operation named: editUsingGET_14
2019-04-06 12:33:38 -Generating unique operation named: listUsingGET_15
2019-04-06 12:33:39 -Generating unique operation named: saveUsingPOST_13
2019-04-06 12:33:39 -Generating unique operation named: saveUsingPOST_14
2019-04-06 12:33:39 -Generating unique operation named: updateUsingPOST_14
2019-04-06 12:33:39 -Generating unique operation named: listUsingGET_16
2019-04-06 12:33:39 -Generating unique operation named: listUsingHEAD_1
2019-04-06 12:33:39 -Generating unique operation named: listUsingPOST_1
2019-04-06 12:33:39 -Generating unique operation named: listUsingPUT_1
2019-04-06 12:33:39 -Generating unique operation named: listUsingPATCH_1
2019-04-06 12:33:39 -Generating unique operation named: listUsingDELETE_1
2019-04-06 12:33:39 -Generating unique operation named: listUsingOPTIONS_1
2019-04-06 12:33:39 -Generating unique operation named: listUsingTRACE_1
2019-04-06 12:33:39 -Generating unique operation named: addUsingGET_14
2019-04-06 12:33:39 -Generating unique operation named: batchRemoveUsingPOST_2
2019-04-06 12:33:39 -Generating unique operation named: editUsingGET_15
2019-04-06 12:33:39 -Generating unique operation named: listUsingGET_17
2019-04-06 12:33:39 -Generating unique operation named: removeUsingPOST_26
2019-04-06 12:33:39 -Generating unique operation named: saveUsingPOST_15
2019-04-06 12:33:39 -Generating unique operation named: treeUsingGET_3
2019-04-06 12:33:39 -Generating unique operation named: treeViewUsingGET_1
2019-04-06 12:33:39 -Generating unique operation named: updateUsingPOST_15
2019-04-06 12:33:39 -Generating unique operation named: addUsingGET_15
2019-04-06 12:33:39 -Generating unique operation named: editUsingGET_16
2019-04-06 12:33:39 -Generating unique operation named: exprotExcelUsingGET_4
2019-04-06 12:33:39 -Generating unique operation named: listUsingGET_18
2019-04-06 12:33:39 -Generating unique operation named: removeUsingPOST_27
2019-04-06 12:33:39 -Generating unique operation named: removeUsingPOST_28
2019-04-06 12:33:39 -Generating unique operation named: saveUsingPOST_16
2019-04-06 12:33:39 -Generating unique operation named: updateUsingGET_10
2019-04-06 12:33:39 -Generating unique operation named: updateUsingHEAD_10
2019-04-06 12:33:39 -Generating unique operation named: updateUsingPOST_16
2019-04-06 12:33:39 -Generating unique operation named: updateUsingPUT_10
2019-04-06 12:33:39 -Generating unique operation named: updateUsingPATCH_10
2019-04-06 12:33:39 -Generating unique operation named: updateUsingDELETE_10
2019-04-06 12:33:39 -Generating unique operation named: updateUsingOPTIONS_10
2019-04-06 12:33:39 -Generating unique operation named: updateUsingTRACE_10
2019-04-06 12:33:39 -Generating unique operation named: exprotExcelUsingGET_5
2019-04-06 12:33:39 -Generating unique operation named: addUsingGET_16
2019-04-06 12:33:39 -Generating unique operation named: editUsingGET_17
2019-04-06 12:33:39 -Generating unique operation named: listUsingGET_19
2019-04-06 12:33:39 -Generating unique operation named: removeUsingPOST_29
2019-04-06 12:33:39 -Generating unique operation named: removeUsingPOST_30
2019-04-06 12:33:39 -Generating unique operation named: saveUsingPOST_17
2019-04-06 12:33:39 -Generating unique operation named: updateUsingGET_11
2019-04-06 12:33:39 -Generating unique operation named: updateUsingHEAD_11
2019-04-06 12:33:39 -Generating unique operation named: updateUsingPOST_17
2019-04-06 12:33:39 -Generating unique operation named: updateUsingPUT_11
2019-04-06 12:33:39 -Generating unique operation named: updateUsingPATCH_11
2019-04-06 12:33:39 -Generating unique operation named: updateUsingDELETE_11
2019-04-06 12:33:39 -Generating unique operation named: updateUsingOPTIONS_11
2019-04-06 12:33:39 -Generating unique operation named: updateUsingTRACE_11
2019-04-06 12:33:39 -Generating unique operation named: addUsingGET_17
2019-04-06 12:33:39 -Generating unique operation named: editUsingGET_18
2019-04-06 12:33:39 -Generating unique operation named: listUsingGET_20
2019-04-06 12:33:39 -Generating unique operation named: removeUsingPOST_31
2019-04-06 12:33:39 -Generating unique operation named: removeUsingPOST_32
2019-04-06 12:33:39 -Generating unique operation named: saveUsingPOST_18
2019-04-06 12:33:39 -Generating unique operation named: updateUsingGET_12
2019-04-06 12:33:39 -Generating unique operation named: updateUsingHEAD_12
2019-04-06 12:33:39 -Generating unique operation named: updateUsingPOST_18
2019-04-06 12:33:39 -Generating unique operation named: updateUsingPUT_12
2019-04-06 12:33:39 -Generating unique operation named: updateUsingPATCH_12
2019-04-06 12:33:39 -Generating unique operation named: updateUsingDELETE_12
2019-04-06 12:33:39 -Generating unique operation named: updateUsingOPTIONS_12
2019-04-06 12:33:39 -Generating unique operation named: updateUsingTRACE_12
2019-04-06 12:33:39 -Starting Quartz Scheduler now
2019-04-06 12:33:39 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED started.
2019-04-06 12:33:39 -Starting...
2019-04-06 12:33:39 -BrokerAvailabilityEvent[available=true, SimpleBrokerMessageHandler [DefaultSubscriptionRegistry[cache[0 destination(s)], registry[0 sessions]]]]
2019-04-06 12:33:39 -Started.
2019-04-06 12:33:39 -Starting ProtocolHandler ["http-nio-8081"]
2019-04-06 12:33:39 -Failed to start connector [Connector[HTTP/1.1-8081]]
org.apache.catalina.LifecycleException: Failed to start component [Connector[HTTP/1.1-8081]]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:167)
	at org.apache.catalina.core.StandardService.addConnector(StandardService.java:225)
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.addPreviouslyRemovedConnectors(TomcatWebServer.java:256)
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.start(TomcatWebServer.java:198)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.startWebServer(ServletWebServerApplicationContext.java:300)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.finishRefresh(ServletWebServerApplicationContext.java:162)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:553)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:140)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:759)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:395)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:327)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1255)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1243)
	at com.bootdo.BootdoApplication.main(BootdoApplication.java:21)
Caused by: org.apache.catalina.LifecycleException: Protocol handler start failed
	at org.apache.catalina.connector.Connector.startInternal(Connector.java:1020)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:150)
	... 13 common frames omitted
Caused by: java.net.BindException: Address already in use: bind
	at sun.nio.ch.Net.bind0(Native Method)
	at sun.nio.ch.Net.bind(Unknown Source)
	at sun.nio.ch.Net.bind(Unknown Source)
	at sun.nio.ch.ServerSocketChannelImpl.bind(Unknown Source)
	at sun.nio.ch.ServerSocketAdaptor.bind(Unknown Source)
	at org.apache.tomcat.util.net.NioEndpoint.bind(NioEndpoint.java:210)
	at org.apache.tomcat.util.net.AbstractEndpoint.start(AbstractEndpoint.java:1150)
	at org.apache.coyote.AbstractProtocol.start(AbstractProtocol.java:591)
	at org.apache.catalina.connector.Connector.startInternal(Connector.java:1018)
	... 14 common frames omitted
2019-04-06 12:33:39 -Pausing ProtocolHandler ["http-nio-8081"]
2019-04-06 12:33:39 -Stopping service [Tomcat]
2019-04-06 12:33:39 -The stop() method was called on component [StandardServer[-1]] after stop() had already been called. The second call will be ignored.
2019-04-06 12:33:39 -Stopping ProtocolHandler ["http-nio-8081"]
2019-04-06 12:33:39 -Destroying ProtocolHandler ["http-nio-8081"]
2019-04-06 12:33:39 -

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2019-04-06 12:33:39 -

***************************
APPLICATION FAILED TO START
***************************

Description:

The Tomcat connector configured to listen on port 8081 failed to start. The port may already be in use or the connector may be misconfigured.

Action:

Verify the connector's configuration, identify and stop any process that's listening on port 8081, or configure this application to listen on another port.

2019-04-06 12:33:39 -Closing org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@a38c7fe: startup date [Sat Apr 06 12:33:14 CST 2019]; root of context hierarchy
2019-04-06 12:33:39 -Stopping beans in phase 2147483647
2019-04-06 12:33:39 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED paused.
2019-04-06 12:33:39 -Stopping...
2019-04-06 12:33:39 -BrokerAvailabilityEvent[available=false, SimpleBrokerMessageHandler [DefaultSubscriptionRegistry[cache[0 destination(s)], registry[0 sessions]]]]
2019-04-06 12:33:39 -Stopped.
2019-04-06 12:33:39 -Unregistering JMX-exposed beans on shutdown
2019-04-06 12:33:39 -Unregistering JMX-exposed beans
2019-04-06 12:33:39 -Shutting down ExecutorService 'brokerChannelExecutor'
2019-04-06 12:33:39 -Shutting down ExecutorService 'messageBrokerTaskScheduler'
2019-04-06 12:33:39 -Shutting down ExecutorService 'clientOutboundChannelExecutor'
2019-04-06 12:33:39 -Shutting down ExecutorService 'clientInboundChannelExecutor'
2019-04-06 12:33:39 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED shutting down.
2019-04-06 12:33:39 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED paused.
2019-04-06 12:33:39 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED shutdown complete.
2019-04-06 12:33:39 -Shutting down Quartz Scheduler
2019-04-06 12:34:11 -Starting BootdoApplication on ZJZL-20180906VX with PID 10068 (D:\eclipse2018-work\bootdo\target\classes started by Administrator in D:\eclipse2018-work\bootdo)
2019-04-06 12:34:11 -Running with Spring Boot v2.0.3.RELEASE, Spring v5.0.7.RELEASE
2019-04-06 12:34:11 -The following profiles are active: dev
2019-04-06 12:34:12 -Refreshing org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@6fdbe764: startup date [Sat Apr 06 12:34:12 CST 2019]; root of context hierarchy
2019-04-06 12:34:17 -Multiple Spring Data modules found, entering strict repository configuration mode!
2019-04-06 12:34:21 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$eb45a204] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-06 12:34:21 -Bean 'shiroConfig' of type [com.bootdo.system.config.ShiroConfig$$EnhancerBySpringCGLIB$$dd9ed0ab] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-06 12:34:22 -Bean 'userRealm' of type [com.bootdo.system.shiro.UserRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-06 12:34:23 -Bean 'cacheManager2' of type [net.sf.ehcache.CacheManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-06 12:34:23 -Bean 'ehCacheManager' of type [org.apache.shiro.cache.ehcache.EhCacheManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-06 12:34:23 -Cache with name 'com.bootdo.system.shiro.UserRealm.authorizationCache' does not yet exist.  Creating now.
2019-04-06 12:34:23 -Added EhCache named [com.bootdo.system.shiro.UserRealm.authorizationCache]
2019-04-06 12:34:23 -Bean 'sessionDAO' of type [org.apache.shiro.session.mgt.eis.MemorySessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-06 12:34:23 -Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-06 12:34:23 -Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-06 12:34:23 -Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-06 12:34:24 -Tomcat initialized with port(s): 8081 (http)
2019-04-06 12:34:24 -Initializing ProtocolHandler ["http-nio-8081"]
2019-04-06 12:34:24 -Starting service [Tomcat]
2019-04-06 12:34:24 -Starting Servlet Engine: Apache Tomcat/8.5.31
2019-04-06 12:34:24 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [C:\Program Files\Java\jre1.8.0_131\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:/Program Files/Java/jre1.8.0_131/bin/server;C:/Program Files/Java/jre1.8.0_131/bin;C:/Program Files/Java/jre1.8.0_131/lib/amd64;C:\ProgramData\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Windows\System32\OpenSSH\;D:\pbb\pycSafefile\x64;D:\pbb\PBB Reader\x64;C:\Program Files\MySQL\MySQL Utilities 1.6\;D:\MAVEN\apache-maven-3.6.0\bin;D:\GIT\Git\cmd;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;;C:\Users\Administrator\Desktop;;.]
2019-04-06 12:34:25 -Initializing Spring embedded WebApplicationContext
2019-04-06 12:34:25 -Root WebApplicationContext: initialization completed in 13084 ms
2019-04-06 12:34:25 -Mapping filter: 'characterEncodingFilter' to: [/*]
2019-04-06 12:34:25 -Mapping filter: 'hiddenHttpMethodFilter' to: [/*]
2019-04-06 12:34:25 -Mapping filter: 'httpPutFormContentFilter' to: [/*]
2019-04-06 12:34:25 -Mapping filter: 'requestContextFilter' to: [/*]
2019-04-06 12:34:25 -Filter xssFilter was not registered (disabled)
2019-04-06 12:34:25 -Mapping filter: 'webStatFilter' to urls: [/*]
2019-04-06 12:34:25 -Mapping filter: 'shiroFilterFactoryBean' to: [/*]
2019-04-06 12:34:25 -Servlet statViewServlet mapped to [/druid/*]
2019-04-06 12:34:25 -Servlet dispatcherServlet mapped to [/]
2019-04-06 12:34:28 -ApplicationContext registed-->org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@6fdbe764: startup date [Sat Apr 06 12:34:12 CST 2019]; root of context hierarchy
2019-04-06 12:34:29 -Using default implementation for ThreadExecutor
2019-04-06 12:34:29 -Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2019-04-06 12:34:29 -Quartz Scheduler v.2.2.1 created.
2019-04-06 12:34:29 -RAMJobStore initialized.
2019-04-06 12:34:29 -Scheduler meta-data: Quartz Scheduler (v2.2.1) 'schedulerFactoryBean' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2019-04-06 12:34:29 -Quartz scheduler 'schedulerFactoryBean' initialized from an externally provided properties instance.
2019-04-06 12:34:29 -Quartz scheduler version: 2.2.1
2019-04-06 12:34:29 -JobFactory set to: com.bootdo.common.quartz.factory.JobFactory@7bede4ea
2019-04-06 12:34:29 -Initializing ExecutorService  'clientInboundChannelExecutor'
2019-04-06 12:34:29 -Initializing ExecutorService  'clientOutboundChannelExecutor'
2019-04-06 12:34:31 -Mapped "{[/charts/countDD],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.countDDController.countDD()
2019-04-06 12:34:31 -Mapped "{[/charts/countDD/tableDD],methods=[POST]}" onto public java.lang.String com.bootdo.charts.controller.countDDController.tableDD()
2019-04-06 12:34:31 -Mapped "{[/charts/countDD/exportCountDD],methods=[GET]}" onto public void com.bootdo.charts.controller.countDDController.exprotElecLog(com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-06 12:34:31 -Mapped "{[/charts/countDD/getCountDD],methods=[POST]}" onto public com.bootdo.charts.vo.CountDayVo com.bootdo.charts.controller.countDDController.getCountD(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo,javax.servlet.http.HttpServletRequest)
2019-04-06 12:34:31 -Mapped "{[/charts/countMM/exportCountMM],methods=[GET]}" onto public void com.bootdo.charts.controller.countMMController.exprotElecLog(com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-06 12:34:31 -Mapped "{[/charts/countMM],methods=[GET]}" onto java.lang.String com.bootdo.charts.controller.countMMController.countMM()
2019-04-06 12:34:31 -Mapped "{[/charts/countMM/getCountMM],methods=[POST]}" onto public void com.bootdo.charts.controller.countMMController.getCountMM(org.springframework.ui.Model,com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo,javax.servlet.http.HttpServletRequest)
2019-04-06 12:34:31 -Mapped "{[/charts/countOwe/getCountOwe],methods=[POST]}" onto public com.bootdo.charts.vo.CountOweVo com.bootdo.charts.controller.countOweController.getCountD(com.bootdo.elec.vo.ElecVo,com.bootdo.water.vo.WaterVo,com.bootdo.heat.vo.HeatVo,javax.servlet.http.HttpServletRequest)
2019-04-06 12:34:31 -Mapped "{[/charts/countOwe],methods=[GET]}" onto java.lang.String com.bootdo.charts.controller.countOweController.countOwe()
2019-04-06 12:34:31 -Mapped "{[/charts/countRun/exportCountRun],methods=[GET]}" onto public void com.bootdo.charts.controller.countRunController.exprotElecLog(com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-06 12:34:31 -Mapped "{[/charts/countRun/getCountRun],methods=[POST]}" onto public int com.bootdo.charts.controller.countRunController.getCountD(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo)
2019-04-06 12:34:31 -Mapped "{[/charts/countRun],methods=[GET]}" onto java.lang.String com.bootdo.charts.controller.countRunController.countRun()
2019-04-06 12:34:31 -Mapped "{[/charts/countYY/exportCountYY],methods=[GET]}" onto public void com.bootdo.charts.controller.countYYController.exprotElecLog(com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-06 12:34:31 -Mapped "{[/charts/countYY/getCountYY],methods=[POST]}" onto public int com.bootdo.charts.controller.countYYController.getCountD(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo)
2019-04-06 12:34:31 -Mapped "{[/charts/countYY],methods=[GET]}" onto java.lang.String com.bootdo.charts.controller.countYYController.countYY()
2019-04-06 12:34:32 -Mapped "{[/common/dict/add],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.add()
2019-04-06 12:34:32 -Mapped "{[/common/dict/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.remove(java.lang.Long)
2019-04-06 12:34:32 -Mapped "{[/common/dict/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.remove(java.lang.Long[])
2019-04-06 12:34:32 -Mapped "{[/common/dict/update]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.update(com.bootdo.common.domain.DictDO)
2019-04-06 12:34:32 -Mapped "{[/common/dict/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.common.controller.DictController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-06 12:34:32 -Mapped "{[/common/dict/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.save(com.bootdo.common.domain.DictDO)
2019-04-06 12:34:32 -Mapped "{[/common/dict/type],methods=[GET]}" onto public java.util.List<com.bootdo.common.domain.DictDO> com.bootdo.common.controller.DictController.listType()
2019-04-06 12:34:32 -Mapped "{[/common/dict],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.dict()
2019-04-06 12:34:32 -Mapped "{[/common/dict/add/{type}/{description}],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.addD(org.springframework.ui.Model,java.lang.String,java.lang.String)
2019-04-06 12:34:32 -Mapped "{[/common/dict/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-06 12:34:32 -Mapped "{[/common/dict/list/{type}],methods=[GET]}" onto public java.util.List<com.bootdo.common.domain.DictDO> com.bootdo.common.controller.DictController.listByType(java.lang.String)
2019-04-06 12:34:32 -Mapped "{[/common/sysFile/add],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.FileController.add()
2019-04-06 12:34:32 -Mapped "{[/common/sysFile/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.remove(java.lang.Long,javax.servlet.http.HttpServletRequest)
2019-04-06 12:34:32 -Mapped "{[/common/sysFile/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.remove(java.lang.Long[])
2019-04-06 12:34:32 -Mapped "{[/common/sysFile/update]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.update(com.bootdo.common.domain.FileDO)
2019-04-06 12:34:32 -Mapped "{[/common/sysFile/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.common.controller.FileController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-06 12:34:32 -Mapped "{[/common/sysFile/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.save(com.bootdo.common.domain.FileDO)
2019-04-06 12:34:32 -Mapped "{[/common/sysFile/info/{id}]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.info(java.lang.Long)
2019-04-06 12:34:32 -Mapped "{[/common/sysFile/edit],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.FileController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-06 12:34:32 -Mapped "{[/common/sysFile],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.FileController.sysFile(org.springframework.ui.Model)
2019-04-06 12:34:32 -Mapped "{[/common/sysFile/upload],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.FileController.upload(org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpServletRequest)
2019-04-06 12:34:32 -Mapped "{[/common/generator/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.GeneratorController.update(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-06 12:34:32 -Mapped "{[/common/generator/list],methods=[GET]}" onto java.util.List<java.util.Map<java.lang.String, java.lang.Object>> com.bootdo.common.controller.GeneratorController.list()
2019-04-06 12:34:32 -Mapped "{[/common/generator/code/{tableName}]}" onto public void com.bootdo.common.controller.GeneratorController.code(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String) throws java.io.IOException
2019-04-06 12:34:32 -Mapped "{[/common/generator/batchCode]}" onto public void com.bootdo.common.controller.GeneratorController.batchCode(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String) throws java.io.IOException
2019-04-06 12:34:32 -Mapped "{[/common/generator/edit],methods=[GET]}" onto public java.lang.String com.bootdo.common.controller.GeneratorController.edit(org.springframework.ui.Model)
2019-04-06 12:34:32 -Mapped "{[/common/generator],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.GeneratorController.generator()
2019-04-06 12:34:32 -Mapped "{[/common/job/add],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.JobController.add()
2019-04-06 12:34:32 -Mapped "{[/common/job/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.remove(java.lang.Long)
2019-04-06 12:34:32 -Mapped "{[/common/job/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.remove(java.lang.Long[])
2019-04-06 12:34:32 -Mapped "{[/common/job/update],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.update(com.bootdo.common.domain.TaskDO)
2019-04-06 12:34:32 -Mapped "{[/common/job/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.common.controller.JobController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-06 12:34:32 -Mapped "{[/common/job/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.save(com.bootdo.common.domain.TaskDO)
2019-04-06 12:34:32 -Mapped "{[/common/job/info/{id}]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.info(java.lang.Long)
2019-04-06 12:34:32 -Mapped "{[/common/job/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.JobController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-06 12:34:32 -Mapped "{[/common/job],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.JobController.taskScheduleJob()
2019-04-06 12:34:32 -Mapped "{[/common/job/changeJobStatus],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.changeJobStatus(java.lang.Long,java.lang.String)
2019-04-06 12:34:32 -Mapped "{[/common/log/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.LogController.remove(java.lang.Long)
2019-04-06 12:34:32 -Mapped "{[/common/log],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.LogController.log()
2019-04-06 12:34:32 -Mapped "{[/common/log/list],methods=[GET]}" onto com.bootdo.common.domain.PageDO<com.bootdo.common.domain.LogDO> com.bootdo.common.controller.LogController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-06 12:34:32 -Mapped "{[/common/log/batchRemove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.LogController.batchRemove(java.lang.Long[])
2019-04-06 12:34:32 -Mapped "{[/common/long],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.LongController.Long()
2019-04-06 12:34:32 -Mapped "{[/common/time],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.TimeController.Time()
2019-04-06 12:34:32 -Mapped "{[/error]}" onto public com.bootdo.common.utils.R com.bootdo.common.exception.MainsiteErrorController.handleError(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-04-06 12:34:32 -Mapped "{[/error],produces=[text/html]}" onto public org.springframework.web.servlet.ModelAndView com.bootdo.common.exception.MainsiteErrorController.errorHtml(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-04-06 12:34:32 -Mapped "{[/elec/elec/add],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecController.add()
2019-04-06 12:34:32 -Mapped "{[/elec/elec/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.remove(java.lang.Long)
2019-04-06 12:34:32 -Mapped "{[/elec/elec/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.remove(java.lang.Long[])
2019-04-06 12:34:32 -Mapped "{[/elec/elec/update],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.update(com.bootdo.elec.domain.ElecDO)
2019-04-06 12:34:32 -Mapped "{[/elec/elec/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.elec.controller.ElecController.list(java.util.Map<java.lang.String, java.lang.Object>,com.bootdo.elec.domain.ElecDO)
2019-04-06 12:34:32 -Mapped "{[/elec/elec/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.save(com.bootdo.elec.domain.ElecDO)
2019-04-06 12:34:32 -Mapped "{[/elec/elec/exprotElec],methods=[GET]}" onto public void com.bootdo.elec.controller.ElecController.exprotExcel(com.bootdo.elec.vo.ElecVo,javax.servlet.http.HttpServletResponse)
2019-04-06 12:34:32 -Mapped "{[/elec/elec/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-06 12:34:32 -Mapped "{[/elec/elec],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecController.Elec()
2019-04-06 12:34:32 -Mapped "{[/elec/elecInto],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecIntoController.ElecInto()
2019-04-06 12:34:32 -Mapped "{[/elec/elecInto/exprotElecIntoExcel],methods=[GET]}" onto public void com.bootdo.elec.controller.ElecIntoController.exprotExcel(com.bootdo.elec.vo.ElecVo,javax.servlet.http.HttpServletResponse)
2019-04-06 12:34:32 -Mapped "{[/elec/elecInto/importElecIntoExcel],methods=[POST]}" onto public java.util.Map<java.lang.String, java.lang.Object> com.bootdo.elec.controller.ElecIntoController.importElecIntoExcel(org.springframework.web.multipart.MultipartFile,com.bootdo.elec.vo.ElecVo) throws java.lang.Exception
2019-04-06 12:34:32 -Mapped "{[/elec/elecPrice/add],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecPriceController.add()
2019-04-06 12:34:32 -Mapped "{[/elec/elecPrice/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecPriceController.remove(java.lang.Long)
2019-04-06 12:34:32 -Mapped "{[/elec/elecPrice/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecPriceController.remove(java.lang.Long[])
2019-04-06 12:34:32 -Mapped "{[/elec/elecPrice/update]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecPriceController.update(com.bootdo.elec.domain.ElecPriceDO)
2019-04-06 12:34:32 -Mapped "{[/elec/elecPrice/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.elec.controller.ElecPriceController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-06 12:34:32 -Mapped "{[/elec/elecPrice/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecPriceController.save(com.bootdo.elec.domain.ElecPriceDO,com.bootdo.elec.domain.ElecDO)
2019-04-06 12:34:32 -Mapped "{[/elec/elecPrice],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecPriceController.ElecPrice()
2019-04-06 12:34:32 -Mapped "{[/elec/elecPrice/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecPriceController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-06 12:34:32 -Mapped "{[/elec/elecUpLoad/importElecExcel],methods=[POST]}" onto public java.util.Map<java.lang.String, java.lang.Object> com.bootdo.elec.controller.ElecUpLoadController.importElecExcel(org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpServletRequest) throws java.lang.Exception
2019-04-06 12:34:32 -Mapped "{[/elec/elecUpLoad],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecUpLoadController.Elec()
2019-04-06 12:34:32 -Mapped "{[/heat/heat/add],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatController.add()
2019-04-06 12:34:32 -Mapped "{[/heat/heat/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatController.remove(java.lang.Integer)
2019-04-06 12:34:32 -Mapped "{[/heat/heat/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatController.remove(java.lang.Integer[])
2019-04-06 12:34:32 -Mapped "{[/heat/heat/update]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatController.update(com.bootdo.heat.domain.HeatDO)
2019-04-06 12:34:32 -Mapped "{[/heat/heat/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.heat.controller.HeatController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-06 12:34:32 -Mapped "{[/heat/heat/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatController.save(com.bootdo.heat.domain.HeatDO)
2019-04-06 12:34:32 -Mapped "{[/heat/heat],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatController.Heat()
2019-04-06 12:34:32 -Mapped "{[/heat/heat/exprotHeat],methods=[GET]}" onto public void com.bootdo.heat.controller.HeatController.exprotExcel(com.bootdo.heat.vo.HeatVo,javax.servlet.http.HttpServletResponse)
2019-04-06 12:34:32 -Mapped "{[/heat/heat/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatController.edit(java.lang.Integer,org.springframework.ui.Model)
2019-04-06 12:34:32 -Mapped "{[/heat/heatInto],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatIntoController.HeatInto()
2019-04-06 12:34:32 -Mapped "{[/heat/heatInto/exprotHeatIntoExcel],methods=[GET]}" onto public void com.bootdo.heat.controller.HeatIntoController.exprotExcel(com.bootdo.heat.vo.HeatVo,javax.servlet.http.HttpServletResponse)
2019-04-06 12:34:32 -Mapped "{[/heat/heatPrice/add],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatPriceController.add()
2019-04-06 12:34:32 -Mapped "{[/heat/heatPrice/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatPriceController.remove(java.lang.Long)
2019-04-06 12:34:32 -Mapped "{[/heat/heatPrice/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatPriceController.remove(java.lang.Long[])
2019-04-06 12:34:32 -Mapped "{[/heat/heatPrice/update]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatPriceController.update(com.bootdo.heat.domain.HeatPriceDO)
2019-04-06 12:34:32 -Mapped "{[/heat/heatPrice/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.heat.controller.HeatPriceController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-06 12:34:32 -Mapped "{[/heat/heatPrice/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatPriceController.save(com.bootdo.heat.domain.HeatPriceDO)
2019-04-06 12:34:32 -Mapped "{[/heat/heatPrice],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatPriceController.HeatPrice()
2019-04-06 12:34:32 -Mapped "{[/heat/heatPrice/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatPriceController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-06 12:34:32 -Mapped "{[/heat/heatUpLoad],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatUpLoadController.HeatUpLoad()
2019-04-06 12:34:32 -Mapped "{[/heat/heatUpLoad/importHeatExcel]}" onto public java.lang.String com.bootdo.heat.controller.HeatUpLoadController.importHeatExcel(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)
2019-04-06 12:34:32 -Mapped "{[/heat/heatUpLoad/createHeatExcel],methods=[POST]}" onto public java.lang.String com.bootdo.heat.controller.HeatUpLoadController.createHeatExcel(com.bootdo.heat.domain.HeatDO) throws java.lang.Exception
2019-04-06 12:34:32 -Mapped "{[/heat/heatUpLoad/exprotHeatExcel],methods=[GET]}" onto public void com.bootdo.heat.controller.HeatUpLoadController.exprotHeatExcel(com.bootdo.heat.vo.HeatVo,javax.servlet.http.HttpServletResponse)
2019-04-06 12:34:32 -Mapped "{[/moneyList/moneyList/queryAllUserName],methods=[POST]}" onto public java.util.List<com.bootdo.moneyList.damain.MoneyListDO> com.bootdo.moneyList.controller.MoneyListController.getAllUserName(com.bootdo.moneyList.damain.MoneyListDO)
2019-04-06 12:34:32 -Mapped "{[/moneyList/moneyList/queryAllUser],methods=[POST]}" onto public java.util.List<com.bootdo.moneyList.damain.MoneyListDO> com.bootdo.moneyList.controller.MoneyListController.queryAllUser(com.bootdo.moneyList.damain.MoneyListDO)
2019-04-06 12:34:32 -Mapped "{[/moneyList/moneyList],methods=[GET]}" onto java.lang.String com.bootdo.moneyList.controller.MoneyListController.MoneyList()
2019-04-06 12:34:32 -Mapped "{[/moneyList/moneyList/updateMoney],methods=[POST]}" onto public java.util.List<com.bootdo.moneyList.damain.MoneyListDO> com.bootdo.moneyList.controller.MoneyListController.updateMoney(com.bootdo.moneyList.damain.MoneyListDO)
2019-04-06 12:34:32 -Mapped "{[/moneyLog/elecLog/add],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.ElecLogController.add()
2019-04-06 12:34:32 -Mapped "{[/moneyLog/elecLog/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.ElecLogController.remove(java.lang.Long)
2019-04-06 12:34:32 -Mapped "{[/moneyLog/elecLog/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.ElecLogController.remove(java.lang.Long[])
2019-04-06 12:34:32 -Mapped "{[/moneyLog/elecLog/update]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.ElecLogController.update(com.bootdo.moneyLog.domain.ElecLogDO)
2019-04-06 12:34:32 -Mapped "{[/moneyLog/elecLog/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.moneyLog.controller.ElecLogController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-06 12:34:32 -Mapped "{[/moneyLog/elecLog/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.ElecLogController.save(com.bootdo.moneyLog.domain.ElecLogDO)
2019-04-06 12:34:32 -Mapped "{[/moneyLog/elecLog],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.ElecLogController.moneyLog()
2019-04-06 12:34:32 -Mapped "{[/moneyLog/elecLog/exprotElecLog],methods=[GET]}" onto public void com.bootdo.moneyLog.controller.ElecLogController.exprotElecLog(com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-06 12:34:32 -Mapped "{[/moneyLog/elecLog/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.ElecLogController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-06 12:34:32 -Mapped "{[/moneyLog/heatLog/add],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.HeatLogController.add()
2019-04-06 12:34:32 -Mapped "{[/moneyLog/heatLog/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.HeatLogController.remove(java.lang.Long)
2019-04-06 12:34:32 -Mapped "{[/moneyLog/heatLog/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.HeatLogController.remove(java.lang.Long[])
2019-04-06 12:34:32 -Mapped "{[/moneyLog/heatLog/update]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.HeatLogController.update(com.bootdo.moneyLog.domain.HeatLogDO)
2019-04-06 12:34:32 -Mapped "{[/moneyLog/heatLog/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.moneyLog.controller.HeatLogController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-06 12:34:32 -Mapped "{[/moneyLog/heatLog/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.HeatLogController.save(com.bootdo.moneyLog.domain.HeatLogDO)
2019-04-06 12:34:32 -Mapped "{[/moneyLog/heatLog/exprotHeatLog],methods=[GET]}" onto public void com.bootdo.moneyLog.controller.HeatLogController.exprotHeatLog(com.bootdo.moneyLog.vo.HeatLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-06 12:34:32 -Mapped "{[/moneyLog/heatLog],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.HeatLogController.HeatLog()
2019-04-06 12:34:32 -Mapped "{[/moneyLog/heatLog/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.HeatLogController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-06 12:34:32 -Mapped "{[/moneyLog/waterLog/add],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.WaterLogController.add()
2019-04-06 12:34:32 -Mapped "{[/moneyLog/waterLog/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.WaterLogController.remove(java.lang.Long)
2019-04-06 12:34:32 -Mapped "{[/moneyLog/waterLog/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.WaterLogController.remove(java.lang.Long[])
2019-04-06 12:34:32 -Mapped "{[/moneyLog/waterLog/update]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.WaterLogController.update(com.bootdo.moneyLog.domain.WaterLogDO)
2019-04-06 12:34:32 -Mapped "{[/moneyLog/waterLog/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.moneyLog.controller.WaterLogController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-06 12:34:32 -Mapped "{[/moneyLog/waterLog/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.WaterLogController.save(com.bootdo.moneyLog.domain.WaterLogDO)
2019-04-06 12:34:32 -Mapped "{[/moneyLog/waterLog],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.WaterLogController.WaterLog()
2019-04-06 12:34:32 -Mapped "{[/moneyLog/waterLog/exprotWaterLog],methods=[GET]}" onto public void com.bootdo.moneyLog.controller.WaterLogController.exprotWaterLog(com.bootdo.moneyLog.vo.WaterLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-06 12:34:32 -Mapped "{[/moneyLog/waterLog/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.WaterLogController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-06 12:34:32 -Mapped "{[/oa/notify/add],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.add()
2019-04-06 12:34:32 -Mapped "{[/oa/notify/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.remove(java.lang.Long)
2019-04-06 12:34:32 -Mapped "{[/oa/notify/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.remove(java.lang.Long[])
2019-04-06 12:34:32 -Mapped "{[/oa/notify/update]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.update(com.bootdo.oa.domain.NotifyDO)
2019-04-06 12:34:32 -Mapped "{[/oa/notify/read/{id}],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.read(java.lang.Long,org.springframework.ui.Model)
2019-04-06 12:34:32 -Mapped "{[/oa/notify/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.oa.controller.NotifyController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-06 12:34:32 -Mapped "{[/oa/notify/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.save(com.bootdo.oa.domain.NotifyDO)
2019-04-06 12:34:32 -Mapped "{[/oa/notify/message],methods=[GET]}" onto com.bootdo.common.utils.PageUtils com.bootdo.oa.controller.NotifyController.message()
2019-04-06 12:34:32 -Mapped "{[/oa/notify/selfNotify],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.selefNotify()
2019-04-06 12:34:32 -Mapped "{[/oa/notify],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.oaNotify()
2019-04-06 12:34:32 -Mapped "{[/oa/notify/selfList],methods=[GET]}" onto com.bootdo.common.utils.PageUtils com.bootdo.oa.controller.NotifyController.selfList(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-06 12:34:32 -Mapped "{[/oa/notify/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-06 12:34:32 -Mapped "{[/print/print/add],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.add()
2019-04-06 12:34:32 -Mapped "{[/print/print/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.print.controller.PrintController.remove(java.lang.Long)
2019-04-06 12:34:32 -Mapped "{[/print/print/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.print.controller.PrintController.remove(java.lang.Long[])
2019-04-06 12:34:32 -Mapped "{[/print/print/update]}" onto public com.bootdo.common.utils.R com.bootdo.print.controller.PrintController.update(com.bootdo.print.domain.PrintDO)
2019-04-06 12:34:32 -Mapped "{[/print/print/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.print.controller.PrintController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-06 12:34:32 -Mapped "{[/print/print/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.print.controller.PrintController.save(java.lang.String,com.bootdo.print.domain.PrintDO)
2019-04-06 12:34:32 -Mapped "{[/print/print/printEdit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.printEdit(java.lang.Long,org.springframework.ui.Model)
2019-04-06 12:34:32 -Mapped "{[/print/print],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.Print()
2019-04-06 12:34:32 -Mapped "{[/print/print/exprotPrint],methods=[GET]}" onto public void com.bootdo.print.controller.PrintController.exprotPrint(com.bootdo.print.vo.PrintVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-06 12:34:32 -Mapped "{[/print/print/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-06 12:34:32 -Mapped "{[/system/sysDept/add/{pId}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.add(java.lang.Long,org.springframework.ui.Model)
2019-04-06 12:34:32 -Mapped "{[/system/sysDept/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.remove(java.lang.Long)
2019-04-06 12:34:32 -Mapped "{[/system/sysDept/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.remove(java.lang.Long[])
2019-04-06 12:34:32 -Mapped "{[/system/sysDept/update]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.update(com.bootdo.system.domain.DeptDO)
2019-04-06 12:34:32 -Mapped "{[/system/sysDept/list],methods=[GET]}" onto public java.util.List<com.bootdo.system.domain.DeptDO> com.bootdo.system.controller.DeptController.list()
2019-04-06 12:34:32 -Mapped "{[/system/sysDept/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.save(com.bootdo.system.domain.DeptDO)
2019-04-06 12:34:32 -Mapped "{[/system/sysDept/tree],methods=[GET]}" onto public com.bootdo.common.domain.Tree<com.bootdo.system.domain.DeptDO> com.bootdo.system.controller.DeptController.tree()
2019-04-06 12:34:32 -Mapped "{[/system/sysDept/treeView],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.treeView()
2019-04-06 12:34:32 -Mapped "{[/system/sysDept],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.dept()
2019-04-06 12:34:32 -Mapped "{[/system/sysDept/edit/{deptId}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-06 12:34:32 -Mapped "{[/index],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.index(org.springframework.ui.Model)
2019-04-06 12:34:32 -Mapped "{[/main],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.main()
2019-04-06 12:34:32 -Mapped "{[/ || ],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.welcome(org.springframework.ui.Model)
2019-04-06 12:34:32 -Mapped "{[/logout],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.logout()
2019-04-06 12:34:32 -Mapped "{[/login],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.LoginController.ajaxLogin(java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest)
2019-04-06 12:34:32 -Mapped "{[/getVerify],methods=[GET]}" onto public void com.bootdo.system.controller.LoginController.getVerify(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-04-06 12:34:32 -Mapped "{[/login],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.login(org.springframework.ui.Model)
2019-04-06 12:34:32 -Mapped "{[/sys/menu/add/{pId}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.MenuController.add(org.springframework.ui.Model,java.lang.Long)
2019-04-06 12:34:32 -Mapped "{[/sys/menu/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.MenuController.remove(java.lang.Long)
2019-04-06 12:34:32 -Mapped "{[/sys/menu/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.MenuController.update(com.bootdo.system.domain.MenuDO)
2019-04-06 12:34:32 -Mapped "{[/sys/menu/list]}" onto java.util.List<com.bootdo.system.domain.MenuDO> com.bootdo.system.controller.MenuController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-06 12:34:32 -Mapped "{[/sys/menu/save],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.MenuController.save(com.bootdo.system.domain.MenuDO)
2019-04-06 12:34:32 -Mapped "{[/sys/menu/tree/{roleId}],methods=[GET]}" onto com.bootdo.common.domain.Tree<com.bootdo.system.domain.MenuDO> com.bootdo.system.controller.MenuController.tree(java.lang.Long)
2019-04-06 12:34:32 -Mapped "{[/sys/menu/tree],methods=[GET]}" onto com.bootdo.common.domain.Tree<com.bootdo.system.domain.MenuDO> com.bootdo.system.controller.MenuController.tree()
2019-04-06 12:34:32 -Mapped "{[/sys/menu],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.MenuController.menu(org.springframework.ui.Model)
2019-04-06 12:34:32 -Mapped "{[/sys/menu/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.MenuController.edit(org.springframework.ui.Model,java.lang.Long)
2019-04-06 12:34:32 -Mapped "{[/sys/role/add],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.RoleController.add()
2019-04-06 12:34:32 -Mapped "{[/sys/role/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.update(com.bootdo.system.domain.RoleDO)
2019-04-06 12:34:32 -Mapped "{[/sys/role/list],methods=[GET]}" onto java.util.List<com.bootdo.system.domain.RoleDO> com.bootdo.system.controller.RoleController.list()
2019-04-06 12:34:32 -Mapped "{[/sys/role/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.save(java.lang.Long)
2019-04-06 12:34:32 -Mapped "{[/sys/role/save],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.save(com.bootdo.system.domain.RoleDO)
2019-04-06 12:34:32 -Mapped "{[/sys/role/batchRemove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.batchRemove(java.lang.Long[])
2019-04-06 12:34:32 -Mapped "{[/sys/role/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.RoleController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-06 12:34:32 -Mapped "{[/sys/role],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.RoleController.role()
2019-04-06 12:34:32 -Mapped "{[/sys/online/list]}" onto public java.util.List<com.bootdo.system.domain.UserOnline> com.bootdo.system.controller.SessionController.list()
2019-04-06 12:34:32 -Mapped "{[/sys/online],methods=[GET]}" onto public java.lang.String com.bootdo.system.controller.SessionController.online()
2019-04-06 12:34:32 -Mapped "{[/sys/online/sessionList]}" onto public java.util.Collection<org.apache.shiro.session.Session> com.bootdo.system.controller.SessionController.sessionList()
2019-04-06 12:34:32 -Mapped "{[/sys/online/forceLogout/{sessionId}]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.SessionController.forceLogout(java.lang.String,org.springframework.web.servlet.mvc.support.RedirectAttributes)
2019-04-06 12:34:32 -Mapped "{[/sys/user/exit],methods=[POST]}" onto boolean com.bootdo.system.controller.UserController.exit(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-06 12:34:32 -Mapped "{[/sys/user/add],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.add(org.springframework.ui.Model)
2019-04-06 12:34:32 -Mapped "{[/sys/user/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.remove(java.lang.Long)
2019-04-06 12:34:32 -Mapped "{[/sys/user/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.update(com.bootdo.system.domain.UserDO)
2019-04-06 12:34:32 -Mapped "{[/sys/user/list],methods=[GET]}" onto com.bootdo.common.utils.PageUtils com.bootdo.system.controller.UserController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-06 12:34:32 -Mapped "{[/sys/user/save],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.save(com.bootdo.system.domain.UserDO)
2019-04-06 12:34:32 -Mapped "{[/sys/user/batchRemove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.batchRemove(java.lang.Long[])
2019-04-06 12:34:32 -Mapped "{[/sys/user/tree],methods=[GET]}" onto public com.bootdo.common.domain.Tree<com.bootdo.system.domain.DeptDO> com.bootdo.system.controller.UserController.tree()
2019-04-06 12:34:32 -Mapped "{[/sys/user/treeView],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.treeView()
2019-04-06 12:34:32 -Mapped "{[/sys/user/personal],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.personal(org.springframework.ui.Model)
2019-04-06 12:34:32 -Mapped "{[/sys/user/adminResetPwd],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.adminResetPwd(com.bootdo.system.vo.UserVO)
2019-04-06 12:34:32 -Mapped "{[/sys/user/updatePeronal],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.updatePeronal(com.bootdo.system.domain.UserDO)
2019-04-06 12:34:32 -Mapped "{[/sys/user/uploadImg],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.uploadImg(org.springframework.web.multipart.MultipartFile,java.lang.String,javax.servlet.http.HttpServletRequest)
2019-04-06 12:34:32 -Mapped "{[/sys/user/resetPwd],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.resetPwd(com.bootdo.system.vo.UserVO)
2019-04-06 12:34:32 -Mapped "{[/sys/user/resetPwd/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.resetPwd(java.lang.Long,org.springframework.ui.Model)
2019-04-06 12:34:32 -Mapped "{[/sys/user/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.edit(org.springframework.ui.Model,java.lang.Long)
2019-04-06 12:34:32 -Mapped "{[/sys/user],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.user(org.springframework.ui.Model)
2019-04-06 12:34:32 -Mapped "{[/file/downImport/{importType}],methods=[GET]}" onto public void com.bootdo.temple.controller.TempletController.downImport(javax.servlet.http.HttpServletResponse,java.lang.String)
2019-04-06 12:34:32 -Mapped "{[/water/water/add],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterController.add()
2019-04-06 12:34:32 -Mapped "{[/water/water/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterController.remove(java.lang.Long)
2019-04-06 12:34:32 -Mapped "{[/water/water/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterController.remove(java.lang.Long[])
2019-04-06 12:34:32 -Mapped "{[/water/water/update]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterController.update(com.bootdo.water.domain.WaterDO)
2019-04-06 12:34:32 -Mapped "{[/water/water/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.water.controller.WaterController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-06 12:34:32 -Mapped "{[/water/water/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterController.save(com.bootdo.water.domain.WaterDO)
2019-04-06 12:34:32 -Mapped "{[/water/water],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterController.Water()
2019-04-06 12:34:32 -Mapped "{[/water/water/exprotWater],methods=[GET]}" onto public void com.bootdo.water.controller.WaterController.exprotExcel(com.bootdo.water.vo.WaterVo,javax.servlet.http.HttpServletResponse)
2019-04-06 12:34:32 -Mapped "{[/water/water/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-06 12:34:32 -Mapped "{[/water/waterInto],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterIntoController.WaterInto()
2019-04-06 12:34:32 -Mapped "{[/water/waterInto/exprotWaterIntoExcel],methods=[GET]}" onto public void com.bootdo.water.controller.WaterIntoController.exprotExcel(com.bootdo.water.vo.WaterVo,javax.servlet.http.HttpServletResponse)
2019-04-06 12:34:32 -Mapped "{[/water/waterPrice/add],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterPriceController.add()
2019-04-06 12:34:32 -Mapped "{[/water/waterPrice/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterPriceController.remove(java.lang.Long)
2019-04-06 12:34:32 -Mapped "{[/water/waterPrice/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterPriceController.remove(java.lang.Long[])
2019-04-06 12:34:32 -Mapped "{[/water/waterPrice/update]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterPriceController.update(com.bootdo.water.domain.WaterPriceDO)
2019-04-06 12:34:32 -Mapped "{[/water/waterPrice/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.water.controller.WaterPriceController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-06 12:34:32 -Mapped "{[/water/waterPrice/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterPriceController.save(com.bootdo.water.domain.WaterPriceDO)
2019-04-06 12:34:32 -Mapped "{[/water/waterPrice],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterPriceController.WaterPrice()
2019-04-06 12:34:32 -Mapped "{[/water/waterPrice/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterPriceController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-06 12:34:32 -Mapped "{[/water/waterUpLoad/createWaterExcel],methods=[POST]}" onto public java.lang.String com.bootdo.water.controller.WaterUpLoadController.createWaterExcel(com.bootdo.water.domain.WaterDO) throws java.lang.Exception
2019-04-06 12:34:32 -Mapped "{[/water/waterUpLoad/importWaterExcel]}" onto public java.lang.String com.bootdo.water.controller.WaterUpLoadController.importWaterExcel(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)
2019-04-06 12:34:32 -Mapped "{[/water/waterUpLoad],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterUpLoadController.WaterUpLoad()
2019-04-06 12:34:32 -Mapped "{[/water/waterUpLoad/exprotWaterExcel],methods=[GET]}" onto public void com.bootdo.water.controller.WaterUpLoadController.exprotWaterExcel(com.bootdo.water.vo.WaterVo,javax.servlet.http.HttpServletResponse)
2019-04-06 12:34:32 -Mapped "{[/v2/api-docs],methods=[GET],produces=[application/json || application/hal+json]}" onto public org.springframework.http.ResponseEntity<springfox.documentation.spring.web.json.Json> springfox.documentation.swagger2.web.Swagger2Controller.getDocumentation(java.lang.String,javax.servlet.http.HttpServletRequest)
2019-04-06 12:34:32 -Mapped "{[/swagger-resources/configuration/security]}" onto org.springframework.http.ResponseEntity<springfox.documentation.swagger.web.SecurityConfiguration> springfox.documentation.swagger.web.ApiResourceController.securityConfiguration()
2019-04-06 12:34:32 -Mapped "{[/swagger-resources]}" onto org.springframework.http.ResponseEntity<java.util.List<springfox.documentation.swagger.web.SwaggerResource>> springfox.documentation.swagger.web.ApiResourceController.swaggerResources()
2019-04-06 12:34:32 -Mapped "{[/swagger-resources/configuration/ui]}" onto org.springframework.http.ResponseEntity<springfox.documentation.swagger.web.UiConfiguration> springfox.documentation.swagger.web.ApiResourceController.uiConfiguration()
2019-04-06 12:34:32 -Initializing ExecutorService  'messageBrokerTaskScheduler'
2019-04-06 12:34:32 -Mapped URL path [/endpointChat/**] onto handler of type [class org.springframework.web.socket.sockjs.support.SockJsHttpRequestHandler]
2019-04-06 12:34:33 -Initializing ExecutorService  'brokerChannelExecutor'
2019-04-06 12:34:33 -Mapped URL path [/**/favicon.ico] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-04-06 12:34:33 -Looking for @ControllerAdvice: org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@6fdbe764: startup date [Sat Apr 06 12:34:12 CST 2019]; root of context hierarchy
2019-04-06 12:34:34 -Mapped URL path [/webjars/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-04-06 12:34:34 -Mapped URL path [/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-04-06 12:34:34 -Mapped URL path [/files/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-04-06 12:34:34 -Detected @ExceptionHandler methods in BDExceptionHandler
2019-04-06 12:34:34 -[THYMELEAF][main] Template Mode 'LEGACYHTML5' is deprecated. Using Template Mode 'HTML' instead.
2019-04-06 12:34:37 -Registering beans for JMX exposure on startup
2019-04-06 12:34:37 -Bean with name 'dataSource' has been autodetected for JMX exposure
2019-04-06 12:34:37 -Located MBean 'dataSource': registering with JMX server as MBean [com.alibaba.druid.pool:name=dataSource,type=DruidDataSource]
2019-04-06 12:34:37 -Starting beans in phase 2147483647
2019-04-06 12:34:37 -Context refreshed
2019-04-06 12:34:37 -Found 1 custom documentation plugin(s)
2019-04-06 12:34:37 -Scanning for api listing references
2019-04-06 12:34:37 -Generating unique operation named: exprotElecLogUsingGET_1
2019-04-06 12:34:37 -Generating unique operation named: getCountDUsingPOST_1
2019-04-06 12:34:37 -Generating unique operation named: exprotElecLogUsingGET_2
2019-04-06 12:34:37 -Generating unique operation named: getCountDUsingPOST_2
2019-04-06 12:34:37 -Generating unique operation named: exprotElecLogUsingGET_3
2019-04-06 12:34:37 -Generating unique operation named: getCountDUsingPOST_3
2019-04-06 12:34:37 -Generating unique operation named: removeUsingPOST_1
2019-04-06 12:34:37 -Generating unique operation named: addUsingGET_1
2019-04-06 12:34:37 -Generating unique operation named: editUsingGET_1
2019-04-06 12:34:37 -Generating unique operation named: listUsingGET_1
2019-04-06 12:34:38 -Generating unique operation named: removeUsingPOST_2
2019-04-06 12:34:38 -Generating unique operation named: removeUsingPOST_3
2019-04-06 12:34:38 -Generating unique operation named: saveUsingPOST_1
2019-04-06 12:34:38 -Generating unique operation named: updateUsingGET_1
2019-04-06 12:34:38 -Generating unique operation named: updateUsingHEAD_1
2019-04-06 12:34:38 -Generating unique operation named: updateUsingPOST_1
2019-04-06 12:34:38 -Generating unique operation named: updateUsingPUT_1
2019-04-06 12:34:38 -Generating unique operation named: updateUsingPATCH_1
2019-04-06 12:34:38 -Generating unique operation named: updateUsingDELETE_1
2019-04-06 12:34:38 -Generating unique operation named: updateUsingOPTIONS_1
2019-04-06 12:34:38 -Generating unique operation named: updateUsingTRACE_1
2019-04-06 12:34:38 -Generating unique operation named: addUsingGET_2
2019-04-06 12:34:38 -Generating unique operation named: editUsingGET_2
2019-04-06 12:34:38 -Generating unique operation named: listUsingGET_2
2019-04-06 12:34:38 -Generating unique operation named: removeUsingPOST_4
2019-04-06 12:34:38 -Generating unique operation named: removeUsingPOST_5
2019-04-06 12:34:38 -Generating unique operation named: saveUsingPOST_2
2019-04-06 12:34:38 -Generating unique operation named: updateUsingPOST_2
2019-04-06 12:34:38 -Generating unique operation named: exprotExcelUsingGET_1
2019-04-06 12:34:38 -Generating unique operation named: addUsingGET_3
2019-04-06 12:34:38 -Generating unique operation named: editUsingGET_3
2019-04-06 12:34:38 -Generating unique operation named: exprotElecLogUsingGET_4
2019-04-06 12:34:38 -Generating unique operation named: listUsingGET_3
2019-04-06 12:34:38 -Generating unique operation named: removeUsingPOST_6
2019-04-06 12:34:38 -Generating unique operation named: removeUsingPOST_7
2019-04-06 12:34:38 -Generating unique operation named: saveUsingPOST_3
2019-04-06 12:34:38 -Generating unique operation named: updateUsingGET_2
2019-04-06 12:34:38 -Generating unique operation named: updateUsingHEAD_2
2019-04-06 12:34:38 -Generating unique operation named: updateUsingPOST_3
2019-04-06 12:34:38 -Generating unique operation named: updateUsingPUT_2
2019-04-06 12:34:38 -Generating unique operation named: updateUsingPATCH_2
2019-04-06 12:34:38 -Generating unique operation named: updateUsingDELETE_2
2019-04-06 12:34:38 -Generating unique operation named: updateUsingOPTIONS_2
2019-04-06 12:34:38 -Generating unique operation named: updateUsingTRACE_2
2019-04-06 12:34:38 -Generating unique operation named: addUsingGET_4
2019-04-06 12:34:38 -Generating unique operation named: editUsingGET_4
2019-04-06 12:34:38 -Generating unique operation named: listUsingGET_4
2019-04-06 12:34:38 -Generating unique operation named: removeUsingPOST_8
2019-04-06 12:34:38 -Generating unique operation named: removeUsingPOST_9
2019-04-06 12:34:38 -Generating unique operation named: saveUsingPOST_4
2019-04-06 12:34:38 -Generating unique operation named: updateUsingGET_3
2019-04-06 12:34:38 -Generating unique operation named: updateUsingHEAD_3
2019-04-06 12:34:38 -Generating unique operation named: updateUsingPOST_4
2019-04-06 12:34:38 -Generating unique operation named: updateUsingPUT_3
2019-04-06 12:34:38 -Generating unique operation named: updateUsingPATCH_3
2019-04-06 12:34:38 -Generating unique operation named: updateUsingDELETE_3
2019-04-06 12:34:38 -Generating unique operation named: updateUsingOPTIONS_3
2019-04-06 12:34:38 -Generating unique operation named: updateUsingTRACE_3
2019-04-06 12:34:38 -Generating unique operation named: ElecUsingGET_1
2019-04-06 12:34:38 -Generating unique operation named: addUsingGET_5
2019-04-06 12:34:38 -Generating unique operation named: editUsingGET_5
2019-04-06 12:34:38 -Generating unique operation named: listUsingGET_5
2019-04-06 12:34:38 -Generating unique operation named: removeUsingPOST_10
2019-04-06 12:34:38 -Generating unique operation named: removeUsingPOST_11
2019-04-06 12:34:38 -Generating unique operation named: saveUsingPOST_5
2019-04-06 12:34:38 -Generating unique operation named: updateUsingGET_4
2019-04-06 12:34:38 -Generating unique operation named: updateUsingHEAD_4
2019-04-06 12:34:38 -Generating unique operation named: updateUsingPOST_5
2019-04-06 12:34:38 -Generating unique operation named: updateUsingPUT_4
2019-04-06 12:34:38 -Generating unique operation named: updateUsingPATCH_4
2019-04-06 12:34:38 -Generating unique operation named: updateUsingDELETE_4
2019-04-06 12:34:38 -Generating unique operation named: updateUsingOPTIONS_4
2019-04-06 12:34:38 -Generating unique operation named: updateUsingTRACE_4
2019-04-06 12:34:38 -Generating unique operation named: editUsingGET_6
2019-04-06 12:34:38 -Generating unique operation named: listUsingGET_6
2019-04-06 12:34:38 -Generating unique operation named: updateUsingPOST_6
2019-04-06 12:34:38 -Generating unique operation named: addUsingGET_6
2019-04-06 12:34:38 -Generating unique operation named: editUsingGET_7
2019-04-06 12:34:38 -Generating unique operation named: exprotExcelUsingGET_2
2019-04-06 12:34:38 -Generating unique operation named: listUsingGET_7
2019-04-06 12:34:38 -Generating unique operation named: removeUsingPOST_12
2019-04-06 12:34:38 -Generating unique operation named: removeUsingPOST_13
2019-04-06 12:34:38 -Generating unique operation named: saveUsingPOST_6
2019-04-06 12:34:38 -Generating unique operation named: updateUsingGET_5
2019-04-06 12:34:38 -Generating unique operation named: updateUsingHEAD_5
2019-04-06 12:34:38 -Generating unique operation named: updateUsingPOST_7
2019-04-06 12:34:38 -Generating unique operation named: updateUsingPUT_5
2019-04-06 12:34:38 -Generating unique operation named: updateUsingPATCH_5
2019-04-06 12:34:38 -Generating unique operation named: updateUsingDELETE_5
2019-04-06 12:34:38 -Generating unique operation named: updateUsingOPTIONS_5
2019-04-06 12:34:38 -Generating unique operation named: updateUsingTRACE_5
2019-04-06 12:34:38 -Generating unique operation named: exprotExcelUsingGET_3
2019-04-06 12:34:38 -Generating unique operation named: addUsingGET_7
2019-04-06 12:34:38 -Generating unique operation named: editUsingGET_8
2019-04-06 12:34:38 -Generating unique operation named: listUsingGET_8
2019-04-06 12:34:38 -Generating unique operation named: removeUsingPOST_14
2019-04-06 12:34:38 -Generating unique operation named: removeUsingPOST_15
2019-04-06 12:34:38 -Generating unique operation named: saveUsingPOST_7
2019-04-06 12:34:38 -Generating unique operation named: updateUsingGET_6
2019-04-06 12:34:38 -Generating unique operation named: updateUsingHEAD_6
2019-04-06 12:34:38 -Generating unique operation named: updateUsingPOST_8
2019-04-06 12:34:38 -Generating unique operation named: updateUsingPUT_6
2019-04-06 12:34:38 -Generating unique operation named: updateUsingPATCH_6
2019-04-06 12:34:38 -Generating unique operation named: updateUsingDELETE_6
2019-04-06 12:34:38 -Generating unique operation named: updateUsingOPTIONS_6
2019-04-06 12:34:38 -Generating unique operation named: updateUsingTRACE_6
2019-04-06 12:34:38 -Generating unique operation named: addUsingGET_8
2019-04-06 12:34:38 -Generating unique operation named: editUsingGET_9
2019-04-06 12:34:38 -Generating unique operation named: listUsingGET_9
2019-04-06 12:34:38 -Generating unique operation named: removeUsingPOST_16
2019-04-06 12:34:38 -Generating unique operation named: removeUsingPOST_17
2019-04-06 12:34:38 -Generating unique operation named: saveUsingPOST_8
2019-04-06 12:34:38 -Generating unique operation named: updateUsingGET_7
2019-04-06 12:34:38 -Generating unique operation named: updateUsingHEAD_7
2019-04-06 12:34:38 -Generating unique operation named: updateUsingPOST_9
2019-04-06 12:34:38 -Generating unique operation named: updateUsingPUT_7
2019-04-06 12:34:38 -Generating unique operation named: updateUsingPATCH_7
2019-04-06 12:34:38 -Generating unique operation named: updateUsingDELETE_7
2019-04-06 12:34:38 -Generating unique operation named: updateUsingOPTIONS_7
2019-04-06 12:34:38 -Generating unique operation named: updateUsingTRACE_7
2019-04-06 12:34:38 -Generating unique operation named: addUsingGET_9
2019-04-06 12:34:38 -Generating unique operation named: editUsingGET_10
2019-04-06 12:34:38 -Generating unique operation named: infoUsingGET_1
2019-04-06 12:34:38 -Generating unique operation named: infoUsingHEAD_1
2019-04-06 12:34:38 -Generating unique operation named: infoUsingPOST_1
2019-04-06 12:34:38 -Generating unique operation named: infoUsingPUT_1
2019-04-06 12:34:38 -Generating unique operation named: infoUsingPATCH_1
2019-04-06 12:34:38 -Generating unique operation named: infoUsingDELETE_1
2019-04-06 12:34:38 -Generating unique operation named: infoUsingOPTIONS_1
2019-04-06 12:34:38 -Generating unique operation named: infoUsingTRACE_1
2019-04-06 12:34:38 -Generating unique operation named: listUsingGET_10
2019-04-06 12:34:38 -Generating unique operation named: removeUsingPOST_18
2019-04-06 12:34:38 -Generating unique operation named: removeUsingPOST_19
2019-04-06 12:34:38 -Generating unique operation named: saveUsingPOST_9
2019-04-06 12:34:38 -Generating unique operation named: updateUsingPOST_10
2019-04-06 12:34:39 -Generating unique operation named: listUsingGET_11
2019-04-06 12:34:39 -Generating unique operation named: removeUsingPOST_20
2019-04-06 12:34:39 -Generating unique operation named: welcomeUsingGET_1
2019-04-06 12:34:39 -Generating unique operation named: addUsingGET_10
2019-04-06 12:34:39 -Generating unique operation named: editUsingGET_11
2019-04-06 12:34:39 -Generating unique operation named: listUsingGET_12
2019-04-06 12:34:39 -Generating unique operation named: removeUsingPOST_21
2019-04-06 12:34:39 -Generating unique operation named: saveUsingPOST_10
2019-04-06 12:34:39 -Generating unique operation named: treeUsingGET_1
2019-04-06 12:34:39 -Generating unique operation named: treeUsingGET_2
2019-04-06 12:34:39 -Generating unique operation named: updateUsingPOST_11
2019-04-06 12:34:39 -Generating unique operation named: addUsingGET_11
2019-04-06 12:34:39 -Generating unique operation named: editUsingGET_12
2019-04-06 12:34:39 -Generating unique operation named: listUsingGET_13
2019-04-06 12:34:39 -Generating unique operation named: removeUsingPOST_22
2019-04-06 12:34:39 -Generating unique operation named: removeUsingPOST_23
2019-04-06 12:34:39 -Generating unique operation named: saveUsingPOST_11
2019-04-06 12:34:39 -Generating unique operation named: updateUsingGET_8
2019-04-06 12:34:39 -Generating unique operation named: updateUsingHEAD_8
2019-04-06 12:34:39 -Generating unique operation named: updateUsingPOST_12
2019-04-06 12:34:39 -Generating unique operation named: updateUsingPUT_8
2019-04-06 12:34:39 -Generating unique operation named: updateUsingPATCH_8
2019-04-06 12:34:39 -Generating unique operation named: updateUsingDELETE_8
2019-04-06 12:34:39 -Generating unique operation named: updateUsingOPTIONS_8
2019-04-06 12:34:39 -Generating unique operation named: updateUsingTRACE_8
2019-04-06 12:34:39 -Generating unique operation named: addUsingGET_12
2019-04-06 12:34:39 -Generating unique operation named: editUsingGET_13
2019-04-06 12:34:39 -Generating unique operation named: listUsingGET_14
2019-04-06 12:34:39 -Generating unique operation named: removeUsingPOST_24
2019-04-06 12:34:39 -Generating unique operation named: removeUsingPOST_25
2019-04-06 12:34:39 -Generating unique operation named: saveUsingPOST_12
2019-04-06 12:34:39 -Generating unique operation named: updateUsingGET_9
2019-04-06 12:34:39 -Generating unique operation named: updateUsingHEAD_9
2019-04-06 12:34:39 -Generating unique operation named: updateUsingPOST_13
2019-04-06 12:34:39 -Generating unique operation named: updateUsingPUT_9
2019-04-06 12:34:39 -Generating unique operation named: updateUsingPATCH_9
2019-04-06 12:34:39 -Generating unique operation named: updateUsingDELETE_9
2019-04-06 12:34:39 -Generating unique operation named: updateUsingOPTIONS_9
2019-04-06 12:34:39 -Generating unique operation named: updateUsingTRACE_9
2019-04-06 12:34:39 -Generating unique operation named: addUsingGET_13
2019-04-06 12:34:39 -Generating unique operation named: batchRemoveUsingPOST_1
2019-04-06 12:34:39 -Generating unique operation named: editUsingGET_14
2019-04-06 12:34:39 -Generating unique operation named: listUsingGET_15
2019-04-06 12:34:39 -Generating unique operation named: saveUsingPOST_13
2019-04-06 12:34:39 -Generating unique operation named: saveUsingPOST_14
2019-04-06 12:34:39 -Generating unique operation named: updateUsingPOST_14
2019-04-06 12:34:39 -Generating unique operation named: listUsingGET_16
2019-04-06 12:34:39 -Generating unique operation named: listUsingHEAD_1
2019-04-06 12:34:39 -Generating unique operation named: listUsingPOST_1
2019-04-06 12:34:39 -Generating unique operation named: listUsingPUT_1
2019-04-06 12:34:39 -Generating unique operation named: listUsingPATCH_1
2019-04-06 12:34:39 -Generating unique operation named: listUsingDELETE_1
2019-04-06 12:34:39 -Generating unique operation named: listUsingOPTIONS_1
2019-04-06 12:34:39 -Generating unique operation named: listUsingTRACE_1
2019-04-06 12:34:39 -Generating unique operation named: addUsingGET_14
2019-04-06 12:34:39 -Generating unique operation named: batchRemoveUsingPOST_2
2019-04-06 12:34:39 -Generating unique operation named: editUsingGET_15
2019-04-06 12:34:39 -Generating unique operation named: listUsingGET_17
2019-04-06 12:34:39 -Generating unique operation named: removeUsingPOST_26
2019-04-06 12:34:39 -Generating unique operation named: saveUsingPOST_15
2019-04-06 12:34:39 -Generating unique operation named: treeUsingGET_3
2019-04-06 12:34:39 -Generating unique operation named: treeViewUsingGET_1
2019-04-06 12:34:39 -Generating unique operation named: updateUsingPOST_15
2019-04-06 12:34:39 -Generating unique operation named: addUsingGET_15
2019-04-06 12:34:39 -Generating unique operation named: editUsingGET_16
2019-04-06 12:34:39 -Generating unique operation named: exprotExcelUsingGET_4
2019-04-06 12:34:39 -Generating unique operation named: listUsingGET_18
2019-04-06 12:34:39 -Generating unique operation named: removeUsingPOST_27
2019-04-06 12:34:39 -Generating unique operation named: removeUsingPOST_28
2019-04-06 12:34:39 -Generating unique operation named: saveUsingPOST_16
2019-04-06 12:34:39 -Generating unique operation named: updateUsingGET_10
2019-04-06 12:34:39 -Generating unique operation named: updateUsingHEAD_10
2019-04-06 12:34:39 -Generating unique operation named: updateUsingPOST_16
2019-04-06 12:34:39 -Generating unique operation named: updateUsingPUT_10
2019-04-06 12:34:39 -Generating unique operation named: updateUsingPATCH_10
2019-04-06 12:34:39 -Generating unique operation named: updateUsingDELETE_10
2019-04-06 12:34:39 -Generating unique operation named: updateUsingOPTIONS_10
2019-04-06 12:34:39 -Generating unique operation named: updateUsingTRACE_10
2019-04-06 12:34:39 -Generating unique operation named: exprotExcelUsingGET_5
2019-04-06 12:34:39 -Generating unique operation named: addUsingGET_16
2019-04-06 12:34:39 -Generating unique operation named: editUsingGET_17
2019-04-06 12:34:39 -Generating unique operation named: listUsingGET_19
2019-04-06 12:34:39 -Generating unique operation named: removeUsingPOST_29
2019-04-06 12:34:39 -Generating unique operation named: removeUsingPOST_30
2019-04-06 12:34:39 -Generating unique operation named: saveUsingPOST_17
2019-04-06 12:34:39 -Generating unique operation named: updateUsingGET_11
2019-04-06 12:34:39 -Generating unique operation named: updateUsingHEAD_11
2019-04-06 12:34:39 -Generating unique operation named: updateUsingPOST_17
2019-04-06 12:34:39 -Generating unique operation named: updateUsingPUT_11
2019-04-06 12:34:39 -Generating unique operation named: updateUsingPATCH_11
2019-04-06 12:34:39 -Generating unique operation named: updateUsingDELETE_11
2019-04-06 12:34:39 -Generating unique operation named: updateUsingOPTIONS_11
2019-04-06 12:34:39 -Generating unique operation named: updateUsingTRACE_11
2019-04-06 12:34:40 -Generating unique operation named: addUsingGET_17
2019-04-06 12:34:40 -Generating unique operation named: editUsingGET_18
2019-04-06 12:34:40 -Generating unique operation named: listUsingGET_20
2019-04-06 12:34:40 -Generating unique operation named: removeUsingPOST_31
2019-04-06 12:34:40 -Generating unique operation named: removeUsingPOST_32
2019-04-06 12:34:40 -Generating unique operation named: saveUsingPOST_18
2019-04-06 12:34:40 -Generating unique operation named: updateUsingGET_12
2019-04-06 12:34:40 -Generating unique operation named: updateUsingHEAD_12
2019-04-06 12:34:40 -Generating unique operation named: updateUsingPOST_18
2019-04-06 12:34:40 -Generating unique operation named: updateUsingPUT_12
2019-04-06 12:34:40 -Generating unique operation named: updateUsingPATCH_12
2019-04-06 12:34:40 -Generating unique operation named: updateUsingDELETE_12
2019-04-06 12:34:40 -Generating unique operation named: updateUsingOPTIONS_12
2019-04-06 12:34:40 -Generating unique operation named: updateUsingTRACE_12
2019-04-06 12:34:40 -Starting Quartz Scheduler now
2019-04-06 12:34:40 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED started.
2019-04-06 12:34:40 -Starting...
2019-04-06 12:34:40 -BrokerAvailabilityEvent[available=true, SimpleBrokerMessageHandler [DefaultSubscriptionRegistry[cache[0 destination(s)], registry[0 sessions]]]]
2019-04-06 12:34:40 -Started.
2019-04-06 12:34:40 -Starting ProtocolHandler ["http-nio-8081"]
2019-04-06 12:34:40 -Failed to start connector [Connector[HTTP/1.1-8081]]
org.apache.catalina.LifecycleException: Failed to start component [Connector[HTTP/1.1-8081]]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:167)
	at org.apache.catalina.core.StandardService.addConnector(StandardService.java:225)
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.addPreviouslyRemovedConnectors(TomcatWebServer.java:256)
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.start(TomcatWebServer.java:198)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.startWebServer(ServletWebServerApplicationContext.java:300)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.finishRefresh(ServletWebServerApplicationContext.java:162)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:553)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:140)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:759)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:395)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:327)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1255)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1243)
	at com.bootdo.BootdoApplication.main(BootdoApplication.java:21)
Caused by: org.apache.catalina.LifecycleException: Protocol handler start failed
	at org.apache.catalina.connector.Connector.startInternal(Connector.java:1020)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:150)
	... 13 common frames omitted
Caused by: java.net.BindException: Address already in use: bind
	at sun.nio.ch.Net.bind0(Native Method)
	at sun.nio.ch.Net.bind(Unknown Source)
	at sun.nio.ch.Net.bind(Unknown Source)
	at sun.nio.ch.ServerSocketChannelImpl.bind(Unknown Source)
	at sun.nio.ch.ServerSocketAdaptor.bind(Unknown Source)
	at org.apache.tomcat.util.net.NioEndpoint.bind(NioEndpoint.java:210)
	at org.apache.tomcat.util.net.AbstractEndpoint.start(AbstractEndpoint.java:1150)
	at org.apache.coyote.AbstractProtocol.start(AbstractProtocol.java:591)
	at org.apache.catalina.connector.Connector.startInternal(Connector.java:1018)
	... 14 common frames omitted
2019-04-06 12:34:40 -Pausing ProtocolHandler ["http-nio-8081"]
2019-04-06 12:34:40 -Stopping service [Tomcat]
2019-04-06 12:34:40 -The stop() method was called on component [StandardServer[-1]] after stop() had already been called. The second call will be ignored.
2019-04-06 12:34:40 -Stopping ProtocolHandler ["http-nio-8081"]
2019-04-06 12:34:40 -Destroying ProtocolHandler ["http-nio-8081"]
2019-04-06 12:34:40 -

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2019-04-06 12:34:40 -

***************************
APPLICATION FAILED TO START
***************************

Description:

The Tomcat connector configured to listen on port 8081 failed to start. The port may already be in use or the connector may be misconfigured.

Action:

Verify the connector's configuration, identify and stop any process that's listening on port 8081, or configure this application to listen on another port.

2019-04-06 12:34:40 -Closing org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@6fdbe764: startup date [Sat Apr 06 12:34:12 CST 2019]; root of context hierarchy
2019-04-06 12:34:40 -Stopping beans in phase 2147483647
2019-04-06 12:34:40 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED paused.
2019-04-06 12:34:40 -Stopping...
2019-04-06 12:34:40 -BrokerAvailabilityEvent[available=false, SimpleBrokerMessageHandler [DefaultSubscriptionRegistry[cache[0 destination(s)], registry[0 sessions]]]]
2019-04-06 12:34:40 -Stopped.
2019-04-06 12:34:40 -Unregistering JMX-exposed beans on shutdown
2019-04-06 12:34:40 -Unregistering JMX-exposed beans
2019-04-06 12:34:40 -Shutting down ExecutorService 'brokerChannelExecutor'
2019-04-06 12:34:40 -Shutting down ExecutorService 'messageBrokerTaskScheduler'
2019-04-06 12:34:40 -Shutting down ExecutorService 'clientOutboundChannelExecutor'
2019-04-06 12:34:40 -Shutting down ExecutorService 'clientInboundChannelExecutor'
2019-04-06 12:34:40 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED shutting down.
2019-04-06 12:34:40 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED paused.
2019-04-06 12:34:40 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED shutdown complete.
2019-04-06 12:34:40 -Shutting down Quartz Scheduler
2019-04-06 12:38:15 -Starting BootdoApplication on ZJZL-20180906VX with PID 5536 (D:\eclipse2018-work\bootdo\target\classes started by Administrator in D:\eclipse2018-work\bootdo)
2019-04-06 12:38:15 -Running with Spring Boot v2.0.3.RELEASE, Spring v5.0.7.RELEASE
2019-04-06 12:38:15 -The following profiles are active: dev
2019-04-06 12:38:15 -Refreshing org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@6fdbe764: startup date [Sat Apr 06 12:38:15 CST 2019]; root of context hierarchy
2019-04-06 12:38:18 -Multiple Spring Data modules found, entering strict repository configuration mode!
2019-04-06 12:38:20 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$d6c6ee3] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-06 12:38:20 -Bean 'shiroConfig' of type [com.bootdo.system.config.ShiroConfig$$EnhancerBySpringCGLIB$$ffc59d8a] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-06 12:38:22 -Bean 'userRealm' of type [com.bootdo.system.shiro.UserRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-06 12:38:22 -Bean 'cacheManager2' of type [net.sf.ehcache.CacheManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-06 12:38:22 -Bean 'ehCacheManager' of type [org.apache.shiro.cache.ehcache.EhCacheManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-06 12:38:22 -Cache with name 'com.bootdo.system.shiro.UserRealm.authorizationCache' does not yet exist.  Creating now.
2019-04-06 12:38:22 -Added EhCache named [com.bootdo.system.shiro.UserRealm.authorizationCache]
2019-04-06 12:38:22 -Bean 'sessionDAO' of type [org.apache.shiro.session.mgt.eis.MemorySessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-06 12:38:22 -Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-06 12:38:23 -Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-06 12:38:23 -Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-06 12:38:24 -Tomcat initialized with port(s): 8081 (http)
2019-04-06 12:38:24 -Initializing ProtocolHandler ["http-nio-8081"]
2019-04-06 12:38:24 -Starting service [Tomcat]
2019-04-06 12:38:24 -Starting Servlet Engine: Apache Tomcat/8.5.31
2019-04-06 12:38:24 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [C:\Program Files\Java\jre1.8.0_131\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:/Program Files/Java/jre1.8.0_131/bin/server;C:/Program Files/Java/jre1.8.0_131/bin;C:/Program Files/Java/jre1.8.0_131/lib/amd64;C:\ProgramData\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Windows\System32\OpenSSH\;D:\pbb\pycSafefile\x64;D:\pbb\PBB Reader\x64;C:\Program Files\MySQL\MySQL Utilities 1.6\;D:\MAVEN\apache-maven-3.6.0\bin;D:\GIT\Git\cmd;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;;C:\Users\Administrator\Desktop;;.]
2019-04-06 12:38:24 -Initializing Spring embedded WebApplicationContext
2019-04-06 12:38:24 -Root WebApplicationContext: initialization completed in 9446 ms
2019-04-06 12:38:25 -Mapping filter: 'characterEncodingFilter' to: [/*]
2019-04-06 12:38:25 -Mapping filter: 'hiddenHttpMethodFilter' to: [/*]
2019-04-06 12:38:25 -Mapping filter: 'httpPutFormContentFilter' to: [/*]
2019-04-06 12:38:25 -Mapping filter: 'requestContextFilter' to: [/*]
2019-04-06 12:38:25 -Filter xssFilter was not registered (disabled)
2019-04-06 12:38:25 -Mapping filter: 'webStatFilter' to urls: [/*]
2019-04-06 12:38:25 -Mapping filter: 'shiroFilterFactoryBean' to: [/*]
2019-04-06 12:38:25 -Servlet statViewServlet mapped to [/druid/*]
2019-04-06 12:38:25 -Servlet dispatcherServlet mapped to [/]
2019-04-06 12:38:29 -ApplicationContext registed-->org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@6fdbe764: startup date [Sat Apr 06 12:38:15 CST 2019]; root of context hierarchy
2019-04-06 12:38:29 -Using default implementation for ThreadExecutor
2019-04-06 12:38:29 -Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2019-04-06 12:38:29 -Quartz Scheduler v.2.2.1 created.
2019-04-06 12:38:29 -RAMJobStore initialized.
2019-04-06 12:38:29 -Scheduler meta-data: Quartz Scheduler (v2.2.1) 'schedulerFactoryBean' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2019-04-06 12:38:29 -Quartz scheduler 'schedulerFactoryBean' initialized from an externally provided properties instance.
2019-04-06 12:38:29 -Quartz scheduler version: 2.2.1
2019-04-06 12:38:29 -JobFactory set to: com.bootdo.common.quartz.factory.JobFactory@5940b14e
2019-04-06 12:38:30 -Initializing ExecutorService  'clientInboundChannelExecutor'
2019-04-06 12:38:30 -Initializing ExecutorService  'clientOutboundChannelExecutor'
2019-04-06 12:38:33 -Mapped "{[/charts/countDD/exportCountDD],methods=[GET]}" onto public void com.bootdo.charts.controller.countDDController.exprotElecLog(com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-06 12:38:33 -Mapped "{[/charts/countDD/getCountDD],methods=[POST]}" onto public com.bootdo.charts.vo.CountDayVo com.bootdo.charts.controller.countDDController.getCountD(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo,javax.servlet.http.HttpServletRequest)
2019-04-06 12:38:33 -Mapped "{[/charts/countDD/tableDD],methods=[POST]}" onto public java.lang.String com.bootdo.charts.controller.countDDController.tableDD()
2019-04-06 12:38:33 -Mapped "{[/charts/countDD],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.countDDController.countDD()
2019-04-06 12:38:33 -Mapped "{[/charts/countMM],methods=[GET]}" onto java.lang.String com.bootdo.charts.controller.countMMController.countMM()
2019-04-06 12:38:33 -Mapped "{[/charts/countMM/exportCountMM],methods=[GET]}" onto public void com.bootdo.charts.controller.countMMController.exprotElecLog(com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-06 12:38:33 -Mapped "{[/charts/countMM/getCountMM],methods=[POST]}" onto public void com.bootdo.charts.controller.countMMController.getCountMM(org.springframework.ui.Model,com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo,javax.servlet.http.HttpServletRequest)
2019-04-06 12:38:33 -Mapped "{[/charts/countOwe],methods=[GET]}" onto java.lang.String com.bootdo.charts.controller.countOweController.countOwe()
2019-04-06 12:38:33 -Mapped "{[/charts/countOwe/getCountOwe],methods=[POST]}" onto public com.bootdo.charts.vo.CountOweVo com.bootdo.charts.controller.countOweController.getCountD(com.bootdo.elec.vo.ElecVo,com.bootdo.water.vo.WaterVo,com.bootdo.heat.vo.HeatVo,javax.servlet.http.HttpServletRequest)
2019-04-06 12:38:33 -Mapped "{[/charts/countRun/exportCountRun],methods=[GET]}" onto public void com.bootdo.charts.controller.countRunController.exprotElecLog(com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-06 12:38:33 -Mapped "{[/charts/countRun],methods=[GET]}" onto java.lang.String com.bootdo.charts.controller.countRunController.countRun()
2019-04-06 12:38:33 -Mapped "{[/charts/countRun/getCountRun],methods=[POST]}" onto public int com.bootdo.charts.controller.countRunController.getCountD(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo)
2019-04-06 12:38:33 -Mapped "{[/charts/countYY/exportCountYY],methods=[GET]}" onto public void com.bootdo.charts.controller.countYYController.exprotElecLog(com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-06 12:38:33 -Mapped "{[/charts/countYY],methods=[GET]}" onto java.lang.String com.bootdo.charts.controller.countYYController.countYY()
2019-04-06 12:38:33 -Mapped "{[/charts/countYY/getCountYY],methods=[POST]}" onto public int com.bootdo.charts.controller.countYYController.getCountD(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo)
2019-04-06 12:38:33 -Mapped "{[/common/dict/add],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.add()
2019-04-06 12:38:33 -Mapped "{[/common/dict/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.remove(java.lang.Long)
2019-04-06 12:38:33 -Mapped "{[/common/dict/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.remove(java.lang.Long[])
2019-04-06 12:38:33 -Mapped "{[/common/dict/update]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.update(com.bootdo.common.domain.DictDO)
2019-04-06 12:38:33 -Mapped "{[/common/dict/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.common.controller.DictController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-06 12:38:33 -Mapped "{[/common/dict/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.save(com.bootdo.common.domain.DictDO)
2019-04-06 12:38:33 -Mapped "{[/common/dict/type],methods=[GET]}" onto public java.util.List<com.bootdo.common.domain.DictDO> com.bootdo.common.controller.DictController.listType()
2019-04-06 12:38:33 -Mapped "{[/common/dict],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.dict()
2019-04-06 12:38:33 -Mapped "{[/common/dict/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-06 12:38:33 -Mapped "{[/common/dict/list/{type}],methods=[GET]}" onto public java.util.List<com.bootdo.common.domain.DictDO> com.bootdo.common.controller.DictController.listByType(java.lang.String)
2019-04-06 12:38:33 -Mapped "{[/common/dict/add/{type}/{description}],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.addD(org.springframework.ui.Model,java.lang.String,java.lang.String)
2019-04-06 12:38:33 -Mapped "{[/common/sysFile/add],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.FileController.add()
2019-04-06 12:38:33 -Mapped "{[/common/sysFile/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.remove(java.lang.Long,javax.servlet.http.HttpServletRequest)
2019-04-06 12:38:33 -Mapped "{[/common/sysFile/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.remove(java.lang.Long[])
2019-04-06 12:38:33 -Mapped "{[/common/sysFile/update]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.update(com.bootdo.common.domain.FileDO)
2019-04-06 12:38:33 -Mapped "{[/common/sysFile/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.common.controller.FileController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-06 12:38:33 -Mapped "{[/common/sysFile/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.save(com.bootdo.common.domain.FileDO)
2019-04-06 12:38:33 -Mapped "{[/common/sysFile/info/{id}]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.info(java.lang.Long)
2019-04-06 12:38:33 -Mapped "{[/common/sysFile/edit],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.FileController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-06 12:38:33 -Mapped "{[/common/sysFile/upload],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.FileController.upload(org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpServletRequest)
2019-04-06 12:38:33 -Mapped "{[/common/sysFile],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.FileController.sysFile(org.springframework.ui.Model)
2019-04-06 12:38:33 -Mapped "{[/common/generator/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.GeneratorController.update(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-06 12:38:33 -Mapped "{[/common/generator/list],methods=[GET]}" onto java.util.List<java.util.Map<java.lang.String, java.lang.Object>> com.bootdo.common.controller.GeneratorController.list()
2019-04-06 12:38:33 -Mapped "{[/common/generator/code/{tableName}]}" onto public void com.bootdo.common.controller.GeneratorController.code(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String) throws java.io.IOException
2019-04-06 12:38:33 -Mapped "{[/common/generator],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.GeneratorController.generator()
2019-04-06 12:38:33 -Mapped "{[/common/generator/edit],methods=[GET]}" onto public java.lang.String com.bootdo.common.controller.GeneratorController.edit(org.springframework.ui.Model)
2019-04-06 12:38:33 -Mapped "{[/common/generator/batchCode]}" onto public void com.bootdo.common.controller.GeneratorController.batchCode(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String) throws java.io.IOException
2019-04-06 12:38:33 -Mapped "{[/common/job/add],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.JobController.add()
2019-04-06 12:38:33 -Mapped "{[/common/job/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.remove(java.lang.Long)
2019-04-06 12:38:33 -Mapped "{[/common/job/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.remove(java.lang.Long[])
2019-04-06 12:38:33 -Mapped "{[/common/job/update],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.update(com.bootdo.common.domain.TaskDO)
2019-04-06 12:38:33 -Mapped "{[/common/job/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.common.controller.JobController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-06 12:38:33 -Mapped "{[/common/job/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.save(com.bootdo.common.domain.TaskDO)
2019-04-06 12:38:33 -Mapped "{[/common/job/info/{id}]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.info(java.lang.Long)
2019-04-06 12:38:33 -Mapped "{[/common/job/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.JobController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-06 12:38:33 -Mapped "{[/common/job],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.JobController.taskScheduleJob()
2019-04-06 12:38:33 -Mapped "{[/common/job/changeJobStatus],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.changeJobStatus(java.lang.Long,java.lang.String)
2019-04-06 12:38:33 -Mapped "{[/common/log/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.LogController.remove(java.lang.Long)
2019-04-06 12:38:33 -Mapped "{[/common/log],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.LogController.log()
2019-04-06 12:38:33 -Mapped "{[/common/log/list],methods=[GET]}" onto com.bootdo.common.domain.PageDO<com.bootdo.common.domain.LogDO> com.bootdo.common.controller.LogController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-06 12:38:33 -Mapped "{[/common/log/batchRemove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.LogController.batchRemove(java.lang.Long[])
2019-04-06 12:38:33 -Mapped "{[/common/long],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.LongController.Long()
2019-04-06 12:38:33 -Mapped "{[/common/time],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.TimeController.Time()
2019-04-06 12:38:33 -Mapped "{[/error]}" onto public com.bootdo.common.utils.R com.bootdo.common.exception.MainsiteErrorController.handleError(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-04-06 12:38:33 -Mapped "{[/error],produces=[text/html]}" onto public org.springframework.web.servlet.ModelAndView com.bootdo.common.exception.MainsiteErrorController.errorHtml(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-04-06 12:38:33 -Mapped "{[/elec/elec/add],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecController.add()
2019-04-06 12:38:33 -Mapped "{[/elec/elec/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.remove(java.lang.Long)
2019-04-06 12:38:33 -Mapped "{[/elec/elec/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.remove(java.lang.Long[])
2019-04-06 12:38:33 -Mapped "{[/elec/elec/update],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.update(com.bootdo.elec.domain.ElecDO)
2019-04-06 12:38:33 -Mapped "{[/elec/elec/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.elec.controller.ElecController.list(java.util.Map<java.lang.String, java.lang.Object>,com.bootdo.elec.domain.ElecDO)
2019-04-06 12:38:33 -Mapped "{[/elec/elec/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.save(com.bootdo.elec.domain.ElecDO)
2019-04-06 12:38:33 -Mapped "{[/elec/elec/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-06 12:38:33 -Mapped "{[/elec/elec/exprotElec],methods=[GET]}" onto public void com.bootdo.elec.controller.ElecController.exprotExcel(com.bootdo.elec.vo.ElecVo,javax.servlet.http.HttpServletResponse)
2019-04-06 12:38:33 -Mapped "{[/elec/elec],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecController.Elec()
2019-04-06 12:38:33 -Mapped "{[/elec/elecInto/importElecIntoExcel],methods=[POST]}" onto public java.util.Map<java.lang.String, java.lang.Object> com.bootdo.elec.controller.ElecIntoController.importElecIntoExcel(org.springframework.web.multipart.MultipartFile,com.bootdo.elec.vo.ElecVo) throws java.lang.Exception
2019-04-06 12:38:33 -Mapped "{[/elec/elecInto/exprotElecIntoExcel],methods=[GET]}" onto public void com.bootdo.elec.controller.ElecIntoController.exprotExcel(com.bootdo.elec.vo.ElecVo,javax.servlet.http.HttpServletResponse)
2019-04-06 12:38:33 -Mapped "{[/elec/elecInto],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecIntoController.ElecInto()
2019-04-06 12:38:33 -Mapped "{[/elec/elecPrice/add],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecPriceController.add()
2019-04-06 12:38:33 -Mapped "{[/elec/elecPrice/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecPriceController.remove(java.lang.Long)
2019-04-06 12:38:33 -Mapped "{[/elec/elecPrice/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecPriceController.remove(java.lang.Long[])
2019-04-06 12:38:33 -Mapped "{[/elec/elecPrice/update]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecPriceController.update(com.bootdo.elec.domain.ElecPriceDO)
2019-04-06 12:38:33 -Mapped "{[/elec/elecPrice/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.elec.controller.ElecPriceController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-06 12:38:33 -Mapped "{[/elec/elecPrice/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecPriceController.save(com.bootdo.elec.domain.ElecPriceDO,com.bootdo.elec.domain.ElecDO)
2019-04-06 12:38:33 -Mapped "{[/elec/elecPrice/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecPriceController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-06 12:38:33 -Mapped "{[/elec/elecPrice],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecPriceController.ElecPrice()
2019-04-06 12:38:33 -Mapped "{[/elec/elecUpLoad],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecUpLoadController.Elec()
2019-04-06 12:38:33 -Mapped "{[/elec/elecUpLoad/importElecExcel],methods=[POST]}" onto public java.util.Map<java.lang.String, java.lang.Object> com.bootdo.elec.controller.ElecUpLoadController.importElecExcel(org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpServletRequest) throws java.lang.Exception
2019-04-06 12:38:33 -Mapped "{[/heat/heat/add],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatController.add()
2019-04-06 12:38:33 -Mapped "{[/heat/heat/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatController.remove(java.lang.Integer)
2019-04-06 12:38:33 -Mapped "{[/heat/heat/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatController.remove(java.lang.Integer[])
2019-04-06 12:38:33 -Mapped "{[/heat/heat/update]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatController.update(com.bootdo.heat.domain.HeatDO)
2019-04-06 12:38:33 -Mapped "{[/heat/heat/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.heat.controller.HeatController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-06 12:38:33 -Mapped "{[/heat/heat/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatController.save(com.bootdo.heat.domain.HeatDO)
2019-04-06 12:38:33 -Mapped "{[/heat/heat/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatController.edit(java.lang.Integer,org.springframework.ui.Model)
2019-04-06 12:38:33 -Mapped "{[/heat/heat/exprotHeat],methods=[GET]}" onto public void com.bootdo.heat.controller.HeatController.exprotExcel(com.bootdo.heat.vo.HeatVo,javax.servlet.http.HttpServletResponse)
2019-04-06 12:38:33 -Mapped "{[/heat/heat],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatController.Heat()
2019-04-06 12:38:33 -Mapped "{[/heat/heatInto/exprotHeatIntoExcel],methods=[GET]}" onto public void com.bootdo.heat.controller.HeatIntoController.exprotExcel(com.bootdo.heat.vo.HeatVo,javax.servlet.http.HttpServletResponse)
2019-04-06 12:38:33 -Mapped "{[/heat/heatInto],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatIntoController.HeatInto()
2019-04-06 12:38:33 -Mapped "{[/heat/heatPrice/add],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatPriceController.add()
2019-04-06 12:38:33 -Mapped "{[/heat/heatPrice/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatPriceController.remove(java.lang.Long)
2019-04-06 12:38:33 -Mapped "{[/heat/heatPrice/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatPriceController.remove(java.lang.Long[])
2019-04-06 12:38:33 -Mapped "{[/heat/heatPrice/update]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatPriceController.update(com.bootdo.heat.domain.HeatPriceDO)
2019-04-06 12:38:33 -Mapped "{[/heat/heatPrice/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.heat.controller.HeatPriceController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-06 12:38:33 -Mapped "{[/heat/heatPrice/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatPriceController.save(com.bootdo.heat.domain.HeatPriceDO)
2019-04-06 12:38:33 -Mapped "{[/heat/heatPrice/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatPriceController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-06 12:38:33 -Mapped "{[/heat/heatPrice],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatPriceController.HeatPrice()
2019-04-06 12:38:33 -Mapped "{[/heat/heatUpLoad],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatUpLoadController.HeatUpLoad()
2019-04-06 12:38:33 -Mapped "{[/heat/heatUpLoad/createHeatExcel],methods=[POST]}" onto public java.lang.String com.bootdo.heat.controller.HeatUpLoadController.createHeatExcel(com.bootdo.heat.domain.HeatDO) throws java.lang.Exception
2019-04-06 12:38:33 -Mapped "{[/heat/heatUpLoad/exprotHeatExcel],methods=[GET]}" onto public void com.bootdo.heat.controller.HeatUpLoadController.exprotHeatExcel(com.bootdo.heat.vo.HeatVo,javax.servlet.http.HttpServletResponse)
2019-04-06 12:38:33 -Mapped "{[/heat/heatUpLoad/importHeatExcel]}" onto public java.lang.String com.bootdo.heat.controller.HeatUpLoadController.importHeatExcel(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)
2019-04-06 12:38:33 -Mapped "{[/moneyList/moneyList/queryAllUser],methods=[POST]}" onto public java.util.List<com.bootdo.moneyList.damain.MoneyListDO> com.bootdo.moneyList.controller.MoneyListController.queryAllUser(com.bootdo.moneyList.damain.MoneyListDO)
2019-04-06 12:38:33 -Mapped "{[/moneyList/moneyList/queryAllUserName],methods=[POST]}" onto public java.util.List<com.bootdo.moneyList.damain.MoneyListDO> com.bootdo.moneyList.controller.MoneyListController.getAllUserName(com.bootdo.moneyList.damain.MoneyListDO)
2019-04-06 12:38:33 -Mapped "{[/moneyList/moneyList/updateMoney],methods=[POST]}" onto public java.util.List<com.bootdo.moneyList.damain.MoneyListDO> com.bootdo.moneyList.controller.MoneyListController.updateMoney(com.bootdo.moneyList.damain.MoneyListDO)
2019-04-06 12:38:33 -Mapped "{[/moneyList/moneyList],methods=[GET]}" onto java.lang.String com.bootdo.moneyList.controller.MoneyListController.MoneyList()
2019-04-06 12:38:33 -Mapped "{[/moneyLog/elecLog/add],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.ElecLogController.add()
2019-04-06 12:38:33 -Mapped "{[/moneyLog/elecLog/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.ElecLogController.remove(java.lang.Long)
2019-04-06 12:38:33 -Mapped "{[/moneyLog/elecLog/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.ElecLogController.remove(java.lang.Long[])
2019-04-06 12:38:33 -Mapped "{[/moneyLog/elecLog/update]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.ElecLogController.update(com.bootdo.moneyLog.domain.ElecLogDO)
2019-04-06 12:38:33 -Mapped "{[/moneyLog/elecLog/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.moneyLog.controller.ElecLogController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-06 12:38:33 -Mapped "{[/moneyLog/elecLog/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.ElecLogController.save(com.bootdo.moneyLog.domain.ElecLogDO)
2019-04-06 12:38:33 -Mapped "{[/moneyLog/elecLog/exprotElecLog],methods=[GET]}" onto public void com.bootdo.moneyLog.controller.ElecLogController.exprotElecLog(com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-06 12:38:33 -Mapped "{[/moneyLog/elecLog/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.ElecLogController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-06 12:38:33 -Mapped "{[/moneyLog/elecLog],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.ElecLogController.moneyLog()
2019-04-06 12:38:33 -Mapped "{[/moneyLog/heatLog/add],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.HeatLogController.add()
2019-04-06 12:38:33 -Mapped "{[/moneyLog/heatLog/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.HeatLogController.remove(java.lang.Long)
2019-04-06 12:38:33 -Mapped "{[/moneyLog/heatLog/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.HeatLogController.remove(java.lang.Long[])
2019-04-06 12:38:33 -Mapped "{[/moneyLog/heatLog/update]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.HeatLogController.update(com.bootdo.moneyLog.domain.HeatLogDO)
2019-04-06 12:38:33 -Mapped "{[/moneyLog/heatLog/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.moneyLog.controller.HeatLogController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-06 12:38:33 -Mapped "{[/moneyLog/heatLog/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.HeatLogController.save(com.bootdo.moneyLog.domain.HeatLogDO)
2019-04-06 12:38:33 -Mapped "{[/moneyLog/heatLog/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.HeatLogController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-06 12:38:33 -Mapped "{[/moneyLog/heatLog],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.HeatLogController.HeatLog()
2019-04-06 12:38:33 -Mapped "{[/moneyLog/heatLog/exprotHeatLog],methods=[GET]}" onto public void com.bootdo.moneyLog.controller.HeatLogController.exprotHeatLog(com.bootdo.moneyLog.vo.HeatLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-06 12:38:33 -Mapped "{[/moneyLog/waterLog/add],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.WaterLogController.add()
2019-04-06 12:38:33 -Mapped "{[/moneyLog/waterLog/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.WaterLogController.remove(java.lang.Long)
2019-04-06 12:38:33 -Mapped "{[/moneyLog/waterLog/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.WaterLogController.remove(java.lang.Long[])
2019-04-06 12:38:33 -Mapped "{[/moneyLog/waterLog/update]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.WaterLogController.update(com.bootdo.moneyLog.domain.WaterLogDO)
2019-04-06 12:38:33 -Mapped "{[/moneyLog/waterLog/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.moneyLog.controller.WaterLogController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-06 12:38:33 -Mapped "{[/moneyLog/waterLog/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.WaterLogController.save(com.bootdo.moneyLog.domain.WaterLogDO)
2019-04-06 12:38:33 -Mapped "{[/moneyLog/waterLog/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.WaterLogController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-06 12:38:33 -Mapped "{[/moneyLog/waterLog],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.WaterLogController.WaterLog()
2019-04-06 12:38:33 -Mapped "{[/moneyLog/waterLog/exprotWaterLog],methods=[GET]}" onto public void com.bootdo.moneyLog.controller.WaterLogController.exprotWaterLog(com.bootdo.moneyLog.vo.WaterLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-06 12:38:33 -Mapped "{[/oa/notify/add],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.add()
2019-04-06 12:38:33 -Mapped "{[/oa/notify/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.remove(java.lang.Long)
2019-04-06 12:38:33 -Mapped "{[/oa/notify/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.remove(java.lang.Long[])
2019-04-06 12:38:33 -Mapped "{[/oa/notify/update]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.update(com.bootdo.oa.domain.NotifyDO)
2019-04-06 12:38:33 -Mapped "{[/oa/notify/read/{id}],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.read(java.lang.Long,org.springframework.ui.Model)
2019-04-06 12:38:33 -Mapped "{[/oa/notify/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.oa.controller.NotifyController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-06 12:38:33 -Mapped "{[/oa/notify/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.save(com.bootdo.oa.domain.NotifyDO)
2019-04-06 12:38:33 -Mapped "{[/oa/notify/message],methods=[GET]}" onto com.bootdo.common.utils.PageUtils com.bootdo.oa.controller.NotifyController.message()
2019-04-06 12:38:33 -Mapped "{[/oa/notify/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-06 12:38:33 -Mapped "{[/oa/notify/selfList],methods=[GET]}" onto com.bootdo.common.utils.PageUtils com.bootdo.oa.controller.NotifyController.selfList(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-06 12:38:33 -Mapped "{[/oa/notify/selfNotify],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.selefNotify()
2019-04-06 12:38:33 -Mapped "{[/oa/notify],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.oaNotify()
2019-04-06 12:38:33 -Mapped "{[/print/print/add],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.add()
2019-04-06 12:38:33 -Mapped "{[/print/print/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.print.controller.PrintController.remove(java.lang.Long)
2019-04-06 12:38:33 -Mapped "{[/print/print/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.print.controller.PrintController.remove(java.lang.Long[])
2019-04-06 12:38:33 -Mapped "{[/print/print/update]}" onto public com.bootdo.common.utils.R com.bootdo.print.controller.PrintController.update(com.bootdo.print.domain.PrintDO)
2019-04-06 12:38:33 -Mapped "{[/print/print/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.print.controller.PrintController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-06 12:38:33 -Mapped "{[/print/print/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.print.controller.PrintController.save(java.lang.String,com.bootdo.print.domain.PrintDO)
2019-04-06 12:38:33 -Mapped "{[/print/print/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-06 12:38:33 -Mapped "{[/print/print/exprotPrint],methods=[GET]}" onto public void com.bootdo.print.controller.PrintController.exprotPrint(com.bootdo.print.vo.PrintVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-06 12:38:33 -Mapped "{[/print/print],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.Print()
2019-04-06 12:38:33 -Mapped "{[/print/print/printEdit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.printEdit(java.lang.Long,org.springframework.ui.Model)
2019-04-06 12:38:33 -Mapped "{[/system/sysDept/add/{pId}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.add(java.lang.Long,org.springframework.ui.Model)
2019-04-06 12:38:33 -Mapped "{[/system/sysDept/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.remove(java.lang.Long)
2019-04-06 12:38:33 -Mapped "{[/system/sysDept/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.remove(java.lang.Long[])
2019-04-06 12:38:33 -Mapped "{[/system/sysDept/update]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.update(com.bootdo.system.domain.DeptDO)
2019-04-06 12:38:33 -Mapped "{[/system/sysDept/list],methods=[GET]}" onto public java.util.List<com.bootdo.system.domain.DeptDO> com.bootdo.system.controller.DeptController.list()
2019-04-06 12:38:33 -Mapped "{[/system/sysDept/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.save(com.bootdo.system.domain.DeptDO)
2019-04-06 12:38:33 -Mapped "{[/system/sysDept/tree],methods=[GET]}" onto public com.bootdo.common.domain.Tree<com.bootdo.system.domain.DeptDO> com.bootdo.system.controller.DeptController.tree()
2019-04-06 12:38:33 -Mapped "{[/system/sysDept/edit/{deptId}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-06 12:38:33 -Mapped "{[/system/sysDept],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.dept()
2019-04-06 12:38:33 -Mapped "{[/system/sysDept/treeView],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.treeView()
2019-04-06 12:38:33 -Mapped "{[/index],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.index(org.springframework.ui.Model)
2019-04-06 12:38:33 -Mapped "{[/main],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.main()
2019-04-06 12:38:33 -Mapped "{[/login],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.login(org.springframework.ui.Model)
2019-04-06 12:38:33 -Mapped "{[/logout],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.logout()
2019-04-06 12:38:33 -Mapped "{[/getVerify],methods=[GET]}" onto public void com.bootdo.system.controller.LoginController.getVerify(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-04-06 12:38:33 -Mapped "{[/ || ],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.welcome(org.springframework.ui.Model)
2019-04-06 12:38:33 -Mapped "{[/login],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.LoginController.ajaxLogin(java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest)
2019-04-06 12:38:33 -Mapped "{[/sys/menu/add/{pId}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.MenuController.add(org.springframework.ui.Model,java.lang.Long)
2019-04-06 12:38:33 -Mapped "{[/sys/menu/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.MenuController.remove(java.lang.Long)
2019-04-06 12:38:33 -Mapped "{[/sys/menu/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.MenuController.update(com.bootdo.system.domain.MenuDO)
2019-04-06 12:38:33 -Mapped "{[/sys/menu/list]}" onto java.util.List<com.bootdo.system.domain.MenuDO> com.bootdo.system.controller.MenuController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-06 12:38:33 -Mapped "{[/sys/menu/save],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.MenuController.save(com.bootdo.system.domain.MenuDO)
2019-04-06 12:38:33 -Mapped "{[/sys/menu/tree/{roleId}],methods=[GET]}" onto com.bootdo.common.domain.Tree<com.bootdo.system.domain.MenuDO> com.bootdo.system.controller.MenuController.tree(java.lang.Long)
2019-04-06 12:38:33 -Mapped "{[/sys/menu/tree],methods=[GET]}" onto com.bootdo.common.domain.Tree<com.bootdo.system.domain.MenuDO> com.bootdo.system.controller.MenuController.tree()
2019-04-06 12:38:33 -Mapped "{[/sys/menu/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.MenuController.edit(org.springframework.ui.Model,java.lang.Long)
2019-04-06 12:38:33 -Mapped "{[/sys/menu],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.MenuController.menu(org.springframework.ui.Model)
2019-04-06 12:38:33 -Mapped "{[/sys/role/add],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.RoleController.add()
2019-04-06 12:38:33 -Mapped "{[/sys/role/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.update(com.bootdo.system.domain.RoleDO)
2019-04-06 12:38:33 -Mapped "{[/sys/role/list],methods=[GET]}" onto java.util.List<com.bootdo.system.domain.RoleDO> com.bootdo.system.controller.RoleController.list()
2019-04-06 12:38:33 -Mapped "{[/sys/role/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.save(java.lang.Long)
2019-04-06 12:38:33 -Mapped "{[/sys/role/save],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.save(com.bootdo.system.domain.RoleDO)
2019-04-06 12:38:33 -Mapped "{[/sys/role/batchRemove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.batchRemove(java.lang.Long[])
2019-04-06 12:38:33 -Mapped "{[/sys/role],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.RoleController.role()
2019-04-06 12:38:33 -Mapped "{[/sys/role/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.RoleController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-06 12:38:33 -Mapped "{[/sys/online/list]}" onto public java.util.List<com.bootdo.system.domain.UserOnline> com.bootdo.system.controller.SessionController.list()
2019-04-06 12:38:33 -Mapped "{[/sys/online/forceLogout/{sessionId}]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.SessionController.forceLogout(java.lang.String,org.springframework.web.servlet.mvc.support.RedirectAttributes)
2019-04-06 12:38:33 -Mapped "{[/sys/online],methods=[GET]}" onto public java.lang.String com.bootdo.system.controller.SessionController.online()
2019-04-06 12:38:33 -Mapped "{[/sys/online/sessionList]}" onto public java.util.Collection<org.apache.shiro.session.Session> com.bootdo.system.controller.SessionController.sessionList()
2019-04-06 12:38:33 -Mapped "{[/sys/user/exit],methods=[POST]}" onto boolean com.bootdo.system.controller.UserController.exit(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-06 12:38:33 -Mapped "{[/sys/user/add],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.add(org.springframework.ui.Model)
2019-04-06 12:38:33 -Mapped "{[/sys/user/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.remove(java.lang.Long)
2019-04-06 12:38:33 -Mapped "{[/sys/user/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.update(com.bootdo.system.domain.UserDO)
2019-04-06 12:38:33 -Mapped "{[/sys/user/list],methods=[GET]}" onto com.bootdo.common.utils.PageUtils com.bootdo.system.controller.UserController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-06 12:38:33 -Mapped "{[/sys/user/save],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.save(com.bootdo.system.domain.UserDO)
2019-04-06 12:38:33 -Mapped "{[/sys/user/batchRemove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.batchRemove(java.lang.Long[])
2019-04-06 12:38:33 -Mapped "{[/sys/user/tree],methods=[GET]}" onto public com.bootdo.common.domain.Tree<com.bootdo.system.domain.DeptDO> com.bootdo.system.controller.UserController.tree()
2019-04-06 12:38:33 -Mapped "{[/sys/user],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.user(org.springframework.ui.Model)
2019-04-06 12:38:33 -Mapped "{[/sys/user/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.edit(org.springframework.ui.Model,java.lang.Long)
2019-04-06 12:38:33 -Mapped "{[/sys/user/treeView],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.treeView()
2019-04-06 12:38:33 -Mapped "{[/sys/user/personal],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.personal(org.springframework.ui.Model)
2019-04-06 12:38:33 -Mapped "{[/sys/user/uploadImg],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.uploadImg(org.springframework.web.multipart.MultipartFile,java.lang.String,javax.servlet.http.HttpServletRequest)
2019-04-06 12:38:33 -Mapped "{[/sys/user/resetPwd/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.resetPwd(java.lang.Long,org.springframework.ui.Model)
2019-04-06 12:38:33 -Mapped "{[/sys/user/resetPwd],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.resetPwd(com.bootdo.system.vo.UserVO)
2019-04-06 12:38:33 -Mapped "{[/sys/user/updatePeronal],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.updatePeronal(com.bootdo.system.domain.UserDO)
2019-04-06 12:38:33 -Mapped "{[/sys/user/adminResetPwd],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.adminResetPwd(com.bootdo.system.vo.UserVO)
2019-04-06 12:38:33 -Mapped "{[/file/downImport/{importType}],methods=[GET]}" onto public void com.bootdo.temple.controller.TempletController.downImport(javax.servlet.http.HttpServletResponse,java.lang.String)
2019-04-06 12:38:33 -Mapped "{[/water/water/add],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterController.add()
2019-04-06 12:38:33 -Mapped "{[/water/water/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterController.remove(java.lang.Long)
2019-04-06 12:38:33 -Mapped "{[/water/water/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterController.remove(java.lang.Long[])
2019-04-06 12:38:33 -Mapped "{[/water/water/update]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterController.update(com.bootdo.water.domain.WaterDO)
2019-04-06 12:38:33 -Mapped "{[/water/water/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.water.controller.WaterController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-06 12:38:33 -Mapped "{[/water/water/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterController.save(com.bootdo.water.domain.WaterDO)
2019-04-06 12:38:33 -Mapped "{[/water/water/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-06 12:38:33 -Mapped "{[/water/water/exprotWater],methods=[GET]}" onto public void com.bootdo.water.controller.WaterController.exprotExcel(com.bootdo.water.vo.WaterVo,javax.servlet.http.HttpServletResponse)
2019-04-06 12:38:33 -Mapped "{[/water/water],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterController.Water()
2019-04-06 12:38:33 -Mapped "{[/water/waterInto/exprotWaterIntoExcel],methods=[GET]}" onto public void com.bootdo.water.controller.WaterIntoController.exprotExcel(com.bootdo.water.vo.WaterVo,javax.servlet.http.HttpServletResponse)
2019-04-06 12:38:33 -Mapped "{[/water/waterInto],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterIntoController.WaterInto()
2019-04-06 12:38:33 -Mapped "{[/water/waterPrice/add],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterPriceController.add()
2019-04-06 12:38:33 -Mapped "{[/water/waterPrice/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterPriceController.remove(java.lang.Long)
2019-04-06 12:38:33 -Mapped "{[/water/waterPrice/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterPriceController.remove(java.lang.Long[])
2019-04-06 12:38:33 -Mapped "{[/water/waterPrice/update]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterPriceController.update(com.bootdo.water.domain.WaterPriceDO)
2019-04-06 12:38:33 -Mapped "{[/water/waterPrice/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.water.controller.WaterPriceController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-06 12:38:33 -Mapped "{[/water/waterPrice/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterPriceController.save(com.bootdo.water.domain.WaterPriceDO)
2019-04-06 12:38:33 -Mapped "{[/water/waterPrice/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterPriceController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-06 12:38:33 -Mapped "{[/water/waterPrice],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterPriceController.WaterPrice()
2019-04-06 12:38:33 -Mapped "{[/water/waterUpLoad/createWaterExcel],methods=[POST]}" onto public java.lang.String com.bootdo.water.controller.WaterUpLoadController.createWaterExcel(com.bootdo.water.domain.WaterDO) throws java.lang.Exception
2019-04-06 12:38:33 -Mapped "{[/water/waterUpLoad/importWaterExcel]}" onto public java.lang.String com.bootdo.water.controller.WaterUpLoadController.importWaterExcel(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)
2019-04-06 12:38:33 -Mapped "{[/water/waterUpLoad/exprotWaterExcel],methods=[GET]}" onto public void com.bootdo.water.controller.WaterUpLoadController.exprotWaterExcel(com.bootdo.water.vo.WaterVo,javax.servlet.http.HttpServletResponse)
2019-04-06 12:38:33 -Mapped "{[/water/waterUpLoad],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterUpLoadController.WaterUpLoad()
2019-04-06 12:38:33 -Mapped "{[/v2/api-docs],methods=[GET],produces=[application/json || application/hal+json]}" onto public org.springframework.http.ResponseEntity<springfox.documentation.spring.web.json.Json> springfox.documentation.swagger2.web.Swagger2Controller.getDocumentation(java.lang.String,javax.servlet.http.HttpServletRequest)
2019-04-06 12:38:33 -Mapped "{[/swagger-resources/configuration/ui]}" onto org.springframework.http.ResponseEntity<springfox.documentation.swagger.web.UiConfiguration> springfox.documentation.swagger.web.ApiResourceController.uiConfiguration()
2019-04-06 12:38:33 -Mapped "{[/swagger-resources]}" onto org.springframework.http.ResponseEntity<java.util.List<springfox.documentation.swagger.web.SwaggerResource>> springfox.documentation.swagger.web.ApiResourceController.swaggerResources()
2019-04-06 12:38:33 -Mapped "{[/swagger-resources/configuration/security]}" onto org.springframework.http.ResponseEntity<springfox.documentation.swagger.web.SecurityConfiguration> springfox.documentation.swagger.web.ApiResourceController.securityConfiguration()
2019-04-06 12:38:34 -Initializing ExecutorService  'messageBrokerTaskScheduler'
2019-04-06 12:38:34 -Mapped URL path [/endpointChat/**] onto handler of type [class org.springframework.web.socket.sockjs.support.SockJsHttpRequestHandler]
2019-04-06 12:38:34 -Initializing ExecutorService  'brokerChannelExecutor'
2019-04-06 12:38:35 -Mapped URL path [/**/favicon.ico] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-04-06 12:38:35 -Looking for @ControllerAdvice: org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@6fdbe764: startup date [Sat Apr 06 12:38:15 CST 2019]; root of context hierarchy
2019-04-06 12:38:35 -Mapped URL path [/webjars/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-04-06 12:38:35 -Mapped URL path [/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-04-06 12:38:35 -Mapped URL path [/files/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-04-06 12:38:35 -Detected @ExceptionHandler methods in BDExceptionHandler
2019-04-06 12:38:35 -[THYMELEAF][main] Template Mode 'LEGACYHTML5' is deprecated. Using Template Mode 'HTML' instead.
2019-04-06 12:38:37 -Registering beans for JMX exposure on startup
2019-04-06 12:38:37 -Bean with name 'dataSource' has been autodetected for JMX exposure
2019-04-06 12:38:37 -Located MBean 'dataSource': registering with JMX server as MBean [com.alibaba.druid.pool:name=dataSource,type=DruidDataSource]
2019-04-06 12:38:37 -Starting beans in phase 2147483647
2019-04-06 12:38:37 -Context refreshed
2019-04-06 12:38:37 -Found 1 custom documentation plugin(s)
2019-04-06 12:38:37 -Scanning for api listing references
2019-04-06 12:38:38 -Generating unique operation named: exprotElecLogUsingGET_1
2019-04-06 12:38:38 -Generating unique operation named: getCountDUsingPOST_1
2019-04-06 12:38:38 -Generating unique operation named: exprotElecLogUsingGET_2
2019-04-06 12:38:38 -Generating unique operation named: getCountDUsingPOST_2
2019-04-06 12:38:38 -Generating unique operation named: exprotElecLogUsingGET_3
2019-04-06 12:38:38 -Generating unique operation named: getCountDUsingPOST_3
2019-04-06 12:38:38 -Generating unique operation named: removeUsingPOST_1
2019-04-06 12:38:38 -Generating unique operation named: addUsingGET_1
2019-04-06 12:38:38 -Generating unique operation named: editUsingGET_1
2019-04-06 12:38:38 -Generating unique operation named: listUsingGET_1
2019-04-06 12:38:38 -Generating unique operation named: removeUsingPOST_2
2019-04-06 12:38:38 -Generating unique operation named: removeUsingPOST_3
2019-04-06 12:38:38 -Generating unique operation named: saveUsingPOST_1
2019-04-06 12:38:38 -Generating unique operation named: updateUsingGET_1
2019-04-06 12:38:38 -Generating unique operation named: updateUsingHEAD_1
2019-04-06 12:38:38 -Generating unique operation named: updateUsingPOST_1
2019-04-06 12:38:38 -Generating unique operation named: updateUsingPUT_1
2019-04-06 12:38:38 -Generating unique operation named: updateUsingPATCH_1
2019-04-06 12:38:38 -Generating unique operation named: updateUsingDELETE_1
2019-04-06 12:38:38 -Generating unique operation named: updateUsingOPTIONS_1
2019-04-06 12:38:38 -Generating unique operation named: updateUsingTRACE_1
2019-04-06 12:38:38 -Generating unique operation named: addUsingGET_2
2019-04-06 12:38:38 -Generating unique operation named: editUsingGET_2
2019-04-06 12:38:38 -Generating unique operation named: listUsingGET_2
2019-04-06 12:38:38 -Generating unique operation named: removeUsingPOST_4
2019-04-06 12:38:38 -Generating unique operation named: removeUsingPOST_5
2019-04-06 12:38:38 -Generating unique operation named: saveUsingPOST_2
2019-04-06 12:38:38 -Generating unique operation named: updateUsingPOST_2
2019-04-06 12:38:38 -Generating unique operation named: exprotExcelUsingGET_1
2019-04-06 12:38:38 -Generating unique operation named: addUsingGET_3
2019-04-06 12:38:38 -Generating unique operation named: editUsingGET_3
2019-04-06 12:38:38 -Generating unique operation named: exprotElecLogUsingGET_4
2019-04-06 12:38:38 -Generating unique operation named: listUsingGET_3
2019-04-06 12:38:38 -Generating unique operation named: removeUsingPOST_6
2019-04-06 12:38:38 -Generating unique operation named: removeUsingPOST_7
2019-04-06 12:38:38 -Generating unique operation named: saveUsingPOST_3
2019-04-06 12:38:38 -Generating unique operation named: updateUsingGET_2
2019-04-06 12:38:38 -Generating unique operation named: updateUsingHEAD_2
2019-04-06 12:38:38 -Generating unique operation named: updateUsingPOST_3
2019-04-06 12:38:38 -Generating unique operation named: updateUsingPUT_2
2019-04-06 12:38:38 -Generating unique operation named: updateUsingPATCH_2
2019-04-06 12:38:38 -Generating unique operation named: updateUsingDELETE_2
2019-04-06 12:38:38 -Generating unique operation named: updateUsingOPTIONS_2
2019-04-06 12:38:38 -Generating unique operation named: updateUsingTRACE_2
2019-04-06 12:38:38 -Generating unique operation named: addUsingGET_4
2019-04-06 12:38:38 -Generating unique operation named: editUsingGET_4
2019-04-06 12:38:38 -Generating unique operation named: listUsingGET_4
2019-04-06 12:38:38 -Generating unique operation named: removeUsingPOST_8
2019-04-06 12:38:38 -Generating unique operation named: removeUsingPOST_9
2019-04-06 12:38:38 -Generating unique operation named: saveUsingPOST_4
2019-04-06 12:38:38 -Generating unique operation named: updateUsingGET_3
2019-04-06 12:38:38 -Generating unique operation named: updateUsingHEAD_3
2019-04-06 12:38:38 -Generating unique operation named: updateUsingPOST_4
2019-04-06 12:38:38 -Generating unique operation named: updateUsingPUT_3
2019-04-06 12:38:38 -Generating unique operation named: updateUsingPATCH_3
2019-04-06 12:38:38 -Generating unique operation named: updateUsingDELETE_3
2019-04-06 12:38:38 -Generating unique operation named: updateUsingOPTIONS_3
2019-04-06 12:38:38 -Generating unique operation named: updateUsingTRACE_3
2019-04-06 12:38:38 -Generating unique operation named: ElecUsingGET_1
2019-04-06 12:38:38 -Generating unique operation named: addUsingGET_5
2019-04-06 12:38:38 -Generating unique operation named: editUsingGET_5
2019-04-06 12:38:39 -Generating unique operation named: listUsingGET_5
2019-04-06 12:38:39 -Generating unique operation named: removeUsingPOST_10
2019-04-06 12:38:39 -Generating unique operation named: removeUsingPOST_11
2019-04-06 12:38:39 -Generating unique operation named: saveUsingPOST_5
2019-04-06 12:38:39 -Generating unique operation named: updateUsingGET_4
2019-04-06 12:38:39 -Generating unique operation named: updateUsingHEAD_4
2019-04-06 12:38:39 -Generating unique operation named: updateUsingPOST_5
2019-04-06 12:38:39 -Generating unique operation named: updateUsingPUT_4
2019-04-06 12:38:39 -Generating unique operation named: updateUsingPATCH_4
2019-04-06 12:38:39 -Generating unique operation named: updateUsingDELETE_4
2019-04-06 12:38:39 -Generating unique operation named: updateUsingOPTIONS_4
2019-04-06 12:38:39 -Generating unique operation named: updateUsingTRACE_4
2019-04-06 12:38:39 -Generating unique operation named: editUsingGET_6
2019-04-06 12:38:39 -Generating unique operation named: listUsingGET_6
2019-04-06 12:38:39 -Generating unique operation named: updateUsingPOST_6
2019-04-06 12:38:39 -Generating unique operation named: addUsingGET_6
2019-04-06 12:38:39 -Generating unique operation named: editUsingGET_7
2019-04-06 12:38:39 -Generating unique operation named: exprotExcelUsingGET_2
2019-04-06 12:38:39 -Generating unique operation named: listUsingGET_7
2019-04-06 12:38:39 -Generating unique operation named: removeUsingPOST_12
2019-04-06 12:38:39 -Generating unique operation named: removeUsingPOST_13
2019-04-06 12:38:39 -Generating unique operation named: saveUsingPOST_6
2019-04-06 12:38:39 -Generating unique operation named: updateUsingGET_5
2019-04-06 12:38:39 -Generating unique operation named: updateUsingHEAD_5
2019-04-06 12:38:39 -Generating unique operation named: updateUsingPOST_7
2019-04-06 12:38:39 -Generating unique operation named: updateUsingPUT_5
2019-04-06 12:38:39 -Generating unique operation named: updateUsingPATCH_5
2019-04-06 12:38:39 -Generating unique operation named: updateUsingDELETE_5
2019-04-06 12:38:39 -Generating unique operation named: updateUsingOPTIONS_5
2019-04-06 12:38:39 -Generating unique operation named: updateUsingTRACE_5
2019-04-06 12:38:39 -Generating unique operation named: exprotExcelUsingGET_3
2019-04-06 12:38:39 -Generating unique operation named: addUsingGET_7
2019-04-06 12:38:39 -Generating unique operation named: editUsingGET_8
2019-04-06 12:38:39 -Generating unique operation named: listUsingGET_8
2019-04-06 12:38:39 -Generating unique operation named: removeUsingPOST_14
2019-04-06 12:38:39 -Generating unique operation named: removeUsingPOST_15
2019-04-06 12:38:39 -Generating unique operation named: saveUsingPOST_7
2019-04-06 12:38:39 -Generating unique operation named: updateUsingGET_6
2019-04-06 12:38:39 -Generating unique operation named: updateUsingHEAD_6
2019-04-06 12:38:39 -Generating unique operation named: updateUsingPOST_8
2019-04-06 12:38:39 -Generating unique operation named: updateUsingPUT_6
2019-04-06 12:38:39 -Generating unique operation named: updateUsingPATCH_6
2019-04-06 12:38:39 -Generating unique operation named: updateUsingDELETE_6
2019-04-06 12:38:39 -Generating unique operation named: updateUsingOPTIONS_6
2019-04-06 12:38:39 -Generating unique operation named: updateUsingTRACE_6
2019-04-06 12:38:39 -Generating unique operation named: addUsingGET_8
2019-04-06 12:38:39 -Generating unique operation named: editUsingGET_9
2019-04-06 12:38:39 -Generating unique operation named: listUsingGET_9
2019-04-06 12:38:39 -Generating unique operation named: removeUsingPOST_16
2019-04-06 12:38:39 -Generating unique operation named: removeUsingPOST_17
2019-04-06 12:38:39 -Generating unique operation named: saveUsingPOST_8
2019-04-06 12:38:39 -Generating unique operation named: updateUsingGET_7
2019-04-06 12:38:39 -Generating unique operation named: updateUsingHEAD_7
2019-04-06 12:38:39 -Generating unique operation named: updateUsingPOST_9
2019-04-06 12:38:39 -Generating unique operation named: updateUsingPUT_7
2019-04-06 12:38:39 -Generating unique operation named: updateUsingPATCH_7
2019-04-06 12:38:39 -Generating unique operation named: updateUsingDELETE_7
2019-04-06 12:38:39 -Generating unique operation named: updateUsingOPTIONS_7
2019-04-06 12:38:39 -Generating unique operation named: updateUsingTRACE_7
2019-04-06 12:38:39 -Generating unique operation named: addUsingGET_9
2019-04-06 12:38:39 -Generating unique operation named: editUsingGET_10
2019-04-06 12:38:39 -Generating unique operation named: infoUsingGET_1
2019-04-06 12:38:39 -Generating unique operation named: infoUsingHEAD_1
2019-04-06 12:38:39 -Generating unique operation named: infoUsingPOST_1
2019-04-06 12:38:39 -Generating unique operation named: infoUsingPUT_1
2019-04-06 12:38:39 -Generating unique operation named: infoUsingPATCH_1
2019-04-06 12:38:39 -Generating unique operation named: infoUsingDELETE_1
2019-04-06 12:38:39 -Generating unique operation named: infoUsingOPTIONS_1
2019-04-06 12:38:39 -Generating unique operation named: infoUsingTRACE_1
2019-04-06 12:38:39 -Generating unique operation named: listUsingGET_10
2019-04-06 12:38:39 -Generating unique operation named: removeUsingPOST_18
2019-04-06 12:38:39 -Generating unique operation named: removeUsingPOST_19
2019-04-06 12:38:39 -Generating unique operation named: saveUsingPOST_9
2019-04-06 12:38:39 -Generating unique operation named: updateUsingPOST_10
2019-04-06 12:38:39 -Generating unique operation named: listUsingGET_11
2019-04-06 12:38:39 -Generating unique operation named: removeUsingPOST_20
2019-04-06 12:38:39 -Generating unique operation named: welcomeUsingGET_1
2019-04-06 12:38:39 -Generating unique operation named: addUsingGET_10
2019-04-06 12:38:39 -Generating unique operation named: editUsingGET_11
2019-04-06 12:38:39 -Generating unique operation named: listUsingGET_12
2019-04-06 12:38:39 -Generating unique operation named: removeUsingPOST_21
2019-04-06 12:38:39 -Generating unique operation named: saveUsingPOST_10
2019-04-06 12:38:39 -Generating unique operation named: treeUsingGET_1
2019-04-06 12:38:39 -Generating unique operation named: treeUsingGET_2
2019-04-06 12:38:39 -Generating unique operation named: updateUsingPOST_11
2019-04-06 12:38:39 -Generating unique operation named: addUsingGET_11
2019-04-06 12:38:39 -Generating unique operation named: editUsingGET_12
2019-04-06 12:38:39 -Generating unique operation named: listUsingGET_13
2019-04-06 12:38:39 -Generating unique operation named: removeUsingPOST_22
2019-04-06 12:38:39 -Generating unique operation named: removeUsingPOST_23
2019-04-06 12:38:39 -Generating unique operation named: saveUsingPOST_11
2019-04-06 12:38:39 -Generating unique operation named: updateUsingGET_8
2019-04-06 12:38:39 -Generating unique operation named: updateUsingHEAD_8
2019-04-06 12:38:39 -Generating unique operation named: updateUsingPOST_12
2019-04-06 12:38:40 -Generating unique operation named: updateUsingPUT_8
2019-04-06 12:38:40 -Generating unique operation named: updateUsingPATCH_8
2019-04-06 12:38:40 -Generating unique operation named: updateUsingDELETE_8
2019-04-06 12:38:40 -Generating unique operation named: updateUsingOPTIONS_8
2019-04-06 12:38:40 -Generating unique operation named: updateUsingTRACE_8
2019-04-06 12:38:40 -Generating unique operation named: addUsingGET_12
2019-04-06 12:38:40 -Generating unique operation named: editUsingGET_13
2019-04-06 12:38:40 -Generating unique operation named: listUsingGET_14
2019-04-06 12:38:40 -Generating unique operation named: removeUsingPOST_24
2019-04-06 12:38:40 -Generating unique operation named: removeUsingPOST_25
2019-04-06 12:38:40 -Generating unique operation named: saveUsingPOST_12
2019-04-06 12:38:40 -Generating unique operation named: updateUsingGET_9
2019-04-06 12:38:40 -Generating unique operation named: updateUsingHEAD_9
2019-04-06 12:38:40 -Generating unique operation named: updateUsingPOST_13
2019-04-06 12:38:40 -Generating unique operation named: updateUsingPUT_9
2019-04-06 12:38:40 -Generating unique operation named: updateUsingPATCH_9
2019-04-06 12:38:40 -Generating unique operation named: updateUsingDELETE_9
2019-04-06 12:38:40 -Generating unique operation named: updateUsingOPTIONS_9
2019-04-06 12:38:40 -Generating unique operation named: updateUsingTRACE_9
2019-04-06 12:38:40 -Generating unique operation named: addUsingGET_13
2019-04-06 12:38:40 -Generating unique operation named: batchRemoveUsingPOST_1
2019-04-06 12:38:40 -Generating unique operation named: editUsingGET_14
2019-04-06 12:38:40 -Generating unique operation named: listUsingGET_15
2019-04-06 12:38:40 -Generating unique operation named: saveUsingPOST_13
2019-04-06 12:38:40 -Generating unique operation named: saveUsingPOST_14
2019-04-06 12:38:40 -Generating unique operation named: updateUsingPOST_14
2019-04-06 12:38:40 -Generating unique operation named: listUsingGET_16
2019-04-06 12:38:40 -Generating unique operation named: listUsingHEAD_1
2019-04-06 12:38:40 -Generating unique operation named: listUsingPOST_1
2019-04-06 12:38:40 -Generating unique operation named: listUsingPUT_1
2019-04-06 12:38:40 -Generating unique operation named: listUsingPATCH_1
2019-04-06 12:38:40 -Generating unique operation named: listUsingDELETE_1
2019-04-06 12:38:40 -Generating unique operation named: listUsingOPTIONS_1
2019-04-06 12:38:40 -Generating unique operation named: listUsingTRACE_1
2019-04-06 12:38:40 -Generating unique operation named: addUsingGET_14
2019-04-06 12:38:40 -Generating unique operation named: batchRemoveUsingPOST_2
2019-04-06 12:38:40 -Generating unique operation named: editUsingGET_15
2019-04-06 12:38:40 -Generating unique operation named: listUsingGET_17
2019-04-06 12:38:40 -Generating unique operation named: removeUsingPOST_26
2019-04-06 12:38:40 -Generating unique operation named: saveUsingPOST_15
2019-04-06 12:38:40 -Generating unique operation named: treeUsingGET_3
2019-04-06 12:38:40 -Generating unique operation named: treeViewUsingGET_1
2019-04-06 12:38:40 -Generating unique operation named: updateUsingPOST_15
2019-04-06 12:38:40 -Generating unique operation named: addUsingGET_15
2019-04-06 12:38:40 -Generating unique operation named: editUsingGET_16
2019-04-06 12:38:40 -Generating unique operation named: exprotExcelUsingGET_4
2019-04-06 12:38:40 -Generating unique operation named: listUsingGET_18
2019-04-06 12:38:40 -Generating unique operation named: removeUsingPOST_27
2019-04-06 12:38:40 -Generating unique operation named: removeUsingPOST_28
2019-04-06 12:38:40 -Generating unique operation named: saveUsingPOST_16
2019-04-06 12:38:40 -Generating unique operation named: updateUsingGET_10
2019-04-06 12:38:40 -Generating unique operation named: updateUsingHEAD_10
2019-04-06 12:38:40 -Generating unique operation named: updateUsingPOST_16
2019-04-06 12:38:40 -Generating unique operation named: updateUsingPUT_10
2019-04-06 12:38:40 -Generating unique operation named: updateUsingPATCH_10
2019-04-06 12:38:40 -Generating unique operation named: updateUsingDELETE_10
2019-04-06 12:38:40 -Generating unique operation named: updateUsingOPTIONS_10
2019-04-06 12:38:40 -Generating unique operation named: updateUsingTRACE_10
2019-04-06 12:38:40 -Generating unique operation named: exprotExcelUsingGET_5
2019-04-06 12:38:40 -Generating unique operation named: addUsingGET_16
2019-04-06 12:38:40 -Generating unique operation named: editUsingGET_17
2019-04-06 12:38:40 -Generating unique operation named: listUsingGET_19
2019-04-06 12:38:40 -Generating unique operation named: removeUsingPOST_29
2019-04-06 12:38:40 -Generating unique operation named: removeUsingPOST_30
2019-04-06 12:38:40 -Generating unique operation named: saveUsingPOST_17
2019-04-06 12:38:40 -Generating unique operation named: updateUsingGET_11
2019-04-06 12:38:40 -Generating unique operation named: updateUsingHEAD_11
2019-04-06 12:38:40 -Generating unique operation named: updateUsingPOST_17
2019-04-06 12:38:40 -Generating unique operation named: updateUsingPUT_11
2019-04-06 12:38:40 -Generating unique operation named: updateUsingPATCH_11
2019-04-06 12:38:40 -Generating unique operation named: updateUsingDELETE_11
2019-04-06 12:38:40 -Generating unique operation named: updateUsingOPTIONS_11
2019-04-06 12:38:40 -Generating unique operation named: updateUsingTRACE_11
2019-04-06 12:38:40 -Generating unique operation named: addUsingGET_17
2019-04-06 12:38:40 -Generating unique operation named: editUsingGET_18
2019-04-06 12:38:40 -Generating unique operation named: listUsingGET_20
2019-04-06 12:38:40 -Generating unique operation named: removeUsingPOST_31
2019-04-06 12:38:40 -Generating unique operation named: removeUsingPOST_32
2019-04-06 12:38:40 -Generating unique operation named: saveUsingPOST_18
2019-04-06 12:38:40 -Generating unique operation named: updateUsingGET_12
2019-04-06 12:38:40 -Generating unique operation named: updateUsingHEAD_12
2019-04-06 12:38:40 -Generating unique operation named: updateUsingPOST_18
2019-04-06 12:38:40 -Generating unique operation named: updateUsingPUT_12
2019-04-06 12:38:40 -Generating unique operation named: updateUsingPATCH_12
2019-04-06 12:38:40 -Generating unique operation named: updateUsingDELETE_12
2019-04-06 12:38:40 -Generating unique operation named: updateUsingOPTIONS_12
2019-04-06 12:38:40 -Generating unique operation named: updateUsingTRACE_12
2019-04-06 12:38:40 -Starting Quartz Scheduler now
2019-04-06 12:38:40 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED started.
2019-04-06 12:38:40 -Starting...
2019-04-06 12:38:40 -BrokerAvailabilityEvent[available=true, SimpleBrokerMessageHandler [DefaultSubscriptionRegistry[cache[0 destination(s)], registry[0 sessions]]]]
2019-04-06 12:38:40 -Started.
2019-04-06 12:38:40 -Starting ProtocolHandler ["http-nio-8081"]
2019-04-06 12:38:40 -Using a shared selector for servlet write/read
2019-04-06 12:38:40 -Tomcat started on port(s): 8081 (http) with context path ''
2019-04-06 12:38:40 -Started BootdoApplication in 27.114 seconds (JVM running for 28.168)
2019-04-06 12:38:40 -==>  Preparing: select `id`,`cron_expression`,`method_name`,`is_concurrent`,`description`,`update_by`,`bean_class`,`create_date`,`job_status`,`job_group`,`update_date`,`create_by`,`spring_bean`,`job_name` from sys_task order by id desc 
2019-04-06 12:38:41 -==> Parameters: 
2019-04-06 12:38:41 -<==      Total: 1
2019-04-06 12:39:14 -Initializing Spring FrameworkServlet 'dispatcherServlet'
2019-04-06 12:39:14 -FrameworkServlet 'dispatcherServlet': initialization started
2019-04-06 12:39:14 -FrameworkServlet 'dispatcherServlet': initialization completed in 65 ms
2019-04-06 12:39:14 -Enabling session validation scheduler...
2019-04-06 12:39:14 -请求地址 : http://localhost:8081/login;JSESSIONID=a511ffbf-5bfb-47ae-a8e1-9ad1309f5d08
2019-04-06 12:39:14 -HTTP METHOD : GET
2019-04-06 12:39:14 -CLASS_METHOD : com.bootdo.system.controller.LoginController.login
2019-04-06 12:39:14 -参数 : [{}]
2019-04-06 12:39:14 -耗时 : 5
2019-04-06 12:39:14 -返回值 : login
2019-04-06 12:39:16 -请求地址 : http://localhost:8081/getVerify
2019-04-06 12:39:16 -HTTP METHOD : GET
2019-04-06 12:39:16 -CLASS_METHOD : com.bootdo.system.controller.LoginController.getVerify
2019-04-06 12:39:16 -参数 : [org.apache.shiro.web.servlet.ShiroHttpServletRequest@931a834, org.apache.shiro.web.servlet.ShiroHttpServletResponse@36ffe76d]
2019-04-06 12:39:19 -2060
2019-04-06 12:39:20 -耗时 : 3722
2019-04-06 12:39:20 -返回值 : null
2019-04-06 12:39:20 -请求地址 : http://localhost:8081/login
2019-04-06 12:39:20 -HTTP METHOD : GET
2019-04-06 12:39:20 -CLASS_METHOD : com.bootdo.system.controller.LoginController.login
2019-04-06 12:39:20 -参数 : [{}]
2019-04-06 12:39:20 -耗时 : 1
2019-04-06 12:39:20 -返回值 : login
2019-04-06 12:39:25 -请求地址 : http://localhost:8081/login
2019-04-06 12:39:25 -HTTP METHOD : POST
2019-04-06 12:39:25 -CLASS_METHOD : com.bootdo.system.controller.LoginController.ajaxLogin
2019-04-06 12:39:25 -参数 : [admin, 111111, 2060, org.apache.shiro.web.servlet.ShiroHttpServletRequest@27489d64]
2019-04-06 12:39:25 -==>  Preparing: select `user_id`,`username`,`name`,`password`,`dept_id`,`email`,`mobile`,`status`,`user_id_create`,`gmt_create`,`gmt_modified`,`sex`,`birth`,`pic_id`,`live_address`,`hobby`,`province`,`city`,`district` from sys_user WHERE username = ? order by user_id desc 
2019-04-06 12:39:25 -==> Parameters: admin(String)
2019-04-06 12:39:25 -<==      Total: 1
2019-04-06 12:39:25 -耗时 : 121
2019-04-06 12:39:25 -返回值 : {msg=操作成功, code=0}
2019-04-06 12:39:26 -More than one TaskExecutor bean found within the context, and none is named 'taskExecutor'. Mark one of them as primary or name it 'taskExecutor' (possibly as an alias) in order to use it for async processing: [clientInboundChannelExecutor, clientOutboundChannelExecutor, brokerChannelExecutor, messageBrokerTaskScheduler]
2019-04-06 12:39:26 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-06 12:39:26 -==> Parameters: 1(Long), admin(String), 登录(String), 122(Integer), com.bootdo.system.controller.LoginController.ajaxLogin()(String), null, 127.0.0.1(String), 2019-04-06 12:39:26.045(Timestamp)
2019-04-06 12:39:26 -请求地址 : http://localhost:8081/index
2019-04-06 12:39:26 -HTTP METHOD : GET
2019-04-06 12:39:26 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2019-04-06 12:39:26 -参数 : [{}]
2019-04-06 12:39:26 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2019-04-06 12:39:26 -<==    Updates: 1
2019-04-06 12:39:26 -==> Parameters: 1(Long)
2019-04-06 12:39:26 -<==      Total: 46
2019-04-06 12:39:26 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2019-04-06 12:39:26 -==> Parameters: 138(Long)
2019-04-06 12:39:26 -<==      Total: 1
2019-04-06 12:39:26 -耗时 : 228
2019-04-06 12:39:26 -返回值 : index_v1
2019-04-06 12:39:26 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-06 12:39:26 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 228(Integer), com.bootdo.system.controller.LoginController.index()(String), {"menus":[{"attributes":{"icon":"fa fa-money","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-money","url":"/moneyList/moneyList"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"102","parentId":"106","text":"现金缴费"},{"attributes":{"icon":"fa fa-book","url":"/moneyLog/elecLog"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"107","parentId":"106","text":"缴费记录"}],"hasChildren":true,"hasParent":false,"id":"106","parentId":"0","text":"收费管理"},{"attributes":{"icon":"fa fa-lightbulb-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/elec/elec"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"121","parentId":"103","text":"电费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"elec/elecInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"122","parentId":"103","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"elec/elecUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"123","parentId":"103","text":"电表上传"},{"attributes":{"icon":"fa fa-cc","url":"/elec/elecPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"124","parentId":"103","text":"电价管理"}],"hasChildren":true,"hasParent":false,"id":"103","parentId":"0","text":"电费管理"},{"attributes":{"icon":"fa fa-tint","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/water/water"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"117","parentId":"105","text":"水费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"water/waterInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"118","parentId":"105","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"water/waterUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"119","parentId":"105","text":"水费生成"},{"attributes":{"icon":"fa fa-cc","url":"/water/waterPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"120","parentId":"105","text":"水价管理"}],"hasChildren":true,"hasParent":false,"id":"105","parentId":"0","text":"水费管理"},{"attributes":{"icon":"fa fa-fire","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/heat/heat"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"113","parentId":"104","text":"暖费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"heat/heatInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"114","parentId":"104","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"heat/heatUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"115","parentId":"104","text":"暖费生成"},{"attributes":{"icon":"","url":"/heat/heatPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"116","parentId":"104","text":"暖价管理"}],"hasChildren":true,"hasParent":false,"id":"104","parentId":"0","text":"暖费管理"},{"attributes":{"icon":"fa fa-vcard-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-bomb","url":"/print/print"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"149","parentId":"108","text":"票据记录"}],"hasChildren":true,"hasParent":false,"id":"108","parentId":"0","text":"票据管理"},{"attributes":{"icon":"fa fa-bar-chart","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-area-chart","url":"/chart/graph_echarts.html"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","text":"百度chart"},{"attributes":{"icon":"fa fa-sun-o","url":"charts/countDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"109","parentId":"97","text":"日统计报表"},{"attributes":{"icon":"fa fa-registered","url":"charts/countMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"110","parentId":"97","text":"月统计报表"},{"attributes":{"icon":"fa fa-support","url":"charts/countYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"111","parentId":"97","text":"年统计报表"},{"attributes":{"icon":"fa fa-money","url":"charts/countOwe"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"155","parentId":"97","text":"欠费报表图"},{"attributes":{"icon":"fa fa-tachometer","url":"charts/countRun"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"112","parentId":"97","text":"走势图报表"}],"hasChildren":true,"hasParent":false,"id":"97","parentId":"0","text":"统计管理"},{"attributes":{"icon":"fa fa-bars","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-book","url":"/common/dict"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"78","parentId":"1","text":"数据字典"},{"attributes":{"icon":"fa fa-folder-open","url":"/common/sysFile"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"71","parentId":"1","text":"文件管理"}],"h(String), 127.0.0.1(String), 2019-04-06 12:39:26.482(Timestamp)
2019-04-06 12:39:26 -<==    Updates: 1
2019-04-06 12:39:26 -请求地址 : http://localhost:8081/main
2019-04-06 12:39:26 -HTTP METHOD : GET
2019-04-06 12:39:26 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-06 12:39:26 -参数 : []
2019-04-06 12:39:26 -耗时 : 1
2019-04-06 12:39:26 -返回值 : main
2019-04-06 12:39:27 -请求地址 : http://localhost:8081/oa/notify/message
2019-04-06 12:39:27 -HTTP METHOD : GET
2019-04-06 12:39:27 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2019-04-06 12:39:27 -参数 : []
2019-04-06 12:39:27 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2019-04-06 12:39:27 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2019-04-06 12:39:27 -<==      Total: 0
2019-04-06 12:39:27 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2019-04-06 12:39:27 -==> Parameters: 1(Long), 0(String)
2019-04-06 12:39:27 -<==      Total: 1
2019-04-06 12:39:27 -耗时 : 39
2019-04-06 12:39:27 -返回值 : com.bootdo.common.utils.PageUtils@5ec325c4
2019-04-06 12:39:27 -请求地址 : http://localhost:8081/main
2019-04-06 12:39:27 -HTTP METHOD : GET
2019-04-06 12:39:27 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-06 12:39:27 -参数 : []
2019-04-06 12:39:27 -耗时 : 0
2019-04-06 12:39:27 -返回值 : main
2019-04-06 12:39:31 -==>  Preparing: select distinct m.perms from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id = ur.role_id where ur.user_id = ? 
2019-04-06 12:39:31 -==> Parameters: 1(Long)
2019-04-06 12:39:31 -<==      Total: 90
2019-04-06 12:39:31 -请求地址 : http://localhost:8081/moneyLog/elecLog
2019-04-06 12:39:31 -HTTP METHOD : GET
2019-04-06 12:39:31 -CLASS_METHOD : com.bootdo.moneyLog.controller.ElecLogController.moneyLog
2019-04-06 12:39:31 -参数 : []
2019-04-06 12:39:31 -耗时 : 0
2019-04-06 12:39:31 -返回值 : /moneyLog/elecLog/elecLog
2019-04-06 12:39:32 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-06 12:39:32 -HTTP METHOD : GET
2019-04-06 12:39:32 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-06 12:39:32 -参数 : [userType]
2019-04-06 12:39:32 -请求地址 : http://localhost:8081/moneyLog/elecLog/list
2019-04-06 12:39:32 -HTTP METHOD : GET
2019-04-06 12:39:32 -CLASS_METHOD : com.bootdo.moneyLog.controller.ElecLogController.list
2019-04-06 12:39:32 -参数 : [{limit=10, offset=0, userType=, userOrg=, userId=, elecDate=}]
2019-04-06 12:39:32 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-06 12:39:32 -==> Parameters: userType(String)
2019-04-06 12:39:32 -<==      Total: 2
2019-04-06 12:39:32 -耗时 : 31
2019-04-06 12:39:32 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-06 12:39:32 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`elec_type`,`elec_money`,`elec_date`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec_log order by id asc limit ?, ? 
2019-04-06 12:39:32 -==> Parameters: 0(Integer), 10(Integer)
2019-04-06 12:39:32 -<==      Total: 7
2019-04-06 12:39:32 -==>  Preparing: select count(*) from elec_log 
2019-04-06 12:39:32 -==> Parameters: 
2019-04-06 12:39:32 -<==      Total: 1
2019-04-06 12:39:32 -耗时 : 72
2019-04-06 12:39:32 -返回值 : com.bootdo.common.utils.PageUtils@53327b0e
2019-04-06 12:39:34 -请求地址 : http://localhost:8081/moneyLog/waterLog
2019-04-06 12:39:34 -HTTP METHOD : GET
2019-04-06 12:39:34 -CLASS_METHOD : com.bootdo.moneyLog.controller.WaterLogController.WaterLog
2019-04-06 12:39:34 -参数 : []
2019-04-06 12:39:34 -耗时 : 1
2019-04-06 12:39:34 -返回值 : /moneyLog/waterLog/waterLog
2019-04-06 12:39:34 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-06 12:39:34 -HTTP METHOD : GET
2019-04-06 12:39:34 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-06 12:39:34 -参数 : [userType]
2019-04-06 12:39:34 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-06 12:39:34 -==> Parameters: userType(String)
2019-04-06 12:39:34 -<==      Total: 2
2019-04-06 12:39:34 -耗时 : 5
2019-04-06 12:39:34 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-06 12:39:34 -请求地址 : http://localhost:8081/moneyLog/waterLog/list
2019-04-06 12:39:34 -HTTP METHOD : GET
2019-04-06 12:39:34 -CLASS_METHOD : com.bootdo.moneyLog.controller.WaterLogController.list
2019-04-06 12:39:34 -参数 : [{limit=10, offset=0, userType=, userOrg=, userId=, waterDate=}]
2019-04-06 12:39:34 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,`water_type`,`water_money`,`water_date`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from water_log order by id asc limit ?, ? 
2019-04-06 12:39:34 -==> Parameters: 0(Integer), 10(Integer)
2019-04-06 12:39:34 -<==      Total: 5
2019-04-06 12:39:34 -==>  Preparing: select count(*) from water_log 
2019-04-06 12:39:34 -==> Parameters: 
2019-04-06 12:39:34 -<==      Total: 1
2019-04-06 12:39:34 -耗时 : 30
2019-04-06 12:39:34 -返回值 : com.bootdo.common.utils.PageUtils@552f661
2019-04-06 12:39:34 -WebSocketSession[1 current WS(1)-HttpStream(0)-HttpPoll(0), 1 total, 0 closed abnormally (0 connect failure, 0 send limit, 0 transport error)], stompSubProtocol[processed CONNECT(1)-CONNECTED(1)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 8, active threads = 0, queued tasks = 0, completed tasks = 9], outboundChannelpool size = 1, active threads = 0, queued tasks = 0, completed tasks = 1], sockJsScheduler[pool size = 4, active threads = 1, queued tasks = 2, completed tasks = 2]
2019-04-06 12:39:35 -请求地址 : http://localhost:8081/moneyLog/heatLog
2019-04-06 12:39:35 -HTTP METHOD : GET
2019-04-06 12:39:35 -CLASS_METHOD : com.bootdo.moneyLog.controller.HeatLogController.HeatLog
2019-04-06 12:39:35 -参数 : []
2019-04-06 12:39:35 -耗时 : 0
2019-04-06 12:39:35 -返回值 : /moneyLog/heatLog/heatLog
2019-04-06 12:39:35 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-06 12:39:35 -HTTP METHOD : GET
2019-04-06 12:39:35 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-06 12:39:35 -参数 : [userType]
2019-04-06 12:39:35 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-06 12:39:35 -==> Parameters: userType(String)
2019-04-06 12:39:35 -<==      Total: 2
2019-04-06 12:39:35 -耗时 : 7
2019-04-06 12:39:35 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-06 12:39:35 -请求地址 : http://localhost:8081/moneyLog/heatLog/list
2019-04-06 12:39:35 -HTTP METHOD : GET
2019-04-06 12:39:35 -CLASS_METHOD : com.bootdo.moneyLog.controller.HeatLogController.list
2019-04-06 12:39:35 -参数 : [{limit=10, offset=0, userType=, userOrg=, userId=, heatDate=}]
2019-04-06 12:39:35 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,`heat_type`,`heat_money`,`heat_date`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from heat_log order by id asc limit ?, ? 
2019-04-06 12:39:35 -==> Parameters: 0(Integer), 10(Integer)
2019-04-06 12:39:35 -<==      Total: 5
2019-04-06 12:39:35 -==>  Preparing: select count(*) from heat_log 
2019-04-06 12:39:35 -==> Parameters: 
2019-04-06 12:39:35 -<==      Total: 1
2019-04-06 12:39:35 -耗时 : 31
2019-04-06 12:39:35 -返回值 : com.bootdo.common.utils.PageUtils@2e8c85af
2019-04-06 12:39:36 -请求地址 : http://localhost:8081/moneyLog/heatLog
2019-04-06 12:39:36 -HTTP METHOD : GET
2019-04-06 12:39:36 -CLASS_METHOD : com.bootdo.moneyLog.controller.HeatLogController.HeatLog
2019-04-06 12:39:36 -参数 : []
2019-04-06 12:39:36 -耗时 : 0
2019-04-06 12:39:36 -返回值 : /moneyLog/heatLog/heatLog
2019-04-06 12:39:36 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-06 12:39:36 -HTTP METHOD : GET
2019-04-06 12:39:36 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-06 12:39:36 -参数 : [userType]
2019-04-06 12:39:36 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-06 12:39:36 -==> Parameters: userType(String)
2019-04-06 12:39:36 -<==      Total: 2
2019-04-06 12:39:36 -耗时 : 5
2019-04-06 12:39:36 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-06 12:39:37 -请求地址 : http://localhost:8081/moneyLog/heatLog/list
2019-04-06 12:39:37 -HTTP METHOD : GET
2019-04-06 12:39:37 -CLASS_METHOD : com.bootdo.moneyLog.controller.HeatLogController.list
2019-04-06 12:39:37 -参数 : [{limit=10, offset=0, userType=, userOrg=, userId=, heatDate=}]
2019-04-06 12:39:37 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,`heat_type`,`heat_money`,`heat_date`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from heat_log order by id asc limit ?, ? 
2019-04-06 12:39:37 -==> Parameters: 0(Integer), 10(Integer)
2019-04-06 12:39:37 -<==      Total: 5
2019-04-06 12:39:37 -==>  Preparing: select count(*) from heat_log 
2019-04-06 12:39:37 -==> Parameters: 
2019-04-06 12:39:37 -<==      Total: 1
2019-04-06 12:39:37 -耗时 : 10
2019-04-06 12:39:37 -返回值 : com.bootdo.common.utils.PageUtils@3c8832ab
2019-04-06 12:39:37 -请求地址 : http://localhost:8081/moneyLog/heatLog
2019-04-06 12:39:37 -HTTP METHOD : GET
2019-04-06 12:39:37 -CLASS_METHOD : com.bootdo.moneyLog.controller.HeatLogController.HeatLog
2019-04-06 12:39:37 -参数 : []
2019-04-06 12:39:37 -耗时 : 1
2019-04-06 12:39:37 -返回值 : /moneyLog/heatLog/heatLog
2019-04-06 12:39:37 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-06 12:39:37 -HTTP METHOD : GET
2019-04-06 12:39:37 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-06 12:39:37 -参数 : [userType]
2019-04-06 12:39:37 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-06 12:39:37 -==> Parameters: userType(String)
2019-04-06 12:39:37 -<==      Total: 2
2019-04-06 12:39:37 -耗时 : 5
2019-04-06 12:39:37 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-06 12:39:37 -请求地址 : http://localhost:8081/moneyLog/heatLog/list
2019-04-06 12:39:37 -HTTP METHOD : GET
2019-04-06 12:39:37 -CLASS_METHOD : com.bootdo.moneyLog.controller.HeatLogController.list
2019-04-06 12:39:37 -参数 : [{limit=10, offset=0, userType=, userOrg=, userId=, heatDate=}]
2019-04-06 12:39:37 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,`heat_type`,`heat_money`,`heat_date`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from heat_log order by id asc limit ?, ? 
2019-04-06 12:39:37 -==> Parameters: 0(Integer), 10(Integer)
2019-04-06 12:39:37 -<==      Total: 5
2019-04-06 12:39:37 -==>  Preparing: select count(*) from heat_log 
2019-04-06 12:39:37 -==> Parameters: 
2019-04-06 12:39:37 -<==      Total: 1
2019-04-06 12:39:37 -耗时 : 7
2019-04-06 12:39:37 -返回值 : com.bootdo.common.utils.PageUtils@f1880d3
2019-04-06 12:39:38 -请求地址 : http://localhost:8081/moneyLog/elecLog
2019-04-06 12:39:38 -HTTP METHOD : GET
2019-04-06 12:39:38 -CLASS_METHOD : com.bootdo.moneyLog.controller.ElecLogController.moneyLog
2019-04-06 12:39:38 -参数 : []
2019-04-06 12:39:38 -耗时 : 1
2019-04-06 12:39:38 -返回值 : /moneyLog/elecLog/elecLog
2019-04-06 12:39:38 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-06 12:39:38 -HTTP METHOD : GET
2019-04-06 12:39:38 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-06 12:39:38 -参数 : [userType]
2019-04-06 12:39:38 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-06 12:39:38 -==> Parameters: userType(String)
2019-04-06 12:39:38 -<==      Total: 2
2019-04-06 12:39:38 -耗时 : 5
2019-04-06 12:39:38 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-06 12:39:38 -请求地址 : http://localhost:8081/moneyLog/elecLog/list
2019-04-06 12:39:38 -HTTP METHOD : GET
2019-04-06 12:39:38 -CLASS_METHOD : com.bootdo.moneyLog.controller.ElecLogController.list
2019-04-06 12:39:38 -参数 : [{limit=10, offset=0, userType=, userOrg=, userId=, elecDate=}]
2019-04-06 12:39:38 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`elec_type`,`elec_money`,`elec_date`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec_log order by id asc limit ?, ? 
2019-04-06 12:39:38 -==> Parameters: 0(Integer), 10(Integer)
2019-04-06 12:39:38 -<==      Total: 7
2019-04-06 12:39:38 -==>  Preparing: select count(*) from elec_log 
2019-04-06 12:39:38 -==> Parameters: 
2019-04-06 12:39:38 -<==      Total: 1
2019-04-06 12:39:38 -耗时 : 9
2019-04-06 12:39:38 -返回值 : com.bootdo.common.utils.PageUtils@4ecd26d0
2019-04-06 12:39:41 -请求地址 : http://localhost:8081/moneyLog/elecLog/edit/1
2019-04-06 12:39:41 -HTTP METHOD : GET
2019-04-06 12:39:41 -CLASS_METHOD : com.bootdo.moneyLog.controller.ElecLogController.edit
2019-04-06 12:39:41 -参数 : [1, {}]
2019-04-06 12:39:41 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`elec_type`,`elec_money`,`elec_date`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec_log where id = ? 
2019-04-06 12:39:41 -==> Parameters: 1(Long)
2019-04-06 12:39:41 -<==      Total: 1
2019-04-06 12:39:41 -耗时 : 7
2019-04-06 12:39:41 -返回值 : moneyLog/elecLog/edit
2019-04-06 12:39:41 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-06 12:39:41 -HTTP METHOD : GET
2019-04-06 12:39:41 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-06 12:39:41 -参数 : [userType]
2019-04-06 12:39:41 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-06 12:39:41 -==> Parameters: userType(String)
2019-04-06 12:39:41 -请求地址 : http://localhost:8081/common/dict/list/elecType
2019-04-06 12:39:41 -HTTP METHOD : GET
2019-04-06 12:39:41 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-06 12:39:41 -参数 : [elecType]
2019-04-06 12:39:41 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-06 12:39:41 -==> Parameters: elecType(String)
2019-04-06 12:39:41 -<==      Total: 2
2019-04-06 12:39:41 -耗时 : 4
2019-04-06 12:39:41 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-06 12:39:41 -<==      Total: 4
2019-04-06 12:39:41 -耗时 : 12
2019-04-06 12:39:41 -返回值 : [DictDO{id=139, name='民用电', value='1', type='elecType', description='电量性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=138, name='商业电', value='0', type='elecType', description='电量类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=136, name='工业非盈利', value='3', type='elecType', description='暖气类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=135, name='工业盈利', value='2', type='elecType', description='暖气类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-06 12:39:46 -请求地址 : http://localhost:8081/moneyLog/elecLog/edit/7
2019-04-06 12:39:46 -HTTP METHOD : GET
2019-04-06 12:39:46 -CLASS_METHOD : com.bootdo.moneyLog.controller.ElecLogController.edit
2019-04-06 12:39:46 -参数 : [7, {}]
2019-04-06 12:39:46 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`elec_type`,`elec_money`,`elec_date`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec_log where id = ? 
2019-04-06 12:39:46 -==> Parameters: 7(Long)
2019-04-06 12:39:46 -<==      Total: 1
2019-04-06 12:39:46 -耗时 : 17
2019-04-06 12:39:46 -返回值 : moneyLog/elecLog/edit
2019-04-06 12:39:47 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-06 12:39:47 -HTTP METHOD : GET
2019-04-06 12:39:47 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-06 12:39:47 -参数 : [userType]
2019-04-06 12:39:47 -请求地址 : http://localhost:8081/common/dict/list/elecType
2019-04-06 12:39:47 -HTTP METHOD : GET
2019-04-06 12:39:47 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-06 12:39:47 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-06 12:39:47 -参数 : [elecType]
2019-04-06 12:39:47 -==> Parameters: userType(String)
2019-04-06 12:39:47 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-06 12:39:47 -==> Parameters: elecType(String)
2019-04-06 12:39:47 -<==      Total: 2
2019-04-06 12:39:47 -<==      Total: 4
2019-04-06 12:39:47 -耗时 : 8
2019-04-06 12:39:47 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-06 12:39:47 -耗时 : 7
2019-04-06 12:39:47 -返回值 : [DictDO{id=139, name='民用电', value='1', type='elecType', description='电量性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=138, name='商业电', value='0', type='elecType', description='电量类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=136, name='工业非盈利', value='3', type='elecType', description='暖气类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=135, name='工业盈利', value='2', type='elecType', description='暖气类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-06 12:39:59 -请求地址 : http://localhost:8081/moneyLog/elecLog/update
2019-04-06 12:39:59 -HTTP METHOD : POST
2019-04-06 12:39:59 -CLASS_METHOD : com.bootdo.moneyLog.controller.ElecLogController.update
2019-04-06 12:39:59 -参数 : [com.bootdo.moneyLog.domain.ElecLogDO@27047ede]
2019-04-06 12:39:59 -==>  Preparing: update elec_log SET `user_id` = ?, `user_name` = ?, `user_type` = ?, `user_org` = ?, `elec_type` = ?, `elec_money` = ?, `elec_date` = ?, `create_time` = ?, `create_by` = ?, `update_time` = ?, `update_by` = ?, `remark` = ? where id = ? 
2019-04-06 12:39:59 -==> Parameters: 5-8888(String), asda(String), A(String), 2(String), 0(String), 80.00(BigDecimal), 2019-03-27 18:15:03.0(Timestamp), 2019-03(String), 1(Long), 2019-04-06 12:39:59.432(Timestamp), 1(Long), (String), 7(Long)
2019-04-06 12:39:59 -<==    Updates: 1
2019-04-06 12:39:59 -耗时 : 123
2019-04-06 12:39:59 -返回值 : {msg=操作成功, code=0}
2019-04-06 12:39:59 -请求地址 : http://localhost:8081/moneyLog/elecLog/list
2019-04-06 12:39:59 -HTTP METHOD : GET
2019-04-06 12:39:59 -CLASS_METHOD : com.bootdo.moneyLog.controller.ElecLogController.list
2019-04-06 12:39:59 -参数 : [{limit=10, offset=0, userType=, userOrg=, userId=, elecDate=}]
2019-04-06 12:39:59 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`elec_type`,`elec_money`,`elec_date`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec_log order by id asc limit ?, ? 
2019-04-06 12:39:59 -==> Parameters: 0(Integer), 10(Integer)
2019-04-06 12:39:59 -<==      Total: 7
2019-04-06 12:39:59 -==>  Preparing: select count(*) from elec_log 
2019-04-06 12:39:59 -==> Parameters: 
2019-04-06 12:39:59 -<==      Total: 1
2019-04-06 12:39:59 -耗时 : 19
2019-04-06 12:39:59 -返回值 : com.bootdo.common.utils.PageUtils@25dc9cab
2019-04-06 12:40:01 -请求地址 : http://localhost:8081/moneyLog/waterLog
2019-04-06 12:40:01 -HTTP METHOD : GET
2019-04-06 12:40:01 -CLASS_METHOD : com.bootdo.moneyLog.controller.WaterLogController.WaterLog
2019-04-06 12:40:01 -参数 : []
2019-04-06 12:40:01 -耗时 : 1
2019-04-06 12:40:01 -返回值 : /moneyLog/waterLog/waterLog
2019-04-06 12:40:01 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-06 12:40:01 -HTTP METHOD : GET
2019-04-06 12:40:01 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-06 12:40:01 -参数 : [userType]
2019-04-06 12:40:01 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-06 12:40:01 -==> Parameters: userType(String)
2019-04-06 12:40:01 -<==      Total: 2
2019-04-06 12:40:01 -耗时 : 4
2019-04-06 12:40:01 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-06 12:40:01 -请求地址 : http://localhost:8081/moneyLog/waterLog/list
2019-04-06 12:40:01 -HTTP METHOD : GET
2019-04-06 12:40:01 -CLASS_METHOD : com.bootdo.moneyLog.controller.WaterLogController.list
2019-04-06 12:40:01 -参数 : [{limit=10, offset=0, userType=, userOrg=, userId=, waterDate=}]
2019-04-06 12:40:01 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,`water_type`,`water_money`,`water_date`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from water_log order by id asc limit ?, ? 
2019-04-06 12:40:01 -==> Parameters: 0(Integer), 10(Integer)
2019-04-06 12:40:01 -<==      Total: 5
2019-04-06 12:40:01 -==>  Preparing: select count(*) from water_log 
2019-04-06 12:40:01 -==> Parameters: 
2019-04-06 12:40:01 -<==      Total: 1
2019-04-06 12:40:01 -耗时 : 8
2019-04-06 12:40:01 -返回值 : com.bootdo.common.utils.PageUtils@2a449667
2019-04-06 12:40:09 -请求地址 : http://localhost:8081/moneyLog/waterLog/edit/5
2019-04-06 12:40:09 -HTTP METHOD : GET
2019-04-06 12:40:09 -CLASS_METHOD : com.bootdo.moneyLog.controller.WaterLogController.edit
2019-04-06 12:40:09 -参数 : [5, {}]
2019-04-06 12:40:09 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,`water_type`,`water_money`,`water_date`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from water_log where id = ? 
2019-04-06 12:40:09 -==> Parameters: 5(Long)
2019-04-06 12:40:09 -<==      Total: 1
2019-04-06 12:40:09 -耗时 : 7
2019-04-06 12:40:09 -返回值 : moneyLog/waterLog/edit
2019-04-06 12:40:10 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-06 12:40:10 -HTTP METHOD : GET
2019-04-06 12:40:10 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-06 12:40:10 -参数 : [userType]
2019-04-06 12:40:10 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-06 12:40:10 -==> Parameters: userType(String)
2019-04-06 12:40:10 -<==      Total: 2
2019-04-06 12:40:10 -耗时 : 4
2019-04-06 12:40:10 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-06 12:40:10 -请求地址 : http://localhost:8081/common/dict/list/waterType
2019-04-06 12:40:10 -HTTP METHOD : GET
2019-04-06 12:40:10 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-06 12:40:10 -参数 : [waterType]
2019-04-06 12:40:10 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-06 12:40:10 -==> Parameters: waterType(String)
2019-04-06 12:40:10 -<==      Total: 6
2019-04-06 12:40:10 -耗时 : 7
2019-04-06 12:40:10 -返回值 : [DictDO{id=132, name='特殊水费4', value='5', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=131, name='特殊水费3', value='4', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=130, name='特殊水费2', value='3', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=129, name='特殊水费1', value='2', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=128, name='民用水', value='1', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=127, name='商业水', value='0', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-06 12:40:18 -请求地址 : http://localhost:8081/system/sysDept/treeView
2019-04-06 12:40:18 -HTTP METHOD : GET
2019-04-06 12:40:18 -CLASS_METHOD : com.bootdo.system.controller.DeptController.treeView
2019-04-06 12:40:18 -参数 : []
2019-04-06 12:40:18 -耗时 : 0
2019-04-06 12:40:18 -返回值 : system/dept/deptTree
2019-04-06 12:40:18 -请求地址 : http://localhost:8081/system/sysDept/tree
2019-04-06 12:40:18 -HTTP METHOD : GET
2019-04-06 12:40:18 -CLASS_METHOD : com.bootdo.system.controller.DeptController.tree
2019-04-06 12:40:18 -参数 : []
2019-04-06 12:40:18 -==>  Preparing: select `dept_id`,`parent_id`,`name`,`order_num`,`del_flag` from sys_dept order by dept_id desc 
2019-04-06 12:40:18 -==> Parameters: 
2019-04-06 12:40:18 -<==      Total: 3
2019-04-06 12:40:18 -耗时 : 19
2019-04-06 12:40:18 -返回值 : {"checked":false,"children":[{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"3","parentId":"1","state":{"opened":true},"text":"牙星"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"2","parentId":"1","state":{"opened":true},"text":"五九"}],"hasChildren":true,"hasParent":false,"id":"1","parentId":"0","state":{"opened":true},"text":"总公司"}
2019-04-06 12:40:34 -请求地址 : http://localhost:8081/moneyLog/waterLog/update
2019-04-06 12:40:34 -HTTP METHOD : POST
2019-04-06 12:40:34 -CLASS_METHOD : com.bootdo.moneyLog.controller.WaterLogController.update
2019-04-06 12:40:34 -参数 : [com.bootdo.moneyLog.domain.WaterLogDO@3a09cb1a]
2019-04-06 12:40:34 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-06 12:40:34 -==> Parameters: 1(Long), admin(String), error(String), null, http://localhost:8081/moneyLog/waterLog/update(String), org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.exceptions.PersistenceException: 
### Error updating database.  Cause: java.lang.IllegalArgumentException: invalid comparison: java.util.Date and java.lang.String
### Cause: java.lang.IllegalArgumentException: invalid comparison: java.util.Date and java.lang.String(String), null, 2019-04-06 12:40:34.879(Timestamp)
2019-04-06 12:40:34 -nested exception is org.apache.ibatis.exceptions.PersistenceException: 
### Error updating database.  Cause: java.lang.IllegalArgumentException: invalid comparison: java.util.Date and java.lang.String
### Cause: java.lang.IllegalArgumentException: invalid comparison: java.util.Date and java.lang.String
org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.exceptions.PersistenceException: 
### Error updating database.  Cause: java.lang.IllegalArgumentException: invalid comparison: java.util.Date and java.lang.String
### Cause: java.lang.IllegalArgumentException: invalid comparison: java.util.Date and java.lang.String
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:79)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:447)
	at com.sun.proxy.$Proxy101.update(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.update(SqlSessionTemplate.java:295)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:62)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy104.update(Unknown Source)
	at com.bootdo.moneyLog.service.impl.WaterLogServiceImpl.update(WaterLogServiceImpl.java:39)
	at com.bootdo.moneyLog.controller.WaterLogController.update(WaterLogController.java:210)
	at com.bootdo.moneyLog.controller.WaterLogController$$FastClassBySpringCGLIB$$3a5e3635.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:204)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:746)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.bootdo.common.aspect.WebLogAspect.doAround(WebLogAspect.java:57)
	at sun.reflect.GeneratedMethodAccessor125.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.apache.shiro.spring.security.interceptor.AopAllianceAnnotationsAuthorizingMethodInterceptor$1.proceed(AopAllianceAnnotationsAuthorizingMethodInterceptor.java:82)
	at org.apache.shiro.authz.aop.AuthorizingMethodInterceptor.invoke(AuthorizingMethodInterceptor.java:39)
	at org.apache.shiro.spring.security.interceptor.AopAllianceAnnotationsAuthorizingMethodInterceptor.invoke(AopAllianceAnnotationsAuthorizingMethodInterceptor.java:115)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.bootdo.moneyLog.controller.WaterLogController$$EnhancerBySpringCGLIB$$ffa0823d.update(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:209)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:877)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:783)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:991)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:925)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:974)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:877)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:661)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:851)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:61)
	at org.apache.shiro.web.servlet.AdviceFilter.executeChain(AdviceFilter.java:108)
	at org.apache.shiro.web.servlet.AdviceFilter.doFilterInternal(AdviceFilter.java:137)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:66)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)
	at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)
	at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)
	at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)
	at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:383)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:109)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:496)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:790)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1468)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Unknown Source)
Caused by: org.apache.ibatis.exceptions.PersistenceException: 
### Error updating database.  Cause: java.lang.IllegalArgumentException: invalid comparison: java.util.Date and java.lang.String
### Cause: java.lang.IllegalArgumentException: invalid comparison: java.util.Date and java.lang.String
	at org.apache.ibatis.exceptions.ExceptionFactory.wrapException(ExceptionFactory.java:30)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:200)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:434)
	... 103 common frames omitted
Caused by: java.lang.IllegalArgumentException: invalid comparison: java.util.Date and java.lang.String
	at org.apache.ibatis.ognl.OgnlOps.compareWithConversion(OgnlOps.java:93)
	at org.apache.ibatis.ognl.OgnlOps.isEqual(OgnlOps.java:143)
	at org.apache.ibatis.ognl.OgnlOps.equal(OgnlOps.java:802)
	at org.apache.ibatis.ognl.ASTNotEq.getValueBody(ASTNotEq.java:53)
	at org.apache.ibatis.ognl.SimpleNode.evaluateGetValueBody(SimpleNode.java:212)
	at org.apache.ibatis.ognl.SimpleNode.getValue(SimpleNode.java:258)
	at org.apache.ibatis.ognl.ASTAnd.getValueBody(ASTAnd.java:61)
	at org.apache.ibatis.ognl.SimpleNode.evaluateGetValueBody(SimpleNode.java:212)
	at org.apache.ibatis.ognl.SimpleNode.getValue(SimpleNode.java:258)
	at org.apache.ibatis.ognl.Ognl.getValue(Ognl.java:470)
	at org.apache.ibatis.ognl.Ognl.getValue(Ognl.java:434)
	at org.apache.ibatis.scripting.xmltags.OgnlCache.getValue(OgnlCache.java:44)
	at org.apache.ibatis.scripting.xmltags.ExpressionEvaluator.evaluateBoolean(ExpressionEvaluator.java:32)
	at org.apache.ibatis.scripting.xmltags.IfSqlNode.apply(IfSqlNode.java:34)
	at org.apache.ibatis.scripting.xmltags.MixedSqlNode.apply(MixedSqlNode.java:33)
	at org.apache.ibatis.scripting.xmltags.TrimSqlNode.apply(TrimSqlNode.java:55)
	at org.apache.ibatis.scripting.xmltags.MixedSqlNode.apply(MixedSqlNode.java:33)
	at org.apache.ibatis.scripting.xmltags.DynamicSqlSource.getBoundSql(DynamicSqlSource.java:41)
	at org.apache.ibatis.mapping.MappedStatement.getBoundSql(MappedStatement.java:292)
	at org.apache.ibatis.executor.statement.BaseStatementHandler.<init>(BaseStatementHandler.java:64)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.<init>(PreparedStatementHandler.java:40)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.<init>(RoutingStatementHandler.java:46)
	at org.apache.ibatis.session.Configuration.newStatementHandler(Configuration.java:545)
	at org.apache.ibatis.executor.SimpleExecutor.doUpdate(SimpleExecutor.java:48)
	at org.apache.ibatis.executor.BaseExecutor.update(BaseExecutor.java:117)
	at org.apache.ibatis.executor.CachingExecutor.update(CachingExecutor.java:76)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:198)
	... 108 common frames omitted
2019-04-06 12:40:34 -<==    Updates: 1
2019-04-06 12:40:37 -请求地址 : http://localhost:8081/moneyLog/waterLog/update
2019-04-06 12:40:37 -HTTP METHOD : POST
2019-04-06 12:40:37 -CLASS_METHOD : com.bootdo.moneyLog.controller.WaterLogController.update
2019-04-06 12:40:37 -参数 : [com.bootdo.moneyLog.domain.WaterLogDO@4df04e44]
2019-04-06 12:40:37 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-06 12:40:37 -==> Parameters: 1(Long), admin(String), error(String), null, http://localhost:8081/moneyLog/waterLog/update(String), org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.exceptions.PersistenceException: 
### Error updating database.  Cause: java.lang.IllegalArgumentException: invalid comparison: java.util.Date and java.lang.String
### Cause: java.lang.IllegalArgumentException: invalid comparison: java.util.Date and java.lang.String(String), null, 2019-04-06 12:40:37.611(Timestamp)
2019-04-06 12:40:37 -nested exception is org.apache.ibatis.exceptions.PersistenceException: 
### Error updating database.  Cause: java.lang.IllegalArgumentException: invalid comparison: java.util.Date and java.lang.String
### Cause: java.lang.IllegalArgumentException: invalid comparison: java.util.Date and java.lang.String
org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.exceptions.PersistenceException: 
### Error updating database.  Cause: java.lang.IllegalArgumentException: invalid comparison: java.util.Date and java.lang.String
### Cause: java.lang.IllegalArgumentException: invalid comparison: java.util.Date and java.lang.String
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:79)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:447)
	at com.sun.proxy.$Proxy101.update(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.update(SqlSessionTemplate.java:295)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:62)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy104.update(Unknown Source)
	at com.bootdo.moneyLog.service.impl.WaterLogServiceImpl.update(WaterLogServiceImpl.java:39)
	at com.bootdo.moneyLog.controller.WaterLogController.update(WaterLogController.java:210)
	at com.bootdo.moneyLog.controller.WaterLogController$$FastClassBySpringCGLIB$$3a5e3635.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:204)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:746)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.bootdo.common.aspect.WebLogAspect.doAround(WebLogAspect.java:57)
	at sun.reflect.GeneratedMethodAccessor125.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.apache.shiro.spring.security.interceptor.AopAllianceAnnotationsAuthorizingMethodInterceptor$1.proceed(AopAllianceAnnotationsAuthorizingMethodInterceptor.java:82)
	at org.apache.shiro.authz.aop.AuthorizingMethodInterceptor.invoke(AuthorizingMethodInterceptor.java:39)
	at org.apache.shiro.spring.security.interceptor.AopAllianceAnnotationsAuthorizingMethodInterceptor.invoke(AopAllianceAnnotationsAuthorizingMethodInterceptor.java:115)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.bootdo.moneyLog.controller.WaterLogController$$EnhancerBySpringCGLIB$$ffa0823d.update(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:209)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:877)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:783)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:991)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:925)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:974)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:877)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:661)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:851)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:61)
	at org.apache.shiro.web.servlet.AdviceFilter.executeChain(AdviceFilter.java:108)
	at org.apache.shiro.web.servlet.AdviceFilter.doFilterInternal(AdviceFilter.java:137)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:66)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)
	at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)
	at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)
	at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)
	at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:383)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:109)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:496)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:790)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1468)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Unknown Source)
Caused by: org.apache.ibatis.exceptions.PersistenceException: 
### Error updating database.  Cause: java.lang.IllegalArgumentException: invalid comparison: java.util.Date and java.lang.String
### Cause: java.lang.IllegalArgumentException: invalid comparison: java.util.Date and java.lang.String
	at org.apache.ibatis.exceptions.ExceptionFactory.wrapException(ExceptionFactory.java:30)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:200)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:434)
	... 103 common frames omitted
Caused by: java.lang.IllegalArgumentException: invalid comparison: java.util.Date and java.lang.String
	at org.apache.ibatis.ognl.OgnlOps.compareWithConversion(OgnlOps.java:93)
	at org.apache.ibatis.ognl.OgnlOps.isEqual(OgnlOps.java:143)
	at org.apache.ibatis.ognl.OgnlOps.equal(OgnlOps.java:802)
	at org.apache.ibatis.ognl.ASTNotEq.getValueBody(ASTNotEq.java:53)
	at org.apache.ibatis.ognl.SimpleNode.evaluateGetValueBody(SimpleNode.java:212)
	at org.apache.ibatis.ognl.SimpleNode.getValue(SimpleNode.java:258)
	at org.apache.ibatis.ognl.ASTAnd.getValueBody(ASTAnd.java:61)
	at org.apache.ibatis.ognl.SimpleNode.evaluateGetValueBody(SimpleNode.java:212)
	at org.apache.ibatis.ognl.SimpleNode.getValue(SimpleNode.java:258)
	at org.apache.ibatis.ognl.Ognl.getValue(Ognl.java:470)
	at org.apache.ibatis.ognl.Ognl.getValue(Ognl.java:434)
	at org.apache.ibatis.scripting.xmltags.OgnlCache.getValue(OgnlCache.java:44)
	at org.apache.ibatis.scripting.xmltags.ExpressionEvaluator.evaluateBoolean(ExpressionEvaluator.java:32)
	at org.apache.ibatis.scripting.xmltags.IfSqlNode.apply(IfSqlNode.java:34)
	at org.apache.ibatis.scripting.xmltags.MixedSqlNode.apply(MixedSqlNode.java:33)
	at org.apache.ibatis.scripting.xmltags.TrimSqlNode.apply(TrimSqlNode.java:55)
	at org.apache.ibatis.scripting.xmltags.MixedSqlNode.apply(MixedSqlNode.java:33)
	at org.apache.ibatis.scripting.xmltags.DynamicSqlSource.getBoundSql(DynamicSqlSource.java:41)
	at org.apache.ibatis.mapping.MappedStatement.getBoundSql(MappedStatement.java:292)
	at org.apache.ibatis.executor.statement.BaseStatementHandler.<init>(BaseStatementHandler.java:64)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.<init>(PreparedStatementHandler.java:40)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.<init>(RoutingStatementHandler.java:46)
	at org.apache.ibatis.session.Configuration.newStatementHandler(Configuration.java:545)
	at org.apache.ibatis.executor.SimpleExecutor.doUpdate(SimpleExecutor.java:48)
	at org.apache.ibatis.executor.BaseExecutor.update(BaseExecutor.java:117)
	at org.apache.ibatis.executor.CachingExecutor.update(CachingExecutor.java:76)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:198)
	... 108 common frames omitted
2019-04-06 12:40:37 -<==    Updates: 1
2019-04-06 12:44:15 -请求地址 : http://localhost:8081/index
2019-04-06 12:44:15 -HTTP METHOD : GET
2019-04-06 12:44:15 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2019-04-06 12:44:15 -参数 : [{}]
2019-04-06 12:44:15 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2019-04-06 12:44:16 -==> Parameters: 1(Long)
2019-04-06 12:44:16 -<==      Total: 46
2019-04-06 12:44:16 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2019-04-06 12:44:16 -==> Parameters: 138(Long)
2019-04-06 12:44:16 -<==      Total: 1
2019-04-06 12:44:16 -耗时 : 32
2019-04-06 12:44:16 -返回值 : index_v1
2019-04-06 12:44:16 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-06 12:44:16 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 33(Integer), com.bootdo.system.controller.LoginController.index()(String), {"menus":[{"attributes":{"icon":"fa fa-money","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-money","url":"/moneyList/moneyList"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"102","parentId":"106","text":"现金缴费"},{"attributes":{"icon":"fa fa-book","url":"/moneyLog/elecLog"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"107","parentId":"106","text":"缴费记录"}],"hasChildren":true,"hasParent":false,"id":"106","parentId":"0","text":"收费管理"},{"attributes":{"icon":"fa fa-lightbulb-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/elec/elec"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"121","parentId":"103","text":"电费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"elec/elecInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"122","parentId":"103","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"elec/elecUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"123","parentId":"103","text":"电表上传"},{"attributes":{"icon":"fa fa-cc","url":"/elec/elecPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"124","parentId":"103","text":"电价管理"}],"hasChildren":true,"hasParent":false,"id":"103","parentId":"0","text":"电费管理"},{"attributes":{"icon":"fa fa-tint","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/water/water"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"117","parentId":"105","text":"水费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"water/waterInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"118","parentId":"105","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"water/waterUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"119","parentId":"105","text":"水费生成"},{"attributes":{"icon":"fa fa-cc","url":"/water/waterPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"120","parentId":"105","text":"水价管理"}],"hasChildren":true,"hasParent":false,"id":"105","parentId":"0","text":"水费管理"},{"attributes":{"icon":"fa fa-fire","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/heat/heat"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"113","parentId":"104","text":"暖费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"heat/heatInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"114","parentId":"104","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"heat/heatUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"115","parentId":"104","text":"暖费生成"},{"attributes":{"icon":"","url":"/heat/heatPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"116","parentId":"104","text":"暖价管理"}],"hasChildren":true,"hasParent":false,"id":"104","parentId":"0","text":"暖费管理"},{"attributes":{"icon":"fa fa-vcard-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-bomb","url":"/print/print"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"149","parentId":"108","text":"票据记录"}],"hasChildren":true,"hasParent":false,"id":"108","parentId":"0","text":"票据管理"},{"attributes":{"icon":"fa fa-bar-chart","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-area-chart","url":"/chart/graph_echarts.html"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","text":"百度chart"},{"attributes":{"icon":"fa fa-sun-o","url":"charts/countDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"109","parentId":"97","text":"日统计报表"},{"attributes":{"icon":"fa fa-registered","url":"charts/countMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"110","parentId":"97","text":"月统计报表"},{"attributes":{"icon":"fa fa-support","url":"charts/countYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"111","parentId":"97","text":"年统计报表"},{"attributes":{"icon":"fa fa-money","url":"charts/countOwe"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"155","parentId":"97","text":"欠费报表图"},{"attributes":{"icon":"fa fa-tachometer","url":"charts/countRun"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"112","parentId":"97","text":"走势图报表"}],"hasChildren":true,"hasParent":false,"id":"97","parentId":"0","text":"统计管理"},{"attributes":{"icon":"fa fa-bars","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-book","url":"/common/dict"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"78","parentId":"1","text":"数据字典"},{"attributes":{"icon":"fa fa-folder-open","url":"/common/sysFile"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"71","parentId":"1","text":"文件管理"}],"h(String), 127.0.0.1(String), 2019-04-06 12:44:16.027(Timestamp)
2019-04-06 12:44:16 -<==    Updates: 1
2019-04-06 12:44:16 -请求地址 : http://localhost:8081/main
2019-04-06 12:44:16 -HTTP METHOD : GET
2019-04-06 12:44:16 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-06 12:44:16 -参数 : []
2019-04-06 12:44:16 -耗时 : 0
2019-04-06 12:44:16 -返回值 : main
2019-04-06 12:44:16 -请求地址 : http://localhost:8081/oa/notify/message
2019-04-06 12:44:16 -HTTP METHOD : GET
2019-04-06 12:44:16 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2019-04-06 12:44:16 -参数 : []
2019-04-06 12:44:16 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2019-04-06 12:44:16 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2019-04-06 12:44:16 -<==      Total: 0
2019-04-06 12:44:16 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2019-04-06 12:44:16 -==> Parameters: 1(Long), 0(String)
2019-04-06 12:44:16 -<==      Total: 1
2019-04-06 12:44:16 -耗时 : 7
2019-04-06 12:44:16 -返回值 : com.bootdo.common.utils.PageUtils@640af4ed
2019-04-06 12:44:16 -请求地址 : http://localhost:8081/main
2019-04-06 12:44:16 -HTTP METHOD : GET
2019-04-06 12:44:16 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-06 12:44:16 -参数 : []
2019-04-06 12:44:16 -耗时 : 1
2019-04-06 12:44:16 -返回值 : main
2019-04-06 12:44:19 -请求地址 : http://localhost:8081/moneyLog/elecLog
2019-04-06 12:44:19 -HTTP METHOD : GET
2019-04-06 12:44:19 -CLASS_METHOD : com.bootdo.moneyLog.controller.ElecLogController.moneyLog
2019-04-06 12:44:19 -参数 : []
2019-04-06 12:44:19 -耗时 : 0
2019-04-06 12:44:19 -返回值 : /moneyLog/elecLog/elecLog
2019-04-06 12:44:19 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-06 12:44:19 -HTTP METHOD : GET
2019-04-06 12:44:19 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-06 12:44:19 -参数 : [userType]
2019-04-06 12:44:19 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-06 12:44:19 -==> Parameters: userType(String)
2019-04-06 12:44:19 -<==      Total: 2
2019-04-06 12:44:19 -耗时 : 5
2019-04-06 12:44:19 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-06 12:44:19 -请求地址 : http://localhost:8081/moneyLog/elecLog/list
2019-04-06 12:44:19 -HTTP METHOD : GET
2019-04-06 12:44:19 -CLASS_METHOD : com.bootdo.moneyLog.controller.ElecLogController.list
2019-04-06 12:44:19 -参数 : [{limit=10, offset=0, userType=, userOrg=, userId=, elecDate=}]
2019-04-06 12:44:19 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`elec_type`,`elec_money`,`elec_date`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec_log order by id asc limit ?, ? 
2019-04-06 12:44:19 -==> Parameters: 0(Integer), 10(Integer)
2019-04-06 12:44:19 -<==      Total: 7
2019-04-06 12:44:19 -==>  Preparing: select count(*) from elec_log 
2019-04-06 12:44:19 -==> Parameters: 
2019-04-06 12:44:19 -<==      Total: 1
2019-04-06 12:44:19 -耗时 : 9
2019-04-06 12:44:19 -返回值 : com.bootdo.common.utils.PageUtils@721eb24c
2019-04-06 12:44:20 -请求地址 : http://localhost:8081/moneyLog/waterLog
2019-04-06 12:44:20 -HTTP METHOD : GET
2019-04-06 12:44:20 -CLASS_METHOD : com.bootdo.moneyLog.controller.WaterLogController.WaterLog
2019-04-06 12:44:20 -参数 : []
2019-04-06 12:44:20 -耗时 : 2
2019-04-06 12:44:20 -返回值 : /moneyLog/waterLog/waterLog
2019-04-06 12:44:20 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-06 12:44:20 -HTTP METHOD : GET
2019-04-06 12:44:20 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-06 12:44:20 -参数 : [userType]
2019-04-06 12:44:20 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-06 12:44:20 -==> Parameters: userType(String)
2019-04-06 12:44:20 -<==      Total: 2
2019-04-06 12:44:20 -耗时 : 4
2019-04-06 12:44:20 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-06 12:44:20 -请求地址 : http://localhost:8081/moneyLog/waterLog/list
2019-04-06 12:44:20 -HTTP METHOD : GET
2019-04-06 12:44:20 -CLASS_METHOD : com.bootdo.moneyLog.controller.WaterLogController.list
2019-04-06 12:44:20 -参数 : [{limit=10, offset=0, userType=, userOrg=, userId=, waterDate=}]
2019-04-06 12:44:20 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,`water_type`,`water_money`,`water_date`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from water_log order by id asc limit ?, ? 
2019-04-06 12:44:20 -==> Parameters: 0(Integer), 10(Integer)
2019-04-06 12:44:20 -<==      Total: 5
2019-04-06 12:44:20 -==>  Preparing: select count(*) from water_log 
2019-04-06 12:44:20 -==> Parameters: 
2019-04-06 12:44:20 -<==      Total: 1
2019-04-06 12:44:20 -耗时 : 12
2019-04-06 12:44:20 -返回值 : com.bootdo.common.utils.PageUtils@61aba6db
2019-04-06 12:44:22 -请求地址 : http://localhost:8081/moneyLog/waterLog/edit/5
2019-04-06 12:44:22 -HTTP METHOD : GET
2019-04-06 12:44:22 -CLASS_METHOD : com.bootdo.moneyLog.controller.WaterLogController.edit
2019-04-06 12:44:22 -参数 : [5, {}]
2019-04-06 12:44:22 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,`water_type`,`water_money`,`water_date`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from water_log where id = ? 
2019-04-06 12:44:22 -==> Parameters: 5(Long)
2019-04-06 12:44:22 -<==      Total: 1
2019-04-06 12:44:22 -耗时 : 4
2019-04-06 12:44:22 -返回值 : moneyLog/waterLog/edit
2019-04-06 12:44:22 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-06 12:44:22 -HTTP METHOD : GET
2019-04-06 12:44:22 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-06 12:44:22 -参数 : [userType]
2019-04-06 12:44:22 -请求地址 : http://localhost:8081/common/dict/list/waterType
2019-04-06 12:44:22 -HTTP METHOD : GET
2019-04-06 12:44:22 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-06 12:44:22 -参数 : [waterType]
2019-04-06 12:44:22 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-06 12:44:22 -==> Parameters: userType(String)
2019-04-06 12:44:22 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-06 12:44:22 -==> Parameters: waterType(String)
2019-04-06 12:44:22 -<==      Total: 2
2019-04-06 12:44:22 -耗时 : 5
2019-04-06 12:44:22 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-06 12:44:22 -<==      Total: 6
2019-04-06 12:44:22 -耗时 : 11
2019-04-06 12:44:22 -返回值 : [DictDO{id=132, name='特殊水费4', value='5', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=131, name='特殊水费3', value='4', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=130, name='特殊水费2', value='3', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=129, name='特殊水费1', value='2', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=128, name='民用水', value='1', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=127, name='商业水', value='0', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-06 12:44:24 -请求地址 : http://localhost:8081/moneyLog/waterLog/update
2019-04-06 12:44:24 -HTTP METHOD : POST
2019-04-06 12:44:24 -CLASS_METHOD : com.bootdo.moneyLog.controller.WaterLogController.update
2019-04-06 12:44:24 -参数 : [com.bootdo.moneyLog.domain.WaterLogDO@5570a531]
2019-04-06 12:44:24 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-06 12:44:24 -nested exception is org.apache.ibatis.exceptions.PersistenceException: 
### Error updating database.  Cause: java.lang.IllegalArgumentException: invalid comparison: java.util.Date and java.lang.String
### Cause: java.lang.IllegalArgumentException: invalid comparison: java.util.Date and java.lang.String
org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.exceptions.PersistenceException: 
### Error updating database.  Cause: java.lang.IllegalArgumentException: invalid comparison: java.util.Date and java.lang.String
### Cause: java.lang.IllegalArgumentException: invalid comparison: java.util.Date and java.lang.String
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:79)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:447)
	at com.sun.proxy.$Proxy101.update(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.update(SqlSessionTemplate.java:295)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:62)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy104.update(Unknown Source)
	at com.bootdo.moneyLog.service.impl.WaterLogServiceImpl.update(WaterLogServiceImpl.java:39)
	at com.bootdo.moneyLog.controller.WaterLogController.update(WaterLogController.java:210)
	at com.bootdo.moneyLog.controller.WaterLogController$$FastClassBySpringCGLIB$$3a5e3635.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:204)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:746)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.bootdo.common.aspect.WebLogAspect.doAround(WebLogAspect.java:57)
	at sun.reflect.GeneratedMethodAccessor125.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.apache.shiro.spring.security.interceptor.AopAllianceAnnotationsAuthorizingMethodInterceptor$1.proceed(AopAllianceAnnotationsAuthorizingMethodInterceptor.java:82)
	at org.apache.shiro.authz.aop.AuthorizingMethodInterceptor.invoke(AuthorizingMethodInterceptor.java:39)
	at org.apache.shiro.spring.security.interceptor.AopAllianceAnnotationsAuthorizingMethodInterceptor.invoke(AopAllianceAnnotationsAuthorizingMethodInterceptor.java:115)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.bootdo.moneyLog.controller.WaterLogController$$EnhancerBySpringCGLIB$$ffa0823d.update(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:209)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:877)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:783)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:991)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:925)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:974)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:877)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:661)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:851)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:61)
	at org.apache.shiro.web.servlet.AdviceFilter.executeChain(AdviceFilter.java:108)
	at org.apache.shiro.web.servlet.AdviceFilter.doFilterInternal(AdviceFilter.java:137)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:66)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)
	at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)
	at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)
	at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)
	at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:383)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:109)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:496)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:790)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1468)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Unknown Source)
Caused by: org.apache.ibatis.exceptions.PersistenceException: 
### Error updating database.  Cause: java.lang.IllegalArgumentException: invalid comparison: java.util.Date and java.lang.String
### Cause: java.lang.IllegalArgumentException: invalid comparison: java.util.Date and java.lang.String
	at org.apache.ibatis.exceptions.ExceptionFactory.wrapException(ExceptionFactory.java:30)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:200)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:434)
	... 103 common frames omitted
Caused by: java.lang.IllegalArgumentException: invalid comparison: java.util.Date and java.lang.String
	at org.apache.ibatis.ognl.OgnlOps.compareWithConversion(OgnlOps.java:93)
	at org.apache.ibatis.ognl.OgnlOps.isEqual(OgnlOps.java:143)
	at org.apache.ibatis.ognl.OgnlOps.equal(OgnlOps.java:802)
	at org.apache.ibatis.ognl.ASTNotEq.getValueBody(ASTNotEq.java:53)
	at org.apache.ibatis.ognl.SimpleNode.evaluateGetValueBody(SimpleNode.java:212)
	at org.apache.ibatis.ognl.SimpleNode.getValue(SimpleNode.java:258)
	at org.apache.ibatis.ognl.ASTAnd.getValueBody(ASTAnd.java:61)
	at org.apache.ibatis.ognl.SimpleNode.evaluateGetValueBody(SimpleNode.java:212)
	at org.apache.ibatis.ognl.SimpleNode.getValue(SimpleNode.java:258)
	at org.apache.ibatis.ognl.Ognl.getValue(Ognl.java:470)
	at org.apache.ibatis.ognl.Ognl.getValue(Ognl.java:434)
	at org.apache.ibatis.scripting.xmltags.OgnlCache.getValue(OgnlCache.java:44)
	at org.apache.ibatis.scripting.xmltags.ExpressionEvaluator.evaluateBoolean(ExpressionEvaluator.java:32)
	at org.apache.ibatis.scripting.xmltags.IfSqlNode.apply(IfSqlNode.java:34)
	at org.apache.ibatis.scripting.xmltags.MixedSqlNode.apply(MixedSqlNode.java:33)
	at org.apache.ibatis.scripting.xmltags.TrimSqlNode.apply(TrimSqlNode.java:55)
	at org.apache.ibatis.scripting.xmltags.MixedSqlNode.apply(MixedSqlNode.java:33)
	at org.apache.ibatis.scripting.xmltags.DynamicSqlSource.getBoundSql(DynamicSqlSource.java:41)
	at org.apache.ibatis.mapping.MappedStatement.getBoundSql(MappedStatement.java:292)
	at org.apache.ibatis.executor.statement.BaseStatementHandler.<init>(BaseStatementHandler.java:64)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.<init>(PreparedStatementHandler.java:40)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.<init>(RoutingStatementHandler.java:46)
	at org.apache.ibatis.session.Configuration.newStatementHandler(Configuration.java:545)
	at org.apache.ibatis.executor.SimpleExecutor.doUpdate(SimpleExecutor.java:48)
	at org.apache.ibatis.executor.BaseExecutor.update(BaseExecutor.java:117)
	at org.apache.ibatis.executor.CachingExecutor.update(CachingExecutor.java:76)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:198)
	... 108 common frames omitted
2019-04-06 12:44:24 -==> Parameters: 1(Long), admin(String), error(String), null, http://localhost:8081/moneyLog/waterLog/update(String), org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.exceptions.PersistenceException: 
### Error updating database.  Cause: java.lang.IllegalArgumentException: invalid comparison: java.util.Date and java.lang.String
### Cause: java.lang.IllegalArgumentException: invalid comparison: java.util.Date and java.lang.String(String), null, 2019-04-06 12:44:24.054(Timestamp)
2019-04-06 12:44:24 -<==    Updates: 1
2019-04-06 13:08:43 -Starting BootdoApplication on ZJZL-20180906VX with PID 5720 (D:\eclipse2018-work\bootdo\target\classes started by Administrator in D:\eclipse2018-work\bootdo)
2019-04-06 13:08:43 -Running with Spring Boot v2.0.3.RELEASE, Spring v5.0.7.RELEASE
2019-04-06 13:08:43 -The following profiles are active: dev
2019-04-06 13:08:43 -Refreshing org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@6fdbe764: startup date [Sat Apr 06 13:08:43 CST 2019]; root of context hierarchy
2019-04-06 13:08:46 -Multiple Spring Data modules found, entering strict repository configuration mode!
2019-04-06 13:08:49 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$f9d3e633] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-06 13:08:49 -Bean 'shiroConfig' of type [com.bootdo.system.config.ShiroConfig$$EnhancerBySpringCGLIB$$ec2d14da] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-06 13:08:50 -Bean 'userRealm' of type [com.bootdo.system.shiro.UserRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-06 13:08:50 -Bean 'cacheManager2' of type [net.sf.ehcache.CacheManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-06 13:08:50 -Bean 'ehCacheManager' of type [org.apache.shiro.cache.ehcache.EhCacheManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-06 13:08:50 -Cache with name 'com.bootdo.system.shiro.UserRealm.authorizationCache' does not yet exist.  Creating now.
2019-04-06 13:08:50 -Added EhCache named [com.bootdo.system.shiro.UserRealm.authorizationCache]
2019-04-06 13:08:50 -Bean 'sessionDAO' of type [org.apache.shiro.session.mgt.eis.MemorySessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-06 13:08:50 -Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-06 13:08:50 -Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-06 13:08:50 -Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-06 13:08:51 -Tomcat initialized with port(s): 8081 (http)
2019-04-06 13:08:51 -Initializing ProtocolHandler ["http-nio-8081"]
2019-04-06 13:08:51 -Starting service [Tomcat]
2019-04-06 13:08:51 -Starting Servlet Engine: Apache Tomcat/8.5.31
2019-04-06 13:08:51 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [C:\Program Files\Java\jre1.8.0_131\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:/Program Files/Java/jre1.8.0_131/bin/server;C:/Program Files/Java/jre1.8.0_131/bin;C:/Program Files/Java/jre1.8.0_131/lib/amd64;C:\ProgramData\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Windows\System32\OpenSSH\;D:\pbb\pycSafefile\x64;D:\pbb\PBB Reader\x64;C:\Program Files\MySQL\MySQL Utilities 1.6\;D:\MAVEN\apache-maven-3.6.0\bin;D:\GIT\Git\cmd;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;;C:\Users\Administrator\Desktop;;.]
2019-04-06 13:08:52 -Initializing Spring embedded WebApplicationContext
2019-04-06 13:08:52 -Root WebApplicationContext: initialization completed in 9085 ms
2019-04-06 13:08:53 -Mapping filter: 'characterEncodingFilter' to: [/*]
2019-04-06 13:08:53 -Mapping filter: 'hiddenHttpMethodFilter' to: [/*]
2019-04-06 13:08:53 -Mapping filter: 'httpPutFormContentFilter' to: [/*]
2019-04-06 13:08:53 -Mapping filter: 'requestContextFilter' to: [/*]
2019-04-06 13:08:53 -Filter xssFilter was not registered (disabled)
2019-04-06 13:08:53 -Mapping filter: 'webStatFilter' to urls: [/*]
2019-04-06 13:08:53 -Mapping filter: 'shiroFilterFactoryBean' to: [/*]
2019-04-06 13:08:53 -Servlet statViewServlet mapped to [/druid/*]
2019-04-06 13:08:53 -Servlet dispatcherServlet mapped to [/]
2019-04-06 13:08:56 -ApplicationContext registed-->org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@6fdbe764: startup date [Sat Apr 06 13:08:43 CST 2019]; root of context hierarchy
2019-04-06 13:08:57 -Using default implementation for ThreadExecutor
2019-04-06 13:08:57 -Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2019-04-06 13:08:57 -Quartz Scheduler v.2.2.1 created.
2019-04-06 13:08:57 -RAMJobStore initialized.
2019-04-06 13:08:57 -Scheduler meta-data: Quartz Scheduler (v2.2.1) 'schedulerFactoryBean' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2019-04-06 13:08:57 -Quartz scheduler 'schedulerFactoryBean' initialized from an externally provided properties instance.
2019-04-06 13:08:57 -Quartz scheduler version: 2.2.1
2019-04-06 13:08:57 -JobFactory set to: com.bootdo.common.quartz.factory.JobFactory@f2fb225
2019-04-06 13:08:58 -Initializing ExecutorService  'clientInboundChannelExecutor'
2019-04-06 13:08:58 -Initializing ExecutorService  'clientOutboundChannelExecutor'
2019-04-06 13:09:01 -Mapped "{[/charts/countDD/tableDD],methods=[POST]}" onto public java.lang.String com.bootdo.charts.controller.countDDController.tableDD()
2019-04-06 13:09:01 -Mapped "{[/charts/countDD/exportCountDD],methods=[GET]}" onto public void com.bootdo.charts.controller.countDDController.exprotElecLog(com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-06 13:09:01 -Mapped "{[/charts/countDD],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.countDDController.countDD()
2019-04-06 13:09:01 -Mapped "{[/charts/countDD/getCountDD],methods=[POST]}" onto public com.bootdo.charts.vo.CountDayVo com.bootdo.charts.controller.countDDController.getCountD(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo,javax.servlet.http.HttpServletRequest)
2019-04-06 13:09:01 -Mapped "{[/charts/countMM/exportCountMM],methods=[GET]}" onto public void com.bootdo.charts.controller.countMMController.exprotElecLog(com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-06 13:09:01 -Mapped "{[/charts/countMM/getCountMM],methods=[POST]}" onto public void com.bootdo.charts.controller.countMMController.getCountMM(org.springframework.ui.Model,com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo,javax.servlet.http.HttpServletRequest)
2019-04-06 13:09:01 -Mapped "{[/charts/countMM],methods=[GET]}" onto java.lang.String com.bootdo.charts.controller.countMMController.countMM()
2019-04-06 13:09:01 -Mapped "{[/charts/countOwe/getCountOwe],methods=[POST]}" onto public com.bootdo.charts.vo.CountOweVo com.bootdo.charts.controller.countOweController.getCountD(com.bootdo.elec.vo.ElecVo,com.bootdo.water.vo.WaterVo,com.bootdo.heat.vo.HeatVo,javax.servlet.http.HttpServletRequest)
2019-04-06 13:09:01 -Mapped "{[/charts/countOwe],methods=[GET]}" onto java.lang.String com.bootdo.charts.controller.countOweController.countOwe()
2019-04-06 13:09:01 -Mapped "{[/charts/countRun/exportCountRun],methods=[GET]}" onto public void com.bootdo.charts.controller.countRunController.exprotElecLog(com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-06 13:09:01 -Mapped "{[/charts/countRun/getCountRun],methods=[POST]}" onto public int com.bootdo.charts.controller.countRunController.getCountD(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo)
2019-04-06 13:09:01 -Mapped "{[/charts/countRun],methods=[GET]}" onto java.lang.String com.bootdo.charts.controller.countRunController.countRun()
2019-04-06 13:09:01 -Mapped "{[/charts/countYY],methods=[GET]}" onto java.lang.String com.bootdo.charts.controller.countYYController.countYY()
2019-04-06 13:09:01 -Mapped "{[/charts/countYY/exportCountYY],methods=[GET]}" onto public void com.bootdo.charts.controller.countYYController.exprotElecLog(com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-06 13:09:01 -Mapped "{[/charts/countYY/getCountYY],methods=[POST]}" onto public int com.bootdo.charts.controller.countYYController.getCountD(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo)
2019-04-06 13:09:01 -Mapped "{[/common/dict/add],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.add()
2019-04-06 13:09:01 -Mapped "{[/common/dict/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.remove(java.lang.Long)
2019-04-06 13:09:01 -Mapped "{[/common/dict/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.remove(java.lang.Long[])
2019-04-06 13:09:01 -Mapped "{[/common/dict/update]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.update(com.bootdo.common.domain.DictDO)
2019-04-06 13:09:01 -Mapped "{[/common/dict/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.common.controller.DictController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-06 13:09:01 -Mapped "{[/common/dict/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.save(com.bootdo.common.domain.DictDO)
2019-04-06 13:09:01 -Mapped "{[/common/dict/type],methods=[GET]}" onto public java.util.List<com.bootdo.common.domain.DictDO> com.bootdo.common.controller.DictController.listType()
2019-04-06 13:09:01 -Mapped "{[/common/dict],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.dict()
2019-04-06 13:09:01 -Mapped "{[/common/dict/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-06 13:09:01 -Mapped "{[/common/dict/add/{type}/{description}],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.addD(org.springframework.ui.Model,java.lang.String,java.lang.String)
2019-04-06 13:09:01 -Mapped "{[/common/dict/list/{type}],methods=[GET]}" onto public java.util.List<com.bootdo.common.domain.DictDO> com.bootdo.common.controller.DictController.listByType(java.lang.String)
2019-04-06 13:09:01 -Mapped "{[/common/sysFile/add],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.FileController.add()
2019-04-06 13:09:01 -Mapped "{[/common/sysFile/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.remove(java.lang.Long,javax.servlet.http.HttpServletRequest)
2019-04-06 13:09:01 -Mapped "{[/common/sysFile/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.remove(java.lang.Long[])
2019-04-06 13:09:01 -Mapped "{[/common/sysFile/update]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.update(com.bootdo.common.domain.FileDO)
2019-04-06 13:09:01 -Mapped "{[/common/sysFile/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.common.controller.FileController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-06 13:09:01 -Mapped "{[/common/sysFile/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.save(com.bootdo.common.domain.FileDO)
2019-04-06 13:09:01 -Mapped "{[/common/sysFile/info/{id}]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.info(java.lang.Long)
2019-04-06 13:09:01 -Mapped "{[/common/sysFile/upload],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.FileController.upload(org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpServletRequest)
2019-04-06 13:09:01 -Mapped "{[/common/sysFile/edit],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.FileController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-06 13:09:01 -Mapped "{[/common/sysFile],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.FileController.sysFile(org.springframework.ui.Model)
2019-04-06 13:09:01 -Mapped "{[/common/generator/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.GeneratorController.update(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-06 13:09:01 -Mapped "{[/common/generator/list],methods=[GET]}" onto java.util.List<java.util.Map<java.lang.String, java.lang.Object>> com.bootdo.common.controller.GeneratorController.list()
2019-04-06 13:09:01 -Mapped "{[/common/generator/code/{tableName}]}" onto public void com.bootdo.common.controller.GeneratorController.code(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String) throws java.io.IOException
2019-04-06 13:09:01 -Mapped "{[/common/generator],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.GeneratorController.generator()
2019-04-06 13:09:01 -Mapped "{[/common/generator/edit],methods=[GET]}" onto public java.lang.String com.bootdo.common.controller.GeneratorController.edit(org.springframework.ui.Model)
2019-04-06 13:09:01 -Mapped "{[/common/generator/batchCode]}" onto public void com.bootdo.common.controller.GeneratorController.batchCode(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String) throws java.io.IOException
2019-04-06 13:09:01 -Mapped "{[/common/job/add],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.JobController.add()
2019-04-06 13:09:01 -Mapped "{[/common/job/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.remove(java.lang.Long)
2019-04-06 13:09:01 -Mapped "{[/common/job/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.remove(java.lang.Long[])
2019-04-06 13:09:01 -Mapped "{[/common/job/update],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.update(com.bootdo.common.domain.TaskDO)
2019-04-06 13:09:01 -Mapped "{[/common/job/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.common.controller.JobController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-06 13:09:01 -Mapped "{[/common/job/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.save(com.bootdo.common.domain.TaskDO)
2019-04-06 13:09:01 -Mapped "{[/common/job/info/{id}]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.info(java.lang.Long)
2019-04-06 13:09:01 -Mapped "{[/common/job/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.JobController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-06 13:09:01 -Mapped "{[/common/job/changeJobStatus],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.changeJobStatus(java.lang.Long,java.lang.String)
2019-04-06 13:09:01 -Mapped "{[/common/job],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.JobController.taskScheduleJob()
2019-04-06 13:09:01 -Mapped "{[/common/log/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.LogController.remove(java.lang.Long)
2019-04-06 13:09:01 -Mapped "{[/common/log],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.LogController.log()
2019-04-06 13:09:01 -Mapped "{[/common/log/list],methods=[GET]}" onto com.bootdo.common.domain.PageDO<com.bootdo.common.domain.LogDO> com.bootdo.common.controller.LogController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-06 13:09:01 -Mapped "{[/common/log/batchRemove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.LogController.batchRemove(java.lang.Long[])
2019-04-06 13:09:01 -Mapped "{[/common/long],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.LongController.Long()
2019-04-06 13:09:01 -Mapped "{[/common/time],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.TimeController.Time()
2019-04-06 13:09:01 -Mapped "{[/error]}" onto public com.bootdo.common.utils.R com.bootdo.common.exception.MainsiteErrorController.handleError(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-04-06 13:09:01 -Mapped "{[/error],produces=[text/html]}" onto public org.springframework.web.servlet.ModelAndView com.bootdo.common.exception.MainsiteErrorController.errorHtml(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-04-06 13:09:01 -Mapped "{[/elec/elec/add],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecController.add()
2019-04-06 13:09:01 -Mapped "{[/elec/elec/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.remove(java.lang.Long)
2019-04-06 13:09:01 -Mapped "{[/elec/elec/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.remove(java.lang.Long[])
2019-04-06 13:09:01 -Mapped "{[/elec/elec/update],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.update(com.bootdo.elec.domain.ElecDO)
2019-04-06 13:09:01 -Mapped "{[/elec/elec/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.elec.controller.ElecController.list(java.util.Map<java.lang.String, java.lang.Object>,com.bootdo.elec.domain.ElecDO)
2019-04-06 13:09:01 -Mapped "{[/elec/elec/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.save(com.bootdo.elec.domain.ElecDO)
2019-04-06 13:09:01 -Mapped "{[/elec/elec/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-06 13:09:01 -Mapped "{[/elec/elec],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecController.Elec()
2019-04-06 13:09:01 -Mapped "{[/elec/elec/exprotElec],methods=[GET]}" onto public void com.bootdo.elec.controller.ElecController.exprotExcel(com.bootdo.elec.vo.ElecVo,javax.servlet.http.HttpServletResponse)
2019-04-06 13:09:01 -Mapped "{[/elec/elecInto/exprotElecIntoExcel],methods=[GET]}" onto public void com.bootdo.elec.controller.ElecIntoController.exprotExcel(com.bootdo.elec.vo.ElecVo,javax.servlet.http.HttpServletResponse)
2019-04-06 13:09:01 -Mapped "{[/elec/elecInto],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecIntoController.ElecInto()
2019-04-06 13:09:01 -Mapped "{[/elec/elecInto/importElecIntoExcel],methods=[POST]}" onto public java.util.Map<java.lang.String, java.lang.Object> com.bootdo.elec.controller.ElecIntoController.importElecIntoExcel(org.springframework.web.multipart.MultipartFile,com.bootdo.elec.vo.ElecVo) throws java.lang.Exception
2019-04-06 13:09:01 -Mapped "{[/elec/elecPrice/add],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecPriceController.add()
2019-04-06 13:09:01 -Mapped "{[/elec/elecPrice/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecPriceController.remove(java.lang.Long)
2019-04-06 13:09:01 -Mapped "{[/elec/elecPrice/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecPriceController.remove(java.lang.Long[])
2019-04-06 13:09:01 -Mapped "{[/elec/elecPrice/update]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecPriceController.update(com.bootdo.elec.domain.ElecPriceDO)
2019-04-06 13:09:01 -Mapped "{[/elec/elecPrice/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.elec.controller.ElecPriceController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-06 13:09:01 -Mapped "{[/elec/elecPrice/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecPriceController.save(com.bootdo.elec.domain.ElecPriceDO,com.bootdo.elec.domain.ElecDO)
2019-04-06 13:09:01 -Mapped "{[/elec/elecPrice/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecPriceController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-06 13:09:01 -Mapped "{[/elec/elecPrice],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecPriceController.ElecPrice()
2019-04-06 13:09:01 -Mapped "{[/elec/elecUpLoad],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecUpLoadController.Elec()
2019-04-06 13:09:01 -Mapped "{[/elec/elecUpLoad/importElecExcel],methods=[POST]}" onto public java.util.Map<java.lang.String, java.lang.Object> com.bootdo.elec.controller.ElecUpLoadController.importElecExcel(org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpServletRequest) throws java.lang.Exception
2019-04-06 13:09:01 -Mapped "{[/heat/heat/add],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatController.add()
2019-04-06 13:09:01 -Mapped "{[/heat/heat/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatController.remove(java.lang.Integer)
2019-04-06 13:09:01 -Mapped "{[/heat/heat/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatController.remove(java.lang.Integer[])
2019-04-06 13:09:01 -Mapped "{[/heat/heat/update]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatController.update(com.bootdo.heat.domain.HeatDO)
2019-04-06 13:09:01 -Mapped "{[/heat/heat/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.heat.controller.HeatController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-06 13:09:01 -Mapped "{[/heat/heat/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatController.save(com.bootdo.heat.domain.HeatDO)
2019-04-06 13:09:01 -Mapped "{[/heat/heat/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatController.edit(java.lang.Integer,org.springframework.ui.Model)
2019-04-06 13:09:01 -Mapped "{[/heat/heat/exprotHeat],methods=[GET]}" onto public void com.bootdo.heat.controller.HeatController.exprotExcel(com.bootdo.heat.vo.HeatVo,javax.servlet.http.HttpServletResponse)
2019-04-06 13:09:01 -Mapped "{[/heat/heat],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatController.Heat()
2019-04-06 13:09:01 -Mapped "{[/heat/heatInto/exprotHeatIntoExcel],methods=[GET]}" onto public void com.bootdo.heat.controller.HeatIntoController.exprotExcel(com.bootdo.heat.vo.HeatVo,javax.servlet.http.HttpServletResponse)
2019-04-06 13:09:01 -Mapped "{[/heat/heatInto],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatIntoController.HeatInto()
2019-04-06 13:09:01 -Mapped "{[/heat/heatPrice/add],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatPriceController.add()
2019-04-06 13:09:01 -Mapped "{[/heat/heatPrice/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatPriceController.remove(java.lang.Long)
2019-04-06 13:09:01 -Mapped "{[/heat/heatPrice/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatPriceController.remove(java.lang.Long[])
2019-04-06 13:09:01 -Mapped "{[/heat/heatPrice/update]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatPriceController.update(com.bootdo.heat.domain.HeatPriceDO)
2019-04-06 13:09:01 -Mapped "{[/heat/heatPrice/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.heat.controller.HeatPriceController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-06 13:09:01 -Mapped "{[/heat/heatPrice/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatPriceController.save(com.bootdo.heat.domain.HeatPriceDO)
2019-04-06 13:09:01 -Mapped "{[/heat/heatPrice/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatPriceController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-06 13:09:01 -Mapped "{[/heat/heatPrice],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatPriceController.HeatPrice()
2019-04-06 13:09:01 -Mapped "{[/heat/heatUpLoad/importHeatExcel]}" onto public java.lang.String com.bootdo.heat.controller.HeatUpLoadController.importHeatExcel(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)
2019-04-06 13:09:01 -Mapped "{[/heat/heatUpLoad],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatUpLoadController.HeatUpLoad()
2019-04-06 13:09:01 -Mapped "{[/heat/heatUpLoad/createHeatExcel],methods=[POST]}" onto public java.lang.String com.bootdo.heat.controller.HeatUpLoadController.createHeatExcel(com.bootdo.heat.domain.HeatDO) throws java.lang.Exception
2019-04-06 13:09:01 -Mapped "{[/heat/heatUpLoad/exprotHeatExcel],methods=[GET]}" onto public void com.bootdo.heat.controller.HeatUpLoadController.exprotHeatExcel(com.bootdo.heat.vo.HeatVo,javax.servlet.http.HttpServletResponse)
2019-04-06 13:09:01 -Mapped "{[/moneyList/moneyList],methods=[GET]}" onto java.lang.String com.bootdo.moneyList.controller.MoneyListController.MoneyList()
2019-04-06 13:09:01 -Mapped "{[/moneyList/moneyList/queryAllUserName],methods=[POST]}" onto public java.util.List<com.bootdo.moneyList.damain.MoneyListDO> com.bootdo.moneyList.controller.MoneyListController.getAllUserName(com.bootdo.moneyList.damain.MoneyListDO)
2019-04-06 13:09:01 -Mapped "{[/moneyList/moneyList/updateMoney],methods=[POST]}" onto public java.util.List<com.bootdo.moneyList.damain.MoneyListDO> com.bootdo.moneyList.controller.MoneyListController.updateMoney(com.bootdo.moneyList.damain.MoneyListDO)
2019-04-06 13:09:01 -Mapped "{[/moneyList/moneyList/queryAllUser],methods=[POST]}" onto public java.util.List<com.bootdo.moneyList.damain.MoneyListDO> com.bootdo.moneyList.controller.MoneyListController.queryAllUser(com.bootdo.moneyList.damain.MoneyListDO)
2019-04-06 13:09:01 -Mapped "{[/moneyLog/elecLog/add],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.ElecLogController.add()
2019-04-06 13:09:01 -Mapped "{[/moneyLog/elecLog/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.ElecLogController.remove(java.lang.Long)
2019-04-06 13:09:01 -Mapped "{[/moneyLog/elecLog/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.ElecLogController.remove(java.lang.Long[])
2019-04-06 13:09:01 -Mapped "{[/moneyLog/elecLog/update]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.ElecLogController.update(com.bootdo.moneyLog.domain.ElecLogDO)
2019-04-06 13:09:01 -Mapped "{[/moneyLog/elecLog/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.moneyLog.controller.ElecLogController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-06 13:09:01 -Mapped "{[/moneyLog/elecLog/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.ElecLogController.save(com.bootdo.moneyLog.domain.ElecLogDO)
2019-04-06 13:09:01 -Mapped "{[/moneyLog/elecLog/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.ElecLogController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-06 13:09:01 -Mapped "{[/moneyLog/elecLog],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.ElecLogController.moneyLog()
2019-04-06 13:09:01 -Mapped "{[/moneyLog/elecLog/exprotElecLog],methods=[GET]}" onto public void com.bootdo.moneyLog.controller.ElecLogController.exprotElecLog(com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-06 13:09:01 -Mapped "{[/moneyLog/heatLog/add],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.HeatLogController.add()
2019-04-06 13:09:01 -Mapped "{[/moneyLog/heatLog/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.HeatLogController.remove(java.lang.Long)
2019-04-06 13:09:01 -Mapped "{[/moneyLog/heatLog/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.HeatLogController.remove(java.lang.Long[])
2019-04-06 13:09:01 -Mapped "{[/moneyLog/heatLog/update]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.HeatLogController.update(com.bootdo.moneyLog.domain.HeatLogDO)
2019-04-06 13:09:01 -Mapped "{[/moneyLog/heatLog/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.moneyLog.controller.HeatLogController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-06 13:09:01 -Mapped "{[/moneyLog/heatLog/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.HeatLogController.save(com.bootdo.moneyLog.domain.HeatLogDO)
2019-04-06 13:09:01 -Mapped "{[/moneyLog/heatLog/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.HeatLogController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-06 13:09:01 -Mapped "{[/moneyLog/heatLog],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.HeatLogController.HeatLog()
2019-04-06 13:09:01 -Mapped "{[/moneyLog/heatLog/exprotHeatLog],methods=[GET]}" onto public void com.bootdo.moneyLog.controller.HeatLogController.exprotHeatLog(com.bootdo.moneyLog.vo.HeatLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-06 13:09:01 -Mapped "{[/moneyLog/waterLog/add],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.WaterLogController.add()
2019-04-06 13:09:01 -Mapped "{[/moneyLog/waterLog/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.WaterLogController.remove(java.lang.Long)
2019-04-06 13:09:01 -Mapped "{[/moneyLog/waterLog/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.WaterLogController.remove(java.lang.Long[])
2019-04-06 13:09:01 -Mapped "{[/moneyLog/waterLog/update]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.WaterLogController.update(com.bootdo.moneyLog.domain.WaterLogDO)
2019-04-06 13:09:01 -Mapped "{[/moneyLog/waterLog/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.moneyLog.controller.WaterLogController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-06 13:09:01 -Mapped "{[/moneyLog/waterLog/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.WaterLogController.save(com.bootdo.moneyLog.domain.WaterLogDO,javax.servlet.http.HttpServletRequest)
2019-04-06 13:09:01 -Mapped "{[/moneyLog/waterLog/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.WaterLogController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-06 13:09:01 -Mapped "{[/moneyLog/waterLog],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.WaterLogController.WaterLog()
2019-04-06 13:09:01 -Mapped "{[/moneyLog/waterLog/exprotWaterLog],methods=[GET]}" onto public void com.bootdo.moneyLog.controller.WaterLogController.exprotWaterLog(com.bootdo.moneyLog.vo.WaterLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-06 13:09:01 -Mapped "{[/oa/notify/add],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.add()
2019-04-06 13:09:01 -Mapped "{[/oa/notify/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.remove(java.lang.Long)
2019-04-06 13:09:01 -Mapped "{[/oa/notify/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.remove(java.lang.Long[])
2019-04-06 13:09:01 -Mapped "{[/oa/notify/update]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.update(com.bootdo.oa.domain.NotifyDO)
2019-04-06 13:09:01 -Mapped "{[/oa/notify/read/{id}],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.read(java.lang.Long,org.springframework.ui.Model)
2019-04-06 13:09:01 -Mapped "{[/oa/notify/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.oa.controller.NotifyController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-06 13:09:01 -Mapped "{[/oa/notify/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.save(com.bootdo.oa.domain.NotifyDO)
2019-04-06 13:09:01 -Mapped "{[/oa/notify/message],methods=[GET]}" onto com.bootdo.common.utils.PageUtils com.bootdo.oa.controller.NotifyController.message()
2019-04-06 13:09:01 -Mapped "{[/oa/notify/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-06 13:09:01 -Mapped "{[/oa/notify/selfList],methods=[GET]}" onto com.bootdo.common.utils.PageUtils com.bootdo.oa.controller.NotifyController.selfList(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-06 13:09:01 -Mapped "{[/oa/notify/selfNotify],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.selefNotify()
2019-04-06 13:09:01 -Mapped "{[/oa/notify],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.oaNotify()
2019-04-06 13:09:01 -Mapped "{[/print/print/add],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.add()
2019-04-06 13:09:01 -Mapped "{[/print/print/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.print.controller.PrintController.remove(java.lang.Long)
2019-04-06 13:09:01 -Mapped "{[/print/print/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.print.controller.PrintController.remove(java.lang.Long[])
2019-04-06 13:09:01 -Mapped "{[/print/print/update]}" onto public com.bootdo.common.utils.R com.bootdo.print.controller.PrintController.update(com.bootdo.print.domain.PrintDO)
2019-04-06 13:09:01 -Mapped "{[/print/print/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.print.controller.PrintController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-06 13:09:01 -Mapped "{[/print/print/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.print.controller.PrintController.save(java.lang.String,com.bootdo.print.domain.PrintDO)
2019-04-06 13:09:01 -Mapped "{[/print/print/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-06 13:09:01 -Mapped "{[/print/print/exprotPrint],methods=[GET]}" onto public void com.bootdo.print.controller.PrintController.exprotPrint(com.bootdo.print.vo.PrintVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-06 13:09:01 -Mapped "{[/print/print/printEdit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.printEdit(java.lang.Long,org.springframework.ui.Model)
2019-04-06 13:09:01 -Mapped "{[/print/print],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.Print()
2019-04-06 13:09:01 -Mapped "{[/system/sysDept/add/{pId}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.add(java.lang.Long,org.springframework.ui.Model)
2019-04-06 13:09:01 -Mapped "{[/system/sysDept/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.remove(java.lang.Long)
2019-04-06 13:09:01 -Mapped "{[/system/sysDept/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.remove(java.lang.Long[])
2019-04-06 13:09:01 -Mapped "{[/system/sysDept/update]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.update(com.bootdo.system.domain.DeptDO)
2019-04-06 13:09:01 -Mapped "{[/system/sysDept/list],methods=[GET]}" onto public java.util.List<com.bootdo.system.domain.DeptDO> com.bootdo.system.controller.DeptController.list()
2019-04-06 13:09:01 -Mapped "{[/system/sysDept/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.save(com.bootdo.system.domain.DeptDO)
2019-04-06 13:09:01 -Mapped "{[/system/sysDept/tree],methods=[GET]}" onto public com.bootdo.common.domain.Tree<com.bootdo.system.domain.DeptDO> com.bootdo.system.controller.DeptController.tree()
2019-04-06 13:09:01 -Mapped "{[/system/sysDept/edit/{deptId}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-06 13:09:01 -Mapped "{[/system/sysDept],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.dept()
2019-04-06 13:09:01 -Mapped "{[/system/sysDept/treeView],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.treeView()
2019-04-06 13:09:01 -Mapped "{[/index],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.index(org.springframework.ui.Model)
2019-04-06 13:09:01 -Mapped "{[/main],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.main()
2019-04-06 13:09:01 -Mapped "{[/login],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.login(org.springframework.ui.Model)
2019-04-06 13:09:01 -Mapped "{[/logout],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.logout()
2019-04-06 13:09:01 -Mapped "{[/getVerify],methods=[GET]}" onto public void com.bootdo.system.controller.LoginController.getVerify(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-04-06 13:09:01 -Mapped "{[/ || ],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.welcome(org.springframework.ui.Model)
2019-04-06 13:09:01 -Mapped "{[/login],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.LoginController.ajaxLogin(java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest)
2019-04-06 13:09:01 -Mapped "{[/sys/menu/add/{pId}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.MenuController.add(org.springframework.ui.Model,java.lang.Long)
2019-04-06 13:09:01 -Mapped "{[/sys/menu/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.MenuController.remove(java.lang.Long)
2019-04-06 13:09:01 -Mapped "{[/sys/menu/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.MenuController.update(com.bootdo.system.domain.MenuDO)
2019-04-06 13:09:01 -Mapped "{[/sys/menu/list]}" onto java.util.List<com.bootdo.system.domain.MenuDO> com.bootdo.system.controller.MenuController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-06 13:09:01 -Mapped "{[/sys/menu/save],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.MenuController.save(com.bootdo.system.domain.MenuDO)
2019-04-06 13:09:01 -Mapped "{[/sys/menu/tree/{roleId}],methods=[GET]}" onto com.bootdo.common.domain.Tree<com.bootdo.system.domain.MenuDO> com.bootdo.system.controller.MenuController.tree(java.lang.Long)
2019-04-06 13:09:01 -Mapped "{[/sys/menu/tree],methods=[GET]}" onto com.bootdo.common.domain.Tree<com.bootdo.system.domain.MenuDO> com.bootdo.system.controller.MenuController.tree()
2019-04-06 13:09:01 -Mapped "{[/sys/menu/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.MenuController.edit(org.springframework.ui.Model,java.lang.Long)
2019-04-06 13:09:01 -Mapped "{[/sys/menu],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.MenuController.menu(org.springframework.ui.Model)
2019-04-06 13:09:01 -Mapped "{[/sys/role/add],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.RoleController.add()
2019-04-06 13:09:01 -Mapped "{[/sys/role/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.update(com.bootdo.system.domain.RoleDO)
2019-04-06 13:09:01 -Mapped "{[/sys/role/list],methods=[GET]}" onto java.util.List<com.bootdo.system.domain.RoleDO> com.bootdo.system.controller.RoleController.list()
2019-04-06 13:09:01 -Mapped "{[/sys/role/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.save(java.lang.Long)
2019-04-06 13:09:01 -Mapped "{[/sys/role/save],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.save(com.bootdo.system.domain.RoleDO)
2019-04-06 13:09:01 -Mapped "{[/sys/role/batchRemove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.batchRemove(java.lang.Long[])
2019-04-06 13:09:01 -Mapped "{[/sys/role],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.RoleController.role()
2019-04-06 13:09:01 -Mapped "{[/sys/role/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.RoleController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-06 13:09:01 -Mapped "{[/sys/online/list]}" onto public java.util.List<com.bootdo.system.domain.UserOnline> com.bootdo.system.controller.SessionController.list()
2019-04-06 13:09:01 -Mapped "{[/sys/online/forceLogout/{sessionId}]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.SessionController.forceLogout(java.lang.String,org.springframework.web.servlet.mvc.support.RedirectAttributes)
2019-04-06 13:09:01 -Mapped "{[/sys/online/sessionList]}" onto public java.util.Collection<org.apache.shiro.session.Session> com.bootdo.system.controller.SessionController.sessionList()
2019-04-06 13:09:01 -Mapped "{[/sys/online],methods=[GET]}" onto public java.lang.String com.bootdo.system.controller.SessionController.online()
2019-04-06 13:09:01 -Mapped "{[/sys/user/exit],methods=[POST]}" onto boolean com.bootdo.system.controller.UserController.exit(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-06 13:09:01 -Mapped "{[/sys/user/add],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.add(org.springframework.ui.Model)
2019-04-06 13:09:01 -Mapped "{[/sys/user/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.remove(java.lang.Long)
2019-04-06 13:09:01 -Mapped "{[/sys/user/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.update(com.bootdo.system.domain.UserDO)
2019-04-06 13:09:01 -Mapped "{[/sys/user/list],methods=[GET]}" onto com.bootdo.common.utils.PageUtils com.bootdo.system.controller.UserController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-06 13:09:01 -Mapped "{[/sys/user/save],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.save(com.bootdo.system.domain.UserDO)
2019-04-06 13:09:01 -Mapped "{[/sys/user/batchRemove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.batchRemove(java.lang.Long[])
2019-04-06 13:09:01 -Mapped "{[/sys/user/tree],methods=[GET]}" onto public com.bootdo.common.domain.Tree<com.bootdo.system.domain.DeptDO> com.bootdo.system.controller.UserController.tree()
2019-04-06 13:09:01 -Mapped "{[/sys/user],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.user(org.springframework.ui.Model)
2019-04-06 13:09:01 -Mapped "{[/sys/user/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.edit(org.springframework.ui.Model,java.lang.Long)
2019-04-06 13:09:01 -Mapped "{[/sys/user/treeView],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.treeView()
2019-04-06 13:09:01 -Mapped "{[/sys/user/adminResetPwd],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.adminResetPwd(com.bootdo.system.vo.UserVO)
2019-04-06 13:09:01 -Mapped "{[/sys/user/uploadImg],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.uploadImg(org.springframework.web.multipart.MultipartFile,java.lang.String,javax.servlet.http.HttpServletRequest)
2019-04-06 13:09:01 -Mapped "{[/sys/user/personal],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.personal(org.springframework.ui.Model)
2019-04-06 13:09:01 -Mapped "{[/sys/user/updatePeronal],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.updatePeronal(com.bootdo.system.domain.UserDO)
2019-04-06 13:09:01 -Mapped "{[/sys/user/resetPwd/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.resetPwd(java.lang.Long,org.springframework.ui.Model)
2019-04-06 13:09:01 -Mapped "{[/sys/user/resetPwd],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.resetPwd(com.bootdo.system.vo.UserVO)
2019-04-06 13:09:01 -Mapped "{[/file/downImport/{importType}],methods=[GET]}" onto public void com.bootdo.temple.controller.TempletController.downImport(javax.servlet.http.HttpServletResponse,java.lang.String)
2019-04-06 13:09:01 -Mapped "{[/water/water/add],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterController.add()
2019-04-06 13:09:01 -Mapped "{[/water/water/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterController.remove(java.lang.Long)
2019-04-06 13:09:01 -Mapped "{[/water/water/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterController.remove(java.lang.Long[])
2019-04-06 13:09:01 -Mapped "{[/water/water/update]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterController.update(com.bootdo.water.domain.WaterDO)
2019-04-06 13:09:01 -Mapped "{[/water/water/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.water.controller.WaterController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-06 13:09:01 -Mapped "{[/water/water/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterController.save(com.bootdo.water.domain.WaterDO)
2019-04-06 13:09:01 -Mapped "{[/water/water/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-06 13:09:01 -Mapped "{[/water/water/exprotWater],methods=[GET]}" onto public void com.bootdo.water.controller.WaterController.exprotExcel(com.bootdo.water.vo.WaterVo,javax.servlet.http.HttpServletResponse)
2019-04-06 13:09:01 -Mapped "{[/water/water],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterController.Water()
2019-04-06 13:09:01 -Mapped "{[/water/waterInto/exprotWaterIntoExcel],methods=[GET]}" onto public void com.bootdo.water.controller.WaterIntoController.exprotExcel(com.bootdo.water.vo.WaterVo,javax.servlet.http.HttpServletResponse)
2019-04-06 13:09:01 -Mapped "{[/water/waterInto],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterIntoController.WaterInto()
2019-04-06 13:09:01 -Mapped "{[/water/waterPrice/add],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterPriceController.add()
2019-04-06 13:09:01 -Mapped "{[/water/waterPrice/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterPriceController.remove(java.lang.Long)
2019-04-06 13:09:01 -Mapped "{[/water/waterPrice/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterPriceController.remove(java.lang.Long[])
2019-04-06 13:09:01 -Mapped "{[/water/waterPrice/update]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterPriceController.update(com.bootdo.water.domain.WaterPriceDO)
2019-04-06 13:09:01 -Mapped "{[/water/waterPrice/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.water.controller.WaterPriceController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-06 13:09:01 -Mapped "{[/water/waterPrice/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterPriceController.save(com.bootdo.water.domain.WaterPriceDO)
2019-04-06 13:09:01 -Mapped "{[/water/waterPrice/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterPriceController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-06 13:09:01 -Mapped "{[/water/waterPrice],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterPriceController.WaterPrice()
2019-04-06 13:09:01 -Mapped "{[/water/waterUpLoad/importWaterExcel]}" onto public java.lang.String com.bootdo.water.controller.WaterUpLoadController.importWaterExcel(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)
2019-04-06 13:09:01 -Mapped "{[/water/waterUpLoad/exprotWaterExcel],methods=[GET]}" onto public void com.bootdo.water.controller.WaterUpLoadController.exprotWaterExcel(com.bootdo.water.vo.WaterVo,javax.servlet.http.HttpServletResponse)
2019-04-06 13:09:01 -Mapped "{[/water/waterUpLoad],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterUpLoadController.WaterUpLoad()
2019-04-06 13:09:01 -Mapped "{[/water/waterUpLoad/createWaterExcel],methods=[POST]}" onto public java.lang.String com.bootdo.water.controller.WaterUpLoadController.createWaterExcel(com.bootdo.water.domain.WaterDO) throws java.lang.Exception
2019-04-06 13:09:01 -Mapped "{[/v2/api-docs],methods=[GET],produces=[application/json || application/hal+json]}" onto public org.springframework.http.ResponseEntity<springfox.documentation.spring.web.json.Json> springfox.documentation.swagger2.web.Swagger2Controller.getDocumentation(java.lang.String,javax.servlet.http.HttpServletRequest)
2019-04-06 13:09:01 -Mapped "{[/swagger-resources/configuration/security]}" onto org.springframework.http.ResponseEntity<springfox.documentation.swagger.web.SecurityConfiguration> springfox.documentation.swagger.web.ApiResourceController.securityConfiguration()
2019-04-06 13:09:01 -Mapped "{[/swagger-resources]}" onto org.springframework.http.ResponseEntity<java.util.List<springfox.documentation.swagger.web.SwaggerResource>> springfox.documentation.swagger.web.ApiResourceController.swaggerResources()
2019-04-06 13:09:01 -Mapped "{[/swagger-resources/configuration/ui]}" onto org.springframework.http.ResponseEntity<springfox.documentation.swagger.web.UiConfiguration> springfox.documentation.swagger.web.ApiResourceController.uiConfiguration()
2019-04-06 13:09:04 -Initializing ExecutorService  'messageBrokerTaskScheduler'
2019-04-06 13:09:04 -Mapped URL path [/endpointChat/**] onto handler of type [class org.springframework.web.socket.sockjs.support.SockJsHttpRequestHandler]
2019-04-06 13:09:04 -Initializing ExecutorService  'brokerChannelExecutor'
2019-04-06 13:09:05 -Mapped URL path [/**/favicon.ico] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-04-06 13:09:05 -Looking for @ControllerAdvice: org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@6fdbe764: startup date [Sat Apr 06 13:08:43 CST 2019]; root of context hierarchy
2019-04-06 13:09:05 -Mapped URL path [/webjars/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-04-06 13:09:05 -Mapped URL path [/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-04-06 13:09:05 -Mapped URL path [/files/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-04-06 13:09:05 -Detected @ExceptionHandler methods in BDExceptionHandler
2019-04-06 13:09:05 -[THYMELEAF][main] Template Mode 'LEGACYHTML5' is deprecated. Using Template Mode 'HTML' instead.
2019-04-06 13:09:08 -Registering beans for JMX exposure on startup
2019-04-06 13:09:08 -Bean with name 'dataSource' has been autodetected for JMX exposure
2019-04-06 13:09:08 -Located MBean 'dataSource': registering with JMX server as MBean [com.alibaba.druid.pool:name=dataSource,type=DruidDataSource]
2019-04-06 13:09:08 -Starting beans in phase 2147483647
2019-04-06 13:09:08 -Context refreshed
2019-04-06 13:09:08 -Found 1 custom documentation plugin(s)
2019-04-06 13:09:08 -Scanning for api listing references
2019-04-06 13:09:09 -Generating unique operation named: exprotElecLogUsingGET_1
2019-04-06 13:09:09 -Generating unique operation named: getCountDUsingPOST_1
2019-04-06 13:09:09 -Generating unique operation named: exprotElecLogUsingGET_2
2019-04-06 13:09:09 -Generating unique operation named: getCountDUsingPOST_2
2019-04-06 13:09:09 -Generating unique operation named: exprotElecLogUsingGET_3
2019-04-06 13:09:09 -Generating unique operation named: getCountDUsingPOST_3
2019-04-06 13:09:09 -Generating unique operation named: removeUsingPOST_1
2019-04-06 13:09:09 -Generating unique operation named: addUsingGET_1
2019-04-06 13:09:09 -Generating unique operation named: editUsingGET_1
2019-04-06 13:09:09 -Generating unique operation named: listUsingGET_1
2019-04-06 13:09:09 -Generating unique operation named: removeUsingPOST_2
2019-04-06 13:09:09 -Generating unique operation named: removeUsingPOST_3
2019-04-06 13:09:09 -Generating unique operation named: saveUsingPOST_1
2019-04-06 13:09:09 -Generating unique operation named: updateUsingGET_1
2019-04-06 13:09:09 -Generating unique operation named: updateUsingHEAD_1
2019-04-06 13:09:09 -Generating unique operation named: updateUsingPOST_1
2019-04-06 13:09:09 -Generating unique operation named: updateUsingPUT_1
2019-04-06 13:09:09 -Generating unique operation named: updateUsingPATCH_1
2019-04-06 13:09:09 -Generating unique operation named: updateUsingDELETE_1
2019-04-06 13:09:09 -Generating unique operation named: updateUsingOPTIONS_1
2019-04-06 13:09:09 -Generating unique operation named: updateUsingTRACE_1
2019-04-06 13:09:09 -Generating unique operation named: addUsingGET_2
2019-04-06 13:09:09 -Generating unique operation named: editUsingGET_2
2019-04-06 13:09:09 -Generating unique operation named: listUsingGET_2
2019-04-06 13:09:09 -Generating unique operation named: removeUsingPOST_4
2019-04-06 13:09:09 -Generating unique operation named: removeUsingPOST_5
2019-04-06 13:09:09 -Generating unique operation named: saveUsingPOST_2
2019-04-06 13:09:09 -Generating unique operation named: updateUsingPOST_2
2019-04-06 13:09:09 -Generating unique operation named: exprotExcelUsingGET_1
2019-04-06 13:09:09 -Generating unique operation named: addUsingGET_3
2019-04-06 13:09:09 -Generating unique operation named: editUsingGET_3
2019-04-06 13:09:09 -Generating unique operation named: exprotElecLogUsingGET_4
2019-04-06 13:09:09 -Generating unique operation named: listUsingGET_3
2019-04-06 13:09:09 -Generating unique operation named: removeUsingPOST_6
2019-04-06 13:09:09 -Generating unique operation named: removeUsingPOST_7
2019-04-06 13:09:09 -Generating unique operation named: saveUsingPOST_3
2019-04-06 13:09:09 -Generating unique operation named: updateUsingGET_2
2019-04-06 13:09:09 -Generating unique operation named: updateUsingHEAD_2
2019-04-06 13:09:09 -Generating unique operation named: updateUsingPOST_3
2019-04-06 13:09:09 -Generating unique operation named: updateUsingPUT_2
2019-04-06 13:09:09 -Generating unique operation named: updateUsingPATCH_2
2019-04-06 13:09:09 -Generating unique operation named: updateUsingDELETE_2
2019-04-06 13:09:09 -Generating unique operation named: updateUsingOPTIONS_2
2019-04-06 13:09:09 -Generating unique operation named: updateUsingTRACE_2
2019-04-06 13:09:09 -Generating unique operation named: addUsingGET_4
2019-04-06 13:09:09 -Generating unique operation named: editUsingGET_4
2019-04-06 13:09:09 -Generating unique operation named: listUsingGET_4
2019-04-06 13:09:09 -Generating unique operation named: removeUsingPOST_8
2019-04-06 13:09:09 -Generating unique operation named: removeUsingPOST_9
2019-04-06 13:09:09 -Generating unique operation named: saveUsingPOST_4
2019-04-06 13:09:09 -Generating unique operation named: updateUsingGET_3
2019-04-06 13:09:09 -Generating unique operation named: updateUsingHEAD_3
2019-04-06 13:09:09 -Generating unique operation named: updateUsingPOST_4
2019-04-06 13:09:09 -Generating unique operation named: updateUsingPUT_3
2019-04-06 13:09:09 -Generating unique operation named: updateUsingPATCH_3
2019-04-06 13:09:09 -Generating unique operation named: updateUsingDELETE_3
2019-04-06 13:09:09 -Generating unique operation named: updateUsingOPTIONS_3
2019-04-06 13:09:09 -Generating unique operation named: updateUsingTRACE_3
2019-04-06 13:09:09 -Generating unique operation named: ElecUsingGET_1
2019-04-06 13:09:09 -Generating unique operation named: addUsingGET_5
2019-04-06 13:09:09 -Generating unique operation named: editUsingGET_5
2019-04-06 13:09:09 -Generating unique operation named: listUsingGET_5
2019-04-06 13:09:09 -Generating unique operation named: removeUsingPOST_10
2019-04-06 13:09:09 -Generating unique operation named: removeUsingPOST_11
2019-04-06 13:09:09 -Generating unique operation named: saveUsingPOST_5
2019-04-06 13:09:09 -Generating unique operation named: updateUsingGET_4
2019-04-06 13:09:09 -Generating unique operation named: updateUsingHEAD_4
2019-04-06 13:09:09 -Generating unique operation named: updateUsingPOST_5
2019-04-06 13:09:09 -Generating unique operation named: updateUsingPUT_4
2019-04-06 13:09:09 -Generating unique operation named: updateUsingPATCH_4
2019-04-06 13:09:09 -Generating unique operation named: updateUsingDELETE_4
2019-04-06 13:09:09 -Generating unique operation named: updateUsingOPTIONS_4
2019-04-06 13:09:09 -Generating unique operation named: updateUsingTRACE_4
2019-04-06 13:09:09 -Generating unique operation named: editUsingGET_6
2019-04-06 13:09:09 -Generating unique operation named: listUsingGET_6
2019-04-06 13:09:09 -Generating unique operation named: updateUsingPOST_6
2019-04-06 13:09:09 -Generating unique operation named: addUsingGET_6
2019-04-06 13:09:09 -Generating unique operation named: editUsingGET_7
2019-04-06 13:09:09 -Generating unique operation named: exprotExcelUsingGET_2
2019-04-06 13:09:09 -Generating unique operation named: listUsingGET_7
2019-04-06 13:09:09 -Generating unique operation named: removeUsingPOST_12
2019-04-06 13:09:09 -Generating unique operation named: removeUsingPOST_13
2019-04-06 13:09:09 -Generating unique operation named: saveUsingPOST_6
2019-04-06 13:09:09 -Generating unique operation named: updateUsingGET_5
2019-04-06 13:09:09 -Generating unique operation named: updateUsingHEAD_5
2019-04-06 13:09:09 -Generating unique operation named: updateUsingPOST_7
2019-04-06 13:09:09 -Generating unique operation named: updateUsingPUT_5
2019-04-06 13:09:09 -Generating unique operation named: updateUsingPATCH_5
2019-04-06 13:09:09 -Generating unique operation named: updateUsingDELETE_5
2019-04-06 13:09:09 -Generating unique operation named: updateUsingOPTIONS_5
2019-04-06 13:09:09 -Generating unique operation named: updateUsingTRACE_5
2019-04-06 13:09:09 -Generating unique operation named: exprotExcelUsingGET_3
2019-04-06 13:09:09 -Generating unique operation named: addUsingGET_7
2019-04-06 13:09:09 -Generating unique operation named: editUsingGET_8
2019-04-06 13:09:09 -Generating unique operation named: listUsingGET_8
2019-04-06 13:09:09 -Generating unique operation named: removeUsingPOST_14
2019-04-06 13:09:09 -Generating unique operation named: removeUsingPOST_15
2019-04-06 13:09:09 -Generating unique operation named: saveUsingPOST_7
2019-04-06 13:09:09 -Generating unique operation named: updateUsingGET_6
2019-04-06 13:09:09 -Generating unique operation named: updateUsingHEAD_6
2019-04-06 13:09:09 -Generating unique operation named: updateUsingPOST_8
2019-04-06 13:09:09 -Generating unique operation named: updateUsingPUT_6
2019-04-06 13:09:09 -Generating unique operation named: updateUsingPATCH_6
2019-04-06 13:09:09 -Generating unique operation named: updateUsingDELETE_6
2019-04-06 13:09:09 -Generating unique operation named: updateUsingOPTIONS_6
2019-04-06 13:09:10 -Generating unique operation named: updateUsingTRACE_6
2019-04-06 13:09:10 -Generating unique operation named: addUsingGET_8
2019-04-06 13:09:10 -Generating unique operation named: editUsingGET_9
2019-04-06 13:09:10 -Generating unique operation named: listUsingGET_9
2019-04-06 13:09:10 -Generating unique operation named: removeUsingPOST_16
2019-04-06 13:09:10 -Generating unique operation named: removeUsingPOST_17
2019-04-06 13:09:10 -Generating unique operation named: saveUsingPOST_8
2019-04-06 13:09:10 -Generating unique operation named: updateUsingGET_7
2019-04-06 13:09:10 -Generating unique operation named: updateUsingHEAD_7
2019-04-06 13:09:10 -Generating unique operation named: updateUsingPOST_9
2019-04-06 13:09:10 -Generating unique operation named: updateUsingPUT_7
2019-04-06 13:09:10 -Generating unique operation named: updateUsingPATCH_7
2019-04-06 13:09:10 -Generating unique operation named: updateUsingDELETE_7
2019-04-06 13:09:10 -Generating unique operation named: updateUsingOPTIONS_7
2019-04-06 13:09:10 -Generating unique operation named: updateUsingTRACE_7
2019-04-06 13:09:10 -Generating unique operation named: addUsingGET_9
2019-04-06 13:09:10 -Generating unique operation named: editUsingGET_10
2019-04-06 13:09:10 -Generating unique operation named: infoUsingGET_1
2019-04-06 13:09:10 -Generating unique operation named: infoUsingHEAD_1
2019-04-06 13:09:10 -Generating unique operation named: infoUsingPOST_1
2019-04-06 13:09:10 -Generating unique operation named: infoUsingPUT_1
2019-04-06 13:09:10 -Generating unique operation named: infoUsingPATCH_1
2019-04-06 13:09:10 -Generating unique operation named: infoUsingDELETE_1
2019-04-06 13:09:10 -Generating unique operation named: infoUsingOPTIONS_1
2019-04-06 13:09:10 -Generating unique operation named: infoUsingTRACE_1
2019-04-06 13:09:10 -Generating unique operation named: listUsingGET_10
2019-04-06 13:09:10 -Generating unique operation named: removeUsingPOST_18
2019-04-06 13:09:10 -Generating unique operation named: removeUsingPOST_19
2019-04-06 13:09:10 -Generating unique operation named: saveUsingPOST_9
2019-04-06 13:09:10 -Generating unique operation named: updateUsingPOST_10
2019-04-06 13:09:10 -Generating unique operation named: listUsingGET_11
2019-04-06 13:09:10 -Generating unique operation named: removeUsingPOST_20
2019-04-06 13:09:10 -Generating unique operation named: welcomeUsingGET_1
2019-04-06 13:09:10 -Generating unique operation named: addUsingGET_10
2019-04-06 13:09:10 -Generating unique operation named: editUsingGET_11
2019-04-06 13:09:10 -Generating unique operation named: listUsingGET_12
2019-04-06 13:09:10 -Generating unique operation named: removeUsingPOST_21
2019-04-06 13:09:10 -Generating unique operation named: saveUsingPOST_10
2019-04-06 13:09:10 -Generating unique operation named: treeUsingGET_1
2019-04-06 13:09:10 -Generating unique operation named: treeUsingGET_2
2019-04-06 13:09:10 -Generating unique operation named: updateUsingPOST_11
2019-04-06 13:09:10 -Generating unique operation named: addUsingGET_11
2019-04-06 13:09:10 -Generating unique operation named: editUsingGET_12
2019-04-06 13:09:10 -Generating unique operation named: listUsingGET_13
2019-04-06 13:09:10 -Generating unique operation named: removeUsingPOST_22
2019-04-06 13:09:10 -Generating unique operation named: removeUsingPOST_23
2019-04-06 13:09:10 -Generating unique operation named: saveUsingPOST_11
2019-04-06 13:09:10 -Generating unique operation named: updateUsingGET_8
2019-04-06 13:09:10 -Generating unique operation named: updateUsingHEAD_8
2019-04-06 13:09:10 -Generating unique operation named: updateUsingPOST_12
2019-04-06 13:09:10 -Generating unique operation named: updateUsingPUT_8
2019-04-06 13:09:10 -Generating unique operation named: updateUsingPATCH_8
2019-04-06 13:09:10 -Generating unique operation named: updateUsingDELETE_8
2019-04-06 13:09:10 -Generating unique operation named: updateUsingOPTIONS_8
2019-04-06 13:09:10 -Generating unique operation named: updateUsingTRACE_8
2019-04-06 13:09:10 -Generating unique operation named: addUsingGET_12
2019-04-06 13:09:10 -Generating unique operation named: editUsingGET_13
2019-04-06 13:09:10 -Generating unique operation named: listUsingGET_14
2019-04-06 13:09:10 -Generating unique operation named: removeUsingPOST_24
2019-04-06 13:09:10 -Generating unique operation named: removeUsingPOST_25
2019-04-06 13:09:10 -Generating unique operation named: saveUsingPOST_12
2019-04-06 13:09:10 -Generating unique operation named: updateUsingGET_9
2019-04-06 13:09:10 -Generating unique operation named: updateUsingHEAD_9
2019-04-06 13:09:10 -Generating unique operation named: updateUsingPOST_13
2019-04-06 13:09:10 -Generating unique operation named: updateUsingPUT_9
2019-04-06 13:09:10 -Generating unique operation named: updateUsingPATCH_9
2019-04-06 13:09:10 -Generating unique operation named: updateUsingDELETE_9
2019-04-06 13:09:10 -Generating unique operation named: updateUsingOPTIONS_9
2019-04-06 13:09:10 -Generating unique operation named: updateUsingTRACE_9
2019-04-06 13:09:10 -Generating unique operation named: addUsingGET_13
2019-04-06 13:09:10 -Generating unique operation named: batchRemoveUsingPOST_1
2019-04-06 13:09:10 -Generating unique operation named: editUsingGET_14
2019-04-06 13:09:10 -Generating unique operation named: listUsingGET_15
2019-04-06 13:09:10 -Generating unique operation named: saveUsingPOST_13
2019-04-06 13:09:10 -Generating unique operation named: saveUsingPOST_14
2019-04-06 13:09:10 -Generating unique operation named: updateUsingPOST_14
2019-04-06 13:09:10 -Generating unique operation named: listUsingGET_16
2019-04-06 13:09:10 -Generating unique operation named: listUsingHEAD_1
2019-04-06 13:09:10 -Generating unique operation named: listUsingPOST_1
2019-04-06 13:09:10 -Generating unique operation named: listUsingPUT_1
2019-04-06 13:09:10 -Generating unique operation named: listUsingPATCH_1
2019-04-06 13:09:10 -Generating unique operation named: listUsingDELETE_1
2019-04-06 13:09:10 -Generating unique operation named: listUsingOPTIONS_1
2019-04-06 13:09:10 -Generating unique operation named: listUsingTRACE_1
2019-04-06 13:09:10 -Generating unique operation named: addUsingGET_14
2019-04-06 13:09:10 -Generating unique operation named: batchRemoveUsingPOST_2
2019-04-06 13:09:10 -Generating unique operation named: editUsingGET_15
2019-04-06 13:09:10 -Generating unique operation named: listUsingGET_17
2019-04-06 13:09:10 -Generating unique operation named: removeUsingPOST_26
2019-04-06 13:09:10 -Generating unique operation named: saveUsingPOST_15
2019-04-06 13:09:10 -Generating unique operation named: treeUsingGET_3
2019-04-06 13:09:10 -Generating unique operation named: treeViewUsingGET_1
2019-04-06 13:09:10 -Generating unique operation named: updateUsingPOST_15
2019-04-06 13:09:10 -Generating unique operation named: addUsingGET_15
2019-04-06 13:09:10 -Generating unique operation named: editUsingGET_16
2019-04-06 13:09:10 -Generating unique operation named: exprotExcelUsingGET_4
2019-04-06 13:09:10 -Generating unique operation named: listUsingGET_18
2019-04-06 13:09:10 -Generating unique operation named: removeUsingPOST_27
2019-04-06 13:09:10 -Generating unique operation named: removeUsingPOST_28
2019-04-06 13:09:10 -Generating unique operation named: saveUsingPOST_16
2019-04-06 13:09:10 -Generating unique operation named: updateUsingGET_10
2019-04-06 13:09:10 -Generating unique operation named: updateUsingHEAD_10
2019-04-06 13:09:10 -Generating unique operation named: updateUsingPOST_16
2019-04-06 13:09:10 -Generating unique operation named: updateUsingPUT_10
2019-04-06 13:09:10 -Generating unique operation named: updateUsingPATCH_10
2019-04-06 13:09:10 -Generating unique operation named: updateUsingDELETE_10
2019-04-06 13:09:10 -Generating unique operation named: updateUsingOPTIONS_10
2019-04-06 13:09:10 -Generating unique operation named: updateUsingTRACE_10
2019-04-06 13:09:10 -Generating unique operation named: exprotExcelUsingGET_5
2019-04-06 13:09:10 -Generating unique operation named: addUsingGET_16
2019-04-06 13:09:10 -Generating unique operation named: editUsingGET_17
2019-04-06 13:09:10 -Generating unique operation named: listUsingGET_19
2019-04-06 13:09:10 -Generating unique operation named: removeUsingPOST_29
2019-04-06 13:09:10 -Generating unique operation named: removeUsingPOST_30
2019-04-06 13:09:10 -Generating unique operation named: saveUsingPOST_17
2019-04-06 13:09:10 -Generating unique operation named: updateUsingGET_11
2019-04-06 13:09:10 -Generating unique operation named: updateUsingHEAD_11
2019-04-06 13:09:10 -Generating unique operation named: updateUsingPOST_17
2019-04-06 13:09:10 -Generating unique operation named: updateUsingPUT_11
2019-04-06 13:09:10 -Generating unique operation named: updateUsingPATCH_11
2019-04-06 13:09:10 -Generating unique operation named: updateUsingDELETE_11
2019-04-06 13:09:10 -Generating unique operation named: updateUsingOPTIONS_11
2019-04-06 13:09:10 -Generating unique operation named: updateUsingTRACE_11
2019-04-06 13:09:10 -Generating unique operation named: addUsingGET_17
2019-04-06 13:09:10 -Generating unique operation named: editUsingGET_18
2019-04-06 13:09:10 -Generating unique operation named: listUsingGET_20
2019-04-06 13:09:10 -Generating unique operation named: removeUsingPOST_31
2019-04-06 13:09:10 -Generating unique operation named: removeUsingPOST_32
2019-04-06 13:09:10 -Generating unique operation named: saveUsingPOST_18
2019-04-06 13:09:10 -Generating unique operation named: updateUsingGET_12
2019-04-06 13:09:10 -Generating unique operation named: updateUsingHEAD_12
2019-04-06 13:09:10 -Generating unique operation named: updateUsingPOST_18
2019-04-06 13:09:10 -Generating unique operation named: updateUsingPUT_12
2019-04-06 13:09:10 -Generating unique operation named: updateUsingPATCH_12
2019-04-06 13:09:10 -Generating unique operation named: updateUsingDELETE_12
2019-04-06 13:09:10 -Generating unique operation named: updateUsingOPTIONS_12
2019-04-06 13:09:10 -Generating unique operation named: updateUsingTRACE_12
2019-04-06 13:09:11 -Starting Quartz Scheduler now
2019-04-06 13:09:11 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED started.
2019-04-06 13:09:11 -Starting...
2019-04-06 13:09:11 -BrokerAvailabilityEvent[available=true, SimpleBrokerMessageHandler [DefaultSubscriptionRegistry[cache[0 destination(s)], registry[0 sessions]]]]
2019-04-06 13:09:11 -Started.
2019-04-06 13:09:11 -Starting ProtocolHandler ["http-nio-8081"]
2019-04-06 13:09:11 -Using a shared selector for servlet write/read
2019-04-06 13:09:11 -Tomcat started on port(s): 8081 (http) with context path ''
2019-04-06 13:09:11 -Started BootdoApplication in 29.491 seconds (JVM running for 30.443)
2019-04-06 13:09:11 -==>  Preparing: select `id`,`cron_expression`,`method_name`,`is_concurrent`,`description`,`update_by`,`bean_class`,`create_date`,`job_status`,`job_group`,`update_date`,`create_by`,`spring_bean`,`job_name` from sys_task order by id desc 
2019-04-06 13:09:12 -==> Parameters: 
2019-04-06 13:09:12 -<==      Total: 1
2019-04-06 13:10:04 -WebSocketSession[0 current WS(0)-HttpStream(0)-HttpPoll(0), 0 total, 0 closed abnormally (0 connect failure, 0 send limit, 0 transport error)], stompSubProtocol[processed CONNECT(0)-CONNECTED(0)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], outboundChannelpool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], sockJsScheduler[pool size = 1, active threads = 1, queued tasks = 0, completed tasks = 0]
2019-04-06 13:13:56 -Initializing Spring FrameworkServlet 'dispatcherServlet'
2019-04-06 13:13:56 -FrameworkServlet 'dispatcherServlet': initialization started
2019-04-06 13:13:56 -FrameworkServlet 'dispatcherServlet': initialization completed in 128 ms
2019-04-06 13:13:56 -Enabling session validation scheduler...
2019-04-06 13:13:56 -请求地址 : http://localhost:8081/login;JSESSIONID=53b29962-cfb2-4748-84fc-2ddbe6bc3175
2019-04-06 13:13:56 -HTTP METHOD : GET
2019-04-06 13:13:56 -CLASS_METHOD : com.bootdo.system.controller.LoginController.login
2019-04-06 13:13:56 -参数 : [{}]
2019-04-06 13:13:56 -耗时 : 4
2019-04-06 13:13:56 -返回值 : login
2019-04-06 13:14:00 -请求地址 : http://localhost:8081/getVerify
2019-04-06 13:14:00 -HTTP METHOD : GET
2019-04-06 13:14:00 -CLASS_METHOD : com.bootdo.system.controller.LoginController.getVerify
2019-04-06 13:14:00 -参数 : [org.apache.shiro.web.servlet.ShiroHttpServletRequest@7b42e617, org.apache.shiro.web.servlet.ShiroHttpServletResponse@64e8cadb]
2019-04-06 13:14:13 -3664
2019-04-06 13:14:14 -耗时 : 13431
2019-04-06 13:14:14 -返回值 : null
2019-04-06 13:14:14 -请求地址 : http://localhost:8081/login
2019-04-06 13:14:14 -HTTP METHOD : GET
2019-04-06 13:14:14 -CLASS_METHOD : com.bootdo.system.controller.LoginController.login
2019-04-06 13:14:14 -参数 : [{}]
2019-04-06 13:14:14 -耗时 : 0
2019-04-06 13:14:14 -返回值 : login
2019-04-06 13:14:59 -请求地址 : http://localhost:8081/login
2019-04-06 13:14:59 -HTTP METHOD : POST
2019-04-06 13:14:59 -CLASS_METHOD : com.bootdo.system.controller.LoginController.ajaxLogin
2019-04-06 13:14:59 -参数 : [admin, 111111, 3664, org.apache.shiro.web.servlet.ShiroHttpServletRequest@786b08ed]
2019-04-06 13:14:59 -==>  Preparing: select `user_id`,`username`,`name`,`password`,`dept_id`,`email`,`mobile`,`status`,`user_id_create`,`gmt_create`,`gmt_modified`,`sex`,`birth`,`pic_id`,`live_address`,`hobby`,`province`,`city`,`district` from sys_user WHERE username = ? order by user_id desc 
2019-04-06 13:14:59 -==> Parameters: admin(String)
2019-04-06 13:14:59 -<==      Total: 1
2019-04-06 13:14:59 -耗时 : 190
2019-04-06 13:14:59 -返回值 : {msg=操作成功, code=0}
2019-04-06 13:15:00 -More than one TaskExecutor bean found within the context, and none is named 'taskExecutor'. Mark one of them as primary or name it 'taskExecutor' (possibly as an alias) in order to use it for async processing: [clientInboundChannelExecutor, clientOutboundChannelExecutor, brokerChannelExecutor, messageBrokerTaskScheduler]
2019-04-06 13:15:00 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-06 13:15:00 -==> Parameters: 1(Long), admin(String), 登录(String), 190(Integer), com.bootdo.system.controller.LoginController.ajaxLogin()(String), null, 127.0.0.1(String), 2019-04-06 13:15:00.107(Timestamp)
2019-04-06 13:15:00 -请求地址 : http://localhost:8081/index
2019-04-06 13:15:00 -HTTP METHOD : GET
2019-04-06 13:15:00 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2019-04-06 13:15:00 -参数 : [{}]
2019-04-06 13:15:00 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2019-04-06 13:15:00 -<==    Updates: 1
2019-04-06 13:15:00 -==> Parameters: 1(Long)
2019-04-06 13:15:00 -<==      Total: 46
2019-04-06 13:15:00 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2019-04-06 13:15:00 -==> Parameters: 138(Long)
2019-04-06 13:15:00 -<==      Total: 1
2019-04-06 13:15:00 -耗时 : 564
2019-04-06 13:15:00 -返回值 : index_v1
2019-04-06 13:15:01 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-06 13:15:01 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 564(Integer), com.bootdo.system.controller.LoginController.index()(String), {"menus":[{"attributes":{"icon":"fa fa-money","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-money","url":"/moneyList/moneyList"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"102","parentId":"106","text":"现金缴费"},{"attributes":{"icon":"fa fa-book","url":"/moneyLog/elecLog"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"107","parentId":"106","text":"缴费记录"}],"hasChildren":true,"hasParent":false,"id":"106","parentId":"0","text":"收费管理"},{"attributes":{"icon":"fa fa-lightbulb-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/elec/elec"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"121","parentId":"103","text":"电费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"elec/elecInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"122","parentId":"103","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"elec/elecUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"123","parentId":"103","text":"电表上传"},{"attributes":{"icon":"fa fa-cc","url":"/elec/elecPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"124","parentId":"103","text":"电价管理"}],"hasChildren":true,"hasParent":false,"id":"103","parentId":"0","text":"电费管理"},{"attributes":{"icon":"fa fa-tint","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/water/water"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"117","parentId":"105","text":"水费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"water/waterInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"118","parentId":"105","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"water/waterUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"119","parentId":"105","text":"水费生成"},{"attributes":{"icon":"fa fa-cc","url":"/water/waterPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"120","parentId":"105","text":"水价管理"}],"hasChildren":true,"hasParent":false,"id":"105","parentId":"0","text":"水费管理"},{"attributes":{"icon":"fa fa-fire","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/heat/heat"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"113","parentId":"104","text":"暖费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"heat/heatInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"114","parentId":"104","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"heat/heatUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"115","parentId":"104","text":"暖费生成"},{"attributes":{"icon":"","url":"/heat/heatPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"116","parentId":"104","text":"暖价管理"}],"hasChildren":true,"hasParent":false,"id":"104","parentId":"0","text":"暖费管理"},{"attributes":{"icon":"fa fa-vcard-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-bomb","url":"/print/print"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"149","parentId":"108","text":"票据记录"}],"hasChildren":true,"hasParent":false,"id":"108","parentId":"0","text":"票据管理"},{"attributes":{"icon":"fa fa-bar-chart","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-area-chart","url":"/chart/graph_echarts.html"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","text":"百度chart"},{"attributes":{"icon":"fa fa-sun-o","url":"charts/countDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"109","parentId":"97","text":"日统计报表"},{"attributes":{"icon":"fa fa-registered","url":"charts/countMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"110","parentId":"97","text":"月统计报表"},{"attributes":{"icon":"fa fa-money","url":"charts/countOwe"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"155","parentId":"97","text":"欠费报表图"},{"attributes":{"icon":"fa fa-support","url":"charts/countYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"111","parentId":"97","text":"年统计报表"},{"attributes":{"icon":"fa fa-tachometer","url":"charts/countRun"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"112","parentId":"97","text":"走势图报表"}],"hasChildren":true,"hasParent":false,"id":"97","parentId":"0","text":"统计管理"},{"attributes":{"icon":"fa fa-bars","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-book","url":"/common/dict"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"78","parentId":"1","text":"数据字典"},{"attributes":{"icon":"fa fa-folder-open","url":"/common/sysFile"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"71","parentId":"1","text":"文件管理"}],"h(String), 127.0.0.1(String), 2019-04-06 13:15:01.019(Timestamp)
2019-04-06 13:15:01 -<==    Updates: 1
2019-04-06 13:15:01 -请求地址 : http://localhost:8081/main
2019-04-06 13:15:01 -HTTP METHOD : GET
2019-04-06 13:15:01 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-06 13:15:01 -参数 : []
2019-04-06 13:15:01 -耗时 : 0
2019-04-06 13:15:01 -返回值 : main
2019-04-06 13:15:01 -请求地址 : http://localhost:8081/oa/notify/message
2019-04-06 13:15:01 -HTTP METHOD : GET
2019-04-06 13:15:01 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2019-04-06 13:15:01 -参数 : []
2019-04-06 13:15:01 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2019-04-06 13:15:01 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2019-04-06 13:15:02 -请求地址 : http://localhost:8081/main
2019-04-06 13:15:02 -HTTP METHOD : GET
2019-04-06 13:15:02 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-06 13:15:02 -参数 : []
2019-04-06 13:15:02 -耗时 : 0
2019-04-06 13:15:02 -返回值 : main
2019-04-06 13:15:02 -<==      Total: 0
2019-04-06 13:15:02 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2019-04-06 13:15:02 -==> Parameters: 1(Long), 0(String)
2019-04-06 13:15:02 -<==      Total: 1
2019-04-06 13:15:02 -耗时 : 968
2019-04-06 13:15:02 -返回值 : com.bootdo.common.utils.PageUtils@4841cb6
2019-04-06 13:15:21 -==>  Preparing: select distinct m.perms from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id = ur.role_id where ur.user_id = ? 
2019-04-06 13:15:21 -==> Parameters: 1(Long)
2019-04-06 13:15:21 -<==      Total: 90
2019-04-06 13:15:21 -请求地址 : http://localhost:8081/moneyLog/elecLog
2019-04-06 13:15:21 -HTTP METHOD : GET
2019-04-06 13:15:21 -CLASS_METHOD : com.bootdo.moneyLog.controller.ElecLogController.moneyLog
2019-04-06 13:15:21 -参数 : []
2019-04-06 13:15:21 -耗时 : 0
2019-04-06 13:15:21 -返回值 : /moneyLog/elecLog/elecLog
2019-04-06 13:15:22 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-06 13:15:22 -HTTP METHOD : GET
2019-04-06 13:15:22 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-06 13:15:22 -参数 : [userType]
2019-04-06 13:15:22 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-06 13:15:22 -==> Parameters: userType(String)
2019-04-06 13:15:22 -<==      Total: 2
2019-04-06 13:15:22 -耗时 : 33
2019-04-06 13:15:22 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-06 13:15:22 -请求地址 : http://localhost:8081/moneyLog/elecLog/list
2019-04-06 13:15:22 -HTTP METHOD : GET
2019-04-06 13:15:22 -CLASS_METHOD : com.bootdo.moneyLog.controller.ElecLogController.list
2019-04-06 13:15:22 -参数 : [{limit=10, offset=0, userType=, userOrg=, userId=, elecDate=}]
2019-04-06 13:15:22 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`elec_type`,`elec_money`,`elec_date`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec_log order by id asc limit ?, ? 
2019-04-06 13:15:22 -==> Parameters: 0(Integer), 10(Integer)
2019-04-06 13:15:22 -<==      Total: 7
2019-04-06 13:15:22 -==>  Preparing: select count(*) from elec_log 
2019-04-06 13:15:22 -==> Parameters: 
2019-04-06 13:15:22 -<==      Total: 1
2019-04-06 13:15:22 -耗时 : 72
2019-04-06 13:15:22 -返回值 : com.bootdo.common.utils.PageUtils@20a6e1c9
2019-04-06 13:15:23 -请求地址 : http://localhost:8081/moneyLog/waterLog
2019-04-06 13:15:23 -HTTP METHOD : GET
2019-04-06 13:15:23 -CLASS_METHOD : com.bootdo.moneyLog.controller.WaterLogController.WaterLog
2019-04-06 13:15:23 -参数 : []
2019-04-06 13:15:23 -耗时 : 1
2019-04-06 13:15:23 -返回值 : /moneyLog/waterLog/waterLog
2019-04-06 13:15:23 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-06 13:15:23 -HTTP METHOD : GET
2019-04-06 13:15:23 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-06 13:15:23 -参数 : [userType]
2019-04-06 13:15:23 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-06 13:15:23 -==> Parameters: userType(String)
2019-04-06 13:15:23 -<==      Total: 2
2019-04-06 13:15:23 -耗时 : 5
2019-04-06 13:15:23 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-06 13:15:23 -请求地址 : http://localhost:8081/moneyLog/waterLog/list
2019-04-06 13:15:23 -HTTP METHOD : GET
2019-04-06 13:15:23 -CLASS_METHOD : com.bootdo.moneyLog.controller.WaterLogController.list
2019-04-06 13:15:23 -参数 : [{limit=10, offset=0, userType=, userOrg=, userId=, waterDate=}]
2019-04-06 13:15:23 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,`water_type`,`water_money`,`water_date`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from water_log order by id asc limit ?, ? 
2019-04-06 13:15:23 -==> Parameters: 0(Integer), 10(Integer)
2019-04-06 13:15:23 -<==      Total: 5
2019-04-06 13:15:23 -==>  Preparing: select count(*) from water_log 
2019-04-06 13:15:23 -==> Parameters: 
2019-04-06 13:15:23 -<==      Total: 1
2019-04-06 13:15:23 -耗时 : 42
2019-04-06 13:15:23 -返回值 : com.bootdo.common.utils.PageUtils@6454eb56
2019-04-06 13:15:25 -请求地址 : http://localhost:8081/moneyLog/waterLog/edit/5
2019-04-06 13:15:25 -HTTP METHOD : GET
2019-04-06 13:15:25 -CLASS_METHOD : com.bootdo.moneyLog.controller.WaterLogController.edit
2019-04-06 13:15:25 -参数 : [5, {}]
2019-04-06 13:15:25 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,`water_type`,`water_money`,`water_date`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from water_log where id = ? 
2019-04-06 13:15:25 -==> Parameters: 5(Long)
2019-04-06 13:15:25 -<==      Total: 1
2019-04-06 13:15:25 -耗时 : 16
2019-04-06 13:15:25 -返回值 : moneyLog/waterLog/edit
2019-04-06 13:15:25 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-06 13:15:25 -HTTP METHOD : GET
2019-04-06 13:15:25 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-06 13:15:25 -参数 : [userType]
2019-04-06 13:15:25 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-06 13:15:25 -==> Parameters: userType(String)
2019-04-06 13:15:25 -请求地址 : http://localhost:8081/common/dict/list/waterType
2019-04-06 13:15:25 -HTTP METHOD : GET
2019-04-06 13:15:25 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-06 13:15:25 -参数 : [waterType]
2019-04-06 13:15:25 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-06 13:15:25 -<==      Total: 2
2019-04-06 13:15:25 -耗时 : 7
2019-04-06 13:15:25 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-06 13:15:25 -==> Parameters: waterType(String)
2019-04-06 13:15:25 -<==      Total: 6
2019-04-06 13:15:25 -耗时 : 17
2019-04-06 13:15:25 -返回值 : [DictDO{id=132, name='特殊水费4', value='5', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=131, name='特殊水费3', value='4', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=130, name='特殊水费2', value='3', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=129, name='特殊水费1', value='2', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=128, name='民用水', value='1', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=127, name='商业水', value='0', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-06 13:15:30 -请求地址 : http://localhost:8081/moneyLog/waterLog/update
2019-04-06 13:15:30 -HTTP METHOD : POST
2019-04-06 13:15:30 -CLASS_METHOD : com.bootdo.moneyLog.controller.WaterLogController.update
2019-04-06 13:15:30 -参数 : [com.bootdo.moneyLog.domain.WaterLogDO@174d4934]
2019-04-06 13:15:30 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-06 13:15:30 -==> Parameters: 1(Long), admin(String), error(String), null, http://localhost:8081/moneyLog/waterLog/update(String), org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.exceptions.PersistenceException: 
### Error updating database.  Cause: java.lang.IllegalArgumentException: invalid comparison: java.util.Date and java.lang.String
### Cause: java.lang.IllegalArgumentException: invalid comparison: java.util.Date and java.lang.String(String), null, 2019-04-06 13:15:30.199(Timestamp)
2019-04-06 13:15:30 -nested exception is org.apache.ibatis.exceptions.PersistenceException: 
### Error updating database.  Cause: java.lang.IllegalArgumentException: invalid comparison: java.util.Date and java.lang.String
### Cause: java.lang.IllegalArgumentException: invalid comparison: java.util.Date and java.lang.String
org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.exceptions.PersistenceException: 
### Error updating database.  Cause: java.lang.IllegalArgumentException: invalid comparison: java.util.Date and java.lang.String
### Cause: java.lang.IllegalArgumentException: invalid comparison: java.util.Date and java.lang.String
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:79)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:447)
	at com.sun.proxy.$Proxy101.update(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.update(SqlSessionTemplate.java:295)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:62)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy104.update(Unknown Source)
	at com.bootdo.moneyLog.service.impl.WaterLogServiceImpl.update(WaterLogServiceImpl.java:39)
	at com.bootdo.moneyLog.controller.WaterLogController.update(WaterLogController.java:222)
	at com.bootdo.moneyLog.controller.WaterLogController$$FastClassBySpringCGLIB$$3a5e3635.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:204)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:746)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.bootdo.common.aspect.WebLogAspect.doAround(WebLogAspect.java:57)
	at sun.reflect.GeneratedMethodAccessor128.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.apache.shiro.spring.security.interceptor.AopAllianceAnnotationsAuthorizingMethodInterceptor$1.proceed(AopAllianceAnnotationsAuthorizingMethodInterceptor.java:82)
	at org.apache.shiro.authz.aop.AuthorizingMethodInterceptor.invoke(AuthorizingMethodInterceptor.java:39)
	at org.apache.shiro.spring.security.interceptor.AopAllianceAnnotationsAuthorizingMethodInterceptor.invoke(AopAllianceAnnotationsAuthorizingMethodInterceptor.java:115)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.bootdo.moneyLog.controller.WaterLogController$$EnhancerBySpringCGLIB$$eb5ecfac.update(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:209)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:877)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:783)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:991)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:925)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:974)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:877)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:661)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:851)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:61)
	at org.apache.shiro.web.servlet.AdviceFilter.executeChain(AdviceFilter.java:108)
	at org.apache.shiro.web.servlet.AdviceFilter.doFilterInternal(AdviceFilter.java:137)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:66)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)
	at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)
	at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)
	at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)
	at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:383)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:109)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:496)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:790)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1468)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Unknown Source)
Caused by: org.apache.ibatis.exceptions.PersistenceException: 
### Error updating database.  Cause: java.lang.IllegalArgumentException: invalid comparison: java.util.Date and java.lang.String
### Cause: java.lang.IllegalArgumentException: invalid comparison: java.util.Date and java.lang.String
	at org.apache.ibatis.exceptions.ExceptionFactory.wrapException(ExceptionFactory.java:30)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:200)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:434)
	... 103 common frames omitted
Caused by: java.lang.IllegalArgumentException: invalid comparison: java.util.Date and java.lang.String
	at org.apache.ibatis.ognl.OgnlOps.compareWithConversion(OgnlOps.java:93)
	at org.apache.ibatis.ognl.OgnlOps.isEqual(OgnlOps.java:143)
	at org.apache.ibatis.ognl.OgnlOps.equal(OgnlOps.java:802)
	at org.apache.ibatis.ognl.ASTNotEq.getValueBody(ASTNotEq.java:53)
	at org.apache.ibatis.ognl.SimpleNode.evaluateGetValueBody(SimpleNode.java:212)
	at org.apache.ibatis.ognl.SimpleNode.getValue(SimpleNode.java:258)
	at org.apache.ibatis.ognl.ASTAnd.getValueBody(ASTAnd.java:61)
	at org.apache.ibatis.ognl.SimpleNode.evaluateGetValueBody(SimpleNode.java:212)
	at org.apache.ibatis.ognl.SimpleNode.getValue(SimpleNode.java:258)
	at org.apache.ibatis.ognl.Ognl.getValue(Ognl.java:470)
	at org.apache.ibatis.ognl.Ognl.getValue(Ognl.java:434)
	at org.apache.ibatis.scripting.xmltags.OgnlCache.getValue(OgnlCache.java:44)
	at org.apache.ibatis.scripting.xmltags.ExpressionEvaluator.evaluateBoolean(ExpressionEvaluator.java:32)
	at org.apache.ibatis.scripting.xmltags.IfSqlNode.apply(IfSqlNode.java:34)
	at org.apache.ibatis.scripting.xmltags.MixedSqlNode.apply(MixedSqlNode.java:33)
	at org.apache.ibatis.scripting.xmltags.TrimSqlNode.apply(TrimSqlNode.java:55)
	at org.apache.ibatis.scripting.xmltags.MixedSqlNode.apply(MixedSqlNode.java:33)
	at org.apache.ibatis.scripting.xmltags.DynamicSqlSource.getBoundSql(DynamicSqlSource.java:41)
	at org.apache.ibatis.mapping.MappedStatement.getBoundSql(MappedStatement.java:292)
	at org.apache.ibatis.executor.statement.BaseStatementHandler.<init>(BaseStatementHandler.java:64)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.<init>(PreparedStatementHandler.java:40)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.<init>(RoutingStatementHandler.java:46)
	at org.apache.ibatis.session.Configuration.newStatementHandler(Configuration.java:545)
	at org.apache.ibatis.executor.SimpleExecutor.doUpdate(SimpleExecutor.java:48)
	at org.apache.ibatis.executor.BaseExecutor.update(BaseExecutor.java:117)
	at org.apache.ibatis.executor.CachingExecutor.update(CachingExecutor.java:76)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:198)
	... 108 common frames omitted
2019-04-06 13:15:30 -<==    Updates: 1
2019-04-06 13:25:34 -请求地址 : http://localhost:8081/index
2019-04-06 13:25:34 -HTTP METHOD : GET
2019-04-06 13:25:34 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2019-04-06 13:25:34 -参数 : [{}]
2019-04-06 13:25:34 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2019-04-06 13:25:34 -==> Parameters: 1(Long)
2019-04-06 13:25:34 -<==      Total: 46
2019-04-06 13:25:34 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2019-04-06 13:25:34 -==> Parameters: 138(Long)
2019-04-06 13:25:34 -<==      Total: 1
2019-04-06 13:25:34 -耗时 : 116
2019-04-06 13:25:34 -返回值 : index_v1
2019-04-06 13:25:34 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-06 13:25:34 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 116(Integer), com.bootdo.system.controller.LoginController.index()(String), {"menus":[{"attributes":{"icon":"fa fa-money","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-money","url":"/moneyList/moneyList"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"102","parentId":"106","text":"现金缴费"},{"attributes":{"icon":"fa fa-book","url":"/moneyLog/elecLog"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"107","parentId":"106","text":"缴费记录"}],"hasChildren":true,"hasParent":false,"id":"106","parentId":"0","text":"收费管理"},{"attributes":{"icon":"fa fa-lightbulb-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/elec/elec"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"121","parentId":"103","text":"电费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"elec/elecInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"122","parentId":"103","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"elec/elecUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"123","parentId":"103","text":"电表上传"},{"attributes":{"icon":"fa fa-cc","url":"/elec/elecPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"124","parentId":"103","text":"电价管理"}],"hasChildren":true,"hasParent":false,"id":"103","parentId":"0","text":"电费管理"},{"attributes":{"icon":"fa fa-tint","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/water/water"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"117","parentId":"105","text":"水费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"water/waterInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"118","parentId":"105","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"water/waterUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"119","parentId":"105","text":"水费生成"},{"attributes":{"icon":"fa fa-cc","url":"/water/waterPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"120","parentId":"105","text":"水价管理"}],"hasChildren":true,"hasParent":false,"id":"105","parentId":"0","text":"水费管理"},{"attributes":{"icon":"fa fa-fire","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/heat/heat"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"113","parentId":"104","text":"暖费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"heat/heatInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"114","parentId":"104","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"heat/heatUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"115","parentId":"104","text":"暖费生成"},{"attributes":{"icon":"","url":"/heat/heatPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"116","parentId":"104","text":"暖价管理"}],"hasChildren":true,"hasParent":false,"id":"104","parentId":"0","text":"暖费管理"},{"attributes":{"icon":"fa fa-vcard-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-bomb","url":"/print/print"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"149","parentId":"108","text":"票据记录"}],"hasChildren":true,"hasParent":false,"id":"108","parentId":"0","text":"票据管理"},{"attributes":{"icon":"fa fa-bar-chart","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-area-chart","url":"/chart/graph_echarts.html"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","text":"百度chart"},{"attributes":{"icon":"fa fa-sun-o","url":"charts/countDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"109","parentId":"97","text":"日统计报表"},{"attributes":{"icon":"fa fa-registered","url":"charts/countMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"110","parentId":"97","text":"月统计报表"},{"attributes":{"icon":"fa fa-money","url":"charts/countOwe"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"155","parentId":"97","text":"欠费报表图"},{"attributes":{"icon":"fa fa-support","url":"charts/countYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"111","parentId":"97","text":"年统计报表"},{"attributes":{"icon":"fa fa-tachometer","url":"charts/countRun"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"112","parentId":"97","text":"走势图报表"}],"hasChildren":true,"hasParent":false,"id":"97","parentId":"0","text":"统计管理"},{"attributes":{"icon":"fa fa-bars","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-book","url":"/common/dict"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"78","parentId":"1","text":"数据字典"},{"attributes":{"icon":"fa fa-folder-open","url":"/common/sysFile"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"71","parentId":"1","text":"文件管理"}],"h(String), 127.0.0.1(String), 2019-04-06 13:25:34.533(Timestamp)
2019-04-06 13:25:34 -<==    Updates: 1
2019-04-06 13:25:34 -请求地址 : http://localhost:8081/main
2019-04-06 13:25:34 -HTTP METHOD : GET
2019-04-06 13:25:34 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-06 13:25:34 -参数 : []
2019-04-06 13:25:34 -耗时 : 1
2019-04-06 13:25:34 -返回值 : main
2019-04-06 13:25:35 -请求地址 : http://localhost:8081/oa/notify/message
2019-04-06 13:25:35 -HTTP METHOD : GET
2019-04-06 13:25:35 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2019-04-06 13:25:35 -参数 : []
2019-04-06 13:25:35 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2019-04-06 13:25:35 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2019-04-06 13:25:35 -<==      Total: 0
2019-04-06 13:25:35 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2019-04-06 13:25:35 -==> Parameters: 1(Long), 0(String)
2019-04-06 13:25:35 -<==      Total: 1
2019-04-06 13:25:35 -耗时 : 11
2019-04-06 13:25:35 -返回值 : com.bootdo.common.utils.PageUtils@7930f4f4
2019-04-06 13:25:35 -请求地址 : http://localhost:8081/main
2019-04-06 13:25:35 -HTTP METHOD : GET
2019-04-06 13:25:35 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-06 13:25:35 -参数 : []
2019-04-06 13:25:35 -耗时 : 1
2019-04-06 13:25:35 -返回值 : main
2019-04-06 13:25:38 -==>  Preparing: select distinct m.perms from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id = ur.role_id where ur.user_id = ? 
2019-04-06 13:25:38 -==> Parameters: 1(Long)
2019-04-06 13:25:38 -<==      Total: 90
2019-04-06 13:25:38 -请求地址 : http://localhost:8081/moneyLog/elecLog
2019-04-06 13:25:38 -HTTP METHOD : GET
2019-04-06 13:25:38 -CLASS_METHOD : com.bootdo.moneyLog.controller.ElecLogController.moneyLog
2019-04-06 13:25:38 -参数 : []
2019-04-06 13:25:38 -耗时 : 1
2019-04-06 13:25:38 -返回值 : /moneyLog/elecLog/elecLog
2019-04-06 13:25:39 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-06 13:25:39 -HTTP METHOD : GET
2019-04-06 13:25:39 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-06 13:25:39 -参数 : [userType]
2019-04-06 13:25:39 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-06 13:25:39 -==> Parameters: userType(String)
2019-04-06 13:25:39 -<==      Total: 2
2019-04-06 13:25:39 -耗时 : 5
2019-04-06 13:25:39 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-06 13:25:39 -请求地址 : http://localhost:8081/moneyLog/elecLog/list
2019-04-06 13:25:39 -HTTP METHOD : GET
2019-04-06 13:25:39 -CLASS_METHOD : com.bootdo.moneyLog.controller.ElecLogController.list
2019-04-06 13:25:39 -参数 : [{limit=10, offset=0, userType=, userOrg=, userId=, elecDate=}]
2019-04-06 13:25:39 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`elec_type`,`elec_money`,`elec_date`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec_log order by id asc limit ?, ? 
2019-04-06 13:25:39 -==> Parameters: 0(Integer), 10(Integer)
2019-04-06 13:25:39 -<==      Total: 7
2019-04-06 13:25:39 -==>  Preparing: select count(*) from elec_log 
2019-04-06 13:25:39 -==> Parameters: 
2019-04-06 13:25:39 -<==      Total: 1
2019-04-06 13:25:39 -耗时 : 19
2019-04-06 13:25:39 -返回值 : com.bootdo.common.utils.PageUtils@ee90acb
2019-04-06 13:25:40 -请求地址 : http://localhost:8081/moneyLog/waterLog
2019-04-06 13:25:40 -HTTP METHOD : GET
2019-04-06 13:25:40 -CLASS_METHOD : com.bootdo.moneyLog.controller.WaterLogController.WaterLog
2019-04-06 13:25:40 -参数 : []
2019-04-06 13:25:40 -耗时 : 1
2019-04-06 13:25:40 -返回值 : /moneyLog/waterLog/waterLog
2019-04-06 13:25:41 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-06 13:25:41 -HTTP METHOD : GET
2019-04-06 13:25:41 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-06 13:25:41 -参数 : [userType]
2019-04-06 13:25:41 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-06 13:25:41 -==> Parameters: userType(String)
2019-04-06 13:25:41 -<==      Total: 2
2019-04-06 13:25:41 -耗时 : 9
2019-04-06 13:25:41 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-06 13:25:41 -请求地址 : http://localhost:8081/moneyLog/waterLog/list
2019-04-06 13:25:41 -HTTP METHOD : GET
2019-04-06 13:25:41 -CLASS_METHOD : com.bootdo.moneyLog.controller.WaterLogController.list
2019-04-06 13:25:41 -参数 : [{limit=10, offset=0, userType=, userOrg=, userId=, waterDate=}]
2019-04-06 13:25:41 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,`water_type`,`water_money`,`water_date`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from water_log order by id asc limit ?, ? 
2019-04-06 13:25:41 -==> Parameters: 0(Integer), 10(Integer)
2019-04-06 13:25:41 -<==      Total: 5
2019-04-06 13:25:41 -==>  Preparing: select count(*) from water_log 
2019-04-06 13:25:41 -==> Parameters: 
2019-04-06 13:25:41 -<==      Total: 1
2019-04-06 13:25:41 -耗时 : 14
2019-04-06 13:25:41 -返回值 : com.bootdo.common.utils.PageUtils@35ad95a6
2019-04-06 13:25:41 -请求地址 : http://localhost:8081/moneyLog/waterLog
2019-04-06 13:25:41 -HTTP METHOD : GET
2019-04-06 13:25:41 -CLASS_METHOD : com.bootdo.moneyLog.controller.WaterLogController.WaterLog
2019-04-06 13:25:41 -参数 : []
2019-04-06 13:25:41 -耗时 : 1
2019-04-06 13:25:41 -返回值 : /moneyLog/waterLog/waterLog
2019-04-06 13:25:41 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-06 13:25:41 -HTTP METHOD : GET
2019-04-06 13:25:41 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-06 13:25:41 -参数 : [userType]
2019-04-06 13:25:41 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-06 13:25:41 -==> Parameters: userType(String)
2019-04-06 13:25:41 -<==      Total: 2
2019-04-06 13:25:41 -耗时 : 5
2019-04-06 13:25:41 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-06 13:25:41 -请求地址 : http://localhost:8081/moneyLog/waterLog/list
2019-04-06 13:25:41 -HTTP METHOD : GET
2019-04-06 13:25:41 -CLASS_METHOD : com.bootdo.moneyLog.controller.WaterLogController.list
2019-04-06 13:25:41 -参数 : [{limit=10, offset=0, userType=, userOrg=, userId=, waterDate=}]
2019-04-06 13:25:41 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,`water_type`,`water_money`,`water_date`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from water_log order by id asc limit ?, ? 
2019-04-06 13:25:41 -==> Parameters: 0(Integer), 10(Integer)
2019-04-06 13:25:41 -<==      Total: 5
2019-04-06 13:25:41 -==>  Preparing: select count(*) from water_log 
2019-04-06 13:25:41 -==> Parameters: 
2019-04-06 13:25:41 -<==      Total: 1
2019-04-06 13:25:41 -耗时 : 14
2019-04-06 13:25:41 -返回值 : com.bootdo.common.utils.PageUtils@32c9159f
2019-04-06 13:25:42 -请求地址 : http://localhost:8081/moneyLog/waterLog/edit/5
2019-04-06 13:25:42 -HTTP METHOD : GET
2019-04-06 13:25:42 -CLASS_METHOD : com.bootdo.moneyLog.controller.WaterLogController.edit
2019-04-06 13:25:42 -参数 : [5, {}]
2019-04-06 13:25:42 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,`water_type`,`water_money`,`water_date`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from water_log where id = ? 
2019-04-06 13:25:42 -==> Parameters: 5(Long)
2019-04-06 13:25:42 -<==      Total: 1
2019-04-06 13:25:42 -耗时 : 11
2019-04-06 13:25:42 -返回值 : moneyLog/waterLog/edit
2019-04-06 13:25:43 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-06 13:25:43 -HTTP METHOD : GET
2019-04-06 13:25:43 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-06 13:25:43 -参数 : [userType]
2019-04-06 13:25:43 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-06 13:25:43 -==> Parameters: userType(String)
2019-04-06 13:25:43 -请求地址 : http://localhost:8081/common/dict/list/waterType
2019-04-06 13:25:43 -HTTP METHOD : GET
2019-04-06 13:25:43 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-06 13:25:43 -参数 : [waterType]
2019-04-06 13:25:43 -<==      Total: 2
2019-04-06 13:25:43 -耗时 : 8
2019-04-06 13:25:43 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-06 13:25:43 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-06 13:25:43 -==> Parameters: waterType(String)
2019-04-06 13:25:43 -<==      Total: 6
2019-04-06 13:25:43 -耗时 : 10
2019-04-06 13:25:43 -返回值 : [DictDO{id=132, name='特殊水费4', value='5', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=131, name='特殊水费3', value='4', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=130, name='特殊水费2', value='3', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=129, name='特殊水费1', value='2', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=128, name='民用水', value='1', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=127, name='商业水', value='0', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-06 13:25:48 -请求地址 : http://localhost:8081/moneyLog/waterLog/update
2019-04-06 13:25:48 -HTTP METHOD : POST
2019-04-06 13:25:48 -CLASS_METHOD : com.bootdo.moneyLog.controller.WaterLogController.update
2019-04-06 13:25:48 -参数 : [com.bootdo.moneyLog.domain.WaterLogDO@2d0b5816]
2019-04-06 13:25:48 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-06 13:25:48 -==> Parameters: 1(Long), admin(String), error(String), null, http://localhost:8081/moneyLog/waterLog/update(String), org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.exceptions.PersistenceException: 
### Error updating database.  Cause: java.lang.IllegalArgumentException: invalid comparison: java.util.Date and java.lang.String
### Cause: java.lang.IllegalArgumentException: invalid comparison: java.util.Date and java.lang.String(String), null, 2019-04-06 13:25:48.676(Timestamp)
2019-04-06 13:25:48 -nested exception is org.apache.ibatis.exceptions.PersistenceException: 
### Error updating database.  Cause: java.lang.IllegalArgumentException: invalid comparison: java.util.Date and java.lang.String
### Cause: java.lang.IllegalArgumentException: invalid comparison: java.util.Date and java.lang.String
org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.exceptions.PersistenceException: 
### Error updating database.  Cause: java.lang.IllegalArgumentException: invalid comparison: java.util.Date and java.lang.String
### Cause: java.lang.IllegalArgumentException: invalid comparison: java.util.Date and java.lang.String
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:79)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:447)
	at com.sun.proxy.$Proxy101.update(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.update(SqlSessionTemplate.java:295)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:62)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy104.update(Unknown Source)
	at com.bootdo.moneyLog.service.impl.WaterLogServiceImpl.update(WaterLogServiceImpl.java:39)
	at com.bootdo.moneyLog.controller.WaterLogController.update(WaterLogController.java:222)
	at com.bootdo.moneyLog.controller.WaterLogController$$FastClassBySpringCGLIB$$3a5e3635.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:204)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:746)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.bootdo.common.aspect.WebLogAspect.doAround(WebLogAspect.java:57)
	at sun.reflect.GeneratedMethodAccessor128.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.apache.shiro.spring.security.interceptor.AopAllianceAnnotationsAuthorizingMethodInterceptor$1.proceed(AopAllianceAnnotationsAuthorizingMethodInterceptor.java:82)
	at org.apache.shiro.authz.aop.AuthorizingMethodInterceptor.invoke(AuthorizingMethodInterceptor.java:39)
	at org.apache.shiro.spring.security.interceptor.AopAllianceAnnotationsAuthorizingMethodInterceptor.invoke(AopAllianceAnnotationsAuthorizingMethodInterceptor.java:115)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.bootdo.moneyLog.controller.WaterLogController$$EnhancerBySpringCGLIB$$eb5ecfac.update(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:209)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:877)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:783)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:991)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:925)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:974)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:877)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:661)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:851)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:61)
	at org.apache.shiro.web.servlet.AdviceFilter.executeChain(AdviceFilter.java:108)
	at org.apache.shiro.web.servlet.AdviceFilter.doFilterInternal(AdviceFilter.java:137)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:66)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)
	at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)
	at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)
	at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)
	at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:383)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:109)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:496)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:790)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1468)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Unknown Source)
Caused by: org.apache.ibatis.exceptions.PersistenceException: 
### Error updating database.  Cause: java.lang.IllegalArgumentException: invalid comparison: java.util.Date and java.lang.String
### Cause: java.lang.IllegalArgumentException: invalid comparison: java.util.Date and java.lang.String
	at org.apache.ibatis.exceptions.ExceptionFactory.wrapException(ExceptionFactory.java:30)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:200)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:434)
	... 103 common frames omitted
Caused by: java.lang.IllegalArgumentException: invalid comparison: java.util.Date and java.lang.String
	at org.apache.ibatis.ognl.OgnlOps.compareWithConversion(OgnlOps.java:93)
	at org.apache.ibatis.ognl.OgnlOps.isEqual(OgnlOps.java:143)
	at org.apache.ibatis.ognl.OgnlOps.equal(OgnlOps.java:802)
	at org.apache.ibatis.ognl.ASTNotEq.getValueBody(ASTNotEq.java:53)
	at org.apache.ibatis.ognl.SimpleNode.evaluateGetValueBody(SimpleNode.java:212)
	at org.apache.ibatis.ognl.SimpleNode.getValue(SimpleNode.java:258)
	at org.apache.ibatis.ognl.ASTAnd.getValueBody(ASTAnd.java:61)
	at org.apache.ibatis.ognl.SimpleNode.evaluateGetValueBody(SimpleNode.java:212)
	at org.apache.ibatis.ognl.SimpleNode.getValue(SimpleNode.java:258)
	at org.apache.ibatis.ognl.Ognl.getValue(Ognl.java:470)
	at org.apache.ibatis.ognl.Ognl.getValue(Ognl.java:434)
	at org.apache.ibatis.scripting.xmltags.OgnlCache.getValue(OgnlCache.java:44)
	at org.apache.ibatis.scripting.xmltags.ExpressionEvaluator.evaluateBoolean(ExpressionEvaluator.java:32)
	at org.apache.ibatis.scripting.xmltags.IfSqlNode.apply(IfSqlNode.java:34)
	at org.apache.ibatis.scripting.xmltags.MixedSqlNode.apply(MixedSqlNode.java:33)
	at org.apache.ibatis.scripting.xmltags.TrimSqlNode.apply(TrimSqlNode.java:55)
	at org.apache.ibatis.scripting.xmltags.MixedSqlNode.apply(MixedSqlNode.java:33)
	at org.apache.ibatis.scripting.xmltags.DynamicSqlSource.getBoundSql(DynamicSqlSource.java:41)
	at org.apache.ibatis.mapping.MappedStatement.getBoundSql(MappedStatement.java:292)
	at org.apache.ibatis.executor.statement.BaseStatementHandler.<init>(BaseStatementHandler.java:64)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.<init>(PreparedStatementHandler.java:40)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.<init>(RoutingStatementHandler.java:46)
	at org.apache.ibatis.session.Configuration.newStatementHandler(Configuration.java:545)
	at org.apache.ibatis.executor.SimpleExecutor.doUpdate(SimpleExecutor.java:48)
	at org.apache.ibatis.executor.BaseExecutor.update(BaseExecutor.java:117)
	at org.apache.ibatis.executor.CachingExecutor.update(CachingExecutor.java:76)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:198)
	... 108 common frames omitted
2019-04-06 13:25:48 -<==    Updates: 1
2019-04-06 13:26:20 -Failed to invoke @ExceptionHandler method: public java.lang.Object com.bootdo.common.exception.BDExceptionHandler.handleException(java.lang.Exception,javax.servlet.http.HttpServletRequest)
org.apache.shiro.UnavailableSecurityManagerException: No SecurityManager accessible to the calling code, either bound to the org.apache.shiro.util.ThreadContext or as a vm static singleton.  This is an invalid application configuration.
	at org.apache.shiro.SecurityUtils.getSecurityManager(SecurityUtils.java:123)
	at org.apache.shiro.subject.Subject$Builder.<init>(Subject.java:627)
	at org.apache.shiro.SecurityUtils.getSubject(SecurityUtils.java:56)
	at com.bootdo.common.utils.ShiroUtils.getSubjct(ShiroUtils.java:23)
	at com.bootdo.common.utils.ShiroUtils.getUser(ShiroUtils.java:26)
	at com.bootdo.common.exception.BDExceptionHandler.handleException(BDExceptionHandler.java:75)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:209)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver.doResolveHandlerMethodException(ExceptionHandlerExceptionResolver.java:404)
	at org.springframework.web.servlet.handler.AbstractHandlerMethodExceptionResolver.doResolveException(AbstractHandlerMethodExceptionResolver.java:61)
	at org.springframework.web.servlet.handler.AbstractHandlerExceptionResolver.resolveException(AbstractHandlerExceptionResolver.java:139)
	at org.springframework.web.servlet.handler.HandlerExceptionResolverComposite.resolveException(HandlerExceptionResolverComposite.java:78)
	at org.springframework.web.servlet.DispatcherServlet.processHandlerException(DispatcherServlet.java:1255)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1062)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1008)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:925)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:974)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:877)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:661)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:851)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:728)
	at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:591)
	at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:527)
	at org.apache.catalina.core.StandardHostValve.custom(StandardHostValve.java:389)
	at org.apache.catalina.core.StandardHostValve.status(StandardHostValve.java:254)
	at org.apache.catalina.core.StandardHostValve.throwable(StandardHostValve.java:349)
	at org.apache.catalina.core.AsyncContextImpl.setErrorState(AsyncContextImpl.java:424)
	at org.apache.catalina.connector.CoyoteAdapter.asyncDispatch(CoyoteAdapter.java:176)
	at org.apache.coyote.AbstractProcessor.dispatch(AbstractProcessor.java:232)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:53)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:790)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1468)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Unknown Source)
2019-04-06 13:26:56 -请求地址 : http://localhost:8081/login;JSESSIONID=8713a086-9b7b-4100-acf8-2bbf73cd43d9
2019-04-06 13:26:56 -HTTP METHOD : GET
2019-04-06 13:26:56 -CLASS_METHOD : com.bootdo.system.controller.LoginController.login
2019-04-06 13:26:56 -参数 : [{}]
2019-04-06 13:26:56 -耗时 : 1
2019-04-06 13:26:56 -返回值 : login
2019-04-06 13:26:56 -请求地址 : http://localhost:8081/getVerify
2019-04-06 13:26:56 -HTTP METHOD : GET
2019-04-06 13:26:56 -CLASS_METHOD : com.bootdo.system.controller.LoginController.getVerify
2019-04-06 13:26:56 -参数 : [org.apache.shiro.web.servlet.ShiroHttpServletRequest@426f396, org.apache.shiro.web.servlet.ShiroHttpServletResponse@7b991aab]
2019-04-06 13:26:56 -8509
2019-04-06 13:26:56 -耗时 : 19
2019-04-06 13:26:56 -返回值 : null
2019-04-06 13:26:56 -请求地址 : http://localhost:8081/login
2019-04-06 13:26:56 -HTTP METHOD : GET
2019-04-06 13:26:56 -CLASS_METHOD : com.bootdo.system.controller.LoginController.login
2019-04-06 13:26:56 -参数 : [{}]
2019-04-06 13:26:56 -耗时 : 1
2019-04-06 13:26:56 -返回值 : login
2019-04-06 13:27:02 -请求地址 : http://localhost:8081/login
2019-04-06 13:27:02 -HTTP METHOD : POST
2019-04-06 13:27:02 -CLASS_METHOD : com.bootdo.system.controller.LoginController.ajaxLogin
2019-04-06 13:27:02 -参数 : [admin, 111111, 8509, org.apache.shiro.web.servlet.ShiroHttpServletRequest@3a1a87f6]
2019-04-06 13:27:02 -==>  Preparing: select `user_id`,`username`,`name`,`password`,`dept_id`,`email`,`mobile`,`status`,`user_id_create`,`gmt_create`,`gmt_modified`,`sex`,`birth`,`pic_id`,`live_address`,`hobby`,`province`,`city`,`district` from sys_user WHERE username = ? order by user_id desc 
2019-04-06 13:27:02 -==> Parameters: admin(String)
2019-04-06 13:27:02 -<==      Total: 1
2019-04-06 13:27:02 -耗时 : 11
2019-04-06 13:27:02 -返回值 : {msg=操作成功, code=0}
2019-04-06 13:27:02 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-06 13:27:02 -==> Parameters: 1(Long), admin(String), 登录(String), 11(Integer), com.bootdo.system.controller.LoginController.ajaxLogin()(String), null, 127.0.0.1(String), 2019-04-06 13:27:02.487(Timestamp)
2019-04-06 13:27:02 -请求地址 : http://localhost:8081/index
2019-04-06 13:27:02 -HTTP METHOD : GET
2019-04-06 13:27:02 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2019-04-06 13:27:02 -参数 : [{}]
2019-04-06 13:27:02 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2019-04-06 13:27:02 -==> Parameters: 1(Long)
2019-04-06 13:27:02 -<==      Total: 46
2019-04-06 13:27:02 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2019-04-06 13:27:02 -==> Parameters: 138(Long)
2019-04-06 13:27:02 -<==      Total: 1
2019-04-06 13:27:02 -耗时 : 144
2019-04-06 13:27:02 -返回值 : index_v1
2019-04-06 13:27:02 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-06 13:27:02 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 145(Integer), com.bootdo.system.controller.LoginController.index()(String), {"menus":[{"attributes":{"icon":"fa fa-money","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-money","url":"/moneyList/moneyList"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"102","parentId":"106","text":"现金缴费"},{"attributes":{"icon":"fa fa-book","url":"/moneyLog/elecLog"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"107","parentId":"106","text":"缴费记录"}],"hasChildren":true,"hasParent":false,"id":"106","parentId":"0","text":"收费管理"},{"attributes":{"icon":"fa fa-lightbulb-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/elec/elec"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"121","parentId":"103","text":"电费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"elec/elecInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"122","parentId":"103","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"elec/elecUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"123","parentId":"103","text":"电表上传"},{"attributes":{"icon":"fa fa-cc","url":"/elec/elecPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"124","parentId":"103","text":"电价管理"}],"hasChildren":true,"hasParent":false,"id":"103","parentId":"0","text":"电费管理"},{"attributes":{"icon":"fa fa-tint","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/water/water"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"117","parentId":"105","text":"水费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"water/waterInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"118","parentId":"105","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"water/waterUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"119","parentId":"105","text":"水费生成"},{"attributes":{"icon":"fa fa-cc","url":"/water/waterPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"120","parentId":"105","text":"水价管理"}],"hasChildren":true,"hasParent":false,"id":"105","parentId":"0","text":"水费管理"},{"attributes":{"icon":"fa fa-fire","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/heat/heat"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"113","parentId":"104","text":"暖费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"heat/heatInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"114","parentId":"104","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"heat/heatUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"115","parentId":"104","text":"暖费生成"},{"attributes":{"icon":"","url":"/heat/heatPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"116","parentId":"104","text":"暖价管理"}],"hasChildren":true,"hasParent":false,"id":"104","parentId":"0","text":"暖费管理"},{"attributes":{"icon":"fa fa-vcard-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-bomb","url":"/print/print"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"149","parentId":"108","text":"票据记录"}],"hasChildren":true,"hasParent":false,"id":"108","parentId":"0","text":"票据管理"},{"attributes":{"icon":"fa fa-bar-chart","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-area-chart","url":"/chart/graph_echarts.html"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","text":"百度chart"},{"attributes":{"icon":"fa fa-sun-o","url":"charts/countDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"109","parentId":"97","text":"日统计报表"},{"attributes":{"icon":"fa fa-registered","url":"charts/countMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"110","parentId":"97","text":"月统计报表"},{"attributes":{"icon":"fa fa-money","url":"charts/countOwe"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"155","parentId":"97","text":"欠费报表图"},{"attributes":{"icon":"fa fa-support","url":"charts/countYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"111","parentId":"97","text":"年统计报表"},{"attributes":{"icon":"fa fa-tachometer","url":"charts/countRun"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"112","parentId":"97","text":"走势图报表"}],"hasChildren":true,"hasParent":false,"id":"97","parentId":"0","text":"统计管理"},{"attributes":{"icon":"fa fa-bars","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-book","url":"/common/dict"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"78","parentId":"1","text":"数据字典"},{"attributes":{"icon":"fa fa-folder-open","url":"/common/sysFile"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"71","parentId":"1","text":"文件管理"}],"h(String), 127.0.0.1(String), 2019-04-06 13:27:02.667(Timestamp)
2019-04-06 13:27:02 -请求地址 : http://localhost:8081/main
2019-04-06 13:27:02 -HTTP METHOD : GET
2019-04-06 13:27:02 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-06 13:27:02 -参数 : []
2019-04-06 13:27:02 -耗时 : 0
2019-04-06 13:27:02 -返回值 : main
2019-04-06 13:27:02 -<==    Updates: 1
2019-04-06 13:27:02 -<==    Updates: 1
2019-04-06 13:27:03 -请求地址 : http://localhost:8081/oa/notify/message
2019-04-06 13:27:03 -HTTP METHOD : GET
2019-04-06 13:27:03 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2019-04-06 13:27:03 -参数 : []
2019-04-06 13:27:03 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2019-04-06 13:27:03 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2019-04-06 13:27:03 -<==      Total: 0
2019-04-06 13:27:03 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2019-04-06 13:27:03 -==> Parameters: 1(Long), 0(String)
2019-04-06 13:27:03 -<==      Total: 1
2019-04-06 13:27:03 -耗时 : 9
2019-04-06 13:27:03 -返回值 : com.bootdo.common.utils.PageUtils@4ab43a17
2019-04-06 13:27:03 -请求地址 : http://localhost:8081/main
2019-04-06 13:27:03 -HTTP METHOD : GET
2019-04-06 13:27:03 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-06 13:27:03 -参数 : []
2019-04-06 13:27:03 -耗时 : 1
2019-04-06 13:27:03 -返回值 : main
2019-04-06 13:27:11 -==>  Preparing: select distinct m.perms from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id = ur.role_id where ur.user_id = ? 
2019-04-06 13:27:11 -==> Parameters: 1(Long)
2019-04-06 13:27:11 -<==      Total: 90
2019-04-06 13:27:11 -请求地址 : http://localhost:8081/moneyLog/elecLog
2019-04-06 13:27:11 -HTTP METHOD : GET
2019-04-06 13:27:11 -CLASS_METHOD : com.bootdo.moneyLog.controller.ElecLogController.moneyLog
2019-04-06 13:27:11 -参数 : []
2019-04-06 13:27:11 -耗时 : 0
2019-04-06 13:27:11 -返回值 : /moneyLog/elecLog/elecLog
2019-04-06 13:27:11 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-06 13:27:11 -HTTP METHOD : GET
2019-04-06 13:27:11 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-06 13:27:11 -参数 : [userType]
2019-04-06 13:27:11 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-06 13:27:11 -==> Parameters: userType(String)
2019-04-06 13:27:11 -<==      Total: 2
2019-04-06 13:27:11 -耗时 : 4
2019-04-06 13:27:11 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-06 13:27:11 -请求地址 : http://localhost:8081/moneyLog/elecLog/list
2019-04-06 13:27:11 -HTTP METHOD : GET
2019-04-06 13:27:11 -CLASS_METHOD : com.bootdo.moneyLog.controller.ElecLogController.list
2019-04-06 13:27:11 -参数 : [{limit=10, offset=0, userType=, userOrg=, userId=, elecDate=}]
2019-04-06 13:27:11 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`elec_type`,`elec_money`,`elec_date`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec_log order by id asc limit ?, ? 
2019-04-06 13:27:11 -==> Parameters: 0(Integer), 10(Integer)
2019-04-06 13:27:11 -<==      Total: 7
2019-04-06 13:27:11 -==>  Preparing: select count(*) from elec_log 
2019-04-06 13:27:11 -==> Parameters: 
2019-04-06 13:27:11 -<==      Total: 1
2019-04-06 13:27:11 -耗时 : 13
2019-04-06 13:27:11 -返回值 : com.bootdo.common.utils.PageUtils@298c89b1
2019-04-06 13:27:12 -请求地址 : http://localhost:8081/moneyLog/waterLog
2019-04-06 13:27:12 -HTTP METHOD : GET
2019-04-06 13:27:12 -CLASS_METHOD : com.bootdo.moneyLog.controller.WaterLogController.WaterLog
2019-04-06 13:27:12 -参数 : []
2019-04-06 13:27:12 -耗时 : 1
2019-04-06 13:27:12 -返回值 : /moneyLog/waterLog/waterLog
2019-04-06 13:27:12 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-06 13:27:12 -HTTP METHOD : GET
2019-04-06 13:27:12 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-06 13:27:12 -参数 : [userType]
2019-04-06 13:27:12 -请求地址 : http://localhost:8081/moneyLog/waterLog/list
2019-04-06 13:27:12 -HTTP METHOD : GET
2019-04-06 13:27:12 -CLASS_METHOD : com.bootdo.moneyLog.controller.WaterLogController.list
2019-04-06 13:27:12 -参数 : [{limit=10, offset=0, userType=, userOrg=, userId=, waterDate=}]
2019-04-06 13:27:12 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-06 13:27:12 -==> Parameters: userType(String)
2019-04-06 13:27:12 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,`water_type`,`water_money`,`water_date`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from water_log order by id asc limit ?, ? 
2019-04-06 13:27:12 -==> Parameters: 0(Integer), 10(Integer)
2019-04-06 13:27:12 -<==      Total: 2
2019-04-06 13:27:12 -耗时 : 4
2019-04-06 13:27:12 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-06 13:27:13 -<==      Total: 5
2019-04-06 13:27:13 -==>  Preparing: select count(*) from water_log 
2019-04-06 13:27:13 -==> Parameters: 
2019-04-06 13:27:13 -<==      Total: 1
2019-04-06 13:27:13 -耗时 : 84
2019-04-06 13:27:13 -返回值 : com.bootdo.common.utils.PageUtils@34051b30
2019-04-06 13:27:14 -请求地址 : http://localhost:8081/moneyLog/waterLog/edit/5
2019-04-06 13:27:14 -HTTP METHOD : GET
2019-04-06 13:27:14 -CLASS_METHOD : com.bootdo.moneyLog.controller.WaterLogController.edit
2019-04-06 13:27:14 -参数 : [5, {}]
2019-04-06 13:27:14 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,`water_type`,`water_money`,`water_date`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from water_log where id = ? 
2019-04-06 13:27:14 -==> Parameters: 5(Long)
2019-04-06 13:27:14 -<==      Total: 1
2019-04-06 13:27:14 -耗时 : 11
2019-04-06 13:27:14 -返回值 : moneyLog/waterLog/edit
2019-04-06 13:27:14 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-06 13:27:14 -HTTP METHOD : GET
2019-04-06 13:27:14 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-06 13:27:14 -参数 : [userType]
2019-04-06 13:27:14 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-06 13:27:14 -==> Parameters: userType(String)
2019-04-06 13:27:14 -请求地址 : http://localhost:8081/common/dict/list/waterType
2019-04-06 13:27:14 -HTTP METHOD : GET
2019-04-06 13:27:14 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-06 13:27:14 -参数 : [waterType]
2019-04-06 13:27:14 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-06 13:27:14 -<==      Total: 2
2019-04-06 13:27:14 -==> Parameters: waterType(String)
2019-04-06 13:27:14 -耗时 : 5
2019-04-06 13:27:14 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-06 13:27:14 -<==      Total: 6
2019-04-06 13:27:14 -耗时 : 17
2019-04-06 13:27:14 -返回值 : [DictDO{id=132, name='特殊水费4', value='5', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=131, name='特殊水费3', value='4', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=130, name='特殊水费2', value='3', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=129, name='特殊水费1', value='2', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=128, name='民用水', value='1', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=127, name='商业水', value='0', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-06 13:27:18 -请求地址 : http://localhost:8081/moneyLog/waterLog/update
2019-04-06 13:27:18 -HTTP METHOD : POST
2019-04-06 13:27:18 -CLASS_METHOD : com.bootdo.moneyLog.controller.WaterLogController.update
2019-04-06 13:27:18 -参数 : [com.bootdo.moneyLog.domain.WaterLogDO@4c300ff2]
2019-04-06 13:27:18 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-06 13:27:18 -==> Parameters: 1(Long), admin(String), error(String), null, http://localhost:8081/moneyLog/waterLog/update(String), org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.exceptions.PersistenceException: 
### Error updating database.  Cause: java.lang.IllegalArgumentException: invalid comparison: java.util.Date and java.lang.String
### Cause: java.lang.IllegalArgumentException: invalid comparison: java.util.Date and java.lang.String(String), null, 2019-04-06 13:27:18.102(Timestamp)
2019-04-06 13:27:18 -nested exception is org.apache.ibatis.exceptions.PersistenceException: 
### Error updating database.  Cause: java.lang.IllegalArgumentException: invalid comparison: java.util.Date and java.lang.String
### Cause: java.lang.IllegalArgumentException: invalid comparison: java.util.Date and java.lang.String
org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.exceptions.PersistenceException: 
### Error updating database.  Cause: java.lang.IllegalArgumentException: invalid comparison: java.util.Date and java.lang.String
### Cause: java.lang.IllegalArgumentException: invalid comparison: java.util.Date and java.lang.String
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:79)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:447)
	at com.sun.proxy.$Proxy101.update(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.update(SqlSessionTemplate.java:295)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:62)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy104.update(Unknown Source)
	at com.bootdo.moneyLog.service.impl.WaterLogServiceImpl.update(WaterLogServiceImpl.java:39)
	at com.bootdo.moneyLog.controller.WaterLogController.update(WaterLogController.java:222)
	at com.bootdo.moneyLog.controller.WaterLogController$$FastClassBySpringCGLIB$$3a5e3635.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:204)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:746)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.bootdo.common.aspect.WebLogAspect.doAround(WebLogAspect.java:57)
	at sun.reflect.GeneratedMethodAccessor128.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.apache.shiro.spring.security.interceptor.AopAllianceAnnotationsAuthorizingMethodInterceptor$1.proceed(AopAllianceAnnotationsAuthorizingMethodInterceptor.java:82)
	at org.apache.shiro.authz.aop.AuthorizingMethodInterceptor.invoke(AuthorizingMethodInterceptor.java:39)
	at org.apache.shiro.spring.security.interceptor.AopAllianceAnnotationsAuthorizingMethodInterceptor.invoke(AopAllianceAnnotationsAuthorizingMethodInterceptor.java:115)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.bootdo.moneyLog.controller.WaterLogController$$EnhancerBySpringCGLIB$$eb5ecfac.update(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:209)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:877)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:783)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:991)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:925)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:974)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:877)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:661)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:851)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:61)
	at org.apache.shiro.web.servlet.AdviceFilter.executeChain(AdviceFilter.java:108)
	at org.apache.shiro.web.servlet.AdviceFilter.doFilterInternal(AdviceFilter.java:137)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:66)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)
	at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)
	at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)
	at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)
	at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:383)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:109)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:496)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:790)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1468)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Unknown Source)
Caused by: org.apache.ibatis.exceptions.PersistenceException: 
### Error updating database.  Cause: java.lang.IllegalArgumentException: invalid comparison: java.util.Date and java.lang.String
### Cause: java.lang.IllegalArgumentException: invalid comparison: java.util.Date and java.lang.String
	at org.apache.ibatis.exceptions.ExceptionFactory.wrapException(ExceptionFactory.java:30)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:200)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:434)
	... 103 common frames omitted
Caused by: java.lang.IllegalArgumentException: invalid comparison: java.util.Date and java.lang.String
	at org.apache.ibatis.ognl.OgnlOps.compareWithConversion(OgnlOps.java:93)
	at org.apache.ibatis.ognl.OgnlOps.isEqual(OgnlOps.java:143)
	at org.apache.ibatis.ognl.OgnlOps.equal(OgnlOps.java:802)
	at org.apache.ibatis.ognl.ASTNotEq.getValueBody(ASTNotEq.java:53)
	at org.apache.ibatis.ognl.SimpleNode.evaluateGetValueBody(SimpleNode.java:212)
	at org.apache.ibatis.ognl.SimpleNode.getValue(SimpleNode.java:258)
	at org.apache.ibatis.ognl.ASTAnd.getValueBody(ASTAnd.java:61)
	at org.apache.ibatis.ognl.SimpleNode.evaluateGetValueBody(SimpleNode.java:212)
	at org.apache.ibatis.ognl.SimpleNode.getValue(SimpleNode.java:258)
	at org.apache.ibatis.ognl.Ognl.getValue(Ognl.java:470)
	at org.apache.ibatis.ognl.Ognl.getValue(Ognl.java:434)
	at org.apache.ibatis.scripting.xmltags.OgnlCache.getValue(OgnlCache.java:44)
	at org.apache.ibatis.scripting.xmltags.ExpressionEvaluator.evaluateBoolean(ExpressionEvaluator.java:32)
	at org.apache.ibatis.scripting.xmltags.IfSqlNode.apply(IfSqlNode.java:34)
	at org.apache.ibatis.scripting.xmltags.MixedSqlNode.apply(MixedSqlNode.java:33)
	at org.apache.ibatis.scripting.xmltags.TrimSqlNode.apply(TrimSqlNode.java:55)
	at org.apache.ibatis.scripting.xmltags.MixedSqlNode.apply(MixedSqlNode.java:33)
	at org.apache.ibatis.scripting.xmltags.DynamicSqlSource.getBoundSql(DynamicSqlSource.java:41)
	at org.apache.ibatis.mapping.MappedStatement.getBoundSql(MappedStatement.java:292)
	at org.apache.ibatis.executor.statement.BaseStatementHandler.<init>(BaseStatementHandler.java:64)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.<init>(PreparedStatementHandler.java:40)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.<init>(RoutingStatementHandler.java:46)
	at org.apache.ibatis.session.Configuration.newStatementHandler(Configuration.java:545)
	at org.apache.ibatis.executor.SimpleExecutor.doUpdate(SimpleExecutor.java:48)
	at org.apache.ibatis.executor.BaseExecutor.update(BaseExecutor.java:117)
	at org.apache.ibatis.executor.CachingExecutor.update(CachingExecutor.java:76)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:198)
	... 108 common frames omitted
2019-04-06 13:27:18 -<==    Updates: 1
2019-04-06 13:28:15 -请求地址 : http://localhost:8081/index
2019-04-06 13:28:15 -HTTP METHOD : GET
2019-04-06 13:28:15 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2019-04-06 13:28:15 -参数 : [{}]
2019-04-06 13:28:15 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2019-04-06 13:28:15 -==> Parameters: 1(Long)
2019-04-06 13:28:15 -<==      Total: 46
2019-04-06 13:28:15 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2019-04-06 13:28:15 -==> Parameters: 138(Long)
2019-04-06 13:28:15 -<==      Total: 1
2019-04-06 13:28:15 -耗时 : 34
2019-04-06 13:28:15 -返回值 : index_v1
2019-04-06 13:28:15 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-06 13:28:15 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 34(Integer), com.bootdo.system.controller.LoginController.index()(String), {"menus":[{"attributes":{"icon":"fa fa-money","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-money","url":"/moneyList/moneyList"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"102","parentId":"106","text":"现金缴费"},{"attributes":{"icon":"fa fa-book","url":"/moneyLog/elecLog"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"107","parentId":"106","text":"缴费记录"}],"hasChildren":true,"hasParent":false,"id":"106","parentId":"0","text":"收费管理"},{"attributes":{"icon":"fa fa-lightbulb-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/elec/elec"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"121","parentId":"103","text":"电费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"elec/elecInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"122","parentId":"103","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"elec/elecUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"123","parentId":"103","text":"电表上传"},{"attributes":{"icon":"fa fa-cc","url":"/elec/elecPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"124","parentId":"103","text":"电价管理"}],"hasChildren":true,"hasParent":false,"id":"103","parentId":"0","text":"电费管理"},{"attributes":{"icon":"fa fa-tint","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/water/water"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"117","parentId":"105","text":"水费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"water/waterInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"118","parentId":"105","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"water/waterUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"119","parentId":"105","text":"水费生成"},{"attributes":{"icon":"fa fa-cc","url":"/water/waterPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"120","parentId":"105","text":"水价管理"}],"hasChildren":true,"hasParent":false,"id":"105","parentId":"0","text":"水费管理"},{"attributes":{"icon":"fa fa-fire","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/heat/heat"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"113","parentId":"104","text":"暖费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"heat/heatInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"114","parentId":"104","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"heat/heatUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"115","parentId":"104","text":"暖费生成"},{"attributes":{"icon":"","url":"/heat/heatPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"116","parentId":"104","text":"暖价管理"}],"hasChildren":true,"hasParent":false,"id":"104","parentId":"0","text":"暖费管理"},{"attributes":{"icon":"fa fa-vcard-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-bomb","url":"/print/print"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"149","parentId":"108","text":"票据记录"}],"hasChildren":true,"hasParent":false,"id":"108","parentId":"0","text":"票据管理"},{"attributes":{"icon":"fa fa-bar-chart","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-area-chart","url":"/chart/graph_echarts.html"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","text":"百度chart"},{"attributes":{"icon":"fa fa-sun-o","url":"charts/countDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"109","parentId":"97","text":"日统计报表"},{"attributes":{"icon":"fa fa-registered","url":"charts/countMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"110","parentId":"97","text":"月统计报表"},{"attributes":{"icon":"fa fa-money","url":"charts/countOwe"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"155","parentId":"97","text":"欠费报表图"},{"attributes":{"icon":"fa fa-support","url":"charts/countYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"111","parentId":"97","text":"年统计报表"},{"attributes":{"icon":"fa fa-tachometer","url":"charts/countRun"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"112","parentId":"97","text":"走势图报表"}],"hasChildren":true,"hasParent":false,"id":"97","parentId":"0","text":"统计管理"},{"attributes":{"icon":"fa fa-bars","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-book","url":"/common/dict"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"78","parentId":"1","text":"数据字典"},{"attributes":{"icon":"fa fa-folder-open","url":"/common/sysFile"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"71","parentId":"1","text":"文件管理"}],"h(String), 127.0.0.1(String), 2019-04-06 13:28:15.941(Timestamp)
2019-04-06 13:28:16 -请求地址 : http://localhost:8081/main
2019-04-06 13:28:16 -HTTP METHOD : GET
2019-04-06 13:28:16 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-06 13:28:16 -参数 : []
2019-04-06 13:28:16 -耗时 : 0
2019-04-06 13:28:16 -返回值 : main
2019-04-06 13:28:16 -<==    Updates: 1
2019-04-06 13:28:16 -请求地址 : http://localhost:8081/oa/notify/message
2019-04-06 13:28:16 -HTTP METHOD : GET
2019-04-06 13:28:16 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2019-04-06 13:28:16 -参数 : []
2019-04-06 13:28:16 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2019-04-06 13:28:16 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2019-04-06 13:28:16 -<==      Total: 0
2019-04-06 13:28:16 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2019-04-06 13:28:16 -==> Parameters: 1(Long), 0(String)
2019-04-06 13:28:16 -<==      Total: 1
2019-04-06 13:28:16 -耗时 : 12
2019-04-06 13:28:16 -返回值 : com.bootdo.common.utils.PageUtils@1b50d0e0
2019-04-06 13:28:16 -请求地址 : http://localhost:8081/main
2019-04-06 13:28:16 -HTTP METHOD : GET
2019-04-06 13:28:16 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-06 13:28:16 -参数 : []
2019-04-06 13:28:16 -耗时 : 1
2019-04-06 13:28:16 -返回值 : main
2019-04-06 13:28:19 -请求地址 : http://localhost:8081/moneyLog/elecLog
2019-04-06 13:28:19 -HTTP METHOD : GET
2019-04-06 13:28:19 -CLASS_METHOD : com.bootdo.moneyLog.controller.ElecLogController.moneyLog
2019-04-06 13:28:19 -参数 : []
2019-04-06 13:28:19 -耗时 : 0
2019-04-06 13:28:19 -返回值 : /moneyLog/elecLog/elecLog
2019-04-06 13:28:19 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-06 13:28:19 -HTTP METHOD : GET
2019-04-06 13:28:19 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-06 13:28:19 -参数 : [userType]
2019-04-06 13:28:19 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-06 13:28:19 -==> Parameters: userType(String)
2019-04-06 13:28:19 -<==      Total: 2
2019-04-06 13:28:19 -耗时 : 4
2019-04-06 13:28:19 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-06 13:28:19 -请求地址 : http://localhost:8081/moneyLog/elecLog/list
2019-04-06 13:28:19 -HTTP METHOD : GET
2019-04-06 13:28:19 -CLASS_METHOD : com.bootdo.moneyLog.controller.ElecLogController.list
2019-04-06 13:28:19 -参数 : [{limit=10, offset=0, userType=, userOrg=, userId=, elecDate=}]
2019-04-06 13:28:19 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`elec_type`,`elec_money`,`elec_date`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec_log order by id asc limit ?, ? 
2019-04-06 13:28:19 -==> Parameters: 0(Integer), 10(Integer)
2019-04-06 13:28:19 -<==      Total: 7
2019-04-06 13:28:19 -==>  Preparing: select count(*) from elec_log 
2019-04-06 13:28:19 -==> Parameters: 
2019-04-06 13:28:19 -<==      Total: 1
2019-04-06 13:28:19 -耗时 : 9
2019-04-06 13:28:19 -返回值 : com.bootdo.common.utils.PageUtils@351ff1d1
2019-04-06 13:28:21 -请求地址 : http://localhost:8081/moneyLog/waterLog
2019-04-06 13:28:21 -HTTP METHOD : GET
2019-04-06 13:28:21 -CLASS_METHOD : com.bootdo.moneyLog.controller.WaterLogController.WaterLog
2019-04-06 13:28:21 -参数 : []
2019-04-06 13:28:21 -耗时 : 1
2019-04-06 13:28:21 -返回值 : /moneyLog/waterLog/waterLog
2019-04-06 13:28:21 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-06 13:28:21 -HTTP METHOD : GET
2019-04-06 13:28:21 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-06 13:28:21 -参数 : [userType]
2019-04-06 13:28:21 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-06 13:28:21 -==> Parameters: userType(String)
2019-04-06 13:28:21 -<==      Total: 2
2019-04-06 13:28:21 -耗时 : 4
2019-04-06 13:28:21 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-06 13:28:21 -请求地址 : http://localhost:8081/moneyLog/waterLog/list
2019-04-06 13:28:21 -HTTP METHOD : GET
2019-04-06 13:28:21 -CLASS_METHOD : com.bootdo.moneyLog.controller.WaterLogController.list
2019-04-06 13:28:21 -参数 : [{limit=10, offset=0, userType=, userOrg=, userId=, waterDate=}]
2019-04-06 13:28:21 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,`water_type`,`water_money`,`water_date`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from water_log order by id asc limit ?, ? 
2019-04-06 13:28:21 -==> Parameters: 0(Integer), 10(Integer)
2019-04-06 13:28:21 -<==      Total: 5
2019-04-06 13:28:21 -==>  Preparing: select count(*) from water_log 
2019-04-06 13:28:21 -==> Parameters: 
2019-04-06 13:28:21 -<==      Total: 1
2019-04-06 13:28:21 -耗时 : 8
2019-04-06 13:28:21 -返回值 : com.bootdo.common.utils.PageUtils@2a89308b
2019-04-06 13:28:22 -请求地址 : http://localhost:8081/moneyLog/waterLog/edit/5
2019-04-06 13:28:22 -HTTP METHOD : GET
2019-04-06 13:28:22 -CLASS_METHOD : com.bootdo.moneyLog.controller.WaterLogController.edit
2019-04-06 13:28:22 -参数 : [5, {}]
2019-04-06 13:28:22 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,`water_type`,`water_money`,`water_date`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from water_log where id = ? 
2019-04-06 13:28:22 -==> Parameters: 5(Long)
2019-04-06 13:28:22 -<==      Total: 1
2019-04-06 13:28:22 -耗时 : 4
2019-04-06 13:28:22 -返回值 : moneyLog/waterLog/edit
2019-04-06 13:28:22 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-06 13:28:22 -HTTP METHOD : GET
2019-04-06 13:28:22 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-06 13:28:22 -参数 : [userType]
2019-04-06 13:28:22 -请求地址 : http://localhost:8081/common/dict/list/waterType
2019-04-06 13:28:22 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-06 13:28:22 -HTTP METHOD : GET
2019-04-06 13:28:22 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-06 13:28:22 -参数 : [waterType]
2019-04-06 13:28:22 -==> Parameters: userType(String)
2019-04-06 13:28:22 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-06 13:28:22 -==> Parameters: waterType(String)
2019-04-06 13:28:22 -<==      Total: 2
2019-04-06 13:28:22 -耗时 : 5
2019-04-06 13:28:22 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-06 13:28:22 -<==      Total: 6
2019-04-06 13:28:22 -耗时 : 9
2019-04-06 13:28:22 -返回值 : [DictDO{id=132, name='特殊水费4', value='5', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=131, name='特殊水费3', value='4', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=130, name='特殊水费2', value='3', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=129, name='特殊水费1', value='2', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=128, name='民用水', value='1', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=127, name='商业水', value='0', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-06 13:28:27 -请求地址 : http://localhost:8081/moneyLog/waterLog/update
2019-04-06 13:28:27 -HTTP METHOD : POST
2019-04-06 13:28:27 -CLASS_METHOD : com.bootdo.moneyLog.controller.WaterLogController.update
2019-04-06 13:28:27 -参数 : [com.bootdo.moneyLog.domain.WaterLogDO@1e22f573]
2019-04-06 13:28:27 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-06 13:28:27 -==> Parameters: 1(Long), admin(String), error(String), null, http://localhost:8081/moneyLog/waterLog/update(String), org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.exceptions.PersistenceException: 
### Error updating database.  Cause: java.lang.IllegalArgumentException: invalid comparison: java.util.Date and java.lang.String
### Cause: java.lang.IllegalArgumentException: invalid comparison: java.util.Date and java.lang.String(String), null, 2019-04-06 13:28:27.433(Timestamp)
2019-04-06 13:28:27 -nested exception is org.apache.ibatis.exceptions.PersistenceException: 
### Error updating database.  Cause: java.lang.IllegalArgumentException: invalid comparison: java.util.Date and java.lang.String
### Cause: java.lang.IllegalArgumentException: invalid comparison: java.util.Date and java.lang.String
org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.exceptions.PersistenceException: 
### Error updating database.  Cause: java.lang.IllegalArgumentException: invalid comparison: java.util.Date and java.lang.String
### Cause: java.lang.IllegalArgumentException: invalid comparison: java.util.Date and java.lang.String
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:79)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:447)
	at com.sun.proxy.$Proxy101.update(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.update(SqlSessionTemplate.java:295)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:62)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy104.update(Unknown Source)
	at com.bootdo.moneyLog.service.impl.WaterLogServiceImpl.update(WaterLogServiceImpl.java:39)
	at com.bootdo.moneyLog.controller.WaterLogController.update(WaterLogController.java:222)
	at com.bootdo.moneyLog.controller.WaterLogController$$FastClassBySpringCGLIB$$3a5e3635.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:204)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:746)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.bootdo.common.aspect.WebLogAspect.doAround(WebLogAspect.java:57)
	at sun.reflect.GeneratedMethodAccessor128.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.apache.shiro.spring.security.interceptor.AopAllianceAnnotationsAuthorizingMethodInterceptor$1.proceed(AopAllianceAnnotationsAuthorizingMethodInterceptor.java:82)
	at org.apache.shiro.authz.aop.AuthorizingMethodInterceptor.invoke(AuthorizingMethodInterceptor.java:39)
	at org.apache.shiro.spring.security.interceptor.AopAllianceAnnotationsAuthorizingMethodInterceptor.invoke(AopAllianceAnnotationsAuthorizingMethodInterceptor.java:115)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.bootdo.moneyLog.controller.WaterLogController$$EnhancerBySpringCGLIB$$eb5ecfac.update(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:209)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:877)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:783)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:991)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:925)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:974)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:877)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:661)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:851)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:61)
	at org.apache.shiro.web.servlet.AdviceFilter.executeChain(AdviceFilter.java:108)
	at org.apache.shiro.web.servlet.AdviceFilter.doFilterInternal(AdviceFilter.java:137)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:66)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)
	at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)
	at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)
	at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)
	at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:383)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:109)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:496)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:790)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1468)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Unknown Source)
Caused by: org.apache.ibatis.exceptions.PersistenceException: 
### Error updating database.  Cause: java.lang.IllegalArgumentException: invalid comparison: java.util.Date and java.lang.String
### Cause: java.lang.IllegalArgumentException: invalid comparison: java.util.Date and java.lang.String
	at org.apache.ibatis.exceptions.ExceptionFactory.wrapException(ExceptionFactory.java:30)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:200)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:434)
	... 103 common frames omitted
Caused by: java.lang.IllegalArgumentException: invalid comparison: java.util.Date and java.lang.String
	at org.apache.ibatis.ognl.OgnlOps.compareWithConversion(OgnlOps.java:93)
	at org.apache.ibatis.ognl.OgnlOps.isEqual(OgnlOps.java:143)
	at org.apache.ibatis.ognl.OgnlOps.equal(OgnlOps.java:802)
	at org.apache.ibatis.ognl.ASTNotEq.getValueBody(ASTNotEq.java:53)
	at org.apache.ibatis.ognl.SimpleNode.evaluateGetValueBody(SimpleNode.java:212)
	at org.apache.ibatis.ognl.SimpleNode.getValue(SimpleNode.java:258)
	at org.apache.ibatis.ognl.ASTAnd.getValueBody(ASTAnd.java:61)
	at org.apache.ibatis.ognl.SimpleNode.evaluateGetValueBody(SimpleNode.java:212)
	at org.apache.ibatis.ognl.SimpleNode.getValue(SimpleNode.java:258)
	at org.apache.ibatis.ognl.Ognl.getValue(Ognl.java:470)
	at org.apache.ibatis.ognl.Ognl.getValue(Ognl.java:434)
	at org.apache.ibatis.scripting.xmltags.OgnlCache.getValue(OgnlCache.java:44)
	at org.apache.ibatis.scripting.xmltags.ExpressionEvaluator.evaluateBoolean(ExpressionEvaluator.java:32)
	at org.apache.ibatis.scripting.xmltags.IfSqlNode.apply(IfSqlNode.java:34)
	at org.apache.ibatis.scripting.xmltags.MixedSqlNode.apply(MixedSqlNode.java:33)
	at org.apache.ibatis.scripting.xmltags.TrimSqlNode.apply(TrimSqlNode.java:55)
	at org.apache.ibatis.scripting.xmltags.MixedSqlNode.apply(MixedSqlNode.java:33)
	at org.apache.ibatis.scripting.xmltags.DynamicSqlSource.getBoundSql(DynamicSqlSource.java:41)
	at org.apache.ibatis.mapping.MappedStatement.getBoundSql(MappedStatement.java:292)
	at org.apache.ibatis.executor.statement.BaseStatementHandler.<init>(BaseStatementHandler.java:64)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.<init>(PreparedStatementHandler.java:40)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.<init>(RoutingStatementHandler.java:46)
	at org.apache.ibatis.session.Configuration.newStatementHandler(Configuration.java:545)
	at org.apache.ibatis.executor.SimpleExecutor.doUpdate(SimpleExecutor.java:48)
	at org.apache.ibatis.executor.BaseExecutor.update(BaseExecutor.java:117)
	at org.apache.ibatis.executor.CachingExecutor.update(CachingExecutor.java:76)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:198)
	... 108 common frames omitted
2019-04-06 13:28:27 -<==    Updates: 1
2019-04-06 13:28:54 -请求地址 : http://localhost:8081/moneyLog/waterLog/update
2019-04-06 13:28:54 -HTTP METHOD : POST
2019-04-06 13:28:54 -CLASS_METHOD : com.bootdo.moneyLog.controller.WaterLogController.update
2019-04-06 13:28:54 -参数 : [com.bootdo.moneyLog.domain.WaterLogDO@7162129]
2019-04-06 13:28:54 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-06 13:28:54 -==> Parameters: 1(Long), admin(String), error(String), null, http://localhost:8081/moneyLog/waterLog/update(String), org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.exceptions.PersistenceException: 
### Error updating database.  Cause: java.lang.IllegalArgumentException: invalid comparison: java.util.Date and java.lang.String
### Cause: java.lang.IllegalArgumentException: invalid comparison: java.util.Date and java.lang.String(String), null, 2019-04-06 13:28:54.019(Timestamp)
2019-04-06 13:28:54 -nested exception is org.apache.ibatis.exceptions.PersistenceException: 
### Error updating database.  Cause: java.lang.IllegalArgumentException: invalid comparison: java.util.Date and java.lang.String
### Cause: java.lang.IllegalArgumentException: invalid comparison: java.util.Date and java.lang.String
org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.exceptions.PersistenceException: 
### Error updating database.  Cause: java.lang.IllegalArgumentException: invalid comparison: java.util.Date and java.lang.String
### Cause: java.lang.IllegalArgumentException: invalid comparison: java.util.Date and java.lang.String
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:79)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:447)
	at com.sun.proxy.$Proxy101.update(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.update(SqlSessionTemplate.java:295)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:62)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy104.update(Unknown Source)
	at com.bootdo.moneyLog.service.impl.WaterLogServiceImpl.update(WaterLogServiceImpl.java:39)
	at com.bootdo.moneyLog.controller.WaterLogController.update(WaterLogController.java:222)
	at com.bootdo.moneyLog.controller.WaterLogController$$FastClassBySpringCGLIB$$3a5e3635.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:204)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:746)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.bootdo.common.aspect.WebLogAspect.doAround(WebLogAspect.java:57)
	at sun.reflect.GeneratedMethodAccessor128.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.apache.shiro.spring.security.interceptor.AopAllianceAnnotationsAuthorizingMethodInterceptor$1.proceed(AopAllianceAnnotationsAuthorizingMethodInterceptor.java:82)
	at org.apache.shiro.authz.aop.AuthorizingMethodInterceptor.invoke(AuthorizingMethodInterceptor.java:39)
	at org.apache.shiro.spring.security.interceptor.AopAllianceAnnotationsAuthorizingMethodInterceptor.invoke(AopAllianceAnnotationsAuthorizingMethodInterceptor.java:115)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.bootdo.moneyLog.controller.WaterLogController$$EnhancerBySpringCGLIB$$eb5ecfac.update(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:209)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:877)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:783)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:991)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:925)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:974)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:877)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:661)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:851)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:61)
	at org.apache.shiro.web.servlet.AdviceFilter.executeChain(AdviceFilter.java:108)
	at org.apache.shiro.web.servlet.AdviceFilter.doFilterInternal(AdviceFilter.java:137)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:66)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)
	at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)
	at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)
	at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)
	at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:383)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:109)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:496)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:790)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1468)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Unknown Source)
Caused by: org.apache.ibatis.exceptions.PersistenceException: 
### Error updating database.  Cause: java.lang.IllegalArgumentException: invalid comparison: java.util.Date and java.lang.String
### Cause: java.lang.IllegalArgumentException: invalid comparison: java.util.Date and java.lang.String
	at org.apache.ibatis.exceptions.ExceptionFactory.wrapException(ExceptionFactory.java:30)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:200)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:434)
	... 103 common frames omitted
Caused by: java.lang.IllegalArgumentException: invalid comparison: java.util.Date and java.lang.String
	at org.apache.ibatis.ognl.OgnlOps.compareWithConversion(OgnlOps.java:93)
	at org.apache.ibatis.ognl.OgnlOps.isEqual(OgnlOps.java:143)
	at org.apache.ibatis.ognl.OgnlOps.equal(OgnlOps.java:802)
	at org.apache.ibatis.ognl.ASTNotEq.getValueBody(ASTNotEq.java:53)
	at org.apache.ibatis.ognl.SimpleNode.evaluateGetValueBody(SimpleNode.java:212)
	at org.apache.ibatis.ognl.SimpleNode.getValue(SimpleNode.java:258)
	at org.apache.ibatis.ognl.ASTAnd.getValueBody(ASTAnd.java:61)
	at org.apache.ibatis.ognl.SimpleNode.evaluateGetValueBody(SimpleNode.java:212)
	at org.apache.ibatis.ognl.SimpleNode.getValue(SimpleNode.java:258)
	at org.apache.ibatis.ognl.Ognl.getValue(Ognl.java:470)
	at org.apache.ibatis.ognl.Ognl.getValue(Ognl.java:434)
	at org.apache.ibatis.scripting.xmltags.OgnlCache.getValue(OgnlCache.java:44)
	at org.apache.ibatis.scripting.xmltags.ExpressionEvaluator.evaluateBoolean(ExpressionEvaluator.java:32)
	at org.apache.ibatis.scripting.xmltags.IfSqlNode.apply(IfSqlNode.java:34)
	at org.apache.ibatis.scripting.xmltags.MixedSqlNode.apply(MixedSqlNode.java:33)
	at org.apache.ibatis.scripting.xmltags.TrimSqlNode.apply(TrimSqlNode.java:55)
	at org.apache.ibatis.scripting.xmltags.MixedSqlNode.apply(MixedSqlNode.java:33)
	at org.apache.ibatis.scripting.xmltags.DynamicSqlSource.getBoundSql(DynamicSqlSource.java:41)
	at org.apache.ibatis.mapping.MappedStatement.getBoundSql(MappedStatement.java:292)
	at org.apache.ibatis.executor.statement.BaseStatementHandler.<init>(BaseStatementHandler.java:64)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.<init>(PreparedStatementHandler.java:40)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.<init>(RoutingStatementHandler.java:46)
	at org.apache.ibatis.session.Configuration.newStatementHandler(Configuration.java:545)
	at org.apache.ibatis.executor.SimpleExecutor.doUpdate(SimpleExecutor.java:48)
	at org.apache.ibatis.executor.BaseExecutor.update(BaseExecutor.java:117)
	at org.apache.ibatis.executor.CachingExecutor.update(CachingExecutor.java:76)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:198)
	... 108 common frames omitted
2019-04-06 13:28:54 -<==    Updates: 1
2019-04-06 13:30:16 -请求地址 : http://localhost:8081/login;JSESSIONID=ee66a7fe-0242-4aba-86b0-6b6edadc15a5
2019-04-06 13:30:16 -HTTP METHOD : GET
2019-04-06 13:30:16 -CLASS_METHOD : com.bootdo.system.controller.LoginController.login
2019-04-06 13:30:16 -参数 : [{}]
2019-04-06 13:30:16 -耗时 : 1
2019-04-06 13:30:16 -返回值 : login
2019-04-06 13:30:16 -请求地址 : http://localhost:8081/getVerify
2019-04-06 13:30:16 -HTTP METHOD : GET
2019-04-06 13:30:16 -CLASS_METHOD : com.bootdo.system.controller.LoginController.getVerify
2019-04-06 13:30:16 -参数 : [org.apache.shiro.web.servlet.ShiroHttpServletRequest@1862217b, org.apache.shiro.web.servlet.ShiroHttpServletResponse@12c83df7]
2019-04-06 13:30:16 -5145
2019-04-06 13:30:16 -耗时 : 14
2019-04-06 13:30:16 -返回值 : null
2019-04-06 13:30:16 -请求地址 : http://localhost:8081/login
2019-04-06 13:30:16 -HTTP METHOD : GET
2019-04-06 13:30:16 -CLASS_METHOD : com.bootdo.system.controller.LoginController.login
2019-04-06 13:30:16 -参数 : [{}]
2019-04-06 13:30:16 -耗时 : 1
2019-04-06 13:30:16 -返回值 : login
2019-04-06 13:30:24 -请求地址 : http://localhost:8081/login
2019-04-06 13:30:24 -HTTP METHOD : POST
2019-04-06 13:30:24 -CLASS_METHOD : com.bootdo.system.controller.LoginController.ajaxLogin
2019-04-06 13:30:24 -参数 : [admin, 111111, 5145, org.apache.shiro.web.servlet.ShiroHttpServletRequest@5b21dc86]
2019-04-06 13:30:24 -==>  Preparing: select `user_id`,`username`,`name`,`password`,`dept_id`,`email`,`mobile`,`status`,`user_id_create`,`gmt_create`,`gmt_modified`,`sex`,`birth`,`pic_id`,`live_address`,`hobby`,`province`,`city`,`district` from sys_user WHERE username = ? order by user_id desc 
2019-04-06 13:30:24 -==> Parameters: admin(String)
2019-04-06 13:30:24 -<==      Total: 1
2019-04-06 13:30:24 -耗时 : 8
2019-04-06 13:30:24 -返回值 : {msg=操作成功, code=0}
2019-04-06 13:30:24 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-06 13:30:24 -==> Parameters: 1(Long), admin(String), 登录(String), 9(Integer), com.bootdo.system.controller.LoginController.ajaxLogin()(String), null, 127.0.0.1(String), 2019-04-06 13:30:24.882(Timestamp)
2019-04-06 13:30:24 -请求地址 : http://localhost:8081/index
2019-04-06 13:30:24 -HTTP METHOD : GET
2019-04-06 13:30:24 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2019-04-06 13:30:24 -参数 : [{}]
2019-04-06 13:30:24 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2019-04-06 13:30:24 -==> Parameters: 1(Long)
2019-04-06 13:30:24 -<==      Total: 46
2019-04-06 13:30:24 -<==    Updates: 1
2019-04-06 13:30:24 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2019-04-06 13:30:24 -==> Parameters: 138(Long)
2019-04-06 13:30:24 -<==      Total: 1
2019-04-06 13:30:24 -耗时 : 24
2019-04-06 13:30:24 -返回值 : index_v1
2019-04-06 13:30:24 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-06 13:30:24 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 24(Integer), com.bootdo.system.controller.LoginController.index()(String), {"menus":[{"attributes":{"icon":"fa fa-money","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-money","url":"/moneyList/moneyList"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"102","parentId":"106","text":"现金缴费"},{"attributes":{"icon":"fa fa-book","url":"/moneyLog/elecLog"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"107","parentId":"106","text":"缴费记录"}],"hasChildren":true,"hasParent":false,"id":"106","parentId":"0","text":"收费管理"},{"attributes":{"icon":"fa fa-lightbulb-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/elec/elec"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"121","parentId":"103","text":"电费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"elec/elecInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"122","parentId":"103","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"elec/elecUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"123","parentId":"103","text":"电表上传"},{"attributes":{"icon":"fa fa-cc","url":"/elec/elecPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"124","parentId":"103","text":"电价管理"}],"hasChildren":true,"hasParent":false,"id":"103","parentId":"0","text":"电费管理"},{"attributes":{"icon":"fa fa-tint","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/water/water"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"117","parentId":"105","text":"水费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"water/waterInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"118","parentId":"105","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"water/waterUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"119","parentId":"105","text":"水费生成"},{"attributes":{"icon":"fa fa-cc","url":"/water/waterPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"120","parentId":"105","text":"水价管理"}],"hasChildren":true,"hasParent":false,"id":"105","parentId":"0","text":"水费管理"},{"attributes":{"icon":"fa fa-fire","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/heat/heat"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"113","parentId":"104","text":"暖费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"heat/heatInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"114","parentId":"104","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"heat/heatUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"115","parentId":"104","text":"暖费生成"},{"attributes":{"icon":"","url":"/heat/heatPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"116","parentId":"104","text":"暖价管理"}],"hasChildren":true,"hasParent":false,"id":"104","parentId":"0","text":"暖费管理"},{"attributes":{"icon":"fa fa-vcard-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-bomb","url":"/print/print"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"149","parentId":"108","text":"票据记录"}],"hasChildren":true,"hasParent":false,"id":"108","parentId":"0","text":"票据管理"},{"attributes":{"icon":"fa fa-bar-chart","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-area-chart","url":"/chart/graph_echarts.html"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","text":"百度chart"},{"attributes":{"icon":"fa fa-sun-o","url":"charts/countDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"109","parentId":"97","text":"日统计报表"},{"attributes":{"icon":"fa fa-registered","url":"charts/countMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"110","parentId":"97","text":"月统计报表"},{"attributes":{"icon":"fa fa-money","url":"charts/countOwe"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"155","parentId":"97","text":"欠费报表图"},{"attributes":{"icon":"fa fa-support","url":"charts/countYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"111","parentId":"97","text":"年统计报表"},{"attributes":{"icon":"fa fa-tachometer","url":"charts/countRun"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"112","parentId":"97","text":"走势图报表"}],"hasChildren":true,"hasParent":false,"id":"97","parentId":"0","text":"统计管理"},{"attributes":{"icon":"fa fa-bars","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-book","url":"/common/dict"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"78","parentId":"1","text":"数据字典"},{"attributes":{"icon":"fa fa-folder-open","url":"/common/sysFile"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"71","parentId":"1","text":"文件管理"}],"h(String), 127.0.0.1(String), 2019-04-06 13:30:24.948(Timestamp)
2019-04-06 13:30:25 -<==    Updates: 1
2019-04-06 13:30:25 -请求地址 : http://localhost:8081/main
2019-04-06 13:30:25 -HTTP METHOD : GET
2019-04-06 13:30:25 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-06 13:30:25 -参数 : []
2019-04-06 13:30:25 -耗时 : 1
2019-04-06 13:30:25 -返回值 : main
2019-04-06 13:30:25 -请求地址 : http://localhost:8081/oa/notify/message
2019-04-06 13:30:25 -HTTP METHOD : GET
2019-04-06 13:30:25 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2019-04-06 13:30:25 -参数 : []
2019-04-06 13:30:25 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2019-04-06 13:30:25 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2019-04-06 13:30:25 -<==      Total: 0
2019-04-06 13:30:25 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2019-04-06 13:30:25 -==> Parameters: 1(Long), 0(String)
2019-04-06 13:30:25 -<==      Total: 1
2019-04-06 13:30:25 -耗时 : 8
2019-04-06 13:30:25 -返回值 : com.bootdo.common.utils.PageUtils@268b1b9
2019-04-06 13:30:25 -请求地址 : http://localhost:8081/main
2019-04-06 13:30:25 -HTTP METHOD : GET
2019-04-06 13:30:25 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-06 13:30:25 -参数 : []
2019-04-06 13:30:25 -耗时 : 0
2019-04-06 13:30:25 -返回值 : main
2019-04-06 13:30:29 -==>  Preparing: select distinct m.perms from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id = ur.role_id where ur.user_id = ? 
2019-04-06 13:30:29 -==> Parameters: 1(Long)
2019-04-06 13:30:29 -<==      Total: 90
2019-04-06 13:30:29 -请求地址 : http://localhost:8081/moneyLog/elecLog
2019-04-06 13:30:29 -HTTP METHOD : GET
2019-04-06 13:30:29 -CLASS_METHOD : com.bootdo.moneyLog.controller.ElecLogController.moneyLog
2019-04-06 13:30:29 -参数 : []
2019-04-06 13:30:29 -耗时 : 1
2019-04-06 13:30:29 -返回值 : /moneyLog/elecLog/elecLog
2019-04-06 13:30:30 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-06 13:30:30 -HTTP METHOD : GET
2019-04-06 13:30:30 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-06 13:30:30 -参数 : [userType]
2019-04-06 13:30:30 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-06 13:30:30 -==> Parameters: userType(String)
2019-04-06 13:30:30 -<==      Total: 2
2019-04-06 13:30:30 -耗时 : 4
2019-04-06 13:30:30 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-06 13:30:30 -请求地址 : http://localhost:8081/moneyLog/elecLog/list
2019-04-06 13:30:30 -HTTP METHOD : GET
2019-04-06 13:30:30 -CLASS_METHOD : com.bootdo.moneyLog.controller.ElecLogController.list
2019-04-06 13:30:30 -参数 : [{limit=10, offset=0, userType=, userOrg=, userId=, elecDate=}]
2019-04-06 13:30:30 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`elec_type`,`elec_money`,`elec_date`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec_log order by id asc limit ?, ? 
2019-04-06 13:30:30 -==> Parameters: 0(Integer), 10(Integer)
2019-04-06 13:30:30 -<==      Total: 7
2019-04-06 13:30:30 -==>  Preparing: select count(*) from elec_log 
2019-04-06 13:30:30 -==> Parameters: 
2019-04-06 13:30:30 -<==      Total: 1
2019-04-06 13:30:30 -耗时 : 7
2019-04-06 13:30:30 -返回值 : com.bootdo.common.utils.PageUtils@9fcf3b9
2019-04-06 13:30:31 -请求地址 : http://localhost:8081/moneyLog/waterLog
2019-04-06 13:30:31 -HTTP METHOD : GET
2019-04-06 13:30:31 -CLASS_METHOD : com.bootdo.moneyLog.controller.WaterLogController.WaterLog
2019-04-06 13:30:31 -参数 : []
2019-04-06 13:30:31 -耗时 : 1
2019-04-06 13:30:31 -返回值 : /moneyLog/waterLog/waterLog
2019-04-06 13:30:31 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-06 13:30:31 -HTTP METHOD : GET
2019-04-06 13:30:31 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-06 13:30:31 -参数 : [userType]
2019-04-06 13:30:31 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-06 13:30:31 -==> Parameters: userType(String)
2019-04-06 13:30:31 -<==      Total: 2
2019-04-06 13:30:31 -耗时 : 4
2019-04-06 13:30:31 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-06 13:30:31 -请求地址 : http://localhost:8081/moneyLog/waterLog/list
2019-04-06 13:30:31 -HTTP METHOD : GET
2019-04-06 13:30:31 -CLASS_METHOD : com.bootdo.moneyLog.controller.WaterLogController.list
2019-04-06 13:30:31 -参数 : [{limit=10, offset=0, userType=, userOrg=, userId=, waterDate=}]
2019-04-06 13:30:31 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,`water_type`,`water_money`,`water_date`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from water_log order by id asc limit ?, ? 
2019-04-06 13:30:31 -==> Parameters: 0(Integer), 10(Integer)
2019-04-06 13:30:31 -<==      Total: 5
2019-04-06 13:30:31 -==>  Preparing: select count(*) from water_log 
2019-04-06 13:30:31 -==> Parameters: 
2019-04-06 13:30:31 -<==      Total: 1
2019-04-06 13:30:31 -耗时 : 8
2019-04-06 13:30:31 -返回值 : com.bootdo.common.utils.PageUtils@3d3480b4
2019-04-06 13:30:32 -请求地址 : http://localhost:8081/moneyLog/waterLog/edit/5
2019-04-06 13:30:32 -HTTP METHOD : GET
2019-04-06 13:30:32 -CLASS_METHOD : com.bootdo.moneyLog.controller.WaterLogController.edit
2019-04-06 13:30:32 -参数 : [5, {}]
2019-04-06 13:30:32 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,`water_type`,`water_money`,`water_date`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from water_log where id = ? 
2019-04-06 13:30:32 -==> Parameters: 5(Long)
2019-04-06 13:30:32 -<==      Total: 1
2019-04-06 13:30:32 -耗时 : 4
2019-04-06 13:30:32 -返回值 : moneyLog/waterLog/edit
2019-04-06 13:30:33 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-06 13:30:33 -HTTP METHOD : GET
2019-04-06 13:30:33 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-06 13:30:33 -参数 : [userType]
2019-04-06 13:30:33 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-06 13:30:33 -==> Parameters: userType(String)
2019-04-06 13:30:33 -请求地址 : http://localhost:8081/common/dict/list/waterType
2019-04-06 13:30:33 -HTTP METHOD : GET
2019-04-06 13:30:33 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-06 13:30:33 -参数 : [waterType]
2019-04-06 13:30:33 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-06 13:30:33 -==> Parameters: waterType(String)
2019-04-06 13:30:33 -<==      Total: 2
2019-04-06 13:30:33 -耗时 : 9
2019-04-06 13:30:33 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-06 13:30:33 -<==      Total: 6
2019-04-06 13:30:33 -耗时 : 11
2019-04-06 13:30:33 -返回值 : [DictDO{id=132, name='特殊水费4', value='5', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=131, name='特殊水费3', value='4', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=130, name='特殊水费2', value='3', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=129, name='特殊水费1', value='2', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=128, name='民用水', value='1', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=127, name='商业水', value='0', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-06 13:30:40 -请求地址 : http://localhost:8081/moneyLog/waterLog/update
2019-04-06 13:30:40 -HTTP METHOD : POST
2019-04-06 13:30:40 -CLASS_METHOD : com.bootdo.moneyLog.controller.WaterLogController.update
2019-04-06 13:30:40 -参数 : [com.bootdo.moneyLog.domain.WaterLogDO@401af5eb]
2019-04-06 13:30:40 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-06 13:30:40 -==> Parameters: 1(Long), admin(String), error(String), null, http://localhost:8081/moneyLog/waterLog/update(String), org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.exceptions.PersistenceException: 
### Error updating database.  Cause: java.lang.IllegalArgumentException: invalid comparison: java.util.Date and java.lang.String
### Cause: java.lang.IllegalArgumentException: invalid comparison: java.util.Date and java.lang.String(String), null, 2019-04-06 13:30:40.815(Timestamp)
2019-04-06 13:30:40 -nested exception is org.apache.ibatis.exceptions.PersistenceException: 
### Error updating database.  Cause: java.lang.IllegalArgumentException: invalid comparison: java.util.Date and java.lang.String
### Cause: java.lang.IllegalArgumentException: invalid comparison: java.util.Date and java.lang.String
org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.exceptions.PersistenceException: 
### Error updating database.  Cause: java.lang.IllegalArgumentException: invalid comparison: java.util.Date and java.lang.String
### Cause: java.lang.IllegalArgumentException: invalid comparison: java.util.Date and java.lang.String
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:79)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:447)
	at com.sun.proxy.$Proxy101.update(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.update(SqlSessionTemplate.java:295)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:62)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy104.update(Unknown Source)
	at com.bootdo.moneyLog.service.impl.WaterLogServiceImpl.update(WaterLogServiceImpl.java:39)
	at com.bootdo.moneyLog.controller.WaterLogController.update(WaterLogController.java:222)
	at com.bootdo.moneyLog.controller.WaterLogController$$FastClassBySpringCGLIB$$3a5e3635.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:204)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:746)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.bootdo.common.aspect.WebLogAspect.doAround(WebLogAspect.java:57)
	at sun.reflect.GeneratedMethodAccessor128.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.apache.shiro.spring.security.interceptor.AopAllianceAnnotationsAuthorizingMethodInterceptor$1.proceed(AopAllianceAnnotationsAuthorizingMethodInterceptor.java:82)
	at org.apache.shiro.authz.aop.AuthorizingMethodInterceptor.invoke(AuthorizingMethodInterceptor.java:39)
	at org.apache.shiro.spring.security.interceptor.AopAllianceAnnotationsAuthorizingMethodInterceptor.invoke(AopAllianceAnnotationsAuthorizingMethodInterceptor.java:115)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.bootdo.moneyLog.controller.WaterLogController$$EnhancerBySpringCGLIB$$eb5ecfac.update(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:209)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:877)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:783)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:991)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:925)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:974)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:877)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:661)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:851)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:61)
	at org.apache.shiro.web.servlet.AdviceFilter.executeChain(AdviceFilter.java:108)
	at org.apache.shiro.web.servlet.AdviceFilter.doFilterInternal(AdviceFilter.java:137)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:66)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)
	at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)
	at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)
	at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)
	at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:383)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:109)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:496)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:790)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1468)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Unknown Source)
Caused by: org.apache.ibatis.exceptions.PersistenceException: 
### Error updating database.  Cause: java.lang.IllegalArgumentException: invalid comparison: java.util.Date and java.lang.String
### Cause: java.lang.IllegalArgumentException: invalid comparison: java.util.Date and java.lang.String
	at org.apache.ibatis.exceptions.ExceptionFactory.wrapException(ExceptionFactory.java:30)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:200)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:434)
	... 103 common frames omitted
Caused by: java.lang.IllegalArgumentException: invalid comparison: java.util.Date and java.lang.String
	at org.apache.ibatis.ognl.OgnlOps.compareWithConversion(OgnlOps.java:93)
	at org.apache.ibatis.ognl.OgnlOps.isEqual(OgnlOps.java:143)
	at org.apache.ibatis.ognl.OgnlOps.equal(OgnlOps.java:802)
	at org.apache.ibatis.ognl.ASTNotEq.getValueBody(ASTNotEq.java:53)
	at org.apache.ibatis.ognl.SimpleNode.evaluateGetValueBody(SimpleNode.java:212)
	at org.apache.ibatis.ognl.SimpleNode.getValue(SimpleNode.java:258)
	at org.apache.ibatis.ognl.ASTAnd.getValueBody(ASTAnd.java:61)
	at org.apache.ibatis.ognl.SimpleNode.evaluateGetValueBody(SimpleNode.java:212)
	at org.apache.ibatis.ognl.SimpleNode.getValue(SimpleNode.java:258)
	at org.apache.ibatis.ognl.Ognl.getValue(Ognl.java:470)
	at org.apache.ibatis.ognl.Ognl.getValue(Ognl.java:434)
	at org.apache.ibatis.scripting.xmltags.OgnlCache.getValue(OgnlCache.java:44)
	at org.apache.ibatis.scripting.xmltags.ExpressionEvaluator.evaluateBoolean(ExpressionEvaluator.java:32)
	at org.apache.ibatis.scripting.xmltags.IfSqlNode.apply(IfSqlNode.java:34)
	at org.apache.ibatis.scripting.xmltags.MixedSqlNode.apply(MixedSqlNode.java:33)
	at org.apache.ibatis.scripting.xmltags.TrimSqlNode.apply(TrimSqlNode.java:55)
	at org.apache.ibatis.scripting.xmltags.MixedSqlNode.apply(MixedSqlNode.java:33)
	at org.apache.ibatis.scripting.xmltags.DynamicSqlSource.getBoundSql(DynamicSqlSource.java:41)
	at org.apache.ibatis.mapping.MappedStatement.getBoundSql(MappedStatement.java:292)
	at org.apache.ibatis.executor.statement.BaseStatementHandler.<init>(BaseStatementHandler.java:64)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.<init>(PreparedStatementHandler.java:40)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.<init>(RoutingStatementHandler.java:46)
	at org.apache.ibatis.session.Configuration.newStatementHandler(Configuration.java:545)
	at org.apache.ibatis.executor.SimpleExecutor.doUpdate(SimpleExecutor.java:48)
	at org.apache.ibatis.executor.BaseExecutor.update(BaseExecutor.java:117)
	at org.apache.ibatis.executor.CachingExecutor.update(CachingExecutor.java:76)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:198)
	... 108 common frames omitted
2019-04-06 13:30:40 -<==    Updates: 1
2019-04-06 13:32:05 -Starting BootdoApplication on ZJZL-20180906VX with PID 7376 (D:\eclipse2018-work\bootdo\target\classes started by Administrator in D:\eclipse2018-work\bootdo)
2019-04-06 13:32:05 -Running with Spring Boot v2.0.3.RELEASE, Spring v5.0.7.RELEASE
2019-04-06 13:32:05 -The following profiles are active: dev
2019-04-06 13:32:05 -Refreshing org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@6fdbe764: startup date [Sat Apr 06 13:32:05 CST 2019]; root of context hierarchy
2019-04-06 13:32:08 -Multiple Spring Data modules found, entering strict repository configuration mode!
2019-04-06 13:32:11 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$adaffbcd] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-06 13:32:11 -Bean 'shiroConfig' of type [com.bootdo.system.config.ShiroConfig$$EnhancerBySpringCGLIB$$a0092a74] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-06 13:32:12 -Bean 'userRealm' of type [com.bootdo.system.shiro.UserRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-06 13:32:12 -Bean 'cacheManager2' of type [net.sf.ehcache.CacheManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-06 13:32:12 -Bean 'ehCacheManager' of type [org.apache.shiro.cache.ehcache.EhCacheManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-06 13:32:12 -Cache with name 'com.bootdo.system.shiro.UserRealm.authorizationCache' does not yet exist.  Creating now.
2019-04-06 13:32:13 -Added EhCache named [com.bootdo.system.shiro.UserRealm.authorizationCache]
2019-04-06 13:32:13 -Bean 'sessionDAO' of type [org.apache.shiro.session.mgt.eis.MemorySessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-06 13:32:13 -Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-06 13:32:13 -Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-06 13:32:13 -Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-06 13:32:14 -Tomcat initialized with port(s): 8081 (http)
2019-04-06 13:32:14 -Initializing ProtocolHandler ["http-nio-8081"]
2019-04-06 13:32:14 -Starting service [Tomcat]
2019-04-06 13:32:14 -Starting Servlet Engine: Apache Tomcat/8.5.31
2019-04-06 13:32:14 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [C:\Program Files\Java\jre1.8.0_131\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:/Program Files/Java/jre1.8.0_131/bin/server;C:/Program Files/Java/jre1.8.0_131/bin;C:/Program Files/Java/jre1.8.0_131/lib/amd64;C:\ProgramData\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Windows\System32\OpenSSH\;D:\pbb\pycSafefile\x64;D:\pbb\PBB Reader\x64;C:\Program Files\MySQL\MySQL Utilities 1.6\;D:\MAVEN\apache-maven-3.6.0\bin;D:\GIT\Git\cmd;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;;C:\Users\Administrator\Desktop;;.]
2019-04-06 13:32:15 -Initializing Spring embedded WebApplicationContext
2019-04-06 13:32:15 -Root WebApplicationContext: initialization completed in 9811 ms
2019-04-06 13:32:15 -Mapping filter: 'characterEncodingFilter' to: [/*]
2019-04-06 13:32:15 -Mapping filter: 'hiddenHttpMethodFilter' to: [/*]
2019-04-06 13:32:15 -Mapping filter: 'httpPutFormContentFilter' to: [/*]
2019-04-06 13:32:15 -Mapping filter: 'requestContextFilter' to: [/*]
2019-04-06 13:32:15 -Filter xssFilter was not registered (disabled)
2019-04-06 13:32:15 -Mapping filter: 'webStatFilter' to urls: [/*]
2019-04-06 13:32:15 -Mapping filter: 'shiroFilterFactoryBean' to: [/*]
2019-04-06 13:32:15 -Servlet statViewServlet mapped to [/druid/*]
2019-04-06 13:32:15 -Servlet dispatcherServlet mapped to [/]
2019-04-06 13:32:19 -ApplicationContext registed-->org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@6fdbe764: startup date [Sat Apr 06 13:32:05 CST 2019]; root of context hierarchy
2019-04-06 13:32:20 -Using default implementation for ThreadExecutor
2019-04-06 13:32:20 -Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2019-04-06 13:32:20 -Quartz Scheduler v.2.2.1 created.
2019-04-06 13:32:20 -RAMJobStore initialized.
2019-04-06 13:32:20 -Scheduler meta-data: Quartz Scheduler (v2.2.1) 'schedulerFactoryBean' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2019-04-06 13:32:20 -Quartz scheduler 'schedulerFactoryBean' initialized from an externally provided properties instance.
2019-04-06 13:32:20 -Quartz scheduler version: 2.2.1
2019-04-06 13:32:20 -JobFactory set to: com.bootdo.common.quartz.factory.JobFactory@74431b9c
2019-04-06 13:32:20 -Initializing ExecutorService  'clientInboundChannelExecutor'
2019-04-06 13:32:20 -Initializing ExecutorService  'clientOutboundChannelExecutor'
2019-04-06 13:32:24 -Mapped "{[/charts/countDD],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.countDDController.countDD()
2019-04-06 13:32:24 -Mapped "{[/charts/countDD/getCountDD],methods=[POST]}" onto public com.bootdo.charts.vo.CountDayVo com.bootdo.charts.controller.countDDController.getCountD(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo,javax.servlet.http.HttpServletRequest)
2019-04-06 13:32:24 -Mapped "{[/charts/countDD/tableDD],methods=[POST]}" onto public java.lang.String com.bootdo.charts.controller.countDDController.tableDD()
2019-04-06 13:32:24 -Mapped "{[/charts/countDD/exportCountDD],methods=[GET]}" onto public void com.bootdo.charts.controller.countDDController.exprotElecLog(com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-06 13:32:24 -Mapped "{[/charts/countMM/getCountMM],methods=[POST]}" onto public void com.bootdo.charts.controller.countMMController.getCountMM(org.springframework.ui.Model,com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo,javax.servlet.http.HttpServletRequest)
2019-04-06 13:32:24 -Mapped "{[/charts/countMM],methods=[GET]}" onto java.lang.String com.bootdo.charts.controller.countMMController.countMM()
2019-04-06 13:32:24 -Mapped "{[/charts/countMM/exportCountMM],methods=[GET]}" onto public void com.bootdo.charts.controller.countMMController.exprotElecLog(com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-06 13:32:24 -Mapped "{[/charts/countOwe],methods=[GET]}" onto java.lang.String com.bootdo.charts.controller.countOweController.countOwe()
2019-04-06 13:32:24 -Mapped "{[/charts/countOwe/getCountOwe],methods=[POST]}" onto public com.bootdo.charts.vo.CountOweVo com.bootdo.charts.controller.countOweController.getCountD(com.bootdo.elec.vo.ElecVo,com.bootdo.water.vo.WaterVo,com.bootdo.heat.vo.HeatVo,javax.servlet.http.HttpServletRequest)
2019-04-06 13:32:24 -Mapped "{[/charts/countRun],methods=[GET]}" onto java.lang.String com.bootdo.charts.controller.countRunController.countRun()
2019-04-06 13:32:24 -Mapped "{[/charts/countRun/getCountRun],methods=[POST]}" onto public int com.bootdo.charts.controller.countRunController.getCountD(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo)
2019-04-06 13:32:24 -Mapped "{[/charts/countRun/exportCountRun],methods=[GET]}" onto public void com.bootdo.charts.controller.countRunController.exprotElecLog(com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-06 13:32:24 -Mapped "{[/charts/countYY],methods=[GET]}" onto java.lang.String com.bootdo.charts.controller.countYYController.countYY()
2019-04-06 13:32:24 -Mapped "{[/charts/countYY/getCountYY],methods=[POST]}" onto public int com.bootdo.charts.controller.countYYController.getCountD(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo)
2019-04-06 13:32:24 -Mapped "{[/charts/countYY/exportCountYY],methods=[GET]}" onto public void com.bootdo.charts.controller.countYYController.exprotElecLog(com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-06 13:32:24 -Mapped "{[/common/dict/add],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.add()
2019-04-06 13:32:24 -Mapped "{[/common/dict/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.remove(java.lang.Long)
2019-04-06 13:32:24 -Mapped "{[/common/dict/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.remove(java.lang.Long[])
2019-04-06 13:32:24 -Mapped "{[/common/dict/update]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.update(com.bootdo.common.domain.DictDO)
2019-04-06 13:32:24 -Mapped "{[/common/dict/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.common.controller.DictController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-06 13:32:24 -Mapped "{[/common/dict/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.save(com.bootdo.common.domain.DictDO)
2019-04-06 13:32:24 -Mapped "{[/common/dict/type],methods=[GET]}" onto public java.util.List<com.bootdo.common.domain.DictDO> com.bootdo.common.controller.DictController.listType()
2019-04-06 13:32:24 -Mapped "{[/common/dict/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-06 13:32:24 -Mapped "{[/common/dict],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.dict()
2019-04-06 13:32:24 -Mapped "{[/common/dict/list/{type}],methods=[GET]}" onto public java.util.List<com.bootdo.common.domain.DictDO> com.bootdo.common.controller.DictController.listByType(java.lang.String)
2019-04-06 13:32:24 -Mapped "{[/common/dict/add/{type}/{description}],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.addD(org.springframework.ui.Model,java.lang.String,java.lang.String)
2019-04-06 13:32:24 -Mapped "{[/common/sysFile/add],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.FileController.add()
2019-04-06 13:32:24 -Mapped "{[/common/sysFile/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.remove(java.lang.Long,javax.servlet.http.HttpServletRequest)
2019-04-06 13:32:24 -Mapped "{[/common/sysFile/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.remove(java.lang.Long[])
2019-04-06 13:32:24 -Mapped "{[/common/sysFile/update]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.update(com.bootdo.common.domain.FileDO)
2019-04-06 13:32:24 -Mapped "{[/common/sysFile/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.common.controller.FileController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-06 13:32:24 -Mapped "{[/common/sysFile/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.save(com.bootdo.common.domain.FileDO)
2019-04-06 13:32:24 -Mapped "{[/common/sysFile/info/{id}]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.info(java.lang.Long)
2019-04-06 13:32:24 -Mapped "{[/common/sysFile/edit],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.FileController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-06 13:32:24 -Mapped "{[/common/sysFile/upload],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.FileController.upload(org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpServletRequest)
2019-04-06 13:32:24 -Mapped "{[/common/sysFile],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.FileController.sysFile(org.springframework.ui.Model)
2019-04-06 13:32:24 -Mapped "{[/common/generator/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.GeneratorController.update(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-06 13:32:24 -Mapped "{[/common/generator/list],methods=[GET]}" onto java.util.List<java.util.Map<java.lang.String, java.lang.Object>> com.bootdo.common.controller.GeneratorController.list()
2019-04-06 13:32:24 -Mapped "{[/common/generator/code/{tableName}]}" onto public void com.bootdo.common.controller.GeneratorController.code(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String) throws java.io.IOException
2019-04-06 13:32:24 -Mapped "{[/common/generator/edit],methods=[GET]}" onto public java.lang.String com.bootdo.common.controller.GeneratorController.edit(org.springframework.ui.Model)
2019-04-06 13:32:24 -Mapped "{[/common/generator/batchCode]}" onto public void com.bootdo.common.controller.GeneratorController.batchCode(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String) throws java.io.IOException
2019-04-06 13:32:24 -Mapped "{[/common/generator],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.GeneratorController.generator()
2019-04-06 13:32:24 -Mapped "{[/common/job/add],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.JobController.add()
2019-04-06 13:32:24 -Mapped "{[/common/job/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.remove(java.lang.Long)
2019-04-06 13:32:24 -Mapped "{[/common/job/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.remove(java.lang.Long[])
2019-04-06 13:32:24 -Mapped "{[/common/job/update],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.update(com.bootdo.common.domain.TaskDO)
2019-04-06 13:32:24 -Mapped "{[/common/job/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.common.controller.JobController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-06 13:32:24 -Mapped "{[/common/job/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.save(com.bootdo.common.domain.TaskDO)
2019-04-06 13:32:24 -Mapped "{[/common/job/info/{id}]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.info(java.lang.Long)
2019-04-06 13:32:24 -Mapped "{[/common/job/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.JobController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-06 13:32:24 -Mapped "{[/common/job/changeJobStatus],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.changeJobStatus(java.lang.Long,java.lang.String)
2019-04-06 13:32:24 -Mapped "{[/common/job],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.JobController.taskScheduleJob()
2019-04-06 13:32:24 -Mapped "{[/common/log/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.LogController.remove(java.lang.Long)
2019-04-06 13:32:24 -Mapped "{[/common/log],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.LogController.log()
2019-04-06 13:32:24 -Mapped "{[/common/log/list],methods=[GET]}" onto com.bootdo.common.domain.PageDO<com.bootdo.common.domain.LogDO> com.bootdo.common.controller.LogController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-06 13:32:24 -Mapped "{[/common/log/batchRemove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.LogController.batchRemove(java.lang.Long[])
2019-04-06 13:32:24 -Mapped "{[/common/long],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.LongController.Long()
2019-04-06 13:32:24 -Mapped "{[/common/time],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.TimeController.Time()
2019-04-06 13:32:24 -Mapped "{[/error]}" onto public com.bootdo.common.utils.R com.bootdo.common.exception.MainsiteErrorController.handleError(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-04-06 13:32:24 -Mapped "{[/error],produces=[text/html]}" onto public org.springframework.web.servlet.ModelAndView com.bootdo.common.exception.MainsiteErrorController.errorHtml(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-04-06 13:32:24 -Mapped "{[/elec/elec/add],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecController.add()
2019-04-06 13:32:24 -Mapped "{[/elec/elec/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.remove(java.lang.Long)
2019-04-06 13:32:24 -Mapped "{[/elec/elec/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.remove(java.lang.Long[])
2019-04-06 13:32:24 -Mapped "{[/elec/elec/update],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.update(com.bootdo.elec.domain.ElecDO)
2019-04-06 13:32:24 -Mapped "{[/elec/elec/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.elec.controller.ElecController.list(java.util.Map<java.lang.String, java.lang.Object>,com.bootdo.elec.domain.ElecDO)
2019-04-06 13:32:24 -Mapped "{[/elec/elec/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.save(com.bootdo.elec.domain.ElecDO)
2019-04-06 13:32:24 -Mapped "{[/elec/elec/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-06 13:32:24 -Mapped "{[/elec/elec],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecController.Elec()
2019-04-06 13:32:24 -Mapped "{[/elec/elec/exprotElec],methods=[GET]}" onto public void com.bootdo.elec.controller.ElecController.exprotExcel(com.bootdo.elec.vo.ElecVo,javax.servlet.http.HttpServletResponse)
2019-04-06 13:32:24 -Mapped "{[/elec/elecInto/exprotElecIntoExcel],methods=[GET]}" onto public void com.bootdo.elec.controller.ElecIntoController.exprotExcel(com.bootdo.elec.vo.ElecVo,javax.servlet.http.HttpServletResponse)
2019-04-06 13:32:24 -Mapped "{[/elec/elecInto],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecIntoController.ElecInto()
2019-04-06 13:32:24 -Mapped "{[/elec/elecInto/importElecIntoExcel],methods=[POST]}" onto public java.util.Map<java.lang.String, java.lang.Object> com.bootdo.elec.controller.ElecIntoController.importElecIntoExcel(org.springframework.web.multipart.MultipartFile,com.bootdo.elec.vo.ElecVo) throws java.lang.Exception
2019-04-06 13:32:24 -Mapped "{[/elec/elecPrice/add],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecPriceController.add()
2019-04-06 13:32:24 -Mapped "{[/elec/elecPrice/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecPriceController.remove(java.lang.Long)
2019-04-06 13:32:24 -Mapped "{[/elec/elecPrice/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecPriceController.remove(java.lang.Long[])
2019-04-06 13:32:24 -Mapped "{[/elec/elecPrice/update]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecPriceController.update(com.bootdo.elec.domain.ElecPriceDO)
2019-04-06 13:32:24 -Mapped "{[/elec/elecPrice/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.elec.controller.ElecPriceController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-06 13:32:24 -Mapped "{[/elec/elecPrice/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecPriceController.save(com.bootdo.elec.domain.ElecPriceDO,com.bootdo.elec.domain.ElecDO)
2019-04-06 13:32:24 -Mapped "{[/elec/elecPrice/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecPriceController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-06 13:32:24 -Mapped "{[/elec/elecPrice],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecPriceController.ElecPrice()
2019-04-06 13:32:24 -Mapped "{[/elec/elecUpLoad],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecUpLoadController.Elec()
2019-04-06 13:32:24 -Mapped "{[/elec/elecUpLoad/importElecExcel],methods=[POST]}" onto public java.util.Map<java.lang.String, java.lang.Object> com.bootdo.elec.controller.ElecUpLoadController.importElecExcel(org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpServletRequest) throws java.lang.Exception
2019-04-06 13:32:24 -Mapped "{[/heat/heat/add],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatController.add()
2019-04-06 13:32:24 -Mapped "{[/heat/heat/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatController.remove(java.lang.Integer)
2019-04-06 13:32:24 -Mapped "{[/heat/heat/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatController.remove(java.lang.Integer[])
2019-04-06 13:32:24 -Mapped "{[/heat/heat/update]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatController.update(com.bootdo.heat.domain.HeatDO)
2019-04-06 13:32:24 -Mapped "{[/heat/heat/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.heat.controller.HeatController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-06 13:32:24 -Mapped "{[/heat/heat/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatController.save(com.bootdo.heat.domain.HeatDO)
2019-04-06 13:32:24 -Mapped "{[/heat/heat/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatController.edit(java.lang.Integer,org.springframework.ui.Model)
2019-04-06 13:32:24 -Mapped "{[/heat/heat/exprotHeat],methods=[GET]}" onto public void com.bootdo.heat.controller.HeatController.exprotExcel(com.bootdo.heat.vo.HeatVo,javax.servlet.http.HttpServletResponse)
2019-04-06 13:32:24 -Mapped "{[/heat/heat],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatController.Heat()
2019-04-06 13:32:24 -Mapped "{[/heat/heatInto/exprotHeatIntoExcel],methods=[GET]}" onto public void com.bootdo.heat.controller.HeatIntoController.exprotExcel(com.bootdo.heat.vo.HeatVo,javax.servlet.http.HttpServletResponse)
2019-04-06 13:32:24 -Mapped "{[/heat/heatInto],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatIntoController.HeatInto()
2019-04-06 13:32:24 -Mapped "{[/heat/heatPrice/add],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatPriceController.add()
2019-04-06 13:32:24 -Mapped "{[/heat/heatPrice/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatPriceController.remove(java.lang.Long)
2019-04-06 13:32:24 -Mapped "{[/heat/heatPrice/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatPriceController.remove(java.lang.Long[])
2019-04-06 13:32:24 -Mapped "{[/heat/heatPrice/update]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatPriceController.update(com.bootdo.heat.domain.HeatPriceDO)
2019-04-06 13:32:24 -Mapped "{[/heat/heatPrice/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.heat.controller.HeatPriceController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-06 13:32:24 -Mapped "{[/heat/heatPrice/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatPriceController.save(com.bootdo.heat.domain.HeatPriceDO)
2019-04-06 13:32:24 -Mapped "{[/heat/heatPrice/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatPriceController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-06 13:32:24 -Mapped "{[/heat/heatPrice],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatPriceController.HeatPrice()
2019-04-06 13:32:24 -Mapped "{[/heat/heatUpLoad/createHeatExcel],methods=[POST]}" onto public java.lang.String com.bootdo.heat.controller.HeatUpLoadController.createHeatExcel(com.bootdo.heat.domain.HeatDO) throws java.lang.Exception
2019-04-06 13:32:24 -Mapped "{[/heat/heatUpLoad/importHeatExcel]}" onto public java.lang.String com.bootdo.heat.controller.HeatUpLoadController.importHeatExcel(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)
2019-04-06 13:32:24 -Mapped "{[/heat/heatUpLoad],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatUpLoadController.HeatUpLoad()
2019-04-06 13:32:24 -Mapped "{[/heat/heatUpLoad/exprotHeatExcel],methods=[GET]}" onto public void com.bootdo.heat.controller.HeatUpLoadController.exprotHeatExcel(com.bootdo.heat.vo.HeatVo,javax.servlet.http.HttpServletResponse)
2019-04-06 13:32:24 -Mapped "{[/moneyList/moneyList/queryAllUserName],methods=[POST]}" onto public java.util.List<com.bootdo.moneyList.damain.MoneyListDO> com.bootdo.moneyList.controller.MoneyListController.getAllUserName(com.bootdo.moneyList.damain.MoneyListDO)
2019-04-06 13:32:24 -Mapped "{[/moneyList/moneyList],methods=[GET]}" onto java.lang.String com.bootdo.moneyList.controller.MoneyListController.MoneyList()
2019-04-06 13:32:24 -Mapped "{[/moneyList/moneyList/updateMoney],methods=[POST]}" onto public java.util.List<com.bootdo.moneyList.damain.MoneyListDO> com.bootdo.moneyList.controller.MoneyListController.updateMoney(com.bootdo.moneyList.damain.MoneyListDO)
2019-04-06 13:32:24 -Mapped "{[/moneyList/moneyList/queryAllUser],methods=[POST]}" onto public java.util.List<com.bootdo.moneyList.damain.MoneyListDO> com.bootdo.moneyList.controller.MoneyListController.queryAllUser(com.bootdo.moneyList.damain.MoneyListDO)
2019-04-06 13:32:24 -Mapped "{[/moneyLog/elecLog/add],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.ElecLogController.add()
2019-04-06 13:32:24 -Mapped "{[/moneyLog/elecLog/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.ElecLogController.remove(java.lang.Long)
2019-04-06 13:32:24 -Mapped "{[/moneyLog/elecLog/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.ElecLogController.remove(java.lang.Long[])
2019-04-06 13:32:24 -Mapped "{[/moneyLog/elecLog/update]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.ElecLogController.update(com.bootdo.moneyLog.domain.ElecLogDO)
2019-04-06 13:32:24 -Mapped "{[/moneyLog/elecLog/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.moneyLog.controller.ElecLogController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-06 13:32:24 -Mapped "{[/moneyLog/elecLog/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.ElecLogController.save(com.bootdo.moneyLog.domain.ElecLogDO)
2019-04-06 13:32:24 -Mapped "{[/moneyLog/elecLog/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.ElecLogController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-06 13:32:24 -Mapped "{[/moneyLog/elecLog],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.ElecLogController.moneyLog()
2019-04-06 13:32:24 -Mapped "{[/moneyLog/elecLog/exprotElecLog],methods=[GET]}" onto public void com.bootdo.moneyLog.controller.ElecLogController.exprotElecLog(com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-06 13:32:24 -Mapped "{[/moneyLog/heatLog/add],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.HeatLogController.add()
2019-04-06 13:32:24 -Mapped "{[/moneyLog/heatLog/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.HeatLogController.remove(java.lang.Long)
2019-04-06 13:32:24 -Mapped "{[/moneyLog/heatLog/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.HeatLogController.remove(java.lang.Long[])
2019-04-06 13:32:24 -Mapped "{[/moneyLog/heatLog/update]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.HeatLogController.update(com.bootdo.moneyLog.domain.HeatLogDO)
2019-04-06 13:32:24 -Mapped "{[/moneyLog/heatLog/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.moneyLog.controller.HeatLogController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-06 13:32:24 -Mapped "{[/moneyLog/heatLog/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.HeatLogController.save(com.bootdo.moneyLog.domain.HeatLogDO)
2019-04-06 13:32:24 -Mapped "{[/moneyLog/heatLog/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.HeatLogController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-06 13:32:24 -Mapped "{[/moneyLog/heatLog/exprotHeatLog],methods=[GET]}" onto public void com.bootdo.moneyLog.controller.HeatLogController.exprotHeatLog(com.bootdo.moneyLog.vo.HeatLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-06 13:32:24 -Mapped "{[/moneyLog/heatLog],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.HeatLogController.HeatLog()
2019-04-06 13:32:24 -Mapped "{[/moneyLog/waterLog/add],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.WaterLogController.add()
2019-04-06 13:32:24 -Mapped "{[/moneyLog/waterLog/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.WaterLogController.remove(java.lang.Long)
2019-04-06 13:32:24 -Mapped "{[/moneyLog/waterLog/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.WaterLogController.remove(java.lang.Long[])
2019-04-06 13:32:24 -Mapped "{[/moneyLog/waterLog/update]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.WaterLogController.update(com.bootdo.moneyLog.domain.WaterLogDO)
2019-04-06 13:32:24 -Mapped "{[/moneyLog/waterLog/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.moneyLog.controller.WaterLogController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-06 13:32:24 -Mapped "{[/moneyLog/waterLog/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.WaterLogController.save(com.bootdo.moneyLog.domain.WaterLogDO,javax.servlet.http.HttpServletRequest)
2019-04-06 13:32:24 -Mapped "{[/moneyLog/waterLog/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.WaterLogController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-06 13:32:24 -Mapped "{[/moneyLog/waterLog],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.WaterLogController.WaterLog()
2019-04-06 13:32:24 -Mapped "{[/moneyLog/waterLog/exprotWaterLog],methods=[GET]}" onto public void com.bootdo.moneyLog.controller.WaterLogController.exprotWaterLog(com.bootdo.moneyLog.vo.WaterLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-06 13:32:24 -Mapped "{[/oa/notify/add],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.add()
2019-04-06 13:32:24 -Mapped "{[/oa/notify/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.remove(java.lang.Long)
2019-04-06 13:32:24 -Mapped "{[/oa/notify/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.remove(java.lang.Long[])
2019-04-06 13:32:24 -Mapped "{[/oa/notify/update]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.update(com.bootdo.oa.domain.NotifyDO)
2019-04-06 13:32:24 -Mapped "{[/oa/notify/read/{id}],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.read(java.lang.Long,org.springframework.ui.Model)
2019-04-06 13:32:24 -Mapped "{[/oa/notify/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.oa.controller.NotifyController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-06 13:32:24 -Mapped "{[/oa/notify/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.save(com.bootdo.oa.domain.NotifyDO)
2019-04-06 13:32:24 -Mapped "{[/oa/notify/message],methods=[GET]}" onto com.bootdo.common.utils.PageUtils com.bootdo.oa.controller.NotifyController.message()
2019-04-06 13:32:24 -Mapped "{[/oa/notify/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-06 13:32:24 -Mapped "{[/oa/notify/selfNotify],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.selefNotify()
2019-04-06 13:32:24 -Mapped "{[/oa/notify/selfList],methods=[GET]}" onto com.bootdo.common.utils.PageUtils com.bootdo.oa.controller.NotifyController.selfList(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-06 13:32:24 -Mapped "{[/oa/notify],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.oaNotify()
2019-04-06 13:32:24 -Mapped "{[/print/print/add],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.add()
2019-04-06 13:32:24 -Mapped "{[/print/print/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.print.controller.PrintController.remove(java.lang.Long)
2019-04-06 13:32:24 -Mapped "{[/print/print/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.print.controller.PrintController.remove(java.lang.Long[])
2019-04-06 13:32:24 -Mapped "{[/print/print/update]}" onto public com.bootdo.common.utils.R com.bootdo.print.controller.PrintController.update(com.bootdo.print.domain.PrintDO)
2019-04-06 13:32:24 -Mapped "{[/print/print/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.print.controller.PrintController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-06 13:32:24 -Mapped "{[/print/print/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.print.controller.PrintController.save(java.lang.String,com.bootdo.print.domain.PrintDO)
2019-04-06 13:32:24 -Mapped "{[/print/print/printEdit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.printEdit(java.lang.Long,org.springframework.ui.Model)
2019-04-06 13:32:24 -Mapped "{[/print/print/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-06 13:32:24 -Mapped "{[/print/print],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.Print()
2019-04-06 13:32:24 -Mapped "{[/print/print/exprotPrint],methods=[GET]}" onto public void com.bootdo.print.controller.PrintController.exprotPrint(com.bootdo.print.vo.PrintVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-06 13:32:24 -Mapped "{[/system/sysDept/add/{pId}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.add(java.lang.Long,org.springframework.ui.Model)
2019-04-06 13:32:24 -Mapped "{[/system/sysDept/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.remove(java.lang.Long)
2019-04-06 13:32:24 -Mapped "{[/system/sysDept/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.remove(java.lang.Long[])
2019-04-06 13:32:24 -Mapped "{[/system/sysDept/update]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.update(com.bootdo.system.domain.DeptDO)
2019-04-06 13:32:24 -Mapped "{[/system/sysDept/list],methods=[GET]}" onto public java.util.List<com.bootdo.system.domain.DeptDO> com.bootdo.system.controller.DeptController.list()
2019-04-06 13:32:24 -Mapped "{[/system/sysDept/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.save(com.bootdo.system.domain.DeptDO)
2019-04-06 13:32:24 -Mapped "{[/system/sysDept/tree],methods=[GET]}" onto public com.bootdo.common.domain.Tree<com.bootdo.system.domain.DeptDO> com.bootdo.system.controller.DeptController.tree()
2019-04-06 13:32:24 -Mapped "{[/system/sysDept],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.dept()
2019-04-06 13:32:24 -Mapped "{[/system/sysDept/treeView],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.treeView()
2019-04-06 13:32:24 -Mapped "{[/system/sysDept/edit/{deptId}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-06 13:32:24 -Mapped "{[/index],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.index(org.springframework.ui.Model)
2019-04-06 13:32:24 -Mapped "{[/main],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.main()
2019-04-06 13:32:24 -Mapped "{[/logout],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.logout()
2019-04-06 13:32:24 -Mapped "{[/getVerify],methods=[GET]}" onto public void com.bootdo.system.controller.LoginController.getVerify(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-04-06 13:32:24 -Mapped "{[/login],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.LoginController.ajaxLogin(java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest)
2019-04-06 13:32:24 -Mapped "{[/ || ],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.welcome(org.springframework.ui.Model)
2019-04-06 13:32:24 -Mapped "{[/login],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.login(org.springframework.ui.Model)
2019-04-06 13:32:24 -Mapped "{[/sys/menu/add/{pId}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.MenuController.add(org.springframework.ui.Model,java.lang.Long)
2019-04-06 13:32:24 -Mapped "{[/sys/menu/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.MenuController.remove(java.lang.Long)
2019-04-06 13:32:24 -Mapped "{[/sys/menu/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.MenuController.update(com.bootdo.system.domain.MenuDO)
2019-04-06 13:32:24 -Mapped "{[/sys/menu/list]}" onto java.util.List<com.bootdo.system.domain.MenuDO> com.bootdo.system.controller.MenuController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-06 13:32:24 -Mapped "{[/sys/menu/save],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.MenuController.save(com.bootdo.system.domain.MenuDO)
2019-04-06 13:32:24 -Mapped "{[/sys/menu/tree/{roleId}],methods=[GET]}" onto com.bootdo.common.domain.Tree<com.bootdo.system.domain.MenuDO> com.bootdo.system.controller.MenuController.tree(java.lang.Long)
2019-04-06 13:32:24 -Mapped "{[/sys/menu/tree],methods=[GET]}" onto com.bootdo.common.domain.Tree<com.bootdo.system.domain.MenuDO> com.bootdo.system.controller.MenuController.tree()
2019-04-06 13:32:24 -Mapped "{[/sys/menu],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.MenuController.menu(org.springframework.ui.Model)
2019-04-06 13:32:24 -Mapped "{[/sys/menu/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.MenuController.edit(org.springframework.ui.Model,java.lang.Long)
2019-04-06 13:32:24 -Mapped "{[/sys/role/add],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.RoleController.add()
2019-04-06 13:32:24 -Mapped "{[/sys/role/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.update(com.bootdo.system.domain.RoleDO)
2019-04-06 13:32:24 -Mapped "{[/sys/role/list],methods=[GET]}" onto java.util.List<com.bootdo.system.domain.RoleDO> com.bootdo.system.controller.RoleController.list()
2019-04-06 13:32:24 -Mapped "{[/sys/role/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.save(java.lang.Long)
2019-04-06 13:32:24 -Mapped "{[/sys/role/save],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.save(com.bootdo.system.domain.RoleDO)
2019-04-06 13:32:24 -Mapped "{[/sys/role/batchRemove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.batchRemove(java.lang.Long[])
2019-04-06 13:32:24 -Mapped "{[/sys/role],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.RoleController.role()
2019-04-06 13:32:24 -Mapped "{[/sys/role/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.RoleController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-06 13:32:24 -Mapped "{[/sys/online/list]}" onto public java.util.List<com.bootdo.system.domain.UserOnline> com.bootdo.system.controller.SessionController.list()
2019-04-06 13:32:24 -Mapped "{[/sys/online],methods=[GET]}" onto public java.lang.String com.bootdo.system.controller.SessionController.online()
2019-04-06 13:32:24 -Mapped "{[/sys/online/forceLogout/{sessionId}]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.SessionController.forceLogout(java.lang.String,org.springframework.web.servlet.mvc.support.RedirectAttributes)
2019-04-06 13:32:24 -Mapped "{[/sys/online/sessionList]}" onto public java.util.Collection<org.apache.shiro.session.Session> com.bootdo.system.controller.SessionController.sessionList()
2019-04-06 13:32:24 -Mapped "{[/sys/user/exit],methods=[POST]}" onto boolean com.bootdo.system.controller.UserController.exit(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-06 13:32:24 -Mapped "{[/sys/user/add],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.add(org.springframework.ui.Model)
2019-04-06 13:32:24 -Mapped "{[/sys/user/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.remove(java.lang.Long)
2019-04-06 13:32:24 -Mapped "{[/sys/user/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.update(com.bootdo.system.domain.UserDO)
2019-04-06 13:32:24 -Mapped "{[/sys/user/list],methods=[GET]}" onto com.bootdo.common.utils.PageUtils com.bootdo.system.controller.UserController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-06 13:32:24 -Mapped "{[/sys/user/save],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.save(com.bootdo.system.domain.UserDO)
2019-04-06 13:32:24 -Mapped "{[/sys/user/batchRemove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.batchRemove(java.lang.Long[])
2019-04-06 13:32:24 -Mapped "{[/sys/user/tree],methods=[GET]}" onto public com.bootdo.common.domain.Tree<com.bootdo.system.domain.DeptDO> com.bootdo.system.controller.UserController.tree()
2019-04-06 13:32:24 -Mapped "{[/sys/user/treeView],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.treeView()
2019-04-06 13:32:24 -Mapped "{[/sys/user/resetPwd],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.resetPwd(com.bootdo.system.vo.UserVO)
2019-04-06 13:32:24 -Mapped "{[/sys/user/resetPwd/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.resetPwd(java.lang.Long,org.springframework.ui.Model)
2019-04-06 13:32:24 -Mapped "{[/sys/user/uploadImg],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.uploadImg(org.springframework.web.multipart.MultipartFile,java.lang.String,javax.servlet.http.HttpServletRequest)
2019-04-06 13:32:24 -Mapped "{[/sys/user/updatePeronal],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.updatePeronal(com.bootdo.system.domain.UserDO)
2019-04-06 13:32:24 -Mapped "{[/sys/user/adminResetPwd],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.adminResetPwd(com.bootdo.system.vo.UserVO)
2019-04-06 13:32:24 -Mapped "{[/sys/user/personal],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.personal(org.springframework.ui.Model)
2019-04-06 13:32:24 -Mapped "{[/sys/user/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.edit(org.springframework.ui.Model,java.lang.Long)
2019-04-06 13:32:24 -Mapped "{[/sys/user],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.user(org.springframework.ui.Model)
2019-04-06 13:32:24 -Mapped "{[/file/downImport/{importType}],methods=[GET]}" onto public void com.bootdo.temple.controller.TempletController.downImport(javax.servlet.http.HttpServletResponse,java.lang.String)
2019-04-06 13:32:24 -Mapped "{[/water/water/add],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterController.add()
2019-04-06 13:32:24 -Mapped "{[/water/water/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterController.remove(java.lang.Long)
2019-04-06 13:32:24 -Mapped "{[/water/water/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterController.remove(java.lang.Long[])
2019-04-06 13:32:24 -Mapped "{[/water/water/update]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterController.update(com.bootdo.water.domain.WaterDO)
2019-04-06 13:32:24 -Mapped "{[/water/water/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.water.controller.WaterController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-06 13:32:24 -Mapped "{[/water/water/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterController.save(com.bootdo.water.domain.WaterDO)
2019-04-06 13:32:24 -Mapped "{[/water/water/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-06 13:32:24 -Mapped "{[/water/water/exprotWater],methods=[GET]}" onto public void com.bootdo.water.controller.WaterController.exprotExcel(com.bootdo.water.vo.WaterVo,javax.servlet.http.HttpServletResponse)
2019-04-06 13:32:24 -Mapped "{[/water/water],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterController.Water()
2019-04-06 13:32:24 -Mapped "{[/water/waterInto/exprotWaterIntoExcel],methods=[GET]}" onto public void com.bootdo.water.controller.WaterIntoController.exprotExcel(com.bootdo.water.vo.WaterVo,javax.servlet.http.HttpServletResponse)
2019-04-06 13:32:24 -Mapped "{[/water/waterInto],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterIntoController.WaterInto()
2019-04-06 13:32:24 -Mapped "{[/water/waterPrice/add],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterPriceController.add()
2019-04-06 13:32:24 -Mapped "{[/water/waterPrice/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterPriceController.remove(java.lang.Long)
2019-04-06 13:32:24 -Mapped "{[/water/waterPrice/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterPriceController.remove(java.lang.Long[])
2019-04-06 13:32:24 -Mapped "{[/water/waterPrice/update]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterPriceController.update(com.bootdo.water.domain.WaterPriceDO)
2019-04-06 13:32:24 -Mapped "{[/water/waterPrice/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.water.controller.WaterPriceController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-06 13:32:24 -Mapped "{[/water/waterPrice/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterPriceController.save(com.bootdo.water.domain.WaterPriceDO)
2019-04-06 13:32:24 -Mapped "{[/water/waterPrice/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterPriceController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-06 13:32:24 -Mapped "{[/water/waterPrice],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterPriceController.WaterPrice()
2019-04-06 13:32:24 -Mapped "{[/water/waterUpLoad/exprotWaterExcel],methods=[GET]}" onto public void com.bootdo.water.controller.WaterUpLoadController.exprotWaterExcel(com.bootdo.water.vo.WaterVo,javax.servlet.http.HttpServletResponse)
2019-04-06 13:32:24 -Mapped "{[/water/waterUpLoad/createWaterExcel],methods=[POST]}" onto public java.lang.String com.bootdo.water.controller.WaterUpLoadController.createWaterExcel(com.bootdo.water.domain.WaterDO) throws java.lang.Exception
2019-04-06 13:32:24 -Mapped "{[/water/waterUpLoad/importWaterExcel]}" onto public java.lang.String com.bootdo.water.controller.WaterUpLoadController.importWaterExcel(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)
2019-04-06 13:32:24 -Mapped "{[/water/waterUpLoad],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterUpLoadController.WaterUpLoad()
2019-04-06 13:32:24 -Mapped "{[/v2/api-docs],methods=[GET],produces=[application/json || application/hal+json]}" onto public org.springframework.http.ResponseEntity<springfox.documentation.spring.web.json.Json> springfox.documentation.swagger2.web.Swagger2Controller.getDocumentation(java.lang.String,javax.servlet.http.HttpServletRequest)
2019-04-06 13:32:24 -Mapped "{[/swagger-resources/configuration/security]}" onto org.springframework.http.ResponseEntity<springfox.documentation.swagger.web.SecurityConfiguration> springfox.documentation.swagger.web.ApiResourceController.securityConfiguration()
2019-04-06 13:32:24 -Mapped "{[/swagger-resources/configuration/ui]}" onto org.springframework.http.ResponseEntity<springfox.documentation.swagger.web.UiConfiguration> springfox.documentation.swagger.web.ApiResourceController.uiConfiguration()
2019-04-06 13:32:24 -Mapped "{[/swagger-resources]}" onto org.springframework.http.ResponseEntity<java.util.List<springfox.documentation.swagger.web.SwaggerResource>> springfox.documentation.swagger.web.ApiResourceController.swaggerResources()
2019-04-06 13:32:24 -Initializing ExecutorService  'messageBrokerTaskScheduler'
2019-04-06 13:32:25 -Mapped URL path [/endpointChat/**] onto handler of type [class org.springframework.web.socket.sockjs.support.SockJsHttpRequestHandler]
2019-04-06 13:32:25 -Initializing ExecutorService  'brokerChannelExecutor'
2019-04-06 13:32:25 -Mapped URL path [/**/favicon.ico] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-04-06 13:32:26 -Looking for @ControllerAdvice: org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@6fdbe764: startup date [Sat Apr 06 13:32:05 CST 2019]; root of context hierarchy
2019-04-06 13:32:26 -Mapped URL path [/webjars/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-04-06 13:32:26 -Mapped URL path [/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-04-06 13:32:26 -Mapped URL path [/files/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-04-06 13:32:26 -Detected @ExceptionHandler methods in BDExceptionHandler
2019-04-06 13:32:26 -[THYMELEAF][main] Template Mode 'LEGACYHTML5' is deprecated. Using Template Mode 'HTML' instead.
2019-04-06 13:32:28 -Registering beans for JMX exposure on startup
2019-04-06 13:32:28 -Bean with name 'dataSource' has been autodetected for JMX exposure
2019-04-06 13:32:28 -Located MBean 'dataSource': registering with JMX server as MBean [com.alibaba.druid.pool:name=dataSource,type=DruidDataSource]
2019-04-06 13:32:28 -Starting beans in phase 2147483647
2019-04-06 13:32:28 -Context refreshed
2019-04-06 13:32:29 -Found 1 custom documentation plugin(s)
2019-04-06 13:32:29 -Scanning for api listing references
2019-04-06 13:32:33 -Generating unique operation named: exprotElecLogUsingGET_1
2019-04-06 13:32:33 -Generating unique operation named: getCountDUsingPOST_1
2019-04-06 13:32:33 -Generating unique operation named: exprotElecLogUsingGET_2
2019-04-06 13:32:33 -Generating unique operation named: getCountDUsingPOST_2
2019-04-06 13:32:33 -Generating unique operation named: exprotElecLogUsingGET_3
2019-04-06 13:32:33 -Generating unique operation named: getCountDUsingPOST_3
2019-04-06 13:32:33 -Generating unique operation named: removeUsingPOST_1
2019-04-06 13:32:33 -Generating unique operation named: addUsingGET_1
2019-04-06 13:32:33 -Generating unique operation named: editUsingGET_1
2019-04-06 13:32:33 -Generating unique operation named: listUsingGET_1
2019-04-06 13:32:33 -Generating unique operation named: removeUsingPOST_2
2019-04-06 13:32:33 -Generating unique operation named: removeUsingPOST_3
2019-04-06 13:32:33 -Generating unique operation named: saveUsingPOST_1
2019-04-06 13:32:33 -Generating unique operation named: updateUsingGET_1
2019-04-06 13:32:33 -Generating unique operation named: updateUsingHEAD_1
2019-04-06 13:32:33 -Generating unique operation named: updateUsingPOST_1
2019-04-06 13:32:33 -Generating unique operation named: updateUsingPUT_1
2019-04-06 13:32:33 -Generating unique operation named: updateUsingPATCH_1
2019-04-06 13:32:33 -Generating unique operation named: updateUsingDELETE_1
2019-04-06 13:32:33 -Generating unique operation named: updateUsingOPTIONS_1
2019-04-06 13:32:33 -Generating unique operation named: updateUsingTRACE_1
2019-04-06 13:32:33 -Generating unique operation named: addUsingGET_2
2019-04-06 13:32:33 -Generating unique operation named: editUsingGET_2
2019-04-06 13:32:33 -Generating unique operation named: listUsingGET_2
2019-04-06 13:32:33 -Generating unique operation named: removeUsingPOST_4
2019-04-06 13:32:33 -Generating unique operation named: removeUsingPOST_5
2019-04-06 13:32:33 -Generating unique operation named: saveUsingPOST_2
2019-04-06 13:32:33 -Generating unique operation named: updateUsingPOST_2
2019-04-06 13:32:33 -Generating unique operation named: exprotExcelUsingGET_1
2019-04-06 13:32:33 -Generating unique operation named: addUsingGET_3
2019-04-06 13:32:33 -Generating unique operation named: editUsingGET_3
2019-04-06 13:32:33 -Generating unique operation named: exprotElecLogUsingGET_4
2019-04-06 13:32:33 -Generating unique operation named: listUsingGET_3
2019-04-06 13:32:33 -Generating unique operation named: removeUsingPOST_6
2019-04-06 13:32:33 -Generating unique operation named: removeUsingPOST_7
2019-04-06 13:32:33 -Generating unique operation named: saveUsingPOST_3
2019-04-06 13:32:33 -Generating unique operation named: updateUsingGET_2
2019-04-06 13:32:33 -Generating unique operation named: updateUsingHEAD_2
2019-04-06 13:32:33 -Generating unique operation named: updateUsingPOST_3
2019-04-06 13:32:33 -Generating unique operation named: updateUsingPUT_2
2019-04-06 13:32:33 -Generating unique operation named: updateUsingPATCH_2
2019-04-06 13:32:33 -Generating unique operation named: updateUsingDELETE_2
2019-04-06 13:32:33 -Generating unique operation named: updateUsingOPTIONS_2
2019-04-06 13:32:33 -Generating unique operation named: updateUsingTRACE_2
2019-04-06 13:32:33 -Generating unique operation named: addUsingGET_4
2019-04-06 13:32:33 -Generating unique operation named: editUsingGET_4
2019-04-06 13:32:33 -Generating unique operation named: listUsingGET_4
2019-04-06 13:32:33 -Generating unique operation named: removeUsingPOST_8
2019-04-06 13:32:33 -Generating unique operation named: removeUsingPOST_9
2019-04-06 13:32:33 -Generating unique operation named: saveUsingPOST_4
2019-04-06 13:32:33 -Generating unique operation named: updateUsingGET_3
2019-04-06 13:32:33 -Generating unique operation named: updateUsingHEAD_3
2019-04-06 13:32:33 -Generating unique operation named: updateUsingPOST_4
2019-04-06 13:32:33 -Generating unique operation named: updateUsingPUT_3
2019-04-06 13:32:33 -Generating unique operation named: updateUsingPATCH_3
2019-04-06 13:32:33 -Generating unique operation named: updateUsingDELETE_3
2019-04-06 13:32:33 -Generating unique operation named: updateUsingOPTIONS_3
2019-04-06 13:32:33 -Generating unique operation named: updateUsingTRACE_3
2019-04-06 13:32:33 -Generating unique operation named: ElecUsingGET_1
2019-04-06 13:32:33 -Generating unique operation named: addUsingGET_5
2019-04-06 13:32:33 -Generating unique operation named: editUsingGET_5
2019-04-06 13:32:33 -Generating unique operation named: listUsingGET_5
2019-04-06 13:32:33 -Generating unique operation named: removeUsingPOST_10
2019-04-06 13:32:33 -Generating unique operation named: removeUsingPOST_11
2019-04-06 13:32:33 -Generating unique operation named: saveUsingPOST_5
2019-04-06 13:32:33 -Generating unique operation named: updateUsingGET_4
2019-04-06 13:32:33 -Generating unique operation named: updateUsingHEAD_4
2019-04-06 13:32:33 -Generating unique operation named: updateUsingPOST_5
2019-04-06 13:32:33 -Generating unique operation named: updateUsingPUT_4
2019-04-06 13:32:33 -Generating unique operation named: updateUsingPATCH_4
2019-04-06 13:32:33 -Generating unique operation named: updateUsingDELETE_4
2019-04-06 13:32:33 -Generating unique operation named: updateUsingOPTIONS_4
2019-04-06 13:32:33 -Generating unique operation named: updateUsingTRACE_4
2019-04-06 13:32:34 -Generating unique operation named: editUsingGET_6
2019-04-06 13:32:34 -Generating unique operation named: listUsingGET_6
2019-04-06 13:32:34 -Generating unique operation named: updateUsingPOST_6
2019-04-06 13:32:34 -Generating unique operation named: addUsingGET_6
2019-04-06 13:32:34 -Generating unique operation named: editUsingGET_7
2019-04-06 13:32:34 -Generating unique operation named: exprotExcelUsingGET_2
2019-04-06 13:32:34 -Generating unique operation named: listUsingGET_7
2019-04-06 13:32:34 -Generating unique operation named: removeUsingPOST_12
2019-04-06 13:32:34 -Generating unique operation named: removeUsingPOST_13
2019-04-06 13:32:34 -Generating unique operation named: saveUsingPOST_6
2019-04-06 13:32:34 -Generating unique operation named: updateUsingGET_5
2019-04-06 13:32:34 -Generating unique operation named: updateUsingHEAD_5
2019-04-06 13:32:34 -Generating unique operation named: updateUsingPOST_7
2019-04-06 13:32:34 -Generating unique operation named: updateUsingPUT_5
2019-04-06 13:32:34 -Generating unique operation named: updateUsingPATCH_5
2019-04-06 13:32:34 -Generating unique operation named: updateUsingDELETE_5
2019-04-06 13:32:34 -Generating unique operation named: updateUsingOPTIONS_5
2019-04-06 13:32:34 -Generating unique operation named: updateUsingTRACE_5
2019-04-06 13:32:34 -Generating unique operation named: exprotExcelUsingGET_3
2019-04-06 13:32:34 -Generating unique operation named: addUsingGET_7
2019-04-06 13:32:34 -Generating unique operation named: editUsingGET_8
2019-04-06 13:32:34 -Generating unique operation named: listUsingGET_8
2019-04-06 13:32:34 -Generating unique operation named: removeUsingPOST_14
2019-04-06 13:32:34 -Generating unique operation named: removeUsingPOST_15
2019-04-06 13:32:34 -Generating unique operation named: saveUsingPOST_7
2019-04-06 13:32:34 -Generating unique operation named: updateUsingGET_6
2019-04-06 13:32:34 -Generating unique operation named: updateUsingHEAD_6
2019-04-06 13:32:34 -Generating unique operation named: updateUsingPOST_8
2019-04-06 13:32:34 -Generating unique operation named: updateUsingPUT_6
2019-04-06 13:32:34 -Generating unique operation named: updateUsingPATCH_6
2019-04-06 13:32:34 -Generating unique operation named: updateUsingDELETE_6
2019-04-06 13:32:34 -Generating unique operation named: updateUsingOPTIONS_6
2019-04-06 13:32:34 -Generating unique operation named: updateUsingTRACE_6
2019-04-06 13:32:34 -Generating unique operation named: addUsingGET_8
2019-04-06 13:32:34 -Generating unique operation named: editUsingGET_9
2019-04-06 13:32:34 -Generating unique operation named: listUsingGET_9
2019-04-06 13:32:34 -Generating unique operation named: removeUsingPOST_16
2019-04-06 13:32:34 -Generating unique operation named: removeUsingPOST_17
2019-04-06 13:32:34 -Generating unique operation named: saveUsingPOST_8
2019-04-06 13:32:34 -Generating unique operation named: updateUsingGET_7
2019-04-06 13:32:34 -Generating unique operation named: updateUsingHEAD_7
2019-04-06 13:32:34 -Generating unique operation named: updateUsingPOST_9
2019-04-06 13:32:34 -Generating unique operation named: updateUsingPUT_7
2019-04-06 13:32:34 -Generating unique operation named: updateUsingPATCH_7
2019-04-06 13:32:34 -Generating unique operation named: updateUsingDELETE_7
2019-04-06 13:32:34 -Generating unique operation named: updateUsingOPTIONS_7
2019-04-06 13:32:34 -Generating unique operation named: updateUsingTRACE_7
2019-04-06 13:32:34 -Generating unique operation named: addUsingGET_9
2019-04-06 13:32:34 -Generating unique operation named: editUsingGET_10
2019-04-06 13:32:34 -Generating unique operation named: infoUsingGET_1
2019-04-06 13:32:34 -Generating unique operation named: infoUsingHEAD_1
2019-04-06 13:32:34 -Generating unique operation named: infoUsingPOST_1
2019-04-06 13:32:34 -Generating unique operation named: infoUsingPUT_1
2019-04-06 13:32:34 -Generating unique operation named: infoUsingPATCH_1
2019-04-06 13:32:34 -Generating unique operation named: infoUsingDELETE_1
2019-04-06 13:32:34 -Generating unique operation named: infoUsingOPTIONS_1
2019-04-06 13:32:34 -Generating unique operation named: infoUsingTRACE_1
2019-04-06 13:32:34 -Generating unique operation named: listUsingGET_10
2019-04-06 13:32:34 -Generating unique operation named: removeUsingPOST_18
2019-04-06 13:32:34 -Generating unique operation named: removeUsingPOST_19
2019-04-06 13:32:34 -Generating unique operation named: saveUsingPOST_9
2019-04-06 13:32:34 -Generating unique operation named: updateUsingPOST_10
2019-04-06 13:32:34 -Generating unique operation named: listUsingGET_11
2019-04-06 13:32:34 -Generating unique operation named: removeUsingPOST_20
2019-04-06 13:32:34 -Generating unique operation named: welcomeUsingGET_1
2019-04-06 13:32:34 -Generating unique operation named: addUsingGET_10
2019-04-06 13:32:34 -Generating unique operation named: editUsingGET_11
2019-04-06 13:32:34 -Generating unique operation named: listUsingGET_12
2019-04-06 13:32:34 -Generating unique operation named: removeUsingPOST_21
2019-04-06 13:32:34 -Generating unique operation named: saveUsingPOST_10
2019-04-06 13:32:34 -Generating unique operation named: treeUsingGET_1
2019-04-06 13:32:34 -Generating unique operation named: treeUsingGET_2
2019-04-06 13:32:34 -Generating unique operation named: updateUsingPOST_11
2019-04-06 13:32:34 -Generating unique operation named: addUsingGET_11
2019-04-06 13:32:34 -Generating unique operation named: editUsingGET_12
2019-04-06 13:32:34 -Generating unique operation named: listUsingGET_13
2019-04-06 13:32:34 -Generating unique operation named: removeUsingPOST_22
2019-04-06 13:32:34 -Generating unique operation named: removeUsingPOST_23
2019-04-06 13:32:34 -Generating unique operation named: saveUsingPOST_11
2019-04-06 13:32:34 -Generating unique operation named: updateUsingGET_8
2019-04-06 13:32:34 -Generating unique operation named: updateUsingHEAD_8
2019-04-06 13:32:34 -Generating unique operation named: updateUsingPOST_12
2019-04-06 13:32:34 -Generating unique operation named: updateUsingPUT_8
2019-04-06 13:32:34 -Generating unique operation named: updateUsingPATCH_8
2019-04-06 13:32:34 -Generating unique operation named: updateUsingDELETE_8
2019-04-06 13:32:34 -Generating unique operation named: updateUsingOPTIONS_8
2019-04-06 13:32:34 -Generating unique operation named: updateUsingTRACE_8
2019-04-06 13:32:34 -Generating unique operation named: addUsingGET_12
2019-04-06 13:32:34 -Generating unique operation named: editUsingGET_13
2019-04-06 13:32:34 -Generating unique operation named: listUsingGET_14
2019-04-06 13:32:34 -Generating unique operation named: removeUsingPOST_24
2019-04-06 13:32:34 -Generating unique operation named: removeUsingPOST_25
2019-04-06 13:32:34 -Generating unique operation named: saveUsingPOST_12
2019-04-06 13:32:34 -Generating unique operation named: updateUsingGET_9
2019-04-06 13:32:34 -Generating unique operation named: updateUsingHEAD_9
2019-04-06 13:32:34 -Generating unique operation named: updateUsingPOST_13
2019-04-06 13:32:34 -Generating unique operation named: updateUsingPUT_9
2019-04-06 13:32:34 -Generating unique operation named: updateUsingPATCH_9
2019-04-06 13:32:34 -Generating unique operation named: updateUsingDELETE_9
2019-04-06 13:32:34 -Generating unique operation named: updateUsingOPTIONS_9
2019-04-06 13:32:34 -Generating unique operation named: updateUsingTRACE_9
2019-04-06 13:32:34 -Generating unique operation named: addUsingGET_13
2019-04-06 13:32:34 -Generating unique operation named: batchRemoveUsingPOST_1
2019-04-06 13:32:34 -Generating unique operation named: editUsingGET_14
2019-04-06 13:32:34 -Generating unique operation named: listUsingGET_15
2019-04-06 13:32:34 -Generating unique operation named: saveUsingPOST_13
2019-04-06 13:32:35 -Generating unique operation named: saveUsingPOST_14
2019-04-06 13:32:35 -Generating unique operation named: updateUsingPOST_14
2019-04-06 13:32:35 -Generating unique operation named: listUsingGET_16
2019-04-06 13:32:35 -Generating unique operation named: listUsingHEAD_1
2019-04-06 13:32:35 -Generating unique operation named: listUsingPOST_1
2019-04-06 13:32:35 -Generating unique operation named: listUsingPUT_1
2019-04-06 13:32:35 -Generating unique operation named: listUsingPATCH_1
2019-04-06 13:32:35 -Generating unique operation named: listUsingDELETE_1
2019-04-06 13:32:35 -Generating unique operation named: listUsingOPTIONS_1
2019-04-06 13:32:35 -Generating unique operation named: listUsingTRACE_1
2019-04-06 13:32:35 -Generating unique operation named: addUsingGET_14
2019-04-06 13:32:35 -Generating unique operation named: batchRemoveUsingPOST_2
2019-04-06 13:32:35 -Generating unique operation named: editUsingGET_15
2019-04-06 13:32:35 -Generating unique operation named: listUsingGET_17
2019-04-06 13:32:35 -Generating unique operation named: removeUsingPOST_26
2019-04-06 13:32:35 -Generating unique operation named: saveUsingPOST_15
2019-04-06 13:32:35 -Generating unique operation named: treeUsingGET_3
2019-04-06 13:32:35 -Generating unique operation named: treeViewUsingGET_1
2019-04-06 13:32:35 -Generating unique operation named: updateUsingPOST_15
2019-04-06 13:32:35 -Generating unique operation named: addUsingGET_15
2019-04-06 13:32:35 -Generating unique operation named: editUsingGET_16
2019-04-06 13:32:35 -Generating unique operation named: exprotExcelUsingGET_4
2019-04-06 13:32:35 -Generating unique operation named: listUsingGET_18
2019-04-06 13:32:35 -Generating unique operation named: removeUsingPOST_27
2019-04-06 13:32:35 -Generating unique operation named: removeUsingPOST_28
2019-04-06 13:32:35 -Generating unique operation named: saveUsingPOST_16
2019-04-06 13:32:35 -Generating unique operation named: updateUsingGET_10
2019-04-06 13:32:35 -Generating unique operation named: updateUsingHEAD_10
2019-04-06 13:32:35 -Generating unique operation named: updateUsingPOST_16
2019-04-06 13:32:35 -Generating unique operation named: updateUsingPUT_10
2019-04-06 13:32:35 -Generating unique operation named: updateUsingPATCH_10
2019-04-06 13:32:35 -Generating unique operation named: updateUsingDELETE_10
2019-04-06 13:32:35 -Generating unique operation named: updateUsingOPTIONS_10
2019-04-06 13:32:35 -Generating unique operation named: updateUsingTRACE_10
2019-04-06 13:32:35 -Generating unique operation named: exprotExcelUsingGET_5
2019-04-06 13:32:35 -Generating unique operation named: addUsingGET_16
2019-04-06 13:32:35 -Generating unique operation named: editUsingGET_17
2019-04-06 13:32:35 -Generating unique operation named: listUsingGET_19
2019-04-06 13:32:35 -Generating unique operation named: removeUsingPOST_29
2019-04-06 13:32:35 -Generating unique operation named: removeUsingPOST_30
2019-04-06 13:32:35 -Generating unique operation named: saveUsingPOST_17
2019-04-06 13:32:35 -Generating unique operation named: updateUsingGET_11
2019-04-06 13:32:35 -Generating unique operation named: updateUsingHEAD_11
2019-04-06 13:32:35 -Generating unique operation named: updateUsingPOST_17
2019-04-06 13:32:35 -Generating unique operation named: updateUsingPUT_11
2019-04-06 13:32:35 -Generating unique operation named: updateUsingPATCH_11
2019-04-06 13:32:35 -Generating unique operation named: updateUsingDELETE_11
2019-04-06 13:32:35 -Generating unique operation named: updateUsingOPTIONS_11
2019-04-06 13:32:35 -Generating unique operation named: updateUsingTRACE_11
2019-04-06 13:32:35 -Generating unique operation named: addUsingGET_17
2019-04-06 13:32:35 -Generating unique operation named: editUsingGET_18
2019-04-06 13:32:35 -Generating unique operation named: listUsingGET_20
2019-04-06 13:32:35 -Generating unique operation named: removeUsingPOST_31
2019-04-06 13:32:35 -Generating unique operation named: removeUsingPOST_32
2019-04-06 13:32:35 -Generating unique operation named: saveUsingPOST_18
2019-04-06 13:32:35 -Generating unique operation named: updateUsingGET_12
2019-04-06 13:32:35 -Generating unique operation named: updateUsingHEAD_12
2019-04-06 13:32:35 -Generating unique operation named: updateUsingPOST_18
2019-04-06 13:32:35 -Generating unique operation named: updateUsingPUT_12
2019-04-06 13:32:35 -Generating unique operation named: updateUsingPATCH_12
2019-04-06 13:32:35 -Generating unique operation named: updateUsingDELETE_12
2019-04-06 13:32:35 -Generating unique operation named: updateUsingOPTIONS_12
2019-04-06 13:32:35 -Generating unique operation named: updateUsingTRACE_12
2019-04-06 13:32:35 -Starting Quartz Scheduler now
2019-04-06 13:32:35 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED started.
2019-04-06 13:32:35 -Starting...
2019-04-06 13:32:35 -BrokerAvailabilityEvent[available=true, SimpleBrokerMessageHandler [DefaultSubscriptionRegistry[cache[0 destination(s)], registry[0 sessions]]]]
2019-04-06 13:32:35 -Started.
2019-04-06 13:32:35 -Starting ProtocolHandler ["http-nio-8081"]
2019-04-06 13:32:35 -Using a shared selector for servlet write/read
2019-04-06 13:32:35 -Tomcat started on port(s): 8081 (http) with context path ''
2019-04-06 13:32:35 -Started BootdoApplication in 32.128 seconds (JVM running for 33.019)
2019-04-06 13:32:35 -==>  Preparing: select `id`,`cron_expression`,`method_name`,`is_concurrent`,`description`,`update_by`,`bean_class`,`create_date`,`job_status`,`job_group`,`update_date`,`create_by`,`spring_bean`,`job_name` from sys_task order by id desc 
2019-04-06 13:32:36 -==> Parameters: 
2019-04-06 13:32:36 -<==      Total: 1
2019-04-06 13:32:46 -Initializing Spring FrameworkServlet 'dispatcherServlet'
2019-04-06 13:32:46 -FrameworkServlet 'dispatcherServlet': initialization started
2019-04-06 13:32:46 -FrameworkServlet 'dispatcherServlet': initialization completed in 80 ms
2019-04-06 13:32:46 -Enabling session validation scheduler...
2019-04-06 13:32:46 -请求地址 : http://localhost:8081/login;JSESSIONID=bbca3afd-360a-4219-a1e1-6ec07177eac5
2019-04-06 13:32:46 -HTTP METHOD : GET
2019-04-06 13:32:46 -CLASS_METHOD : com.bootdo.system.controller.LoginController.login
2019-04-06 13:32:46 -参数 : [{}]
2019-04-06 13:32:46 -耗时 : 4
2019-04-06 13:32:46 -返回值 : login
2019-04-06 13:32:47 -请求地址 : http://localhost:8081/getVerify
2019-04-06 13:32:47 -HTTP METHOD : GET
2019-04-06 13:32:47 -CLASS_METHOD : com.bootdo.system.controller.LoginController.getVerify
2019-04-06 13:32:47 -参数 : [org.apache.shiro.web.servlet.ShiroHttpServletRequest@6f2ce36a, org.apache.shiro.web.servlet.ShiroHttpServletResponse@24b775a7]
2019-04-06 13:32:50 -5441
2019-04-06 13:32:50 -耗时 : 2895
2019-04-06 13:32:50 -返回值 : null
2019-04-06 13:32:58 -请求地址 : http://localhost:8081/login
2019-04-06 13:32:58 -HTTP METHOD : POST
2019-04-06 13:32:58 -CLASS_METHOD : com.bootdo.system.controller.LoginController.ajaxLogin
2019-04-06 13:32:58 -参数 : [admin, 111111, 5441, org.apache.shiro.web.servlet.ShiroHttpServletRequest@2567a9b9]
2019-04-06 13:32:58 -==>  Preparing: select `user_id`,`username`,`name`,`password`,`dept_id`,`email`,`mobile`,`status`,`user_id_create`,`gmt_create`,`gmt_modified`,`sex`,`birth`,`pic_id`,`live_address`,`hobby`,`province`,`city`,`district` from sys_user WHERE username = ? order by user_id desc 
2019-04-06 13:32:58 -==> Parameters: admin(String)
2019-04-06 13:32:58 -<==      Total: 1
2019-04-06 13:32:58 -耗时 : 106
2019-04-06 13:32:58 -返回值 : {msg=操作成功, code=0}
2019-04-06 13:32:58 -More than one TaskExecutor bean found within the context, and none is named 'taskExecutor'. Mark one of them as primary or name it 'taskExecutor' (possibly as an alias) in order to use it for async processing: [clientInboundChannelExecutor, clientOutboundChannelExecutor, brokerChannelExecutor, messageBrokerTaskScheduler]
2019-04-06 13:32:58 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-06 13:32:58 -==> Parameters: 1(Long), admin(String), 登录(String), 107(Integer), com.bootdo.system.controller.LoginController.ajaxLogin()(String), null, 127.0.0.1(String), 2019-04-06 13:32:58.544(Timestamp)
2019-04-06 13:32:58 -请求地址 : http://localhost:8081/index
2019-04-06 13:32:58 -HTTP METHOD : GET
2019-04-06 13:32:58 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2019-04-06 13:32:58 -参数 : [{}]
2019-04-06 13:32:58 -<==    Updates: 1
2019-04-06 13:32:58 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2019-04-06 13:32:58 -==> Parameters: 1(Long)
2019-04-06 13:32:58 -<==      Total: 46
2019-04-06 13:32:58 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2019-04-06 13:32:58 -==> Parameters: 138(Long)
2019-04-06 13:32:58 -<==      Total: 1
2019-04-06 13:32:58 -耗时 : 193
2019-04-06 13:32:58 -返回值 : index_v1
2019-04-06 13:32:58 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-06 13:32:58 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 193(Integer), com.bootdo.system.controller.LoginController.index()(String), {"menus":[{"attributes":{"icon":"fa fa-money","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-money","url":"/moneyList/moneyList"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"102","parentId":"106","text":"现金缴费"},{"attributes":{"icon":"fa fa-book","url":"/moneyLog/elecLog"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"107","parentId":"106","text":"缴费记录"}],"hasChildren":true,"hasParent":false,"id":"106","parentId":"0","text":"收费管理"},{"attributes":{"icon":"fa fa-lightbulb-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/elec/elec"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"121","parentId":"103","text":"电费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"elec/elecInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"122","parentId":"103","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"elec/elecUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"123","parentId":"103","text":"电表上传"},{"attributes":{"icon":"fa fa-cc","url":"/elec/elecPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"124","parentId":"103","text":"电价管理"}],"hasChildren":true,"hasParent":false,"id":"103","parentId":"0","text":"电费管理"},{"attributes":{"icon":"fa fa-tint","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/water/water"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"117","parentId":"105","text":"水费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"water/waterInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"118","parentId":"105","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"water/waterUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"119","parentId":"105","text":"水费生成"},{"attributes":{"icon":"fa fa-cc","url":"/water/waterPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"120","parentId":"105","text":"水价管理"}],"hasChildren":true,"hasParent":false,"id":"105","parentId":"0","text":"水费管理"},{"attributes":{"icon":"fa fa-fire","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/heat/heat"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"113","parentId":"104","text":"暖费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"heat/heatInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"114","parentId":"104","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"heat/heatUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"115","parentId":"104","text":"暖费生成"},{"attributes":{"icon":"","url":"/heat/heatPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"116","parentId":"104","text":"暖价管理"}],"hasChildren":true,"hasParent":false,"id":"104","parentId":"0","text":"暖费管理"},{"attributes":{"icon":"fa fa-vcard-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-bomb","url":"/print/print"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"149","parentId":"108","text":"票据记录"}],"hasChildren":true,"hasParent":false,"id":"108","parentId":"0","text":"票据管理"},{"attributes":{"icon":"fa fa-bar-chart","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-area-chart","url":"/chart/graph_echarts.html"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","text":"百度chart"},{"attributes":{"icon":"fa fa-sun-o","url":"charts/countDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"109","parentId":"97","text":"日统计报表"},{"attributes":{"icon":"fa fa-registered","url":"charts/countMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"110","parentId":"97","text":"月统计报表"},{"attributes":{"icon":"fa fa-money","url":"charts/countOwe"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"155","parentId":"97","text":"欠费报表图"},{"attributes":{"icon":"fa fa-support","url":"charts/countYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"111","parentId":"97","text":"年统计报表"},{"attributes":{"icon":"fa fa-tachometer","url":"charts/countRun"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"112","parentId":"97","text":"走势图报表"}],"hasChildren":true,"hasParent":false,"id":"97","parentId":"0","text":"统计管理"},{"attributes":{"icon":"fa fa-bars","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-book","url":"/common/dict"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"78","parentId":"1","text":"数据字典"},{"attributes":{"icon":"fa fa-folder-open","url":"/common/sysFile"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"71","parentId":"1","text":"文件管理"}],"h(String), 127.0.0.1(String), 2019-04-06 13:32:58.875(Timestamp)
2019-04-06 13:32:58 -请求地址 : http://localhost:8081/main
2019-04-06 13:32:58 -HTTP METHOD : GET
2019-04-06 13:32:58 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-06 13:32:58 -参数 : []
2019-04-06 13:32:58 -耗时 : 0
2019-04-06 13:32:58 -返回值 : main
2019-04-06 13:32:59 -<==    Updates: 1
2019-04-06 13:32:59 -请求地址 : http://localhost:8081/main
2019-04-06 13:32:59 -HTTP METHOD : GET
2019-04-06 13:32:59 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-06 13:32:59 -参数 : []
2019-04-06 13:32:59 -耗时 : 0
2019-04-06 13:32:59 -返回值 : main
2019-04-06 13:32:59 -请求地址 : http://localhost:8081/oa/notify/message
2019-04-06 13:32:59 -HTTP METHOD : GET
2019-04-06 13:32:59 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2019-04-06 13:32:59 -参数 : []
2019-04-06 13:32:59 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2019-04-06 13:32:59 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2019-04-06 13:32:59 -<==      Total: 0
2019-04-06 13:32:59 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2019-04-06 13:32:59 -==> Parameters: 1(Long), 0(String)
2019-04-06 13:32:59 -<==      Total: 1
2019-04-06 13:32:59 -耗时 : 70
2019-04-06 13:32:59 -返回值 : com.bootdo.common.utils.PageUtils@2788bf67
2019-04-06 13:33:05 -==>  Preparing: select distinct m.perms from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id = ur.role_id where ur.user_id = ? 
2019-04-06 13:33:05 -==> Parameters: 1(Long)
2019-04-06 13:33:05 -<==      Total: 90
2019-04-06 13:33:05 -请求地址 : http://localhost:8081/moneyLog/elecLog
2019-04-06 13:33:05 -HTTP METHOD : GET
2019-04-06 13:33:05 -CLASS_METHOD : com.bootdo.moneyLog.controller.ElecLogController.moneyLog
2019-04-06 13:33:05 -参数 : []
2019-04-06 13:33:05 -耗时 : 0
2019-04-06 13:33:05 -返回值 : /moneyLog/elecLog/elecLog
2019-04-06 13:33:05 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-06 13:33:05 -HTTP METHOD : GET
2019-04-06 13:33:05 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-06 13:33:05 -参数 : [userType]
2019-04-06 13:33:05 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-06 13:33:05 -==> Parameters: userType(String)
2019-04-06 13:33:05 -<==      Total: 2
2019-04-06 13:33:05 -耗时 : 30
2019-04-06 13:33:05 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-06 13:33:05 -请求地址 : http://localhost:8081/moneyLog/elecLog/list
2019-04-06 13:33:05 -HTTP METHOD : GET
2019-04-06 13:33:05 -CLASS_METHOD : com.bootdo.moneyLog.controller.ElecLogController.list
2019-04-06 13:33:05 -参数 : [{limit=10, offset=0, userType=, userOrg=, userId=, elecDate=}]
2019-04-06 13:33:05 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`elec_type`,`elec_money`,`elec_date`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec_log order by id asc limit ?, ? 
2019-04-06 13:33:05 -==> Parameters: 0(Integer), 10(Integer)
2019-04-06 13:33:05 -<==      Total: 7
2019-04-06 13:33:05 -==>  Preparing: select count(*) from elec_log 
2019-04-06 13:33:05 -==> Parameters: 
2019-04-06 13:33:05 -<==      Total: 1
2019-04-06 13:33:05 -耗时 : 31
2019-04-06 13:33:05 -返回值 : com.bootdo.common.utils.PageUtils@2e0be97a
2019-04-06 13:33:05 -请求地址 : http://localhost:8081/moneyLog/waterLog
2019-04-06 13:33:05 -HTTP METHOD : GET
2019-04-06 13:33:05 -CLASS_METHOD : com.bootdo.moneyLog.controller.WaterLogController.WaterLog
2019-04-06 13:33:05 -参数 : []
2019-04-06 13:33:05 -耗时 : 0
2019-04-06 13:33:05 -返回值 : /moneyLog/waterLog/waterLog
2019-04-06 13:33:06 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-06 13:33:06 -HTTP METHOD : GET
2019-04-06 13:33:06 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-06 13:33:06 -参数 : [userType]
2019-04-06 13:33:06 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-06 13:33:06 -==> Parameters: userType(String)
2019-04-06 13:33:06 -<==      Total: 2
2019-04-06 13:33:06 -耗时 : 6
2019-04-06 13:33:06 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-06 13:33:06 -请求地址 : http://localhost:8081/moneyLog/waterLog/list
2019-04-06 13:33:06 -HTTP METHOD : GET
2019-04-06 13:33:06 -CLASS_METHOD : com.bootdo.moneyLog.controller.WaterLogController.list
2019-04-06 13:33:06 -参数 : [{limit=10, offset=0, userType=, userOrg=, userId=, waterDate=}]
2019-04-06 13:33:06 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,`water_type`,`water_money`,`water_date`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from water_log order by id asc limit ?, ? 
2019-04-06 13:33:06 -==> Parameters: 0(Integer), 10(Integer)
2019-04-06 13:33:06 -<==      Total: 5
2019-04-06 13:33:06 -==>  Preparing: select count(*) from water_log 
2019-04-06 13:33:06 -==> Parameters: 
2019-04-06 13:33:06 -<==      Total: 1
2019-04-06 13:33:06 -耗时 : 34
2019-04-06 13:33:06 -返回值 : com.bootdo.common.utils.PageUtils@5ca939d8
2019-04-06 13:33:07 -请求地址 : http://localhost:8081/moneyLog/waterLog/edit/5
2019-04-06 13:33:07 -HTTP METHOD : GET
2019-04-06 13:33:07 -CLASS_METHOD : com.bootdo.moneyLog.controller.WaterLogController.edit
2019-04-06 13:33:07 -参数 : [5, {}]
2019-04-06 13:33:07 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,`water_type`,`water_money`,`water_date`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from water_log where id = ? 
2019-04-06 13:33:07 -==> Parameters: 5(Long)
2019-04-06 13:33:07 -<==      Total: 1
2019-04-06 13:33:07 -耗时 : 20
2019-04-06 13:33:07 -返回值 : moneyLog/waterLog/edit
2019-04-06 13:33:07 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-06 13:33:07 -HTTP METHOD : GET
2019-04-06 13:33:07 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-06 13:33:07 -参数 : [userType]
2019-04-06 13:33:07 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-06 13:33:07 -==> Parameters: userType(String)
2019-04-06 13:33:07 -<==      Total: 2
2019-04-06 13:33:07 -耗时 : 11
2019-04-06 13:33:07 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-06 13:33:07 -请求地址 : http://localhost:8081/common/dict/list/waterType
2019-04-06 13:33:07 -HTTP METHOD : GET
2019-04-06 13:33:07 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-06 13:33:07 -参数 : [waterType]
2019-04-06 13:33:07 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-06 13:33:07 -==> Parameters: waterType(String)
2019-04-06 13:33:07 -<==      Total: 6
2019-04-06 13:33:08 -耗时 : 30
2019-04-06 13:33:08 -返回值 : [DictDO{id=132, name='特殊水费4', value='5', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=131, name='特殊水费3', value='4', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=130, name='特殊水费2', value='3', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=129, name='特殊水费1', value='2', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=128, name='民用水', value='1', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=127, name='商业水', value='0', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-06 13:33:11 -请求地址 : http://localhost:8081/moneyLog/waterLog/update
2019-04-06 13:33:11 -HTTP METHOD : POST
2019-04-06 13:33:11 -CLASS_METHOD : com.bootdo.moneyLog.controller.WaterLogController.update
2019-04-06 13:33:11 -参数 : [com.bootdo.moneyLog.domain.WaterLogDO@7cee67d4]
2019-04-06 13:33:11 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-06 13:33:11 -==> Parameters: 1(Long), admin(String), error(String), null, http://localhost:8081/moneyLog/waterLog/update(String), org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.exceptions.PersistenceException: 
### Error updating database.  Cause: java.lang.IllegalArgumentException: invalid comparison: java.util.Date and java.lang.String
### Cause: java.lang.IllegalArgumentException: invalid comparison: java.util.Date and java.lang.String(String), null, 2019-04-06 13:33:11.608(Timestamp)
2019-04-06 13:33:11 -nested exception is org.apache.ibatis.exceptions.PersistenceException: 
### Error updating database.  Cause: java.lang.IllegalArgumentException: invalid comparison: java.util.Date and java.lang.String
### Cause: java.lang.IllegalArgumentException: invalid comparison: java.util.Date and java.lang.String
org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.exceptions.PersistenceException: 
### Error updating database.  Cause: java.lang.IllegalArgumentException: invalid comparison: java.util.Date and java.lang.String
### Cause: java.lang.IllegalArgumentException: invalid comparison: java.util.Date and java.lang.String
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:79)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:447)
	at com.sun.proxy.$Proxy101.update(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.update(SqlSessionTemplate.java:295)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:62)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy104.update(Unknown Source)
	at com.bootdo.moneyLog.service.impl.WaterLogServiceImpl.update(WaterLogServiceImpl.java:39)
	at com.bootdo.moneyLog.controller.WaterLogController.update(WaterLogController.java:228)
	at com.bootdo.moneyLog.controller.WaterLogController$$FastClassBySpringCGLIB$$3a5e3635.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:204)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:746)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.bootdo.common.aspect.WebLogAspect.doAround(WebLogAspect.java:57)
	at sun.reflect.GeneratedMethodAccessor128.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.apache.shiro.spring.security.interceptor.AopAllianceAnnotationsAuthorizingMethodInterceptor$1.proceed(AopAllianceAnnotationsAuthorizingMethodInterceptor.java:82)
	at org.apache.shiro.authz.aop.AuthorizingMethodInterceptor.invoke(AuthorizingMethodInterceptor.java:39)
	at org.apache.shiro.spring.security.interceptor.AopAllianceAnnotationsAuthorizingMethodInterceptor.invoke(AopAllianceAnnotationsAuthorizingMethodInterceptor.java:115)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.bootdo.moneyLog.controller.WaterLogController$$EnhancerBySpringCGLIB$$b98e7dec.update(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:209)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:877)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:783)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:991)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:925)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:974)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:877)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:661)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:851)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:61)
	at org.apache.shiro.web.servlet.AdviceFilter.executeChain(AdviceFilter.java:108)
	at org.apache.shiro.web.servlet.AdviceFilter.doFilterInternal(AdviceFilter.java:137)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:66)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)
	at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)
	at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)
	at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)
	at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:383)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:109)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:496)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:790)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1468)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Unknown Source)
Caused by: org.apache.ibatis.exceptions.PersistenceException: 
### Error updating database.  Cause: java.lang.IllegalArgumentException: invalid comparison: java.util.Date and java.lang.String
### Cause: java.lang.IllegalArgumentException: invalid comparison: java.util.Date and java.lang.String
	at org.apache.ibatis.exceptions.ExceptionFactory.wrapException(ExceptionFactory.java:30)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:200)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:434)
	... 103 common frames omitted
Caused by: java.lang.IllegalArgumentException: invalid comparison: java.util.Date and java.lang.String
	at org.apache.ibatis.ognl.OgnlOps.compareWithConversion(OgnlOps.java:93)
	at org.apache.ibatis.ognl.OgnlOps.isEqual(OgnlOps.java:143)
	at org.apache.ibatis.ognl.OgnlOps.equal(OgnlOps.java:802)
	at org.apache.ibatis.ognl.ASTNotEq.getValueBody(ASTNotEq.java:53)
	at org.apache.ibatis.ognl.SimpleNode.evaluateGetValueBody(SimpleNode.java:212)
	at org.apache.ibatis.ognl.SimpleNode.getValue(SimpleNode.java:258)
	at org.apache.ibatis.ognl.ASTAnd.getValueBody(ASTAnd.java:61)
	at org.apache.ibatis.ognl.SimpleNode.evaluateGetValueBody(SimpleNode.java:212)
	at org.apache.ibatis.ognl.SimpleNode.getValue(SimpleNode.java:258)
	at org.apache.ibatis.ognl.Ognl.getValue(Ognl.java:470)
	at org.apache.ibatis.ognl.Ognl.getValue(Ognl.java:434)
	at org.apache.ibatis.scripting.xmltags.OgnlCache.getValue(OgnlCache.java:44)
	at org.apache.ibatis.scripting.xmltags.ExpressionEvaluator.evaluateBoolean(ExpressionEvaluator.java:32)
	at org.apache.ibatis.scripting.xmltags.IfSqlNode.apply(IfSqlNode.java:34)
	at org.apache.ibatis.scripting.xmltags.MixedSqlNode.apply(MixedSqlNode.java:33)
	at org.apache.ibatis.scripting.xmltags.TrimSqlNode.apply(TrimSqlNode.java:55)
	at org.apache.ibatis.scripting.xmltags.MixedSqlNode.apply(MixedSqlNode.java:33)
	at org.apache.ibatis.scripting.xmltags.DynamicSqlSource.getBoundSql(DynamicSqlSource.java:41)
	at org.apache.ibatis.mapping.MappedStatement.getBoundSql(MappedStatement.java:292)
	at org.apache.ibatis.executor.statement.BaseStatementHandler.<init>(BaseStatementHandler.java:64)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.<init>(PreparedStatementHandler.java:40)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.<init>(RoutingStatementHandler.java:46)
	at org.apache.ibatis.session.Configuration.newStatementHandler(Configuration.java:545)
	at org.apache.ibatis.executor.SimpleExecutor.doUpdate(SimpleExecutor.java:48)
	at org.apache.ibatis.executor.BaseExecutor.update(BaseExecutor.java:117)
	at org.apache.ibatis.executor.CachingExecutor.update(CachingExecutor.java:76)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:198)
	... 108 common frames omitted
2019-04-06 13:33:11 -<==    Updates: 1
2019-04-06 13:33:25 -WebSocketSession[1 current WS(1)-HttpStream(0)-HttpPoll(0), 1 total, 0 closed abnormally (0 connect failure, 0 send limit, 0 transport error)], stompSubProtocol[processed CONNECT(1)-CONNECTED(1)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 8, active threads = 0, queued tasks = 0, completed tasks = 9], outboundChannelpool size = 1, active threads = 0, queued tasks = 0, completed tasks = 1], sockJsScheduler[pool size = 4, active threads = 1, queued tasks = 2, completed tasks = 7]
2019-04-06 13:37:11 -请求地址 : http://localhost:8081/moneyLog/waterLog/update
2019-04-06 13:37:11 -HTTP METHOD : POST
2019-04-06 13:37:11 -CLASS_METHOD : com.bootdo.moneyLog.controller.WaterLogController.update
2019-04-06 13:37:11 -参数 : [com.bootdo.moneyLog.domain.WaterLogDO@1548f3f9]
2019-04-06 13:37:11 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-06 13:37:11 -==> Parameters: 1(Long), admin(String), error(String), null, http://localhost:8081/moneyLog/waterLog/update(String), org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.exceptions.PersistenceException: 
### Error updating database.  Cause: java.lang.IllegalArgumentException: invalid comparison: java.util.Date and java.lang.String
### Cause: java.lang.IllegalArgumentException: invalid comparison: java.util.Date and java.lang.String(String), null, 2019-04-06 13:37:11.227(Timestamp)
2019-04-06 13:37:11 -nested exception is org.apache.ibatis.exceptions.PersistenceException: 
### Error updating database.  Cause: java.lang.IllegalArgumentException: invalid comparison: java.util.Date and java.lang.String
### Cause: java.lang.IllegalArgumentException: invalid comparison: java.util.Date and java.lang.String
org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.exceptions.PersistenceException: 
### Error updating database.  Cause: java.lang.IllegalArgumentException: invalid comparison: java.util.Date and java.lang.String
### Cause: java.lang.IllegalArgumentException: invalid comparison: java.util.Date and java.lang.String
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:79)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:447)
	at com.sun.proxy.$Proxy101.update(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.update(SqlSessionTemplate.java:295)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:62)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy104.update(Unknown Source)
	at com.bootdo.moneyLog.service.impl.WaterLogServiceImpl.update(WaterLogServiceImpl.java:39)
	at com.bootdo.moneyLog.controller.WaterLogController.update(WaterLogController.java:228)
	at com.bootdo.moneyLog.controller.WaterLogController$$FastClassBySpringCGLIB$$3a5e3635.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:204)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:746)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.bootdo.common.aspect.WebLogAspect.doAround(WebLogAspect.java:57)
	at sun.reflect.GeneratedMethodAccessor128.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.apache.shiro.spring.security.interceptor.AopAllianceAnnotationsAuthorizingMethodInterceptor$1.proceed(AopAllianceAnnotationsAuthorizingMethodInterceptor.java:82)
	at org.apache.shiro.authz.aop.AuthorizingMethodInterceptor.invoke(AuthorizingMethodInterceptor.java:39)
	at org.apache.shiro.spring.security.interceptor.AopAllianceAnnotationsAuthorizingMethodInterceptor.invoke(AopAllianceAnnotationsAuthorizingMethodInterceptor.java:115)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.bootdo.moneyLog.controller.WaterLogController$$EnhancerBySpringCGLIB$$b98e7dec.update(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:209)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:877)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:783)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:991)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:925)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:974)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:877)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:661)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:851)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:61)
	at org.apache.shiro.web.servlet.AdviceFilter.executeChain(AdviceFilter.java:108)
	at org.apache.shiro.web.servlet.AdviceFilter.doFilterInternal(AdviceFilter.java:137)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:66)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)
	at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)
	at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)
	at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)
	at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:383)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:109)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:496)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:790)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1468)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Unknown Source)
Caused by: org.apache.ibatis.exceptions.PersistenceException: 
### Error updating database.  Cause: java.lang.IllegalArgumentException: invalid comparison: java.util.Date and java.lang.String
### Cause: java.lang.IllegalArgumentException: invalid comparison: java.util.Date and java.lang.String
	at org.apache.ibatis.exceptions.ExceptionFactory.wrapException(ExceptionFactory.java:30)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:200)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:434)
	... 103 common frames omitted
Caused by: java.lang.IllegalArgumentException: invalid comparison: java.util.Date and java.lang.String
	at org.apache.ibatis.ognl.OgnlOps.compareWithConversion(OgnlOps.java:93)
	at org.apache.ibatis.ognl.OgnlOps.isEqual(OgnlOps.java:143)
	at org.apache.ibatis.ognl.OgnlOps.equal(OgnlOps.java:802)
	at org.apache.ibatis.ognl.ASTNotEq.getValueBody(ASTNotEq.java:53)
	at org.apache.ibatis.ognl.SimpleNode.evaluateGetValueBody(SimpleNode.java:212)
	at org.apache.ibatis.ognl.SimpleNode.getValue(SimpleNode.java:258)
	at org.apache.ibatis.ognl.ASTAnd.getValueBody(ASTAnd.java:61)
	at org.apache.ibatis.ognl.SimpleNode.evaluateGetValueBody(SimpleNode.java:212)
	at org.apache.ibatis.ognl.SimpleNode.getValue(SimpleNode.java:258)
	at org.apache.ibatis.ognl.Ognl.getValue(Ognl.java:470)
	at org.apache.ibatis.ognl.Ognl.getValue(Ognl.java:434)
	at org.apache.ibatis.scripting.xmltags.OgnlCache.getValue(OgnlCache.java:44)
	at org.apache.ibatis.scripting.xmltags.ExpressionEvaluator.evaluateBoolean(ExpressionEvaluator.java:32)
	at org.apache.ibatis.scripting.xmltags.IfSqlNode.apply(IfSqlNode.java:34)
	at org.apache.ibatis.scripting.xmltags.MixedSqlNode.apply(MixedSqlNode.java:33)
	at org.apache.ibatis.scripting.xmltags.TrimSqlNode.apply(TrimSqlNode.java:55)
	at org.apache.ibatis.scripting.xmltags.MixedSqlNode.apply(MixedSqlNode.java:33)
	at org.apache.ibatis.scripting.xmltags.DynamicSqlSource.getBoundSql(DynamicSqlSource.java:41)
	at org.apache.ibatis.mapping.MappedStatement.getBoundSql(MappedStatement.java:292)
	at org.apache.ibatis.executor.statement.BaseStatementHandler.<init>(BaseStatementHandler.java:64)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.<init>(PreparedStatementHandler.java:40)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.<init>(RoutingStatementHandler.java:46)
	at org.apache.ibatis.session.Configuration.newStatementHandler(Configuration.java:545)
	at org.apache.ibatis.executor.SimpleExecutor.doUpdate(SimpleExecutor.java:48)
	at org.apache.ibatis.executor.BaseExecutor.update(BaseExecutor.java:117)
	at org.apache.ibatis.executor.CachingExecutor.update(CachingExecutor.java:76)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:198)
	... 108 common frames omitted
2019-04-06 13:37:11 -<==    Updates: 1
2019-04-06 13:39:16 -请求地址 : http://localhost:8081/index
2019-04-06 13:39:16 -HTTP METHOD : GET
2019-04-06 13:39:16 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2019-04-06 13:39:16 -参数 : [{}]
2019-04-06 13:39:16 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2019-04-06 13:39:16 -==> Parameters: 1(Long)
2019-04-06 13:39:16 -<==      Total: 46
2019-04-06 13:39:16 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2019-04-06 13:39:16 -==> Parameters: 138(Long)
2019-04-06 13:39:16 -<==      Total: 1
2019-04-06 13:39:16 -耗时 : 27
2019-04-06 13:39:16 -返回值 : index_v1
2019-04-06 13:39:16 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-06 13:39:16 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 28(Integer), com.bootdo.system.controller.LoginController.index()(String), {"menus":[{"attributes":{"icon":"fa fa-money","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-money","url":"/moneyList/moneyList"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"102","parentId":"106","text":"现金缴费"},{"attributes":{"icon":"fa fa-book","url":"/moneyLog/elecLog"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"107","parentId":"106","text":"缴费记录"}],"hasChildren":true,"hasParent":false,"id":"106","parentId":"0","text":"收费管理"},{"attributes":{"icon":"fa fa-lightbulb-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/elec/elec"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"121","parentId":"103","text":"电费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"elec/elecInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"122","parentId":"103","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"elec/elecUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"123","parentId":"103","text":"电表上传"},{"attributes":{"icon":"fa fa-cc","url":"/elec/elecPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"124","parentId":"103","text":"电价管理"}],"hasChildren":true,"hasParent":false,"id":"103","parentId":"0","text":"电费管理"},{"attributes":{"icon":"fa fa-tint","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/water/water"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"117","parentId":"105","text":"水费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"water/waterInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"118","parentId":"105","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"water/waterUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"119","parentId":"105","text":"水费生成"},{"attributes":{"icon":"fa fa-cc","url":"/water/waterPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"120","parentId":"105","text":"水价管理"}],"hasChildren":true,"hasParent":false,"id":"105","parentId":"0","text":"水费管理"},{"attributes":{"icon":"fa fa-fire","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/heat/heat"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"113","parentId":"104","text":"暖费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"heat/heatInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"114","parentId":"104","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"heat/heatUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"115","parentId":"104","text":"暖费生成"},{"attributes":{"icon":"","url":"/heat/heatPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"116","parentId":"104","text":"暖价管理"}],"hasChildren":true,"hasParent":false,"id":"104","parentId":"0","text":"暖费管理"},{"attributes":{"icon":"fa fa-vcard-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-bomb","url":"/print/print"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"149","parentId":"108","text":"票据记录"}],"hasChildren":true,"hasParent":false,"id":"108","parentId":"0","text":"票据管理"},{"attributes":{"icon":"fa fa-bar-chart","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-area-chart","url":"/chart/graph_echarts.html"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","text":"百度chart"},{"attributes":{"icon":"fa fa-sun-o","url":"charts/countDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"109","parentId":"97","text":"日统计报表"},{"attributes":{"icon":"fa fa-registered","url":"charts/countMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"110","parentId":"97","text":"月统计报表"},{"attributes":{"icon":"fa fa-money","url":"charts/countOwe"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"155","parentId":"97","text":"欠费报表图"},{"attributes":{"icon":"fa fa-support","url":"charts/countYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"111","parentId":"97","text":"年统计报表"},{"attributes":{"icon":"fa fa-tachometer","url":"charts/countRun"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"112","parentId":"97","text":"走势图报表"}],"hasChildren":true,"hasParent":false,"id":"97","parentId":"0","text":"统计管理"},{"attributes":{"icon":"fa fa-bars","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-book","url":"/common/dict"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"78","parentId":"1","text":"数据字典"},{"attributes":{"icon":"fa fa-folder-open","url":"/common/sysFile"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"71","parentId":"1","text":"文件管理"}],"h(String), 127.0.0.1(String), 2019-04-06 13:39:16.366(Timestamp)
2019-04-06 13:39:16 -<==    Updates: 1
2019-04-06 13:39:16 -请求地址 : http://localhost:8081/main
2019-04-06 13:39:16 -HTTP METHOD : GET
2019-04-06 13:39:16 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-06 13:39:16 -参数 : []
2019-04-06 13:39:16 -耗时 : 1
2019-04-06 13:39:16 -返回值 : main
2019-04-06 13:39:17 -请求地址 : http://localhost:8081/oa/notify/message
2019-04-06 13:39:17 -HTTP METHOD : GET
2019-04-06 13:39:17 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2019-04-06 13:39:17 -参数 : []
2019-04-06 13:39:17 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2019-04-06 13:39:17 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2019-04-06 13:39:17 -<==      Total: 0
2019-04-06 13:39:17 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2019-04-06 13:39:17 -==> Parameters: 1(Long), 0(String)
2019-04-06 13:39:17 -<==      Total: 1
2019-04-06 13:39:17 -耗时 : 7
2019-04-06 13:39:17 -返回值 : com.bootdo.common.utils.PageUtils@5c741b85
2019-04-06 13:39:17 -请求地址 : http://localhost:8081/main
2019-04-06 13:39:17 -HTTP METHOD : GET
2019-04-06 13:39:17 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-06 13:39:17 -参数 : []
2019-04-06 13:39:17 -耗时 : 0
2019-04-06 13:39:17 -返回值 : main
2019-04-06 13:39:19 -请求地址 : http://localhost:8081/moneyLog/elecLog
2019-04-06 13:39:19 -HTTP METHOD : GET
2019-04-06 13:39:19 -CLASS_METHOD : com.bootdo.moneyLog.controller.ElecLogController.moneyLog
2019-04-06 13:39:19 -参数 : []
2019-04-06 13:39:19 -耗时 : 1
2019-04-06 13:39:19 -返回值 : /moneyLog/elecLog/elecLog
2019-04-06 13:39:19 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-06 13:39:19 -HTTP METHOD : GET
2019-04-06 13:39:19 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-06 13:39:19 -参数 : [userType]
2019-04-06 13:39:19 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-06 13:39:19 -==> Parameters: userType(String)
2019-04-06 13:39:19 -<==      Total: 2
2019-04-06 13:39:19 -耗时 : 5
2019-04-06 13:39:19 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-06 13:39:19 -请求地址 : http://localhost:8081/moneyLog/elecLog/list
2019-04-06 13:39:19 -HTTP METHOD : GET
2019-04-06 13:39:19 -CLASS_METHOD : com.bootdo.moneyLog.controller.ElecLogController.list
2019-04-06 13:39:19 -参数 : [{limit=10, offset=0, userType=, userOrg=, userId=, elecDate=}]
2019-04-06 13:39:19 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`elec_type`,`elec_money`,`elec_date`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec_log order by id asc limit ?, ? 
2019-04-06 13:39:19 -==> Parameters: 0(Integer), 10(Integer)
2019-04-06 13:39:19 -<==      Total: 7
2019-04-06 13:39:19 -==>  Preparing: select count(*) from elec_log 
2019-04-06 13:39:19 -==> Parameters: 
2019-04-06 13:39:19 -<==      Total: 1
2019-04-06 13:39:19 -耗时 : 10
2019-04-06 13:39:19 -返回值 : com.bootdo.common.utils.PageUtils@6e415591
2019-04-06 13:39:22 -请求地址 : http://localhost:8081/moneyLog/waterLog
2019-04-06 13:39:22 -HTTP METHOD : GET
2019-04-06 13:39:22 -CLASS_METHOD : com.bootdo.moneyLog.controller.WaterLogController.WaterLog
2019-04-06 13:39:22 -参数 : []
2019-04-06 13:39:22 -耗时 : 0
2019-04-06 13:39:22 -返回值 : /moneyLog/waterLog/waterLog
2019-04-06 13:39:22 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-06 13:39:22 -HTTP METHOD : GET
2019-04-06 13:39:22 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-06 13:39:22 -参数 : [userType]
2019-04-06 13:39:22 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-06 13:39:22 -==> Parameters: userType(String)
2019-04-06 13:39:22 -<==      Total: 2
2019-04-06 13:39:22 -耗时 : 6
2019-04-06 13:39:22 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-06 13:39:22 -请求地址 : http://localhost:8081/moneyLog/waterLog/list
2019-04-06 13:39:22 -HTTP METHOD : GET
2019-04-06 13:39:22 -CLASS_METHOD : com.bootdo.moneyLog.controller.WaterLogController.list
2019-04-06 13:39:22 -参数 : [{limit=10, offset=0, userType=, userOrg=, userId=, waterDate=}]
2019-04-06 13:39:22 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,`water_type`,`water_money`,`water_date`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from water_log order by id asc limit ?, ? 
2019-04-06 13:39:22 -==> Parameters: 0(Integer), 10(Integer)
2019-04-06 13:39:22 -<==      Total: 5
2019-04-06 13:39:22 -==>  Preparing: select count(*) from water_log 
2019-04-06 13:39:22 -==> Parameters: 
2019-04-06 13:39:22 -<==      Total: 1
2019-04-06 13:39:22 -耗时 : 10
2019-04-06 13:39:22 -返回值 : com.bootdo.common.utils.PageUtils@5475f8c9
2019-04-06 13:39:23 -请求地址 : http://localhost:8081/moneyLog/waterLog/edit/5
2019-04-06 13:39:23 -HTTP METHOD : GET
2019-04-06 13:39:23 -CLASS_METHOD : com.bootdo.moneyLog.controller.WaterLogController.edit
2019-04-06 13:39:23 -参数 : [5, {}]
2019-04-06 13:39:23 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,`water_type`,`water_money`,`water_date`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from water_log where id = ? 
2019-04-06 13:39:23 -==> Parameters: 5(Long)
2019-04-06 13:39:23 -<==      Total: 1
2019-04-06 13:39:23 -耗时 : 6
2019-04-06 13:39:23 -返回值 : moneyLog/waterLog/edit
2019-04-06 13:39:24 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-06 13:39:24 -HTTP METHOD : GET
2019-04-06 13:39:24 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-06 13:39:24 -参数 : [userType]
2019-04-06 13:39:24 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-06 13:39:24 -请求地址 : http://localhost:8081/common/dict/list/waterType
2019-04-06 13:39:24 -HTTP METHOD : GET
2019-04-06 13:39:24 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-06 13:39:24 -参数 : [waterType]
2019-04-06 13:39:24 -==> Parameters: userType(String)
2019-04-06 13:39:24 -<==      Total: 2
2019-04-06 13:39:24 -耗时 : 5
2019-04-06 13:39:24 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-06 13:39:24 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-06 13:39:24 -==> Parameters: waterType(String)
2019-04-06 13:39:24 -<==      Total: 6
2019-04-06 13:39:24 -耗时 : 13
2019-04-06 13:39:24 -返回值 : [DictDO{id=132, name='特殊水费4', value='5', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=131, name='特殊水费3', value='4', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=130, name='特殊水费2', value='3', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=129, name='特殊水费1', value='2', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=128, name='民用水', value='1', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=127, name='商业水', value='0', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-06 13:39:28 -请求地址 : http://localhost:8081/moneyLog/waterLog/update
2019-04-06 13:39:28 -HTTP METHOD : POST
2019-04-06 13:39:28 -CLASS_METHOD : com.bootdo.moneyLog.controller.WaterLogController.update
2019-04-06 13:39:28 -参数 : [com.bootdo.moneyLog.domain.WaterLogDO@19e8d47a]
2019-04-06 13:39:28 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-06 13:39:28 -nested exception is org.apache.ibatis.exceptions.PersistenceException: 
### Error updating database.  Cause: java.lang.IllegalArgumentException: invalid comparison: java.util.Date and java.lang.String
### Cause: java.lang.IllegalArgumentException: invalid comparison: java.util.Date and java.lang.String
org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.exceptions.PersistenceException: 
### Error updating database.  Cause: java.lang.IllegalArgumentException: invalid comparison: java.util.Date and java.lang.String
### Cause: java.lang.IllegalArgumentException: invalid comparison: java.util.Date and java.lang.String
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:79)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:447)
	at com.sun.proxy.$Proxy101.update(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.update(SqlSessionTemplate.java:295)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:62)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy104.update(Unknown Source)
	at com.bootdo.moneyLog.service.impl.WaterLogServiceImpl.update(WaterLogServiceImpl.java:39)
	at com.bootdo.moneyLog.controller.WaterLogController.update(WaterLogController.java:228)
	at com.bootdo.moneyLog.controller.WaterLogController$$FastClassBySpringCGLIB$$3a5e3635.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:204)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:746)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.bootdo.common.aspect.WebLogAspect.doAround(WebLogAspect.java:57)
	at sun.reflect.GeneratedMethodAccessor128.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.apache.shiro.spring.security.interceptor.AopAllianceAnnotationsAuthorizingMethodInterceptor$1.proceed(AopAllianceAnnotationsAuthorizingMethodInterceptor.java:82)
	at org.apache.shiro.authz.aop.AuthorizingMethodInterceptor.invoke(AuthorizingMethodInterceptor.java:39)
	at org.apache.shiro.spring.security.interceptor.AopAllianceAnnotationsAuthorizingMethodInterceptor.invoke(AopAllianceAnnotationsAuthorizingMethodInterceptor.java:115)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.bootdo.moneyLog.controller.WaterLogController$$EnhancerBySpringCGLIB$$b98e7dec.update(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:209)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:877)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:783)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:991)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:925)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:974)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:877)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:661)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:851)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:61)
	at org.apache.shiro.web.servlet.AdviceFilter.executeChain(AdviceFilter.java:108)
	at org.apache.shiro.web.servlet.AdviceFilter.doFilterInternal(AdviceFilter.java:137)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:66)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)
	at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)
	at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)
	at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)
	at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:383)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:109)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:496)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:790)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1468)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Unknown Source)
Caused by: org.apache.ibatis.exceptions.PersistenceException: 
### Error updating database.  Cause: java.lang.IllegalArgumentException: invalid comparison: java.util.Date and java.lang.String
### Cause: java.lang.IllegalArgumentException: invalid comparison: java.util.Date and java.lang.String
	at org.apache.ibatis.exceptions.ExceptionFactory.wrapException(ExceptionFactory.java:30)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:200)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:434)
	... 103 common frames omitted
Caused by: java.lang.IllegalArgumentException: invalid comparison: java.util.Date and java.lang.String
	at org.apache.ibatis.ognl.OgnlOps.compareWithConversion(OgnlOps.java:93)
	at org.apache.ibatis.ognl.OgnlOps.isEqual(OgnlOps.java:143)
	at org.apache.ibatis.ognl.OgnlOps.equal(OgnlOps.java:802)
	at org.apache.ibatis.ognl.ASTNotEq.getValueBody(ASTNotEq.java:53)
	at org.apache.ibatis.ognl.SimpleNode.evaluateGetValueBody(SimpleNode.java:212)
	at org.apache.ibatis.ognl.SimpleNode.getValue(SimpleNode.java:258)
	at org.apache.ibatis.ognl.ASTAnd.getValueBody(ASTAnd.java:61)
	at org.apache.ibatis.ognl.SimpleNode.evaluateGetValueBody(SimpleNode.java:212)
	at org.apache.ibatis.ognl.SimpleNode.getValue(SimpleNode.java:258)
	at org.apache.ibatis.ognl.Ognl.getValue(Ognl.java:470)
	at org.apache.ibatis.ognl.Ognl.getValue(Ognl.java:434)
	at org.apache.ibatis.scripting.xmltags.OgnlCache.getValue(OgnlCache.java:44)
	at org.apache.ibatis.scripting.xmltags.ExpressionEvaluator.evaluateBoolean(ExpressionEvaluator.java:32)
	at org.apache.ibatis.scripting.xmltags.IfSqlNode.apply(IfSqlNode.java:34)
	at org.apache.ibatis.scripting.xmltags.MixedSqlNode.apply(MixedSqlNode.java:33)
	at org.apache.ibatis.scripting.xmltags.TrimSqlNode.apply(TrimSqlNode.java:55)
	at org.apache.ibatis.scripting.xmltags.MixedSqlNode.apply(MixedSqlNode.java:33)
	at org.apache.ibatis.scripting.xmltags.DynamicSqlSource.getBoundSql(DynamicSqlSource.java:41)
	at org.apache.ibatis.mapping.MappedStatement.getBoundSql(MappedStatement.java:292)
	at org.apache.ibatis.executor.statement.BaseStatementHandler.<init>(BaseStatementHandler.java:64)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.<init>(PreparedStatementHandler.java:40)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.<init>(RoutingStatementHandler.java:46)
	at org.apache.ibatis.session.Configuration.newStatementHandler(Configuration.java:545)
	at org.apache.ibatis.executor.SimpleExecutor.doUpdate(SimpleExecutor.java:48)
	at org.apache.ibatis.executor.BaseExecutor.update(BaseExecutor.java:117)
	at org.apache.ibatis.executor.CachingExecutor.update(CachingExecutor.java:76)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:198)
	... 108 common frames omitted
2019-04-06 13:39:28 -==> Parameters: 1(Long), admin(String), error(String), null, http://localhost:8081/moneyLog/waterLog/update(String), org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.exceptions.PersistenceException: 
### Error updating database.  Cause: java.lang.IllegalArgumentException: invalid comparison: java.util.Date and java.lang.String
### Cause: java.lang.IllegalArgumentException: invalid comparison: java.util.Date and java.lang.String(String), null, 2019-04-06 13:39:28.261(Timestamp)
2019-04-06 13:39:28 -<==    Updates: 1
2019-04-06 14:03:25 -WebSocketSession[1 current WS(1)-HttpStream(0)-HttpPoll(0), 2 total, 0 closed abnormally (0 connect failure, 0 send limit, 0 transport error)], stompSubProtocol[processed CONNECT(2)-CONNECTED(2)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 21], outboundChannelpool size = 0, active threads = 0, queued tasks = 0, completed tasks = 3], sockJsScheduler[pool size = 4, active threads = 1, queued tasks = 2, completed tasks = 439]
2019-04-06 14:04:08 -==>  Preparing: select distinct m.perms from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id = ur.role_id where ur.user_id = ? 
2019-04-06 14:04:08 -==> Parameters: 1(Long)
2019-04-06 14:04:08 -<==      Total: 90
2019-04-06 14:04:08 -请求地址 : http://localhost:8081/moneyLog/waterLog/edit/5
2019-04-06 14:04:08 -HTTP METHOD : GET
2019-04-06 14:04:08 -CLASS_METHOD : com.bootdo.moneyLog.controller.WaterLogController.edit
2019-04-06 14:04:08 -参数 : [5, {}]
2019-04-06 14:04:08 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,`water_type`,`water_money`,`water_date`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from water_log where id = ? 
2019-04-06 14:04:08 -==> Parameters: 5(Long)
2019-04-06 14:04:08 -<==      Total: 1
2019-04-06 14:04:08 -耗时 : 7
2019-04-06 14:04:08 -返回值 : moneyLog/waterLog/edit
2019-04-06 14:04:09 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-06 14:04:09 -HTTP METHOD : GET
2019-04-06 14:04:09 -请求地址 : http://localhost:8081/common/dict/list/waterType
2019-04-06 14:04:09 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-06 14:04:09 -HTTP METHOD : GET
2019-04-06 14:04:09 -参数 : [userType]
2019-04-06 14:04:09 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-06 14:04:09 -参数 : [waterType]
2019-04-06 14:04:09 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-06 14:04:09 -==> Parameters: userType(String)
2019-04-06 14:04:09 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-06 14:04:09 -==> Parameters: waterType(String)
2019-04-06 14:04:09 -<==      Total: 2
2019-04-06 14:04:09 -<==      Total: 6
2019-04-06 14:04:09 -耗时 : 7
2019-04-06 14:04:09 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-06 14:04:09 -耗时 : 7
2019-04-06 14:04:09 -返回值 : [DictDO{id=132, name='特殊水费4', value='5', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=131, name='特殊水费3', value='4', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=130, name='特殊水费2', value='3', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=129, name='特殊水费1', value='2', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=128, name='民用水', value='1', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=127, name='商业水', value='0', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-06 14:05:34 -请求地址 : http://localhost:8081/moneyLog/waterLog/edit/5
2019-04-06 14:05:34 -HTTP METHOD : GET
2019-04-06 14:05:34 -CLASS_METHOD : com.bootdo.moneyLog.controller.WaterLogController.edit
2019-04-06 14:05:34 -参数 : [5, {}]
2019-04-06 14:05:34 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,`water_type`,`water_money`,`water_date`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from water_log where id = ? 
2019-04-06 14:05:34 -==> Parameters: 5(Long)
2019-04-06 14:05:34 -<==      Total: 1
2019-04-06 14:05:34 -耗时 : 6
2019-04-06 14:05:34 -返回值 : moneyLog/waterLog/edit
2019-04-06 14:05:34 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-06 14:05:34 -HTTP METHOD : GET
2019-04-06 14:05:34 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-06 14:05:34 -参数 : [userType]
2019-04-06 14:05:34 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-06 14:05:34 -请求地址 : http://localhost:8081/common/dict/list/waterType
2019-04-06 14:05:34 -HTTP METHOD : GET
2019-04-06 14:05:34 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-06 14:05:34 -==> Parameters: userType(String)
2019-04-06 14:05:34 -参数 : [waterType]
2019-04-06 14:05:34 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-06 14:05:34 -==> Parameters: waterType(String)
2019-04-06 14:05:34 -<==      Total: 2
2019-04-06 14:05:34 -耗时 : 8
2019-04-06 14:05:34 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-06 14:05:34 -<==      Total: 6
2019-04-06 14:05:34 -耗时 : 13
2019-04-06 14:05:34 -返回值 : [DictDO{id=132, name='特殊水费4', value='5', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=131, name='特殊水费3', value='4', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=130, name='特殊水费2', value='3', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=129, name='特殊水费1', value='2', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=128, name='民用水', value='1', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=127, name='商业水', value='0', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-06 14:05:43 -请求地址 : http://localhost:8081/moneyLog/waterLog/update
2019-04-06 14:05:43 -HTTP METHOD : POST
2019-04-06 14:05:43 -CLASS_METHOD : com.bootdo.moneyLog.controller.WaterLogController.update
2019-04-06 14:05:43 -参数 : [com.bootdo.moneyLog.domain.WaterLogDO@7fc14fa8]
2019-04-06 14:05:43 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-06 14:05:43 -==> Parameters: 1(Long), admin(String), error(String), null, http://localhost:8081/moneyLog/waterLog/update(String), org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.exceptions.PersistenceException: 
### Error updating database.  Cause: java.lang.IllegalArgumentException: invalid comparison: java.util.Date and java.lang.String
### Cause: java.lang.IllegalArgumentException: invalid comparison: java.util.Date and java.lang.String(String), null, 2019-04-06 14:05:43.439(Timestamp)
2019-04-06 14:05:43 -nested exception is org.apache.ibatis.exceptions.PersistenceException: 
### Error updating database.  Cause: java.lang.IllegalArgumentException: invalid comparison: java.util.Date and java.lang.String
### Cause: java.lang.IllegalArgumentException: invalid comparison: java.util.Date and java.lang.String
org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.exceptions.PersistenceException: 
### Error updating database.  Cause: java.lang.IllegalArgumentException: invalid comparison: java.util.Date and java.lang.String
### Cause: java.lang.IllegalArgumentException: invalid comparison: java.util.Date and java.lang.String
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:79)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:447)
	at com.sun.proxy.$Proxy101.update(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.update(SqlSessionTemplate.java:295)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:62)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy104.update(Unknown Source)
	at com.bootdo.moneyLog.service.impl.WaterLogServiceImpl.update(WaterLogServiceImpl.java:39)
	at com.bootdo.moneyLog.controller.WaterLogController.update(WaterLogController.java:228)
	at com.bootdo.moneyLog.controller.WaterLogController$$FastClassBySpringCGLIB$$3a5e3635.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:204)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:746)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.bootdo.common.aspect.WebLogAspect.doAround(WebLogAspect.java:57)
	at sun.reflect.GeneratedMethodAccessor128.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.apache.shiro.spring.security.interceptor.AopAllianceAnnotationsAuthorizingMethodInterceptor$1.proceed(AopAllianceAnnotationsAuthorizingMethodInterceptor.java:82)
	at org.apache.shiro.authz.aop.AuthorizingMethodInterceptor.invoke(AuthorizingMethodInterceptor.java:39)
	at org.apache.shiro.spring.security.interceptor.AopAllianceAnnotationsAuthorizingMethodInterceptor.invoke(AopAllianceAnnotationsAuthorizingMethodInterceptor.java:115)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.bootdo.moneyLog.controller.WaterLogController$$EnhancerBySpringCGLIB$$b98e7dec.update(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:209)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:877)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:783)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:991)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:925)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:974)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:877)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:661)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:851)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:61)
	at org.apache.shiro.web.servlet.AdviceFilter.executeChain(AdviceFilter.java:108)
	at org.apache.shiro.web.servlet.AdviceFilter.doFilterInternal(AdviceFilter.java:137)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:66)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)
	at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)
	at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)
	at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)
	at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:383)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:109)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:496)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:790)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1468)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Unknown Source)
Caused by: org.apache.ibatis.exceptions.PersistenceException: 
### Error updating database.  Cause: java.lang.IllegalArgumentException: invalid comparison: java.util.Date and java.lang.String
### Cause: java.lang.IllegalArgumentException: invalid comparison: java.util.Date and java.lang.String
	at org.apache.ibatis.exceptions.ExceptionFactory.wrapException(ExceptionFactory.java:30)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:200)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:434)
	... 103 common frames omitted
Caused by: java.lang.IllegalArgumentException: invalid comparison: java.util.Date and java.lang.String
	at org.apache.ibatis.ognl.OgnlOps.compareWithConversion(OgnlOps.java:93)
	at org.apache.ibatis.ognl.OgnlOps.isEqual(OgnlOps.java:143)
	at org.apache.ibatis.ognl.OgnlOps.equal(OgnlOps.java:802)
	at org.apache.ibatis.ognl.ASTNotEq.getValueBody(ASTNotEq.java:53)
	at org.apache.ibatis.ognl.SimpleNode.evaluateGetValueBody(SimpleNode.java:212)
	at org.apache.ibatis.ognl.SimpleNode.getValue(SimpleNode.java:258)
	at org.apache.ibatis.ognl.ASTAnd.getValueBody(ASTAnd.java:61)
	at org.apache.ibatis.ognl.SimpleNode.evaluateGetValueBody(SimpleNode.java:212)
	at org.apache.ibatis.ognl.SimpleNode.getValue(SimpleNode.java:258)
	at org.apache.ibatis.ognl.Ognl.getValue(Ognl.java:470)
	at org.apache.ibatis.ognl.Ognl.getValue(Ognl.java:434)
	at org.apache.ibatis.scripting.xmltags.OgnlCache.getValue(OgnlCache.java:44)
	at org.apache.ibatis.scripting.xmltags.ExpressionEvaluator.evaluateBoolean(ExpressionEvaluator.java:32)
	at org.apache.ibatis.scripting.xmltags.IfSqlNode.apply(IfSqlNode.java:34)
	at org.apache.ibatis.scripting.xmltags.MixedSqlNode.apply(MixedSqlNode.java:33)
	at org.apache.ibatis.scripting.xmltags.TrimSqlNode.apply(TrimSqlNode.java:55)
	at org.apache.ibatis.scripting.xmltags.MixedSqlNode.apply(MixedSqlNode.java:33)
	at org.apache.ibatis.scripting.xmltags.DynamicSqlSource.getBoundSql(DynamicSqlSource.java:41)
	at org.apache.ibatis.mapping.MappedStatement.getBoundSql(MappedStatement.java:292)
	at org.apache.ibatis.executor.statement.BaseStatementHandler.<init>(BaseStatementHandler.java:64)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.<init>(PreparedStatementHandler.java:40)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.<init>(RoutingStatementHandler.java:46)
	at org.apache.ibatis.session.Configuration.newStatementHandler(Configuration.java:545)
	at org.apache.ibatis.executor.SimpleExecutor.doUpdate(SimpleExecutor.java:48)
	at org.apache.ibatis.executor.BaseExecutor.update(BaseExecutor.java:117)
	at org.apache.ibatis.executor.CachingExecutor.update(CachingExecutor.java:76)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:198)
	... 108 common frames omitted
2019-04-06 14:05:43 -<==    Updates: 1
2019-04-06 14:07:06 -请求地址 : http://localhost:8081/moneyLog/waterLog/update
2019-04-06 14:07:06 -HTTP METHOD : POST
2019-04-06 14:07:06 -CLASS_METHOD : com.bootdo.moneyLog.controller.WaterLogController.update
2019-04-06 14:07:06 -参数 : [com.bootdo.moneyLog.domain.WaterLogDO@1c6eb333]
2019-04-06 14:07:06 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-06 14:07:06 -==> Parameters: 1(Long), admin(String), error(String), null, http://localhost:8081/moneyLog/waterLog/update(String), org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.exceptions.PersistenceException: 
### Error updating database.  Cause: java.lang.IllegalArgumentException: invalid comparison: java.util.Date and java.lang.String
### Cause: java.lang.IllegalArgumentException: invalid comparison: java.util.Date and java.lang.String(String), null, 2019-04-06 14:07:06.684(Timestamp)
2019-04-06 14:07:06 -nested exception is org.apache.ibatis.exceptions.PersistenceException: 
### Error updating database.  Cause: java.lang.IllegalArgumentException: invalid comparison: java.util.Date and java.lang.String
### Cause: java.lang.IllegalArgumentException: invalid comparison: java.util.Date and java.lang.String
org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.exceptions.PersistenceException: 
### Error updating database.  Cause: java.lang.IllegalArgumentException: invalid comparison: java.util.Date and java.lang.String
### Cause: java.lang.IllegalArgumentException: invalid comparison: java.util.Date and java.lang.String
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:79)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:447)
	at com.sun.proxy.$Proxy101.update(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.update(SqlSessionTemplate.java:295)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:62)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy104.update(Unknown Source)
	at com.bootdo.moneyLog.service.impl.WaterLogServiceImpl.update(WaterLogServiceImpl.java:39)
	at com.bootdo.moneyLog.controller.WaterLogController.update(WaterLogController.java:228)
	at com.bootdo.moneyLog.controller.WaterLogController$$FastClassBySpringCGLIB$$3a5e3635.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:204)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:746)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.bootdo.common.aspect.WebLogAspect.doAround(WebLogAspect.java:57)
	at sun.reflect.GeneratedMethodAccessor128.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.apache.shiro.spring.security.interceptor.AopAllianceAnnotationsAuthorizingMethodInterceptor$1.proceed(AopAllianceAnnotationsAuthorizingMethodInterceptor.java:82)
	at org.apache.shiro.authz.aop.AuthorizingMethodInterceptor.invoke(AuthorizingMethodInterceptor.java:39)
	at org.apache.shiro.spring.security.interceptor.AopAllianceAnnotationsAuthorizingMethodInterceptor.invoke(AopAllianceAnnotationsAuthorizingMethodInterceptor.java:115)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.bootdo.moneyLog.controller.WaterLogController$$EnhancerBySpringCGLIB$$b98e7dec.update(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:209)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:877)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:783)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:991)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:925)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:974)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:877)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:661)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:851)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:61)
	at org.apache.shiro.web.servlet.AdviceFilter.executeChain(AdviceFilter.java:108)
	at org.apache.shiro.web.servlet.AdviceFilter.doFilterInternal(AdviceFilter.java:137)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:66)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)
	at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)
	at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)
	at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)
	at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:383)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:109)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:496)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:790)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1468)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Unknown Source)
Caused by: org.apache.ibatis.exceptions.PersistenceException: 
### Error updating database.  Cause: java.lang.IllegalArgumentException: invalid comparison: java.util.Date and java.lang.String
### Cause: java.lang.IllegalArgumentException: invalid comparison: java.util.Date and java.lang.String
	at org.apache.ibatis.exceptions.ExceptionFactory.wrapException(ExceptionFactory.java:30)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:200)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:434)
	... 103 common frames omitted
Caused by: java.lang.IllegalArgumentException: invalid comparison: java.util.Date and java.lang.String
	at org.apache.ibatis.ognl.OgnlOps.compareWithConversion(OgnlOps.java:93)
	at org.apache.ibatis.ognl.OgnlOps.isEqual(OgnlOps.java:143)
	at org.apache.ibatis.ognl.OgnlOps.equal(OgnlOps.java:802)
	at org.apache.ibatis.ognl.ASTNotEq.getValueBody(ASTNotEq.java:53)
	at org.apache.ibatis.ognl.SimpleNode.evaluateGetValueBody(SimpleNode.java:212)
	at org.apache.ibatis.ognl.SimpleNode.getValue(SimpleNode.java:258)
	at org.apache.ibatis.ognl.ASTAnd.getValueBody(ASTAnd.java:61)
	at org.apache.ibatis.ognl.SimpleNode.evaluateGetValueBody(SimpleNode.java:212)
	at org.apache.ibatis.ognl.SimpleNode.getValue(SimpleNode.java:258)
	at org.apache.ibatis.ognl.Ognl.getValue(Ognl.java:470)
	at org.apache.ibatis.ognl.Ognl.getValue(Ognl.java:434)
	at org.apache.ibatis.scripting.xmltags.OgnlCache.getValue(OgnlCache.java:44)
	at org.apache.ibatis.scripting.xmltags.ExpressionEvaluator.evaluateBoolean(ExpressionEvaluator.java:32)
	at org.apache.ibatis.scripting.xmltags.IfSqlNode.apply(IfSqlNode.java:34)
	at org.apache.ibatis.scripting.xmltags.MixedSqlNode.apply(MixedSqlNode.java:33)
	at org.apache.ibatis.scripting.xmltags.TrimSqlNode.apply(TrimSqlNode.java:55)
	at org.apache.ibatis.scripting.xmltags.MixedSqlNode.apply(MixedSqlNode.java:33)
	at org.apache.ibatis.scripting.xmltags.DynamicSqlSource.getBoundSql(DynamicSqlSource.java:41)
	at org.apache.ibatis.mapping.MappedStatement.getBoundSql(MappedStatement.java:292)
	at org.apache.ibatis.executor.statement.BaseStatementHandler.<init>(BaseStatementHandler.java:64)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.<init>(PreparedStatementHandler.java:40)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.<init>(RoutingStatementHandler.java:46)
	at org.apache.ibatis.session.Configuration.newStatementHandler(Configuration.java:545)
	at org.apache.ibatis.executor.SimpleExecutor.doUpdate(SimpleExecutor.java:48)
	at org.apache.ibatis.executor.BaseExecutor.update(BaseExecutor.java:117)
	at org.apache.ibatis.executor.CachingExecutor.update(CachingExecutor.java:76)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:198)
	... 108 common frames omitted
2019-04-06 14:07:06 -<==    Updates: 1
2019-04-06 14:07:17 -请求地址 : http://localhost:8081/moneyLog/waterLog/update
2019-04-06 14:07:17 -HTTP METHOD : POST
2019-04-06 14:07:17 -CLASS_METHOD : com.bootdo.moneyLog.controller.WaterLogController.update
2019-04-06 14:07:17 -参数 : [com.bootdo.moneyLog.domain.WaterLogDO@5371789f]
2019-04-06 14:07:17 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-06 14:07:17 -==> Parameters: 1(Long), admin(String), error(String), null, http://localhost:8081/moneyLog/waterLog/update(String), org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.exceptions.PersistenceException: 
### Error updating database.  Cause: java.lang.IllegalArgumentException: invalid comparison: java.util.Date and java.lang.String
### Cause: java.lang.IllegalArgumentException: invalid comparison: java.util.Date and java.lang.String(String), null, 2019-04-06 14:07:17.557(Timestamp)
2019-04-06 14:07:17 -nested exception is org.apache.ibatis.exceptions.PersistenceException: 
### Error updating database.  Cause: java.lang.IllegalArgumentException: invalid comparison: java.util.Date and java.lang.String
### Cause: java.lang.IllegalArgumentException: invalid comparison: java.util.Date and java.lang.String
org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.exceptions.PersistenceException: 
### Error updating database.  Cause: java.lang.IllegalArgumentException: invalid comparison: java.util.Date and java.lang.String
### Cause: java.lang.IllegalArgumentException: invalid comparison: java.util.Date and java.lang.String
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:79)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:447)
	at com.sun.proxy.$Proxy101.update(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.update(SqlSessionTemplate.java:295)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:62)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy104.update(Unknown Source)
	at com.bootdo.moneyLog.service.impl.WaterLogServiceImpl.update(WaterLogServiceImpl.java:39)
	at com.bootdo.moneyLog.controller.WaterLogController.update(WaterLogController.java:228)
	at com.bootdo.moneyLog.controller.WaterLogController$$FastClassBySpringCGLIB$$3a5e3635.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:204)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:746)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.bootdo.common.aspect.WebLogAspect.doAround(WebLogAspect.java:57)
	at sun.reflect.GeneratedMethodAccessor128.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.apache.shiro.spring.security.interceptor.AopAllianceAnnotationsAuthorizingMethodInterceptor$1.proceed(AopAllianceAnnotationsAuthorizingMethodInterceptor.java:82)
	at org.apache.shiro.authz.aop.AuthorizingMethodInterceptor.invoke(AuthorizingMethodInterceptor.java:39)
	at org.apache.shiro.spring.security.interceptor.AopAllianceAnnotationsAuthorizingMethodInterceptor.invoke(AopAllianceAnnotationsAuthorizingMethodInterceptor.java:115)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.bootdo.moneyLog.controller.WaterLogController$$EnhancerBySpringCGLIB$$b98e7dec.update(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:209)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:877)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:783)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:991)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:925)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:974)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:877)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:661)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:851)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:61)
	at org.apache.shiro.web.servlet.AdviceFilter.executeChain(AdviceFilter.java:108)
	at org.apache.shiro.web.servlet.AdviceFilter.doFilterInternal(AdviceFilter.java:137)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:66)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)
	at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)
	at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)
	at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)
	at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:383)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:109)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:496)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:790)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1468)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Unknown Source)
Caused by: org.apache.ibatis.exceptions.PersistenceException: 
### Error updating database.  Cause: java.lang.IllegalArgumentException: invalid comparison: java.util.Date and java.lang.String
### Cause: java.lang.IllegalArgumentException: invalid comparison: java.util.Date and java.lang.String
	at org.apache.ibatis.exceptions.ExceptionFactory.wrapException(ExceptionFactory.java:30)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:200)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:434)
	... 103 common frames omitted
Caused by: java.lang.IllegalArgumentException: invalid comparison: java.util.Date and java.lang.String
	at org.apache.ibatis.ognl.OgnlOps.compareWithConversion(OgnlOps.java:93)
	at org.apache.ibatis.ognl.OgnlOps.isEqual(OgnlOps.java:143)
	at org.apache.ibatis.ognl.OgnlOps.equal(OgnlOps.java:802)
	at org.apache.ibatis.ognl.ASTNotEq.getValueBody(ASTNotEq.java:53)
	at org.apache.ibatis.ognl.SimpleNode.evaluateGetValueBody(SimpleNode.java:212)
	at org.apache.ibatis.ognl.SimpleNode.getValue(SimpleNode.java:258)
	at org.apache.ibatis.ognl.ASTAnd.getValueBody(ASTAnd.java:61)
	at org.apache.ibatis.ognl.SimpleNode.evaluateGetValueBody(SimpleNode.java:212)
	at org.apache.ibatis.ognl.SimpleNode.getValue(SimpleNode.java:258)
	at org.apache.ibatis.ognl.Ognl.getValue(Ognl.java:470)
	at org.apache.ibatis.ognl.Ognl.getValue(Ognl.java:434)
	at org.apache.ibatis.scripting.xmltags.OgnlCache.getValue(OgnlCache.java:44)
	at org.apache.ibatis.scripting.xmltags.ExpressionEvaluator.evaluateBoolean(ExpressionEvaluator.java:32)
	at org.apache.ibatis.scripting.xmltags.IfSqlNode.apply(IfSqlNode.java:34)
	at org.apache.ibatis.scripting.xmltags.MixedSqlNode.apply(MixedSqlNode.java:33)
	at org.apache.ibatis.scripting.xmltags.TrimSqlNode.apply(TrimSqlNode.java:55)
	at org.apache.ibatis.scripting.xmltags.MixedSqlNode.apply(MixedSqlNode.java:33)
	at org.apache.ibatis.scripting.xmltags.DynamicSqlSource.getBoundSql(DynamicSqlSource.java:41)
	at org.apache.ibatis.mapping.MappedStatement.getBoundSql(MappedStatement.java:292)
	at org.apache.ibatis.executor.statement.BaseStatementHandler.<init>(BaseStatementHandler.java:64)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.<init>(PreparedStatementHandler.java:40)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.<init>(RoutingStatementHandler.java:46)
	at org.apache.ibatis.session.Configuration.newStatementHandler(Configuration.java:545)
	at org.apache.ibatis.executor.SimpleExecutor.doUpdate(SimpleExecutor.java:48)
	at org.apache.ibatis.executor.BaseExecutor.update(BaseExecutor.java:117)
	at org.apache.ibatis.executor.CachingExecutor.update(CachingExecutor.java:76)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:198)
	... 108 common frames omitted
2019-04-06 14:07:17 -<==    Updates: 1
2019-04-06 14:21:16 -Starting BootdoApplication on ZJZL-20180906VX with PID 2940 (D:\eclipse2018-work\bootdo\target\classes started by Administrator in D:\eclipse2018-work\bootdo)
2019-04-06 14:21:16 -Running with Spring Boot v2.0.3.RELEASE, Spring v5.0.7.RELEASE
2019-04-06 14:21:16 -The following profiles are active: dev
2019-04-06 14:21:16 -Refreshing org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@60d1a32f: startup date [Sat Apr 06 14:21:16 CST 2019]; root of context hierarchy
2019-04-06 14:21:22 -Multiple Spring Data modules found, entering strict repository configuration mode!
2019-04-06 14:21:26 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$e547fea3] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-06 14:21:27 -Bean 'shiroConfig' of type [com.bootdo.system.config.ShiroConfig$$EnhancerBySpringCGLIB$$d7a12d4a] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-06 14:21:28 -Bean 'userRealm' of type [com.bootdo.system.shiro.UserRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-06 14:21:29 -Bean 'cacheManager2' of type [net.sf.ehcache.CacheManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-06 14:21:29 -Bean 'ehCacheManager' of type [org.apache.shiro.cache.ehcache.EhCacheManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-06 14:21:29 -Cache with name 'com.bootdo.system.shiro.UserRealm.authorizationCache' does not yet exist.  Creating now.
2019-04-06 14:21:29 -Added EhCache named [com.bootdo.system.shiro.UserRealm.authorizationCache]
2019-04-06 14:21:29 -Bean 'sessionDAO' of type [org.apache.shiro.session.mgt.eis.MemorySessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-06 14:21:29 -Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-06 14:21:29 -Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-06 14:21:29 -Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-06 14:21:31 -Tomcat initialized with port(s): 8081 (http)
2019-04-06 14:21:31 -Initializing ProtocolHandler ["http-nio-8081"]
2019-04-06 14:21:32 -Starting service [Tomcat]
2019-04-06 14:21:32 -Starting Servlet Engine: Apache Tomcat/8.5.31
2019-04-06 14:21:32 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [C:\Program Files\Java\jre1.8.0_131\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:/Program Files/Java/jre1.8.0_131/bin/server;C:/Program Files/Java/jre1.8.0_131/bin;C:/Program Files/Java/jre1.8.0_131/lib/amd64;C:\ProgramData\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Windows\System32\OpenSSH\;D:\pbb\pycSafefile\x64;D:\pbb\PBB Reader\x64;C:\Program Files\MySQL\MySQL Utilities 1.6\;D:\MAVEN\apache-maven-3.6.0\bin;D:\GIT\Git\cmd;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;;C:\Users\Administrator\Desktop;;.]
2019-04-06 14:21:32 -Initializing Spring embedded WebApplicationContext
2019-04-06 14:21:32 -Root WebApplicationContext: initialization completed in 16215 ms
2019-04-06 14:21:39 -Mapping filter: 'characterEncodingFilter' to: [/*]
2019-04-06 14:21:39 -Mapping filter: 'hiddenHttpMethodFilter' to: [/*]
2019-04-06 14:21:39 -Mapping filter: 'httpPutFormContentFilter' to: [/*]
2019-04-06 14:21:39 -Mapping filter: 'requestContextFilter' to: [/*]
2019-04-06 14:21:39 -Filter xssFilter was not registered (disabled)
2019-04-06 14:21:39 -Mapping filter: 'webStatFilter' to urls: [/*]
2019-04-06 14:21:39 -Mapping filter: 'shiroFilterFactoryBean' to: [/*]
2019-04-06 14:21:39 -Servlet statViewServlet mapped to [/druid/*]
2019-04-06 14:21:39 -Servlet dispatcherServlet mapped to [/]
2019-04-06 14:21:45 -ApplicationContext registed-->org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@60d1a32f: startup date [Sat Apr 06 14:21:16 CST 2019]; root of context hierarchy
2019-04-06 14:21:46 -Using default implementation for ThreadExecutor
2019-04-06 14:21:46 -Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2019-04-06 14:21:46 -Quartz Scheduler v.2.2.1 created.
2019-04-06 14:21:46 -RAMJobStore initialized.
2019-04-06 14:21:46 -Scheduler meta-data: Quartz Scheduler (v2.2.1) 'schedulerFactoryBean' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2019-04-06 14:21:46 -Quartz scheduler 'schedulerFactoryBean' initialized from an externally provided properties instance.
2019-04-06 14:21:46 -Quartz scheduler version: 2.2.1
2019-04-06 14:21:46 -JobFactory set to: com.bootdo.common.quartz.factory.JobFactory@4037cdb0
2019-04-06 14:21:47 -Initializing ExecutorService  'clientInboundChannelExecutor'
2019-04-06 14:21:47 -Initializing ExecutorService  'clientOutboundChannelExecutor'
2019-04-06 14:21:52 -Mapped "{[/charts/countDD/getCountDD],methods=[POST]}" onto public com.bootdo.charts.vo.CountDayVo com.bootdo.charts.controller.countDDController.getCountD(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo,javax.servlet.http.HttpServletRequest)
2019-04-06 14:21:52 -Mapped "{[/charts/countDD/tableDD],methods=[POST]}" onto public java.lang.String com.bootdo.charts.controller.countDDController.tableDD()
2019-04-06 14:21:52 -Mapped "{[/charts/countDD],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.countDDController.countDD()
2019-04-06 14:21:52 -Mapped "{[/charts/countDD/exportCountDD],methods=[GET]}" onto public void com.bootdo.charts.controller.countDDController.exprotElecLog(com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-06 14:21:52 -Mapped "{[/charts/countMM],methods=[GET]}" onto java.lang.String com.bootdo.charts.controller.countMMController.countMM()
2019-04-06 14:21:52 -Mapped "{[/charts/countMM/exportCountMM],methods=[GET]}" onto public void com.bootdo.charts.controller.countMMController.exprotElecLog(com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-06 14:21:52 -Mapped "{[/charts/countMM/getCountMM],methods=[POST]}" onto public void com.bootdo.charts.controller.countMMController.getCountMM(org.springframework.ui.Model,com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo,javax.servlet.http.HttpServletRequest)
2019-04-06 14:21:52 -Mapped "{[/charts/countOwe/getCountOwe],methods=[POST]}" onto public com.bootdo.charts.vo.CountOweVo com.bootdo.charts.controller.countOweController.getCountD(com.bootdo.elec.vo.ElecVo,com.bootdo.water.vo.WaterVo,com.bootdo.heat.vo.HeatVo,javax.servlet.http.HttpServletRequest)
2019-04-06 14:21:52 -Mapped "{[/charts/countOwe],methods=[GET]}" onto java.lang.String com.bootdo.charts.controller.countOweController.countOwe()
2019-04-06 14:21:52 -Mapped "{[/charts/countRun/getCountRun],methods=[POST]}" onto public int com.bootdo.charts.controller.countRunController.getCountD(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo)
2019-04-06 14:21:52 -Mapped "{[/charts/countRun/exportCountRun],methods=[GET]}" onto public void com.bootdo.charts.controller.countRunController.exprotElecLog(com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-06 14:21:52 -Mapped "{[/charts/countRun],methods=[GET]}" onto java.lang.String com.bootdo.charts.controller.countRunController.countRun()
2019-04-06 14:21:52 -Mapped "{[/charts/countYY/getCountYY],methods=[POST]}" onto public int com.bootdo.charts.controller.countYYController.getCountD(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo)
2019-04-06 14:21:52 -Mapped "{[/charts/countYY/exportCountYY],methods=[GET]}" onto public void com.bootdo.charts.controller.countYYController.exprotElecLog(com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-06 14:21:52 -Mapped "{[/charts/countYY],methods=[GET]}" onto java.lang.String com.bootdo.charts.controller.countYYController.countYY()
2019-04-06 14:21:52 -Mapped "{[/common/dict/add],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.add()
2019-04-06 14:21:52 -Mapped "{[/common/dict/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.remove(java.lang.Long)
2019-04-06 14:21:52 -Mapped "{[/common/dict/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.remove(java.lang.Long[])
2019-04-06 14:21:52 -Mapped "{[/common/dict/update]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.update(com.bootdo.common.domain.DictDO)
2019-04-06 14:21:52 -Mapped "{[/common/dict/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.common.controller.DictController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-06 14:21:52 -Mapped "{[/common/dict/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.save(com.bootdo.common.domain.DictDO)
2019-04-06 14:21:52 -Mapped "{[/common/dict/add/{type}/{description}],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.addD(org.springframework.ui.Model,java.lang.String,java.lang.String)
2019-04-06 14:21:52 -Mapped "{[/common/dict/list/{type}],methods=[GET]}" onto public java.util.List<com.bootdo.common.domain.DictDO> com.bootdo.common.controller.DictController.listByType(java.lang.String)
2019-04-06 14:21:52 -Mapped "{[/common/dict/type],methods=[GET]}" onto public java.util.List<com.bootdo.common.domain.DictDO> com.bootdo.common.controller.DictController.listType()
2019-04-06 14:21:52 -Mapped "{[/common/dict/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-06 14:21:52 -Mapped "{[/common/dict],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.dict()
2019-04-06 14:21:52 -Mapped "{[/common/sysFile/add],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.FileController.add()
2019-04-06 14:21:52 -Mapped "{[/common/sysFile/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.remove(java.lang.Long,javax.servlet.http.HttpServletRequest)
2019-04-06 14:21:52 -Mapped "{[/common/sysFile/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.remove(java.lang.Long[])
2019-04-06 14:21:52 -Mapped "{[/common/sysFile/update]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.update(com.bootdo.common.domain.FileDO)
2019-04-06 14:21:52 -Mapped "{[/common/sysFile/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.common.controller.FileController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-06 14:21:52 -Mapped "{[/common/sysFile/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.save(com.bootdo.common.domain.FileDO)
2019-04-06 14:21:52 -Mapped "{[/common/sysFile/info/{id}]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.info(java.lang.Long)
2019-04-06 14:21:52 -Mapped "{[/common/sysFile/upload],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.FileController.upload(org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpServletRequest)
2019-04-06 14:21:52 -Mapped "{[/common/sysFile],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.FileController.sysFile(org.springframework.ui.Model)
2019-04-06 14:21:52 -Mapped "{[/common/sysFile/edit],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.FileController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-06 14:21:52 -Mapped "{[/common/generator/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.GeneratorController.update(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-06 14:21:52 -Mapped "{[/common/generator/list],methods=[GET]}" onto java.util.List<java.util.Map<java.lang.String, java.lang.Object>> com.bootdo.common.controller.GeneratorController.list()
2019-04-06 14:21:52 -Mapped "{[/common/generator/code/{tableName}]}" onto public void com.bootdo.common.controller.GeneratorController.code(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String) throws java.io.IOException
2019-04-06 14:21:52 -Mapped "{[/common/generator/batchCode]}" onto public void com.bootdo.common.controller.GeneratorController.batchCode(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String) throws java.io.IOException
2019-04-06 14:21:52 -Mapped "{[/common/generator],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.GeneratorController.generator()
2019-04-06 14:21:52 -Mapped "{[/common/generator/edit],methods=[GET]}" onto public java.lang.String com.bootdo.common.controller.GeneratorController.edit(org.springframework.ui.Model)
2019-04-06 14:21:52 -Mapped "{[/common/job/add],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.JobController.add()
2019-04-06 14:21:52 -Mapped "{[/common/job/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.remove(java.lang.Long)
2019-04-06 14:21:52 -Mapped "{[/common/job/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.remove(java.lang.Long[])
2019-04-06 14:21:52 -Mapped "{[/common/job/update],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.update(com.bootdo.common.domain.TaskDO)
2019-04-06 14:21:52 -Mapped "{[/common/job/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.common.controller.JobController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-06 14:21:52 -Mapped "{[/common/job/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.save(com.bootdo.common.domain.TaskDO)
2019-04-06 14:21:52 -Mapped "{[/common/job/info/{id}]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.info(java.lang.Long)
2019-04-06 14:21:52 -Mapped "{[/common/job],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.JobController.taskScheduleJob()
2019-04-06 14:21:52 -Mapped "{[/common/job/changeJobStatus],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.changeJobStatus(java.lang.Long,java.lang.String)
2019-04-06 14:21:52 -Mapped "{[/common/job/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.JobController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-06 14:21:52 -Mapped "{[/common/log/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.LogController.remove(java.lang.Long)
2019-04-06 14:21:52 -Mapped "{[/common/log],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.LogController.log()
2019-04-06 14:21:52 -Mapped "{[/common/log/list],methods=[GET]}" onto com.bootdo.common.domain.PageDO<com.bootdo.common.domain.LogDO> com.bootdo.common.controller.LogController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-06 14:21:52 -Mapped "{[/common/log/batchRemove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.LogController.batchRemove(java.lang.Long[])
2019-04-06 14:21:52 -Mapped "{[/common/long],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.LongController.Long()
2019-04-06 14:21:52 -Mapped "{[/common/time],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.TimeController.Time()
2019-04-06 14:21:52 -Mapped "{[/error],produces=[text/html]}" onto public org.springframework.web.servlet.ModelAndView com.bootdo.common.exception.MainsiteErrorController.errorHtml(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-04-06 14:21:52 -Mapped "{[/error]}" onto public com.bootdo.common.utils.R com.bootdo.common.exception.MainsiteErrorController.handleError(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-04-06 14:21:52 -Mapped "{[/elec/elec/add],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecController.add()
2019-04-06 14:21:52 -Mapped "{[/elec/elec/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.remove(java.lang.Long)
2019-04-06 14:21:52 -Mapped "{[/elec/elec/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.remove(java.lang.Long[])
2019-04-06 14:21:52 -Mapped "{[/elec/elec/update],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.update(com.bootdo.elec.domain.ElecDO)
2019-04-06 14:21:52 -Mapped "{[/elec/elec/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.elec.controller.ElecController.list(java.util.Map<java.lang.String, java.lang.Object>,com.bootdo.elec.domain.ElecDO)
2019-04-06 14:21:52 -Mapped "{[/elec/elec/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.save(com.bootdo.elec.domain.ElecDO)
2019-04-06 14:21:52 -Mapped "{[/elec/elec/exprotElec],methods=[GET]}" onto public void com.bootdo.elec.controller.ElecController.exprotExcel(com.bootdo.elec.vo.ElecVo,javax.servlet.http.HttpServletResponse)
2019-04-06 14:21:52 -Mapped "{[/elec/elec],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecController.Elec()
2019-04-06 14:21:52 -Mapped "{[/elec/elec/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-06 14:21:52 -Mapped "{[/elec/elecInto/exprotElecIntoExcel],methods=[GET]}" onto public void com.bootdo.elec.controller.ElecIntoController.exprotExcel(com.bootdo.elec.vo.ElecVo,javax.servlet.http.HttpServletResponse)
2019-04-06 14:21:52 -Mapped "{[/elec/elecInto],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecIntoController.ElecInto()
2019-04-06 14:21:52 -Mapped "{[/elec/elecInto/importElecIntoExcel],methods=[POST]}" onto public java.util.Map<java.lang.String, java.lang.Object> com.bootdo.elec.controller.ElecIntoController.importElecIntoExcel(org.springframework.web.multipart.MultipartFile,com.bootdo.elec.vo.ElecVo) throws java.lang.Exception
2019-04-06 14:21:52 -Mapped "{[/elec/elecPrice/add],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecPriceController.add()
2019-04-06 14:21:52 -Mapped "{[/elec/elecPrice/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecPriceController.remove(java.lang.Long)
2019-04-06 14:21:52 -Mapped "{[/elec/elecPrice/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecPriceController.remove(java.lang.Long[])
2019-04-06 14:21:52 -Mapped "{[/elec/elecPrice/update]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecPriceController.update(com.bootdo.elec.domain.ElecPriceDO)
2019-04-06 14:21:52 -Mapped "{[/elec/elecPrice/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.elec.controller.ElecPriceController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-06 14:21:52 -Mapped "{[/elec/elecPrice/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecPriceController.save(com.bootdo.elec.domain.ElecPriceDO,com.bootdo.elec.domain.ElecDO)
2019-04-06 14:21:52 -Mapped "{[/elec/elecPrice],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecPriceController.ElecPrice()
2019-04-06 14:21:52 -Mapped "{[/elec/elecPrice/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecPriceController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-06 14:21:52 -Mapped "{[/elec/elecUpLoad],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecUpLoadController.Elec()
2019-04-06 14:21:52 -Mapped "{[/elec/elecUpLoad/importElecExcel],methods=[POST]}" onto public java.util.Map<java.lang.String, java.lang.Object> com.bootdo.elec.controller.ElecUpLoadController.importElecExcel(org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpServletRequest) throws java.lang.Exception
2019-04-06 14:21:52 -Mapped "{[/heat/heat/add],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatController.add()
2019-04-06 14:21:52 -Mapped "{[/heat/heat/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatController.remove(java.lang.Integer)
2019-04-06 14:21:52 -Mapped "{[/heat/heat/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatController.remove(java.lang.Integer[])
2019-04-06 14:21:52 -Mapped "{[/heat/heat/update]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatController.update(com.bootdo.heat.domain.HeatDO)
2019-04-06 14:21:52 -Mapped "{[/heat/heat/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.heat.controller.HeatController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-06 14:21:52 -Mapped "{[/heat/heat/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatController.save(com.bootdo.heat.domain.HeatDO)
2019-04-06 14:21:52 -Mapped "{[/heat/heat/exprotHeat],methods=[GET]}" onto public void com.bootdo.heat.controller.HeatController.exprotExcel(com.bootdo.heat.vo.HeatVo,javax.servlet.http.HttpServletResponse)
2019-04-06 14:21:52 -Mapped "{[/heat/heat],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatController.Heat()
2019-04-06 14:21:52 -Mapped "{[/heat/heat/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatController.edit(java.lang.Integer,org.springframework.ui.Model)
2019-04-06 14:21:52 -Mapped "{[/heat/heatInto/exprotHeatIntoExcel],methods=[GET]}" onto public void com.bootdo.heat.controller.HeatIntoController.exprotExcel(com.bootdo.heat.vo.HeatVo,javax.servlet.http.HttpServletResponse)
2019-04-06 14:21:52 -Mapped "{[/heat/heatInto],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatIntoController.HeatInto()
2019-04-06 14:21:52 -Mapped "{[/heat/heatPrice/add],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatPriceController.add()
2019-04-06 14:21:52 -Mapped "{[/heat/heatPrice/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatPriceController.remove(java.lang.Long)
2019-04-06 14:21:52 -Mapped "{[/heat/heatPrice/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatPriceController.remove(java.lang.Long[])
2019-04-06 14:21:52 -Mapped "{[/heat/heatPrice/update]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatPriceController.update(com.bootdo.heat.domain.HeatPriceDO)
2019-04-06 14:21:52 -Mapped "{[/heat/heatPrice/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.heat.controller.HeatPriceController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-06 14:21:52 -Mapped "{[/heat/heatPrice/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatPriceController.save(com.bootdo.heat.domain.HeatPriceDO)
2019-04-06 14:21:52 -Mapped "{[/heat/heatPrice],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatPriceController.HeatPrice()
2019-04-06 14:21:52 -Mapped "{[/heat/heatPrice/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatPriceController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-06 14:21:52 -Mapped "{[/heat/heatUpLoad/importHeatExcel]}" onto public java.lang.String com.bootdo.heat.controller.HeatUpLoadController.importHeatExcel(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)
2019-04-06 14:21:52 -Mapped "{[/heat/heatUpLoad/exprotHeatExcel],methods=[GET]}" onto public void com.bootdo.heat.controller.HeatUpLoadController.exprotHeatExcel(com.bootdo.heat.vo.HeatVo,javax.servlet.http.HttpServletResponse)
2019-04-06 14:21:52 -Mapped "{[/heat/heatUpLoad/createHeatExcel],methods=[POST]}" onto public java.lang.String com.bootdo.heat.controller.HeatUpLoadController.createHeatExcel(com.bootdo.heat.domain.HeatDO) throws java.lang.Exception
2019-04-06 14:21:52 -Mapped "{[/heat/heatUpLoad],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatUpLoadController.HeatUpLoad()
2019-04-06 14:21:52 -Mapped "{[/moneyList/moneyList],methods=[GET]}" onto java.lang.String com.bootdo.moneyList.controller.MoneyListController.MoneyList()
2019-04-06 14:21:52 -Mapped "{[/moneyList/moneyList/updateMoney],methods=[POST]}" onto public java.util.List<com.bootdo.moneyList.damain.MoneyListDO> com.bootdo.moneyList.controller.MoneyListController.updateMoney(com.bootdo.moneyList.damain.MoneyListDO)
2019-04-06 14:21:52 -Mapped "{[/moneyList/moneyList/queryAllUser],methods=[POST]}" onto public java.util.List<com.bootdo.moneyList.damain.MoneyListDO> com.bootdo.moneyList.controller.MoneyListController.queryAllUser(com.bootdo.moneyList.damain.MoneyListDO)
2019-04-06 14:21:52 -Mapped "{[/moneyList/moneyList/queryAllUserName],methods=[POST]}" onto public java.util.List<com.bootdo.moneyList.damain.MoneyListDO> com.bootdo.moneyList.controller.MoneyListController.getAllUserName(com.bootdo.moneyList.damain.MoneyListDO)
2019-04-06 14:21:52 -Mapped "{[/moneyLog/elecLog/add],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.ElecLogController.add()
2019-04-06 14:21:52 -Mapped "{[/moneyLog/elecLog/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.ElecLogController.remove(java.lang.Long)
2019-04-06 14:21:52 -Mapped "{[/moneyLog/elecLog/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.ElecLogController.remove(java.lang.Long[])
2019-04-06 14:21:52 -Mapped "{[/moneyLog/elecLog/update]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.ElecLogController.update(com.bootdo.moneyLog.domain.ElecLogDO)
2019-04-06 14:21:52 -Mapped "{[/moneyLog/elecLog/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.moneyLog.controller.ElecLogController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-06 14:21:52 -Mapped "{[/moneyLog/elecLog/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.ElecLogController.save(com.bootdo.moneyLog.domain.ElecLogDO)
2019-04-06 14:21:52 -Mapped "{[/moneyLog/elecLog],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.ElecLogController.moneyLog()
2019-04-06 14:21:52 -Mapped "{[/moneyLog/elecLog/exprotElecLog],methods=[GET]}" onto public void com.bootdo.moneyLog.controller.ElecLogController.exprotElecLog(com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-06 14:21:52 -Mapped "{[/moneyLog/elecLog/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.ElecLogController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-06 14:21:52 -Mapped "{[/moneyLog/heatLog/add],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.HeatLogController.add()
2019-04-06 14:21:52 -Mapped "{[/moneyLog/heatLog/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.HeatLogController.remove(java.lang.Long)
2019-04-06 14:21:52 -Mapped "{[/moneyLog/heatLog/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.HeatLogController.remove(java.lang.Long[])
2019-04-06 14:21:52 -Mapped "{[/moneyLog/heatLog/update]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.HeatLogController.update(com.bootdo.moneyLog.domain.HeatLogDO)
2019-04-06 14:21:52 -Mapped "{[/moneyLog/heatLog/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.moneyLog.controller.HeatLogController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-06 14:21:52 -Mapped "{[/moneyLog/heatLog/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.HeatLogController.save(com.bootdo.moneyLog.domain.HeatLogDO)
2019-04-06 14:21:52 -Mapped "{[/moneyLog/heatLog/exprotHeatLog],methods=[GET]}" onto public void com.bootdo.moneyLog.controller.HeatLogController.exprotHeatLog(com.bootdo.moneyLog.vo.HeatLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-06 14:21:52 -Mapped "{[/moneyLog/heatLog],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.HeatLogController.HeatLog()
2019-04-06 14:21:52 -Mapped "{[/moneyLog/heatLog/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.HeatLogController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-06 14:21:52 -Mapped "{[/moneyLog/waterLog/add],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.WaterLogController.add()
2019-04-06 14:21:52 -Mapped "{[/moneyLog/waterLog/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.WaterLogController.remove(java.lang.Long)
2019-04-06 14:21:52 -Mapped "{[/moneyLog/waterLog/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.WaterLogController.remove(java.lang.Long[])
2019-04-06 14:21:52 -Mapped "{[/moneyLog/waterLog/update]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.WaterLogController.update(com.bootdo.moneyLog.domain.WaterLogDO)
2019-04-06 14:21:52 -Mapped "{[/moneyLog/waterLog/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.moneyLog.controller.WaterLogController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-06 14:21:53 -Mapped "{[/moneyLog/waterLog/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.WaterLogController.save(com.bootdo.moneyLog.domain.WaterLogDO,java.lang.String)
2019-04-06 14:21:53 -Mapped "{[/moneyLog/waterLog],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.WaterLogController.WaterLog()
2019-04-06 14:21:53 -Mapped "{[/moneyLog/waterLog/exprotWaterLog],methods=[GET]}" onto public void com.bootdo.moneyLog.controller.WaterLogController.exprotWaterLog(com.bootdo.moneyLog.vo.WaterLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-06 14:21:53 -Mapped "{[/moneyLog/waterLog/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.WaterLogController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-06 14:21:53 -Mapped "{[/oa/notify/add],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.add()
2019-04-06 14:21:53 -Mapped "{[/oa/notify/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.remove(java.lang.Long)
2019-04-06 14:21:53 -Mapped "{[/oa/notify/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.remove(java.lang.Long[])
2019-04-06 14:21:53 -Mapped "{[/oa/notify/update]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.update(com.bootdo.oa.domain.NotifyDO)
2019-04-06 14:21:53 -Mapped "{[/oa/notify/read/{id}],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.read(java.lang.Long,org.springframework.ui.Model)
2019-04-06 14:21:53 -Mapped "{[/oa/notify/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.oa.controller.NotifyController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-06 14:21:53 -Mapped "{[/oa/notify/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.save(com.bootdo.oa.domain.NotifyDO)
2019-04-06 14:21:53 -Mapped "{[/oa/notify/message],methods=[GET]}" onto com.bootdo.common.utils.PageUtils com.bootdo.oa.controller.NotifyController.message()
2019-04-06 14:21:53 -Mapped "{[/oa/notify],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.oaNotify()
2019-04-06 14:21:53 -Mapped "{[/oa/notify/selfNotify],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.selefNotify()
2019-04-06 14:21:53 -Mapped "{[/oa/notify/selfList],methods=[GET]}" onto com.bootdo.common.utils.PageUtils com.bootdo.oa.controller.NotifyController.selfList(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-06 14:21:53 -Mapped "{[/oa/notify/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-06 14:21:53 -Mapped "{[/print/print/add],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.add()
2019-04-06 14:21:53 -Mapped "{[/print/print/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.print.controller.PrintController.remove(java.lang.Long)
2019-04-06 14:21:53 -Mapped "{[/print/print/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.print.controller.PrintController.remove(java.lang.Long[])
2019-04-06 14:21:53 -Mapped "{[/print/print/update]}" onto public com.bootdo.common.utils.R com.bootdo.print.controller.PrintController.update(com.bootdo.print.domain.PrintDO)
2019-04-06 14:21:53 -Mapped "{[/print/print/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.print.controller.PrintController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-06 14:21:53 -Mapped "{[/print/print/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.print.controller.PrintController.save(java.lang.String,com.bootdo.print.domain.PrintDO)
2019-04-06 14:21:53 -Mapped "{[/print/print/exprotPrint],methods=[GET]}" onto public void com.bootdo.print.controller.PrintController.exprotPrint(com.bootdo.print.vo.PrintVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-06 14:21:53 -Mapped "{[/print/print/printEdit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.printEdit(java.lang.Long,org.springframework.ui.Model)
2019-04-06 14:21:53 -Mapped "{[/print/print],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.Print()
2019-04-06 14:21:53 -Mapped "{[/print/print/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-06 14:21:53 -Mapped "{[/system/sysDept/add/{pId}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.add(java.lang.Long,org.springframework.ui.Model)
2019-04-06 14:21:53 -Mapped "{[/system/sysDept/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.remove(java.lang.Long)
2019-04-06 14:21:53 -Mapped "{[/system/sysDept/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.remove(java.lang.Long[])
2019-04-06 14:21:53 -Mapped "{[/system/sysDept/update]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.update(com.bootdo.system.domain.DeptDO)
2019-04-06 14:21:53 -Mapped "{[/system/sysDept/list],methods=[GET]}" onto public java.util.List<com.bootdo.system.domain.DeptDO> com.bootdo.system.controller.DeptController.list()
2019-04-06 14:21:53 -Mapped "{[/system/sysDept/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.save(com.bootdo.system.domain.DeptDO)
2019-04-06 14:21:53 -Mapped "{[/system/sysDept/tree],methods=[GET]}" onto public com.bootdo.common.domain.Tree<com.bootdo.system.domain.DeptDO> com.bootdo.system.controller.DeptController.tree()
2019-04-06 14:21:53 -Mapped "{[/system/sysDept],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.dept()
2019-04-06 14:21:53 -Mapped "{[/system/sysDept/treeView],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.treeView()
2019-04-06 14:21:53 -Mapped "{[/system/sysDept/edit/{deptId}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-06 14:21:53 -Mapped "{[/index],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.index(org.springframework.ui.Model)
2019-04-06 14:21:53 -Mapped "{[/main],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.main()
2019-04-06 14:21:53 -Mapped "{[/login],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.login(org.springframework.ui.Model)
2019-04-06 14:21:53 -Mapped "{[/logout],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.logout()
2019-04-06 14:21:53 -Mapped "{[/ || ],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.welcome(org.springframework.ui.Model)
2019-04-06 14:21:53 -Mapped "{[/getVerify],methods=[GET]}" onto public void com.bootdo.system.controller.LoginController.getVerify(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-04-06 14:21:53 -Mapped "{[/login],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.LoginController.ajaxLogin(java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest)
2019-04-06 14:21:53 -Mapped "{[/sys/menu/add/{pId}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.MenuController.add(org.springframework.ui.Model,java.lang.Long)
2019-04-06 14:21:53 -Mapped "{[/sys/menu/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.MenuController.remove(java.lang.Long)
2019-04-06 14:21:53 -Mapped "{[/sys/menu/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.MenuController.update(com.bootdo.system.domain.MenuDO)
2019-04-06 14:21:53 -Mapped "{[/sys/menu/list]}" onto java.util.List<com.bootdo.system.domain.MenuDO> com.bootdo.system.controller.MenuController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-06 14:21:53 -Mapped "{[/sys/menu/save],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.MenuController.save(com.bootdo.system.domain.MenuDO)
2019-04-06 14:21:53 -Mapped "{[/sys/menu/tree/{roleId}],methods=[GET]}" onto com.bootdo.common.domain.Tree<com.bootdo.system.domain.MenuDO> com.bootdo.system.controller.MenuController.tree(java.lang.Long)
2019-04-06 14:21:53 -Mapped "{[/sys/menu/tree],methods=[GET]}" onto com.bootdo.common.domain.Tree<com.bootdo.system.domain.MenuDO> com.bootdo.system.controller.MenuController.tree()
2019-04-06 14:21:53 -Mapped "{[/sys/menu],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.MenuController.menu(org.springframework.ui.Model)
2019-04-06 14:21:53 -Mapped "{[/sys/menu/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.MenuController.edit(org.springframework.ui.Model,java.lang.Long)
2019-04-06 14:21:53 -Mapped "{[/sys/role/add],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.RoleController.add()
2019-04-06 14:21:53 -Mapped "{[/sys/role/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.update(com.bootdo.system.domain.RoleDO)
2019-04-06 14:21:53 -Mapped "{[/sys/role/list],methods=[GET]}" onto java.util.List<com.bootdo.system.domain.RoleDO> com.bootdo.system.controller.RoleController.list()
2019-04-06 14:21:53 -Mapped "{[/sys/role/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.save(java.lang.Long)
2019-04-06 14:21:53 -Mapped "{[/sys/role/save],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.save(com.bootdo.system.domain.RoleDO)
2019-04-06 14:21:53 -Mapped "{[/sys/role/batchRemove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.batchRemove(java.lang.Long[])
2019-04-06 14:21:53 -Mapped "{[/sys/role],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.RoleController.role()
2019-04-06 14:21:53 -Mapped "{[/sys/role/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.RoleController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-06 14:21:53 -Mapped "{[/sys/online/list]}" onto public java.util.List<com.bootdo.system.domain.UserOnline> com.bootdo.system.controller.SessionController.list()
2019-04-06 14:21:53 -Mapped "{[/sys/online/sessionList]}" onto public java.util.Collection<org.apache.shiro.session.Session> com.bootdo.system.controller.SessionController.sessionList()
2019-04-06 14:21:53 -Mapped "{[/sys/online],methods=[GET]}" onto public java.lang.String com.bootdo.system.controller.SessionController.online()
2019-04-06 14:21:53 -Mapped "{[/sys/online/forceLogout/{sessionId}]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.SessionController.forceLogout(java.lang.String,org.springframework.web.servlet.mvc.support.RedirectAttributes)
2019-04-06 14:21:53 -Mapped "{[/sys/user/exit],methods=[POST]}" onto boolean com.bootdo.system.controller.UserController.exit(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-06 14:21:53 -Mapped "{[/sys/user/add],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.add(org.springframework.ui.Model)
2019-04-06 14:21:53 -Mapped "{[/sys/user/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.remove(java.lang.Long)
2019-04-06 14:21:53 -Mapped "{[/sys/user/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.update(com.bootdo.system.domain.UserDO)
2019-04-06 14:21:53 -Mapped "{[/sys/user/list],methods=[GET]}" onto com.bootdo.common.utils.PageUtils com.bootdo.system.controller.UserController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-06 14:21:53 -Mapped "{[/sys/user/save],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.save(com.bootdo.system.domain.UserDO)
2019-04-06 14:21:53 -Mapped "{[/sys/user/batchRemove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.batchRemove(java.lang.Long[])
2019-04-06 14:21:53 -Mapped "{[/sys/user/tree],methods=[GET]}" onto public com.bootdo.common.domain.Tree<com.bootdo.system.domain.DeptDO> com.bootdo.system.controller.UserController.tree()
2019-04-06 14:21:53 -Mapped "{[/sys/user/treeView],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.treeView()
2019-04-06 14:21:53 -Mapped "{[/sys/user/updatePeronal],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.updatePeronal(com.bootdo.system.domain.UserDO)
2019-04-06 14:21:53 -Mapped "{[/sys/user/resetPwd],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.resetPwd(com.bootdo.system.vo.UserVO)
2019-04-06 14:21:53 -Mapped "{[/sys/user/resetPwd/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.resetPwd(java.lang.Long,org.springframework.ui.Model)
2019-04-06 14:21:53 -Mapped "{[/sys/user/personal],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.personal(org.springframework.ui.Model)
2019-04-06 14:21:53 -Mapped "{[/sys/user/adminResetPwd],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.adminResetPwd(com.bootdo.system.vo.UserVO)
2019-04-06 14:21:53 -Mapped "{[/sys/user/uploadImg],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.uploadImg(org.springframework.web.multipart.MultipartFile,java.lang.String,javax.servlet.http.HttpServletRequest)
2019-04-06 14:21:53 -Mapped "{[/sys/user/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.edit(org.springframework.ui.Model,java.lang.Long)
2019-04-06 14:21:53 -Mapped "{[/sys/user],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.user(org.springframework.ui.Model)
2019-04-06 14:21:53 -Mapped "{[/file/downImport/{importType}],methods=[GET]}" onto public void com.bootdo.temple.controller.TempletController.downImport(javax.servlet.http.HttpServletResponse,java.lang.String)
2019-04-06 14:21:53 -Mapped "{[/water/water/add],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterController.add()
2019-04-06 14:21:53 -Mapped "{[/water/water/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterController.remove(java.lang.Long)
2019-04-06 14:21:53 -Mapped "{[/water/water/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterController.remove(java.lang.Long[])
2019-04-06 14:21:53 -Mapped "{[/water/water/update]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterController.update(com.bootdo.water.domain.WaterDO)
2019-04-06 14:21:53 -Mapped "{[/water/water/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.water.controller.WaterController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-06 14:21:53 -Mapped "{[/water/water/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterController.save(com.bootdo.water.domain.WaterDO)
2019-04-06 14:21:53 -Mapped "{[/water/water/exprotWater],methods=[GET]}" onto public void com.bootdo.water.controller.WaterController.exprotExcel(com.bootdo.water.vo.WaterVo,javax.servlet.http.HttpServletResponse)
2019-04-06 14:21:53 -Mapped "{[/water/water],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterController.Water()
2019-04-06 14:21:53 -Mapped "{[/water/water/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-06 14:21:53 -Mapped "{[/water/waterInto/exprotWaterIntoExcel],methods=[GET]}" onto public void com.bootdo.water.controller.WaterIntoController.exprotExcel(com.bootdo.water.vo.WaterVo,javax.servlet.http.HttpServletResponse)
2019-04-06 14:21:53 -Mapped "{[/water/waterInto],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterIntoController.WaterInto()
2019-04-06 14:21:53 -Mapped "{[/water/waterPrice/add],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterPriceController.add()
2019-04-06 14:21:53 -Mapped "{[/water/waterPrice/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterPriceController.remove(java.lang.Long)
2019-04-06 14:21:53 -Mapped "{[/water/waterPrice/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterPriceController.remove(java.lang.Long[])
2019-04-06 14:21:53 -Mapped "{[/water/waterPrice/update]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterPriceController.update(com.bootdo.water.domain.WaterPriceDO)
2019-04-06 14:21:53 -Mapped "{[/water/waterPrice/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.water.controller.WaterPriceController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-06 14:21:53 -Mapped "{[/water/waterPrice/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterPriceController.save(com.bootdo.water.domain.WaterPriceDO)
2019-04-06 14:21:53 -Mapped "{[/water/waterPrice],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterPriceController.WaterPrice()
2019-04-06 14:21:53 -Mapped "{[/water/waterPrice/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterPriceController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-06 14:21:53 -Mapped "{[/water/waterUpLoad/exprotWaterExcel],methods=[GET]}" onto public void com.bootdo.water.controller.WaterUpLoadController.exprotWaterExcel(com.bootdo.water.vo.WaterVo,javax.servlet.http.HttpServletResponse)
2019-04-06 14:21:53 -Mapped "{[/water/waterUpLoad/createWaterExcel],methods=[POST]}" onto public java.lang.String com.bootdo.water.controller.WaterUpLoadController.createWaterExcel(com.bootdo.water.domain.WaterDO) throws java.lang.Exception
2019-04-06 14:21:53 -Mapped "{[/water/waterUpLoad/importWaterExcel]}" onto public java.lang.String com.bootdo.water.controller.WaterUpLoadController.importWaterExcel(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)
2019-04-06 14:21:53 -Mapped "{[/water/waterUpLoad],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterUpLoadController.WaterUpLoad()
2019-04-06 14:21:53 -Mapped "{[/v2/api-docs],methods=[GET],produces=[application/json || application/hal+json]}" onto public org.springframework.http.ResponseEntity<springfox.documentation.spring.web.json.Json> springfox.documentation.swagger2.web.Swagger2Controller.getDocumentation(java.lang.String,javax.servlet.http.HttpServletRequest)
2019-04-06 14:21:53 -Mapped "{[/swagger-resources/configuration/security]}" onto org.springframework.http.ResponseEntity<springfox.documentation.swagger.web.SecurityConfiguration> springfox.documentation.swagger.web.ApiResourceController.securityConfiguration()
2019-04-06 14:21:53 -Mapped "{[/swagger-resources/configuration/ui]}" onto org.springframework.http.ResponseEntity<springfox.documentation.swagger.web.UiConfiguration> springfox.documentation.swagger.web.ApiResourceController.uiConfiguration()
2019-04-06 14:21:53 -Mapped "{[/swagger-resources]}" onto org.springframework.http.ResponseEntity<java.util.List<springfox.documentation.swagger.web.SwaggerResource>> springfox.documentation.swagger.web.ApiResourceController.swaggerResources()
2019-04-06 14:21:54 -Initializing ExecutorService  'messageBrokerTaskScheduler'
2019-04-06 14:21:54 -Mapped URL path [/endpointChat/**] onto handler of type [class org.springframework.web.socket.sockjs.support.SockJsHttpRequestHandler]
2019-04-06 14:21:54 -Initializing ExecutorService  'brokerChannelExecutor'
2019-04-06 14:21:55 -Mapped URL path [/**/favicon.ico] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-04-06 14:21:55 -Looking for @ControllerAdvice: org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@60d1a32f: startup date [Sat Apr 06 14:21:16 CST 2019]; root of context hierarchy
2019-04-06 14:21:56 -Mapped URL path [/webjars/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-04-06 14:21:56 -Mapped URL path [/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-04-06 14:21:56 -Mapped URL path [/files/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-04-06 14:21:56 -Detected @ExceptionHandler methods in BDExceptionHandler
2019-04-06 14:21:56 -[THYMELEAF][main] Template Mode 'LEGACYHTML5' is deprecated. Using Template Mode 'HTML' instead.
2019-04-06 14:22:01 -Registering beans for JMX exposure on startup
2019-04-06 14:22:01 -Bean with name 'dataSource' has been autodetected for JMX exposure
2019-04-06 14:22:01 -Located MBean 'dataSource': registering with JMX server as MBean [com.alibaba.druid.pool:name=dataSource,type=DruidDataSource]
2019-04-06 14:22:01 -Starting beans in phase 2147483647
2019-04-06 14:22:01 -Context refreshed
2019-04-06 14:22:01 -Found 1 custom documentation plugin(s)
2019-04-06 14:22:01 -Scanning for api listing references
2019-04-06 14:22:02 -Generating unique operation named: exprotElecLogUsingGET_1
2019-04-06 14:22:02 -Generating unique operation named: getCountDUsingPOST_1
2019-04-06 14:22:02 -Generating unique operation named: exprotElecLogUsingGET_2
2019-04-06 14:22:02 -Generating unique operation named: getCountDUsingPOST_2
2019-04-06 14:22:02 -Generating unique operation named: exprotElecLogUsingGET_3
2019-04-06 14:22:02 -Generating unique operation named: getCountDUsingPOST_3
2019-04-06 14:22:03 -Generating unique operation named: removeUsingPOST_1
2019-04-06 14:22:03 -Generating unique operation named: addUsingGET_1
2019-04-06 14:22:03 -Generating unique operation named: editUsingGET_1
2019-04-06 14:22:03 -Generating unique operation named: listUsingGET_1
2019-04-06 14:22:03 -Generating unique operation named: removeUsingPOST_2
2019-04-06 14:22:03 -Generating unique operation named: removeUsingPOST_3
2019-04-06 14:22:03 -Generating unique operation named: saveUsingPOST_1
2019-04-06 14:22:03 -Generating unique operation named: updateUsingGET_1
2019-04-06 14:22:03 -Generating unique operation named: updateUsingHEAD_1
2019-04-06 14:22:03 -Generating unique operation named: updateUsingPOST_1
2019-04-06 14:22:03 -Generating unique operation named: updateUsingPUT_1
2019-04-06 14:22:03 -Generating unique operation named: updateUsingPATCH_1
2019-04-06 14:22:03 -Generating unique operation named: updateUsingDELETE_1
2019-04-06 14:22:03 -Generating unique operation named: updateUsingOPTIONS_1
2019-04-06 14:22:03 -Generating unique operation named: updateUsingTRACE_1
2019-04-06 14:22:03 -Generating unique operation named: addUsingGET_2
2019-04-06 14:22:03 -Generating unique operation named: editUsingGET_2
2019-04-06 14:22:03 -Generating unique operation named: listUsingGET_2
2019-04-06 14:22:03 -Generating unique operation named: removeUsingPOST_4
2019-04-06 14:22:03 -Generating unique operation named: removeUsingPOST_5
2019-04-06 14:22:03 -Generating unique operation named: saveUsingPOST_2
2019-04-06 14:22:03 -Generating unique operation named: updateUsingPOST_2
2019-04-06 14:22:03 -Generating unique operation named: exprotExcelUsingGET_1
2019-04-06 14:22:03 -Generating unique operation named: addUsingGET_3
2019-04-06 14:22:03 -Generating unique operation named: editUsingGET_3
2019-04-06 14:22:03 -Generating unique operation named: exprotElecLogUsingGET_4
2019-04-06 14:22:03 -Generating unique operation named: listUsingGET_3
2019-04-06 14:22:03 -Generating unique operation named: removeUsingPOST_6
2019-04-06 14:22:03 -Generating unique operation named: removeUsingPOST_7
2019-04-06 14:22:03 -Generating unique operation named: saveUsingPOST_3
2019-04-06 14:22:03 -Generating unique operation named: updateUsingGET_2
2019-04-06 14:22:04 -Generating unique operation named: updateUsingHEAD_2
2019-04-06 14:22:04 -Generating unique operation named: updateUsingPOST_3
2019-04-06 14:22:04 -Generating unique operation named: updateUsingPUT_2
2019-04-06 14:22:04 -Generating unique operation named: updateUsingPATCH_2
2019-04-06 14:22:04 -Generating unique operation named: updateUsingDELETE_2
2019-04-06 14:22:04 -Generating unique operation named: updateUsingOPTIONS_2
2019-04-06 14:22:04 -Generating unique operation named: updateUsingTRACE_2
2019-04-06 14:22:04 -Generating unique operation named: addUsingGET_4
2019-04-06 14:22:04 -Generating unique operation named: editUsingGET_4
2019-04-06 14:22:04 -Generating unique operation named: listUsingGET_4
2019-04-06 14:22:04 -Generating unique operation named: removeUsingPOST_8
2019-04-06 14:22:04 -Generating unique operation named: removeUsingPOST_9
2019-04-06 14:22:04 -Generating unique operation named: saveUsingPOST_4
2019-04-06 14:22:04 -Generating unique operation named: updateUsingGET_3
2019-04-06 14:22:04 -Generating unique operation named: updateUsingHEAD_3
2019-04-06 14:22:04 -Generating unique operation named: updateUsingPOST_4
2019-04-06 14:22:04 -Generating unique operation named: updateUsingPUT_3
2019-04-06 14:22:04 -Generating unique operation named: updateUsingPATCH_3
2019-04-06 14:22:04 -Generating unique operation named: updateUsingDELETE_3
2019-04-06 14:22:04 -Generating unique operation named: updateUsingOPTIONS_3
2019-04-06 14:22:04 -Generating unique operation named: updateUsingTRACE_3
2019-04-06 14:22:04 -Generating unique operation named: ElecUsingGET_1
2019-04-06 14:22:04 -Generating unique operation named: addUsingGET_5
2019-04-06 14:22:04 -Generating unique operation named: editUsingGET_5
2019-04-06 14:22:04 -Generating unique operation named: listUsingGET_5
2019-04-06 14:22:04 -Generating unique operation named: removeUsingPOST_10
2019-04-06 14:22:04 -Generating unique operation named: removeUsingPOST_11
2019-04-06 14:22:04 -Generating unique operation named: saveUsingPOST_5
2019-04-06 14:22:04 -Generating unique operation named: updateUsingGET_4
2019-04-06 14:22:04 -Generating unique operation named: updateUsingHEAD_4
2019-04-06 14:22:04 -Generating unique operation named: updateUsingPOST_5
2019-04-06 14:22:04 -Generating unique operation named: updateUsingPUT_4
2019-04-06 14:22:04 -Generating unique operation named: updateUsingPATCH_4
2019-04-06 14:22:04 -Generating unique operation named: updateUsingDELETE_4
2019-04-06 14:22:04 -Generating unique operation named: updateUsingOPTIONS_4
2019-04-06 14:22:04 -Generating unique operation named: updateUsingTRACE_4
2019-04-06 14:22:04 -Generating unique operation named: editUsingGET_6
2019-04-06 14:22:05 -Generating unique operation named: listUsingGET_6
2019-04-06 14:22:05 -Generating unique operation named: updateUsingPOST_6
2019-04-06 14:22:05 -Generating unique operation named: addUsingGET_6
2019-04-06 14:22:05 -Generating unique operation named: editUsingGET_7
2019-04-06 14:22:05 -Generating unique operation named: exprotExcelUsingGET_2
2019-04-06 14:22:05 -Generating unique operation named: listUsingGET_7
2019-04-06 14:22:05 -Generating unique operation named: removeUsingPOST_12
2019-04-06 14:22:05 -Generating unique operation named: removeUsingPOST_13
2019-04-06 14:22:05 -Generating unique operation named: saveUsingPOST_6
2019-04-06 14:22:05 -Generating unique operation named: updateUsingGET_5
2019-04-06 14:22:05 -Generating unique operation named: updateUsingHEAD_5
2019-04-06 14:22:05 -Generating unique operation named: updateUsingPOST_7
2019-04-06 14:22:05 -Generating unique operation named: updateUsingPUT_5
2019-04-06 14:22:05 -Generating unique operation named: updateUsingPATCH_5
2019-04-06 14:22:05 -Generating unique operation named: updateUsingDELETE_5
2019-04-06 14:22:05 -Generating unique operation named: updateUsingOPTIONS_5
2019-04-06 14:22:05 -Generating unique operation named: updateUsingTRACE_5
2019-04-06 14:22:05 -Generating unique operation named: exprotExcelUsingGET_3
2019-04-06 14:22:05 -Generating unique operation named: addUsingGET_7
2019-04-06 14:22:05 -Generating unique operation named: editUsingGET_8
2019-04-06 14:22:05 -Generating unique operation named: listUsingGET_8
2019-04-06 14:22:05 -Generating unique operation named: removeUsingPOST_14
2019-04-06 14:22:05 -Generating unique operation named: removeUsingPOST_15
2019-04-06 14:22:05 -Generating unique operation named: saveUsingPOST_7
2019-04-06 14:22:05 -Generating unique operation named: updateUsingGET_6
2019-04-06 14:22:05 -Generating unique operation named: updateUsingHEAD_6
2019-04-06 14:22:05 -Generating unique operation named: updateUsingPOST_8
2019-04-06 14:22:05 -Generating unique operation named: updateUsingPUT_6
2019-04-06 14:22:05 -Generating unique operation named: updateUsingPATCH_6
2019-04-06 14:22:05 -Generating unique operation named: updateUsingDELETE_6
2019-04-06 14:22:05 -Generating unique operation named: updateUsingOPTIONS_6
2019-04-06 14:22:05 -Generating unique operation named: updateUsingTRACE_6
2019-04-06 14:22:05 -Generating unique operation named: addUsingGET_8
2019-04-06 14:22:05 -Generating unique operation named: editUsingGET_9
2019-04-06 14:22:05 -Generating unique operation named: listUsingGET_9
2019-04-06 14:22:05 -Generating unique operation named: removeUsingPOST_16
2019-04-06 14:22:05 -Generating unique operation named: removeUsingPOST_17
2019-04-06 14:22:05 -Generating unique operation named: saveUsingPOST_8
2019-04-06 14:22:05 -Generating unique operation named: updateUsingGET_7
2019-04-06 14:22:05 -Generating unique operation named: updateUsingHEAD_7
2019-04-06 14:22:05 -Generating unique operation named: updateUsingPOST_9
2019-04-06 14:22:05 -Generating unique operation named: updateUsingPUT_7
2019-04-06 14:22:05 -Generating unique operation named: updateUsingPATCH_7
2019-04-06 14:22:05 -Generating unique operation named: updateUsingDELETE_7
2019-04-06 14:22:05 -Generating unique operation named: updateUsingOPTIONS_7
2019-04-06 14:22:05 -Generating unique operation named: updateUsingTRACE_7
2019-04-06 14:22:05 -Generating unique operation named: addUsingGET_9
2019-04-06 14:22:05 -Generating unique operation named: editUsingGET_10
2019-04-06 14:22:05 -Generating unique operation named: infoUsingGET_1
2019-04-06 14:22:05 -Generating unique operation named: infoUsingHEAD_1
2019-04-06 14:22:05 -Generating unique operation named: infoUsingPOST_1
2019-04-06 14:22:05 -Generating unique operation named: infoUsingPUT_1
2019-04-06 14:22:05 -Generating unique operation named: infoUsingPATCH_1
2019-04-06 14:22:05 -Generating unique operation named: infoUsingDELETE_1
2019-04-06 14:22:05 -Generating unique operation named: infoUsingOPTIONS_1
2019-04-06 14:22:05 -Generating unique operation named: infoUsingTRACE_1
2019-04-06 14:22:05 -Generating unique operation named: listUsingGET_10
2019-04-06 14:22:06 -Generating unique operation named: removeUsingPOST_18
2019-04-06 14:22:06 -Generating unique operation named: removeUsingPOST_19
2019-04-06 14:22:06 -Generating unique operation named: saveUsingPOST_9
2019-04-06 14:22:06 -Generating unique operation named: updateUsingPOST_10
2019-04-06 14:22:06 -Generating unique operation named: listUsingGET_11
2019-04-06 14:22:06 -Generating unique operation named: removeUsingPOST_20
2019-04-06 14:22:06 -Generating unique operation named: welcomeUsingGET_1
2019-04-06 14:22:06 -Generating unique operation named: addUsingGET_10
2019-04-06 14:22:06 -Generating unique operation named: editUsingGET_11
2019-04-06 14:22:06 -Generating unique operation named: listUsingGET_12
2019-04-06 14:22:06 -Generating unique operation named: removeUsingPOST_21
2019-04-06 14:22:06 -Generating unique operation named: saveUsingPOST_10
2019-04-06 14:22:06 -Generating unique operation named: treeUsingGET_1
2019-04-06 14:22:06 -Generating unique operation named: treeUsingGET_2
2019-04-06 14:22:06 -Generating unique operation named: updateUsingPOST_11
2019-04-06 14:22:06 -Generating unique operation named: addUsingGET_11
2019-04-06 14:22:06 -Generating unique operation named: editUsingGET_12
2019-04-06 14:22:06 -Generating unique operation named: listUsingGET_13
2019-04-06 14:22:06 -Generating unique operation named: removeUsingPOST_22
2019-04-06 14:22:06 -Generating unique operation named: removeUsingPOST_23
2019-04-06 14:22:06 -Generating unique operation named: saveUsingPOST_11
2019-04-06 14:22:06 -Generating unique operation named: updateUsingGET_8
2019-04-06 14:22:06 -Generating unique operation named: updateUsingHEAD_8
2019-04-06 14:22:06 -Generating unique operation named: updateUsingPOST_12
2019-04-06 14:22:06 -Generating unique operation named: updateUsingPUT_8
2019-04-06 14:22:06 -Generating unique operation named: updateUsingPATCH_8
2019-04-06 14:22:06 -Generating unique operation named: updateUsingDELETE_8
2019-04-06 14:22:06 -Generating unique operation named: updateUsingOPTIONS_8
2019-04-06 14:22:06 -Generating unique operation named: updateUsingTRACE_8
2019-04-06 14:22:06 -Generating unique operation named: addUsingGET_12
2019-04-06 14:22:06 -Generating unique operation named: editUsingGET_13
2019-04-06 14:22:06 -Generating unique operation named: listUsingGET_14
2019-04-06 14:22:06 -Generating unique operation named: removeUsingPOST_24
2019-04-06 14:22:06 -Generating unique operation named: removeUsingPOST_25
2019-04-06 14:22:06 -Generating unique operation named: saveUsingPOST_12
2019-04-06 14:22:06 -Generating unique operation named: updateUsingGET_9
2019-04-06 14:22:06 -Generating unique operation named: updateUsingHEAD_9
2019-04-06 14:22:06 -Generating unique operation named: updateUsingPOST_13
2019-04-06 14:22:06 -Generating unique operation named: updateUsingPUT_9
2019-04-06 14:22:06 -Generating unique operation named: updateUsingPATCH_9
2019-04-06 14:22:06 -Generating unique operation named: updateUsingDELETE_9
2019-04-06 14:22:06 -Generating unique operation named: updateUsingOPTIONS_9
2019-04-06 14:22:06 -Generating unique operation named: updateUsingTRACE_9
2019-04-06 14:22:06 -Generating unique operation named: addUsingGET_13
2019-04-06 14:22:06 -Generating unique operation named: batchRemoveUsingPOST_1
2019-04-06 14:22:06 -Generating unique operation named: editUsingGET_14
2019-04-06 14:22:07 -Generating unique operation named: listUsingGET_15
2019-04-06 14:22:07 -Generating unique operation named: saveUsingPOST_13
2019-04-06 14:22:07 -Generating unique operation named: saveUsingPOST_14
2019-04-06 14:22:07 -Generating unique operation named: updateUsingPOST_14
2019-04-06 14:22:07 -Generating unique operation named: listUsingGET_16
2019-04-06 14:22:07 -Generating unique operation named: listUsingHEAD_1
2019-04-06 14:22:07 -Generating unique operation named: listUsingPOST_1
2019-04-06 14:22:07 -Generating unique operation named: listUsingPUT_1
2019-04-06 14:22:07 -Generating unique operation named: listUsingPATCH_1
2019-04-06 14:22:07 -Generating unique operation named: listUsingDELETE_1
2019-04-06 14:22:07 -Generating unique operation named: listUsingOPTIONS_1
2019-04-06 14:22:07 -Generating unique operation named: listUsingTRACE_1
2019-04-06 14:22:07 -Generating unique operation named: addUsingGET_14
2019-04-06 14:22:07 -Generating unique operation named: batchRemoveUsingPOST_2
2019-04-06 14:22:07 -Generating unique operation named: editUsingGET_15
2019-04-06 14:22:07 -Generating unique operation named: listUsingGET_17
2019-04-06 14:22:07 -Generating unique operation named: removeUsingPOST_26
2019-04-06 14:22:07 -Generating unique operation named: saveUsingPOST_15
2019-04-06 14:22:07 -Generating unique operation named: treeUsingGET_3
2019-04-06 14:22:07 -Generating unique operation named: treeViewUsingGET_1
2019-04-06 14:22:07 -Generating unique operation named: updateUsingPOST_15
2019-04-06 14:22:07 -Generating unique operation named: addUsingGET_15
2019-04-06 14:22:07 -Generating unique operation named: editUsingGET_16
2019-04-06 14:22:07 -Generating unique operation named: exprotExcelUsingGET_4
2019-04-06 14:22:07 -Generating unique operation named: listUsingGET_18
2019-04-06 14:22:07 -Generating unique operation named: removeUsingPOST_27
2019-04-06 14:22:07 -Generating unique operation named: removeUsingPOST_28
2019-04-06 14:22:07 -Generating unique operation named: saveUsingPOST_16
2019-04-06 14:22:07 -Generating unique operation named: updateUsingGET_10
2019-04-06 14:22:07 -Generating unique operation named: updateUsingHEAD_10
2019-04-06 14:22:07 -Generating unique operation named: updateUsingPOST_16
2019-04-06 14:22:07 -Generating unique operation named: updateUsingPUT_10
2019-04-06 14:22:07 -Generating unique operation named: updateUsingPATCH_10
2019-04-06 14:22:07 -Generating unique operation named: updateUsingDELETE_10
2019-04-06 14:22:07 -Generating unique operation named: updateUsingOPTIONS_10
2019-04-06 14:22:07 -Generating unique operation named: updateUsingTRACE_10
2019-04-06 14:22:07 -Generating unique operation named: exprotExcelUsingGET_5
2019-04-06 14:22:07 -Generating unique operation named: addUsingGET_16
2019-04-06 14:22:07 -Generating unique operation named: editUsingGET_17
2019-04-06 14:22:07 -Generating unique operation named: listUsingGET_19
2019-04-06 14:22:07 -Generating unique operation named: removeUsingPOST_29
2019-04-06 14:22:07 -Generating unique operation named: removeUsingPOST_30
2019-04-06 14:22:07 -Generating unique operation named: saveUsingPOST_17
2019-04-06 14:22:07 -Generating unique operation named: updateUsingGET_11
2019-04-06 14:22:07 -Generating unique operation named: updateUsingHEAD_11
2019-04-06 14:22:07 -Generating unique operation named: updateUsingPOST_17
2019-04-06 14:22:07 -Generating unique operation named: updateUsingPUT_11
2019-04-06 14:22:07 -Generating unique operation named: updateUsingPATCH_11
2019-04-06 14:22:07 -Generating unique operation named: updateUsingDELETE_11
2019-04-06 14:22:07 -Generating unique operation named: updateUsingOPTIONS_11
2019-04-06 14:22:07 -Generating unique operation named: updateUsingTRACE_11
2019-04-06 14:22:07 -Generating unique operation named: addUsingGET_17
2019-04-06 14:22:07 -Generating unique operation named: editUsingGET_18
2019-04-06 14:22:07 -Generating unique operation named: listUsingGET_20
2019-04-06 14:22:07 -Generating unique operation named: removeUsingPOST_31
2019-04-06 14:22:07 -Generating unique operation named: removeUsingPOST_32
2019-04-06 14:22:07 -Generating unique operation named: saveUsingPOST_18
2019-04-06 14:22:07 -Generating unique operation named: updateUsingGET_12
2019-04-06 14:22:07 -Generating unique operation named: updateUsingHEAD_12
2019-04-06 14:22:07 -Generating unique operation named: updateUsingPOST_18
2019-04-06 14:22:07 -Generating unique operation named: updateUsingPUT_12
2019-04-06 14:22:07 -Generating unique operation named: updateUsingPATCH_12
2019-04-06 14:22:07 -Generating unique operation named: updateUsingDELETE_12
2019-04-06 14:22:07 -Generating unique operation named: updateUsingOPTIONS_12
2019-04-06 14:22:07 -Generating unique operation named: updateUsingTRACE_12
2019-04-06 14:22:07 -Starting Quartz Scheduler now
2019-04-06 14:22:07 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED started.
2019-04-06 14:22:07 -Starting...
2019-04-06 14:22:07 -BrokerAvailabilityEvent[available=true, SimpleBrokerMessageHandler [DefaultSubscriptionRegistry[cache[0 destination(s)], registry[0 sessions]]]]
2019-04-06 14:22:07 -Started.
2019-04-06 14:22:07 -Starting ProtocolHandler ["http-nio-8081"]
2019-04-06 14:22:08 -Using a shared selector for servlet write/read
2019-04-06 14:22:08 -Tomcat started on port(s): 8081 (http) with context path ''
2019-04-06 14:22:08 -Started BootdoApplication in 54.522 seconds (JVM running for 58.095)
2019-04-06 14:22:08 -==>  Preparing: select `id`,`cron_expression`,`method_name`,`is_concurrent`,`description`,`update_by`,`bean_class`,`create_date`,`job_status`,`job_group`,`update_date`,`create_by`,`spring_bean`,`job_name` from sys_task order by id desc 
2019-04-06 14:22:08 -==> Parameters: 
2019-04-06 14:22:08 -<==      Total: 1
2019-04-06 14:22:13 -Initializing Spring FrameworkServlet 'dispatcherServlet'
2019-04-06 14:22:13 -FrameworkServlet 'dispatcherServlet': initialization started
2019-04-06 14:22:13 -FrameworkServlet 'dispatcherServlet': initialization completed in 190 ms
2019-04-06 14:22:14 -Enabling session validation scheduler...
2019-04-06 14:22:15 -请求地址 : http://localhost:8081/login;JSESSIONID=58e7c60f-fe4a-493d-b378-46313616f1a4
2019-04-06 14:22:15 -HTTP METHOD : GET
2019-04-06 14:22:15 -CLASS_METHOD : com.bootdo.system.controller.LoginController.login
2019-04-06 14:22:15 -参数 : [{}]
2019-04-06 14:22:15 -耗时 : 9
2019-04-06 14:22:15 -返回值 : login
2019-04-06 14:22:18 -请求地址 : http://localhost:8081/getVerify
2019-04-06 14:22:18 -HTTP METHOD : GET
2019-04-06 14:22:18 -CLASS_METHOD : com.bootdo.system.controller.LoginController.getVerify
2019-04-06 14:22:18 -参数 : [org.apache.shiro.web.servlet.ShiroHttpServletRequest@7b5cbf3d, org.apache.shiro.web.servlet.ShiroHttpServletResponse@2200a871]
2019-04-06 14:22:23 -4940
2019-04-06 14:22:23 -耗时 : 5181
2019-04-06 14:22:23 -返回值 : null
2019-04-06 14:22:23 -请求地址 : http://localhost:8081/login
2019-04-06 14:22:23 -HTTP METHOD : GET
2019-04-06 14:22:23 -CLASS_METHOD : com.bootdo.system.controller.LoginController.login
2019-04-06 14:22:23 -参数 : [{}]
2019-04-06 14:22:23 -耗时 : 0
2019-04-06 14:22:23 -返回值 : login
2019-04-06 14:22:29 -请求地址 : http://localhost:8081/login
2019-04-06 14:22:29 -HTTP METHOD : POST
2019-04-06 14:22:29 -CLASS_METHOD : com.bootdo.system.controller.LoginController.ajaxLogin
2019-04-06 14:22:29 -参数 : [admin, 111111, 4940, org.apache.shiro.web.servlet.ShiroHttpServletRequest@71e6f775]
2019-04-06 14:22:29 -==>  Preparing: select `user_id`,`username`,`name`,`password`,`dept_id`,`email`,`mobile`,`status`,`user_id_create`,`gmt_create`,`gmt_modified`,`sex`,`birth`,`pic_id`,`live_address`,`hobby`,`province`,`city`,`district` from sys_user WHERE username = ? order by user_id desc 
2019-04-06 14:22:29 -==> Parameters: admin(String)
2019-04-06 14:22:29 -<==      Total: 1
2019-04-06 14:22:29 -耗时 : 513
2019-04-06 14:22:29 -返回值 : {msg=操作成功, code=0}
2019-04-06 14:22:29 -More than one TaskExecutor bean found within the context, and none is named 'taskExecutor'. Mark one of them as primary or name it 'taskExecutor' (possibly as an alias) in order to use it for async processing: [clientInboundChannelExecutor, clientOutboundChannelExecutor, brokerChannelExecutor, messageBrokerTaskScheduler]
2019-04-06 14:22:29 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-06 14:22:29 -==> Parameters: 1(Long), admin(String), 登录(String), 514(Integer), com.bootdo.system.controller.LoginController.ajaxLogin()(String), null, 127.0.0.1(String), 2019-04-06 14:22:29.883(Timestamp)
2019-04-06 14:22:29 -请求地址 : http://localhost:8081/index
2019-04-06 14:22:29 -HTTP METHOD : GET
2019-04-06 14:22:29 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2019-04-06 14:22:29 -参数 : [{}]
2019-04-06 14:22:30 -<==    Updates: 1
2019-04-06 14:22:30 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2019-04-06 14:22:30 -==> Parameters: 1(Long)
2019-04-06 14:22:30 -<==      Total: 46
2019-04-06 14:22:30 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2019-04-06 14:22:30 -==> Parameters: 138(Long)
2019-04-06 14:22:30 -<==      Total: 1
2019-04-06 14:22:30 -耗时 : 713
2019-04-06 14:22:30 -返回值 : index_v1
2019-04-06 14:22:30 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-06 14:22:30 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 713(Integer), com.bootdo.system.controller.LoginController.index()(String), {"menus":[{"attributes":{"icon":"fa fa-money","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-money","url":"/moneyList/moneyList"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"102","parentId":"106","text":"现金缴费"},{"attributes":{"icon":"fa fa-book","url":"/moneyLog/elecLog"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"107","parentId":"106","text":"缴费记录"}],"hasChildren":true,"hasParent":false,"id":"106","parentId":"0","text":"收费管理"},{"attributes":{"icon":"fa fa-lightbulb-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/elec/elec"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"121","parentId":"103","text":"电费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"elec/elecInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"122","parentId":"103","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"elec/elecUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"123","parentId":"103","text":"电表上传"},{"attributes":{"icon":"fa fa-cc","url":"/elec/elecPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"124","parentId":"103","text":"电价管理"}],"hasChildren":true,"hasParent":false,"id":"103","parentId":"0","text":"电费管理"},{"attributes":{"icon":"fa fa-tint","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/water/water"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"117","parentId":"105","text":"水费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"water/waterInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"118","parentId":"105","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"water/waterUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"119","parentId":"105","text":"水费生成"},{"attributes":{"icon":"fa fa-cc","url":"/water/waterPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"120","parentId":"105","text":"水价管理"}],"hasChildren":true,"hasParent":false,"id":"105","parentId":"0","text":"水费管理"},{"attributes":{"icon":"fa fa-fire","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/heat/heat"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"113","parentId":"104","text":"暖费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"heat/heatInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"114","parentId":"104","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"heat/heatUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"115","parentId":"104","text":"暖费生成"},{"attributes":{"icon":"","url":"/heat/heatPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"116","parentId":"104","text":"暖价管理"}],"hasChildren":true,"hasParent":false,"id":"104","parentId":"0","text":"暖费管理"},{"attributes":{"icon":"fa fa-vcard-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-bomb","url":"/print/print"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"149","parentId":"108","text":"票据记录"}],"hasChildren":true,"hasParent":false,"id":"108","parentId":"0","text":"票据管理"},{"attributes":{"icon":"fa fa-bar-chart","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-area-chart","url":"/chart/graph_echarts.html"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","text":"百度chart"},{"attributes":{"icon":"fa fa-sun-o","url":"charts/countDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"109","parentId":"97","text":"日统计报表"},{"attributes":{"icon":"fa fa-registered","url":"charts/countMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"110","parentId":"97","text":"月统计报表"},{"attributes":{"icon":"fa fa-money","url":"charts/countOwe"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"155","parentId":"97","text":"欠费报表图"},{"attributes":{"icon":"fa fa-support","url":"charts/countYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"111","parentId":"97","text":"年统计报表"},{"attributes":{"icon":"fa fa-tachometer","url":"charts/countRun"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"112","parentId":"97","text":"走势图报表"}],"hasChildren":true,"hasParent":false,"id":"97","parentId":"0","text":"统计管理"},{"attributes":{"icon":"fa fa-bars","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-book","url":"/common/dict"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"78","parentId":"1","text":"数据字典"},{"attributes":{"icon":"fa fa-folder-open","url":"/common/sysFile"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"71","parentId":"1","text":"文件管理"}],"h(String), 127.0.0.1(String), 2019-04-06 14:22:30.843(Timestamp)
2019-04-06 14:22:31 -<==    Updates: 1
2019-04-06 14:22:31 -请求地址 : http://localhost:8081/main
2019-04-06 14:22:31 -HTTP METHOD : GET
2019-04-06 14:22:31 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-06 14:22:31 -参数 : []
2019-04-06 14:22:31 -耗时 : 0
2019-04-06 14:22:31 -返回值 : main
2019-04-06 14:22:33 -请求地址 : http://localhost:8081/oa/notify/message
2019-04-06 14:22:33 -HTTP METHOD : GET
2019-04-06 14:22:33 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2019-04-06 14:22:33 -参数 : []
2019-04-06 14:22:33 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2019-04-06 14:22:33 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2019-04-06 14:22:33 -请求地址 : http://localhost:8081/main
2019-04-06 14:22:33 -HTTP METHOD : GET
2019-04-06 14:22:33 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-06 14:22:33 -参数 : []
2019-04-06 14:22:33 -耗时 : 1
2019-04-06 14:22:33 -返回值 : main
2019-04-06 14:22:33 -<==      Total: 0
2019-04-06 14:22:33 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2019-04-06 14:22:33 -==> Parameters: 1(Long), 0(String)
2019-04-06 14:22:33 -<==      Total: 1
2019-04-06 14:22:33 -耗时 : 678
2019-04-06 14:22:33 -返回值 : com.bootdo.common.utils.PageUtils@53ba6075
2019-04-06 14:22:37 -==>  Preparing: select distinct m.perms from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id = ur.role_id where ur.user_id = ? 
2019-04-06 14:22:37 -==> Parameters: 1(Long)
2019-04-06 14:22:37 -<==      Total: 90
2019-04-06 14:22:37 -请求地址 : http://localhost:8081/moneyLog/elecLog
2019-04-06 14:22:37 -HTTP METHOD : GET
2019-04-06 14:22:37 -CLASS_METHOD : com.bootdo.moneyLog.controller.ElecLogController.moneyLog
2019-04-06 14:22:37 -参数 : []
2019-04-06 14:22:37 -耗时 : 0
2019-04-06 14:22:37 -返回值 : /moneyLog/elecLog/elecLog
2019-04-06 14:22:38 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-06 14:22:38 -HTTP METHOD : GET
2019-04-06 14:22:38 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-06 14:22:38 -参数 : [userType]
2019-04-06 14:22:39 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-06 14:22:39 -==> Parameters: userType(String)
2019-04-06 14:22:39 -请求地址 : http://localhost:8081/moneyLog/elecLog/list
2019-04-06 14:22:39 -HTTP METHOD : GET
2019-04-06 14:22:39 -CLASS_METHOD : com.bootdo.moneyLog.controller.ElecLogController.list
2019-04-06 14:22:39 -参数 : [{limit=10, offset=0, userType=, userOrg=, userId=, elecDate=}]
2019-04-06 14:22:39 -<==      Total: 2
2019-04-06 14:22:39 -耗时 : 87
2019-04-06 14:22:39 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-06 14:22:39 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`elec_type`,`elec_money`,`elec_date`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec_log order by id asc limit ?, ? 
2019-04-06 14:22:39 -==> Parameters: 0(Integer), 10(Integer)
2019-04-06 14:22:39 -<==      Total: 7
2019-04-06 14:22:39 -==>  Preparing: select count(*) from elec_log 
2019-04-06 14:22:39 -==> Parameters: 
2019-04-06 14:22:39 -<==      Total: 1
2019-04-06 14:22:39 -耗时 : 120
2019-04-06 14:22:39 -返回值 : com.bootdo.common.utils.PageUtils@1379be99
2019-04-06 14:22:40 -请求地址 : http://localhost:8081/moneyLog/waterLog
2019-04-06 14:22:40 -HTTP METHOD : GET
2019-04-06 14:22:40 -CLASS_METHOD : com.bootdo.moneyLog.controller.WaterLogController.WaterLog
2019-04-06 14:22:40 -参数 : []
2019-04-06 14:22:40 -耗时 : 1
2019-04-06 14:22:40 -返回值 : /moneyLog/waterLog/waterLog
2019-04-06 14:22:41 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-06 14:22:41 -HTTP METHOD : GET
2019-04-06 14:22:41 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-06 14:22:41 -参数 : [userType]
2019-04-06 14:22:41 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-06 14:22:41 -==> Parameters: userType(String)
2019-04-06 14:22:41 -<==      Total: 2
2019-04-06 14:22:41 -耗时 : 6
2019-04-06 14:22:41 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-06 14:22:41 -请求地址 : http://localhost:8081/moneyLog/waterLog/list
2019-04-06 14:22:41 -HTTP METHOD : GET
2019-04-06 14:22:41 -CLASS_METHOD : com.bootdo.moneyLog.controller.WaterLogController.list
2019-04-06 14:22:41 -参数 : [{limit=10, offset=0, userType=, userOrg=, userId=, waterDate=}]
2019-04-06 14:22:41 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,`water_type`,`water_money`,`water_date`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from water_log order by id asc limit ?, ? 
2019-04-06 14:22:41 -==> Parameters: 0(Integer), 10(Integer)
2019-04-06 14:22:41 -<==      Total: 5
2019-04-06 14:22:41 -==>  Preparing: select count(*) from water_log 
2019-04-06 14:22:41 -==> Parameters: 
2019-04-06 14:22:41 -<==      Total: 1
2019-04-06 14:22:41 -耗时 : 30
2019-04-06 14:22:41 -返回值 : com.bootdo.common.utils.PageUtils@24f01f51
2019-04-06 14:22:47 -请求地址 : http://localhost:8081/moneyLog/waterLog/edit/5
2019-04-06 14:22:47 -HTTP METHOD : GET
2019-04-06 14:22:47 -CLASS_METHOD : com.bootdo.moneyLog.controller.WaterLogController.edit
2019-04-06 14:22:47 -参数 : [5, {}]
2019-04-06 14:22:47 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,`water_type`,`water_money`,`water_date`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from water_log where id = ? 
2019-04-06 14:22:47 -==> Parameters: 5(Long)
2019-04-06 14:22:47 -<==      Total: 1
2019-04-06 14:22:47 -耗时 : 19
2019-04-06 14:22:47 -返回值 : moneyLog/waterLog/edit
2019-04-06 14:22:48 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-06 14:22:48 -HTTP METHOD : GET
2019-04-06 14:22:48 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-06 14:22:48 -参数 : [userType]
2019-04-06 14:22:48 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-06 14:22:48 -请求地址 : http://localhost:8081/common/dict/list/waterType
2019-04-06 14:22:48 -HTTP METHOD : GET
2019-04-06 14:22:48 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-06 14:22:48 -参数 : [waterType]
2019-04-06 14:22:48 -==> Parameters: userType(String)
2019-04-06 14:22:48 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-06 14:22:48 -==> Parameters: waterType(String)
2019-04-06 14:22:48 -<==      Total: 2
2019-04-06 14:22:48 -耗时 : 16
2019-04-06 14:22:48 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-06 14:22:48 -<==      Total: 6
2019-04-06 14:22:48 -耗时 : 80
2019-04-06 14:22:48 -返回值 : [DictDO{id=132, name='特殊水费4', value='5', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=131, name='特殊水费3', value='4', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=130, name='特殊水费2', value='3', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=129, name='特殊水费1', value='2', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=128, name='民用水', value='1', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=127, name='商业水', value='0', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-06 14:22:54 -WebSocketSession[1 current WS(0)-HttpStream(1)-HttpPoll(0), 2 total, 0 closed abnormally (0 connect failure, 0 send limit, 3 transport error)], stompSubProtocol[processed CONNECT(1)-CONNECTED(1)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 8, active threads = 0, queued tasks = 0, completed tasks = 12], outboundChannelpool size = 2, active threads = 0, queued tasks = 0, completed tasks = 2], sockJsScheduler[pool size = 4, active threads = 1, queued tasks = 2, completed tasks = 4]
2019-04-06 14:22:55 -请求地址 : http://localhost:8081/moneyLog/waterLog/edit/4
2019-04-06 14:22:55 -HTTP METHOD : GET
2019-04-06 14:22:55 -CLASS_METHOD : com.bootdo.moneyLog.controller.WaterLogController.edit
2019-04-06 14:22:55 -参数 : [4, {}]
2019-04-06 14:22:55 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,`water_type`,`water_money`,`water_date`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from water_log where id = ? 
2019-04-06 14:22:55 -==> Parameters: 4(Long)
2019-04-06 14:22:55 -<==      Total: 1
2019-04-06 14:22:55 -耗时 : 87
2019-04-06 14:22:55 -返回值 : moneyLog/waterLog/edit
2019-04-06 14:22:56 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-06 14:22:56 -HTTP METHOD : GET
2019-04-06 14:22:56 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-06 14:22:56 -参数 : [userType]
2019-04-06 14:22:56 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-06 14:22:56 -==> Parameters: userType(String)
2019-04-06 14:22:56 -请求地址 : http://localhost:8081/common/dict/list/waterType
2019-04-06 14:22:56 -HTTP METHOD : GET
2019-04-06 14:22:56 -<==      Total: 2
2019-04-06 14:22:56 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-06 14:22:56 -参数 : [waterType]
2019-04-06 14:22:56 -耗时 : 4
2019-04-06 14:22:56 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-06 14:22:56 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-06 14:22:56 -==> Parameters: waterType(String)
2019-04-06 14:22:56 -<==      Total: 6
2019-04-06 14:22:56 -耗时 : 15
2019-04-06 14:22:56 -返回值 : [DictDO{id=132, name='特殊水费4', value='5', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=131, name='特殊水费3', value='4', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=130, name='特殊水费2', value='3', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=129, name='特殊水费1', value='2', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=128, name='民用水', value='1', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=127, name='商业水', value='0', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-06 14:22:59 -请求地址 : http://localhost:8081/moneyLog/waterLog/edit/5
2019-04-06 14:22:59 -HTTP METHOD : GET
2019-04-06 14:22:59 -CLASS_METHOD : com.bootdo.moneyLog.controller.WaterLogController.edit
2019-04-06 14:22:59 -参数 : [5, {}]
2019-04-06 14:22:59 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,`water_type`,`water_money`,`water_date`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from water_log where id = ? 
2019-04-06 14:22:59 -==> Parameters: 5(Long)
2019-04-06 14:22:59 -<==      Total: 1
2019-04-06 14:22:59 -耗时 : 8
2019-04-06 14:22:59 -返回值 : moneyLog/waterLog/edit
2019-04-06 14:22:59 -请求地址 : http://localhost:8081/common/dict/list/waterType
2019-04-06 14:22:59 -HTTP METHOD : GET
2019-04-06 14:22:59 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-06 14:22:59 -参数 : [waterType]
2019-04-06 14:22:59 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-06 14:22:59 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-06 14:22:59 -HTTP METHOD : GET
2019-04-06 14:22:59 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-06 14:22:59 -参数 : [userType]
2019-04-06 14:23:00 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-06 14:23:00 -==> Parameters: userType(String)
2019-04-06 14:23:00 -==> Parameters: waterType(String)
2019-04-06 14:23:00 -<==      Total: 2
2019-04-06 14:23:00 -耗时 : 15
2019-04-06 14:23:00 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-06 14:23:00 -<==      Total: 6
2019-04-06 14:23:00 -耗时 : 23
2019-04-06 14:23:00 -返回值 : [DictDO{id=132, name='特殊水费4', value='5', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=131, name='特殊水费3', value='4', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=130, name='特殊水费2', value='3', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=129, name='特殊水费1', value='2', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=128, name='民用水', value='1', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=127, name='商业水', value='0', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-06 14:25:25 -请求地址 : http://localhost:8081/moneyLog/waterLog/update
2019-04-06 14:25:25 -HTTP METHOD : POST
2019-04-06 14:25:25 -CLASS_METHOD : com.bootdo.moneyLog.controller.WaterLogController.update
2019-04-06 14:25:25 -参数 : [com.bootdo.moneyLog.domain.WaterLogDO@7b6ec7f]
2019-04-06 14:25:25 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-06 14:25:25 -==> Parameters: 1(Long), admin(String), error(String), null, http://localhost:8081/moneyLog/waterLog/update(String), org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.exceptions.PersistenceException: 
### Error updating database.  Cause: java.lang.IllegalArgumentException: invalid comparison: java.util.Date and java.lang.String
### Cause: java.lang.IllegalArgumentException: invalid comparison: java.util.Date and java.lang.String(String), null, 2019-04-06 14:25:25.746(Timestamp)
2019-04-06 14:25:25 -nested exception is org.apache.ibatis.exceptions.PersistenceException: 
### Error updating database.  Cause: java.lang.IllegalArgumentException: invalid comparison: java.util.Date and java.lang.String
### Cause: java.lang.IllegalArgumentException: invalid comparison: java.util.Date and java.lang.String
org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.exceptions.PersistenceException: 
### Error updating database.  Cause: java.lang.IllegalArgumentException: invalid comparison: java.util.Date and java.lang.String
### Cause: java.lang.IllegalArgumentException: invalid comparison: java.util.Date and java.lang.String
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:79)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:447)
	at com.sun.proxy.$Proxy101.update(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.update(SqlSessionTemplate.java:295)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:62)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy104.update(Unknown Source)
	at com.bootdo.moneyLog.service.impl.WaterLogServiceImpl.update(WaterLogServiceImpl.java:39)
	at com.bootdo.moneyLog.controller.WaterLogController.update(WaterLogController.java:226)
	at com.bootdo.moneyLog.controller.WaterLogController$$FastClassBySpringCGLIB$$3a5e3635.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:204)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:746)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.bootdo.common.aspect.WebLogAspect.doAround(WebLogAspect.java:57)
	at sun.reflect.GeneratedMethodAccessor128.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.apache.shiro.spring.security.interceptor.AopAllianceAnnotationsAuthorizingMethodInterceptor$1.proceed(AopAllianceAnnotationsAuthorizingMethodInterceptor.java:82)
	at org.apache.shiro.authz.aop.AuthorizingMethodInterceptor.invoke(AuthorizingMethodInterceptor.java:39)
	at org.apache.shiro.spring.security.interceptor.AopAllianceAnnotationsAuthorizingMethodInterceptor.invoke(AopAllianceAnnotationsAuthorizingMethodInterceptor.java:115)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.bootdo.moneyLog.controller.WaterLogController$$EnhancerBySpringCGLIB$$d0479c88.update(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:209)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:877)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:783)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:991)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:925)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:974)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:877)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:661)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:851)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:61)
	at org.apache.shiro.web.servlet.AdviceFilter.executeChain(AdviceFilter.java:108)
	at org.apache.shiro.web.servlet.AdviceFilter.doFilterInternal(AdviceFilter.java:137)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:66)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)
	at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)
	at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)
	at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)
	at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:383)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:109)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:496)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:790)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1468)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Unknown Source)
Caused by: org.apache.ibatis.exceptions.PersistenceException: 
### Error updating database.  Cause: java.lang.IllegalArgumentException: invalid comparison: java.util.Date and java.lang.String
### Cause: java.lang.IllegalArgumentException: invalid comparison: java.util.Date and java.lang.String
	at org.apache.ibatis.exceptions.ExceptionFactory.wrapException(ExceptionFactory.java:30)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:200)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:434)
	... 103 common frames omitted
Caused by: java.lang.IllegalArgumentException: invalid comparison: java.util.Date and java.lang.String
	at org.apache.ibatis.ognl.OgnlOps.compareWithConversion(OgnlOps.java:93)
	at org.apache.ibatis.ognl.OgnlOps.isEqual(OgnlOps.java:143)
	at org.apache.ibatis.ognl.OgnlOps.equal(OgnlOps.java:802)
	at org.apache.ibatis.ognl.ASTNotEq.getValueBody(ASTNotEq.java:53)
	at org.apache.ibatis.ognl.SimpleNode.evaluateGetValueBody(SimpleNode.java:212)
	at org.apache.ibatis.ognl.SimpleNode.getValue(SimpleNode.java:258)
	at org.apache.ibatis.ognl.ASTAnd.getValueBody(ASTAnd.java:61)
	at org.apache.ibatis.ognl.SimpleNode.evaluateGetValueBody(SimpleNode.java:212)
	at org.apache.ibatis.ognl.SimpleNode.getValue(SimpleNode.java:258)
	at org.apache.ibatis.ognl.Ognl.getValue(Ognl.java:470)
	at org.apache.ibatis.ognl.Ognl.getValue(Ognl.java:434)
	at org.apache.ibatis.scripting.xmltags.OgnlCache.getValue(OgnlCache.java:44)
	at org.apache.ibatis.scripting.xmltags.ExpressionEvaluator.evaluateBoolean(ExpressionEvaluator.java:32)
	at org.apache.ibatis.scripting.xmltags.IfSqlNode.apply(IfSqlNode.java:34)
	at org.apache.ibatis.scripting.xmltags.MixedSqlNode.apply(MixedSqlNode.java:33)
	at org.apache.ibatis.scripting.xmltags.TrimSqlNode.apply(TrimSqlNode.java:55)
	at org.apache.ibatis.scripting.xmltags.MixedSqlNode.apply(MixedSqlNode.java:33)
	at org.apache.ibatis.scripting.xmltags.DynamicSqlSource.getBoundSql(DynamicSqlSource.java:41)
	at org.apache.ibatis.mapping.MappedStatement.getBoundSql(MappedStatement.java:292)
	at org.apache.ibatis.executor.statement.BaseStatementHandler.<init>(BaseStatementHandler.java:64)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.<init>(PreparedStatementHandler.java:40)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.<init>(RoutingStatementHandler.java:46)
	at org.apache.ibatis.session.Configuration.newStatementHandler(Configuration.java:545)
	at org.apache.ibatis.executor.SimpleExecutor.doUpdate(SimpleExecutor.java:48)
	at org.apache.ibatis.executor.BaseExecutor.update(BaseExecutor.java:117)
	at org.apache.ibatis.executor.CachingExecutor.update(CachingExecutor.java:76)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:198)
	... 108 common frames omitted
2019-04-06 14:25:25 -<==    Updates: 1
2019-04-06 14:25:28 -请求地址 : http://localhost:8081/moneyLog/waterLog/update
2019-04-06 14:25:28 -HTTP METHOD : POST
2019-04-06 14:25:28 -CLASS_METHOD : com.bootdo.moneyLog.controller.WaterLogController.update
2019-04-06 14:25:28 -参数 : [com.bootdo.moneyLog.domain.WaterLogDO@7205df0b]
2019-04-06 14:25:28 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-06 14:25:28 -nested exception is org.apache.ibatis.exceptions.PersistenceException: 
### Error updating database.  Cause: java.lang.IllegalArgumentException: invalid comparison: java.util.Date and java.lang.String
### Cause: java.lang.IllegalArgumentException: invalid comparison: java.util.Date and java.lang.String
org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.exceptions.PersistenceException: 
### Error updating database.  Cause: java.lang.IllegalArgumentException: invalid comparison: java.util.Date and java.lang.String
### Cause: java.lang.IllegalArgumentException: invalid comparison: java.util.Date and java.lang.String
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:79)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:447)
	at com.sun.proxy.$Proxy101.update(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.update(SqlSessionTemplate.java:295)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:62)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy104.update(Unknown Source)
	at com.bootdo.moneyLog.service.impl.WaterLogServiceImpl.update(WaterLogServiceImpl.java:39)
	at com.bootdo.moneyLog.controller.WaterLogController.update(WaterLogController.java:226)
	at com.bootdo.moneyLog.controller.WaterLogController$$FastClassBySpringCGLIB$$3a5e3635.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:204)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:746)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.bootdo.common.aspect.WebLogAspect.doAround(WebLogAspect.java:57)
	at sun.reflect.GeneratedMethodAccessor128.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.apache.shiro.spring.security.interceptor.AopAllianceAnnotationsAuthorizingMethodInterceptor$1.proceed(AopAllianceAnnotationsAuthorizingMethodInterceptor.java:82)
	at org.apache.shiro.authz.aop.AuthorizingMethodInterceptor.invoke(AuthorizingMethodInterceptor.java:39)
	at org.apache.shiro.spring.security.interceptor.AopAllianceAnnotationsAuthorizingMethodInterceptor.invoke(AopAllianceAnnotationsAuthorizingMethodInterceptor.java:115)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.bootdo.moneyLog.controller.WaterLogController$$EnhancerBySpringCGLIB$$d0479c88.update(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:209)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:877)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:783)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:991)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:925)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:974)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:877)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:661)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:851)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:61)
	at org.apache.shiro.web.servlet.AdviceFilter.executeChain(AdviceFilter.java:108)
	at org.apache.shiro.web.servlet.AdviceFilter.doFilterInternal(AdviceFilter.java:137)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:66)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)
	at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)
	at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)
	at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)
	at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:383)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:109)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:496)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:790)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1468)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Unknown Source)
Caused by: org.apache.ibatis.exceptions.PersistenceException: 
### Error updating database.  Cause: java.lang.IllegalArgumentException: invalid comparison: java.util.Date and java.lang.String
### Cause: java.lang.IllegalArgumentException: invalid comparison: java.util.Date and java.lang.String
	at org.apache.ibatis.exceptions.ExceptionFactory.wrapException(ExceptionFactory.java:30)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:200)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:434)
	... 103 common frames omitted
Caused by: java.lang.IllegalArgumentException: invalid comparison: java.util.Date and java.lang.String
	at org.apache.ibatis.ognl.OgnlOps.compareWithConversion(OgnlOps.java:93)
	at org.apache.ibatis.ognl.OgnlOps.isEqual(OgnlOps.java:143)
	at org.apache.ibatis.ognl.OgnlOps.equal(OgnlOps.java:802)
	at org.apache.ibatis.ognl.ASTNotEq.getValueBody(ASTNotEq.java:53)
	at org.apache.ibatis.ognl.SimpleNode.evaluateGetValueBody(SimpleNode.java:212)
	at org.apache.ibatis.ognl.SimpleNode.getValue(SimpleNode.java:258)
	at org.apache.ibatis.ognl.ASTAnd.getValueBody(ASTAnd.java:61)
	at org.apache.ibatis.ognl.SimpleNode.evaluateGetValueBody(SimpleNode.java:212)
	at org.apache.ibatis.ognl.SimpleNode.getValue(SimpleNode.java:258)
	at org.apache.ibatis.ognl.Ognl.getValue(Ognl.java:470)
	at org.apache.ibatis.ognl.Ognl.getValue(Ognl.java:434)
	at org.apache.ibatis.scripting.xmltags.OgnlCache.getValue(OgnlCache.java:44)
	at org.apache.ibatis.scripting.xmltags.ExpressionEvaluator.evaluateBoolean(ExpressionEvaluator.java:32)
	at org.apache.ibatis.scripting.xmltags.IfSqlNode.apply(IfSqlNode.java:34)
	at org.apache.ibatis.scripting.xmltags.MixedSqlNode.apply(MixedSqlNode.java:33)
	at org.apache.ibatis.scripting.xmltags.TrimSqlNode.apply(TrimSqlNode.java:55)
	at org.apache.ibatis.scripting.xmltags.MixedSqlNode.apply(MixedSqlNode.java:33)
	at org.apache.ibatis.scripting.xmltags.DynamicSqlSource.getBoundSql(DynamicSqlSource.java:41)
	at org.apache.ibatis.mapping.MappedStatement.getBoundSql(MappedStatement.java:292)
	at org.apache.ibatis.executor.statement.BaseStatementHandler.<init>(BaseStatementHandler.java:64)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.<init>(PreparedStatementHandler.java:40)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.<init>(RoutingStatementHandler.java:46)
	at org.apache.ibatis.session.Configuration.newStatementHandler(Configuration.java:545)
	at org.apache.ibatis.executor.SimpleExecutor.doUpdate(SimpleExecutor.java:48)
	at org.apache.ibatis.executor.BaseExecutor.update(BaseExecutor.java:117)
	at org.apache.ibatis.executor.CachingExecutor.update(CachingExecutor.java:76)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:198)
	... 108 common frames omitted
2019-04-06 14:25:28 -==> Parameters: 1(Long), admin(String), error(String), null, http://localhost:8081/moneyLog/waterLog/update(String), org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.exceptions.PersistenceException: 
### Error updating database.  Cause: java.lang.IllegalArgumentException: invalid comparison: java.util.Date and java.lang.String
### Cause: java.lang.IllegalArgumentException: invalid comparison: java.util.Date and java.lang.String(String), null, 2019-04-06 14:25:28.53(Timestamp)
2019-04-06 14:25:28 -<==    Updates: 1
2019-04-06 14:25:31 -请求地址 : http://localhost:8081/moneyLog/waterLog/update
2019-04-06 14:25:31 -HTTP METHOD : POST
2019-04-06 14:25:31 -CLASS_METHOD : com.bootdo.moneyLog.controller.WaterLogController.update
2019-04-06 14:25:31 -参数 : [com.bootdo.moneyLog.domain.WaterLogDO@702af43b]
2019-04-06 14:25:31 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-06 14:25:31 -nested exception is org.apache.ibatis.exceptions.PersistenceException: 
### Error updating database.  Cause: java.lang.IllegalArgumentException: invalid comparison: java.util.Date and java.lang.String
### Cause: java.lang.IllegalArgumentException: invalid comparison: java.util.Date and java.lang.String
org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.exceptions.PersistenceException: 
### Error updating database.  Cause: java.lang.IllegalArgumentException: invalid comparison: java.util.Date and java.lang.String
### Cause: java.lang.IllegalArgumentException: invalid comparison: java.util.Date and java.lang.String
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:79)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:447)
	at com.sun.proxy.$Proxy101.update(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.update(SqlSessionTemplate.java:295)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:62)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy104.update(Unknown Source)
	at com.bootdo.moneyLog.service.impl.WaterLogServiceImpl.update(WaterLogServiceImpl.java:39)
	at com.bootdo.moneyLog.controller.WaterLogController.update(WaterLogController.java:226)
	at com.bootdo.moneyLog.controller.WaterLogController$$FastClassBySpringCGLIB$$3a5e3635.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:204)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:746)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.bootdo.common.aspect.WebLogAspect.doAround(WebLogAspect.java:57)
	at sun.reflect.GeneratedMethodAccessor128.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.apache.shiro.spring.security.interceptor.AopAllianceAnnotationsAuthorizingMethodInterceptor$1.proceed(AopAllianceAnnotationsAuthorizingMethodInterceptor.java:82)
	at org.apache.shiro.authz.aop.AuthorizingMethodInterceptor.invoke(AuthorizingMethodInterceptor.java:39)
	at org.apache.shiro.spring.security.interceptor.AopAllianceAnnotationsAuthorizingMethodInterceptor.invoke(AopAllianceAnnotationsAuthorizingMethodInterceptor.java:115)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.bootdo.moneyLog.controller.WaterLogController$$EnhancerBySpringCGLIB$$d0479c88.update(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:209)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:877)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:783)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:991)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:925)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:974)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:877)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:661)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:851)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:61)
	at org.apache.shiro.web.servlet.AdviceFilter.executeChain(AdviceFilter.java:108)
	at org.apache.shiro.web.servlet.AdviceFilter.doFilterInternal(AdviceFilter.java:137)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:66)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)
	at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)
	at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)
	at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)
	at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:383)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:109)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:496)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:790)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1468)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Unknown Source)
Caused by: org.apache.ibatis.exceptions.PersistenceException: 
### Error updating database.  Cause: java.lang.IllegalArgumentException: invalid comparison: java.util.Date and java.lang.String
### Cause: java.lang.IllegalArgumentException: invalid comparison: java.util.Date and java.lang.String
	at org.apache.ibatis.exceptions.ExceptionFactory.wrapException(ExceptionFactory.java:30)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:200)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:434)
	... 103 common frames omitted
Caused by: java.lang.IllegalArgumentException: invalid comparison: java.util.Date and java.lang.String
	at org.apache.ibatis.ognl.OgnlOps.compareWithConversion(OgnlOps.java:93)
	at org.apache.ibatis.ognl.OgnlOps.isEqual(OgnlOps.java:143)
	at org.apache.ibatis.ognl.OgnlOps.equal(OgnlOps.java:802)
	at org.apache.ibatis.ognl.ASTNotEq.getValueBody(ASTNotEq.java:53)
	at org.apache.ibatis.ognl.SimpleNode.evaluateGetValueBody(SimpleNode.java:212)
	at org.apache.ibatis.ognl.SimpleNode.getValue(SimpleNode.java:258)
	at org.apache.ibatis.ognl.ASTAnd.getValueBody(ASTAnd.java:61)
	at org.apache.ibatis.ognl.SimpleNode.evaluateGetValueBody(SimpleNode.java:212)
	at org.apache.ibatis.ognl.SimpleNode.getValue(SimpleNode.java:258)
	at org.apache.ibatis.ognl.Ognl.getValue(Ognl.java:470)
	at org.apache.ibatis.ognl.Ognl.getValue(Ognl.java:434)
	at org.apache.ibatis.scripting.xmltags.OgnlCache.getValue(OgnlCache.java:44)
	at org.apache.ibatis.scripting.xmltags.ExpressionEvaluator.evaluateBoolean(ExpressionEvaluator.java:32)
	at org.apache.ibatis.scripting.xmltags.IfSqlNode.apply(IfSqlNode.java:34)
	at org.apache.ibatis.scripting.xmltags.MixedSqlNode.apply(MixedSqlNode.java:33)
	at org.apache.ibatis.scripting.xmltags.TrimSqlNode.apply(TrimSqlNode.java:55)
	at org.apache.ibatis.scripting.xmltags.MixedSqlNode.apply(MixedSqlNode.java:33)
	at org.apache.ibatis.scripting.xmltags.DynamicSqlSource.getBoundSql(DynamicSqlSource.java:41)
	at org.apache.ibatis.mapping.MappedStatement.getBoundSql(MappedStatement.java:292)
	at org.apache.ibatis.executor.statement.BaseStatementHandler.<init>(BaseStatementHandler.java:64)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.<init>(PreparedStatementHandler.java:40)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.<init>(RoutingStatementHandler.java:46)
	at org.apache.ibatis.session.Configuration.newStatementHandler(Configuration.java:545)
	at org.apache.ibatis.executor.SimpleExecutor.doUpdate(SimpleExecutor.java:48)
	at org.apache.ibatis.executor.BaseExecutor.update(BaseExecutor.java:117)
	at org.apache.ibatis.executor.CachingExecutor.update(CachingExecutor.java:76)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:198)
	... 108 common frames omitted
2019-04-06 14:25:31 -==> Parameters: 1(Long), admin(String), error(String), null, http://localhost:8081/moneyLog/waterLog/update(String), org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.exceptions.PersistenceException: 
### Error updating database.  Cause: java.lang.IllegalArgumentException: invalid comparison: java.util.Date and java.lang.String
### Cause: java.lang.IllegalArgumentException: invalid comparison: java.util.Date and java.lang.String(String), null, 2019-04-06 14:25:31.084(Timestamp)
2019-04-06 14:25:31 -<==    Updates: 1
2019-04-06 14:37:09 -请求地址 : http://localhost:8081/index
2019-04-06 14:37:09 -HTTP METHOD : GET
2019-04-06 14:37:09 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2019-04-06 14:37:09 -参数 : [{}]
2019-04-06 14:37:09 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2019-04-06 14:37:09 -==> Parameters: 1(Long)
2019-04-06 14:37:10 -<==      Total: 46
2019-04-06 14:37:10 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2019-04-06 14:37:10 -==> Parameters: 138(Long)
2019-04-06 14:37:10 -<==      Total: 1
2019-04-06 14:37:10 -耗时 : 101
2019-04-06 14:37:10 -返回值 : index_v1
2019-04-06 14:37:10 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-06 14:37:10 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 101(Integer), com.bootdo.system.controller.LoginController.index()(String), {"menus":[{"attributes":{"icon":"fa fa-money","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-money","url":"/moneyList/moneyList"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"102","parentId":"106","text":"现金缴费"},{"attributes":{"icon":"fa fa-book","url":"/moneyLog/elecLog"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"107","parentId":"106","text":"缴费记录"}],"hasChildren":true,"hasParent":false,"id":"106","parentId":"0","text":"收费管理"},{"attributes":{"icon":"fa fa-lightbulb-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/elec/elec"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"121","parentId":"103","text":"电费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"elec/elecInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"122","parentId":"103","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"elec/elecUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"123","parentId":"103","text":"电表上传"},{"attributes":{"icon":"fa fa-cc","url":"/elec/elecPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"124","parentId":"103","text":"电价管理"}],"hasChildren":true,"hasParent":false,"id":"103","parentId":"0","text":"电费管理"},{"attributes":{"icon":"fa fa-tint","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/water/water"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"117","parentId":"105","text":"水费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"water/waterInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"118","parentId":"105","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"water/waterUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"119","parentId":"105","text":"水费生成"},{"attributes":{"icon":"fa fa-cc","url":"/water/waterPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"120","parentId":"105","text":"水价管理"}],"hasChildren":true,"hasParent":false,"id":"105","parentId":"0","text":"水费管理"},{"attributes":{"icon":"fa fa-fire","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/heat/heat"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"113","parentId":"104","text":"暖费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"heat/heatInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"114","parentId":"104","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"heat/heatUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"115","parentId":"104","text":"暖费生成"},{"attributes":{"icon":"","url":"/heat/heatPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"116","parentId":"104","text":"暖价管理"}],"hasChildren":true,"hasParent":false,"id":"104","parentId":"0","text":"暖费管理"},{"attributes":{"icon":"fa fa-vcard-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-bomb","url":"/print/print"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"149","parentId":"108","text":"票据记录"}],"hasChildren":true,"hasParent":false,"id":"108","parentId":"0","text":"票据管理"},{"attributes":{"icon":"fa fa-bar-chart","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-area-chart","url":"/chart/graph_echarts.html"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","text":"百度chart"},{"attributes":{"icon":"fa fa-sun-o","url":"charts/countDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"109","parentId":"97","text":"日统计报表"},{"attributes":{"icon":"fa fa-registered","url":"charts/countMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"110","parentId":"97","text":"月统计报表"},{"attributes":{"icon":"fa fa-support","url":"charts/countYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"111","parentId":"97","text":"年统计报表"},{"attributes":{"icon":"fa fa-money","url":"charts/countOwe"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"155","parentId":"97","text":"欠费报表图"},{"attributes":{"icon":"fa fa-tachometer","url":"charts/countRun"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"112","parentId":"97","text":"走势图报表"}],"hasChildren":true,"hasParent":false,"id":"97","parentId":"0","text":"统计管理"},{"attributes":{"icon":"fa fa-bars","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-book","url":"/common/dict"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"78","parentId":"1","text":"数据字典"},{"attributes":{"icon":"fa fa-folder-open","url":"/common/sysFile"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"71","parentId":"1","text":"文件管理"}],"h(String), 127.0.0.1(String), 2019-04-06 14:37:10.032(Timestamp)
2019-04-06 14:37:10 -<==    Updates: 1
2019-04-06 14:37:10 -请求地址 : http://localhost:8081/main
2019-04-06 14:37:10 -HTTP METHOD : GET
2019-04-06 14:37:10 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-06 14:37:10 -参数 : []
2019-04-06 14:37:10 -耗时 : 1
2019-04-06 14:37:10 -返回值 : main
2019-04-06 14:37:10 -请求地址 : http://localhost:8081/oa/notify/message
2019-04-06 14:37:10 -HTTP METHOD : GET
2019-04-06 14:37:10 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2019-04-06 14:37:10 -参数 : []
2019-04-06 14:37:10 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2019-04-06 14:37:10 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2019-04-06 14:37:10 -<==      Total: 0
2019-04-06 14:37:10 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2019-04-06 14:37:10 -==> Parameters: 1(Long), 0(String)
2019-04-06 14:37:10 -<==      Total: 1
2019-04-06 14:37:10 -耗时 : 19
2019-04-06 14:37:10 -返回值 : com.bootdo.common.utils.PageUtils@7c6c56c8
2019-04-06 14:37:10 -请求地址 : http://localhost:8081/main
2019-04-06 14:37:10 -HTTP METHOD : GET
2019-04-06 14:37:10 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-06 14:37:10 -参数 : []
2019-04-06 14:37:10 -耗时 : 1
2019-04-06 14:37:10 -返回值 : main
2019-04-06 14:37:15 -==>  Preparing: select distinct m.perms from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id = ur.role_id where ur.user_id = ? 
2019-04-06 14:37:15 -==> Parameters: 1(Long)
2019-04-06 14:37:15 -<==      Total: 90
2019-04-06 14:37:15 -请求地址 : http://localhost:8081/moneyLog/elecLog
2019-04-06 14:37:15 -HTTP METHOD : GET
2019-04-06 14:37:15 -CLASS_METHOD : com.bootdo.moneyLog.controller.ElecLogController.moneyLog
2019-04-06 14:37:15 -参数 : []
2019-04-06 14:37:15 -耗时 : 0
2019-04-06 14:37:15 -返回值 : /moneyLog/elecLog/elecLog
2019-04-06 14:37:16 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-06 14:37:16 -HTTP METHOD : GET
2019-04-06 14:37:16 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-06 14:37:16 -参数 : [userType]
2019-04-06 14:37:16 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-06 14:37:16 -==> Parameters: userType(String)
2019-04-06 14:37:16 -<==      Total: 2
2019-04-06 14:37:16 -耗时 : 9
2019-04-06 14:37:16 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-06 14:37:16 -请求地址 : http://localhost:8081/moneyLog/elecLog/list
2019-04-06 14:37:16 -HTTP METHOD : GET
2019-04-06 14:37:16 -CLASS_METHOD : com.bootdo.moneyLog.controller.ElecLogController.list
2019-04-06 14:37:16 -参数 : [{limit=10, offset=0, userType=, userOrg=, userId=, elecDate=}]
2019-04-06 14:37:16 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`elec_type`,`elec_money`,`elec_date`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec_log order by id asc limit ?, ? 
2019-04-06 14:37:16 -==> Parameters: 0(Integer), 10(Integer)
2019-04-06 14:37:16 -<==      Total: 7
2019-04-06 14:37:16 -==>  Preparing: select count(*) from elec_log 
2019-04-06 14:37:16 -==> Parameters: 
2019-04-06 14:37:16 -<==      Total: 1
2019-04-06 14:37:16 -耗时 : 11
2019-04-06 14:37:16 -返回值 : com.bootdo.common.utils.PageUtils@c3f595f
2019-04-06 14:37:18 -请求地址 : http://localhost:8081/moneyLog/waterLog
2019-04-06 14:37:18 -HTTP METHOD : GET
2019-04-06 14:37:18 -CLASS_METHOD : com.bootdo.moneyLog.controller.WaterLogController.WaterLog
2019-04-06 14:37:18 -参数 : []
2019-04-06 14:37:18 -耗时 : 2
2019-04-06 14:37:18 -返回值 : /moneyLog/waterLog/waterLog
2019-04-06 14:37:18 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-06 14:37:18 -HTTP METHOD : GET
2019-04-06 14:37:18 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-06 14:37:18 -参数 : [userType]
2019-04-06 14:37:18 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-06 14:37:18 -==> Parameters: userType(String)
2019-04-06 14:37:18 -<==      Total: 2
2019-04-06 14:37:18 -耗时 : 6
2019-04-06 14:37:18 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-06 14:37:18 -请求地址 : http://localhost:8081/moneyLog/waterLog/list
2019-04-06 14:37:18 -HTTP METHOD : GET
2019-04-06 14:37:18 -CLASS_METHOD : com.bootdo.moneyLog.controller.WaterLogController.list
2019-04-06 14:37:18 -参数 : [{limit=10, offset=0, userType=, userOrg=, userId=, waterDate=}]
2019-04-06 14:37:18 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,`water_type`,`water_money`,`water_date`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from water_log order by id asc limit ?, ? 
2019-04-06 14:37:18 -==> Parameters: 0(Integer), 10(Integer)
2019-04-06 14:37:18 -<==      Total: 5
2019-04-06 14:37:18 -==>  Preparing: select count(*) from water_log 
2019-04-06 14:37:18 -==> Parameters: 
2019-04-06 14:37:18 -<==      Total: 1
2019-04-06 14:37:18 -耗时 : 15
2019-04-06 14:37:18 -返回值 : com.bootdo.common.utils.PageUtils@4fbf36fb
2019-04-06 14:37:19 -请求地址 : http://localhost:8081/moneyLog/waterLog/edit/5
2019-04-06 14:37:19 -HTTP METHOD : GET
2019-04-06 14:37:19 -CLASS_METHOD : com.bootdo.moneyLog.controller.WaterLogController.edit
2019-04-06 14:37:19 -参数 : [5, {}]
2019-04-06 14:37:19 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,`water_type`,`water_money`,`water_date`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from water_log where id = ? 
2019-04-06 14:37:19 -==> Parameters: 5(Long)
2019-04-06 14:37:19 -<==      Total: 1
2019-04-06 14:37:19 -耗时 : 23
2019-04-06 14:37:19 -返回值 : moneyLog/waterLog/edit
2019-04-06 14:37:19 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-06 14:37:19 -HTTP METHOD : GET
2019-04-06 14:37:19 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-06 14:37:19 -参数 : [userType]
2019-04-06 14:37:19 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-06 14:37:19 -==> Parameters: userType(String)
2019-04-06 14:37:19 -请求地址 : http://localhost:8081/common/dict/list/waterType
2019-04-06 14:37:19 -HTTP METHOD : GET
2019-04-06 14:37:19 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-06 14:37:19 -参数 : [waterType]
2019-04-06 14:37:19 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-06 14:37:19 -==> Parameters: waterType(String)
2019-04-06 14:37:19 -<==      Total: 2
2019-04-06 14:37:19 -耗时 : 8
2019-04-06 14:37:19 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-06 14:37:19 -<==      Total: 6
2019-04-06 14:37:19 -耗时 : 12
2019-04-06 14:37:19 -返回值 : [DictDO{id=132, name='特殊水费4', value='5', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=131, name='特殊水费3', value='4', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=130, name='特殊水费2', value='3', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=129, name='特殊水费1', value='2', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=128, name='民用水', value='1', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=127, name='商业水', value='0', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-06 14:37:21 -请求地址 : http://localhost:8081/moneyLog/waterLog/update
2019-04-06 14:37:21 -HTTP METHOD : POST
2019-04-06 14:37:21 -CLASS_METHOD : com.bootdo.moneyLog.controller.WaterLogController.update
2019-04-06 14:37:21 -参数 : [com.bootdo.moneyLog.domain.WaterLogDO@3ff2b4d5]
2019-04-06 14:37:21 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-06 14:37:21 -==> Parameters: 1(Long), admin(String), error(String), null, http://localhost:8081/moneyLog/waterLog/update(String), org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.exceptions.PersistenceException: 
### Error updating database.  Cause: java.lang.IllegalArgumentException: invalid comparison: java.util.Date and java.lang.String
### Cause: java.lang.IllegalArgumentException: invalid comparison: java.util.Date and java.lang.String(String), null, 2019-04-06 14:37:21.369(Timestamp)
2019-04-06 14:37:21 -nested exception is org.apache.ibatis.exceptions.PersistenceException: 
### Error updating database.  Cause: java.lang.IllegalArgumentException: invalid comparison: java.util.Date and java.lang.String
### Cause: java.lang.IllegalArgumentException: invalid comparison: java.util.Date and java.lang.String
org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.exceptions.PersistenceException: 
### Error updating database.  Cause: java.lang.IllegalArgumentException: invalid comparison: java.util.Date and java.lang.String
### Cause: java.lang.IllegalArgumentException: invalid comparison: java.util.Date and java.lang.String
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:79)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:447)
	at com.sun.proxy.$Proxy101.update(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.update(SqlSessionTemplate.java:295)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:62)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy104.update(Unknown Source)
	at com.bootdo.moneyLog.service.impl.WaterLogServiceImpl.update(WaterLogServiceImpl.java:39)
	at com.bootdo.moneyLog.controller.WaterLogController.update(WaterLogController.java:226)
	at com.bootdo.moneyLog.controller.WaterLogController$$FastClassBySpringCGLIB$$3a5e3635.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:204)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:746)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.bootdo.common.aspect.WebLogAspect.doAround(WebLogAspect.java:57)
	at sun.reflect.GeneratedMethodAccessor128.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.apache.shiro.spring.security.interceptor.AopAllianceAnnotationsAuthorizingMethodInterceptor$1.proceed(AopAllianceAnnotationsAuthorizingMethodInterceptor.java:82)
	at org.apache.shiro.authz.aop.AuthorizingMethodInterceptor.invoke(AuthorizingMethodInterceptor.java:39)
	at org.apache.shiro.spring.security.interceptor.AopAllianceAnnotationsAuthorizingMethodInterceptor.invoke(AopAllianceAnnotationsAuthorizingMethodInterceptor.java:115)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.bootdo.moneyLog.controller.WaterLogController$$EnhancerBySpringCGLIB$$d0479c88.update(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:209)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:877)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:783)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:991)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:925)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:974)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:877)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:661)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:851)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:61)
	at org.apache.shiro.web.servlet.AdviceFilter.executeChain(AdviceFilter.java:108)
	at org.apache.shiro.web.servlet.AdviceFilter.doFilterInternal(AdviceFilter.java:137)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:66)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)
	at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)
	at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)
	at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)
	at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:383)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:109)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:496)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:790)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1468)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Unknown Source)
Caused by: org.apache.ibatis.exceptions.PersistenceException: 
### Error updating database.  Cause: java.lang.IllegalArgumentException: invalid comparison: java.util.Date and java.lang.String
### Cause: java.lang.IllegalArgumentException: invalid comparison: java.util.Date and java.lang.String
	at org.apache.ibatis.exceptions.ExceptionFactory.wrapException(ExceptionFactory.java:30)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:200)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:434)
	... 103 common frames omitted
Caused by: java.lang.IllegalArgumentException: invalid comparison: java.util.Date and java.lang.String
	at org.apache.ibatis.ognl.OgnlOps.compareWithConversion(OgnlOps.java:93)
	at org.apache.ibatis.ognl.OgnlOps.isEqual(OgnlOps.java:143)
	at org.apache.ibatis.ognl.OgnlOps.equal(OgnlOps.java:802)
	at org.apache.ibatis.ognl.ASTNotEq.getValueBody(ASTNotEq.java:53)
	at org.apache.ibatis.ognl.SimpleNode.evaluateGetValueBody(SimpleNode.java:212)
	at org.apache.ibatis.ognl.SimpleNode.getValue(SimpleNode.java:258)
	at org.apache.ibatis.ognl.ASTAnd.getValueBody(ASTAnd.java:61)
	at org.apache.ibatis.ognl.SimpleNode.evaluateGetValueBody(SimpleNode.java:212)
	at org.apache.ibatis.ognl.SimpleNode.getValue(SimpleNode.java:258)
	at org.apache.ibatis.ognl.Ognl.getValue(Ognl.java:470)
	at org.apache.ibatis.ognl.Ognl.getValue(Ognl.java:434)
	at org.apache.ibatis.scripting.xmltags.OgnlCache.getValue(OgnlCache.java:44)
	at org.apache.ibatis.scripting.xmltags.ExpressionEvaluator.evaluateBoolean(ExpressionEvaluator.java:32)
	at org.apache.ibatis.scripting.xmltags.IfSqlNode.apply(IfSqlNode.java:34)
	at org.apache.ibatis.scripting.xmltags.MixedSqlNode.apply(MixedSqlNode.java:33)
	at org.apache.ibatis.scripting.xmltags.TrimSqlNode.apply(TrimSqlNode.java:55)
	at org.apache.ibatis.scripting.xmltags.MixedSqlNode.apply(MixedSqlNode.java:33)
	at org.apache.ibatis.scripting.xmltags.DynamicSqlSource.getBoundSql(DynamicSqlSource.java:41)
	at org.apache.ibatis.mapping.MappedStatement.getBoundSql(MappedStatement.java:292)
	at org.apache.ibatis.executor.statement.BaseStatementHandler.<init>(BaseStatementHandler.java:64)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.<init>(PreparedStatementHandler.java:40)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.<init>(RoutingStatementHandler.java:46)
	at org.apache.ibatis.session.Configuration.newStatementHandler(Configuration.java:545)
	at org.apache.ibatis.executor.SimpleExecutor.doUpdate(SimpleExecutor.java:48)
	at org.apache.ibatis.executor.BaseExecutor.update(BaseExecutor.java:117)
	at org.apache.ibatis.executor.CachingExecutor.update(CachingExecutor.java:76)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:198)
	... 108 common frames omitted
2019-04-06 14:37:21 -<==    Updates: 1
2019-04-06 14:37:36 -Failed to invoke @ExceptionHandler method: public java.lang.Object com.bootdo.common.exception.BDExceptionHandler.handleException(java.lang.Exception,javax.servlet.http.HttpServletRequest)
org.apache.shiro.UnavailableSecurityManagerException: No SecurityManager accessible to the calling code, either bound to the org.apache.shiro.util.ThreadContext or as a vm static singleton.  This is an invalid application configuration.
	at org.apache.shiro.SecurityUtils.getSecurityManager(SecurityUtils.java:123)
	at org.apache.shiro.subject.Subject$Builder.<init>(Subject.java:627)
	at org.apache.shiro.SecurityUtils.getSubject(SecurityUtils.java:56)
	at com.bootdo.common.utils.ShiroUtils.getSubjct(ShiroUtils.java:23)
	at com.bootdo.common.utils.ShiroUtils.getUser(ShiroUtils.java:26)
	at com.bootdo.common.exception.BDExceptionHandler.handleException(BDExceptionHandler.java:75)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:209)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver.doResolveHandlerMethodException(ExceptionHandlerExceptionResolver.java:404)
	at org.springframework.web.servlet.handler.AbstractHandlerMethodExceptionResolver.doResolveException(AbstractHandlerMethodExceptionResolver.java:61)
	at org.springframework.web.servlet.handler.AbstractHandlerExceptionResolver.resolveException(AbstractHandlerExceptionResolver.java:139)
	at org.springframework.web.servlet.handler.HandlerExceptionResolverComposite.resolveException(HandlerExceptionResolverComposite.java:78)
	at org.springframework.web.servlet.DispatcherServlet.processHandlerException(DispatcherServlet.java:1255)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1062)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1008)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:925)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:974)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:877)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:661)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:851)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:728)
	at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:591)
	at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:527)
	at org.apache.catalina.core.StandardHostValve.custom(StandardHostValve.java:389)
	at org.apache.catalina.core.StandardHostValve.status(StandardHostValve.java:254)
	at org.apache.catalina.core.StandardHostValve.throwable(StandardHostValve.java:349)
	at org.apache.catalina.core.AsyncContextImpl.setErrorState(AsyncContextImpl.java:424)
	at org.apache.catalina.connector.CoyoteAdapter.asyncDispatch(CoyoteAdapter.java:176)
	at org.apache.coyote.AbstractProcessor.dispatch(AbstractProcessor.java:232)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:53)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:790)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1468)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Unknown Source)
2019-04-06 14:42:51 -Starting BootdoApplication on ZJZL-20180906VX with PID 2948 (D:\eclipse2018-work\bootdo\target\classes started by Administrator in D:\eclipse2018-work\bootdo)
2019-04-06 14:42:51 -Running with Spring Boot v2.0.3.RELEASE, Spring v5.0.7.RELEASE
2019-04-06 14:42:51 -The following profiles are active: dev
2019-04-06 14:42:51 -Refreshing org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@1c7fd41f: startup date [Sat Apr 06 14:42:51 CST 2019]; root of context hierarchy
2019-04-06 14:42:57 -Multiple Spring Data modules found, entering strict repository configuration mode!
2019-04-06 14:43:01 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$f2f416db] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-06 14:43:01 -Bean 'shiroConfig' of type [com.bootdo.system.config.ShiroConfig$$EnhancerBySpringCGLIB$$e54d4582] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-06 14:43:03 -Bean 'userRealm' of type [com.bootdo.system.shiro.UserRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-06 14:43:04 -Bean 'cacheManager2' of type [net.sf.ehcache.CacheManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-06 14:43:04 -Bean 'ehCacheManager' of type [org.apache.shiro.cache.ehcache.EhCacheManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-06 14:43:04 -Cache with name 'com.bootdo.system.shiro.UserRealm.authorizationCache' does not yet exist.  Creating now.
2019-04-06 14:43:04 -Added EhCache named [com.bootdo.system.shiro.UserRealm.authorizationCache]
2019-04-06 14:43:04 -Bean 'sessionDAO' of type [org.apache.shiro.session.mgt.eis.MemorySessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-06 14:43:04 -Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-06 14:43:04 -Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-06 14:43:04 -Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-06 14:43:06 -Tomcat initialized with port(s): 8081 (http)
2019-04-06 14:43:06 -Initializing ProtocolHandler ["http-nio-8081"]
2019-04-06 14:43:06 -Starting service [Tomcat]
2019-04-06 14:43:06 -Starting Servlet Engine: Apache Tomcat/8.5.31
2019-04-06 14:43:06 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [C:\Program Files\Java\jre1.8.0_131\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:/Program Files/Java/jre1.8.0_131/bin/server;C:/Program Files/Java/jre1.8.0_131/bin;C:/Program Files/Java/jre1.8.0_131/lib/amd64;C:\ProgramData\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Windows\System32\OpenSSH\;D:\pbb\pycSafefile\x64;D:\pbb\PBB Reader\x64;C:\Program Files\MySQL\MySQL Utilities 1.6\;D:\MAVEN\apache-maven-3.6.0\bin;D:\GIT\Git\cmd;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;;C:\Users\Administrator\Desktop;;.]
2019-04-06 14:43:07 -Initializing Spring embedded WebApplicationContext
2019-04-06 14:43:07 -Root WebApplicationContext: initialization completed in 15649 ms
2019-04-06 14:43:08 -Mapping filter: 'characterEncodingFilter' to: [/*]
2019-04-06 14:43:08 -Mapping filter: 'hiddenHttpMethodFilter' to: [/*]
2019-04-06 14:43:08 -Mapping filter: 'httpPutFormContentFilter' to: [/*]
2019-04-06 14:43:08 -Mapping filter: 'requestContextFilter' to: [/*]
2019-04-06 14:43:08 -Filter xssFilter was not registered (disabled)
2019-04-06 14:43:08 -Mapping filter: 'webStatFilter' to urls: [/*]
2019-04-06 14:43:08 -Mapping filter: 'shiroFilterFactoryBean' to: [/*]
2019-04-06 14:43:08 -Servlet statViewServlet mapped to [/druid/*]
2019-04-06 14:43:08 -Servlet dispatcherServlet mapped to [/]
2019-04-06 14:43:14 -ApplicationContext registed-->org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@1c7fd41f: startup date [Sat Apr 06 14:42:51 CST 2019]; root of context hierarchy
2019-04-06 14:43:15 -Using default implementation for ThreadExecutor
2019-04-06 14:43:15 -Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2019-04-06 14:43:15 -Quartz Scheduler v.2.2.1 created.
2019-04-06 14:43:15 -RAMJobStore initialized.
2019-04-06 14:43:15 -Scheduler meta-data: Quartz Scheduler (v2.2.1) 'schedulerFactoryBean' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2019-04-06 14:43:15 -Quartz scheduler 'schedulerFactoryBean' initialized from an externally provided properties instance.
2019-04-06 14:43:15 -Quartz scheduler version: 2.2.1
2019-04-06 14:43:15 -JobFactory set to: com.bootdo.common.quartz.factory.JobFactory@2697c156
2019-04-06 14:43:16 -Initializing ExecutorService  'clientInboundChannelExecutor'
2019-04-06 14:43:16 -Initializing ExecutorService  'clientOutboundChannelExecutor'
2019-04-06 14:43:20 -Mapped "{[/charts/countDD/tableDD],methods=[POST]}" onto public java.lang.String com.bootdo.charts.controller.countDDController.tableDD()
2019-04-06 14:43:20 -Mapped "{[/charts/countDD/exportCountDD],methods=[GET]}" onto public void com.bootdo.charts.controller.countDDController.exprotElecLog(com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-06 14:43:20 -Mapped "{[/charts/countDD],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.countDDController.countDD()
2019-04-06 14:43:20 -Mapped "{[/charts/countDD/getCountDD],methods=[POST]}" onto public com.bootdo.charts.vo.CountDayVo com.bootdo.charts.controller.countDDController.getCountD(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo,javax.servlet.http.HttpServletRequest)
2019-04-06 14:43:20 -Mapped "{[/charts/countMM/exportCountMM],methods=[GET]}" onto public void com.bootdo.charts.controller.countMMController.exprotElecLog(com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-06 14:43:20 -Mapped "{[/charts/countMM],methods=[GET]}" onto java.lang.String com.bootdo.charts.controller.countMMController.countMM()
2019-04-06 14:43:20 -Mapped "{[/charts/countMM/getCountMM],methods=[POST]}" onto public void com.bootdo.charts.controller.countMMController.getCountMM(org.springframework.ui.Model,com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo,javax.servlet.http.HttpServletRequest)
2019-04-06 14:43:20 -Mapped "{[/charts/countOwe/getCountOwe],methods=[POST]}" onto public com.bootdo.charts.vo.CountOweVo com.bootdo.charts.controller.countOweController.getCountD(com.bootdo.elec.vo.ElecVo,com.bootdo.water.vo.WaterVo,com.bootdo.heat.vo.HeatVo,javax.servlet.http.HttpServletRequest)
2019-04-06 14:43:20 -Mapped "{[/charts/countOwe],methods=[GET]}" onto java.lang.String com.bootdo.charts.controller.countOweController.countOwe()
2019-04-06 14:43:20 -Mapped "{[/charts/countRun/exportCountRun],methods=[GET]}" onto public void com.bootdo.charts.controller.countRunController.exprotElecLog(com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-06 14:43:20 -Mapped "{[/charts/countRun/getCountRun],methods=[POST]}" onto public int com.bootdo.charts.controller.countRunController.getCountD(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo)
2019-04-06 14:43:20 -Mapped "{[/charts/countRun],methods=[GET]}" onto java.lang.String com.bootdo.charts.controller.countRunController.countRun()
2019-04-06 14:43:20 -Mapped "{[/charts/countYY/exportCountYY],methods=[GET]}" onto public void com.bootdo.charts.controller.countYYController.exprotElecLog(com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-06 14:43:20 -Mapped "{[/charts/countYY/getCountYY],methods=[POST]}" onto public int com.bootdo.charts.controller.countYYController.getCountD(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo)
2019-04-06 14:43:20 -Mapped "{[/charts/countYY],methods=[GET]}" onto java.lang.String com.bootdo.charts.controller.countYYController.countYY()
2019-04-06 14:43:20 -Mapped "{[/common/dict/add],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.add()
2019-04-06 14:43:20 -Mapped "{[/common/dict/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.remove(java.lang.Long)
2019-04-06 14:43:20 -Mapped "{[/common/dict/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.remove(java.lang.Long[])
2019-04-06 14:43:20 -Mapped "{[/common/dict/update]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.update(com.bootdo.common.domain.DictDO)
2019-04-06 14:43:20 -Mapped "{[/common/dict/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.common.controller.DictController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-06 14:43:20 -Mapped "{[/common/dict/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.save(com.bootdo.common.domain.DictDO)
2019-04-06 14:43:20 -Mapped "{[/common/dict/type],methods=[GET]}" onto public java.util.List<com.bootdo.common.domain.DictDO> com.bootdo.common.controller.DictController.listType()
2019-04-06 14:43:20 -Mapped "{[/common/dict/list/{type}],methods=[GET]}" onto public java.util.List<com.bootdo.common.domain.DictDO> com.bootdo.common.controller.DictController.listByType(java.lang.String)
2019-04-06 14:43:20 -Mapped "{[/common/dict/add/{type}/{description}],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.addD(org.springframework.ui.Model,java.lang.String,java.lang.String)
2019-04-06 14:43:20 -Mapped "{[/common/dict],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.dict()
2019-04-06 14:43:20 -Mapped "{[/common/dict/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-06 14:43:20 -Mapped "{[/common/sysFile/add],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.FileController.add()
2019-04-06 14:43:20 -Mapped "{[/common/sysFile/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.remove(java.lang.Long,javax.servlet.http.HttpServletRequest)
2019-04-06 14:43:20 -Mapped "{[/common/sysFile/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.remove(java.lang.Long[])
2019-04-06 14:43:20 -Mapped "{[/common/sysFile/update]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.update(com.bootdo.common.domain.FileDO)
2019-04-06 14:43:20 -Mapped "{[/common/sysFile/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.common.controller.FileController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-06 14:43:20 -Mapped "{[/common/sysFile/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.save(com.bootdo.common.domain.FileDO)
2019-04-06 14:43:20 -Mapped "{[/common/sysFile/info/{id}]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.info(java.lang.Long)
2019-04-06 14:43:20 -Mapped "{[/common/sysFile/upload],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.FileController.upload(org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpServletRequest)
2019-04-06 14:43:20 -Mapped "{[/common/sysFile],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.FileController.sysFile(org.springframework.ui.Model)
2019-04-06 14:43:20 -Mapped "{[/common/sysFile/edit],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.FileController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-06 14:43:20 -Mapped "{[/common/generator/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.GeneratorController.update(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-06 14:43:20 -Mapped "{[/common/generator/list],methods=[GET]}" onto java.util.List<java.util.Map<java.lang.String, java.lang.Object>> com.bootdo.common.controller.GeneratorController.list()
2019-04-06 14:43:20 -Mapped "{[/common/generator/code/{tableName}]}" onto public void com.bootdo.common.controller.GeneratorController.code(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String) throws java.io.IOException
2019-04-06 14:43:20 -Mapped "{[/common/generator],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.GeneratorController.generator()
2019-04-06 14:43:20 -Mapped "{[/common/generator/batchCode]}" onto public void com.bootdo.common.controller.GeneratorController.batchCode(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String) throws java.io.IOException
2019-04-06 14:43:20 -Mapped "{[/common/generator/edit],methods=[GET]}" onto public java.lang.String com.bootdo.common.controller.GeneratorController.edit(org.springframework.ui.Model)
2019-04-06 14:43:20 -Mapped "{[/common/job/add],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.JobController.add()
2019-04-06 14:43:20 -Mapped "{[/common/job/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.remove(java.lang.Long)
2019-04-06 14:43:20 -Mapped "{[/common/job/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.remove(java.lang.Long[])
2019-04-06 14:43:20 -Mapped "{[/common/job/update],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.update(com.bootdo.common.domain.TaskDO)
2019-04-06 14:43:20 -Mapped "{[/common/job/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.common.controller.JobController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-06 14:43:20 -Mapped "{[/common/job/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.save(com.bootdo.common.domain.TaskDO)
2019-04-06 14:43:20 -Mapped "{[/common/job/info/{id}]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.info(java.lang.Long)
2019-04-06 14:43:20 -Mapped "{[/common/job],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.JobController.taskScheduleJob()
2019-04-06 14:43:20 -Mapped "{[/common/job/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.JobController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-06 14:43:20 -Mapped "{[/common/job/changeJobStatus],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.changeJobStatus(java.lang.Long,java.lang.String)
2019-04-06 14:43:20 -Mapped "{[/common/log/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.LogController.remove(java.lang.Long)
2019-04-06 14:43:20 -Mapped "{[/common/log],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.LogController.log()
2019-04-06 14:43:20 -Mapped "{[/common/log/list],methods=[GET]}" onto com.bootdo.common.domain.PageDO<com.bootdo.common.domain.LogDO> com.bootdo.common.controller.LogController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-06 14:43:20 -Mapped "{[/common/log/batchRemove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.LogController.batchRemove(java.lang.Long[])
2019-04-06 14:43:20 -Mapped "{[/common/long],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.LongController.Long()
2019-04-06 14:43:20 -Mapped "{[/common/time],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.TimeController.Time()
2019-04-06 14:43:20 -Mapped "{[/error]}" onto public com.bootdo.common.utils.R com.bootdo.common.exception.MainsiteErrorController.handleError(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-04-06 14:43:20 -Mapped "{[/error],produces=[text/html]}" onto public org.springframework.web.servlet.ModelAndView com.bootdo.common.exception.MainsiteErrorController.errorHtml(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-04-06 14:43:20 -Mapped "{[/elec/elec/add],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecController.add()
2019-04-06 14:43:20 -Mapped "{[/elec/elec/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.remove(java.lang.Long)
2019-04-06 14:43:20 -Mapped "{[/elec/elec/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.remove(java.lang.Long[])
2019-04-06 14:43:20 -Mapped "{[/elec/elec/update],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.update(com.bootdo.elec.domain.ElecDO)
2019-04-06 14:43:20 -Mapped "{[/elec/elec/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.elec.controller.ElecController.list(java.util.Map<java.lang.String, java.lang.Object>,com.bootdo.elec.domain.ElecDO)
2019-04-06 14:43:20 -Mapped "{[/elec/elec/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.save(com.bootdo.elec.domain.ElecDO)
2019-04-06 14:43:20 -Mapped "{[/elec/elec/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-06 14:43:20 -Mapped "{[/elec/elec],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecController.Elec()
2019-04-06 14:43:20 -Mapped "{[/elec/elec/exprotElec],methods=[GET]}" onto public void com.bootdo.elec.controller.ElecController.exprotExcel(com.bootdo.elec.vo.ElecVo,javax.servlet.http.HttpServletResponse)
2019-04-06 14:43:20 -Mapped "{[/elec/elecInto/importElecIntoExcel],methods=[POST]}" onto public java.util.Map<java.lang.String, java.lang.Object> com.bootdo.elec.controller.ElecIntoController.importElecIntoExcel(org.springframework.web.multipart.MultipartFile,com.bootdo.elec.vo.ElecVo) throws java.lang.Exception
2019-04-06 14:43:20 -Mapped "{[/elec/elecInto/exprotElecIntoExcel],methods=[GET]}" onto public void com.bootdo.elec.controller.ElecIntoController.exprotExcel(com.bootdo.elec.vo.ElecVo,javax.servlet.http.HttpServletResponse)
2019-04-06 14:43:20 -Mapped "{[/elec/elecInto],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecIntoController.ElecInto()
2019-04-06 14:43:20 -Mapped "{[/elec/elecPrice/add],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecPriceController.add()
2019-04-06 14:43:20 -Mapped "{[/elec/elecPrice/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecPriceController.remove(java.lang.Long)
2019-04-06 14:43:20 -Mapped "{[/elec/elecPrice/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecPriceController.remove(java.lang.Long[])
2019-04-06 14:43:20 -Mapped "{[/elec/elecPrice/update]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecPriceController.update(com.bootdo.elec.domain.ElecPriceDO)
2019-04-06 14:43:20 -Mapped "{[/elec/elecPrice/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.elec.controller.ElecPriceController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-06 14:43:20 -Mapped "{[/elec/elecPrice/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecPriceController.save(com.bootdo.elec.domain.ElecPriceDO,com.bootdo.elec.domain.ElecDO)
2019-04-06 14:43:20 -Mapped "{[/elec/elecPrice/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecPriceController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-06 14:43:20 -Mapped "{[/elec/elecPrice],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecPriceController.ElecPrice()
2019-04-06 14:43:20 -Mapped "{[/elec/elecUpLoad],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecUpLoadController.Elec()
2019-04-06 14:43:20 -Mapped "{[/elec/elecUpLoad/importElecExcel],methods=[POST]}" onto public java.util.Map<java.lang.String, java.lang.Object> com.bootdo.elec.controller.ElecUpLoadController.importElecExcel(org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpServletRequest) throws java.lang.Exception
2019-04-06 14:43:20 -Mapped "{[/heat/heat/add],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatController.add()
2019-04-06 14:43:20 -Mapped "{[/heat/heat/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatController.remove(java.lang.Integer)
2019-04-06 14:43:20 -Mapped "{[/heat/heat/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatController.remove(java.lang.Integer[])
2019-04-06 14:43:20 -Mapped "{[/heat/heat/update]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatController.update(com.bootdo.heat.domain.HeatDO)
2019-04-06 14:43:20 -Mapped "{[/heat/heat/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.heat.controller.HeatController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-06 14:43:20 -Mapped "{[/heat/heat/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatController.save(com.bootdo.heat.domain.HeatDO)
2019-04-06 14:43:20 -Mapped "{[/heat/heat/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatController.edit(java.lang.Integer,org.springframework.ui.Model)
2019-04-06 14:43:20 -Mapped "{[/heat/heat/exprotHeat],methods=[GET]}" onto public void com.bootdo.heat.controller.HeatController.exprotExcel(com.bootdo.heat.vo.HeatVo,javax.servlet.http.HttpServletResponse)
2019-04-06 14:43:20 -Mapped "{[/heat/heat],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatController.Heat()
2019-04-06 14:43:20 -Mapped "{[/heat/heatInto/exprotHeatIntoExcel],methods=[GET]}" onto public void com.bootdo.heat.controller.HeatIntoController.exprotExcel(com.bootdo.heat.vo.HeatVo,javax.servlet.http.HttpServletResponse)
2019-04-06 14:43:20 -Mapped "{[/heat/heatInto],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatIntoController.HeatInto()
2019-04-06 14:43:20 -Mapped "{[/heat/heatPrice/add],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatPriceController.add()
2019-04-06 14:43:20 -Mapped "{[/heat/heatPrice/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatPriceController.remove(java.lang.Long)
2019-04-06 14:43:20 -Mapped "{[/heat/heatPrice/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatPriceController.remove(java.lang.Long[])
2019-04-06 14:43:20 -Mapped "{[/heat/heatPrice/update]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatPriceController.update(com.bootdo.heat.domain.HeatPriceDO)
2019-04-06 14:43:20 -Mapped "{[/heat/heatPrice/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.heat.controller.HeatPriceController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-06 14:43:20 -Mapped "{[/heat/heatPrice/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatPriceController.save(com.bootdo.heat.domain.HeatPriceDO)
2019-04-06 14:43:20 -Mapped "{[/heat/heatPrice/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatPriceController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-06 14:43:20 -Mapped "{[/heat/heatPrice],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatPriceController.HeatPrice()
2019-04-06 14:43:20 -Mapped "{[/heat/heatUpLoad],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatUpLoadController.HeatUpLoad()
2019-04-06 14:43:20 -Mapped "{[/heat/heatUpLoad/createHeatExcel],methods=[POST]}" onto public java.lang.String com.bootdo.heat.controller.HeatUpLoadController.createHeatExcel(com.bootdo.heat.domain.HeatDO) throws java.lang.Exception
2019-04-06 14:43:20 -Mapped "{[/heat/heatUpLoad/exprotHeatExcel],methods=[GET]}" onto public void com.bootdo.heat.controller.HeatUpLoadController.exprotHeatExcel(com.bootdo.heat.vo.HeatVo,javax.servlet.http.HttpServletResponse)
2019-04-06 14:43:20 -Mapped "{[/heat/heatUpLoad/importHeatExcel]}" onto public java.lang.String com.bootdo.heat.controller.HeatUpLoadController.importHeatExcel(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)
2019-04-06 14:43:20 -Mapped "{[/moneyList/moneyList],methods=[GET]}" onto java.lang.String com.bootdo.moneyList.controller.MoneyListController.MoneyList()
2019-04-06 14:43:20 -Mapped "{[/moneyList/moneyList/queryAllUser],methods=[POST]}" onto public java.util.List<com.bootdo.moneyList.damain.MoneyListDO> com.bootdo.moneyList.controller.MoneyListController.queryAllUser(com.bootdo.moneyList.damain.MoneyListDO)
2019-04-06 14:43:20 -Mapped "{[/moneyList/moneyList/queryAllUserName],methods=[POST]}" onto public java.util.List<com.bootdo.moneyList.damain.MoneyListDO> com.bootdo.moneyList.controller.MoneyListController.getAllUserName(com.bootdo.moneyList.damain.MoneyListDO)
2019-04-06 14:43:20 -Mapped "{[/moneyList/moneyList/updateMoney],methods=[POST]}" onto public java.util.List<com.bootdo.moneyList.damain.MoneyListDO> com.bootdo.moneyList.controller.MoneyListController.updateMoney(com.bootdo.moneyList.damain.MoneyListDO)
2019-04-06 14:43:20 -Mapped "{[/moneyLog/elecLog/add],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.ElecLogController.add()
2019-04-06 14:43:20 -Mapped "{[/moneyLog/elecLog/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.ElecLogController.remove(java.lang.Long)
2019-04-06 14:43:20 -Mapped "{[/moneyLog/elecLog/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.ElecLogController.remove(java.lang.Long[])
2019-04-06 14:43:20 -Mapped "{[/moneyLog/elecLog/update]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.ElecLogController.update(com.bootdo.moneyLog.domain.ElecLogDO)
2019-04-06 14:43:20 -Mapped "{[/moneyLog/elecLog/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.moneyLog.controller.ElecLogController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-06 14:43:20 -Mapped "{[/moneyLog/elecLog/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.ElecLogController.save(com.bootdo.moneyLog.domain.ElecLogDO)
2019-04-06 14:43:20 -Mapped "{[/moneyLog/elecLog/exprotElecLog],methods=[GET]}" onto public void com.bootdo.moneyLog.controller.ElecLogController.exprotElecLog(com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-06 14:43:20 -Mapped "{[/moneyLog/elecLog/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.ElecLogController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-06 14:43:20 -Mapped "{[/moneyLog/elecLog],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.ElecLogController.moneyLog()
2019-04-06 14:43:20 -Mapped "{[/moneyLog/heatLog/add],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.HeatLogController.add()
2019-04-06 14:43:20 -Mapped "{[/moneyLog/heatLog/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.HeatLogController.remove(java.lang.Long)
2019-04-06 14:43:20 -Mapped "{[/moneyLog/heatLog/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.HeatLogController.remove(java.lang.Long[])
2019-04-06 14:43:20 -Mapped "{[/moneyLog/heatLog/update]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.HeatLogController.update(com.bootdo.moneyLog.domain.HeatLogDO)
2019-04-06 14:43:20 -Mapped "{[/moneyLog/heatLog/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.moneyLog.controller.HeatLogController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-06 14:43:20 -Mapped "{[/moneyLog/heatLog/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.HeatLogController.save(com.bootdo.moneyLog.domain.HeatLogDO)
2019-04-06 14:43:20 -Mapped "{[/moneyLog/heatLog/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.HeatLogController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-06 14:43:20 -Mapped "{[/moneyLog/heatLog],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.HeatLogController.HeatLog()
2019-04-06 14:43:20 -Mapped "{[/moneyLog/heatLog/exprotHeatLog],methods=[GET]}" onto public void com.bootdo.moneyLog.controller.HeatLogController.exprotHeatLog(com.bootdo.moneyLog.vo.HeatLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-06 14:43:20 -Mapped "{[/moneyLog/waterLog/add],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.WaterLogController.add()
2019-04-06 14:43:20 -Mapped "{[/moneyLog/waterLog/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.WaterLogController.remove(java.lang.Long)
2019-04-06 14:43:20 -Mapped "{[/moneyLog/waterLog/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.WaterLogController.remove(java.lang.Long[])
2019-04-06 14:43:20 -Mapped "{[/moneyLog/waterLog/update]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.WaterLogController.update(com.bootdo.moneyLog.domain.WaterLogDO)
2019-04-06 14:43:20 -Mapped "{[/moneyLog/waterLog/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.moneyLog.controller.WaterLogController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-06 14:43:20 -Mapped "{[/moneyLog/waterLog/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.WaterLogController.save(com.bootdo.moneyLog.domain.WaterLogDO)
2019-04-06 14:43:20 -Mapped "{[/moneyLog/waterLog/exprotWaterLog],methods=[GET]}" onto public void com.bootdo.moneyLog.controller.WaterLogController.exprotWaterLog(com.bootdo.moneyLog.vo.WaterLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-06 14:43:20 -Mapped "{[/moneyLog/waterLog],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.WaterLogController.WaterLog()
2019-04-06 14:43:20 -Mapped "{[/moneyLog/waterLog/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.WaterLogController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-06 14:43:20 -Mapped "{[/oa/notify/add],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.add()
2019-04-06 14:43:20 -Mapped "{[/oa/notify/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.remove(java.lang.Long)
2019-04-06 14:43:20 -Mapped "{[/oa/notify/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.remove(java.lang.Long[])
2019-04-06 14:43:20 -Mapped "{[/oa/notify/update]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.update(com.bootdo.oa.domain.NotifyDO)
2019-04-06 14:43:20 -Mapped "{[/oa/notify/read/{id}],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.read(java.lang.Long,org.springframework.ui.Model)
2019-04-06 14:43:20 -Mapped "{[/oa/notify/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.oa.controller.NotifyController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-06 14:43:20 -Mapped "{[/oa/notify/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.save(com.bootdo.oa.domain.NotifyDO)
2019-04-06 14:43:20 -Mapped "{[/oa/notify/message],methods=[GET]}" onto com.bootdo.common.utils.PageUtils com.bootdo.oa.controller.NotifyController.message()
2019-04-06 14:43:20 -Mapped "{[/oa/notify],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.oaNotify()
2019-04-06 14:43:20 -Mapped "{[/oa/notify/selfList],methods=[GET]}" onto com.bootdo.common.utils.PageUtils com.bootdo.oa.controller.NotifyController.selfList(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-06 14:43:20 -Mapped "{[/oa/notify/selfNotify],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.selefNotify()
2019-04-06 14:43:20 -Mapped "{[/oa/notify/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-06 14:43:20 -Mapped "{[/print/print/add],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.add()
2019-04-06 14:43:20 -Mapped "{[/print/print/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.print.controller.PrintController.remove(java.lang.Long)
2019-04-06 14:43:20 -Mapped "{[/print/print/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.print.controller.PrintController.remove(java.lang.Long[])
2019-04-06 14:43:20 -Mapped "{[/print/print/update]}" onto public com.bootdo.common.utils.R com.bootdo.print.controller.PrintController.update(com.bootdo.print.domain.PrintDO)
2019-04-06 14:43:20 -Mapped "{[/print/print/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.print.controller.PrintController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-06 14:43:20 -Mapped "{[/print/print/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.print.controller.PrintController.save(java.lang.String,com.bootdo.print.domain.PrintDO)
2019-04-06 14:43:20 -Mapped "{[/print/print],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.Print()
2019-04-06 14:43:20 -Mapped "{[/print/print/printEdit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.printEdit(java.lang.Long,org.springframework.ui.Model)
2019-04-06 14:43:20 -Mapped "{[/print/print/exprotPrint],methods=[GET]}" onto public void com.bootdo.print.controller.PrintController.exprotPrint(com.bootdo.print.vo.PrintVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-06 14:43:20 -Mapped "{[/print/print/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-06 14:43:20 -Mapped "{[/system/sysDept/add/{pId}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.add(java.lang.Long,org.springframework.ui.Model)
2019-04-06 14:43:20 -Mapped "{[/system/sysDept/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.remove(java.lang.Long)
2019-04-06 14:43:20 -Mapped "{[/system/sysDept/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.remove(java.lang.Long[])
2019-04-06 14:43:20 -Mapped "{[/system/sysDept/update]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.update(com.bootdo.system.domain.DeptDO)
2019-04-06 14:43:20 -Mapped "{[/system/sysDept/list],methods=[GET]}" onto public java.util.List<com.bootdo.system.domain.DeptDO> com.bootdo.system.controller.DeptController.list()
2019-04-06 14:43:21 -Mapped "{[/system/sysDept/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.save(com.bootdo.system.domain.DeptDO)
2019-04-06 14:43:21 -Mapped "{[/system/sysDept/tree],methods=[GET]}" onto public com.bootdo.common.domain.Tree<com.bootdo.system.domain.DeptDO> com.bootdo.system.controller.DeptController.tree()
2019-04-06 14:43:21 -Mapped "{[/system/sysDept],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.dept()
2019-04-06 14:43:21 -Mapped "{[/system/sysDept/treeView],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.treeView()
2019-04-06 14:43:21 -Mapped "{[/system/sysDept/edit/{deptId}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-06 14:43:21 -Mapped "{[/index],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.index(org.springframework.ui.Model)
2019-04-06 14:43:21 -Mapped "{[/main],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.main()
2019-04-06 14:43:21 -Mapped "{[/login],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.LoginController.ajaxLogin(java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest)
2019-04-06 14:43:21 -Mapped "{[/getVerify],methods=[GET]}" onto public void com.bootdo.system.controller.LoginController.getVerify(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-04-06 14:43:21 -Mapped "{[/logout],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.logout()
2019-04-06 14:43:21 -Mapped "{[/ || ],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.welcome(org.springframework.ui.Model)
2019-04-06 14:43:21 -Mapped "{[/login],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.login(org.springframework.ui.Model)
2019-04-06 14:43:21 -Mapped "{[/sys/menu/add/{pId}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.MenuController.add(org.springframework.ui.Model,java.lang.Long)
2019-04-06 14:43:21 -Mapped "{[/sys/menu/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.MenuController.remove(java.lang.Long)
2019-04-06 14:43:21 -Mapped "{[/sys/menu/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.MenuController.update(com.bootdo.system.domain.MenuDO)
2019-04-06 14:43:21 -Mapped "{[/sys/menu/list]}" onto java.util.List<com.bootdo.system.domain.MenuDO> com.bootdo.system.controller.MenuController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-06 14:43:21 -Mapped "{[/sys/menu/save],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.MenuController.save(com.bootdo.system.domain.MenuDO)
2019-04-06 14:43:21 -Mapped "{[/sys/menu/tree/{roleId}],methods=[GET]}" onto com.bootdo.common.domain.Tree<com.bootdo.system.domain.MenuDO> com.bootdo.system.controller.MenuController.tree(java.lang.Long)
2019-04-06 14:43:21 -Mapped "{[/sys/menu/tree],methods=[GET]}" onto com.bootdo.common.domain.Tree<com.bootdo.system.domain.MenuDO> com.bootdo.system.controller.MenuController.tree()
2019-04-06 14:43:21 -Mapped "{[/sys/menu],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.MenuController.menu(org.springframework.ui.Model)
2019-04-06 14:43:21 -Mapped "{[/sys/menu/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.MenuController.edit(org.springframework.ui.Model,java.lang.Long)
2019-04-06 14:43:21 -Mapped "{[/sys/role/add],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.RoleController.add()
2019-04-06 14:43:21 -Mapped "{[/sys/role/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.update(com.bootdo.system.domain.RoleDO)
2019-04-06 14:43:21 -Mapped "{[/sys/role/list],methods=[GET]}" onto java.util.List<com.bootdo.system.domain.RoleDO> com.bootdo.system.controller.RoleController.list()
2019-04-06 14:43:21 -Mapped "{[/sys/role/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.save(java.lang.Long)
2019-04-06 14:43:21 -Mapped "{[/sys/role/save],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.save(com.bootdo.system.domain.RoleDO)
2019-04-06 14:43:21 -Mapped "{[/sys/role/batchRemove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.batchRemove(java.lang.Long[])
2019-04-06 14:43:21 -Mapped "{[/sys/role],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.RoleController.role()
2019-04-06 14:43:21 -Mapped "{[/sys/role/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.RoleController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-06 14:43:21 -Mapped "{[/sys/online/list]}" onto public java.util.List<com.bootdo.system.domain.UserOnline> com.bootdo.system.controller.SessionController.list()
2019-04-06 14:43:21 -Mapped "{[/sys/online/sessionList]}" onto public java.util.Collection<org.apache.shiro.session.Session> com.bootdo.system.controller.SessionController.sessionList()
2019-04-06 14:43:21 -Mapped "{[/sys/online/forceLogout/{sessionId}]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.SessionController.forceLogout(java.lang.String,org.springframework.web.servlet.mvc.support.RedirectAttributes)
2019-04-06 14:43:21 -Mapped "{[/sys/online],methods=[GET]}" onto public java.lang.String com.bootdo.system.controller.SessionController.online()
2019-04-06 14:43:21 -Mapped "{[/sys/user/exit],methods=[POST]}" onto boolean com.bootdo.system.controller.UserController.exit(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-06 14:43:21 -Mapped "{[/sys/user/add],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.add(org.springframework.ui.Model)
2019-04-06 14:43:21 -Mapped "{[/sys/user/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.remove(java.lang.Long)
2019-04-06 14:43:21 -Mapped "{[/sys/user/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.update(com.bootdo.system.domain.UserDO)
2019-04-06 14:43:21 -Mapped "{[/sys/user/list],methods=[GET]}" onto com.bootdo.common.utils.PageUtils com.bootdo.system.controller.UserController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-06 14:43:21 -Mapped "{[/sys/user/save],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.save(com.bootdo.system.domain.UserDO)
2019-04-06 14:43:21 -Mapped "{[/sys/user/batchRemove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.batchRemove(java.lang.Long[])
2019-04-06 14:43:21 -Mapped "{[/sys/user/tree],methods=[GET]}" onto public com.bootdo.common.domain.Tree<com.bootdo.system.domain.DeptDO> com.bootdo.system.controller.UserController.tree()
2019-04-06 14:43:21 -Mapped "{[/sys/user],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.user(org.springframework.ui.Model)
2019-04-06 14:43:21 -Mapped "{[/sys/user/updatePeronal],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.updatePeronal(com.bootdo.system.domain.UserDO)
2019-04-06 14:43:21 -Mapped "{[/sys/user/resetPwd],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.resetPwd(com.bootdo.system.vo.UserVO)
2019-04-06 14:43:21 -Mapped "{[/sys/user/resetPwd/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.resetPwd(java.lang.Long,org.springframework.ui.Model)
2019-04-06 14:43:21 -Mapped "{[/sys/user/personal],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.personal(org.springframework.ui.Model)
2019-04-06 14:43:21 -Mapped "{[/sys/user/uploadImg],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.uploadImg(org.springframework.web.multipart.MultipartFile,java.lang.String,javax.servlet.http.HttpServletRequest)
2019-04-06 14:43:21 -Mapped "{[/sys/user/adminResetPwd],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.adminResetPwd(com.bootdo.system.vo.UserVO)
2019-04-06 14:43:21 -Mapped "{[/sys/user/treeView],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.treeView()
2019-04-06 14:43:21 -Mapped "{[/sys/user/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.edit(org.springframework.ui.Model,java.lang.Long)
2019-04-06 14:43:21 -Mapped "{[/file/downImport/{importType}],methods=[GET]}" onto public void com.bootdo.temple.controller.TempletController.downImport(javax.servlet.http.HttpServletResponse,java.lang.String)
2019-04-06 14:43:21 -Mapped "{[/water/water/add],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterController.add()
2019-04-06 14:43:21 -Mapped "{[/water/water/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterController.remove(java.lang.Long)
2019-04-06 14:43:21 -Mapped "{[/water/water/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterController.remove(java.lang.Long[])
2019-04-06 14:43:21 -Mapped "{[/water/water/update]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterController.update(com.bootdo.water.domain.WaterDO)
2019-04-06 14:43:21 -Mapped "{[/water/water/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.water.controller.WaterController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-06 14:43:21 -Mapped "{[/water/water/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterController.save(com.bootdo.water.domain.WaterDO)
2019-04-06 14:43:21 -Mapped "{[/water/water],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterController.Water()
2019-04-06 14:43:21 -Mapped "{[/water/water/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-06 14:43:21 -Mapped "{[/water/water/exprotWater],methods=[GET]}" onto public void com.bootdo.water.controller.WaterController.exprotExcel(com.bootdo.water.vo.WaterVo,javax.servlet.http.HttpServletResponse)
2019-04-06 14:43:21 -Mapped "{[/water/waterInto],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterIntoController.WaterInto()
2019-04-06 14:43:21 -Mapped "{[/water/waterInto/exprotWaterIntoExcel],methods=[GET]}" onto public void com.bootdo.water.controller.WaterIntoController.exprotExcel(com.bootdo.water.vo.WaterVo,javax.servlet.http.HttpServletResponse)
2019-04-06 14:43:21 -Mapped "{[/water/waterPrice/add],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterPriceController.add()
2019-04-06 14:43:21 -Mapped "{[/water/waterPrice/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterPriceController.remove(java.lang.Long)
2019-04-06 14:43:21 -Mapped "{[/water/waterPrice/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterPriceController.remove(java.lang.Long[])
2019-04-06 14:43:21 -Mapped "{[/water/waterPrice/update]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterPriceController.update(com.bootdo.water.domain.WaterPriceDO)
2019-04-06 14:43:21 -Mapped "{[/water/waterPrice/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.water.controller.WaterPriceController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-06 14:43:21 -Mapped "{[/water/waterPrice/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterPriceController.save(com.bootdo.water.domain.WaterPriceDO)
2019-04-06 14:43:21 -Mapped "{[/water/waterPrice],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterPriceController.WaterPrice()
2019-04-06 14:43:21 -Mapped "{[/water/waterPrice/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterPriceController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-06 14:43:21 -Mapped "{[/water/waterUpLoad/importWaterExcel]}" onto public java.lang.String com.bootdo.water.controller.WaterUpLoadController.importWaterExcel(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)
2019-04-06 14:43:21 -Mapped "{[/water/waterUpLoad],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterUpLoadController.WaterUpLoad()
2019-04-06 14:43:21 -Mapped "{[/water/waterUpLoad/createWaterExcel],methods=[POST]}" onto public java.lang.String com.bootdo.water.controller.WaterUpLoadController.createWaterExcel(com.bootdo.water.domain.WaterDO) throws java.lang.Exception
2019-04-06 14:43:21 -Mapped "{[/water/waterUpLoad/exprotWaterExcel],methods=[GET]}" onto public void com.bootdo.water.controller.WaterUpLoadController.exprotWaterExcel(com.bootdo.water.vo.WaterVo,javax.servlet.http.HttpServletResponse)
2019-04-06 14:43:21 -Mapped "{[/v2/api-docs],methods=[GET],produces=[application/json || application/hal+json]}" onto public org.springframework.http.ResponseEntity<springfox.documentation.spring.web.json.Json> springfox.documentation.swagger2.web.Swagger2Controller.getDocumentation(java.lang.String,javax.servlet.http.HttpServletRequest)
2019-04-06 14:43:21 -Mapped "{[/swagger-resources/configuration/ui]}" onto org.springframework.http.ResponseEntity<springfox.documentation.swagger.web.UiConfiguration> springfox.documentation.swagger.web.ApiResourceController.uiConfiguration()
2019-04-06 14:43:21 -Mapped "{[/swagger-resources]}" onto org.springframework.http.ResponseEntity<java.util.List<springfox.documentation.swagger.web.SwaggerResource>> springfox.documentation.swagger.web.ApiResourceController.swaggerResources()
2019-04-06 14:43:21 -Mapped "{[/swagger-resources/configuration/security]}" onto org.springframework.http.ResponseEntity<springfox.documentation.swagger.web.SecurityConfiguration> springfox.documentation.swagger.web.ApiResourceController.securityConfiguration()
2019-04-06 14:43:22 -Initializing ExecutorService  'messageBrokerTaskScheduler'
2019-04-06 14:43:22 -Mapped URL path [/endpointChat/**] onto handler of type [class org.springframework.web.socket.sockjs.support.SockJsHttpRequestHandler]
2019-04-06 14:43:22 -Initializing ExecutorService  'brokerChannelExecutor'
2019-04-06 14:43:23 -Mapped URL path [/**/favicon.ico] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-04-06 14:43:24 -Looking for @ControllerAdvice: org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@1c7fd41f: startup date [Sat Apr 06 14:42:51 CST 2019]; root of context hierarchy
2019-04-06 14:43:24 -Mapped URL path [/webjars/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-04-06 14:43:24 -Mapped URL path [/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-04-06 14:43:24 -Mapped URL path [/files/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-04-06 14:43:24 -Detected @ExceptionHandler methods in BDExceptionHandler
2019-04-06 14:43:25 -[THYMELEAF][main] Template Mode 'LEGACYHTML5' is deprecated. Using Template Mode 'HTML' instead.
2019-04-06 14:43:28 -Registering beans for JMX exposure on startup
2019-04-06 14:43:28 -Bean with name 'dataSource' has been autodetected for JMX exposure
2019-04-06 14:43:28 -Located MBean 'dataSource': registering with JMX server as MBean [com.alibaba.druid.pool:name=dataSource,type=DruidDataSource]
2019-04-06 14:43:28 -Starting beans in phase 2147483647
2019-04-06 14:43:28 -Context refreshed
2019-04-06 14:43:29 -Found 1 custom documentation plugin(s)
2019-04-06 14:43:29 -Scanning for api listing references
2019-04-06 14:43:29 -Generating unique operation named: exprotElecLogUsingGET_1
2019-04-06 14:43:29 -Generating unique operation named: getCountDUsingPOST_1
2019-04-06 14:43:29 -Generating unique operation named: exprotElecLogUsingGET_2
2019-04-06 14:43:29 -Generating unique operation named: getCountDUsingPOST_2
2019-04-06 14:43:29 -Generating unique operation named: exprotElecLogUsingGET_3
2019-04-06 14:43:29 -Generating unique operation named: getCountDUsingPOST_3
2019-04-06 14:43:30 -Generating unique operation named: removeUsingPOST_1
2019-04-06 14:43:30 -Generating unique operation named: addUsingGET_1
2019-04-06 14:43:30 -Generating unique operation named: editUsingGET_1
2019-04-06 14:43:30 -Generating unique operation named: listUsingGET_1
2019-04-06 14:43:30 -Generating unique operation named: removeUsingPOST_2
2019-04-06 14:43:30 -Generating unique operation named: removeUsingPOST_3
2019-04-06 14:43:30 -Generating unique operation named: saveUsingPOST_1
2019-04-06 14:43:30 -Generating unique operation named: updateUsingGET_1
2019-04-06 14:43:30 -Generating unique operation named: updateUsingHEAD_1
2019-04-06 14:43:30 -Generating unique operation named: updateUsingPOST_1
2019-04-06 14:43:30 -Generating unique operation named: updateUsingPUT_1
2019-04-06 14:43:30 -Generating unique operation named: updateUsingPATCH_1
2019-04-06 14:43:30 -Generating unique operation named: updateUsingDELETE_1
2019-04-06 14:43:30 -Generating unique operation named: updateUsingOPTIONS_1
2019-04-06 14:43:30 -Generating unique operation named: updateUsingTRACE_1
2019-04-06 14:43:30 -Generating unique operation named: addUsingGET_2
2019-04-06 14:43:30 -Generating unique operation named: editUsingGET_2
2019-04-06 14:43:30 -Generating unique operation named: listUsingGET_2
2019-04-06 14:43:30 -Generating unique operation named: removeUsingPOST_4
2019-04-06 14:43:30 -Generating unique operation named: removeUsingPOST_5
2019-04-06 14:43:30 -Generating unique operation named: saveUsingPOST_2
2019-04-06 14:43:30 -Generating unique operation named: updateUsingPOST_2
2019-04-06 14:43:30 -Generating unique operation named: exprotExcelUsingGET_1
2019-04-06 14:43:31 -Generating unique operation named: addUsingGET_3
2019-04-06 14:43:31 -Generating unique operation named: editUsingGET_3
2019-04-06 14:43:31 -Generating unique operation named: exprotElecLogUsingGET_4
2019-04-06 14:43:31 -Generating unique operation named: listUsingGET_3
2019-04-06 14:43:31 -Generating unique operation named: removeUsingPOST_6
2019-04-06 14:43:31 -Generating unique operation named: removeUsingPOST_7
2019-04-06 14:43:31 -Generating unique operation named: saveUsingPOST_3
2019-04-06 14:43:31 -Generating unique operation named: updateUsingGET_2
2019-04-06 14:43:31 -Generating unique operation named: updateUsingHEAD_2
2019-04-06 14:43:31 -Generating unique operation named: updateUsingPOST_3
2019-04-06 14:43:31 -Generating unique operation named: updateUsingPUT_2
2019-04-06 14:43:31 -Generating unique operation named: updateUsingPATCH_2
2019-04-06 14:43:31 -Generating unique operation named: updateUsingDELETE_2
2019-04-06 14:43:31 -Generating unique operation named: updateUsingOPTIONS_2
2019-04-06 14:43:31 -Generating unique operation named: updateUsingTRACE_2
2019-04-06 14:43:31 -Generating unique operation named: addUsingGET_4
2019-04-06 14:43:31 -Generating unique operation named: editUsingGET_4
2019-04-06 14:43:31 -Generating unique operation named: listUsingGET_4
2019-04-06 14:43:31 -Generating unique operation named: removeUsingPOST_8
2019-04-06 14:43:31 -Generating unique operation named: removeUsingPOST_9
2019-04-06 14:43:31 -Generating unique operation named: saveUsingPOST_4
2019-04-06 14:43:31 -Generating unique operation named: updateUsingGET_3
2019-04-06 14:43:31 -Generating unique operation named: updateUsingHEAD_3
2019-04-06 14:43:31 -Generating unique operation named: updateUsingPOST_4
2019-04-06 14:43:31 -Generating unique operation named: updateUsingPUT_3
2019-04-06 14:43:31 -Generating unique operation named: updateUsingPATCH_3
2019-04-06 14:43:31 -Generating unique operation named: updateUsingDELETE_3
2019-04-06 14:43:31 -Generating unique operation named: updateUsingOPTIONS_3
2019-04-06 14:43:31 -Generating unique operation named: updateUsingTRACE_3
2019-04-06 14:43:31 -Generating unique operation named: ElecUsingGET_1
2019-04-06 14:43:31 -Generating unique operation named: addUsingGET_5
2019-04-06 14:43:31 -Generating unique operation named: editUsingGET_5
2019-04-06 14:43:31 -Generating unique operation named: listUsingGET_5
2019-04-06 14:43:31 -Generating unique operation named: removeUsingPOST_10
2019-04-06 14:43:31 -Generating unique operation named: removeUsingPOST_11
2019-04-06 14:43:31 -Generating unique operation named: saveUsingPOST_5
2019-04-06 14:43:31 -Generating unique operation named: updateUsingGET_4
2019-04-06 14:43:31 -Generating unique operation named: updateUsingHEAD_4
2019-04-06 14:43:31 -Generating unique operation named: updateUsingPOST_5
2019-04-06 14:43:31 -Generating unique operation named: updateUsingPUT_4
2019-04-06 14:43:31 -Generating unique operation named: updateUsingPATCH_4
2019-04-06 14:43:31 -Generating unique operation named: updateUsingDELETE_4
2019-04-06 14:43:31 -Generating unique operation named: updateUsingOPTIONS_4
2019-04-06 14:43:31 -Generating unique operation named: updateUsingTRACE_4
2019-04-06 14:43:32 -Generating unique operation named: editUsingGET_6
2019-04-06 14:43:32 -Generating unique operation named: listUsingGET_6
2019-04-06 14:43:32 -Generating unique operation named: updateUsingPOST_6
2019-04-06 14:43:32 -Generating unique operation named: addUsingGET_6
2019-04-06 14:43:32 -Generating unique operation named: editUsingGET_7
2019-04-06 14:43:32 -Generating unique operation named: exprotExcelUsingGET_2
2019-04-06 14:43:32 -Generating unique operation named: listUsingGET_7
2019-04-06 14:43:32 -Generating unique operation named: removeUsingPOST_12
2019-04-06 14:43:32 -Generating unique operation named: removeUsingPOST_13
2019-04-06 14:43:32 -Generating unique operation named: saveUsingPOST_6
2019-04-06 14:43:32 -Generating unique operation named: updateUsingGET_5
2019-04-06 14:43:32 -Generating unique operation named: updateUsingHEAD_5
2019-04-06 14:43:32 -Generating unique operation named: updateUsingPOST_7
2019-04-06 14:43:32 -Generating unique operation named: updateUsingPUT_5
2019-04-06 14:43:32 -Generating unique operation named: updateUsingPATCH_5
2019-04-06 14:43:32 -Generating unique operation named: updateUsingDELETE_5
2019-04-06 14:43:32 -Generating unique operation named: updateUsingOPTIONS_5
2019-04-06 14:43:32 -Generating unique operation named: updateUsingTRACE_5
2019-04-06 14:43:32 -Generating unique operation named: exprotExcelUsingGET_3
2019-04-06 14:43:32 -Generating unique operation named: addUsingGET_7
2019-04-06 14:43:32 -Generating unique operation named: editUsingGET_8
2019-04-06 14:43:32 -Generating unique operation named: listUsingGET_8
2019-04-06 14:43:32 -Generating unique operation named: removeUsingPOST_14
2019-04-06 14:43:32 -Generating unique operation named: removeUsingPOST_15
2019-04-06 14:43:32 -Generating unique operation named: saveUsingPOST_7
2019-04-06 14:43:32 -Generating unique operation named: updateUsingGET_6
2019-04-06 14:43:32 -Generating unique operation named: updateUsingHEAD_6
2019-04-06 14:43:32 -Generating unique operation named: updateUsingPOST_8
2019-04-06 14:43:32 -Generating unique operation named: updateUsingPUT_6
2019-04-06 14:43:32 -Generating unique operation named: updateUsingPATCH_6
2019-04-06 14:43:32 -Generating unique operation named: updateUsingDELETE_6
2019-04-06 14:43:32 -Generating unique operation named: updateUsingOPTIONS_6
2019-04-06 14:43:32 -Generating unique operation named: updateUsingTRACE_6
2019-04-06 14:43:32 -Generating unique operation named: addUsingGET_8
2019-04-06 14:43:32 -Generating unique operation named: editUsingGET_9
2019-04-06 14:43:32 -Generating unique operation named: listUsingGET_9
2019-04-06 14:43:32 -Generating unique operation named: removeUsingPOST_16
2019-04-06 14:43:32 -Generating unique operation named: removeUsingPOST_17
2019-04-06 14:43:32 -Generating unique operation named: saveUsingPOST_8
2019-04-06 14:43:32 -Generating unique operation named: updateUsingGET_7
2019-04-06 14:43:32 -Generating unique operation named: updateUsingHEAD_7
2019-04-06 14:43:32 -Generating unique operation named: updateUsingPOST_9
2019-04-06 14:43:32 -Generating unique operation named: updateUsingPUT_7
2019-04-06 14:43:32 -Generating unique operation named: updateUsingPATCH_7
2019-04-06 14:43:32 -Generating unique operation named: updateUsingDELETE_7
2019-04-06 14:43:32 -Generating unique operation named: updateUsingOPTIONS_7
2019-04-06 14:43:32 -Generating unique operation named: updateUsingTRACE_7
2019-04-06 14:43:32 -Generating unique operation named: addUsingGET_9
2019-04-06 14:43:33 -Generating unique operation named: editUsingGET_10
2019-04-06 14:43:33 -Generating unique operation named: infoUsingGET_1
2019-04-06 14:43:33 -Generating unique operation named: infoUsingHEAD_1
2019-04-06 14:43:33 -Generating unique operation named: infoUsingPOST_1
2019-04-06 14:43:33 -Generating unique operation named: infoUsingPUT_1
2019-04-06 14:43:33 -Generating unique operation named: infoUsingPATCH_1
2019-04-06 14:43:33 -Generating unique operation named: infoUsingDELETE_1
2019-04-06 14:43:33 -Generating unique operation named: infoUsingOPTIONS_1
2019-04-06 14:43:33 -Generating unique operation named: infoUsingTRACE_1
2019-04-06 14:43:33 -Generating unique operation named: listUsingGET_10
2019-04-06 14:43:33 -Generating unique operation named: removeUsingPOST_18
2019-04-06 14:43:33 -Generating unique operation named: removeUsingPOST_19
2019-04-06 14:43:33 -Generating unique operation named: saveUsingPOST_9
2019-04-06 14:43:33 -Generating unique operation named: updateUsingPOST_10
2019-04-06 14:43:33 -Generating unique operation named: listUsingGET_11
2019-04-06 14:43:33 -Generating unique operation named: removeUsingPOST_20
2019-04-06 14:43:33 -Generating unique operation named: welcomeUsingGET_1
2019-04-06 14:43:33 -Generating unique operation named: addUsingGET_10
2019-04-06 14:43:33 -Generating unique operation named: editUsingGET_11
2019-04-06 14:43:33 -Generating unique operation named: listUsingGET_12
2019-04-06 14:43:33 -Generating unique operation named: removeUsingPOST_21
2019-04-06 14:43:33 -Generating unique operation named: saveUsingPOST_10
2019-04-06 14:43:33 -Generating unique operation named: treeUsingGET_1
2019-04-06 14:43:33 -Generating unique operation named: treeUsingGET_2
2019-04-06 14:43:33 -Generating unique operation named: updateUsingPOST_11
2019-04-06 14:43:33 -Generating unique operation named: addUsingGET_11
2019-04-06 14:43:33 -Generating unique operation named: editUsingGET_12
2019-04-06 14:43:33 -Generating unique operation named: listUsingGET_13
2019-04-06 14:43:34 -Generating unique operation named: removeUsingPOST_22
2019-04-06 14:43:34 -Generating unique operation named: removeUsingPOST_23
2019-04-06 14:43:34 -Generating unique operation named: saveUsingPOST_11
2019-04-06 14:43:34 -Generating unique operation named: updateUsingGET_8
2019-04-06 14:43:34 -Generating unique operation named: updateUsingHEAD_8
2019-04-06 14:43:34 -Generating unique operation named: updateUsingPOST_12
2019-04-06 14:43:34 -Generating unique operation named: updateUsingPUT_8
2019-04-06 14:43:34 -Generating unique operation named: updateUsingPATCH_8
2019-04-06 14:43:34 -Generating unique operation named: updateUsingDELETE_8
2019-04-06 14:43:34 -Generating unique operation named: updateUsingOPTIONS_8
2019-04-06 14:43:34 -Generating unique operation named: updateUsingTRACE_8
2019-04-06 14:43:34 -Generating unique operation named: addUsingGET_12
2019-04-06 14:43:34 -Generating unique operation named: editUsingGET_13
2019-04-06 14:43:34 -Generating unique operation named: listUsingGET_14
2019-04-06 14:43:34 -Generating unique operation named: removeUsingPOST_24
2019-04-06 14:43:34 -Generating unique operation named: removeUsingPOST_25
2019-04-06 14:43:34 -Generating unique operation named: saveUsingPOST_12
2019-04-06 14:43:34 -Generating unique operation named: updateUsingGET_9
2019-04-06 14:43:34 -Generating unique operation named: updateUsingHEAD_9
2019-04-06 14:43:34 -Generating unique operation named: updateUsingPOST_13
2019-04-06 14:43:34 -Generating unique operation named: updateUsingPUT_9
2019-04-06 14:43:34 -Generating unique operation named: updateUsingPATCH_9
2019-04-06 14:43:34 -Generating unique operation named: updateUsingDELETE_9
2019-04-06 14:43:34 -Generating unique operation named: updateUsingOPTIONS_9
2019-04-06 14:43:34 -Generating unique operation named: updateUsingTRACE_9
2019-04-06 14:43:34 -Generating unique operation named: addUsingGET_13
2019-04-06 14:43:34 -Generating unique operation named: batchRemoveUsingPOST_1
2019-04-06 14:43:34 -Generating unique operation named: editUsingGET_14
2019-04-06 14:43:34 -Generating unique operation named: listUsingGET_15
2019-04-06 14:43:34 -Generating unique operation named: saveUsingPOST_13
2019-04-06 14:43:34 -Generating unique operation named: saveUsingPOST_14
2019-04-06 14:43:34 -Generating unique operation named: updateUsingPOST_14
2019-04-06 14:43:34 -Generating unique operation named: listUsingGET_16
2019-04-06 14:43:34 -Generating unique operation named: listUsingHEAD_1
2019-04-06 14:43:34 -Generating unique operation named: listUsingPOST_1
2019-04-06 14:43:34 -Generating unique operation named: listUsingPUT_1
2019-04-06 14:43:34 -Generating unique operation named: listUsingPATCH_1
2019-04-06 14:43:34 -Generating unique operation named: listUsingDELETE_1
2019-04-06 14:43:34 -Generating unique operation named: listUsingOPTIONS_1
2019-04-06 14:43:34 -Generating unique operation named: listUsingTRACE_1
2019-04-06 14:43:34 -Generating unique operation named: addUsingGET_14
2019-04-06 14:43:35 -Generating unique operation named: batchRemoveUsingPOST_2
2019-04-06 14:43:35 -Generating unique operation named: editUsingGET_15
2019-04-06 14:43:35 -Generating unique operation named: listUsingGET_17
2019-04-06 14:43:35 -Generating unique operation named: removeUsingPOST_26
2019-04-06 14:43:35 -Generating unique operation named: saveUsingPOST_15
2019-04-06 14:43:35 -Generating unique operation named: treeUsingGET_3
2019-04-06 14:43:35 -Generating unique operation named: treeViewUsingGET_1
2019-04-06 14:43:35 -Generating unique operation named: updateUsingPOST_15
2019-04-06 14:43:35 -Generating unique operation named: addUsingGET_15
2019-04-06 14:43:35 -Generating unique operation named: editUsingGET_16
2019-04-06 14:43:35 -Generating unique operation named: exprotExcelUsingGET_4
2019-04-06 14:43:35 -Generating unique operation named: listUsingGET_18
2019-04-06 14:43:35 -Generating unique operation named: removeUsingPOST_27
2019-04-06 14:43:35 -Generating unique operation named: removeUsingPOST_28
2019-04-06 14:43:35 -Generating unique operation named: saveUsingPOST_16
2019-04-06 14:43:35 -Generating unique operation named: updateUsingGET_10
2019-04-06 14:43:35 -Generating unique operation named: updateUsingHEAD_10
2019-04-06 14:43:35 -Generating unique operation named: updateUsingPOST_16
2019-04-06 14:43:35 -Generating unique operation named: updateUsingPUT_10
2019-04-06 14:43:35 -Generating unique operation named: updateUsingPATCH_10
2019-04-06 14:43:35 -Generating unique operation named: updateUsingDELETE_10
2019-04-06 14:43:35 -Generating unique operation named: updateUsingOPTIONS_10
2019-04-06 14:43:35 -Generating unique operation named: updateUsingTRACE_10
2019-04-06 14:43:35 -Generating unique operation named: exprotExcelUsingGET_5
2019-04-06 14:43:35 -Generating unique operation named: addUsingGET_16
2019-04-06 14:43:35 -Generating unique operation named: editUsingGET_17
2019-04-06 14:43:35 -Generating unique operation named: listUsingGET_19
2019-04-06 14:43:35 -Generating unique operation named: removeUsingPOST_29
2019-04-06 14:43:35 -Generating unique operation named: removeUsingPOST_30
2019-04-06 14:43:35 -Generating unique operation named: saveUsingPOST_17
2019-04-06 14:43:35 -Generating unique operation named: updateUsingGET_11
2019-04-06 14:43:35 -Generating unique operation named: updateUsingHEAD_11
2019-04-06 14:43:35 -Generating unique operation named: updateUsingPOST_17
2019-04-06 14:43:35 -Generating unique operation named: updateUsingPUT_11
2019-04-06 14:43:35 -Generating unique operation named: updateUsingPATCH_11
2019-04-06 14:43:35 -Generating unique operation named: updateUsingDELETE_11
2019-04-06 14:43:35 -Generating unique operation named: updateUsingOPTIONS_11
2019-04-06 14:43:35 -Generating unique operation named: updateUsingTRACE_11
2019-04-06 14:43:35 -Generating unique operation named: addUsingGET_17
2019-04-06 14:43:35 -Generating unique operation named: editUsingGET_18
2019-04-06 14:43:35 -Generating unique operation named: listUsingGET_20
2019-04-06 14:43:35 -Generating unique operation named: removeUsingPOST_31
2019-04-06 14:43:35 -Generating unique operation named: removeUsingPOST_32
2019-04-06 14:43:35 -Generating unique operation named: saveUsingPOST_18
2019-04-06 14:43:35 -Generating unique operation named: updateUsingGET_12
2019-04-06 14:43:35 -Generating unique operation named: updateUsingHEAD_12
2019-04-06 14:43:35 -Generating unique operation named: updateUsingPOST_18
2019-04-06 14:43:35 -Generating unique operation named: updateUsingPUT_12
2019-04-06 14:43:35 -Generating unique operation named: updateUsingPATCH_12
2019-04-06 14:43:35 -Generating unique operation named: updateUsingDELETE_12
2019-04-06 14:43:35 -Generating unique operation named: updateUsingOPTIONS_12
2019-04-06 14:43:35 -Generating unique operation named: updateUsingTRACE_12
2019-04-06 14:43:35 -Starting Quartz Scheduler now
2019-04-06 14:43:35 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED started.
2019-04-06 14:43:35 -Starting...
2019-04-06 14:43:35 -BrokerAvailabilityEvent[available=true, SimpleBrokerMessageHandler [DefaultSubscriptionRegistry[cache[0 destination(s)], registry[0 sessions]]]]
2019-04-06 14:43:35 -Started.
2019-04-06 14:43:35 -Starting ProtocolHandler ["http-nio-8081"]
2019-04-06 14:43:36 -Using a shared selector for servlet write/read
2019-04-06 14:43:36 -Tomcat started on port(s): 8081 (http) with context path ''
2019-04-06 14:43:36 -Started BootdoApplication in 48.535 seconds (JVM running for 51.412)
2019-04-06 14:43:36 -==>  Preparing: select `id`,`cron_expression`,`method_name`,`is_concurrent`,`description`,`update_by`,`bean_class`,`create_date`,`job_status`,`job_group`,`update_date`,`create_by`,`spring_bean`,`job_name` from sys_task order by id desc 
2019-04-06 14:43:36 -==> Parameters: 
2019-04-06 14:43:36 -<==      Total: 1
2019-04-06 14:43:47 -Initializing Spring FrameworkServlet 'dispatcherServlet'
2019-04-06 14:43:47 -FrameworkServlet 'dispatcherServlet': initialization started
2019-04-06 14:43:47 -FrameworkServlet 'dispatcherServlet': initialization completed in 106 ms
2019-04-06 14:43:47 -Enabling session validation scheduler...
2019-04-06 14:43:47 -请求地址 : http://localhost:8081/login;JSESSIONID=f840820a-eb1a-44c8-9402-b4a6690c6cc9
2019-04-06 14:43:47 -HTTP METHOD : GET
2019-04-06 14:43:47 -CLASS_METHOD : com.bootdo.system.controller.LoginController.login
2019-04-06 14:43:47 -参数 : [{}]
2019-04-06 14:43:47 -耗时 : 11
2019-04-06 14:43:47 -返回值 : login
2019-04-06 14:43:49 -请求地址 : http://localhost:8081/getVerify
2019-04-06 14:43:49 -HTTP METHOD : GET
2019-04-06 14:43:49 -CLASS_METHOD : com.bootdo.system.controller.LoginController.getVerify
2019-04-06 14:43:49 -参数 : [org.apache.shiro.web.servlet.ShiroHttpServletRequest@1dfbf932, org.apache.shiro.web.servlet.ShiroHttpServletResponse@6ba96b9e]
2019-04-06 14:43:54 -2544
2019-04-06 14:43:54 -耗时 : 5045
2019-04-06 14:43:54 -返回值 : null
2019-04-06 14:44:00 -请求地址 : http://localhost:8081/login
2019-04-06 14:44:00 -HTTP METHOD : POST
2019-04-06 14:44:00 -CLASS_METHOD : com.bootdo.system.controller.LoginController.ajaxLogin
2019-04-06 14:44:00 -参数 : [admin, 111111, 2544, org.apache.shiro.web.servlet.ShiroHttpServletRequest@270ed08e]
2019-04-06 14:44:00 -==>  Preparing: select `user_id`,`username`,`name`,`password`,`dept_id`,`email`,`mobile`,`status`,`user_id_create`,`gmt_create`,`gmt_modified`,`sex`,`birth`,`pic_id`,`live_address`,`hobby`,`province`,`city`,`district` from sys_user WHERE username = ? order by user_id desc 
2019-04-06 14:44:00 -==> Parameters: admin(String)
2019-04-06 14:44:00 -<==      Total: 1
2019-04-06 14:44:00 -耗时 : 190
2019-04-06 14:44:00 -返回值 : {msg=操作成功, code=0}
2019-04-06 14:44:00 -More than one TaskExecutor bean found within the context, and none is named 'taskExecutor'. Mark one of them as primary or name it 'taskExecutor' (possibly as an alias) in order to use it for async processing: [clientInboundChannelExecutor, clientOutboundChannelExecutor, brokerChannelExecutor, messageBrokerTaskScheduler]
2019-04-06 14:44:00 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-06 14:44:00 -==> Parameters: 1(Long), admin(String), 登录(String), 192(Integer), com.bootdo.system.controller.LoginController.ajaxLogin()(String), null, 127.0.0.1(String), 2019-04-06 14:44:00.436(Timestamp)
2019-04-06 14:44:00 -<==    Updates: 1
2019-04-06 14:44:00 -请求地址 : http://localhost:8081/index
2019-04-06 14:44:00 -HTTP METHOD : GET
2019-04-06 14:44:00 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2019-04-06 14:44:00 -参数 : [{}]
2019-04-06 14:44:00 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2019-04-06 14:44:00 -==> Parameters: 1(Long)
2019-04-06 14:44:00 -<==      Total: 46
2019-04-06 14:44:00 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2019-04-06 14:44:00 -==> Parameters: 138(Long)
2019-04-06 14:44:00 -<==      Total: 1
2019-04-06 14:44:00 -耗时 : 302
2019-04-06 14:44:00 -返回值 : index_v1
2019-04-06 14:44:01 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-06 14:44:01 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 302(Integer), com.bootdo.system.controller.LoginController.index()(String), {"menus":[{"attributes":{"icon":"fa fa-money","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-money","url":"/moneyList/moneyList"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"102","parentId":"106","text":"现金缴费"},{"attributes":{"icon":"fa fa-book","url":"/moneyLog/elecLog"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"107","parentId":"106","text":"缴费记录"}],"hasChildren":true,"hasParent":false,"id":"106","parentId":"0","text":"收费管理"},{"attributes":{"icon":"fa fa-lightbulb-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/elec/elec"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"121","parentId":"103","text":"电费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"elec/elecInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"122","parentId":"103","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"elec/elecUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"123","parentId":"103","text":"电表上传"},{"attributes":{"icon":"fa fa-cc","url":"/elec/elecPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"124","parentId":"103","text":"电价管理"}],"hasChildren":true,"hasParent":false,"id":"103","parentId":"0","text":"电费管理"},{"attributes":{"icon":"fa fa-tint","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/water/water"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"117","parentId":"105","text":"水费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"water/waterInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"118","parentId":"105","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"water/waterUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"119","parentId":"105","text":"水费生成"},{"attributes":{"icon":"fa fa-cc","url":"/water/waterPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"120","parentId":"105","text":"水价管理"}],"hasChildren":true,"hasParent":false,"id":"105","parentId":"0","text":"水费管理"},{"attributes":{"icon":"fa fa-fire","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/heat/heat"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"113","parentId":"104","text":"暖费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"heat/heatInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"114","parentId":"104","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"heat/heatUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"115","parentId":"104","text":"暖费生成"},{"attributes":{"icon":"","url":"/heat/heatPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"116","parentId":"104","text":"暖价管理"}],"hasChildren":true,"hasParent":false,"id":"104","parentId":"0","text":"暖费管理"},{"attributes":{"icon":"fa fa-vcard-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-bomb","url":"/print/print"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"149","parentId":"108","text":"票据记录"}],"hasChildren":true,"hasParent":false,"id":"108","parentId":"0","text":"票据管理"},{"attributes":{"icon":"fa fa-bar-chart","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-area-chart","url":"/chart/graph_echarts.html"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","text":"百度chart"},{"attributes":{"icon":"fa fa-sun-o","url":"charts/countDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"109","parentId":"97","text":"日统计报表"},{"attributes":{"icon":"fa fa-registered","url":"charts/countMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"110","parentId":"97","text":"月统计报表"},{"attributes":{"icon":"fa fa-support","url":"charts/countYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"111","parentId":"97","text":"年统计报表"},{"attributes":{"icon":"fa fa-money","url":"charts/countOwe"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"155","parentId":"97","text":"欠费报表图"},{"attributes":{"icon":"fa fa-tachometer","url":"charts/countRun"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"112","parentId":"97","text":"走势图报表"}],"hasChildren":true,"hasParent":false,"id":"97","parentId":"0","text":"统计管理"},{"attributes":{"icon":"fa fa-bars","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-book","url":"/common/dict"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"78","parentId":"1","text":"数据字典"},{"attributes":{"icon":"fa fa-folder-open","url":"/common/sysFile"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"71","parentId":"1","text":"文件管理"}],"h(String), 127.0.0.1(String), 2019-04-06 14:44:01.006(Timestamp)
2019-04-06 14:44:01 -<==    Updates: 1
2019-04-06 14:44:01 -请求地址 : http://localhost:8081/main
2019-04-06 14:44:01 -HTTP METHOD : GET
2019-04-06 14:44:01 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-06 14:44:01 -参数 : []
2019-04-06 14:44:01 -耗时 : 1
2019-04-06 14:44:01 -返回值 : main
2019-04-06 14:44:01 -请求地址 : http://localhost:8081/oa/notify/message
2019-04-06 14:44:01 -HTTP METHOD : GET
2019-04-06 14:44:01 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2019-04-06 14:44:01 -参数 : []
2019-04-06 14:44:01 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2019-04-06 14:44:01 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2019-04-06 14:44:01 -<==      Total: 0
2019-04-06 14:44:01 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2019-04-06 14:44:01 -==> Parameters: 1(Long), 0(String)
2019-04-06 14:44:01 -<==      Total: 1
2019-04-06 14:44:01 -耗时 : 77
2019-04-06 14:44:01 -返回值 : com.bootdo.common.utils.PageUtils@145d5950
2019-04-06 14:44:01 -请求地址 : http://localhost:8081/main
2019-04-06 14:44:01 -HTTP METHOD : GET
2019-04-06 14:44:01 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-06 14:44:01 -参数 : []
2019-04-06 14:44:01 -耗时 : 1
2019-04-06 14:44:01 -返回值 : main
2019-04-06 14:44:04 -==>  Preparing: select distinct m.perms from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id = ur.role_id where ur.user_id = ? 
2019-04-06 14:44:04 -==> Parameters: 1(Long)
2019-04-06 14:44:04 -<==      Total: 90
2019-04-06 14:44:04 -请求地址 : http://localhost:8081/moneyLog/elecLog
2019-04-06 14:44:04 -HTTP METHOD : GET
2019-04-06 14:44:04 -CLASS_METHOD : com.bootdo.moneyLog.controller.ElecLogController.moneyLog
2019-04-06 14:44:04 -参数 : []
2019-04-06 14:44:04 -耗时 : 0
2019-04-06 14:44:04 -返回值 : /moneyLog/elecLog/elecLog
2019-04-06 14:44:05 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-06 14:44:05 -HTTP METHOD : GET
2019-04-06 14:44:05 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-06 14:44:05 -参数 : [userType]
2019-04-06 14:44:05 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-06 14:44:05 -==> Parameters: userType(String)
2019-04-06 14:44:05 -<==      Total: 2
2019-04-06 14:44:05 -耗时 : 61
2019-04-06 14:44:05 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-06 14:44:05 -请求地址 : http://localhost:8081/moneyLog/elecLog/list
2019-04-06 14:44:05 -HTTP METHOD : GET
2019-04-06 14:44:05 -CLASS_METHOD : com.bootdo.moneyLog.controller.ElecLogController.list
2019-04-06 14:44:05 -参数 : [{limit=10, offset=0, userType=, userOrg=, userId=, elecDate=}]
2019-04-06 14:44:05 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`elec_type`,`elec_money`,`elec_date`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec_log order by id asc limit ?, ? 
2019-04-06 14:44:05 -==> Parameters: 0(Integer), 10(Integer)
2019-04-06 14:44:05 -<==      Total: 7
2019-04-06 14:44:05 -==>  Preparing: select count(*) from elec_log 
2019-04-06 14:44:05 -==> Parameters: 
2019-04-06 14:44:05 -<==      Total: 1
2019-04-06 14:44:05 -耗时 : 66
2019-04-06 14:44:05 -返回值 : com.bootdo.common.utils.PageUtils@3d18e2e4
2019-04-06 14:44:05 -请求地址 : http://localhost:8081/moneyLog/waterLog
2019-04-06 14:44:05 -HTTP METHOD : GET
2019-04-06 14:44:05 -CLASS_METHOD : com.bootdo.moneyLog.controller.WaterLogController.WaterLog
2019-04-06 14:44:05 -参数 : []
2019-04-06 14:44:05 -耗时 : 1
2019-04-06 14:44:05 -返回值 : /moneyLog/waterLog/waterLog
2019-04-06 14:44:06 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-06 14:44:06 -HTTP METHOD : GET
2019-04-06 14:44:06 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-06 14:44:06 -参数 : [userType]
2019-04-06 14:44:06 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-06 14:44:06 -==> Parameters: userType(String)
2019-04-06 14:44:06 -<==      Total: 2
2019-04-06 14:44:06 -耗时 : 9
2019-04-06 14:44:06 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-06 14:44:06 -请求地址 : http://localhost:8081/moneyLog/waterLog/list
2019-04-06 14:44:06 -HTTP METHOD : GET
2019-04-06 14:44:06 -CLASS_METHOD : com.bootdo.moneyLog.controller.WaterLogController.list
2019-04-06 14:44:06 -参数 : [{limit=10, offset=0, userType=, userOrg=, userId=, waterDate=}]
2019-04-06 14:44:06 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,`water_type`,`water_money`,`water_date`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from water_log order by id asc limit ?, ? 
2019-04-06 14:44:06 -==> Parameters: 0(Integer), 10(Integer)
2019-04-06 14:44:06 -<==      Total: 5
2019-04-06 14:44:06 -==>  Preparing: select count(*) from water_log 
2019-04-06 14:44:06 -==> Parameters: 
2019-04-06 14:44:06 -<==      Total: 1
2019-04-06 14:44:06 -耗时 : 101
2019-04-06 14:44:06 -返回值 : com.bootdo.common.utils.PageUtils@6e42af21
2019-04-06 14:44:07 -请求地址 : http://localhost:8081/moneyLog/waterLog/edit/5
2019-04-06 14:44:07 -HTTP METHOD : GET
2019-04-06 14:44:07 -CLASS_METHOD : com.bootdo.moneyLog.controller.WaterLogController.edit
2019-04-06 14:44:07 -参数 : [5, {}]
2019-04-06 14:44:07 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,`water_type`,`water_money`,`water_date`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from water_log where id = ? 
2019-04-06 14:44:07 -==> Parameters: 5(Long)
2019-04-06 14:44:07 -<==      Total: 1
2019-04-06 14:44:07 -耗时 : 29
2019-04-06 14:44:07 -返回值 : moneyLog/waterLog/edit
2019-04-06 14:44:07 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-06 14:44:07 -HTTP METHOD : GET
2019-04-06 14:44:07 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-06 14:44:07 -参数 : [userType]
2019-04-06 14:44:07 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-06 14:44:07 -==> Parameters: userType(String)
2019-04-06 14:44:07 -<==      Total: 2
2019-04-06 14:44:07 -耗时 : 6
2019-04-06 14:44:07 -请求地址 : http://localhost:8081/common/dict/list/waterType
2019-04-06 14:44:07 -HTTP METHOD : GET
2019-04-06 14:44:07 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-06 14:44:07 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-06 14:44:07 -参数 : [waterType]
2019-04-06 14:44:07 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-06 14:44:07 -==> Parameters: waterType(String)
2019-04-06 14:44:07 -<==      Total: 6
2019-04-06 14:44:07 -耗时 : 13
2019-04-06 14:44:07 -返回值 : [DictDO{id=132, name='特殊水费4', value='5', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=131, name='特殊水费3', value='4', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=130, name='特殊水费2', value='3', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=129, name='特殊水费1', value='2', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=128, name='民用水', value='1', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=127, name='商业水', value='0', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-06 14:44:12 -请求地址 : http://localhost:8081/moneyLog/waterLog/update
2019-04-06 14:44:12 -HTTP METHOD : POST
2019-04-06 14:44:12 -CLASS_METHOD : com.bootdo.moneyLog.controller.WaterLogController.update
2019-04-06 14:44:12 -参数 : [com.bootdo.moneyLog.domain.WaterLogDO@18b4a561]
2019-04-06 14:44:12 -==>  Preparing: update water_log SET `user_id` = ?, `user_name` = ?, `user_type` = ?, `user_org` = ?, `water_type` = ?, `water_money` = ?, `water_date` = ?, `create_time` = ?, `update_time` = ?, `update_by` = ?, `remark` = ? where id = ? 
2019-04-06 14:44:12 -==> Parameters: 6(String), 1(String), A(String), 2(String), 1(String), 1.00(BigDecimal), 2019-04-06 14:44:12.556(Timestamp), 2019-04(String), 2019-04-06 14:44:12.556(Timestamp), 1(Long), (String), 5(Long)
2019-04-06 14:44:12 -<==    Updates: 1
2019-04-06 14:44:12 -耗时 : 404
2019-04-06 14:44:12 -返回值 : {msg=操作成功, code=0}
2019-04-06 14:44:12 -请求地址 : http://localhost:8081/moneyLog/waterLog/list
2019-04-06 14:44:12 -HTTP METHOD : GET
2019-04-06 14:44:12 -CLASS_METHOD : com.bootdo.moneyLog.controller.WaterLogController.list
2019-04-06 14:44:12 -参数 : [{limit=10, offset=0, userType=, userOrg=, userId=, waterDate=}]
2019-04-06 14:44:12 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,`water_type`,`water_money`,`water_date`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from water_log order by id asc limit ?, ? 
2019-04-06 14:44:12 -==> Parameters: 0(Integer), 10(Integer)
2019-04-06 14:44:13 -<==      Total: 5
2019-04-06 14:44:13 -==>  Preparing: select count(*) from water_log 
2019-04-06 14:44:13 -==> Parameters: 
2019-04-06 14:44:13 -<==      Total: 1
2019-04-06 14:44:13 -耗时 : 26
2019-04-06 14:44:13 -返回值 : com.bootdo.common.utils.PageUtils@7b01db52
2019-04-06 14:44:22 -WebSocketSession[1 current WS(1)-HttpStream(0)-HttpPoll(0), 1 total, 0 closed abnormally (0 connect failure, 0 send limit, 0 transport error)], stompSubProtocol[processed CONNECT(1)-CONNECTED(1)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 8, active threads = 0, queued tasks = 0, completed tasks = 9], outboundChannelpool size = 1, active threads = 0, queued tasks = 0, completed tasks = 1], sockJsScheduler[pool size = 4, active threads = 1, queued tasks = 2, completed tasks = 5]
2019-04-06 14:44:24 -请求地址 : http://localhost:8081/moneyLog/waterLog/edit/5
2019-04-06 14:44:24 -HTTP METHOD : GET
2019-04-06 14:44:24 -CLASS_METHOD : com.bootdo.moneyLog.controller.WaterLogController.edit
2019-04-06 14:44:24 -参数 : [5, {}]
2019-04-06 14:44:24 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,`water_type`,`water_money`,`water_date`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from water_log where id = ? 
2019-04-06 14:44:24 -==> Parameters: 5(Long)
2019-04-06 14:44:24 -<==      Total: 1
2019-04-06 14:44:24 -耗时 : 5
2019-04-06 14:44:24 -返回值 : moneyLog/waterLog/edit
2019-04-06 14:44:25 -请求地址 : http://localhost:8081/common/dict/list/waterType
2019-04-06 14:44:25 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-06 14:44:25 -HTTP METHOD : GET
2019-04-06 14:44:25 -HTTP METHOD : GET
2019-04-06 14:44:25 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-06 14:44:25 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-06 14:44:25 -参数 : [waterType]
2019-04-06 14:44:25 -参数 : [userType]
2019-04-06 14:44:25 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-06 14:44:25 -==> Parameters: waterType(String)
2019-04-06 14:44:25 -<==      Total: 6
2019-04-06 14:44:25 -耗时 : 16
2019-04-06 14:44:25 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-06 14:44:25 -返回值 : [DictDO{id=132, name='特殊水费4', value='5', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=131, name='特殊水费3', value='4', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=130, name='特殊水费2', value='3', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=129, name='特殊水费1', value='2', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=128, name='民用水', value='1', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=127, name='商业水', value='0', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-06 14:44:25 -==> Parameters: userType(String)
2019-04-06 14:44:25 -<==      Total: 2
2019-04-06 14:44:25 -耗时 : 21
2019-04-06 14:44:25 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-06 14:44:30 -请求地址 : http://localhost:8081/moneyLog/waterLog/update
2019-04-06 14:44:30 -HTTP METHOD : POST
2019-04-06 14:44:30 -CLASS_METHOD : com.bootdo.moneyLog.controller.WaterLogController.update
2019-04-06 14:44:30 -参数 : [com.bootdo.moneyLog.domain.WaterLogDO@29ffbca7]
2019-04-06 14:44:30 -==>  Preparing: update water_log SET `user_id` = ?, `user_name` = ?, `user_type` = ?, `user_org` = ?, `water_type` = ?, `water_money` = ?, `water_date` = ?, `create_time` = ?, `update_time` = ?, `update_by` = ?, `remark` = ? where id = ? 
2019-04-06 14:44:30 -==> Parameters: 6(String), 1(String), A(String), 2(String), 1(String), 1.00(BigDecimal), 2019-04-06 14:44:30.985(Timestamp), 2019-04(String), 2019-04-06 14:44:30.985(Timestamp), 1(Long), (String), 5(Long)
2019-04-06 14:44:31 -<==    Updates: 1
2019-04-06 14:44:31 -耗时 : 277
2019-04-06 14:44:31 -返回值 : {msg=操作成功, code=0}
2019-04-06 14:44:31 -请求地址 : http://localhost:8081/moneyLog/waterLog/list
2019-04-06 14:44:31 -HTTP METHOD : GET
2019-04-06 14:44:31 -CLASS_METHOD : com.bootdo.moneyLog.controller.WaterLogController.list
2019-04-06 14:44:31 -参数 : [{limit=10, offset=0, userType=, userOrg=, userId=, waterDate=}]
2019-04-06 14:44:31 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,`water_type`,`water_money`,`water_date`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from water_log order by id asc limit ?, ? 
2019-04-06 14:44:31 -==> Parameters: 0(Integer), 10(Integer)
2019-04-06 14:44:31 -<==      Total: 5
2019-04-06 14:44:31 -==>  Preparing: select count(*) from water_log 
2019-04-06 14:44:31 -==> Parameters: 
2019-04-06 14:44:31 -<==      Total: 1
2019-04-06 14:44:31 -耗时 : 37
2019-04-06 14:44:31 -返回值 : com.bootdo.common.utils.PageUtils@54a87736
2019-04-06 14:44:50 -请求地址 : http://localhost:8081/moneyLog/waterLog/edit/5
2019-04-06 14:44:50 -HTTP METHOD : GET
2019-04-06 14:44:50 -CLASS_METHOD : com.bootdo.moneyLog.controller.WaterLogController.edit
2019-04-06 14:44:50 -参数 : [5, {}]
2019-04-06 14:44:50 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,`water_type`,`water_money`,`water_date`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from water_log where id = ? 
2019-04-06 14:44:50 -==> Parameters: 5(Long)
2019-04-06 14:44:50 -<==      Total: 1
2019-04-06 14:44:50 -耗时 : 10
2019-04-06 14:44:50 -返回值 : moneyLog/waterLog/edit
2019-04-06 14:44:50 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-06 14:44:50 -HTTP METHOD : GET
2019-04-06 14:44:50 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-06 14:44:50 -参数 : [userType]
2019-04-06 14:44:50 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-06 14:44:50 -==> Parameters: userType(String)
2019-04-06 14:44:50 -请求地址 : http://localhost:8081/common/dict/list/waterType
2019-04-06 14:44:50 -HTTP METHOD : GET
2019-04-06 14:44:50 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-06 14:44:50 -参数 : [waterType]
2019-04-06 14:44:50 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-06 14:44:50 -==> Parameters: waterType(String)
2019-04-06 14:44:50 -<==      Total: 6
2019-04-06 14:44:50 -耗时 : 10
2019-04-06 14:44:50 -返回值 : [DictDO{id=132, name='特殊水费4', value='5', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=131, name='特殊水费3', value='4', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=130, name='特殊水费2', value='3', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=129, name='特殊水费1', value='2', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=128, name='民用水', value='1', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=127, name='商业水', value='0', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-06 14:44:50 -<==      Total: 2
2019-04-06 14:44:50 -耗时 : 83
2019-04-06 14:44:50 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-06 14:45:04 -请求地址 : http://localhost:8081/moneyLog/waterLog/update
2019-04-06 14:45:04 -HTTP METHOD : POST
2019-04-06 14:45:04 -CLASS_METHOD : com.bootdo.moneyLog.controller.WaterLogController.update
2019-04-06 14:45:04 -参数 : [com.bootdo.moneyLog.domain.WaterLogDO@47642dc7]
2019-04-06 14:45:04 -==>  Preparing: update water_log SET `user_id` = ?, `user_name` = ?, `user_type` = ?, `user_org` = ?, `water_type` = ?, `water_money` = ?, `water_date` = ?, `create_time` = ?, `update_time` = ?, `update_by` = ?, `remark` = ? where id = ? 
2019-04-06 14:45:04 -==> Parameters: 6(String), 7(String), A(String), 2(String), 1(String), 1.00(BigDecimal), 2019-04-06 14:45:04.049(Timestamp), 2019-04(String), 2019-04-06 14:45:04.049(Timestamp), 1(Long), (String), 5(Long)
2019-04-06 14:45:04 -<==    Updates: 1
2019-04-06 14:45:04 -耗时 : 99
2019-04-06 14:45:04 -返回值 : {msg=操作成功, code=0}
2019-04-06 14:45:04 -请求地址 : http://localhost:8081/moneyLog/waterLog/list
2019-04-06 14:45:04 -HTTP METHOD : GET
2019-04-06 14:45:04 -CLASS_METHOD : com.bootdo.moneyLog.controller.WaterLogController.list
2019-04-06 14:45:04 -参数 : [{limit=10, offset=0, userType=, userOrg=, userId=, waterDate=}]
2019-04-06 14:45:04 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,`water_type`,`water_money`,`water_date`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from water_log order by id asc limit ?, ? 
2019-04-06 14:45:04 -==> Parameters: 0(Integer), 10(Integer)
2019-04-06 14:45:04 -<==      Total: 5
2019-04-06 14:45:04 -==>  Preparing: select count(*) from water_log 
2019-04-06 14:45:04 -==> Parameters: 
2019-04-06 14:45:04 -<==      Total: 1
2019-04-06 14:45:04 -耗时 : 16
2019-04-06 14:45:04 -返回值 : com.bootdo.common.utils.PageUtils@1299798e
2019-04-06 14:46:42 -请求地址 : http://localhost:8081/index
2019-04-06 14:46:42 -HTTP METHOD : GET
2019-04-06 14:46:42 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2019-04-06 14:46:42 -参数 : [{}]
2019-04-06 14:46:42 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2019-04-06 14:46:42 -==> Parameters: 1(Long)
2019-04-06 14:46:42 -<==      Total: 46
2019-04-06 14:46:42 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2019-04-06 14:46:42 -==> Parameters: 138(Long)
2019-04-06 14:46:42 -<==      Total: 1
2019-04-06 14:46:42 -耗时 : 205
2019-04-06 14:46:42 -返回值 : index_v1
2019-04-06 14:46:42 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-06 14:46:42 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 205(Integer), com.bootdo.system.controller.LoginController.index()(String), {"menus":[{"attributes":{"icon":"fa fa-money","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-money","url":"/moneyList/moneyList"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"102","parentId":"106","text":"现金缴费"},{"attributes":{"icon":"fa fa-book","url":"/moneyLog/elecLog"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"107","parentId":"106","text":"缴费记录"}],"hasChildren":true,"hasParent":false,"id":"106","parentId":"0","text":"收费管理"},{"attributes":{"icon":"fa fa-lightbulb-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/elec/elec"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"121","parentId":"103","text":"电费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"elec/elecInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"122","parentId":"103","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"elec/elecUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"123","parentId":"103","text":"电表上传"},{"attributes":{"icon":"fa fa-cc","url":"/elec/elecPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"124","parentId":"103","text":"电价管理"}],"hasChildren":true,"hasParent":false,"id":"103","parentId":"0","text":"电费管理"},{"attributes":{"icon":"fa fa-tint","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/water/water"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"117","parentId":"105","text":"水费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"water/waterInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"118","parentId":"105","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"water/waterUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"119","parentId":"105","text":"水费生成"},{"attributes":{"icon":"fa fa-cc","url":"/water/waterPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"120","parentId":"105","text":"水价管理"}],"hasChildren":true,"hasParent":false,"id":"105","parentId":"0","text":"水费管理"},{"attributes":{"icon":"fa fa-fire","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/heat/heat"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"113","parentId":"104","text":"暖费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"heat/heatInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"114","parentId":"104","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"heat/heatUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"115","parentId":"104","text":"暖费生成"},{"attributes":{"icon":"","url":"/heat/heatPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"116","parentId":"104","text":"暖价管理"}],"hasChildren":true,"hasParent":false,"id":"104","parentId":"0","text":"暖费管理"},{"attributes":{"icon":"fa fa-vcard-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-bomb","url":"/print/print"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"149","parentId":"108","text":"票据记录"}],"hasChildren":true,"hasParent":false,"id":"108","parentId":"0","text":"票据管理"},{"attributes":{"icon":"fa fa-bar-chart","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-area-chart","url":"/chart/graph_echarts.html"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","text":"百度chart"},{"attributes":{"icon":"fa fa-sun-o","url":"charts/countDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"109","parentId":"97","text":"日统计报表"},{"attributes":{"icon":"fa fa-registered","url":"charts/countMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"110","parentId":"97","text":"月统计报表"},{"attributes":{"icon":"fa fa-support","url":"charts/countYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"111","parentId":"97","text":"年统计报表"},{"attributes":{"icon":"fa fa-money","url":"charts/countOwe"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"155","parentId":"97","text":"欠费报表图"},{"attributes":{"icon":"fa fa-tachometer","url":"charts/countRun"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"112","parentId":"97","text":"走势图报表"}],"hasChildren":true,"hasParent":false,"id":"97","parentId":"0","text":"统计管理"},{"attributes":{"icon":"fa fa-bars","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-book","url":"/common/dict"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"78","parentId":"1","text":"数据字典"},{"attributes":{"icon":"fa fa-folder-open","url":"/common/sysFile"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"71","parentId":"1","text":"文件管理"}],"h(String), 127.0.0.1(String), 2019-04-06 14:46:42.561(Timestamp)
2019-04-06 14:46:42 -<==    Updates: 1
2019-04-06 14:46:42 -请求地址 : http://localhost:8081/main
2019-04-06 14:46:42 -HTTP METHOD : GET
2019-04-06 14:46:42 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-06 14:46:42 -参数 : []
2019-04-06 14:46:42 -耗时 : 5
2019-04-06 14:46:42 -返回值 : main
2019-04-06 14:46:43 -请求地址 : http://localhost:8081/oa/notify/message
2019-04-06 14:46:43 -HTTP METHOD : GET
2019-04-06 14:46:43 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2019-04-06 14:46:43 -参数 : []
2019-04-06 14:46:43 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2019-04-06 14:46:43 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2019-04-06 14:46:43 -<==      Total: 0
2019-04-06 14:46:43 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2019-04-06 14:46:43 -==> Parameters: 1(Long), 0(String)
2019-04-06 14:46:43 -<==      Total: 1
2019-04-06 14:46:43 -耗时 : 50
2019-04-06 14:46:43 -返回值 : com.bootdo.common.utils.PageUtils@5f179e7c
2019-04-06 14:46:43 -请求地址 : http://localhost:8081/main
2019-04-06 14:46:43 -HTTP METHOD : GET
2019-04-06 14:46:43 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-06 14:46:43 -参数 : []
2019-04-06 14:46:43 -耗时 : 1
2019-04-06 14:46:43 -返回值 : main
2019-04-06 14:46:47 -请求地址 : http://localhost:8081/moneyLog/elecLog
2019-04-06 14:46:47 -HTTP METHOD : GET
2019-04-06 14:46:47 -CLASS_METHOD : com.bootdo.moneyLog.controller.ElecLogController.moneyLog
2019-04-06 14:46:47 -参数 : []
2019-04-06 14:46:47 -耗时 : 1
2019-04-06 14:46:47 -返回值 : /moneyLog/elecLog/elecLog
2019-04-06 14:46:48 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-06 14:46:48 -HTTP METHOD : GET
2019-04-06 14:46:48 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-06 14:46:48 -参数 : [userType]
2019-04-06 14:46:48 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-06 14:46:48 -==> Parameters: userType(String)
2019-04-06 14:46:48 -<==      Total: 2
2019-04-06 14:46:48 -耗时 : 5
2019-04-06 14:46:48 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-06 14:46:48 -请求地址 : http://localhost:8081/moneyLog/elecLog/list
2019-04-06 14:46:48 -HTTP METHOD : GET
2019-04-06 14:46:48 -CLASS_METHOD : com.bootdo.moneyLog.controller.ElecLogController.list
2019-04-06 14:46:48 -参数 : [{limit=10, offset=0, userType=, userOrg=, userId=, elecDate=}]
2019-04-06 14:46:48 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`elec_type`,`elec_money`,`elec_date`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec_log order by id asc limit ?, ? 
2019-04-06 14:46:48 -==> Parameters: 0(Integer), 10(Integer)
2019-04-06 14:46:48 -<==      Total: 7
2019-04-06 14:46:48 -==>  Preparing: select count(*) from elec_log 
2019-04-06 14:46:48 -==> Parameters: 
2019-04-06 14:46:48 -<==      Total: 1
2019-04-06 14:46:48 -耗时 : 33
2019-04-06 14:46:48 -返回值 : com.bootdo.common.utils.PageUtils@c680bc6
2019-04-06 14:46:49 -请求地址 : http://localhost:8081/moneyLog/waterLog
2019-04-06 14:46:49 -HTTP METHOD : GET
2019-04-06 14:46:49 -CLASS_METHOD : com.bootdo.moneyLog.controller.WaterLogController.WaterLog
2019-04-06 14:46:49 -参数 : []
2019-04-06 14:46:49 -耗时 : 1
2019-04-06 14:46:49 -返回值 : /moneyLog/waterLog/waterLog
2019-04-06 14:46:50 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-06 14:46:50 -HTTP METHOD : GET
2019-04-06 14:46:50 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-06 14:46:50 -参数 : [userType]
2019-04-06 14:46:50 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-06 14:46:50 -==> Parameters: userType(String)
2019-04-06 14:46:50 -<==      Total: 2
2019-04-06 14:46:50 -耗时 : 9
2019-04-06 14:46:50 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-06 14:46:50 -请求地址 : http://localhost:8081/moneyLog/waterLog/list
2019-04-06 14:46:50 -HTTP METHOD : GET
2019-04-06 14:46:50 -CLASS_METHOD : com.bootdo.moneyLog.controller.WaterLogController.list
2019-04-06 14:46:50 -参数 : [{limit=10, offset=0, userType=, userOrg=, userId=, waterDate=}]
2019-04-06 14:46:50 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,`water_type`,`water_money`,`water_date`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from water_log order by id asc limit ?, ? 
2019-04-06 14:46:50 -==> Parameters: 0(Integer), 10(Integer)
2019-04-06 14:46:50 -<==      Total: 5
2019-04-06 14:46:50 -==>  Preparing: select count(*) from water_log 
2019-04-06 14:46:50 -==> Parameters: 
2019-04-06 14:46:50 -<==      Total: 1
2019-04-06 14:46:50 -耗时 : 15
2019-04-06 14:46:50 -返回值 : com.bootdo.common.utils.PageUtils@5af8ca50
2019-04-06 14:46:55 -请求地址 : http://localhost:8081/moneyLog/waterLog/edit/5
2019-04-06 14:46:55 -HTTP METHOD : GET
2019-04-06 14:46:55 -CLASS_METHOD : com.bootdo.moneyLog.controller.WaterLogController.edit
2019-04-06 14:46:55 -参数 : [5, {}]
2019-04-06 14:46:55 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,`water_type`,`water_money`,`water_date`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from water_log where id = ? 
2019-04-06 14:46:55 -==> Parameters: 5(Long)
2019-04-06 14:46:55 -<==      Total: 1
2019-04-06 14:46:55 -耗时 : 4
2019-04-06 14:46:55 -返回值 : moneyLog/waterLog/edit
2019-04-06 14:46:55 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-06 14:46:55 -HTTP METHOD : GET
2019-04-06 14:46:55 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-06 14:46:55 -参数 : [userType]
2019-04-06 14:46:55 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-06 14:46:55 -==> Parameters: userType(String)
2019-04-06 14:46:55 -请求地址 : http://localhost:8081/common/dict/list/waterType
2019-04-06 14:46:55 -HTTP METHOD : GET
2019-04-06 14:46:55 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-06 14:46:55 -参数 : [waterType]
2019-04-06 14:46:55 -<==      Total: 2
2019-04-06 14:46:55 -耗时 : 7
2019-04-06 14:46:55 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-06 14:46:55 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-06 14:46:55 -==> Parameters: waterType(String)
2019-04-06 14:46:55 -<==      Total: 6
2019-04-06 14:46:55 -耗时 : 14
2019-04-06 14:46:55 -返回值 : [DictDO{id=132, name='特殊水费4', value='5', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=131, name='特殊水费3', value='4', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=130, name='特殊水费2', value='3', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=129, name='特殊水费1', value='2', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=128, name='民用水', value='1', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=127, name='商业水', value='0', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-06 14:46:56 -请求地址 : http://localhost:8081/moneyLog/waterLog/update
2019-04-06 14:46:56 -HTTP METHOD : POST
2019-04-06 14:46:56 -CLASS_METHOD : com.bootdo.moneyLog.controller.WaterLogController.update
2019-04-06 14:46:56 -参数 : [com.bootdo.moneyLog.domain.WaterLogDO@230e0089]
2019-04-06 14:46:56 -==>  Preparing: update water_log SET `user_id` = ?, `user_name` = ?, `user_type` = ?, `user_org` = ?, `water_type` = ?, `water_money` = ?, `water_date` = ?, `create_time` = ?, `update_time` = ?, `update_by` = ?, `remark` = ? where id = ? 
2019-04-06 14:46:56 -==> Parameters: 6(String), 7(String), A(String), 2(String), 1(String), 1.00(BigDecimal), 2019-04-06 14:46:56.85(Timestamp), 2019-04(String), 2019-04-06 14:46:56.85(Timestamp), 1(Long), (String), 5(Long)
2019-04-06 14:46:56 -<==    Updates: 1
2019-04-06 14:46:56 -耗时 : 111
2019-04-06 14:46:56 -返回值 : {msg=操作成功, code=0}
2019-04-06 14:46:56 -请求地址 : http://localhost:8081/moneyLog/waterLog/list
2019-04-06 14:46:56 -HTTP METHOD : GET
2019-04-06 14:46:56 -CLASS_METHOD : com.bootdo.moneyLog.controller.WaterLogController.list
2019-04-06 14:46:56 -参数 : [{limit=10, offset=0, userType=, userOrg=, userId=, waterDate=}]
2019-04-06 14:46:56 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,`water_type`,`water_money`,`water_date`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from water_log order by id asc limit ?, ? 
2019-04-06 14:46:56 -==> Parameters: 0(Integer), 10(Integer)
2019-04-06 14:46:56 -<==      Total: 5
2019-04-06 14:46:56 -==>  Preparing: select count(*) from water_log 
2019-04-06 14:46:56 -==> Parameters: 
2019-04-06 14:46:56 -<==      Total: 1
2019-04-06 14:46:56 -耗时 : 16
2019-04-06 14:46:56 -返回值 : com.bootdo.common.utils.PageUtils@4493d575
2019-04-06 14:47:37 -请求地址 : http://localhost:8081/index
2019-04-06 14:47:37 -HTTP METHOD : GET
2019-04-06 14:47:37 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2019-04-06 14:47:37 -参数 : [{}]
2019-04-06 14:47:37 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2019-04-06 14:47:37 -==> Parameters: 1(Long)
2019-04-06 14:47:38 -<==      Total: 46
2019-04-06 14:47:38 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2019-04-06 14:47:38 -==> Parameters: 138(Long)
2019-04-06 14:47:38 -<==      Total: 1
2019-04-06 14:47:38 -耗时 : 252
2019-04-06 14:47:38 -返回值 : index_v1
2019-04-06 14:47:38 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-06 14:47:38 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 252(Integer), com.bootdo.system.controller.LoginController.index()(String), {"menus":[{"attributes":{"icon":"fa fa-money","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-money","url":"/moneyList/moneyList"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"102","parentId":"106","text":"现金缴费"},{"attributes":{"icon":"fa fa-book","url":"/moneyLog/elecLog"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"107","parentId":"106","text":"缴费记录"}],"hasChildren":true,"hasParent":false,"id":"106","parentId":"0","text":"收费管理"},{"attributes":{"icon":"fa fa-lightbulb-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/elec/elec"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"121","parentId":"103","text":"电费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"elec/elecInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"122","parentId":"103","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"elec/elecUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"123","parentId":"103","text":"电表上传"},{"attributes":{"icon":"fa fa-cc","url":"/elec/elecPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"124","parentId":"103","text":"电价管理"}],"hasChildren":true,"hasParent":false,"id":"103","parentId":"0","text":"电费管理"},{"attributes":{"icon":"fa fa-tint","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/water/water"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"117","parentId":"105","text":"水费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"water/waterInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"118","parentId":"105","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"water/waterUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"119","parentId":"105","text":"水费生成"},{"attributes":{"icon":"fa fa-cc","url":"/water/waterPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"120","parentId":"105","text":"水价管理"}],"hasChildren":true,"hasParent":false,"id":"105","parentId":"0","text":"水费管理"},{"attributes":{"icon":"fa fa-fire","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/heat/heat"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"113","parentId":"104","text":"暖费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"heat/heatInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"114","parentId":"104","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"heat/heatUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"115","parentId":"104","text":"暖费生成"},{"attributes":{"icon":"","url":"/heat/heatPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"116","parentId":"104","text":"暖价管理"}],"hasChildren":true,"hasParent":false,"id":"104","parentId":"0","text":"暖费管理"},{"attributes":{"icon":"fa fa-vcard-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-bomb","url":"/print/print"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"149","parentId":"108","text":"票据记录"}],"hasChildren":true,"hasParent":false,"id":"108","parentId":"0","text":"票据管理"},{"attributes":{"icon":"fa fa-bar-chart","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-area-chart","url":"/chart/graph_echarts.html"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","text":"百度chart"},{"attributes":{"icon":"fa fa-sun-o","url":"charts/countDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"109","parentId":"97","text":"日统计报表"},{"attributes":{"icon":"fa fa-registered","url":"charts/countMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"110","parentId":"97","text":"月统计报表"},{"attributes":{"icon":"fa fa-money","url":"charts/countOwe"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"155","parentId":"97","text":"欠费报表图"},{"attributes":{"icon":"fa fa-support","url":"charts/countYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"111","parentId":"97","text":"年统计报表"},{"attributes":{"icon":"fa fa-tachometer","url":"charts/countRun"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"112","parentId":"97","text":"走势图报表"}],"hasChildren":true,"hasParent":false,"id":"97","parentId":"0","text":"统计管理"},{"attributes":{"icon":"fa fa-bars","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-book","url":"/common/dict"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"78","parentId":"1","text":"数据字典"},{"attributes":{"icon":"fa fa-folder-open","url":"/common/sysFile"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"71","parentId":"1","text":"文件管理"}],"h(String), 127.0.0.1(String), 2019-04-06 14:47:38.136(Timestamp)
2019-04-06 14:47:38 -请求地址 : http://localhost:8081/main
2019-04-06 14:47:38 -HTTP METHOD : GET
2019-04-06 14:47:38 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-06 14:47:38 -参数 : []
2019-04-06 14:47:38 -耗时 : 0
2019-04-06 14:47:38 -返回值 : main
2019-04-06 14:47:38 -<==    Updates: 1
2019-04-06 14:47:38 -请求地址 : http://localhost:8081/oa/notify/message
2019-04-06 14:47:38 -HTTP METHOD : GET
2019-04-06 14:47:38 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2019-04-06 14:47:38 -参数 : []
2019-04-06 14:47:38 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2019-04-06 14:47:38 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2019-04-06 14:47:38 -<==      Total: 0
2019-04-06 14:47:38 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2019-04-06 14:47:38 -==> Parameters: 1(Long), 0(String)
2019-04-06 14:47:38 -<==      Total: 1
2019-04-06 14:47:38 -耗时 : 7
2019-04-06 14:47:38 -返回值 : com.bootdo.common.utils.PageUtils@5b2bc200
2019-04-06 14:47:38 -请求地址 : http://localhost:8081/main
2019-04-06 14:47:38 -HTTP METHOD : GET
2019-04-06 14:47:38 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-06 14:47:38 -参数 : []
2019-04-06 14:47:38 -耗时 : 1
2019-04-06 14:47:38 -返回值 : main
2019-04-06 14:47:45 -请求地址 : http://localhost:8081/moneyLog/elecLog
2019-04-06 14:47:45 -HTTP METHOD : GET
2019-04-06 14:47:45 -CLASS_METHOD : com.bootdo.moneyLog.controller.ElecLogController.moneyLog
2019-04-06 14:47:45 -参数 : []
2019-04-06 14:47:45 -耗时 : 0
2019-04-06 14:47:45 -返回值 : /moneyLog/elecLog/elecLog
2019-04-06 14:47:45 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-06 14:47:45 -HTTP METHOD : GET
2019-04-06 14:47:45 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-06 14:47:45 -参数 : [userType]
2019-04-06 14:47:45 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-06 14:47:45 -==> Parameters: userType(String)
2019-04-06 14:47:45 -<==      Total: 2
2019-04-06 14:47:45 -耗时 : 9
2019-04-06 14:47:45 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-06 14:47:46 -请求地址 : http://localhost:8081/moneyLog/elecLog/list
2019-04-06 14:47:46 -HTTP METHOD : GET
2019-04-06 14:47:46 -CLASS_METHOD : com.bootdo.moneyLog.controller.ElecLogController.list
2019-04-06 14:47:46 -参数 : [{limit=10, offset=0, userType=, userOrg=, userId=, elecDate=}]
2019-04-06 14:47:46 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`elec_type`,`elec_money`,`elec_date`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec_log order by id asc limit ?, ? 
2019-04-06 14:47:46 -==> Parameters: 0(Integer), 10(Integer)
2019-04-06 14:47:46 -<==      Total: 7
2019-04-06 14:47:46 -==>  Preparing: select count(*) from elec_log 
2019-04-06 14:47:46 -==> Parameters: 
2019-04-06 14:47:46 -<==      Total: 1
2019-04-06 14:47:46 -耗时 : 21
2019-04-06 14:47:46 -返回值 : com.bootdo.common.utils.PageUtils@163ba328
2019-04-06 14:47:47 -请求地址 : http://localhost:8081/moneyLog/waterLog
2019-04-06 14:47:47 -HTTP METHOD : GET
2019-04-06 14:47:47 -CLASS_METHOD : com.bootdo.moneyLog.controller.WaterLogController.WaterLog
2019-04-06 14:47:47 -参数 : []
2019-04-06 14:47:47 -耗时 : 2
2019-04-06 14:47:47 -返回值 : /moneyLog/waterLog/waterLog
2019-04-06 14:47:47 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-06 14:47:47 -HTTP METHOD : GET
2019-04-06 14:47:47 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-06 14:47:47 -参数 : [userType]
2019-04-06 14:47:47 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-06 14:47:47 -==> Parameters: userType(String)
2019-04-06 14:47:47 -<==      Total: 2
2019-04-06 14:47:47 -耗时 : 8
2019-04-06 14:47:47 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-06 14:47:47 -请求地址 : http://localhost:8081/moneyLog/waterLog/list
2019-04-06 14:47:47 -HTTP METHOD : GET
2019-04-06 14:47:47 -CLASS_METHOD : com.bootdo.moneyLog.controller.WaterLogController.list
2019-04-06 14:47:47 -参数 : [{limit=10, offset=0, userType=, userOrg=, userId=, waterDate=}]
2019-04-06 14:47:47 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,`water_type`,`water_money`,`water_date`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from water_log order by id asc limit ?, ? 
2019-04-06 14:47:47 -==> Parameters: 0(Integer), 10(Integer)
2019-04-06 14:47:47 -<==      Total: 5
2019-04-06 14:47:47 -==>  Preparing: select count(*) from water_log 
2019-04-06 14:47:47 -==> Parameters: 
2019-04-06 14:47:47 -<==      Total: 1
2019-04-06 14:47:47 -耗时 : 9
2019-04-06 14:47:47 -返回值 : com.bootdo.common.utils.PageUtils@5751e01e
2019-04-06 14:47:48 -请求地址 : http://localhost:8081/moneyLog/waterLog/edit/5
2019-04-06 14:47:48 -HTTP METHOD : GET
2019-04-06 14:47:48 -CLASS_METHOD : com.bootdo.moneyLog.controller.WaterLogController.edit
2019-04-06 14:47:48 -参数 : [5, {}]
2019-04-06 14:47:48 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,`water_type`,`water_money`,`water_date`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from water_log where id = ? 
2019-04-06 14:47:48 -==> Parameters: 5(Long)
2019-04-06 14:47:48 -<==      Total: 1
2019-04-06 14:47:48 -耗时 : 5
2019-04-06 14:47:48 -返回值 : moneyLog/waterLog/edit
2019-04-06 14:47:48 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-06 14:47:48 -HTTP METHOD : GET
2019-04-06 14:47:48 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-06 14:47:48 -参数 : [userType]
2019-04-06 14:47:48 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-06 14:47:48 -==> Parameters: userType(String)
2019-04-06 14:47:48 -请求地址 : http://localhost:8081/common/dict/list/waterType
2019-04-06 14:47:48 -HTTP METHOD : GET
2019-04-06 14:47:48 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-06 14:47:48 -参数 : [waterType]
2019-04-06 14:47:48 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-06 14:47:48 -==> Parameters: waterType(String)
2019-04-06 14:47:48 -<==      Total: 2
2019-04-06 14:47:48 -耗时 : 5
2019-04-06 14:47:48 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-06 14:47:48 -<==      Total: 6
2019-04-06 14:47:48 -耗时 : 5
2019-04-06 14:47:48 -返回值 : [DictDO{id=132, name='特殊水费4', value='5', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=131, name='特殊水费3', value='4', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=130, name='特殊水费2', value='3', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=129, name='特殊水费1', value='2', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=128, name='民用水', value='1', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=127, name='商业水', value='0', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-06 14:47:52 -请求地址 : http://localhost:8081/moneyLog/waterLog/update
2019-04-06 14:47:52 -HTTP METHOD : POST
2019-04-06 14:47:52 -CLASS_METHOD : com.bootdo.moneyLog.controller.WaterLogController.update
2019-04-06 14:47:52 -参数 : [com.bootdo.moneyLog.domain.WaterLogDO@23ac5894]
2019-04-06 14:47:52 -==>  Preparing: update water_log SET `user_id` = ?, `user_name` = ?, `user_type` = ?, `user_org` = ?, `water_type` = ?, `water_money` = ?, `water_date` = ?, `create_time` = ?, `update_time` = ?, `update_by` = ?, `remark` = ? where id = ? 
2019-04-06 14:47:52 -==> Parameters: 6(String), 7(String), A(String), 2(String), 1(String), 1.00(BigDecimal), 2019-04-06 14:47:52.992(Timestamp), 2019-04(String), 2019-04-06 14:47:52.992(Timestamp), 1(Long), (String), 5(Long)
2019-04-06 14:47:53 -<==    Updates: 1
2019-04-06 14:47:53 -耗时 : 194
2019-04-06 14:47:53 -返回值 : {msg=操作成功, code=0}
2019-04-06 14:47:53 -请求地址 : http://localhost:8081/moneyLog/waterLog/list
2019-04-06 14:47:53 -HTTP METHOD : GET
2019-04-06 14:47:53 -CLASS_METHOD : com.bootdo.moneyLog.controller.WaterLogController.list
2019-04-06 14:47:53 -参数 : [{limit=10, offset=0, userType=, userOrg=, userId=, waterDate=}]
2019-04-06 14:47:53 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,`water_type`,`water_money`,`water_date`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from water_log order by id asc limit ?, ? 
2019-04-06 14:47:53 -==> Parameters: 0(Integer), 10(Integer)
2019-04-06 14:47:53 -<==      Total: 5
2019-04-06 14:47:53 -==>  Preparing: select count(*) from water_log 
2019-04-06 14:47:53 -==> Parameters: 
2019-04-06 14:47:53 -<==      Total: 1
2019-04-06 14:47:53 -耗时 : 8
2019-04-06 14:47:53 -返回值 : com.bootdo.common.utils.PageUtils@28f7684
2019-04-06 14:48:47 -请求地址 : http://localhost:8081/moneyLog/waterLog/edit/5
2019-04-06 14:48:47 -HTTP METHOD : GET
2019-04-06 14:48:47 -CLASS_METHOD : com.bootdo.moneyLog.controller.WaterLogController.edit
2019-04-06 14:48:47 -参数 : [5, {}]
2019-04-06 14:48:47 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,`water_type`,`water_money`,`water_date`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from water_log where id = ? 
2019-04-06 14:48:47 -==> Parameters: 5(Long)
2019-04-06 14:48:47 -<==      Total: 1
2019-04-06 14:48:47 -耗时 : 5
2019-04-06 14:48:47 -返回值 : moneyLog/waterLog/edit
2019-04-06 14:48:48 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-06 14:48:48 -HTTP METHOD : GET
2019-04-06 14:48:48 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-06 14:48:48 -参数 : [userType]
2019-04-06 14:48:48 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-06 14:48:48 -==> Parameters: userType(String)
2019-04-06 14:48:48 -请求地址 : http://localhost:8081/common/dict/list/waterType
2019-04-06 14:48:48 -HTTP METHOD : GET
2019-04-06 14:48:48 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-06 14:48:48 -参数 : [waterType]
2019-04-06 14:48:48 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-06 14:48:48 -==> Parameters: waterType(String)
2019-04-06 14:48:48 -<==      Total: 2
2019-04-06 14:48:48 -耗时 : 5
2019-04-06 14:48:48 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-06 14:48:48 -<==      Total: 6
2019-04-06 14:48:48 -耗时 : 6
2019-04-06 14:48:48 -返回值 : [DictDO{id=132, name='特殊水费4', value='5', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=131, name='特殊水费3', value='4', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=130, name='特殊水费2', value='3', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=129, name='特殊水费1', value='2', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=128, name='民用水', value='1', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=127, name='商业水', value='0', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-06 14:48:52 -请求地址 : http://localhost:8081/moneyLog/waterLog/update
2019-04-06 14:48:52 -HTTP METHOD : POST
2019-04-06 14:48:52 -CLASS_METHOD : com.bootdo.moneyLog.controller.WaterLogController.update
2019-04-06 14:48:52 -参数 : [com.bootdo.moneyLog.domain.WaterLogDO@606b9ec6]
2019-04-06 14:48:52 -==>  Preparing: update water_log SET `user_id` = ?, `user_name` = ?, `user_type` = ?, `user_org` = ?, `water_type` = ?, `water_money` = ?, `water_date` = ?, `create_time` = ?, `update_time` = ?, `update_by` = ?, `remark` = ? where id = ? 
2019-04-06 14:48:52 -==> Parameters: 6(String), 7(String), A(String), 2(String), 1(String), 1.00(BigDecimal), 2019-04-06 14:48:52.324(Timestamp), 2019-04(String), 2019-04-06 14:48:52.324(Timestamp), 1(Long), (String), 5(Long)
2019-04-06 14:48:52 -<==    Updates: 1
2019-04-06 14:48:52 -耗时 : 130
2019-04-06 14:48:52 -返回值 : {msg=操作成功, code=0}
2019-04-06 14:48:52 -请求地址 : http://localhost:8081/moneyLog/waterLog/list
2019-04-06 14:48:52 -HTTP METHOD : GET
2019-04-06 14:48:52 -CLASS_METHOD : com.bootdo.moneyLog.controller.WaterLogController.list
2019-04-06 14:48:52 -参数 : [{limit=10, offset=0, userType=, userOrg=, userId=, waterDate=}]
2019-04-06 14:48:52 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,`water_type`,`water_money`,`water_date`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from water_log order by id asc limit ?, ? 
2019-04-06 14:48:52 -==> Parameters: 0(Integer), 10(Integer)
2019-04-06 14:48:52 -<==      Total: 5
2019-04-06 14:48:52 -==>  Preparing: select count(*) from water_log 
2019-04-06 14:48:52 -==> Parameters: 
2019-04-06 14:48:52 -<==      Total: 1
2019-04-06 14:48:52 -耗时 : 8
2019-04-06 14:48:52 -返回值 : com.bootdo.common.utils.PageUtils@21dcb14d
2019-04-06 14:51:09 -请求地址 : http://localhost:8081/index
2019-04-06 14:51:09 -HTTP METHOD : GET
2019-04-06 14:51:09 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2019-04-06 14:51:09 -参数 : [{}]
2019-04-06 14:51:10 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2019-04-06 14:51:10 -==> Parameters: 1(Long)
2019-04-06 14:51:10 -<==      Total: 46
2019-04-06 14:51:10 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2019-04-06 14:51:10 -==> Parameters: 138(Long)
2019-04-06 14:51:10 -<==      Total: 1
2019-04-06 14:51:10 -耗时 : 30
2019-04-06 14:51:10 -返回值 : index_v1
2019-04-06 14:51:10 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-06 14:51:10 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 31(Integer), com.bootdo.system.controller.LoginController.index()(String), {"menus":[{"attributes":{"icon":"fa fa-money","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-money","url":"/moneyList/moneyList"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"102","parentId":"106","text":"现金缴费"},{"attributes":{"icon":"fa fa-book","url":"/moneyLog/elecLog"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"107","parentId":"106","text":"缴费记录"}],"hasChildren":true,"hasParent":false,"id":"106","parentId":"0","text":"收费管理"},{"attributes":{"icon":"fa fa-lightbulb-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/elec/elec"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"121","parentId":"103","text":"电费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"elec/elecInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"122","parentId":"103","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"elec/elecUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"123","parentId":"103","text":"电表上传"},{"attributes":{"icon":"fa fa-cc","url":"/elec/elecPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"124","parentId":"103","text":"电价管理"}],"hasChildren":true,"hasParent":false,"id":"103","parentId":"0","text":"电费管理"},{"attributes":{"icon":"fa fa-tint","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/water/water"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"117","parentId":"105","text":"水费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"water/waterInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"118","parentId":"105","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"water/waterUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"119","parentId":"105","text":"水费生成"},{"attributes":{"icon":"fa fa-cc","url":"/water/waterPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"120","parentId":"105","text":"水价管理"}],"hasChildren":true,"hasParent":false,"id":"105","parentId":"0","text":"水费管理"},{"attributes":{"icon":"fa fa-fire","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/heat/heat"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"113","parentId":"104","text":"暖费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"heat/heatInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"114","parentId":"104","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"heat/heatUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"115","parentId":"104","text":"暖费生成"},{"attributes":{"icon":"","url":"/heat/heatPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"116","parentId":"104","text":"暖价管理"}],"hasChildren":true,"hasParent":false,"id":"104","parentId":"0","text":"暖费管理"},{"attributes":{"icon":"fa fa-vcard-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-bomb","url":"/print/print"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"149","parentId":"108","text":"票据记录"}],"hasChildren":true,"hasParent":false,"id":"108","parentId":"0","text":"票据管理"},{"attributes":{"icon":"fa fa-bar-chart","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-area-chart","url":"/chart/graph_echarts.html"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","text":"百度chart"},{"attributes":{"icon":"fa fa-sun-o","url":"charts/countDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"109","parentId":"97","text":"日统计报表"},{"attributes":{"icon":"fa fa-registered","url":"charts/countMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"110","parentId":"97","text":"月统计报表"},{"attributes":{"icon":"fa fa-support","url":"charts/countYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"111","parentId":"97","text":"年统计报表"},{"attributes":{"icon":"fa fa-money","url":"charts/countOwe"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"155","parentId":"97","text":"欠费报表图"},{"attributes":{"icon":"fa fa-tachometer","url":"charts/countRun"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"112","parentId":"97","text":"走势图报表"}],"hasChildren":true,"hasParent":false,"id":"97","parentId":"0","text":"统计管理"},{"attributes":{"icon":"fa fa-bars","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-book","url":"/common/dict"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"78","parentId":"1","text":"数据字典"},{"attributes":{"icon":"fa fa-folder-open","url":"/common/sysFile"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"71","parentId":"1","text":"文件管理"}],"h(String), 127.0.0.1(String), 2019-04-06 14:51:10.026(Timestamp)
2019-04-06 14:51:10 -请求地址 : http://localhost:8081/main
2019-04-06 14:51:10 -HTTP METHOD : GET
2019-04-06 14:51:10 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-06 14:51:10 -参数 : []
2019-04-06 14:51:10 -耗时 : 1
2019-04-06 14:51:10 -返回值 : main
2019-04-06 14:51:10 -<==    Updates: 1
2019-04-06 14:51:10 -请求地址 : http://localhost:8081/oa/notify/message
2019-04-06 14:51:10 -HTTP METHOD : GET
2019-04-06 14:51:10 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2019-04-06 14:51:10 -参数 : []
2019-04-06 14:51:10 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2019-04-06 14:51:10 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2019-04-06 14:51:10 -<==      Total: 0
2019-04-06 14:51:10 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2019-04-06 14:51:10 -==> Parameters: 1(Long), 0(String)
2019-04-06 14:51:10 -<==      Total: 1
2019-04-06 14:51:10 -耗时 : 6
2019-04-06 14:51:10 -返回值 : com.bootdo.common.utils.PageUtils@122843bb
2019-04-06 14:51:10 -请求地址 : http://localhost:8081/main
2019-04-06 14:51:10 -HTTP METHOD : GET
2019-04-06 14:51:10 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-06 14:51:10 -参数 : []
2019-04-06 14:51:10 -耗时 : 1
2019-04-06 14:51:10 -返回值 : main
2019-04-06 14:51:12 -请求地址 : http://localhost:8081/moneyLog/elecLog
2019-04-06 14:51:12 -HTTP METHOD : GET
2019-04-06 14:51:12 -CLASS_METHOD : com.bootdo.moneyLog.controller.ElecLogController.moneyLog
2019-04-06 14:51:12 -参数 : []
2019-04-06 14:51:12 -耗时 : 1
2019-04-06 14:51:12 -返回值 : /moneyLog/elecLog/elecLog
2019-04-06 14:51:13 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-06 14:51:13 -HTTP METHOD : GET
2019-04-06 14:51:13 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-06 14:51:13 -参数 : [userType]
2019-04-06 14:51:13 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-06 14:51:13 -==> Parameters: userType(String)
2019-04-06 14:51:13 -<==      Total: 2
2019-04-06 14:51:13 -耗时 : 4
2019-04-06 14:51:13 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-06 14:51:13 -请求地址 : http://localhost:8081/moneyLog/elecLog/list
2019-04-06 14:51:13 -HTTP METHOD : GET
2019-04-06 14:51:13 -CLASS_METHOD : com.bootdo.moneyLog.controller.ElecLogController.list
2019-04-06 14:51:13 -参数 : [{limit=10, offset=0, userType=, userOrg=, userId=, elecDate=}]
2019-04-06 14:51:13 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`elec_type`,`elec_money`,`elec_date`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec_log order by id asc limit ?, ? 
2019-04-06 14:51:13 -==> Parameters: 0(Integer), 10(Integer)
2019-04-06 14:51:13 -<==      Total: 7
2019-04-06 14:51:13 -==>  Preparing: select count(*) from elec_log 
2019-04-06 14:51:13 -==> Parameters: 
2019-04-06 14:51:13 -<==      Total: 1
2019-04-06 14:51:13 -耗时 : 9
2019-04-06 14:51:13 -返回值 : com.bootdo.common.utils.PageUtils@80a152f
2019-04-06 14:51:13 -请求地址 : http://localhost:8081/moneyLog/waterLog
2019-04-06 14:51:13 -HTTP METHOD : GET
2019-04-06 14:51:13 -CLASS_METHOD : com.bootdo.moneyLog.controller.WaterLogController.WaterLog
2019-04-06 14:51:13 -参数 : []
2019-04-06 14:51:13 -耗时 : 0
2019-04-06 14:51:13 -返回值 : /moneyLog/waterLog/waterLog
2019-04-06 14:51:14 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-06 14:51:14 -HTTP METHOD : GET
2019-04-06 14:51:14 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-06 14:51:14 -参数 : [userType]
2019-04-06 14:51:14 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-06 14:51:14 -==> Parameters: userType(String)
2019-04-06 14:51:14 -<==      Total: 2
2019-04-06 14:51:14 -耗时 : 7
2019-04-06 14:51:14 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-06 14:51:14 -请求地址 : http://localhost:8081/moneyLog/waterLog/list
2019-04-06 14:51:14 -HTTP METHOD : GET
2019-04-06 14:51:14 -CLASS_METHOD : com.bootdo.moneyLog.controller.WaterLogController.list
2019-04-06 14:51:14 -参数 : [{limit=10, offset=0, userType=, userOrg=, userId=, waterDate=}]
2019-04-06 14:51:14 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,`water_type`,`water_money`,`water_date`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from water_log order by id asc limit ?, ? 
2019-04-06 14:51:14 -==> Parameters: 0(Integer), 10(Integer)
2019-04-06 14:51:14 -<==      Total: 5
2019-04-06 14:51:14 -==>  Preparing: select count(*) from water_log 
2019-04-06 14:51:14 -==> Parameters: 
2019-04-06 14:51:14 -<==      Total: 1
2019-04-06 14:51:14 -耗时 : 8
2019-04-06 14:51:14 -返回值 : com.bootdo.common.utils.PageUtils@128915fb
2019-04-06 14:51:15 -请求地址 : http://localhost:8081/moneyLog/waterLog/edit/5
2019-04-06 14:51:15 -HTTP METHOD : GET
2019-04-06 14:51:15 -CLASS_METHOD : com.bootdo.moneyLog.controller.WaterLogController.edit
2019-04-06 14:51:15 -参数 : [5, {}]
2019-04-06 14:51:15 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,`water_type`,`water_money`,`water_date`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from water_log where id = ? 
2019-04-06 14:51:15 -==> Parameters: 5(Long)
2019-04-06 14:51:15 -<==      Total: 1
2019-04-06 14:51:15 -耗时 : 8
2019-04-06 14:51:15 -返回值 : moneyLog/waterLog/edit
2019-04-06 14:51:15 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-06 14:51:15 -HTTP METHOD : GET
2019-04-06 14:51:15 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-06 14:51:15 -参数 : [userType]
2019-04-06 14:51:15 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-06 14:51:15 -==> Parameters: userType(String)
2019-04-06 14:51:15 -请求地址 : http://localhost:8081/common/dict/list/waterType
2019-04-06 14:51:15 -HTTP METHOD : GET
2019-04-06 14:51:15 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-06 14:51:15 -参数 : [waterType]
2019-04-06 14:51:15 -<==      Total: 2
2019-04-06 14:51:15 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-06 14:51:15 -耗时 : 7
2019-04-06 14:51:15 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-06 14:51:15 -==> Parameters: waterType(String)
2019-04-06 14:51:15 -<==      Total: 6
2019-04-06 14:51:15 -耗时 : 10
2019-04-06 14:51:15 -返回值 : [DictDO{id=132, name='特殊水费4', value='5', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=131, name='特殊水费3', value='4', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=130, name='特殊水费2', value='3', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=129, name='特殊水费1', value='2', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=128, name='民用水', value='1', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=127, name='商业水', value='0', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-06 14:51:23 -请求地址 : http://localhost:8081/moneyLog/waterLog/update
2019-04-06 14:51:23 -HTTP METHOD : POST
2019-04-06 14:51:23 -CLASS_METHOD : com.bootdo.moneyLog.controller.WaterLogController.update
2019-04-06 14:51:23 -参数 : [com.bootdo.moneyLog.domain.WaterLogDO@647392bd]
2019-04-06 14:51:23 -==>  Preparing: update water_log SET `user_id` = ?, `user_name` = ?, `user_type` = ?, `user_org` = ?, `water_type` = ?, `water_money` = ?, `water_date` = ?, `create_time` = ?, `update_time` = ?, `update_by` = ?, `remark` = ? where id = ? 
2019-04-06 14:51:23 -==> Parameters: 6(String), 7(String), A(String), 2(String), 1(String), 1.00(BigDecimal), 2019-04-06 14:51:23.971(Timestamp), 2019-04(String), 2019-04-06 14:51:23.971(Timestamp), 1(Long), (String), 5(Long)
2019-04-06 14:51:24 -<==    Updates: 1
2019-04-06 14:51:24 -耗时 : 111
2019-04-06 14:51:24 -返回值 : {msg=操作成功, code=0}
2019-04-06 14:51:24 -请求地址 : http://localhost:8081/moneyLog/waterLog/list
2019-04-06 14:51:24 -HTTP METHOD : GET
2019-04-06 14:51:24 -CLASS_METHOD : com.bootdo.moneyLog.controller.WaterLogController.list
2019-04-06 14:51:24 -参数 : [{limit=10, offset=0, userType=, userOrg=, userId=, waterDate=}]
2019-04-06 14:51:24 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,`water_type`,`water_money`,`water_date`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from water_log order by id asc limit ?, ? 
2019-04-06 14:51:24 -==> Parameters: 0(Integer), 10(Integer)
2019-04-06 14:51:24 -<==      Total: 5
2019-04-06 14:51:24 -==>  Preparing: select count(*) from water_log 
2019-04-06 14:51:24 -==> Parameters: 
2019-04-06 14:51:24 -<==      Total: 1
2019-04-06 14:51:24 -耗时 : 10
2019-04-06 14:51:24 -返回值 : com.bootdo.common.utils.PageUtils@6be2e899
2019-04-06 14:58:23 -请求地址 : http://localhost:8081/index
2019-04-06 14:58:23 -HTTP METHOD : GET
2019-04-06 14:58:23 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2019-04-06 14:58:23 -参数 : [{}]
2019-04-06 14:58:23 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2019-04-06 14:58:23 -==> Parameters: 1(Long)
2019-04-06 14:58:23 -<==      Total: 46
2019-04-06 14:58:23 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2019-04-06 14:58:23 -==> Parameters: 138(Long)
2019-04-06 14:58:23 -<==      Total: 1
2019-04-06 14:58:23 -耗时 : 28
2019-04-06 14:58:23 -返回值 : index_v1
2019-04-06 14:58:23 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-06 14:58:23 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 29(Integer), com.bootdo.system.controller.LoginController.index()(String), {"menus":[{"attributes":{"icon":"fa fa-money","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-money","url":"/moneyList/moneyList"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"102","parentId":"106","text":"现金缴费"},{"attributes":{"icon":"fa fa-book","url":"/moneyLog/elecLog"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"107","parentId":"106","text":"缴费记录"}],"hasChildren":true,"hasParent":false,"id":"106","parentId":"0","text":"收费管理"},{"attributes":{"icon":"fa fa-lightbulb-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/elec/elec"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"121","parentId":"103","text":"电费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"elec/elecInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"122","parentId":"103","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"elec/elecUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"123","parentId":"103","text":"电表上传"},{"attributes":{"icon":"fa fa-cc","url":"/elec/elecPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"124","parentId":"103","text":"电价管理"}],"hasChildren":true,"hasParent":false,"id":"103","parentId":"0","text":"电费管理"},{"attributes":{"icon":"fa fa-tint","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/water/water"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"117","parentId":"105","text":"水费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"water/waterInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"118","parentId":"105","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"water/waterUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"119","parentId":"105","text":"水费生成"},{"attributes":{"icon":"fa fa-cc","url":"/water/waterPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"120","parentId":"105","text":"水价管理"}],"hasChildren":true,"hasParent":false,"id":"105","parentId":"0","text":"水费管理"},{"attributes":{"icon":"fa fa-fire","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/heat/heat"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"113","parentId":"104","text":"暖费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"heat/heatInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"114","parentId":"104","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"heat/heatUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"115","parentId":"104","text":"暖费生成"},{"attributes":{"icon":"","url":"/heat/heatPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"116","parentId":"104","text":"暖价管理"}],"hasChildren":true,"hasParent":false,"id":"104","parentId":"0","text":"暖费管理"},{"attributes":{"icon":"fa fa-vcard-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-bomb","url":"/print/print"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"149","parentId":"108","text":"票据记录"}],"hasChildren":true,"hasParent":false,"id":"108","parentId":"0","text":"票据管理"},{"attributes":{"icon":"fa fa-bar-chart","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-area-chart","url":"/chart/graph_echarts.html"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","text":"百度chart"},{"attributes":{"icon":"fa fa-sun-o","url":"charts/countDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"109","parentId":"97","text":"日统计报表"},{"attributes":{"icon":"fa fa-registered","url":"charts/countMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"110","parentId":"97","text":"月统计报表"},{"attributes":{"icon":"fa fa-money","url":"charts/countOwe"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"155","parentId":"97","text":"欠费报表图"},{"attributes":{"icon":"fa fa-support","url":"charts/countYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"111","parentId":"97","text":"年统计报表"},{"attributes":{"icon":"fa fa-tachometer","url":"charts/countRun"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"112","parentId":"97","text":"走势图报表"}],"hasChildren":true,"hasParent":false,"id":"97","parentId":"0","text":"统计管理"},{"attributes":{"icon":"fa fa-bars","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-book","url":"/common/dict"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"78","parentId":"1","text":"数据字典"},{"attributes":{"icon":"fa fa-folder-open","url":"/common/sysFile"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"71","parentId":"1","text":"文件管理"}],"h(String), 127.0.0.1(String), 2019-04-06 14:58:23.057(Timestamp)
2019-04-06 14:58:23 -<==    Updates: 1
2019-04-06 14:58:23 -请求地址 : http://localhost:8081/main
2019-04-06 14:58:23 -HTTP METHOD : GET
2019-04-06 14:58:23 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-06 14:58:23 -参数 : []
2019-04-06 14:58:23 -耗时 : 1
2019-04-06 14:58:23 -返回值 : main
2019-04-06 14:58:23 -请求地址 : http://localhost:8081/oa/notify/message
2019-04-06 14:58:23 -HTTP METHOD : GET
2019-04-06 14:58:23 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2019-04-06 14:58:23 -参数 : []
2019-04-06 14:58:23 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2019-04-06 14:58:23 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2019-04-06 14:58:23 -<==      Total: 0
2019-04-06 14:58:23 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2019-04-06 14:58:23 -==> Parameters: 1(Long), 0(String)
2019-04-06 14:58:23 -<==      Total: 1
2019-04-06 14:58:23 -耗时 : 6
2019-04-06 14:58:23 -返回值 : com.bootdo.common.utils.PageUtils@75b911bf
2019-04-06 14:58:23 -请求地址 : http://localhost:8081/main
2019-04-06 14:58:23 -HTTP METHOD : GET
2019-04-06 14:58:23 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-06 14:58:23 -参数 : []
2019-04-06 14:58:23 -耗时 : 0
2019-04-06 14:58:23 -返回值 : main
2019-04-06 14:58:27 -==>  Preparing: select distinct m.perms from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id = ur.role_id where ur.user_id = ? 
2019-04-06 14:58:27 -==> Parameters: 1(Long)
2019-04-06 14:58:27 -<==      Total: 90
2019-04-06 14:58:27 -请求地址 : http://localhost:8081/moneyList/moneyList
2019-04-06 14:58:27 -HTTP METHOD : GET
2019-04-06 14:58:27 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.MoneyList
2019-04-06 14:58:27 -参数 : []
2019-04-06 14:58:27 -耗时 : 1
2019-04-06 14:58:27 -返回值 : /moneyList/moneyList
2019-04-06 14:58:28 -请求地址 : http://localhost:8081/moneyLog/elecLog
2019-04-06 14:58:28 -HTTP METHOD : GET
2019-04-06 14:58:28 -CLASS_METHOD : com.bootdo.moneyLog.controller.ElecLogController.moneyLog
2019-04-06 14:58:28 -参数 : []
2019-04-06 14:58:28 -耗时 : 1
2019-04-06 14:58:28 -返回值 : /moneyLog/elecLog/elecLog
2019-04-06 14:58:28 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-06 14:58:28 -HTTP METHOD : GET
2019-04-06 14:58:28 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-06 14:58:28 -参数 : [userType]
2019-04-06 14:58:28 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-06 14:58:28 -==> Parameters: userType(String)
2019-04-06 14:58:28 -<==      Total: 2
2019-04-06 14:58:28 -耗时 : 4
2019-04-06 14:58:28 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-06 14:58:28 -请求地址 : http://localhost:8081/moneyLog/elecLog/list
2019-04-06 14:58:28 -HTTP METHOD : GET
2019-04-06 14:58:28 -CLASS_METHOD : com.bootdo.moneyLog.controller.ElecLogController.list
2019-04-06 14:58:28 -参数 : [{limit=10, offset=0, userType=, userOrg=, userId=, elecDate=}]
2019-04-06 14:58:28 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`elec_type`,`elec_money`,`elec_date`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec_log order by id asc limit ?, ? 
2019-04-06 14:58:28 -==> Parameters: 0(Integer), 10(Integer)
2019-04-06 14:58:28 -<==      Total: 7
2019-04-06 14:58:28 -==>  Preparing: select count(*) from elec_log 
2019-04-06 14:58:28 -==> Parameters: 
2019-04-06 14:58:28 -<==      Total: 1
2019-04-06 14:58:28 -耗时 : 8
2019-04-06 14:58:28 -返回值 : com.bootdo.common.utils.PageUtils@2e325d9
2019-04-06 14:58:29 -请求地址 : http://localhost:8081/moneyLog/waterLog
2019-04-06 14:58:29 -HTTP METHOD : GET
2019-04-06 14:58:29 -CLASS_METHOD : com.bootdo.moneyLog.controller.WaterLogController.WaterLog
2019-04-06 14:58:29 -参数 : []
2019-04-06 14:58:29 -耗时 : 1
2019-04-06 14:58:29 -返回值 : /moneyLog/waterLog/waterLog
2019-04-06 14:58:29 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-06 14:58:29 -HTTP METHOD : GET
2019-04-06 14:58:29 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-06 14:58:29 -参数 : [userType]
2019-04-06 14:58:29 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-06 14:58:29 -==> Parameters: userType(String)
2019-04-06 14:58:29 -<==      Total: 2
2019-04-06 14:58:29 -耗时 : 4
2019-04-06 14:58:29 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-06 14:58:29 -请求地址 : http://localhost:8081/moneyLog/waterLog/list
2019-04-06 14:58:29 -HTTP METHOD : GET
2019-04-06 14:58:29 -CLASS_METHOD : com.bootdo.moneyLog.controller.WaterLogController.list
2019-04-06 14:58:29 -参数 : [{limit=10, offset=0, userType=, userOrg=, userId=, waterDate=}]
2019-04-06 14:58:29 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,`water_type`,`water_money`,`water_date`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from water_log order by id asc limit ?, ? 
2019-04-06 14:58:29 -==> Parameters: 0(Integer), 10(Integer)
2019-04-06 14:58:29 -<==      Total: 5
2019-04-06 14:58:29 -==>  Preparing: select count(*) from water_log 
2019-04-06 14:58:29 -==> Parameters: 
2019-04-06 14:58:29 -<==      Total: 1
2019-04-06 14:58:29 -耗时 : 11
2019-04-06 14:58:29 -返回值 : com.bootdo.common.utils.PageUtils@614d0e9c
2019-04-06 14:58:30 -请求地址 : http://localhost:8081/moneyLog/waterLog/edit/5
2019-04-06 14:58:30 -HTTP METHOD : GET
2019-04-06 14:58:30 -CLASS_METHOD : com.bootdo.moneyLog.controller.WaterLogController.edit
2019-04-06 14:58:31 -参数 : [5, {}]
2019-04-06 14:58:31 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,`water_type`,`water_money`,`water_date`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from water_log where id = ? 
2019-04-06 14:58:31 -==> Parameters: 5(Long)
2019-04-06 14:58:31 -<==      Total: 1
2019-04-06 14:58:31 -耗时 : 9
2019-04-06 14:58:31 -返回值 : moneyLog/waterLog/edit
2019-04-06 14:58:31 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-06 14:58:31 -HTTP METHOD : GET
2019-04-06 14:58:31 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-06 14:58:31 -参数 : [userType]
2019-04-06 14:58:31 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-06 14:58:31 -==> Parameters: userType(String)
2019-04-06 14:58:31 -<==      Total: 2
2019-04-06 14:58:31 -请求地址 : http://localhost:8081/common/dict/list/waterType
2019-04-06 14:58:31 -HTTP METHOD : GET
2019-04-06 14:58:31 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-06 14:58:31 -耗时 : 7
2019-04-06 14:58:31 -参数 : [waterType]
2019-04-06 14:58:31 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-06 14:58:31 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-06 14:58:31 -==> Parameters: waterType(String)
2019-04-06 14:58:31 -<==      Total: 6
2019-04-06 14:58:31 -耗时 : 4
2019-04-06 14:58:31 -返回值 : [DictDO{id=132, name='特殊水费4', value='5', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=131, name='特殊水费3', value='4', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=130, name='特殊水费2', value='3', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=129, name='特殊水费1', value='2', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=128, name='民用水', value='1', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=127, name='商业水', value='0', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-06 14:58:38 -请求地址 : http://localhost:8081/moneyLog/waterLog/update
2019-04-06 14:58:38 -HTTP METHOD : POST
2019-04-06 14:58:38 -CLASS_METHOD : com.bootdo.moneyLog.controller.WaterLogController.update
2019-04-06 14:58:38 -参数 : [com.bootdo.moneyLog.domain.WaterLogDO@3e8ef596]
2019-04-06 14:58:38 -==>  Preparing: update water_log SET `user_id` = ?, `user_name` = ?, `user_type` = ?, `user_org` = ?, `water_type` = ?, `water_money` = ?, `water_date` = ?, `create_time` = ?, `update_time` = ?, `update_by` = ?, `remark` = ? where id = ? 
2019-04-06 14:58:38 -==> Parameters: 6(String), 9(String), A(String), 2(String), 1(String), 1.00(BigDecimal), 2019-04-06 14:58:38.777(Timestamp), 2019-04(String), 2019-04-06 14:58:38.777(Timestamp), 1(Long), (String), 5(Long)
2019-04-06 14:58:38 -<==    Updates: 1
2019-04-06 14:58:38 -耗时 : 178
2019-04-06 14:58:38 -返回值 : {msg=操作成功, code=0}
2019-04-06 14:58:38 -请求地址 : http://localhost:8081/moneyLog/waterLog/list
2019-04-06 14:58:38 -HTTP METHOD : GET
2019-04-06 14:58:38 -CLASS_METHOD : com.bootdo.moneyLog.controller.WaterLogController.list
2019-04-06 14:58:38 -参数 : [{limit=10, offset=0, userType=, userOrg=, userId=, waterDate=}]
2019-04-06 14:58:38 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,`water_type`,`water_money`,`water_date`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from water_log order by id asc limit ?, ? 
2019-04-06 14:58:38 -==> Parameters: 0(Integer), 10(Integer)
2019-04-06 14:58:38 -<==      Total: 5
2019-04-06 14:58:38 -==>  Preparing: select count(*) from water_log 
2019-04-06 14:58:38 -==> Parameters: 
2019-04-06 14:58:38 -<==      Total: 1
2019-04-06 14:58:38 -耗时 : 8
2019-04-06 14:58:38 -返回值 : com.bootdo.common.utils.PageUtils@16eb1df9
2019-04-06 14:59:24 -请求地址 : http://localhost:8081/login;JSESSIONID=c1d01f6f-b938-4c1f-9d6b-ee25fc8ed71e
2019-04-06 14:59:24 -HTTP METHOD : GET
2019-04-06 14:59:24 -CLASS_METHOD : com.bootdo.system.controller.LoginController.login
2019-04-06 14:59:24 -参数 : [{}]
2019-04-06 14:59:24 -耗时 : 1
2019-04-06 14:59:24 -返回值 : login
2019-04-06 14:59:24 -请求地址 : http://localhost:8081/getVerify
2019-04-06 14:59:24 -HTTP METHOD : GET
2019-04-06 14:59:24 -CLASS_METHOD : com.bootdo.system.controller.LoginController.getVerify
2019-04-06 14:59:24 -参数 : [org.apache.shiro.web.servlet.ShiroHttpServletRequest@295eaa85, org.apache.shiro.web.servlet.ShiroHttpServletResponse@6a2b9119]
2019-04-06 14:59:24 -3236
2019-04-06 14:59:24 -耗时 : 12
2019-04-06 14:59:24 -返回值 : null
2019-04-06 14:59:25 -请求地址 : http://localhost:8081/login
2019-04-06 14:59:25 -HTTP METHOD : GET
2019-04-06 14:59:25 -CLASS_METHOD : com.bootdo.system.controller.LoginController.login
2019-04-06 14:59:25 -参数 : [{}]
2019-04-06 14:59:25 -耗时 : 1
2019-04-06 14:59:25 -返回值 : login
2019-04-06 14:59:30 -请求地址 : http://localhost:8081/login
2019-04-06 14:59:30 -HTTP METHOD : POST
2019-04-06 14:59:30 -CLASS_METHOD : com.bootdo.system.controller.LoginController.ajaxLogin
2019-04-06 14:59:30 -参数 : [admin, 111111, 3236, org.apache.shiro.web.servlet.ShiroHttpServletRequest@754c7293]
2019-04-06 14:59:30 -==>  Preparing: select `user_id`,`username`,`name`,`password`,`dept_id`,`email`,`mobile`,`status`,`user_id_create`,`gmt_create`,`gmt_modified`,`sex`,`birth`,`pic_id`,`live_address`,`hobby`,`province`,`city`,`district` from sys_user WHERE username = ? order by user_id desc 
2019-04-06 14:59:30 -==> Parameters: admin(String)
2019-04-06 14:59:30 -<==      Total: 1
2019-04-06 14:59:30 -耗时 : 7
2019-04-06 14:59:30 -返回值 : {msg=操作成功, code=0}
2019-04-06 14:59:30 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-06 14:59:30 -==> Parameters: 1(Long), admin(String), 登录(String), 7(Integer), com.bootdo.system.controller.LoginController.ajaxLogin()(String), null, 127.0.0.1(String), 2019-04-06 14:59:30.98(Timestamp)
2019-04-06 14:59:31 -请求地址 : http://localhost:8081/index
2019-04-06 14:59:31 -HTTP METHOD : GET
2019-04-06 14:59:31 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2019-04-06 14:59:31 -参数 : [{}]
2019-04-06 14:59:31 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2019-04-06 14:59:31 -==> Parameters: 1(Long)
2019-04-06 14:59:31 -<==      Total: 46
2019-04-06 14:59:31 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2019-04-06 14:59:31 -==> Parameters: 138(Long)
2019-04-06 14:59:31 -<==      Total: 1
2019-04-06 14:59:31 -耗时 : 26
2019-04-06 14:59:31 -返回值 : index_v1
2019-04-06 14:59:31 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-06 14:59:31 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 27(Integer), com.bootdo.system.controller.LoginController.index()(String), {"menus":[{"attributes":{"icon":"fa fa-money","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-money","url":"/moneyList/moneyList"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"102","parentId":"106","text":"现金缴费"},{"attributes":{"icon":"fa fa-book","url":"/moneyLog/elecLog"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"107","parentId":"106","text":"缴费记录"}],"hasChildren":true,"hasParent":false,"id":"106","parentId":"0","text":"收费管理"},{"attributes":{"icon":"fa fa-lightbulb-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/elec/elec"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"121","parentId":"103","text":"电费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"elec/elecInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"122","parentId":"103","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"elec/elecUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"123","parentId":"103","text":"电表上传"},{"attributes":{"icon":"fa fa-cc","url":"/elec/elecPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"124","parentId":"103","text":"电价管理"}],"hasChildren":true,"hasParent":false,"id":"103","parentId":"0","text":"电费管理"},{"attributes":{"icon":"fa fa-tint","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/water/water"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"117","parentId":"105","text":"水费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"water/waterInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"118","parentId":"105","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"water/waterUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"119","parentId":"105","text":"水费生成"},{"attributes":{"icon":"fa fa-cc","url":"/water/waterPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"120","parentId":"105","text":"水价管理"}],"hasChildren":true,"hasParent":false,"id":"105","parentId":"0","text":"水费管理"},{"attributes":{"icon":"fa fa-fire","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/heat/heat"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"113","parentId":"104","text":"暖费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"heat/heatInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"114","parentId":"104","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"heat/heatUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"115","parentId":"104","text":"暖费生成"},{"attributes":{"icon":"","url":"/heat/heatPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"116","parentId":"104","text":"暖价管理"}],"hasChildren":true,"hasParent":false,"id":"104","parentId":"0","text":"暖费管理"},{"attributes":{"icon":"fa fa-vcard-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-bomb","url":"/print/print"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"149","parentId":"108","text":"票据记录"}],"hasChildren":true,"hasParent":false,"id":"108","parentId":"0","text":"票据管理"},{"attributes":{"icon":"fa fa-bar-chart","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-area-chart","url":"/chart/graph_echarts.html"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","text":"百度chart"},{"attributes":{"icon":"fa fa-sun-o","url":"charts/countDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"109","parentId":"97","text":"日统计报表"},{"attributes":{"icon":"fa fa-registered","url":"charts/countMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"110","parentId":"97","text":"月统计报表"},{"attributes":{"icon":"fa fa-money","url":"charts/countOwe"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"155","parentId":"97","text":"欠费报表图"},{"attributes":{"icon":"fa fa-support","url":"charts/countYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"111","parentId":"97","text":"年统计报表"},{"attributes":{"icon":"fa fa-tachometer","url":"charts/countRun"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"112","parentId":"97","text":"走势图报表"}],"hasChildren":true,"hasParent":false,"id":"97","parentId":"0","text":"统计管理"},{"attributes":{"icon":"fa fa-bars","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-book","url":"/common/dict"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"78","parentId":"1","text":"数据字典"},{"attributes":{"icon":"fa fa-folder-open","url":"/common/sysFile"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"71","parentId":"1","text":"文件管理"}],"h(String), 127.0.0.1(String), 2019-04-06 14:59:31.058(Timestamp)
2019-04-06 14:59:31 -请求地址 : http://localhost:8081/main
2019-04-06 14:59:31 -HTTP METHOD : GET
2019-04-06 14:59:31 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-06 14:59:31 -参数 : []
2019-04-06 14:59:31 -耗时 : 0
2019-04-06 14:59:31 -返回值 : main
2019-04-06 14:59:31 -<==    Updates: 1
2019-04-06 14:59:31 -<==    Updates: 1
2019-04-06 14:59:31 -请求地址 : http://localhost:8081/oa/notify/message
2019-04-06 14:59:31 -HTTP METHOD : GET
2019-04-06 14:59:31 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2019-04-06 14:59:31 -参数 : []
2019-04-06 14:59:31 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2019-04-06 14:59:31 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2019-04-06 14:59:31 -<==      Total: 0
2019-04-06 14:59:31 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2019-04-06 14:59:31 -==> Parameters: 1(Long), 0(String)
2019-04-06 14:59:31 -<==      Total: 1
2019-04-06 14:59:31 -耗时 : 7
2019-04-06 14:59:31 -返回值 : com.bootdo.common.utils.PageUtils@5317a700
2019-04-06 14:59:31 -请求地址 : http://localhost:8081/main
2019-04-06 14:59:31 -HTTP METHOD : GET
2019-04-06 14:59:31 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-06 14:59:31 -参数 : []
2019-04-06 14:59:31 -耗时 : 1
2019-04-06 14:59:31 -返回值 : main
2019-04-06 14:59:33 -==>  Preparing: select distinct m.perms from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id = ur.role_id where ur.user_id = ? 
2019-04-06 14:59:33 -==> Parameters: 1(Long)
2019-04-06 14:59:33 -<==      Total: 90
2019-04-06 14:59:33 -请求地址 : http://localhost:8081/moneyLog/elecLog
2019-04-06 14:59:33 -HTTP METHOD : GET
2019-04-06 14:59:33 -CLASS_METHOD : com.bootdo.moneyLog.controller.ElecLogController.moneyLog
2019-04-06 14:59:33 -参数 : []
2019-04-06 14:59:33 -耗时 : 0
2019-04-06 14:59:33 -返回值 : /moneyLog/elecLog/elecLog
2019-04-06 14:59:35 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-06 14:59:35 -HTTP METHOD : GET
2019-04-06 14:59:35 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-06 14:59:35 -参数 : [userType]
2019-04-06 14:59:35 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-06 14:59:35 -==> Parameters: userType(String)
2019-04-06 14:59:35 -<==      Total: 2
2019-04-06 14:59:35 -耗时 : 4
2019-04-06 14:59:35 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-06 14:59:35 -请求地址 : http://localhost:8081/moneyLog/elecLog/list
2019-04-06 14:59:35 -HTTP METHOD : GET
2019-04-06 14:59:35 -CLASS_METHOD : com.bootdo.moneyLog.controller.ElecLogController.list
2019-04-06 14:59:35 -参数 : [{limit=10, offset=0, userType=, userOrg=, userId=, elecDate=}]
2019-04-06 14:59:35 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`elec_type`,`elec_money`,`elec_date`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec_log order by id asc limit ?, ? 
2019-04-06 14:59:35 -==> Parameters: 0(Integer), 10(Integer)
2019-04-06 14:59:35 -<==      Total: 7
2019-04-06 14:59:35 -==>  Preparing: select count(*) from elec_log 
2019-04-06 14:59:35 -==> Parameters: 
2019-04-06 14:59:35 -<==      Total: 1
2019-04-06 14:59:35 -耗时 : 12
2019-04-06 14:59:35 -返回值 : com.bootdo.common.utils.PageUtils@472134b6
2019-04-06 14:59:36 -请求地址 : http://localhost:8081/moneyLog/waterLog
2019-04-06 14:59:36 -HTTP METHOD : GET
2019-04-06 14:59:36 -CLASS_METHOD : com.bootdo.moneyLog.controller.WaterLogController.WaterLog
2019-04-06 14:59:36 -参数 : []
2019-04-06 14:59:36 -耗时 : 0
2019-04-06 14:59:36 -返回值 : /moneyLog/waterLog/waterLog
2019-04-06 14:59:37 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-06 14:59:37 -HTTP METHOD : GET
2019-04-06 14:59:37 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-06 14:59:37 -参数 : [userType]
2019-04-06 14:59:37 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-06 14:59:37 -==> Parameters: userType(String)
2019-04-06 14:59:37 -<==      Total: 2
2019-04-06 14:59:37 -耗时 : 8
2019-04-06 14:59:37 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-06 14:59:37 -请求地址 : http://localhost:8081/moneyLog/waterLog/list
2019-04-06 14:59:37 -HTTP METHOD : GET
2019-04-06 14:59:37 -CLASS_METHOD : com.bootdo.moneyLog.controller.WaterLogController.list
2019-04-06 14:59:37 -参数 : [{limit=10, offset=0, userType=, userOrg=, userId=, waterDate=}]
2019-04-06 14:59:37 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,`water_type`,`water_money`,`water_date`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from water_log order by id asc limit ?, ? 
2019-04-06 14:59:37 -==> Parameters: 0(Integer), 10(Integer)
2019-04-06 14:59:37 -<==      Total: 5
2019-04-06 14:59:37 -==>  Preparing: select count(*) from water_log 
2019-04-06 14:59:37 -==> Parameters: 
2019-04-06 14:59:37 -<==      Total: 1
2019-04-06 14:59:37 -耗时 : 13
2019-04-06 14:59:37 -返回值 : com.bootdo.common.utils.PageUtils@18b97060
2019-04-06 14:59:38 -请求地址 : http://localhost:8081/moneyLog/waterLog/edit/5
2019-04-06 14:59:38 -HTTP METHOD : GET
2019-04-06 14:59:38 -CLASS_METHOD : com.bootdo.moneyLog.controller.WaterLogController.edit
2019-04-06 14:59:38 -参数 : [5, {}]
2019-04-06 14:59:38 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,`water_type`,`water_money`,`water_date`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from water_log where id = ? 
2019-04-06 14:59:38 -==> Parameters: 5(Long)
2019-04-06 14:59:38 -<==      Total: 1
2019-04-06 14:59:38 -耗时 : 7
2019-04-06 14:59:38 -返回值 : moneyLog/waterLog/edit
2019-04-06 14:59:38 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-06 14:59:38 -HTTP METHOD : GET
2019-04-06 14:59:38 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-06 14:59:38 -参数 : [userType]
2019-04-06 14:59:38 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-06 14:59:38 -==> Parameters: userType(String)
2019-04-06 14:59:38 -请求地址 : http://localhost:8081/common/dict/list/waterType
2019-04-06 14:59:38 -HTTP METHOD : GET
2019-04-06 14:59:38 -<==      Total: 2
2019-04-06 14:59:38 -耗时 : 13
2019-04-06 14:59:38 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-06 14:59:38 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-06 14:59:38 -参数 : [waterType]
2019-04-06 14:59:38 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-06 14:59:38 -==> Parameters: waterType(String)
2019-04-06 14:59:38 -<==      Total: 6
2019-04-06 14:59:38 -耗时 : 19
2019-04-06 14:59:38 -返回值 : [DictDO{id=132, name='特殊水费4', value='5', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=131, name='特殊水费3', value='4', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=130, name='特殊水费2', value='3', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=129, name='特殊水费1', value='2', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=128, name='民用水', value='1', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=127, name='商业水', value='0', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-06 14:59:45 -请求地址 : http://localhost:8081/moneyLog/waterLog/update
2019-04-06 14:59:45 -HTTP METHOD : POST
2019-04-06 14:59:45 -CLASS_METHOD : com.bootdo.moneyLog.controller.WaterLogController.update
2019-04-06 14:59:45 -参数 : [com.bootdo.moneyLog.domain.WaterLogDO@20815f42]
2019-04-06 14:59:45 -==>  Preparing: update water_log SET `user_id` = ?, `user_name` = ?, `user_type` = ?, `user_org` = ?, `water_type` = ?, `water_money` = ?, `water_date` = ?, `create_time` = ?, `update_time` = ?, `update_by` = ?, `remark` = ? where id = ? 
2019-04-06 14:59:45 -==> Parameters: 6(String), 9(String), A(String), 2(String), 1(String), 1.00(BigDecimal), 2019-04-06 14:59:45.939(Timestamp), 2019-04(String), 2019-04-06 14:59:45.939(Timestamp), 1(Long), (String), 5(Long)
2019-04-06 14:59:46 -<==    Updates: 1
2019-04-06 14:59:46 -耗时 : 105
2019-04-06 14:59:46 -返回值 : {msg=操作成功, code=0}
2019-04-06 14:59:46 -请求地址 : http://localhost:8081/moneyLog/waterLog/list
2019-04-06 14:59:46 -HTTP METHOD : GET
2019-04-06 14:59:46 -CLASS_METHOD : com.bootdo.moneyLog.controller.WaterLogController.list
2019-04-06 14:59:46 -参数 : [{limit=10, offset=0, userType=, userOrg=, userId=, waterDate=}]
2019-04-06 14:59:46 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,`water_type`,`water_money`,`water_date`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from water_log order by id asc limit ?, ? 
2019-04-06 14:59:46 -==> Parameters: 0(Integer), 10(Integer)
2019-04-06 14:59:46 -<==      Total: 5
2019-04-06 14:59:46 -==>  Preparing: select count(*) from water_log 
2019-04-06 14:59:46 -==> Parameters: 
2019-04-06 14:59:46 -<==      Total: 1
2019-04-06 14:59:46 -耗时 : 12
2019-04-06 14:59:46 -返回值 : com.bootdo.common.utils.PageUtils@5e828afd
2019-04-06 15:01:29 -请求地址 : http://localhost:8081/index
2019-04-06 15:01:29 -HTTP METHOD : GET
2019-04-06 15:01:29 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2019-04-06 15:01:29 -参数 : [{}]
2019-04-06 15:01:29 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2019-04-06 15:01:29 -==> Parameters: 1(Long)
2019-04-06 15:01:29 -<==      Total: 46
2019-04-06 15:01:29 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2019-04-06 15:01:29 -==> Parameters: 138(Long)
2019-04-06 15:01:29 -<==      Total: 1
2019-04-06 15:01:29 -耗时 : 31
2019-04-06 15:01:29 -返回值 : index_v1
2019-04-06 15:01:29 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-06 15:01:29 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 31(Integer), com.bootdo.system.controller.LoginController.index()(String), {"menus":[{"attributes":{"icon":"fa fa-money","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-money","url":"/moneyList/moneyList"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"102","parentId":"106","text":"现金缴费"},{"attributes":{"icon":"fa fa-book","url":"/moneyLog/elecLog"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"107","parentId":"106","text":"缴费记录"}],"hasChildren":true,"hasParent":false,"id":"106","parentId":"0","text":"收费管理"},{"attributes":{"icon":"fa fa-lightbulb-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/elec/elec"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"121","parentId":"103","text":"电费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"elec/elecInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"122","parentId":"103","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"elec/elecUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"123","parentId":"103","text":"电表上传"},{"attributes":{"icon":"fa fa-cc","url":"/elec/elecPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"124","parentId":"103","text":"电价管理"}],"hasChildren":true,"hasParent":false,"id":"103","parentId":"0","text":"电费管理"},{"attributes":{"icon":"fa fa-tint","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/water/water"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"117","parentId":"105","text":"水费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"water/waterInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"118","parentId":"105","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"water/waterUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"119","parentId":"105","text":"水费生成"},{"attributes":{"icon":"fa fa-cc","url":"/water/waterPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"120","parentId":"105","text":"水价管理"}],"hasChildren":true,"hasParent":false,"id":"105","parentId":"0","text":"水费管理"},{"attributes":{"icon":"fa fa-fire","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/heat/heat"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"113","parentId":"104","text":"暖费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"heat/heatInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"114","parentId":"104","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"heat/heatUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"115","parentId":"104","text":"暖费生成"},{"attributes":{"icon":"","url":"/heat/heatPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"116","parentId":"104","text":"暖价管理"}],"hasChildren":true,"hasParent":false,"id":"104","parentId":"0","text":"暖费管理"},{"attributes":{"icon":"fa fa-vcard-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-bomb","url":"/print/print"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"149","parentId":"108","text":"票据记录"}],"hasChildren":true,"hasParent":false,"id":"108","parentId":"0","text":"票据管理"},{"attributes":{"icon":"fa fa-bar-chart","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-area-chart","url":"/chart/graph_echarts.html"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","text":"百度chart"},{"attributes":{"icon":"fa fa-sun-o","url":"charts/countDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"109","parentId":"97","text":"日统计报表"},{"attributes":{"icon":"fa fa-registered","url":"charts/countMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"110","parentId":"97","text":"月统计报表"},{"attributes":{"icon":"fa fa-support","url":"charts/countYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"111","parentId":"97","text":"年统计报表"},{"attributes":{"icon":"fa fa-money","url":"charts/countOwe"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"155","parentId":"97","text":"欠费报表图"},{"attributes":{"icon":"fa fa-tachometer","url":"charts/countRun"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"112","parentId":"97","text":"走势图报表"}],"hasChildren":true,"hasParent":false,"id":"97","parentId":"0","text":"统计管理"},{"attributes":{"icon":"fa fa-bars","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-book","url":"/common/dict"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"78","parentId":"1","text":"数据字典"},{"attributes":{"icon":"fa fa-folder-open","url":"/common/sysFile"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"71","parentId":"1","text":"文件管理"}],"h(String), 127.0.0.1(String), 2019-04-06 15:01:29.281(Timestamp)
2019-04-06 15:01:29 -请求地址 : http://localhost:8081/main
2019-04-06 15:01:29 -HTTP METHOD : GET
2019-04-06 15:01:29 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-06 15:01:29 -参数 : []
2019-04-06 15:01:29 -耗时 : 1
2019-04-06 15:01:29 -返回值 : main
2019-04-06 15:01:29 -<==    Updates: 1
2019-04-06 15:01:29 -请求地址 : http://localhost:8081/oa/notify/message
2019-04-06 15:01:29 -HTTP METHOD : GET
2019-04-06 15:01:29 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2019-04-06 15:01:29 -参数 : []
2019-04-06 15:01:29 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2019-04-06 15:01:29 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2019-04-06 15:01:29 -<==      Total: 0
2019-04-06 15:01:29 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2019-04-06 15:01:29 -==> Parameters: 1(Long), 0(String)
2019-04-06 15:01:29 -<==      Total: 1
2019-04-06 15:01:29 -耗时 : 6
2019-04-06 15:01:29 -返回值 : com.bootdo.common.utils.PageUtils@32003458
2019-04-06 15:01:30 -请求地址 : http://localhost:8081/main
2019-04-06 15:01:30 -HTTP METHOD : GET
2019-04-06 15:01:30 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-06 15:01:30 -参数 : []
2019-04-06 15:01:30 -耗时 : 0
2019-04-06 15:01:30 -返回值 : main
2019-04-06 15:01:32 -请求地址 : http://localhost:8081/moneyLog/elecLog
2019-04-06 15:01:32 -HTTP METHOD : GET
2019-04-06 15:01:32 -CLASS_METHOD : com.bootdo.moneyLog.controller.ElecLogController.moneyLog
2019-04-06 15:01:32 -参数 : []
2019-04-06 15:01:32 -耗时 : 1
2019-04-06 15:01:32 -返回值 : /moneyLog/elecLog/elecLog
2019-04-06 15:01:33 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-06 15:01:33 -HTTP METHOD : GET
2019-04-06 15:01:33 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-06 15:01:33 -参数 : [userType]
2019-04-06 15:01:33 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-06 15:01:33 -==> Parameters: userType(String)
2019-04-06 15:01:33 -<==      Total: 2
2019-04-06 15:01:33 -耗时 : 4
2019-04-06 15:01:33 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-06 15:01:33 -请求地址 : http://localhost:8081/moneyLog/elecLog/list
2019-04-06 15:01:33 -HTTP METHOD : GET
2019-04-06 15:01:33 -CLASS_METHOD : com.bootdo.moneyLog.controller.ElecLogController.list
2019-04-06 15:01:33 -参数 : [{limit=10, offset=0, userType=, userOrg=, userId=, elecDate=}]
2019-04-06 15:01:33 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`elec_type`,`elec_money`,`elec_date`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec_log order by id asc limit ?, ? 
2019-04-06 15:01:33 -==> Parameters: 0(Integer), 10(Integer)
2019-04-06 15:01:33 -<==      Total: 7
2019-04-06 15:01:33 -==>  Preparing: select count(*) from elec_log 
2019-04-06 15:01:33 -==> Parameters: 
2019-04-06 15:01:33 -<==      Total: 1
2019-04-06 15:01:33 -耗时 : 9
2019-04-06 15:01:33 -返回值 : com.bootdo.common.utils.PageUtils@2c037da8
2019-04-06 15:01:35 -请求地址 : http://localhost:8081/moneyLog/waterLog
2019-04-06 15:01:35 -HTTP METHOD : GET
2019-04-06 15:01:35 -CLASS_METHOD : com.bootdo.moneyLog.controller.WaterLogController.WaterLog
2019-04-06 15:01:35 -参数 : []
2019-04-06 15:01:35 -耗时 : 1
2019-04-06 15:01:35 -返回值 : /moneyLog/waterLog/waterLog
2019-04-06 15:01:35 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-06 15:01:35 -HTTP METHOD : GET
2019-04-06 15:01:35 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-06 15:01:35 -参数 : [userType]
2019-04-06 15:01:35 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-06 15:01:35 -==> Parameters: userType(String)
2019-04-06 15:01:35 -请求地址 : http://localhost:8081/moneyLog/waterLog/list
2019-04-06 15:01:35 -HTTP METHOD : GET
2019-04-06 15:01:35 -CLASS_METHOD : com.bootdo.moneyLog.controller.WaterLogController.list
2019-04-06 15:01:35 -参数 : [{limit=10, offset=0, userType=, userOrg=, userId=, waterDate=}]
2019-04-06 15:01:35 -<==      Total: 2
2019-04-06 15:01:35 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,`water_type`,`water_money`,`water_date`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from water_log order by id asc limit ?, ? 
2019-04-06 15:01:35 -耗时 : 10
2019-04-06 15:01:35 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-06 15:01:35 -==> Parameters: 0(Integer), 10(Integer)
2019-04-06 15:01:35 -<==      Total: 5
2019-04-06 15:01:35 -==>  Preparing: select count(*) from water_log 
2019-04-06 15:01:35 -==> Parameters: 
2019-04-06 15:01:35 -<==      Total: 1
2019-04-06 15:01:35 -耗时 : 17
2019-04-06 15:01:35 -返回值 : com.bootdo.common.utils.PageUtils@5c96a0c1
2019-04-06 15:01:36 -请求地址 : http://localhost:8081/moneyLog/waterLog/edit/5
2019-04-06 15:01:36 -HTTP METHOD : GET
2019-04-06 15:01:36 -CLASS_METHOD : com.bootdo.moneyLog.controller.WaterLogController.edit
2019-04-06 15:01:36 -参数 : [5, {}]
2019-04-06 15:01:36 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,`water_type`,`water_money`,`water_date`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from water_log where id = ? 
2019-04-06 15:01:36 -==> Parameters: 5(Long)
2019-04-06 15:01:36 -<==      Total: 1
2019-04-06 15:01:36 -耗时 : 3
2019-04-06 15:01:36 -返回值 : moneyLog/waterLog/edit
2019-04-06 15:01:36 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-06 15:01:36 -HTTP METHOD : GET
2019-04-06 15:01:36 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-06 15:01:36 -参数 : [userType]
2019-04-06 15:01:36 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-06 15:01:36 -==> Parameters: userType(String)
2019-04-06 15:01:36 -请求地址 : http://localhost:8081/common/dict/list/waterType
2019-04-06 15:01:36 -HTTP METHOD : GET
2019-04-06 15:01:36 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-06 15:01:36 -参数 : [waterType]
2019-04-06 15:01:36 -<==      Total: 2
2019-04-06 15:01:36 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-06 15:01:36 -耗时 : 3
2019-04-06 15:01:36 -==> Parameters: waterType(String)
2019-04-06 15:01:36 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-06 15:01:36 -<==      Total: 6
2019-04-06 15:01:36 -耗时 : 5
2019-04-06 15:01:36 -返回值 : [DictDO{id=132, name='特殊水费4', value='5', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=131, name='特殊水费3', value='4', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=130, name='特殊水费2', value='3', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=129, name='特殊水费1', value='2', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=128, name='民用水', value='1', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=127, name='商业水', value='0', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-06 15:01:38 -请求地址 : http://localhost:8081/moneyLog/waterLog/update
2019-04-06 15:01:38 -HTTP METHOD : POST
2019-04-06 15:01:38 -CLASS_METHOD : com.bootdo.moneyLog.controller.WaterLogController.update
2019-04-06 15:01:38 -参数 : [com.bootdo.moneyLog.domain.WaterLogDO@386ebc54]
2019-04-06 15:01:38 -==>  Preparing: update water_log SET `user_id` = ?, `user_name` = ?, `user_type` = ?, `user_org` = ?, `water_type` = ?, `water_money` = ?, `water_date` = ?, `create_time` = ?, `update_time` = ?, `update_by` = ?, `remark` = ? where id = ? 
2019-04-06 15:01:38 -==> Parameters: 6(String), 9(String), A(String), 2(String), 1(String), 1.00(BigDecimal), 2019-04-06 15:01:38.768(Timestamp), 2019-04(String), 2019-04-06 15:01:38.768(Timestamp), 1(Long), (String), 5(Long)
2019-04-06 15:01:38 -<==    Updates: 1
2019-04-06 15:01:38 -耗时 : 92
2019-04-06 15:01:38 -返回值 : {msg=操作成功, code=0}
2019-04-06 15:01:38 -请求地址 : http://localhost:8081/moneyLog/waterLog/list
2019-04-06 15:01:38 -HTTP METHOD : GET
2019-04-06 15:01:38 -CLASS_METHOD : com.bootdo.moneyLog.controller.WaterLogController.list
2019-04-06 15:01:38 -参数 : [{limit=10, offset=0, userType=, userOrg=, userId=, waterDate=}]
2019-04-06 15:01:38 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,`water_type`,`water_money`,`water_date`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from water_log order by id asc limit ?, ? 
2019-04-06 15:01:38 -==> Parameters: 0(Integer), 10(Integer)
2019-04-06 15:01:38 -<==      Total: 5
2019-04-06 15:01:38 -==>  Preparing: select count(*) from water_log 
2019-04-06 15:01:38 -==> Parameters: 
2019-04-06 15:01:38 -<==      Total: 1
2019-04-06 15:01:38 -耗时 : 8
2019-04-06 15:01:38 -返回值 : com.bootdo.common.utils.PageUtils@74005b62
2019-04-06 15:03:17 -请求地址 : http://localhost:8081/index
2019-04-06 15:03:17 -HTTP METHOD : GET
2019-04-06 15:03:17 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2019-04-06 15:03:17 -参数 : [{}]
2019-04-06 15:03:17 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2019-04-06 15:03:17 -==> Parameters: 1(Long)
2019-04-06 15:03:17 -<==      Total: 46
2019-04-06 15:03:17 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2019-04-06 15:03:17 -==> Parameters: 138(Long)
2019-04-06 15:03:17 -<==      Total: 1
2019-04-06 15:03:17 -耗时 : 58
2019-04-06 15:03:17 -返回值 : index_v1
2019-04-06 15:03:17 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-06 15:03:17 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 59(Integer), com.bootdo.system.controller.LoginController.index()(String), {"menus":[{"attributes":{"icon":"fa fa-money","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-money","url":"/moneyList/moneyList"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"102","parentId":"106","text":"现金缴费"},{"attributes":{"icon":"fa fa-book","url":"/moneyLog/elecLog"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"107","parentId":"106","text":"缴费记录"}],"hasChildren":true,"hasParent":false,"id":"106","parentId":"0","text":"收费管理"},{"attributes":{"icon":"fa fa-lightbulb-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/elec/elec"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"121","parentId":"103","text":"电费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"elec/elecInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"122","parentId":"103","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"elec/elecUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"123","parentId":"103","text":"电表上传"},{"attributes":{"icon":"fa fa-cc","url":"/elec/elecPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"124","parentId":"103","text":"电价管理"}],"hasChildren":true,"hasParent":false,"id":"103","parentId":"0","text":"电费管理"},{"attributes":{"icon":"fa fa-tint","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/water/water"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"117","parentId":"105","text":"水费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"water/waterInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"118","parentId":"105","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"water/waterUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"119","parentId":"105","text":"水费生成"},{"attributes":{"icon":"fa fa-cc","url":"/water/waterPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"120","parentId":"105","text":"水价管理"}],"hasChildren":true,"hasParent":false,"id":"105","parentId":"0","text":"水费管理"},{"attributes":{"icon":"fa fa-fire","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/heat/heat"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"113","parentId":"104","text":"暖费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"heat/heatInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"114","parentId":"104","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"heat/heatUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"115","parentId":"104","text":"暖费生成"},{"attributes":{"icon":"","url":"/heat/heatPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"116","parentId":"104","text":"暖价管理"}],"hasChildren":true,"hasParent":false,"id":"104","parentId":"0","text":"暖费管理"},{"attributes":{"icon":"fa fa-vcard-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-bomb","url":"/print/print"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"149","parentId":"108","text":"票据记录"}],"hasChildren":true,"hasParent":false,"id":"108","parentId":"0","text":"票据管理"},{"attributes":{"icon":"fa fa-bar-chart","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-area-chart","url":"/chart/graph_echarts.html"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","text":"百度chart"},{"attributes":{"icon":"fa fa-sun-o","url":"charts/countDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"109","parentId":"97","text":"日统计报表"},{"attributes":{"icon":"fa fa-registered","url":"charts/countMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"110","parentId":"97","text":"月统计报表"},{"attributes":{"icon":"fa fa-money","url":"charts/countOwe"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"155","parentId":"97","text":"欠费报表图"},{"attributes":{"icon":"fa fa-support","url":"charts/countYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"111","parentId":"97","text":"年统计报表"},{"attributes":{"icon":"fa fa-tachometer","url":"charts/countRun"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"112","parentId":"97","text":"走势图报表"}],"hasChildren":true,"hasParent":false,"id":"97","parentId":"0","text":"统计管理"},{"attributes":{"icon":"fa fa-bars","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-book","url":"/common/dict"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"78","parentId":"1","text":"数据字典"},{"attributes":{"icon":"fa fa-folder-open","url":"/common/sysFile"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"71","parentId":"1","text":"文件管理"}],"h(String), 127.0.0.1(String), 2019-04-06 15:03:17.708(Timestamp)
2019-04-06 15:03:17 -<==    Updates: 1
2019-04-06 15:03:17 -请求地址 : http://localhost:8081/main
2019-04-06 15:03:17 -HTTP METHOD : GET
2019-04-06 15:03:17 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-06 15:03:17 -参数 : []
2019-04-06 15:03:17 -耗时 : 0
2019-04-06 15:03:17 -返回值 : main
2019-04-06 15:03:18 -请求地址 : http://localhost:8081/oa/notify/message
2019-04-06 15:03:18 -HTTP METHOD : GET
2019-04-06 15:03:18 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2019-04-06 15:03:18 -参数 : []
2019-04-06 15:03:18 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2019-04-06 15:03:18 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2019-04-06 15:03:18 -<==      Total: 0
2019-04-06 15:03:18 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2019-04-06 15:03:18 -==> Parameters: 1(Long), 0(String)
2019-04-06 15:03:18 -<==      Total: 1
2019-04-06 15:03:18 -耗时 : 10
2019-04-06 15:03:18 -返回值 : com.bootdo.common.utils.PageUtils@2b6d510b
2019-04-06 15:03:18 -请求地址 : http://localhost:8081/main
2019-04-06 15:03:18 -HTTP METHOD : GET
2019-04-06 15:03:18 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-06 15:03:18 -参数 : []
2019-04-06 15:03:18 -耗时 : 1
2019-04-06 15:03:18 -返回值 : main
2019-04-06 15:03:20 -请求地址 : http://localhost:8081/moneyList/moneyList
2019-04-06 15:03:20 -HTTP METHOD : GET
2019-04-06 15:03:20 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.MoneyList
2019-04-06 15:03:20 -参数 : []
2019-04-06 15:03:20 -耗时 : 0
2019-04-06 15:03:20 -返回值 : /moneyList/moneyList
2019-04-06 15:03:20 -请求地址 : http://localhost:8081/moneyLog/elecLog
2019-04-06 15:03:20 -HTTP METHOD : GET
2019-04-06 15:03:20 -CLASS_METHOD : com.bootdo.moneyLog.controller.ElecLogController.moneyLog
2019-04-06 15:03:20 -参数 : []
2019-04-06 15:03:20 -耗时 : 0
2019-04-06 15:03:20 -返回值 : /moneyLog/elecLog/elecLog
2019-04-06 15:03:21 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-06 15:03:21 -HTTP METHOD : GET
2019-04-06 15:03:21 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-06 15:03:21 -参数 : [userType]
2019-04-06 15:03:21 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-06 15:03:21 -==> Parameters: userType(String)
2019-04-06 15:03:21 -<==      Total: 2
2019-04-06 15:03:21 -耗时 : 4
2019-04-06 15:03:21 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-06 15:03:21 -请求地址 : http://localhost:8081/moneyLog/elecLog/list
2019-04-06 15:03:21 -HTTP METHOD : GET
2019-04-06 15:03:21 -CLASS_METHOD : com.bootdo.moneyLog.controller.ElecLogController.list
2019-04-06 15:03:21 -参数 : [{limit=10, offset=0, userType=, userOrg=, userId=, elecDate=}]
2019-04-06 15:03:21 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`elec_type`,`elec_money`,`elec_date`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec_log order by id asc limit ?, ? 
2019-04-06 15:03:21 -==> Parameters: 0(Integer), 10(Integer)
2019-04-06 15:03:21 -<==      Total: 7
2019-04-06 15:03:21 -==>  Preparing: select count(*) from elec_log 
2019-04-06 15:03:21 -==> Parameters: 
2019-04-06 15:03:21 -<==      Total: 1
2019-04-06 15:03:21 -耗时 : 7
2019-04-06 15:03:21 -返回值 : com.bootdo.common.utils.PageUtils@5dd20d02
2019-04-06 15:03:21 -请求地址 : http://localhost:8081/moneyLog/waterLog
2019-04-06 15:03:21 -HTTP METHOD : GET
2019-04-06 15:03:21 -CLASS_METHOD : com.bootdo.moneyLog.controller.WaterLogController.WaterLog
2019-04-06 15:03:21 -参数 : []
2019-04-06 15:03:21 -耗时 : 1
2019-04-06 15:03:21 -返回值 : /moneyLog/waterLog/waterLog
2019-04-06 15:03:22 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-06 15:03:22 -HTTP METHOD : GET
2019-04-06 15:03:22 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-06 15:03:22 -参数 : [userType]
2019-04-06 15:03:22 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-06 15:03:22 -==> Parameters: userType(String)
2019-04-06 15:03:22 -<==      Total: 2
2019-04-06 15:03:22 -耗时 : 9
2019-04-06 15:03:22 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-06 15:03:22 -请求地址 : http://localhost:8081/moneyLog/waterLog/list
2019-04-06 15:03:22 -HTTP METHOD : GET
2019-04-06 15:03:22 -CLASS_METHOD : com.bootdo.moneyLog.controller.WaterLogController.list
2019-04-06 15:03:22 -参数 : [{limit=10, offset=0, userType=, userOrg=, userId=, waterDate=}]
2019-04-06 15:03:22 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,`water_type`,`water_money`,`water_date`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from water_log order by id asc limit ?, ? 
2019-04-06 15:03:22 -==> Parameters: 0(Integer), 10(Integer)
2019-04-06 15:03:22 -<==      Total: 5
2019-04-06 15:03:22 -==>  Preparing: select count(*) from water_log 
2019-04-06 15:03:22 -==> Parameters: 
2019-04-06 15:03:22 -<==      Total: 1
2019-04-06 15:03:22 -耗时 : 6
2019-04-06 15:03:22 -返回值 : com.bootdo.common.utils.PageUtils@29c89017
2019-04-06 15:03:23 -请求地址 : http://localhost:8081/moneyLog/waterLog/edit/5
2019-04-06 15:03:23 -HTTP METHOD : GET
2019-04-06 15:03:23 -CLASS_METHOD : com.bootdo.moneyLog.controller.WaterLogController.edit
2019-04-06 15:03:23 -参数 : [5, {}]
2019-04-06 15:03:23 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,`water_type`,`water_money`,`water_date`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from water_log where id = ? 
2019-04-06 15:03:23 -==> Parameters: 5(Long)
2019-04-06 15:03:23 -<==      Total: 1
2019-04-06 15:03:23 -耗时 : 4
2019-04-06 15:03:23 -返回值 : moneyLog/waterLog/edit
2019-04-06 15:03:23 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-06 15:03:23 -HTTP METHOD : GET
2019-04-06 15:03:23 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-06 15:03:23 -参数 : [userType]
2019-04-06 15:03:23 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-06 15:03:23 -==> Parameters: userType(String)
2019-04-06 15:03:23 -请求地址 : http://localhost:8081/common/dict/list/waterType
2019-04-06 15:03:23 -HTTP METHOD : GET
2019-04-06 15:03:23 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-06 15:03:23 -参数 : [waterType]
2019-04-06 15:03:23 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-06 15:03:23 -==> Parameters: waterType(String)
2019-04-06 15:03:23 -<==      Total: 6
2019-04-06 15:03:23 -耗时 : 9
2019-04-06 15:03:23 -返回值 : [DictDO{id=132, name='特殊水费4', value='5', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=131, name='特殊水费3', value='4', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=130, name='特殊水费2', value='3', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=129, name='特殊水费1', value='2', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=128, name='民用水', value='1', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=127, name='商业水', value='0', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-06 15:03:23 -<==      Total: 2
2019-04-06 15:03:23 -耗时 : 16
2019-04-06 15:03:23 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-06 15:03:24 -请求地址 : http://localhost:8081/moneyLog/waterLog/update
2019-04-06 15:03:24 -HTTP METHOD : POST
2019-04-06 15:03:24 -CLASS_METHOD : com.bootdo.moneyLog.controller.WaterLogController.update
2019-04-06 15:03:24 -参数 : [com.bootdo.moneyLog.domain.WaterLogDO@cec4458]
2019-04-06 15:03:24 -耗时 : 0
2019-04-06 15:03:24 -返回值 : null
2019-04-06 15:03:26 -请求地址 : http://localhost:8081/moneyLog/waterLog/update
2019-04-06 15:03:26 -HTTP METHOD : POST
2019-04-06 15:03:26 -CLASS_METHOD : com.bootdo.moneyLog.controller.WaterLogController.update
2019-04-06 15:03:26 -参数 : [com.bootdo.moneyLog.domain.WaterLogDO@6ee8c763]
2019-04-06 15:03:26 -耗时 : 1
2019-04-06 15:03:26 -返回值 : null
2019-04-06 15:03:30 -请求地址 : http://localhost:8081/index
2019-04-06 15:03:30 -HTTP METHOD : GET
2019-04-06 15:03:30 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2019-04-06 15:03:30 -参数 : [{}]
2019-04-06 15:03:31 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2019-04-06 15:03:31 -==> Parameters: 1(Long)
2019-04-06 15:03:31 -<==      Total: 46
2019-04-06 15:03:31 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2019-04-06 15:03:31 -==> Parameters: 138(Long)
2019-04-06 15:03:31 -<==      Total: 1
2019-04-06 15:03:31 -耗时 : 24
2019-04-06 15:03:31 -返回值 : index_v1
2019-04-06 15:03:31 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-06 15:03:31 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 24(Integer), com.bootdo.system.controller.LoginController.index()(String), {"menus":[{"attributes":{"icon":"fa fa-money","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-money","url":"/moneyList/moneyList"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"102","parentId":"106","text":"现金缴费"},{"attributes":{"icon":"fa fa-book","url":"/moneyLog/elecLog"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"107","parentId":"106","text":"缴费记录"}],"hasChildren":true,"hasParent":false,"id":"106","parentId":"0","text":"收费管理"},{"attributes":{"icon":"fa fa-lightbulb-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/elec/elec"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"121","parentId":"103","text":"电费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"elec/elecInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"122","parentId":"103","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"elec/elecUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"123","parentId":"103","text":"电表上传"},{"attributes":{"icon":"fa fa-cc","url":"/elec/elecPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"124","parentId":"103","text":"电价管理"}],"hasChildren":true,"hasParent":false,"id":"103","parentId":"0","text":"电费管理"},{"attributes":{"icon":"fa fa-tint","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/water/water"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"117","parentId":"105","text":"水费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"water/waterInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"118","parentId":"105","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"water/waterUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"119","parentId":"105","text":"水费生成"},{"attributes":{"icon":"fa fa-cc","url":"/water/waterPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"120","parentId":"105","text":"水价管理"}],"hasChildren":true,"hasParent":false,"id":"105","parentId":"0","text":"水费管理"},{"attributes":{"icon":"fa fa-fire","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/heat/heat"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"113","parentId":"104","text":"暖费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"heat/heatInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"114","parentId":"104","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"heat/heatUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"115","parentId":"104","text":"暖费生成"},{"attributes":{"icon":"","url":"/heat/heatPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"116","parentId":"104","text":"暖价管理"}],"hasChildren":true,"hasParent":false,"id":"104","parentId":"0","text":"暖费管理"},{"attributes":{"icon":"fa fa-vcard-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-bomb","url":"/print/print"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"149","parentId":"108","text":"票据记录"}],"hasChildren":true,"hasParent":false,"id":"108","parentId":"0","text":"票据管理"},{"attributes":{"icon":"fa fa-bar-chart","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-area-chart","url":"/chart/graph_echarts.html"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","text":"百度chart"},{"attributes":{"icon":"fa fa-sun-o","url":"charts/countDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"109","parentId":"97","text":"日统计报表"},{"attributes":{"icon":"fa fa-registered","url":"charts/countMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"110","parentId":"97","text":"月统计报表"},{"attributes":{"icon":"fa fa-money","url":"charts/countOwe"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"155","parentId":"97","text":"欠费报表图"},{"attributes":{"icon":"fa fa-support","url":"charts/countYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"111","parentId":"97","text":"年统计报表"},{"attributes":{"icon":"fa fa-tachometer","url":"charts/countRun"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"112","parentId":"97","text":"走势图报表"}],"hasChildren":true,"hasParent":false,"id":"97","parentId":"0","text":"统计管理"},{"attributes":{"icon":"fa fa-bars","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-book","url":"/common/dict"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"78","parentId":"1","text":"数据字典"},{"attributes":{"icon":"fa fa-folder-open","url":"/common/sysFile"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"71","parentId":"1","text":"文件管理"}],"h(String), 127.0.0.1(String), 2019-04-06 15:03:31.023(Timestamp)
2019-04-06 15:03:31 -请求地址 : http://localhost:8081/main
2019-04-06 15:03:31 -HTTP METHOD : GET
2019-04-06 15:03:31 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-06 15:03:31 -参数 : []
2019-04-06 15:03:31 -耗时 : 1
2019-04-06 15:03:31 -返回值 : main
2019-04-06 15:03:31 -<==    Updates: 1
2019-04-06 15:03:31 -请求地址 : http://localhost:8081/oa/notify/message
2019-04-06 15:03:31 -HTTP METHOD : GET
2019-04-06 15:03:31 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2019-04-06 15:03:31 -参数 : []
2019-04-06 15:03:31 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2019-04-06 15:03:31 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2019-04-06 15:03:31 -<==      Total: 0
2019-04-06 15:03:31 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2019-04-06 15:03:31 -==> Parameters: 1(Long), 0(String)
2019-04-06 15:03:31 -<==      Total: 1
2019-04-06 15:03:31 -耗时 : 6
2019-04-06 15:03:31 -返回值 : com.bootdo.common.utils.PageUtils@578c5789
2019-04-06 15:03:31 -请求地址 : http://localhost:8081/main
2019-04-06 15:03:31 -HTTP METHOD : GET
2019-04-06 15:03:31 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-06 15:03:31 -参数 : []
2019-04-06 15:03:31 -耗时 : 0
2019-04-06 15:03:31 -返回值 : main
2019-04-06 15:04:26 -请求地址 : http://localhost:8081/index
2019-04-06 15:04:26 -HTTP METHOD : GET
2019-04-06 15:04:26 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2019-04-06 15:04:26 -参数 : [{}]
2019-04-06 15:04:26 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2019-04-06 15:04:26 -==> Parameters: 1(Long)
2019-04-06 15:04:27 -<==      Total: 46
2019-04-06 15:04:27 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2019-04-06 15:04:27 -==> Parameters: 138(Long)
2019-04-06 15:04:27 -<==      Total: 1
2019-04-06 15:04:27 -耗时 : 34
2019-04-06 15:04:27 -返回值 : index_v1
2019-04-06 15:04:27 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-06 15:04:27 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 35(Integer), com.bootdo.system.controller.LoginController.index()(String), {"menus":[{"attributes":{"icon":"fa fa-money","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-money","url":"/moneyList/moneyList"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"102","parentId":"106","text":"现金缴费"},{"attributes":{"icon":"fa fa-book","url":"/moneyLog/elecLog"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"107","parentId":"106","text":"缴费记录"}],"hasChildren":true,"hasParent":false,"id":"106","parentId":"0","text":"收费管理"},{"attributes":{"icon":"fa fa-lightbulb-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/elec/elec"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"121","parentId":"103","text":"电费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"elec/elecInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"122","parentId":"103","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"elec/elecUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"123","parentId":"103","text":"电表上传"},{"attributes":{"icon":"fa fa-cc","url":"/elec/elecPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"124","parentId":"103","text":"电价管理"}],"hasChildren":true,"hasParent":false,"id":"103","parentId":"0","text":"电费管理"},{"attributes":{"icon":"fa fa-tint","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/water/water"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"117","parentId":"105","text":"水费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"water/waterInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"118","parentId":"105","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"water/waterUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"119","parentId":"105","text":"水费生成"},{"attributes":{"icon":"fa fa-cc","url":"/water/waterPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"120","parentId":"105","text":"水价管理"}],"hasChildren":true,"hasParent":false,"id":"105","parentId":"0","text":"水费管理"},{"attributes":{"icon":"fa fa-fire","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/heat/heat"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"113","parentId":"104","text":"暖费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"heat/heatInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"114","parentId":"104","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"heat/heatUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"115","parentId":"104","text":"暖费生成"},{"attributes":{"icon":"","url":"/heat/heatPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"116","parentId":"104","text":"暖价管理"}],"hasChildren":true,"hasParent":false,"id":"104","parentId":"0","text":"暖费管理"},{"attributes":{"icon":"fa fa-vcard-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-bomb","url":"/print/print"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"149","parentId":"108","text":"票据记录"}],"hasChildren":true,"hasParent":false,"id":"108","parentId":"0","text":"票据管理"},{"attributes":{"icon":"fa fa-bar-chart","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-area-chart","url":"/chart/graph_echarts.html"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","text":"百度chart"},{"attributes":{"icon":"fa fa-sun-o","url":"charts/countDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"109","parentId":"97","text":"日统计报表"},{"attributes":{"icon":"fa fa-registered","url":"charts/countMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"110","parentId":"97","text":"月统计报表"},{"attributes":{"icon":"fa fa-support","url":"charts/countYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"111","parentId":"97","text":"年统计报表"},{"attributes":{"icon":"fa fa-money","url":"charts/countOwe"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"155","parentId":"97","text":"欠费报表图"},{"attributes":{"icon":"fa fa-tachometer","url":"charts/countRun"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"112","parentId":"97","text":"走势图报表"}],"hasChildren":true,"hasParent":false,"id":"97","parentId":"0","text":"统计管理"},{"attributes":{"icon":"fa fa-bars","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-book","url":"/common/dict"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"78","parentId":"1","text":"数据字典"},{"attributes":{"icon":"fa fa-folder-open","url":"/common/sysFile"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"71","parentId":"1","text":"文件管理"}],"h(String), 127.0.0.1(String), 2019-04-06 15:04:27.015(Timestamp)
2019-04-06 15:04:27 -<==    Updates: 1
2019-04-06 15:04:27 -请求地址 : http://localhost:8081/main
2019-04-06 15:04:27 -HTTP METHOD : GET
2019-04-06 15:04:27 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-06 15:04:27 -参数 : []
2019-04-06 15:04:27 -耗时 : 0
2019-04-06 15:04:27 -返回值 : main
2019-04-06 15:04:27 -请求地址 : http://localhost:8081/oa/notify/message
2019-04-06 15:04:27 -HTTP METHOD : GET
2019-04-06 15:04:27 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2019-04-06 15:04:27 -参数 : []
2019-04-06 15:04:27 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2019-04-06 15:04:27 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2019-04-06 15:04:27 -<==      Total: 0
2019-04-06 15:04:27 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2019-04-06 15:04:27 -==> Parameters: 1(Long), 0(String)
2019-04-06 15:04:27 -<==      Total: 1
2019-04-06 15:04:27 -耗时 : 12
2019-04-06 15:04:27 -返回值 : com.bootdo.common.utils.PageUtils@7fb3c656
2019-04-06 15:04:27 -请求地址 : http://localhost:8081/main
2019-04-06 15:04:27 -HTTP METHOD : GET
2019-04-06 15:04:27 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-06 15:04:27 -参数 : []
2019-04-06 15:04:27 -耗时 : 0
2019-04-06 15:04:27 -返回值 : main
2019-04-06 15:04:29 -请求地址 : http://localhost:8081/moneyLog/elecLog
2019-04-06 15:04:29 -HTTP METHOD : GET
2019-04-06 15:04:29 -CLASS_METHOD : com.bootdo.moneyLog.controller.ElecLogController.moneyLog
2019-04-06 15:04:29 -参数 : []
2019-04-06 15:04:29 -耗时 : 1
2019-04-06 15:04:29 -返回值 : /moneyLog/elecLog/elecLog
2019-04-06 15:04:30 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-06 15:04:30 -HTTP METHOD : GET
2019-04-06 15:04:30 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-06 15:04:30 -参数 : [userType]
2019-04-06 15:04:30 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-06 15:04:30 -==> Parameters: userType(String)
2019-04-06 15:04:30 -<==      Total: 2
2019-04-06 15:04:30 -耗时 : 3
2019-04-06 15:04:30 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-06 15:04:30 -请求地址 : http://localhost:8081/moneyLog/elecLog/list
2019-04-06 15:04:30 -HTTP METHOD : GET
2019-04-06 15:04:30 -CLASS_METHOD : com.bootdo.moneyLog.controller.ElecLogController.list
2019-04-06 15:04:30 -参数 : [{limit=10, offset=0, userType=, userOrg=, userId=, elecDate=}]
2019-04-06 15:04:30 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`elec_type`,`elec_money`,`elec_date`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec_log order by id asc limit ?, ? 
2019-04-06 15:04:30 -==> Parameters: 0(Integer), 10(Integer)
2019-04-06 15:04:30 -<==      Total: 7
2019-04-06 15:04:30 -==>  Preparing: select count(*) from elec_log 
2019-04-06 15:04:30 -==> Parameters: 
2019-04-06 15:04:30 -<==      Total: 1
2019-04-06 15:04:30 -耗时 : 11
2019-04-06 15:04:30 -返回值 : com.bootdo.common.utils.PageUtils@ce39137
2019-04-06 15:04:30 -请求地址 : http://localhost:8081/moneyLog/waterLog
2019-04-06 15:04:30 -HTTP METHOD : GET
2019-04-06 15:04:30 -CLASS_METHOD : com.bootdo.moneyLog.controller.WaterLogController.WaterLog
2019-04-06 15:04:30 -参数 : []
2019-04-06 15:04:30 -耗时 : 1
2019-04-06 15:04:30 -返回值 : /moneyLog/waterLog/waterLog
2019-04-06 15:04:31 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-06 15:04:31 -HTTP METHOD : GET
2019-04-06 15:04:31 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-06 15:04:31 -参数 : [userType]
2019-04-06 15:04:31 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-06 15:04:31 -==> Parameters: userType(String)
2019-04-06 15:04:31 -<==      Total: 2
2019-04-06 15:04:31 -耗时 : 3
2019-04-06 15:04:31 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-06 15:04:31 -请求地址 : http://localhost:8081/moneyLog/waterLog/list
2019-04-06 15:04:31 -HTTP METHOD : GET
2019-04-06 15:04:31 -CLASS_METHOD : com.bootdo.moneyLog.controller.WaterLogController.list
2019-04-06 15:04:31 -参数 : [{limit=10, offset=0, userType=, userOrg=, userId=, waterDate=}]
2019-04-06 15:04:31 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,`water_type`,`water_money`,`water_date`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from water_log order by id asc limit ?, ? 
2019-04-06 15:04:31 -==> Parameters: 0(Integer), 10(Integer)
2019-04-06 15:04:31 -<==      Total: 5
2019-04-06 15:04:31 -==>  Preparing: select count(*) from water_log 
2019-04-06 15:04:31 -==> Parameters: 
2019-04-06 15:04:31 -<==      Total: 1
2019-04-06 15:04:31 -耗时 : 7
2019-04-06 15:04:31 -返回值 : com.bootdo.common.utils.PageUtils@e776327
2019-04-06 15:04:31 -请求地址 : http://localhost:8081/moneyLog/waterLog/edit/5
2019-04-06 15:04:31 -HTTP METHOD : GET
2019-04-06 15:04:31 -CLASS_METHOD : com.bootdo.moneyLog.controller.WaterLogController.edit
2019-04-06 15:04:31 -参数 : [5, {}]
2019-04-06 15:04:31 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,`water_type`,`water_money`,`water_date`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from water_log where id = ? 
2019-04-06 15:04:31 -==> Parameters: 5(Long)
2019-04-06 15:04:31 -<==      Total: 1
2019-04-06 15:04:31 -耗时 : 6
2019-04-06 15:04:31 -返回值 : moneyLog/waterLog/edit
2019-04-06 15:04:32 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-06 15:04:32 -HTTP METHOD : GET
2019-04-06 15:04:32 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-06 15:04:32 -参数 : [userType]
2019-04-06 15:04:32 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-06 15:04:32 -==> Parameters: userType(String)
2019-04-06 15:04:32 -<==      Total: 2
2019-04-06 15:04:32 -请求地址 : http://localhost:8081/common/dict/list/waterType
2019-04-06 15:04:32 -HTTP METHOD : GET
2019-04-06 15:04:32 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-06 15:04:32 -耗时 : 5
2019-04-06 15:04:32 -参数 : [waterType]
2019-04-06 15:04:32 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-06 15:04:32 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-06 15:04:32 -==> Parameters: waterType(String)
2019-04-06 15:04:32 -<==      Total: 6
2019-04-06 15:04:32 -耗时 : 19
2019-04-06 15:04:32 -返回值 : [DictDO{id=132, name='特殊水费4', value='5', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=131, name='特殊水费3', value='4', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=130, name='特殊水费2', value='3', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=129, name='特殊水费1', value='2', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=128, name='民用水', value='1', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=127, name='商业水', value='0', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-06 15:04:33 -请求地址 : http://localhost:8081/moneyLog/waterLog/update
2019-04-06 15:04:33 -HTTP METHOD : POST
2019-04-06 15:04:33 -CLASS_METHOD : com.bootdo.moneyLog.controller.WaterLogController.update
2019-04-06 15:04:33 -参数 : [com.bootdo.moneyLog.domain.WaterLogDO@1873eb56]
2019-04-06 15:04:33 -耗时 : 1
2019-04-06 15:04:33 -返回值 : null
2019-04-06 15:04:50 -请求地址 : http://localhost:8081/index
2019-04-06 15:04:50 -HTTP METHOD : GET
2019-04-06 15:04:50 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2019-04-06 15:04:50 -参数 : [{}]
2019-04-06 15:04:50 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2019-04-06 15:04:50 -==> Parameters: 1(Long)
2019-04-06 15:04:50 -<==      Total: 46
2019-04-06 15:04:50 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2019-04-06 15:04:50 -==> Parameters: 138(Long)
2019-04-06 15:04:50 -<==      Total: 1
2019-04-06 15:04:50 -耗时 : 15
2019-04-06 15:04:50 -返回值 : index_v1
2019-04-06 15:04:51 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-06 15:04:51 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 15(Integer), com.bootdo.system.controller.LoginController.index()(String), {"menus":[{"attributes":{"icon":"fa fa-money","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-money","url":"/moneyList/moneyList"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"102","parentId":"106","text":"现金缴费"},{"attributes":{"icon":"fa fa-book","url":"/moneyLog/elecLog"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"107","parentId":"106","text":"缴费记录"}],"hasChildren":true,"hasParent":false,"id":"106","parentId":"0","text":"收费管理"},{"attributes":{"icon":"fa fa-lightbulb-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/elec/elec"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"121","parentId":"103","text":"电费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"elec/elecInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"122","parentId":"103","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"elec/elecUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"123","parentId":"103","text":"电表上传"},{"attributes":{"icon":"fa fa-cc","url":"/elec/elecPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"124","parentId":"103","text":"电价管理"}],"hasChildren":true,"hasParent":false,"id":"103","parentId":"0","text":"电费管理"},{"attributes":{"icon":"fa fa-tint","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/water/water"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"117","parentId":"105","text":"水费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"water/waterInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"118","parentId":"105","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"water/waterUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"119","parentId":"105","text":"水费生成"},{"attributes":{"icon":"fa fa-cc","url":"/water/waterPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"120","parentId":"105","text":"水价管理"}],"hasChildren":true,"hasParent":false,"id":"105","parentId":"0","text":"水费管理"},{"attributes":{"icon":"fa fa-fire","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/heat/heat"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"113","parentId":"104","text":"暖费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"heat/heatInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"114","parentId":"104","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"heat/heatUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"115","parentId":"104","text":"暖费生成"},{"attributes":{"icon":"","url":"/heat/heatPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"116","parentId":"104","text":"暖价管理"}],"hasChildren":true,"hasParent":false,"id":"104","parentId":"0","text":"暖费管理"},{"attributes":{"icon":"fa fa-vcard-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-bomb","url":"/print/print"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"149","parentId":"108","text":"票据记录"}],"hasChildren":true,"hasParent":false,"id":"108","parentId":"0","text":"票据管理"},{"attributes":{"icon":"fa fa-bar-chart","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-area-chart","url":"/chart/graph_echarts.html"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","text":"百度chart"},{"attributes":{"icon":"fa fa-sun-o","url":"charts/countDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"109","parentId":"97","text":"日统计报表"},{"attributes":{"icon":"fa fa-registered","url":"charts/countMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"110","parentId":"97","text":"月统计报表"},{"attributes":{"icon":"fa fa-support","url":"charts/countYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"111","parentId":"97","text":"年统计报表"},{"attributes":{"icon":"fa fa-money","url":"charts/countOwe"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"155","parentId":"97","text":"欠费报表图"},{"attributes":{"icon":"fa fa-tachometer","url":"charts/countRun"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"112","parentId":"97","text":"走势图报表"}],"hasChildren":true,"hasParent":false,"id":"97","parentId":"0","text":"统计管理"},{"attributes":{"icon":"fa fa-bars","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-book","url":"/common/dict"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"78","parentId":"1","text":"数据字典"},{"attributes":{"icon":"fa fa-folder-open","url":"/common/sysFile"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"71","parentId":"1","text":"文件管理"}],"h(String), 127.0.0.1(String), 2019-04-06 15:04:50.974(Timestamp)
2019-04-06 15:04:51 -<==    Updates: 1
2019-04-06 15:04:51 -请求地址 : http://localhost:8081/main
2019-04-06 15:04:51 -HTTP METHOD : GET
2019-04-06 15:04:51 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-06 15:04:51 -参数 : []
2019-04-06 15:04:51 -耗时 : 1
2019-04-06 15:04:51 -返回值 : main
2019-04-06 15:04:51 -请求地址 : http://localhost:8081/oa/notify/message
2019-04-06 15:04:51 -HTTP METHOD : GET
2019-04-06 15:04:51 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2019-04-06 15:04:51 -参数 : []
2019-04-06 15:04:51 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2019-04-06 15:04:51 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2019-04-06 15:04:51 -<==      Total: 0
2019-04-06 15:04:51 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2019-04-06 15:04:51 -==> Parameters: 1(Long), 0(String)
2019-04-06 15:04:51 -<==      Total: 1
2019-04-06 15:04:51 -耗时 : 12
2019-04-06 15:04:51 -返回值 : com.bootdo.common.utils.PageUtils@6dacb540
2019-04-06 15:04:51 -请求地址 : http://localhost:8081/main
2019-04-06 15:04:51 -HTTP METHOD : GET
2019-04-06 15:04:51 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-06 15:04:51 -参数 : []
2019-04-06 15:04:51 -耗时 : 1
2019-04-06 15:04:51 -返回值 : main
2019-04-06 15:04:53 -请求地址 : http://localhost:8081/moneyLog/elecLog
2019-04-06 15:04:53 -HTTP METHOD : GET
2019-04-06 15:04:53 -CLASS_METHOD : com.bootdo.moneyLog.controller.ElecLogController.moneyLog
2019-04-06 15:04:53 -参数 : []
2019-04-06 15:04:53 -耗时 : 0
2019-04-06 15:04:53 -返回值 : /moneyLog/elecLog/elecLog
2019-04-06 15:04:53 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-06 15:04:53 -HTTP METHOD : GET
2019-04-06 15:04:53 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-06 15:04:53 -参数 : [userType]
2019-04-06 15:04:53 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-06 15:04:53 -==> Parameters: userType(String)
2019-04-06 15:04:53 -<==      Total: 2
2019-04-06 15:04:53 -耗时 : 4
2019-04-06 15:04:53 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-06 15:04:53 -请求地址 : http://localhost:8081/moneyLog/elecLog/list
2019-04-06 15:04:53 -HTTP METHOD : GET
2019-04-06 15:04:53 -CLASS_METHOD : com.bootdo.moneyLog.controller.ElecLogController.list
2019-04-06 15:04:53 -参数 : [{limit=10, offset=0, userType=, userOrg=, userId=, elecDate=}]
2019-04-06 15:04:53 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`elec_type`,`elec_money`,`elec_date`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec_log order by id asc limit ?, ? 
2019-04-06 15:04:53 -==> Parameters: 0(Integer), 10(Integer)
2019-04-06 15:04:53 -<==      Total: 7
2019-04-06 15:04:53 -==>  Preparing: select count(*) from elec_log 
2019-04-06 15:04:53 -==> Parameters: 
2019-04-06 15:04:53 -<==      Total: 1
2019-04-06 15:04:53 -耗时 : 9
2019-04-06 15:04:53 -返回值 : com.bootdo.common.utils.PageUtils@1b8a8c8e
2019-04-06 15:04:54 -请求地址 : http://localhost:8081/moneyLog/waterLog
2019-04-06 15:04:54 -HTTP METHOD : GET
2019-04-06 15:04:54 -CLASS_METHOD : com.bootdo.moneyLog.controller.WaterLogController.WaterLog
2019-04-06 15:04:54 -参数 : []
2019-04-06 15:04:54 -耗时 : 1
2019-04-06 15:04:54 -返回值 : /moneyLog/waterLog/waterLog
2019-04-06 15:04:54 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-06 15:04:54 -HTTP METHOD : GET
2019-04-06 15:04:54 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-06 15:04:54 -参数 : [userType]
2019-04-06 15:04:54 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-06 15:04:54 -==> Parameters: userType(String)
2019-04-06 15:04:54 -<==      Total: 2
2019-04-06 15:04:54 -耗时 : 3
2019-04-06 15:04:54 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-06 15:04:54 -请求地址 : http://localhost:8081/moneyLog/waterLog/list
2019-04-06 15:04:54 -HTTP METHOD : GET
2019-04-06 15:04:54 -CLASS_METHOD : com.bootdo.moneyLog.controller.WaterLogController.list
2019-04-06 15:04:54 -参数 : [{limit=10, offset=0, userType=, userOrg=, userId=, waterDate=}]
2019-04-06 15:04:54 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,`water_type`,`water_money`,`water_date`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from water_log order by id asc limit ?, ? 
2019-04-06 15:04:54 -==> Parameters: 0(Integer), 10(Integer)
2019-04-06 15:04:54 -<==      Total: 5
2019-04-06 15:04:54 -==>  Preparing: select count(*) from water_log 
2019-04-06 15:04:54 -==> Parameters: 
2019-04-06 15:04:54 -<==      Total: 1
2019-04-06 15:04:54 -耗时 : 7
2019-04-06 15:04:54 -返回值 : com.bootdo.common.utils.PageUtils@287fa7eb
2019-04-06 15:04:55 -请求地址 : http://localhost:8081/moneyLog/waterLog/edit/5
2019-04-06 15:04:55 -HTTP METHOD : GET
2019-04-06 15:04:55 -CLASS_METHOD : com.bootdo.moneyLog.controller.WaterLogController.edit
2019-04-06 15:04:55 -参数 : [5, {}]
2019-04-06 15:04:55 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,`water_type`,`water_money`,`water_date`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from water_log where id = ? 
2019-04-06 15:04:55 -==> Parameters: 5(Long)
2019-04-06 15:04:55 -<==      Total: 1
2019-04-06 15:04:55 -耗时 : 2
2019-04-06 15:04:55 -返回值 : moneyLog/waterLog/edit
2019-04-06 15:04:55 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-06 15:04:55 -HTTP METHOD : GET
2019-04-06 15:04:55 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-06 15:04:55 -参数 : [userType]
2019-04-06 15:04:55 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-06 15:04:55 -==> Parameters: userType(String)
2019-04-06 15:04:55 -<==      Total: 2
2019-04-06 15:04:55 -耗时 : 5
2019-04-06 15:04:55 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-06 15:04:55 -请求地址 : http://localhost:8081/common/dict/list/waterType
2019-04-06 15:04:55 -HTTP METHOD : GET
2019-04-06 15:04:55 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-06 15:04:55 -参数 : [waterType]
2019-04-06 15:04:55 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-06 15:04:55 -==> Parameters: waterType(String)
2019-04-06 15:04:55 -<==      Total: 6
2019-04-06 15:04:55 -耗时 : 7
2019-04-06 15:04:55 -返回值 : [DictDO{id=132, name='特殊水费4', value='5', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=131, name='特殊水费3', value='4', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=130, name='特殊水费2', value='3', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=129, name='特殊水费1', value='2', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=128, name='民用水', value='1', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=127, name='商业水', value='0', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-06 15:04:57 -请求地址 : http://localhost:8081/moneyLog/waterLog/update
2019-04-06 15:04:57 -HTTP METHOD : POST
2019-04-06 15:04:57 -CLASS_METHOD : com.bootdo.moneyLog.controller.WaterLogController.update
2019-04-06 15:04:57 -参数 : [com.bootdo.moneyLog.domain.WaterLogDO@3c4c5e8f]
2019-04-06 15:04:57 -耗时 : 1
2019-04-06 15:04:57 -返回值 : null
2019-04-06 15:04:59 -请求地址 : http://localhost:8081/moneyLog/waterLog/update
2019-04-06 15:04:59 -HTTP METHOD : POST
2019-04-06 15:04:59 -CLASS_METHOD : com.bootdo.moneyLog.controller.WaterLogController.update
2019-04-06 15:04:59 -参数 : [com.bootdo.moneyLog.domain.WaterLogDO@679b40d8]
2019-04-06 15:04:59 -耗时 : 1
2019-04-06 15:04:59 -返回值 : null
2019-04-06 15:09:42 -==>  Preparing: select distinct m.perms from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id = ur.role_id where ur.user_id = ? 
2019-04-06 15:09:42 -==> Parameters: 1(Long)
2019-04-06 15:09:42 -<==      Total: 90
2019-04-06 15:09:42 -请求地址 : http://localhost:8081/moneyLog/waterLog/update
2019-04-06 15:09:42 -HTTP METHOD : POST
2019-04-06 15:09:42 -CLASS_METHOD : com.bootdo.moneyLog.controller.WaterLogController.update
2019-04-06 15:09:42 -参数 : [com.bootdo.moneyLog.domain.WaterLogDO@6aae5686]
2019-04-06 15:09:42 -耗时 : 1
2019-04-06 15:09:42 -返回值 : null
2019-04-06 15:10:56 -请求地址 : http://localhost:8081/moneyLog/waterLog/update
2019-04-06 15:10:56 -HTTP METHOD : POST
2019-04-06 15:10:56 -CLASS_METHOD : com.bootdo.moneyLog.controller.WaterLogController.update
2019-04-06 15:10:56 -参数 : [com.bootdo.moneyLog.domain.WaterLogDO@13336edf]
2019-04-06 15:10:56 -耗时 : 1
2019-04-06 15:10:56 -返回值 : null
2019-04-06 15:13:52 -请求地址 : http://localhost:8081/moneyLog/waterLog/update
2019-04-06 15:13:52 -HTTP METHOD : POST
2019-04-06 15:13:52 -CLASS_METHOD : com.bootdo.moneyLog.controller.WaterLogController.update
2019-04-06 15:13:52 -参数 : [com.bootdo.moneyLog.domain.WaterLogDO@f1fe6ff]
2019-04-06 15:13:52 -耗时 : 0
2019-04-06 15:13:52 -返回值 : null
2019-04-06 15:14:22 -WebSocketSession[1 current WS(1)-HttpStream(0)-HttpPoll(0), 11 total, 0 closed abnormally (0 connect failure, 0 send limit, 0 transport error)], stompSubProtocol[processed CONNECT(11)-CONNECTED(11)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 129], outboundChannelpool size = 0, active threads = 0, queued tasks = 0, completed tasks = 21], sockJsScheduler[pool size = 4, active threads = 1, queued tasks = 2, completed tasks = 433]
2019-04-06 15:16:31 -请求地址 : http://localhost:8081/login;JSESSIONID=d5bf9b7e-0d28-4413-936e-1102c1438b77
2019-04-06 15:16:31 -HTTP METHOD : GET
2019-04-06 15:16:31 -CLASS_METHOD : com.bootdo.system.controller.LoginController.login
2019-04-06 15:16:31 -参数 : [{}]
2019-04-06 15:16:31 -耗时 : 1
2019-04-06 15:16:31 -返回值 : login
2019-04-06 15:16:31 -请求地址 : http://localhost:8081/getVerify
2019-04-06 15:16:31 -HTTP METHOD : GET
2019-04-06 15:16:31 -CLASS_METHOD : com.bootdo.system.controller.LoginController.getVerify
2019-04-06 15:16:31 -参数 : [org.apache.shiro.web.servlet.ShiroHttpServletRequest@460bf15e, org.apache.shiro.web.servlet.ShiroHttpServletResponse@6accaca8]
2019-04-06 15:16:31 -3162
2019-04-06 15:16:31 -耗时 : 21
2019-04-06 15:16:31 -返回值 : null
2019-04-06 15:16:32 -请求地址 : http://localhost:8081/login
2019-04-06 15:16:32 -HTTP METHOD : GET
2019-04-06 15:16:32 -CLASS_METHOD : com.bootdo.system.controller.LoginController.login
2019-04-06 15:16:32 -参数 : [{}]
2019-04-06 15:16:32 -耗时 : 1
2019-04-06 15:16:32 -返回值 : login
2019-04-06 15:16:37 -请求地址 : http://localhost:8081/login
2019-04-06 15:16:37 -HTTP METHOD : POST
2019-04-06 15:16:37 -CLASS_METHOD : com.bootdo.system.controller.LoginController.ajaxLogin
2019-04-06 15:16:37 -参数 : [admin, 111111, 3162, org.apache.shiro.web.servlet.ShiroHttpServletRequest@32006dc7]
2019-04-06 15:16:37 -==>  Preparing: select `user_id`,`username`,`name`,`password`,`dept_id`,`email`,`mobile`,`status`,`user_id_create`,`gmt_create`,`gmt_modified`,`sex`,`birth`,`pic_id`,`live_address`,`hobby`,`province`,`city`,`district` from sys_user WHERE username = ? order by user_id desc 
2019-04-06 15:16:37 -==> Parameters: admin(String)
2019-04-06 15:16:37 -<==      Total: 1
2019-04-06 15:16:37 -耗时 : 19
2019-04-06 15:16:37 -返回值 : {msg=操作成功, code=0}
2019-04-06 15:16:37 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-06 15:16:37 -==> Parameters: 1(Long), admin(String), 登录(String), 19(Integer), com.bootdo.system.controller.LoginController.ajaxLogin()(String), null, 127.0.0.1(String), 2019-04-06 15:16:37.466(Timestamp)
2019-04-06 15:16:37 -请求地址 : http://localhost:8081/index
2019-04-06 15:16:37 -HTTP METHOD : GET
2019-04-06 15:16:37 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2019-04-06 15:16:37 -参数 : [{}]
2019-04-06 15:16:37 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2019-04-06 15:16:37 -==> Parameters: 1(Long)
2019-04-06 15:16:37 -<==      Total: 46
2019-04-06 15:16:37 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2019-04-06 15:16:37 -==> Parameters: 138(Long)
2019-04-06 15:16:37 -<==      Total: 1
2019-04-06 15:16:37 -耗时 : 23
2019-04-06 15:16:37 -返回值 : index_v1
2019-04-06 15:16:37 -<==    Updates: 1
2019-04-06 15:16:37 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-06 15:16:37 -请求地址 : http://localhost:8081/main
2019-04-06 15:16:37 -HTTP METHOD : GET
2019-04-06 15:16:37 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-06 15:16:37 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 24(Integer), com.bootdo.system.controller.LoginController.index()(String), {"menus":[{"attributes":{"icon":"fa fa-money","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-money","url":"/moneyList/moneyList"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"102","parentId":"106","text":"现金缴费"},{"attributes":{"icon":"fa fa-book","url":"/moneyLog/elecLog"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"107","parentId":"106","text":"缴费记录"}],"hasChildren":true,"hasParent":false,"id":"106","parentId":"0","text":"收费管理"},{"attributes":{"icon":"fa fa-lightbulb-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/elec/elec"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"121","parentId":"103","text":"电费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"elec/elecInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"122","parentId":"103","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"elec/elecUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"123","parentId":"103","text":"电表上传"},{"attributes":{"icon":"fa fa-cc","url":"/elec/elecPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"124","parentId":"103","text":"电价管理"}],"hasChildren":true,"hasParent":false,"id":"103","parentId":"0","text":"电费管理"},{"attributes":{"icon":"fa fa-tint","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/water/water"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"117","parentId":"105","text":"水费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"water/waterInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"118","parentId":"105","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"water/waterUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"119","parentId":"105","text":"水费生成"},{"attributes":{"icon":"fa fa-cc","url":"/water/waterPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"120","parentId":"105","text":"水价管理"}],"hasChildren":true,"hasParent":false,"id":"105","parentId":"0","text":"水费管理"},{"attributes":{"icon":"fa fa-fire","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/heat/heat"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"113","parentId":"104","text":"暖费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"heat/heatInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"114","parentId":"104","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"heat/heatUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"115","parentId":"104","text":"暖费生成"},{"attributes":{"icon":"","url":"/heat/heatPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"116","parentId":"104","text":"暖价管理"}],"hasChildren":true,"hasParent":false,"id":"104","parentId":"0","text":"暖费管理"},{"attributes":{"icon":"fa fa-vcard-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-bomb","url":"/print/print"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"149","parentId":"108","text":"票据记录"}],"hasChildren":true,"hasParent":false,"id":"108","parentId":"0","text":"票据管理"},{"attributes":{"icon":"fa fa-bar-chart","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-area-chart","url":"/chart/graph_echarts.html"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","text":"百度chart"},{"attributes":{"icon":"fa fa-sun-o","url":"charts/countDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"109","parentId":"97","text":"日统计报表"},{"attributes":{"icon":"fa fa-registered","url":"charts/countMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"110","parentId":"97","text":"月统计报表"},{"attributes":{"icon":"fa fa-money","url":"charts/countOwe"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"155","parentId":"97","text":"欠费报表图"},{"attributes":{"icon":"fa fa-support","url":"charts/countYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"111","parentId":"97","text":"年统计报表"},{"attributes":{"icon":"fa fa-tachometer","url":"charts/countRun"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"112","parentId":"97","text":"走势图报表"}],"hasChildren":true,"hasParent":false,"id":"97","parentId":"0","text":"统计管理"},{"attributes":{"icon":"fa fa-bars","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-book","url":"/common/dict"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"78","parentId":"1","text":"数据字典"},{"attributes":{"icon":"fa fa-folder-open","url":"/common/sysFile"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"71","parentId":"1","text":"文件管理"}],"h(String), 127.0.0.1(String), 2019-04-06 15:16:37.552(Timestamp)
2019-04-06 15:16:37 -参数 : []
2019-04-06 15:16:37 -耗时 : 7
2019-04-06 15:16:37 -返回值 : main
2019-04-06 15:16:37 -<==    Updates: 1
2019-04-06 15:16:38 -请求地址 : http://localhost:8081/oa/notify/message
2019-04-06 15:16:38 -HTTP METHOD : GET
2019-04-06 15:16:38 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2019-04-06 15:16:38 -参数 : []
2019-04-06 15:16:38 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2019-04-06 15:16:38 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2019-04-06 15:16:38 -<==      Total: 0
2019-04-06 15:16:38 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2019-04-06 15:16:38 -==> Parameters: 1(Long), 0(String)
2019-04-06 15:16:38 -<==      Total: 1
2019-04-06 15:16:38 -耗时 : 7
2019-04-06 15:16:38 -返回值 : com.bootdo.common.utils.PageUtils@665ff369
2019-04-06 15:16:38 -请求地址 : http://localhost:8081/main
2019-04-06 15:16:38 -HTTP METHOD : GET
2019-04-06 15:16:38 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-06 15:16:38 -参数 : []
2019-04-06 15:16:38 -耗时 : 1
2019-04-06 15:16:38 -返回值 : main
2019-04-06 15:16:44 -==>  Preparing: select distinct m.perms from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id = ur.role_id where ur.user_id = ? 
2019-04-06 15:16:44 -==> Parameters: 1(Long)
2019-04-06 15:16:44 -<==      Total: 90
2019-04-06 15:16:44 -请求地址 : http://localhost:8081/moneyLog/elecLog
2019-04-06 15:16:44 -HTTP METHOD : GET
2019-04-06 15:16:44 -CLASS_METHOD : com.bootdo.moneyLog.controller.ElecLogController.moneyLog
2019-04-06 15:16:44 -参数 : []
2019-04-06 15:16:44 -耗时 : 0
2019-04-06 15:16:44 -返回值 : /moneyLog/elecLog/elecLog
2019-04-06 15:16:45 -请求地址 : http://localhost:8081/moneyLog/waterLog
2019-04-06 15:16:45 -HTTP METHOD : GET
2019-04-06 15:16:45 -CLASS_METHOD : com.bootdo.moneyLog.controller.WaterLogController.WaterLog
2019-04-06 15:16:45 -参数 : []
2019-04-06 15:16:45 -耗时 : 1
2019-04-06 15:16:45 -返回值 : /moneyLog/waterLog/waterLog
2019-04-06 15:16:46 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-06 15:16:46 -HTTP METHOD : GET
2019-04-06 15:16:46 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-06 15:16:46 -参数 : [userType]
2019-04-06 15:16:46 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-06 15:16:46 -==> Parameters: userType(String)
2019-04-06 15:16:46 -<==      Total: 2
2019-04-06 15:16:46 -耗时 : 7
2019-04-06 15:16:46 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-06 15:16:46 -请求地址 : http://localhost:8081/moneyLog/waterLog/list
2019-04-06 15:16:46 -HTTP METHOD : GET
2019-04-06 15:16:46 -CLASS_METHOD : com.bootdo.moneyLog.controller.WaterLogController.list
2019-04-06 15:16:46 -参数 : [{limit=10, offset=0, userType=, userOrg=, userId=, waterDate=}]
2019-04-06 15:16:46 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,`water_type`,`water_money`,`water_date`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from water_log order by id asc limit ?, ? 
2019-04-06 15:16:46 -==> Parameters: 0(Integer), 10(Integer)
2019-04-06 15:16:46 -<==      Total: 5
2019-04-06 15:16:46 -==>  Preparing: select count(*) from water_log 
2019-04-06 15:16:46 -==> Parameters: 
2019-04-06 15:16:46 -<==      Total: 1
2019-04-06 15:16:46 -耗时 : 8
2019-04-06 15:16:46 -返回值 : com.bootdo.common.utils.PageUtils@c873d51
2019-04-06 15:16:47 -请求地址 : http://localhost:8081/moneyLog/waterLog/edit/5
2019-04-06 15:16:47 -HTTP METHOD : GET
2019-04-06 15:16:47 -CLASS_METHOD : com.bootdo.moneyLog.controller.WaterLogController.edit
2019-04-06 15:16:47 -参数 : [5, {}]
2019-04-06 15:16:47 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,`water_type`,`water_money`,`water_date`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from water_log where id = ? 
2019-04-06 15:16:47 -==> Parameters: 5(Long)
2019-04-06 15:16:47 -<==      Total: 1
2019-04-06 15:16:47 -耗时 : 10
2019-04-06 15:16:47 -返回值 : moneyLog/waterLog/edit
2019-04-06 15:16:48 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-06 15:16:48 -HTTP METHOD : GET
2019-04-06 15:16:48 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-06 15:16:48 -参数 : [userType]
2019-04-06 15:16:48 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-06 15:16:48 -==> Parameters: userType(String)
2019-04-06 15:16:48 -<==      Total: 2
2019-04-06 15:16:48 -耗时 : 8
2019-04-06 15:16:48 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-06 15:16:48 -请求地址 : http://localhost:8081/common/dict/list/waterType
2019-04-06 15:16:48 -HTTP METHOD : GET
2019-04-06 15:16:48 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-06 15:16:48 -参数 : [waterType]
2019-04-06 15:16:48 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-06 15:16:48 -==> Parameters: waterType(String)
2019-04-06 15:16:48 -<==      Total: 6
2019-04-06 15:16:48 -耗时 : 7
2019-04-06 15:16:48 -返回值 : [DictDO{id=132, name='特殊水费4', value='5', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=131, name='特殊水费3', value='4', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=130, name='特殊水费2', value='3', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=129, name='特殊水费1', value='2', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=128, name='民用水', value='1', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=127, name='商业水', value='0', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-06 15:16:54 -请求地址 : http://localhost:8081/moneyLog/waterLog/update
2019-04-06 15:16:54 -HTTP METHOD : POST
2019-04-06 15:16:54 -CLASS_METHOD : com.bootdo.moneyLog.controller.WaterLogController.update
2019-04-06 15:16:54 -参数 : [com.bootdo.moneyLog.domain.WaterLogDO@515b5495]
2019-04-06 15:16:54 -==>  Preparing: update water_log SET `user_id` = ?, `user_name` = ?, `user_type` = ?, `user_org` = ?, `water_type` = ?, `water_money` = ?, `water_date` = ?, `create_time` = ?, `update_time` = ?, `update_by` = ?, `remark` = ? where id = ? 
2019-04-06 15:16:54 -==> Parameters: 111(String), 111(String), A(String), 2(String), 1(String), 1.00(BigDecimal), 2019-04-06 15:16:54.601(Timestamp), 2019-04(String), 2019-04-06 15:16:54.601(Timestamp), 1(Long), (String), 5(Long)
2019-04-06 15:16:54 -<==    Updates: 1
2019-04-06 15:16:54 -耗时 : 82
2019-04-06 15:16:54 -返回值 : {msg=操作成功, code=0}
2019-04-06 15:16:54 -请求地址 : http://localhost:8081/moneyLog/waterLog/list
2019-04-06 15:16:54 -HTTP METHOD : GET
2019-04-06 15:16:54 -CLASS_METHOD : com.bootdo.moneyLog.controller.WaterLogController.list
2019-04-06 15:16:54 -参数 : [{limit=10, offset=0, userType=, userOrg=, userId=, waterDate=}]
2019-04-06 15:16:54 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,`water_type`,`water_money`,`water_date`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from water_log order by id asc limit ?, ? 
2019-04-06 15:16:54 -==> Parameters: 0(Integer), 10(Integer)
2019-04-06 15:16:54 -<==      Total: 5
2019-04-06 15:16:54 -==>  Preparing: select count(*) from water_log 
2019-04-06 15:16:54 -==> Parameters: 
2019-04-06 15:16:54 -<==      Total: 1
2019-04-06 15:16:54 -耗时 : 14
2019-04-06 15:16:54 -返回值 : com.bootdo.common.utils.PageUtils@1d11333a
2019-04-06 15:21:58 -请求地址 : http://localhost:8081/index
2019-04-06 15:21:58 -HTTP METHOD : GET
2019-04-06 15:21:58 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2019-04-06 15:21:58 -参数 : [{}]
2019-04-06 15:21:58 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2019-04-06 15:21:58 -==> Parameters: 1(Long)
2019-04-06 15:21:58 -<==      Total: 46
2019-04-06 15:21:58 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2019-04-06 15:21:58 -==> Parameters: 138(Long)
2019-04-06 15:21:58 -<==      Total: 1
2019-04-06 15:21:58 -耗时 : 37
2019-04-06 15:21:58 -返回值 : index_v1
2019-04-06 15:21:58 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-06 15:21:58 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 37(Integer), com.bootdo.system.controller.LoginController.index()(String), {"menus":[{"attributes":{"icon":"fa fa-money","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-money","url":"/moneyList/moneyList"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"102","parentId":"106","text":"现金缴费"},{"attributes":{"icon":"fa fa-book","url":"/moneyLog/elecLog"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"107","parentId":"106","text":"缴费记录"}],"hasChildren":true,"hasParent":false,"id":"106","parentId":"0","text":"收费管理"},{"attributes":{"icon":"fa fa-lightbulb-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/elec/elec"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"121","parentId":"103","text":"电费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"elec/elecInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"122","parentId":"103","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"elec/elecUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"123","parentId":"103","text":"电表上传"},{"attributes":{"icon":"fa fa-cc","url":"/elec/elecPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"124","parentId":"103","text":"电价管理"}],"hasChildren":true,"hasParent":false,"id":"103","parentId":"0","text":"电费管理"},{"attributes":{"icon":"fa fa-tint","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/water/water"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"117","parentId":"105","text":"水费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"water/waterInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"118","parentId":"105","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"water/waterUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"119","parentId":"105","text":"水费生成"},{"attributes":{"icon":"fa fa-cc","url":"/water/waterPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"120","parentId":"105","text":"水价管理"}],"hasChildren":true,"hasParent":false,"id":"105","parentId":"0","text":"水费管理"},{"attributes":{"icon":"fa fa-fire","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/heat/heat"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"113","parentId":"104","text":"暖费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"heat/heatInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"114","parentId":"104","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"heat/heatUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"115","parentId":"104","text":"暖费生成"},{"attributes":{"icon":"","url":"/heat/heatPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"116","parentId":"104","text":"暖价管理"}],"hasChildren":true,"hasParent":false,"id":"104","parentId":"0","text":"暖费管理"},{"attributes":{"icon":"fa fa-vcard-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-bomb","url":"/print/print"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"149","parentId":"108","text":"票据记录"}],"hasChildren":true,"hasParent":false,"id":"108","parentId":"0","text":"票据管理"},{"attributes":{"icon":"fa fa-bar-chart","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-area-chart","url":"/chart/graph_echarts.html"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","text":"百度chart"},{"attributes":{"icon":"fa fa-sun-o","url":"charts/countDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"109","parentId":"97","text":"日统计报表"},{"attributes":{"icon":"fa fa-registered","url":"charts/countMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"110","parentId":"97","text":"月统计报表"},{"attributes":{"icon":"fa fa-money","url":"charts/countOwe"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"155","parentId":"97","text":"欠费报表图"},{"attributes":{"icon":"fa fa-support","url":"charts/countYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"111","parentId":"97","text":"年统计报表"},{"attributes":{"icon":"fa fa-tachometer","url":"charts/countRun"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"112","parentId":"97","text":"走势图报表"}],"hasChildren":true,"hasParent":false,"id":"97","parentId":"0","text":"统计管理"},{"attributes":{"icon":"fa fa-bars","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-book","url":"/common/dict"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"78","parentId":"1","text":"数据字典"},{"attributes":{"icon":"fa fa-folder-open","url":"/common/sysFile"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"71","parentId":"1","text":"文件管理"}],"h(String), 127.0.0.1(String), 2019-04-06 15:21:58.93(Timestamp)
2019-04-06 15:21:59 -<==    Updates: 1
2019-04-06 15:21:59 -请求地址 : http://localhost:8081/main
2019-04-06 15:21:59 -HTTP METHOD : GET
2019-04-06 15:21:59 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-06 15:21:59 -参数 : []
2019-04-06 15:21:59 -耗时 : 1
2019-04-06 15:21:59 -返回值 : main
2019-04-06 15:21:59 -请求地址 : http://localhost:8081/oa/notify/message
2019-04-06 15:21:59 -HTTP METHOD : GET
2019-04-06 15:21:59 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2019-04-06 15:21:59 -参数 : []
2019-04-06 15:21:59 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2019-04-06 15:21:59 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2019-04-06 15:21:59 -<==      Total: 0
2019-04-06 15:21:59 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2019-04-06 15:21:59 -==> Parameters: 1(Long), 0(String)
2019-04-06 15:21:59 -<==      Total: 1
2019-04-06 15:21:59 -耗时 : 10
2019-04-06 15:21:59 -返回值 : com.bootdo.common.utils.PageUtils@650253b3
2019-04-06 15:21:59 -请求地址 : http://localhost:8081/main
2019-04-06 15:21:59 -HTTP METHOD : GET
2019-04-06 15:21:59 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-06 15:21:59 -参数 : []
2019-04-06 15:21:59 -耗时 : 1
2019-04-06 15:21:59 -返回值 : main
2019-04-06 15:22:01 -请求地址 : http://localhost:8081/moneyLog/elecLog
2019-04-06 15:22:01 -HTTP METHOD : GET
2019-04-06 15:22:01 -CLASS_METHOD : com.bootdo.moneyLog.controller.ElecLogController.moneyLog
2019-04-06 15:22:01 -参数 : []
2019-04-06 15:22:01 -耗时 : 1
2019-04-06 15:22:01 -返回值 : /moneyLog/elecLog/elecLog
2019-04-06 15:22:02 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-06 15:22:02 -HTTP METHOD : GET
2019-04-06 15:22:02 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-06 15:22:02 -参数 : [userType]
2019-04-06 15:22:02 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-06 15:22:02 -==> Parameters: userType(String)
2019-04-06 15:22:02 -<==      Total: 2
2019-04-06 15:22:02 -耗时 : 4
2019-04-06 15:22:02 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-06 15:22:02 -请求地址 : http://localhost:8081/moneyLog/elecLog/list
2019-04-06 15:22:02 -HTTP METHOD : GET
2019-04-06 15:22:02 -CLASS_METHOD : com.bootdo.moneyLog.controller.ElecLogController.list
2019-04-06 15:22:02 -参数 : [{limit=10, offset=0, userType=, userOrg=, userId=, elecDate=}]
2019-04-06 15:22:02 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`elec_type`,`elec_money`,`elec_date`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec_log order by id asc limit ?, ? 
2019-04-06 15:22:02 -==> Parameters: 0(Integer), 10(Integer)
2019-04-06 15:22:02 -<==      Total: 7
2019-04-06 15:22:02 -==>  Preparing: select count(*) from elec_log 
2019-04-06 15:22:02 -==> Parameters: 
2019-04-06 15:22:02 -<==      Total: 1
2019-04-06 15:22:02 -耗时 : 14
2019-04-06 15:22:02 -返回值 : com.bootdo.common.utils.PageUtils@6d566b1c
2019-04-06 15:22:03 -请求地址 : http://localhost:8081/moneyLog/waterLog
2019-04-06 15:22:03 -HTTP METHOD : GET
2019-04-06 15:22:03 -CLASS_METHOD : com.bootdo.moneyLog.controller.WaterLogController.WaterLog
2019-04-06 15:22:03 -参数 : []
2019-04-06 15:22:03 -耗时 : 0
2019-04-06 15:22:03 -返回值 : /moneyLog/waterLog/waterLog
2019-04-06 15:22:03 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-06 15:22:03 -HTTP METHOD : GET
2019-04-06 15:22:03 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-06 15:22:03 -参数 : [userType]
2019-04-06 15:22:03 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-06 15:22:03 -==> Parameters: userType(String)
2019-04-06 15:22:03 -<==      Total: 2
2019-04-06 15:22:03 -耗时 : 7
2019-04-06 15:22:03 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-06 15:22:04 -请求地址 : http://localhost:8081/moneyLog/waterLog/list
2019-04-06 15:22:04 -HTTP METHOD : GET
2019-04-06 15:22:04 -CLASS_METHOD : com.bootdo.moneyLog.controller.WaterLogController.list
2019-04-06 15:22:04 -参数 : [{limit=10, offset=0, userType=, userOrg=, userId=, waterDate=}]
2019-04-06 15:22:04 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,`water_type`,`water_money`,`water_date`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from water_log order by id asc limit ?, ? 
2019-04-06 15:22:04 -==> Parameters: 0(Integer), 10(Integer)
2019-04-06 15:22:04 -<==      Total: 5
2019-04-06 15:22:04 -==>  Preparing: select count(*) from water_log 
2019-04-06 15:22:04 -==> Parameters: 
2019-04-06 15:22:04 -<==      Total: 1
2019-04-06 15:22:04 -耗时 : 7
2019-04-06 15:22:04 -返回值 : com.bootdo.common.utils.PageUtils@412c0036
2019-04-06 15:22:06 -请求地址 : http://localhost:8081/moneyLog/waterLog/edit/5
2019-04-06 15:22:06 -HTTP METHOD : GET
2019-04-06 15:22:06 -CLASS_METHOD : com.bootdo.moneyLog.controller.WaterLogController.edit
2019-04-06 15:22:06 -参数 : [5, {}]
2019-04-06 15:22:06 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,`water_type`,`water_money`,`water_date`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from water_log where id = ? 
2019-04-06 15:22:06 -==> Parameters: 5(Long)
2019-04-06 15:22:06 -<==      Total: 1
2019-04-06 15:22:06 -耗时 : 4
2019-04-06 15:22:06 -返回值 : moneyLog/waterLog/edit
2019-04-06 15:22:07 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-06 15:22:07 -HTTP METHOD : GET
2019-04-06 15:22:07 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-06 15:22:07 -参数 : [userType]
2019-04-06 15:22:07 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-06 15:22:07 -==> Parameters: userType(String)
2019-04-06 15:22:07 -请求地址 : http://localhost:8081/common/dict/list/waterType
2019-04-06 15:22:07 -HTTP METHOD : GET
2019-04-06 15:22:07 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-06 15:22:07 -<==      Total: 2
2019-04-06 15:22:07 -参数 : [waterType]
2019-04-06 15:22:07 -耗时 : 4
2019-04-06 15:22:07 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-06 15:22:07 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-06 15:22:07 -==> Parameters: waterType(String)
2019-04-06 15:22:07 -<==      Total: 6
2019-04-06 15:22:07 -耗时 : 17
2019-04-06 15:22:07 -返回值 : [DictDO{id=132, name='特殊水费4', value='5', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=131, name='特殊水费3', value='4', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=130, name='特殊水费2', value='3', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=129, name='特殊水费1', value='2', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=128, name='民用水', value='1', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=127, name='商业水', value='0', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-06 15:22:07 -请求地址 : http://localhost:8081/moneyLog/waterLog/update
2019-04-06 15:22:07 -HTTP METHOD : POST
2019-04-06 15:22:07 -CLASS_METHOD : com.bootdo.moneyLog.controller.WaterLogController.update
2019-04-06 15:22:07 -参数 : [com.bootdo.moneyLog.domain.WaterLogDO@1a54240b]
2019-04-06 15:22:08 -==>  Preparing: update water_log SET `user_id` = ?, `user_name` = ?, `user_type` = ?, `user_org` = ?, `water_type` = ?, `water_money` = ?, `water_date` = ?, `create_time` = ?, `update_time` = ?, `update_by` = ?, `remark` = ? where id = ? 
2019-04-06 15:22:08 -==> Parameters: 111(String), 111(String), A(String), 2(String), 1(String), 1.00(BigDecimal), 2019-11-11 15:16:55.0(Timestamp), 2019-04(String), 2019-04-06 15:22:08.0(Timestamp), 1(Long), (String), 5(Long)
2019-04-06 15:22:08 -<==    Updates: 1
2019-04-06 15:22:08 -耗时 : 90
2019-04-06 15:22:08 -返回值 : {msg=操作成功, code=0}
2019-04-06 15:22:08 -请求地址 : http://localhost:8081/moneyLog/waterLog/list
2019-04-06 15:22:08 -HTTP METHOD : GET
2019-04-06 15:22:08 -CLASS_METHOD : com.bootdo.moneyLog.controller.WaterLogController.list
2019-04-06 15:22:08 -参数 : [{limit=10, offset=0, userType=, userOrg=, userId=, waterDate=}]
2019-04-06 15:22:08 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,`water_type`,`water_money`,`water_date`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from water_log order by id asc limit ?, ? 
2019-04-06 15:22:08 -==> Parameters: 0(Integer), 10(Integer)
2019-04-06 15:22:08 -<==      Total: 5
2019-04-06 15:22:08 -==>  Preparing: select count(*) from water_log 
2019-04-06 15:22:08 -==> Parameters: 
2019-04-06 15:22:08 -<==      Total: 1
2019-04-06 15:22:08 -耗时 : 12
2019-04-06 15:22:08 -返回值 : com.bootdo.common.utils.PageUtils@3bb37c0d
2019-04-06 15:42:06 -请求地址 : http://localhost:8081/index
2019-04-06 15:42:06 -HTTP METHOD : GET
2019-04-06 15:42:06 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2019-04-06 15:42:06 -参数 : [{}]
2019-04-06 15:42:06 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2019-04-06 15:42:06 -==> Parameters: 1(Long)
2019-04-06 15:42:06 -<==      Total: 46
2019-04-06 15:42:06 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2019-04-06 15:42:06 -==> Parameters: 138(Long)
2019-04-06 15:42:06 -<==      Total: 1
2019-04-06 15:42:06 -耗时 : 19
2019-04-06 15:42:06 -返回值 : index_v1
2019-04-06 15:42:06 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-06 15:42:06 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 19(Integer), com.bootdo.system.controller.LoginController.index()(String), {"menus":[{"attributes":{"icon":"fa fa-money","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-money","url":"/moneyList/moneyList"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"102","parentId":"106","text":"现金缴费"},{"attributes":{"icon":"fa fa-book","url":"/moneyLog/elecLog"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"107","parentId":"106","text":"缴费记录"}],"hasChildren":true,"hasParent":false,"id":"106","parentId":"0","text":"收费管理"},{"attributes":{"icon":"fa fa-lightbulb-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/elec/elec"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"121","parentId":"103","text":"电费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"elec/elecInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"122","parentId":"103","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"elec/elecUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"123","parentId":"103","text":"电表上传"},{"attributes":{"icon":"fa fa-cc","url":"/elec/elecPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"124","parentId":"103","text":"电价管理"}],"hasChildren":true,"hasParent":false,"id":"103","parentId":"0","text":"电费管理"},{"attributes":{"icon":"fa fa-tint","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/water/water"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"117","parentId":"105","text":"水费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"water/waterInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"118","parentId":"105","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"water/waterUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"119","parentId":"105","text":"水费生成"},{"attributes":{"icon":"fa fa-cc","url":"/water/waterPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"120","parentId":"105","text":"水价管理"}],"hasChildren":true,"hasParent":false,"id":"105","parentId":"0","text":"水费管理"},{"attributes":{"icon":"fa fa-fire","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/heat/heat"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"113","parentId":"104","text":"暖费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"heat/heatInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"114","parentId":"104","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"heat/heatUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"115","parentId":"104","text":"暖费生成"},{"attributes":{"icon":"","url":"/heat/heatPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"116","parentId":"104","text":"暖价管理"}],"hasChildren":true,"hasParent":false,"id":"104","parentId":"0","text":"暖费管理"},{"attributes":{"icon":"fa fa-vcard-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-bomb","url":"/print/print"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"149","parentId":"108","text":"票据记录"}],"hasChildren":true,"hasParent":false,"id":"108","parentId":"0","text":"票据管理"},{"attributes":{"icon":"fa fa-bar-chart","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-area-chart","url":"/chart/graph_echarts.html"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","text":"百度chart"},{"attributes":{"icon":"fa fa-sun-o","url":"charts/countDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"109","parentId":"97","text":"日统计报表"},{"attributes":{"icon":"fa fa-registered","url":"charts/countMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"110","parentId":"97","text":"月统计报表"},{"attributes":{"icon":"fa fa-support","url":"charts/countYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"111","parentId":"97","text":"年统计报表"},{"attributes":{"icon":"fa fa-money","url":"charts/countOwe"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"155","parentId":"97","text":"欠费报表图"},{"attributes":{"icon":"fa fa-tachometer","url":"charts/countRun"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"112","parentId":"97","text":"走势图报表"}],"hasChildren":true,"hasParent":false,"id":"97","parentId":"0","text":"统计管理"},{"attributes":{"icon":"fa fa-bars","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-book","url":"/common/dict"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"78","parentId":"1","text":"数据字典"},{"attributes":{"icon":"fa fa-folder-open","url":"/common/sysFile"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"71","parentId":"1","text":"文件管理"}],"h(String), 127.0.0.1(String), 2019-04-06 15:42:06.085(Timestamp)
2019-04-06 15:42:06 -<==    Updates: 1
2019-04-06 15:42:06 -请求地址 : http://localhost:8081/main
2019-04-06 15:42:06 -HTTP METHOD : GET
2019-04-06 15:42:06 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-06 15:42:06 -参数 : []
2019-04-06 15:42:06 -耗时 : 1
2019-04-06 15:42:06 -返回值 : main
2019-04-06 15:42:06 -请求地址 : http://localhost:8081/oa/notify/message
2019-04-06 15:42:06 -HTTP METHOD : GET
2019-04-06 15:42:06 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2019-04-06 15:42:06 -参数 : []
2019-04-06 15:42:06 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2019-04-06 15:42:06 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2019-04-06 15:42:06 -<==      Total: 0
2019-04-06 15:42:06 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2019-04-06 15:42:06 -==> Parameters: 1(Long), 0(String)
2019-04-06 15:42:06 -<==      Total: 1
2019-04-06 15:42:06 -耗时 : 12
2019-04-06 15:42:06 -返回值 : com.bootdo.common.utils.PageUtils@2c98d16e
2019-04-06 15:42:07 -请求地址 : http://localhost:8081/main
2019-04-06 15:42:07 -HTTP METHOD : GET
2019-04-06 15:42:07 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-06 15:42:07 -参数 : []
2019-04-06 15:42:07 -耗时 : 1
2019-04-06 15:42:07 -返回值 : main
2019-04-06 15:42:08 -==>  Preparing: select distinct m.perms from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id = ur.role_id where ur.user_id = ? 
2019-04-06 15:42:08 -==> Parameters: 1(Long)
2019-04-06 15:42:08 -<==      Total: 90
2019-04-06 15:42:08 -请求地址 : http://localhost:8081/moneyLog/elecLog
2019-04-06 15:42:08 -HTTP METHOD : GET
2019-04-06 15:42:08 -CLASS_METHOD : com.bootdo.moneyLog.controller.ElecLogController.moneyLog
2019-04-06 15:42:08 -参数 : []
2019-04-06 15:42:08 -耗时 : 1
2019-04-06 15:42:08 -返回值 : /moneyLog/elecLog/elecLog
2019-04-06 15:42:10 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-06 15:42:10 -HTTP METHOD : GET
2019-04-06 15:42:10 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-06 15:42:10 -参数 : [userType]
2019-04-06 15:42:10 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-06 15:42:10 -==> Parameters: userType(String)
2019-04-06 15:42:10 -<==      Total: 2
2019-04-06 15:42:10 -耗时 : 4
2019-04-06 15:42:10 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-06 15:42:10 -请求地址 : http://localhost:8081/moneyLog/elecLog/list
2019-04-06 15:42:10 -HTTP METHOD : GET
2019-04-06 15:42:10 -CLASS_METHOD : com.bootdo.moneyLog.controller.ElecLogController.list
2019-04-06 15:42:10 -参数 : [{limit=10, offset=0, userType=, userOrg=, userId=, elecDate=}]
2019-04-06 15:42:10 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`elec_type`,`elec_money`,`elec_date`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec_log order by id asc limit ?, ? 
2019-04-06 15:42:10 -==> Parameters: 0(Integer), 10(Integer)
2019-04-06 15:42:10 -<==      Total: 7
2019-04-06 15:42:10 -==>  Preparing: select count(*) from elec_log 
2019-04-06 15:42:10 -==> Parameters: 
2019-04-06 15:42:10 -<==      Total: 1
2019-04-06 15:42:10 -耗时 : 12
2019-04-06 15:42:10 -返回值 : com.bootdo.common.utils.PageUtils@1f70a5ae
2019-04-06 15:42:11 -请求地址 : http://localhost:8081/moneyLog/waterLog
2019-04-06 15:42:11 -HTTP METHOD : GET
2019-04-06 15:42:11 -CLASS_METHOD : com.bootdo.moneyLog.controller.WaterLogController.WaterLog
2019-04-06 15:42:11 -参数 : []
2019-04-06 15:42:11 -耗时 : 1
2019-04-06 15:42:11 -返回值 : /moneyLog/waterLog/waterLog
2019-04-06 15:42:12 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-06 15:42:12 -HTTP METHOD : GET
2019-04-06 15:42:12 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-06 15:42:12 -参数 : [userType]
2019-04-06 15:42:12 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-06 15:42:12 -==> Parameters: userType(String)
2019-04-06 15:42:12 -<==      Total: 2
2019-04-06 15:42:12 -耗时 : 5
2019-04-06 15:42:12 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-06 15:42:12 -请求地址 : http://localhost:8081/moneyLog/waterLog/list
2019-04-06 15:42:12 -HTTP METHOD : GET
2019-04-06 15:42:12 -CLASS_METHOD : com.bootdo.moneyLog.controller.WaterLogController.list
2019-04-06 15:42:12 -参数 : [{limit=10, offset=0, userType=, userOrg=, userId=, waterDate=}]
2019-04-06 15:42:12 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,`water_type`,`water_money`,`water_date`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from water_log order by id asc limit ?, ? 
2019-04-06 15:42:12 -==> Parameters: 0(Integer), 10(Integer)
2019-04-06 15:42:12 -<==      Total: 5
2019-04-06 15:42:12 -==>  Preparing: select count(*) from water_log 
2019-04-06 15:42:12 -==> Parameters: 
2019-04-06 15:42:12 -<==      Total: 1
2019-04-06 15:42:12 -耗时 : 10
2019-04-06 15:42:12 -返回值 : com.bootdo.common.utils.PageUtils@1eef1abb
2019-04-06 15:42:13 -请求地址 : http://localhost:8081/moneyLog/waterLog/edit/5
2019-04-06 15:42:13 -HTTP METHOD : GET
2019-04-06 15:42:13 -CLASS_METHOD : com.bootdo.moneyLog.controller.WaterLogController.edit
2019-04-06 15:42:13 -参数 : [5, {}]
2019-04-06 15:42:13 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,`water_type`,`water_money`,`water_date`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from water_log where id = ? 
2019-04-06 15:42:13 -==> Parameters: 5(Long)
2019-04-06 15:42:13 -<==      Total: 1
2019-04-06 15:42:13 -耗时 : 4
2019-04-06 15:42:13 -返回值 : moneyLog/waterLog/edit
2019-04-06 15:42:14 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-06 15:42:14 -HTTP METHOD : GET
2019-04-06 15:42:14 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-06 15:42:14 -参数 : [userType]
2019-04-06 15:42:14 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-06 15:42:14 -==> Parameters: userType(String)
2019-04-06 15:42:14 -<==      Total: 2
2019-04-06 15:42:14 -耗时 : 6
2019-04-06 15:42:14 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-06 15:42:14 -请求地址 : http://localhost:8081/common/dict/list/waterType
2019-04-06 15:42:14 -HTTP METHOD : GET
2019-04-06 15:42:14 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-06 15:42:14 -参数 : [waterType]
2019-04-06 15:42:14 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-06 15:42:14 -==> Parameters: waterType(String)
2019-04-06 15:42:14 -<==      Total: 6
2019-04-06 15:42:14 -耗时 : 5
2019-04-06 15:42:14 -返回值 : [DictDO{id=132, name='特殊水费4', value='5', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=131, name='特殊水费3', value='4', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=130, name='特殊水费2', value='3', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=129, name='特殊水费1', value='2', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=128, name='民用水', value='1', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=127, name='商业水', value='0', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-06 15:42:16 -请求地址 : http://localhost:8081/moneyLog/waterLog/update
2019-04-06 15:42:16 -HTTP METHOD : POST
2019-04-06 15:42:16 -CLASS_METHOD : com.bootdo.moneyLog.controller.WaterLogController.update
2019-04-06 15:42:16 -参数 : [com.bootdo.moneyLog.domain.WaterLogDO@5169614]
2019-04-06 15:42:16 -==>  Preparing: update water_log SET `user_id` = ?, `user_name` = ?, `user_type` = ?, `user_org` = ?, `water_type` = ?, `water_money` = ?, `water_date` = ?, `create_time` = ?, `update_time` = ?, `update_by` = ?, `remark` = ? where id = ? 
2019-04-06 15:42:16 -==> Parameters: 111(String), 111(String), A(String), 2(String), 1(String), 1.00(BigDecimal), 2019-11-11 15:16:55.0(Timestamp), 2019-04(String), 2019-04-06 15:42:16.171(Timestamp), 1(Long), (String), 5(Long)
2019-04-06 15:42:16 -<==    Updates: 1
2019-04-06 15:42:16 -耗时 : 120
2019-04-06 15:42:16 -返回值 : {msg=操作成功, code=0}
2019-04-06 15:42:16 -请求地址 : http://localhost:8081/moneyLog/waterLog/list
2019-04-06 15:42:16 -HTTP METHOD : GET
2019-04-06 15:42:16 -CLASS_METHOD : com.bootdo.moneyLog.controller.WaterLogController.list
2019-04-06 15:42:16 -参数 : [{limit=10, offset=0, userType=, userOrg=, userId=, waterDate=}]
2019-04-06 15:42:16 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,`water_type`,`water_money`,`water_date`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from water_log order by id asc limit ?, ? 
2019-04-06 15:42:16 -==> Parameters: 0(Integer), 10(Integer)
2019-04-06 15:42:16 -<==      Total: 5
2019-04-06 15:42:16 -==>  Preparing: select count(*) from water_log 
2019-04-06 15:42:16 -==> Parameters: 
2019-04-06 15:42:16 -<==      Total: 1
2019-04-06 15:42:16 -耗时 : 13
2019-04-06 15:42:16 -返回值 : com.bootdo.common.utils.PageUtils@97cb719
2019-04-06 15:43:47 -Validating all active sessions...
2019-04-06 15:43:47 -Finished session validation.  [1] sessions were stopped.
2019-04-06 15:44:12 -请求地址 : http://localhost:8081/index
2019-04-06 15:44:12 -HTTP METHOD : GET
2019-04-06 15:44:12 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2019-04-06 15:44:12 -参数 : [{}]
2019-04-06 15:44:12 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2019-04-06 15:44:12 -==> Parameters: 1(Long)
2019-04-06 15:44:12 -<==      Total: 46
2019-04-06 15:44:12 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2019-04-06 15:44:12 -==> Parameters: 138(Long)
2019-04-06 15:44:12 -<==      Total: 1
2019-04-06 15:44:12 -耗时 : 25
2019-04-06 15:44:12 -返回值 : index_v1
2019-04-06 15:44:12 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-06 15:44:12 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 25(Integer), com.bootdo.system.controller.LoginController.index()(String), {"menus":[{"attributes":{"icon":"fa fa-money","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-money","url":"/moneyList/moneyList"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"102","parentId":"106","text":"现金缴费"},{"attributes":{"icon":"fa fa-book","url":"/moneyLog/elecLog"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"107","parentId":"106","text":"缴费记录"}],"hasChildren":true,"hasParent":false,"id":"106","parentId":"0","text":"收费管理"},{"attributes":{"icon":"fa fa-lightbulb-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/elec/elec"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"121","parentId":"103","text":"电费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"elec/elecInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"122","parentId":"103","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"elec/elecUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"123","parentId":"103","text":"电表上传"},{"attributes":{"icon":"fa fa-cc","url":"/elec/elecPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"124","parentId":"103","text":"电价管理"}],"hasChildren":true,"hasParent":false,"id":"103","parentId":"0","text":"电费管理"},{"attributes":{"icon":"fa fa-tint","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/water/water"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"117","parentId":"105","text":"水费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"water/waterInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"118","parentId":"105","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"water/waterUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"119","parentId":"105","text":"水费生成"},{"attributes":{"icon":"fa fa-cc","url":"/water/waterPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"120","parentId":"105","text":"水价管理"}],"hasChildren":true,"hasParent":false,"id":"105","parentId":"0","text":"水费管理"},{"attributes":{"icon":"fa fa-fire","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/heat/heat"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"113","parentId":"104","text":"暖费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"heat/heatInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"114","parentId":"104","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"heat/heatUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"115","parentId":"104","text":"暖费生成"},{"attributes":{"icon":"","url":"/heat/heatPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"116","parentId":"104","text":"暖价管理"}],"hasChildren":true,"hasParent":false,"id":"104","parentId":"0","text":"暖费管理"},{"attributes":{"icon":"fa fa-vcard-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-bomb","url":"/print/print"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"149","parentId":"108","text":"票据记录"}],"hasChildren":true,"hasParent":false,"id":"108","parentId":"0","text":"票据管理"},{"attributes":{"icon":"fa fa-bar-chart","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-area-chart","url":"/chart/graph_echarts.html"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","text":"百度chart"},{"attributes":{"icon":"fa fa-sun-o","url":"charts/countDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"109","parentId":"97","text":"日统计报表"},{"attributes":{"icon":"fa fa-registered","url":"charts/countMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"110","parentId":"97","text":"月统计报表"},{"attributes":{"icon":"fa fa-support","url":"charts/countYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"111","parentId":"97","text":"年统计报表"},{"attributes":{"icon":"fa fa-money","url":"charts/countOwe"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"155","parentId":"97","text":"欠费报表图"},{"attributes":{"icon":"fa fa-tachometer","url":"charts/countRun"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"112","parentId":"97","text":"走势图报表"}],"hasChildren":true,"hasParent":false,"id":"97","parentId":"0","text":"统计管理"},{"attributes":{"icon":"fa fa-bars","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-book","url":"/common/dict"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"78","parentId":"1","text":"数据字典"},{"attributes":{"icon":"fa fa-folder-open","url":"/common/sysFile"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"71","parentId":"1","text":"文件管理"}],"h(String), 127.0.0.1(String), 2019-04-06 15:44:12.919(Timestamp)
2019-04-06 15:44:13 -<==    Updates: 1
2019-04-06 15:44:13 -请求地址 : http://localhost:8081/main
2019-04-06 15:44:13 -HTTP METHOD : GET
2019-04-06 15:44:13 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-06 15:44:13 -参数 : []
2019-04-06 15:44:13 -耗时 : 2
2019-04-06 15:44:13 -返回值 : main
2019-04-06 15:44:13 -请求地址 : http://localhost:8081/oa/notify/message
2019-04-06 15:44:13 -HTTP METHOD : GET
2019-04-06 15:44:13 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2019-04-06 15:44:13 -参数 : []
2019-04-06 15:44:13 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2019-04-06 15:44:13 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2019-04-06 15:44:13 -<==      Total: 0
2019-04-06 15:44:13 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2019-04-06 15:44:13 -==> Parameters: 1(Long), 0(String)
2019-04-06 15:44:13 -<==      Total: 1
2019-04-06 15:44:13 -耗时 : 7
2019-04-06 15:44:13 -返回值 : com.bootdo.common.utils.PageUtils@3b1148ec
2019-04-06 15:44:13 -请求地址 : http://localhost:8081/main
2019-04-06 15:44:13 -HTTP METHOD : GET
2019-04-06 15:44:13 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-06 15:44:13 -参数 : []
2019-04-06 15:44:13 -耗时 : 1
2019-04-06 15:44:13 -返回值 : main
2019-04-06 15:44:16 -请求地址 : http://localhost:8081/moneyLog/elecLog
2019-04-06 15:44:16 -HTTP METHOD : GET
2019-04-06 15:44:16 -CLASS_METHOD : com.bootdo.moneyLog.controller.ElecLogController.moneyLog
2019-04-06 15:44:16 -参数 : []
2019-04-06 15:44:16 -耗时 : 0
2019-04-06 15:44:16 -返回值 : /moneyLog/elecLog/elecLog
2019-04-06 15:44:17 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-06 15:44:17 -HTTP METHOD : GET
2019-04-06 15:44:17 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-06 15:44:17 -参数 : [userType]
2019-04-06 15:44:17 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-06 15:44:17 -==> Parameters: userType(String)
2019-04-06 15:44:17 -<==      Total: 2
2019-04-06 15:44:17 -耗时 : 7
2019-04-06 15:44:17 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-06 15:44:17 -请求地址 : http://localhost:8081/moneyLog/elecLog/list
2019-04-06 15:44:17 -HTTP METHOD : GET
2019-04-06 15:44:17 -CLASS_METHOD : com.bootdo.moneyLog.controller.ElecLogController.list
2019-04-06 15:44:17 -参数 : [{limit=10, offset=0, userType=, userOrg=, userId=, elecDate=}]
2019-04-06 15:44:17 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`elec_type`,`elec_money`,`elec_date`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec_log order by id asc limit ?, ? 
2019-04-06 15:44:17 -==> Parameters: 0(Integer), 10(Integer)
2019-04-06 15:44:17 -<==      Total: 7
2019-04-06 15:44:17 -==>  Preparing: select count(*) from elec_log 
2019-04-06 15:44:17 -==> Parameters: 
2019-04-06 15:44:17 -<==      Total: 1
2019-04-06 15:44:17 -耗时 : 6
2019-04-06 15:44:17 -返回值 : com.bootdo.common.utils.PageUtils@382806c7
2019-04-06 15:44:18 -请求地址 : http://localhost:8081/moneyLog/waterLog
2019-04-06 15:44:18 -HTTP METHOD : GET
2019-04-06 15:44:18 -CLASS_METHOD : com.bootdo.moneyLog.controller.WaterLogController.WaterLog
2019-04-06 15:44:18 -参数 : []
2019-04-06 15:44:18 -耗时 : 0
2019-04-06 15:44:18 -返回值 : /moneyLog/waterLog/waterLog
2019-04-06 15:44:18 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-06 15:44:18 -HTTP METHOD : GET
2019-04-06 15:44:18 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-06 15:44:18 -参数 : [userType]
2019-04-06 15:44:18 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-06 15:44:18 -==> Parameters: userType(String)
2019-04-06 15:44:18 -<==      Total: 2
2019-04-06 15:44:18 -耗时 : 3
2019-04-06 15:44:18 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-06 15:44:18 -请求地址 : http://localhost:8081/moneyLog/waterLog/list
2019-04-06 15:44:18 -HTTP METHOD : GET
2019-04-06 15:44:18 -CLASS_METHOD : com.bootdo.moneyLog.controller.WaterLogController.list
2019-04-06 15:44:18 -参数 : [{limit=10, offset=0, userType=, userOrg=, userId=, waterDate=}]
2019-04-06 15:44:18 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,`water_type`,`water_money`,`water_date`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from water_log order by id asc limit ?, ? 
2019-04-06 15:44:18 -==> Parameters: 0(Integer), 10(Integer)
2019-04-06 15:44:18 -<==      Total: 5
2019-04-06 15:44:18 -==>  Preparing: select count(*) from water_log 
2019-04-06 15:44:18 -==> Parameters: 
2019-04-06 15:44:18 -<==      Total: 1
2019-04-06 15:44:18 -耗时 : 11
2019-04-06 15:44:18 -返回值 : com.bootdo.common.utils.PageUtils@924a71f
2019-04-06 15:44:20 -请求地址 : http://localhost:8081/moneyLog/waterLog/edit/5
2019-04-06 15:44:20 -HTTP METHOD : GET
2019-04-06 15:44:20 -CLASS_METHOD : com.bootdo.moneyLog.controller.WaterLogController.edit
2019-04-06 15:44:20 -参数 : [5, {}]
2019-04-06 15:44:20 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,`water_type`,`water_money`,`water_date`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from water_log where id = ? 
2019-04-06 15:44:20 -==> Parameters: 5(Long)
2019-04-06 15:44:20 -<==      Total: 1
2019-04-06 15:44:20 -耗时 : 10
2019-04-06 15:44:20 -返回值 : moneyLog/waterLog/edit
2019-04-06 15:44:20 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-06 15:44:20 -HTTP METHOD : GET
2019-04-06 15:44:20 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-06 15:44:20 -参数 : [userType]
2019-04-06 15:44:20 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-06 15:44:20 -==> Parameters: userType(String)
2019-04-06 15:44:20 -<==      Total: 2
2019-04-06 15:44:20 -耗时 : 6
2019-04-06 15:44:20 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-06 15:44:20 -请求地址 : http://localhost:8081/common/dict/list/waterType
2019-04-06 15:44:20 -HTTP METHOD : GET
2019-04-06 15:44:20 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-06 15:44:20 -参数 : [waterType]
2019-04-06 15:44:20 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-06 15:44:20 -==> Parameters: waterType(String)
2019-04-06 15:44:20 -<==      Total: 6
2019-04-06 15:44:20 -耗时 : 17
2019-04-06 15:44:20 -返回值 : [DictDO{id=132, name='特殊水费4', value='5', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=131, name='特殊水费3', value='4', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=130, name='特殊水费2', value='3', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=129, name='特殊水费1', value='2', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=128, name='民用水', value='1', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=127, name='商业水', value='0', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-06 15:44:22 -WebSocketSession[1 current WS(1)-HttpStream(0)-HttpPoll(0), 15 total, 0 closed abnormally (0 connect failure, 0 send limit, 0 transport error)], stompSubProtocol[processed CONNECT(15)-CONNECTED(15)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 8, active threads = 0, queued tasks = 0, completed tasks = 177], outboundChannelpool size = 2, active threads = 0, queued tasks = 0, completed tasks = 29], sockJsScheduler[pool size = 4, active threads = 1, queued tasks = 2, completed tasks = 864]
2019-04-06 15:44:22 -请求地址 : http://localhost:8081/moneyLog/waterLog/update
2019-04-06 15:44:22 -HTTP METHOD : POST
2019-04-06 15:44:22 -CLASS_METHOD : com.bootdo.moneyLog.controller.WaterLogController.update
2019-04-06 15:44:22 -参数 : [com.bootdo.moneyLog.domain.WaterLogDO@4337cf45]
2019-04-06 15:44:22 -==>  Preparing: update water_log SET `user_id` = ?, `user_name` = ?, `user_type` = ?, `user_org` = ?, `water_type` = ?, `water_money` = ?, `water_date` = ?, `create_time` = ?, `update_time` = ?, `update_by` = ?, `remark` = ? where id = ? 
2019-04-06 15:44:22 -==> Parameters: 111(String), 111(String), A(String), 2(String), 1(String), 1.00(BigDecimal), 2019-11-11 15:16:55.0(Timestamp), 2019-04(String), 2019-04-06 15:44:22.612(Timestamp), 1(Long), (String), 5(Long)
2019-04-06 15:44:22 -<==    Updates: 1
2019-04-06 15:44:22 -耗时 : 108
2019-04-06 15:44:22 -返回值 : {msg=操作成功, code=0}
2019-04-06 15:44:22 -请求地址 : http://localhost:8081/moneyLog/waterLog/list
2019-04-06 15:44:22 -HTTP METHOD : GET
2019-04-06 15:44:22 -CLASS_METHOD : com.bootdo.moneyLog.controller.WaterLogController.list
2019-04-06 15:44:22 -参数 : [{limit=10, offset=0, userType=, userOrg=, userId=, waterDate=}]
2019-04-06 15:44:22 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,`water_type`,`water_money`,`water_date`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from water_log order by id asc limit ?, ? 
2019-04-06 15:44:22 -==> Parameters: 0(Integer), 10(Integer)
2019-04-06 15:44:22 -<==      Total: 5
2019-04-06 15:44:22 -==>  Preparing: select count(*) from water_log 
2019-04-06 15:44:22 -==> Parameters: 
2019-04-06 15:44:22 -<==      Total: 1
2019-04-06 15:44:22 -耗时 : 11
2019-04-06 15:44:22 -返回值 : com.bootdo.common.utils.PageUtils@1a6ee5c6
2019-04-06 15:44:53 -请求地址 : http://localhost:8081/login;JSESSIONID=1338f02b-bdc9-4071-91ff-4c34ccbf7fe8
2019-04-06 15:44:53 -HTTP METHOD : GET
2019-04-06 15:44:53 -CLASS_METHOD : com.bootdo.system.controller.LoginController.login
2019-04-06 15:44:53 -参数 : [{}]
2019-04-06 15:44:53 -耗时 : 1
2019-04-06 15:44:53 -返回值 : login
2019-04-06 15:44:54 -请求地址 : http://localhost:8081/getVerify
2019-04-06 15:44:54 -HTTP METHOD : GET
2019-04-06 15:44:54 -CLASS_METHOD : com.bootdo.system.controller.LoginController.getVerify
2019-04-06 15:44:54 -参数 : [org.apache.shiro.web.servlet.ShiroHttpServletRequest@1240e9d4, org.apache.shiro.web.servlet.ShiroHttpServletResponse@381838ed]
2019-04-06 15:44:54 -0429
2019-04-06 15:44:54 -耗时 : 46
2019-04-06 15:44:54 -返回值 : null
2019-04-06 15:44:54 -请求地址 : http://localhost:8081/login
2019-04-06 15:44:54 -HTTP METHOD : GET
2019-04-06 15:44:54 -CLASS_METHOD : com.bootdo.system.controller.LoginController.login
2019-04-06 15:44:54 -参数 : [{}]
2019-04-06 15:44:54 -耗时 : 2
2019-04-06 15:44:54 -返回值 : login
2019-04-06 15:45:00 -请求地址 : http://localhost:8081/login
2019-04-06 15:45:00 -HTTP METHOD : POST
2019-04-06 15:45:00 -CLASS_METHOD : com.bootdo.system.controller.LoginController.ajaxLogin
2019-04-06 15:45:00 -参数 : [admin, 111111, 0429, org.apache.shiro.web.servlet.ShiroHttpServletRequest@737fd8e3]
2019-04-06 15:45:00 -==>  Preparing: select `user_id`,`username`,`name`,`password`,`dept_id`,`email`,`mobile`,`status`,`user_id_create`,`gmt_create`,`gmt_modified`,`sex`,`birth`,`pic_id`,`live_address`,`hobby`,`province`,`city`,`district` from sys_user WHERE username = ? order by user_id desc 
2019-04-06 15:45:00 -==> Parameters: admin(String)
2019-04-06 15:45:00 -<==      Total: 1
2019-04-06 15:45:00 -耗时 : 8
2019-04-06 15:45:00 -返回值 : {msg=操作成功, code=0}
2019-04-06 15:45:00 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-06 15:45:00 -==> Parameters: 1(Long), admin(String), 登录(String), 8(Integer), com.bootdo.system.controller.LoginController.ajaxLogin()(String), null, 127.0.0.1(String), 2019-04-06 15:45:00.893(Timestamp)
2019-04-06 15:45:00 -请求地址 : http://localhost:8081/index
2019-04-06 15:45:00 -HTTP METHOD : GET
2019-04-06 15:45:00 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2019-04-06 15:45:00 -参数 : [{}]
2019-04-06 15:45:00 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2019-04-06 15:45:00 -==> Parameters: 1(Long)
2019-04-06 15:45:00 -<==      Total: 46
2019-04-06 15:45:00 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2019-04-06 15:45:00 -==> Parameters: 138(Long)
2019-04-06 15:45:01 -<==      Total: 1
2019-04-06 15:45:01 -耗时 : 86
2019-04-06 15:45:01 -返回值 : index_v1
2019-04-06 15:45:01 -<==    Updates: 1
2019-04-06 15:45:01 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-06 15:45:01 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 87(Integer), com.bootdo.system.controller.LoginController.index()(String), {"menus":[{"attributes":{"icon":"fa fa-money","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-money","url":"/moneyList/moneyList"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"102","parentId":"106","text":"现金缴费"},{"attributes":{"icon":"fa fa-book","url":"/moneyLog/elecLog"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"107","parentId":"106","text":"缴费记录"}],"hasChildren":true,"hasParent":false,"id":"106","parentId":"0","text":"收费管理"},{"attributes":{"icon":"fa fa-lightbulb-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/elec/elec"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"121","parentId":"103","text":"电费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"elec/elecInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"122","parentId":"103","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"elec/elecUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"123","parentId":"103","text":"电表上传"},{"attributes":{"icon":"fa fa-cc","url":"/elec/elecPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"124","parentId":"103","text":"电价管理"}],"hasChildren":true,"hasParent":false,"id":"103","parentId":"0","text":"电费管理"},{"attributes":{"icon":"fa fa-tint","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/water/water"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"117","parentId":"105","text":"水费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"water/waterInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"118","parentId":"105","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"water/waterUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"119","parentId":"105","text":"水费生成"},{"attributes":{"icon":"fa fa-cc","url":"/water/waterPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"120","parentId":"105","text":"水价管理"}],"hasChildren":true,"hasParent":false,"id":"105","parentId":"0","text":"水费管理"},{"attributes":{"icon":"fa fa-fire","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/heat/heat"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"113","parentId":"104","text":"暖费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"heat/heatInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"114","parentId":"104","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"heat/heatUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"115","parentId":"104","text":"暖费生成"},{"attributes":{"icon":"","url":"/heat/heatPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"116","parentId":"104","text":"暖价管理"}],"hasChildren":true,"hasParent":false,"id":"104","parentId":"0","text":"暖费管理"},{"attributes":{"icon":"fa fa-vcard-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-bomb","url":"/print/print"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"149","parentId":"108","text":"票据记录"}],"hasChildren":true,"hasParent":false,"id":"108","parentId":"0","text":"票据管理"},{"attributes":{"icon":"fa fa-bar-chart","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-area-chart","url":"/chart/graph_echarts.html"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","text":"百度chart"},{"attributes":{"icon":"fa fa-sun-o","url":"charts/countDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"109","parentId":"97","text":"日统计报表"},{"attributes":{"icon":"fa fa-registered","url":"charts/countMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"110","parentId":"97","text":"月统计报表"},{"attributes":{"icon":"fa fa-money","url":"charts/countOwe"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"155","parentId":"97","text":"欠费报表图"},{"attributes":{"icon":"fa fa-support","url":"charts/countYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"111","parentId":"97","text":"年统计报表"},{"attributes":{"icon":"fa fa-tachometer","url":"charts/countRun"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"112","parentId":"97","text":"走势图报表"}],"hasChildren":true,"hasParent":false,"id":"97","parentId":"0","text":"统计管理"},{"attributes":{"icon":"fa fa-bars","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-book","url":"/common/dict"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"78","parentId":"1","text":"数据字典"},{"attributes":{"icon":"fa fa-folder-open","url":"/common/sysFile"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"71","parentId":"1","text":"文件管理"}],"h(String), 127.0.0.1(String), 2019-04-06 15:45:01.032(Timestamp)
2019-04-06 15:45:01 -<==    Updates: 1
2019-04-06 15:45:01 -请求地址 : http://localhost:8081/main
2019-04-06 15:45:01 -HTTP METHOD : GET
2019-04-06 15:45:01 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-06 15:45:01 -参数 : []
2019-04-06 15:45:01 -耗时 : 1
2019-04-06 15:45:01 -返回值 : main
2019-04-06 15:45:01 -请求地址 : http://localhost:8081/oa/notify/message
2019-04-06 15:45:01 -HTTP METHOD : GET
2019-04-06 15:45:01 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2019-04-06 15:45:01 -参数 : []
2019-04-06 15:45:01 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2019-04-06 15:45:01 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2019-04-06 15:45:01 -<==      Total: 0
2019-04-06 15:45:01 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2019-04-06 15:45:01 -==> Parameters: 1(Long), 0(String)
2019-04-06 15:45:01 -<==      Total: 1
2019-04-06 15:45:01 -耗时 : 10
2019-04-06 15:45:01 -返回值 : com.bootdo.common.utils.PageUtils@3a25a5ef
2019-04-06 15:45:01 -请求地址 : http://localhost:8081/main
2019-04-06 15:45:01 -HTTP METHOD : GET
2019-04-06 15:45:01 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-06 15:45:01 -参数 : []
2019-04-06 15:45:01 -耗时 : 1
2019-04-06 15:45:01 -返回值 : main
2019-04-06 15:45:12 -==>  Preparing: select distinct m.perms from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id = ur.role_id where ur.user_id = ? 
2019-04-06 15:45:12 -==> Parameters: 1(Long)
2019-04-06 15:45:12 -<==      Total: 90
2019-04-06 15:45:12 -请求地址 : http://localhost:8081/moneyLog/elecLog
2019-04-06 15:45:12 -HTTP METHOD : GET
2019-04-06 15:45:12 -CLASS_METHOD : com.bootdo.moneyLog.controller.ElecLogController.moneyLog
2019-04-06 15:45:12 -参数 : []
2019-04-06 15:45:12 -耗时 : 1
2019-04-06 15:45:12 -返回值 : /moneyLog/elecLog/elecLog
2019-04-06 15:45:13 -请求地址 : http://localhost:8081/moneyLog/waterLog
2019-04-06 15:45:13 -HTTP METHOD : GET
2019-04-06 15:45:13 -CLASS_METHOD : com.bootdo.moneyLog.controller.WaterLogController.WaterLog
2019-04-06 15:45:13 -参数 : []
2019-04-06 15:45:13 -耗时 : 2
2019-04-06 15:45:13 -返回值 : /moneyLog/waterLog/waterLog
2019-04-06 15:45:14 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-06 15:45:14 -HTTP METHOD : GET
2019-04-06 15:45:14 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-06 15:45:14 -参数 : [userType]
2019-04-06 15:45:14 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-06 15:45:14 -==> Parameters: userType(String)
2019-04-06 15:45:14 -<==      Total: 2
2019-04-06 15:45:14 -耗时 : 8
2019-04-06 15:45:14 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-06 15:45:14 -请求地址 : http://localhost:8081/moneyLog/waterLog/list
2019-04-06 15:45:14 -HTTP METHOD : GET
2019-04-06 15:45:14 -CLASS_METHOD : com.bootdo.moneyLog.controller.WaterLogController.list
2019-04-06 15:45:14 -参数 : [{limit=10, offset=0, userType=, userOrg=, userId=, waterDate=}]
2019-04-06 15:45:14 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,`water_type`,`water_money`,`water_date`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from water_log order by id asc limit ?, ? 
2019-04-06 15:45:14 -==> Parameters: 0(Integer), 10(Integer)
2019-04-06 15:45:14 -<==      Total: 5
2019-04-06 15:45:14 -==>  Preparing: select count(*) from water_log 
2019-04-06 15:45:14 -==> Parameters: 
2019-04-06 15:45:14 -<==      Total: 1
2019-04-06 15:45:14 -耗时 : 12
2019-04-06 15:45:14 -返回值 : com.bootdo.common.utils.PageUtils@7082d932
2019-04-06 15:45:15 -请求地址 : http://localhost:8081/moneyLog/waterLog/edit/5
2019-04-06 15:45:15 -HTTP METHOD : GET
2019-04-06 15:45:15 -CLASS_METHOD : com.bootdo.moneyLog.controller.WaterLogController.edit
2019-04-06 15:45:15 -参数 : [5, {}]
2019-04-06 15:45:15 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,`water_type`,`water_money`,`water_date`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from water_log where id = ? 
2019-04-06 15:45:15 -==> Parameters: 5(Long)
2019-04-06 15:45:15 -<==      Total: 1
2019-04-06 15:45:15 -耗时 : 6
2019-04-06 15:45:15 -返回值 : moneyLog/waterLog/edit
2019-04-06 15:45:16 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-06 15:45:16 -HTTP METHOD : GET
2019-04-06 15:45:16 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-06 15:45:16 -参数 : [userType]
2019-04-06 15:45:16 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-06 15:45:16 -==> Parameters: userType(String)
2019-04-06 15:45:16 -请求地址 : http://localhost:8081/common/dict/list/waterType
2019-04-06 15:45:16 -HTTP METHOD : GET
2019-04-06 15:45:16 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-06 15:45:16 -参数 : [waterType]
2019-04-06 15:45:16 -<==      Total: 2
2019-04-06 15:45:16 -耗时 : 4
2019-04-06 15:45:16 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-06 15:45:16 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-06 15:45:16 -==> Parameters: waterType(String)
2019-04-06 15:45:16 -<==      Total: 6
2019-04-06 15:45:16 -耗时 : 12
2019-04-06 15:45:16 -返回值 : [DictDO{id=132, name='特殊水费4', value='5', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=131, name='特殊水费3', value='4', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=130, name='特殊水费2', value='3', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=129, name='特殊水费1', value='2', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=128, name='民用水', value='1', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=127, name='商业水', value='0', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-06 15:45:17 -请求地址 : http://localhost:8081/moneyLog/waterLog/update
2019-04-06 15:45:17 -HTTP METHOD : POST
2019-04-06 15:45:17 -CLASS_METHOD : com.bootdo.moneyLog.controller.WaterLogController.update
2019-04-06 15:45:17 -参数 : [com.bootdo.moneyLog.domain.WaterLogDO@181e0706]
2019-04-06 15:45:17 -==>  Preparing: update water_log SET `user_id` = ?, `user_name` = ?, `user_type` = ?, `user_org` = ?, `water_type` = ?, `water_money` = ?, `water_date` = ?, `create_time` = ?, `update_time` = ?, `update_by` = ?, `remark` = ? where id = ? 
2019-04-06 15:45:17 -==> Parameters: 111(String), 111(String), A(String), 2(String), 1(String), 1.00(BigDecimal), 2019-11-11 15:16:55.0(Timestamp), 2019-04(String), 2019-04-06 15:45:17.428(Timestamp), 1(Long), (String), 5(Long)
2019-04-06 15:45:17 -<==    Updates: 1
2019-04-06 15:45:17 -耗时 : 109
2019-04-06 15:45:17 -返回值 : {msg=操作成功, code=0}
2019-04-06 15:45:17 -请求地址 : http://localhost:8081/moneyLog/waterLog/list
2019-04-06 15:45:17 -HTTP METHOD : GET
2019-04-06 15:45:17 -CLASS_METHOD : com.bootdo.moneyLog.controller.WaterLogController.list
2019-04-06 15:45:17 -参数 : [{limit=10, offset=0, userType=, userOrg=, userId=, waterDate=}]
2019-04-06 15:45:17 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,`water_type`,`water_money`,`water_date`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from water_log order by id asc limit ?, ? 
2019-04-06 15:45:17 -==> Parameters: 0(Integer), 10(Integer)
2019-04-06 15:45:17 -<==      Total: 5
2019-04-06 15:45:17 -==>  Preparing: select count(*) from water_log 
2019-04-06 15:45:17 -==> Parameters: 
2019-04-06 15:45:17 -<==      Total: 1
2019-04-06 15:45:17 -耗时 : 13
2019-04-06 15:45:17 -返回值 : com.bootdo.common.utils.PageUtils@577b9a7e
2019-04-06 15:48:19 -Starting BootdoApplication on ZJZL-20180906VX with PID 1728 (D:\eclipse2018-work\bootdo\target\classes started by Administrator in D:\eclipse2018-work\bootdo)
2019-04-06 15:48:19 -Running with Spring Boot v2.0.3.RELEASE, Spring v5.0.7.RELEASE
2019-04-06 15:48:19 -The following profiles are active: dev
2019-04-06 15:48:19 -Refreshing org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@63b1d4fa: startup date [Sat Apr 06 15:48:19 CST 2019]; root of context hierarchy
2019-04-06 15:48:25 -Multiple Spring Data modules found, entering strict repository configuration mode!
2019-04-06 15:48:30 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$58ca567c] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-06 15:48:30 -Bean 'shiroConfig' of type [com.bootdo.system.config.ShiroConfig$$EnhancerBySpringCGLIB$$4b238523] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-06 15:48:33 -Bean 'userRealm' of type [com.bootdo.system.shiro.UserRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-06 15:48:34 -Bean 'cacheManager2' of type [net.sf.ehcache.CacheManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-06 15:48:34 -Bean 'ehCacheManager' of type [org.apache.shiro.cache.ehcache.EhCacheManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-06 15:48:34 -Cache with name 'com.bootdo.system.shiro.UserRealm.authorizationCache' does not yet exist.  Creating now.
2019-04-06 15:48:34 -Added EhCache named [com.bootdo.system.shiro.UserRealm.authorizationCache]
2019-04-06 15:48:34 -Bean 'sessionDAO' of type [org.apache.shiro.session.mgt.eis.MemorySessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-06 15:48:34 -Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-06 15:48:34 -Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-06 15:48:35 -Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-06 15:48:37 -Tomcat initialized with port(s): 8081 (http)
2019-04-06 15:48:37 -Initializing ProtocolHandler ["http-nio-8081"]
2019-04-06 15:48:37 -Starting service [Tomcat]
2019-04-06 15:48:37 -Starting Servlet Engine: Apache Tomcat/8.5.31
2019-04-06 15:48:37 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [C:\Program Files\Java\jre1.8.0_131\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:/Program Files/Java/jre1.8.0_131/bin/server;C:/Program Files/Java/jre1.8.0_131/bin;C:/Program Files/Java/jre1.8.0_131/lib/amd64;C:\ProgramData\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Windows\System32\OpenSSH\;D:\pbb\pycSafefile\x64;D:\pbb\PBB Reader\x64;C:\Program Files\MySQL\MySQL Utilities 1.6\;D:\MAVEN\apache-maven-3.6.0\bin;D:\GIT\Git\cmd;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;;C:\Users\Administrator\Desktop;;.]
2019-04-06 15:48:38 -Initializing Spring embedded WebApplicationContext
2019-04-06 15:48:38 -Root WebApplicationContext: initialization completed in 18404 ms
2019-04-06 15:48:40 -Mapping filter: 'characterEncodingFilter' to: [/*]
2019-04-06 15:48:40 -Mapping filter: 'hiddenHttpMethodFilter' to: [/*]
2019-04-06 15:48:40 -Mapping filter: 'httpPutFormContentFilter' to: [/*]
2019-04-06 15:48:40 -Mapping filter: 'requestContextFilter' to: [/*]
2019-04-06 15:48:40 -Filter xssFilter was not registered (disabled)
2019-04-06 15:48:40 -Mapping filter: 'webStatFilter' to urls: [/*]
2019-04-06 15:48:40 -Mapping filter: 'shiroFilterFactoryBean' to: [/*]
2019-04-06 15:48:40 -Servlet statViewServlet mapped to [/druid/*]
2019-04-06 15:48:40 -Servlet dispatcherServlet mapped to [/]
2019-04-06 15:48:47 -ApplicationContext registed-->org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@63b1d4fa: startup date [Sat Apr 06 15:48:19 CST 2019]; root of context hierarchy
2019-04-06 15:48:48 -Using default implementation for ThreadExecutor
2019-04-06 15:48:48 -Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2019-04-06 15:48:48 -Quartz Scheduler v.2.2.1 created.
2019-04-06 15:48:48 -RAMJobStore initialized.
2019-04-06 15:48:48 -Scheduler meta-data: Quartz Scheduler (v2.2.1) 'schedulerFactoryBean' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2019-04-06 15:48:48 -Quartz scheduler 'schedulerFactoryBean' initialized from an externally provided properties instance.
2019-04-06 15:48:48 -Quartz scheduler version: 2.2.1
2019-04-06 15:48:48 -JobFactory set to: com.bootdo.common.quartz.factory.JobFactory@2a9f8d47
2019-04-06 15:48:50 -Initializing ExecutorService  'clientInboundChannelExecutor'
2019-04-06 15:48:50 -Initializing ExecutorService  'clientOutboundChannelExecutor'
2019-04-06 15:48:56 -Mapped "{[/charts/countDD/getCountDD],methods=[POST]}" onto public com.bootdo.charts.vo.CountDayVo com.bootdo.charts.controller.countDDController.getCountD(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo,javax.servlet.http.HttpServletRequest)
2019-04-06 15:48:56 -Mapped "{[/charts/countDD/tableDD],methods=[POST]}" onto public java.lang.String com.bootdo.charts.controller.countDDController.tableDD()
2019-04-06 15:48:56 -Mapped "{[/charts/countDD],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.countDDController.countDD()
2019-04-06 15:48:56 -Mapped "{[/charts/countDD/exportCountDD],methods=[GET]}" onto public void com.bootdo.charts.controller.countDDController.exprotElecLog(com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-06 15:48:56 -Mapped "{[/charts/countMM/exportCountMM],methods=[GET]}" onto public void com.bootdo.charts.controller.countMMController.exprotElecLog(com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-06 15:48:56 -Mapped "{[/charts/countMM],methods=[GET]}" onto java.lang.String com.bootdo.charts.controller.countMMController.countMM()
2019-04-06 15:48:56 -Mapped "{[/charts/countMM/getCountMM],methods=[POST]}" onto public void com.bootdo.charts.controller.countMMController.getCountMM(org.springframework.ui.Model,com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo,javax.servlet.http.HttpServletRequest)
2019-04-06 15:48:56 -Mapped "{[/charts/countOwe/getCountOwe],methods=[POST]}" onto public com.bootdo.charts.vo.CountOweVo com.bootdo.charts.controller.countOweController.getCountD(com.bootdo.elec.vo.ElecVo,com.bootdo.water.vo.WaterVo,com.bootdo.heat.vo.HeatVo,javax.servlet.http.HttpServletRequest)
2019-04-06 15:48:56 -Mapped "{[/charts/countOwe],methods=[GET]}" onto java.lang.String com.bootdo.charts.controller.countOweController.countOwe()
2019-04-06 15:48:56 -Mapped "{[/charts/countRun/getCountRun],methods=[POST]}" onto public int com.bootdo.charts.controller.countRunController.getCountD(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo)
2019-04-06 15:48:56 -Mapped "{[/charts/countRun/exportCountRun],methods=[GET]}" onto public void com.bootdo.charts.controller.countRunController.exprotElecLog(com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-06 15:48:56 -Mapped "{[/charts/countRun],methods=[GET]}" onto java.lang.String com.bootdo.charts.controller.countRunController.countRun()
2019-04-06 15:48:56 -Mapped "{[/charts/countYY],methods=[GET]}" onto java.lang.String com.bootdo.charts.controller.countYYController.countYY()
2019-04-06 15:48:56 -Mapped "{[/charts/countYY/getCountYY],methods=[POST]}" onto public int com.bootdo.charts.controller.countYYController.getCountD(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo)
2019-04-06 15:48:56 -Mapped "{[/charts/countYY/exportCountYY],methods=[GET]}" onto public void com.bootdo.charts.controller.countYYController.exprotElecLog(com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-06 15:48:56 -Mapped "{[/common/dict/add],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.add()
2019-04-06 15:48:56 -Mapped "{[/common/dict/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.remove(java.lang.Long)
2019-04-06 15:48:56 -Mapped "{[/common/dict/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.remove(java.lang.Long[])
2019-04-06 15:48:56 -Mapped "{[/common/dict/update]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.update(com.bootdo.common.domain.DictDO)
2019-04-06 15:48:56 -Mapped "{[/common/dict/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.common.controller.DictController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-06 15:48:56 -Mapped "{[/common/dict/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.save(com.bootdo.common.domain.DictDO)
2019-04-06 15:48:56 -Mapped "{[/common/dict/type],methods=[GET]}" onto public java.util.List<com.bootdo.common.domain.DictDO> com.bootdo.common.controller.DictController.listType()
2019-04-06 15:48:56 -Mapped "{[/common/dict],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.dict()
2019-04-06 15:48:56 -Mapped "{[/common/dict/list/{type}],methods=[GET]}" onto public java.util.List<com.bootdo.common.domain.DictDO> com.bootdo.common.controller.DictController.listByType(java.lang.String)
2019-04-06 15:48:56 -Mapped "{[/common/dict/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-06 15:48:56 -Mapped "{[/common/dict/add/{type}/{description}],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.addD(org.springframework.ui.Model,java.lang.String,java.lang.String)
2019-04-06 15:48:56 -Mapped "{[/common/sysFile/add],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.FileController.add()
2019-04-06 15:48:56 -Mapped "{[/common/sysFile/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.remove(java.lang.Long,javax.servlet.http.HttpServletRequest)
2019-04-06 15:48:56 -Mapped "{[/common/sysFile/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.remove(java.lang.Long[])
2019-04-06 15:48:56 -Mapped "{[/common/sysFile/update]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.update(com.bootdo.common.domain.FileDO)
2019-04-06 15:48:56 -Mapped "{[/common/sysFile/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.common.controller.FileController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-06 15:48:56 -Mapped "{[/common/sysFile/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.save(com.bootdo.common.domain.FileDO)
2019-04-06 15:48:56 -Mapped "{[/common/sysFile/info/{id}]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.info(java.lang.Long)
2019-04-06 15:48:56 -Mapped "{[/common/sysFile/edit],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.FileController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-06 15:48:56 -Mapped "{[/common/sysFile/upload],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.FileController.upload(org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpServletRequest)
2019-04-06 15:48:56 -Mapped "{[/common/sysFile],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.FileController.sysFile(org.springframework.ui.Model)
2019-04-06 15:48:56 -Mapped "{[/common/generator/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.GeneratorController.update(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-06 15:48:56 -Mapped "{[/common/generator/list],methods=[GET]}" onto java.util.List<java.util.Map<java.lang.String, java.lang.Object>> com.bootdo.common.controller.GeneratorController.list()
2019-04-06 15:48:56 -Mapped "{[/common/generator/code/{tableName}]}" onto public void com.bootdo.common.controller.GeneratorController.code(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String) throws java.io.IOException
2019-04-06 15:48:56 -Mapped "{[/common/generator],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.GeneratorController.generator()
2019-04-06 15:48:56 -Mapped "{[/common/generator/edit],methods=[GET]}" onto public java.lang.String com.bootdo.common.controller.GeneratorController.edit(org.springframework.ui.Model)
2019-04-06 15:48:56 -Mapped "{[/common/generator/batchCode]}" onto public void com.bootdo.common.controller.GeneratorController.batchCode(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String) throws java.io.IOException
2019-04-06 15:48:56 -Mapped "{[/common/job/add],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.JobController.add()
2019-04-06 15:48:56 -Mapped "{[/common/job/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.remove(java.lang.Long)
2019-04-06 15:48:56 -Mapped "{[/common/job/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.remove(java.lang.Long[])
2019-04-06 15:48:56 -Mapped "{[/common/job/update],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.update(com.bootdo.common.domain.TaskDO)
2019-04-06 15:48:56 -Mapped "{[/common/job/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.common.controller.JobController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-06 15:48:56 -Mapped "{[/common/job/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.save(com.bootdo.common.domain.TaskDO)
2019-04-06 15:48:56 -Mapped "{[/common/job/info/{id}]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.info(java.lang.Long)
2019-04-06 15:48:56 -Mapped "{[/common/job/changeJobStatus],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.changeJobStatus(java.lang.Long,java.lang.String)
2019-04-06 15:48:56 -Mapped "{[/common/job/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.JobController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-06 15:48:56 -Mapped "{[/common/job],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.JobController.taskScheduleJob()
2019-04-06 15:48:56 -Mapped "{[/common/log/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.LogController.remove(java.lang.Long)
2019-04-06 15:48:56 -Mapped "{[/common/log],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.LogController.log()
2019-04-06 15:48:56 -Mapped "{[/common/log/list],methods=[GET]}" onto com.bootdo.common.domain.PageDO<com.bootdo.common.domain.LogDO> com.bootdo.common.controller.LogController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-06 15:48:56 -Mapped "{[/common/log/batchRemove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.LogController.batchRemove(java.lang.Long[])
2019-04-06 15:48:56 -Mapped "{[/common/long],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.LongController.Long()
2019-04-06 15:48:56 -Mapped "{[/common/time],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.TimeController.Time()
2019-04-06 15:48:56 -Mapped "{[/error]}" onto public com.bootdo.common.utils.R com.bootdo.common.exception.MainsiteErrorController.handleError(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-04-06 15:48:56 -Mapped "{[/error],produces=[text/html]}" onto public org.springframework.web.servlet.ModelAndView com.bootdo.common.exception.MainsiteErrorController.errorHtml(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-04-06 15:48:56 -Mapped "{[/elec/elec/add],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecController.add()
2019-04-06 15:48:56 -Mapped "{[/elec/elec/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.remove(java.lang.Long)
2019-04-06 15:48:56 -Mapped "{[/elec/elec/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.remove(java.lang.Long[])
2019-04-06 15:48:56 -Mapped "{[/elec/elec/update],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.update(com.bootdo.elec.domain.ElecDO)
2019-04-06 15:48:56 -Mapped "{[/elec/elec/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.elec.controller.ElecController.list(java.util.Map<java.lang.String, java.lang.Object>,com.bootdo.elec.domain.ElecDO)
2019-04-06 15:48:56 -Mapped "{[/elec/elec/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.save(com.bootdo.elec.domain.ElecDO)
2019-04-06 15:48:56 -Mapped "{[/elec/elec/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-06 15:48:56 -Mapped "{[/elec/elec],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecController.Elec()
2019-04-06 15:48:56 -Mapped "{[/elec/elec/exprotElec],methods=[GET]}" onto public void com.bootdo.elec.controller.ElecController.exprotExcel(com.bootdo.elec.vo.ElecVo,javax.servlet.http.HttpServletResponse)
2019-04-06 15:48:56 -Mapped "{[/elec/elecInto/exprotElecIntoExcel],methods=[GET]}" onto public void com.bootdo.elec.controller.ElecIntoController.exprotExcel(com.bootdo.elec.vo.ElecVo,javax.servlet.http.HttpServletResponse)
2019-04-06 15:48:56 -Mapped "{[/elec/elecInto],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecIntoController.ElecInto()
2019-04-06 15:48:56 -Mapped "{[/elec/elecInto/importElecIntoExcel],methods=[POST]}" onto public java.util.Map<java.lang.String, java.lang.Object> com.bootdo.elec.controller.ElecIntoController.importElecIntoExcel(org.springframework.web.multipart.MultipartFile,com.bootdo.elec.vo.ElecVo) throws java.lang.Exception
2019-04-06 15:48:56 -Mapped "{[/elec/elecPrice/add],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecPriceController.add()
2019-04-06 15:48:56 -Mapped "{[/elec/elecPrice/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecPriceController.remove(java.lang.Long)
2019-04-06 15:48:56 -Mapped "{[/elec/elecPrice/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecPriceController.remove(java.lang.Long[])
2019-04-06 15:48:56 -Mapped "{[/elec/elecPrice/update]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecPriceController.update(com.bootdo.elec.domain.ElecPriceDO)
2019-04-06 15:48:56 -Mapped "{[/elec/elecPrice/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.elec.controller.ElecPriceController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-06 15:48:56 -Mapped "{[/elec/elecPrice/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecPriceController.save(com.bootdo.elec.domain.ElecPriceDO,com.bootdo.elec.domain.ElecDO)
2019-04-06 15:48:56 -Mapped "{[/elec/elecPrice/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecPriceController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-06 15:48:56 -Mapped "{[/elec/elecPrice],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecPriceController.ElecPrice()
2019-04-06 15:48:56 -Mapped "{[/elec/elecUpLoad],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecUpLoadController.Elec()
2019-04-06 15:48:56 -Mapped "{[/elec/elecUpLoad/importElecExcel],methods=[POST]}" onto public java.util.Map<java.lang.String, java.lang.Object> com.bootdo.elec.controller.ElecUpLoadController.importElecExcel(org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpServletRequest) throws java.lang.Exception
2019-04-06 15:48:56 -Mapped "{[/heat/heat/add],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatController.add()
2019-04-06 15:48:56 -Mapped "{[/heat/heat/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatController.remove(java.lang.Integer)
2019-04-06 15:48:56 -Mapped "{[/heat/heat/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatController.remove(java.lang.Integer[])
2019-04-06 15:48:56 -Mapped "{[/heat/heat/update]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatController.update(com.bootdo.heat.domain.HeatDO)
2019-04-06 15:48:56 -Mapped "{[/heat/heat/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.heat.controller.HeatController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-06 15:48:56 -Mapped "{[/heat/heat/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatController.save(com.bootdo.heat.domain.HeatDO)
2019-04-06 15:48:56 -Mapped "{[/heat/heat/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatController.edit(java.lang.Integer,org.springframework.ui.Model)
2019-04-06 15:48:56 -Mapped "{[/heat/heat/exprotHeat],methods=[GET]}" onto public void com.bootdo.heat.controller.HeatController.exprotExcel(com.bootdo.heat.vo.HeatVo,javax.servlet.http.HttpServletResponse)
2019-04-06 15:48:56 -Mapped "{[/heat/heat],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatController.Heat()
2019-04-06 15:48:56 -Mapped "{[/heat/heatInto/exprotHeatIntoExcel],methods=[GET]}" onto public void com.bootdo.heat.controller.HeatIntoController.exprotExcel(com.bootdo.heat.vo.HeatVo,javax.servlet.http.HttpServletResponse)
2019-04-06 15:48:56 -Mapped "{[/heat/heatInto],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatIntoController.HeatInto()
2019-04-06 15:48:56 -Mapped "{[/heat/heatPrice/add],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatPriceController.add()
2019-04-06 15:48:56 -Mapped "{[/heat/heatPrice/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatPriceController.remove(java.lang.Long)
2019-04-06 15:48:56 -Mapped "{[/heat/heatPrice/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatPriceController.remove(java.lang.Long[])
2019-04-06 15:48:56 -Mapped "{[/heat/heatPrice/update]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatPriceController.update(com.bootdo.heat.domain.HeatPriceDO)
2019-04-06 15:48:56 -Mapped "{[/heat/heatPrice/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.heat.controller.HeatPriceController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-06 15:48:56 -Mapped "{[/heat/heatPrice/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatPriceController.save(com.bootdo.heat.domain.HeatPriceDO)
2019-04-06 15:48:56 -Mapped "{[/heat/heatPrice/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatPriceController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-06 15:48:56 -Mapped "{[/heat/heatPrice],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatPriceController.HeatPrice()
2019-04-06 15:48:56 -Mapped "{[/heat/heatUpLoad],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatUpLoadController.HeatUpLoad()
2019-04-06 15:48:56 -Mapped "{[/heat/heatUpLoad/createHeatExcel],methods=[POST]}" onto public java.lang.String com.bootdo.heat.controller.HeatUpLoadController.createHeatExcel(com.bootdo.heat.domain.HeatDO) throws java.lang.Exception
2019-04-06 15:48:56 -Mapped "{[/heat/heatUpLoad/exprotHeatExcel],methods=[GET]}" onto public void com.bootdo.heat.controller.HeatUpLoadController.exprotHeatExcel(com.bootdo.heat.vo.HeatVo,javax.servlet.http.HttpServletResponse)
2019-04-06 15:48:56 -Mapped "{[/heat/heatUpLoad/importHeatExcel]}" onto public java.lang.String com.bootdo.heat.controller.HeatUpLoadController.importHeatExcel(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)
2019-04-06 15:48:56 -Mapped "{[/moneyList/moneyList],methods=[GET]}" onto java.lang.String com.bootdo.moneyList.controller.MoneyListController.MoneyList()
2019-04-06 15:48:56 -Mapped "{[/moneyList/moneyList/queryAllUser],methods=[POST]}" onto public java.util.List<com.bootdo.moneyList.damain.MoneyListDO> com.bootdo.moneyList.controller.MoneyListController.queryAllUser(com.bootdo.moneyList.damain.MoneyListDO)
2019-04-06 15:48:56 -Mapped "{[/moneyList/moneyList/updateMoney],methods=[POST]}" onto public java.util.List<com.bootdo.moneyList.damain.MoneyListDO> com.bootdo.moneyList.controller.MoneyListController.updateMoney(com.bootdo.moneyList.damain.MoneyListDO)
2019-04-06 15:48:56 -Mapped "{[/moneyList/moneyList/queryAllUserName],methods=[POST]}" onto public java.util.List<com.bootdo.moneyList.damain.MoneyListDO> com.bootdo.moneyList.controller.MoneyListController.getAllUserName(com.bootdo.moneyList.damain.MoneyListDO)
2019-04-06 15:48:56 -Mapped "{[/moneyLog/elecLog/add],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.ElecLogController.add()
2019-04-06 15:48:56 -Mapped "{[/moneyLog/elecLog/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.ElecLogController.remove(java.lang.Long)
2019-04-06 15:48:56 -Mapped "{[/moneyLog/elecLog/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.ElecLogController.remove(java.lang.Long[])
2019-04-06 15:48:56 -Mapped "{[/moneyLog/elecLog/update]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.ElecLogController.update(com.bootdo.moneyLog.domain.ElecLogDO)
2019-04-06 15:48:56 -Mapped "{[/moneyLog/elecLog/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.moneyLog.controller.ElecLogController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-06 15:48:56 -Mapped "{[/moneyLog/elecLog/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.ElecLogController.save(com.bootdo.moneyLog.domain.ElecLogDO)
2019-04-06 15:48:56 -Mapped "{[/moneyLog/elecLog/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.ElecLogController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-06 15:48:56 -Mapped "{[/moneyLog/elecLog],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.ElecLogController.moneyLog()
2019-04-06 15:48:56 -Mapped "{[/moneyLog/elecLog/exprotElecLog],methods=[GET]}" onto public void com.bootdo.moneyLog.controller.ElecLogController.exprotElecLog(com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-06 15:48:56 -Mapped "{[/moneyLog/heatLog/add],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.HeatLogController.add()
2019-04-06 15:48:56 -Mapped "{[/moneyLog/heatLog/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.HeatLogController.remove(java.lang.Long)
2019-04-06 15:48:56 -Mapped "{[/moneyLog/heatLog/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.HeatLogController.remove(java.lang.Long[])
2019-04-06 15:48:56 -Mapped "{[/moneyLog/heatLog/update]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.HeatLogController.update(com.bootdo.moneyLog.domain.HeatLogDO)
2019-04-06 15:48:56 -Mapped "{[/moneyLog/heatLog/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.moneyLog.controller.HeatLogController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-06 15:48:56 -Mapped "{[/moneyLog/heatLog/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.HeatLogController.save(com.bootdo.moneyLog.domain.HeatLogDO)
2019-04-06 15:48:56 -Mapped "{[/moneyLog/heatLog/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.HeatLogController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-06 15:48:56 -Mapped "{[/moneyLog/heatLog],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.HeatLogController.HeatLog()
2019-04-06 15:48:56 -Mapped "{[/moneyLog/heatLog/exprotHeatLog],methods=[GET]}" onto public void com.bootdo.moneyLog.controller.HeatLogController.exprotHeatLog(com.bootdo.moneyLog.vo.HeatLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-06 15:48:56 -Mapped "{[/moneyLog/waterLog/add],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.WaterLogController.add()
2019-04-06 15:48:56 -Mapped "{[/moneyLog/waterLog/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.WaterLogController.remove(java.lang.Long)
2019-04-06 15:48:56 -Mapped "{[/moneyLog/waterLog/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.WaterLogController.remove(java.lang.Long[])
2019-04-06 15:48:56 -Mapped "{[/moneyLog/waterLog/update]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.WaterLogController.update(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-06 15:48:56 -Mapped "{[/moneyLog/waterLog/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.moneyLog.controller.WaterLogController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-06 15:48:56 -Mapped "{[/moneyLog/waterLog/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.WaterLogController.save(com.bootdo.moneyLog.domain.WaterLogDO)
2019-04-06 15:48:56 -Mapped "{[/moneyLog/waterLog/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.WaterLogController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-06 15:48:56 -Mapped "{[/moneyLog/waterLog/exprotWaterLog],methods=[GET]}" onto public void com.bootdo.moneyLog.controller.WaterLogController.exprotWaterLog(com.bootdo.moneyLog.vo.WaterLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-06 15:48:56 -Mapped "{[/moneyLog/waterLog],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.WaterLogController.WaterLog()
2019-04-06 15:48:56 -Mapped "{[/oa/notify/add],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.add()
2019-04-06 15:48:56 -Mapped "{[/oa/notify/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.remove(java.lang.Long)
2019-04-06 15:48:56 -Mapped "{[/oa/notify/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.remove(java.lang.Long[])
2019-04-06 15:48:56 -Mapped "{[/oa/notify/update]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.update(com.bootdo.oa.domain.NotifyDO)
2019-04-06 15:48:56 -Mapped "{[/oa/notify/read/{id}],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.read(java.lang.Long,org.springframework.ui.Model)
2019-04-06 15:48:56 -Mapped "{[/oa/notify/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.oa.controller.NotifyController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-06 15:48:56 -Mapped "{[/oa/notify/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.save(com.bootdo.oa.domain.NotifyDO)
2019-04-06 15:48:56 -Mapped "{[/oa/notify/message],methods=[GET]}" onto com.bootdo.common.utils.PageUtils com.bootdo.oa.controller.NotifyController.message()
2019-04-06 15:48:56 -Mapped "{[/oa/notify/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-06 15:48:56 -Mapped "{[/oa/notify],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.oaNotify()
2019-04-06 15:48:56 -Mapped "{[/oa/notify/selfNotify],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.selefNotify()
2019-04-06 15:48:56 -Mapped "{[/oa/notify/selfList],methods=[GET]}" onto com.bootdo.common.utils.PageUtils com.bootdo.oa.controller.NotifyController.selfList(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-06 15:48:56 -Mapped "{[/print/print/add],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.add()
2019-04-06 15:48:56 -Mapped "{[/print/print/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.print.controller.PrintController.remove(java.lang.Long)
2019-04-06 15:48:56 -Mapped "{[/print/print/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.print.controller.PrintController.remove(java.lang.Long[])
2019-04-06 15:48:56 -Mapped "{[/print/print/update]}" onto public com.bootdo.common.utils.R com.bootdo.print.controller.PrintController.update(com.bootdo.print.domain.PrintDO)
2019-04-06 15:48:56 -Mapped "{[/print/print/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.print.controller.PrintController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-06 15:48:56 -Mapped "{[/print/print/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.print.controller.PrintController.save(java.lang.String,com.bootdo.print.domain.PrintDO)
2019-04-06 15:48:56 -Mapped "{[/print/print/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-06 15:48:56 -Mapped "{[/print/print/exprotPrint],methods=[GET]}" onto public void com.bootdo.print.controller.PrintController.exprotPrint(com.bootdo.print.vo.PrintVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-04-06 15:48:56 -Mapped "{[/print/print],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.Print()
2019-04-06 15:48:56 -Mapped "{[/print/print/printEdit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.printEdit(java.lang.Long,org.springframework.ui.Model)
2019-04-06 15:48:56 -Mapped "{[/system/sysDept/add/{pId}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.add(java.lang.Long,org.springframework.ui.Model)
2019-04-06 15:48:56 -Mapped "{[/system/sysDept/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.remove(java.lang.Long)
2019-04-06 15:48:56 -Mapped "{[/system/sysDept/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.remove(java.lang.Long[])
2019-04-06 15:48:56 -Mapped "{[/system/sysDept/update]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.update(com.bootdo.system.domain.DeptDO)
2019-04-06 15:48:56 -Mapped "{[/system/sysDept/list],methods=[GET]}" onto public java.util.List<com.bootdo.system.domain.DeptDO> com.bootdo.system.controller.DeptController.list()
2019-04-06 15:48:56 -Mapped "{[/system/sysDept/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.save(com.bootdo.system.domain.DeptDO)
2019-04-06 15:48:56 -Mapped "{[/system/sysDept/tree],methods=[GET]}" onto public com.bootdo.common.domain.Tree<com.bootdo.system.domain.DeptDO> com.bootdo.system.controller.DeptController.tree()
2019-04-06 15:48:56 -Mapped "{[/system/sysDept/edit/{deptId}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-06 15:48:56 -Mapped "{[/system/sysDept/treeView],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.treeView()
2019-04-06 15:48:56 -Mapped "{[/system/sysDept],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.dept()
2019-04-06 15:48:56 -Mapped "{[/index],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.index(org.springframework.ui.Model)
2019-04-06 15:48:56 -Mapped "{[/main],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.main()
2019-04-06 15:48:56 -Mapped "{[/getVerify],methods=[GET]}" onto public void com.bootdo.system.controller.LoginController.getVerify(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-04-06 15:48:56 -Mapped "{[/login],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.login(org.springframework.ui.Model)
2019-04-06 15:48:56 -Mapped "{[/logout],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.logout()
2019-04-06 15:48:56 -Mapped "{[/login],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.LoginController.ajaxLogin(java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest)
2019-04-06 15:48:56 -Mapped "{[/ || ],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.welcome(org.springframework.ui.Model)
2019-04-06 15:48:56 -Mapped "{[/sys/menu/add/{pId}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.MenuController.add(org.springframework.ui.Model,java.lang.Long)
2019-04-06 15:48:56 -Mapped "{[/sys/menu/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.MenuController.remove(java.lang.Long)
2019-04-06 15:48:56 -Mapped "{[/sys/menu/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.MenuController.update(com.bootdo.system.domain.MenuDO)
2019-04-06 15:48:56 -Mapped "{[/sys/menu/list]}" onto java.util.List<com.bootdo.system.domain.MenuDO> com.bootdo.system.controller.MenuController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-06 15:48:56 -Mapped "{[/sys/menu/save],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.MenuController.save(com.bootdo.system.domain.MenuDO)
2019-04-06 15:48:56 -Mapped "{[/sys/menu/tree/{roleId}],methods=[GET]}" onto com.bootdo.common.domain.Tree<com.bootdo.system.domain.MenuDO> com.bootdo.system.controller.MenuController.tree(java.lang.Long)
2019-04-06 15:48:56 -Mapped "{[/sys/menu/tree],methods=[GET]}" onto com.bootdo.common.domain.Tree<com.bootdo.system.domain.MenuDO> com.bootdo.system.controller.MenuController.tree()
2019-04-06 15:48:56 -Mapped "{[/sys/menu/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.MenuController.edit(org.springframework.ui.Model,java.lang.Long)
2019-04-06 15:48:56 -Mapped "{[/sys/menu],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.MenuController.menu(org.springframework.ui.Model)
2019-04-06 15:48:56 -Mapped "{[/sys/role/add],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.RoleController.add()
2019-04-06 15:48:56 -Mapped "{[/sys/role/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.update(com.bootdo.system.domain.RoleDO)
2019-04-06 15:48:56 -Mapped "{[/sys/role/list],methods=[GET]}" onto java.util.List<com.bootdo.system.domain.RoleDO> com.bootdo.system.controller.RoleController.list()
2019-04-06 15:48:56 -Mapped "{[/sys/role/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.save(java.lang.Long)
2019-04-06 15:48:56 -Mapped "{[/sys/role/save],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.save(com.bootdo.system.domain.RoleDO)
2019-04-06 15:48:56 -Mapped "{[/sys/role/batchRemove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.batchRemove(java.lang.Long[])
2019-04-06 15:48:56 -Mapped "{[/sys/role],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.RoleController.role()
2019-04-06 15:48:56 -Mapped "{[/sys/role/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.RoleController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-06 15:48:56 -Mapped "{[/sys/online/list]}" onto public java.util.List<com.bootdo.system.domain.UserOnline> com.bootdo.system.controller.SessionController.list()
2019-04-06 15:48:56 -Mapped "{[/sys/online/sessionList]}" onto public java.util.Collection<org.apache.shiro.session.Session> com.bootdo.system.controller.SessionController.sessionList()
2019-04-06 15:48:56 -Mapped "{[/sys/online],methods=[GET]}" onto public java.lang.String com.bootdo.system.controller.SessionController.online()
2019-04-06 15:48:56 -Mapped "{[/sys/online/forceLogout/{sessionId}]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.SessionController.forceLogout(java.lang.String,org.springframework.web.servlet.mvc.support.RedirectAttributes)
2019-04-06 15:48:56 -Mapped "{[/sys/user/exit],methods=[POST]}" onto boolean com.bootdo.system.controller.UserController.exit(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-06 15:48:56 -Mapped "{[/sys/user/add],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.add(org.springframework.ui.Model)
2019-04-06 15:48:56 -Mapped "{[/sys/user/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.remove(java.lang.Long)
2019-04-06 15:48:56 -Mapped "{[/sys/user/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.update(com.bootdo.system.domain.UserDO)
2019-04-06 15:48:56 -Mapped "{[/sys/user/list],methods=[GET]}" onto com.bootdo.common.utils.PageUtils com.bootdo.system.controller.UserController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-06 15:48:56 -Mapped "{[/sys/user/save],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.save(com.bootdo.system.domain.UserDO)
2019-04-06 15:48:56 -Mapped "{[/sys/user/batchRemove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.batchRemove(java.lang.Long[])
2019-04-06 15:48:56 -Mapped "{[/sys/user/tree],methods=[GET]}" onto public com.bootdo.common.domain.Tree<com.bootdo.system.domain.DeptDO> com.bootdo.system.controller.UserController.tree()
2019-04-06 15:48:56 -Mapped "{[/sys/user],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.user(org.springframework.ui.Model)
2019-04-06 15:48:56 -Mapped "{[/sys/user/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.edit(org.springframework.ui.Model,java.lang.Long)
2019-04-06 15:48:56 -Mapped "{[/sys/user/treeView],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.treeView()
2019-04-06 15:48:56 -Mapped "{[/sys/user/updatePeronal],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.updatePeronal(com.bootdo.system.domain.UserDO)
2019-04-06 15:48:56 -Mapped "{[/sys/user/resetPwd],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.resetPwd(com.bootdo.system.vo.UserVO)
2019-04-06 15:48:56 -Mapped "{[/sys/user/resetPwd/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.resetPwd(java.lang.Long,org.springframework.ui.Model)
2019-04-06 15:48:56 -Mapped "{[/sys/user/adminResetPwd],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.adminResetPwd(com.bootdo.system.vo.UserVO)
2019-04-06 15:48:56 -Mapped "{[/sys/user/personal],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.personal(org.springframework.ui.Model)
2019-04-06 15:48:56 -Mapped "{[/sys/user/uploadImg],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.uploadImg(org.springframework.web.multipart.MultipartFile,java.lang.String,javax.servlet.http.HttpServletRequest)
2019-04-06 15:48:56 -Mapped "{[/file/downImport/{importType}],methods=[GET]}" onto public void com.bootdo.temple.controller.TempletController.downImport(javax.servlet.http.HttpServletResponse,java.lang.String)
2019-04-06 15:48:56 -Mapped "{[/water/water/add],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterController.add()
2019-04-06 15:48:56 -Mapped "{[/water/water/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterController.remove(java.lang.Long)
2019-04-06 15:48:56 -Mapped "{[/water/water/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterController.remove(java.lang.Long[])
2019-04-06 15:48:56 -Mapped "{[/water/water/update]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterController.update(com.bootdo.water.domain.WaterDO)
2019-04-06 15:48:56 -Mapped "{[/water/water/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.water.controller.WaterController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-06 15:48:56 -Mapped "{[/water/water/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterController.save(com.bootdo.water.domain.WaterDO)
2019-04-06 15:48:56 -Mapped "{[/water/water/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-06 15:48:56 -Mapped "{[/water/water/exprotWater],methods=[GET]}" onto public void com.bootdo.water.controller.WaterController.exprotExcel(com.bootdo.water.vo.WaterVo,javax.servlet.http.HttpServletResponse)
2019-04-06 15:48:56 -Mapped "{[/water/water],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterController.Water()
2019-04-06 15:48:56 -Mapped "{[/water/waterInto/exprotWaterIntoExcel],methods=[GET]}" onto public void com.bootdo.water.controller.WaterIntoController.exprotExcel(com.bootdo.water.vo.WaterVo,javax.servlet.http.HttpServletResponse)
2019-04-06 15:48:56 -Mapped "{[/water/waterInto],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterIntoController.WaterInto()
2019-04-06 15:48:56 -Mapped "{[/water/waterPrice/add],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterPriceController.add()
2019-04-06 15:48:56 -Mapped "{[/water/waterPrice/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterPriceController.remove(java.lang.Long)
2019-04-06 15:48:56 -Mapped "{[/water/waterPrice/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterPriceController.remove(java.lang.Long[])
2019-04-06 15:48:56 -Mapped "{[/water/waterPrice/update]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterPriceController.update(com.bootdo.water.domain.WaterPriceDO)
2019-04-06 15:48:56 -Mapped "{[/water/waterPrice/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.water.controller.WaterPriceController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-04-06 15:48:56 -Mapped "{[/water/waterPrice/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterPriceController.save(com.bootdo.water.domain.WaterPriceDO)
2019-04-06 15:48:56 -Mapped "{[/water/waterPrice/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterPriceController.edit(java.lang.Long,org.springframework.ui.Model)
2019-04-06 15:48:56 -Mapped "{[/water/waterPrice],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterPriceController.WaterPrice()
2019-04-06 15:48:56 -Mapped "{[/water/waterUpLoad/importWaterExcel]}" onto public java.lang.String com.bootdo.water.controller.WaterUpLoadController.importWaterExcel(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)
2019-04-06 15:48:56 -Mapped "{[/water/waterUpLoad],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterUpLoadController.WaterUpLoad()
2019-04-06 15:48:56 -Mapped "{[/water/waterUpLoad/createWaterExcel],methods=[POST]}" onto public java.lang.String com.bootdo.water.controller.WaterUpLoadController.createWaterExcel(com.bootdo.water.domain.WaterDO) throws java.lang.Exception
2019-04-06 15:48:56 -Mapped "{[/water/waterUpLoad/exprotWaterExcel],methods=[GET]}" onto public void com.bootdo.water.controller.WaterUpLoadController.exprotWaterExcel(com.bootdo.water.vo.WaterVo,javax.servlet.http.HttpServletResponse)
2019-04-06 15:48:56 -Mapped "{[/v2/api-docs],methods=[GET],produces=[application/json || application/hal+json]}" onto public org.springframework.http.ResponseEntity<springfox.documentation.spring.web.json.Json> springfox.documentation.swagger2.web.Swagger2Controller.getDocumentation(java.lang.String,javax.servlet.http.HttpServletRequest)
2019-04-06 15:48:56 -Mapped "{[/swagger-resources/configuration/security]}" onto org.springframework.http.ResponseEntity<springfox.documentation.swagger.web.SecurityConfiguration> springfox.documentation.swagger.web.ApiResourceController.securityConfiguration()
2019-04-06 15:48:56 -Mapped "{[/swagger-resources]}" onto org.springframework.http.ResponseEntity<java.util.List<springfox.documentation.swagger.web.SwaggerResource>> springfox.documentation.swagger.web.ApiResourceController.swaggerResources()
2019-04-06 15:48:56 -Mapped "{[/swagger-resources/configuration/ui]}" onto org.springframework.http.ResponseEntity<springfox.documentation.swagger.web.UiConfiguration> springfox.documentation.swagger.web.ApiResourceController.uiConfiguration()
2019-04-06 15:48:57 -Initializing ExecutorService  'messageBrokerTaskScheduler'
2019-04-06 15:48:58 -Mapped URL path [/endpointChat/**] onto handler of type [class org.springframework.web.socket.sockjs.support.SockJsHttpRequestHandler]
2019-04-06 15:48:58 -Initializing ExecutorService  'brokerChannelExecutor'
2019-04-06 15:48:59 -Mapped URL path [/**/favicon.ico] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-04-06 15:49:00 -Looking for @ControllerAdvice: org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@63b1d4fa: startup date [Sat Apr 06 15:48:19 CST 2019]; root of context hierarchy
2019-04-06 15:49:01 -Mapped URL path [/webjars/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-04-06 15:49:01 -Mapped URL path [/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-04-06 15:49:01 -Mapped URL path [/files/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-04-06 15:49:01 -Detected @ExceptionHandler methods in BDExceptionHandler
2019-04-06 15:49:01 -[THYMELEAF][main] Template Mode 'LEGACYHTML5' is deprecated. Using Template Mode 'HTML' instead.
2019-04-06 15:49:09 -Registering beans for JMX exposure on startup
2019-04-06 15:49:09 -Bean with name 'dataSource' has been autodetected for JMX exposure
2019-04-06 15:49:09 -Located MBean 'dataSource': registering with JMX server as MBean [com.alibaba.druid.pool:name=dataSource,type=DruidDataSource]
2019-04-06 15:49:09 -Starting beans in phase 2147483647
2019-04-06 15:49:09 -Context refreshed
2019-04-06 15:49:09 -Found 1 custom documentation plugin(s)
2019-04-06 15:49:10 -Scanning for api listing references
2019-04-06 15:49:10 -Generating unique operation named: exprotElecLogUsingGET_1
2019-04-06 15:49:10 -Generating unique operation named: getCountDUsingPOST_1
2019-04-06 15:49:10 -Generating unique operation named: exprotElecLogUsingGET_2
2019-04-06 15:49:10 -Generating unique operation named: getCountDUsingPOST_2
2019-04-06 15:49:11 -Generating unique operation named: exprotElecLogUsingGET_3
2019-04-06 15:49:11 -Generating unique operation named: getCountDUsingPOST_3
2019-04-06 15:49:11 -Generating unique operation named: removeUsingPOST_1
2019-04-06 15:49:11 -Generating unique operation named: addUsingGET_1
2019-04-06 15:49:11 -Generating unique operation named: editUsingGET_1
2019-04-06 15:49:11 -Generating unique operation named: listUsingGET_1
2019-04-06 15:49:11 -Generating unique operation named: removeUsingPOST_2
2019-04-06 15:49:11 -Generating unique operation named: removeUsingPOST_3
2019-04-06 15:49:11 -Generating unique operation named: saveUsingPOST_1
2019-04-06 15:49:11 -Generating unique operation named: updateUsingGET_1
2019-04-06 15:49:11 -Generating unique operation named: updateUsingHEAD_1
2019-04-06 15:49:11 -Generating unique operation named: updateUsingPOST_1
2019-04-06 15:49:11 -Generating unique operation named: updateUsingPUT_1
2019-04-06 15:49:11 -Generating unique operation named: updateUsingPATCH_1
2019-04-06 15:49:11 -Generating unique operation named: updateUsingDELETE_1
2019-04-06 15:49:11 -Generating unique operation named: updateUsingOPTIONS_1
2019-04-06 15:49:11 -Generating unique operation named: updateUsingTRACE_1
2019-04-06 15:49:12 -Generating unique operation named: addUsingGET_2
2019-04-06 15:49:12 -Generating unique operation named: editUsingGET_2
2019-04-06 15:49:12 -Generating unique operation named: listUsingGET_2
2019-04-06 15:49:12 -Generating unique operation named: removeUsingPOST_4
2019-04-06 15:49:12 -Generating unique operation named: removeUsingPOST_5
2019-04-06 15:49:12 -Generating unique operation named: saveUsingPOST_2
2019-04-06 15:49:12 -Generating unique operation named: updateUsingPOST_2
2019-04-06 15:49:12 -Generating unique operation named: exprotExcelUsingGET_1
2019-04-06 15:49:12 -Generating unique operation named: addUsingGET_3
2019-04-06 15:49:12 -Generating unique operation named: editUsingGET_3
2019-04-06 15:49:12 -Generating unique operation named: exprotElecLogUsingGET_4
2019-04-06 15:49:12 -Generating unique operation named: listUsingGET_3
2019-04-06 15:49:12 -Generating unique operation named: removeUsingPOST_6
2019-04-06 15:49:12 -Generating unique operation named: removeUsingPOST_7
2019-04-06 15:49:12 -Generating unique operation named: saveUsingPOST_3
2019-04-06 15:49:12 -Generating unique operation named: updateUsingGET_2
2019-04-06 15:49:12 -Generating unique operation named: updateUsingHEAD_2
2019-04-06 15:49:12 -Generating unique operation named: updateUsingPOST_3
2019-04-06 15:49:12 -Generating unique operation named: updateUsingPUT_2
2019-04-06 15:49:12 -Generating unique operation named: updateUsingPATCH_2
2019-04-06 15:49:12 -Generating unique operation named: updateUsingDELETE_2
2019-04-06 15:49:12 -Generating unique operation named: updateUsingOPTIONS_2
2019-04-06 15:49:12 -Generating unique operation named: updateUsingTRACE_2
2019-04-06 15:49:12 -Generating unique operation named: addUsingGET_4
2019-04-06 15:49:12 -Generating unique operation named: editUsingGET_4
2019-04-06 15:49:12 -Generating unique operation named: listUsingGET_4
2019-04-06 15:49:12 -Generating unique operation named: removeUsingPOST_8
2019-04-06 15:49:12 -Generating unique operation named: removeUsingPOST_9
2019-04-06 15:49:12 -Generating unique operation named: saveUsingPOST_4
2019-04-06 15:49:12 -Generating unique operation named: updateUsingGET_3
2019-04-06 15:49:12 -Generating unique operation named: updateUsingHEAD_3
2019-04-06 15:49:12 -Generating unique operation named: updateUsingPOST_4
2019-04-06 15:49:12 -Generating unique operation named: updateUsingPUT_3
2019-04-06 15:49:12 -Generating unique operation named: updateUsingPATCH_3
2019-04-06 15:49:12 -Generating unique operation named: updateUsingDELETE_3
2019-04-06 15:49:12 -Generating unique operation named: updateUsingOPTIONS_3
2019-04-06 15:49:12 -Generating unique operation named: updateUsingTRACE_3
2019-04-06 15:49:12 -Generating unique operation named: ElecUsingGET_1
2019-04-06 15:49:12 -Generating unique operation named: addUsingGET_5
2019-04-06 15:49:12 -Generating unique operation named: editUsingGET_5
2019-04-06 15:49:13 -Generating unique operation named: listUsingGET_5
2019-04-06 15:49:13 -Generating unique operation named: removeUsingPOST_10
2019-04-06 15:49:13 -Generating unique operation named: removeUsingPOST_11
2019-04-06 15:49:13 -Generating unique operation named: saveUsingPOST_5
2019-04-06 15:49:13 -Generating unique operation named: updateUsingGET_4
2019-04-06 15:49:13 -Generating unique operation named: updateUsingHEAD_4
2019-04-06 15:49:13 -Generating unique operation named: updateUsingPOST_5
2019-04-06 15:49:13 -Generating unique operation named: updateUsingPUT_4
2019-04-06 15:49:13 -Generating unique operation named: updateUsingPATCH_4
2019-04-06 15:49:13 -Generating unique operation named: updateUsingDELETE_4
2019-04-06 15:49:13 -Generating unique operation named: updateUsingOPTIONS_4
2019-04-06 15:49:13 -Generating unique operation named: updateUsingTRACE_4
2019-04-06 15:49:13 -Generating unique operation named: editUsingGET_6
2019-04-06 15:49:13 -Generating unique operation named: listUsingGET_6
2019-04-06 15:49:13 -Generating unique operation named: updateUsingPOST_6
2019-04-06 15:49:13 -Generating unique operation named: addUsingGET_6
2019-04-06 15:49:13 -Generating unique operation named: editUsingGET_7
2019-04-06 15:49:13 -Generating unique operation named: exprotExcelUsingGET_2
2019-04-06 15:49:13 -Generating unique operation named: listUsingGET_7
2019-04-06 15:49:13 -Generating unique operation named: removeUsingPOST_12
2019-04-06 15:49:13 -Generating unique operation named: removeUsingPOST_13
2019-04-06 15:49:13 -Generating unique operation named: saveUsingPOST_6
2019-04-06 15:49:13 -Generating unique operation named: updateUsingGET_5
2019-04-06 15:49:13 -Generating unique operation named: updateUsingHEAD_5
2019-04-06 15:49:13 -Generating unique operation named: updateUsingPOST_7
2019-04-06 15:49:13 -Generating unique operation named: updateUsingPUT_5
2019-04-06 15:49:13 -Generating unique operation named: updateUsingPATCH_5
2019-04-06 15:49:13 -Generating unique operation named: updateUsingDELETE_5
2019-04-06 15:49:13 -Generating unique operation named: updateUsingOPTIONS_5
2019-04-06 15:49:13 -Generating unique operation named: updateUsingTRACE_5
2019-04-06 15:49:13 -Generating unique operation named: exprotExcelUsingGET_3
2019-04-06 15:49:13 -Generating unique operation named: addUsingGET_7
2019-04-06 15:49:13 -Generating unique operation named: editUsingGET_8
2019-04-06 15:49:13 -Generating unique operation named: listUsingGET_8
2019-04-06 15:49:13 -Generating unique operation named: removeUsingPOST_14
2019-04-06 15:49:13 -Generating unique operation named: removeUsingPOST_15
2019-04-06 15:49:13 -Generating unique operation named: saveUsingPOST_7
2019-04-06 15:49:14 -Generating unique operation named: updateUsingGET_6
2019-04-06 15:49:14 -Generating unique operation named: updateUsingHEAD_6
2019-04-06 15:49:14 -Generating unique operation named: updateUsingPOST_8
2019-04-06 15:49:14 -Generating unique operation named: updateUsingPUT_6
2019-04-06 15:49:14 -Generating unique operation named: updateUsingPATCH_6
2019-04-06 15:49:14 -Generating unique operation named: updateUsingDELETE_6
2019-04-06 15:49:14 -Generating unique operation named: updateUsingOPTIONS_6
2019-04-06 15:49:14 -Generating unique operation named: updateUsingTRACE_6
2019-04-06 15:49:14 -Generating unique operation named: addUsingGET_8
2019-04-06 15:49:14 -Generating unique operation named: editUsingGET_9
2019-04-06 15:49:14 -Generating unique operation named: listUsingGET_9
2019-04-06 15:49:14 -Generating unique operation named: removeUsingPOST_16
2019-04-06 15:49:14 -Generating unique operation named: removeUsingPOST_17
2019-04-06 15:49:14 -Generating unique operation named: saveUsingPOST_8
2019-04-06 15:49:14 -Generating unique operation named: updateUsingGET_7
2019-04-06 15:49:14 -Generating unique operation named: updateUsingHEAD_7
2019-04-06 15:49:14 -Generating unique operation named: updateUsingPOST_9
2019-04-06 15:49:14 -Generating unique operation named: updateUsingPUT_7
2019-04-06 15:49:14 -Generating unique operation named: updateUsingPATCH_7
2019-04-06 15:49:14 -Generating unique operation named: updateUsingDELETE_7
2019-04-06 15:49:14 -Generating unique operation named: updateUsingOPTIONS_7
2019-04-06 15:49:14 -Generating unique operation named: updateUsingTRACE_7
2019-04-06 15:49:14 -Generating unique operation named: addUsingGET_9
2019-04-06 15:49:14 -Generating unique operation named: editUsingGET_10
2019-04-06 15:49:14 -Generating unique operation named: infoUsingGET_1
2019-04-06 15:49:14 -Generating unique operation named: infoUsingHEAD_1
2019-04-06 15:49:14 -Generating unique operation named: infoUsingPOST_1
2019-04-06 15:49:14 -Generating unique operation named: infoUsingPUT_1
2019-04-06 15:49:14 -Generating unique operation named: infoUsingPATCH_1
2019-04-06 15:49:14 -Generating unique operation named: infoUsingDELETE_1
2019-04-06 15:49:14 -Generating unique operation named: infoUsingOPTIONS_1
2019-04-06 15:49:14 -Generating unique operation named: infoUsingTRACE_1
2019-04-06 15:49:14 -Generating unique operation named: listUsingGET_10
2019-04-06 15:49:14 -Generating unique operation named: removeUsingPOST_18
2019-04-06 15:49:14 -Generating unique operation named: removeUsingPOST_19
2019-04-06 15:49:14 -Generating unique operation named: saveUsingPOST_9
2019-04-06 15:49:14 -Generating unique operation named: updateUsingPOST_10
2019-04-06 15:49:14 -Generating unique operation named: listUsingGET_11
2019-04-06 15:49:14 -Generating unique operation named: removeUsingPOST_20
2019-04-06 15:49:14 -Generating unique operation named: welcomeUsingGET_1
2019-04-06 15:49:14 -Generating unique operation named: addUsingGET_10
2019-04-06 15:49:14 -Generating unique operation named: editUsingGET_11
2019-04-06 15:49:14 -Generating unique operation named: listUsingGET_12
2019-04-06 15:49:15 -Generating unique operation named: removeUsingPOST_21
2019-04-06 15:49:15 -Generating unique operation named: saveUsingPOST_10
2019-04-06 15:49:15 -Generating unique operation named: treeUsingGET_1
2019-04-06 15:49:15 -Generating unique operation named: treeUsingGET_2
2019-04-06 15:49:15 -Generating unique operation named: updateUsingPOST_11
2019-04-06 15:49:15 -Generating unique operation named: addUsingGET_11
2019-04-06 15:49:15 -Generating unique operation named: editUsingGET_12
2019-04-06 15:49:15 -Generating unique operation named: listUsingGET_13
2019-04-06 15:49:15 -Generating unique operation named: removeUsingPOST_22
2019-04-06 15:49:15 -Generating unique operation named: removeUsingPOST_23
2019-04-06 15:49:15 -Generating unique operation named: saveUsingPOST_11
2019-04-06 15:49:15 -Generating unique operation named: updateUsingGET_8
2019-04-06 15:49:15 -Generating unique operation named: updateUsingHEAD_8
2019-04-06 15:49:15 -Generating unique operation named: updateUsingPOST_12
2019-04-06 15:49:15 -Generating unique operation named: updateUsingPUT_8
2019-04-06 15:49:15 -Generating unique operation named: updateUsingPATCH_8
2019-04-06 15:49:15 -Generating unique operation named: updateUsingDELETE_8
2019-04-06 15:49:15 -Generating unique operation named: updateUsingOPTIONS_8
2019-04-06 15:49:15 -Generating unique operation named: updateUsingTRACE_8
2019-04-06 15:49:15 -Generating unique operation named: addUsingGET_12
2019-04-06 15:49:15 -Generating unique operation named: editUsingGET_13
2019-04-06 15:49:15 -Generating unique operation named: listUsingGET_14
2019-04-06 15:49:15 -Generating unique operation named: removeUsingPOST_24
2019-04-06 15:49:15 -Generating unique operation named: removeUsingPOST_25
2019-04-06 15:49:15 -Generating unique operation named: saveUsingPOST_12
2019-04-06 15:49:15 -Generating unique operation named: updateUsingGET_9
2019-04-06 15:49:15 -Generating unique operation named: updateUsingHEAD_9
2019-04-06 15:49:15 -Generating unique operation named: updateUsingPOST_13
2019-04-06 15:49:15 -Generating unique operation named: updateUsingPUT_9
2019-04-06 15:49:15 -Generating unique operation named: updateUsingPATCH_9
2019-04-06 15:49:15 -Generating unique operation named: updateUsingDELETE_9
2019-04-06 15:49:15 -Generating unique operation named: updateUsingOPTIONS_9
2019-04-06 15:49:15 -Generating unique operation named: updateUsingTRACE_9
2019-04-06 15:49:15 -Generating unique operation named: addUsingGET_13
2019-04-06 15:49:15 -Generating unique operation named: batchRemoveUsingPOST_1
2019-04-06 15:49:15 -Generating unique operation named: editUsingGET_14
2019-04-06 15:49:15 -Generating unique operation named: listUsingGET_15
2019-04-06 15:49:15 -Generating unique operation named: saveUsingPOST_13
2019-04-06 15:49:15 -Generating unique operation named: saveUsingPOST_14
2019-04-06 15:49:15 -Generating unique operation named: updateUsingPOST_14
2019-04-06 15:49:16 -Generating unique operation named: listUsingGET_16
2019-04-06 15:49:16 -Generating unique operation named: listUsingHEAD_1
2019-04-06 15:49:16 -Generating unique operation named: listUsingPOST_1
2019-04-06 15:49:16 -Generating unique operation named: listUsingPUT_1
2019-04-06 15:49:16 -Generating unique operation named: listUsingPATCH_1
2019-04-06 15:49:16 -Generating unique operation named: listUsingDELETE_1
2019-04-06 15:49:16 -Generating unique operation named: listUsingOPTIONS_1
2019-04-06 15:49:16 -Generating unique operation named: listUsingTRACE_1
2019-04-06 15:49:16 -Generating unique operation named: addUsingGET_14
2019-04-06 15:49:16 -Generating unique operation named: batchRemoveUsingPOST_2
2019-04-06 15:49:16 -Generating unique operation named: editUsingGET_15
2019-04-06 15:49:16 -Generating unique operation named: listUsingGET_17
2019-04-06 15:49:16 -Generating unique operation named: removeUsingPOST_26
2019-04-06 15:49:16 -Generating unique operation named: saveUsingPOST_15
2019-04-06 15:49:16 -Generating unique operation named: treeUsingGET_3
2019-04-06 15:49:16 -Generating unique operation named: treeViewUsingGET_1
2019-04-06 15:49:16 -Generating unique operation named: updateUsingPOST_15
2019-04-06 15:49:16 -Generating unique operation named: addUsingGET_15
2019-04-06 15:49:16 -Generating unique operation named: editUsingGET_16
2019-04-06 15:49:16 -Generating unique operation named: exprotExcelUsingGET_4
2019-04-06 15:49:16 -Generating unique operation named: listUsingGET_18
2019-04-06 15:49:16 -Generating unique operation named: removeUsingPOST_27
2019-04-06 15:49:16 -Generating unique operation named: removeUsingPOST_28
2019-04-06 15:49:16 -Generating unique operation named: saveUsingPOST_16
2019-04-06 15:49:16 -Generating unique operation named: updateUsingGET_10
2019-04-06 15:49:16 -Generating unique operation named: updateUsingHEAD_10
2019-04-06 15:49:16 -Generating unique operation named: updateUsingPOST_16
2019-04-06 15:49:16 -Generating unique operation named: updateUsingPUT_10
2019-04-06 15:49:16 -Generating unique operation named: updateUsingPATCH_10
2019-04-06 15:49:16 -Generating unique operation named: updateUsingDELETE_10
2019-04-06 15:49:16 -Generating unique operation named: updateUsingOPTIONS_10
2019-04-06 15:49:16 -Generating unique operation named: updateUsingTRACE_10
2019-04-06 15:49:16 -Generating unique operation named: exprotExcelUsingGET_5
2019-04-06 15:49:16 -Generating unique operation named: addUsingGET_16
2019-04-06 15:49:16 -Generating unique operation named: editUsingGET_17
2019-04-06 15:49:16 -Generating unique operation named: listUsingGET_19
2019-04-06 15:49:16 -Generating unique operation named: removeUsingPOST_29
2019-04-06 15:49:16 -Generating unique operation named: removeUsingPOST_30
2019-04-06 15:49:16 -Generating unique operation named: saveUsingPOST_17
2019-04-06 15:49:16 -Generating unique operation named: updateUsingGET_11
2019-04-06 15:49:16 -Generating unique operation named: updateUsingHEAD_11
2019-04-06 15:49:16 -Generating unique operation named: updateUsingPOST_17
2019-04-06 15:49:16 -Generating unique operation named: updateUsingPUT_11
2019-04-06 15:49:17 -Generating unique operation named: updateUsingPATCH_11
2019-04-06 15:49:17 -Generating unique operation named: updateUsingDELETE_11
2019-04-06 15:49:17 -Generating unique operation named: updateUsingOPTIONS_11
2019-04-06 15:49:17 -Generating unique operation named: updateUsingTRACE_11
2019-04-06 15:49:17 -Generating unique operation named: addUsingGET_17
2019-04-06 15:49:17 -Generating unique operation named: editUsingGET_18
2019-04-06 15:49:17 -Generating unique operation named: listUsingGET_20
2019-04-06 15:49:17 -Generating unique operation named: removeUsingPOST_31
2019-04-06 15:49:17 -Generating unique operation named: removeUsingPOST_32
2019-04-06 15:49:17 -Generating unique operation named: saveUsingPOST_18
2019-04-06 15:49:17 -Generating unique operation named: updateUsingGET_12
2019-04-06 15:49:17 -Generating unique operation named: updateUsingHEAD_12
2019-04-06 15:49:17 -Generating unique operation named: updateUsingPOST_18
2019-04-06 15:49:17 -Generating unique operation named: updateUsingPUT_12
2019-04-06 15:49:17 -Generating unique operation named: updateUsingPATCH_12
2019-04-06 15:49:17 -Generating unique operation named: updateUsingDELETE_12
2019-04-06 15:49:17 -Generating unique operation named: updateUsingOPTIONS_12
2019-04-06 15:49:17 -Generating unique operation named: updateUsingTRACE_12
2019-04-06 15:49:17 -Starting Quartz Scheduler now
2019-04-06 15:49:17 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED started.
2019-04-06 15:49:17 -Starting...
2019-04-06 15:49:17 -BrokerAvailabilityEvent[available=true, SimpleBrokerMessageHandler [DefaultSubscriptionRegistry[cache[0 destination(s)], registry[0 sessions]]]]
2019-04-06 15:49:17 -Started.
2019-04-06 15:49:17 -Starting ProtocolHandler ["http-nio-8081"]
2019-04-06 15:49:17 -Using a shared selector for servlet write/read
2019-04-06 15:49:17 -Tomcat started on port(s): 8081 (http) with context path ''
2019-04-06 15:49:17 -Started BootdoApplication in 62.427 seconds (JVM running for 65.639)
2019-04-06 15:49:17 -==>  Preparing: select `id`,`cron_expression`,`method_name`,`is_concurrent`,`description`,`update_by`,`bean_class`,`create_date`,`job_status`,`job_group`,`update_date`,`create_by`,`spring_bean`,`job_name` from sys_task order by id desc 
2019-04-06 15:49:18 -==> Parameters: 
2019-04-06 15:49:18 -<==      Total: 1
2019-04-06 15:49:35 -Initializing Spring FrameworkServlet 'dispatcherServlet'
2019-04-06 15:49:35 -FrameworkServlet 'dispatcherServlet': initialization started
2019-04-06 15:49:35 -FrameworkServlet 'dispatcherServlet': initialization completed in 231 ms
2019-04-06 15:49:35 -Enabling session validation scheduler...
2019-04-06 15:49:36 -请求地址 : http://localhost:8081/login;JSESSIONID=5e6bdc5c-5fbe-4800-9d57-8197f600f45e
2019-04-06 15:49:36 -HTTP METHOD : GET
2019-04-06 15:49:36 -CLASS_METHOD : com.bootdo.system.controller.LoginController.login
2019-04-06 15:49:36 -参数 : [{}]
2019-04-06 15:49:36 -耗时 : 17
2019-04-06 15:49:36 -返回值 : login
2019-04-06 15:49:39 -请求地址 : http://localhost:8081/getVerify
2019-04-06 15:49:39 -HTTP METHOD : GET
2019-04-06 15:49:39 -CLASS_METHOD : com.bootdo.system.controller.LoginController.getVerify
2019-04-06 15:49:39 -参数 : [org.apache.shiro.web.servlet.ShiroHttpServletRequest@1d84e86d, org.apache.shiro.web.servlet.ShiroHttpServletResponse@19bb7f05]
2019-04-06 15:49:44 -8403
2019-04-06 15:49:44 -耗时 : 5155
2019-04-06 15:49:44 -返回值 : null
2019-04-06 15:49:49 -请求地址 : http://localhost:8081/login
2019-04-06 15:49:49 -HTTP METHOD : POST
2019-04-06 15:49:49 -CLASS_METHOD : com.bootdo.system.controller.LoginController.ajaxLogin
2019-04-06 15:49:49 -参数 : [admin, 111111, 8403, org.apache.shiro.web.servlet.ShiroHttpServletRequest@5c989176]
2019-04-06 15:49:49 -==>  Preparing: select `user_id`,`username`,`name`,`password`,`dept_id`,`email`,`mobile`,`status`,`user_id_create`,`gmt_create`,`gmt_modified`,`sex`,`birth`,`pic_id`,`live_address`,`hobby`,`province`,`city`,`district` from sys_user WHERE username = ? order by user_id desc 
2019-04-06 15:49:49 -==> Parameters: admin(String)
2019-04-06 15:49:49 -<==      Total: 1
2019-04-06 15:49:49 -耗时 : 209
2019-04-06 15:49:49 -返回值 : {msg=操作成功, code=0}
2019-04-06 15:49:49 -More than one TaskExecutor bean found within the context, and none is named 'taskExecutor'. Mark one of them as primary or name it 'taskExecutor' (possibly as an alias) in order to use it for async processing: [clientInboundChannelExecutor, clientOutboundChannelExecutor, brokerChannelExecutor, messageBrokerTaskScheduler]
2019-04-06 15:49:49 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-06 15:49:49 -请求地址 : http://localhost:8081/index
2019-04-06 15:49:49 -HTTP METHOD : GET
2019-04-06 15:49:49 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2019-04-06 15:49:49 -参数 : [{}]
2019-04-06 15:49:49 -==> Parameters: 1(Long), admin(String), 登录(String), 209(Integer), com.bootdo.system.controller.LoginController.ajaxLogin()(String), null, 127.0.0.1(String), 2019-04-06 15:49:49.686(Timestamp)
2019-04-06 15:49:50 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2019-04-06 15:49:50 -<==    Updates: 1
2019-04-06 15:49:50 -==> Parameters: 1(Long)
2019-04-06 15:49:50 -<==      Total: 46
2019-04-06 15:49:50 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2019-04-06 15:49:50 -==> Parameters: 138(Long)
2019-04-06 15:49:50 -<==      Total: 1
2019-04-06 15:49:50 -耗时 : 666
2019-04-06 15:49:50 -返回值 : index_v1
2019-04-06 15:49:50 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-04-06 15:49:50 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 667(Integer), com.bootdo.system.controller.LoginController.index()(String), {"menus":[{"attributes":{"icon":"fa fa-money","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-money","url":"/moneyList/moneyList"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"102","parentId":"106","text":"现金缴费"},{"attributes":{"icon":"fa fa-book","url":"/moneyLog/elecLog"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"107","parentId":"106","text":"缴费记录"}],"hasChildren":true,"hasParent":false,"id":"106","parentId":"0","text":"收费管理"},{"attributes":{"icon":"fa fa-lightbulb-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/elec/elec"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"121","parentId":"103","text":"电费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"elec/elecInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"122","parentId":"103","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"elec/elecUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"123","parentId":"103","text":"电表上传"},{"attributes":{"icon":"fa fa-cc","url":"/elec/elecPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"124","parentId":"103","text":"电价管理"}],"hasChildren":true,"hasParent":false,"id":"103","parentId":"0","text":"电费管理"},{"attributes":{"icon":"fa fa-tint","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/water/water"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"117","parentId":"105","text":"水费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"water/waterInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"118","parentId":"105","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"water/waterUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"119","parentId":"105","text":"水费生成"},{"attributes":{"icon":"fa fa-cc","url":"/water/waterPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"120","parentId":"105","text":"水价管理"}],"hasChildren":true,"hasParent":false,"id":"105","parentId":"0","text":"水费管理"},{"attributes":{"icon":"fa fa-fire","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/heat/heat"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"113","parentId":"104","text":"暖费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"heat/heatInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"114","parentId":"104","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"heat/heatUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"115","parentId":"104","text":"暖费生成"},{"attributes":{"icon":"","url":"/heat/heatPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"116","parentId":"104","text":"暖价管理"}],"hasChildren":true,"hasParent":false,"id":"104","parentId":"0","text":"暖费管理"},{"attributes":{"icon":"fa fa-vcard-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-bomb","url":"/print/print"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"149","parentId":"108","text":"票据记录"}],"hasChildren":true,"hasParent":false,"id":"108","parentId":"0","text":"票据管理"},{"attributes":{"icon":"fa fa-bar-chart","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-area-chart","url":"/chart/graph_echarts.html"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","text":"百度chart"},{"attributes":{"icon":"fa fa-sun-o","url":"charts/countDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"109","parentId":"97","text":"日统计报表"},{"attributes":{"icon":"fa fa-registered","url":"charts/countMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"110","parentId":"97","text":"月统计报表"},{"attributes":{"icon":"fa fa-money","url":"charts/countOwe"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"155","parentId":"97","text":"欠费报表图"},{"attributes":{"icon":"fa fa-support","url":"charts/countYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"111","parentId":"97","text":"年统计报表"},{"attributes":{"icon":"fa fa-tachometer","url":"charts/countRun"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"112","parentId":"97","text":"走势图报表"}],"hasChildren":true,"hasParent":false,"id":"97","parentId":"0","text":"统计管理"},{"attributes":{"icon":"fa fa-bars","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-book","url":"/common/dict"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"78","parentId":"1","text":"数据字典"},{"attributes":{"icon":"fa fa-folder-open","url":"/common/sysFile"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"71","parentId":"1","text":"文件管理"}],"h(String), 127.0.0.1(String), 2019-04-06 15:49:50.567(Timestamp)
2019-04-06 15:49:50 -<==    Updates: 1
2019-04-06 15:49:51 -请求地址 : http://localhost:8081/main
2019-04-06 15:49:51 -HTTP METHOD : GET
2019-04-06 15:49:51 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-06 15:49:51 -参数 : []
2019-04-06 15:49:51 -耗时 : 1
2019-04-06 15:49:51 -返回值 : main
2019-04-06 15:49:51 -请求地址 : http://localhost:8081/oa/notify/message
2019-04-06 15:49:51 -HTTP METHOD : GET
2019-04-06 15:49:51 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2019-04-06 15:49:51 -参数 : []
2019-04-06 15:49:51 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2019-04-06 15:49:51 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2019-04-06 15:49:51 -<==      Total: 0
2019-04-06 15:49:51 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2019-04-06 15:49:51 -==> Parameters: 1(Long), 0(String)
2019-04-06 15:49:51 -<==      Total: 1
2019-04-06 15:49:51 -耗时 : 186
2019-04-06 15:49:51 -返回值 : com.bootdo.common.utils.PageUtils@73b1158a
2019-04-06 15:49:51 -请求地址 : http://localhost:8081/main
2019-04-06 15:49:51 -HTTP METHOD : GET
2019-04-06 15:49:51 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-04-06 15:49:51 -参数 : []
2019-04-06 15:49:51 -耗时 : 1
2019-04-06 15:49:51 -返回值 : main
2019-04-06 15:49:53 -==>  Preparing: select distinct m.perms from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id = ur.role_id where ur.user_id = ? 
2019-04-06 15:49:53 -==> Parameters: 1(Long)
2019-04-06 15:49:54 -<==      Total: 90
2019-04-06 15:49:54 -请求地址 : http://localhost:8081/moneyLog/elecLog
2019-04-06 15:49:54 -HTTP METHOD : GET
2019-04-06 15:49:54 -CLASS_METHOD : com.bootdo.moneyLog.controller.ElecLogController.moneyLog
2019-04-06 15:49:54 -参数 : []
2019-04-06 15:49:54 -耗时 : 1
2019-04-06 15:49:54 -返回值 : /moneyLog/elecLog/elecLog
2019-04-06 15:49:57 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-06 15:49:57 -HTTP METHOD : GET
2019-04-06 15:49:57 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-06 15:49:57 -参数 : [userType]
2019-04-06 15:49:57 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-06 15:49:57 -==> Parameters: userType(String)
2019-04-06 15:49:57 -<==      Total: 2
2019-04-06 15:49:57 -耗时 : 58
2019-04-06 15:49:57 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-06 15:49:57 -请求地址 : http://localhost:8081/moneyLog/elecLog/list
2019-04-06 15:49:57 -HTTP METHOD : GET
2019-04-06 15:49:57 -CLASS_METHOD : com.bootdo.moneyLog.controller.ElecLogController.list
2019-04-06 15:49:57 -参数 : [{limit=10, offset=0, userType=, userOrg=, userId=, elecDate=}]
2019-04-06 15:49:58 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`elec_type`,`elec_money`,`elec_date`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec_log order by id asc limit ?, ? 
2019-04-06 15:49:58 -==> Parameters: 0(Integer), 10(Integer)
2019-04-06 15:49:58 -<==      Total: 7
2019-04-06 15:49:58 -==>  Preparing: select count(*) from elec_log 
2019-04-06 15:49:58 -==> Parameters: 
2019-04-06 15:49:58 -<==      Total: 1
2019-04-06 15:49:58 -耗时 : 158
2019-04-06 15:49:58 -返回值 : com.bootdo.common.utils.PageUtils@33a91cb9
2019-04-06 15:49:58 -WebSocketSession[0 current WS(0)-HttpStream(0)-HttpPoll(0), 1 total, 0 closed abnormally (0 connect failure, 0 send limit, 3 transport error)], stompSubProtocol[processed CONNECT(0)-CONNECTED(0)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 3, active threads = 0, queued tasks = 0, completed tasks = 3], outboundChannelpool size = 1, active threads = 0, queued tasks = 0, completed tasks = 1], sockJsScheduler[pool size = 4, active threads = 1, queued tasks = 1, completed tasks = 2]
2019-04-06 15:50:02 -请求地址 : http://localhost:8081/moneyLog/waterLog
2019-04-06 15:50:02 -HTTP METHOD : GET
2019-04-06 15:50:02 -CLASS_METHOD : com.bootdo.moneyLog.controller.WaterLogController.WaterLog
2019-04-06 15:50:02 -参数 : []
2019-04-06 15:50:02 -耗时 : 1
2019-04-06 15:50:02 -返回值 : /moneyLog/waterLog/waterLog
2019-04-06 15:50:03 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-06 15:50:03 -HTTP METHOD : GET
2019-04-06 15:50:03 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-06 15:50:03 -参数 : [userType]
2019-04-06 15:50:03 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-06 15:50:03 -==> Parameters: userType(String)
2019-04-06 15:50:03 -<==      Total: 2
2019-04-06 15:50:03 -耗时 : 8
2019-04-06 15:50:03 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-06 15:50:03 -请求地址 : http://localhost:8081/moneyLog/waterLog/list
2019-04-06 15:50:03 -HTTP METHOD : GET
2019-04-06 15:50:03 -CLASS_METHOD : com.bootdo.moneyLog.controller.WaterLogController.list
2019-04-06 15:50:03 -参数 : [{limit=10, offset=0, userType=, userOrg=, userId=, waterDate=}]
2019-04-06 15:50:03 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,`water_type`,`water_money`,`water_date`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from water_log order by id asc limit ?, ? 
2019-04-06 15:50:03 -==> Parameters: 0(Integer), 10(Integer)
2019-04-06 15:50:04 -<==      Total: 5
2019-04-06 15:50:04 -==>  Preparing: select count(*) from water_log 
2019-04-06 15:50:04 -==> Parameters: 
2019-04-06 15:50:04 -<==      Total: 1
2019-04-06 15:50:04 -耗时 : 127
2019-04-06 15:50:04 -返回值 : com.bootdo.common.utils.PageUtils@a9b405b
2019-04-06 15:50:05 -请求地址 : http://localhost:8081/moneyLog/waterLog/edit/5
2019-04-06 15:50:05 -HTTP METHOD : GET
2019-04-06 15:50:05 -CLASS_METHOD : com.bootdo.moneyLog.controller.WaterLogController.edit
2019-04-06 15:50:05 -参数 : [5, {}]
2019-04-06 15:50:05 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,`water_type`,`water_money`,`water_date`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from water_log where id = ? 
2019-04-06 15:50:05 -==> Parameters: 5(Long)
2019-04-06 15:50:05 -<==      Total: 1
2019-04-06 15:50:05 -耗时 : 19
2019-04-06 15:50:05 -返回值 : moneyLog/waterLog/edit
2019-04-06 15:50:05 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-04-06 15:50:05 -HTTP METHOD : GET
2019-04-06 15:50:05 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-06 15:50:05 -参数 : [userType]
2019-04-06 15:50:05 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-06 15:50:05 -==> Parameters: userType(String)
2019-04-06 15:50:05 -请求地址 : http://localhost:8081/common/dict/list/waterType
2019-04-06 15:50:05 -HTTP METHOD : GET
2019-04-06 15:50:05 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-04-06 15:50:05 -参数 : [waterType]
2019-04-06 15:50:05 -<==      Total: 2
2019-04-06 15:50:05 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-04-06 15:50:05 -耗时 : 5
2019-04-06 15:50:05 -返回值 : [DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=1, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-06 15:50:05 -==> Parameters: waterType(String)
2019-04-06 15:50:05 -<==      Total: 6
2019-04-06 15:50:05 -耗时 : 38
2019-04-06 15:50:05 -返回值 : [DictDO{id=132, name='特殊水费4', value='5', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=131, name='特殊水费3', value='4', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=130, name='特殊水费2', value='3', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=129, name='特殊水费1', value='2', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=128, name='民用水', value='1', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=127, name='商业水', value='0', type='waterType', description='用水性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-04-06 15:50:06 -请求地址 : http://localhost:8081/moneyLog/waterLog/update
2019-04-06 15:50:06 -HTTP METHOD : POST
2019-04-06 15:50:06 -CLASS_METHOD : com.bootdo.moneyLog.controller.WaterLogController.update
2019-04-06 15:50:06 -参数 : [{id=5, userId=111, userName=111, TuserType=A, userType=A, userOrg=2, userOrgName=五九, TwaterType=1, waterType=1, waterMoney=1.00, createTime=2019-04, waterDate=2019-11-11 15:16:55, remark=}]
2019-04-06 15:50:06 -耗时 : 1
2019-04-06 15:50:06 -返回值 : null
