2020-03-05 10:11:34 -Starting BootdoApplication on PC-201905091110 with PID 15484 (D:\eclipse2018-work\bootdo\target\classes started by Administrator in D:\eclipse2018-work\bootdo)
2020-03-05 10:11:34 -Running with Spring Boot v2.0.3.RELEASE, Spring v5.0.7.RELEASE
2020-03-05 10:11:34 -The following profiles are active: dev
2020-03-05 10:11:35 -Refreshing org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@5778826f: startup date [Thu Mar 05 10:11:35 CST 2020]; root of context hierarchy
2020-03-05 10:11:48 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-05 10:11:52 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$95b21d13] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-05 10:11:52 -Bean 'shiroConfig' of type [com.bootdo.system.config.ShiroConfig$$EnhancerBySpringCGLIB$$880b4bba] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-05 10:11:54 -Bean 'userRealm' of type [com.bootdo.system.shiro.UserRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-05 10:11:55 -Bean 'cacheManager2' of type [net.sf.ehcache.CacheManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-05 10:11:55 -Bean 'ehCacheManager' of type [org.apache.shiro.cache.ehcache.EhCacheManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-05 10:11:55 -Cache with name 'com.bootdo.system.shiro.UserRealm.authorizationCache' does not yet exist.  Creating now.
2020-03-05 10:11:55 -Added EhCache named [com.bootdo.system.shiro.UserRealm.authorizationCache]
2020-03-05 10:11:55 -Bean 'sessionDAO' of type [org.apache.shiro.session.mgt.eis.MemorySessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-05 10:11:55 -Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-05 10:11:55 -Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-05 10:11:56 -Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-05 10:11:58 -Tomcat initialized with port(s): 8081 (http)
2020-03-05 10:11:58 -Initializing ProtocolHandler ["http-nio-8081"]
2020-03-05 10:11:58 -Starting service [Tomcat]
2020-03-05 10:11:58 -Starting Servlet Engine: Apache Tomcat/8.5.31
2020-03-05 10:11:58 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [D:\Java\JDK\jdk1.8.0_102\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;D:\Java\JDK\jdk1.8.0_102\jre\bin;D:/Java/JRE/bin/server;D:/Java/JRE/bin;D:/Java/JRE/lib/amd64;C:\ProgramData\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Windows\System32\OpenSSH\;%JAVA_HOME\bin%;;C:\Program Files (x86)\pycSafefile\x64;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;C:\Program Files\JetBrains\WebStorm 2019.2.4\bin;;D:\eclipse2018\eclipse;;.]
2020-03-05 10:11:59 -Initializing Spring embedded WebApplicationContext
2020-03-05 10:11:59 -Root WebApplicationContext: initialization completed in 23664 ms
2020-03-05 10:12:00 -Mapping filter: 'characterEncodingFilter' to: [/*]
2020-03-05 10:12:00 -Mapping filter: 'hiddenHttpMethodFilter' to: [/*]
2020-03-05 10:12:00 -Mapping filter: 'httpPutFormContentFilter' to: [/*]
2020-03-05 10:12:00 -Mapping filter: 'requestContextFilter' to: [/*]
2020-03-05 10:12:00 -Filter xssFilter was not registered (disabled)
2020-03-05 10:12:00 -Mapping filter: 'webStatFilter' to urls: [/*]
2020-03-05 10:12:00 -Mapping filter: 'shiroFilterFactoryBean' to: [/*]
2020-03-05 10:12:00 -Servlet statViewServlet mapped to [/druid/*]
2020-03-05 10:12:00 -Servlet dispatcherServlet mapped to [/]
2020-03-05 10:12:08 -ApplicationContext registed-->org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@5778826f: startup date [Thu Mar 05 10:11:35 CST 2020]; root of context hierarchy
2020-03-05 10:12:09 -Using default implementation for ThreadExecutor
2020-03-05 10:12:09 -Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-03-05 10:12:09 -Quartz Scheduler v.2.3.0 created.
2020-03-05 10:12:09 -RAMJobStore initialized.
2020-03-05 10:12:09 -Scheduler meta-data: Quartz Scheduler (v2.3.0) 'schedulerFactoryBean' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-03-05 10:12:09 -Quartz scheduler 'schedulerFactoryBean' initialized from an externally provided properties instance.
2020-03-05 10:12:09 -Quartz scheduler version: 2.3.0
2020-03-05 10:12:09 -JobFactory set to: com.bootdo.common.quartz.factory.JobFactory@554d040d
2020-03-05 10:12:11 -Initializing ExecutorService  'clientInboundChannelExecutor'
2020-03-05 10:12:11 -Initializing ExecutorService  'clientOutboundChannelExecutor'
2020-03-05 10:12:16 -Mapped "{[/charts/countDD],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.countDDController.countDD()
2020-03-05 10:12:16 -Mapped "{[/charts/countDD/getCountDD],methods=[POST]}" onto public java.util.Map<java.lang.String, java.lang.Object> com.bootdo.charts.controller.countDDController.getCountD(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo)
2020-03-05 10:12:16 -Mapped "{[/charts/countDD/exportDD],methods=[GET]}" onto public void com.bootdo.charts.controller.countDDController.exportDD(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.HeatLogVo,com.bootdo.moneyLog.vo.WaterLogVo,javax.servlet.http.HttpServletResponse)
2020-03-05 10:12:16 -Mapped "{[/charts/countMM],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.countMMController.countMM()
2020-03-05 10:12:16 -Mapped "{[/charts/countMM/getCountMM],methods=[POST]}" onto public java.util.Map<java.lang.String, java.lang.Object> com.bootdo.charts.controller.countMMController.getCountMM(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo)
2020-03-05 10:12:16 -Mapped "{[/charts/countMM/exportMM],methods=[GET]}" onto public void com.bootdo.charts.controller.countMMController.exportMM(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.HeatLogVo,com.bootdo.moneyLog.vo.WaterLogVo,javax.servlet.http.HttpServletResponse)
2020-03-05 10:12:16 -Mapped "{[/charts/countOwe],methods=[GET]}" onto java.lang.String com.bootdo.charts.controller.countOweController.countOwe()
2020-03-05 10:12:16 -Mapped "{[/charts/countOwe/exportOwe],methods=[GET]}" onto public void com.bootdo.charts.controller.countOweController.exportOwe(com.bootdo.elec.vo.ElecVo,com.bootdo.heat.vo.HeatVo,com.bootdo.water.vo.WaterVo,javax.servlet.http.HttpServletResponse)
2020-03-05 10:12:16 -Mapped "{[/charts/countOwe/getCountOwe],methods=[POST]}" onto public java.util.Map<java.lang.String, java.lang.Object> com.bootdo.charts.controller.countOweController.getCountOwe(com.bootdo.elec.vo.ElecVo,com.bootdo.water.vo.WaterVo,com.bootdo.heat.vo.HeatVo)
2020-03-05 10:12:16 -Mapped "{[/charts/countRun],methods=[GET]}" onto java.lang.String com.bootdo.charts.controller.countRunController.countRun()
2020-03-05 10:12:16 -Mapped "{[/charts/countRun/getCountRun],methods=[POST]}" onto public java.util.Map<java.lang.String, java.lang.Object> com.bootdo.charts.controller.countRunController.getCountRun(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo)
2020-03-05 10:12:16 -Mapped "{[/charts/countRun/exportRun],methods=[GET]}" onto public void com.bootdo.charts.controller.countRunController.exportRun(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.HeatLogVo,com.bootdo.moneyLog.vo.WaterLogVo,javax.servlet.http.HttpServletResponse)
2020-03-05 10:12:16 -Mapped "{[/charts/countYY/exportYY],methods=[GET]}" onto public void com.bootdo.charts.controller.countYYController.exportYY(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.HeatLogVo,com.bootdo.moneyLog.vo.WaterLogVo,javax.servlet.http.HttpServletResponse)
2020-03-05 10:12:16 -Mapped "{[/charts/countYY/getCountYY],methods=[POST]}" onto public java.util.Map<java.lang.String, java.lang.Object> com.bootdo.charts.controller.countYYController.getCountYY(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo)
2020-03-05 10:12:16 -Mapped "{[/charts/countYY],methods=[GET]}" onto java.lang.String com.bootdo.charts.controller.countYYController.countYY()
2020-03-05 10:12:16 -Mapped "{[/charts/tableDD],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.tableDDController.countDD()
2020-03-05 10:12:16 -Mapped "{[/charts/tableDD/exportDD],methods=[GET]}" onto public void com.bootdo.charts.controller.tableDDController.exportDD(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.HeatLogVo,com.bootdo.moneyLog.vo.WaterLogVo,javax.servlet.http.HttpServletResponse)
2020-03-05 10:12:16 -Mapped "{[/charts/tableDD/getTableDD],methods=[POST]}" onto public java.util.Map<java.lang.String, java.lang.Object> com.bootdo.charts.controller.tableDDController.getTableDD(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo)
2020-03-05 10:12:16 -Mapped "{[/charts/tableElecMM/tableElecMM],methods=[POST]}" onto public java.util.Map<java.lang.String, java.lang.Object> com.bootdo.charts.controller.tableElecMMController.tableElecMM(com.bootdo.elec.vo.ElecVo,com.bootdo.moneyLog.vo.ElecLogVo)
2020-03-05 10:12:16 -Mapped "{[/charts/tableElecMM],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.tableElecMMController.tableElecMM()
2020-03-05 10:12:16 -Mapped "{[/charts/tableElecMM/exportElecMM],methods=[GET]}" onto public void com.bootdo.charts.controller.tableElecMMController.exportElecMM(com.bootdo.elec.vo.ElecVo,com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse)
2020-03-05 10:12:16 -Mapped "{[/charts/tableElecYY/tableElecYY],methods=[POST]}" onto public java.util.Map<java.lang.String, java.lang.Object> com.bootdo.charts.controller.tableElecYYController.tableElecYY(com.bootdo.elec.vo.ElecVo,com.bootdo.moneyLog.vo.ElecLogVo)
2020-03-05 10:12:16 -Mapped "{[/charts/tableElecYY],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.tableElecYYController.tableElecYY()
2020-03-05 10:12:16 -Mapped "{[/charts/tableElecYY/exportElecYY],methods=[GET]}" onto public void com.bootdo.charts.controller.tableElecYYController.exportElecYY(com.bootdo.elec.vo.ElecVo,com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse)
2020-03-05 10:12:16 -Mapped "{[/charts/tableHeatMM/tableHeatMM],methods=[POST]}" onto public java.util.Map<java.lang.String, java.lang.Object> com.bootdo.charts.controller.tableHeatMMController.tableHeatMM(com.bootdo.heat.vo.HeatVo,com.bootdo.moneyLog.vo.HeatLogVo)
2020-03-05 10:12:16 -Mapped "{[/charts/tableHeatMM],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.tableHeatMMController.tableHeatMM()
2020-03-05 10:12:16 -Mapped "{[/charts/tableHeatMM/exportHeatMM],methods=[GET]}" onto public void com.bootdo.charts.controller.tableHeatMMController.exportHeatMM(com.bootdo.heat.vo.HeatVo,com.bootdo.moneyLog.vo.HeatLogVo,javax.servlet.http.HttpServletResponse)
2020-03-05 10:12:16 -Mapped "{[/charts/tableHeatYY/tableHeatYY],methods=[POST]}" onto public java.util.Map<java.lang.String, java.lang.Object> com.bootdo.charts.controller.tableHeatYYController.tableHeatYY(com.bootdo.heat.vo.HeatVo,com.bootdo.moneyLog.vo.HeatLogVo)
2020-03-05 10:12:16 -Mapped "{[/charts/tableHeatYY],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.tableHeatYYController.tableHeatYY()
2020-03-05 10:12:16 -Mapped "{[/charts/tableHeatYY/exportHeatYY],methods=[GET]}" onto public void com.bootdo.charts.controller.tableHeatYYController.exportHeatYY(com.bootdo.heat.vo.HeatVo,com.bootdo.moneyLog.vo.HeatLogVo,javax.servlet.http.HttpServletResponse)
2020-03-05 10:12:16 -Mapped "{[/charts/tableWaterMM/tableWaterMM],methods=[POST]}" onto public java.util.Map<java.lang.String, java.lang.Object> com.bootdo.charts.controller.tableWaterMMController.tableWaterMM(com.bootdo.water.vo.WaterVo,com.bootdo.moneyLog.vo.WaterLogVo)
2020-03-05 10:12:16 -Mapped "{[/charts/tableWaterMM],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.tableWaterMMController.tableWaterMM()
2020-03-05 10:12:16 -Mapped "{[/charts/tableWaterMM/exportWaterMM],methods=[GET]}" onto public void com.bootdo.charts.controller.tableWaterMMController.exportWaterMM(com.bootdo.water.vo.WaterVo,com.bootdo.moneyLog.vo.WaterLogVo,javax.servlet.http.HttpServletResponse)
2020-03-05 10:12:16 -Mapped "{[/charts/tableWaterYY/tableWaterYY],methods=[POST]}" onto public java.util.Map<java.lang.String, java.lang.Integer> com.bootdo.charts.controller.tableWaterYYController.tableWaterYY(com.bootdo.water.vo.WaterVo,com.bootdo.moneyLog.vo.WaterLogVo)
2020-03-05 10:12:16 -Mapped "{[/charts/tableWaterYY],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.tableWaterYYController.tableWaterYY()
2020-03-05 10:12:16 -Mapped "{[/charts/tableWaterYY/exportWaterYY],methods=[GET]}" onto public void com.bootdo.charts.controller.tableWaterYYController.exportWaterYY(com.bootdo.water.vo.WaterVo,com.bootdo.moneyLog.vo.WaterLogVo,javax.servlet.http.HttpServletResponse)
2020-03-05 10:12:16 -Mapped "{[/common/dict/add],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.add()
2020-03-05 10:12:16 -Mapped "{[/common/dict/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.remove(java.lang.Long)
2020-03-05 10:12:16 -Mapped "{[/common/dict/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.remove(java.lang.Long[])
2020-03-05 10:12:16 -Mapped "{[/common/dict/update]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.update(com.bootdo.common.domain.DictDO)
2020-03-05 10:12:16 -Mapped "{[/common/dict/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.common.controller.DictController.list(java.util.Map<java.lang.String, java.lang.Object>)
2020-03-05 10:12:16 -Mapped "{[/common/dict/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.save(com.bootdo.common.domain.DictDO)
2020-03-05 10:12:16 -Mapped "{[/common/dict/type],methods=[GET]}" onto public java.util.List<com.bootdo.common.domain.DictDO> com.bootdo.common.controller.DictController.listType()
2020-03-05 10:12:16 -Mapped "{[/common/dict/add/{type}/{description}],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.addD(org.springframework.ui.Model,java.lang.String,java.lang.String)
2020-03-05 10:12:16 -Mapped "{[/common/dict/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.edit(java.lang.Long,org.springframework.ui.Model)
2020-03-05 10:12:16 -Mapped "{[/common/dict/list/{type}],methods=[GET]}" onto public java.util.List<com.bootdo.common.domain.DictDO> com.bootdo.common.controller.DictController.listByType(java.lang.String)
2020-03-05 10:12:16 -Mapped "{[/common/dict],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.dict()
2020-03-05 10:12:16 -Mapped "{[/common/sysFile/add],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.FileController.add()
2020-03-05 10:12:16 -Mapped "{[/common/sysFile/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.remove(java.lang.Long,javax.servlet.http.HttpServletRequest)
2020-03-05 10:12:16 -Mapped "{[/common/sysFile/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.remove(java.lang.Long[])
2020-03-05 10:12:16 -Mapped "{[/common/sysFile/update]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.update(com.bootdo.common.domain.FileDO)
2020-03-05 10:12:16 -Mapped "{[/common/sysFile/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.common.controller.FileController.list(java.util.Map<java.lang.String, java.lang.Object>)
2020-03-05 10:12:16 -Mapped "{[/common/sysFile/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.save(com.bootdo.common.domain.FileDO)
2020-03-05 10:12:16 -Mapped "{[/common/sysFile/info/{id}]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.info(java.lang.Long)
2020-03-05 10:12:16 -Mapped "{[/common/sysFile],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.FileController.sysFile(org.springframework.ui.Model)
2020-03-05 10:12:16 -Mapped "{[/common/sysFile/edit],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.FileController.edit(java.lang.Long,org.springframework.ui.Model)
2020-03-05 10:12:16 -Mapped "{[/common/sysFile/upload],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.FileController.upload(org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpServletRequest)
2020-03-05 10:12:16 -Mapped "{[/common/generator/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.GeneratorController.update(java.util.Map<java.lang.String, java.lang.Object>)
2020-03-05 10:12:16 -Mapped "{[/common/generator/list],methods=[GET]}" onto java.util.List<java.util.Map<java.lang.String, java.lang.Object>> com.bootdo.common.controller.GeneratorController.list()
2020-03-05 10:12:16 -Mapped "{[/common/generator/code/{tableName}]}" onto public void com.bootdo.common.controller.GeneratorController.code(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String) throws java.io.IOException
2020-03-05 10:12:16 -Mapped "{[/common/generator],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.GeneratorController.generator()
2020-03-05 10:12:16 -Mapped "{[/common/generator/edit],methods=[GET]}" onto public java.lang.String com.bootdo.common.controller.GeneratorController.edit(org.springframework.ui.Model)
2020-03-05 10:12:16 -Mapped "{[/common/generator/batchCode]}" onto public void com.bootdo.common.controller.GeneratorController.batchCode(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String) throws java.io.IOException
2020-03-05 10:12:16 -Mapped "{[/common/job/add],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.JobController.add()
2020-03-05 10:12:16 -Mapped "{[/common/job/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.remove(java.lang.Long)
2020-03-05 10:12:16 -Mapped "{[/common/job/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.remove(java.lang.Long[])
2020-03-05 10:12:16 -Mapped "{[/common/job/update],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.update(com.bootdo.common.domain.TaskDO)
2020-03-05 10:12:16 -Mapped "{[/common/job/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.common.controller.JobController.list(java.util.Map<java.lang.String, java.lang.Object>)
2020-03-05 10:12:16 -Mapped "{[/common/job/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.save(com.bootdo.common.domain.TaskDO)
2020-03-05 10:12:16 -Mapped "{[/common/job/info/{id}]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.info(java.lang.Long)
2020-03-05 10:12:16 -Mapped "{[/common/job/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.JobController.edit(java.lang.Long,org.springframework.ui.Model)
2020-03-05 10:12:16 -Mapped "{[/common/job],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.JobController.taskScheduleJob()
2020-03-05 10:12:16 -Mapped "{[/common/job/changeJobStatus],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.changeJobStatus(java.lang.Long,java.lang.String)
2020-03-05 10:12:16 -Mapped "{[/common/log/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.LogController.remove(java.lang.Long)
2020-03-05 10:12:16 -Mapped "{[/common/log],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.LogController.log()
2020-03-05 10:12:16 -Mapped "{[/common/log/list],methods=[GET]}" onto com.bootdo.common.domain.PageDO<com.bootdo.common.domain.LogDO> com.bootdo.common.controller.LogController.list(java.util.Map<java.lang.String, java.lang.Object>)
2020-03-05 10:12:16 -Mapped "{[/common/log/batchRemove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.LogController.batchRemove(java.lang.Long[])
2020-03-05 10:12:16 -Mapped "{[/common/long],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.LongController.Long()
2020-03-05 10:12:16 -Mapped "{[/common/time],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.TimeController.Time()
2020-03-05 10:12:16 -Mapped "{[/error]}" onto public com.bootdo.common.utils.R com.bootdo.common.exception.MainsiteErrorController.handleError(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2020-03-05 10:12:16 -Mapped "{[/error],produces=[text/html]}" onto public org.springframework.web.servlet.ModelAndView com.bootdo.common.exception.MainsiteErrorController.errorHtml(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2020-03-05 10:12:16 -Mapped "{[/elec/elec/add],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecController.add()
2020-03-05 10:12:16 -Mapped "{[/elec/elec/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.remove(java.lang.Long)
2020-03-05 10:12:16 -Mapped "{[/elec/elec/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.remove(java.lang.Long[])
2020-03-05 10:12:16 -Mapped "{[/elec/elec/update],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.update(com.bootdo.elec.domain.ElecDO)
2020-03-05 10:12:16 -Mapped "{[/elec/elec/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.elec.controller.ElecController.list(java.util.Map<java.lang.String, java.lang.Object>,com.bootdo.elec.domain.ElecDO)
2020-03-05 10:12:16 -Mapped "{[/elec/elec/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.save(com.bootdo.elec.domain.ElecDO)
2020-03-05 10:12:16 -Mapped "{[/elec/elec/exprotElec],methods=[GET]}" onto public void com.bootdo.elec.controller.ElecController.exprotExcel(com.bootdo.elec.vo.ElecVo,javax.servlet.http.HttpServletResponse)
2020-03-05 10:12:16 -Mapped "{[/elec/elec],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecController.Elec()
2020-03-05 10:12:16 -Mapped "{[/elec/elec/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecController.edit(java.lang.Long,org.springframework.ui.Model)
2020-03-05 10:12:16 -Mapped "{[/elec/elecInto/importElecIntoExcel],methods=[POST]}" onto public java.lang.String com.bootdo.elec.controller.ElecIntoController.importElecIntoExcel(org.springframework.web.multipart.MultipartFile,com.bootdo.elec.vo.ElecVo,javax.servlet.http.HttpServletResponse) throws java.lang.Exception
2020-03-05 10:12:16 -Mapped "{[/elec/elecInto/exprotElecIntoExcel],methods=[GET]}" onto public void com.bootdo.elec.controller.ElecIntoController.exprotExcel(com.bootdo.elec.vo.ElecVo,javax.servlet.http.HttpServletResponse)
2020-03-05 10:12:16 -Mapped "{[/elec/elecInto],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecIntoController.ElecInto()
2020-03-05 10:12:16 -Mapped "{[/elec/elecPrice/add],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecPriceController.add()
2020-03-05 10:12:16 -Mapped "{[/elec/elecPrice/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecPriceController.remove(java.lang.Long)
2020-03-05 10:12:16 -Mapped "{[/elec/elecPrice/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecPriceController.remove(java.lang.Long[])
2020-03-05 10:12:16 -Mapped "{[/elec/elecPrice/update]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecPriceController.update(com.bootdo.elec.domain.ElecPriceDO)
2020-03-05 10:12:16 -Mapped "{[/elec/elecPrice/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.elec.controller.ElecPriceController.list(java.util.Map<java.lang.String, java.lang.Object>)
2020-03-05 10:12:16 -Mapped "{[/elec/elecPrice/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecPriceController.save(com.bootdo.elec.domain.ElecPriceDO,com.bootdo.elec.domain.ElecDO)
2020-03-05 10:12:16 -Mapped "{[/elec/elecPrice],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecPriceController.ElecPrice()
2020-03-05 10:12:16 -Mapped "{[/elec/elecPrice/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecPriceController.edit(java.lang.Long,org.springframework.ui.Model)
2020-03-05 10:12:16 -Mapped "{[/elec/elecUpLoad],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecUpLoadController.Elec()
2020-03-05 10:12:16 -Mapped "{[/elec/elecUpLoad/importElecExcel],methods=[POST]}" onto public java.util.Map<java.lang.String, java.lang.Object> com.bootdo.elec.controller.ElecUpLoadController.importElecExcel(org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpServletRequest) throws java.lang.Exception
2020-03-05 10:12:16 -Mapped "{[/elec/elecUpLoad/exprotElecExcel],methods=[GET]}" onto public void com.bootdo.elec.controller.ElecUpLoadController.exprotElecExcel(com.bootdo.elec.vo.ElecVo,javax.servlet.http.HttpServletResponse)
2020-03-05 10:12:16 -Mapped "{[/elec/elecUpLoad/importElecUser]}" onto public java.lang.String com.bootdo.elec.controller.ElecUpLoadController.importElecUser(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)
2020-03-05 10:12:16 -Mapped "{[/heat/heat/add],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatController.add()
2020-03-05 10:12:16 -Mapped "{[/heat/heat/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatController.remove(java.lang.Integer)
2020-03-05 10:12:16 -Mapped "{[/heat/heat/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatController.remove(java.lang.Integer[])
2020-03-05 10:12:16 -Mapped "{[/heat/heat/update]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatController.update(com.bootdo.heat.domain.HeatDO)
2020-03-05 10:12:16 -Mapped "{[/heat/heat/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.heat.controller.HeatController.list(java.util.Map<java.lang.String, java.lang.Object>)
2020-03-05 10:12:16 -Mapped "{[/heat/heat/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatController.save(com.bootdo.heat.domain.HeatDO)
2020-03-05 10:12:16 -Mapped "{[/heat/heat/exprotHeat],methods=[GET]}" onto public void com.bootdo.heat.controller.HeatController.exprotExcel(com.bootdo.heat.vo.HeatVo,javax.servlet.http.HttpServletResponse)
2020-03-05 10:12:16 -Mapped "{[/heat/heat],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatController.Heat()
2020-03-05 10:12:16 -Mapped "{[/heat/heat/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatController.edit(java.lang.Integer,org.springframework.ui.Model)
2020-03-05 10:12:16 -Mapped "{[/heat/heatInto/importHeatIntoExcel],methods=[POST]}" onto public java.lang.String com.bootdo.heat.controller.HeatIntoController.importHeatIntoExcel(org.springframework.web.multipart.MultipartFile,com.bootdo.heat.vo.HeatVo,javax.servlet.http.HttpServletResponse) throws java.lang.Exception
2020-03-05 10:12:16 -Mapped "{[/heat/heatInto/exprotHeatIntoExcel],methods=[GET]}" onto public void com.bootdo.heat.controller.HeatIntoController.exprotExcel(com.bootdo.heat.vo.HeatVo,javax.servlet.http.HttpServletResponse)
2020-03-05 10:12:16 -Mapped "{[/heat/heatInto],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatIntoController.HeatInto()
2020-03-05 10:12:16 -Mapped "{[/heat/heatPrice/add],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatPriceController.add()
2020-03-05 10:12:16 -Mapped "{[/heat/heatPrice/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatPriceController.remove(java.lang.Long)
2020-03-05 10:12:16 -Mapped "{[/heat/heatPrice/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatPriceController.remove(java.lang.Long[])
2020-03-05 10:12:16 -Mapped "{[/heat/heatPrice/update]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatPriceController.update(com.bootdo.heat.domain.HeatPriceDO)
2020-03-05 10:12:16 -Mapped "{[/heat/heatPrice/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.heat.controller.HeatPriceController.list(java.util.Map<java.lang.String, java.lang.Object>)
2020-03-05 10:12:16 -Mapped "{[/heat/heatPrice/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatPriceController.save(com.bootdo.heat.domain.HeatPriceDO)
2020-03-05 10:12:16 -Mapped "{[/heat/heatPrice],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatPriceController.HeatPrice()
2020-03-05 10:12:16 -Mapped "{[/heat/heatPrice/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatPriceController.edit(java.lang.Long,org.springframework.ui.Model)
2020-03-05 10:12:16 -Mapped "{[/heat/heatUpLoad/createHeatExcel],methods=[POST]}" onto public java.lang.String com.bootdo.heat.controller.HeatUpLoadController.createHeatExcel(com.bootdo.heat.domain.HeatDO) throws java.lang.Exception
2020-03-05 10:12:16 -Mapped "{[/heat/heatUpLoad/importHeatExcel]}" onto public java.lang.String com.bootdo.heat.controller.HeatUpLoadController.importHeatExcel(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)
2020-03-05 10:12:16 -Mapped "{[/heat/heatUpLoad/halfHeatExcel],methods=[POST]}" onto public java.lang.String com.bootdo.heat.controller.HeatUpLoadController.halfHeatExcel(com.bootdo.heat.domain.HeatDO) throws java.lang.Exception
2020-03-05 10:12:16 -Mapped "{[/heat/heatUpLoad],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatUpLoadController.HeatUpLoad()
2020-03-05 10:12:16 -Mapped "{[/heat/heatUpLoad/exprotHeatExcel],methods=[GET]}" onto public void com.bootdo.heat.controller.HeatUpLoadController.exprotHeatExcel(com.bootdo.heat.vo.HeatVo,javax.servlet.http.HttpServletResponse)
2020-03-05 10:12:16 -Mapped "{[/heat/heatUpLoad/nextHeatExcel],methods=[POST]}" onto public java.lang.String com.bootdo.heat.controller.HeatUpLoadController.nextHeatExcel(com.bootdo.heat.domain.HeatDO) throws java.lang.Exception
2020-03-05 10:12:16 -Mapped "{[/moneyList/moneyList/updateMoney],methods=[POST]}" onto public java.lang.Long com.bootdo.moneyList.controller.MoneyListController.updateMoney(com.bootdo.moneyList.damain.MoneyListDO,javax.servlet.http.HttpServletRequest)
2020-03-05 10:12:16 -Mapped "{[/moneyList/moneyList],methods=[GET]}" onto java.lang.String com.bootdo.moneyList.controller.MoneyListController.MoneyList()
2020-03-05 10:12:16 -Mapped "{[/moneyList/moneyList/queryAllUserName],methods=[POST]}" onto public java.util.List<com.bootdo.moneyList.damain.MoneyListDO> com.bootdo.moneyList.controller.MoneyListController.getAllUserName(com.bootdo.moneyList.damain.MoneyListDO)
2020-03-05 10:12:16 -Mapped "{[/moneyList/moneyList/queryAllUser],methods=[POST]}" onto public java.util.List<com.bootdo.moneyList.damain.MoneyListDO> com.bootdo.moneyList.controller.MoneyListController.queryAllUser(com.bootdo.moneyList.damain.MoneyListDO)
2020-03-05 10:12:16 -Mapped "{[/moneyList/moneyList/moneyPrint/{id}/{userNo}],methods=[GET]}" onto java.lang.String com.bootdo.moneyList.controller.MoneyListController.printEdit(java.lang.Long,java.lang.String,org.springframework.ui.Model,com.bootdo.moneyList.damain.MoneyListDO,javax.servlet.http.HttpServletRequest)
2020-03-05 10:12:16 -Mapped "{[/moneyList/moneyWZ/add],methods=[GET]}" onto java.lang.String com.bootdo.moneyList.controller.MoneyListWZController.add()
2020-03-05 10:12:16 -Mapped "{[/moneyList/moneyWZ/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyList.controller.MoneyListWZController.remove(java.lang.Long)
2020-03-05 10:12:16 -Mapped "{[/moneyList/moneyWZ/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyList.controller.MoneyListWZController.remove(java.lang.Long[])
2020-03-05 10:12:16 -Mapped "{[/moneyList/moneyWZ/update],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyList.controller.MoneyListWZController.update(com.bootdo.elec.domain.ElecDO)
2020-03-05 10:12:16 -Mapped "{[/moneyList/moneyWZ/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.moneyList.controller.MoneyListWZController.list(java.util.Map<java.lang.String, java.lang.Object>,com.bootdo.elec.domain.ElecDO)
2020-03-05 10:12:16 -Mapped "{[/moneyList/moneyWZ/exprotWZ],methods=[GET]}" onto public void com.bootdo.moneyList.controller.MoneyListWZController.exportElecYY(com.bootdo.elec.vo.ElecVo,com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse)
2020-03-05 10:12:16 -Mapped "{[/moneyList/moneyWZ/batchMoney],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyList.controller.MoneyListWZController.batchMoney(java.lang.Long[])
2020-03-05 10:12:16 -Mapped "{[/moneyList/moneyWZ],methods=[GET]}" onto java.lang.String com.bootdo.moneyList.controller.MoneyListWZController.MoneyWZ()
2020-03-05 10:12:16 -Mapped "{[/moneyList/moneyWZ/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.moneyList.controller.MoneyListWZController.edit(java.lang.Long,org.springframework.ui.Model)
2020-03-05 10:12:16 -Mapped "{[/moneyLog/elecLog/add],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.ElecLogController.add()
2020-03-05 10:12:16 -Mapped "{[/moneyLog/elecLog/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.ElecLogController.remove(java.lang.Long)
2020-03-05 10:12:16 -Mapped "{[/moneyLog/elecLog/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.ElecLogController.remove(java.lang.Long[])
2020-03-05 10:12:16 -Mapped "{[/moneyLog/elecLog/update]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.ElecLogController.update(java.util.Map<java.lang.String, java.lang.Object>,com.bootdo.moneyLog.domain.ElecLogDO)
2020-03-05 10:12:16 -Mapped "{[/moneyLog/elecLog/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.moneyLog.controller.ElecLogController.list(java.util.Map<java.lang.String, java.lang.Object>)
2020-03-05 10:12:16 -Mapped "{[/moneyLog/elecLog/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.ElecLogController.save(com.bootdo.moneyLog.domain.ElecLogDO)
2020-03-05 10:12:16 -Mapped "{[/moneyLog/elecLog],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.ElecLogController.moneyLog()
2020-03-05 10:12:16 -Mapped "{[/moneyLog/elecLog/exprotElecLog],methods=[GET]}" onto public void com.bootdo.moneyLog.controller.ElecLogController.exprotElecLog(com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2020-03-05 10:12:16 -Mapped "{[/moneyLog/elecLog/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.ElecLogController.edit(java.lang.Long,org.springframework.ui.Model)
2020-03-05 10:12:16 -Mapped "{[/moneyLog/heatLog/add],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.HeatLogController.add()
2020-03-05 10:12:16 -Mapped "{[/moneyLog/heatLog/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.HeatLogController.remove(java.lang.Long)
2020-03-05 10:12:16 -Mapped "{[/moneyLog/heatLog/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.HeatLogController.remove(java.lang.Long[])
2020-03-05 10:12:16 -Mapped "{[/moneyLog/heatLog/update]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.HeatLogController.update(java.util.Map<java.lang.String, java.lang.Object>,com.bootdo.moneyLog.domain.HeatLogDO)
2020-03-05 10:12:16 -Mapped "{[/moneyLog/heatLog/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.moneyLog.controller.HeatLogController.list(java.util.Map<java.lang.String, java.lang.Object>)
2020-03-05 10:12:16 -Mapped "{[/moneyLog/heatLog/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.HeatLogController.save(com.bootdo.moneyLog.domain.HeatLogDO)
2020-03-05 10:12:16 -Mapped "{[/moneyLog/heatLog/exprotHeatLog],methods=[GET]}" onto public void com.bootdo.moneyLog.controller.HeatLogController.exprotHeatLog(com.bootdo.moneyLog.vo.HeatLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2020-03-05 10:12:16 -Mapped "{[/moneyLog/heatLog],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.HeatLogController.HeatLog()
2020-03-05 10:12:16 -Mapped "{[/moneyLog/heatLog/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.HeatLogController.edit(java.lang.Long,org.springframework.ui.Model)
2020-03-05 10:12:16 -Mapped "{[/moneyLog/waterLog/add],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.WaterLogController.add()
2020-03-05 10:12:16 -Mapped "{[/moneyLog/waterLog/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.WaterLogController.remove(java.lang.Long)
2020-03-05 10:12:16 -Mapped "{[/moneyLog/waterLog/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.WaterLogController.remove(java.lang.Long[])
2020-03-05 10:12:16 -Mapped "{[/moneyLog/waterLog/update]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.WaterLogController.update(java.util.Map<java.lang.String, java.lang.Object>,com.bootdo.moneyLog.domain.WaterLogDO)
2020-03-05 10:12:16 -Mapped "{[/moneyLog/waterLog/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.moneyLog.controller.WaterLogController.list(java.util.Map<java.lang.String, java.lang.Object>)
2020-03-05 10:12:16 -Mapped "{[/moneyLog/waterLog/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.WaterLogController.save(com.bootdo.moneyLog.domain.WaterLogDO)
2020-03-05 10:12:16 -Mapped "{[/moneyLog/waterLog/exprotWaterLog],methods=[GET]}" onto public void com.bootdo.moneyLog.controller.WaterLogController.exprotWaterLog(com.bootdo.moneyLog.vo.WaterLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2020-03-05 10:12:16 -Mapped "{[/moneyLog/waterLog],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.WaterLogController.WaterLog()
2020-03-05 10:12:16 -Mapped "{[/moneyLog/waterLog/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.WaterLogController.edit(java.lang.Long,org.springframework.ui.Model)
2020-03-05 10:12:16 -Mapped "{[/moneyUpLoad/ElecLogUpLoad/exprotElecLogExcel],methods=[GET]}" onto public void com.bootdo.moneyUpLoad.Controller.ElecLogUpLoadController.exprotElecLogExcel(com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2020-03-05 10:12:16 -Mapped "{[/moneyUpLoad/ElecLogUpLoad/importElecLogExcel]}" onto public java.lang.String com.bootdo.moneyUpLoad.Controller.ElecLogUpLoadController.importElecLogExcel(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)
2020-03-05 10:12:16 -Mapped "{[/moneyUpLoad/ElecLogUpLoad],methods=[GET]}" onto java.lang.String com.bootdo.moneyUpLoad.Controller.ElecLogUpLoadController.ElecLogUpLoad()
2020-03-05 10:12:16 -Mapped "{[/moneyUpLoad/HeatLogUpLoad/importHeatLogExcel]}" onto public java.lang.String com.bootdo.moneyUpLoad.Controller.HeatLogUpLoadController.importHeatLogExcel(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)
2020-03-05 10:12:16 -Mapped "{[/moneyUpLoad/HeatLogUpLoad/exprotHeatLogExcel],methods=[GET]}" onto public void com.bootdo.moneyUpLoad.Controller.HeatLogUpLoadController.exprotHeatLogExcel(com.bootdo.moneyLog.vo.HeatLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2020-03-05 10:12:16 -Mapped "{[/moneyUpLoad/HeatLogUpLoad],methods=[GET]}" onto java.lang.String com.bootdo.moneyUpLoad.Controller.HeatLogUpLoadController.HeatLogUpLoad()
2020-03-05 10:12:16 -Mapped "{[/moneyUpLoad/WaterLogUpLoad/exprotWaterLogExcel],methods=[GET]}" onto public void com.bootdo.moneyUpLoad.Controller.WaterLogUpLoadController.exprotWaterLogExcel(com.bootdo.moneyLog.vo.WaterLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2020-03-05 10:12:16 -Mapped "{[/moneyUpLoad/WaterLogUpLoad],methods=[GET]}" onto java.lang.String com.bootdo.moneyUpLoad.Controller.WaterLogUpLoadController.WaterLogLogUpLoad()
2020-03-05 10:12:16 -Mapped "{[/moneyUpLoad/WaterLogUpLoad/importWaterLogExcel]}" onto public java.lang.String com.bootdo.moneyUpLoad.Controller.WaterLogUpLoadController.importWaterLogExcel(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)
2020-03-05 10:12:16 -Mapped "{[/oa/notify/add],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.add()
2020-03-05 10:12:16 -Mapped "{[/oa/notify/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.remove(java.lang.Long)
2020-03-05 10:12:16 -Mapped "{[/oa/notify/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.remove(java.lang.Long[])
2020-03-05 10:12:16 -Mapped "{[/oa/notify/update]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.update(com.bootdo.oa.domain.NotifyDO)
2020-03-05 10:12:16 -Mapped "{[/oa/notify/read/{id}],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.read(java.lang.Long,org.springframework.ui.Model)
2020-03-05 10:12:16 -Mapped "{[/oa/notify/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.oa.controller.NotifyController.list(java.util.Map<java.lang.String, java.lang.Object>)
2020-03-05 10:12:16 -Mapped "{[/oa/notify/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.save(com.bootdo.oa.domain.NotifyDO)
2020-03-05 10:12:16 -Mapped "{[/oa/notify/message],methods=[GET]}" onto com.bootdo.common.utils.PageUtils com.bootdo.oa.controller.NotifyController.message()
2020-03-05 10:12:16 -Mapped "{[/oa/notify/selfList],methods=[GET]}" onto com.bootdo.common.utils.PageUtils com.bootdo.oa.controller.NotifyController.selfList(java.util.Map<java.lang.String, java.lang.Object>)
2020-03-05 10:12:16 -Mapped "{[/oa/notify/selfNotify],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.selefNotify()
2020-03-05 10:12:16 -Mapped "{[/oa/notify],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.oaNotify()
2020-03-05 10:12:16 -Mapped "{[/oa/notify/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.edit(java.lang.Long,org.springframework.ui.Model)
2020-03-05 10:12:16 -Mapped "{[/print/print/add],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.add()
2020-03-05 10:12:16 -Mapped "{[/print/print/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.print.controller.PrintController.remove(java.lang.Long)
2020-03-05 10:12:16 -Mapped "{[/print/print/update]}" onto public com.bootdo.common.utils.R com.bootdo.print.controller.PrintController.update(com.bootdo.print.domain.PrintDO)
2020-03-05 10:12:16 -Mapped "{[/print/print/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.print.controller.PrintController.list(java.util.Map<java.lang.String, java.lang.Object>)
2020-03-05 10:12:16 -Mapped "{[/print/print/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.print.controller.PrintController.save(java.lang.String,com.bootdo.print.domain.PrintDO)
2020-03-05 10:12:16 -Mapped "{[/print/print/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.print.controller.PrintController.batchRemove(java.lang.Long[])
2020-03-05 10:12:16 -Mapped "{[/print/print/printEdit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.printEdit(java.lang.Long,org.springframework.ui.Model)
2020-03-05 10:12:16 -Mapped "{[/print/print/exprotPrint],methods=[GET]}" onto public void com.bootdo.print.controller.PrintController.exprotPrint(com.bootdo.print.vo.PrintVo,javax.servlet.http.HttpServletResponse)
2020-03-05 10:12:16 -Mapped "{[/print/print/batchPrint],methods=[POST]}" onto public java.util.List<com.bootdo.print.vo.PrintVo> com.bootdo.print.controller.PrintController.batchPrint(java.lang.Long[])
2020-03-05 10:12:16 -Mapped "{[/print/print/printMoney],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.printMoney()
2020-03-05 10:12:16 -Mapped "{[/print/print],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.Print()
2020-03-05 10:12:16 -Mapped "{[/print/print/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.edit(java.lang.Long,org.springframework.ui.Model)
2020-03-05 10:12:16 -Mapped "{[/system/sysDept/add/{pId}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.add(java.lang.Long,org.springframework.ui.Model)
2020-03-05 10:12:16 -Mapped "{[/system/sysDept/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.remove(java.lang.Long)
2020-03-05 10:12:16 -Mapped "{[/system/sysDept/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.remove(java.lang.Long[])
2020-03-05 10:12:16 -Mapped "{[/system/sysDept/update]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.update(com.bootdo.system.domain.DeptDO)
2020-03-05 10:12:16 -Mapped "{[/system/sysDept/list],methods=[GET]}" onto public java.util.List<com.bootdo.system.domain.DeptDO> com.bootdo.system.controller.DeptController.list()
2020-03-05 10:12:16 -Mapped "{[/system/sysDept/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.save(com.bootdo.system.domain.DeptDO)
2020-03-05 10:12:16 -Mapped "{[/system/sysDept/tree],methods=[GET]}" onto public com.bootdo.common.domain.Tree<com.bootdo.system.domain.DeptDO> com.bootdo.system.controller.DeptController.tree()
2020-03-05 10:12:16 -Mapped "{[/system/sysDept],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.dept()
2020-03-05 10:12:16 -Mapped "{[/system/sysDept/treeView],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.treeView(org.springframework.web.servlet.ModelAndView)
2020-03-05 10:12:16 -Mapped "{[/system/sysDept/edit/{deptId}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.edit(java.lang.Long,org.springframework.ui.Model)
2020-03-05 10:12:16 -Mapped "{[/index],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.index(org.springframework.ui.Model)
2020-03-05 10:12:16 -Mapped "{[/main],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.main()
2020-03-05 10:12:16 -Mapped "{[/ || ],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.welcome(org.springframework.ui.Model)
2020-03-05 10:12:16 -Mapped "{[/logout],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.logout()
2020-03-05 10:12:16 -Mapped "{[/getVerify],methods=[GET]}" onto public void com.bootdo.system.controller.LoginController.getVerify(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2020-03-05 10:12:16 -Mapped "{[/login],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.LoginController.ajaxLogin(java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest)
2020-03-05 10:12:16 -Mapped "{[/login],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.login(org.springframework.ui.Model)
2020-03-05 10:12:16 -Mapped "{[/sys/menu/add/{pId}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.MenuController.add(org.springframework.ui.Model,java.lang.Long)
2020-03-05 10:12:16 -Mapped "{[/sys/menu/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.MenuController.remove(java.lang.Long)
2020-03-05 10:12:16 -Mapped "{[/sys/menu/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.MenuController.update(com.bootdo.system.domain.MenuDO)
2020-03-05 10:12:16 -Mapped "{[/sys/menu/list]}" onto java.util.List<com.bootdo.system.domain.MenuDO> com.bootdo.system.controller.MenuController.list(java.util.Map<java.lang.String, java.lang.Object>)
2020-03-05 10:12:16 -Mapped "{[/sys/menu/save],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.MenuController.save(com.bootdo.system.domain.MenuDO)
2020-03-05 10:12:16 -Mapped "{[/sys/menu/tree/{roleId}],methods=[GET]}" onto com.bootdo.common.domain.Tree<com.bootdo.system.domain.MenuDO> com.bootdo.system.controller.MenuController.tree(java.lang.Long)
2020-03-05 10:12:16 -Mapped "{[/sys/menu/tree],methods=[GET]}" onto com.bootdo.common.domain.Tree<com.bootdo.system.domain.MenuDO> com.bootdo.system.controller.MenuController.tree()
2020-03-05 10:12:16 -Mapped "{[/sys/menu],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.MenuController.menu(org.springframework.ui.Model)
2020-03-05 10:12:16 -Mapped "{[/sys/menu/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.MenuController.edit(org.springframework.ui.Model,java.lang.Long)
2020-03-05 10:12:16 -Mapped "{[/sys/role/add],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.RoleController.add()
2020-03-05 10:12:16 -Mapped "{[/sys/role/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.update(com.bootdo.system.domain.RoleDO)
2020-03-05 10:12:16 -Mapped "{[/sys/role/list],methods=[GET]}" onto java.util.List<com.bootdo.system.domain.RoleDO> com.bootdo.system.controller.RoleController.list()
2020-03-05 10:12:16 -Mapped "{[/sys/role/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.save(java.lang.Long)
2020-03-05 10:12:16 -Mapped "{[/sys/role/save],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.save(com.bootdo.system.domain.RoleDO)
2020-03-05 10:12:16 -Mapped "{[/sys/role/batchRemove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.batchRemove(java.lang.Long[])
2020-03-05 10:12:16 -Mapped "{[/sys/role],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.RoleController.role()
2020-03-05 10:12:16 -Mapped "{[/sys/role/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.RoleController.edit(java.lang.Long,org.springframework.ui.Model)
2020-03-05 10:12:16 -Mapped "{[/sys/online/list]}" onto public java.util.List<com.bootdo.system.domain.UserOnline> com.bootdo.system.controller.SessionController.list()
2020-03-05 10:12:16 -Mapped "{[/sys/online],methods=[GET]}" onto public java.lang.String com.bootdo.system.controller.SessionController.online()
2020-03-05 10:12:16 -Mapped "{[/sys/online/forceLogout/{sessionId}]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.SessionController.forceLogout(java.lang.String,org.springframework.web.servlet.mvc.support.RedirectAttributes)
2020-03-05 10:12:16 -Mapped "{[/sys/online/sessionList]}" onto public java.util.Collection<org.apache.shiro.session.Session> com.bootdo.system.controller.SessionController.sessionList()
2020-03-05 10:12:16 -Mapped "{[/sys/user/exit],methods=[POST]}" onto boolean com.bootdo.system.controller.UserController.exit(java.util.Map<java.lang.String, java.lang.Object>)
2020-03-05 10:12:16 -Mapped "{[/sys/user/add],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.add(org.springframework.ui.Model)
2020-03-05 10:12:16 -Mapped "{[/sys/user/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.remove(java.lang.Long)
2020-03-05 10:12:16 -Mapped "{[/sys/user/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.update(com.bootdo.system.domain.UserDO)
2020-03-05 10:12:16 -Mapped "{[/sys/user/list],methods=[GET]}" onto com.bootdo.common.utils.PageUtils com.bootdo.system.controller.UserController.list(java.util.Map<java.lang.String, java.lang.Object>)
2020-03-05 10:12:16 -Mapped "{[/sys/user/save],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.save(com.bootdo.system.domain.UserDO)
2020-03-05 10:12:16 -Mapped "{[/sys/user/batchRemove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.batchRemove(java.lang.Long[])
2020-03-05 10:12:16 -Mapped "{[/sys/user/tree],methods=[GET]}" onto public com.bootdo.common.domain.Tree<com.bootdo.system.domain.DeptDO> com.bootdo.system.controller.UserController.tree()
2020-03-05 10:12:16 -Mapped "{[/sys/user],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.user(org.springframework.ui.Model)
2020-03-05 10:12:16 -Mapped "{[/sys/user/treeView],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.treeView()
2020-03-05 10:12:16 -Mapped "{[/sys/user/personal],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.personal(org.springframework.ui.Model)
2020-03-05 10:12:16 -Mapped "{[/sys/user/updatePeronal],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.updatePeronal(com.bootdo.system.domain.UserDO)
2020-03-05 10:12:16 -Mapped "{[/sys/user/uploadImg],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.uploadImg(org.springframework.web.multipart.MultipartFile,java.lang.String,javax.servlet.http.HttpServletRequest)
2020-03-05 10:12:16 -Mapped "{[/sys/user/resetPwd],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.resetPwd(com.bootdo.system.vo.UserVO)
2020-03-05 10:12:16 -Mapped "{[/sys/user/resetPwd/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.resetPwd(java.lang.Long,org.springframework.ui.Model)
2020-03-05 10:12:16 -Mapped "{[/sys/user/adminResetPwd],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.adminResetPwd(com.bootdo.system.vo.UserVO)
2020-03-05 10:12:16 -Mapped "{[/sys/user/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.edit(org.springframework.ui.Model,java.lang.Long)
2020-03-05 10:12:16 -Mapped "{[/file/downImport/{importType}],methods=[GET]}" onto public void com.bootdo.temple.controller.TempletController.downImport(javax.servlet.http.HttpServletResponse,java.lang.String)
2020-03-05 10:12:16 -Mapped "{[/water/water/add],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterController.add()
2020-03-05 10:12:16 -Mapped "{[/water/water/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterController.remove(java.lang.Long)
2020-03-05 10:12:16 -Mapped "{[/water/water/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterController.remove(java.lang.Long[])
2020-03-05 10:12:16 -Mapped "{[/water/water/update]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterController.update(com.bootdo.water.domain.WaterDO)
2020-03-05 10:12:16 -Mapped "{[/water/water/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.water.controller.WaterController.list(java.util.Map<java.lang.String, java.lang.Object>)
2020-03-05 10:12:16 -Mapped "{[/water/water/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterController.save(com.bootdo.water.domain.WaterDO)
2020-03-05 10:12:16 -Mapped "{[/water/water/exprotWater],methods=[GET]}" onto public void com.bootdo.water.controller.WaterController.exprotExcel(com.bootdo.water.vo.WaterVo,javax.servlet.http.HttpServletResponse)
2020-03-05 10:12:16 -Mapped "{[/water/water],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterController.Water()
2020-03-05 10:12:16 -Mapped "{[/water/water/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterController.edit(java.lang.Long,org.springframework.ui.Model)
2020-03-05 10:12:16 -Mapped "{[/water/waterInto/exprotWaterIntoExcel],methods=[GET]}" onto public void com.bootdo.water.controller.WaterIntoController.exprotExcel(com.bootdo.water.vo.WaterVo,javax.servlet.http.HttpServletResponse)
2020-03-05 10:12:16 -Mapped "{[/water/waterInto],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterIntoController.WaterInto()
2020-03-05 10:12:16 -Mapped "{[/water/waterInto/importWaterIntoExcel],methods=[POST]}" onto public java.lang.String com.bootdo.water.controller.WaterIntoController.importWaterIntoExcel(org.springframework.web.multipart.MultipartFile,com.bootdo.water.vo.WaterVo,javax.servlet.http.HttpServletResponse) throws java.lang.Exception
2020-03-05 10:12:16 -Mapped "{[/water/waterPrice/add],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterPriceController.add()
2020-03-05 10:12:16 -Mapped "{[/water/waterPrice/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterPriceController.remove(java.lang.Long)
2020-03-05 10:12:16 -Mapped "{[/water/waterPrice/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterPriceController.remove(java.lang.Long[])
2020-03-05 10:12:16 -Mapped "{[/water/waterPrice/update]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterPriceController.update(com.bootdo.water.domain.WaterPriceDO)
2020-03-05 10:12:16 -Mapped "{[/water/waterPrice/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.water.controller.WaterPriceController.list(java.util.Map<java.lang.String, java.lang.Object>)
2020-03-05 10:12:16 -Mapped "{[/water/waterPrice/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterPriceController.save(com.bootdo.water.domain.WaterPriceDO)
2020-03-05 10:12:16 -Mapped "{[/water/waterPrice],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterPriceController.WaterPrice()
2020-03-05 10:12:16 -Mapped "{[/water/waterPrice/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterPriceController.edit(java.lang.Long,org.springframework.ui.Model)
2020-03-05 10:12:16 -Mapped "{[/water/waterUpLoad],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterUpLoadController.WaterUpLoad()
2020-03-05 10:12:16 -Mapped "{[/water/waterUpLoad/createWaterExcel],methods=[POST]}" onto public java.lang.String com.bootdo.water.controller.WaterUpLoadController.createWaterExcel(com.bootdo.water.domain.WaterDO) throws java.lang.Exception
2020-03-05 10:12:16 -Mapped "{[/water/waterUpLoad/importWaterExcel]}" onto public java.lang.String com.bootdo.water.controller.WaterUpLoadController.importWaterExcel(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)
2020-03-05 10:12:16 -Mapped "{[/water/waterUpLoad/exprotWaterExcel],methods=[GET]}" onto public void com.bootdo.water.controller.WaterUpLoadController.exprotWaterExcel(com.bootdo.water.vo.WaterVo,javax.servlet.http.HttpServletResponse)
2020-03-05 10:12:16 -Mapped "{[/v2/api-docs],methods=[GET],produces=[application/json || application/hal+json]}" onto public org.springframework.http.ResponseEntity<springfox.documentation.spring.web.json.Json> springfox.documentation.swagger2.web.Swagger2Controller.getDocumentation(java.lang.String,javax.servlet.http.HttpServletRequest)
2020-03-05 10:12:16 -Mapped "{[/swagger-resources/configuration/security]}" onto org.springframework.http.ResponseEntity<springfox.documentation.swagger.web.SecurityConfiguration> springfox.documentation.swagger.web.ApiResourceController.securityConfiguration()
2020-03-05 10:12:16 -Mapped "{[/swagger-resources]}" onto org.springframework.http.ResponseEntity<java.util.List<springfox.documentation.swagger.web.SwaggerResource>> springfox.documentation.swagger.web.ApiResourceController.swaggerResources()
2020-03-05 10:12:16 -Mapped "{[/swagger-resources/configuration/ui]}" onto org.springframework.http.ResponseEntity<springfox.documentation.swagger.web.UiConfiguration> springfox.documentation.swagger.web.ApiResourceController.uiConfiguration()
2020-03-05 10:12:17 -Initializing ExecutorService  'messageBrokerTaskScheduler'
2020-03-05 10:12:17 -Mapped URL path [/endpointChat/**] onto handler of type [class org.springframework.web.socket.sockjs.support.SockJsHttpRequestHandler]
2020-03-05 10:12:17 -Initializing ExecutorService  'brokerChannelExecutor'
2020-03-05 10:12:19 -Mapped URL path [/**/favicon.ico] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2020-03-05 10:12:19 -Looking for @ControllerAdvice: org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@5778826f: startup date [Thu Mar 05 10:11:35 CST 2020]; root of context hierarchy
2020-03-05 10:12:19 -Mapped URL path [/webjars/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2020-03-05 10:12:19 -Mapped URL path [/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2020-03-05 10:12:19 -Detected @ExceptionHandler methods in BDExceptionHandler
2020-03-05 10:12:20 -[THYMELEAF][main] Template Mode 'LEGACYHTML5' is deprecated. Using Template Mode 'HTML' instead.
2020-03-05 10:12:24 -Registering beans for JMX exposure on startup
2020-03-05 10:12:24 -Bean with name 'dataSource' has been autodetected for JMX exposure
2020-03-05 10:12:24 -Located MBean 'dataSource': registering with JMX server as MBean [com.alibaba.druid.pool:name=dataSource,type=DruidDataSource]
2020-03-05 10:12:24 -Starting beans in phase 2147483647
2020-03-05 10:12:24 -Context refreshed
2020-03-05 10:12:25 -Found 1 custom documentation plugin(s)
2020-03-05 10:12:25 -Scanning for api listing references
2020-03-05 10:12:26 -Generating unique operation named: removeUsingPOST_1
2020-03-05 10:12:26 -Generating unique operation named: addUsingGET_1
2020-03-05 10:12:26 -Generating unique operation named: editUsingGET_1
2020-03-05 10:12:27 -Generating unique operation named: listUsingGET_1
2020-03-05 10:12:27 -Generating unique operation named: removeUsingPOST_2
2020-03-05 10:12:27 -Generating unique operation named: removeUsingPOST_3
2020-03-05 10:12:27 -Generating unique operation named: saveUsingPOST_1
2020-03-05 10:12:27 -Generating unique operation named: updateUsingGET_1
2020-03-05 10:12:27 -Generating unique operation named: updateUsingHEAD_1
2020-03-05 10:12:27 -Generating unique operation named: updateUsingPOST_1
2020-03-05 10:12:27 -Generating unique operation named: updateUsingPUT_1
2020-03-05 10:12:27 -Generating unique operation named: updateUsingPATCH_1
2020-03-05 10:12:27 -Generating unique operation named: updateUsingDELETE_1
2020-03-05 10:12:27 -Generating unique operation named: updateUsingOPTIONS_1
2020-03-05 10:12:27 -Generating unique operation named: updateUsingTRACE_1
2020-03-05 10:12:27 -Generating unique operation named: addUsingGET_2
2020-03-05 10:12:27 -Generating unique operation named: editUsingGET_2
2020-03-05 10:12:27 -Generating unique operation named: listUsingGET_2
2020-03-05 10:12:27 -Generating unique operation named: removeUsingPOST_4
2020-03-05 10:12:27 -Generating unique operation named: removeUsingPOST_5
2020-03-05 10:12:27 -Generating unique operation named: saveUsingPOST_2
2020-03-05 10:12:27 -Generating unique operation named: updateUsingPOST_2
2020-03-05 10:12:27 -Generating unique operation named: exprotExcelUsingGET_1
2020-03-05 10:12:27 -Generating unique operation named: addUsingGET_3
2020-03-05 10:12:27 -Generating unique operation named: editUsingGET_3
2020-03-05 10:12:27 -Generating unique operation named: listUsingGET_3
2020-03-05 10:12:27 -Generating unique operation named: removeUsingPOST_6
2020-03-05 10:12:27 -Generating unique operation named: removeUsingPOST_7
2020-03-05 10:12:27 -Generating unique operation named: saveUsingPOST_3
2020-03-05 10:12:27 -Generating unique operation named: updateUsingGET_2
2020-03-05 10:12:27 -Generating unique operation named: updateUsingHEAD_2
2020-03-05 10:12:27 -Generating unique operation named: updateUsingPOST_3
2020-03-05 10:12:27 -Generating unique operation named: updateUsingPUT_2
2020-03-05 10:12:27 -Generating unique operation named: updateUsingPATCH_2
2020-03-05 10:12:27 -Generating unique operation named: updateUsingDELETE_2
2020-03-05 10:12:27 -Generating unique operation named: updateUsingOPTIONS_2
2020-03-05 10:12:27 -Generating unique operation named: updateUsingTRACE_2
2020-03-05 10:12:27 -Generating unique operation named: addUsingGET_4
2020-03-05 10:12:27 -Generating unique operation named: editUsingGET_4
2020-03-05 10:12:27 -Generating unique operation named: listUsingGET_4
2020-03-05 10:12:27 -Generating unique operation named: removeUsingPOST_8
2020-03-05 10:12:27 -Generating unique operation named: removeUsingPOST_9
2020-03-05 10:12:27 -Generating unique operation named: saveUsingPOST_4
2020-03-05 10:12:27 -Generating unique operation named: updateUsingGET_3
2020-03-05 10:12:27 -Generating unique operation named: updateUsingHEAD_3
2020-03-05 10:12:27 -Generating unique operation named: updateUsingPOST_4
2020-03-05 10:12:27 -Generating unique operation named: updateUsingPUT_3
2020-03-05 10:12:27 -Generating unique operation named: updateUsingPATCH_3
2020-03-05 10:12:27 -Generating unique operation named: updateUsingDELETE_3
2020-03-05 10:12:27 -Generating unique operation named: updateUsingOPTIONS_3
2020-03-05 10:12:27 -Generating unique operation named: updateUsingTRACE_3
2020-03-05 10:12:27 -Generating unique operation named: ElecUsingGET_1
2020-03-05 10:12:27 -Generating unique operation named: addUsingGET_5
2020-03-05 10:12:27 -Generating unique operation named: editUsingGET_5
2020-03-05 10:12:27 -Generating unique operation named: listUsingGET_5
2020-03-05 10:12:27 -Generating unique operation named: removeUsingPOST_10
2020-03-05 10:12:27 -Generating unique operation named: removeUsingPOST_11
2020-03-05 10:12:27 -Generating unique operation named: saveUsingPOST_5
2020-03-05 10:12:27 -Generating unique operation named: updateUsingGET_4
2020-03-05 10:12:27 -Generating unique operation named: updateUsingHEAD_4
2020-03-05 10:12:27 -Generating unique operation named: updateUsingPOST_5
2020-03-05 10:12:27 -Generating unique operation named: updateUsingPUT_4
2020-03-05 10:12:27 -Generating unique operation named: updateUsingPATCH_4
2020-03-05 10:12:27 -Generating unique operation named: updateUsingDELETE_4
2020-03-05 10:12:27 -Generating unique operation named: updateUsingOPTIONS_4
2020-03-05 10:12:27 -Generating unique operation named: updateUsingTRACE_4
2020-03-05 10:12:28 -Generating unique operation named: editUsingGET_6
2020-03-05 10:12:28 -Generating unique operation named: listUsingGET_6
2020-03-05 10:12:28 -Generating unique operation named: updateUsingPOST_6
2020-03-05 10:12:28 -Generating unique operation named: addUsingGET_6
2020-03-05 10:12:28 -Generating unique operation named: editUsingGET_7
2020-03-05 10:12:28 -Generating unique operation named: exprotExcelUsingGET_2
2020-03-05 10:12:28 -Generating unique operation named: listUsingGET_7
2020-03-05 10:12:28 -Generating unique operation named: removeUsingPOST_12
2020-03-05 10:12:28 -Generating unique operation named: removeUsingPOST_13
2020-03-05 10:12:28 -Generating unique operation named: saveUsingPOST_6
2020-03-05 10:12:28 -Generating unique operation named: updateUsingGET_5
2020-03-05 10:12:28 -Generating unique operation named: updateUsingHEAD_5
2020-03-05 10:12:28 -Generating unique operation named: updateUsingPOST_7
2020-03-05 10:12:28 -Generating unique operation named: updateUsingPUT_5
2020-03-05 10:12:28 -Generating unique operation named: updateUsingPATCH_5
2020-03-05 10:12:28 -Generating unique operation named: updateUsingDELETE_5
2020-03-05 10:12:28 -Generating unique operation named: updateUsingOPTIONS_5
2020-03-05 10:12:28 -Generating unique operation named: updateUsingTRACE_5
2020-03-05 10:12:28 -Generating unique operation named: exprotExcelUsingGET_3
2020-03-05 10:12:28 -Generating unique operation named: addUsingGET_7
2020-03-05 10:12:28 -Generating unique operation named: editUsingGET_8
2020-03-05 10:12:28 -Generating unique operation named: listUsingGET_8
2020-03-05 10:12:28 -Generating unique operation named: removeUsingPOST_14
2020-03-05 10:12:28 -Generating unique operation named: removeUsingPOST_15
2020-03-05 10:12:28 -Generating unique operation named: saveUsingPOST_7
2020-03-05 10:12:28 -Generating unique operation named: updateUsingGET_6
2020-03-05 10:12:28 -Generating unique operation named: updateUsingHEAD_6
2020-03-05 10:12:28 -Generating unique operation named: updateUsingPOST_8
2020-03-05 10:12:28 -Generating unique operation named: updateUsingPUT_6
2020-03-05 10:12:28 -Generating unique operation named: updateUsingPATCH_6
2020-03-05 10:12:28 -Generating unique operation named: updateUsingDELETE_6
2020-03-05 10:12:28 -Generating unique operation named: updateUsingOPTIONS_6
2020-03-05 10:12:28 -Generating unique operation named: updateUsingTRACE_6
2020-03-05 10:12:28 -Generating unique operation named: addUsingGET_8
2020-03-05 10:12:28 -Generating unique operation named: editUsingGET_9
2020-03-05 10:12:28 -Generating unique operation named: listUsingGET_9
2020-03-05 10:12:28 -Generating unique operation named: removeUsingPOST_16
2020-03-05 10:12:28 -Generating unique operation named: removeUsingPOST_17
2020-03-05 10:12:28 -Generating unique operation named: saveUsingPOST_8
2020-03-05 10:12:28 -Generating unique operation named: updateUsingGET_7
2020-03-05 10:12:28 -Generating unique operation named: updateUsingHEAD_7
2020-03-05 10:12:28 -Generating unique operation named: updateUsingPOST_9
2020-03-05 10:12:28 -Generating unique operation named: updateUsingPUT_7
2020-03-05 10:12:28 -Generating unique operation named: updateUsingPATCH_7
2020-03-05 10:12:28 -Generating unique operation named: updateUsingDELETE_7
2020-03-05 10:12:28 -Generating unique operation named: updateUsingOPTIONS_7
2020-03-05 10:12:28 -Generating unique operation named: updateUsingTRACE_7
2020-03-05 10:12:28 -Generating unique operation named: addUsingGET_9
2020-03-05 10:12:28 -Generating unique operation named: editUsingGET_10
2020-03-05 10:12:28 -Generating unique operation named: infoUsingGET_1
2020-03-05 10:12:28 -Generating unique operation named: infoUsingHEAD_1
2020-03-05 10:12:28 -Generating unique operation named: infoUsingPOST_1
2020-03-05 10:12:28 -Generating unique operation named: infoUsingPUT_1
2020-03-05 10:12:28 -Generating unique operation named: infoUsingPATCH_1
2020-03-05 10:12:28 -Generating unique operation named: infoUsingDELETE_1
2020-03-05 10:12:28 -Generating unique operation named: infoUsingOPTIONS_1
2020-03-05 10:12:28 -Generating unique operation named: infoUsingTRACE_1
2020-03-05 10:12:28 -Generating unique operation named: listUsingGET_10
2020-03-05 10:12:28 -Generating unique operation named: removeUsingPOST_18
2020-03-05 10:12:28 -Generating unique operation named: removeUsingPOST_19
2020-03-05 10:12:28 -Generating unique operation named: saveUsingPOST_9
2020-03-05 10:12:28 -Generating unique operation named: updateUsingPOST_10
2020-03-05 10:12:28 -Generating unique operation named: listUsingGET_11
2020-03-05 10:12:28 -Generating unique operation named: removeUsingPOST_20
2020-03-05 10:12:28 -Generating unique operation named: welcomeUsingGET_1
2020-03-05 10:12:28 -Generating unique operation named: addUsingGET_10
2020-03-05 10:12:28 -Generating unique operation named: editUsingGET_11
2020-03-05 10:12:28 -Generating unique operation named: listUsingGET_12
2020-03-05 10:12:29 -Generating unique operation named: removeUsingPOST_21
2020-03-05 10:12:29 -Generating unique operation named: saveUsingPOST_10
2020-03-05 10:12:29 -Generating unique operation named: treeUsingGET_1
2020-03-05 10:12:29 -Generating unique operation named: treeUsingGET_2
2020-03-05 10:12:29 -Generating unique operation named: updateUsingPOST_11
2020-03-05 10:12:29 -Generating unique operation named: addUsingGET_11
2020-03-05 10:12:29 -Generating unique operation named: editUsingGET_12
2020-03-05 10:12:29 -Generating unique operation named: listUsingGET_13
2020-03-05 10:12:29 -Generating unique operation named: removeUsingPOST_22
2020-03-05 10:12:29 -Generating unique operation named: removeUsingPOST_23
2020-03-05 10:12:29 -Generating unique operation named: updateUsingPOST_12
2020-03-05 10:12:29 -Generating unique operation named: addUsingGET_12
2020-03-05 10:12:29 -Generating unique operation named: editUsingGET_13
2020-03-05 10:12:29 -Generating unique operation named: listUsingGET_14
2020-03-05 10:12:29 -Generating unique operation named: removeUsingPOST_24
2020-03-05 10:12:29 -Generating unique operation named: removeUsingPOST_25
2020-03-05 10:12:29 -Generating unique operation named: saveUsingPOST_11
2020-03-05 10:12:29 -Generating unique operation named: updateUsingGET_8
2020-03-05 10:12:29 -Generating unique operation named: updateUsingHEAD_8
2020-03-05 10:12:29 -Generating unique operation named: updateUsingPOST_13
2020-03-05 10:12:29 -Generating unique operation named: updateUsingPUT_8
2020-03-05 10:12:29 -Generating unique operation named: updateUsingPATCH_8
2020-03-05 10:12:29 -Generating unique operation named: updateUsingDELETE_8
2020-03-05 10:12:29 -Generating unique operation named: updateUsingOPTIONS_8
2020-03-05 10:12:29 -Generating unique operation named: updateUsingTRACE_8
2020-03-05 10:12:29 -Generating unique operation named: addUsingGET_13
2020-03-05 10:12:29 -Generating unique operation named: batchRemoveUsingPOST_1
2020-03-05 10:12:29 -Generating unique operation named: editUsingGET_14
2020-03-05 10:12:29 -Generating unique operation named: listUsingGET_15
2020-03-05 10:12:29 -Generating unique operation named: printEditUsingGET_1
2020-03-05 10:12:29 -Generating unique operation named: removeUsingPOST_26
2020-03-05 10:12:29 -Generating unique operation named: saveUsingPOST_12
2020-03-05 10:12:29 -Generating unique operation named: updateUsingGET_9
2020-03-05 10:12:29 -Generating unique operation named: updateUsingHEAD_9
2020-03-05 10:12:29 -Generating unique operation named: updateUsingPOST_14
2020-03-05 10:12:29 -Generating unique operation named: updateUsingPUT_9
2020-03-05 10:12:29 -Generating unique operation named: updateUsingPATCH_9
2020-03-05 10:12:29 -Generating unique operation named: updateUsingDELETE_9
2020-03-05 10:12:29 -Generating unique operation named: updateUsingOPTIONS_9
2020-03-05 10:12:29 -Generating unique operation named: updateUsingTRACE_9
2020-03-05 10:12:29 -Generating unique operation named: addUsingGET_14
2020-03-05 10:12:29 -Generating unique operation named: batchRemoveUsingPOST_2
2020-03-05 10:12:29 -Generating unique operation named: editUsingGET_15
2020-03-05 10:12:29 -Generating unique operation named: listUsingGET_16
2020-03-05 10:12:29 -Generating unique operation named: saveUsingPOST_13
2020-03-05 10:12:29 -Generating unique operation named: saveUsingPOST_14
2020-03-05 10:12:29 -Generating unique operation named: updateUsingPOST_15
2020-03-05 10:12:30 -Generating unique operation named: listUsingGET_17
2020-03-05 10:12:30 -Generating unique operation named: listUsingHEAD_1
2020-03-05 10:12:30 -Generating unique operation named: listUsingPOST_1
2020-03-05 10:12:30 -Generating unique operation named: listUsingPUT_1
2020-03-05 10:12:30 -Generating unique operation named: listUsingPATCH_1
2020-03-05 10:12:30 -Generating unique operation named: listUsingDELETE_1
2020-03-05 10:12:30 -Generating unique operation named: listUsingOPTIONS_1
2020-03-05 10:12:30 -Generating unique operation named: listUsingTRACE_1
2020-03-05 10:12:30 -Generating unique operation named: countDDUsingGET_1
2020-03-05 10:12:30 -Generating unique operation named: exportDDUsingGET_1
2020-03-05 10:12:30 -Generating unique operation named: exportElecYYUsingGET_1
2020-03-05 10:12:30 -Generating unique operation named: addUsingGET_15
2020-03-05 10:12:30 -Generating unique operation named: batchRemoveUsingPOST_3
2020-03-05 10:12:30 -Generating unique operation named: editUsingGET_16
2020-03-05 10:12:30 -Generating unique operation named: listUsingGET_18
2020-03-05 10:12:30 -Generating unique operation named: removeUsingPOST_27
2020-03-05 10:12:30 -Generating unique operation named: saveUsingPOST_15
2020-03-05 10:12:30 -Generating unique operation named: treeUsingGET_3
2020-03-05 10:12:30 -Generating unique operation named: treeViewUsingGET_1
2020-03-05 10:12:30 -Generating unique operation named: updateUsingPOST_16
2020-03-05 10:12:30 -Generating unique operation named: addUsingGET_16
2020-03-05 10:12:30 -Generating unique operation named: editUsingGET_17
2020-03-05 10:12:30 -Generating unique operation named: exprotExcelUsingGET_4
2020-03-05 10:12:30 -Generating unique operation named: listUsingGET_19
2020-03-05 10:12:30 -Generating unique operation named: removeUsingPOST_28
2020-03-05 10:12:30 -Generating unique operation named: removeUsingPOST_29
2020-03-05 10:12:30 -Generating unique operation named: saveUsingPOST_16
2020-03-05 10:12:30 -Generating unique operation named: updateUsingGET_10
2020-03-05 10:12:30 -Generating unique operation named: updateUsingHEAD_10
2020-03-05 10:12:30 -Generating unique operation named: updateUsingPOST_17
2020-03-05 10:12:30 -Generating unique operation named: updateUsingPUT_10
2020-03-05 10:12:30 -Generating unique operation named: updateUsingPATCH_10
2020-03-05 10:12:30 -Generating unique operation named: updateUsingDELETE_10
2020-03-05 10:12:30 -Generating unique operation named: updateUsingOPTIONS_10
2020-03-05 10:12:30 -Generating unique operation named: updateUsingTRACE_10
2020-03-05 10:12:30 -Generating unique operation named: exprotExcelUsingGET_5
2020-03-05 10:12:30 -Generating unique operation named: addUsingGET_17
2020-03-05 10:12:30 -Generating unique operation named: editUsingGET_18
2020-03-05 10:12:30 -Generating unique operation named: listUsingGET_20
2020-03-05 10:12:30 -Generating unique operation named: removeUsingPOST_30
2020-03-05 10:12:30 -Generating unique operation named: removeUsingPOST_31
2020-03-05 10:12:30 -Generating unique operation named: saveUsingPOST_17
2020-03-05 10:12:30 -Generating unique operation named: updateUsingGET_11
2020-03-05 10:12:30 -Generating unique operation named: updateUsingHEAD_11
2020-03-05 10:12:30 -Generating unique operation named: updateUsingPOST_18
2020-03-05 10:12:30 -Generating unique operation named: updateUsingPUT_11
2020-03-05 10:12:30 -Generating unique operation named: updateUsingPATCH_11
2020-03-05 10:12:30 -Generating unique operation named: updateUsingDELETE_11
2020-03-05 10:12:30 -Generating unique operation named: updateUsingOPTIONS_11
2020-03-05 10:12:30 -Generating unique operation named: updateUsingTRACE_11
2020-03-05 10:12:30 -Generating unique operation named: addUsingGET_18
2020-03-05 10:12:30 -Generating unique operation named: editUsingGET_19
2020-03-05 10:12:30 -Generating unique operation named: listUsingGET_21
2020-03-05 10:12:30 -Generating unique operation named: removeUsingPOST_32
2020-03-05 10:12:30 -Generating unique operation named: removeUsingPOST_33
2020-03-05 10:12:31 -Generating unique operation named: saveUsingPOST_18
2020-03-05 10:12:31 -Generating unique operation named: updateUsingGET_12
2020-03-05 10:12:31 -Generating unique operation named: updateUsingHEAD_12
2020-03-05 10:12:31 -Generating unique operation named: updateUsingPOST_19
2020-03-05 10:12:31 -Generating unique operation named: updateUsingPUT_12
2020-03-05 10:12:31 -Generating unique operation named: updateUsingPATCH_12
2020-03-05 10:12:31 -Generating unique operation named: updateUsingDELETE_12
2020-03-05 10:12:31 -Generating unique operation named: updateUsingOPTIONS_12
2020-03-05 10:12:31 -Generating unique operation named: updateUsingTRACE_12
2020-03-05 10:12:31 -Starting Quartz Scheduler now
2020-03-05 10:12:31 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED started.
2020-03-05 10:12:31 -Starting...
2020-03-05 10:12:31 -BrokerAvailabilityEvent[available=true, SimpleBrokerMessageHandler [DefaultSubscriptionRegistry[cache[0 destination(s)], registry[0 sessions]]]]
2020-03-05 10:12:31 -Started.
2020-03-05 10:12:31 -Starting ProtocolHandler ["http-nio-8081"]
2020-03-05 10:12:31 -Using a shared selector for servlet write/read
2020-03-05 10:12:31 -Tomcat started on port(s): 8081 (http) with context path ''
2020-03-05 10:12:31 -Started BootdoApplication in 64.681 seconds (JVM running for 71.088)
2020-03-05 10:12:31 -==>  Preparing: select `id`,`cron_expression`,`method_name`,`is_concurrent`,`description`,`update_by`,`bean_class`,`create_date`,`job_status`,`job_group`,`update_date`,`create_by`,`spring_bean`,`job_name` from sys_task order by id desc 
2020-03-05 10:12:32 -==> Parameters: 
2020-03-05 10:12:32 -<==      Total: 1
2020-03-05 10:13:17 -WebSocketSession[0 current WS(0)-HttpStream(0)-HttpPoll(0), 0 total, 0 closed abnormally (0 connect failure, 0 send limit, 0 transport error)], stompSubProtocol[processed CONNECT(0)-CONNECTED(0)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], outboundChannelpool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], sockJsScheduler[pool size = 1, active threads = 1, queued tasks = 0, completed tasks = 0]
2020-03-05 10:17:29 -Initializing Spring FrameworkServlet 'dispatcherServlet'
2020-03-05 10:17:29 -FrameworkServlet 'dispatcherServlet': initialization started
2020-03-05 10:17:29 -FrameworkServlet 'dispatcherServlet': initialization completed in 103 ms
2020-03-05 10:17:30 -Enabling session validation scheduler...
2020-03-05 10:17:30 -请求地址 : http://localhost:8081/login;JSESSIONID=ffbd7bb0-e765-428b-95d4-88814b81e71d
2020-03-05 10:17:30 -HTTP METHOD : GET
2020-03-05 10:17:30 -CLASS_METHOD : com.bootdo.system.controller.LoginController.login
2020-03-05 10:17:30 -参数 : [{}]
2020-03-05 10:17:30 -耗时 : 4
2020-03-05 10:17:30 -返回值 : login
2020-03-05 10:17:35 -请求地址 : http://localhost:8081/getVerify
2020-03-05 10:17:35 -HTTP METHOD : GET
2020-03-05 10:17:35 -CLASS_METHOD : com.bootdo.system.controller.LoginController.getVerify
2020-03-05 10:17:35 -参数 : [org.apache.shiro.web.servlet.ShiroHttpServletRequest@2b31ac0e, org.apache.shiro.web.servlet.ShiroHttpServletResponse@4fb4e1d4]
2020-03-05 10:17:44 -9924
2020-03-05 10:17:44 -耗时 : 8703
2020-03-05 10:17:44 -返回值 : null
2020-03-05 10:17:45 -请求地址 : http://localhost:8081/login
2020-03-05 10:17:45 -HTTP METHOD : GET
2020-03-05 10:17:45 -CLASS_METHOD : com.bootdo.system.controller.LoginController.login
2020-03-05 10:17:45 -参数 : [{}]
2020-03-05 10:17:45 -耗时 : 0
2020-03-05 10:17:45 -返回值 : login
2020-03-05 10:18:02 -请求地址 : http://localhost:8081/login
2020-03-05 10:18:02 -HTTP METHOD : POST
2020-03-05 10:18:02 -CLASS_METHOD : com.bootdo.system.controller.LoginController.ajaxLogin
2020-03-05 10:18:02 -参数 : [admin, 111111, 9924, org.apache.shiro.web.servlet.ShiroHttpServletRequest@444bcb41]
2020-03-05 10:18:02 -==>  Preparing: select `user_id`,`username`,`name`,`password`,`dept_id`,`email`,`mobile`,`status`,`user_id_create`,`gmt_create`,`gmt_modified`,`sex`,`birth`,`pic_id`,`live_address`,`hobby`,`province`,`city`,`district` from sys_user WHERE username = ? order by user_id desc 
2020-03-05 10:18:02 -==> Parameters: admin(String)
2020-03-05 10:18:03 -<==      Total: 1
2020-03-05 10:18:03 -耗时 : 1137
2020-03-05 10:18:03 -返回值 : {msg=操作成功, code=0}
2020-03-05 10:18:03 -More than one TaskExecutor bean found within the context, and none is named 'taskExecutor'. Mark one of them as primary or name it 'taskExecutor' (possibly as an alias) in order to use it for async processing: [clientInboundChannelExecutor, clientOutboundChannelExecutor, brokerChannelExecutor, messageBrokerTaskScheduler]
2020-03-05 10:18:03 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-03-05 10:18:03 -==> Parameters: 1(Long), admin(String), 登录(String), 1138(Integer), com.bootdo.system.controller.LoginController.ajaxLogin()(String), null, 127.0.0.1(String), 2020-03-05 10:18:03.493(Timestamp)
2020-03-05 10:18:04 -<==    Updates: 1
2020-03-05 10:18:04 -请求地址 : http://localhost:8081/index
2020-03-05 10:18:04 -HTTP METHOD : GET
2020-03-05 10:18:04 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2020-03-05 10:18:04 -参数 : [{}]
2020-03-05 10:18:04 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2020-03-05 10:18:04 -==> Parameters: 1(Long)
2020-03-05 10:18:05 -<==      Total: 50
2020-03-05 10:18:05 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2020-03-05 10:18:05 -==> Parameters: 138(Long)
2020-03-05 10:18:05 -<==      Total: 1
2020-03-05 10:18:05 -耗时 : 1111
2020-03-05 10:18:05 -返回值 : index_v1
2020-03-05 10:18:05 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-03-05 10:18:05 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 1111(Integer), com.bootdo.system.controller.LoginController.index()(String), {"menus":[{"attributes":{"icon":"fa fa-money","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-money","url":"/moneyList/moneyList"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"102","parentId":"106","text":"现金缴费"},{"attributes":{"icon":"fa fa-book","url":"/moneyLog/elecLog"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"107","parentId":"106","text":"缴费记录"},{"attributes":{"icon":"fa fa-image","url":"/moneyList/moneyWZ"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"164","parentId":"106","text":"乌镇管理"}],"hasChildren":true,"hasParent":false,"id":"106","parentId":"0","text":"收费管理"},{"attributes":{"icon":"fa fa-lightbulb-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/elec/elec"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"121","parentId":"103","text":"电费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"elec/elecInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"122","parentId":"103","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"elec/elecUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"123","parentId":"103","text":"电表上传"},{"attributes":{"icon":"fa fa-cc","url":"/elec/elecPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"124","parentId":"103","text":"电价管理"}],"hasChildren":true,"hasParent":false,"id":"103","parentId":"0","text":"电费管理"},{"attributes":{"icon":"fa fa-tint","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/water/water"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"117","parentId":"105","text":"水费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"water/waterInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"118","parentId":"105","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"water/waterUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"119","parentId":"105","text":"水费生成"},{"attributes":{"icon":"fa fa-cc","url":"/water/waterPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"120","parentId":"105","text":"水价管理"}],"hasChildren":true,"hasParent":false,"id":"105","parentId":"0","text":"水费管理"},{"attributes":{"icon":"fa fa-fire","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/heat/heat"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"113","parentId":"104","text":"暖费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"heat/heatInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"114","parentId":"104","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"heat/heatUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"115","parentId":"104","text":"暖费生成"},{"attributes":{"icon":"","url":"/heat/heatPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"116","parentId":"104","text":"暖价管理"}],"hasChildren":true,"hasParent":false,"id":"104","parentId":"0","text":"暖费管理"},{"attributes":{"icon":"fa fa-vcard-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-bomb","url":"/print/print"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"149","parentId":"108","text":"票据记录"}],"hasChildren":true,"hasParent":false,"id":"108","parentId":"0","text":"票据管理"},{"attributes":{"icon":"fa fa-bar-chart","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-area-chart","url":"/chart/graph_echarts.html"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","text":"百度chart"},{"attributes":{"icon":"fa fa-sun-o","url":"charts/countDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"109","parentId":"97","text":"日统计报表"},{"attributes":{"icon":"fa fa-calendar","url":"charts/tableDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"161","parentId":"97","text":"日统计表格"},{"attributes":{"icon":"fa fa-registered","url":"charts/countMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"110","parentId":"97","text":"月统计报表"},{"attributes":{"icon":"fa fa-building-o","url":"charts/tableElecMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"162","parentId":"97","text":"月统计表格"},{"attributes":{"icon":"fa fa-support","url":"charts/countYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"111","parentId":"97","text":"年统计报表"},{"attributes":{"icon":"fa fa-book","url":"charts/tableElecYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"163","parentId":"97","text":"年统计表格"},{"attributes":{"icon":"fa fa-money","url":"charts/countOwe"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"155","(String), 127.0.0.1(String), 2020-03-05 10:18:05.783(Timestamp)
2020-03-05 10:18:06 -请求地址 : http://localhost:8081/main
2020-03-05 10:18:06 -HTTP METHOD : GET
2020-03-05 10:18:06 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2020-03-05 10:18:06 -参数 : []
2020-03-05 10:18:06 -耗时 : 0
2020-03-05 10:18:06 -返回值 : main
2020-03-05 10:18:07 -<==    Updates: 1
2020-03-05 10:18:08 -请求地址 : http://localhost:8081/oa/notify/message
2020-03-05 10:18:08 -HTTP METHOD : GET
2020-03-05 10:18:08 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2020-03-05 10:18:08 -参数 : []
2020-03-05 10:18:08 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2020-03-05 10:18:08 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2020-03-05 10:18:08 -请求地址 : http://localhost:8081/main
2020-03-05 10:18:08 -HTTP METHOD : GET
2020-03-05 10:18:08 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2020-03-05 10:18:08 -参数 : []
2020-03-05 10:18:08 -耗时 : 0
2020-03-05 10:18:08 -返回值 : main
2020-03-05 10:18:09 -<==      Total: 0
2020-03-05 10:18:09 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2020-03-05 10:18:09 -==> Parameters: 1(Long), 0(String)
2020-03-05 10:18:09 -<==      Total: 1
2020-03-05 10:18:09 -耗时 : 1142
2020-03-05 10:18:09 -返回值 : com.bootdo.common.utils.PageUtils@c22077e
2020-03-05 10:18:21 -==>  Preparing: select distinct m.perms from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id = ur.role_id where ur.user_id = ? 
2020-03-05 10:18:21 -==> Parameters: 1(Long)
2020-03-05 10:18:21 -<==      Total: 94
2020-03-05 10:18:21 -请求地址 : http://localhost:8081/elec/elec
2020-03-05 10:18:21 -HTTP METHOD : GET
2020-03-05 10:18:21 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.Elec
2020-03-05 10:18:21 -参数 : []
2020-03-05 10:18:21 -耗时 : 1
2020-03-05 10:18:21 -返回值 : elec/elec/elec
2020-03-05 10:18:22 -请求地址 : http://localhost:8081/elec/elecInto
2020-03-05 10:18:22 -HTTP METHOD : GET
2020-03-05 10:18:22 -CLASS_METHOD : com.bootdo.elec.controller.ElecIntoController.ElecInto
2020-03-05 10:18:22 -参数 : []
2020-03-05 10:18:22 -耗时 : 1
2020-03-05 10:18:22 -返回值 : elec/elecInto/elecInto
2020-03-05 10:18:23 -请求地址 : http://localhost:8081/common/dict/list/userType
2020-03-05 10:18:23 -HTTP METHOD : GET
2020-03-05 10:18:23 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2020-03-05 10:18:23 -参数 : [userType]
2020-03-05 10:18:23 -请求地址 : http://localhost:8081/common/dict/list/elecType
2020-03-05 10:18:23 -HTTP METHOD : GET
2020-03-05 10:18:23 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2020-03-05 10:18:23 -参数 : [elecType]
2020-03-05 10:18:23 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2020-03-05 10:18:23 -==> Parameters: userType(String)
2020-03-05 10:18:24 -<==      Total: 4
2020-03-05 10:18:24 -耗时 : 323
2020-03-05 10:18:24 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2020-03-05 10:18:24 -返回值 : [DictDO{id=145, name='银行转账', value='D', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=144, name='微信支付', value='C', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2020-03-05 10:18:24 -==> Parameters: elecType(String)
2020-03-05 10:18:24 -<==      Total: 11
2020-03-05 10:18:24 -耗时 : 328
2020-03-05 10:18:24 -返回值 : [DictDO{id=180, name='矿民用', value='1', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=179, name='矿商业', value='2', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=178, name='矿工业1', value='3', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=177, name='矿工业2', value='4', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=176, name='矿工业3', value='5', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=175, name='乌民用', value='6', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=174, name='乌商用', value='7', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=173, name='乌工业', value='8', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=172, name='煤民用', value='9', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=171, name='煤商业', value='10', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=170, name='政府用电', value='11', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2020-03-05 10:18:24 -请求地址 : http://localhost:8081/elec/elec/list
2020-03-05 10:18:24 -HTTP METHOD : GET
2020-03-05 10:18:24 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.list
2020-03-05 10:18:24 -参数 : [{limit=10, offset=0, userType=, elecType=, userOrg=, userId=, createTime=, queryType=1}, com.bootdo.elec.domain.ElecDO@7018f599]
2020-03-05 10:18:24 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, `user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec order by id asc limit ?, ? 
2020-03-05 10:18:24 -==> Parameters: 0(Integer), 10(Integer)
2020-03-05 10:18:24 -<==      Total: 10
2020-03-05 10:18:24 -==>  Preparing: select count(*) from elec 
2020-03-05 10:18:24 -==> Parameters: 
2020-03-05 10:18:25 -<==      Total: 1
2020-03-05 10:18:25 -耗时 : 1412
2020-03-05 10:18:25 -返回值 : com.bootdo.common.utils.PageUtils@7b4de1f9
2020-03-05 10:18:30 -请求地址 : http://localhost:8081/system/sysDept/treeView
2020-03-05 10:18:30 -HTTP METHOD : GET
2020-03-05 10:18:30 -CLASS_METHOD : com.bootdo.system.controller.DeptController.treeView
2020-03-05 10:18:30 -参数 : [ModelAndView: materialized View is [null]; model is null]
2020-03-05 10:18:30 -耗时 : 1
2020-03-05 10:18:30 -返回值 : system/dept/deptTree
2020-03-05 10:18:30 -请求地址 : http://localhost:8081/system/sysDept/tree
2020-03-05 10:18:30 -HTTP METHOD : GET
2020-03-05 10:18:30 -CLASS_METHOD : com.bootdo.system.controller.DeptController.tree
2020-03-05 10:18:30 -参数 : []
2020-03-05 10:18:30 -==>  Preparing: select `dept_id`,`parent_id`,`name`,`order_num`,`del_flag` from sys_dept order by dept_id desc 
2020-03-05 10:18:30 -==> Parameters: 
2020-03-05 10:18:30 -<==      Total: 3
2020-03-05 10:18:30 -耗时 : 23
2020-03-05 10:18:30 -返回值 : {"checked":false,"children":[{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"3","parentId":"1","state":{"opened":true},"text":"牙星"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"2","parentId":"1","state":{"opened":true},"text":"五九"}],"hasChildren":true,"hasParent":false,"id":"1","parentId":"0","state":{"opened":true},"text":"总公司"}
2020-03-05 10:18:46 -请求地址 : http://localhost:8081/elec/elec
2020-03-05 10:18:46 -HTTP METHOD : GET
2020-03-05 10:18:46 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.Elec
2020-03-05 10:18:46 -参数 : []
2020-03-05 10:18:46 -耗时 : 1
2020-03-05 10:18:46 -返回值 : elec/elec/elec
2020-03-05 10:18:46 -请求地址 : http://localhost:8081/common/dict/list/userType
2020-03-05 10:18:46 -HTTP METHOD : GET
2020-03-05 10:18:46 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2020-03-05 10:18:46 -参数 : [userType]
2020-03-05 10:18:46 -请求地址 : http://localhost:8081/common/dict/list/elecType
2020-03-05 10:18:46 -HTTP METHOD : GET
2020-03-05 10:18:46 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2020-03-05 10:18:46 -参数 : [elecType]
2020-03-05 10:18:46 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2020-03-05 10:18:46 -==> Parameters: userType(String)
2020-03-05 10:18:46 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2020-03-05 10:18:46 -==> Parameters: elecType(String)
2020-03-05 10:18:46 -<==      Total: 11
2020-03-05 10:18:46 -耗时 : 23
2020-03-05 10:18:46 -返回值 : [DictDO{id=180, name='矿民用', value='1', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=179, name='矿商业', value='2', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=178, name='矿工业1', value='3', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=177, name='矿工业2', value='4', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=176, name='矿工业3', value='5', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=175, name='乌民用', value='6', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=174, name='乌商用', value='7', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=173, name='乌工业', value='8', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=172, name='煤民用', value='9', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=171, name='煤商业', value='10', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=170, name='政府用电', value='11', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2020-03-05 10:18:46 -<==      Total: 4
2020-03-05 10:18:46 -耗时 : 39
2020-03-05 10:18:46 -返回值 : [DictDO{id=145, name='银行转账', value='D', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=144, name='微信支付', value='C', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2020-03-05 10:18:46 -请求地址 : http://localhost:8081/elec/elec/list
2020-03-05 10:18:46 -HTTP METHOD : GET
2020-03-05 10:18:46 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.list
2020-03-05 10:18:46 -参数 : [{limit=10, offset=0, userType=, elecType=, userOrg=, userId=, createTime=, queryType=1}, com.bootdo.elec.domain.ElecDO@2c0f4954]
2020-03-05 10:18:46 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, `user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec order by id asc limit ?, ? 
2020-03-05 10:18:46 -==> Parameters: 0(Integer), 10(Integer)
2020-03-05 10:18:46 -<==      Total: 10
2020-03-05 10:18:46 -==>  Preparing: select count(*) from elec 
2020-03-05 10:18:46 -==> Parameters: 
2020-03-05 10:18:46 -<==      Total: 1
2020-03-05 10:18:46 -耗时 : 63
2020-03-05 10:18:46 -返回值 : com.bootdo.common.utils.PageUtils@8f1c96
2020-03-05 10:18:54 -请求地址 : http://localhost:8081/elec/elec/list
2020-03-05 10:18:54 -HTTP METHOD : GET
2020-03-05 10:18:54 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.list
2020-03-05 10:18:54 -参数 : [{limit=10, offset=0, userType=B, elecType=, userOrg=, userId=, createTime=, queryType=1, type=B}, com.bootdo.elec.domain.ElecDO@5b1ad7ca]
2020-03-05 10:18:54 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, `user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec WHERE user_type = ? order by id asc limit ?, ? 
2020-03-05 10:18:54 -==> Parameters: B(String), 0(Integer), 10(Integer)
2020-03-05 10:18:54 -<==      Total: 10
2020-03-05 10:18:54 -==>  Preparing: select count(*) from elec WHERE user_type = ? 
2020-03-05 10:18:54 -==> Parameters: B(String)
2020-03-05 10:18:54 -<==      Total: 1
2020-03-05 10:18:54 -耗时 : 60
2020-03-05 10:18:54 -返回值 : com.bootdo.common.utils.PageUtils@767f01c2
2020-03-05 10:18:59 -请求地址 : http://localhost:8081/system/sysDept/treeView
2020-03-05 10:18:59 -HTTP METHOD : GET
2020-03-05 10:18:59 -CLASS_METHOD : com.bootdo.system.controller.DeptController.treeView
2020-03-05 10:18:59 -参数 : [ModelAndView: materialized View is [null]; model is null]
2020-03-05 10:18:59 -耗时 : 1
2020-03-05 10:18:59 -返回值 : system/dept/deptTree
2020-03-05 10:19:00 -请求地址 : http://localhost:8081/system/sysDept/tree
2020-03-05 10:19:00 -HTTP METHOD : GET
2020-03-05 10:19:00 -CLASS_METHOD : com.bootdo.system.controller.DeptController.tree
2020-03-05 10:19:00 -参数 : []
2020-03-05 10:19:00 -==>  Preparing: select `dept_id`,`parent_id`,`name`,`order_num`,`del_flag` from sys_dept order by dept_id desc 
2020-03-05 10:19:00 -==> Parameters: 
2020-03-05 10:19:00 -<==      Total: 3
2020-03-05 10:19:00 -耗时 : 4
2020-03-05 10:19:00 -返回值 : {"checked":false,"children":[{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"3","parentId":"1","state":{"opened":true},"text":"牙星"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"2","parentId":"1","state":{"opened":true},"text":"五九"}],"hasChildren":true,"hasParent":false,"id":"1","parentId":"0","state":{"opened":true},"text":"总公司"}
2020-03-05 10:19:03 -请求地址 : http://localhost:8081/elec/elec/list
2020-03-05 10:19:03 -HTTP METHOD : GET
2020-03-05 10:19:03 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.list
2020-03-05 10:19:03 -参数 : [{limit=10, offset=0, userType=B, elecType=, userOrg=2, userId=, createTime=2019-12, queryType=1}, com.bootdo.elec.domain.ElecDO@38a57f4d]
2020-03-05 10:19:03 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, `user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec WHERE `create_time` = ? and user_type = ? and user_org = ? order by id asc limit ?, ? 
2020-03-05 10:19:03 -==> Parameters: 2019-12(String), B(String), 2(String), 0(Integer), 10(Integer)
2020-03-05 10:19:03 -<==      Total: 10
2020-03-05 10:19:03 -==>  Preparing: select count(*) from elec WHERE `create_time` = ? and user_type = ? and user_org = ? 
2020-03-05 10:19:03 -==> Parameters: 2019-12(String), B(String), 2(String)
2020-03-05 10:19:03 -<==      Total: 1
2020-03-05 10:19:03 -耗时 : 147
2020-03-05 10:19:03 -返回值 : com.bootdo.common.utils.PageUtils@1d5642f7
2020-03-05 10:26:14 -请求地址 : http://localhost:8081/system/sysDept/treeView
2020-03-05 10:26:14 -HTTP METHOD : GET
2020-03-05 10:26:14 -CLASS_METHOD : com.bootdo.system.controller.DeptController.treeView
2020-03-05 10:26:14 -参数 : [ModelAndView: materialized View is [null]; model is null]
2020-03-05 10:26:14 -耗时 : 0
2020-03-05 10:26:14 -返回值 : system/dept/deptTree
2020-03-05 10:26:15 -请求地址 : http://localhost:8081/system/sysDept/tree
2020-03-05 10:26:15 -HTTP METHOD : GET
2020-03-05 10:26:15 -CLASS_METHOD : com.bootdo.system.controller.DeptController.tree
2020-03-05 10:26:15 -参数 : []
2020-03-05 10:26:15 -==>  Preparing: select `dept_id`,`parent_id`,`name`,`order_num`,`del_flag` from sys_dept order by dept_id desc 
2020-03-05 10:26:15 -==> Parameters: 
2020-03-05 10:26:15 -<==      Total: 3
2020-03-05 10:26:15 -耗时 : 6
2020-03-05 10:26:15 -返回值 : {"checked":false,"children":[{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"3","parentId":"1","state":{"opened":true},"text":"牙星"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"2","parentId":"1","state":{"opened":true},"text":"五九"}],"hasChildren":true,"hasParent":false,"id":"1","parentId":"0","state":{"opened":true},"text":"总公司"}
2020-03-05 10:26:44 -请求地址 : http://localhost:8081/elec/elecInto/importElecIntoExcel
2020-03-05 10:26:44 -HTTP METHOD : POST
2020-03-05 10:26:44 -CLASS_METHOD : com.bootdo.elec.controller.ElecIntoController.importElecIntoExcel
2020-03-05 10:26:44 -参数 : [org.springframework.web.multipart.support.StandardMultipartHttpServletRequest$StandardMultipartFile@5f62101b, com.bootdo.elec.vo.ElecVo@55152f35, org.apache.shiro.web.servlet.ShiroHttpServletResponse@1fb06e78]
2020-03-05 10:26:48 -==>  Preparing: UPDATE ELEC SET ELEC_SUM = ELEC_SUM - ? WHERE CREATE_TIME = ? and user_org = ? and USER_ID = ? and USER_NAME = ? and `user_type` = 'B' 
2020-03-05 10:26:48 -==> Parameters: 100(BigDecimal), 2019-12(String), 2(String), 1-0005(String), 李生(String)
2020-03-05 10:26:48 -<==    Updates: 1
2020-03-05 10:26:48 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, `user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec WHERE CREATE_TIME = ? and user_org = ? and USER_ID = ? and USER_NAME = ? and `user_type` = 'B' 
2020-03-05 10:26:48 -==> Parameters: 2019-12(String), 2(String), 1-0005(String), 李生(String)
2020-03-05 10:26:48 -<==      Total: 1
2020-03-05 10:26:48 -==>  Preparing: insert into elec_log ( `user_id`, `user_name`, `user_type`, `user_org`, `elec_type`, `elec_money`, `money_date`, `create_time`, `create_by`, `update_time`, `update_by`, `remark` ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-03-05 10:26:48 -==> Parameters: 1-0005(String), 李生(String), B(String), 2(String), 1(String), 100(BigDecimal), 2020-03-05 10:26:48.563(Timestamp), 2019-12(String), admin(String), 2020-03-05 10:26:48.563(Timestamp), admin(String), null
2020-03-05 10:26:48 -<==    Updates: 1
2020-03-05 10:26:48 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`start`,`end`,`hu`,`elec_price`,`elec_amount`,`elec_cost`,`elec_sum`,`elec_money`,`heat_price`,`heat_area`,`heat_cost`,`heat_sum`,`heat_money`,`water_price`,`water_cost`,`water_sum`,`water_money`,`print_date`,`print_money`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from print where user_id = ? and user_org = ? and create_time = ? and date_format(print_date,'%Y-%m-%d') = date_format(?,'%Y-%m-%d') 
2020-03-05 10:26:48 -==> Parameters: 1-0005(String), 2(String), 2019-12(String), 2020-03-05 10:26:48.563(Timestamp)
2020-03-05 10:26:49 -<==      Total: 0
2020-03-05 10:26:49 -==>  Preparing: insert into print ( `user_id`, `user_name`, `user_type`, `user_org`, `start`, `end`, `hu`, `elec_price`, `elec_amount`, `elec_cost`, `elec_sum`, `elec_money`, `heat_price`, `heat_area`, `heat_cost`, `heat_sum`, `heat_money`, `water_price`, `water_cost`, `water_sum`, `water_money`, `print_date`, `print_money`, `create_time`, `create_by`, `update_time`, `update_by`, `remark` ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-03-05 10:26:49 -==> Parameters: 1-0005(String), 李生(String), B(String), 2(String), 8481.0(BigDecimal), 8581.0(BigDecimal), 1(Integer), 0.465(BigDecimal), 100.00(BigDecimal), 46.50(BigDecimal), 900.01(BigDecimal), 100(BigDecimal), null, null, null, null, null, null, null, null, null, 2020-03-05 10:26:49.085(Timestamp), null, 2019-12(String), admin(String), 2020-03-05 10:26:49.085(Timestamp), admin(String), null
2020-03-05 10:26:49 -<==    Updates: 1
2020-03-05 10:26:49 -==>  Preparing: UPDATE ELEC SET ELEC_SUM = ELEC_SUM - ? WHERE CREATE_TIME = ? and user_org = ? and USER_ID = ? and USER_NAME = ? and `user_type` = 'B' 
2020-03-05 10:26:49 -==> Parameters: 100(BigDecimal), 2019-12(String), 2(String), 1-0008(String), 王明刚(String)
2020-03-05 10:26:49 -<==    Updates: 1
2020-03-05 10:26:49 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, `user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec WHERE CREATE_TIME = ? and user_org = ? and USER_ID = ? and USER_NAME = ? and `user_type` = 'B' 
2020-03-05 10:26:49 -==> Parameters: 2019-12(String), 2(String), 1-0008(String), 王明刚(String)
2020-03-05 10:26:49 -<==      Total: 1
2020-03-05 10:26:49 -==>  Preparing: insert into elec_log ( `user_id`, `user_name`, `user_type`, `user_org`, `elec_type`, `elec_money`, `money_date`, `create_time`, `create_by`, `update_time`, `update_by`, `remark` ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-03-05 10:26:49 -==> Parameters: 1-0008(String), 王明刚(String), B(String), 2(String), 1(String), 100(BigDecimal), 2020-03-05 10:26:49.438(Timestamp), 2019-12(String), admin(String), 2020-03-05 10:26:49.438(Timestamp), admin(String), null
2020-03-05 10:26:49 -<==    Updates: 1
2020-03-05 10:26:49 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`start`,`end`,`hu`,`elec_price`,`elec_amount`,`elec_cost`,`elec_sum`,`elec_money`,`heat_price`,`heat_area`,`heat_cost`,`heat_sum`,`heat_money`,`water_price`,`water_cost`,`water_sum`,`water_money`,`print_date`,`print_money`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from print where user_id = ? and user_org = ? and create_time = ? and date_format(print_date,'%Y-%m-%d') = date_format(?,'%Y-%m-%d') 
2020-03-05 10:26:49 -==> Parameters: 1-0008(String), 2(String), 2019-12(String), 2020-03-05 10:26:49.438(Timestamp)
2020-03-05 10:26:49 -<==      Total: 0
2020-03-05 10:26:49 -==>  Preparing: insert into print ( `user_id`, `user_name`, `user_type`, `user_org`, `start`, `end`, `hu`, `elec_price`, `elec_amount`, `elec_cost`, `elec_sum`, `elec_money`, `heat_price`, `heat_area`, `heat_cost`, `heat_sum`, `heat_money`, `water_price`, `water_cost`, `water_sum`, `water_money`, `print_date`, `print_money`, `create_time`, `create_by`, `update_time`, `update_by`, `remark` ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-03-05 10:26:49 -==> Parameters: 1-0008(String), 王明刚(String), B(String), 2(String), 2931.0(BigDecimal), 3097.0(BigDecimal), 1(Integer), 0.465(BigDecimal), 166.00(BigDecimal), 77.19(BigDecimal), 0.02(BigDecimal), 100(BigDecimal), null, null, null, null, null, null, null, null, null, 2020-03-05 10:26:49.61(Timestamp), null, 2019-12(String), admin(String), 2020-03-05 10:26:49.61(Timestamp), admin(String), null
2020-03-05 10:26:49 -<==    Updates: 1
2020-03-05 10:26:50 -耗时 : 5497
2020-03-05 10:26:50 -返回值 : success
2020-03-05 10:27:02 -请求地址 : http://localhost:8081/elec/elec/list
2020-03-05 10:27:02 -HTTP METHOD : GET
2020-03-05 10:27:02 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.list
2020-03-05 10:27:02 -参数 : [{limit=10, offset=0, userType=B, elecType=, userOrg=2, userId=, createTime=2019-12, queryType=1}, com.bootdo.elec.domain.ElecDO@6933532e]
2020-03-05 10:27:02 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, `user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec WHERE `create_time` = ? and user_type = ? and user_org = ? order by id asc limit ?, ? 
2020-03-05 10:27:02 -==> Parameters: 2019-12(String), B(String), 2(String), 0(Integer), 10(Integer)
2020-03-05 10:27:02 -<==      Total: 10
2020-03-05 10:27:02 -==>  Preparing: select count(*) from elec WHERE `create_time` = ? and user_type = ? and user_org = ? 
2020-03-05 10:27:02 -==> Parameters: 2019-12(String), B(String), 2(String)
2020-03-05 10:27:02 -<==      Total: 1
2020-03-05 10:27:02 -耗时 : 535
2020-03-05 10:27:02 -返回值 : com.bootdo.common.utils.PageUtils@1271373
2020-03-05 10:27:42 -请求地址 : http://localhost:8081/elec/elecInto/importElecIntoExcel
2020-03-05 10:27:42 -HTTP METHOD : POST
2020-03-05 10:27:42 -CLASS_METHOD : com.bootdo.elec.controller.ElecIntoController.importElecIntoExcel
2020-03-05 10:27:42 -参数 : [org.springframework.web.multipart.support.StandardMultipartHttpServletRequest$StandardMultipartFile@c22ad13, com.bootdo.elec.vo.ElecVo@20757a7a, org.apache.shiro.web.servlet.ShiroHttpServletResponse@1bf00da]
2020-03-05 10:27:42 -==>  Preparing: UPDATE ELEC SET ELEC_SUM = ELEC_SUM - ? WHERE CREATE_TIME = ? and user_org = ? and USER_ID = ? and USER_NAME = ? and `user_type` = 'B' 
2020-03-05 10:27:42 -==> Parameters: 100(BigDecimal), 2019-12(String), 2(String), 1-0005(String), 李生(String)
2020-03-05 10:27:43 -<==    Updates: 1
2020-03-05 10:27:43 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, `user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec WHERE CREATE_TIME = ? and user_org = ? and USER_ID = ? and USER_NAME = ? and `user_type` = 'B' 
2020-03-05 10:27:43 -==> Parameters: 2019-12(String), 2(String), 1-0005(String), 李生(String)
2020-03-05 10:27:43 -<==      Total: 1
2020-03-05 10:27:43 -==>  Preparing: insert into elec_log ( `user_id`, `user_name`, `user_type`, `user_org`, `elec_type`, `elec_money`, `money_date`, `create_time`, `create_by`, `update_time`, `update_by`, `remark` ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-03-05 10:27:43 -==> Parameters: 1-0005(String), 李生(String), B(String), 2(String), 1(String), 100(BigDecimal), 2020-03-05 10:27:43.139(Timestamp), 2019-12(String), admin(String), 2020-03-05 10:27:43.139(Timestamp), admin(String), null
2020-03-05 10:27:43 -<==    Updates: 1
2020-03-05 10:27:43 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`start`,`end`,`hu`,`elec_price`,`elec_amount`,`elec_cost`,`elec_sum`,`elec_money`,`heat_price`,`heat_area`,`heat_cost`,`heat_sum`,`heat_money`,`water_price`,`water_cost`,`water_sum`,`water_money`,`print_date`,`print_money`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from print where user_id = ? and user_org = ? and create_time = ? and date_format(print_date,'%Y-%m-%d') = date_format(?,'%Y-%m-%d') 
2020-03-05 10:27:43 -==> Parameters: 1-0005(String), 2(String), 2019-12(String), 2020-03-05 10:27:43.139(Timestamp)
2020-03-05 10:27:43 -<==      Total: 1
2020-03-05 10:27:43 -==>  Preparing: update print SET `user_id` = ?, `user_name` = ?, `user_type` = ?, `user_org` = ?, `start` = ?, `end` = ?, `hu` = ?, `elec_price` = ?, `elec_amount` = ?, `elec_cost` = ?, `elec_sum` = ?, `elec_money` = ?, `print_date` = ?, `create_time` = ?, `create_by` = ?, `update_time` = ?, `update_by` = ? where id = ? 
2020-03-05 10:27:43 -==> Parameters: 1-0005(String), 李生(String), B(String), 2(String), 8481.0(BigDecimal), 8581.0(BigDecimal), 1(Integer), 0.465(BigDecimal), 100.00(BigDecimal), 46.50(BigDecimal), 800.01(BigDecimal), 100(BigDecimal), 2020-03-05 10:27:43.15(Timestamp), 2019-12(String), admin(String), 2020-03-05 10:27:43.15(Timestamp), admin(String), 12255(Long)
2020-03-05 10:27:43 -<==    Updates: 1
2020-03-05 10:27:43 -==>  Preparing: UPDATE ELEC SET ELEC_SUM = ELEC_SUM - ? WHERE CREATE_TIME = ? and user_org = ? and USER_ID = ? and USER_NAME = ? and `user_type` = 'B' 
2020-03-05 10:27:43 -==> Parameters: 100(BigDecimal), 2019-12(String), 2(String), 1-0008(String), 王明刚1(String)
2020-03-05 10:27:43 -<==    Updates: 0
2020-03-05 10:27:43 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, `user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec WHERE CREATE_TIME = ? and user_org = ? and USER_ID = ? and USER_NAME = ? and `user_type` = 'B' 
2020-03-05 10:27:43 -==> Parameters: 2019-12(String), 2(String), 1-0008(String), 王明刚1(String)
2020-03-05 10:27:43 -<==      Total: 0
2020-03-05 10:27:43 -耗时 : 682
2020-03-05 10:27:43 -返回值 : java.lang.Exception: 第3行，数据与数据库不匹配请认真编写
2020-03-05 10:27:55 -请求地址 : http://localhost:8081/elec/elec/list
2020-03-05 10:27:55 -HTTP METHOD : GET
2020-03-05 10:27:55 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.list
2020-03-05 10:27:55 -参数 : [{limit=10, offset=0, userType=B, elecType=, userOrg=2, userId=, createTime=2019-12, queryType=1}, com.bootdo.elec.domain.ElecDO@370c84b9]
2020-03-05 10:27:55 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, `user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec WHERE `create_time` = ? and user_type = ? and user_org = ? order by id asc limit ?, ? 
2020-03-05 10:27:55 -==> Parameters: 2019-12(String), B(String), 2(String), 0(Integer), 10(Integer)
2020-03-05 10:27:57 -<==      Total: 10
2020-03-05 10:27:57 -==>  Preparing: select count(*) from elec WHERE `create_time` = ? and user_type = ? and user_org = ? 
2020-03-05 10:27:57 -==> Parameters: 2019-12(String), B(String), 2(String)
2020-03-05 10:27:57 -<==      Total: 1
2020-03-05 10:27:57 -耗时 : 1874
2020-03-05 10:27:57 -返回值 : com.bootdo.common.utils.PageUtils@b3ddae6
2020-03-05 10:28:27 -==>  Preparing: select distinct m.perms from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id = ur.role_id where ur.user_id = ? 
2020-03-05 10:28:27 -==> Parameters: 1(Long)
2020-03-05 10:28:27 -<==      Total: 94
2020-03-05 10:28:27 -请求地址 : http://localhost:8081/moneyLog/elecLog
2020-03-05 10:28:27 -HTTP METHOD : GET
2020-03-05 10:28:27 -CLASS_METHOD : com.bootdo.moneyLog.controller.ElecLogController.moneyLog
2020-03-05 10:28:27 -参数 : []
2020-03-05 10:28:27 -耗时 : 0
2020-03-05 10:28:27 -返回值 : moneyLog/elecLog/elecLog
2020-03-05 10:28:28 -请求地址 : http://localhost:8081/common/dict/list/userType
2020-03-05 10:28:28 -HTTP METHOD : GET
2020-03-05 10:28:28 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2020-03-05 10:28:28 -参数 : [userType]
2020-03-05 10:28:28 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2020-03-05 10:28:28 -==> Parameters: userType(String)
2020-03-05 10:28:28 -请求地址 : http://localhost:8081/common/dict/list/elecType
2020-03-05 10:28:28 -HTTP METHOD : GET
2020-03-05 10:28:28 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2020-03-05 10:28:28 -参数 : [elecType]
2020-03-05 10:28:28 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2020-03-05 10:28:28 -==> Parameters: elecType(String)
2020-03-05 10:28:28 -<==      Total: 4
2020-03-05 10:28:28 -耗时 : 50
2020-03-05 10:28:28 -返回值 : [DictDO{id=145, name='银行转账', value='D', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=144, name='微信支付', value='C', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2020-03-05 10:28:28 -<==      Total: 11
2020-03-05 10:28:28 -耗时 : 49
2020-03-05 10:28:28 -返回值 : [DictDO{id=180, name='矿民用', value='1', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=179, name='矿商业', value='2', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=178, name='矿工业1', value='3', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=177, name='矿工业2', value='4', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=176, name='矿工业3', value='5', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=175, name='乌民用', value='6', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=174, name='乌商用', value='7', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=173, name='乌工业', value='8', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=172, name='煤民用', value='9', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=171, name='煤商业', value='10', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=170, name='政府用电', value='11', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2020-03-05 10:28:28 -请求地址 : http://localhost:8081/moneyLog/elecLog/list
2020-03-05 10:28:28 -HTTP METHOD : GET
2020-03-05 10:28:28 -CLASS_METHOD : com.bootdo.moneyLog.controller.ElecLogController.list
2020-03-05 10:28:28 -参数 : [{limit=10, offset=0, userType=, elecType=, userOrg=, userId=, moneyDate=}]
2020-03-05 10:28:28 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`elec_type`,`elec_money`,`money_date`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec_log order by id asc limit ?, ? 
2020-03-05 10:28:28 -==> Parameters: 0(Integer), 10(Integer)
2020-03-05 10:28:28 -<==      Total: 10
2020-03-05 10:28:28 -==>  Preparing: select count(*) from elec_log 
2020-03-05 10:28:28 -==> Parameters: 
2020-03-05 10:28:28 -<==      Total: 1
2020-03-05 10:28:28 -耗时 : 218
2020-03-05 10:28:28 -返回值 : com.bootdo.common.utils.PageUtils@c22c27c
2020-03-05 10:28:34 -请求地址 : http://localhost:8081/moneyLog/elecLog/list
2020-03-05 10:28:34 -HTTP METHOD : GET
2020-03-05 10:28:34 -CLASS_METHOD : com.bootdo.moneyLog.controller.ElecLogController.list
2020-03-05 10:28:34 -参数 : [{limit=10, offset=0, userType=, elecType=, userOrg=, userId=, moneyDate=2020-03-05}]
2020-03-05 10:28:34 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`elec_type`,`elec_money`,`money_date`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec_log WHERE `money_date` >= ? and `money_date` <= ? order by id asc limit ?, ? 
2020-03-05 10:28:34 -==> Parameters: 2020-03-05 00:00:00(String), 2020-03-05 23:59:59(String), 0(Integer), 10(Integer)
2020-03-05 10:28:35 -<==      Total: 2
2020-03-05 10:28:35 -==>  Preparing: select count(*) from elec_log WHERE `money_date` >= ? and `money_date` <= ? 
2020-03-05 10:28:35 -==> Parameters: 2020-03-05 00:00:00(String), 2020-03-05 23:59:59(String)
2020-03-05 10:28:35 -<==      Total: 1
2020-03-05 10:28:35 -耗时 : 69
2020-03-05 10:28:35 -返回值 : com.bootdo.common.utils.PageUtils@326a1cd3
2020-03-05 10:29:10 -请求地址 : http://localhost:8081/elec/elecInto/importElecIntoExcel
2020-03-05 10:29:10 -HTTP METHOD : POST
2020-03-05 10:29:10 -CLASS_METHOD : com.bootdo.elec.controller.ElecIntoController.importElecIntoExcel
2020-03-05 10:29:10 -参数 : [org.springframework.web.multipart.support.StandardMultipartHttpServletRequest$StandardMultipartFile@44803fab, com.bootdo.elec.vo.ElecVo@a8ac87, org.apache.shiro.web.servlet.ShiroHttpServletResponse@2b6420d4]
2020-03-05 10:29:10 -==>  Preparing: UPDATE ELEC SET ELEC_SUM = ELEC_SUM - ? WHERE CREATE_TIME = ? and user_org = ? and USER_ID = ? and USER_NAME = ? and `user_type` = 'B' 
2020-03-05 10:29:10 -==> Parameters: 100(BigDecimal), 2019-12(String), 2(String), 1-0005(String), 李生(String)
2020-03-05 10:29:10 -<==    Updates: 1
2020-03-05 10:29:10 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, `user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec WHERE CREATE_TIME = ? and user_org = ? and USER_ID = ? and USER_NAME = ? and `user_type` = 'B' 
2020-03-05 10:29:10 -==> Parameters: 2019-12(String), 2(String), 1-0005(String), 李生(String)
2020-03-05 10:29:10 -<==      Total: 1
2020-03-05 10:29:10 -==>  Preparing: insert into elec_log ( `user_id`, `user_name`, `user_type`, `user_org`, `elec_type`, `elec_money`, `money_date`, `create_time`, `create_by`, `update_time`, `update_by`, `remark` ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-03-05 10:29:10 -==> Parameters: 1-0005(String), 李生(String), B(String), 2(String), 1(String), 100(BigDecimal), 2020-03-05 10:29:10.821(Timestamp), 2019-12(String), admin(String), 2020-03-05 10:29:10.821(Timestamp), admin(String), null
2020-03-05 10:29:10 -<==    Updates: 1
2020-03-05 10:29:10 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`start`,`end`,`hu`,`elec_price`,`elec_amount`,`elec_cost`,`elec_sum`,`elec_money`,`heat_price`,`heat_area`,`heat_cost`,`heat_sum`,`heat_money`,`water_price`,`water_cost`,`water_sum`,`water_money`,`print_date`,`print_money`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from print where user_id = ? and user_org = ? and create_time = ? and date_format(print_date,'%Y-%m-%d') = date_format(?,'%Y-%m-%d') 
2020-03-05 10:29:10 -==> Parameters: 1-0005(String), 2(String), 2019-12(String), 2020-03-05 10:29:10.821(Timestamp)
2020-03-05 10:29:10 -<==      Total: 1
2020-03-05 10:29:10 -==>  Preparing: update print SET `user_id` = ?, `user_name` = ?, `user_type` = ?, `user_org` = ?, `start` = ?, `end` = ?, `hu` = ?, `elec_price` = ?, `elec_amount` = ?, `elec_cost` = ?, `elec_sum` = ?, `elec_money` = ?, `print_date` = ?, `create_time` = ?, `create_by` = ?, `update_time` = ?, `update_by` = ? where id = ? 
2020-03-05 10:29:10 -==> Parameters: 1-0005(String), 李生(String), B(String), 2(String), 8481.0(BigDecimal), 8581.0(BigDecimal), 1(Integer), 0.465(BigDecimal), 100.00(BigDecimal), 46.50(BigDecimal), 800.01(BigDecimal), 100(BigDecimal), 2020-03-05 10:29:10.96(Timestamp), 2019-12(String), admin(String), 2020-03-05 10:29:10.96(Timestamp), admin(String), 12255(Long)
2020-03-05 10:29:11 -<==    Updates: 1
2020-03-05 10:29:11 -==>  Preparing: UPDATE ELEC SET ELEC_SUM = ELEC_SUM - ? WHERE CREATE_TIME = ? and user_org = ? and USER_ID = ? and USER_NAME = ? and `user_type` = 'B' 
2020-03-05 10:29:11 -==> Parameters: 100(BigDecimal), 2019-12(String), 2(String), 1-0008(String), 王明刚(String)
2020-03-05 10:29:11 -<==    Updates: 1
2020-03-05 10:29:11 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, `user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec WHERE CREATE_TIME = ? and user_org = ? and USER_ID = ? and USER_NAME = ? and `user_type` = 'B' 
2020-03-05 10:29:11 -==> Parameters: 2019-12(String), 2(String), 1-0008(String), 王明刚(String)
2020-03-05 10:29:11 -<==      Total: 1
2020-03-05 10:29:11 -==>  Preparing: insert into elec_log ( `user_id`, `user_name`, `user_type`, `user_org`, `elec_type`, `elec_money`, `money_date`, `create_time`, `create_by`, `update_time`, `update_by`, `remark` ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-03-05 10:29:11 -==> Parameters: 1-0008(String), 王明刚(String), B(String), 2(String), 1(String), 100(BigDecimal), 2020-03-05 10:29:11.257(Timestamp), 2019-12(String), admin(String), 2020-03-05 10:29:11.257(Timestamp), admin(String), null
2020-03-05 10:29:11 -<==    Updates: 1
2020-03-05 10:29:11 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`start`,`end`,`hu`,`elec_price`,`elec_amount`,`elec_cost`,`elec_sum`,`elec_money`,`heat_price`,`heat_area`,`heat_cost`,`heat_sum`,`heat_money`,`water_price`,`water_cost`,`water_sum`,`water_money`,`print_date`,`print_money`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from print where user_id = ? and user_org = ? and create_time = ? and date_format(print_date,'%Y-%m-%d') = date_format(?,'%Y-%m-%d') 
2020-03-05 10:29:11 -==> Parameters: 1-0008(String), 2(String), 2019-12(String), 2020-03-05 10:29:11.257(Timestamp)
2020-03-05 10:29:11 -<==      Total: 1
2020-03-05 10:29:11 -==>  Preparing: update print SET `user_id` = ?, `user_name` = ?, `user_type` = ?, `user_org` = ?, `start` = ?, `end` = ?, `hu` = ?, `elec_price` = ?, `elec_amount` = ?, `elec_cost` = ?, `elec_sum` = ?, `elec_money` = ?, `print_date` = ?, `create_time` = ?, `create_by` = ?, `update_time` = ?, `update_by` = ? where id = ? 
2020-03-05 10:29:11 -==> Parameters: 1-0008(String), 王明刚(String), B(String), 2(String), 2931.0(BigDecimal), 3097.0(BigDecimal), 1(Integer), 0.465(BigDecimal), 166.00(BigDecimal), 77.19(BigDecimal), -99.98(BigDecimal), 100(BigDecimal), 2020-03-05 10:29:11.265(Timestamp), 2019-12(String), admin(String), 2020-03-05 10:29:11.265(Timestamp), admin(String), 12256(Long)
2020-03-05 10:29:11 -<==    Updates: 1
2020-03-05 10:29:11 -耗时 : 1092
2020-03-05 10:29:11 -返回值 : success
2020-03-05 10:29:17 -请求地址 : http://localhost:8081/elec/elec/list
2020-03-05 10:29:17 -HTTP METHOD : GET
2020-03-05 10:29:17 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.list
2020-03-05 10:29:17 -参数 : [{limit=10, offset=0, userType=B, elecType=, userOrg=2, userId=, createTime=2019-12, queryType=1}, com.bootdo.elec.domain.ElecDO@424df4c3]
2020-03-05 10:29:17 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, `user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec WHERE `create_time` = ? and user_type = ? and user_org = ? order by id asc limit ?, ? 
2020-03-05 10:29:17 -==> Parameters: 2019-12(String), B(String), 2(String), 0(Integer), 10(Integer)
2020-03-05 10:29:17 -<==      Total: 10
2020-03-05 10:29:17 -==>  Preparing: select count(*) from elec WHERE `create_time` = ? and user_type = ? and user_org = ? 
2020-03-05 10:29:17 -==> Parameters: 2019-12(String), B(String), 2(String)
2020-03-05 10:29:17 -<==      Total: 1
2020-03-05 10:29:17 -耗时 : 346
2020-03-05 10:29:17 -返回值 : com.bootdo.common.utils.PageUtils@90bb433
2020-03-05 10:29:23 -请求地址 : http://localhost:8081/moneyLog/elecLog/list
2020-03-05 10:29:23 -HTTP METHOD : GET
2020-03-05 10:29:23 -CLASS_METHOD : com.bootdo.moneyLog.controller.ElecLogController.list
2020-03-05 10:29:23 -参数 : [{limit=10, offset=0, userType=, elecType=, userOrg=, userId=, moneyDate=2020-03-05}]
2020-03-05 10:29:23 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`elec_type`,`elec_money`,`money_date`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec_log WHERE `money_date` >= ? and `money_date` <= ? order by id asc limit ?, ? 
2020-03-05 10:29:23 -==> Parameters: 2020-03-05 00:00:00(String), 2020-03-05 23:59:59(String), 0(Integer), 10(Integer)
2020-03-05 10:29:23 -<==      Total: 4
2020-03-05 10:29:23 -==>  Preparing: select count(*) from elec_log WHERE `money_date` >= ? and `money_date` <= ? 
2020-03-05 10:29:23 -==> Parameters: 2020-03-05 00:00:00(String), 2020-03-05 23:59:59(String)
2020-03-05 10:29:23 -<==      Total: 1
2020-03-05 10:29:23 -耗时 : 124
2020-03-05 10:29:23 -返回值 : com.bootdo.common.utils.PageUtils@79402129
2020-03-05 10:29:39 -请求地址 : http://localhost:8081/heat/heat
2020-03-05 10:29:39 -HTTP METHOD : GET
2020-03-05 10:29:39 -CLASS_METHOD : com.bootdo.heat.controller.HeatController.Heat
2020-03-05 10:29:39 -参数 : []
2020-03-05 10:29:39 -耗时 : 0
2020-03-05 10:29:39 -返回值 : heat/heat/heat
2020-03-05 10:29:40 -请求地址 : http://localhost:8081/common/dict/list/heatType
2020-03-05 10:29:40 -请求地址 : http://localhost:8081/common/dict/list/userType
2020-03-05 10:29:40 -HTTP METHOD : GET
2020-03-05 10:29:40 -HTTP METHOD : GET
2020-03-05 10:29:40 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2020-03-05 10:29:40 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2020-03-05 10:29:40 -参数 : [heatType]
2020-03-05 10:29:40 -参数 : [userType]
2020-03-05 10:29:40 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2020-03-05 10:29:40 -==> Parameters: heatType(String)
2020-03-05 10:29:40 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2020-03-05 10:29:40 -==> Parameters: userType(String)
2020-03-05 10:29:40 -<==      Total: 4
2020-03-05 10:29:40 -<==      Total: 4
2020-03-05 10:29:40 -耗时 : 20
2020-03-05 10:29:40 -耗时 : 20
2020-03-05 10:29:40 -返回值 : [DictDO{id=184, name='民用暖', value='1', type='heatType', description='暖费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=183, name='商业暖', value='2', type='heatType', description='暖费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=182, name='工业民', value='3', type='heatType', description='暖费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=181, name='工业商', value='4', type='heatType', description='暖费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2020-03-05 10:29:40 -返回值 : [DictDO{id=145, name='银行转账', value='D', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=144, name='微信支付', value='C', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2020-03-05 10:29:40 -请求地址 : http://localhost:8081/heat/heat/list
2020-03-05 10:29:40 -HTTP METHOD : GET
2020-03-05 10:29:40 -CLASS_METHOD : com.bootdo.heat.controller.HeatController.list
2020-03-05 10:29:40 -参数 : [{limit=10, offset=0, userType=, heatType=, userOrg=, userId=, createTime=, queryType=1}]
2020-03-05 10:29:40 -请求地址 : http://localhost:8081/heat/heatInto
2020-03-05 10:29:40 -HTTP METHOD : GET
2020-03-05 10:29:40 -CLASS_METHOD : com.bootdo.heat.controller.HeatIntoController.HeatInto
2020-03-05 10:29:40 -参数 : []
2020-03-05 10:29:40 -耗时 : 1
2020-03-05 10:29:40 -返回值 : heat/heatInto/heatInto
2020-03-05 10:29:40 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`heat_type`,`heat_price`,`heat_area`,`heat_cost`,`heat_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from heat order by id asc limit ?, ? 
2020-03-05 10:29:40 -==> Parameters: 0(Integer), 10(Integer)
2020-03-05 10:29:41 -<==      Total: 10
2020-03-05 10:29:41 -==>  Preparing: select count(*) from heat 
2020-03-05 10:29:41 -==> Parameters: 
2020-03-05 10:29:41 -<==      Total: 1
2020-03-05 10:29:41 -耗时 : 848
2020-03-05 10:29:41 -返回值 : com.bootdo.common.utils.PageUtils@108f06ac
2020-03-05 10:29:47 -请求地址 : http://localhost:8081/heat/heat/list
2020-03-05 10:29:47 -HTTP METHOD : GET
2020-03-05 10:29:47 -CLASS_METHOD : com.bootdo.heat.controller.HeatController.list
2020-03-05 10:29:47 -参数 : [{limit=10, offset=0, userType=B, heatType=, userOrg=, userId=, createTime=, queryType=1}]
2020-03-05 10:29:47 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`heat_type`,`heat_price`,`heat_area`,`heat_cost`,`heat_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from heat WHERE user_type = ? order by id asc limit ?, ? 
2020-03-05 10:29:47 -==> Parameters: B(String), 0(Integer), 10(Integer)
2020-03-05 10:29:47 -<==      Total: 10
2020-03-05 10:29:47 -==>  Preparing: select count(*) from heat WHERE user_type = ? 
2020-03-05 10:29:47 -==> Parameters: B(String)
2020-03-05 10:29:47 -<==      Total: 1
2020-03-05 10:29:47 -耗时 : 58
2020-03-05 10:29:47 -返回值 : com.bootdo.common.utils.PageUtils@1e7dd6da
2020-03-05 10:31:12 -请求地址 : http://localhost:8081/moneyLog/elecLog
2020-03-05 10:31:12 -HTTP METHOD : GET
2020-03-05 10:31:12 -CLASS_METHOD : com.bootdo.moneyLog.controller.ElecLogController.moneyLog
2020-03-05 10:31:12 -参数 : []
2020-03-05 10:31:12 -耗时 : 1
2020-03-05 10:31:12 -返回值 : moneyLog/elecLog/elecLog
2020-03-05 10:31:13 -请求地址 : http://localhost:8081/common/dict/list/elecType
2020-03-05 10:31:13 -HTTP METHOD : GET
2020-03-05 10:31:13 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2020-03-05 10:31:13 -参数 : [elecType]
2020-03-05 10:31:13 -请求地址 : http://localhost:8081/common/dict/list/userType
2020-03-05 10:31:13 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2020-03-05 10:31:13 -HTTP METHOD : GET
2020-03-05 10:31:13 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2020-03-05 10:31:13 -参数 : [userType]
2020-03-05 10:31:13 -==> Parameters: elecType(String)
2020-03-05 10:31:13 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2020-03-05 10:31:13 -==> Parameters: userType(String)
2020-03-05 10:31:13 -<==      Total: 4
2020-03-05 10:31:13 -耗时 : 4
2020-03-05 10:31:13 -<==      Total: 11
2020-03-05 10:31:13 -返回值 : [DictDO{id=145, name='银行转账', value='D', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=144, name='微信支付', value='C', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2020-03-05 10:31:13 -耗时 : 6
2020-03-05 10:31:13 -返回值 : [DictDO{id=180, name='矿民用', value='1', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=179, name='矿商业', value='2', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=178, name='矿工业1', value='3', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=177, name='矿工业2', value='4', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=176, name='矿工业3', value='5', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=175, name='乌民用', value='6', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=174, name='乌商用', value='7', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=173, name='乌工业', value='8', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=172, name='煤民用', value='9', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=171, name='煤商业', value='10', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=170, name='政府用电', value='11', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2020-03-05 10:31:13 -请求地址 : http://localhost:8081/moneyLog/elecLog/list
2020-03-05 10:31:13 -HTTP METHOD : GET
2020-03-05 10:31:13 -CLASS_METHOD : com.bootdo.moneyLog.controller.ElecLogController.list
2020-03-05 10:31:13 -参数 : [{limit=10, offset=0, userType=, elecType=, userOrg=, userId=, moneyDate=}]
2020-03-05 10:31:13 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`elec_type`,`elec_money`,`money_date`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec_log order by id asc limit ?, ? 
2020-03-05 10:31:13 -==> Parameters: 0(Integer), 10(Integer)
2020-03-05 10:31:13 -<==      Total: 10
2020-03-05 10:31:13 -==>  Preparing: select count(*) from elec_log 
2020-03-05 10:31:13 -==> Parameters: 
2020-03-05 10:31:13 -<==      Total: 1
2020-03-05 10:31:13 -耗时 : 18
2020-03-05 10:31:13 -返回值 : com.bootdo.common.utils.PageUtils@70ffb2e6
2020-03-05 10:31:14 -请求地址 : http://localhost:8081/moneyLog/heatLog
2020-03-05 10:31:14 -HTTP METHOD : GET
2020-03-05 10:31:14 -CLASS_METHOD : com.bootdo.moneyLog.controller.HeatLogController.HeatLog
2020-03-05 10:31:14 -参数 : []
2020-03-05 10:31:14 -耗时 : 0
2020-03-05 10:31:14 -返回值 : moneyLog/heatLog/heatLog
2020-03-05 10:31:14 -请求地址 : http://localhost:8081/common/dict/list/userType
2020-03-05 10:31:14 -HTTP METHOD : GET
2020-03-05 10:31:14 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2020-03-05 10:31:14 -参数 : [userType]
2020-03-05 10:31:14 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2020-03-05 10:31:14 -==> Parameters: userType(String)
2020-03-05 10:31:14 -请求地址 : http://localhost:8081/common/dict/list/heatType
2020-03-05 10:31:14 -HTTP METHOD : GET
2020-03-05 10:31:14 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2020-03-05 10:31:14 -参数 : [heatType]
2020-03-05 10:31:14 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2020-03-05 10:31:14 -==> Parameters: heatType(String)
2020-03-05 10:31:14 -<==      Total: 4
2020-03-05 10:31:14 -耗时 : 4
2020-03-05 10:31:14 -<==      Total: 4
2020-03-05 10:31:14 -返回值 : [DictDO{id=145, name='银行转账', value='D', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=144, name='微信支付', value='C', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2020-03-05 10:31:14 -耗时 : 4
2020-03-05 10:31:14 -返回值 : [DictDO{id=184, name='民用暖', value='1', type='heatType', description='暖费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=183, name='商业暖', value='2', type='heatType', description='暖费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=182, name='工业民', value='3', type='heatType', description='暖费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=181, name='工业商', value='4', type='heatType', description='暖费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2020-03-05 10:31:15 -请求地址 : http://localhost:8081/moneyLog/heatLog/list
2020-03-05 10:31:15 -HTTP METHOD : GET
2020-03-05 10:31:15 -CLASS_METHOD : com.bootdo.moneyLog.controller.HeatLogController.list
2020-03-05 10:31:15 -参数 : [{limit=10, offset=0, userType=, heatType=, userOrg=, userId=, moneyDate=}]
2020-03-05 10:31:15 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,`heat_type`,`heat_money`,`money_date`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from heat_log order by id asc limit ?, ? 
2020-03-05 10:31:15 -==> Parameters: 0(Integer), 10(Integer)
2020-03-05 10:31:15 -<==      Total: 10
2020-03-05 10:31:15 -==>  Preparing: select count(*) from heat_log 
2020-03-05 10:31:15 -==> Parameters: 
2020-03-05 10:31:15 -<==      Total: 1
2020-03-05 10:31:15 -耗时 : 198
2020-03-05 10:31:15 -返回值 : com.bootdo.common.utils.PageUtils@78c41927
2020-03-05 10:31:28 -请求地址 : http://localhost:8081/moneyLog/heatLog/list
2020-03-05 10:31:28 -HTTP METHOD : GET
2020-03-05 10:31:28 -CLASS_METHOD : com.bootdo.moneyLog.controller.HeatLogController.list
2020-03-05 10:31:28 -参数 : [{limit=10, offset=0, userType=, heatType=, userOrg=, userId=, moneyDate=2020-03-05}]
2020-03-05 10:31:28 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,`heat_type`,`heat_money`,`money_date`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from heat_log WHERE `money_date` >= ? and `money_date` <= ? order by id asc limit ?, ? 
2020-03-05 10:31:28 -==> Parameters: 2020-03-05 00:00:00(String), 2020-03-05 23:59:59(String), 0(Integer), 10(Integer)
2020-03-05 10:31:28 -<==      Total: 0
2020-03-05 10:31:28 -==>  Preparing: select count(*) from heat_log WHERE `money_date` >= ? and `money_date` <= ? 
2020-03-05 10:31:28 -==> Parameters: 2020-03-05 00:00:00(String), 2020-03-05 23:59:59(String)
2020-03-05 10:31:28 -<==      Total: 1
2020-03-05 10:31:28 -耗时 : 86
2020-03-05 10:31:28 -返回值 : com.bootdo.common.utils.PageUtils@3ce788ae
2020-03-05 10:31:46 -请求地址 : http://localhost:8081/system/sysDept/treeView
2020-03-05 10:31:46 -HTTP METHOD : GET
2020-03-05 10:31:46 -CLASS_METHOD : com.bootdo.system.controller.DeptController.treeView
2020-03-05 10:31:46 -参数 : [ModelAndView: materialized View is [null]; model is null]
2020-03-05 10:31:46 -耗时 : 1
2020-03-05 10:31:46 -返回值 : system/dept/deptTree
2020-03-05 10:31:46 -请求地址 : http://localhost:8081/system/sysDept/tree
2020-03-05 10:31:46 -HTTP METHOD : GET
2020-03-05 10:31:46 -CLASS_METHOD : com.bootdo.system.controller.DeptController.tree
2020-03-05 10:31:46 -参数 : []
2020-03-05 10:31:46 -==>  Preparing: select `dept_id`,`parent_id`,`name`,`order_num`,`del_flag` from sys_dept order by dept_id desc 
2020-03-05 10:31:46 -==> Parameters: 
2020-03-05 10:31:46 -<==      Total: 3
2020-03-05 10:31:46 -耗时 : 5
2020-03-05 10:31:46 -返回值 : {"checked":false,"children":[{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"3","parentId":"1","state":{"opened":true},"text":"牙星"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"2","parentId":"1","state":{"opened":true},"text":"五九"}],"hasChildren":true,"hasParent":false,"id":"1","parentId":"0","state":{"opened":true},"text":"总公司"}
2020-03-05 10:31:49 -请求地址 : http://localhost:8081/system/sysDept/treeView
2020-03-05 10:31:49 -HTTP METHOD : GET
2020-03-05 10:31:49 -CLASS_METHOD : com.bootdo.system.controller.DeptController.treeView
2020-03-05 10:31:49 -参数 : [ModelAndView: materialized View is [null]; model is null]
2020-03-05 10:31:49 -耗时 : 0
2020-03-05 10:31:49 -返回值 : system/dept/deptTree
2020-03-05 10:31:50 -请求地址 : http://localhost:8081/system/sysDept/tree
2020-03-05 10:31:50 -HTTP METHOD : GET
2020-03-05 10:31:50 -CLASS_METHOD : com.bootdo.system.controller.DeptController.tree
2020-03-05 10:31:50 -参数 : []
2020-03-05 10:31:50 -==>  Preparing: select `dept_id`,`parent_id`,`name`,`order_num`,`del_flag` from sys_dept order by dept_id desc 
2020-03-05 10:31:50 -==> Parameters: 
2020-03-05 10:31:50 -<==      Total: 3
2020-03-05 10:31:50 -耗时 : 3
2020-03-05 10:31:50 -返回值 : {"checked":false,"children":[{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"3","parentId":"1","state":{"opened":true},"text":"牙星"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"2","parentId":"1","state":{"opened":true},"text":"五九"}],"hasChildren":true,"hasParent":false,"id":"1","parentId":"0","state":{"opened":true},"text":"总公司"}
2020-03-05 10:32:00 -请求地址 : http://localhost:8081/heat/heatInto/importHeatIntoExcel
2020-03-05 10:32:00 -HTTP METHOD : POST
2020-03-05 10:32:00 -CLASS_METHOD : com.bootdo.heat.controller.HeatIntoController.importHeatIntoExcel
2020-03-05 10:32:00 -参数 : [org.springframework.web.multipart.support.StandardMultipartHttpServletRequest$StandardMultipartFile@5001fa7f, com.bootdo.heat.vo.HeatVo@1a0a5dc9, org.apache.shiro.web.servlet.ShiroHttpServletResponse@4db0e4de]
2020-03-05 10:32:00 -==>  Preparing: UPDATE HEAT SET HEAT_SUM = HEAT_SUM - ? WHERE CREATE_TIME = ? and user_org = ? and USER_ID = ? and USER_NAME = ? and `user_type` = 'B' 
2020-03-05 10:32:00 -==> Parameters: 100(BigDecimal), 2019-05(String), 2(String), 1-0005(String), 李占林(String)
2020-03-05 10:32:00 -<==    Updates: 1
2020-03-05 10:32:00 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`heat_type`,`heat_price`,`heat_area`,`heat_cost`,`heat_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from heat WHERE CREATE_TIME = ? and user_org = ? and USER_ID = ? and USER_NAME = ? and `user_type` = 'B' 
2020-03-05 10:32:00 -==> Parameters: 2019-05(String), 2(String), 1-0005(String), 李占林(String)
2020-03-05 10:32:00 -<==      Total: 1
2020-03-05 10:32:00 -==>  Preparing: insert into heat_log ( `user_id`, `user_name`, `user_type`, `user_org`, `heat_type`, `heat_money`, `money_date`, `create_time`, `create_by`, `update_time`, `update_by`, `remark` ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-03-05 10:32:00 -==> Parameters: 1-0005(String), 李占林(String), B(String), 2(String), 1(String), 100(BigDecimal), 2020-03-05 10:32:00.4(Timestamp), 2019-05(String), admin(String), 2020-03-05 10:32:00.4(Timestamp), admin(String), null
2020-03-05 10:32:00 -<==    Updates: 1
2020-03-05 10:32:00 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`start`,`end`,`hu`,`elec_price`,`elec_amount`,`elec_cost`,`elec_sum`,`elec_money`,`heat_price`,`heat_area`,`heat_cost`,`heat_sum`,`heat_money`,`water_price`,`water_cost`,`water_sum`,`water_money`,`print_date`,`print_money`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from print where user_id = ? and user_org = ? and create_time = ? and date_format(print_date,'%Y-%m-%d') = date_format(?,'%Y-%m-%d') 
2020-03-05 10:32:00 -==> Parameters: 1-0005(String), 2(String), 2019-05(String), 2020-03-05 10:32:00.4(Timestamp)
2020-03-05 10:32:00 -<==      Total: 0
2020-03-05 10:32:00 -==>  Preparing: insert into print ( `user_id`, `user_name`, `user_type`, `user_org`, `start`, `end`, `hu`, `elec_price`, `elec_amount`, `elec_cost`, `elec_sum`, `elec_money`, `heat_price`, `heat_area`, `heat_cost`, `heat_sum`, `heat_money`, `water_price`, `water_cost`, `water_sum`, `water_money`, `print_date`, `print_money`, `create_time`, `create_by`, `update_time`, `update_by`, `remark` ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-03-05 10:32:00 -==> Parameters: 1-0005(String), 李占林(String), B(String), 2(String), null, null, null, null, null, null, null, null, 3.50(BigDecimal), 45.78(BigDecimal), 80.12(BigDecimal), -99.99(BigDecimal), 100(BigDecimal), null, null, null, null, 2020-03-05 10:32:00.45(Timestamp), null, 2019-05(String), admin(String), 2020-03-05 10:32:00.45(Timestamp), admin(String), null
2020-03-05 10:32:00 -<==    Updates: 1
2020-03-05 10:32:00 -==>  Preparing: UPDATE HEAT SET HEAT_SUM = HEAT_SUM - ? WHERE CREATE_TIME = ? and user_org = ? and USER_ID = ? and USER_NAME = ? and `user_type` = 'B' 
2020-03-05 10:32:00 -==> Parameters: 100(BigDecimal), 2019-05(String), 2(String), 1-0008(String), 王明刚(String)
2020-03-05 10:32:00 -<==    Updates: 1
2020-03-05 10:32:00 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`heat_type`,`heat_price`,`heat_area`,`heat_cost`,`heat_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from heat WHERE CREATE_TIME = ? and user_org = ? and USER_ID = ? and USER_NAME = ? and `user_type` = 'B' 
2020-03-05 10:32:00 -==> Parameters: 2019-05(String), 2(String), 1-0008(String), 王明刚(String)
2020-03-05 10:32:00 -<==      Total: 1
2020-03-05 10:32:00 -==>  Preparing: insert into heat_log ( `user_id`, `user_name`, `user_type`, `user_org`, `heat_type`, `heat_money`, `money_date`, `create_time`, `create_by`, `update_time`, `update_by`, `remark` ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-03-05 10:32:00 -==> Parameters: 1-0008(String), 王明刚(String), B(String), 2(String), 1(String), 100(BigDecimal), 2020-03-05 10:32:00.53(Timestamp), 2019-05(String), admin(String), 2020-03-05 10:32:00.53(Timestamp), admin(String), null
2020-03-05 10:32:00 -<==    Updates: 1
2020-03-05 10:32:00 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`start`,`end`,`hu`,`elec_price`,`elec_amount`,`elec_cost`,`elec_sum`,`elec_money`,`heat_price`,`heat_area`,`heat_cost`,`heat_sum`,`heat_money`,`water_price`,`water_cost`,`water_sum`,`water_money`,`print_date`,`print_money`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from print where user_id = ? and user_org = ? and create_time = ? and date_format(print_date,'%Y-%m-%d') = date_format(?,'%Y-%m-%d') 
2020-03-05 10:32:00 -==> Parameters: 1-0008(String), 2(String), 2019-05(String), 2020-03-05 10:32:00.53(Timestamp)
2020-03-05 10:32:00 -<==      Total: 0
2020-03-05 10:32:00 -==>  Preparing: insert into print ( `user_id`, `user_name`, `user_type`, `user_org`, `start`, `end`, `hu`, `elec_price`, `elec_amount`, `elec_cost`, `elec_sum`, `elec_money`, `heat_price`, `heat_area`, `heat_cost`, `heat_sum`, `heat_money`, `water_price`, `water_cost`, `water_sum`, `water_money`, `print_date`, `print_money`, `create_time`, `create_by`, `update_time`, `update_by`, `remark` ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-03-05 10:32:00 -==> Parameters: 1-0008(String), 王明刚(String), B(String), 2(String), null, null, null, null, null, null, null, null, 3.50(BigDecimal), 45.78(BigDecimal), 80.12(BigDecimal), -99.99(BigDecimal), 100(BigDecimal), null, null, null, null, 2020-03-05 10:32:00.535(Timestamp), null, 2019-05(String), admin(String), 2020-03-05 10:32:00.535(Timestamp), admin(String), null
2020-03-05 10:32:00 -<==    Updates: 1
2020-03-05 10:32:00 -耗时 : 581
2020-03-05 10:32:00 -返回值 : success
2020-03-05 10:32:06 -请求地址 : http://localhost:8081/heat/heat/list
2020-03-05 10:32:06 -HTTP METHOD : GET
2020-03-05 10:32:06 -CLASS_METHOD : com.bootdo.heat.controller.HeatController.list
2020-03-05 10:32:06 -参数 : [{limit=10, offset=0, userType=B, heatType=, userOrg=, userId=, createTime=, queryType=1}]
2020-03-05 10:32:06 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`heat_type`,`heat_price`,`heat_area`,`heat_cost`,`heat_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from heat WHERE user_type = ? order by id asc limit ?, ? 
2020-03-05 10:32:06 -==> Parameters: B(String), 0(Integer), 10(Integer)
2020-03-05 10:32:06 -<==      Total: 10
2020-03-05 10:32:06 -==>  Preparing: select count(*) from heat WHERE user_type = ? 
2020-03-05 10:32:06 -==> Parameters: B(String)
2020-03-05 10:32:06 -<==      Total: 1
2020-03-05 10:32:06 -耗时 : 17
2020-03-05 10:32:06 -返回值 : com.bootdo.common.utils.PageUtils@2fe35314
2020-03-05 10:32:10 -请求地址 : http://localhost:8081/moneyLog/heatLog/list
2020-03-05 10:32:10 -HTTP METHOD : GET
2020-03-05 10:32:10 -CLASS_METHOD : com.bootdo.moneyLog.controller.HeatLogController.list
2020-03-05 10:32:10 -参数 : [{limit=10, offset=0, userType=, heatType=, userOrg=, userId=, moneyDate=2020-03-05}]
2020-03-05 10:32:10 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,`heat_type`,`heat_money`,`money_date`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from heat_log WHERE `money_date` >= ? and `money_date` <= ? order by id asc limit ?, ? 
2020-03-05 10:32:10 -==> Parameters: 2020-03-05 00:00:00(String), 2020-03-05 23:59:59(String), 0(Integer), 10(Integer)
2020-03-05 10:32:10 -<==      Total: 2
2020-03-05 10:32:10 -==>  Preparing: select count(*) from heat_log WHERE `money_date` >= ? and `money_date` <= ? 
2020-03-05 10:32:10 -==> Parameters: 2020-03-05 00:00:00(String), 2020-03-05 23:59:59(String)
2020-03-05 10:32:10 -<==      Total: 1
2020-03-05 10:32:10 -耗时 : 77
2020-03-05 10:32:10 -返回值 : com.bootdo.common.utils.PageUtils@4ab189c4
2020-03-05 10:32:44 -请求地址 : http://localhost:8081/heat/heatInto/importHeatIntoExcel
2020-03-05 10:32:44 -HTTP METHOD : POST
2020-03-05 10:32:44 -CLASS_METHOD : com.bootdo.heat.controller.HeatIntoController.importHeatIntoExcel
2020-03-05 10:32:44 -参数 : [org.springframework.web.multipart.support.StandardMultipartHttpServletRequest$StandardMultipartFile@1211b4ae, com.bootdo.heat.vo.HeatVo@118f95fa, org.apache.shiro.web.servlet.ShiroHttpServletResponse@2ef18b87]
2020-03-05 10:32:44 -==>  Preparing: UPDATE HEAT SET HEAT_SUM = HEAT_SUM - ? WHERE CREATE_TIME = ? and user_org = ? and USER_ID = ? and USER_NAME = ? and `user_type` = 'B' 
2020-03-05 10:32:44 -==> Parameters: 100(BigDecimal), 2019-05(String), 2(String), 1-0005(String), 李占林(String)
2020-03-05 10:32:44 -<==    Updates: 1
2020-03-05 10:32:44 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`heat_type`,`heat_price`,`heat_area`,`heat_cost`,`heat_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from heat WHERE CREATE_TIME = ? and user_org = ? and USER_ID = ? and USER_NAME = ? and `user_type` = 'B' 
2020-03-05 10:32:44 -==> Parameters: 2019-05(String), 2(String), 1-0005(String), 李占林(String)
2020-03-05 10:32:44 -<==      Total: 1
2020-03-05 10:32:44 -==>  Preparing: insert into heat_log ( `user_id`, `user_name`, `user_type`, `user_org`, `heat_type`, `heat_money`, `money_date`, `create_time`, `create_by`, `update_time`, `update_by`, `remark` ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-03-05 10:32:44 -==> Parameters: 1-0005(String), 李占林(String), B(String), 2(String), 1(String), 100(BigDecimal), 2020-03-05 10:32:44.426(Timestamp), 2019-05(String), admin(String), 2020-03-05 10:32:44.426(Timestamp), admin(String), null
2020-03-05 10:32:44 -<==    Updates: 1
2020-03-05 10:32:44 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`start`,`end`,`hu`,`elec_price`,`elec_amount`,`elec_cost`,`elec_sum`,`elec_money`,`heat_price`,`heat_area`,`heat_cost`,`heat_sum`,`heat_money`,`water_price`,`water_cost`,`water_sum`,`water_money`,`print_date`,`print_money`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from print where user_id = ? and user_org = ? and create_time = ? and date_format(print_date,'%Y-%m-%d') = date_format(?,'%Y-%m-%d') 
2020-03-05 10:32:44 -==> Parameters: 1-0005(String), 2(String), 2019-05(String), 2020-03-05 10:32:44.426(Timestamp)
2020-03-05 10:32:44 -<==      Total: 1
2020-03-05 10:32:44 -==>  Preparing: update print SET `user_id` = ?, `user_name` = ?, `user_type` = ?, `user_org` = ?, `heat_price` = ?, `heat_area` = ?, `heat_cost` = ?, `heat_sum` = ?, `heat_money` = ?, `print_date` = ?, `create_time` = ?, `create_by` = ?, `update_time` = ?, `update_by` = ? where id = ? 
2020-03-05 10:32:44 -==> Parameters: 1-0005(String), 李占林(String), B(String), 2(String), 3.50(BigDecimal), 45.78(BigDecimal), 80.12(BigDecimal), -199.99(BigDecimal), 100(BigDecimal), 2020-03-05 10:32:44.452(Timestamp), 2019-05(String), admin(String), 2020-03-05 10:32:44.452(Timestamp), admin(String), 12257(Long)
2020-03-05 10:32:44 -<==    Updates: 1
2020-03-05 10:32:44 -==>  Preparing: UPDATE HEAT SET HEAT_SUM = HEAT_SUM - ? WHERE CREATE_TIME = ? and user_org = ? and USER_ID = ? and USER_NAME = ? and `user_type` = 'B' 
2020-03-05 10:32:44 -==> Parameters: 100(BigDecimal), 2019-05(String), 2(String), 1-0008(String), 王明刚1(String)
2020-03-05 10:32:44 -<==    Updates: 0
2020-03-05 10:32:44 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`heat_type`,`heat_price`,`heat_area`,`heat_cost`,`heat_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from heat WHERE CREATE_TIME = ? and user_org = ? and USER_ID = ? and USER_NAME = ? and `user_type` = 'B' 
2020-03-05 10:32:44 -==> Parameters: 2019-05(String), 2(String), 1-0008(String), 王明刚1(String)
2020-03-05 10:32:44 -<==      Total: 0
2020-03-05 10:32:44 -耗时 : 633
2020-03-05 10:32:44 -返回值 : java.lang.Exception: 第3行，数据与数据库不匹配请认真编写
2020-03-05 10:32:50 -请求地址 : http://localhost:8081/heat/heat/list
2020-03-05 10:32:50 -HTTP METHOD : GET
2020-03-05 10:32:50 -CLASS_METHOD : com.bootdo.heat.controller.HeatController.list
2020-03-05 10:32:50 -参数 : [{limit=10, offset=0, userType=B, heatType=, userOrg=, userId=, createTime=, queryType=1}]
2020-03-05 10:32:50 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`heat_type`,`heat_price`,`heat_area`,`heat_cost`,`heat_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from heat WHERE user_type = ? order by id asc limit ?, ? 
2020-03-05 10:32:50 -==> Parameters: B(String), 0(Integer), 10(Integer)
2020-03-05 10:32:50 -<==      Total: 10
2020-03-05 10:32:50 -==>  Preparing: select count(*) from heat WHERE user_type = ? 
2020-03-05 10:32:50 -==> Parameters: B(String)
2020-03-05 10:32:50 -<==      Total: 1
2020-03-05 10:32:50 -耗时 : 15
2020-03-05 10:32:50 -返回值 : com.bootdo.common.utils.PageUtils@706a8f6d
2020-03-05 10:32:55 -请求地址 : http://localhost:8081/moneyLog/heatLog/list
2020-03-05 10:32:55 -HTTP METHOD : GET
2020-03-05 10:32:55 -CLASS_METHOD : com.bootdo.moneyLog.controller.HeatLogController.list
2020-03-05 10:32:55 -参数 : [{limit=10, offset=0, userType=, heatType=, userOrg=, userId=, moneyDate=2020-03-05}]
2020-03-05 10:32:55 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,`heat_type`,`heat_money`,`money_date`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from heat_log WHERE `money_date` >= ? and `money_date` <= ? order by id asc limit ?, ? 
2020-03-05 10:32:55 -==> Parameters: 2020-03-05 00:00:00(String), 2020-03-05 23:59:59(String), 0(Integer), 10(Integer)
2020-03-05 10:32:55 -<==      Total: 2
2020-03-05 10:32:55 -==>  Preparing: select count(*) from heat_log WHERE `money_date` >= ? and `money_date` <= ? 
2020-03-05 10:32:55 -==> Parameters: 2020-03-05 00:00:00(String), 2020-03-05 23:59:59(String)
2020-03-05 10:32:55 -<==      Total: 1
2020-03-05 10:32:55 -耗时 : 11
2020-03-05 10:32:55 -返回值 : com.bootdo.common.utils.PageUtils@67c25674
2020-03-05 10:34:13 -请求地址 : http://localhost:8081/moneyLog/elecLog
2020-03-05 10:34:13 -HTTP METHOD : GET
2020-03-05 10:34:13 -CLASS_METHOD : com.bootdo.moneyLog.controller.ElecLogController.moneyLog
2020-03-05 10:34:13 -参数 : []
2020-03-05 10:34:13 -耗时 : 1
2020-03-05 10:34:13 -返回值 : moneyLog/elecLog/elecLog
2020-03-05 10:34:14 -请求地址 : http://localhost:8081/common/dict/list/elecType
2020-03-05 10:34:14 -请求地址 : http://localhost:8081/common/dict/list/userType
2020-03-05 10:34:14 -HTTP METHOD : GET
2020-03-05 10:34:14 -HTTP METHOD : GET
2020-03-05 10:34:14 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2020-03-05 10:34:14 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2020-03-05 10:34:14 -参数 : [elecType]
2020-03-05 10:34:14 -参数 : [userType]
2020-03-05 10:34:14 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2020-03-05 10:34:14 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2020-03-05 10:34:14 -==> Parameters: elecType(String)
2020-03-05 10:34:14 -==> Parameters: userType(String)
2020-03-05 10:34:14 -<==      Total: 4
2020-03-05 10:34:14 -耗时 : 4
2020-03-05 10:34:14 -<==      Total: 11
2020-03-05 10:34:14 -返回值 : [DictDO{id=145, name='银行转账', value='D', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=144, name='微信支付', value='C', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2020-03-05 10:34:14 -耗时 : 5
2020-03-05 10:34:14 -返回值 : [DictDO{id=180, name='矿民用', value='1', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=179, name='矿商业', value='2', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=178, name='矿工业1', value='3', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=177, name='矿工业2', value='4', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=176, name='矿工业3', value='5', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=175, name='乌民用', value='6', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=174, name='乌商用', value='7', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=173, name='乌工业', value='8', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=172, name='煤民用', value='9', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=171, name='煤商业', value='10', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=170, name='政府用电', value='11', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2020-03-05 10:34:14 -请求地址 : http://localhost:8081/moneyLog/elecLog/list
2020-03-05 10:34:14 -HTTP METHOD : GET
2020-03-05 10:34:14 -CLASS_METHOD : com.bootdo.moneyLog.controller.ElecLogController.list
2020-03-05 10:34:14 -参数 : [{limit=10, offset=0, userType=, elecType=, userOrg=, userId=, moneyDate=}]
2020-03-05 10:34:14 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`elec_type`,`elec_money`,`money_date`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec_log order by id asc limit ?, ? 
2020-03-05 10:34:14 -==> Parameters: 0(Integer), 10(Integer)
2020-03-05 10:34:14 -<==      Total: 10
2020-03-05 10:34:14 -==>  Preparing: select count(*) from elec_log 
2020-03-05 10:34:14 -==> Parameters: 
2020-03-05 10:34:14 -<==      Total: 1
2020-03-05 10:34:14 -耗时 : 15
2020-03-05 10:34:14 -返回值 : com.bootdo.common.utils.PageUtils@370f3050
2020-03-05 10:34:14 -请求地址 : http://localhost:8081/moneyLog/waterLog
2020-03-05 10:34:14 -HTTP METHOD : GET
2020-03-05 10:34:14 -CLASS_METHOD : com.bootdo.moneyLog.controller.WaterLogController.WaterLog
2020-03-05 10:34:14 -参数 : []
2020-03-05 10:34:14 -耗时 : 0
2020-03-05 10:34:14 -返回值 : moneyLog/waterLog/waterLog
2020-03-05 10:34:14 -请求地址 : http://localhost:8081/common/dict/list/userType
2020-03-05 10:34:14 -HTTP METHOD : GET
2020-03-05 10:34:14 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2020-03-05 10:34:14 -参数 : [userType]
2020-03-05 10:34:14 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2020-03-05 10:34:14 -==> Parameters: userType(String)
2020-03-05 10:34:14 -请求地址 : http://localhost:8081/common/dict/list/waterType
2020-03-05 10:34:14 -HTTP METHOD : GET
2020-03-05 10:34:14 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2020-03-05 10:34:14 -参数 : [waterType]
2020-03-05 10:34:14 -<==      Total: 4
2020-03-05 10:34:14 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2020-03-05 10:34:14 -耗时 : 4
2020-03-05 10:34:14 -==> Parameters: waterType(String)
2020-03-05 10:34:14 -返回值 : [DictDO{id=145, name='银行转账', value='D', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=144, name='微信支付', value='C', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2020-03-05 10:34:14 -<==      Total: 4
2020-03-05 10:34:14 -耗时 : 4
2020-03-05 10:34:14 -返回值 : [DictDO{id=188, name='民用水', value='1', type='waterType', description='水费性质', sort=10, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=187, name='商业水1', value='2', type='waterType', description='水费性质', sort=20, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=186, name='商业水2', value='3', type='waterType', description='水费性质', sort=30, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=185, name='商业水3', value='4', type='waterType', description='水费性质', sort=40, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2020-03-05 10:34:14 -请求地址 : http://localhost:8081/moneyLog/waterLog/list
2020-03-05 10:34:14 -HTTP METHOD : GET
2020-03-05 10:34:14 -CLASS_METHOD : com.bootdo.moneyLog.controller.WaterLogController.list
2020-03-05 10:34:14 -参数 : [{limit=10, offset=0, userType=, waterType=, userOrg=, userId=, moneyDate=}]
2020-03-05 10:34:14 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,`water_type`,`water_money`,`money_date`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from water_log order by id asc limit ?, ? 
2020-03-05 10:34:14 -==> Parameters: 0(Integer), 10(Integer)
2020-03-05 10:34:15 -<==      Total: 10
2020-03-05 10:34:15 -==>  Preparing: select count(*) from water_log 
2020-03-05 10:34:15 -==> Parameters: 
2020-03-05 10:34:15 -<==      Total: 1
2020-03-05 10:34:15 -耗时 : 209
2020-03-05 10:34:15 -返回值 : com.bootdo.common.utils.PageUtils@5a8562b0
2020-03-05 10:34:18 -请求地址 : http://localhost:8081/water/water
2020-03-05 10:34:18 -HTTP METHOD : GET
2020-03-05 10:34:18 -CLASS_METHOD : com.bootdo.water.controller.WaterController.Water
2020-03-05 10:34:18 -参数 : []
2020-03-05 10:34:18 -耗时 : 0
2020-03-05 10:34:18 -返回值 : water/water/water
2020-03-05 10:34:18 -请求地址 : http://localhost:8081/common/dict/list/userType
2020-03-05 10:34:18 -HTTP METHOD : GET
2020-03-05 10:34:18 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2020-03-05 10:34:18 -参数 : [userType]
2020-03-05 10:34:18 -请求地址 : http://localhost:8081/common/dict/list/waterType
2020-03-05 10:34:18 -HTTP METHOD : GET
2020-03-05 10:34:18 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2020-03-05 10:34:18 -参数 : [waterType]
2020-03-05 10:34:18 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2020-03-05 10:34:18 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2020-03-05 10:34:18 -==> Parameters: waterType(String)
2020-03-05 10:34:18 -==> Parameters: userType(String)
2020-03-05 10:34:18 -<==      Total: 4
2020-03-05 10:34:18 -<==      Total: 4
2020-03-05 10:34:18 -耗时 : 4
2020-03-05 10:34:18 -返回值 : [DictDO{id=145, name='银行转账', value='D', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=144, name='微信支付', value='C', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2020-03-05 10:34:18 -耗时 : 5
2020-03-05 10:34:18 -返回值 : [DictDO{id=188, name='民用水', value='1', type='waterType', description='水费性质', sort=10, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=187, name='商业水1', value='2', type='waterType', description='水费性质', sort=20, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=186, name='商业水2', value='3', type='waterType', description='水费性质', sort=30, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=185, name='商业水3', value='4', type='waterType', description='水费性质', sort=40, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2020-03-05 10:34:19 -请求地址 : http://localhost:8081/water/water/list
2020-03-05 10:34:19 -HTTP METHOD : GET
2020-03-05 10:34:19 -CLASS_METHOD : com.bootdo.water.controller.WaterController.list
2020-03-05 10:34:19 -参数 : [{limit=10, offset=0, userType=, waterType=, userOrg=, userId=, createTime=, queryType=1}]
2020-03-05 10:34:19 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`water_type`,`water_price`,`water_cost`,`water_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from water order by id asc limit ?, ? 
2020-03-05 10:34:19 -==> Parameters: 0(Integer), 10(Integer)
2020-03-05 10:34:19 -请求地址 : http://localhost:8081/water/waterInto
2020-03-05 10:34:19 -HTTP METHOD : GET
2020-03-05 10:34:19 -CLASS_METHOD : com.bootdo.water.controller.WaterIntoController.WaterInto
2020-03-05 10:34:19 -参数 : []
2020-03-05 10:34:19 -耗时 : 0
2020-03-05 10:34:19 -返回值 : water/waterInto/waterInto
2020-03-05 10:34:19 -<==      Total: 10
2020-03-05 10:34:19 -==>  Preparing: select count(*) from water 
2020-03-05 10:34:19 -==> Parameters: 
2020-03-05 10:34:19 -<==      Total: 1
2020-03-05 10:34:19 -耗时 : 504
2020-03-05 10:34:19 -返回值 : com.bootdo.common.utils.PageUtils@2722d984
2020-03-05 10:34:22 -请求地址 : http://localhost:8081/water/water/list
2020-03-05 10:34:22 -HTTP METHOD : GET
2020-03-05 10:34:22 -CLASS_METHOD : com.bootdo.water.controller.WaterController.list
2020-03-05 10:34:22 -参数 : [{limit=10, offset=0, userType=B, waterType=, userOrg=, userId=, createTime=, queryType=1}]
2020-03-05 10:34:22 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`water_type`,`water_price`,`water_cost`,`water_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from water WHERE user_type = ? order by id asc limit ?, ? 
2020-03-05 10:34:22 -==> Parameters: B(String), 0(Integer), 10(Integer)
2020-03-05 10:34:22 -<==      Total: 10
2020-03-05 10:34:22 -==>  Preparing: select count(*) from water WHERE user_type = ? 
2020-03-05 10:34:22 -==> Parameters: B(String)
2020-03-05 10:34:22 -<==      Total: 1
2020-03-05 10:34:22 -耗时 : 90
2020-03-05 10:34:22 -返回值 : com.bootdo.common.utils.PageUtils@93f1979
2020-03-05 10:35:19 -请求地址 : http://localhost:8081/system/sysDept/treeView
2020-03-05 10:35:19 -HTTP METHOD : GET
2020-03-05 10:35:19 -CLASS_METHOD : com.bootdo.system.controller.DeptController.treeView
2020-03-05 10:35:19 -参数 : [ModelAndView: materialized View is [null]; model is null]
2020-03-05 10:35:19 -耗时 : 0
2020-03-05 10:35:19 -返回值 : system/dept/deptTree
2020-03-05 10:35:19 -请求地址 : http://localhost:8081/system/sysDept/tree
2020-03-05 10:35:19 -HTTP METHOD : GET
2020-03-05 10:35:19 -CLASS_METHOD : com.bootdo.system.controller.DeptController.tree
2020-03-05 10:35:19 -参数 : []
2020-03-05 10:35:19 -==>  Preparing: select `dept_id`,`parent_id`,`name`,`order_num`,`del_flag` from sys_dept order by dept_id desc 
2020-03-05 10:35:19 -==> Parameters: 
2020-03-05 10:35:19 -<==      Total: 3
2020-03-05 10:35:19 -耗时 : 4
2020-03-05 10:35:19 -返回值 : {"checked":false,"children":[{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"3","parentId":"1","state":{"opened":true},"text":"牙星"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"2","parentId":"1","state":{"opened":true},"text":"五九"}],"hasChildren":true,"hasParent":false,"id":"1","parentId":"0","state":{"opened":true},"text":"总公司"}
2020-03-05 10:35:25 -请求地址 : http://localhost:8081/water/waterInto/importWaterIntoExcel
2020-03-05 10:35:25 -HTTP METHOD : POST
2020-03-05 10:35:25 -CLASS_METHOD : com.bootdo.water.controller.WaterIntoController.importWaterIntoExcel
2020-03-05 10:35:25 -参数 : [org.springframework.web.multipart.support.StandardMultipartHttpServletRequest$StandardMultipartFile@7e56f80, com.bootdo.water.vo.WaterVo@6f855d59, org.apache.shiro.web.servlet.ShiroHttpServletResponse@7d46d4e2]
2020-03-05 10:35:25 -==>  Preparing: UPDATE WATER SET WATER_SUM = WATER_SUM - ? WHERE CREATE_TIME = ? and user_org = ? and USER_ID = ? and USER_NAME = ? and `user_type` = 'B' 
2020-03-05 10:35:25 -==> Parameters: 100(BigDecimal), 2019-05(String), 2(String), 1-0005(String), 李占林(String)
2020-03-05 10:35:25 -<==    Updates: 1
2020-03-05 10:35:25 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`water_type`,`water_price`,`water_cost`,`water_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from water WHERE CREATE_TIME = ? and user_org = ? and USER_ID = ? and USER_NAME = ? and `user_type` = 'B' 
2020-03-05 10:35:25 -==> Parameters: 2019-05(String), 2(String), 1-0005(String), 李占林(String)
2020-03-05 10:35:25 -<==      Total: 1
2020-03-05 10:35:25 -==>  Preparing: insert into water_log ( `user_id`, `user_name`, `user_type`, `user_org`, `water_type`, `water_money`, `money_date`, `create_time`, `create_by`, `update_time`, `update_by`, `remark` ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-03-05 10:35:25 -==> Parameters: 1-0005(String), 李占林(String), B(String), 2(String), 1(String), 100(BigDecimal), 2020-03-05 10:35:25.833(Timestamp), 2019-05(String), admin(String), 2020-03-05 10:35:25.833(Timestamp), admin(String), null
2020-03-05 10:35:25 -<==    Updates: 1
2020-03-05 10:35:25 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`start`,`end`,`hu`,`elec_price`,`elec_amount`,`elec_cost`,`elec_sum`,`elec_money`,`heat_price`,`heat_area`,`heat_cost`,`heat_sum`,`heat_money`,`water_price`,`water_cost`,`water_sum`,`water_money`,`print_date`,`print_money`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from print where user_id = ? and user_org = ? and create_time = ? and date_format(print_date,'%Y-%m-%d') = date_format(?,'%Y-%m-%d') 
2020-03-05 10:35:25 -==> Parameters: 1-0005(String), 2(String), 2019-05(String), 2020-03-05 10:35:25.833(Timestamp)
2020-03-05 10:35:25 -<==      Total: 1
2020-03-05 10:35:25 -==>  Preparing: update print SET `user_id` = ?, `user_name` = ?, `user_type` = ?, `user_org` = ?, `heat_price` = ?, `heat_area` = ?, `heat_cost` = ?, `heat_sum` = ?, `heat_money` = ?, `water_price` = ?, `water_cost` = ?, `water_sum` = ?, `water_money` = ?, `print_date` = ?, `create_time` = ?, `create_by` = ?, `update_time` = ?, `update_by` = ? where id = ? 
2020-03-05 10:35:25 -==> Parameters: 1-0005(String), 李占林(String), B(String), 2(String), 3.50(BigDecimal), 45.78(BigDecimal), 80.12(BigDecimal), -99.99(BigDecimal), 100.00(BigDecimal), 5.00(BigDecimal), 5.00(BigDecimal), -65.00(BigDecimal), 100(BigDecimal), 2020-03-05 10:35:25.844(Timestamp), 2019-05(String), admin(String), 2020-03-05 10:35:25.844(Timestamp), admin(String), 12257(Long)
2020-03-05 10:35:25 -<==    Updates: 1
2020-03-05 10:35:25 -==>  Preparing: UPDATE WATER SET WATER_SUM = WATER_SUM - ? WHERE CREATE_TIME = ? and user_org = ? and USER_ID = ? and USER_NAME = ? and `user_type` = 'B' 
2020-03-05 10:35:25 -==> Parameters: 100(BigDecimal), 2019-05(String), 2(String), 1-0008(String), 王明刚1(String)
2020-03-05 10:35:25 -<==    Updates: 0
2020-03-05 10:35:25 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`water_type`,`water_price`,`water_cost`,`water_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from water WHERE CREATE_TIME = ? and user_org = ? and USER_ID = ? and USER_NAME = ? and `user_type` = 'B' 
2020-03-05 10:35:25 -==> Parameters: 2019-05(String), 2(String), 1-0008(String), 王明刚1(String)
2020-03-05 10:35:25 -<==      Total: 0
2020-03-05 10:35:25 -耗时 : 320
2020-03-05 10:35:25 -返回值 : java.lang.Exception: 第3行，数据与数据库不匹配请认真编写
2020-03-05 10:35:32 -请求地址 : http://localhost:8081/water/water/list
2020-03-05 10:35:32 -HTTP METHOD : GET
2020-03-05 10:35:32 -CLASS_METHOD : com.bootdo.water.controller.WaterController.list
2020-03-05 10:35:32 -参数 : [{limit=10, offset=0, userType=B, waterType=, userOrg=, userId=, createTime=, queryType=1}]
2020-03-05 10:35:32 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`water_type`,`water_price`,`water_cost`,`water_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from water WHERE user_type = ? order by id asc limit ?, ? 
2020-03-05 10:35:32 -==> Parameters: B(String), 0(Integer), 10(Integer)
2020-03-05 10:35:32 -<==      Total: 10
2020-03-05 10:35:32 -==>  Preparing: select count(*) from water WHERE user_type = ? 
2020-03-05 10:35:32 -==> Parameters: B(String)
2020-03-05 10:35:32 -<==      Total: 1
2020-03-05 10:35:32 -耗时 : 15
2020-03-05 10:35:32 -返回值 : com.bootdo.common.utils.PageUtils@1d05d432
2020-03-05 10:36:43 -请求地址 : http://localhost:8081/water/waterInto/importWaterIntoExcel
2020-03-05 10:36:43 -HTTP METHOD : POST
2020-03-05 10:36:43 -CLASS_METHOD : com.bootdo.water.controller.WaterIntoController.importWaterIntoExcel
2020-03-05 10:36:43 -参数 : [org.springframework.web.multipart.support.StandardMultipartHttpServletRequest$StandardMultipartFile@16d2fc7, com.bootdo.water.vo.WaterVo@45a1c6e2, org.apache.shiro.web.servlet.ShiroHttpServletResponse@4963a815]
2020-03-05 10:36:43 -==>  Preparing: UPDATE WATER SET WATER_SUM = WATER_SUM - ? WHERE CREATE_TIME = ? and user_org = ? and USER_ID = ? and USER_NAME = ? and `user_type` = 'B' 
2020-03-05 10:36:43 -==> Parameters: 100(BigDecimal), 2019-05(String), 2(String), 1-0005(String), 李占林(String)
2020-03-05 10:36:43 -<==    Updates: 1
2020-03-05 10:36:43 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`water_type`,`water_price`,`water_cost`,`water_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from water WHERE CREATE_TIME = ? and user_org = ? and USER_ID = ? and USER_NAME = ? and `user_type` = 'B' 
2020-03-05 10:36:43 -==> Parameters: 2019-05(String), 2(String), 1-0005(String), 李占林(String)
2020-03-05 10:36:43 -<==      Total: 1
2020-03-05 10:36:43 -==>  Preparing: insert into water_log ( `user_id`, `user_name`, `user_type`, `user_org`, `water_type`, `water_money`, `money_date`, `create_time`, `create_by`, `update_time`, `update_by`, `remark` ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-03-05 10:36:43 -==> Parameters: 1-0005(String), 李占林(String), B(String), 2(String), 1(String), 100(BigDecimal), 2020-03-05 10:36:43.959(Timestamp), 2019-05(String), admin(String), 2020-03-05 10:36:43.959(Timestamp), admin(String), null
2020-03-05 10:36:43 -<==    Updates: 1
2020-03-05 10:36:43 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`start`,`end`,`hu`,`elec_price`,`elec_amount`,`elec_cost`,`elec_sum`,`elec_money`,`heat_price`,`heat_area`,`heat_cost`,`heat_sum`,`heat_money`,`water_price`,`water_cost`,`water_sum`,`water_money`,`print_date`,`print_money`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from print where user_id = ? and user_org = ? and create_time = ? and date_format(print_date,'%Y-%m-%d') = date_format(?,'%Y-%m-%d') 
2020-03-05 10:36:43 -==> Parameters: 1-0005(String), 2(String), 2019-05(String), 2020-03-05 10:36:43.959(Timestamp)
2020-03-05 10:36:43 -<==      Total: 1
2020-03-05 10:36:43 -==>  Preparing: update print SET `user_id` = ?, `user_name` = ?, `user_type` = ?, `user_org` = ?, `heat_price` = ?, `heat_area` = ?, `heat_cost` = ?, `heat_sum` = ?, `heat_money` = ?, `water_price` = ?, `water_cost` = ?, `water_sum` = ?, `water_money` = ?, `print_date` = ?, `create_time` = ?, `create_by` = ?, `update_time` = ?, `update_by` = ? where id = ? 
2020-03-05 10:36:43 -==> Parameters: 1-0005(String), 李占林(String), B(String), 2(String), 3.50(BigDecimal), 45.78(BigDecimal), 80.12(BigDecimal), -99.99(BigDecimal), 100.00(BigDecimal), 5.00(BigDecimal), 5.00(BigDecimal), -65.00(BigDecimal), 100(BigDecimal), 2020-03-05 10:36:43.981(Timestamp), 2019-05(String), admin(String), 2020-03-05 10:36:43.981(Timestamp), admin(String), 12257(Long)
2020-03-05 10:36:43 -<==    Updates: 1
2020-03-05 10:36:43 -==>  Preparing: UPDATE WATER SET WATER_SUM = WATER_SUM - ? WHERE CREATE_TIME = ? and user_org = ? and USER_ID = ? and USER_NAME = ? and `user_type` = 'B' 
2020-03-05 10:36:43 -==> Parameters: 100(BigDecimal), 2019-05(String), 2(String), 1-0008(String), 王明刚(String)
2020-03-05 10:36:44 -<==    Updates: 1
2020-03-05 10:36:44 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`water_type`,`water_price`,`water_cost`,`water_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from water WHERE CREATE_TIME = ? and user_org = ? and USER_ID = ? and USER_NAME = ? and `user_type` = 'B' 
2020-03-05 10:36:44 -==> Parameters: 2019-05(String), 2(String), 1-0008(String), 王明刚(String)
2020-03-05 10:36:44 -<==      Total: 1
2020-03-05 10:36:44 -==>  Preparing: insert into water_log ( `user_id`, `user_name`, `user_type`, `user_org`, `water_type`, `water_money`, `money_date`, `create_time`, `create_by`, `update_time`, `update_by`, `remark` ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-03-05 10:36:44 -==> Parameters: 1-0008(String), 王明刚(String), B(String), 2(String), 1(String), 100(BigDecimal), 2020-03-05 10:36:44.04(Timestamp), 2019-05(String), admin(String), 2020-03-05 10:36:44.04(Timestamp), admin(String), null
2020-03-05 10:36:44 -<==    Updates: 1
2020-03-05 10:36:44 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`start`,`end`,`hu`,`elec_price`,`elec_amount`,`elec_cost`,`elec_sum`,`elec_money`,`heat_price`,`heat_area`,`heat_cost`,`heat_sum`,`heat_money`,`water_price`,`water_cost`,`water_sum`,`water_money`,`print_date`,`print_money`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from print where user_id = ? and user_org = ? and create_time = ? and date_format(print_date,'%Y-%m-%d') = date_format(?,'%Y-%m-%d') 
2020-03-05 10:36:44 -==> Parameters: 1-0008(String), 2(String), 2019-05(String), 2020-03-05 10:36:44.04(Timestamp)
2020-03-05 10:36:44 -<==      Total: 1
2020-03-05 10:36:44 -==>  Preparing: update print SET `user_id` = ?, `user_name` = ?, `user_type` = ?, `user_org` = ?, `heat_price` = ?, `heat_area` = ?, `heat_cost` = ?, `heat_sum` = ?, `heat_money` = ?, `water_price` = ?, `water_cost` = ?, `water_sum` = ?, `water_money` = ?, `print_date` = ?, `create_time` = ?, `create_by` = ?, `update_time` = ?, `update_by` = ? where id = ? 
2020-03-05 10:36:44 -==> Parameters: 1-0008(String), 王明刚(String), B(String), 2(String), 3.50(BigDecimal), 45.78(BigDecimal), 80.12(BigDecimal), -99.99(BigDecimal), 100.00(BigDecimal), 5.00(BigDecimal), 5.00(BigDecimal), -65.00(BigDecimal), 100(BigDecimal), 2020-03-05 10:36:44.046(Timestamp), 2019-05(String), admin(String), 2020-03-05 10:36:44.046(Timestamp), admin(String), 12258(Long)
2020-03-05 10:36:44 -<==    Updates: 1
2020-03-05 10:36:44 -耗时 : 512
2020-03-05 10:36:44 -返回值 : success
2020-03-05 10:36:48 -请求地址 : http://localhost:8081/water/water/list
2020-03-05 10:36:48 -HTTP METHOD : GET
2020-03-05 10:36:48 -CLASS_METHOD : com.bootdo.water.controller.WaterController.list
2020-03-05 10:36:48 -参数 : [{limit=10, offset=0, userType=B, waterType=, userOrg=, userId=, createTime=, queryType=1}]
2020-03-05 10:36:48 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`water_type`,`water_price`,`water_cost`,`water_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from water WHERE user_type = ? order by id asc limit ?, ? 
2020-03-05 10:36:48 -==> Parameters: B(String), 0(Integer), 10(Integer)
2020-03-05 10:36:48 -<==      Total: 10
2020-03-05 10:36:48 -==>  Preparing: select count(*) from water WHERE user_type = ? 
2020-03-05 10:36:48 -==> Parameters: B(String)
2020-03-05 10:36:48 -<==      Total: 1
2020-03-05 10:36:48 -耗时 : 14
2020-03-05 10:36:48 -返回值 : com.bootdo.common.utils.PageUtils@129d4741
2020-03-05 10:36:55 -请求地址 : http://localhost:8081/moneyLog/waterLog/list
2020-03-05 10:36:55 -HTTP METHOD : GET
2020-03-05 10:36:55 -CLASS_METHOD : com.bootdo.moneyLog.controller.WaterLogController.list
2020-03-05 10:36:55 -参数 : [{limit=10, offset=0, userType=, waterType=, userOrg=, userId=, moneyDate=2020-03-05}]
2020-03-05 10:36:55 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,`water_type`,`water_money`,`money_date`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from water_log WHERE `money_date` >= ? and `money_date` <= ? order by id asc limit ?, ? 
2020-03-05 10:36:55 -==> Parameters: 2020-03-05 00:00:00(String), 2020-03-05 23:59:59(String), 0(Integer), 10(Integer)
2020-03-05 10:36:55 -<==      Total: 2
2020-03-05 10:36:55 -==>  Preparing: select count(*) from water_log WHERE `money_date` >= ? and `money_date` <= ? 
2020-03-05 10:36:55 -==> Parameters: 2020-03-05 00:00:00(String), 2020-03-05 23:59:59(String)
2020-03-05 10:36:55 -<==      Total: 1
2020-03-05 10:36:55 -耗时 : 8
2020-03-05 10:36:55 -返回值 : com.bootdo.common.utils.PageUtils@7038f5a9
