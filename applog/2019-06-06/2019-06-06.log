2019-06-06 11:33:58 -Starting BootdoApplication on PC-201905091110 with PID 12600 (D:\eclipse2018-work\bootdo\target\classes started by Administrator in D:\eclipse2018-work\bootdo)
2019-06-06 11:33:58 -Running with Spring Boot v2.0.3.RELEASE, Spring v5.0.7.RELEASE
2019-06-06 11:33:58 -The following profiles are active: dev
2019-06-06 11:33:58 -Refreshing org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@13e3c1c7: startup date [Thu Jun 06 11:33:58 CST 2019]; root of context hierarchy
2019-06-06 11:34:06 -Multiple Spring Data modules found, entering strict repository configuration mode!
2019-06-06 11:34:10 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$8111d5e4] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-06 11:34:10 -Bean 'shiroConfig' of type [com.bootdo.system.config.ShiroConfig$$EnhancerBySpringCGLIB$$736b048b] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-06 11:34:11 -Bean 'userRealm' of type [com.bootdo.system.shiro.UserRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-06 11:34:12 -Bean 'cacheManager2' of type [net.sf.ehcache.CacheManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-06 11:34:12 -Bean 'ehCacheManager' of type [org.apache.shiro.cache.ehcache.EhCacheManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-06 11:34:12 -Cache with name 'com.bootdo.system.shiro.UserRealm.authorizationCache' does not yet exist.  Creating now.
2019-06-06 11:34:12 -Added EhCache named [com.bootdo.system.shiro.UserRealm.authorizationCache]
2019-06-06 11:34:12 -Bean 'sessionDAO' of type [org.apache.shiro.session.mgt.eis.MemorySessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-06 11:34:12 -Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-06 11:34:13 -Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-06 11:34:13 -Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-06 11:34:15 -Tomcat initialized with port(s): 8081 (http)
2019-06-06 11:34:15 -Initializing ProtocolHandler ["http-nio-8081"]
2019-06-06 11:34:15 -Starting service [Tomcat]
2019-06-06 11:34:15 -Starting Servlet Engine: Apache Tomcat/8.5.31
2019-06-06 11:34:15 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [D:\Java\JDK\jdk1.8.0_102\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;D:\Java\JDK\jdk1.8.0_102\jre\bin;D:/Java/JRE/bin/server;D:/Java/JRE/bin;D:/Java/JRE/lib/amd64;C:\ProgramData\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Windows\System32\OpenSSH\;%JAVA_HOME\bin%;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;;C:\Users\Administrator\Desktop;;.]
2019-06-06 11:34:16 -Initializing Spring embedded WebApplicationContext
2019-06-06 11:34:16 -Root WebApplicationContext: initialization completed in 17613 ms
2019-06-06 11:34:17 -Mapping filter: 'characterEncodingFilter' to: [/*]
2019-06-06 11:34:17 -Mapping filter: 'hiddenHttpMethodFilter' to: [/*]
2019-06-06 11:34:17 -Mapping filter: 'httpPutFormContentFilter' to: [/*]
2019-06-06 11:34:17 -Mapping filter: 'requestContextFilter' to: [/*]
2019-06-06 11:34:17 -Filter xssFilter was not registered (disabled)
2019-06-06 11:34:17 -Mapping filter: 'webStatFilter' to urls: [/*]
2019-06-06 11:34:17 -Mapping filter: 'shiroFilterFactoryBean' to: [/*]
2019-06-06 11:34:17 -Servlet statViewServlet mapped to [/druid/*]
2019-06-06 11:34:17 -Servlet dispatcherServlet mapped to [/]
2019-06-06 11:34:23 -ApplicationContext registed-->org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@13e3c1c7: startup date [Thu Jun 06 11:33:58 CST 2019]; root of context hierarchy
2019-06-06 11:34:24 -Using default implementation for ThreadExecutor
2019-06-06 11:34:25 -Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2019-06-06 11:34:25 -Quartz Scheduler v.2.3.0 created.
2019-06-06 11:34:25 -RAMJobStore initialized.
2019-06-06 11:34:25 -Scheduler meta-data: Quartz Scheduler (v2.3.0) 'schedulerFactoryBean' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2019-06-06 11:34:25 -Quartz scheduler 'schedulerFactoryBean' initialized from an externally provided properties instance.
2019-06-06 11:34:25 -Quartz scheduler version: 2.3.0
2019-06-06 11:34:25 -JobFactory set to: com.bootdo.common.quartz.factory.JobFactory@5ad50b02
2019-06-06 11:34:25 -Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'welcomeJob': Unsatisfied dependency expressed through field 'template'; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type 'org.springframework.messaging.simp.SimpMessagingTemplate' available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {@org.springframework.beans.factory.annotation.Autowired(required=true)}
2019-06-06 11:34:25 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED shutting down.
2019-06-06 11:34:25 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED paused.
2019-06-06 11:34:25 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED shutdown complete.
2019-06-06 11:34:25 -Shutting down Quartz Scheduler
2019-06-06 11:34:25 -Stopping service [Tomcat]
2019-06-06 11:34:25 -

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2019-06-06 11:34:25 -

***************************
APPLICATION FAILED TO START
***************************

Description:

Field template in com.bootdo.common.task.WelcomeJob required a bean of type 'org.springframework.messaging.simp.SimpMessagingTemplate' that could not be found.


Action:

Consider defining a bean of type 'org.springframework.messaging.simp.SimpMessagingTemplate' in your configuration.

2019-06-06 11:35:42 -Starting BootdoApplication on PC-201905091110 with PID 22648 (D:\eclipse2018-work\bootdo\target\classes started by Administrator in D:\eclipse2018-work\bootdo)
2019-06-06 11:35:42 -Running with Spring Boot v2.0.3.RELEASE, Spring v5.0.7.RELEASE
2019-06-06 11:35:42 -The following profiles are active: dev
2019-06-06 11:35:42 -Refreshing org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@269f4bad: startup date [Thu Jun 06 11:35:42 CST 2019]; root of context hierarchy
2019-06-06 11:35:49 -Multiple Spring Data modules found, entering strict repository configuration mode!
2019-06-06 11:35:52 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$b2944b0e] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-06 11:35:52 -Bean 'shiroConfig' of type [com.bootdo.system.config.ShiroConfig$$EnhancerBySpringCGLIB$$a4ed79b5] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-06 11:35:53 -Bean 'userRealm' of type [com.bootdo.system.shiro.UserRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-06 11:35:53 -Bean 'cacheManager2' of type [net.sf.ehcache.CacheManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-06 11:35:53 -Bean 'ehCacheManager' of type [org.apache.shiro.cache.ehcache.EhCacheManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-06 11:35:53 -Cache with name 'com.bootdo.system.shiro.UserRealm.authorizationCache' does not yet exist.  Creating now.
2019-06-06 11:35:53 -Added EhCache named [com.bootdo.system.shiro.UserRealm.authorizationCache]
2019-06-06 11:35:53 -Bean 'sessionDAO' of type [org.apache.shiro.session.mgt.eis.MemorySessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-06 11:35:53 -Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-06 11:35:53 -Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-06 11:35:53 -Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-06 11:35:55 -Tomcat initialized with port(s): 8081 (http)
2019-06-06 11:35:55 -Initializing ProtocolHandler ["http-nio-8081"]
2019-06-06 11:35:55 -Starting service [Tomcat]
2019-06-06 11:35:55 -Starting Servlet Engine: Apache Tomcat/8.5.31
2019-06-06 11:35:55 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [D:\Java\JDK\jdk1.8.0_102\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;D:\Java\JDK\jdk1.8.0_102\jre\bin;D:/Java/JRE/bin/server;D:/Java/JRE/bin;D:/Java/JRE/lib/amd64;C:\ProgramData\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Windows\System32\OpenSSH\;%JAVA_HOME\bin%;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;;C:\Users\Administrator\Desktop;;.]
2019-06-06 11:35:55 -Initializing Spring embedded WebApplicationContext
2019-06-06 11:35:55 -Root WebApplicationContext: initialization completed in 12920 ms
2019-06-06 11:35:56 -Mapping filter: 'characterEncodingFilter' to: [/*]
2019-06-06 11:35:56 -Mapping filter: 'hiddenHttpMethodFilter' to: [/*]
2019-06-06 11:35:56 -Mapping filter: 'httpPutFormContentFilter' to: [/*]
2019-06-06 11:35:56 -Mapping filter: 'requestContextFilter' to: [/*]
2019-06-06 11:35:56 -Filter xssFilter was not registered (disabled)
2019-06-06 11:35:56 -Mapping filter: 'webStatFilter' to urls: [/*]
2019-06-06 11:35:56 -Mapping filter: 'shiroFilterFactoryBean' to: [/*]
2019-06-06 11:35:56 -Servlet statViewServlet mapped to [/druid/*]
2019-06-06 11:35:56 -Servlet dispatcherServlet mapped to [/]
2019-06-06 11:36:00 -ApplicationContext registed-->org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@269f4bad: startup date [Thu Jun 06 11:35:42 CST 2019]; root of context hierarchy
2019-06-06 11:36:01 -Using default implementation for ThreadExecutor
2019-06-06 11:36:01 -Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2019-06-06 11:36:01 -Quartz Scheduler v.2.3.0 created.
2019-06-06 11:36:01 -RAMJobStore initialized.
2019-06-06 11:36:01 -Scheduler meta-data: Quartz Scheduler (v2.3.0) 'schedulerFactoryBean' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2019-06-06 11:36:01 -Quartz scheduler 'schedulerFactoryBean' initialized from an externally provided properties instance.
2019-06-06 11:36:01 -Quartz scheduler version: 2.3.0
2019-06-06 11:36:01 -JobFactory set to: com.bootdo.common.quartz.factory.JobFactory@6f7c9755
2019-06-06 11:36:01 -Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'welcomeJob': Unsatisfied dependency expressed through field 'template'; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type 'org.springframework.messaging.simp.SimpMessagingTemplate' available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {@org.springframework.beans.factory.annotation.Autowired(required=true)}
2019-06-06 11:36:01 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED shutting down.
2019-06-06 11:36:01 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED paused.
2019-06-06 11:36:01 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED shutdown complete.
2019-06-06 11:36:01 -Shutting down Quartz Scheduler
2019-06-06 11:36:01 -Stopping service [Tomcat]
2019-06-06 11:36:01 -

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2019-06-06 11:36:02 -

***************************
APPLICATION FAILED TO START
***************************

Description:

Field template in com.bootdo.common.task.WelcomeJob required a bean of type 'org.springframework.messaging.simp.SimpMessagingTemplate' that could not be found.


Action:

Consider defining a bean of type 'org.springframework.messaging.simp.SimpMessagingTemplate' in your configuration.

2019-06-06 14:03:50 -Starting BootdoApplication on PC-201905091110 with PID 8184 (D:\eclipse2018-work\bootdo\target\classes started by Administrator in D:\eclipse2018-work\bootdo)
2019-06-06 14:03:50 -Running with Spring Boot v2.0.3.RELEASE, Spring v5.0.7.RELEASE
2019-06-06 14:03:50 -The following profiles are active: dev
2019-06-06 14:03:50 -Refreshing org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@2e3967ea: startup date [Thu Jun 06 14:03:50 CST 2019]; root of context hierarchy
2019-06-06 14:03:54 -Multiple Spring Data modules found, entering strict repository configuration mode!
2019-06-06 14:03:56 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$fb208d09] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-06 14:03:56 -Bean 'shiroConfig' of type [com.bootdo.system.config.ShiroConfig$$EnhancerBySpringCGLIB$$ed79bbb0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-06 14:03:57 -Bean 'userRealm' of type [com.bootdo.system.shiro.UserRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-06 14:03:58 -Bean 'cacheManager2' of type [net.sf.ehcache.CacheManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-06 14:03:58 -Bean 'ehCacheManager' of type [org.apache.shiro.cache.ehcache.EhCacheManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-06 14:03:58 -Cache with name 'com.bootdo.system.shiro.UserRealm.authorizationCache' does not yet exist.  Creating now.
2019-06-06 14:03:58 -Added EhCache named [com.bootdo.system.shiro.UserRealm.authorizationCache]
2019-06-06 14:03:58 -Bean 'sessionDAO' of type [org.apache.shiro.session.mgt.eis.MemorySessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-06 14:03:58 -Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-06 14:03:58 -Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-06 14:03:58 -Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-06 14:04:00 -Tomcat initialized with port(s): 8081 (http)
2019-06-06 14:04:00 -Initializing ProtocolHandler ["http-nio-8081"]
2019-06-06 14:04:00 -Starting service [Tomcat]
2019-06-06 14:04:00 -Starting Servlet Engine: Apache Tomcat/8.5.31
2019-06-06 14:04:00 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [D:\Java\JDK\jdk1.8.0_102\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;D:/Java/JRE/bin/server;D:/Java/JRE/bin;D:/Java/JRE/lib/amd64;C:\ProgramData\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Windows\System32\OpenSSH\;%JAVA_HOME\bin%;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;;C:\Users\Administrator\Desktop;;.]
2019-06-06 14:04:00 -Initializing Spring embedded WebApplicationContext
2019-06-06 14:04:00 -Root WebApplicationContext: initialization completed in 10267 ms
2019-06-06 14:04:01 -Mapping filter: 'characterEncodingFilter' to: [/*]
2019-06-06 14:04:01 -Mapping filter: 'hiddenHttpMethodFilter' to: [/*]
2019-06-06 14:04:01 -Mapping filter: 'httpPutFormContentFilter' to: [/*]
2019-06-06 14:04:01 -Mapping filter: 'requestContextFilter' to: [/*]
2019-06-06 14:04:01 -Filter xssFilter was not registered (disabled)
2019-06-06 14:04:01 -Mapping filter: 'webStatFilter' to urls: [/*]
2019-06-06 14:04:01 -Mapping filter: 'shiroFilterFactoryBean' to: [/*]
2019-06-06 14:04:01 -Servlet statViewServlet mapped to [/druid/*]
2019-06-06 14:04:01 -Servlet dispatcherServlet mapped to [/]
2019-06-06 14:04:06 -ApplicationContext registed-->org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@2e3967ea: startup date [Thu Jun 06 14:03:50 CST 2019]; root of context hierarchy
2019-06-06 14:04:06 -Using default implementation for ThreadExecutor
2019-06-06 14:04:07 -Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2019-06-06 14:04:07 -Quartz Scheduler v.2.3.0 created.
2019-06-06 14:04:07 -RAMJobStore initialized.
2019-06-06 14:04:07 -Scheduler meta-data: Quartz Scheduler (v2.3.0) 'schedulerFactoryBean' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2019-06-06 14:04:07 -Quartz scheduler 'schedulerFactoryBean' initialized from an externally provided properties instance.
2019-06-06 14:04:07 -Quartz scheduler version: 2.3.0
2019-06-06 14:04:07 -JobFactory set to: com.bootdo.common.quartz.factory.JobFactory@64dc86c6
2019-06-06 14:04:07 -Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'welcomeJob': Unsatisfied dependency expressed through field 'template'; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type 'org.springframework.messaging.simp.SimpMessagingTemplate' available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {@org.springframework.beans.factory.annotation.Autowired(required=true)}
2019-06-06 14:04:07 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED shutting down.
2019-06-06 14:04:07 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED paused.
2019-06-06 14:04:07 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED shutdown complete.
2019-06-06 14:04:07 -Shutting down Quartz Scheduler
2019-06-06 14:04:07 -Stopping service [Tomcat]
2019-06-06 14:04:07 -

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2019-06-06 14:04:07 -

***************************
APPLICATION FAILED TO START
***************************

Description:

Field template in com.bootdo.common.task.WelcomeJob required a bean of type 'org.springframework.messaging.simp.SimpMessagingTemplate' that could not be found.


Action:

Consider defining a bean of type 'org.springframework.messaging.simp.SimpMessagingTemplate' in your configuration.

2019-06-06 14:09:12 -Starting BootdoApplication on PC-201905091110 with PID 26240 (D:\eclipse2018-work\bootdo\target\classes started by Administrator in D:\eclipse2018-work\bootdo)
2019-06-06 14:09:12 -Running with Spring Boot v2.0.3.RELEASE, Spring v5.0.7.RELEASE
2019-06-06 14:09:12 -The following profiles are active: dev
2019-06-06 14:09:13 -Refreshing org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@2e3967ea: startup date [Thu Jun 06 14:09:13 CST 2019]; root of context hierarchy
2019-06-06 14:09:16 -Multiple Spring Data modules found, entering strict repository configuration mode!
2019-06-06 14:09:18 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$1c35e8d] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-06 14:09:18 -Bean 'shiroConfig' of type [com.bootdo.system.config.ShiroConfig$$EnhancerBySpringCGLIB$$f41c8d34] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-06 14:09:19 -Bean 'userRealm' of type [com.bootdo.system.shiro.UserRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-06 14:09:19 -Bean 'cacheManager2' of type [net.sf.ehcache.CacheManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-06 14:09:19 -Bean 'ehCacheManager' of type [org.apache.shiro.cache.ehcache.EhCacheManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-06 14:09:19 -Cache with name 'com.bootdo.system.shiro.UserRealm.authorizationCache' does not yet exist.  Creating now.
2019-06-06 14:09:19 -Added EhCache named [com.bootdo.system.shiro.UserRealm.authorizationCache]
2019-06-06 14:09:19 -Bean 'sessionDAO' of type [org.apache.shiro.session.mgt.eis.MemorySessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-06 14:09:19 -Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-06 14:09:19 -Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-06 14:09:19 -Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-06 14:09:21 -Tomcat initialized with port(s): 8081 (http)
2019-06-06 14:09:21 -Initializing ProtocolHandler ["http-nio-8081"]
2019-06-06 14:09:21 -Starting service [Tomcat]
2019-06-06 14:09:21 -Starting Servlet Engine: Apache Tomcat/8.5.31
2019-06-06 14:09:21 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [D:\Java\JDK\jdk1.8.0_102\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;D:/Java/JRE/bin/server;D:/Java/JRE/bin;D:/Java/JRE/lib/amd64;C:\ProgramData\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Windows\System32\OpenSSH\;%JAVA_HOME\bin%;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;;C:\Users\Administrator\Desktop;;.]
2019-06-06 14:09:21 -Initializing Spring embedded WebApplicationContext
2019-06-06 14:09:21 -Root WebApplicationContext: initialization completed in 8487 ms
2019-06-06 14:09:22 -Mapping filter: 'characterEncodingFilter' to: [/*]
2019-06-06 14:09:22 -Mapping filter: 'hiddenHttpMethodFilter' to: [/*]
2019-06-06 14:09:22 -Mapping filter: 'httpPutFormContentFilter' to: [/*]
2019-06-06 14:09:22 -Mapping filter: 'requestContextFilter' to: [/*]
2019-06-06 14:09:22 -Filter xssFilter was not registered (disabled)
2019-06-06 14:09:22 -Mapping filter: 'webStatFilter' to urls: [/*]
2019-06-06 14:09:22 -Mapping filter: 'shiroFilterFactoryBean' to: [/*]
2019-06-06 14:09:22 -Servlet statViewServlet mapped to [/druid/*]
2019-06-06 14:09:22 -Servlet dispatcherServlet mapped to [/]
2019-06-06 14:09:25 -ApplicationContext registed-->org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@2e3967ea: startup date [Thu Jun 06 14:09:13 CST 2019]; root of context hierarchy
2019-06-06 14:09:26 -Using default implementation for ThreadExecutor
2019-06-06 14:09:26 -Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2019-06-06 14:09:26 -Quartz Scheduler v.2.3.0 created.
2019-06-06 14:09:26 -RAMJobStore initialized.
2019-06-06 14:09:26 -Scheduler meta-data: Quartz Scheduler (v2.3.0) 'schedulerFactoryBean' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2019-06-06 14:09:26 -Quartz scheduler 'schedulerFactoryBean' initialized from an externally provided properties instance.
2019-06-06 14:09:26 -Quartz scheduler version: 2.3.0
2019-06-06 14:09:26 -JobFactory set to: com.bootdo.common.quartz.factory.JobFactory@5f3b84bd
2019-06-06 14:09:26 -Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'welcomeJob': Unsatisfied dependency expressed through field 'template'; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type 'org.springframework.messaging.simp.SimpMessagingTemplate' available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {@org.springframework.beans.factory.annotation.Autowired(required=true)}
2019-06-06 14:09:26 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED shutting down.
2019-06-06 14:09:26 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED paused.
2019-06-06 14:09:26 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED shutdown complete.
2019-06-06 14:09:26 -Shutting down Quartz Scheduler
2019-06-06 14:09:26 -Stopping service [Tomcat]
2019-06-06 14:09:26 -

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2019-06-06 14:09:26 -

***************************
APPLICATION FAILED TO START
***************************

Description:

Field template in com.bootdo.common.task.WelcomeJob required a bean of type 'org.springframework.messaging.simp.SimpMessagingTemplate' that could not be found.


Action:

Consider defining a bean of type 'org.springframework.messaging.simp.SimpMessagingTemplate' in your configuration.

2019-06-06 14:12:23 -Starting BootdoApplication on PC-201905091110 with PID 12296 (D:\eclipse2018-work\bootdo\target\classes started by Administrator in D:\eclipse2018-work\bootdo)
2019-06-06 14:12:23 -Running with Spring Boot v2.0.3.RELEASE, Spring v5.0.7.RELEASE
2019-06-06 14:12:23 -The following profiles are active: dev
2019-06-06 14:12:23 -Refreshing org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@5f031ebd: startup date [Thu Jun 06 14:12:23 CST 2019]; root of context hierarchy
2019-06-06 14:12:28 -Multiple Spring Data modules found, entering strict repository configuration mode!
2019-06-06 14:12:31 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$551ab43d] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-06 14:12:31 -Bean 'shiroConfig' of type [com.bootdo.system.config.ShiroConfig$$EnhancerBySpringCGLIB$$4773e2e4] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-06 14:12:32 -Bean 'userRealm' of type [com.bootdo.system.shiro.UserRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-06 14:12:33 -Bean 'cacheManager2' of type [net.sf.ehcache.CacheManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-06 14:12:33 -Bean 'ehCacheManager' of type [org.apache.shiro.cache.ehcache.EhCacheManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-06 14:12:33 -Cache with name 'com.bootdo.system.shiro.UserRealm.authorizationCache' does not yet exist.  Creating now.
2019-06-06 14:12:33 -Added EhCache named [com.bootdo.system.shiro.UserRealm.authorizationCache]
2019-06-06 14:12:33 -Bean 'sessionDAO' of type [org.apache.shiro.session.mgt.eis.MemorySessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-06 14:12:33 -Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-06 14:12:33 -Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-06 14:12:34 -Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-06 14:12:36 -Tomcat initialized with port(s): 8081 (http)
2019-06-06 14:12:37 -Initializing ProtocolHandler ["http-nio-8081"]
2019-06-06 14:12:37 -Starting service [Tomcat]
2019-06-06 14:12:37 -Starting Servlet Engine: Apache Tomcat/8.5.31
2019-06-06 14:12:37 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [D:\Java\JDK\jdk1.8.0_102\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;D:\Java\JDK\jdk1.8.0_102\jre\bin;D:/Java/JRE/bin/server;D:/Java/JRE/bin;D:/Java/JRE/lib/amd64;C:\ProgramData\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Windows\System32\OpenSSH\;%JAVA_HOME\bin%;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;;C:\Users\Administrator\Desktop;;.]
2019-06-06 14:12:38 -Initializing Spring embedded WebApplicationContext
2019-06-06 14:12:38 -Root WebApplicationContext: initialization completed in 15252 ms
2019-06-06 14:12:40 -Mapping filter: 'characterEncodingFilter' to: [/*]
2019-06-06 14:12:40 -Mapping filter: 'hiddenHttpMethodFilter' to: [/*]
2019-06-06 14:12:40 -Mapping filter: 'httpPutFormContentFilter' to: [/*]
2019-06-06 14:12:40 -Mapping filter: 'requestContextFilter' to: [/*]
2019-06-06 14:12:40 -Filter xssFilter was not registered (disabled)
2019-06-06 14:12:40 -Mapping filter: 'webStatFilter' to urls: [/*]
2019-06-06 14:12:40 -Mapping filter: 'shiroFilterFactoryBean' to: [/*]
2019-06-06 14:12:40 -Servlet statViewServlet mapped to [/druid/*]
2019-06-06 14:12:40 -Servlet dispatcherServlet mapped to [/]
2019-06-06 14:12:46 -ApplicationContext registed-->org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@5f031ebd: startup date [Thu Jun 06 14:12:23 CST 2019]; root of context hierarchy
2019-06-06 14:12:47 -Using default implementation for ThreadExecutor
2019-06-06 14:12:47 -Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2019-06-06 14:12:47 -Quartz Scheduler v.2.3.0 created.
2019-06-06 14:12:47 -RAMJobStore initialized.
2019-06-06 14:12:47 -Scheduler meta-data: Quartz Scheduler (v2.3.0) 'schedulerFactoryBean' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2019-06-06 14:12:47 -Quartz scheduler 'schedulerFactoryBean' initialized from an externally provided properties instance.
2019-06-06 14:12:47 -Quartz scheduler version: 2.3.0
2019-06-06 14:12:47 -JobFactory set to: com.bootdo.common.quartz.factory.JobFactory@2447940d
2019-06-06 14:12:47 -Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'welcomeJob': Unsatisfied dependency expressed through field 'template'; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type 'org.springframework.messaging.simp.SimpMessagingTemplate' available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {@org.springframework.beans.factory.annotation.Autowired(required=true)}
2019-06-06 14:12:47 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED shutting down.
2019-06-06 14:12:47 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED paused.
2019-06-06 14:12:47 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED shutdown complete.
2019-06-06 14:12:47 -Shutting down Quartz Scheduler
2019-06-06 14:12:47 -Stopping service [Tomcat]
2019-06-06 14:12:48 -

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2019-06-06 14:12:48 -

***************************
APPLICATION FAILED TO START
***************************

Description:

Field template in com.bootdo.common.task.WelcomeJob required a bean of type 'org.springframework.messaging.simp.SimpMessagingTemplate' that could not be found.


Action:

Consider defining a bean of type 'org.springframework.messaging.simp.SimpMessagingTemplate' in your configuration.

2019-06-06 14:15:53 -Starting BootdoApplication on PC-201905091110 with PID 34436 (D:\eclipse2018-work\bootdo\target\classes started by Administrator in D:\eclipse2018-work\bootdo)
2019-06-06 14:15:53 -Running with Spring Boot v2.0.3.RELEASE, Spring v5.0.7.RELEASE
2019-06-06 14:15:53 -The following profiles are active: dev
2019-06-06 14:15:53 -Refreshing org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@5d534f5d: startup date [Thu Jun 06 14:15:53 CST 2019]; root of context hierarchy
2019-06-06 14:15:57 -Multiple Spring Data modules found, entering strict repository configuration mode!
2019-06-06 14:15:59 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$9c1f0b7c] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-06 14:15:59 -Bean 'shiroConfig' of type [com.bootdo.system.config.ShiroConfig$$EnhancerBySpringCGLIB$$8e783a23] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-06 14:16:00 -Bean 'userRealm' of type [com.bootdo.system.shiro.UserRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-06 14:16:01 -Bean 'cacheManager2' of type [net.sf.ehcache.CacheManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-06 14:16:01 -Bean 'ehCacheManager' of type [org.apache.shiro.cache.ehcache.EhCacheManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-06 14:16:01 -Cache with name 'com.bootdo.system.shiro.UserRealm.authorizationCache' does not yet exist.  Creating now.
2019-06-06 14:16:01 -Added EhCache named [com.bootdo.system.shiro.UserRealm.authorizationCache]
2019-06-06 14:16:01 -Bean 'sessionDAO' of type [org.apache.shiro.session.mgt.eis.MemorySessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-06 14:16:01 -Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-06 14:16:01 -Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-06 14:16:01 -Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-06 14:16:02 -Tomcat initialized with port(s): 8081 (http)
2019-06-06 14:16:02 -Initializing ProtocolHandler ["http-nio-8081"]
2019-06-06 14:16:03 -Starting service [Tomcat]
2019-06-06 14:16:03 -Starting Servlet Engine: Apache Tomcat/8.5.31
2019-06-06 14:16:03 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [D:\Java\JDK\jdk1.8.0_102\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;D:/Java/JRE/bin/server;D:/Java/JRE/bin;D:/Java/JRE/lib/amd64;C:\ProgramData\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Windows\System32\OpenSSH\;%JAVA_HOME\bin%;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;;C:\Users\Administrator\Desktop;;.]
2019-06-06 14:16:03 -Initializing Spring embedded WebApplicationContext
2019-06-06 14:16:03 -Root WebApplicationContext: initialization completed in 9572 ms
2019-06-06 14:16:04 -Mapping filter: 'characterEncodingFilter' to: [/*]
2019-06-06 14:16:04 -Mapping filter: 'hiddenHttpMethodFilter' to: [/*]
2019-06-06 14:16:04 -Mapping filter: 'httpPutFormContentFilter' to: [/*]
2019-06-06 14:16:04 -Mapping filter: 'requestContextFilter' to: [/*]
2019-06-06 14:16:04 -Filter xssFilter was not registered (disabled)
2019-06-06 14:16:04 -Mapping filter: 'webStatFilter' to urls: [/*]
2019-06-06 14:16:04 -Mapping filter: 'shiroFilterFactoryBean' to: [/*]
2019-06-06 14:16:04 -Servlet statViewServlet mapped to [/druid/*]
2019-06-06 14:16:04 -Servlet dispatcherServlet mapped to [/]
2019-06-06 14:16:09 -ApplicationContext registed-->org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@5d534f5d: startup date [Thu Jun 06 14:15:53 CST 2019]; root of context hierarchy
2019-06-06 14:16:09 -Using default implementation for ThreadExecutor
2019-06-06 14:16:09 -Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2019-06-06 14:16:09 -Quartz Scheduler v.2.3.0 created.
2019-06-06 14:16:09 -RAMJobStore initialized.
2019-06-06 14:16:09 -Scheduler meta-data: Quartz Scheduler (v2.3.0) 'schedulerFactoryBean' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2019-06-06 14:16:09 -Quartz scheduler 'schedulerFactoryBean' initialized from an externally provided properties instance.
2019-06-06 14:16:09 -Quartz scheduler version: 2.3.0
2019-06-06 14:16:09 -JobFactory set to: com.bootdo.common.quartz.factory.JobFactory@1e734eee
2019-06-06 14:16:10 -Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'welcomeJob': Unsatisfied dependency expressed through field 'template'; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type 'org.springframework.messaging.simp.SimpMessagingTemplate' available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {@org.springframework.beans.factory.annotation.Autowired(required=true)}
2019-06-06 14:16:10 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED shutting down.
2019-06-06 14:16:10 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED paused.
2019-06-06 14:16:10 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED shutdown complete.
2019-06-06 14:16:10 -Shutting down Quartz Scheduler
2019-06-06 14:16:10 -Stopping service [Tomcat]
2019-06-06 14:16:10 -

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2019-06-06 14:16:10 -

***************************
APPLICATION FAILED TO START
***************************

Description:

Field template in com.bootdo.common.task.WelcomeJob required a bean of type 'org.springframework.messaging.simp.SimpMessagingTemplate' that could not be found.


Action:

Consider defining a bean of type 'org.springframework.messaging.simp.SimpMessagingTemplate' in your configuration.

2019-06-06 14:19:10 -Starting BootdoApplication on PC-201905091110 with PID 40232 (D:\eclipse2018-work\bootdo\target\classes started by Administrator in D:\eclipse2018-work\bootdo)
2019-06-06 14:19:10 -Running with Spring Boot v2.0.3.RELEASE, Spring v5.0.7.RELEASE
2019-06-06 14:19:10 -The following profiles are active: dev
2019-06-06 14:19:10 -Refreshing org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@576d5deb: startup date [Thu Jun 06 14:19:10 CST 2019]; root of context hierarchy
2019-06-06 14:19:15 -Multiple Spring Data modules found, entering strict repository configuration mode!
2019-06-06 14:19:17 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$6df2426e] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-06 14:19:17 -Bean 'shiroConfig' of type [com.bootdo.system.config.ShiroConfig$$EnhancerBySpringCGLIB$$604b7115] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-06 14:19:18 -Bean 'userRealm' of type [com.bootdo.system.shiro.UserRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-06 14:19:19 -Bean 'cacheManager2' of type [net.sf.ehcache.CacheManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-06 14:19:19 -Bean 'ehCacheManager' of type [org.apache.shiro.cache.ehcache.EhCacheManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-06 14:19:19 -Cache with name 'com.bootdo.system.shiro.UserRealm.authorizationCache' does not yet exist.  Creating now.
2019-06-06 14:19:19 -Added EhCache named [com.bootdo.system.shiro.UserRealm.authorizationCache]
2019-06-06 14:19:19 -Bean 'sessionDAO' of type [org.apache.shiro.session.mgt.eis.MemorySessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-06 14:19:19 -Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-06 14:19:19 -Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-06 14:19:19 -Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-06 14:19:20 -Tomcat initialized with port(s): 8081 (http)
2019-06-06 14:19:20 -Initializing ProtocolHandler ["http-nio-8081"]
2019-06-06 14:19:20 -Starting service [Tomcat]
2019-06-06 14:19:20 -Starting Servlet Engine: Apache Tomcat/8.5.31
2019-06-06 14:19:20 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [D:\Java\JDK\jdk1.8.0_102\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;D:/Java/JRE/bin/server;D:/Java/JRE/bin;D:/Java/JRE/lib/amd64;C:\ProgramData\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Windows\System32\OpenSSH\;%JAVA_HOME\bin%;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;;C:\Users\Administrator\Desktop;;.]
2019-06-06 14:19:21 -Initializing Spring embedded WebApplicationContext
2019-06-06 14:19:21 -Root WebApplicationContext: initialization completed in 10398 ms
2019-06-06 14:19:21 -Mapping filter: 'characterEncodingFilter' to: [/*]
2019-06-06 14:19:21 -Mapping filter: 'hiddenHttpMethodFilter' to: [/*]
2019-06-06 14:19:21 -Mapping filter: 'httpPutFormContentFilter' to: [/*]
2019-06-06 14:19:21 -Mapping filter: 'requestContextFilter' to: [/*]
2019-06-06 14:19:21 -Filter xssFilter was not registered (disabled)
2019-06-06 14:19:21 -Mapping filter: 'webStatFilter' to urls: [/*]
2019-06-06 14:19:21 -Mapping filter: 'shiroFilterFactoryBean' to: [/*]
2019-06-06 14:19:21 -Servlet statViewServlet mapped to [/druid/*]
2019-06-06 14:19:21 -Servlet dispatcherServlet mapped to [/]
2019-06-06 14:19:26 -ApplicationContext registed-->org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@576d5deb: startup date [Thu Jun 06 14:19:10 CST 2019]; root of context hierarchy
2019-06-06 14:19:26 -Using default implementation for ThreadExecutor
2019-06-06 14:19:26 -Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2019-06-06 14:19:26 -Quartz Scheduler v.2.3.0 created.
2019-06-06 14:19:26 -RAMJobStore initialized.
2019-06-06 14:19:26 -Scheduler meta-data: Quartz Scheduler (v2.3.0) 'schedulerFactoryBean' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2019-06-06 14:19:26 -Quartz scheduler 'schedulerFactoryBean' initialized from an externally provided properties instance.
2019-06-06 14:19:26 -Quartz scheduler version: 2.3.0
2019-06-06 14:19:26 -JobFactory set to: com.bootdo.common.quartz.factory.JobFactory@27bcb4ad
2019-06-06 14:19:27 -Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'welcomeJob': Unsatisfied dependency expressed through field 'template'; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type 'org.springframework.messaging.simp.SimpMessagingTemplate' available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {@org.springframework.beans.factory.annotation.Autowired(required=true)}
2019-06-06 14:19:27 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED shutting down.
2019-06-06 14:19:27 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED paused.
2019-06-06 14:19:27 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED shutdown complete.
2019-06-06 14:19:27 -Shutting down Quartz Scheduler
2019-06-06 14:19:27 -Stopping service [Tomcat]
2019-06-06 14:19:27 -

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2019-06-06 14:19:27 -

***************************
APPLICATION FAILED TO START
***************************

Description:

Field template in com.bootdo.common.task.WelcomeJob required a bean of type 'org.springframework.messaging.simp.SimpMessagingTemplate' that could not be found.


Action:

Consider defining a bean of type 'org.springframework.messaging.simp.SimpMessagingTemplate' in your configuration.

2019-06-06 14:20:30 -Starting BootdoApplication on PC-201905091110 with PID 36988 (D:\eclipse2018-work\bootdo\target\classes started by Administrator in D:\eclipse2018-work\bootdo)
2019-06-06 14:20:30 -Running with Spring Boot v2.0.3.RELEASE, Spring v5.0.7.RELEASE
2019-06-06 14:20:30 -The following profiles are active: dev
2019-06-06 14:20:30 -Refreshing org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@5e600dd5: startup date [Thu Jun 06 14:20:30 CST 2019]; root of context hierarchy
2019-06-06 14:20:34 -Multiple Spring Data modules found, entering strict repository configuration mode!
2019-06-06 14:20:37 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$93373f07] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-06 14:20:37 -Bean 'shiroConfig' of type [com.bootdo.system.config.ShiroConfig$$EnhancerBySpringCGLIB$$85906dae] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-06 14:20:38 -Bean 'userRealm' of type [com.bootdo.system.shiro.UserRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-06 14:20:38 -Bean 'cacheManager2' of type [net.sf.ehcache.CacheManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-06 14:20:38 -Bean 'ehCacheManager' of type [org.apache.shiro.cache.ehcache.EhCacheManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-06 14:20:38 -Cache with name 'com.bootdo.system.shiro.UserRealm.authorizationCache' does not yet exist.  Creating now.
2019-06-06 14:20:38 -Added EhCache named [com.bootdo.system.shiro.UserRealm.authorizationCache]
2019-06-06 14:20:38 -Bean 'sessionDAO' of type [org.apache.shiro.session.mgt.eis.MemorySessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-06 14:20:38 -Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-06 14:20:39 -Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-06 14:20:39 -Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-06 14:20:39 -Tomcat initialized with port(s): 8081 (http)
2019-06-06 14:20:39 -Initializing ProtocolHandler ["http-nio-8081"]
2019-06-06 14:20:40 -Starting service [Tomcat]
2019-06-06 14:20:40 -Starting Servlet Engine: Apache Tomcat/8.5.31
2019-06-06 14:20:40 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [D:\Java\JDK\jdk1.8.0_102\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;D:/Java/JRE/bin/server;D:/Java/JRE/bin;D:/Java/JRE/lib/amd64;C:\ProgramData\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Windows\System32\OpenSSH\;%JAVA_HOME\bin%;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;;C:\Users\Administrator\Desktop;;.]
2019-06-06 14:20:40 -Initializing Spring embedded WebApplicationContext
2019-06-06 14:20:40 -Root WebApplicationContext: initialization completed in 9701 ms
2019-06-06 14:20:41 -Mapping filter: 'characterEncodingFilter' to: [/*]
2019-06-06 14:20:41 -Mapping filter: 'hiddenHttpMethodFilter' to: [/*]
2019-06-06 14:20:41 -Mapping filter: 'httpPutFormContentFilter' to: [/*]
2019-06-06 14:20:41 -Mapping filter: 'requestContextFilter' to: [/*]
2019-06-06 14:20:41 -Filter xssFilter was not registered (disabled)
2019-06-06 14:20:41 -Mapping filter: 'webStatFilter' to urls: [/*]
2019-06-06 14:20:41 -Mapping filter: 'shiroFilterFactoryBean' to: [/*]
2019-06-06 14:20:41 -Servlet statViewServlet mapped to [/druid/*]
2019-06-06 14:20:41 -Servlet dispatcherServlet mapped to [/]
2019-06-06 14:20:45 -ApplicationContext registed-->org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@5e600dd5: startup date [Thu Jun 06 14:20:30 CST 2019]; root of context hierarchy
2019-06-06 14:20:45 -Using default implementation for ThreadExecutor
2019-06-06 14:20:45 -Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2019-06-06 14:20:46 -Quartz Scheduler v.2.2.1 created.
2019-06-06 14:20:46 -RAMJobStore initialized.
2019-06-06 14:20:46 -Scheduler meta-data: Quartz Scheduler (v2.2.1) 'schedulerFactoryBean' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2019-06-06 14:20:46 -Quartz scheduler 'schedulerFactoryBean' initialized from an externally provided properties instance.
2019-06-06 14:20:46 -Quartz scheduler version: 2.2.1
2019-06-06 14:20:46 -JobFactory set to: com.bootdo.common.quartz.factory.JobFactory@1e734eee
2019-06-06 14:20:46 -Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'welcomeJob': Unsatisfied dependency expressed through field 'template'; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type 'org.springframework.messaging.simp.SimpMessagingTemplate' available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {@org.springframework.beans.factory.annotation.Autowired(required=true)}
2019-06-06 14:20:46 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED shutting down.
2019-06-06 14:20:46 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED paused.
2019-06-06 14:20:46 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED shutdown complete.
2019-06-06 14:20:46 -Shutting down Quartz Scheduler
2019-06-06 14:20:46 -Stopping service [Tomcat]
2019-06-06 14:20:46 -

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2019-06-06 14:20:46 -

***************************
APPLICATION FAILED TO START
***************************

Description:

Field template in com.bootdo.common.task.WelcomeJob required a bean of type 'org.springframework.messaging.simp.SimpMessagingTemplate' that could not be found.


Action:

Consider defining a bean of type 'org.springframework.messaging.simp.SimpMessagingTemplate' in your configuration.

2019-06-06 14:22:42 -Starting BootdoApplication on PC-201905091110 with PID 8188 (D:\eclipse2018-work\bootdo\target\classes started by Administrator in D:\eclipse2018-work\bootdo)
2019-06-06 14:22:42 -Running with Spring Boot v2.0.3.RELEASE, Spring v5.0.7.RELEASE
2019-06-06 14:22:42 -The following profiles are active: dev
2019-06-06 14:22:42 -Refreshing org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@7383eae2: startup date [Thu Jun 06 14:22:42 CST 2019]; root of context hierarchy
2019-06-06 14:22:47 -Multiple Spring Data modules found, entering strict repository configuration mode!
2019-06-06 14:22:50 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$c68194ac] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-06 14:22:50 -Bean 'shiroConfig' of type [com.bootdo.system.config.ShiroConfig$$EnhancerBySpringCGLIB$$b8dac353] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-06 14:22:51 -Bean 'userRealm' of type [com.bootdo.system.shiro.UserRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-06 14:22:52 -Bean 'cacheManager2' of type [net.sf.ehcache.CacheManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-06 14:22:52 -Bean 'ehCacheManager' of type [org.apache.shiro.cache.ehcache.EhCacheManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-06 14:22:52 -Cache with name 'com.bootdo.system.shiro.UserRealm.authorizationCache' does not yet exist.  Creating now.
2019-06-06 14:22:52 -Added EhCache named [com.bootdo.system.shiro.UserRealm.authorizationCache]
2019-06-06 14:22:52 -Bean 'sessionDAO' of type [org.apache.shiro.session.mgt.eis.MemorySessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-06 14:22:53 -Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-06 14:22:53 -Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-06 14:22:53 -Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-06 14:22:54 -Tomcat initialized with port(s): 8081 (http)
2019-06-06 14:22:54 -Initializing ProtocolHandler ["http-nio-8081"]
2019-06-06 14:22:54 -Starting service [Tomcat]
2019-06-06 14:22:54 -Starting Servlet Engine: Apache Tomcat/8.5.31
2019-06-06 14:22:54 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [D:\Java\JDK\jdk1.8.0_102\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;D:\Java\JDK\jdk1.8.0_102\jre\bin;D:/Java/JRE/bin/server;D:/Java/JRE/bin;D:/Java/JRE/lib/amd64;C:\ProgramData\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Windows\System32\OpenSSH\;%JAVA_HOME\bin%;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;;C:\Users\Administrator\Desktop;;.]
2019-06-06 14:22:55 -Initializing Spring embedded WebApplicationContext
2019-06-06 14:22:55 -Root WebApplicationContext: initialization completed in 12420 ms
2019-06-06 14:22:56 -Mapping filter: 'characterEncodingFilter' to: [/*]
2019-06-06 14:22:56 -Mapping filter: 'hiddenHttpMethodFilter' to: [/*]
2019-06-06 14:22:56 -Mapping filter: 'httpPutFormContentFilter' to: [/*]
2019-06-06 14:22:56 -Mapping filter: 'requestContextFilter' to: [/*]
2019-06-06 14:22:56 -Filter xssFilter was not registered (disabled)
2019-06-06 14:22:56 -Mapping filter: 'webStatFilter' to urls: [/*]
2019-06-06 14:22:56 -Mapping filter: 'shiroFilterFactoryBean' to: [/*]
2019-06-06 14:22:56 -Servlet statViewServlet mapped to [/druid/*]
2019-06-06 14:22:56 -Servlet dispatcherServlet mapped to [/]
2019-06-06 14:23:03 -ApplicationContext registed-->org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@7383eae2: startup date [Thu Jun 06 14:22:42 CST 2019]; root of context hierarchy
2019-06-06 14:23:03 -Using default implementation for ThreadExecutor
2019-06-06 14:23:04 -Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2019-06-06 14:23:04 -Quartz Scheduler v.2.3.0 created.
2019-06-06 14:23:04 -RAMJobStore initialized.
2019-06-06 14:23:04 -Scheduler meta-data: Quartz Scheduler (v2.3.0) 'schedulerFactoryBean' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2019-06-06 14:23:04 -Quartz scheduler 'schedulerFactoryBean' initialized from an externally provided properties instance.
2019-06-06 14:23:04 -Quartz scheduler version: 2.3.0
2019-06-06 14:23:04 -JobFactory set to: com.bootdo.common.quartz.factory.JobFactory@1c9975a8
2019-06-06 14:23:04 -Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'welcomeJob': Unsatisfied dependency expressed through field 'template'; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type 'org.springframework.messaging.simp.SimpMessagingTemplate' available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {@org.springframework.beans.factory.annotation.Autowired(required=true)}
2019-06-06 14:23:04 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED shutting down.
2019-06-06 14:23:04 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED paused.
2019-06-06 14:23:04 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED shutdown complete.
2019-06-06 14:23:04 -Shutting down Quartz Scheduler
2019-06-06 14:23:04 -Stopping service [Tomcat]
2019-06-06 14:23:04 -

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2019-06-06 14:23:05 -

***************************
APPLICATION FAILED TO START
***************************

Description:

Field template in com.bootdo.common.task.WelcomeJob required a bean of type 'org.springframework.messaging.simp.SimpMessagingTemplate' that could not be found.


Action:

Consider defining a bean of type 'org.springframework.messaging.simp.SimpMessagingTemplate' in your configuration.

2019-06-06 14:29:31 -Starting BootdoApplication on PC-201905091110 with PID 26396 (D:\eclipse2018-work\bootdo\target\classes started by Administrator in D:\eclipse2018-work\bootdo)
2019-06-06 14:29:31 -Running with Spring Boot v2.0.3.RELEASE, Spring v5.0.7.RELEASE
2019-06-06 14:29:31 -The following profiles are active: dev
2019-06-06 14:29:31 -Refreshing org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@5e600dd5: startup date [Thu Jun 06 14:29:31 CST 2019]; root of context hierarchy
2019-06-06 14:29:36 -Multiple Spring Data modules found, entering strict repository configuration mode!
2019-06-06 14:29:39 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$f370ae15] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-06 14:29:39 -Bean 'shiroConfig' of type [com.bootdo.system.config.ShiroConfig$$EnhancerBySpringCGLIB$$e5c9dcbc] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-06 14:29:40 -Bean 'userRealm' of type [com.bootdo.system.shiro.UserRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-06 14:29:41 -Bean 'cacheManager2' of type [net.sf.ehcache.CacheManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-06 14:29:41 -Bean 'ehCacheManager' of type [org.apache.shiro.cache.ehcache.EhCacheManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-06 14:29:41 -Cache with name 'com.bootdo.system.shiro.UserRealm.authorizationCache' does not yet exist.  Creating now.
2019-06-06 14:29:41 -Added EhCache named [com.bootdo.system.shiro.UserRealm.authorizationCache]
2019-06-06 14:29:41 -Bean 'sessionDAO' of type [org.apache.shiro.session.mgt.eis.MemorySessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-06 14:29:41 -Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-06 14:29:41 -Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-06 14:29:41 -Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-06 14:29:42 -Tomcat initialized with port(s): 8081 (http)
2019-06-06 14:29:42 -Initializing ProtocolHandler ["http-nio-8081"]
2019-06-06 14:29:43 -Starting service [Tomcat]
2019-06-06 14:29:43 -Starting Servlet Engine: Apache Tomcat/8.5.31
2019-06-06 14:29:43 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [D:\Java\JDK\jdk1.8.0_102\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;D:/Java/JRE/bin/server;D:/Java/JRE/bin;D:/Java/JRE/lib/amd64;C:\ProgramData\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Windows\System32\OpenSSH\;%JAVA_HOME\bin%;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;;C:\Users\Administrator\Desktop;;.]
2019-06-06 14:29:43 -Initializing Spring embedded WebApplicationContext
2019-06-06 14:29:43 -Root WebApplicationContext: initialization completed in 11611 ms
2019-06-06 14:29:44 -Mapping filter: 'characterEncodingFilter' to: [/*]
2019-06-06 14:29:44 -Mapping filter: 'hiddenHttpMethodFilter' to: [/*]
2019-06-06 14:29:44 -Mapping filter: 'httpPutFormContentFilter' to: [/*]
2019-06-06 14:29:44 -Mapping filter: 'requestContextFilter' to: [/*]
2019-06-06 14:29:44 -Filter xssFilter was not registered (disabled)
2019-06-06 14:29:44 -Mapping filter: 'webStatFilter' to urls: [/*]
2019-06-06 14:29:44 -Mapping filter: 'shiroFilterFactoryBean' to: [/*]
2019-06-06 14:29:44 -Servlet statViewServlet mapped to [/druid/*]
2019-06-06 14:29:44 -Servlet dispatcherServlet mapped to [/]
2019-06-06 14:29:48 -ApplicationContext registed-->org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@5e600dd5: startup date [Thu Jun 06 14:29:31 CST 2019]; root of context hierarchy
2019-06-06 14:29:49 -Using default implementation for ThreadExecutor
2019-06-06 14:29:49 -Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2019-06-06 14:29:49 -Quartz Scheduler v.2.3.0 created.
2019-06-06 14:29:49 -RAMJobStore initialized.
2019-06-06 14:29:49 -Scheduler meta-data: Quartz Scheduler (v2.3.0) 'schedulerFactoryBean' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2019-06-06 14:29:49 -Quartz scheduler 'schedulerFactoryBean' initialized from an externally provided properties instance.
2019-06-06 14:29:49 -Quartz scheduler version: 2.3.0
2019-06-06 14:29:49 -JobFactory set to: com.bootdo.common.quartz.factory.JobFactory@3962ec84
2019-06-06 14:29:49 -Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'welcomeJob': Unsatisfied dependency expressed through field 'template'; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type 'org.springframework.messaging.simp.SimpMessagingTemplate' available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {@org.springframework.beans.factory.annotation.Autowired(required=true)}
2019-06-06 14:29:49 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED shutting down.
2019-06-06 14:29:49 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED paused.
2019-06-06 14:29:49 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED shutdown complete.
2019-06-06 14:29:49 -Shutting down Quartz Scheduler
2019-06-06 14:29:49 -Stopping service [Tomcat]
2019-06-06 14:29:49 -

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2019-06-06 14:29:49 -

***************************
APPLICATION FAILED TO START
***************************

Description:

Field template in com.bootdo.common.task.WelcomeJob required a bean of type 'org.springframework.messaging.simp.SimpMessagingTemplate' that could not be found.


Action:

Consider defining a bean of type 'org.springframework.messaging.simp.SimpMessagingTemplate' in your configuration.

2019-06-06 14:32:47 -Starting BootdoApplication on PC-201905091110 with PID 20764 (D:\eclipse2018-work\bootdo\target\classes started by Administrator in D:\eclipse2018-work\bootdo)
2019-06-06 14:32:47 -Running with Spring Boot v2.0.3.RELEASE, Spring v5.0.7.RELEASE
2019-06-06 14:32:47 -The following profiles are active: dev
2019-06-06 14:32:47 -Refreshing org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@5d534f5d: startup date [Thu Jun 06 14:32:47 CST 2019]; root of context hierarchy
2019-06-06 14:32:51 -Multiple Spring Data modules found, entering strict repository configuration mode!
2019-06-06 14:32:55 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$9c1f0b7c] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-06 14:32:55 -Bean 'shiroConfig' of type [com.bootdo.system.config.ShiroConfig$$EnhancerBySpringCGLIB$$8e783a23] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-06 14:32:56 -Bean 'userRealm' of type [com.bootdo.system.shiro.UserRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-06 14:32:56 -Bean 'cacheManager2' of type [net.sf.ehcache.CacheManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-06 14:32:56 -Bean 'ehCacheManager' of type [org.apache.shiro.cache.ehcache.EhCacheManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-06 14:32:56 -Cache with name 'com.bootdo.system.shiro.UserRealm.authorizationCache' does not yet exist.  Creating now.
2019-06-06 14:32:56 -Added EhCache named [com.bootdo.system.shiro.UserRealm.authorizationCache]
2019-06-06 14:32:56 -Bean 'sessionDAO' of type [org.apache.shiro.session.mgt.eis.MemorySessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-06 14:32:56 -Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-06 14:32:57 -Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-06 14:32:57 -Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-06 14:32:57 -Tomcat initialized with port(s): 8081 (http)
2019-06-06 14:32:57 -Initializing ProtocolHandler ["http-nio-8081"]
2019-06-06 14:32:58 -Starting service [Tomcat]
2019-06-06 14:32:58 -Starting Servlet Engine: Apache Tomcat/8.5.31
2019-06-06 14:32:58 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [D:\Java\JDK\jdk1.8.0_102\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;D:/Java/JRE/bin/server;D:/Java/JRE/bin;D:/Java/JRE/lib/amd64;C:\ProgramData\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Windows\System32\OpenSSH\;%JAVA_HOME\bin%;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;;C:\Users\Administrator\Desktop;;.]
2019-06-06 14:32:58 -Initializing Spring embedded WebApplicationContext
2019-06-06 14:32:58 -Root WebApplicationContext: initialization completed in 10501 ms
2019-06-06 14:32:59 -Mapping filter: 'characterEncodingFilter' to: [/*]
2019-06-06 14:32:59 -Mapping filter: 'hiddenHttpMethodFilter' to: [/*]
2019-06-06 14:32:59 -Mapping filter: 'httpPutFormContentFilter' to: [/*]
2019-06-06 14:32:59 -Mapping filter: 'requestContextFilter' to: [/*]
2019-06-06 14:32:59 -Filter xssFilter was not registered (disabled)
2019-06-06 14:32:59 -Mapping filter: 'webStatFilter' to urls: [/*]
2019-06-06 14:32:59 -Mapping filter: 'shiroFilterFactoryBean' to: [/*]
2019-06-06 14:32:59 -Servlet statViewServlet mapped to [/druid/*]
2019-06-06 14:32:59 -Servlet dispatcherServlet mapped to [/]
2019-06-06 14:33:03 -ApplicationContext registed-->org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@5d534f5d: startup date [Thu Jun 06 14:32:47 CST 2019]; root of context hierarchy
2019-06-06 14:33:04 -Using default implementation for ThreadExecutor
2019-06-06 14:33:04 -Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2019-06-06 14:33:04 -Quartz Scheduler v.2.3.0 created.
2019-06-06 14:33:04 -RAMJobStore initialized.
2019-06-06 14:33:04 -Scheduler meta-data: Quartz Scheduler (v2.3.0) 'schedulerFactoryBean' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2019-06-06 14:33:04 -Quartz scheduler 'schedulerFactoryBean' initialized from an externally provided properties instance.
2019-06-06 14:33:04 -Quartz scheduler version: 2.3.0
2019-06-06 14:33:04 -JobFactory set to: com.bootdo.common.quartz.factory.JobFactory@1e734eee
2019-06-06 14:33:04 -Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'welcomeJob': Unsatisfied dependency expressed through field 'template'; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type 'org.springframework.messaging.simp.SimpMessagingTemplate' available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {@org.springframework.beans.factory.annotation.Autowired(required=true)}
2019-06-06 14:33:04 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED shutting down.
2019-06-06 14:33:04 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED paused.
2019-06-06 14:33:04 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED shutdown complete.
2019-06-06 14:33:04 -Shutting down Quartz Scheduler
2019-06-06 14:33:04 -Stopping service [Tomcat]
2019-06-06 14:33:04 -

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2019-06-06 14:33:04 -

***************************
APPLICATION FAILED TO START
***************************

Description:

Field template in com.bootdo.common.task.WelcomeJob required a bean of type 'org.springframework.messaging.simp.SimpMessagingTemplate' that could not be found.


Action:

Consider defining a bean of type 'org.springframework.messaging.simp.SimpMessagingTemplate' in your configuration.

2019-06-06 14:33:48 -Starting BootdoApplication on PC-201905091110 with PID 14080 (D:\eclipse2018-work\bootdo\target\classes started by Administrator in D:\eclipse2018-work\bootdo)
2019-06-06 14:33:48 -Running with Spring Boot v2.0.3.RELEASE, Spring v5.0.7.RELEASE
2019-06-06 14:33:48 -The following profiles are active: dev
2019-06-06 14:33:48 -Refreshing org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@5d534f5d: startup date [Thu Jun 06 14:33:48 CST 2019]; root of context hierarchy
2019-06-06 14:33:51 -Multiple Spring Data modules found, entering strict repository configuration mode!
2019-06-06 14:33:53 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$93373f07] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-06 14:33:53 -Bean 'shiroConfig' of type [com.bootdo.system.config.ShiroConfig$$EnhancerBySpringCGLIB$$85906dae] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-06 14:33:54 -Bean 'userRealm' of type [com.bootdo.system.shiro.UserRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-06 14:33:55 -Bean 'cacheManager2' of type [net.sf.ehcache.CacheManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-06 14:33:55 -Bean 'ehCacheManager' of type [org.apache.shiro.cache.ehcache.EhCacheManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-06 14:33:55 -Cache with name 'com.bootdo.system.shiro.UserRealm.authorizationCache' does not yet exist.  Creating now.
2019-06-06 14:33:55 -Added EhCache named [com.bootdo.system.shiro.UserRealm.authorizationCache]
2019-06-06 14:33:55 -Bean 'sessionDAO' of type [org.apache.shiro.session.mgt.eis.MemorySessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-06 14:33:55 -Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-06 14:33:55 -Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-06 14:33:55 -Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-06 14:33:56 -Tomcat initialized with port(s): 8081 (http)
2019-06-06 14:33:56 -Initializing ProtocolHandler ["http-nio-8081"]
2019-06-06 14:33:56 -Starting service [Tomcat]
2019-06-06 14:33:56 -Starting Servlet Engine: Apache Tomcat/8.5.31
2019-06-06 14:33:56 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [D:\Java\JDK\jdk1.8.0_102\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;D:/Java/JRE/bin/server;D:/Java/JRE/bin;D:/Java/JRE/lib/amd64;C:\ProgramData\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Windows\System32\OpenSSH\;%JAVA_HOME\bin%;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;;C:\Users\Administrator\Desktop;;.]
2019-06-06 14:33:56 -Initializing Spring embedded WebApplicationContext
2019-06-06 14:33:56 -Root WebApplicationContext: initialization completed in 8638 ms
2019-06-06 14:33:57 -Mapping filter: 'characterEncodingFilter' to: [/*]
2019-06-06 14:33:57 -Mapping filter: 'hiddenHttpMethodFilter' to: [/*]
2019-06-06 14:33:57 -Mapping filter: 'httpPutFormContentFilter' to: [/*]
2019-06-06 14:33:57 -Mapping filter: 'requestContextFilter' to: [/*]
2019-06-06 14:33:57 -Filter xssFilter was not registered (disabled)
2019-06-06 14:33:57 -Mapping filter: 'webStatFilter' to urls: [/*]
2019-06-06 14:33:57 -Mapping filter: 'shiroFilterFactoryBean' to: [/*]
2019-06-06 14:33:57 -Servlet statViewServlet mapped to [/druid/*]
2019-06-06 14:33:57 -Servlet dispatcherServlet mapped to [/]
2019-06-06 14:34:01 -ApplicationContext registed-->org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@5d534f5d: startup date [Thu Jun 06 14:33:48 CST 2019]; root of context hierarchy
2019-06-06 14:34:02 -Using default implementation for ThreadExecutor
2019-06-06 14:34:02 -Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2019-06-06 14:34:02 -Quartz Scheduler v.2.3.0 created.
2019-06-06 14:34:02 -RAMJobStore initialized.
2019-06-06 14:34:02 -Scheduler meta-data: Quartz Scheduler (v2.3.0) 'schedulerFactoryBean' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2019-06-06 14:34:02 -Quartz scheduler 'schedulerFactoryBean' initialized from an externally provided properties instance.
2019-06-06 14:34:02 -Quartz scheduler version: 2.3.0
2019-06-06 14:34:02 -JobFactory set to: com.bootdo.common.quartz.factory.JobFactory@104a287c
2019-06-06 14:34:03 -Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'notifyController': Unsatisfied dependency expressed through field 'notifyService'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'notifyServiceImpl': Unsatisfied dependency expressed through field 'template'; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type 'org.springframework.messaging.simp.SimpMessagingTemplate' available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {@org.springframework.beans.factory.annotation.Autowired(required=true)}
2019-06-06 14:34:03 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED shutting down.
2019-06-06 14:34:03 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED paused.
2019-06-06 14:34:03 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED shutdown complete.
2019-06-06 14:34:03 -Shutting down Quartz Scheduler
2019-06-06 14:34:03 -Stopping service [Tomcat]
2019-06-06 14:34:04 -

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2019-06-06 14:34:04 -

***************************
APPLICATION FAILED TO START
***************************

Description:

Field template in com.bootdo.oa.service.impl.NotifyServiceImpl required a bean of type 'org.springframework.messaging.simp.SimpMessagingTemplate' that could not be found.


Action:

Consider defining a bean of type 'org.springframework.messaging.simp.SimpMessagingTemplate' in your configuration.

2019-06-06 14:38:48 -Starting BootdoApplication on PC-201905091110 with PID 4876 (D:\eclipse2018-work\bootdo\target\classes started by Administrator in D:\eclipse2018-work\bootdo)
2019-06-06 14:38:48 -Running with Spring Boot v2.0.3.RELEASE, Spring v5.0.7.RELEASE
2019-06-06 14:38:48 -The following profiles are active: dev
2019-06-06 14:38:48 -Refreshing org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@5b970f7: startup date [Thu Jun 06 14:38:48 CST 2019]; root of context hierarchy
2019-06-06 14:38:53 -Multiple Spring Data modules found, entering strict repository configuration mode!
2019-06-06 14:38:56 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$53485028] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-06 14:38:57 -Bean 'shiroConfig' of type [com.bootdo.system.config.ShiroConfig$$EnhancerBySpringCGLIB$$45a17ecf] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-06 14:38:58 -Bean 'userRealm' of type [com.bootdo.system.shiro.UserRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-06 14:38:58 -Bean 'cacheManager2' of type [net.sf.ehcache.CacheManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-06 14:38:58 -Bean 'ehCacheManager' of type [org.apache.shiro.cache.ehcache.EhCacheManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-06 14:38:58 -Cache with name 'com.bootdo.system.shiro.UserRealm.authorizationCache' does not yet exist.  Creating now.
2019-06-06 14:38:58 -Added EhCache named [com.bootdo.system.shiro.UserRealm.authorizationCache]
2019-06-06 14:38:58 -Bean 'sessionDAO' of type [org.apache.shiro.session.mgt.eis.MemorySessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-06 14:38:59 -Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-06 14:38:59 -Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-06 14:38:59 -Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-06 14:39:00 -Tomcat initialized with port(s): 8081 (http)
2019-06-06 14:39:00 -Initializing ProtocolHandler ["http-nio-8081"]
2019-06-06 14:39:00 -Starting service [Tomcat]
2019-06-06 14:39:00 -Starting Servlet Engine: Apache Tomcat/8.5.31
2019-06-06 14:39:00 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [D:\Java\JDK\jdk1.8.0_102\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;D:\Java\JDK\jdk1.8.0_102\jre\bin;D:/Java/JRE/bin/server;D:/Java/JRE/bin;D:/Java/JRE/lib/amd64;C:\ProgramData\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Windows\System32\OpenSSH\;%JAVA_HOME\bin%;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;;C:\Users\Administrator\Desktop;;.]
2019-06-06 14:39:01 -Initializing Spring embedded WebApplicationContext
2019-06-06 14:39:01 -Root WebApplicationContext: initialization completed in 12828 ms
2019-06-06 14:39:02 -Mapping filter: 'characterEncodingFilter' to: [/*]
2019-06-06 14:39:02 -Mapping filter: 'hiddenHttpMethodFilter' to: [/*]
2019-06-06 14:39:02 -Mapping filter: 'httpPutFormContentFilter' to: [/*]
2019-06-06 14:39:02 -Mapping filter: 'requestContextFilter' to: [/*]
2019-06-06 14:39:02 -Filter xssFilter was not registered (disabled)
2019-06-06 14:39:02 -Mapping filter: 'webStatFilter' to urls: [/*]
2019-06-06 14:39:02 -Mapping filter: 'shiroFilterFactoryBean' to: [/*]
2019-06-06 14:39:02 -Servlet statViewServlet mapped to [/druid/*]
2019-06-06 14:39:02 -Servlet dispatcherServlet mapped to [/]
2019-06-06 14:39:07 -ApplicationContext registed-->org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@5b970f7: startup date [Thu Jun 06 14:38:48 CST 2019]; root of context hierarchy
2019-06-06 14:39:08 -Using default implementation for ThreadExecutor
2019-06-06 14:39:08 -Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2019-06-06 14:39:08 -Quartz Scheduler v.2.3.0 created.
2019-06-06 14:39:08 -RAMJobStore initialized.
2019-06-06 14:39:08 -Scheduler meta-data: Quartz Scheduler (v2.3.0) 'schedulerFactoryBean' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2019-06-06 14:39:08 -Quartz scheduler 'schedulerFactoryBean' initialized from an externally provided properties instance.
2019-06-06 14:39:08 -Quartz scheduler version: 2.3.0
2019-06-06 14:39:08 -JobFactory set to: com.bootdo.common.quartz.factory.JobFactory@3a917017
2019-06-06 14:39:09 -Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'welcomeJob': Unsatisfied dependency expressed through field 'template'; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type 'org.springframework.messaging.simp.SimpMessagingTemplate' available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {@org.springframework.beans.factory.annotation.Autowired(required=true)}
2019-06-06 14:39:09 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED shutting down.
2019-06-06 14:39:09 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED paused.
2019-06-06 14:39:09 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED shutdown complete.
2019-06-06 14:39:09 -Shutting down Quartz Scheduler
2019-06-06 14:39:09 -Stopping service [Tomcat]
2019-06-06 14:39:10 -

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2019-06-06 14:39:10 -

***************************
APPLICATION FAILED TO START
***************************

Description:

Field template in com.bootdo.common.task.WelcomeJob required a bean of type 'org.springframework.messaging.simp.SimpMessagingTemplate' that could not be found.


Action:

Consider defining a bean of type 'org.springframework.messaging.simp.SimpMessagingTemplate' in your configuration.

2019-06-06 14:41:27 -Starting BootdoApplication on PC-201905091110 with PID 20464 (D:\eclipse2018-work\bootdo\target\classes started by Administrator in D:\eclipse2018-work\bootdo)
2019-06-06 14:41:27 -Running with Spring Boot v2.0.3.RELEASE, Spring v5.0.7.RELEASE
2019-06-06 14:41:27 -The following profiles are active: dev
2019-06-06 14:41:27 -Refreshing org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@2e3967ea: startup date [Thu Jun 06 14:41:27 CST 2019]; root of context hierarchy
2019-06-06 14:41:33 -Multiple Spring Data modules found, entering strict repository configuration mode!
2019-06-06 14:41:35 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$d1ac3440] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-06 14:41:36 -Bean 'shiroConfig' of type [com.bootdo.system.config.ShiroConfig$$EnhancerBySpringCGLIB$$c40562e7] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-06 14:41:37 -Bean 'userRealm' of type [com.bootdo.system.shiro.UserRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-06 14:41:38 -Bean 'cacheManager2' of type [net.sf.ehcache.CacheManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-06 14:41:38 -Bean 'ehCacheManager' of type [org.apache.shiro.cache.ehcache.EhCacheManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-06 14:41:38 -Cache with name 'com.bootdo.system.shiro.UserRealm.authorizationCache' does not yet exist.  Creating now.
2019-06-06 14:41:38 -Added EhCache named [com.bootdo.system.shiro.UserRealm.authorizationCache]
2019-06-06 14:41:38 -Bean 'sessionDAO' of type [org.apache.shiro.session.mgt.eis.MemorySessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-06 14:41:39 -Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-06 14:41:39 -Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-06 14:41:39 -Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-06 14:41:40 -Tomcat initialized with port(s): 8081 (http)
2019-06-06 14:41:40 -Initializing ProtocolHandler ["http-nio-8081"]
2019-06-06 14:41:40 -Starting service [Tomcat]
2019-06-06 14:41:40 -Starting Servlet Engine: Apache Tomcat/8.5.31
2019-06-06 14:41:40 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [D:\Java\JDK\jdk1.8.0_102\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;D:/Java/JRE/bin/server;D:/Java/JRE/bin;D:/Java/JRE/lib/amd64;C:\ProgramData\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Windows\System32\OpenSSH\;%JAVA_HOME\bin%;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;;C:\Users\Administrator\Desktop;;.]
2019-06-06 14:41:41 -Initializing Spring embedded WebApplicationContext
2019-06-06 14:41:41 -Root WebApplicationContext: initialization completed in 13774 ms
2019-06-06 14:41:42 -Mapping filter: 'characterEncodingFilter' to: [/*]
2019-06-06 14:41:42 -Mapping filter: 'hiddenHttpMethodFilter' to: [/*]
2019-06-06 14:41:42 -Mapping filter: 'httpPutFormContentFilter' to: [/*]
2019-06-06 14:41:42 -Mapping filter: 'requestContextFilter' to: [/*]
2019-06-06 14:41:42 -Filter xssFilter was not registered (disabled)
2019-06-06 14:41:42 -Mapping filter: 'webStatFilter' to urls: [/*]
2019-06-06 14:41:42 -Mapping filter: 'shiroFilterFactoryBean' to: [/*]
2019-06-06 14:41:42 -Servlet statViewServlet mapped to [/druid/*]
2019-06-06 14:41:42 -Servlet dispatcherServlet mapped to [/]
2019-06-06 14:41:50 -ApplicationContext registed-->org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@2e3967ea: startup date [Thu Jun 06 14:41:27 CST 2019]; root of context hierarchy
2019-06-06 14:41:51 -Using default implementation for ThreadExecutor
2019-06-06 14:41:51 -Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2019-06-06 14:41:51 -Quartz Scheduler v.2.3.0 created.
2019-06-06 14:41:51 -RAMJobStore initialized.
2019-06-06 14:41:51 -Scheduler meta-data: Quartz Scheduler (v2.3.0) 'schedulerFactoryBean' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2019-06-06 14:41:51 -Quartz scheduler 'schedulerFactoryBean' initialized from an externally provided properties instance.
2019-06-06 14:41:51 -Quartz scheduler version: 2.3.0
2019-06-06 14:41:51 -JobFactory set to: com.bootdo.common.quartz.factory.JobFactory@1f758e4f
2019-06-06 14:41:51 -Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'welcomeJob': Unsatisfied dependency expressed through field 'template'; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type 'org.springframework.messaging.simp.SimpMessagingTemplate' available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {@org.springframework.beans.factory.annotation.Autowired(required=true)}
2019-06-06 14:41:51 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED shutting down.
2019-06-06 14:41:51 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED paused.
2019-06-06 14:41:51 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED shutdown complete.
2019-06-06 14:41:51 -Shutting down Quartz Scheduler
2019-06-06 14:41:51 -Stopping service [Tomcat]
2019-06-06 14:41:51 -

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2019-06-06 14:41:52 -

***************************
APPLICATION FAILED TO START
***************************

Description:

Field template in com.bootdo.common.task.WelcomeJob required a bean of type 'org.springframework.messaging.simp.SimpMessagingTemplate' that could not be found.


Action:

Consider defining a bean of type 'org.springframework.messaging.simp.SimpMessagingTemplate' in your configuration.

2019-06-06 14:45:50 -Starting BootdoApplication on PC-201905091110 with PID 20964 (D:\eclipse2018-work\bootdo\target\classes started by Administrator in D:\eclipse2018-work\bootdo)
2019-06-06 14:45:50 -Running with Spring Boot v2.0.3.RELEASE, Spring v5.0.7.RELEASE
2019-06-06 14:45:50 -The following profiles are active: dev
2019-06-06 14:45:50 -Refreshing org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@2e3967ea: startup date [Thu Jun 06 14:45:50 CST 2019]; root of context hierarchy
2019-06-06 14:45:55 -Multiple Spring Data modules found, entering strict repository configuration mode!
2019-06-06 14:45:58 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$9edc1122] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-06 14:45:58 -Bean 'shiroConfig' of type [com.bootdo.system.config.ShiroConfig$$EnhancerBySpringCGLIB$$91353fc9] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-06 14:46:00 -Bean 'userRealm' of type [com.bootdo.system.shiro.UserRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-06 14:46:01 -Bean 'cacheManager2' of type [net.sf.ehcache.CacheManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-06 14:46:01 -Bean 'ehCacheManager' of type [org.apache.shiro.cache.ehcache.EhCacheManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-06 14:46:01 -Cache with name 'com.bootdo.system.shiro.UserRealm.authorizationCache' does not yet exist.  Creating now.
2019-06-06 14:46:01 -Added EhCache named [com.bootdo.system.shiro.UserRealm.authorizationCache]
2019-06-06 14:46:01 -Bean 'sessionDAO' of type [org.apache.shiro.session.mgt.eis.MemorySessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-06 14:46:01 -Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-06 14:46:01 -Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-06 14:46:01 -Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-06 14:46:02 -Tomcat initialized with port(s): 8081 (http)
2019-06-06 14:46:02 -Initializing ProtocolHandler ["http-nio-8081"]
2019-06-06 14:46:02 -Starting service [Tomcat]
2019-06-06 14:46:02 -Starting Servlet Engine: Apache Tomcat/8.5.31
2019-06-06 14:46:02 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [D:\Java\JDK\jdk1.8.0_102\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;D:/Java/JRE/bin/server;D:/Java/JRE/bin;D:/Java/JRE/lib/amd64;C:\ProgramData\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Windows\System32\OpenSSH\;%JAVA_HOME\bin%;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;;C:\Users\Administrator\Desktop;;.]
2019-06-06 14:46:02 -Initializing Spring embedded WebApplicationContext
2019-06-06 14:46:02 -Root WebApplicationContext: initialization completed in 12677 ms
2019-06-06 14:46:04 -Mapping filter: 'characterEncodingFilter' to: [/*]
2019-06-06 14:46:04 -Mapping filter: 'hiddenHttpMethodFilter' to: [/*]
2019-06-06 14:46:04 -Mapping filter: 'httpPutFormContentFilter' to: [/*]
2019-06-06 14:46:04 -Mapping filter: 'requestContextFilter' to: [/*]
2019-06-06 14:46:04 -Filter xssFilter was not registered (disabled)
2019-06-06 14:46:04 -Mapping filter: 'webStatFilter' to urls: [/*]
2019-06-06 14:46:04 -Mapping filter: 'shiroFilterFactoryBean' to: [/*]
2019-06-06 14:46:04 -Servlet statViewServlet mapped to [/druid/*]
2019-06-06 14:46:04 -Servlet dispatcherServlet mapped to [/]
2019-06-06 14:46:09 -ApplicationContext registed-->org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@2e3967ea: startup date [Thu Jun 06 14:45:50 CST 2019]; root of context hierarchy
2019-06-06 14:46:10 -Using default implementation for ThreadExecutor
2019-06-06 14:46:10 -Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2019-06-06 14:46:10 -Quartz Scheduler v.2.3.0 created.
2019-06-06 14:46:10 -RAMJobStore initialized.
2019-06-06 14:46:10 -Scheduler meta-data: Quartz Scheduler (v2.3.0) 'schedulerFactoryBean' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2019-06-06 14:46:10 -Quartz scheduler 'schedulerFactoryBean' initialized from an externally provided properties instance.
2019-06-06 14:46:10 -Quartz scheduler version: 2.3.0
2019-06-06 14:46:10 -JobFactory set to: com.bootdo.common.quartz.factory.JobFactory@60928a61
2019-06-06 14:46:11 -Initializing ExecutorService  'clientInboundChannelExecutor'
2019-06-06 14:46:11 -Initializing ExecutorService  'clientOutboundChannelExecutor'
2019-06-06 14:46:15 -Mapped "{[/charts/countDD/exportDD],methods=[GET]}" onto public void com.bootdo.charts.controller.countDDController.exportDD(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.HeatLogVo,com.bootdo.moneyLog.vo.WaterLogVo,javax.servlet.http.HttpServletResponse)
2019-06-06 14:46:15 -Mapped "{[/charts/countDD/getCountDD],methods=[POST]}" onto public java.util.Map<java.lang.String, java.lang.Object> com.bootdo.charts.controller.countDDController.getCountD(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo)
2019-06-06 14:46:15 -Mapped "{[/charts/countDD],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.countDDController.countDD()
2019-06-06 14:46:15 -Mapped "{[/charts/countMM/getCountMM],methods=[POST]}" onto public java.util.Map<java.lang.String, java.lang.Object> com.bootdo.charts.controller.countMMController.getCountMM(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo)
2019-06-06 14:46:15 -Mapped "{[/charts/countMM],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.countMMController.countMM()
2019-06-06 14:46:15 -Mapped "{[/charts/countMM/exportMM],methods=[GET]}" onto public void com.bootdo.charts.controller.countMMController.exportMM(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.HeatLogVo,com.bootdo.moneyLog.vo.WaterLogVo,javax.servlet.http.HttpServletResponse)
2019-06-06 14:46:15 -Mapped "{[/charts/countOwe/exportOwe],methods=[GET]}" onto public void com.bootdo.charts.controller.countOweController.exportOwe(com.bootdo.elec.vo.ElecVo,com.bootdo.heat.vo.HeatVo,com.bootdo.water.vo.WaterVo,javax.servlet.http.HttpServletResponse)
2019-06-06 14:46:15 -Mapped "{[/charts/countOwe/getCountOwe],methods=[POST]}" onto public java.util.Map<java.lang.String, java.lang.Object> com.bootdo.charts.controller.countOweController.getCountOwe(com.bootdo.elec.vo.ElecVo,com.bootdo.water.vo.WaterVo,com.bootdo.heat.vo.HeatVo)
2019-06-06 14:46:15 -Mapped "{[/charts/countOwe],methods=[GET]}" onto java.lang.String com.bootdo.charts.controller.countOweController.countOwe()
2019-06-06 14:46:15 -Mapped "{[/charts/countRun],methods=[GET]}" onto java.lang.String com.bootdo.charts.controller.countRunController.countRun()
2019-06-06 14:46:15 -Mapped "{[/charts/countRun/getCountRun],methods=[POST]}" onto public java.util.Map<java.lang.String, java.lang.Object> com.bootdo.charts.controller.countRunController.getCountRun(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo)
2019-06-06 14:46:15 -Mapped "{[/charts/countRun/exportRun],methods=[GET]}" onto public void com.bootdo.charts.controller.countRunController.exportRun(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.HeatLogVo,com.bootdo.moneyLog.vo.WaterLogVo,javax.servlet.http.HttpServletResponse)
2019-06-06 14:46:15 -Mapped "{[/charts/countYY/getCountYY],methods=[POST]}" onto public java.util.Map<java.lang.String, java.lang.Object> com.bootdo.charts.controller.countYYController.getCountYY(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo)
2019-06-06 14:46:15 -Mapped "{[/charts/countYY],methods=[GET]}" onto java.lang.String com.bootdo.charts.controller.countYYController.countYY()
2019-06-06 14:46:15 -Mapped "{[/charts/countYY/exportYY],methods=[GET]}" onto public void com.bootdo.charts.controller.countYYController.exportYY(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.HeatLogVo,com.bootdo.moneyLog.vo.WaterLogVo,javax.servlet.http.HttpServletResponse)
2019-06-06 14:46:15 -Mapped "{[/charts/tableDD/getTableDD],methods=[POST]}" onto public java.util.Map<java.lang.String, java.lang.Object> com.bootdo.charts.controller.tableDDController.getTableDD(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo)
2019-06-06 14:46:15 -Mapped "{[/charts/tableDD/exportDD],methods=[GET]}" onto public void com.bootdo.charts.controller.tableDDController.exportDD(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.HeatLogVo,com.bootdo.moneyLog.vo.WaterLogVo,javax.servlet.http.HttpServletResponse)
2019-06-06 14:46:15 -Mapped "{[/charts/tableDD],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.tableDDController.countDD()
2019-06-06 14:46:15 -Mapped "{[/charts/tableElecMM/tableElecMM],methods=[POST]}" onto public java.util.Map<java.lang.String, java.lang.Object> com.bootdo.charts.controller.tableElecMMController.tableElecMM(com.bootdo.elec.vo.ElecVo,com.bootdo.moneyLog.vo.ElecLogVo)
2019-06-06 14:46:15 -Mapped "{[/charts/tableElecMM],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.tableElecMMController.tableElecMM()
2019-06-06 14:46:15 -Mapped "{[/charts/tableElecMM/exportElecMM],methods=[GET]}" onto public void com.bootdo.charts.controller.tableElecMMController.exportElecMM(com.bootdo.elec.vo.ElecVo,com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse)
2019-06-06 14:46:15 -Mapped "{[/charts/tableElecYY/tableElecYY],methods=[POST]}" onto public java.util.Map<java.lang.String, java.lang.Object> com.bootdo.charts.controller.tableElecYYController.tableElecYY(com.bootdo.elec.vo.ElecVo,com.bootdo.moneyLog.vo.ElecLogVo)
2019-06-06 14:46:15 -Mapped "{[/charts/tableElecYY],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.tableElecYYController.tableElecYY()
2019-06-06 14:46:15 -Mapped "{[/charts/tableElecYY/exportElecYY],methods=[GET]}" onto public void com.bootdo.charts.controller.tableElecYYController.exportElecYY(com.bootdo.elec.vo.ElecVo,com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse)
2019-06-06 14:46:15 -Mapped "{[/charts/tableHeatMM/tableHeatMM],methods=[POST]}" onto public java.util.Map<java.lang.String, java.lang.Object> com.bootdo.charts.controller.tableHeatMMController.tableHeatMM(com.bootdo.heat.vo.HeatVo,com.bootdo.moneyLog.vo.HeatLogVo)
2019-06-06 14:46:15 -Mapped "{[/charts/tableHeatMM],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.tableHeatMMController.tableHeatMM()
2019-06-06 14:46:15 -Mapped "{[/charts/tableHeatMM/exportHeatMM],methods=[GET]}" onto public void com.bootdo.charts.controller.tableHeatMMController.exportHeatMM(com.bootdo.heat.vo.HeatVo,com.bootdo.moneyLog.vo.HeatLogVo,javax.servlet.http.HttpServletResponse)
2019-06-06 14:46:15 -Mapped "{[/charts/tableHeatYY/tableHeatYY],methods=[POST]}" onto public java.util.Map<java.lang.String, java.lang.Object> com.bootdo.charts.controller.tableHeatYYController.tableHeatYY(com.bootdo.heat.vo.HeatVo,com.bootdo.moneyLog.vo.HeatLogVo)
2019-06-06 14:46:15 -Mapped "{[/charts/tableHeatYY],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.tableHeatYYController.tableHeatYY()
2019-06-06 14:46:15 -Mapped "{[/charts/tableHeatYY/exportHeatYY],methods=[GET]}" onto public void com.bootdo.charts.controller.tableHeatYYController.exportHeatYY(com.bootdo.heat.vo.HeatVo,com.bootdo.moneyLog.vo.HeatLogVo,javax.servlet.http.HttpServletResponse)
2019-06-06 14:46:15 -Mapped "{[/charts/tableWaterMM/exportWaterMM],methods=[GET]}" onto public void com.bootdo.charts.controller.tableWaterMMController.exportWaterMM(com.bootdo.water.vo.WaterVo,com.bootdo.moneyLog.vo.WaterLogVo,javax.servlet.http.HttpServletResponse)
2019-06-06 14:46:15 -Mapped "{[/charts/tableWaterMM],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.tableWaterMMController.tableWaterMM()
2019-06-06 14:46:15 -Mapped "{[/charts/tableWaterMM/tableWaterMM],methods=[POST]}" onto public java.util.Map<java.lang.String, java.lang.Object> com.bootdo.charts.controller.tableWaterMMController.tableWaterMM(com.bootdo.water.vo.WaterVo,com.bootdo.moneyLog.vo.WaterLogVo)
2019-06-06 14:46:15 -Mapped "{[/charts/tableWaterYY/tableWaterYY],methods=[POST]}" onto public java.util.Map<java.lang.String, java.lang.Integer> com.bootdo.charts.controller.tableWaterYYController.tableWaterYY(com.bootdo.water.vo.WaterVo,com.bootdo.moneyLog.vo.WaterLogVo)
2019-06-06 14:46:15 -Mapped "{[/charts/tableWaterYY],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.tableWaterYYController.tableWaterYY()
2019-06-06 14:46:15 -Mapped "{[/charts/tableWaterYY/exportWaterYY],methods=[GET]}" onto public void com.bootdo.charts.controller.tableWaterYYController.exportWaterYY(com.bootdo.water.vo.WaterVo,com.bootdo.moneyLog.vo.WaterLogVo,javax.servlet.http.HttpServletResponse)
2019-06-06 14:46:15 -Mapped "{[/common/dict/add],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.add()
2019-06-06 14:46:15 -Mapped "{[/common/dict/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.remove(java.lang.Long)
2019-06-06 14:46:15 -Mapped "{[/common/dict/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.remove(java.lang.Long[])
2019-06-06 14:46:15 -Mapped "{[/common/dict/update]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.update(com.bootdo.common.domain.DictDO)
2019-06-06 14:46:15 -Mapped "{[/common/dict/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.common.controller.DictController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-06-06 14:46:15 -Mapped "{[/common/dict/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.save(com.bootdo.common.domain.DictDO)
2019-06-06 14:46:15 -Mapped "{[/common/dict/type],methods=[GET]}" onto public java.util.List<com.bootdo.common.domain.DictDO> com.bootdo.common.controller.DictController.listType()
2019-06-06 14:46:15 -Mapped "{[/common/dict],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.dict()
2019-06-06 14:46:15 -Mapped "{[/common/dict/add/{type}/{description}],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.addD(org.springframework.ui.Model,java.lang.String,java.lang.String)
2019-06-06 14:46:15 -Mapped "{[/common/dict/list/{type}],methods=[GET]}" onto public java.util.List<com.bootdo.common.domain.DictDO> com.bootdo.common.controller.DictController.listByType(java.lang.String)
2019-06-06 14:46:15 -Mapped "{[/common/dict/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.edit(java.lang.Long,org.springframework.ui.Model)
2019-06-06 14:46:15 -Mapped "{[/common/sysFile/add],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.FileController.add()
2019-06-06 14:46:15 -Mapped "{[/common/sysFile/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.remove(java.lang.Long,javax.servlet.http.HttpServletRequest)
2019-06-06 14:46:15 -Mapped "{[/common/sysFile/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.remove(java.lang.Long[])
2019-06-06 14:46:15 -Mapped "{[/common/sysFile/update]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.update(com.bootdo.common.domain.FileDO)
2019-06-06 14:46:15 -Mapped "{[/common/sysFile/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.common.controller.FileController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-06-06 14:46:15 -Mapped "{[/common/sysFile/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.save(com.bootdo.common.domain.FileDO)
2019-06-06 14:46:15 -Mapped "{[/common/sysFile/info/{id}]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.info(java.lang.Long)
2019-06-06 14:46:15 -Mapped "{[/common/sysFile],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.FileController.sysFile(org.springframework.ui.Model)
2019-06-06 14:46:15 -Mapped "{[/common/sysFile/upload],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.FileController.upload(org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpServletRequest)
2019-06-06 14:46:15 -Mapped "{[/common/sysFile/edit],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.FileController.edit(java.lang.Long,org.springframework.ui.Model)
2019-06-06 14:46:15 -Mapped "{[/common/generator/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.GeneratorController.update(java.util.Map<java.lang.String, java.lang.Object>)
2019-06-06 14:46:15 -Mapped "{[/common/generator/list],methods=[GET]}" onto java.util.List<java.util.Map<java.lang.String, java.lang.Object>> com.bootdo.common.controller.GeneratorController.list()
2019-06-06 14:46:15 -Mapped "{[/common/generator/code/{tableName}]}" onto public void com.bootdo.common.controller.GeneratorController.code(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String) throws java.io.IOException
2019-06-06 14:46:15 -Mapped "{[/common/generator],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.GeneratorController.generator()
2019-06-06 14:46:15 -Mapped "{[/common/generator/batchCode]}" onto public void com.bootdo.common.controller.GeneratorController.batchCode(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String) throws java.io.IOException
2019-06-06 14:46:15 -Mapped "{[/common/generator/edit],methods=[GET]}" onto public java.lang.String com.bootdo.common.controller.GeneratorController.edit(org.springframework.ui.Model)
2019-06-06 14:46:15 -Mapped "{[/common/job/add],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.JobController.add()
2019-06-06 14:46:15 -Mapped "{[/common/job/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.remove(java.lang.Long)
2019-06-06 14:46:15 -Mapped "{[/common/job/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.remove(java.lang.Long[])
2019-06-06 14:46:15 -Mapped "{[/common/job/update],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.update(com.bootdo.common.domain.TaskDO)
2019-06-06 14:46:15 -Mapped "{[/common/job/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.common.controller.JobController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-06-06 14:46:15 -Mapped "{[/common/job/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.save(com.bootdo.common.domain.TaskDO)
2019-06-06 14:46:15 -Mapped "{[/common/job/info/{id}]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.info(java.lang.Long)
2019-06-06 14:46:15 -Mapped "{[/common/job],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.JobController.taskScheduleJob()
2019-06-06 14:46:15 -Mapped "{[/common/job/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.JobController.edit(java.lang.Long,org.springframework.ui.Model)
2019-06-06 14:46:15 -Mapped "{[/common/job/changeJobStatus],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.changeJobStatus(java.lang.Long,java.lang.String)
2019-06-06 14:46:15 -Mapped "{[/common/log/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.LogController.remove(java.lang.Long)
2019-06-06 14:46:15 -Mapped "{[/common/log],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.LogController.log()
2019-06-06 14:46:15 -Mapped "{[/common/log/list],methods=[GET]}" onto com.bootdo.common.domain.PageDO<com.bootdo.common.domain.LogDO> com.bootdo.common.controller.LogController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-06-06 14:46:15 -Mapped "{[/common/log/batchRemove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.LogController.batchRemove(java.lang.Long[])
2019-06-06 14:46:15 -Mapped "{[/common/long],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.LongController.Long()
2019-06-06 14:46:15 -Mapped "{[/common/time],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.TimeController.Time()
2019-06-06 14:46:15 -Mapped "{[/error]}" onto public com.bootdo.common.utils.R com.bootdo.common.exception.MainsiteErrorController.handleError(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-06-06 14:46:15 -Mapped "{[/error],produces=[text/html]}" onto public org.springframework.web.servlet.ModelAndView com.bootdo.common.exception.MainsiteErrorController.errorHtml(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-06-06 14:46:15 -Mapped "{[/elec/elec/add],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecController.add()
2019-06-06 14:46:15 -Mapped "{[/elec/elec/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.remove(java.lang.Long)
2019-06-06 14:46:15 -Mapped "{[/elec/elec/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.remove(java.lang.Long[])
2019-06-06 14:46:15 -Mapped "{[/elec/elec/update],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.update(com.bootdo.elec.domain.ElecDO)
2019-06-06 14:46:15 -Mapped "{[/elec/elec/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.elec.controller.ElecController.list(java.util.Map<java.lang.String, java.lang.Object>,com.bootdo.elec.domain.ElecDO)
2019-06-06 14:46:15 -Mapped "{[/elec/elec/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.save(com.bootdo.elec.domain.ElecDO)
2019-06-06 14:46:15 -Mapped "{[/elec/elec/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecController.edit(java.lang.Long,org.springframework.ui.Model)
2019-06-06 14:46:15 -Mapped "{[/elec/elec/exprotElec],methods=[GET]}" onto public void com.bootdo.elec.controller.ElecController.exprotExcel(com.bootdo.elec.vo.ElecVo,javax.servlet.http.HttpServletResponse)
2019-06-06 14:46:15 -Mapped "{[/elec/elec],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecController.Elec()
2019-06-06 14:46:15 -Mapped "{[/elec/elecInto/importElecIntoExcel],methods=[POST]}" onto public java.lang.String com.bootdo.elec.controller.ElecIntoController.importElecIntoExcel(org.springframework.web.multipart.MultipartFile,com.bootdo.elec.vo.ElecVo,javax.servlet.http.HttpServletResponse) throws java.lang.Exception
2019-06-06 14:46:15 -Mapped "{[/elec/elecInto/exprotElecIntoExcel],methods=[GET]}" onto public void com.bootdo.elec.controller.ElecIntoController.exprotExcel(com.bootdo.elec.vo.ElecVo,javax.servlet.http.HttpServletResponse)
2019-06-06 14:46:15 -Mapped "{[/elec/elecInto],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecIntoController.ElecInto()
2019-06-06 14:46:15 -Mapped "{[/elec/elecPrice/add],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecPriceController.add()
2019-06-06 14:46:15 -Mapped "{[/elec/elecPrice/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecPriceController.remove(java.lang.Long)
2019-06-06 14:46:15 -Mapped "{[/elec/elecPrice/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecPriceController.remove(java.lang.Long[])
2019-06-06 14:46:15 -Mapped "{[/elec/elecPrice/update]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecPriceController.update(com.bootdo.elec.domain.ElecPriceDO)
2019-06-06 14:46:15 -Mapped "{[/elec/elecPrice/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.elec.controller.ElecPriceController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-06-06 14:46:15 -Mapped "{[/elec/elecPrice/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecPriceController.save(com.bootdo.elec.domain.ElecPriceDO,com.bootdo.elec.domain.ElecDO)
2019-06-06 14:46:15 -Mapped "{[/elec/elecPrice/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecPriceController.edit(java.lang.Long,org.springframework.ui.Model)
2019-06-06 14:46:15 -Mapped "{[/elec/elecPrice],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecPriceController.ElecPrice()
2019-06-06 14:46:15 -Mapped "{[/elec/elecUpLoad],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecUpLoadController.Elec()
2019-06-06 14:46:15 -Mapped "{[/elec/elecUpLoad/exprotElecExcel],methods=[GET]}" onto public void com.bootdo.elec.controller.ElecUpLoadController.exprotElecExcel(com.bootdo.elec.vo.ElecVo,javax.servlet.http.HttpServletResponse)
2019-06-06 14:46:15 -Mapped "{[/elec/elecUpLoad/importElecUser]}" onto public java.lang.String com.bootdo.elec.controller.ElecUpLoadController.importElecUser(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)
2019-06-06 14:46:15 -Mapped "{[/elec/elecUpLoad/importElecExcel],methods=[POST]}" onto public java.util.Map<java.lang.String, java.lang.Object> com.bootdo.elec.controller.ElecUpLoadController.importElecExcel(org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpServletRequest) throws java.lang.Exception
2019-06-06 14:46:15 -Mapped "{[/heat/heat/add],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatController.add()
2019-06-06 14:46:15 -Mapped "{[/heat/heat/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatController.remove(java.lang.Integer)
2019-06-06 14:46:15 -Mapped "{[/heat/heat/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatController.remove(java.lang.Integer[])
2019-06-06 14:46:15 -Mapped "{[/heat/heat/update]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatController.update(com.bootdo.heat.domain.HeatDO)
2019-06-06 14:46:15 -Mapped "{[/heat/heat/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.heat.controller.HeatController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-06-06 14:46:15 -Mapped "{[/heat/heat/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatController.save(com.bootdo.heat.domain.HeatDO)
2019-06-06 14:46:15 -Mapped "{[/heat/heat/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatController.edit(java.lang.Integer,org.springframework.ui.Model)
2019-06-06 14:46:15 -Mapped "{[/heat/heat/exprotHeat],methods=[GET]}" onto public void com.bootdo.heat.controller.HeatController.exprotExcel(com.bootdo.heat.vo.HeatVo,javax.servlet.http.HttpServletResponse)
2019-06-06 14:46:15 -Mapped "{[/heat/heat],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatController.Heat()
2019-06-06 14:46:15 -Mapped "{[/heat/heatInto/importHeatIntoExcel],methods=[POST]}" onto public java.lang.String com.bootdo.heat.controller.HeatIntoController.importHeatIntoExcel(org.springframework.web.multipart.MultipartFile,com.bootdo.heat.vo.HeatVo,javax.servlet.http.HttpServletResponse) throws java.lang.Exception
2019-06-06 14:46:15 -Mapped "{[/heat/heatInto/exprotHeatIntoExcel],methods=[GET]}" onto public void com.bootdo.heat.controller.HeatIntoController.exprotExcel(com.bootdo.heat.vo.HeatVo,javax.servlet.http.HttpServletResponse)
2019-06-06 14:46:15 -Mapped "{[/heat/heatInto],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatIntoController.HeatInto()
2019-06-06 14:46:15 -Mapped "{[/heat/heatPrice/add],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatPriceController.add()
2019-06-06 14:46:15 -Mapped "{[/heat/heatPrice/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatPriceController.remove(java.lang.Long)
2019-06-06 14:46:15 -Mapped "{[/heat/heatPrice/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatPriceController.remove(java.lang.Long[])
2019-06-06 14:46:15 -Mapped "{[/heat/heatPrice/update]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatPriceController.update(com.bootdo.heat.domain.HeatPriceDO)
2019-06-06 14:46:15 -Mapped "{[/heat/heatPrice/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.heat.controller.HeatPriceController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-06-06 14:46:15 -Mapped "{[/heat/heatPrice/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatPriceController.save(com.bootdo.heat.domain.HeatPriceDO)
2019-06-06 14:46:15 -Mapped "{[/heat/heatPrice/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatPriceController.edit(java.lang.Long,org.springframework.ui.Model)
2019-06-06 14:46:15 -Mapped "{[/heat/heatPrice],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatPriceController.HeatPrice()
2019-06-06 14:46:15 -Mapped "{[/heat/heatUpLoad/createHeatExcel],methods=[POST]}" onto public java.lang.String com.bootdo.heat.controller.HeatUpLoadController.createHeatExcel(com.bootdo.heat.domain.HeatDO) throws java.lang.Exception
2019-06-06 14:46:15 -Mapped "{[/heat/heatUpLoad],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatUpLoadController.HeatUpLoad()
2019-06-06 14:46:15 -Mapped "{[/heat/heatUpLoad/importHeatExcel]}" onto public java.lang.String com.bootdo.heat.controller.HeatUpLoadController.importHeatExcel(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)
2019-06-06 14:46:15 -Mapped "{[/heat/heatUpLoad/exprotHeatExcel],methods=[GET]}" onto public void com.bootdo.heat.controller.HeatUpLoadController.exprotHeatExcel(com.bootdo.heat.vo.HeatVo,javax.servlet.http.HttpServletResponse)
2019-06-06 14:46:15 -Mapped "{[/moneyList/moneyList],methods=[GET]}" onto java.lang.String com.bootdo.moneyList.controller.MoneyListController.MoneyList()
2019-06-06 14:46:15 -Mapped "{[/moneyList/moneyList/queryAllUser],methods=[POST]}" onto public java.util.List<com.bootdo.moneyList.damain.MoneyListDO> com.bootdo.moneyList.controller.MoneyListController.queryAllUser(com.bootdo.moneyList.damain.MoneyListDO)
2019-06-06 14:46:15 -Mapped "{[/moneyList/moneyList/queryAllUserName],methods=[POST]}" onto public java.util.List<com.bootdo.moneyList.damain.MoneyListDO> com.bootdo.moneyList.controller.MoneyListController.getAllUserName(com.bootdo.moneyList.damain.MoneyListDO)
2019-06-06 14:46:15 -Mapped "{[/moneyList/moneyList/updateMoney],methods=[POST]}" onto public java.lang.Long com.bootdo.moneyList.controller.MoneyListController.updateMoney(com.bootdo.moneyList.damain.MoneyListDO)
2019-06-06 14:46:15 -Mapped "{[/moneyList/moneyList/moneyPrint/{id}],methods=[GET]}" onto java.lang.String com.bootdo.moneyList.controller.MoneyListController.printEdit(java.lang.Long,org.springframework.ui.Model)
2019-06-06 14:46:15 -Mapped "{[/moneyList/moneyWZ/add],methods=[GET]}" onto java.lang.String com.bootdo.moneyList.controller.MoneyListWZController.add()
2019-06-06 14:46:15 -Mapped "{[/moneyList/moneyWZ/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyList.controller.MoneyListWZController.remove(java.lang.Long)
2019-06-06 14:46:15 -Mapped "{[/moneyList/moneyWZ/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyList.controller.MoneyListWZController.remove(java.lang.Long[])
2019-06-06 14:46:15 -Mapped "{[/moneyList/moneyWZ/update],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyList.controller.MoneyListWZController.update(com.bootdo.elec.domain.ElecDO)
2019-06-06 14:46:15 -Mapped "{[/moneyList/moneyWZ/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.moneyList.controller.MoneyListWZController.list(java.util.Map<java.lang.String, java.lang.Object>,com.bootdo.elec.domain.ElecDO)
2019-06-06 14:46:15 -Mapped "{[/moneyList/moneyWZ/batchMoney],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyList.controller.MoneyListWZController.batchMoney(java.lang.Long[])
2019-06-06 14:46:15 -Mapped "{[/moneyList/moneyWZ],methods=[GET]}" onto java.lang.String com.bootdo.moneyList.controller.MoneyListWZController.MoneyWZ()
2019-06-06 14:46:15 -Mapped "{[/moneyList/moneyWZ/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.moneyList.controller.MoneyListWZController.edit(java.lang.Long,org.springframework.ui.Model)
2019-06-06 14:46:15 -Mapped "{[/moneyList/moneyWZ/exprotWZ],methods=[GET]}" onto public void com.bootdo.moneyList.controller.MoneyListWZController.exportElecYY(com.bootdo.elec.vo.ElecVo,com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse)
2019-06-06 14:46:15 -Mapped "{[/moneyLog/elecLog/add],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.ElecLogController.add()
2019-06-06 14:46:15 -Mapped "{[/moneyLog/elecLog/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.ElecLogController.remove(java.lang.Long)
2019-06-06 14:46:15 -Mapped "{[/moneyLog/elecLog/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.ElecLogController.remove(java.lang.Long[])
2019-06-06 14:46:15 -Mapped "{[/moneyLog/elecLog/update]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.ElecLogController.update(java.util.Map<java.lang.String, java.lang.Object>,com.bootdo.moneyLog.domain.ElecLogDO)
2019-06-06 14:46:15 -Mapped "{[/moneyLog/elecLog/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.moneyLog.controller.ElecLogController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-06-06 14:46:15 -Mapped "{[/moneyLog/elecLog/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.ElecLogController.save(com.bootdo.moneyLog.domain.ElecLogDO)
2019-06-06 14:46:15 -Mapped "{[/moneyLog/elecLog/exprotElecLog],methods=[GET]}" onto public void com.bootdo.moneyLog.controller.ElecLogController.exprotElecLog(com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-06-06 14:46:15 -Mapped "{[/moneyLog/elecLog],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.ElecLogController.moneyLog()
2019-06-06 14:46:15 -Mapped "{[/moneyLog/elecLog/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.ElecLogController.edit(java.lang.Long,org.springframework.ui.Model)
2019-06-06 14:46:15 -Mapped "{[/moneyLog/heatLog/add],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.HeatLogController.add()
2019-06-06 14:46:15 -Mapped "{[/moneyLog/heatLog/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.HeatLogController.remove(java.lang.Long)
2019-06-06 14:46:15 -Mapped "{[/moneyLog/heatLog/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.HeatLogController.remove(java.lang.Long[])
2019-06-06 14:46:15 -Mapped "{[/moneyLog/heatLog/update]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.HeatLogController.update(java.util.Map<java.lang.String, java.lang.Object>,com.bootdo.moneyLog.domain.HeatLogDO)
2019-06-06 14:46:15 -Mapped "{[/moneyLog/heatLog/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.moneyLog.controller.HeatLogController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-06-06 14:46:15 -Mapped "{[/moneyLog/heatLog/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.HeatLogController.save(com.bootdo.moneyLog.domain.HeatLogDO)
2019-06-06 14:46:15 -Mapped "{[/moneyLog/heatLog],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.HeatLogController.HeatLog()
2019-06-06 14:46:15 -Mapped "{[/moneyLog/heatLog/exprotHeatLog],methods=[GET]}" onto public void com.bootdo.moneyLog.controller.HeatLogController.exprotHeatLog(com.bootdo.moneyLog.vo.HeatLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-06-06 14:46:15 -Mapped "{[/moneyLog/heatLog/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.HeatLogController.edit(java.lang.Long,org.springframework.ui.Model)
2019-06-06 14:46:15 -Mapped "{[/moneyLog/waterLog/add],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.WaterLogController.add()
2019-06-06 14:46:15 -Mapped "{[/moneyLog/waterLog/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.WaterLogController.remove(java.lang.Long)
2019-06-06 14:46:15 -Mapped "{[/moneyLog/waterLog/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.WaterLogController.remove(java.lang.Long[])
2019-06-06 14:46:15 -Mapped "{[/moneyLog/waterLog/update]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.WaterLogController.update(java.util.Map<java.lang.String, java.lang.Object>,com.bootdo.moneyLog.domain.WaterLogDO)
2019-06-06 14:46:15 -Mapped "{[/moneyLog/waterLog/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.moneyLog.controller.WaterLogController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-06-06 14:46:15 -Mapped "{[/moneyLog/waterLog/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.WaterLogController.save(com.bootdo.moneyLog.domain.WaterLogDO)
2019-06-06 14:46:15 -Mapped "{[/moneyLog/waterLog],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.WaterLogController.WaterLog()
2019-06-06 14:46:15 -Mapped "{[/moneyLog/waterLog/exprotWaterLog],methods=[GET]}" onto public void com.bootdo.moneyLog.controller.WaterLogController.exprotWaterLog(com.bootdo.moneyLog.vo.WaterLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-06-06 14:46:15 -Mapped "{[/moneyLog/waterLog/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.WaterLogController.edit(java.lang.Long,org.springframework.ui.Model)
2019-06-06 14:46:15 -Mapped "{[/oa/notify/add],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.add()
2019-06-06 14:46:15 -Mapped "{[/oa/notify/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.remove(java.lang.Long)
2019-06-06 14:46:15 -Mapped "{[/oa/notify/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.remove(java.lang.Long[])
2019-06-06 14:46:15 -Mapped "{[/oa/notify/update]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.update(com.bootdo.oa.domain.NotifyDO)
2019-06-06 14:46:15 -Mapped "{[/oa/notify/read/{id}],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.read(java.lang.Long,org.springframework.ui.Model)
2019-06-06 14:46:15 -Mapped "{[/oa/notify/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.oa.controller.NotifyController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-06-06 14:46:15 -Mapped "{[/oa/notify/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.save(com.bootdo.oa.domain.NotifyDO)
2019-06-06 14:46:15 -Mapped "{[/oa/notify/message],methods=[GET]}" onto com.bootdo.common.utils.PageUtils com.bootdo.oa.controller.NotifyController.message()
2019-06-06 14:46:15 -Mapped "{[/oa/notify],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.oaNotify()
2019-06-06 14:46:15 -Mapped "{[/oa/notify/selfList],methods=[GET]}" onto com.bootdo.common.utils.PageUtils com.bootdo.oa.controller.NotifyController.selfList(java.util.Map<java.lang.String, java.lang.Object>)
2019-06-06 14:46:15 -Mapped "{[/oa/notify/selfNotify],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.selefNotify()
2019-06-06 14:46:15 -Mapped "{[/oa/notify/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.edit(java.lang.Long,org.springframework.ui.Model)
2019-06-06 14:46:15 -Mapped "{[/print/print/add],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.add()
2019-06-06 14:46:15 -Mapped "{[/print/print/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.print.controller.PrintController.remove(java.lang.Long)
2019-06-06 14:46:15 -Mapped "{[/print/print/update]}" onto public com.bootdo.common.utils.R com.bootdo.print.controller.PrintController.update(com.bootdo.print.domain.PrintDO)
2019-06-06 14:46:15 -Mapped "{[/print/print/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.print.controller.PrintController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-06-06 14:46:15 -Mapped "{[/print/print/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.print.controller.PrintController.save(java.lang.String,com.bootdo.print.domain.PrintDO)
2019-06-06 14:46:15 -Mapped "{[/print/print/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.print.controller.PrintController.batchRemove(java.lang.Long[])
2019-06-06 14:46:15 -Mapped "{[/print/print/printEdit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.printEdit(java.lang.Long,org.springframework.ui.Model)
2019-06-06 14:46:15 -Mapped "{[/print/print/batchPrint],methods=[POST]}" onto public java.util.List<com.bootdo.print.vo.PrintVo> com.bootdo.print.controller.PrintController.batchPrint(java.lang.Long[])
2019-06-06 14:46:15 -Mapped "{[/print/print],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.Print()
2019-06-06 14:46:15 -Mapped "{[/print/print/printMoney],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.printMoney()
2019-06-06 14:46:15 -Mapped "{[/print/print/exprotPrint],methods=[GET]}" onto public void com.bootdo.print.controller.PrintController.exprotPrint(com.bootdo.print.vo.PrintVo,javax.servlet.http.HttpServletResponse)
2019-06-06 14:46:15 -Mapped "{[/print/print/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.edit(java.lang.Long,org.springframework.ui.Model)
2019-06-06 14:46:15 -Mapped "{[/system/sysDept/add/{pId}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.add(java.lang.Long,org.springframework.ui.Model)
2019-06-06 14:46:15 -Mapped "{[/system/sysDept/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.remove(java.lang.Long)
2019-06-06 14:46:15 -Mapped "{[/system/sysDept/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.remove(java.lang.Long[])
2019-06-06 14:46:15 -Mapped "{[/system/sysDept/update]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.update(com.bootdo.system.domain.DeptDO)
2019-06-06 14:46:15 -Mapped "{[/system/sysDept/list],methods=[GET]}" onto public java.util.List<com.bootdo.system.domain.DeptDO> com.bootdo.system.controller.DeptController.list()
2019-06-06 14:46:15 -Mapped "{[/system/sysDept/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.save(com.bootdo.system.domain.DeptDO)
2019-06-06 14:46:15 -Mapped "{[/system/sysDept/tree],methods=[GET]}" onto public com.bootdo.common.domain.Tree<com.bootdo.system.domain.DeptDO> com.bootdo.system.controller.DeptController.tree()
2019-06-06 14:46:15 -Mapped "{[/system/sysDept],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.dept()
2019-06-06 14:46:15 -Mapped "{[/system/sysDept/treeView],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.treeView()
2019-06-06 14:46:15 -Mapped "{[/system/sysDept/edit/{deptId}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.edit(java.lang.Long,org.springframework.ui.Model)
2019-06-06 14:46:15 -Mapped "{[/index],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.index(org.springframework.ui.Model)
2019-06-06 14:46:15 -Mapped "{[/main],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.main()
2019-06-06 14:46:15 -Mapped "{[/logout],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.logout()
2019-06-06 14:46:15 -Mapped "{[/getVerify],methods=[GET]}" onto public void com.bootdo.system.controller.LoginController.getVerify(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-06-06 14:46:15 -Mapped "{[/ || ],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.welcome(org.springframework.ui.Model)
2019-06-06 14:46:15 -Mapped "{[/login],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.LoginController.ajaxLogin(java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest)
2019-06-06 14:46:15 -Mapped "{[/login],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.login(org.springframework.ui.Model)
2019-06-06 14:46:15 -Mapped "{[/sys/menu/add/{pId}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.MenuController.add(org.springframework.ui.Model,java.lang.Long)
2019-06-06 14:46:15 -Mapped "{[/sys/menu/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.MenuController.remove(java.lang.Long)
2019-06-06 14:46:15 -Mapped "{[/sys/menu/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.MenuController.update(com.bootdo.system.domain.MenuDO)
2019-06-06 14:46:15 -Mapped "{[/sys/menu/list]}" onto java.util.List<com.bootdo.system.domain.MenuDO> com.bootdo.system.controller.MenuController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-06-06 14:46:15 -Mapped "{[/sys/menu/save],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.MenuController.save(com.bootdo.system.domain.MenuDO)
2019-06-06 14:46:15 -Mapped "{[/sys/menu/tree/{roleId}],methods=[GET]}" onto com.bootdo.common.domain.Tree<com.bootdo.system.domain.MenuDO> com.bootdo.system.controller.MenuController.tree(java.lang.Long)
2019-06-06 14:46:15 -Mapped "{[/sys/menu/tree],methods=[GET]}" onto com.bootdo.common.domain.Tree<com.bootdo.system.domain.MenuDO> com.bootdo.system.controller.MenuController.tree()
2019-06-06 14:46:15 -Mapped "{[/sys/menu],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.MenuController.menu(org.springframework.ui.Model)
2019-06-06 14:46:15 -Mapped "{[/sys/menu/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.MenuController.edit(org.springframework.ui.Model,java.lang.Long)
2019-06-06 14:46:15 -Mapped "{[/sys/role/add],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.RoleController.add()
2019-06-06 14:46:15 -Mapped "{[/sys/role/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.update(com.bootdo.system.domain.RoleDO)
2019-06-06 14:46:15 -Mapped "{[/sys/role/list],methods=[GET]}" onto java.util.List<com.bootdo.system.domain.RoleDO> com.bootdo.system.controller.RoleController.list()
2019-06-06 14:46:15 -Mapped "{[/sys/role/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.save(java.lang.Long)
2019-06-06 14:46:15 -Mapped "{[/sys/role/save],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.save(com.bootdo.system.domain.RoleDO)
2019-06-06 14:46:16 -Mapped "{[/sys/role/batchRemove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.batchRemove(java.lang.Long[])
2019-06-06 14:46:16 -Mapped "{[/sys/role],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.RoleController.role()
2019-06-06 14:46:16 -Mapped "{[/sys/role/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.RoleController.edit(java.lang.Long,org.springframework.ui.Model)
2019-06-06 14:46:16 -Mapped "{[/sys/online/list]}" onto public java.util.List<com.bootdo.system.domain.UserOnline> com.bootdo.system.controller.SessionController.list()
2019-06-06 14:46:16 -Mapped "{[/sys/online/sessionList]}" onto public java.util.Collection<org.apache.shiro.session.Session> com.bootdo.system.controller.SessionController.sessionList()
2019-06-06 14:46:16 -Mapped "{[/sys/online],methods=[GET]}" onto public java.lang.String com.bootdo.system.controller.SessionController.online()
2019-06-06 14:46:16 -Mapped "{[/sys/online/forceLogout/{sessionId}]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.SessionController.forceLogout(java.lang.String,org.springframework.web.servlet.mvc.support.RedirectAttributes)
2019-06-06 14:46:16 -Mapped "{[/sys/user/exit],methods=[POST]}" onto boolean com.bootdo.system.controller.UserController.exit(java.util.Map<java.lang.String, java.lang.Object>)
2019-06-06 14:46:16 -Mapped "{[/sys/user/add],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.add(org.springframework.ui.Model)
2019-06-06 14:46:16 -Mapped "{[/sys/user/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.remove(java.lang.Long)
2019-06-06 14:46:16 -Mapped "{[/sys/user/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.update(com.bootdo.system.domain.UserDO)
2019-06-06 14:46:16 -Mapped "{[/sys/user/list],methods=[GET]}" onto com.bootdo.common.utils.PageUtils com.bootdo.system.controller.UserController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-06-06 14:46:16 -Mapped "{[/sys/user/save],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.save(com.bootdo.system.domain.UserDO)
2019-06-06 14:46:16 -Mapped "{[/sys/user/batchRemove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.batchRemove(java.lang.Long[])
2019-06-06 14:46:16 -Mapped "{[/sys/user/tree],methods=[GET]}" onto public com.bootdo.common.domain.Tree<com.bootdo.system.domain.DeptDO> com.bootdo.system.controller.UserController.tree()
2019-06-06 14:46:16 -Mapped "{[/sys/user/treeView],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.treeView()
2019-06-06 14:46:16 -Mapped "{[/sys/user/updatePeronal],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.updatePeronal(com.bootdo.system.domain.UserDO)
2019-06-06 14:46:16 -Mapped "{[/sys/user/adminResetPwd],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.adminResetPwd(com.bootdo.system.vo.UserVO)
2019-06-06 14:46:16 -Mapped "{[/sys/user/personal],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.personal(org.springframework.ui.Model)
2019-06-06 14:46:16 -Mapped "{[/sys/user/resetPwd],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.resetPwd(com.bootdo.system.vo.UserVO)
2019-06-06 14:46:16 -Mapped "{[/sys/user/resetPwd/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.resetPwd(java.lang.Long,org.springframework.ui.Model)
2019-06-06 14:46:16 -Mapped "{[/sys/user/uploadImg],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.uploadImg(org.springframework.web.multipart.MultipartFile,java.lang.String,javax.servlet.http.HttpServletRequest)
2019-06-06 14:46:16 -Mapped "{[/sys/user],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.user(org.springframework.ui.Model)
2019-06-06 14:46:16 -Mapped "{[/sys/user/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.edit(org.springframework.ui.Model,java.lang.Long)
2019-06-06 14:46:16 -Mapped "{[/file/downImport/{importType}],methods=[GET]}" onto public void com.bootdo.temple.controller.TempletController.downImport(javax.servlet.http.HttpServletResponse,java.lang.String)
2019-06-06 14:46:16 -Mapped "{[/water/water/add],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterController.add()
2019-06-06 14:46:16 -Mapped "{[/water/water/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterController.remove(java.lang.Long)
2019-06-06 14:46:16 -Mapped "{[/water/water/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterController.remove(java.lang.Long[])
2019-06-06 14:46:16 -Mapped "{[/water/water/update]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterController.update(com.bootdo.water.domain.WaterDO)
2019-06-06 14:46:16 -Mapped "{[/water/water/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.water.controller.WaterController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-06-06 14:46:16 -Mapped "{[/water/water/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterController.save(com.bootdo.water.domain.WaterDO)
2019-06-06 14:46:16 -Mapped "{[/water/water],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterController.Water()
2019-06-06 14:46:16 -Mapped "{[/water/water/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterController.edit(java.lang.Long,org.springframework.ui.Model)
2019-06-06 14:46:16 -Mapped "{[/water/water/exprotWater],methods=[GET]}" onto public void com.bootdo.water.controller.WaterController.exprotExcel(com.bootdo.water.vo.WaterVo,javax.servlet.http.HttpServletResponse)
2019-06-06 14:46:16 -Mapped "{[/water/waterInto],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterIntoController.WaterInto()
2019-06-06 14:46:16 -Mapped "{[/water/waterInto/importWaterIntoExcel],methods=[POST]}" onto public java.lang.String com.bootdo.water.controller.WaterIntoController.importWaterIntoExcel(org.springframework.web.multipart.MultipartFile,com.bootdo.water.vo.WaterVo,javax.servlet.http.HttpServletResponse) throws java.lang.Exception
2019-06-06 14:46:16 -Mapped "{[/water/waterInto/exprotWaterIntoExcel],methods=[GET]}" onto public void com.bootdo.water.controller.WaterIntoController.exprotExcel(com.bootdo.water.vo.WaterVo,javax.servlet.http.HttpServletResponse)
2019-06-06 14:46:16 -Mapped "{[/water/waterPrice/add],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterPriceController.add()
2019-06-06 14:46:16 -Mapped "{[/water/waterPrice/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterPriceController.remove(java.lang.Long)
2019-06-06 14:46:16 -Mapped "{[/water/waterPrice/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterPriceController.remove(java.lang.Long[])
2019-06-06 14:46:16 -Mapped "{[/water/waterPrice/update]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterPriceController.update(com.bootdo.water.domain.WaterPriceDO)
2019-06-06 14:46:16 -Mapped "{[/water/waterPrice/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.water.controller.WaterPriceController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-06-06 14:46:16 -Mapped "{[/water/waterPrice/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterPriceController.save(com.bootdo.water.domain.WaterPriceDO)
2019-06-06 14:46:16 -Mapped "{[/water/waterPrice/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterPriceController.edit(java.lang.Long,org.springframework.ui.Model)
2019-06-06 14:46:16 -Mapped "{[/water/waterPrice],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterPriceController.WaterPrice()
2019-06-06 14:46:16 -Mapped "{[/water/waterUpLoad/exprotWaterExcel],methods=[GET]}" onto public void com.bootdo.water.controller.WaterUpLoadController.exprotWaterExcel(com.bootdo.water.vo.WaterVo,javax.servlet.http.HttpServletResponse)
2019-06-06 14:46:16 -Mapped "{[/water/waterUpLoad/createWaterExcel],methods=[POST]}" onto public java.lang.String com.bootdo.water.controller.WaterUpLoadController.createWaterExcel(com.bootdo.water.domain.WaterDO) throws java.lang.Exception
2019-06-06 14:46:16 -Mapped "{[/water/waterUpLoad/importWaterExcel]}" onto public java.lang.String com.bootdo.water.controller.WaterUpLoadController.importWaterExcel(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)
2019-06-06 14:46:16 -Mapped "{[/water/waterUpLoad],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterUpLoadController.WaterUpLoad()
2019-06-06 14:46:16 -Mapped "{[/v2/api-docs],methods=[GET],produces=[application/json || application/hal+json]}" onto public org.springframework.http.ResponseEntity<springfox.documentation.spring.web.json.Json> springfox.documentation.swagger2.web.Swagger2Controller.getDocumentation(java.lang.String,javax.servlet.http.HttpServletRequest)
2019-06-06 14:46:16 -Mapped "{[/swagger-resources/configuration/ui]}" onto org.springframework.http.ResponseEntity<springfox.documentation.swagger.web.UiConfiguration> springfox.documentation.swagger.web.ApiResourceController.uiConfiguration()
2019-06-06 14:46:16 -Mapped "{[/swagger-resources]}" onto org.springframework.http.ResponseEntity<java.util.List<springfox.documentation.swagger.web.SwaggerResource>> springfox.documentation.swagger.web.ApiResourceController.swaggerResources()
2019-06-06 14:46:16 -Mapped "{[/swagger-resources/configuration/security]}" onto org.springframework.http.ResponseEntity<springfox.documentation.swagger.web.SecurityConfiguration> springfox.documentation.swagger.web.ApiResourceController.securityConfiguration()
2019-06-06 14:46:16 -Initializing ExecutorService  'messageBrokerTaskScheduler'
2019-06-06 14:46:16 -Mapped URL path [/endpointChat/**] onto handler of type [class org.springframework.web.socket.sockjs.support.SockJsHttpRequestHandler]
2019-06-06 14:46:16 -Initializing ExecutorService  'brokerChannelExecutor'
2019-06-06 14:46:17 -Mapped URL path [/**/favicon.ico] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-06-06 14:46:18 -Looking for @ControllerAdvice: org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@2e3967ea: startup date [Thu Jun 06 14:45:50 CST 2019]; root of context hierarchy
2019-06-06 14:46:18 -Mapped URL path [/webjars/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-06-06 14:46:18 -Mapped URL path [/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-06-06 14:46:18 -Detected @ExceptionHandler methods in BDExceptionHandler
2019-06-06 14:46:18 -[THYMELEAF][main] Template Mode 'LEGACYHTML5' is deprecated. Using Template Mode 'HTML' instead.
2019-06-06 14:46:23 -Registering beans for JMX exposure on startup
2019-06-06 14:46:23 -Bean with name 'dataSource' has been autodetected for JMX exposure
2019-06-06 14:46:23 -Located MBean 'dataSource': registering with JMX server as MBean [com.alibaba.druid.pool:name=dataSource,type=DruidDataSource]
2019-06-06 14:46:23 -Starting beans in phase 2147483647
2019-06-06 14:46:23 -Context refreshed
2019-06-06 14:46:24 -Found 1 custom documentation plugin(s)
2019-06-06 14:46:24 -Scanning for api listing references
2019-06-06 14:46:25 -Generating unique operation named: removeUsingPOST_1
2019-06-06 14:46:25 -Generating unique operation named: addUsingGET_1
2019-06-06 14:46:25 -Generating unique operation named: editUsingGET_1
2019-06-06 14:46:25 -Generating unique operation named: listUsingGET_1
2019-06-06 14:46:25 -Generating unique operation named: removeUsingPOST_2
2019-06-06 14:46:25 -Generating unique operation named: removeUsingPOST_3
2019-06-06 14:46:25 -Generating unique operation named: saveUsingPOST_1
2019-06-06 14:46:25 -Generating unique operation named: updateUsingGET_1
2019-06-06 14:46:25 -Generating unique operation named: updateUsingHEAD_1
2019-06-06 14:46:25 -Generating unique operation named: updateUsingPOST_1
2019-06-06 14:46:25 -Generating unique operation named: updateUsingPUT_1
2019-06-06 14:46:25 -Generating unique operation named: updateUsingPATCH_1
2019-06-06 14:46:25 -Generating unique operation named: updateUsingDELETE_1
2019-06-06 14:46:25 -Generating unique operation named: updateUsingOPTIONS_1
2019-06-06 14:46:25 -Generating unique operation named: updateUsingTRACE_1
2019-06-06 14:46:25 -Generating unique operation named: addUsingGET_2
2019-06-06 14:46:25 -Generating unique operation named: editUsingGET_2
2019-06-06 14:46:25 -Generating unique operation named: listUsingGET_2
2019-06-06 14:46:25 -Generating unique operation named: removeUsingPOST_4
2019-06-06 14:46:25 -Generating unique operation named: removeUsingPOST_5
2019-06-06 14:46:25 -Generating unique operation named: saveUsingPOST_2
2019-06-06 14:46:25 -Generating unique operation named: updateUsingPOST_2
2019-06-06 14:46:25 -Generating unique operation named: exprotExcelUsingGET_1
2019-06-06 14:46:25 -Generating unique operation named: addUsingGET_3
2019-06-06 14:46:25 -Generating unique operation named: editUsingGET_3
2019-06-06 14:46:25 -Generating unique operation named: listUsingGET_3
2019-06-06 14:46:25 -Generating unique operation named: removeUsingPOST_6
2019-06-06 14:46:25 -Generating unique operation named: removeUsingPOST_7
2019-06-06 14:46:25 -Generating unique operation named: saveUsingPOST_3
2019-06-06 14:46:25 -Generating unique operation named: updateUsingGET_2
2019-06-06 14:46:25 -Generating unique operation named: updateUsingHEAD_2
2019-06-06 14:46:25 -Generating unique operation named: updateUsingPOST_3
2019-06-06 14:46:25 -Generating unique operation named: updateUsingPUT_2
2019-06-06 14:46:25 -Generating unique operation named: updateUsingPATCH_2
2019-06-06 14:46:25 -Generating unique operation named: updateUsingDELETE_2
2019-06-06 14:46:25 -Generating unique operation named: updateUsingOPTIONS_2
2019-06-06 14:46:25 -Generating unique operation named: updateUsingTRACE_2
2019-06-06 14:46:25 -Generating unique operation named: addUsingGET_4
2019-06-06 14:46:25 -Generating unique operation named: editUsingGET_4
2019-06-06 14:46:25 -Generating unique operation named: listUsingGET_4
2019-06-06 14:46:25 -Generating unique operation named: removeUsingPOST_8
2019-06-06 14:46:25 -Generating unique operation named: removeUsingPOST_9
2019-06-06 14:46:25 -Generating unique operation named: saveUsingPOST_4
2019-06-06 14:46:25 -Generating unique operation named: updateUsingGET_3
2019-06-06 14:46:25 -Generating unique operation named: updateUsingHEAD_3
2019-06-06 14:46:25 -Generating unique operation named: updateUsingPOST_4
2019-06-06 14:46:25 -Generating unique operation named: updateUsingPUT_3
2019-06-06 14:46:25 -Generating unique operation named: updateUsingPATCH_3
2019-06-06 14:46:25 -Generating unique operation named: updateUsingDELETE_3
2019-06-06 14:46:25 -Generating unique operation named: updateUsingOPTIONS_3
2019-06-06 14:46:25 -Generating unique operation named: updateUsingTRACE_3
2019-06-06 14:46:25 -Generating unique operation named: ElecUsingGET_1
2019-06-06 14:46:25 -Generating unique operation named: addUsingGET_5
2019-06-06 14:46:25 -Generating unique operation named: editUsingGET_5
2019-06-06 14:46:25 -Generating unique operation named: listUsingGET_5
2019-06-06 14:46:25 -Generating unique operation named: removeUsingPOST_10
2019-06-06 14:46:25 -Generating unique operation named: removeUsingPOST_11
2019-06-06 14:46:25 -Generating unique operation named: saveUsingPOST_5
2019-06-06 14:46:25 -Generating unique operation named: updateUsingGET_4
2019-06-06 14:46:25 -Generating unique operation named: updateUsingHEAD_4
2019-06-06 14:46:25 -Generating unique operation named: updateUsingPOST_5
2019-06-06 14:46:25 -Generating unique operation named: updateUsingPUT_4
2019-06-06 14:46:25 -Generating unique operation named: updateUsingPATCH_4
2019-06-06 14:46:25 -Generating unique operation named: updateUsingDELETE_4
2019-06-06 14:46:25 -Generating unique operation named: updateUsingOPTIONS_4
2019-06-06 14:46:25 -Generating unique operation named: updateUsingTRACE_4
2019-06-06 14:46:25 -Generating unique operation named: editUsingGET_6
2019-06-06 14:46:25 -Generating unique operation named: listUsingGET_6
2019-06-06 14:46:25 -Generating unique operation named: updateUsingPOST_6
2019-06-06 14:46:25 -Generating unique operation named: addUsingGET_6
2019-06-06 14:46:25 -Generating unique operation named: editUsingGET_7
2019-06-06 14:46:25 -Generating unique operation named: exprotExcelUsingGET_2
2019-06-06 14:46:25 -Generating unique operation named: listUsingGET_7
2019-06-06 14:46:25 -Generating unique operation named: removeUsingPOST_12
2019-06-06 14:46:25 -Generating unique operation named: removeUsingPOST_13
2019-06-06 14:46:25 -Generating unique operation named: saveUsingPOST_6
2019-06-06 14:46:25 -Generating unique operation named: updateUsingGET_5
2019-06-06 14:46:25 -Generating unique operation named: updateUsingHEAD_5
2019-06-06 14:46:26 -Generating unique operation named: updateUsingPOST_7
2019-06-06 14:46:26 -Generating unique operation named: updateUsingPUT_5
2019-06-06 14:46:26 -Generating unique operation named: updateUsingPATCH_5
2019-06-06 14:46:26 -Generating unique operation named: updateUsingDELETE_5
2019-06-06 14:46:26 -Generating unique operation named: updateUsingOPTIONS_5
2019-06-06 14:46:26 -Generating unique operation named: updateUsingTRACE_5
2019-06-06 14:46:26 -Generating unique operation named: exprotExcelUsingGET_3
2019-06-06 14:46:26 -Generating unique operation named: addUsingGET_7
2019-06-06 14:46:26 -Generating unique operation named: editUsingGET_8
2019-06-06 14:46:26 -Generating unique operation named: listUsingGET_8
2019-06-06 14:46:26 -Generating unique operation named: removeUsingPOST_14
2019-06-06 14:46:26 -Generating unique operation named: removeUsingPOST_15
2019-06-06 14:46:26 -Generating unique operation named: saveUsingPOST_7
2019-06-06 14:46:26 -Generating unique operation named: updateUsingGET_6
2019-06-06 14:46:26 -Generating unique operation named: updateUsingHEAD_6
2019-06-06 14:46:26 -Generating unique operation named: updateUsingPOST_8
2019-06-06 14:46:26 -Generating unique operation named: updateUsingPUT_6
2019-06-06 14:46:26 -Generating unique operation named: updateUsingPATCH_6
2019-06-06 14:46:26 -Generating unique operation named: updateUsingDELETE_6
2019-06-06 14:46:26 -Generating unique operation named: updateUsingOPTIONS_6
2019-06-06 14:46:26 -Generating unique operation named: updateUsingTRACE_6
2019-06-06 14:46:26 -Generating unique operation named: addUsingGET_8
2019-06-06 14:46:26 -Generating unique operation named: editUsingGET_9
2019-06-06 14:46:26 -Generating unique operation named: listUsingGET_9
2019-06-06 14:46:26 -Generating unique operation named: removeUsingPOST_16
2019-06-06 14:46:26 -Generating unique operation named: removeUsingPOST_17
2019-06-06 14:46:26 -Generating unique operation named: saveUsingPOST_8
2019-06-06 14:46:26 -Generating unique operation named: updateUsingGET_7
2019-06-06 14:46:26 -Generating unique operation named: updateUsingHEAD_7
2019-06-06 14:46:26 -Generating unique operation named: updateUsingPOST_9
2019-06-06 14:46:26 -Generating unique operation named: updateUsingPUT_7
2019-06-06 14:46:26 -Generating unique operation named: updateUsingPATCH_7
2019-06-06 14:46:26 -Generating unique operation named: updateUsingDELETE_7
2019-06-06 14:46:26 -Generating unique operation named: updateUsingOPTIONS_7
2019-06-06 14:46:26 -Generating unique operation named: updateUsingTRACE_7
2019-06-06 14:46:26 -Generating unique operation named: addUsingGET_9
2019-06-06 14:46:26 -Generating unique operation named: editUsingGET_10
2019-06-06 14:46:26 -Generating unique operation named: infoUsingGET_1
2019-06-06 14:46:26 -Generating unique operation named: infoUsingHEAD_1
2019-06-06 14:46:26 -Generating unique operation named: infoUsingPOST_1
2019-06-06 14:46:26 -Generating unique operation named: infoUsingPUT_1
2019-06-06 14:46:26 -Generating unique operation named: infoUsingPATCH_1
2019-06-06 14:46:26 -Generating unique operation named: infoUsingDELETE_1
2019-06-06 14:46:26 -Generating unique operation named: infoUsingOPTIONS_1
2019-06-06 14:46:26 -Generating unique operation named: infoUsingTRACE_1
2019-06-06 14:46:26 -Generating unique operation named: listUsingGET_10
2019-06-06 14:46:26 -Generating unique operation named: removeUsingPOST_18
2019-06-06 14:46:26 -Generating unique operation named: removeUsingPOST_19
2019-06-06 14:46:26 -Generating unique operation named: saveUsingPOST_9
2019-06-06 14:46:26 -Generating unique operation named: updateUsingPOST_10
2019-06-06 14:46:26 -Generating unique operation named: listUsingGET_11
2019-06-06 14:46:26 -Generating unique operation named: removeUsingPOST_20
2019-06-06 14:46:26 -Generating unique operation named: welcomeUsingGET_1
2019-06-06 14:46:26 -Generating unique operation named: addUsingGET_10
2019-06-06 14:46:26 -Generating unique operation named: editUsingGET_11
2019-06-06 14:46:26 -Generating unique operation named: listUsingGET_12
2019-06-06 14:46:26 -Generating unique operation named: removeUsingPOST_21
2019-06-06 14:46:26 -Generating unique operation named: saveUsingPOST_10
2019-06-06 14:46:26 -Generating unique operation named: treeUsingGET_1
2019-06-06 14:46:26 -Generating unique operation named: treeUsingGET_2
2019-06-06 14:46:26 -Generating unique operation named: updateUsingPOST_11
2019-06-06 14:46:26 -Generating unique operation named: addUsingGET_11
2019-06-06 14:46:26 -Generating unique operation named: editUsingGET_12
2019-06-06 14:46:26 -Generating unique operation named: listUsingGET_13
2019-06-06 14:46:26 -Generating unique operation named: removeUsingPOST_22
2019-06-06 14:46:26 -Generating unique operation named: removeUsingPOST_23
2019-06-06 14:46:26 -Generating unique operation named: updateUsingPOST_12
2019-06-06 14:46:26 -Generating unique operation named: addUsingGET_12
2019-06-06 14:46:26 -Generating unique operation named: editUsingGET_13
2019-06-06 14:46:26 -Generating unique operation named: listUsingGET_14
2019-06-06 14:46:26 -Generating unique operation named: removeUsingPOST_24
2019-06-06 14:46:26 -Generating unique operation named: removeUsingPOST_25
2019-06-06 14:46:26 -Generating unique operation named: saveUsingPOST_11
2019-06-06 14:46:26 -Generating unique operation named: updateUsingGET_8
2019-06-06 14:46:26 -Generating unique operation named: updateUsingHEAD_8
2019-06-06 14:46:26 -Generating unique operation named: updateUsingPOST_13
2019-06-06 14:46:26 -Generating unique operation named: updateUsingPUT_8
2019-06-06 14:46:26 -Generating unique operation named: updateUsingPATCH_8
2019-06-06 14:46:26 -Generating unique operation named: updateUsingDELETE_8
2019-06-06 14:46:26 -Generating unique operation named: updateUsingOPTIONS_8
2019-06-06 14:46:26 -Generating unique operation named: updateUsingTRACE_8
2019-06-06 14:46:26 -Generating unique operation named: addUsingGET_13
2019-06-06 14:46:26 -Generating unique operation named: batchRemoveUsingPOST_1
2019-06-06 14:46:26 -Generating unique operation named: editUsingGET_14
2019-06-06 14:46:26 -Generating unique operation named: listUsingGET_15
2019-06-06 14:46:26 -Generating unique operation named: printEditUsingGET_1
2019-06-06 14:46:26 -Generating unique operation named: removeUsingPOST_26
2019-06-06 14:46:26 -Generating unique operation named: saveUsingPOST_12
2019-06-06 14:46:26 -Generating unique operation named: updateUsingGET_9
2019-06-06 14:46:26 -Generating unique operation named: updateUsingHEAD_9
2019-06-06 14:46:26 -Generating unique operation named: updateUsingPOST_14
2019-06-06 14:46:26 -Generating unique operation named: updateUsingPUT_9
2019-06-06 14:46:26 -Generating unique operation named: updateUsingPATCH_9
2019-06-06 14:46:26 -Generating unique operation named: updateUsingDELETE_9
2019-06-06 14:46:26 -Generating unique operation named: updateUsingOPTIONS_9
2019-06-06 14:46:26 -Generating unique operation named: updateUsingTRACE_9
2019-06-06 14:46:26 -Generating unique operation named: addUsingGET_14
2019-06-06 14:46:26 -Generating unique operation named: batchRemoveUsingPOST_2
2019-06-06 14:46:26 -Generating unique operation named: editUsingGET_15
2019-06-06 14:46:26 -Generating unique operation named: listUsingGET_16
2019-06-06 14:46:26 -Generating unique operation named: saveUsingPOST_13
2019-06-06 14:46:26 -Generating unique operation named: saveUsingPOST_14
2019-06-06 14:46:27 -Generating unique operation named: updateUsingPOST_15
2019-06-06 14:46:27 -Generating unique operation named: listUsingGET_17
2019-06-06 14:46:27 -Generating unique operation named: listUsingHEAD_1
2019-06-06 14:46:27 -Generating unique operation named: listUsingPOST_1
2019-06-06 14:46:27 -Generating unique operation named: listUsingPUT_1
2019-06-06 14:46:27 -Generating unique operation named: listUsingPATCH_1
2019-06-06 14:46:27 -Generating unique operation named: listUsingDELETE_1
2019-06-06 14:46:27 -Generating unique operation named: listUsingOPTIONS_1
2019-06-06 14:46:27 -Generating unique operation named: listUsingTRACE_1
2019-06-06 14:46:27 -Generating unique operation named: countDDUsingGET_1
2019-06-06 14:46:27 -Generating unique operation named: exportDDUsingGET_1
2019-06-06 14:46:27 -Generating unique operation named: exportElecYYUsingGET_1
2019-06-06 14:46:27 -Generating unique operation named: addUsingGET_15
2019-06-06 14:46:27 -Generating unique operation named: batchRemoveUsingPOST_3
2019-06-06 14:46:27 -Generating unique operation named: editUsingGET_16
2019-06-06 14:46:27 -Generating unique operation named: listUsingGET_18
2019-06-06 14:46:27 -Generating unique operation named: removeUsingPOST_27
2019-06-06 14:46:27 -Generating unique operation named: saveUsingPOST_15
2019-06-06 14:46:27 -Generating unique operation named: treeUsingGET_3
2019-06-06 14:46:27 -Generating unique operation named: treeViewUsingGET_1
2019-06-06 14:46:27 -Generating unique operation named: updateUsingPOST_16
2019-06-06 14:46:27 -Generating unique operation named: addUsingGET_16
2019-06-06 14:46:27 -Generating unique operation named: editUsingGET_17
2019-06-06 14:46:27 -Generating unique operation named: exprotExcelUsingGET_4
2019-06-06 14:46:27 -Generating unique operation named: listUsingGET_19
2019-06-06 14:46:27 -Generating unique operation named: removeUsingPOST_28
2019-06-06 14:46:27 -Generating unique operation named: removeUsingPOST_29
2019-06-06 14:46:27 -Generating unique operation named: saveUsingPOST_16
2019-06-06 14:46:27 -Generating unique operation named: updateUsingGET_10
2019-06-06 14:46:27 -Generating unique operation named: updateUsingHEAD_10
2019-06-06 14:46:27 -Generating unique operation named: updateUsingPOST_17
2019-06-06 14:46:27 -Generating unique operation named: updateUsingPUT_10
2019-06-06 14:46:27 -Generating unique operation named: updateUsingPATCH_10
2019-06-06 14:46:27 -Generating unique operation named: updateUsingDELETE_10
2019-06-06 14:46:27 -Generating unique operation named: updateUsingOPTIONS_10
2019-06-06 14:46:27 -Generating unique operation named: updateUsingTRACE_10
2019-06-06 14:46:27 -Generating unique operation named: exprotExcelUsingGET_5
2019-06-06 14:46:27 -Generating unique operation named: addUsingGET_17
2019-06-06 14:46:27 -Generating unique operation named: editUsingGET_18
2019-06-06 14:46:27 -Generating unique operation named: listUsingGET_20
2019-06-06 14:46:27 -Generating unique operation named: removeUsingPOST_30
2019-06-06 14:46:27 -Generating unique operation named: removeUsingPOST_31
2019-06-06 14:46:27 -Generating unique operation named: saveUsingPOST_17
2019-06-06 14:46:27 -Generating unique operation named: updateUsingGET_11
2019-06-06 14:46:27 -Generating unique operation named: updateUsingHEAD_11
2019-06-06 14:46:27 -Generating unique operation named: updateUsingPOST_18
2019-06-06 14:46:27 -Generating unique operation named: updateUsingPUT_11
2019-06-06 14:46:27 -Generating unique operation named: updateUsingPATCH_11
2019-06-06 14:46:27 -Generating unique operation named: updateUsingDELETE_11
2019-06-06 14:46:27 -Generating unique operation named: updateUsingOPTIONS_11
2019-06-06 14:46:27 -Generating unique operation named: updateUsingTRACE_11
2019-06-06 14:46:27 -Generating unique operation named: addUsingGET_18
2019-06-06 14:46:27 -Generating unique operation named: editUsingGET_19
2019-06-06 14:46:27 -Generating unique operation named: listUsingGET_21
2019-06-06 14:46:27 -Generating unique operation named: removeUsingPOST_32
2019-06-06 14:46:27 -Generating unique operation named: removeUsingPOST_33
2019-06-06 14:46:27 -Generating unique operation named: saveUsingPOST_18
2019-06-06 14:46:27 -Generating unique operation named: updateUsingGET_12
2019-06-06 14:46:27 -Generating unique operation named: updateUsingHEAD_12
2019-06-06 14:46:27 -Generating unique operation named: updateUsingPOST_19
2019-06-06 14:46:27 -Generating unique operation named: updateUsingPUT_12
2019-06-06 14:46:27 -Generating unique operation named: updateUsingPATCH_12
2019-06-06 14:46:27 -Generating unique operation named: updateUsingDELETE_12
2019-06-06 14:46:27 -Generating unique operation named: updateUsingOPTIONS_12
2019-06-06 14:46:27 -Generating unique operation named: updateUsingTRACE_12
2019-06-06 14:46:27 -Starting Quartz Scheduler now
2019-06-06 14:46:27 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED started.
2019-06-06 14:46:27 -Starting...
2019-06-06 14:46:27 -BrokerAvailabilityEvent[available=true, SimpleBrokerMessageHandler [DefaultSubscriptionRegistry[cache[0 destination(s)], registry[0 sessions]]]]
2019-06-06 14:46:27 -Started.
2019-06-06 14:46:27 -Starting ProtocolHandler ["http-nio-8081"]
2019-06-06 14:46:27 -Using a shared selector for servlet write/read
2019-06-06 14:46:27 -Tomcat started on port(s): 8081 (http) with context path ''
2019-06-06 14:46:27 -Started BootdoApplication in 39.102 seconds (JVM running for 40.438)
2019-06-06 14:46:27 -==>  Preparing: select `id`,`cron_expression`,`method_name`,`is_concurrent`,`description`,`update_by`,`bean_class`,`create_date`,`job_status`,`job_group`,`update_date`,`create_by`,`spring_bean`,`job_name` from sys_task order by id desc 
2019-06-06 14:46:28 -==> Parameters: 
2019-06-06 14:46:29 -<==      Total: 1
2019-06-06 14:47:16 -WebSocketSession[0 current WS(0)-HttpStream(0)-HttpPoll(0), 0 total, 0 closed abnormally (0 connect failure, 0 send limit, 0 transport error)], stompSubProtocol[processed CONNECT(0)-CONNECTED(0)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], outboundChannelpool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], sockJsScheduler[pool size = 1, active threads = 1, queued tasks = 0, completed tasks = 0]
2019-06-06 14:59:40 -Initializing Spring FrameworkServlet 'dispatcherServlet'
2019-06-06 14:59:40 -FrameworkServlet 'dispatcherServlet': initialization started
2019-06-06 14:59:40 -FrameworkServlet 'dispatcherServlet': initialization completed in 91 ms
2019-06-06 14:59:40 -Enabling session validation scheduler...
2019-06-06 14:59:40 -请求地址 : http://localhost:8081/login;JSESSIONID=2add3a5b-d2ba-427a-978b-3f9dedb4b0e2
2019-06-06 14:59:40 -HTTP METHOD : GET
2019-06-06 14:59:40 -CLASS_METHOD : com.bootdo.system.controller.LoginController.login
2019-06-06 14:59:40 -参数 : [{}]
2019-06-06 14:59:40 -耗时 : 5
2019-06-06 14:59:40 -返回值 : login
2019-06-06 14:59:46 -请求地址 : http://localhost:8081/getVerify
2019-06-06 14:59:46 -HTTP METHOD : GET
2019-06-06 14:59:46 -CLASS_METHOD : com.bootdo.system.controller.LoginController.getVerify
2019-06-06 14:59:46 -参数 : [org.apache.shiro.web.servlet.ShiroHttpServletRequest@493b68f8, org.apache.shiro.web.servlet.ShiroHttpServletResponse@2e05b95f]
2019-06-06 14:59:50 -7420
2019-06-06 14:59:51 -耗时 : 4976
2019-06-06 14:59:51 -返回值 : null
2019-06-06 14:59:55 -请求地址 : http://localhost:8081/login
2019-06-06 14:59:55 -HTTP METHOD : POST
2019-06-06 14:59:55 -CLASS_METHOD : com.bootdo.system.controller.LoginController.ajaxLogin
2019-06-06 14:59:55 -参数 : [admin, 111111, 7420, org.apache.shiro.web.servlet.ShiroHttpServletRequest@36129b6d]
2019-06-06 14:59:55 -==>  Preparing: select `user_id`,`username`,`name`,`password`,`dept_id`,`email`,`mobile`,`status`,`user_id_create`,`gmt_create`,`gmt_modified`,`sex`,`birth`,`pic_id`,`live_address`,`hobby`,`province`,`city`,`district` from sys_user WHERE username = ? order by user_id desc 
2019-06-06 14:59:55 -==> Parameters: admin(String)
2019-06-06 14:59:56 -<==      Total: 1
2019-06-06 14:59:56 -耗时 : 665
2019-06-06 14:59:56 -返回值 : {msg=操作成功, code=0}
2019-06-06 14:59:56 -More than one TaskExecutor bean found within the context, and none is named 'taskExecutor'. Mark one of them as primary or name it 'taskExecutor' (possibly as an alias) in order to use it for async processing: [clientInboundChannelExecutor, clientOutboundChannelExecutor, brokerChannelExecutor, messageBrokerTaskScheduler]
2019-06-06 14:59:56 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-06-06 14:59:56 -==> Parameters: 1(Long), admin(String), 登录(String), 666(Integer), com.bootdo.system.controller.LoginController.ajaxLogin()(String), null, 127.0.0.1(String), 2019-06-06 14:59:56.638(Timestamp)
2019-06-06 14:59:56 -请求地址 : http://localhost:8081/index
2019-06-06 14:59:56 -HTTP METHOD : GET
2019-06-06 14:59:56 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2019-06-06 14:59:56 -参数 : [{}]
2019-06-06 14:59:57 -<==    Updates: 1
2019-06-06 14:59:57 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2019-06-06 14:59:57 -==> Parameters: 1(Long)
2019-06-06 14:59:58 -<==      Total: 50
2019-06-06 14:59:58 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2019-06-06 14:59:58 -==> Parameters: 138(Long)
2019-06-06 14:59:58 -<==      Total: 1
2019-06-06 14:59:58 -耗时 : 1647
2019-06-06 14:59:58 -返回值 : index_v1
2019-06-06 14:59:58 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-06-06 14:59:58 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 1648(Integer), com.bootdo.system.controller.LoginController.index()(String), {"menus":[{"attributes":{"icon":"fa fa-money","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-money","url":"/moneyList/moneyList"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"102","parentId":"106","text":"现金缴费"},{"attributes":{"icon":"fa fa-book","url":"/moneyLog/elecLog"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"107","parentId":"106","text":"缴费记录"},{"attributes":{"icon":"fa fa-image","url":"/moneyList/moneyWZ"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"164","parentId":"106","text":"乌镇管理"}],"hasChildren":true,"hasParent":false,"id":"106","parentId":"0","text":"收费管理"},{"attributes":{"icon":"fa fa-lightbulb-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/elec/elec"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"121","parentId":"103","text":"电费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"elec/elecInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"122","parentId":"103","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"elec/elecUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"123","parentId":"103","text":"电表上传"},{"attributes":{"icon":"fa fa-cc","url":"/elec/elecPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"124","parentId":"103","text":"电价管理"}],"hasChildren":true,"hasParent":false,"id":"103","parentId":"0","text":"电费管理"},{"attributes":{"icon":"fa fa-tint","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/water/water"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"117","parentId":"105","text":"水费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"water/waterInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"118","parentId":"105","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"water/waterUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"119","parentId":"105","text":"水费生成"},{"attributes":{"icon":"fa fa-cc","url":"/water/waterPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"120","parentId":"105","text":"水价管理"}],"hasChildren":true,"hasParent":false,"id":"105","parentId":"0","text":"水费管理"},{"attributes":{"icon":"fa fa-fire","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/heat/heat"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"113","parentId":"104","text":"暖费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"heat/heatInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"114","parentId":"104","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"heat/heatUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"115","parentId":"104","text":"暖费生成"},{"attributes":{"icon":"","url":"/heat/heatPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"116","parentId":"104","text":"暖价管理"}],"hasChildren":true,"hasParent":false,"id":"104","parentId":"0","text":"暖费管理"},{"attributes":{"icon":"fa fa-vcard-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-bomb","url":"/print/print"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"149","parentId":"108","text":"票据记录"}],"hasChildren":true,"hasParent":false,"id":"108","parentId":"0","text":"票据管理"},{"attributes":{"icon":"fa fa-bar-chart","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-area-chart","url":"/chart/graph_echarts.html"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","text":"百度chart"},{"attributes":{"icon":"fa fa-sun-o","url":"charts/countDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"109","parentId":"97","text":"日统计报表"},{"attributes":{"icon":"fa fa-calendar","url":"charts/tableDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"161","parentId":"97","text":"日统计表格"},{"attributes":{"icon":"fa fa-registered","url":"charts/countMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"110","parentId":"97","text":"月统计报表"},{"attributes":{"icon":"fa fa-building-o","url":"charts/tableElecMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"162","parentId":"97","text":"月统计表格"},{"attributes":{"icon":"fa fa-support","url":"charts/countYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"111","parentId":"97","text":"年统计报表"},{"attributes":{"icon":"fa fa-book","url":"charts/tableElecYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"163","parentId":"97","text":"年统计表格"},{"attributes":{"icon":"fa fa-money","url":"charts/countOwe"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"155","(String), 127.0.0.1(String), 2019-06-06 14:59:58.582(Timestamp)
2019-06-06 14:59:58 -请求地址 : http://localhost:8081/main
2019-06-06 14:59:58 -HTTP METHOD : GET
2019-06-06 14:59:58 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-06-06 14:59:58 -参数 : []
2019-06-06 14:59:58 -耗时 : 0
2019-06-06 14:59:58 -返回值 : main
2019-06-06 15:00:00 -<==    Updates: 1
2019-06-06 15:00:01 -请求地址 : http://localhost:8081/oa/notify/message
2019-06-06 15:00:01 -HTTP METHOD : GET
2019-06-06 15:00:01 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2019-06-06 15:00:01 -参数 : []
2019-06-06 15:00:01 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2019-06-06 15:00:01 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2019-06-06 15:00:01 -请求地址 : http://localhost:8081/main
2019-06-06 15:00:01 -HTTP METHOD : GET
2019-06-06 15:00:01 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-06-06 15:00:01 -参数 : []
2019-06-06 15:00:01 -耗时 : 0
2019-06-06 15:00:01 -返回值 : main
2019-06-06 15:00:02 -<==      Total: 0
2019-06-06 15:00:02 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2019-06-06 15:00:02 -==> Parameters: 1(Long), 0(String)
2019-06-06 15:00:02 -<==      Total: 1
2019-06-06 15:00:02 -耗时 : 1435
2019-06-06 15:00:02 -返回值 : com.bootdo.common.utils.PageUtils@3816e615
2019-06-06 15:00:18 -==>  Preparing: select distinct m.perms from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id = ur.role_id where ur.user_id = ? 
2019-06-06 15:00:18 -==> Parameters: 1(Long)
2019-06-06 15:00:18 -<==      Total: 94
2019-06-06 15:00:18 -请求地址 : http://localhost:8081/elec/elec
2019-06-06 15:00:18 -HTTP METHOD : GET
2019-06-06 15:00:18 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.Elec
2019-06-06 15:00:18 -参数 : []
2019-06-06 15:00:18 -耗时 : 0
2019-06-06 15:00:18 -返回值 : elec/elec/elec
2019-06-06 15:00:19 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-06-06 15:00:19 -HTTP METHOD : GET
2019-06-06 15:00:19 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-06-06 15:00:19 -参数 : [userType]
2019-06-06 15:00:19 -请求地址 : http://localhost:8081/common/dict/list/elecType
2019-06-06 15:00:19 -HTTP METHOD : GET
2019-06-06 15:00:19 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-06-06 15:00:19 -参数 : [elecType]
2019-06-06 15:00:19 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-06-06 15:00:19 -==> Parameters: elecType(String)
2019-06-06 15:00:19 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-06-06 15:00:19 -==> Parameters: userType(String)
2019-06-06 15:00:19 -<==      Total: 4
2019-06-06 15:00:19 -耗时 : 167
2019-06-06 15:00:19 -返回值 : [DictDO{id=145, name='银行转账', value='D', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=144, name='微信支付', value='C', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-06-06 15:00:19 -<==      Total: 11
2019-06-06 15:00:19 -耗时 : 171
2019-06-06 15:00:19 -返回值 : [DictDO{id=180, name='矿民用', value='1', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=179, name='矿商业', value='2', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=178, name='矿工业1', value='3', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=177, name='矿工业2', value='4', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=176, name='矿工业3', value='5', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=175, name='乌民用', value='6', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=174, name='乌商用', value='7', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=173, name='乌工业', value='8', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=172, name='煤民用', value='9', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=171, name='煤商业', value='10', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=170, name='政府用电', value='11', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-06-06 15:00:19 -请求地址 : http://localhost:8081/elec/elec/list
2019-06-06 15:00:19 -HTTP METHOD : GET
2019-06-06 15:00:19 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.list
2019-06-06 15:00:19 -参数 : [{limit=10, offset=0, userType=, elecType=, userOrg=, userId=, createTime=, queryType=1}, com.bootdo.elec.domain.ElecDO@7e7b371f]
2019-06-06 15:00:19 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, `user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec order by id asc limit ?, ? 
2019-06-06 15:00:19 -==> Parameters: 0(Integer), 10(Integer)
2019-06-06 15:00:20 -<==      Total: 10
2019-06-06 15:00:20 -==>  Preparing: select count(*) from elec 
2019-06-06 15:00:20 -==> Parameters: 
2019-06-06 15:00:20 -<==      Total: 1
2019-06-06 15:00:20 -耗时 : 948
2019-06-06 15:00:20 -返回值 : com.bootdo.common.utils.PageUtils@77a787d9
2019-06-06 15:00:27 -请求地址 : http://localhost:8081/moneyList/moneyList
2019-06-06 15:00:27 -HTTP METHOD : GET
2019-06-06 15:00:27 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.MoneyList
2019-06-06 15:00:27 -参数 : []
2019-06-06 15:00:27 -耗时 : 1
2019-06-06 15:00:27 -返回值 : moneyList/moneyList
2019-06-06 15:00:30 -请求地址 : http://localhost:8081/system/sysDept/treeView
2019-06-06 15:00:30 -HTTP METHOD : GET
2019-06-06 15:00:30 -CLASS_METHOD : com.bootdo.system.controller.DeptController.treeView
2019-06-06 15:00:30 -参数 : []
2019-06-06 15:00:30 -耗时 : 0
2019-06-06 15:00:30 -返回值 : system/dept/deptTree
2019-06-06 15:00:30 -请求地址 : http://localhost:8081/system/sysDept/tree
2019-06-06 15:00:30 -HTTP METHOD : GET
2019-06-06 15:00:30 -CLASS_METHOD : com.bootdo.system.controller.DeptController.tree
2019-06-06 15:00:30 -参数 : []
2019-06-06 15:00:30 -==>  Preparing: select `dept_id`,`parent_id`,`name`,`order_num`,`del_flag` from sys_dept order by dept_id desc 
2019-06-06 15:00:30 -==> Parameters: 
2019-06-06 15:00:30 -<==      Total: 3
2019-06-06 15:00:30 -耗时 : 20
2019-06-06 15:00:30 -返回值 : {"checked":false,"children":[{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"3","parentId":"1","state":{"opened":true},"text":"牙星"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"2","parentId":"1","state":{"opened":true},"text":"五九"}],"hasChildren":true,"hasParent":false,"id":"1","parentId":"0","state":{"opened":true},"text":"总公司"}
2019-06-06 15:00:33 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUser
2019-06-06 15:00:33 -HTTP METHOD : POST
2019-06-06 15:00:33 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.queryAllUser
2019-06-06 15:00:33 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@10863dfb]
2019-06-06 15:00:33 -==>  Preparing: select COUNT(*) number, user_id, user_name, user_type, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, elec_type as moneyType, elec_price as userPrice, elec_amount as userArea, elec_cost as userCost, elec_Sum as userSum from ELEC WHERE create_time = ? and user_org = ? and user_Id = ? and user_type != 'B' UNION ALL select COUNT(*) number, user_id, user_name, user_type, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, heat_type as moneyType, heat_price as userPrice, heat_area as userArea, heat_cost as userCost, heat_Sum as userSum from heat WHERE create_time = ? and user_org = ? and user_Id = ? and user_type != 'B' UNION ALL select COUNT(*) number, user_id, user_name, user_type, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, water_type as moneyType, water_price as userPrice, water_price as userArea, water_price as userCost, water_Sum as userSum from water WHERE create_time = ? and user_org = ? and user_Id = ? and user_type != 'B' 
2019-06-06 15:00:33 -==> Parameters: 2019-05(String), 2(String), 1-0001(String), 2019-05(String), 2(String), 1-0001(String), 2019-05(String), 2(String), 1-0001(String)
2019-06-06 15:00:34 -<==      Total: 3
2019-06-06 15:00:34 -耗时 : 1064
2019-06-06 15:00:34 -返回值 : [com.bootdo.moneyList.damain.MoneyListDO@30ebd03d, com.bootdo.moneyList.damain.MoneyListDO@16c9f679, com.bootdo.moneyList.damain.MoneyListDO@311ce8d7]
2019-06-06 15:00:39 -请求地址 : http://localhost:8081/moneyList/moneyList/updateMoney
2019-06-06 15:00:39 -HTTP METHOD : POST
2019-06-06 15:00:39 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.updateMoney
2019-06-06 15:00:39 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@386abdac]
2019-06-06 15:00:39 -==>  Preparing: select COUNT(*) number, user_id, user_name, user_type, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, elec_type as moneyType, elec_price as userPrice, elec_amount as userArea, elec_cost as userCost, elec_Sum as userSum from ELEC WHERE create_time = ? and user_org = ? and user_Id = ? and user_type != 'B' UNION ALL select COUNT(*) number, user_id, user_name, user_type, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, heat_type as moneyType, heat_price as userPrice, heat_area as userArea, heat_cost as userCost, heat_Sum as userSum from heat WHERE create_time = ? and user_org = ? and user_Id = ? and user_type != 'B' UNION ALL select COUNT(*) number, user_id, user_name, user_type, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, water_type as moneyType, water_price as userPrice, water_price as userArea, water_price as userCost, water_Sum as userSum from water WHERE create_time = ? and user_org = ? and user_Id = ? and user_type != 'B' 
2019-06-06 15:00:39 -==> Parameters: 2019-05(String), 2(String), 1-0001(String), 2019-05(String), 2(String), 1-0001(String), 2019-05(String), 2(String), 1-0001(String)
2019-06-06 15:00:39 -<==      Total: 3
2019-06-06 15:00:39 -==>  Preparing: select el.start,el.end,el.hu,el.elec_amount,el.elec_cost,el.elec_price,el.elec_sum from elec el WHERE el.user_Id = ? and el.create_time = ? and el.user_org = ? and user_type != 'B' 
2019-06-06 15:00:39 -==> Parameters: 1-0001(String), 2019-05(String), 2(String)
2019-06-06 15:00:39 -<==      Total: 1
2019-06-06 15:00:39 -==>  Preparing: select he.heat_area, he.heat_cost, he.heat_price, he.heat_sum from heat he WHERE he.user_Id = ? and he.create_time = ? and he.user_org = ? and user_type != 'B' 
2019-06-06 15:00:39 -==> Parameters: 1-0001(String), 2019-05(String), 2(String)
2019-06-06 15:00:39 -<==      Total: 1
2019-06-06 15:00:39 -==>  Preparing: select wa.water_price,wa.water_cost,wa.water_sum from water wa WHERE wa.user_Id = ? and wa.create_time = ? and wa.user_org = ? and user_type != 'B' 
2019-06-06 15:00:39 -==> Parameters: 1-0001(String), 2019-05(String), 2(String)
2019-06-06 15:00:39 -<==      Total: 1
2019-06-06 15:00:39 -==>  Preparing: update ELEC set elec_sum = elec_sum + ?,user_type=? WHERE create_time = ? and user_org = ? and user_Id = ? and user_type != 'B' 
2019-06-06 15:00:39 -==> Parameters: 1(String), A(String), 2019-05(String), 2(String), 1-0001(String)
2019-06-06 15:00:39 -<==    Updates: 1
2019-06-06 15:00:39 -==>  Preparing: insert into elec_log ( `user_id`, `user_name`, `user_type`, `user_org`, `elec_type`, `elec_money`, `elec_date`, `create_time`, `create_by`, `update_time`, `update_by`, `remark` ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-06-06 15:00:39 -==> Parameters: 1-0001(String), 李文英(String), A(String), 2(String), 1(String), 1(BigDecimal), 2019-06-06 15:00:39.514(Timestamp), 2019-05(String), admin(String), 2019-06-06 15:00:39.514(Timestamp), admin(String), null
2019-06-06 15:00:40 -<==    Updates: 1
2019-06-06 15:00:40 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`start`,`end`,`hu`,`elec_price`,`elec_amount`,`elec_cost`,`elec_sum`,`elec_money`,`heat_price`,`heat_area`,`heat_cost`,`heat_sum`,`heat_money`,`water_price`,`water_cost`,`water_sum`,`water_money`,`print_date`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from print where user_id = ? and user_org = ? and create_time = ? 
2019-06-06 15:00:40 -==> Parameters: 1-0001(String), 2(String), 2019-05(String)
2019-06-06 15:00:40 -<==      Total: 1
2019-06-06 15:00:40 -==>  Preparing: update print SET `user_name` = ?, `start` = ?, `end` = ?, `hu` = ?, `elec_price` = ?, `elec_amount` = ?, `elec_cost` = ?, `elec_sum` = ?, `elec_money` = ? where id = ? 
2019-06-06 15:00:40 -==> Parameters: 李文英(String), 10300(Integer), 10370(Integer), 1(Integer), 0.465(BigDecimal), 70.00(BigDecimal), 32.55(BigDecimal), -10.02(BigDecimal), 1(BigDecimal), 97(Long)
2019-06-06 15:00:40 -<==    Updates: 1
2019-06-06 15:00:40 -耗时 : 960
2019-06-06 15:00:40 -返回值 : 97
2019-06-06 15:00:41 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUser
2019-06-06 15:00:41 -HTTP METHOD : POST
2019-06-06 15:00:41 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.queryAllUser
2019-06-06 15:00:41 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@68d403a0]
2019-06-06 15:00:41 -==>  Preparing: select COUNT(*) number, user_id, user_name, user_type, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, elec_type as moneyType, elec_price as userPrice, elec_amount as userArea, elec_cost as userCost, elec_Sum as userSum from ELEC WHERE create_time = ? and user_org = ? and user_Id = ? and user_type != 'B' UNION ALL select COUNT(*) number, user_id, user_name, user_type, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, heat_type as moneyType, heat_price as userPrice, heat_area as userArea, heat_cost as userCost, heat_Sum as userSum from heat WHERE create_time = ? and user_org = ? and user_Id = ? and user_type != 'B' UNION ALL select COUNT(*) number, user_id, user_name, user_type, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, water_type as moneyType, water_price as userPrice, water_price as userArea, water_price as userCost, water_Sum as userSum from water WHERE create_time = ? and user_org = ? and user_Id = ? and user_type != 'B' 
2019-06-06 15:00:41 -==> Parameters: 2019-05(String), 2(String), 1-0001(String), 2019-05(String), 2(String), 1-0001(String), 2019-05(String), 2(String), 1-0001(String)
2019-06-06 15:00:41 -<==      Total: 3
2019-06-06 15:00:41 -耗时 : 20
2019-06-06 15:00:41 -返回值 : [com.bootdo.moneyList.damain.MoneyListDO@fad3ec3, com.bootdo.moneyList.damain.MoneyListDO@53415894, com.bootdo.moneyList.damain.MoneyListDO@1bc0885f]
2019-06-06 15:00:57 -请求地址 : http://localhost:8081/moneyLog/elecLog
2019-06-06 15:00:57 -HTTP METHOD : GET
2019-06-06 15:00:57 -CLASS_METHOD : com.bootdo.moneyLog.controller.ElecLogController.moneyLog
2019-06-06 15:00:57 -参数 : []
2019-06-06 15:00:57 -耗时 : 1
2019-06-06 15:00:57 -返回值 : moneyLog/elecLog/elecLog
2019-06-06 15:00:57 -请求地址 : http://localhost:8081/common/dict/list/elecType
2019-06-06 15:00:57 -HTTP METHOD : GET
2019-06-06 15:00:57 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-06-06 15:00:57 -参数 : [elecType]
2019-06-06 15:00:57 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-06-06 15:00:57 -HTTP METHOD : GET
2019-06-06 15:00:57 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-06-06 15:00:57 -参数 : [userType]
2019-06-06 15:00:57 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-06-06 15:00:57 -==> Parameters: elecType(String)
2019-06-06 15:00:57 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-06-06 15:00:57 -==> Parameters: userType(String)
2019-06-06 15:00:57 -<==      Total: 4
2019-06-06 15:00:57 -耗时 : 9
2019-06-06 15:00:57 -返回值 : [DictDO{id=145, name='银行转账', value='D', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=144, name='微信支付', value='C', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-06-06 15:00:57 -<==      Total: 11
2019-06-06 15:00:57 -耗时 : 10
2019-06-06 15:00:57 -返回值 : [DictDO{id=180, name='矿民用', value='1', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=179, name='矿商业', value='2', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=178, name='矿工业1', value='3', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=177, name='矿工业2', value='4', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=176, name='矿工业3', value='5', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=175, name='乌民用', value='6', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=174, name='乌商用', value='7', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=173, name='乌工业', value='8', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=172, name='煤民用', value='9', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=171, name='煤商业', value='10', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=170, name='政府用电', value='11', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-06-06 15:00:57 -请求地址 : http://localhost:8081/moneyLog/elecLog/list
2019-06-06 15:00:57 -HTTP METHOD : GET
2019-06-06 15:00:57 -CLASS_METHOD : com.bootdo.moneyLog.controller.ElecLogController.list
2019-06-06 15:00:57 -参数 : [{limit=10, offset=0, userType=, elecType=, userOrg=, userId=, elecDate=}]
2019-06-06 15:00:57 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`elec_type`,`elec_money`,`elec_date`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec_log order by id asc limit ?, ? 
2019-06-06 15:00:57 -==> Parameters: 0(Integer), 10(Integer)
2019-06-06 15:00:57 -<==      Total: 10
2019-06-06 15:00:57 -==>  Preparing: select count(*) from elec_log 
2019-06-06 15:00:57 -==> Parameters: 
2019-06-06 15:00:57 -<==      Total: 1
2019-06-06 15:00:57 -耗时 : 41
2019-06-06 15:00:57 -返回值 : com.bootdo.common.utils.PageUtils@6b33941f
2019-06-06 15:01:01 -请求地址 : http://localhost:8081/moneyLog/elecLog/remove
2019-06-06 15:01:01 -HTTP METHOD : POST
2019-06-06 15:01:01 -CLASS_METHOD : com.bootdo.moneyLog.controller.ElecLogController.remove
2019-06-06 15:01:01 -参数 : [83]
2019-06-06 15:01:01 -==>  Preparing: delete from elec_log where id = ? 
2019-06-06 15:01:01 -==> Parameters: 83(Long)
2019-06-06 15:01:01 -<==    Updates: 1
2019-06-06 15:01:01 -耗时 : 147
2019-06-06 15:01:01 -返回值 : {msg=操作成功, code=0}
2019-06-06 15:01:01 -请求地址 : http://localhost:8081/moneyLog/elecLog/list
2019-06-06 15:01:01 -HTTP METHOD : GET
2019-06-06 15:01:01 -CLASS_METHOD : com.bootdo.moneyLog.controller.ElecLogController.list
2019-06-06 15:01:01 -参数 : [{limit=10, offset=0, userType=, elecType=, userOrg=, userId=, elecDate=}]
2019-06-06 15:01:01 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`elec_type`,`elec_money`,`elec_date`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec_log order by id asc limit ?, ? 
2019-06-06 15:01:01 -==> Parameters: 0(Integer), 10(Integer)
2019-06-06 15:01:01 -<==      Total: 10
2019-06-06 15:01:01 -==>  Preparing: select count(*) from elec_log 
2019-06-06 15:01:01 -==> Parameters: 
2019-06-06 15:01:01 -<==      Total: 1
2019-06-06 15:01:01 -耗时 : 25
2019-06-06 15:01:01 -返回值 : com.bootdo.common.utils.PageUtils@ab9ba75
2019-06-06 15:02:30 -请求地址 : http://localhost:8081/moneyList/moneyList/updateMoney
2019-06-06 15:02:30 -HTTP METHOD : POST
2019-06-06 15:02:30 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.updateMoney
2019-06-06 15:02:30 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@3c50a1a3]
2019-06-06 15:02:30 -==>  Preparing: select COUNT(*) number, user_id, user_name, user_type, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, elec_type as moneyType, elec_price as userPrice, elec_amount as userArea, elec_cost as userCost, elec_Sum as userSum from ELEC WHERE create_time = ? and user_org = ? and user_Id = ? and user_type != 'B' UNION ALL select COUNT(*) number, user_id, user_name, user_type, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, heat_type as moneyType, heat_price as userPrice, heat_area as userArea, heat_cost as userCost, heat_Sum as userSum from heat WHERE create_time = ? and user_org = ? and user_Id = ? and user_type != 'B' UNION ALL select COUNT(*) number, user_id, user_name, user_type, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, water_type as moneyType, water_price as userPrice, water_price as userArea, water_price as userCost, water_Sum as userSum from water WHERE create_time = ? and user_org = ? and user_Id = ? and user_type != 'B' 
2019-06-06 15:02:30 -==> Parameters: 2019-05(String), 2(String), 1-0001(String), 2019-05(String), 2(String), 1-0001(String), 2019-05(String), 2(String), 1-0001(String)
2019-06-06 15:02:30 -<==      Total: 3
2019-06-06 15:02:30 -==>  Preparing: select el.start,el.end,el.hu,el.elec_amount,el.elec_cost,el.elec_price,el.elec_sum from elec el WHERE el.user_Id = ? and el.create_time = ? and el.user_org = ? and user_type != 'B' 
2019-06-06 15:02:30 -==> Parameters: 1-0001(String), 2019-05(String), 2(String)
2019-06-06 15:02:30 -<==      Total: 1
2019-06-06 15:02:30 -==>  Preparing: select he.heat_area, he.heat_cost, he.heat_price, he.heat_sum from heat he WHERE he.user_Id = ? and he.create_time = ? and he.user_org = ? and user_type != 'B' 
2019-06-06 15:02:30 -==> Parameters: 1-0001(String), 2019-05(String), 2(String)
2019-06-06 15:02:30 -<==      Total: 1
2019-06-06 15:02:30 -==>  Preparing: select wa.water_price,wa.water_cost,wa.water_sum from water wa WHERE wa.user_Id = ? and wa.create_time = ? and wa.user_org = ? and user_type != 'B' 
2019-06-06 15:02:30 -==> Parameters: 1-0001(String), 2019-05(String), 2(String)
2019-06-06 15:02:30 -<==      Total: 1
2019-06-06 15:02:30 -==>  Preparing: update ELEC set elec_sum = elec_sum + ?,user_type=? WHERE create_time = ? and user_org = ? and user_Id = ? and user_type != 'B' 
2019-06-06 15:02:30 -==> Parameters: 1(String), A(String), 2019-05(String), 2(String), 1-0001(String)
2019-06-06 15:02:30 -<==    Updates: 1
2019-06-06 15:02:30 -==>  Preparing: insert into elec_log ( `user_id`, `user_name`, `user_type`, `user_org`, `elec_type`, `elec_money`, `elec_date`, `create_time`, `create_by`, `update_time`, `update_by`, `remark` ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-06-06 15:02:30 -==> Parameters: 1-0001(String), 李文英(String), A(String), 2(String), 1(String), 1(BigDecimal), 2019-06-06 15:02:30.173(Timestamp), 2019-05(String), admin(String), 2019-06-06 15:02:30.173(Timestamp), admin(String), null
2019-06-06 15:02:30 -<==    Updates: 1
2019-06-06 15:02:30 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`start`,`end`,`hu`,`elec_price`,`elec_amount`,`elec_cost`,`elec_sum`,`elec_money`,`heat_price`,`heat_area`,`heat_cost`,`heat_sum`,`heat_money`,`water_price`,`water_cost`,`water_sum`,`water_money`,`print_date`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from print where user_id = ? and user_org = ? and create_time = ? 
2019-06-06 15:02:30 -==> Parameters: 1-0001(String), 2(String), 2019-05(String)
2019-06-06 15:02:30 -<==      Total: 1
2019-06-06 15:02:30 -==>  Preparing: update print SET `user_name` = ?, `start` = ?, `end` = ?, `hu` = ?, `elec_price` = ?, `elec_amount` = ?, `elec_cost` = ?, `elec_sum` = ?, `elec_money` = ? where id = ? 
2019-06-06 15:02:30 -==> Parameters: 李文英(String), 10300(Integer), 10370(Integer), 1(Integer), 0.465(BigDecimal), 70.00(BigDecimal), 32.55(BigDecimal), -9.02(BigDecimal), 1(BigDecimal), 97(Long)
2019-06-06 15:02:30 -<==    Updates: 1
2019-06-06 15:02:30 -耗时 : 503
2019-06-06 15:02:30 -返回值 : 97
2019-06-06 15:02:31 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUser
2019-06-06 15:02:31 -HTTP METHOD : POST
2019-06-06 15:02:31 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.queryAllUser
2019-06-06 15:02:31 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@212512d5]
2019-06-06 15:02:31 -==>  Preparing: select COUNT(*) number, user_id, user_name, user_type, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, elec_type as moneyType, elec_price as userPrice, elec_amount as userArea, elec_cost as userCost, elec_Sum as userSum from ELEC WHERE create_time = ? and user_org = ? and user_Id = ? and user_type != 'B' UNION ALL select COUNT(*) number, user_id, user_name, user_type, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, heat_type as moneyType, heat_price as userPrice, heat_area as userArea, heat_cost as userCost, heat_Sum as userSum from heat WHERE create_time = ? and user_org = ? and user_Id = ? and user_type != 'B' UNION ALL select COUNT(*) number, user_id, user_name, user_type, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, water_type as moneyType, water_price as userPrice, water_price as userArea, water_price as userCost, water_Sum as userSum from water WHERE create_time = ? and user_org = ? and user_Id = ? and user_type != 'B' 
2019-06-06 15:02:31 -==> Parameters: 2019-05(String), 2(String), 1-0001(String), 2019-05(String), 2(String), 1-0001(String), 2019-05(String), 2(String), 1-0001(String)
2019-06-06 15:02:31 -<==      Total: 3
2019-06-06 15:02:31 -耗时 : 23
2019-06-06 15:02:31 -返回值 : [com.bootdo.moneyList.damain.MoneyListDO@78da7b3d, com.bootdo.moneyList.damain.MoneyListDO@42f049fd, com.bootdo.moneyList.damain.MoneyListDO@4bca58cc]
2019-06-06 15:02:32 -请求地址 : http://localhost:8081/moneyList/moneyList/moneyPrint/97
2019-06-06 15:02:32 -HTTP METHOD : GET
2019-06-06 15:02:32 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.printEdit
2019-06-06 15:02:32 -参数 : [97, {}]
2019-06-06 15:02:32 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`start`,`end`,`hu`,`elec_price`,`elec_amount`,`elec_cost`,`elec_sum`,`elec_money`,`heat_price`,`heat_area`,`heat_cost`,`heat_sum`,`heat_money`,`water_price`,`water_cost`,`water_sum`,`water_money`,`print_date`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from print where id = ? 
2019-06-06 15:02:32 -==> Parameters: 97(Long)
2019-06-06 15:02:32 -<==      Total: 1
2019-06-06 15:02:32 -耗时 : 11
2019-06-06 15:02:32 -返回值 : moneyList/moneyPrint
2019-06-06 15:03:25 -Failed to invoke @ExceptionHandler method: public java.lang.Object com.bootdo.common.exception.BDExceptionHandler.handleException(java.lang.Exception,javax.servlet.http.HttpServletRequest)
org.apache.shiro.UnavailableSecurityManagerException: No SecurityManager accessible to the calling code, either bound to the org.apache.shiro.util.ThreadContext or as a vm static singleton.  This is an invalid application configuration.
	at org.apache.shiro.SecurityUtils.getSecurityManager(SecurityUtils.java:123)
	at org.apache.shiro.subject.Subject$Builder.<init>(Subject.java:627)
	at org.apache.shiro.SecurityUtils.getSubject(SecurityUtils.java:56)
	at com.bootdo.common.utils.ShiroUtils.getSubjct(ShiroUtils.java:20)
	at com.bootdo.common.utils.ShiroUtils.getUser(ShiroUtils.java:23)
	at com.bootdo.common.exception.BDExceptionHandler.handleException(BDExceptionHandler.java:73)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:209)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver.doResolveHandlerMethodException(ExceptionHandlerExceptionResolver.java:404)
	at org.springframework.web.servlet.handler.AbstractHandlerMethodExceptionResolver.doResolveException(AbstractHandlerMethodExceptionResolver.java:61)
	at org.springframework.web.servlet.handler.AbstractHandlerExceptionResolver.resolveException(AbstractHandlerExceptionResolver.java:139)
	at org.springframework.web.servlet.handler.HandlerExceptionResolverComposite.resolveException(HandlerExceptionResolverComposite.java:78)
	at org.springframework.web.servlet.DispatcherServlet.processHandlerException(DispatcherServlet.java:1255)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1062)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1008)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:925)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:974)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:877)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:661)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:851)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:728)
	at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:591)
	at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:527)
	at org.apache.catalina.core.StandardHostValve.custom(StandardHostValve.java:389)
	at org.apache.catalina.core.StandardHostValve.status(StandardHostValve.java:254)
	at org.apache.catalina.core.StandardHostValve.throwable(StandardHostValve.java:349)
	at org.apache.catalina.core.AsyncContextImpl.setErrorState(AsyncContextImpl.java:424)
	at org.apache.catalina.connector.CoyoteAdapter.asyncDispatch(CoyoteAdapter.java:176)
	at org.apache.coyote.AbstractProcessor.dispatch(AbstractProcessor.java:232)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:53)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:790)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1468)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:745)
2019-06-06 15:05:33 -请求地址 : http://localhost:8081/login;JSESSIONID=d6749715-5377-413f-bb07-04981af9a607
2019-06-06 15:05:33 -HTTP METHOD : GET
2019-06-06 15:05:33 -CLASS_METHOD : com.bootdo.system.controller.LoginController.login
2019-06-06 15:05:33 -参数 : [{}]
2019-06-06 15:05:33 -耗时 : 1
2019-06-06 15:05:33 -返回值 : login
2019-06-06 15:05:37 -请求地址 : http://localhost:8081/getVerify
2019-06-06 15:05:37 -HTTP METHOD : GET
2019-06-06 15:05:37 -CLASS_METHOD : com.bootdo.system.controller.LoginController.getVerify
2019-06-06 15:05:37 -参数 : [org.apache.shiro.web.servlet.ShiroHttpServletRequest@21ac48e8, org.apache.shiro.web.servlet.ShiroHttpServletResponse@99391c8]
2019-06-06 15:05:37 -2419
2019-06-06 15:05:37 -耗时 : 17
2019-06-06 15:05:37 -返回值 : null
2019-06-06 15:05:41 -请求地址 : http://localhost:8081/login
2019-06-06 15:05:41 -HTTP METHOD : POST
2019-06-06 15:05:41 -CLASS_METHOD : com.bootdo.system.controller.LoginController.ajaxLogin
2019-06-06 15:05:41 -参数 : [admin, 111111, 2419, org.apache.shiro.web.servlet.ShiroHttpServletRequest@1bc5aa1c]
2019-06-06 15:05:41 -==>  Preparing: select `user_id`,`username`,`name`,`password`,`dept_id`,`email`,`mobile`,`status`,`user_id_create`,`gmt_create`,`gmt_modified`,`sex`,`birth`,`pic_id`,`live_address`,`hobby`,`province`,`city`,`district` from sys_user WHERE username = ? order by user_id desc 
2019-06-06 15:05:41 -==> Parameters: admin(String)
2019-06-06 15:05:41 -<==      Total: 1
2019-06-06 15:05:41 -耗时 : 72
2019-06-06 15:05:41 -返回值 : {msg=操作成功, code=0}
2019-06-06 15:05:41 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-06-06 15:05:41 -==> Parameters: 1(Long), admin(String), 登录(String), 72(Integer), com.bootdo.system.controller.LoginController.ajaxLogin()(String), null, 127.0.0.1(String), 2019-06-06 15:05:41.214(Timestamp)
2019-06-06 15:05:41 -请求地址 : http://localhost:8081/index
2019-06-06 15:05:41 -HTTP METHOD : GET
2019-06-06 15:05:41 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2019-06-06 15:05:41 -参数 : [{}]
2019-06-06 15:05:41 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2019-06-06 15:05:41 -==> Parameters: 1(Long)
2019-06-06 15:05:41 -<==    Updates: 1
2019-06-06 15:05:41 -<==      Total: 50
2019-06-06 15:05:41 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2019-06-06 15:05:41 -==> Parameters: 138(Long)
2019-06-06 15:05:41 -<==      Total: 1
2019-06-06 15:05:41 -耗时 : 403
2019-06-06 15:05:41 -返回值 : index_v1
2019-06-06 15:05:41 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-06-06 15:05:41 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 403(Integer), com.bootdo.system.controller.LoginController.index()(String), {"menus":[{"attributes":{"icon":"fa fa-money","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-money","url":"/moneyList/moneyList"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"102","parentId":"106","text":"现金缴费"},{"attributes":{"icon":"fa fa-book","url":"/moneyLog/elecLog"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"107","parentId":"106","text":"缴费记录"},{"attributes":{"icon":"fa fa-image","url":"/moneyList/moneyWZ"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"164","parentId":"106","text":"乌镇管理"}],"hasChildren":true,"hasParent":false,"id":"106","parentId":"0","text":"收费管理"},{"attributes":{"icon":"fa fa-lightbulb-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/elec/elec"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"121","parentId":"103","text":"电费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"elec/elecInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"122","parentId":"103","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"elec/elecUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"123","parentId":"103","text":"电表上传"},{"attributes":{"icon":"fa fa-cc","url":"/elec/elecPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"124","parentId":"103","text":"电价管理"}],"hasChildren":true,"hasParent":false,"id":"103","parentId":"0","text":"电费管理"},{"attributes":{"icon":"fa fa-tint","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/water/water"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"117","parentId":"105","text":"水费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"water/waterInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"118","parentId":"105","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"water/waterUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"119","parentId":"105","text":"水费生成"},{"attributes":{"icon":"fa fa-cc","url":"/water/waterPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"120","parentId":"105","text":"水价管理"}],"hasChildren":true,"hasParent":false,"id":"105","parentId":"0","text":"水费管理"},{"attributes":{"icon":"fa fa-fire","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/heat/heat"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"113","parentId":"104","text":"暖费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"heat/heatInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"114","parentId":"104","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"heat/heatUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"115","parentId":"104","text":"暖费生成"},{"attributes":{"icon":"","url":"/heat/heatPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"116","parentId":"104","text":"暖价管理"}],"hasChildren":true,"hasParent":false,"id":"104","parentId":"0","text":"暖费管理"},{"attributes":{"icon":"fa fa-vcard-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-bomb","url":"/print/print"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"149","parentId":"108","text":"票据记录"}],"hasChildren":true,"hasParent":false,"id":"108","parentId":"0","text":"票据管理"},{"attributes":{"icon":"fa fa-bar-chart","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-area-chart","url":"/chart/graph_echarts.html"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","text":"百度chart"},{"attributes":{"icon":"fa fa-sun-o","url":"charts/countDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"109","parentId":"97","text":"日统计报表"},{"attributes":{"icon":"fa fa-calendar","url":"charts/tableDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"161","parentId":"97","text":"日统计表格"},{"attributes":{"icon":"fa fa-registered","url":"charts/countMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"110","parentId":"97","text":"月统计报表"},{"attributes":{"icon":"fa fa-building-o","url":"charts/tableElecMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"162","parentId":"97","text":"月统计表格"},{"attributes":{"icon":"fa fa-support","url":"charts/countYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"111","parentId":"97","text":"年统计报表"},{"attributes":{"icon":"fa fa-book","url":"charts/tableElecYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"163","parentId":"97","text":"年统计表格"},{"attributes":{"icon":"fa fa-money","url":"charts/countOwe"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"155","(String), 127.0.0.1(String), 2019-06-06 15:05:41.692(Timestamp)
2019-06-06 15:05:42 -请求地址 : http://localhost:8081/main
2019-06-06 15:05:42 -HTTP METHOD : GET
2019-06-06 15:05:42 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-06-06 15:05:42 -参数 : []
2019-06-06 15:05:42 -耗时 : 250
2019-06-06 15:05:42 -返回值 : main
2019-06-06 15:05:43 -<==    Updates: 1
2019-06-06 15:05:44 -请求地址 : http://localhost:8081/oa/notify/message
2019-06-06 15:05:44 -HTTP METHOD : GET
2019-06-06 15:05:44 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2019-06-06 15:05:44 -参数 : []
2019-06-06 15:05:44 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2019-06-06 15:05:44 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2019-06-06 15:05:44 -请求地址 : http://localhost:8081/main
2019-06-06 15:05:44 -HTTP METHOD : GET
2019-06-06 15:05:44 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-06-06 15:05:44 -参数 : []
2019-06-06 15:05:44 -耗时 : 0
2019-06-06 15:05:44 -返回值 : main
2019-06-06 15:05:44 -<==      Total: 0
2019-06-06 15:05:44 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2019-06-06 15:05:44 -==> Parameters: 1(Long), 0(String)
2019-06-06 15:05:44 -<==      Total: 1
2019-06-06 15:05:44 -耗时 : 260
2019-06-06 15:05:44 -返回值 : com.bootdo.common.utils.PageUtils@bf0dde2
2019-06-06 15:05:56 -==>  Preparing: select distinct m.perms from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id = ur.role_id where ur.user_id = ? 
2019-06-06 15:05:56 -==> Parameters: 1(Long)
2019-06-06 15:05:56 -<==      Total: 94
2019-06-06 15:05:56 -请求地址 : http://localhost:8081/moneyList/moneyList
2019-06-06 15:05:56 -HTTP METHOD : GET
2019-06-06 15:05:56 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.MoneyList
2019-06-06 15:05:56 -参数 : []
2019-06-06 15:05:56 -耗时 : 1
2019-06-06 15:05:56 -返回值 : moneyList/moneyList
2019-06-06 15:06:01 -请求地址 : http://localhost:8081/system/sysDept/treeView
2019-06-06 15:06:01 -HTTP METHOD : GET
2019-06-06 15:06:01 -CLASS_METHOD : com.bootdo.system.controller.DeptController.treeView
2019-06-06 15:06:01 -参数 : []
2019-06-06 15:06:01 -耗时 : 0
2019-06-06 15:06:01 -返回值 : system/dept/deptTree
2019-06-06 15:06:01 -请求地址 : http://localhost:8081/system/sysDept/tree
2019-06-06 15:06:01 -HTTP METHOD : GET
2019-06-06 15:06:01 -CLASS_METHOD : com.bootdo.system.controller.DeptController.tree
2019-06-06 15:06:01 -参数 : []
2019-06-06 15:06:01 -==>  Preparing: select `dept_id`,`parent_id`,`name`,`order_num`,`del_flag` from sys_dept order by dept_id desc 
2019-06-06 15:06:01 -==> Parameters: 
2019-06-06 15:06:01 -<==      Total: 3
2019-06-06 15:06:01 -耗时 : 64
2019-06-06 15:06:01 -返回值 : {"checked":false,"children":[{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"3","parentId":"1","state":{"opened":true},"text":"牙星"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"2","parentId":"1","state":{"opened":true},"text":"五九"}],"hasChildren":true,"hasParent":false,"id":"1","parentId":"0","state":{"opened":true},"text":"总公司"}
2019-06-06 15:06:03 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUser
2019-06-06 15:06:03 -HTTP METHOD : POST
2019-06-06 15:06:03 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.queryAllUser
2019-06-06 15:06:03 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@34462179]
2019-06-06 15:06:03 -==>  Preparing: select COUNT(*) number, user_id, user_name, user_type, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, elec_type as moneyType, elec_price as userPrice, elec_amount as userArea, elec_cost as userCost, elec_Sum as userSum from ELEC WHERE create_time = ? and user_org = ? and user_Id = ? and user_type != 'B' UNION ALL select COUNT(*) number, user_id, user_name, user_type, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, heat_type as moneyType, heat_price as userPrice, heat_area as userArea, heat_cost as userCost, heat_Sum as userSum from heat WHERE create_time = ? and user_org = ? and user_Id = ? and user_type != 'B' UNION ALL select COUNT(*) number, user_id, user_name, user_type, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, water_type as moneyType, water_price as userPrice, water_price as userArea, water_price as userCost, water_Sum as userSum from water WHERE create_time = ? and user_org = ? and user_Id = ? and user_type != 'B' 
2019-06-06 15:06:03 -==> Parameters: 2019-05(String), 2(String), 1-0001(String), 2019-05(String), 2(String), 1-0001(String), 2019-05(String), 2(String), 1-0001(String)
2019-06-06 15:06:04 -<==      Total: 3
2019-06-06 15:06:04 -耗时 : 844
2019-06-06 15:06:04 -返回值 : [com.bootdo.moneyList.damain.MoneyListDO@25dc018d, com.bootdo.moneyList.damain.MoneyListDO@1bf3223, com.bootdo.moneyList.damain.MoneyListDO@3586a1bd]
2019-06-06 15:06:08 -请求地址 : http://localhost:8081/moneyList/moneyList/updateMoney
2019-06-06 15:06:08 -HTTP METHOD : POST
2019-06-06 15:06:08 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.updateMoney
2019-06-06 15:06:08 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@15a7069b]
2019-06-06 15:06:08 -==>  Preparing: select COUNT(*) number, user_id, user_name, user_type, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, elec_type as moneyType, elec_price as userPrice, elec_amount as userArea, elec_cost as userCost, elec_Sum as userSum from ELEC WHERE create_time = ? and user_org = ? and user_Id = ? and user_type != 'B' UNION ALL select COUNT(*) number, user_id, user_name, user_type, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, heat_type as moneyType, heat_price as userPrice, heat_area as userArea, heat_cost as userCost, heat_Sum as userSum from heat WHERE create_time = ? and user_org = ? and user_Id = ? and user_type != 'B' UNION ALL select COUNT(*) number, user_id, user_name, user_type, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, water_type as moneyType, water_price as userPrice, water_price as userArea, water_price as userCost, water_Sum as userSum from water WHERE create_time = ? and user_org = ? and user_Id = ? and user_type != 'B' 
2019-06-06 15:06:08 -==> Parameters: 2019-05(String), 2(String), 1-0001(String), 2019-05(String), 2(String), 1-0001(String), 2019-05(String), 2(String), 1-0001(String)
2019-06-06 15:06:08 -<==      Total: 3
2019-06-06 15:06:08 -==>  Preparing: select el.start,el.end,el.hu,el.elec_amount,el.elec_cost,el.elec_price,el.elec_sum from elec el WHERE el.user_Id = ? and el.create_time = ? and el.user_org = ? and user_type != 'B' 
2019-06-06 15:06:08 -==> Parameters: 1-0001(String), 2019-05(String), 2(String)
2019-06-06 15:06:08 -<==      Total: 1
2019-06-06 15:06:08 -==>  Preparing: select he.heat_area, he.heat_cost, he.heat_price, he.heat_sum from heat he WHERE he.user_Id = ? and he.create_time = ? and he.user_org = ? and user_type != 'B' 
2019-06-06 15:06:08 -==> Parameters: 1-0001(String), 2019-05(String), 2(String)
2019-06-06 15:06:08 -<==      Total: 1
2019-06-06 15:06:08 -==>  Preparing: select wa.water_price,wa.water_cost,wa.water_sum from water wa WHERE wa.user_Id = ? and wa.create_time = ? and wa.user_org = ? and user_type != 'B' 
2019-06-06 15:06:08 -==> Parameters: 1-0001(String), 2019-05(String), 2(String)
2019-06-06 15:06:08 -<==      Total: 1
2019-06-06 15:06:08 -==>  Preparing: update ELEC set elec_sum = elec_sum + ?,user_type=? WHERE create_time = ? and user_org = ? and user_Id = ? and user_type != 'B' 
2019-06-06 15:06:08 -==> Parameters: 1(String), A(String), 2019-05(String), 2(String), 1-0001(String)
2019-06-06 15:06:08 -<==    Updates: 1
2019-06-06 15:06:08 -==>  Preparing: insert into elec_log ( `user_id`, `user_name`, `user_type`, `user_org`, `elec_type`, `elec_money`, `elec_date`, `create_time`, `create_by`, `update_time`, `update_by`, `remark` ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-06-06 15:06:08 -==> Parameters: 1-0001(String), 李文英(String), A(String), 2(String), 1(String), 1(BigDecimal), 2019-06-06 15:06:08.401(Timestamp), 2019-05(String), admin(String), 2019-06-06 15:06:08.401(Timestamp), admin(String), null
2019-06-06 15:06:08 -<==    Updates: 1
2019-06-06 15:06:08 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`start`,`end`,`hu`,`elec_price`,`elec_amount`,`elec_cost`,`elec_sum`,`elec_money`,`heat_price`,`heat_area`,`heat_cost`,`heat_sum`,`heat_money`,`water_price`,`water_cost`,`water_sum`,`water_money`,`print_date`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from print where user_id = ? and user_org = ? and create_time = ? 
2019-06-06 15:06:08 -==> Parameters: 1-0001(String), 2(String), 2019-05(String)
2019-06-06 15:06:08 -<==      Total: 1
2019-06-06 15:06:08 -==>  Preparing: update print SET `user_name` = ?, `start` = ?, `end` = ?, `hu` = ?, `elec_price` = ?, `elec_amount` = ?, `elec_cost` = ?, `elec_sum` = ?, `elec_money` = ? where id = ? 
2019-06-06 15:06:08 -==> Parameters: 李文英(String), 10300(Integer), 10370(Integer), 1(Integer), 0.465(BigDecimal), 70.00(BigDecimal), 32.55(BigDecimal), -8.02(BigDecimal), 1(BigDecimal), 97(Long)
2019-06-06 15:06:08 -<==    Updates: 1
2019-06-06 15:06:08 -耗时 : 636
2019-06-06 15:06:08 -返回值 : 97
2019-06-06 15:06:10 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUser
2019-06-06 15:06:10 -HTTP METHOD : POST
2019-06-06 15:06:10 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.queryAllUser
2019-06-06 15:06:10 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@334fc03c]
2019-06-06 15:06:10 -==>  Preparing: select COUNT(*) number, user_id, user_name, user_type, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, elec_type as moneyType, elec_price as userPrice, elec_amount as userArea, elec_cost as userCost, elec_Sum as userSum from ELEC WHERE create_time = ? and user_org = ? and user_Id = ? and user_type != 'B' UNION ALL select COUNT(*) number, user_id, user_name, user_type, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, heat_type as moneyType, heat_price as userPrice, heat_area as userArea, heat_cost as userCost, heat_Sum as userSum from heat WHERE create_time = ? and user_org = ? and user_Id = ? and user_type != 'B' UNION ALL select COUNT(*) number, user_id, user_name, user_type, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, water_type as moneyType, water_price as userPrice, water_price as userArea, water_price as userCost, water_Sum as userSum from water WHERE create_time = ? and user_org = ? and user_Id = ? and user_type != 'B' 
2019-06-06 15:06:10 -==> Parameters: 2019-05(String), 2(String), 1-0001(String), 2019-05(String), 2(String), 1-0001(String), 2019-05(String), 2(String), 1-0001(String)
2019-06-06 15:06:10 -<==      Total: 3
2019-06-06 15:06:10 -耗时 : 19
2019-06-06 15:06:10 -返回值 : [com.bootdo.moneyList.damain.MoneyListDO@68ec8d24, com.bootdo.moneyList.damain.MoneyListDO@610c5904, com.bootdo.moneyList.damain.MoneyListDO@2c8f2b39]
2019-06-06 15:06:12 -请求地址 : http://localhost:8081/moneyLog/elecLog
2019-06-06 15:06:12 -HTTP METHOD : GET
2019-06-06 15:06:12 -CLASS_METHOD : com.bootdo.moneyLog.controller.ElecLogController.moneyLog
2019-06-06 15:06:12 -参数 : []
2019-06-06 15:06:12 -耗时 : 1
2019-06-06 15:06:12 -返回值 : moneyLog/elecLog/elecLog
2019-06-06 15:06:12 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-06-06 15:06:12 -HTTP METHOD : GET
2019-06-06 15:06:12 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-06-06 15:06:12 -参数 : [userType]
2019-06-06 15:06:12 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-06-06 15:06:12 -==> Parameters: userType(String)
2019-06-06 15:06:12 -<==      Total: 4
2019-06-06 15:06:12 -耗时 : 5
2019-06-06 15:06:12 -返回值 : [DictDO{id=145, name='银行转账', value='D', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=144, name='微信支付', value='C', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-06-06 15:06:12 -请求地址 : http://localhost:8081/common/dict/list/elecType
2019-06-06 15:06:12 -HTTP METHOD : GET
2019-06-06 15:06:12 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-06-06 15:06:12 -参数 : [elecType]
2019-06-06 15:06:12 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-06-06 15:06:12 -==> Parameters: elecType(String)
2019-06-06 15:06:12 -请求地址 : http://localhost:8081/moneyLog/elecLog/list
2019-06-06 15:06:12 -HTTP METHOD : GET
2019-06-06 15:06:12 -CLASS_METHOD : com.bootdo.moneyLog.controller.ElecLogController.list
2019-06-06 15:06:12 -参数 : [{limit=10, offset=0, userType=, elecType=, userOrg=, userId=, elecDate=}]
2019-06-06 15:06:12 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`elec_type`,`elec_money`,`elec_date`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec_log order by id asc limit ?, ? 
2019-06-06 15:06:12 -==> Parameters: 0(Integer), 10(Integer)
2019-06-06 15:06:12 -<==      Total: 10
2019-06-06 15:06:12 -==>  Preparing: select count(*) from elec_log 
2019-06-06 15:06:12 -==> Parameters: 
2019-06-06 15:06:12 -<==      Total: 11
2019-06-06 15:06:12 -耗时 : 27
2019-06-06 15:06:12 -<==      Total: 1
2019-06-06 15:06:12 -返回值 : [DictDO{id=180, name='矿民用', value='1', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=179, name='矿商业', value='2', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=178, name='矿工业1', value='3', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=177, name='矿工业2', value='4', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=176, name='矿工业3', value='5', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=175, name='乌民用', value='6', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=174, name='乌商用', value='7', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=173, name='乌工业', value='8', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=172, name='煤民用', value='9', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=171, name='煤商业', value='10', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=170, name='政府用电', value='11', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-06-06 15:06:12 -耗时 : 9
2019-06-06 15:06:12 -返回值 : com.bootdo.common.utils.PageUtils@1054112a
2019-06-06 15:06:17 -请求地址 : http://localhost:8081/moneyLog/elecLog/edit/93
2019-06-06 15:06:17 -HTTP METHOD : GET
2019-06-06 15:06:17 -CLASS_METHOD : com.bootdo.moneyLog.controller.ElecLogController.edit
2019-06-06 15:06:17 -参数 : [93, {}]
2019-06-06 15:06:17 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`elec_type`,`elec_money`,`elec_date`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec_log where id = ? 
2019-06-06 15:06:17 -==> Parameters: 93(Long)
2019-06-06 15:06:17 -<==      Total: 1
2019-06-06 15:06:17 -耗时 : 25
2019-06-06 15:06:17 -返回值 : moneyLog/elecLog/edit
2019-06-06 15:06:18 -请求地址 : http://localhost:8081/common/dict/list/elecType
2019-06-06 15:06:18 -HTTP METHOD : GET
2019-06-06 15:06:18 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-06-06 15:06:18 -参数 : [elecType]
2019-06-06 15:06:18 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-06-06 15:06:18 -==> Parameters: elecType(String)
2019-06-06 15:06:18 -<==      Total: 11
2019-06-06 15:06:18 -耗时 : 8
2019-06-06 15:06:18 -返回值 : [DictDO{id=180, name='矿民用', value='1', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=179, name='矿商业', value='2', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=178, name='矿工业1', value='3', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=177, name='矿工业2', value='4', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=176, name='矿工业3', value='5', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=175, name='乌民用', value='6', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=174, name='乌商用', value='7', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=173, name='乌工业', value='8', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=172, name='煤民用', value='9', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=171, name='煤商业', value='10', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=170, name='政府用电', value='11', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-06-06 15:06:18 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-06-06 15:06:18 -HTTP METHOD : GET
2019-06-06 15:06:18 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-06-06 15:06:18 -参数 : [userType]
2019-06-06 15:06:18 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-06-06 15:06:18 -==> Parameters: userType(String)
2019-06-06 15:06:18 -<==      Total: 4
2019-06-06 15:06:18 -耗时 : 21
2019-06-06 15:06:18 -返回值 : [DictDO{id=145, name='银行转账', value='D', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=144, name='微信支付', value='C', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-06-06 15:09:11 -Starting BootdoApplication on PC-201905091110 with PID 25800 (D:\eclipse2018-work\bootdo\target\classes started by Administrator in D:\eclipse2018-work\bootdo)
2019-06-06 15:09:11 -Running with Spring Boot v2.0.3.RELEASE, Spring v5.0.7.RELEASE
2019-06-06 15:09:11 -The following profiles are active: dev
2019-06-06 15:09:12 -Refreshing org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@57eda880: startup date [Thu Jun 06 15:09:12 CST 2019]; root of context hierarchy
2019-06-06 15:09:16 -Multiple Spring Data modules found, entering strict repository configuration mode!
2019-06-06 15:09:18 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$88babe81] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-06 15:09:20 -Bean 'shiroConfig' of type [com.bootdo.system.config.ShiroConfig$$EnhancerBySpringCGLIB$$7b13ed28] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-06 15:09:23 -Bean 'userRealm' of type [com.bootdo.system.shiro.UserRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-06 15:09:24 -Bean 'cacheManager2' of type [net.sf.ehcache.CacheManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-06 15:09:24 -Bean 'ehCacheManager' of type [org.apache.shiro.cache.ehcache.EhCacheManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-06 15:09:24 -Cache with name 'com.bootdo.system.shiro.UserRealm.authorizationCache' does not yet exist.  Creating now.
2019-06-06 15:09:24 -Added EhCache named [com.bootdo.system.shiro.UserRealm.authorizationCache]
2019-06-06 15:09:24 -Bean 'sessionDAO' of type [org.apache.shiro.session.mgt.eis.MemorySessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-06 15:09:24 -Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-06 15:09:24 -Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-06 15:09:24 -Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-06 15:09:25 -Tomcat initialized with port(s): 8081 (http)
2019-06-06 15:09:25 -Initializing ProtocolHandler ["http-nio-8081"]
2019-06-06 15:09:25 -Starting service [Tomcat]
2019-06-06 15:09:25 -Starting Servlet Engine: Apache Tomcat/8.5.31
2019-06-06 15:09:25 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [D:\Java\JDK\jdk1.8.0_102\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;D:\Java\JDK\jdk1.8.0_102\jre\bin;D:/Java/JRE/bin/server;D:/Java/JRE/bin;D:/Java/JRE/lib/amd64;C:\ProgramData\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Windows\System32\OpenSSH\;%JAVA_HOME\bin%;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;;C:\Users\Administrator\Desktop;;.]
2019-06-06 15:09:25 -Initializing Spring embedded WebApplicationContext
2019-06-06 15:09:25 -Root WebApplicationContext: initialization completed in 13872 ms
2019-06-06 15:09:26 -Mapping filter: 'characterEncodingFilter' to: [/*]
2019-06-06 15:09:26 -Mapping filter: 'hiddenHttpMethodFilter' to: [/*]
2019-06-06 15:09:26 -Mapping filter: 'httpPutFormContentFilter' to: [/*]
2019-06-06 15:09:26 -Mapping filter: 'requestContextFilter' to: [/*]
2019-06-06 15:09:26 -Filter xssFilter was not registered (disabled)
2019-06-06 15:09:26 -Mapping filter: 'webStatFilter' to urls: [/*]
2019-06-06 15:09:26 -Mapping filter: 'shiroFilterFactoryBean' to: [/*]
2019-06-06 15:09:26 -Servlet statViewServlet mapped to [/druid/*]
2019-06-06 15:09:26 -Servlet dispatcherServlet mapped to [/]
2019-06-06 15:09:31 -ApplicationContext registed-->org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@57eda880: startup date [Thu Jun 06 15:09:12 CST 2019]; root of context hierarchy
2019-06-06 15:09:31 -Using default implementation for ThreadExecutor
2019-06-06 15:09:31 -Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2019-06-06 15:09:31 -Quartz Scheduler v.2.3.0 created.
2019-06-06 15:09:31 -RAMJobStore initialized.
2019-06-06 15:09:31 -Scheduler meta-data: Quartz Scheduler (v2.3.0) 'schedulerFactoryBean' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2019-06-06 15:09:31 -Quartz scheduler 'schedulerFactoryBean' initialized from an externally provided properties instance.
2019-06-06 15:09:31 -Quartz scheduler version: 2.3.0
2019-06-06 15:09:31 -JobFactory set to: com.bootdo.common.quartz.factory.JobFactory@18be3205
2019-06-06 15:09:32 -Initializing ExecutorService  'clientInboundChannelExecutor'
2019-06-06 15:09:33 -Initializing ExecutorService  'clientOutboundChannelExecutor'
2019-06-06 15:09:36 -Mapped "{[/charts/countDD/getCountDD],methods=[POST]}" onto public java.util.Map<java.lang.String, java.lang.Object> com.bootdo.charts.controller.countDDController.getCountD(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo)
2019-06-06 15:09:36 -Mapped "{[/charts/countDD],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.countDDController.countDD()
2019-06-06 15:09:36 -Mapped "{[/charts/countDD/exportDD],methods=[GET]}" onto public void com.bootdo.charts.controller.countDDController.exportDD(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.HeatLogVo,com.bootdo.moneyLog.vo.WaterLogVo,javax.servlet.http.HttpServletResponse)
2019-06-06 15:09:36 -Mapped "{[/charts/countMM],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.countMMController.countMM()
2019-06-06 15:09:36 -Mapped "{[/charts/countMM/exportMM],methods=[GET]}" onto public void com.bootdo.charts.controller.countMMController.exportMM(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.HeatLogVo,com.bootdo.moneyLog.vo.WaterLogVo,javax.servlet.http.HttpServletResponse)
2019-06-06 15:09:36 -Mapped "{[/charts/countMM/getCountMM],methods=[POST]}" onto public java.util.Map<java.lang.String, java.lang.Object> com.bootdo.charts.controller.countMMController.getCountMM(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo)
2019-06-06 15:09:36 -Mapped "{[/charts/countOwe],methods=[GET]}" onto java.lang.String com.bootdo.charts.controller.countOweController.countOwe()
2019-06-06 15:09:36 -Mapped "{[/charts/countOwe/getCountOwe],methods=[POST]}" onto public java.util.Map<java.lang.String, java.lang.Object> com.bootdo.charts.controller.countOweController.getCountOwe(com.bootdo.elec.vo.ElecVo,com.bootdo.water.vo.WaterVo,com.bootdo.heat.vo.HeatVo)
2019-06-06 15:09:36 -Mapped "{[/charts/countOwe/exportOwe],methods=[GET]}" onto public void com.bootdo.charts.controller.countOweController.exportOwe(com.bootdo.elec.vo.ElecVo,com.bootdo.heat.vo.HeatVo,com.bootdo.water.vo.WaterVo,javax.servlet.http.HttpServletResponse)
2019-06-06 15:09:36 -Mapped "{[/charts/countRun/getCountRun],methods=[POST]}" onto public java.util.Map<java.lang.String, java.lang.Object> com.bootdo.charts.controller.countRunController.getCountRun(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo)
2019-06-06 15:09:36 -Mapped "{[/charts/countRun],methods=[GET]}" onto java.lang.String com.bootdo.charts.controller.countRunController.countRun()
2019-06-06 15:09:36 -Mapped "{[/charts/countRun/exportRun],methods=[GET]}" onto public void com.bootdo.charts.controller.countRunController.exportRun(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.HeatLogVo,com.bootdo.moneyLog.vo.WaterLogVo,javax.servlet.http.HttpServletResponse)
2019-06-06 15:09:36 -Mapped "{[/charts/countYY],methods=[GET]}" onto java.lang.String com.bootdo.charts.controller.countYYController.countYY()
2019-06-06 15:09:36 -Mapped "{[/charts/countYY/exportYY],methods=[GET]}" onto public void com.bootdo.charts.controller.countYYController.exportYY(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.HeatLogVo,com.bootdo.moneyLog.vo.WaterLogVo,javax.servlet.http.HttpServletResponse)
2019-06-06 15:09:36 -Mapped "{[/charts/countYY/getCountYY],methods=[POST]}" onto public java.util.Map<java.lang.String, java.lang.Object> com.bootdo.charts.controller.countYYController.getCountYY(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo)
2019-06-06 15:09:36 -Mapped "{[/charts/tableDD],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.tableDDController.countDD()
2019-06-06 15:09:36 -Mapped "{[/charts/tableDD/exportDD],methods=[GET]}" onto public void com.bootdo.charts.controller.tableDDController.exportDD(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.HeatLogVo,com.bootdo.moneyLog.vo.WaterLogVo,javax.servlet.http.HttpServletResponse)
2019-06-06 15:09:36 -Mapped "{[/charts/tableDD/getTableDD],methods=[POST]}" onto public java.util.Map<java.lang.String, java.lang.Object> com.bootdo.charts.controller.tableDDController.getTableDD(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo)
2019-06-06 15:09:36 -Mapped "{[/charts/tableElecMM/tableElecMM],methods=[POST]}" onto public java.util.Map<java.lang.String, java.lang.Object> com.bootdo.charts.controller.tableElecMMController.tableElecMM(com.bootdo.elec.vo.ElecVo,com.bootdo.moneyLog.vo.ElecLogVo)
2019-06-06 15:09:36 -Mapped "{[/charts/tableElecMM],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.tableElecMMController.tableElecMM()
2019-06-06 15:09:36 -Mapped "{[/charts/tableElecMM/exportElecMM],methods=[GET]}" onto public void com.bootdo.charts.controller.tableElecMMController.exportElecMM(com.bootdo.elec.vo.ElecVo,com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse)
2019-06-06 15:09:36 -Mapped "{[/charts/tableElecYY/tableElecYY],methods=[POST]}" onto public java.util.Map<java.lang.String, java.lang.Object> com.bootdo.charts.controller.tableElecYYController.tableElecYY(com.bootdo.elec.vo.ElecVo,com.bootdo.moneyLog.vo.ElecLogVo)
2019-06-06 15:09:36 -Mapped "{[/charts/tableElecYY],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.tableElecYYController.tableElecYY()
2019-06-06 15:09:36 -Mapped "{[/charts/tableElecYY/exportElecYY],methods=[GET]}" onto public void com.bootdo.charts.controller.tableElecYYController.exportElecYY(com.bootdo.elec.vo.ElecVo,com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse)
2019-06-06 15:09:36 -Mapped "{[/charts/tableHeatMM/tableHeatMM],methods=[POST]}" onto public java.util.Map<java.lang.String, java.lang.Object> com.bootdo.charts.controller.tableHeatMMController.tableHeatMM(com.bootdo.heat.vo.HeatVo,com.bootdo.moneyLog.vo.HeatLogVo)
2019-06-06 15:09:36 -Mapped "{[/charts/tableHeatMM],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.tableHeatMMController.tableHeatMM()
2019-06-06 15:09:36 -Mapped "{[/charts/tableHeatMM/exportHeatMM],methods=[GET]}" onto public void com.bootdo.charts.controller.tableHeatMMController.exportHeatMM(com.bootdo.heat.vo.HeatVo,com.bootdo.moneyLog.vo.HeatLogVo,javax.servlet.http.HttpServletResponse)
2019-06-06 15:09:36 -Mapped "{[/charts/tableHeatYY/exportHeatYY],methods=[GET]}" onto public void com.bootdo.charts.controller.tableHeatYYController.exportHeatYY(com.bootdo.heat.vo.HeatVo,com.bootdo.moneyLog.vo.HeatLogVo,javax.servlet.http.HttpServletResponse)
2019-06-06 15:09:36 -Mapped "{[/charts/tableHeatYY],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.tableHeatYYController.tableHeatYY()
2019-06-06 15:09:36 -Mapped "{[/charts/tableHeatYY/tableHeatYY],methods=[POST]}" onto public java.util.Map<java.lang.String, java.lang.Object> com.bootdo.charts.controller.tableHeatYYController.tableHeatYY(com.bootdo.heat.vo.HeatVo,com.bootdo.moneyLog.vo.HeatLogVo)
2019-06-06 15:09:36 -Mapped "{[/charts/tableWaterMM/tableWaterMM],methods=[POST]}" onto public java.util.Map<java.lang.String, java.lang.Object> com.bootdo.charts.controller.tableWaterMMController.tableWaterMM(com.bootdo.water.vo.WaterVo,com.bootdo.moneyLog.vo.WaterLogVo)
2019-06-06 15:09:36 -Mapped "{[/charts/tableWaterMM],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.tableWaterMMController.tableWaterMM()
2019-06-06 15:09:36 -Mapped "{[/charts/tableWaterMM/exportWaterMM],methods=[GET]}" onto public void com.bootdo.charts.controller.tableWaterMMController.exportWaterMM(com.bootdo.water.vo.WaterVo,com.bootdo.moneyLog.vo.WaterLogVo,javax.servlet.http.HttpServletResponse)
2019-06-06 15:09:36 -Mapped "{[/charts/tableWaterYY/tableWaterYY],methods=[POST]}" onto public java.util.Map<java.lang.String, java.lang.Integer> com.bootdo.charts.controller.tableWaterYYController.tableWaterYY(com.bootdo.water.vo.WaterVo,com.bootdo.moneyLog.vo.WaterLogVo)
2019-06-06 15:09:36 -Mapped "{[/charts/tableWaterYY],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.tableWaterYYController.tableWaterYY()
2019-06-06 15:09:36 -Mapped "{[/charts/tableWaterYY/exportWaterYY],methods=[GET]}" onto public void com.bootdo.charts.controller.tableWaterYYController.exportWaterYY(com.bootdo.water.vo.WaterVo,com.bootdo.moneyLog.vo.WaterLogVo,javax.servlet.http.HttpServletResponse)
2019-06-06 15:09:36 -Mapped "{[/common/dict/add],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.add()
2019-06-06 15:09:36 -Mapped "{[/common/dict/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.remove(java.lang.Long)
2019-06-06 15:09:36 -Mapped "{[/common/dict/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.remove(java.lang.Long[])
2019-06-06 15:09:36 -Mapped "{[/common/dict/update]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.update(com.bootdo.common.domain.DictDO)
2019-06-06 15:09:36 -Mapped "{[/common/dict/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.common.controller.DictController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-06-06 15:09:36 -Mapped "{[/common/dict/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.save(com.bootdo.common.domain.DictDO)
2019-06-06 15:09:36 -Mapped "{[/common/dict/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.edit(java.lang.Long,org.springframework.ui.Model)
2019-06-06 15:09:36 -Mapped "{[/common/dict/add/{type}/{description}],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.addD(org.springframework.ui.Model,java.lang.String,java.lang.String)
2019-06-06 15:09:36 -Mapped "{[/common/dict/list/{type}],methods=[GET]}" onto public java.util.List<com.bootdo.common.domain.DictDO> com.bootdo.common.controller.DictController.listByType(java.lang.String)
2019-06-06 15:09:36 -Mapped "{[/common/dict],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.dict()
2019-06-06 15:09:36 -Mapped "{[/common/dict/type],methods=[GET]}" onto public java.util.List<com.bootdo.common.domain.DictDO> com.bootdo.common.controller.DictController.listType()
2019-06-06 15:09:36 -Mapped "{[/common/sysFile/add],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.FileController.add()
2019-06-06 15:09:36 -Mapped "{[/common/sysFile/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.remove(java.lang.Long,javax.servlet.http.HttpServletRequest)
2019-06-06 15:09:36 -Mapped "{[/common/sysFile/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.remove(java.lang.Long[])
2019-06-06 15:09:36 -Mapped "{[/common/sysFile/update]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.update(com.bootdo.common.domain.FileDO)
2019-06-06 15:09:36 -Mapped "{[/common/sysFile/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.common.controller.FileController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-06-06 15:09:36 -Mapped "{[/common/sysFile/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.save(com.bootdo.common.domain.FileDO)
2019-06-06 15:09:36 -Mapped "{[/common/sysFile/info/{id}]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.info(java.lang.Long)
2019-06-06 15:09:36 -Mapped "{[/common/sysFile/upload],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.FileController.upload(org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpServletRequest)
2019-06-06 15:09:36 -Mapped "{[/common/sysFile/edit],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.FileController.edit(java.lang.Long,org.springframework.ui.Model)
2019-06-06 15:09:36 -Mapped "{[/common/sysFile],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.FileController.sysFile(org.springframework.ui.Model)
2019-06-06 15:09:36 -Mapped "{[/common/generator/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.GeneratorController.update(java.util.Map<java.lang.String, java.lang.Object>)
2019-06-06 15:09:36 -Mapped "{[/common/generator/list],methods=[GET]}" onto java.util.List<java.util.Map<java.lang.String, java.lang.Object>> com.bootdo.common.controller.GeneratorController.list()
2019-06-06 15:09:36 -Mapped "{[/common/generator/code/{tableName}]}" onto public void com.bootdo.common.controller.GeneratorController.code(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String) throws java.io.IOException
2019-06-06 15:09:36 -Mapped "{[/common/generator/batchCode]}" onto public void com.bootdo.common.controller.GeneratorController.batchCode(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String) throws java.io.IOException
2019-06-06 15:09:36 -Mapped "{[/common/generator/edit],methods=[GET]}" onto public java.lang.String com.bootdo.common.controller.GeneratorController.edit(org.springframework.ui.Model)
2019-06-06 15:09:36 -Mapped "{[/common/generator],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.GeneratorController.generator()
2019-06-06 15:09:36 -Mapped "{[/common/job/add],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.JobController.add()
2019-06-06 15:09:36 -Mapped "{[/common/job/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.remove(java.lang.Long)
2019-06-06 15:09:36 -Mapped "{[/common/job/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.remove(java.lang.Long[])
2019-06-06 15:09:36 -Mapped "{[/common/job/update],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.update(com.bootdo.common.domain.TaskDO)
2019-06-06 15:09:36 -Mapped "{[/common/job/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.common.controller.JobController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-06-06 15:09:36 -Mapped "{[/common/job/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.save(com.bootdo.common.domain.TaskDO)
2019-06-06 15:09:36 -Mapped "{[/common/job/info/{id}]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.info(java.lang.Long)
2019-06-06 15:09:36 -Mapped "{[/common/job],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.JobController.taskScheduleJob()
2019-06-06 15:09:36 -Mapped "{[/common/job/changeJobStatus],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.changeJobStatus(java.lang.Long,java.lang.String)
2019-06-06 15:09:36 -Mapped "{[/common/job/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.JobController.edit(java.lang.Long,org.springframework.ui.Model)
2019-06-06 15:09:36 -Mapped "{[/common/log/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.LogController.remove(java.lang.Long)
2019-06-06 15:09:36 -Mapped "{[/common/log],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.LogController.log()
2019-06-06 15:09:36 -Mapped "{[/common/log/list],methods=[GET]}" onto com.bootdo.common.domain.PageDO<com.bootdo.common.domain.LogDO> com.bootdo.common.controller.LogController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-06-06 15:09:36 -Mapped "{[/common/log/batchRemove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.LogController.batchRemove(java.lang.Long[])
2019-06-06 15:09:36 -Mapped "{[/common/long],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.LongController.Long()
2019-06-06 15:09:36 -Mapped "{[/common/time],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.TimeController.Time()
2019-06-06 15:09:36 -Mapped "{[/error]}" onto public com.bootdo.common.utils.R com.bootdo.common.exception.MainsiteErrorController.handleError(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-06-06 15:09:36 -Mapped "{[/error],produces=[text/html]}" onto public org.springframework.web.servlet.ModelAndView com.bootdo.common.exception.MainsiteErrorController.errorHtml(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-06-06 15:09:36 -Mapped "{[/elec/elec/add],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecController.add()
2019-06-06 15:09:36 -Mapped "{[/elec/elec/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.remove(java.lang.Long)
2019-06-06 15:09:36 -Mapped "{[/elec/elec/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.remove(java.lang.Long[])
2019-06-06 15:09:36 -Mapped "{[/elec/elec/update],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.update(com.bootdo.elec.domain.ElecDO)
2019-06-06 15:09:36 -Mapped "{[/elec/elec/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.elec.controller.ElecController.list(java.util.Map<java.lang.String, java.lang.Object>,com.bootdo.elec.domain.ElecDO)
2019-06-06 15:09:36 -Mapped "{[/elec/elec/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.save(com.bootdo.elec.domain.ElecDO)
2019-06-06 15:09:36 -Mapped "{[/elec/elec],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecController.Elec()
2019-06-06 15:09:36 -Mapped "{[/elec/elec/exprotElec],methods=[GET]}" onto public void com.bootdo.elec.controller.ElecController.exprotExcel(com.bootdo.elec.vo.ElecVo,javax.servlet.http.HttpServletResponse)
2019-06-06 15:09:36 -Mapped "{[/elec/elec/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecController.edit(java.lang.Long,org.springframework.ui.Model)
2019-06-06 15:09:36 -Mapped "{[/elec/elecInto/importElecIntoExcel],methods=[POST]}" onto public java.lang.String com.bootdo.elec.controller.ElecIntoController.importElecIntoExcel(org.springframework.web.multipart.MultipartFile,com.bootdo.elec.vo.ElecVo,javax.servlet.http.HttpServletResponse) throws java.lang.Exception
2019-06-06 15:09:36 -Mapped "{[/elec/elecInto/exprotElecIntoExcel],methods=[GET]}" onto public void com.bootdo.elec.controller.ElecIntoController.exprotExcel(com.bootdo.elec.vo.ElecVo,javax.servlet.http.HttpServletResponse)
2019-06-06 15:09:36 -Mapped "{[/elec/elecInto],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecIntoController.ElecInto()
2019-06-06 15:09:36 -Mapped "{[/elec/elecPrice/add],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecPriceController.add()
2019-06-06 15:09:36 -Mapped "{[/elec/elecPrice/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecPriceController.remove(java.lang.Long)
2019-06-06 15:09:36 -Mapped "{[/elec/elecPrice/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecPriceController.remove(java.lang.Long[])
2019-06-06 15:09:36 -Mapped "{[/elec/elecPrice/update]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecPriceController.update(com.bootdo.elec.domain.ElecPriceDO)
2019-06-06 15:09:36 -Mapped "{[/elec/elecPrice/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.elec.controller.ElecPriceController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-06-06 15:09:36 -Mapped "{[/elec/elecPrice/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecPriceController.save(com.bootdo.elec.domain.ElecPriceDO,com.bootdo.elec.domain.ElecDO)
2019-06-06 15:09:36 -Mapped "{[/elec/elecPrice],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecPriceController.ElecPrice()
2019-06-06 15:09:36 -Mapped "{[/elec/elecPrice/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecPriceController.edit(java.lang.Long,org.springframework.ui.Model)
2019-06-06 15:09:36 -Mapped "{[/elec/elecUpLoad],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecUpLoadController.Elec()
2019-06-06 15:09:36 -Mapped "{[/elec/elecUpLoad/exprotElecExcel],methods=[GET]}" onto public void com.bootdo.elec.controller.ElecUpLoadController.exprotElecExcel(com.bootdo.elec.vo.ElecVo,javax.servlet.http.HttpServletResponse)
2019-06-06 15:09:36 -Mapped "{[/elec/elecUpLoad/importElecExcel],methods=[POST]}" onto public java.util.Map<java.lang.String, java.lang.Object> com.bootdo.elec.controller.ElecUpLoadController.importElecExcel(org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpServletRequest) throws java.lang.Exception
2019-06-06 15:09:36 -Mapped "{[/elec/elecUpLoad/importElecUser]}" onto public java.lang.String com.bootdo.elec.controller.ElecUpLoadController.importElecUser(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)
2019-06-06 15:09:36 -Mapped "{[/heat/heat/add],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatController.add()
2019-06-06 15:09:36 -Mapped "{[/heat/heat/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatController.remove(java.lang.Integer)
2019-06-06 15:09:36 -Mapped "{[/heat/heat/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatController.remove(java.lang.Integer[])
2019-06-06 15:09:36 -Mapped "{[/heat/heat/update]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatController.update(com.bootdo.heat.domain.HeatDO)
2019-06-06 15:09:36 -Mapped "{[/heat/heat/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.heat.controller.HeatController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-06-06 15:09:36 -Mapped "{[/heat/heat/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatController.save(com.bootdo.heat.domain.HeatDO)
2019-06-06 15:09:36 -Mapped "{[/heat/heat/exprotHeat],methods=[GET]}" onto public void com.bootdo.heat.controller.HeatController.exprotExcel(com.bootdo.heat.vo.HeatVo,javax.servlet.http.HttpServletResponse)
2019-06-06 15:09:36 -Mapped "{[/heat/heat],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatController.Heat()
2019-06-06 15:09:36 -Mapped "{[/heat/heat/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatController.edit(java.lang.Integer,org.springframework.ui.Model)
2019-06-06 15:09:36 -Mapped "{[/heat/heatInto/importHeatIntoExcel],methods=[POST]}" onto public java.lang.String com.bootdo.heat.controller.HeatIntoController.importHeatIntoExcel(org.springframework.web.multipart.MultipartFile,com.bootdo.heat.vo.HeatVo,javax.servlet.http.HttpServletResponse) throws java.lang.Exception
2019-06-06 15:09:36 -Mapped "{[/heat/heatInto/exprotHeatIntoExcel],methods=[GET]}" onto public void com.bootdo.heat.controller.HeatIntoController.exprotExcel(com.bootdo.heat.vo.HeatVo,javax.servlet.http.HttpServletResponse)
2019-06-06 15:09:36 -Mapped "{[/heat/heatInto],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatIntoController.HeatInto()
2019-06-06 15:09:36 -Mapped "{[/heat/heatPrice/add],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatPriceController.add()
2019-06-06 15:09:36 -Mapped "{[/heat/heatPrice/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatPriceController.remove(java.lang.Long)
2019-06-06 15:09:36 -Mapped "{[/heat/heatPrice/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatPriceController.remove(java.lang.Long[])
2019-06-06 15:09:36 -Mapped "{[/heat/heatPrice/update]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatPriceController.update(com.bootdo.heat.domain.HeatPriceDO)
2019-06-06 15:09:36 -Mapped "{[/heat/heatPrice/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.heat.controller.HeatPriceController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-06-06 15:09:36 -Mapped "{[/heat/heatPrice/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatPriceController.save(com.bootdo.heat.domain.HeatPriceDO)
2019-06-06 15:09:36 -Mapped "{[/heat/heatPrice],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatPriceController.HeatPrice()
2019-06-06 15:09:36 -Mapped "{[/heat/heatPrice/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatPriceController.edit(java.lang.Long,org.springframework.ui.Model)
2019-06-06 15:09:36 -Mapped "{[/heat/heatUpLoad/importHeatExcel]}" onto public java.lang.String com.bootdo.heat.controller.HeatUpLoadController.importHeatExcel(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)
2019-06-06 15:09:36 -Mapped "{[/heat/heatUpLoad/exprotHeatExcel],methods=[GET]}" onto public void com.bootdo.heat.controller.HeatUpLoadController.exprotHeatExcel(com.bootdo.heat.vo.HeatVo,javax.servlet.http.HttpServletResponse)
2019-06-06 15:09:36 -Mapped "{[/heat/heatUpLoad/createHeatExcel],methods=[POST]}" onto public java.lang.String com.bootdo.heat.controller.HeatUpLoadController.createHeatExcel(com.bootdo.heat.domain.HeatDO) throws java.lang.Exception
2019-06-06 15:09:36 -Mapped "{[/heat/heatUpLoad],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatUpLoadController.HeatUpLoad()
2019-06-06 15:09:36 -Mapped "{[/moneyList/moneyList/moneyPrint/{id}],methods=[GET]}" onto java.lang.String com.bootdo.moneyList.controller.MoneyListController.printEdit(java.lang.Long,org.springframework.ui.Model)
2019-06-06 15:09:36 -Mapped "{[/moneyList/moneyList],methods=[GET]}" onto java.lang.String com.bootdo.moneyList.controller.MoneyListController.MoneyList()
2019-06-06 15:09:36 -Mapped "{[/moneyList/moneyList/queryAllUser],methods=[POST]}" onto public java.util.List<com.bootdo.moneyList.damain.MoneyListDO> com.bootdo.moneyList.controller.MoneyListController.queryAllUser(com.bootdo.moneyList.damain.MoneyListDO)
2019-06-06 15:09:36 -Mapped "{[/moneyList/moneyList/updateMoney],methods=[POST]}" onto public java.lang.Long com.bootdo.moneyList.controller.MoneyListController.updateMoney(com.bootdo.moneyList.damain.MoneyListDO)
2019-06-06 15:09:36 -Mapped "{[/moneyList/moneyList/queryAllUserName],methods=[POST]}" onto public java.util.List<com.bootdo.moneyList.damain.MoneyListDO> com.bootdo.moneyList.controller.MoneyListController.getAllUserName(com.bootdo.moneyList.damain.MoneyListDO)
2019-06-06 15:09:36 -Mapped "{[/moneyList/moneyWZ/add],methods=[GET]}" onto java.lang.String com.bootdo.moneyList.controller.MoneyListWZController.add()
2019-06-06 15:09:36 -Mapped "{[/moneyList/moneyWZ/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyList.controller.MoneyListWZController.remove(java.lang.Long)
2019-06-06 15:09:36 -Mapped "{[/moneyList/moneyWZ/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyList.controller.MoneyListWZController.remove(java.lang.Long[])
2019-06-06 15:09:36 -Mapped "{[/moneyList/moneyWZ/update],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyList.controller.MoneyListWZController.update(com.bootdo.elec.domain.ElecDO)
2019-06-06 15:09:36 -Mapped "{[/moneyList/moneyWZ/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.moneyList.controller.MoneyListWZController.list(java.util.Map<java.lang.String, java.lang.Object>,com.bootdo.elec.domain.ElecDO)
2019-06-06 15:09:36 -Mapped "{[/moneyList/moneyWZ],methods=[GET]}" onto java.lang.String com.bootdo.moneyList.controller.MoneyListWZController.MoneyWZ()
2019-06-06 15:09:36 -Mapped "{[/moneyList/moneyWZ/batchMoney],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyList.controller.MoneyListWZController.batchMoney(java.lang.Long[])
2019-06-06 15:09:36 -Mapped "{[/moneyList/moneyWZ/exprotWZ],methods=[GET]}" onto public void com.bootdo.moneyList.controller.MoneyListWZController.exportElecYY(com.bootdo.elec.vo.ElecVo,com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse)
2019-06-06 15:09:36 -Mapped "{[/moneyList/moneyWZ/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.moneyList.controller.MoneyListWZController.edit(java.lang.Long,org.springframework.ui.Model)
2019-06-06 15:09:36 -Mapped "{[/moneyLog/elecLog/add],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.ElecLogController.add()
2019-06-06 15:09:36 -Mapped "{[/moneyLog/elecLog/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.ElecLogController.remove(java.lang.Long)
2019-06-06 15:09:36 -Mapped "{[/moneyLog/elecLog/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.ElecLogController.remove(java.lang.Long[])
2019-06-06 15:09:36 -Mapped "{[/moneyLog/elecLog/update]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.ElecLogController.update(java.util.Map<java.lang.String, java.lang.Object>,com.bootdo.moneyLog.domain.ElecLogDO)
2019-06-06 15:09:36 -Mapped "{[/moneyLog/elecLog/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.moneyLog.controller.ElecLogController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-06-06 15:09:36 -Mapped "{[/moneyLog/elecLog/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.ElecLogController.save(com.bootdo.moneyLog.domain.ElecLogDO)
2019-06-06 15:09:36 -Mapped "{[/moneyLog/elecLog],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.ElecLogController.moneyLog()
2019-06-06 15:09:36 -Mapped "{[/moneyLog/elecLog/exprotElecLog],methods=[GET]}" onto public void com.bootdo.moneyLog.controller.ElecLogController.exprotElecLog(com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-06-06 15:09:36 -Mapped "{[/moneyLog/elecLog/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.ElecLogController.edit(java.lang.Long,org.springframework.ui.Model)
2019-06-06 15:09:36 -Mapped "{[/moneyLog/heatLog/add],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.HeatLogController.add()
2019-06-06 15:09:36 -Mapped "{[/moneyLog/heatLog/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.HeatLogController.remove(java.lang.Long)
2019-06-06 15:09:36 -Mapped "{[/moneyLog/heatLog/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.HeatLogController.remove(java.lang.Long[])
2019-06-06 15:09:36 -Mapped "{[/moneyLog/heatLog/update]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.HeatLogController.update(java.util.Map<java.lang.String, java.lang.Object>,com.bootdo.moneyLog.domain.HeatLogDO)
2019-06-06 15:09:36 -Mapped "{[/moneyLog/heatLog/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.moneyLog.controller.HeatLogController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-06-06 15:09:36 -Mapped "{[/moneyLog/heatLog/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.HeatLogController.save(com.bootdo.moneyLog.domain.HeatLogDO)
2019-06-06 15:09:36 -Mapped "{[/moneyLog/heatLog/exprotHeatLog],methods=[GET]}" onto public void com.bootdo.moneyLog.controller.HeatLogController.exprotHeatLog(com.bootdo.moneyLog.vo.HeatLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-06-06 15:09:36 -Mapped "{[/moneyLog/heatLog],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.HeatLogController.HeatLog()
2019-06-06 15:09:36 -Mapped "{[/moneyLog/heatLog/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.HeatLogController.edit(java.lang.Long,org.springframework.ui.Model)
2019-06-06 15:09:36 -Mapped "{[/moneyLog/waterLog/add],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.WaterLogController.add()
2019-06-06 15:09:36 -Mapped "{[/moneyLog/waterLog/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.WaterLogController.remove(java.lang.Long)
2019-06-06 15:09:36 -Mapped "{[/moneyLog/waterLog/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.WaterLogController.remove(java.lang.Long[])
2019-06-06 15:09:36 -Mapped "{[/moneyLog/waterLog/update]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.WaterLogController.update(java.util.Map<java.lang.String, java.lang.Object>,com.bootdo.moneyLog.domain.WaterLogDO)
2019-06-06 15:09:36 -Mapped "{[/moneyLog/waterLog/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.moneyLog.controller.WaterLogController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-06-06 15:09:36 -Mapped "{[/moneyLog/waterLog/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.WaterLogController.save(com.bootdo.moneyLog.domain.WaterLogDO)
2019-06-06 15:09:36 -Mapped "{[/moneyLog/waterLog],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.WaterLogController.WaterLog()
2019-06-06 15:09:36 -Mapped "{[/moneyLog/waterLog/exprotWaterLog],methods=[GET]}" onto public void com.bootdo.moneyLog.controller.WaterLogController.exprotWaterLog(com.bootdo.moneyLog.vo.WaterLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-06-06 15:09:36 -Mapped "{[/moneyLog/waterLog/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.WaterLogController.edit(java.lang.Long,org.springframework.ui.Model)
2019-06-06 15:09:36 -Mapped "{[/oa/notify/add],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.add()
2019-06-06 15:09:36 -Mapped "{[/oa/notify/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.remove(java.lang.Long)
2019-06-06 15:09:36 -Mapped "{[/oa/notify/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.remove(java.lang.Long[])
2019-06-06 15:09:36 -Mapped "{[/oa/notify/update]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.update(com.bootdo.oa.domain.NotifyDO)
2019-06-06 15:09:36 -Mapped "{[/oa/notify/read/{id}],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.read(java.lang.Long,org.springframework.ui.Model)
2019-06-06 15:09:36 -Mapped "{[/oa/notify/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.oa.controller.NotifyController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-06-06 15:09:36 -Mapped "{[/oa/notify/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.save(com.bootdo.oa.domain.NotifyDO)
2019-06-06 15:09:36 -Mapped "{[/oa/notify/message],methods=[GET]}" onto com.bootdo.common.utils.PageUtils com.bootdo.oa.controller.NotifyController.message()
2019-06-06 15:09:36 -Mapped "{[/oa/notify],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.oaNotify()
2019-06-06 15:09:36 -Mapped "{[/oa/notify/selfList],methods=[GET]}" onto com.bootdo.common.utils.PageUtils com.bootdo.oa.controller.NotifyController.selfList(java.util.Map<java.lang.String, java.lang.Object>)
2019-06-06 15:09:36 -Mapped "{[/oa/notify/selfNotify],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.selefNotify()
2019-06-06 15:09:36 -Mapped "{[/oa/notify/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.edit(java.lang.Long,org.springframework.ui.Model)
2019-06-06 15:09:36 -Mapped "{[/print/print/add],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.add()
2019-06-06 15:09:36 -Mapped "{[/print/print/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.print.controller.PrintController.remove(java.lang.Long)
2019-06-06 15:09:36 -Mapped "{[/print/print/update]}" onto public com.bootdo.common.utils.R com.bootdo.print.controller.PrintController.update(com.bootdo.print.domain.PrintDO)
2019-06-06 15:09:36 -Mapped "{[/print/print/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.print.controller.PrintController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-06-06 15:09:36 -Mapped "{[/print/print/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.print.controller.PrintController.save(java.lang.String,com.bootdo.print.domain.PrintDO)
2019-06-06 15:09:36 -Mapped "{[/print/print/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.print.controller.PrintController.batchRemove(java.lang.Long[])
2019-06-06 15:09:36 -Mapped "{[/print/print/printEdit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.printEdit(java.lang.Long,org.springframework.ui.Model)
2019-06-06 15:09:36 -Mapped "{[/print/print/printMoney],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.printMoney()
2019-06-06 15:09:36 -Mapped "{[/print/print/batchPrint],methods=[POST]}" onto public java.util.List<com.bootdo.print.vo.PrintVo> com.bootdo.print.controller.PrintController.batchPrint(java.lang.Long[])
2019-06-06 15:09:36 -Mapped "{[/print/print],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.Print()
2019-06-06 15:09:36 -Mapped "{[/print/print/exprotPrint],methods=[GET]}" onto public void com.bootdo.print.controller.PrintController.exprotPrint(com.bootdo.print.vo.PrintVo,javax.servlet.http.HttpServletResponse)
2019-06-06 15:09:36 -Mapped "{[/print/print/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.edit(java.lang.Long,org.springframework.ui.Model)
2019-06-06 15:09:36 -Mapped "{[/system/sysDept/add/{pId}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.add(java.lang.Long,org.springframework.ui.Model)
2019-06-06 15:09:36 -Mapped "{[/system/sysDept/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.remove(java.lang.Long)
2019-06-06 15:09:36 -Mapped "{[/system/sysDept/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.remove(java.lang.Long[])
2019-06-06 15:09:36 -Mapped "{[/system/sysDept/update]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.update(com.bootdo.system.domain.DeptDO)
2019-06-06 15:09:36 -Mapped "{[/system/sysDept/list],methods=[GET]}" onto public java.util.List<com.bootdo.system.domain.DeptDO> com.bootdo.system.controller.DeptController.list()
2019-06-06 15:09:36 -Mapped "{[/system/sysDept/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.save(com.bootdo.system.domain.DeptDO)
2019-06-06 15:09:36 -Mapped "{[/system/sysDept/tree],methods=[GET]}" onto public com.bootdo.common.domain.Tree<com.bootdo.system.domain.DeptDO> com.bootdo.system.controller.DeptController.tree()
2019-06-06 15:09:36 -Mapped "{[/system/sysDept/treeView],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.treeView()
2019-06-06 15:09:36 -Mapped "{[/system/sysDept],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.dept()
2019-06-06 15:09:36 -Mapped "{[/system/sysDept/edit/{deptId}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.edit(java.lang.Long,org.springframework.ui.Model)
2019-06-06 15:09:36 -Mapped "{[/index],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.index(org.springframework.ui.Model)
2019-06-06 15:09:36 -Mapped "{[/main],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.main()
2019-06-06 15:09:36 -Mapped "{[/login],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.login(org.springframework.ui.Model)
2019-06-06 15:09:36 -Mapped "{[/logout],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.logout()
2019-06-06 15:09:36 -Mapped "{[/ || ],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.welcome(org.springframework.ui.Model)
2019-06-06 15:09:36 -Mapped "{[/login],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.LoginController.ajaxLogin(java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest)
2019-06-06 15:09:36 -Mapped "{[/getVerify],methods=[GET]}" onto public void com.bootdo.system.controller.LoginController.getVerify(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-06-06 15:09:36 -Mapped "{[/sys/menu/add/{pId}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.MenuController.add(org.springframework.ui.Model,java.lang.Long)
2019-06-06 15:09:36 -Mapped "{[/sys/menu/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.MenuController.remove(java.lang.Long)
2019-06-06 15:09:36 -Mapped "{[/sys/menu/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.MenuController.update(com.bootdo.system.domain.MenuDO)
2019-06-06 15:09:36 -Mapped "{[/sys/menu/list]}" onto java.util.List<com.bootdo.system.domain.MenuDO> com.bootdo.system.controller.MenuController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-06-06 15:09:36 -Mapped "{[/sys/menu/save],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.MenuController.save(com.bootdo.system.domain.MenuDO)
2019-06-06 15:09:36 -Mapped "{[/sys/menu/tree/{roleId}],methods=[GET]}" onto com.bootdo.common.domain.Tree<com.bootdo.system.domain.MenuDO> com.bootdo.system.controller.MenuController.tree(java.lang.Long)
2019-06-06 15:09:36 -Mapped "{[/sys/menu/tree],methods=[GET]}" onto com.bootdo.common.domain.Tree<com.bootdo.system.domain.MenuDO> com.bootdo.system.controller.MenuController.tree()
2019-06-06 15:09:36 -Mapped "{[/sys/menu],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.MenuController.menu(org.springframework.ui.Model)
2019-06-06 15:09:36 -Mapped "{[/sys/menu/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.MenuController.edit(org.springframework.ui.Model,java.lang.Long)
2019-06-06 15:09:36 -Mapped "{[/sys/role/add],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.RoleController.add()
2019-06-06 15:09:36 -Mapped "{[/sys/role/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.update(com.bootdo.system.domain.RoleDO)
2019-06-06 15:09:36 -Mapped "{[/sys/role/list],methods=[GET]}" onto java.util.List<com.bootdo.system.domain.RoleDO> com.bootdo.system.controller.RoleController.list()
2019-06-06 15:09:36 -Mapped "{[/sys/role/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.save(java.lang.Long)
2019-06-06 15:09:36 -Mapped "{[/sys/role/save],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.save(com.bootdo.system.domain.RoleDO)
2019-06-06 15:09:36 -Mapped "{[/sys/role/batchRemove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.batchRemove(java.lang.Long[])
2019-06-06 15:09:36 -Mapped "{[/sys/role],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.RoleController.role()
2019-06-06 15:09:36 -Mapped "{[/sys/role/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.RoleController.edit(java.lang.Long,org.springframework.ui.Model)
2019-06-06 15:09:36 -Mapped "{[/sys/online/list]}" onto public java.util.List<com.bootdo.system.domain.UserOnline> com.bootdo.system.controller.SessionController.list()
2019-06-06 15:09:36 -Mapped "{[/sys/online],methods=[GET]}" onto public java.lang.String com.bootdo.system.controller.SessionController.online()
2019-06-06 15:09:36 -Mapped "{[/sys/online/forceLogout/{sessionId}]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.SessionController.forceLogout(java.lang.String,org.springframework.web.servlet.mvc.support.RedirectAttributes)
2019-06-06 15:09:36 -Mapped "{[/sys/online/sessionList]}" onto public java.util.Collection<org.apache.shiro.session.Session> com.bootdo.system.controller.SessionController.sessionList()
2019-06-06 15:09:36 -Mapped "{[/sys/user/exit],methods=[POST]}" onto boolean com.bootdo.system.controller.UserController.exit(java.util.Map<java.lang.String, java.lang.Object>)
2019-06-06 15:09:36 -Mapped "{[/sys/user/add],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.add(org.springframework.ui.Model)
2019-06-06 15:09:36 -Mapped "{[/sys/user/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.remove(java.lang.Long)
2019-06-06 15:09:36 -Mapped "{[/sys/user/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.update(com.bootdo.system.domain.UserDO)
2019-06-06 15:09:36 -Mapped "{[/sys/user/list],methods=[GET]}" onto com.bootdo.common.utils.PageUtils com.bootdo.system.controller.UserController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-06-06 15:09:36 -Mapped "{[/sys/user/save],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.save(com.bootdo.system.domain.UserDO)
2019-06-06 15:09:36 -Mapped "{[/sys/user/batchRemove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.batchRemove(java.lang.Long[])
2019-06-06 15:09:36 -Mapped "{[/sys/user/tree],methods=[GET]}" onto public com.bootdo.common.domain.Tree<com.bootdo.system.domain.DeptDO> com.bootdo.system.controller.UserController.tree()
2019-06-06 15:09:36 -Mapped "{[/sys/user/treeView],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.treeView()
2019-06-06 15:09:36 -Mapped "{[/sys/user/updatePeronal],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.updatePeronal(com.bootdo.system.domain.UserDO)
2019-06-06 15:09:36 -Mapped "{[/sys/user/resetPwd],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.resetPwd(com.bootdo.system.vo.UserVO)
2019-06-06 15:09:36 -Mapped "{[/sys/user/resetPwd/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.resetPwd(java.lang.Long,org.springframework.ui.Model)
2019-06-06 15:09:36 -Mapped "{[/sys/user/personal],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.personal(org.springframework.ui.Model)
2019-06-06 15:09:36 -Mapped "{[/sys/user/adminResetPwd],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.adminResetPwd(com.bootdo.system.vo.UserVO)
2019-06-06 15:09:36 -Mapped "{[/sys/user/uploadImg],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.uploadImg(org.springframework.web.multipart.MultipartFile,java.lang.String,javax.servlet.http.HttpServletRequest)
2019-06-06 15:09:36 -Mapped "{[/sys/user/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.edit(org.springframework.ui.Model,java.lang.Long)
2019-06-06 15:09:36 -Mapped "{[/sys/user],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.user(org.springframework.ui.Model)
2019-06-06 15:09:36 -Mapped "{[/file/downImport/{importType}],methods=[GET]}" onto public void com.bootdo.temple.controller.TempletController.downImport(javax.servlet.http.HttpServletResponse,java.lang.String)
2019-06-06 15:09:36 -Mapped "{[/water/water/add],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterController.add()
2019-06-06 15:09:36 -Mapped "{[/water/water/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterController.remove(java.lang.Long)
2019-06-06 15:09:36 -Mapped "{[/water/water/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterController.remove(java.lang.Long[])
2019-06-06 15:09:36 -Mapped "{[/water/water/update]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterController.update(com.bootdo.water.domain.WaterDO)
2019-06-06 15:09:36 -Mapped "{[/water/water/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.water.controller.WaterController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-06-06 15:09:36 -Mapped "{[/water/water/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterController.save(com.bootdo.water.domain.WaterDO)
2019-06-06 15:09:36 -Mapped "{[/water/water/exprotWater],methods=[GET]}" onto public void com.bootdo.water.controller.WaterController.exprotExcel(com.bootdo.water.vo.WaterVo,javax.servlet.http.HttpServletResponse)
2019-06-06 15:09:36 -Mapped "{[/water/water],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterController.Water()
2019-06-06 15:09:36 -Mapped "{[/water/water/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterController.edit(java.lang.Long,org.springframework.ui.Model)
2019-06-06 15:09:36 -Mapped "{[/water/waterInto/importWaterIntoExcel],methods=[POST]}" onto public java.lang.String com.bootdo.water.controller.WaterIntoController.importWaterIntoExcel(org.springframework.web.multipart.MultipartFile,com.bootdo.water.vo.WaterVo,javax.servlet.http.HttpServletResponse) throws java.lang.Exception
2019-06-06 15:09:36 -Mapped "{[/water/waterInto/exprotWaterIntoExcel],methods=[GET]}" onto public void com.bootdo.water.controller.WaterIntoController.exprotExcel(com.bootdo.water.vo.WaterVo,javax.servlet.http.HttpServletResponse)
2019-06-06 15:09:36 -Mapped "{[/water/waterInto],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterIntoController.WaterInto()
2019-06-06 15:09:36 -Mapped "{[/water/waterPrice/add],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterPriceController.add()
2019-06-06 15:09:36 -Mapped "{[/water/waterPrice/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterPriceController.remove(java.lang.Long)
2019-06-06 15:09:36 -Mapped "{[/water/waterPrice/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterPriceController.remove(java.lang.Long[])
2019-06-06 15:09:36 -Mapped "{[/water/waterPrice/update]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterPriceController.update(com.bootdo.water.domain.WaterPriceDO)
2019-06-06 15:09:36 -Mapped "{[/water/waterPrice/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.water.controller.WaterPriceController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-06-06 15:09:36 -Mapped "{[/water/waterPrice/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterPriceController.save(com.bootdo.water.domain.WaterPriceDO)
2019-06-06 15:09:36 -Mapped "{[/water/waterPrice],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterPriceController.WaterPrice()
2019-06-06 15:09:36 -Mapped "{[/water/waterPrice/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterPriceController.edit(java.lang.Long,org.springframework.ui.Model)
2019-06-06 15:09:36 -Mapped "{[/water/waterUpLoad/importWaterExcel]}" onto public java.lang.String com.bootdo.water.controller.WaterUpLoadController.importWaterExcel(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)
2019-06-06 15:09:36 -Mapped "{[/water/waterUpLoad/exprotWaterExcel],methods=[GET]}" onto public void com.bootdo.water.controller.WaterUpLoadController.exprotWaterExcel(com.bootdo.water.vo.WaterVo,javax.servlet.http.HttpServletResponse)
2019-06-06 15:09:36 -Mapped "{[/water/waterUpLoad],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterUpLoadController.WaterUpLoad()
2019-06-06 15:09:36 -Mapped "{[/water/waterUpLoad/createWaterExcel],methods=[POST]}" onto public java.lang.String com.bootdo.water.controller.WaterUpLoadController.createWaterExcel(com.bootdo.water.domain.WaterDO) throws java.lang.Exception
2019-06-06 15:09:36 -Mapped "{[/v2/api-docs],methods=[GET],produces=[application/json || application/hal+json]}" onto public org.springframework.http.ResponseEntity<springfox.documentation.spring.web.json.Json> springfox.documentation.swagger2.web.Swagger2Controller.getDocumentation(java.lang.String,javax.servlet.http.HttpServletRequest)
2019-06-06 15:09:36 -Mapped "{[/swagger-resources/configuration/security]}" onto org.springframework.http.ResponseEntity<springfox.documentation.swagger.web.SecurityConfiguration> springfox.documentation.swagger.web.ApiResourceController.securityConfiguration()
2019-06-06 15:09:36 -Mapped "{[/swagger-resources]}" onto org.springframework.http.ResponseEntity<java.util.List<springfox.documentation.swagger.web.SwaggerResource>> springfox.documentation.swagger.web.ApiResourceController.swaggerResources()
2019-06-06 15:09:36 -Mapped "{[/swagger-resources/configuration/ui]}" onto org.springframework.http.ResponseEntity<springfox.documentation.swagger.web.UiConfiguration> springfox.documentation.swagger.web.ApiResourceController.uiConfiguration()
2019-06-06 15:09:37 -Initializing ExecutorService  'messageBrokerTaskScheduler'
2019-06-06 15:09:37 -Mapped URL path [/endpointChat/**] onto handler of type [class org.springframework.web.socket.sockjs.support.SockJsHttpRequestHandler]
2019-06-06 15:09:37 -Initializing ExecutorService  'brokerChannelExecutor'
2019-06-06 15:09:38 -Mapped URL path [/**/favicon.ico] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-06-06 15:09:38 -Looking for @ControllerAdvice: org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@57eda880: startup date [Thu Jun 06 15:09:12 CST 2019]; root of context hierarchy
2019-06-06 15:09:39 -Mapped URL path [/webjars/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-06-06 15:09:39 -Mapped URL path [/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-06-06 15:09:39 -Detected @ExceptionHandler methods in BDExceptionHandler
2019-06-06 15:09:39 -[THYMELEAF][main] Template Mode 'LEGACYHTML5' is deprecated. Using Template Mode 'HTML' instead.
2019-06-06 15:09:42 -Registering beans for JMX exposure on startup
2019-06-06 15:09:42 -Bean with name 'dataSource' has been autodetected for JMX exposure
2019-06-06 15:09:42 -Located MBean 'dataSource': registering with JMX server as MBean [com.alibaba.druid.pool:name=dataSource,type=DruidDataSource]
2019-06-06 15:09:42 -Starting beans in phase 2147483647
2019-06-06 15:09:42 -Context refreshed
2019-06-06 15:09:42 -Found 1 custom documentation plugin(s)
2019-06-06 15:09:42 -Scanning for api listing references
2019-06-06 15:09:43 -Generating unique operation named: removeUsingPOST_1
2019-06-06 15:09:43 -Generating unique operation named: addUsingGET_1
2019-06-06 15:09:43 -Generating unique operation named: editUsingGET_1
2019-06-06 15:09:43 -Generating unique operation named: listUsingGET_1
2019-06-06 15:09:43 -Generating unique operation named: removeUsingPOST_2
2019-06-06 15:09:43 -Generating unique operation named: removeUsingPOST_3
2019-06-06 15:09:43 -Generating unique operation named: saveUsingPOST_1
2019-06-06 15:09:43 -Generating unique operation named: updateUsingGET_1
2019-06-06 15:09:43 -Generating unique operation named: updateUsingHEAD_1
2019-06-06 15:09:43 -Generating unique operation named: updateUsingPOST_1
2019-06-06 15:09:43 -Generating unique operation named: updateUsingPUT_1
2019-06-06 15:09:43 -Generating unique operation named: updateUsingPATCH_1
2019-06-06 15:09:43 -Generating unique operation named: updateUsingDELETE_1
2019-06-06 15:09:43 -Generating unique operation named: updateUsingOPTIONS_1
2019-06-06 15:09:43 -Generating unique operation named: updateUsingTRACE_1
2019-06-06 15:09:43 -Generating unique operation named: addUsingGET_2
2019-06-06 15:09:43 -Generating unique operation named: editUsingGET_2
2019-06-06 15:09:43 -Generating unique operation named: listUsingGET_2
2019-06-06 15:09:43 -Generating unique operation named: removeUsingPOST_4
2019-06-06 15:09:43 -Generating unique operation named: removeUsingPOST_5
2019-06-06 15:09:43 -Generating unique operation named: saveUsingPOST_2
2019-06-06 15:09:43 -Generating unique operation named: updateUsingPOST_2
2019-06-06 15:09:43 -Generating unique operation named: exprotExcelUsingGET_1
2019-06-06 15:09:43 -Generating unique operation named: addUsingGET_3
2019-06-06 15:09:43 -Generating unique operation named: editUsingGET_3
2019-06-06 15:09:43 -Generating unique operation named: listUsingGET_3
2019-06-06 15:09:43 -Generating unique operation named: removeUsingPOST_6
2019-06-06 15:09:43 -Generating unique operation named: removeUsingPOST_7
2019-06-06 15:09:43 -Generating unique operation named: saveUsingPOST_3
2019-06-06 15:09:43 -Generating unique operation named: updateUsingGET_2
2019-06-06 15:09:43 -Generating unique operation named: updateUsingHEAD_2
2019-06-06 15:09:43 -Generating unique operation named: updateUsingPOST_3
2019-06-06 15:09:43 -Generating unique operation named: updateUsingPUT_2
2019-06-06 15:09:43 -Generating unique operation named: updateUsingPATCH_2
2019-06-06 15:09:43 -Generating unique operation named: updateUsingDELETE_2
2019-06-06 15:09:43 -Generating unique operation named: updateUsingOPTIONS_2
2019-06-06 15:09:43 -Generating unique operation named: updateUsingTRACE_2
2019-06-06 15:09:43 -Generating unique operation named: addUsingGET_4
2019-06-06 15:09:43 -Generating unique operation named: editUsingGET_4
2019-06-06 15:09:43 -Generating unique operation named: listUsingGET_4
2019-06-06 15:09:43 -Generating unique operation named: removeUsingPOST_8
2019-06-06 15:09:43 -Generating unique operation named: removeUsingPOST_9
2019-06-06 15:09:43 -Generating unique operation named: saveUsingPOST_4
2019-06-06 15:09:43 -Generating unique operation named: updateUsingGET_3
2019-06-06 15:09:43 -Generating unique operation named: updateUsingHEAD_3
2019-06-06 15:09:43 -Generating unique operation named: updateUsingPOST_4
2019-06-06 15:09:43 -Generating unique operation named: updateUsingPUT_3
2019-06-06 15:09:43 -Generating unique operation named: updateUsingPATCH_3
2019-06-06 15:09:43 -Generating unique operation named: updateUsingDELETE_3
2019-06-06 15:09:43 -Generating unique operation named: updateUsingOPTIONS_3
2019-06-06 15:09:43 -Generating unique operation named: updateUsingTRACE_3
2019-06-06 15:09:43 -Generating unique operation named: ElecUsingGET_1
2019-06-06 15:09:43 -Generating unique operation named: addUsingGET_5
2019-06-06 15:09:43 -Generating unique operation named: editUsingGET_5
2019-06-06 15:09:43 -Generating unique operation named: listUsingGET_5
2019-06-06 15:09:43 -Generating unique operation named: removeUsingPOST_10
2019-06-06 15:09:43 -Generating unique operation named: removeUsingPOST_11
2019-06-06 15:09:43 -Generating unique operation named: saveUsingPOST_5
2019-06-06 15:09:43 -Generating unique operation named: updateUsingGET_4
2019-06-06 15:09:43 -Generating unique operation named: updateUsingHEAD_4
2019-06-06 15:09:43 -Generating unique operation named: updateUsingPOST_5
2019-06-06 15:09:43 -Generating unique operation named: updateUsingPUT_4
2019-06-06 15:09:43 -Generating unique operation named: updateUsingPATCH_4
2019-06-06 15:09:43 -Generating unique operation named: updateUsingDELETE_4
2019-06-06 15:09:43 -Generating unique operation named: updateUsingOPTIONS_4
2019-06-06 15:09:43 -Generating unique operation named: updateUsingTRACE_4
2019-06-06 15:09:43 -Generating unique operation named: editUsingGET_6
2019-06-06 15:09:43 -Generating unique operation named: listUsingGET_6
2019-06-06 15:09:43 -Generating unique operation named: updateUsingPOST_6
2019-06-06 15:09:44 -Generating unique operation named: addUsingGET_6
2019-06-06 15:09:44 -Generating unique operation named: editUsingGET_7
2019-06-06 15:09:44 -Generating unique operation named: exprotExcelUsingGET_2
2019-06-06 15:09:44 -Generating unique operation named: listUsingGET_7
2019-06-06 15:09:44 -Generating unique operation named: removeUsingPOST_12
2019-06-06 15:09:44 -Generating unique operation named: removeUsingPOST_13
2019-06-06 15:09:44 -Generating unique operation named: saveUsingPOST_6
2019-06-06 15:09:44 -Generating unique operation named: updateUsingGET_5
2019-06-06 15:09:44 -Generating unique operation named: updateUsingHEAD_5
2019-06-06 15:09:44 -Generating unique operation named: updateUsingPOST_7
2019-06-06 15:09:44 -Generating unique operation named: updateUsingPUT_5
2019-06-06 15:09:44 -Generating unique operation named: updateUsingPATCH_5
2019-06-06 15:09:44 -Generating unique operation named: updateUsingDELETE_5
2019-06-06 15:09:44 -Generating unique operation named: updateUsingOPTIONS_5
2019-06-06 15:09:44 -Generating unique operation named: updateUsingTRACE_5
2019-06-06 15:09:44 -Generating unique operation named: exprotExcelUsingGET_3
2019-06-06 15:09:44 -Generating unique operation named: addUsingGET_7
2019-06-06 15:09:44 -Generating unique operation named: editUsingGET_8
2019-06-06 15:09:44 -Generating unique operation named: listUsingGET_8
2019-06-06 15:09:44 -Generating unique operation named: removeUsingPOST_14
2019-06-06 15:09:44 -Generating unique operation named: removeUsingPOST_15
2019-06-06 15:09:44 -Generating unique operation named: saveUsingPOST_7
2019-06-06 15:09:44 -Generating unique operation named: updateUsingGET_6
2019-06-06 15:09:44 -Generating unique operation named: updateUsingHEAD_6
2019-06-06 15:09:44 -Generating unique operation named: updateUsingPOST_8
2019-06-06 15:09:44 -Generating unique operation named: updateUsingPUT_6
2019-06-06 15:09:44 -Generating unique operation named: updateUsingPATCH_6
2019-06-06 15:09:44 -Generating unique operation named: updateUsingDELETE_6
2019-06-06 15:09:44 -Generating unique operation named: updateUsingOPTIONS_6
2019-06-06 15:09:44 -Generating unique operation named: updateUsingTRACE_6
2019-06-06 15:09:44 -Generating unique operation named: addUsingGET_8
2019-06-06 15:09:44 -Generating unique operation named: editUsingGET_9
2019-06-06 15:09:44 -Generating unique operation named: listUsingGET_9
2019-06-06 15:09:44 -Generating unique operation named: removeUsingPOST_16
2019-06-06 15:09:44 -Generating unique operation named: removeUsingPOST_17
2019-06-06 15:09:44 -Generating unique operation named: saveUsingPOST_8
2019-06-06 15:09:44 -Generating unique operation named: updateUsingGET_7
2019-06-06 15:09:44 -Generating unique operation named: updateUsingHEAD_7
2019-06-06 15:09:44 -Generating unique operation named: updateUsingPOST_9
2019-06-06 15:09:44 -Generating unique operation named: updateUsingPUT_7
2019-06-06 15:09:44 -Generating unique operation named: updateUsingPATCH_7
2019-06-06 15:09:44 -Generating unique operation named: updateUsingDELETE_7
2019-06-06 15:09:44 -Generating unique operation named: updateUsingOPTIONS_7
2019-06-06 15:09:44 -Generating unique operation named: updateUsingTRACE_7
2019-06-06 15:09:44 -Generating unique operation named: addUsingGET_9
2019-06-06 15:09:44 -Generating unique operation named: editUsingGET_10
2019-06-06 15:09:44 -Generating unique operation named: infoUsingGET_1
2019-06-06 15:09:44 -Generating unique operation named: infoUsingHEAD_1
2019-06-06 15:09:44 -Generating unique operation named: infoUsingPOST_1
2019-06-06 15:09:44 -Generating unique operation named: infoUsingPUT_1
2019-06-06 15:09:44 -Generating unique operation named: infoUsingPATCH_1
2019-06-06 15:09:44 -Generating unique operation named: infoUsingDELETE_1
2019-06-06 15:09:44 -Generating unique operation named: infoUsingOPTIONS_1
2019-06-06 15:09:44 -Generating unique operation named: infoUsingTRACE_1
2019-06-06 15:09:44 -Generating unique operation named: listUsingGET_10
2019-06-06 15:09:44 -Generating unique operation named: removeUsingPOST_18
2019-06-06 15:09:44 -Generating unique operation named: removeUsingPOST_19
2019-06-06 15:09:44 -Generating unique operation named: saveUsingPOST_9
2019-06-06 15:09:44 -Generating unique operation named: updateUsingPOST_10
2019-06-06 15:09:44 -Generating unique operation named: listUsingGET_11
2019-06-06 15:09:44 -Generating unique operation named: removeUsingPOST_20
2019-06-06 15:09:44 -Generating unique operation named: welcomeUsingGET_1
2019-06-06 15:09:44 -Generating unique operation named: addUsingGET_10
2019-06-06 15:09:44 -Generating unique operation named: editUsingGET_11
2019-06-06 15:09:44 -Generating unique operation named: listUsingGET_12
2019-06-06 15:09:44 -Generating unique operation named: removeUsingPOST_21
2019-06-06 15:09:44 -Generating unique operation named: saveUsingPOST_10
2019-06-06 15:09:44 -Generating unique operation named: treeUsingGET_1
2019-06-06 15:09:44 -Generating unique operation named: treeUsingGET_2
2019-06-06 15:09:44 -Generating unique operation named: updateUsingPOST_11
2019-06-06 15:09:44 -Generating unique operation named: addUsingGET_11
2019-06-06 15:09:44 -Generating unique operation named: editUsingGET_12
2019-06-06 15:09:44 -Generating unique operation named: listUsingGET_13
2019-06-06 15:09:44 -Generating unique operation named: removeUsingPOST_22
2019-06-06 15:09:44 -Generating unique operation named: removeUsingPOST_23
2019-06-06 15:09:44 -Generating unique operation named: updateUsingPOST_12
2019-06-06 15:09:44 -Generating unique operation named: addUsingGET_12
2019-06-06 15:09:44 -Generating unique operation named: editUsingGET_13
2019-06-06 15:09:44 -Generating unique operation named: listUsingGET_14
2019-06-06 15:09:44 -Generating unique operation named: removeUsingPOST_24
2019-06-06 15:09:44 -Generating unique operation named: removeUsingPOST_25
2019-06-06 15:09:44 -Generating unique operation named: saveUsingPOST_11
2019-06-06 15:09:44 -Generating unique operation named: updateUsingGET_8
2019-06-06 15:09:44 -Generating unique operation named: updateUsingHEAD_8
2019-06-06 15:09:44 -Generating unique operation named: updateUsingPOST_13
2019-06-06 15:09:44 -Generating unique operation named: updateUsingPUT_8
2019-06-06 15:09:44 -Generating unique operation named: updateUsingPATCH_8
2019-06-06 15:09:44 -Generating unique operation named: updateUsingDELETE_8
2019-06-06 15:09:44 -Generating unique operation named: updateUsingOPTIONS_8
2019-06-06 15:09:44 -Generating unique operation named: updateUsingTRACE_8
2019-06-06 15:09:45 -Generating unique operation named: addUsingGET_13
2019-06-06 15:09:45 -Generating unique operation named: batchRemoveUsingPOST_1
2019-06-06 15:09:45 -Generating unique operation named: editUsingGET_14
2019-06-06 15:09:45 -Generating unique operation named: listUsingGET_15
2019-06-06 15:09:45 -Generating unique operation named: printEditUsingGET_1
2019-06-06 15:09:45 -Generating unique operation named: removeUsingPOST_26
2019-06-06 15:09:45 -Generating unique operation named: saveUsingPOST_12
2019-06-06 15:09:45 -Generating unique operation named: updateUsingGET_9
2019-06-06 15:09:45 -Generating unique operation named: updateUsingHEAD_9
2019-06-06 15:09:45 -Generating unique operation named: updateUsingPOST_14
2019-06-06 15:09:45 -Generating unique operation named: updateUsingPUT_9
2019-06-06 15:09:45 -Generating unique operation named: updateUsingPATCH_9
2019-06-06 15:09:45 -Generating unique operation named: updateUsingDELETE_9
2019-06-06 15:09:45 -Generating unique operation named: updateUsingOPTIONS_9
2019-06-06 15:09:45 -Generating unique operation named: updateUsingTRACE_9
2019-06-06 15:09:45 -Generating unique operation named: addUsingGET_14
2019-06-06 15:09:45 -Generating unique operation named: batchRemoveUsingPOST_2
2019-06-06 15:09:45 -Generating unique operation named: editUsingGET_15
2019-06-06 15:09:45 -Generating unique operation named: listUsingGET_16
2019-06-06 15:09:45 -Generating unique operation named: saveUsingPOST_13
2019-06-06 15:09:45 -Generating unique operation named: saveUsingPOST_14
2019-06-06 15:09:45 -Generating unique operation named: updateUsingPOST_15
2019-06-06 15:09:45 -Generating unique operation named: listUsingGET_17
2019-06-06 15:09:45 -Generating unique operation named: listUsingHEAD_1
2019-06-06 15:09:45 -Generating unique operation named: listUsingPOST_1
2019-06-06 15:09:45 -Generating unique operation named: listUsingPUT_1
2019-06-06 15:09:45 -Generating unique operation named: listUsingPATCH_1
2019-06-06 15:09:45 -Generating unique operation named: listUsingDELETE_1
2019-06-06 15:09:45 -Generating unique operation named: listUsingOPTIONS_1
2019-06-06 15:09:45 -Generating unique operation named: listUsingTRACE_1
2019-06-06 15:09:45 -Generating unique operation named: countDDUsingGET_1
2019-06-06 15:09:45 -Generating unique operation named: exportDDUsingGET_1
2019-06-06 15:09:45 -Generating unique operation named: exportElecYYUsingGET_1
2019-06-06 15:09:45 -Generating unique operation named: addUsingGET_15
2019-06-06 15:09:45 -Generating unique operation named: batchRemoveUsingPOST_3
2019-06-06 15:09:45 -Generating unique operation named: editUsingGET_16
2019-06-06 15:09:45 -Generating unique operation named: listUsingGET_18
2019-06-06 15:09:45 -Generating unique operation named: removeUsingPOST_27
2019-06-06 15:09:45 -Generating unique operation named: saveUsingPOST_15
2019-06-06 15:09:45 -Generating unique operation named: treeUsingGET_3
2019-06-06 15:09:45 -Generating unique operation named: treeViewUsingGET_1
2019-06-06 15:09:45 -Generating unique operation named: updateUsingPOST_16
2019-06-06 15:09:45 -Generating unique operation named: addUsingGET_16
2019-06-06 15:09:45 -Generating unique operation named: editUsingGET_17
2019-06-06 15:09:45 -Generating unique operation named: exprotExcelUsingGET_4
2019-06-06 15:09:45 -Generating unique operation named: listUsingGET_19
2019-06-06 15:09:45 -Generating unique operation named: removeUsingPOST_28
2019-06-06 15:09:45 -Generating unique operation named: removeUsingPOST_29
2019-06-06 15:09:45 -Generating unique operation named: saveUsingPOST_16
2019-06-06 15:09:45 -Generating unique operation named: updateUsingGET_10
2019-06-06 15:09:45 -Generating unique operation named: updateUsingHEAD_10
2019-06-06 15:09:45 -Generating unique operation named: updateUsingPOST_17
2019-06-06 15:09:45 -Generating unique operation named: updateUsingPUT_10
2019-06-06 15:09:45 -Generating unique operation named: updateUsingPATCH_10
2019-06-06 15:09:45 -Generating unique operation named: updateUsingDELETE_10
2019-06-06 15:09:45 -Generating unique operation named: updateUsingOPTIONS_10
2019-06-06 15:09:45 -Generating unique operation named: updateUsingTRACE_10
2019-06-06 15:09:45 -Generating unique operation named: exprotExcelUsingGET_5
2019-06-06 15:09:46 -Generating unique operation named: addUsingGET_17
2019-06-06 15:09:46 -Generating unique operation named: editUsingGET_18
2019-06-06 15:09:46 -Generating unique operation named: listUsingGET_20
2019-06-06 15:09:46 -Generating unique operation named: removeUsingPOST_30
2019-06-06 15:09:46 -Generating unique operation named: removeUsingPOST_31
2019-06-06 15:09:46 -Generating unique operation named: saveUsingPOST_17
2019-06-06 15:09:46 -Generating unique operation named: updateUsingGET_11
2019-06-06 15:09:46 -Generating unique operation named: updateUsingHEAD_11
2019-06-06 15:09:46 -Generating unique operation named: updateUsingPOST_18
2019-06-06 15:09:46 -Generating unique operation named: updateUsingPUT_11
2019-06-06 15:09:46 -Generating unique operation named: updateUsingPATCH_11
2019-06-06 15:09:46 -Generating unique operation named: updateUsingDELETE_11
2019-06-06 15:09:46 -Generating unique operation named: updateUsingOPTIONS_11
2019-06-06 15:09:46 -Generating unique operation named: updateUsingTRACE_11
2019-06-06 15:09:46 -Generating unique operation named: addUsingGET_18
2019-06-06 15:09:46 -Generating unique operation named: editUsingGET_19
2019-06-06 15:09:46 -Generating unique operation named: listUsingGET_21
2019-06-06 15:09:46 -Generating unique operation named: removeUsingPOST_32
2019-06-06 15:09:46 -Generating unique operation named: removeUsingPOST_33
2019-06-06 15:09:46 -Generating unique operation named: saveUsingPOST_18
2019-06-06 15:09:46 -Generating unique operation named: updateUsingGET_12
2019-06-06 15:09:46 -Generating unique operation named: updateUsingHEAD_12
2019-06-06 15:09:46 -Generating unique operation named: updateUsingPOST_19
2019-06-06 15:09:46 -Generating unique operation named: updateUsingPUT_12
2019-06-06 15:09:46 -Generating unique operation named: updateUsingPATCH_12
2019-06-06 15:09:46 -Generating unique operation named: updateUsingDELETE_12
2019-06-06 15:09:46 -Generating unique operation named: updateUsingOPTIONS_12
2019-06-06 15:09:46 -Generating unique operation named: updateUsingTRACE_12
2019-06-06 15:09:46 -Starting Quartz Scheduler now
2019-06-06 15:09:46 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED started.
2019-06-06 15:09:46 -Starting...
2019-06-06 15:09:46 -BrokerAvailabilityEvent[available=true, SimpleBrokerMessageHandler [DefaultSubscriptionRegistry[cache[0 destination(s)], registry[0 sessions]]]]
2019-06-06 15:09:46 -Started.
2019-06-06 15:09:46 -Starting ProtocolHandler ["http-nio-8081"]
2019-06-06 15:09:46 -Using a shared selector for servlet write/read
2019-06-06 15:09:46 -Tomcat started on port(s): 8081 (http) with context path ''
2019-06-06 15:09:46 -Started BootdoApplication in 37.151 seconds (JVM running for 38.618)
2019-06-06 15:09:47 -==>  Preparing: select `id`,`cron_expression`,`method_name`,`is_concurrent`,`description`,`update_by`,`bean_class`,`create_date`,`job_status`,`job_group`,`update_date`,`create_by`,`spring_bean`,`job_name` from sys_task order by id desc 
2019-06-06 15:09:47 -==> Parameters: 
2019-06-06 15:09:47 -<==      Total: 1
2019-06-06 15:09:53 -Initializing Spring FrameworkServlet 'dispatcherServlet'
2019-06-06 15:09:53 -FrameworkServlet 'dispatcherServlet': initialization started
2019-06-06 15:09:53 -FrameworkServlet 'dispatcherServlet': initialization completed in 65 ms
2019-06-06 15:09:53 -Enabling session validation scheduler...
2019-06-06 15:09:53 -请求地址 : http://localhost:8081/login;JSESSIONID=62b338b0-9b8a-4791-bc78-48939d034be3
2019-06-06 15:09:53 -HTTP METHOD : GET
2019-06-06 15:09:53 -CLASS_METHOD : com.bootdo.system.controller.LoginController.login
2019-06-06 15:09:53 -参数 : [{}]
2019-06-06 15:09:53 -耗时 : 4
2019-06-06 15:09:53 -返回值 : login
2019-06-06 15:09:55 -请求地址 : http://localhost:8081/getVerify
2019-06-06 15:09:55 -HTTP METHOD : GET
2019-06-06 15:09:55 -CLASS_METHOD : com.bootdo.system.controller.LoginController.getVerify
2019-06-06 15:09:55 -参数 : [org.apache.shiro.web.servlet.ShiroHttpServletRequest@422bde1a, org.apache.shiro.web.servlet.ShiroHttpServletResponse@729583b]
2019-06-06 15:09:59 -7119
2019-06-06 15:10:00 -耗时 : 4926
2019-06-06 15:10:00 -返回值 : null
2019-06-06 15:10:00 -请求地址 : http://localhost:8081/login
2019-06-06 15:10:00 -HTTP METHOD : GET
2019-06-06 15:10:00 -CLASS_METHOD : com.bootdo.system.controller.LoginController.login
2019-06-06 15:10:00 -参数 : [{}]
2019-06-06 15:10:00 -耗时 : 1
2019-06-06 15:10:00 -返回值 : login
2019-06-06 15:10:05 -请求地址 : http://localhost:8081/login
2019-06-06 15:10:05 -HTTP METHOD : POST
2019-06-06 15:10:05 -CLASS_METHOD : com.bootdo.system.controller.LoginController.ajaxLogin
2019-06-06 15:10:05 -参数 : [admin, 111111, 7119, org.apache.shiro.web.servlet.ShiroHttpServletRequest@7fcbdf2c]
2019-06-06 15:10:05 -==>  Preparing: select `user_id`,`username`,`name`,`password`,`dept_id`,`email`,`mobile`,`status`,`user_id_create`,`gmt_create`,`gmt_modified`,`sex`,`birth`,`pic_id`,`live_address`,`hobby`,`province`,`city`,`district` from sys_user WHERE username = ? order by user_id desc 
2019-06-06 15:10:05 -==> Parameters: admin(String)
2019-06-06 15:10:06 -<==      Total: 1
2019-06-06 15:10:06 -耗时 : 861
2019-06-06 15:10:06 -返回值 : {msg=操作成功, code=0}
2019-06-06 15:10:06 -More than one TaskExecutor bean found within the context, and none is named 'taskExecutor'. Mark one of them as primary or name it 'taskExecutor' (possibly as an alias) in order to use it for async processing: [clientInboundChannelExecutor, clientOutboundChannelExecutor, brokerChannelExecutor, messageBrokerTaskScheduler]
2019-06-06 15:10:06 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-06-06 15:10:06 -==> Parameters: 1(Long), admin(String), 登录(String), 861(Integer), com.bootdo.system.controller.LoginController.ajaxLogin()(String), null, 127.0.0.1(String), 2019-06-06 15:10:06.653(Timestamp)
2019-06-06 15:10:07 -请求地址 : http://localhost:8081/index
2019-06-06 15:10:07 -HTTP METHOD : GET
2019-06-06 15:10:07 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2019-06-06 15:10:07 -参数 : [{}]
2019-06-06 15:10:08 -<==    Updates: 1
2019-06-06 15:10:08 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2019-06-06 15:10:08 -==> Parameters: 1(Long)
2019-06-06 15:10:08 -<==      Total: 50
2019-06-06 15:10:08 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2019-06-06 15:10:08 -==> Parameters: 138(Long)
2019-06-06 15:10:08 -<==      Total: 1
2019-06-06 15:10:08 -耗时 : 1112
2019-06-06 15:10:08 -返回值 : index_v1
2019-06-06 15:10:08 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-06-06 15:10:08 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 1112(Integer), com.bootdo.system.controller.LoginController.index()(String), {"menus":[{"attributes":{"icon":"fa fa-money","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-money","url":"/moneyList/moneyList"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"102","parentId":"106","text":"现金缴费"},{"attributes":{"icon":"fa fa-book","url":"/moneyLog/elecLog"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"107","parentId":"106","text":"缴费记录"},{"attributes":{"icon":"fa fa-image","url":"/moneyList/moneyWZ"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"164","parentId":"106","text":"乌镇管理"}],"hasChildren":true,"hasParent":false,"id":"106","parentId":"0","text":"收费管理"},{"attributes":{"icon":"fa fa-lightbulb-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/elec/elec"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"121","parentId":"103","text":"电费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"elec/elecInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"122","parentId":"103","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"elec/elecUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"123","parentId":"103","text":"电表上传"},{"attributes":{"icon":"fa fa-cc","url":"/elec/elecPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"124","parentId":"103","text":"电价管理"}],"hasChildren":true,"hasParent":false,"id":"103","parentId":"0","text":"电费管理"},{"attributes":{"icon":"fa fa-tint","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/water/water"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"117","parentId":"105","text":"水费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"water/waterInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"118","parentId":"105","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"water/waterUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"119","parentId":"105","text":"水费生成"},{"attributes":{"icon":"fa fa-cc","url":"/water/waterPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"120","parentId":"105","text":"水价管理"}],"hasChildren":true,"hasParent":false,"id":"105","parentId":"0","text":"水费管理"},{"attributes":{"icon":"fa fa-fire","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/heat/heat"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"113","parentId":"104","text":"暖费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"heat/heatInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"114","parentId":"104","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"heat/heatUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"115","parentId":"104","text":"暖费生成"},{"attributes":{"icon":"","url":"/heat/heatPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"116","parentId":"104","text":"暖价管理"}],"hasChildren":true,"hasParent":false,"id":"104","parentId":"0","text":"暖费管理"},{"attributes":{"icon":"fa fa-vcard-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-bomb","url":"/print/print"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"149","parentId":"108","text":"票据记录"}],"hasChildren":true,"hasParent":false,"id":"108","parentId":"0","text":"票据管理"},{"attributes":{"icon":"fa fa-bar-chart","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-area-chart","url":"/chart/graph_echarts.html"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","text":"百度chart"},{"attributes":{"icon":"fa fa-sun-o","url":"charts/countDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"109","parentId":"97","text":"日统计报表"},{"attributes":{"icon":"fa fa-calendar","url":"charts/tableDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"161","parentId":"97","text":"日统计表格"},{"attributes":{"icon":"fa fa-registered","url":"charts/countMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"110","parentId":"97","text":"月统计报表"},{"attributes":{"icon":"fa fa-building-o","url":"charts/tableElecMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"162","parentId":"97","text":"月统计表格"},{"attributes":{"icon":"fa fa-support","url":"charts/countYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"111","parentId":"97","text":"年统计报表"},{"attributes":{"icon":"fa fa-book","url":"charts/tableElecYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"163","parentId":"97","text":"年统计表格"},{"attributes":{"icon":"fa fa-money","url":"charts/countOwe"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"155","(String), 127.0.0.1(String), 2019-06-06 15:10:08.748(Timestamp)
2019-06-06 15:10:09 -<==    Updates: 1
2019-06-06 15:10:09 -请求地址 : http://localhost:8081/main
2019-06-06 15:10:09 -HTTP METHOD : GET
2019-06-06 15:10:09 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-06-06 15:10:09 -参数 : []
2019-06-06 15:10:09 -耗时 : 0
2019-06-06 15:10:09 -返回值 : main
2019-06-06 15:10:09 -请求地址 : http://localhost:8081/oa/notify/message
2019-06-06 15:10:09 -HTTP METHOD : GET
2019-06-06 15:10:09 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2019-06-06 15:10:09 -参数 : []
2019-06-06 15:10:09 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2019-06-06 15:10:09 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2019-06-06 15:10:09 -请求地址 : http://localhost:8081/main
2019-06-06 15:10:09 -HTTP METHOD : GET
2019-06-06 15:10:09 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-06-06 15:10:09 -参数 : []
2019-06-06 15:10:09 -耗时 : 0
2019-06-06 15:10:09 -返回值 : main
2019-06-06 15:10:09 -<==      Total: 0
2019-06-06 15:10:09 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2019-06-06 15:10:09 -==> Parameters: 1(Long), 0(String)
2019-06-06 15:10:09 -<==      Total: 1
2019-06-06 15:10:09 -耗时 : 161
2019-06-06 15:10:09 -返回值 : com.bootdo.common.utils.PageUtils@5ad0fa4f
2019-06-06 15:10:12 -==>  Preparing: select distinct m.perms from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id = ur.role_id where ur.user_id = ? 
2019-06-06 15:10:12 -==> Parameters: 1(Long)
2019-06-06 15:10:12 -<==      Total: 94
2019-06-06 15:10:12 -请求地址 : http://localhost:8081/moneyList/moneyList
2019-06-06 15:10:12 -HTTP METHOD : GET
2019-06-06 15:10:12 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.MoneyList
2019-06-06 15:10:12 -参数 : []
2019-06-06 15:10:12 -耗时 : 0
2019-06-06 15:10:12 -返回值 : moneyList/moneyList
2019-06-06 15:10:16 -请求地址 : http://localhost:8081/system/sysDept/treeView
2019-06-06 15:10:16 -HTTP METHOD : GET
2019-06-06 15:10:16 -CLASS_METHOD : com.bootdo.system.controller.DeptController.treeView
2019-06-06 15:10:16 -参数 : []
2019-06-06 15:10:16 -耗时 : 1
2019-06-06 15:10:16 -返回值 : system/dept/deptTree
2019-06-06 15:10:17 -请求地址 : http://localhost:8081/system/sysDept/tree
2019-06-06 15:10:17 -HTTP METHOD : GET
2019-06-06 15:10:17 -CLASS_METHOD : com.bootdo.system.controller.DeptController.tree
2019-06-06 15:10:17 -参数 : []
2019-06-06 15:10:17 -==>  Preparing: select `dept_id`,`parent_id`,`name`,`order_num`,`del_flag` from sys_dept order by dept_id desc 
2019-06-06 15:10:17 -==> Parameters: 
2019-06-06 15:10:17 -<==      Total: 3
2019-06-06 15:10:17 -耗时 : 28
2019-06-06 15:10:17 -返回值 : {"checked":false,"children":[{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"3","parentId":"1","state":{"opened":true},"text":"牙星"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"2","parentId":"1","state":{"opened":true},"text":"五九"}],"hasChildren":true,"hasParent":false,"id":"1","parentId":"0","state":{"opened":true},"text":"总公司"}
2019-06-06 15:10:19 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUser
2019-06-06 15:10:19 -HTTP METHOD : POST
2019-06-06 15:10:19 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.queryAllUser
2019-06-06 15:10:19 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@7c7fe737]
2019-06-06 15:10:19 -==>  Preparing: select COUNT(*) number, user_id, user_name, user_type, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, elec_type as moneyType, elec_price as userPrice, elec_amount as userArea, elec_cost as userCost, elec_Sum as userSum from ELEC WHERE create_time = ? and user_org = ? and user_Id = ? and user_type != 'B' UNION ALL select COUNT(*) number, user_id, user_name, user_type, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, heat_type as moneyType, heat_price as userPrice, heat_area as userArea, heat_cost as userCost, heat_Sum as userSum from heat WHERE create_time = ? and user_org = ? and user_Id = ? and user_type != 'B' UNION ALL select COUNT(*) number, user_id, user_name, user_type, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, water_type as moneyType, water_price as userPrice, water_price as userArea, water_price as userCost, water_Sum as userSum from water WHERE create_time = ? and user_org = ? and user_Id = ? and user_type != 'B' 
2019-06-06 15:10:19 -==> Parameters: 2019-05(String), 2(String), 1-0001(String), 2019-05(String), 2(String), 1-0001(String), 2019-05(String), 2(String), 1-0001(String)
2019-06-06 15:10:19 -<==      Total: 3
2019-06-06 15:10:19 -耗时 : 224
2019-06-06 15:10:19 -返回值 : [com.bootdo.moneyList.damain.MoneyListDO@9b4535c, com.bootdo.moneyList.damain.MoneyListDO@3b83feb5, com.bootdo.moneyList.damain.MoneyListDO@77af28f1]
2019-06-06 15:10:22 -请求地址 : http://localhost:8081/moneyList/moneyList/updateMoney
2019-06-06 15:10:22 -HTTP METHOD : POST
2019-06-06 15:10:22 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.updateMoney
2019-06-06 15:10:22 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@67a93de1]
2019-06-06 15:10:22 -==>  Preparing: select COUNT(*) number, user_id, user_name, user_type, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, elec_type as moneyType, elec_price as userPrice, elec_amount as userArea, elec_cost as userCost, elec_Sum as userSum from ELEC WHERE create_time = ? and user_org = ? and user_Id = ? and user_type != 'B' UNION ALL select COUNT(*) number, user_id, user_name, user_type, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, heat_type as moneyType, heat_price as userPrice, heat_area as userArea, heat_cost as userCost, heat_Sum as userSum from heat WHERE create_time = ? and user_org = ? and user_Id = ? and user_type != 'B' UNION ALL select COUNT(*) number, user_id, user_name, user_type, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, water_type as moneyType, water_price as userPrice, water_price as userArea, water_price as userCost, water_Sum as userSum from water WHERE create_time = ? and user_org = ? and user_Id = ? and user_type != 'B' 
2019-06-06 15:10:22 -==> Parameters: 2019-05(String), 2(String), 1-0001(String), 2019-05(String), 2(String), 1-0001(String), 2019-05(String), 2(String), 1-0001(String)
2019-06-06 15:10:22 -<==      Total: 3
2019-06-06 15:10:22 -==>  Preparing: select el.start,el.end,el.hu,el.elec_amount,el.elec_cost,el.elec_price,el.elec_sum from elec el WHERE el.user_Id = ? and el.create_time = ? and el.user_org = ? and user_type != 'B' 
2019-06-06 15:10:22 -==> Parameters: 1-0001(String), 2019-05(String), 2(String)
2019-06-06 15:10:22 -<==      Total: 1
2019-06-06 15:10:37 -WebSocketSession[1 current WS(0)-HttpStream(1)-HttpPoll(0), 2 total, 0 closed abnormally (0 connect failure, 0 send limit, 3 transport error)], stompSubProtocol[processed CONNECT(1)-CONNECTED(1)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 8, active threads = 0, queued tasks = 0, completed tasks = 12], outboundChannelpool size = 2, active threads = 0, queued tasks = 0, completed tasks = 2], sockJsScheduler[pool size = 4, active threads = 1, queued tasks = 2, completed tasks = 6]
2019-06-06 15:10:59 -==>  Preparing: select he.heat_area, he.heat_cost, he.heat_price, he.heat_sum from heat he WHERE he.user_Id = ? and he.create_time = ? and he.user_org = ? and user_type != 'B' 
2019-06-06 15:10:59 -==> Parameters: 1-0001(String), 2019-05(String), 2(String)
2019-06-06 15:10:59 -<==      Total: 1
2019-06-06 15:10:59 -==>  Preparing: select wa.water_price,wa.water_cost,wa.water_sum from water wa WHERE wa.user_Id = ? and wa.create_time = ? and wa.user_org = ? and user_type != 'B' 
2019-06-06 15:10:59 -==> Parameters: 1-0001(String), 2019-05(String), 2(String)
2019-06-06 15:10:59 -<==      Total: 1
2019-06-06 15:10:59 -==>  Preparing: update ELEC set elec_sum = elec_sum + ?,user_type=? WHERE create_time = ? and user_org = ? and user_Id = ? and user_type != 'B' 
2019-06-06 15:10:59 -==> Parameters: 1(String), A(String), 2019-05(String), 2(String), 1-0001(String)
2019-06-06 15:10:59 -<==    Updates: 1
2019-06-06 15:10:59 -==>  Preparing: insert into elec_log ( `user_id`, `user_name`, `user_type`, `user_org`, `elec_type`, `elec_money`, `elec_date`, `create_time`, `create_by`, `update_time`, `update_by`, `remark` ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-06-06 15:10:59 -==> Parameters: 1-0001(String), 李文英(String), A(String), 2(String), 1(String), 1(BigDecimal), 2019-06-06 15:10:22.984(Timestamp), 2019-05(String), admin(String), 2019-06-06 15:10:22.984(Timestamp), admin(String), null
2019-06-06 15:10:59 -<==    Updates: 1
2019-06-06 15:10:59 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`start`,`end`,`hu`,`elec_price`,`elec_amount`,`elec_cost`,`elec_sum`,`elec_money`,`heat_price`,`heat_area`,`heat_cost`,`heat_sum`,`heat_money`,`water_price`,`water_cost`,`water_sum`,`water_money`,`print_date`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from print where user_id = ? and user_org = ? and create_time = ? 
2019-06-06 15:10:59 -==> Parameters: 1-0001(String), 2(String), 2019-05(String)
2019-06-06 15:10:59 -<==      Total: 1
2019-06-06 15:10:59 -==>  Preparing: update print SET `user_name` = ?, `start` = ?, `end` = ?, `hu` = ?, `elec_price` = ?, `elec_amount` = ?, `elec_cost` = ?, `elec_sum` = ?, `elec_money` = ? where id = ? 
2019-06-06 15:10:59 -==> Parameters: 李文英(String), 10300(Integer), 10370(Integer), 1(Integer), 0.465(BigDecimal), 70.00(BigDecimal), 32.55(BigDecimal), -7.02(BigDecimal), 1(BigDecimal), 97(Long)
2019-06-06 15:10:59 -<==    Updates: 1
2019-06-06 15:10:59 -耗时 : 36919
2019-06-06 15:10:59 -返回值 : 97
2019-06-06 15:11:01 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUser
2019-06-06 15:11:01 -HTTP METHOD : POST
2019-06-06 15:11:01 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.queryAllUser
2019-06-06 15:11:01 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@637a5589]
2019-06-06 15:11:01 -==>  Preparing: select COUNT(*) number, user_id, user_name, user_type, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, elec_type as moneyType, elec_price as userPrice, elec_amount as userArea, elec_cost as userCost, elec_Sum as userSum from ELEC WHERE create_time = ? and user_org = ? and user_Id = ? and user_type != 'B' UNION ALL select COUNT(*) number, user_id, user_name, user_type, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, heat_type as moneyType, heat_price as userPrice, heat_area as userArea, heat_cost as userCost, heat_Sum as userSum from heat WHERE create_time = ? and user_org = ? and user_Id = ? and user_type != 'B' UNION ALL select COUNT(*) number, user_id, user_name, user_type, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, water_type as moneyType, water_price as userPrice, water_price as userArea, water_price as userCost, water_Sum as userSum from water WHERE create_time = ? and user_org = ? and user_Id = ? and user_type != 'B' 
2019-06-06 15:11:01 -==> Parameters: 2019-05(String), 2(String), 1-0001(String), 2019-05(String), 2(String), 1-0001(String), 2019-05(String), 2(String), 1-0001(String)
2019-06-06 15:11:01 -<==      Total: 3
2019-06-06 15:11:01 -耗时 : 20
2019-06-06 15:11:01 -返回值 : [com.bootdo.moneyList.damain.MoneyListDO@65b31c05, com.bootdo.moneyList.damain.MoneyListDO@39d257df, com.bootdo.moneyList.damain.MoneyListDO@8358b71]
2019-06-06 15:14:42 -请求地址 : http://localhost:8081/index
2019-06-06 15:14:42 -HTTP METHOD : GET
2019-06-06 15:14:42 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2019-06-06 15:14:42 -参数 : [{}]
2019-06-06 15:14:42 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2019-06-06 15:14:42 -==> Parameters: 1(Long)
2019-06-06 15:14:42 -<==      Total: 50
2019-06-06 15:14:42 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2019-06-06 15:14:42 -==> Parameters: 138(Long)
2019-06-06 15:14:42 -<==      Total: 1
2019-06-06 15:14:42 -耗时 : 93
2019-06-06 15:14:42 -返回值 : index_v1
2019-06-06 15:14:42 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-06-06 15:14:42 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 93(Integer), com.bootdo.system.controller.LoginController.index()(String), {"menus":[{"attributes":{"icon":"fa fa-money","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-money","url":"/moneyList/moneyList"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"102","parentId":"106","text":"现金缴费"},{"attributes":{"icon":"fa fa-book","url":"/moneyLog/elecLog"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"107","parentId":"106","text":"缴费记录"},{"attributes":{"icon":"fa fa-image","url":"/moneyList/moneyWZ"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"164","parentId":"106","text":"乌镇管理"}],"hasChildren":true,"hasParent":false,"id":"106","parentId":"0","text":"收费管理"},{"attributes":{"icon":"fa fa-lightbulb-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/elec/elec"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"121","parentId":"103","text":"电费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"elec/elecInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"122","parentId":"103","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"elec/elecUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"123","parentId":"103","text":"电表上传"},{"attributes":{"icon":"fa fa-cc","url":"/elec/elecPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"124","parentId":"103","text":"电价管理"}],"hasChildren":true,"hasParent":false,"id":"103","parentId":"0","text":"电费管理"},{"attributes":{"icon":"fa fa-tint","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/water/water"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"117","parentId":"105","text":"水费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"water/waterInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"118","parentId":"105","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"water/waterUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"119","parentId":"105","text":"水费生成"},{"attributes":{"icon":"fa fa-cc","url":"/water/waterPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"120","parentId":"105","text":"水价管理"}],"hasChildren":true,"hasParent":false,"id":"105","parentId":"0","text":"水费管理"},{"attributes":{"icon":"fa fa-fire","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/heat/heat"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"113","parentId":"104","text":"暖费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"heat/heatInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"114","parentId":"104","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"heat/heatUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"115","parentId":"104","text":"暖费生成"},{"attributes":{"icon":"","url":"/heat/heatPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"116","parentId":"104","text":"暖价管理"}],"hasChildren":true,"hasParent":false,"id":"104","parentId":"0","text":"暖费管理"},{"attributes":{"icon":"fa fa-vcard-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-bomb","url":"/print/print"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"149","parentId":"108","text":"票据记录"}],"hasChildren":true,"hasParent":false,"id":"108","parentId":"0","text":"票据管理"},{"attributes":{"icon":"fa fa-bar-chart","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-area-chart","url":"/chart/graph_echarts.html"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","text":"百度chart"},{"attributes":{"icon":"fa fa-sun-o","url":"charts/countDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"109","parentId":"97","text":"日统计报表"},{"attributes":{"icon":"fa fa-calendar","url":"charts/tableDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"161","parentId":"97","text":"日统计表格"},{"attributes":{"icon":"fa fa-registered","url":"charts/countMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"110","parentId":"97","text":"月统计报表"},{"attributes":{"icon":"fa fa-building-o","url":"charts/tableElecMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"162","parentId":"97","text":"月统计表格"},{"attributes":{"icon":"fa fa-support","url":"charts/countYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"111","parentId":"97","text":"年统计报表"},{"attributes":{"icon":"fa fa-book","url":"charts/tableElecYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"163","parentId":"97","text":"年统计表格"},{"attributes":{"icon":"fa fa-money","url":"charts/countOwe"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"155","(String), 127.0.0.1(String), 2019-06-06 15:14:42.667(Timestamp)
2019-06-06 15:14:42 -<==    Updates: 1
2019-06-06 15:14:42 -请求地址 : http://localhost:8081/main
2019-06-06 15:14:42 -HTTP METHOD : GET
2019-06-06 15:14:42 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-06-06 15:14:42 -参数 : []
2019-06-06 15:14:42 -耗时 : 0
2019-06-06 15:14:42 -返回值 : main
2019-06-06 15:14:43 -请求地址 : http://localhost:8081/oa/notify/message
2019-06-06 15:14:43 -HTTP METHOD : GET
2019-06-06 15:14:43 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2019-06-06 15:14:43 -参数 : []
2019-06-06 15:14:43 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2019-06-06 15:14:43 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2019-06-06 15:14:43 -请求地址 : http://localhost:8081/main
2019-06-06 15:14:43 -HTTP METHOD : GET
2019-06-06 15:14:43 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-06-06 15:14:43 -参数 : []
2019-06-06 15:14:43 -耗时 : 0
2019-06-06 15:14:43 -返回值 : main
2019-06-06 15:14:43 -<==      Total: 0
2019-06-06 15:14:43 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2019-06-06 15:14:43 -==> Parameters: 1(Long), 0(String)
2019-06-06 15:14:43 -<==      Total: 1
2019-06-06 15:14:43 -耗时 : 174
2019-06-06 15:14:43 -返回值 : com.bootdo.common.utils.PageUtils@296ad7c8
2019-06-06 15:14:45 -请求地址 : http://localhost:8081/moneyList/moneyList
2019-06-06 15:14:45 -HTTP METHOD : GET
2019-06-06 15:14:45 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.MoneyList
2019-06-06 15:14:45 -参数 : []
2019-06-06 15:14:45 -耗时 : 0
2019-06-06 15:14:45 -返回值 : moneyList/moneyList
2019-06-06 15:14:50 -请求地址 : http://localhost:8081/system/sysDept/treeView
2019-06-06 15:14:50 -HTTP METHOD : GET
2019-06-06 15:14:50 -CLASS_METHOD : com.bootdo.system.controller.DeptController.treeView
2019-06-06 15:14:50 -参数 : []
2019-06-06 15:14:50 -耗时 : 2
2019-06-06 15:14:50 -返回值 : system/dept/deptTree
2019-06-06 15:14:50 -请求地址 : http://localhost:8081/system/sysDept/tree
2019-06-06 15:14:50 -HTTP METHOD : GET
2019-06-06 15:14:50 -CLASS_METHOD : com.bootdo.system.controller.DeptController.tree
2019-06-06 15:14:50 -参数 : []
2019-06-06 15:14:50 -==>  Preparing: select `dept_id`,`parent_id`,`name`,`order_num`,`del_flag` from sys_dept order by dept_id desc 
2019-06-06 15:14:50 -==> Parameters: 
2019-06-06 15:14:50 -<==      Total: 3
2019-06-06 15:14:50 -耗时 : 4
2019-06-06 15:14:50 -返回值 : {"checked":false,"children":[{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"3","parentId":"1","state":{"opened":true},"text":"牙星"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"2","parentId":"1","state":{"opened":true},"text":"五九"}],"hasChildren":true,"hasParent":false,"id":"1","parentId":"0","state":{"opened":true},"text":"总公司"}
2019-06-06 15:14:57 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUser
2019-06-06 15:14:57 -HTTP METHOD : POST
2019-06-06 15:14:57 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.queryAllUser
2019-06-06 15:14:57 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@6eac5e9f]
2019-06-06 15:14:57 -==>  Preparing: select COUNT(*) number, user_id, user_name, user_type, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, elec_type as moneyType, elec_price as userPrice, elec_amount as userArea, elec_cost as userCost, elec_Sum as userSum from ELEC WHERE create_time = ? and user_org = ? and user_Id = ? and user_type != 'B' UNION ALL select COUNT(*) number, user_id, user_name, user_type, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, heat_type as moneyType, heat_price as userPrice, heat_area as userArea, heat_cost as userCost, heat_Sum as userSum from heat WHERE create_time = ? and user_org = ? and user_Id = ? and user_type != 'B' UNION ALL select COUNT(*) number, user_id, user_name, user_type, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, water_type as moneyType, water_price as userPrice, water_price as userArea, water_price as userCost, water_Sum as userSum from water WHERE create_time = ? and user_org = ? and user_Id = ? and user_type != 'B' 
2019-06-06 15:14:57 -==> Parameters: 2019-05(String), 2(String), 1-0001(String), 2019-05(String), 2(String), 1-0001(String), 2019-05(String), 2(String), 1-0001(String)
2019-06-06 15:14:57 -<==      Total: 3
2019-06-06 15:14:57 -耗时 : 19
2019-06-06 15:14:57 -返回值 : [com.bootdo.moneyList.damain.MoneyListDO@d04a336, com.bootdo.moneyList.damain.MoneyListDO@32dec56a, com.bootdo.moneyList.damain.MoneyListDO@3e0a3d08]
2019-06-06 15:15:00 -请求地址 : http://localhost:8081/moneyList/moneyList/updateMoney
2019-06-06 15:15:00 -HTTP METHOD : POST
2019-06-06 15:15:00 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.updateMoney
2019-06-06 15:15:00 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@50c4953a]
2019-06-06 15:15:00 -==>  Preparing: select COUNT(*) number, user_id, user_name, user_type, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, elec_type as moneyType, elec_price as userPrice, elec_amount as userArea, elec_cost as userCost, elec_Sum as userSum from ELEC WHERE create_time = ? and user_org = ? and user_Id = ? and user_type != 'B' UNION ALL select COUNT(*) number, user_id, user_name, user_type, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, heat_type as moneyType, heat_price as userPrice, heat_area as userArea, heat_cost as userCost, heat_Sum as userSum from heat WHERE create_time = ? and user_org = ? and user_Id = ? and user_type != 'B' UNION ALL select COUNT(*) number, user_id, user_name, user_type, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, water_type as moneyType, water_price as userPrice, water_price as userArea, water_price as userCost, water_Sum as userSum from water WHERE create_time = ? and user_org = ? and user_Id = ? and user_type != 'B' 
2019-06-06 15:15:00 -==> Parameters: 2019-05(String), 2(String), 1-0001(String), 2019-05(String), 2(String), 1-0001(String), 2019-05(String), 2(String), 1-0001(String)
2019-06-06 15:15:00 -<==      Total: 3
2019-06-06 15:15:00 -==>  Preparing: select el.start,el.end,el.hu,el.elec_amount,el.elec_cost,el.elec_price,el.elec_sum from elec el WHERE el.user_Id = ? and el.create_time = ? and el.user_org = ? and user_type != 'B' 
2019-06-06 15:15:00 -==> Parameters: 1-0001(String), 2019-05(String), 2(String)
2019-06-06 15:15:00 -<==      Total: 1
2019-06-06 15:15:14 -Failed to invoke @ExceptionHandler method: public java.lang.Object com.bootdo.common.exception.BDExceptionHandler.handleException(java.lang.Exception,javax.servlet.http.HttpServletRequest)
org.apache.shiro.UnavailableSecurityManagerException: No SecurityManager accessible to the calling code, either bound to the org.apache.shiro.util.ThreadContext or as a vm static singleton.  This is an invalid application configuration.
	at org.apache.shiro.SecurityUtils.getSecurityManager(SecurityUtils.java:123)
	at org.apache.shiro.subject.Subject$Builder.<init>(Subject.java:627)
	at org.apache.shiro.SecurityUtils.getSubject(SecurityUtils.java:56)
	at com.bootdo.common.utils.ShiroUtils.getSubjct(ShiroUtils.java:20)
	at com.bootdo.common.utils.ShiroUtils.getUser(ShiroUtils.java:23)
	at com.bootdo.common.exception.BDExceptionHandler.handleException(BDExceptionHandler.java:73)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:209)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver.doResolveHandlerMethodException(ExceptionHandlerExceptionResolver.java:404)
	at org.springframework.web.servlet.handler.AbstractHandlerMethodExceptionResolver.doResolveException(AbstractHandlerMethodExceptionResolver.java:61)
	at org.springframework.web.servlet.handler.AbstractHandlerExceptionResolver.resolveException(AbstractHandlerExceptionResolver.java:139)
	at org.springframework.web.servlet.handler.HandlerExceptionResolverComposite.resolveException(HandlerExceptionResolverComposite.java:78)
	at org.springframework.web.servlet.DispatcherServlet.processHandlerException(DispatcherServlet.java:1255)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1062)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1008)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:925)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:974)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:877)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:661)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:851)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:728)
	at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:591)
	at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:527)
	at org.apache.catalina.core.StandardHostValve.custom(StandardHostValve.java:389)
	at org.apache.catalina.core.StandardHostValve.status(StandardHostValve.java:254)
	at org.apache.catalina.core.StandardHostValve.throwable(StandardHostValve.java:349)
	at org.apache.catalina.core.AsyncContextImpl.setErrorState(AsyncContextImpl.java:424)
	at org.apache.catalina.connector.CoyoteAdapter.asyncDispatch(CoyoteAdapter.java:176)
	at org.apache.coyote.AbstractProcessor.dispatch(AbstractProcessor.java:232)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:53)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:790)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1468)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:745)
2019-06-06 15:15:58 -==>  Preparing: select he.heat_area, he.heat_cost, he.heat_price, he.heat_sum from heat he WHERE he.user_Id = ? and he.create_time = ? and he.user_org = ? and user_type != 'B' 
2019-06-06 15:15:58 -==> Parameters: 1-0001(String), 2019-05(String), 2(String)
2019-06-06 15:15:58 -<==      Total: 1
2019-06-06 15:16:01 -==>  Preparing: select wa.water_price,wa.water_cost,wa.water_sum from water wa WHERE wa.user_Id = ? and wa.create_time = ? and wa.user_org = ? and user_type != 'B' 
2019-06-06 15:16:01 -==> Parameters: 1-0001(String), 2019-05(String), 2(String)
2019-06-06 15:16:01 -<==      Total: 1
2019-06-06 15:16:02 -==>  Preparing: update ELEC set elec_sum = elec_sum + ?,user_type=? WHERE create_time = ? and user_org = ? and user_Id = ? and user_type != 'B' 
2019-06-06 15:16:02 -==> Parameters: 1(String), A(String), 2019-05(String), 2(String), 1-0001(String)
2019-06-06 15:16:02 -<==    Updates: 1
2019-06-06 15:16:02 -==>  Preparing: insert into elec_log ( `user_id`, `user_name`, `user_type`, `user_org`, `elec_type`, `elec_money`, `elec_date`, `create_time`, `create_by`, `update_time`, `update_by`, `remark` ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-06-06 15:16:02 -==> Parameters: 1-0001(String), 李文英(String), A(String), 2(String), 1(String), 1(BigDecimal), 2019-06-06 15:15:00.866(Timestamp), 2019-05(String), admin(String), 2019-06-06 15:15:00.866(Timestamp), admin(String), null
2019-06-06 15:16:02 -<==    Updates: 1
2019-06-06 15:16:03 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`start`,`end`,`hu`,`elec_price`,`elec_amount`,`elec_cost`,`elec_sum`,`elec_money`,`heat_price`,`heat_area`,`heat_cost`,`heat_sum`,`heat_money`,`water_price`,`water_cost`,`water_sum`,`water_money`,`print_date`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from print where user_id = ? and user_org = ? and create_time = ? 
2019-06-06 15:16:03 -==> Parameters: 1-0001(String), 2(String), 2019-05(String)
2019-06-06 15:16:03 -<==      Total: 1
2019-06-06 15:16:04 -==>  Preparing: update print SET `user_name` = ?, `start` = ?, `end` = ?, `hu` = ?, `elec_price` = ?, `elec_amount` = ?, `elec_cost` = ?, `elec_sum` = ?, `elec_money` = ? where id = ? 
2019-06-06 15:16:04 -==> Parameters: 李文英(String), 10300(Integer), 10370(Integer), 1(Integer), 0.465(BigDecimal), 70.00(BigDecimal), 32.55(BigDecimal), -7.02(BigDecimal), 1(BigDecimal), 97(Long)
2019-06-06 15:16:04 -<==    Updates: 1
2019-06-06 15:16:24 -耗时 : 84106
2019-06-06 15:16:24 -返回值 : 97
2019-06-06 15:16:26 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUser
2019-06-06 15:16:26 -HTTP METHOD : POST
2019-06-06 15:16:26 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.queryAllUser
2019-06-06 15:16:26 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@44384bc1]
2019-06-06 15:16:26 -==>  Preparing: select COUNT(*) number, user_id, user_name, user_type, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, elec_type as moneyType, elec_price as userPrice, elec_amount as userArea, elec_cost as userCost, elec_Sum as userSum from ELEC WHERE create_time = ? and user_org = ? and user_Id = ? and user_type != 'B' UNION ALL select COUNT(*) number, user_id, user_name, user_type, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, heat_type as moneyType, heat_price as userPrice, heat_area as userArea, heat_cost as userCost, heat_Sum as userSum from heat WHERE create_time = ? and user_org = ? and user_Id = ? and user_type != 'B' UNION ALL select COUNT(*) number, user_id, user_name, user_type, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, water_type as moneyType, water_price as userPrice, water_price as userArea, water_price as userCost, water_Sum as userSum from water WHERE create_time = ? and user_org = ? and user_Id = ? and user_type != 'B' 
2019-06-06 15:16:26 -==> Parameters: 2019-05(String), 2(String), 1-0001(String), 2019-05(String), 2(String), 1-0001(String), 2019-05(String), 2(String), 1-0001(String)
2019-06-06 15:16:26 -<==      Total: 3
2019-06-06 15:16:26 -耗时 : 28
2019-06-06 15:16:26 -返回值 : [com.bootdo.moneyList.damain.MoneyListDO@4f250961, com.bootdo.moneyList.damain.MoneyListDO@33c92ded, com.bootdo.moneyList.damain.MoneyListDO@7da827ba]
2019-06-06 15:16:28 -请求地址 : http://localhost:8081/moneyList/moneyList/moneyPrint/97
2019-06-06 15:16:28 -HTTP METHOD : GET
2019-06-06 15:16:28 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.printEdit
2019-06-06 15:16:28 -参数 : [97, {}]
2019-06-06 15:16:28 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`start`,`end`,`hu`,`elec_price`,`elec_amount`,`elec_cost`,`elec_sum`,`elec_money`,`heat_price`,`heat_area`,`heat_cost`,`heat_sum`,`heat_money`,`water_price`,`water_cost`,`water_sum`,`water_money`,`print_date`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from print where id = ? 
2019-06-06 15:16:28 -==> Parameters: 97(Long)
2019-06-06 15:16:28 -<==      Total: 1
2019-06-06 15:16:28 -耗时 : 11
2019-06-06 15:16:28 -返回值 : moneyList/moneyPrint
2019-06-06 15:19:15 -Starting BootdoApplication on PC-201905091110 with PID 33512 (D:\eclipse2018-work\bootdo\target\classes started by Administrator in D:\eclipse2018-work\bootdo)
2019-06-06 15:19:15 -Running with Spring Boot v2.0.3.RELEASE, Spring v5.0.7.RELEASE
2019-06-06 15:19:15 -The following profiles are active: dev
2019-06-06 15:19:15 -Refreshing org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@41e350f1: startup date [Thu Jun 06 15:19:15 CST 2019]; root of context hierarchy
2019-06-06 15:19:21 -Multiple Spring Data modules found, entering strict repository configuration mode!
2019-06-06 15:19:25 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$7c0925e5] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-06 15:19:25 -Bean 'shiroConfig' of type [com.bootdo.system.config.ShiroConfig$$EnhancerBySpringCGLIB$$6e62548c] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-06 15:19:26 -Bean 'userRealm' of type [com.bootdo.system.shiro.UserRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-06 15:19:28 -Bean 'cacheManager2' of type [net.sf.ehcache.CacheManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-06 15:19:28 -Bean 'ehCacheManager' of type [org.apache.shiro.cache.ehcache.EhCacheManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-06 15:19:28 -Cache with name 'com.bootdo.system.shiro.UserRealm.authorizationCache' does not yet exist.  Creating now.
2019-06-06 15:19:28 -Added EhCache named [com.bootdo.system.shiro.UserRealm.authorizationCache]
2019-06-06 15:19:28 -Bean 'sessionDAO' of type [org.apache.shiro.session.mgt.eis.MemorySessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-06 15:19:28 -Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-06 15:19:28 -Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-06 15:19:28 -Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-06 15:19:29 -Tomcat initialized with port(s): 8081 (http)
2019-06-06 15:19:30 -Initializing ProtocolHandler ["http-nio-8081"]
2019-06-06 15:19:30 -Starting service [Tomcat]
2019-06-06 15:19:30 -Starting Servlet Engine: Apache Tomcat/8.5.31
2019-06-06 15:19:30 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [D:\Java\JDK\jdk1.8.0_102\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;D:\Java\JDK\jdk1.8.0_102\jre\bin;D:/Java/JRE/bin/server;D:/Java/JRE/bin;D:/Java/JRE/lib/amd64;C:\ProgramData\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Windows\System32\OpenSSH\;%JAVA_HOME\bin%;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;;C:\Users\Administrator\Desktop;;.]
2019-06-06 15:19:30 -Initializing Spring embedded WebApplicationContext
2019-06-06 15:19:30 -Root WebApplicationContext: initialization completed in 15471 ms
2019-06-06 15:19:35 -Mapping filter: 'characterEncodingFilter' to: [/*]
2019-06-06 15:19:35 -Mapping filter: 'hiddenHttpMethodFilter' to: [/*]
2019-06-06 15:19:35 -Mapping filter: 'httpPutFormContentFilter' to: [/*]
2019-06-06 15:19:35 -Mapping filter: 'requestContextFilter' to: [/*]
2019-06-06 15:19:35 -Filter xssFilter was not registered (disabled)
2019-06-06 15:19:35 -Mapping filter: 'webStatFilter' to urls: [/*]
2019-06-06 15:19:35 -Mapping filter: 'shiroFilterFactoryBean' to: [/*]
2019-06-06 15:19:35 -Servlet statViewServlet mapped to [/druid/*]
2019-06-06 15:19:35 -Servlet dispatcherServlet mapped to [/]
2019-06-06 15:19:40 -ApplicationContext registed-->org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@41e350f1: startup date [Thu Jun 06 15:19:15 CST 2019]; root of context hierarchy
2019-06-06 15:19:41 -Using default implementation for ThreadExecutor
2019-06-06 15:19:41 -Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2019-06-06 15:19:41 -Quartz Scheduler v.2.3.0 created.
2019-06-06 15:19:41 -RAMJobStore initialized.
2019-06-06 15:19:41 -Scheduler meta-data: Quartz Scheduler (v2.3.0) 'schedulerFactoryBean' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2019-06-06 15:19:41 -Quartz scheduler 'schedulerFactoryBean' initialized from an externally provided properties instance.
2019-06-06 15:19:41 -Quartz scheduler version: 2.3.0
2019-06-06 15:19:41 -JobFactory set to: com.bootdo.common.quartz.factory.JobFactory@6604f246
2019-06-06 15:19:42 -Initializing ExecutorService  'clientInboundChannelExecutor'
2019-06-06 15:19:42 -Initializing ExecutorService  'clientOutboundChannelExecutor'
2019-06-06 15:19:47 -Mapped "{[/charts/countDD/getCountDD],methods=[POST]}" onto public java.util.Map<java.lang.String, java.lang.Object> com.bootdo.charts.controller.countDDController.getCountD(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo)
2019-06-06 15:19:47 -Mapped "{[/charts/countDD/exportDD],methods=[GET]}" onto public void com.bootdo.charts.controller.countDDController.exportDD(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.HeatLogVo,com.bootdo.moneyLog.vo.WaterLogVo,javax.servlet.http.HttpServletResponse)
2019-06-06 15:19:47 -Mapped "{[/charts/countDD],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.countDDController.countDD()
2019-06-06 15:19:47 -Mapped "{[/charts/countMM/exportMM],methods=[GET]}" onto public void com.bootdo.charts.controller.countMMController.exportMM(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.HeatLogVo,com.bootdo.moneyLog.vo.WaterLogVo,javax.servlet.http.HttpServletResponse)
2019-06-06 15:19:47 -Mapped "{[/charts/countMM],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.countMMController.countMM()
2019-06-06 15:19:47 -Mapped "{[/charts/countMM/getCountMM],methods=[POST]}" onto public java.util.Map<java.lang.String, java.lang.Object> com.bootdo.charts.controller.countMMController.getCountMM(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo)
2019-06-06 15:19:47 -Mapped "{[/charts/countOwe/getCountOwe],methods=[POST]}" onto public java.util.Map<java.lang.String, java.lang.Object> com.bootdo.charts.controller.countOweController.getCountOwe(com.bootdo.elec.vo.ElecVo,com.bootdo.water.vo.WaterVo,com.bootdo.heat.vo.HeatVo)
2019-06-06 15:19:47 -Mapped "{[/charts/countOwe],methods=[GET]}" onto java.lang.String com.bootdo.charts.controller.countOweController.countOwe()
2019-06-06 15:19:47 -Mapped "{[/charts/countOwe/exportOwe],methods=[GET]}" onto public void com.bootdo.charts.controller.countOweController.exportOwe(com.bootdo.elec.vo.ElecVo,com.bootdo.heat.vo.HeatVo,com.bootdo.water.vo.WaterVo,javax.servlet.http.HttpServletResponse)
2019-06-06 15:19:47 -Mapped "{[/charts/countRun/exportRun],methods=[GET]}" onto public void com.bootdo.charts.controller.countRunController.exportRun(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.HeatLogVo,com.bootdo.moneyLog.vo.WaterLogVo,javax.servlet.http.HttpServletResponse)
2019-06-06 15:19:47 -Mapped "{[/charts/countRun/getCountRun],methods=[POST]}" onto public java.util.Map<java.lang.String, java.lang.Object> com.bootdo.charts.controller.countRunController.getCountRun(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo)
2019-06-06 15:19:47 -Mapped "{[/charts/countRun],methods=[GET]}" onto java.lang.String com.bootdo.charts.controller.countRunController.countRun()
2019-06-06 15:19:47 -Mapped "{[/charts/countYY],methods=[GET]}" onto java.lang.String com.bootdo.charts.controller.countYYController.countYY()
2019-06-06 15:19:47 -Mapped "{[/charts/countYY/exportYY],methods=[GET]}" onto public void com.bootdo.charts.controller.countYYController.exportYY(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.HeatLogVo,com.bootdo.moneyLog.vo.WaterLogVo,javax.servlet.http.HttpServletResponse)
2019-06-06 15:19:47 -Mapped "{[/charts/countYY/getCountYY],methods=[POST]}" onto public java.util.Map<java.lang.String, java.lang.Object> com.bootdo.charts.controller.countYYController.getCountYY(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo)
2019-06-06 15:19:47 -Mapped "{[/charts/tableDD/getTableDD],methods=[POST]}" onto public java.util.Map<java.lang.String, java.lang.Object> com.bootdo.charts.controller.tableDDController.getTableDD(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo)
2019-06-06 15:19:47 -Mapped "{[/charts/tableDD/exportDD],methods=[GET]}" onto public void com.bootdo.charts.controller.tableDDController.exportDD(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.HeatLogVo,com.bootdo.moneyLog.vo.WaterLogVo,javax.servlet.http.HttpServletResponse)
2019-06-06 15:19:47 -Mapped "{[/charts/tableDD],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.tableDDController.countDD()
2019-06-06 15:19:47 -Mapped "{[/charts/tableElecMM/exportElecMM],methods=[GET]}" onto public void com.bootdo.charts.controller.tableElecMMController.exportElecMM(com.bootdo.elec.vo.ElecVo,com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse)
2019-06-06 15:19:47 -Mapped "{[/charts/tableElecMM],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.tableElecMMController.tableElecMM()
2019-06-06 15:19:47 -Mapped "{[/charts/tableElecMM/tableElecMM],methods=[POST]}" onto public java.util.Map<java.lang.String, java.lang.Object> com.bootdo.charts.controller.tableElecMMController.tableElecMM(com.bootdo.elec.vo.ElecVo,com.bootdo.moneyLog.vo.ElecLogVo)
2019-06-06 15:19:47 -Mapped "{[/charts/tableElecYY/tableElecYY],methods=[POST]}" onto public java.util.Map<java.lang.String, java.lang.Object> com.bootdo.charts.controller.tableElecYYController.tableElecYY(com.bootdo.elec.vo.ElecVo,com.bootdo.moneyLog.vo.ElecLogVo)
2019-06-06 15:19:47 -Mapped "{[/charts/tableElecYY],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.tableElecYYController.tableElecYY()
2019-06-06 15:19:47 -Mapped "{[/charts/tableElecYY/exportElecYY],methods=[GET]}" onto public void com.bootdo.charts.controller.tableElecYYController.exportElecYY(com.bootdo.elec.vo.ElecVo,com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse)
2019-06-06 15:19:47 -Mapped "{[/charts/tableHeatMM/tableHeatMM],methods=[POST]}" onto public java.util.Map<java.lang.String, java.lang.Object> com.bootdo.charts.controller.tableHeatMMController.tableHeatMM(com.bootdo.heat.vo.HeatVo,com.bootdo.moneyLog.vo.HeatLogVo)
2019-06-06 15:19:47 -Mapped "{[/charts/tableHeatMM],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.tableHeatMMController.tableHeatMM()
2019-06-06 15:19:47 -Mapped "{[/charts/tableHeatMM/exportHeatMM],methods=[GET]}" onto public void com.bootdo.charts.controller.tableHeatMMController.exportHeatMM(com.bootdo.heat.vo.HeatVo,com.bootdo.moneyLog.vo.HeatLogVo,javax.servlet.http.HttpServletResponse)
2019-06-06 15:19:47 -Mapped "{[/charts/tableHeatYY/tableHeatYY],methods=[POST]}" onto public java.util.Map<java.lang.String, java.lang.Object> com.bootdo.charts.controller.tableHeatYYController.tableHeatYY(com.bootdo.heat.vo.HeatVo,com.bootdo.moneyLog.vo.HeatLogVo)
2019-06-06 15:19:47 -Mapped "{[/charts/tableHeatYY],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.tableHeatYYController.tableHeatYY()
2019-06-06 15:19:47 -Mapped "{[/charts/tableHeatYY/exportHeatYY],methods=[GET]}" onto public void com.bootdo.charts.controller.tableHeatYYController.exportHeatYY(com.bootdo.heat.vo.HeatVo,com.bootdo.moneyLog.vo.HeatLogVo,javax.servlet.http.HttpServletResponse)
2019-06-06 15:19:47 -Mapped "{[/charts/tableWaterMM/exportWaterMM],methods=[GET]}" onto public void com.bootdo.charts.controller.tableWaterMMController.exportWaterMM(com.bootdo.water.vo.WaterVo,com.bootdo.moneyLog.vo.WaterLogVo,javax.servlet.http.HttpServletResponse)
2019-06-06 15:19:47 -Mapped "{[/charts/tableWaterMM],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.tableWaterMMController.tableWaterMM()
2019-06-06 15:19:47 -Mapped "{[/charts/tableWaterMM/tableWaterMM],methods=[POST]}" onto public java.util.Map<java.lang.String, java.lang.Object> com.bootdo.charts.controller.tableWaterMMController.tableWaterMM(com.bootdo.water.vo.WaterVo,com.bootdo.moneyLog.vo.WaterLogVo)
2019-06-06 15:19:47 -Mapped "{[/charts/tableWaterYY/tableWaterYY],methods=[POST]}" onto public java.util.Map<java.lang.String, java.lang.Integer> com.bootdo.charts.controller.tableWaterYYController.tableWaterYY(com.bootdo.water.vo.WaterVo,com.bootdo.moneyLog.vo.WaterLogVo)
2019-06-06 15:19:47 -Mapped "{[/charts/tableWaterYY],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.tableWaterYYController.tableWaterYY()
2019-06-06 15:19:47 -Mapped "{[/charts/tableWaterYY/exportWaterYY],methods=[GET]}" onto public void com.bootdo.charts.controller.tableWaterYYController.exportWaterYY(com.bootdo.water.vo.WaterVo,com.bootdo.moneyLog.vo.WaterLogVo,javax.servlet.http.HttpServletResponse)
2019-06-06 15:19:47 -Mapped "{[/common/dict/add],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.add()
2019-06-06 15:19:47 -Mapped "{[/common/dict/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.remove(java.lang.Long)
2019-06-06 15:19:47 -Mapped "{[/common/dict/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.remove(java.lang.Long[])
2019-06-06 15:19:47 -Mapped "{[/common/dict/update]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.update(com.bootdo.common.domain.DictDO)
2019-06-06 15:19:47 -Mapped "{[/common/dict/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.common.controller.DictController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-06-06 15:19:47 -Mapped "{[/common/dict/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.save(com.bootdo.common.domain.DictDO)
2019-06-06 15:19:47 -Mapped "{[/common/dict/type],methods=[GET]}" onto public java.util.List<com.bootdo.common.domain.DictDO> com.bootdo.common.controller.DictController.listType()
2019-06-06 15:19:47 -Mapped "{[/common/dict/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.edit(java.lang.Long,org.springframework.ui.Model)
2019-06-06 15:19:47 -Mapped "{[/common/dict/list/{type}],methods=[GET]}" onto public java.util.List<com.bootdo.common.domain.DictDO> com.bootdo.common.controller.DictController.listByType(java.lang.String)
2019-06-06 15:19:47 -Mapped "{[/common/dict],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.dict()
2019-06-06 15:19:47 -Mapped "{[/common/dict/add/{type}/{description}],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.addD(org.springframework.ui.Model,java.lang.String,java.lang.String)
2019-06-06 15:19:47 -Mapped "{[/common/sysFile/add],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.FileController.add()
2019-06-06 15:19:47 -Mapped "{[/common/sysFile/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.remove(java.lang.Long,javax.servlet.http.HttpServletRequest)
2019-06-06 15:19:47 -Mapped "{[/common/sysFile/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.remove(java.lang.Long[])
2019-06-06 15:19:47 -Mapped "{[/common/sysFile/update]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.update(com.bootdo.common.domain.FileDO)
2019-06-06 15:19:47 -Mapped "{[/common/sysFile/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.common.controller.FileController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-06-06 15:19:47 -Mapped "{[/common/sysFile/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.save(com.bootdo.common.domain.FileDO)
2019-06-06 15:19:47 -Mapped "{[/common/sysFile/info/{id}]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.info(java.lang.Long)
2019-06-06 15:19:47 -Mapped "{[/common/sysFile/edit],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.FileController.edit(java.lang.Long,org.springframework.ui.Model)
2019-06-06 15:19:47 -Mapped "{[/common/sysFile],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.FileController.sysFile(org.springframework.ui.Model)
2019-06-06 15:19:47 -Mapped "{[/common/sysFile/upload],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.FileController.upload(org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpServletRequest)
2019-06-06 15:19:47 -Mapped "{[/common/generator/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.GeneratorController.update(java.util.Map<java.lang.String, java.lang.Object>)
2019-06-06 15:19:47 -Mapped "{[/common/generator/list],methods=[GET]}" onto java.util.List<java.util.Map<java.lang.String, java.lang.Object>> com.bootdo.common.controller.GeneratorController.list()
2019-06-06 15:19:47 -Mapped "{[/common/generator/code/{tableName}]}" onto public void com.bootdo.common.controller.GeneratorController.code(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String) throws java.io.IOException
2019-06-06 15:19:47 -Mapped "{[/common/generator],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.GeneratorController.generator()
2019-06-06 15:19:47 -Mapped "{[/common/generator/edit],methods=[GET]}" onto public java.lang.String com.bootdo.common.controller.GeneratorController.edit(org.springframework.ui.Model)
2019-06-06 15:19:47 -Mapped "{[/common/generator/batchCode]}" onto public void com.bootdo.common.controller.GeneratorController.batchCode(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String) throws java.io.IOException
2019-06-06 15:19:47 -Mapped "{[/common/job/add],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.JobController.add()
2019-06-06 15:19:47 -Mapped "{[/common/job/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.remove(java.lang.Long)
2019-06-06 15:19:47 -Mapped "{[/common/job/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.remove(java.lang.Long[])
2019-06-06 15:19:47 -Mapped "{[/common/job/update],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.update(com.bootdo.common.domain.TaskDO)
2019-06-06 15:19:47 -Mapped "{[/common/job/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.common.controller.JobController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-06-06 15:19:47 -Mapped "{[/common/job/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.save(com.bootdo.common.domain.TaskDO)
2019-06-06 15:19:47 -Mapped "{[/common/job/info/{id}]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.info(java.lang.Long)
2019-06-06 15:19:47 -Mapped "{[/common/job/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.JobController.edit(java.lang.Long,org.springframework.ui.Model)
2019-06-06 15:19:47 -Mapped "{[/common/job],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.JobController.taskScheduleJob()
2019-06-06 15:19:47 -Mapped "{[/common/job/changeJobStatus],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.changeJobStatus(java.lang.Long,java.lang.String)
2019-06-06 15:19:47 -Mapped "{[/common/log/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.LogController.remove(java.lang.Long)
2019-06-06 15:19:47 -Mapped "{[/common/log],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.LogController.log()
2019-06-06 15:19:47 -Mapped "{[/common/log/list],methods=[GET]}" onto com.bootdo.common.domain.PageDO<com.bootdo.common.domain.LogDO> com.bootdo.common.controller.LogController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-06-06 15:19:47 -Mapped "{[/common/log/batchRemove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.LogController.batchRemove(java.lang.Long[])
2019-06-06 15:19:47 -Mapped "{[/common/long],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.LongController.Long()
2019-06-06 15:19:47 -Mapped "{[/common/time],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.TimeController.Time()
2019-06-06 15:19:47 -Mapped "{[/error]}" onto public com.bootdo.common.utils.R com.bootdo.common.exception.MainsiteErrorController.handleError(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-06-06 15:19:47 -Mapped "{[/error],produces=[text/html]}" onto public org.springframework.web.servlet.ModelAndView com.bootdo.common.exception.MainsiteErrorController.errorHtml(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-06-06 15:19:47 -Mapped "{[/elec/elec/add],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecController.add()
2019-06-06 15:19:47 -Mapped "{[/elec/elec/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.remove(java.lang.Long)
2019-06-06 15:19:47 -Mapped "{[/elec/elec/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.remove(java.lang.Long[])
2019-06-06 15:19:47 -Mapped "{[/elec/elec/update],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.update(com.bootdo.elec.domain.ElecDO)
2019-06-06 15:19:47 -Mapped "{[/elec/elec/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.elec.controller.ElecController.list(java.util.Map<java.lang.String, java.lang.Object>,com.bootdo.elec.domain.ElecDO)
2019-06-06 15:19:47 -Mapped "{[/elec/elec/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.save(com.bootdo.elec.domain.ElecDO)
2019-06-06 15:19:47 -Mapped "{[/elec/elec/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecController.edit(java.lang.Long,org.springframework.ui.Model)
2019-06-06 15:19:47 -Mapped "{[/elec/elec],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecController.Elec()
2019-06-06 15:19:47 -Mapped "{[/elec/elec/exprotElec],methods=[GET]}" onto public void com.bootdo.elec.controller.ElecController.exprotExcel(com.bootdo.elec.vo.ElecVo,javax.servlet.http.HttpServletResponse)
2019-06-06 15:19:47 -Mapped "{[/elec/elecInto],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecIntoController.ElecInto()
2019-06-06 15:19:47 -Mapped "{[/elec/elecInto/exprotElecIntoExcel],methods=[GET]}" onto public void com.bootdo.elec.controller.ElecIntoController.exprotExcel(com.bootdo.elec.vo.ElecVo,javax.servlet.http.HttpServletResponse)
2019-06-06 15:19:47 -Mapped "{[/elec/elecInto/importElecIntoExcel],methods=[POST]}" onto public java.lang.String com.bootdo.elec.controller.ElecIntoController.importElecIntoExcel(org.springframework.web.multipart.MultipartFile,com.bootdo.elec.vo.ElecVo,javax.servlet.http.HttpServletResponse) throws java.lang.Exception
2019-06-06 15:19:47 -Mapped "{[/elec/elecPrice/add],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecPriceController.add()
2019-06-06 15:19:47 -Mapped "{[/elec/elecPrice/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecPriceController.remove(java.lang.Long)
2019-06-06 15:19:47 -Mapped "{[/elec/elecPrice/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecPriceController.remove(java.lang.Long[])
2019-06-06 15:19:47 -Mapped "{[/elec/elecPrice/update]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecPriceController.update(com.bootdo.elec.domain.ElecPriceDO)
2019-06-06 15:19:47 -Mapped "{[/elec/elecPrice/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.elec.controller.ElecPriceController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-06-06 15:19:47 -Mapped "{[/elec/elecPrice/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecPriceController.save(com.bootdo.elec.domain.ElecPriceDO,com.bootdo.elec.domain.ElecDO)
2019-06-06 15:19:47 -Mapped "{[/elec/elecPrice],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecPriceController.ElecPrice()
2019-06-06 15:19:47 -Mapped "{[/elec/elecPrice/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecPriceController.edit(java.lang.Long,org.springframework.ui.Model)
2019-06-06 15:19:47 -Mapped "{[/elec/elecUpLoad],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecUpLoadController.Elec()
2019-06-06 15:19:47 -Mapped "{[/elec/elecUpLoad/importElecExcel],methods=[POST]}" onto public java.util.Map<java.lang.String, java.lang.Object> com.bootdo.elec.controller.ElecUpLoadController.importElecExcel(org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpServletRequest) throws java.lang.Exception
2019-06-06 15:19:47 -Mapped "{[/elec/elecUpLoad/importElecUser]}" onto public java.lang.String com.bootdo.elec.controller.ElecUpLoadController.importElecUser(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)
2019-06-06 15:19:47 -Mapped "{[/elec/elecUpLoad/exprotElecExcel],methods=[GET]}" onto public void com.bootdo.elec.controller.ElecUpLoadController.exprotElecExcel(com.bootdo.elec.vo.ElecVo,javax.servlet.http.HttpServletResponse)
2019-06-06 15:19:47 -Mapped "{[/heat/heat/add],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatController.add()
2019-06-06 15:19:47 -Mapped "{[/heat/heat/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatController.remove(java.lang.Integer)
2019-06-06 15:19:47 -Mapped "{[/heat/heat/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatController.remove(java.lang.Integer[])
2019-06-06 15:19:47 -Mapped "{[/heat/heat/update]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatController.update(com.bootdo.heat.domain.HeatDO)
2019-06-06 15:19:47 -Mapped "{[/heat/heat/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.heat.controller.HeatController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-06-06 15:19:47 -Mapped "{[/heat/heat/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatController.save(com.bootdo.heat.domain.HeatDO)
2019-06-06 15:19:47 -Mapped "{[/heat/heat/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatController.edit(java.lang.Integer,org.springframework.ui.Model)
2019-06-06 15:19:47 -Mapped "{[/heat/heat/exprotHeat],methods=[GET]}" onto public void com.bootdo.heat.controller.HeatController.exprotExcel(com.bootdo.heat.vo.HeatVo,javax.servlet.http.HttpServletResponse)
2019-06-06 15:19:47 -Mapped "{[/heat/heat],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatController.Heat()
2019-06-06 15:19:47 -Mapped "{[/heat/heatInto/exprotHeatIntoExcel],methods=[GET]}" onto public void com.bootdo.heat.controller.HeatIntoController.exprotExcel(com.bootdo.heat.vo.HeatVo,javax.servlet.http.HttpServletResponse)
2019-06-06 15:19:47 -Mapped "{[/heat/heatInto],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatIntoController.HeatInto()
2019-06-06 15:19:47 -Mapped "{[/heat/heatInto/importHeatIntoExcel],methods=[POST]}" onto public java.lang.String com.bootdo.heat.controller.HeatIntoController.importHeatIntoExcel(org.springframework.web.multipart.MultipartFile,com.bootdo.heat.vo.HeatVo,javax.servlet.http.HttpServletResponse) throws java.lang.Exception
2019-06-06 15:19:47 -Mapped "{[/heat/heatPrice/add],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatPriceController.add()
2019-06-06 15:19:47 -Mapped "{[/heat/heatPrice/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatPriceController.remove(java.lang.Long)
2019-06-06 15:19:47 -Mapped "{[/heat/heatPrice/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatPriceController.remove(java.lang.Long[])
2019-06-06 15:19:47 -Mapped "{[/heat/heatPrice/update]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatPriceController.update(com.bootdo.heat.domain.HeatPriceDO)
2019-06-06 15:19:47 -Mapped "{[/heat/heatPrice/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.heat.controller.HeatPriceController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-06-06 15:19:47 -Mapped "{[/heat/heatPrice/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatPriceController.save(com.bootdo.heat.domain.HeatPriceDO)
2019-06-06 15:19:47 -Mapped "{[/heat/heatPrice],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatPriceController.HeatPrice()
2019-06-06 15:19:47 -Mapped "{[/heat/heatPrice/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatPriceController.edit(java.lang.Long,org.springframework.ui.Model)
2019-06-06 15:19:47 -Mapped "{[/heat/heatUpLoad/exprotHeatExcel],methods=[GET]}" onto public void com.bootdo.heat.controller.HeatUpLoadController.exprotHeatExcel(com.bootdo.heat.vo.HeatVo,javax.servlet.http.HttpServletResponse)
2019-06-06 15:19:47 -Mapped "{[/heat/heatUpLoad],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatUpLoadController.HeatUpLoad()
2019-06-06 15:19:47 -Mapped "{[/heat/heatUpLoad/createHeatExcel],methods=[POST]}" onto public java.lang.String com.bootdo.heat.controller.HeatUpLoadController.createHeatExcel(com.bootdo.heat.domain.HeatDO) throws java.lang.Exception
2019-06-06 15:19:47 -Mapped "{[/heat/heatUpLoad/importHeatExcel]}" onto public java.lang.String com.bootdo.heat.controller.HeatUpLoadController.importHeatExcel(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)
2019-06-06 15:19:47 -Mapped "{[/moneyList/moneyList/queryAllUser],methods=[POST]}" onto public java.util.List<com.bootdo.moneyList.damain.MoneyListDO> com.bootdo.moneyList.controller.MoneyListController.queryAllUser(com.bootdo.moneyList.damain.MoneyListDO)
2019-06-06 15:19:47 -Mapped "{[/moneyList/moneyList],methods=[GET]}" onto java.lang.String com.bootdo.moneyList.controller.MoneyListController.MoneyList()
2019-06-06 15:19:47 -Mapped "{[/moneyList/moneyList/moneyPrint/{id}],methods=[GET]}" onto java.lang.String com.bootdo.moneyList.controller.MoneyListController.printEdit(java.lang.Long,org.springframework.ui.Model)
2019-06-06 15:19:47 -Mapped "{[/moneyList/moneyList/queryAllUserName],methods=[POST]}" onto public java.util.List<com.bootdo.moneyList.damain.MoneyListDO> com.bootdo.moneyList.controller.MoneyListController.getAllUserName(com.bootdo.moneyList.damain.MoneyListDO)
2019-06-06 15:19:47 -Mapped "{[/moneyList/moneyList/updateMoney],methods=[POST]}" onto public java.lang.Long com.bootdo.moneyList.controller.MoneyListController.updateMoney(com.bootdo.moneyList.damain.MoneyListDO)
2019-06-06 15:19:48 -Mapped "{[/moneyList/moneyWZ/add],methods=[GET]}" onto java.lang.String com.bootdo.moneyList.controller.MoneyListWZController.add()
2019-06-06 15:19:48 -Mapped "{[/moneyList/moneyWZ/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyList.controller.MoneyListWZController.remove(java.lang.Long)
2019-06-06 15:19:48 -Mapped "{[/moneyList/moneyWZ/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyList.controller.MoneyListWZController.remove(java.lang.Long[])
2019-06-06 15:19:48 -Mapped "{[/moneyList/moneyWZ/update],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyList.controller.MoneyListWZController.update(com.bootdo.elec.domain.ElecDO)
2019-06-06 15:19:48 -Mapped "{[/moneyList/moneyWZ/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.moneyList.controller.MoneyListWZController.list(java.util.Map<java.lang.String, java.lang.Object>,com.bootdo.elec.domain.ElecDO)
2019-06-06 15:19:48 -Mapped "{[/moneyList/moneyWZ/exprotWZ],methods=[GET]}" onto public void com.bootdo.moneyList.controller.MoneyListWZController.exportElecYY(com.bootdo.elec.vo.ElecVo,com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse)
2019-06-06 15:19:48 -Mapped "{[/moneyList/moneyWZ/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.moneyList.controller.MoneyListWZController.edit(java.lang.Long,org.springframework.ui.Model)
2019-06-06 15:19:48 -Mapped "{[/moneyList/moneyWZ/batchMoney],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyList.controller.MoneyListWZController.batchMoney(java.lang.Long[])
2019-06-06 15:19:48 -Mapped "{[/moneyList/moneyWZ],methods=[GET]}" onto java.lang.String com.bootdo.moneyList.controller.MoneyListWZController.MoneyWZ()
2019-06-06 15:19:48 -Mapped "{[/moneyLog/elecLog/add],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.ElecLogController.add()
2019-06-06 15:19:48 -Mapped "{[/moneyLog/elecLog/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.ElecLogController.remove(java.lang.Long)
2019-06-06 15:19:48 -Mapped "{[/moneyLog/elecLog/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.ElecLogController.remove(java.lang.Long[])
2019-06-06 15:19:48 -Mapped "{[/moneyLog/elecLog/update]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.ElecLogController.update(java.util.Map<java.lang.String, java.lang.Object>,com.bootdo.moneyLog.domain.ElecLogDO)
2019-06-06 15:19:48 -Mapped "{[/moneyLog/elecLog/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.moneyLog.controller.ElecLogController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-06-06 15:19:48 -Mapped "{[/moneyLog/elecLog/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.ElecLogController.save(com.bootdo.moneyLog.domain.ElecLogDO)
2019-06-06 15:19:48 -Mapped "{[/moneyLog/elecLog/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.ElecLogController.edit(java.lang.Long,org.springframework.ui.Model)
2019-06-06 15:19:48 -Mapped "{[/moneyLog/elecLog],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.ElecLogController.moneyLog()
2019-06-06 15:19:48 -Mapped "{[/moneyLog/elecLog/exprotElecLog],methods=[GET]}" onto public void com.bootdo.moneyLog.controller.ElecLogController.exprotElecLog(com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-06-06 15:19:48 -Mapped "{[/moneyLog/heatLog/add],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.HeatLogController.add()
2019-06-06 15:19:48 -Mapped "{[/moneyLog/heatLog/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.HeatLogController.remove(java.lang.Long)
2019-06-06 15:19:48 -Mapped "{[/moneyLog/heatLog/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.HeatLogController.remove(java.lang.Long[])
2019-06-06 15:19:48 -Mapped "{[/moneyLog/heatLog/update]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.HeatLogController.update(java.util.Map<java.lang.String, java.lang.Object>,com.bootdo.moneyLog.domain.HeatLogDO)
2019-06-06 15:19:48 -Mapped "{[/moneyLog/heatLog/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.moneyLog.controller.HeatLogController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-06-06 15:19:48 -Mapped "{[/moneyLog/heatLog/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.HeatLogController.save(com.bootdo.moneyLog.domain.HeatLogDO)
2019-06-06 15:19:48 -Mapped "{[/moneyLog/heatLog/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.HeatLogController.edit(java.lang.Long,org.springframework.ui.Model)
2019-06-06 15:19:48 -Mapped "{[/moneyLog/heatLog/exprotHeatLog],methods=[GET]}" onto public void com.bootdo.moneyLog.controller.HeatLogController.exprotHeatLog(com.bootdo.moneyLog.vo.HeatLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-06-06 15:19:48 -Mapped "{[/moneyLog/heatLog],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.HeatLogController.HeatLog()
2019-06-06 15:19:48 -Mapped "{[/moneyLog/waterLog/add],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.WaterLogController.add()
2019-06-06 15:19:48 -Mapped "{[/moneyLog/waterLog/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.WaterLogController.remove(java.lang.Long)
2019-06-06 15:19:48 -Mapped "{[/moneyLog/waterLog/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.WaterLogController.remove(java.lang.Long[])
2019-06-06 15:19:48 -Mapped "{[/moneyLog/waterLog/update]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.WaterLogController.update(java.util.Map<java.lang.String, java.lang.Object>,com.bootdo.moneyLog.domain.WaterLogDO)
2019-06-06 15:19:48 -Mapped "{[/moneyLog/waterLog/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.moneyLog.controller.WaterLogController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-06-06 15:19:48 -Mapped "{[/moneyLog/waterLog/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.WaterLogController.save(com.bootdo.moneyLog.domain.WaterLogDO)
2019-06-06 15:19:48 -Mapped "{[/moneyLog/waterLog/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.WaterLogController.edit(java.lang.Long,org.springframework.ui.Model)
2019-06-06 15:19:48 -Mapped "{[/moneyLog/waterLog/exprotWaterLog],methods=[GET]}" onto public void com.bootdo.moneyLog.controller.WaterLogController.exprotWaterLog(com.bootdo.moneyLog.vo.WaterLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-06-06 15:19:48 -Mapped "{[/moneyLog/waterLog],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.WaterLogController.WaterLog()
2019-06-06 15:19:48 -Mapped "{[/oa/notify/add],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.add()
2019-06-06 15:19:48 -Mapped "{[/oa/notify/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.remove(java.lang.Long)
2019-06-06 15:19:48 -Mapped "{[/oa/notify/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.remove(java.lang.Long[])
2019-06-06 15:19:48 -Mapped "{[/oa/notify/update]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.update(com.bootdo.oa.domain.NotifyDO)
2019-06-06 15:19:48 -Mapped "{[/oa/notify/read/{id}],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.read(java.lang.Long,org.springframework.ui.Model)
2019-06-06 15:19:48 -Mapped "{[/oa/notify/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.oa.controller.NotifyController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-06-06 15:19:48 -Mapped "{[/oa/notify/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.save(com.bootdo.oa.domain.NotifyDO)
2019-06-06 15:19:48 -Mapped "{[/oa/notify/message],methods=[GET]}" onto com.bootdo.common.utils.PageUtils com.bootdo.oa.controller.NotifyController.message()
2019-06-06 15:19:48 -Mapped "{[/oa/notify/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.edit(java.lang.Long,org.springframework.ui.Model)
2019-06-06 15:19:48 -Mapped "{[/oa/notify/selfNotify],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.selefNotify()
2019-06-06 15:19:48 -Mapped "{[/oa/notify],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.oaNotify()
2019-06-06 15:19:48 -Mapped "{[/oa/notify/selfList],methods=[GET]}" onto com.bootdo.common.utils.PageUtils com.bootdo.oa.controller.NotifyController.selfList(java.util.Map<java.lang.String, java.lang.Object>)
2019-06-06 15:19:48 -Mapped "{[/print/print/add],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.add()
2019-06-06 15:19:48 -Mapped "{[/print/print/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.print.controller.PrintController.remove(java.lang.Long)
2019-06-06 15:19:48 -Mapped "{[/print/print/update]}" onto public com.bootdo.common.utils.R com.bootdo.print.controller.PrintController.update(com.bootdo.print.domain.PrintDO)
2019-06-06 15:19:48 -Mapped "{[/print/print/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.print.controller.PrintController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-06-06 15:19:48 -Mapped "{[/print/print/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.print.controller.PrintController.save(java.lang.String,com.bootdo.print.domain.PrintDO)
2019-06-06 15:19:48 -Mapped "{[/print/print/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.print.controller.PrintController.batchRemove(java.lang.Long[])
2019-06-06 15:19:48 -Mapped "{[/print/print/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.edit(java.lang.Long,org.springframework.ui.Model)
2019-06-06 15:19:48 -Mapped "{[/print/print/printEdit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.printEdit(java.lang.Long,org.springframework.ui.Model)
2019-06-06 15:19:48 -Mapped "{[/print/print/batchPrint],methods=[POST]}" onto public java.util.List<com.bootdo.print.vo.PrintVo> com.bootdo.print.controller.PrintController.batchPrint(java.lang.Long[])
2019-06-06 15:19:48 -Mapped "{[/print/print],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.Print()
2019-06-06 15:19:48 -Mapped "{[/print/print/exprotPrint],methods=[GET]}" onto public void com.bootdo.print.controller.PrintController.exprotPrint(com.bootdo.print.vo.PrintVo,javax.servlet.http.HttpServletResponse)
2019-06-06 15:19:48 -Mapped "{[/print/print/printMoney],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.printMoney()
2019-06-06 15:19:48 -Mapped "{[/system/sysDept/add/{pId}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.add(java.lang.Long,org.springframework.ui.Model)
2019-06-06 15:19:48 -Mapped "{[/system/sysDept/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.remove(java.lang.Long)
2019-06-06 15:19:48 -Mapped "{[/system/sysDept/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.remove(java.lang.Long[])
2019-06-06 15:19:48 -Mapped "{[/system/sysDept/update]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.update(com.bootdo.system.domain.DeptDO)
2019-06-06 15:19:48 -Mapped "{[/system/sysDept/list],methods=[GET]}" onto public java.util.List<com.bootdo.system.domain.DeptDO> com.bootdo.system.controller.DeptController.list()
2019-06-06 15:19:48 -Mapped "{[/system/sysDept/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.save(com.bootdo.system.domain.DeptDO)
2019-06-06 15:19:48 -Mapped "{[/system/sysDept/tree],methods=[GET]}" onto public com.bootdo.common.domain.Tree<com.bootdo.system.domain.DeptDO> com.bootdo.system.controller.DeptController.tree()
2019-06-06 15:19:48 -Mapped "{[/system/sysDept/edit/{deptId}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.edit(java.lang.Long,org.springframework.ui.Model)
2019-06-06 15:19:48 -Mapped "{[/system/sysDept],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.dept()
2019-06-06 15:19:48 -Mapped "{[/system/sysDept/treeView],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.treeView()
2019-06-06 15:19:48 -Mapped "{[/index],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.index(org.springframework.ui.Model)
2019-06-06 15:19:48 -Mapped "{[/main],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.main()
2019-06-06 15:19:48 -Mapped "{[/login],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.login(org.springframework.ui.Model)
2019-06-06 15:19:48 -Mapped "{[/ || ],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.welcome(org.springframework.ui.Model)
2019-06-06 15:19:48 -Mapped "{[/logout],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.logout()
2019-06-06 15:19:48 -Mapped "{[/login],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.LoginController.ajaxLogin(java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest)
2019-06-06 15:19:48 -Mapped "{[/getVerify],methods=[GET]}" onto public void com.bootdo.system.controller.LoginController.getVerify(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-06-06 15:19:48 -Mapped "{[/sys/menu/add/{pId}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.MenuController.add(org.springframework.ui.Model,java.lang.Long)
2019-06-06 15:19:48 -Mapped "{[/sys/menu/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.MenuController.remove(java.lang.Long)
2019-06-06 15:19:48 -Mapped "{[/sys/menu/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.MenuController.update(com.bootdo.system.domain.MenuDO)
2019-06-06 15:19:48 -Mapped "{[/sys/menu/list]}" onto java.util.List<com.bootdo.system.domain.MenuDO> com.bootdo.system.controller.MenuController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-06-06 15:19:48 -Mapped "{[/sys/menu/save],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.MenuController.save(com.bootdo.system.domain.MenuDO)
2019-06-06 15:19:48 -Mapped "{[/sys/menu/tree/{roleId}],methods=[GET]}" onto com.bootdo.common.domain.Tree<com.bootdo.system.domain.MenuDO> com.bootdo.system.controller.MenuController.tree(java.lang.Long)
2019-06-06 15:19:48 -Mapped "{[/sys/menu/tree],methods=[GET]}" onto com.bootdo.common.domain.Tree<com.bootdo.system.domain.MenuDO> com.bootdo.system.controller.MenuController.tree()
2019-06-06 15:19:48 -Mapped "{[/sys/menu/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.MenuController.edit(org.springframework.ui.Model,java.lang.Long)
2019-06-06 15:19:48 -Mapped "{[/sys/menu],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.MenuController.menu(org.springframework.ui.Model)
2019-06-06 15:19:48 -Mapped "{[/sys/role/add],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.RoleController.add()
2019-06-06 15:19:48 -Mapped "{[/sys/role/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.update(com.bootdo.system.domain.RoleDO)
2019-06-06 15:19:48 -Mapped "{[/sys/role/list],methods=[GET]}" onto java.util.List<com.bootdo.system.domain.RoleDO> com.bootdo.system.controller.RoleController.list()
2019-06-06 15:19:48 -Mapped "{[/sys/role/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.save(java.lang.Long)
2019-06-06 15:19:48 -Mapped "{[/sys/role/save],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.save(com.bootdo.system.domain.RoleDO)
2019-06-06 15:19:48 -Mapped "{[/sys/role/batchRemove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.batchRemove(java.lang.Long[])
2019-06-06 15:19:48 -Mapped "{[/sys/role],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.RoleController.role()
2019-06-06 15:19:48 -Mapped "{[/sys/role/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.RoleController.edit(java.lang.Long,org.springframework.ui.Model)
2019-06-06 15:19:48 -Mapped "{[/sys/online/list]}" onto public java.util.List<com.bootdo.system.domain.UserOnline> com.bootdo.system.controller.SessionController.list()
2019-06-06 15:19:48 -Mapped "{[/sys/online],methods=[GET]}" onto public java.lang.String com.bootdo.system.controller.SessionController.online()
2019-06-06 15:19:48 -Mapped "{[/sys/online/forceLogout/{sessionId}]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.SessionController.forceLogout(java.lang.String,org.springframework.web.servlet.mvc.support.RedirectAttributes)
2019-06-06 15:19:48 -Mapped "{[/sys/online/sessionList]}" onto public java.util.Collection<org.apache.shiro.session.Session> com.bootdo.system.controller.SessionController.sessionList()
2019-06-06 15:19:48 -Mapped "{[/sys/user/exit],methods=[POST]}" onto boolean com.bootdo.system.controller.UserController.exit(java.util.Map<java.lang.String, java.lang.Object>)
2019-06-06 15:19:48 -Mapped "{[/sys/user/add],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.add(org.springframework.ui.Model)
2019-06-06 15:19:48 -Mapped "{[/sys/user/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.remove(java.lang.Long)
2019-06-06 15:19:48 -Mapped "{[/sys/user/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.update(com.bootdo.system.domain.UserDO)
2019-06-06 15:19:48 -Mapped "{[/sys/user/list],methods=[GET]}" onto com.bootdo.common.utils.PageUtils com.bootdo.system.controller.UserController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-06-06 15:19:48 -Mapped "{[/sys/user/save],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.save(com.bootdo.system.domain.UserDO)
2019-06-06 15:19:48 -Mapped "{[/sys/user/batchRemove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.batchRemove(java.lang.Long[])
2019-06-06 15:19:48 -Mapped "{[/sys/user/tree],methods=[GET]}" onto public com.bootdo.common.domain.Tree<com.bootdo.system.domain.DeptDO> com.bootdo.system.controller.UserController.tree()
2019-06-06 15:19:48 -Mapped "{[/sys/user],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.user(org.springframework.ui.Model)
2019-06-06 15:19:48 -Mapped "{[/sys/user/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.edit(org.springframework.ui.Model,java.lang.Long)
2019-06-06 15:19:48 -Mapped "{[/sys/user/treeView],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.treeView()
2019-06-06 15:19:48 -Mapped "{[/sys/user/personal],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.personal(org.springframework.ui.Model)
2019-06-06 15:19:48 -Mapped "{[/sys/user/uploadImg],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.uploadImg(org.springframework.web.multipart.MultipartFile,java.lang.String,javax.servlet.http.HttpServletRequest)
2019-06-06 15:19:48 -Mapped "{[/sys/user/adminResetPwd],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.adminResetPwd(com.bootdo.system.vo.UserVO)
2019-06-06 15:19:48 -Mapped "{[/sys/user/updatePeronal],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.updatePeronal(com.bootdo.system.domain.UserDO)
2019-06-06 15:19:48 -Mapped "{[/sys/user/resetPwd],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.resetPwd(com.bootdo.system.vo.UserVO)
2019-06-06 15:19:48 -Mapped "{[/sys/user/resetPwd/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.resetPwd(java.lang.Long,org.springframework.ui.Model)
2019-06-06 15:19:48 -Mapped "{[/file/downImport/{importType}],methods=[GET]}" onto public void com.bootdo.temple.controller.TempletController.downImport(javax.servlet.http.HttpServletResponse,java.lang.String)
2019-06-06 15:19:48 -Mapped "{[/water/water/add],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterController.add()
2019-06-06 15:19:48 -Mapped "{[/water/water/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterController.remove(java.lang.Long)
2019-06-06 15:19:48 -Mapped "{[/water/water/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterController.remove(java.lang.Long[])
2019-06-06 15:19:48 -Mapped "{[/water/water/update]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterController.update(com.bootdo.water.domain.WaterDO)
2019-06-06 15:19:48 -Mapped "{[/water/water/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.water.controller.WaterController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-06-06 15:19:48 -Mapped "{[/water/water/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterController.save(com.bootdo.water.domain.WaterDO)
2019-06-06 15:19:48 -Mapped "{[/water/water/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterController.edit(java.lang.Long,org.springframework.ui.Model)
2019-06-06 15:19:48 -Mapped "{[/water/water/exprotWater],methods=[GET]}" onto public void com.bootdo.water.controller.WaterController.exprotExcel(com.bootdo.water.vo.WaterVo,javax.servlet.http.HttpServletResponse)
2019-06-06 15:19:48 -Mapped "{[/water/water],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterController.Water()
2019-06-06 15:19:48 -Mapped "{[/water/waterInto/exprotWaterIntoExcel],methods=[GET]}" onto public void com.bootdo.water.controller.WaterIntoController.exprotExcel(com.bootdo.water.vo.WaterVo,javax.servlet.http.HttpServletResponse)
2019-06-06 15:19:48 -Mapped "{[/water/waterInto],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterIntoController.WaterInto()
2019-06-06 15:19:48 -Mapped "{[/water/waterInto/importWaterIntoExcel],methods=[POST]}" onto public java.lang.String com.bootdo.water.controller.WaterIntoController.importWaterIntoExcel(org.springframework.web.multipart.MultipartFile,com.bootdo.water.vo.WaterVo,javax.servlet.http.HttpServletResponse) throws java.lang.Exception
2019-06-06 15:19:48 -Mapped "{[/water/waterPrice/add],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterPriceController.add()
2019-06-06 15:19:48 -Mapped "{[/water/waterPrice/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterPriceController.remove(java.lang.Long)
2019-06-06 15:19:48 -Mapped "{[/water/waterPrice/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterPriceController.remove(java.lang.Long[])
2019-06-06 15:19:48 -Mapped "{[/water/waterPrice/update]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterPriceController.update(com.bootdo.water.domain.WaterPriceDO)
2019-06-06 15:19:48 -Mapped "{[/water/waterPrice/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.water.controller.WaterPriceController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-06-06 15:19:48 -Mapped "{[/water/waterPrice/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterPriceController.save(com.bootdo.water.domain.WaterPriceDO)
2019-06-06 15:19:48 -Mapped "{[/water/waterPrice],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterPriceController.WaterPrice()
2019-06-06 15:19:48 -Mapped "{[/water/waterPrice/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterPriceController.edit(java.lang.Long,org.springframework.ui.Model)
2019-06-06 15:19:48 -Mapped "{[/water/waterUpLoad/createWaterExcel],methods=[POST]}" onto public java.lang.String com.bootdo.water.controller.WaterUpLoadController.createWaterExcel(com.bootdo.water.domain.WaterDO) throws java.lang.Exception
2019-06-06 15:19:48 -Mapped "{[/water/waterUpLoad],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterUpLoadController.WaterUpLoad()
2019-06-06 15:19:48 -Mapped "{[/water/waterUpLoad/importWaterExcel]}" onto public java.lang.String com.bootdo.water.controller.WaterUpLoadController.importWaterExcel(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)
2019-06-06 15:19:48 -Mapped "{[/water/waterUpLoad/exprotWaterExcel],methods=[GET]}" onto public void com.bootdo.water.controller.WaterUpLoadController.exprotWaterExcel(com.bootdo.water.vo.WaterVo,javax.servlet.http.HttpServletResponse)
2019-06-06 15:19:48 -Mapped "{[/v2/api-docs],methods=[GET],produces=[application/json || application/hal+json]}" onto public org.springframework.http.ResponseEntity<springfox.documentation.spring.web.json.Json> springfox.documentation.swagger2.web.Swagger2Controller.getDocumentation(java.lang.String,javax.servlet.http.HttpServletRequest)
2019-06-06 15:19:48 -Mapped "{[/swagger-resources/configuration/ui]}" onto org.springframework.http.ResponseEntity<springfox.documentation.swagger.web.UiConfiguration> springfox.documentation.swagger.web.ApiResourceController.uiConfiguration()
2019-06-06 15:19:48 -Mapped "{[/swagger-resources]}" onto org.springframework.http.ResponseEntity<java.util.List<springfox.documentation.swagger.web.SwaggerResource>> springfox.documentation.swagger.web.ApiResourceController.swaggerResources()
2019-06-06 15:19:48 -Mapped "{[/swagger-resources/configuration/security]}" onto org.springframework.http.ResponseEntity<springfox.documentation.swagger.web.SecurityConfiguration> springfox.documentation.swagger.web.ApiResourceController.securityConfiguration()
2019-06-06 15:19:49 -Initializing ExecutorService  'messageBrokerTaskScheduler'
2019-06-06 15:19:49 -Mapped URL path [/endpointChat/**] onto handler of type [class org.springframework.web.socket.sockjs.support.SockJsHttpRequestHandler]
2019-06-06 15:19:49 -Initializing ExecutorService  'brokerChannelExecutor'
2019-06-06 15:19:50 -Mapped URL path [/**/favicon.ico] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-06-06 15:19:51 -Looking for @ControllerAdvice: org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@41e350f1: startup date [Thu Jun 06 15:19:15 CST 2019]; root of context hierarchy
2019-06-06 15:19:51 -Mapped URL path [/webjars/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-06-06 15:19:51 -Mapped URL path [/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-06-06 15:19:51 -Detected @ExceptionHandler methods in BDExceptionHandler
2019-06-06 15:19:53 -[THYMELEAF][main] Template Mode 'LEGACYHTML5' is deprecated. Using Template Mode 'HTML' instead.
2019-06-06 15:19:57 -Registering beans for JMX exposure on startup
2019-06-06 15:19:57 -Bean with name 'dataSource' has been autodetected for JMX exposure
2019-06-06 15:19:57 -Located MBean 'dataSource': registering with JMX server as MBean [com.alibaba.druid.pool:name=dataSource,type=DruidDataSource]
2019-06-06 15:19:57 -Starting beans in phase 2147483647
2019-06-06 15:19:57 -Context refreshed
2019-06-06 15:19:57 -Found 1 custom documentation plugin(s)
2019-06-06 15:19:58 -Scanning for api listing references
2019-06-06 15:19:59 -Generating unique operation named: removeUsingPOST_1
2019-06-06 15:19:59 -Generating unique operation named: addUsingGET_1
2019-06-06 15:20:00 -Generating unique operation named: editUsingGET_1
2019-06-06 15:20:00 -Generating unique operation named: listUsingGET_1
2019-06-06 15:20:00 -Generating unique operation named: removeUsingPOST_2
2019-06-06 15:20:00 -Generating unique operation named: removeUsingPOST_3
2019-06-06 15:20:00 -Generating unique operation named: saveUsingPOST_1
2019-06-06 15:20:00 -Generating unique operation named: updateUsingGET_1
2019-06-06 15:20:00 -Generating unique operation named: updateUsingHEAD_1
2019-06-06 15:20:00 -Generating unique operation named: updateUsingPOST_1
2019-06-06 15:20:00 -Generating unique operation named: updateUsingPUT_1
2019-06-06 15:20:00 -Generating unique operation named: updateUsingPATCH_1
2019-06-06 15:20:00 -Generating unique operation named: updateUsingDELETE_1
2019-06-06 15:20:00 -Generating unique operation named: updateUsingOPTIONS_1
2019-06-06 15:20:00 -Generating unique operation named: updateUsingTRACE_1
2019-06-06 15:20:00 -Generating unique operation named: addUsingGET_2
2019-06-06 15:20:00 -Generating unique operation named: editUsingGET_2
2019-06-06 15:20:00 -Generating unique operation named: listUsingGET_2
2019-06-06 15:20:00 -Generating unique operation named: removeUsingPOST_4
2019-06-06 15:20:00 -Generating unique operation named: removeUsingPOST_5
2019-06-06 15:20:00 -Generating unique operation named: saveUsingPOST_2
2019-06-06 15:20:00 -Generating unique operation named: updateUsingPOST_2
2019-06-06 15:20:00 -Generating unique operation named: exprotExcelUsingGET_1
2019-06-06 15:20:00 -Generating unique operation named: addUsingGET_3
2019-06-06 15:20:01 -Generating unique operation named: editUsingGET_3
2019-06-06 15:20:01 -Generating unique operation named: listUsingGET_3
2019-06-06 15:20:01 -Generating unique operation named: removeUsingPOST_6
2019-06-06 15:20:01 -Generating unique operation named: removeUsingPOST_7
2019-06-06 15:20:01 -Generating unique operation named: saveUsingPOST_3
2019-06-06 15:20:01 -Generating unique operation named: updateUsingGET_2
2019-06-06 15:20:01 -Generating unique operation named: updateUsingHEAD_2
2019-06-06 15:20:01 -Generating unique operation named: updateUsingPOST_3
2019-06-06 15:20:01 -Generating unique operation named: updateUsingPUT_2
2019-06-06 15:20:01 -Generating unique operation named: updateUsingPATCH_2
2019-06-06 15:20:01 -Generating unique operation named: updateUsingDELETE_2
2019-06-06 15:20:01 -Generating unique operation named: updateUsingOPTIONS_2
2019-06-06 15:20:01 -Generating unique operation named: updateUsingTRACE_2
2019-06-06 15:20:01 -Generating unique operation named: addUsingGET_4
2019-06-06 15:20:01 -Generating unique operation named: editUsingGET_4
2019-06-06 15:20:01 -Generating unique operation named: listUsingGET_4
2019-06-06 15:20:01 -Generating unique operation named: removeUsingPOST_8
2019-06-06 15:20:01 -Generating unique operation named: removeUsingPOST_9
2019-06-06 15:20:01 -Generating unique operation named: saveUsingPOST_4
2019-06-06 15:20:01 -Generating unique operation named: updateUsingGET_3
2019-06-06 15:20:01 -Generating unique operation named: updateUsingHEAD_3
2019-06-06 15:20:01 -Generating unique operation named: updateUsingPOST_4
2019-06-06 15:20:01 -Generating unique operation named: updateUsingPUT_3
2019-06-06 15:20:01 -Generating unique operation named: updateUsingPATCH_3
2019-06-06 15:20:01 -Generating unique operation named: updateUsingDELETE_3
2019-06-06 15:20:01 -Generating unique operation named: updateUsingOPTIONS_3
2019-06-06 15:20:01 -Generating unique operation named: updateUsingTRACE_3
2019-06-06 15:20:01 -Generating unique operation named: ElecUsingGET_1
2019-06-06 15:20:01 -Generating unique operation named: addUsingGET_5
2019-06-06 15:20:01 -Generating unique operation named: editUsingGET_5
2019-06-06 15:20:02 -Generating unique operation named: listUsingGET_5
2019-06-06 15:20:02 -Generating unique operation named: removeUsingPOST_10
2019-06-06 15:20:02 -Generating unique operation named: removeUsingPOST_11
2019-06-06 15:20:02 -Generating unique operation named: saveUsingPOST_5
2019-06-06 15:20:02 -Generating unique operation named: updateUsingGET_4
2019-06-06 15:20:02 -Generating unique operation named: updateUsingHEAD_4
2019-06-06 15:20:02 -Generating unique operation named: updateUsingPOST_5
2019-06-06 15:20:02 -Generating unique operation named: updateUsingPUT_4
2019-06-06 15:20:02 -Generating unique operation named: updateUsingPATCH_4
2019-06-06 15:20:02 -Generating unique operation named: updateUsingDELETE_4
2019-06-06 15:20:02 -Generating unique operation named: updateUsingOPTIONS_4
2019-06-06 15:20:02 -Generating unique operation named: updateUsingTRACE_4
2019-06-06 15:20:02 -Generating unique operation named: editUsingGET_6
2019-06-06 15:20:02 -Generating unique operation named: listUsingGET_6
2019-06-06 15:20:02 -Generating unique operation named: updateUsingPOST_6
2019-06-06 15:20:02 -Generating unique operation named: addUsingGET_6
2019-06-06 15:20:02 -Generating unique operation named: editUsingGET_7
2019-06-06 15:20:02 -Generating unique operation named: exprotExcelUsingGET_2
2019-06-06 15:20:02 -Generating unique operation named: listUsingGET_7
2019-06-06 15:20:02 -Generating unique operation named: removeUsingPOST_12
2019-06-06 15:20:02 -Generating unique operation named: removeUsingPOST_13
2019-06-06 15:20:02 -Generating unique operation named: saveUsingPOST_6
2019-06-06 15:20:02 -Generating unique operation named: updateUsingGET_5
2019-06-06 15:20:02 -Generating unique operation named: updateUsingHEAD_5
2019-06-06 15:20:02 -Generating unique operation named: updateUsingPOST_7
2019-06-06 15:20:02 -Generating unique operation named: updateUsingPUT_5
2019-06-06 15:20:02 -Generating unique operation named: updateUsingPATCH_5
2019-06-06 15:20:02 -Generating unique operation named: updateUsingDELETE_5
2019-06-06 15:20:02 -Generating unique operation named: updateUsingOPTIONS_5
2019-06-06 15:20:02 -Generating unique operation named: updateUsingTRACE_5
2019-06-06 15:20:02 -Generating unique operation named: exprotExcelUsingGET_3
2019-06-06 15:20:02 -Generating unique operation named: addUsingGET_7
2019-06-06 15:20:02 -Generating unique operation named: editUsingGET_8
2019-06-06 15:20:02 -Generating unique operation named: listUsingGET_8
2019-06-06 15:20:02 -Generating unique operation named: removeUsingPOST_14
2019-06-06 15:20:03 -Generating unique operation named: removeUsingPOST_15
2019-06-06 15:20:03 -Generating unique operation named: saveUsingPOST_7
2019-06-06 15:20:03 -Generating unique operation named: updateUsingGET_6
2019-06-06 15:20:03 -Generating unique operation named: updateUsingHEAD_6
2019-06-06 15:20:03 -Generating unique operation named: updateUsingPOST_8
2019-06-06 15:20:03 -Generating unique operation named: updateUsingPUT_6
2019-06-06 15:20:03 -Generating unique operation named: updateUsingPATCH_6
2019-06-06 15:20:03 -Generating unique operation named: updateUsingDELETE_6
2019-06-06 15:20:03 -Generating unique operation named: updateUsingOPTIONS_6
2019-06-06 15:20:03 -Generating unique operation named: updateUsingTRACE_6
2019-06-06 15:20:03 -Generating unique operation named: addUsingGET_8
2019-06-06 15:20:03 -Generating unique operation named: editUsingGET_9
2019-06-06 15:20:03 -Generating unique operation named: listUsingGET_9
2019-06-06 15:20:03 -Generating unique operation named: removeUsingPOST_16
2019-06-06 15:20:03 -Generating unique operation named: removeUsingPOST_17
2019-06-06 15:20:03 -Generating unique operation named: saveUsingPOST_8
2019-06-06 15:20:03 -Generating unique operation named: updateUsingGET_7
2019-06-06 15:20:03 -Generating unique operation named: updateUsingHEAD_7
2019-06-06 15:20:03 -Generating unique operation named: updateUsingPOST_9
2019-06-06 15:20:03 -Generating unique operation named: updateUsingPUT_7
2019-06-06 15:20:03 -Generating unique operation named: updateUsingPATCH_7
2019-06-06 15:20:03 -Generating unique operation named: updateUsingDELETE_7
2019-06-06 15:20:03 -Generating unique operation named: updateUsingOPTIONS_7
2019-06-06 15:20:03 -Generating unique operation named: updateUsingTRACE_7
2019-06-06 15:20:03 -Generating unique operation named: addUsingGET_9
2019-06-06 15:20:03 -Generating unique operation named: editUsingGET_10
2019-06-06 15:20:03 -Generating unique operation named: infoUsingGET_1
2019-06-06 15:20:03 -Generating unique operation named: infoUsingHEAD_1
2019-06-06 15:20:03 -Generating unique operation named: infoUsingPOST_1
2019-06-06 15:20:03 -Generating unique operation named: infoUsingPUT_1
2019-06-06 15:20:03 -Generating unique operation named: infoUsingPATCH_1
2019-06-06 15:20:03 -Generating unique operation named: infoUsingDELETE_1
2019-06-06 15:20:03 -Generating unique operation named: infoUsingOPTIONS_1
2019-06-06 15:20:03 -Generating unique operation named: infoUsingTRACE_1
2019-06-06 15:20:03 -Generating unique operation named: listUsingGET_10
2019-06-06 15:20:03 -Generating unique operation named: removeUsingPOST_18
2019-06-06 15:20:03 -Generating unique operation named: removeUsingPOST_19
2019-06-06 15:20:03 -Generating unique operation named: saveUsingPOST_9
2019-06-06 15:20:03 -Generating unique operation named: updateUsingPOST_10
2019-06-06 15:20:03 -Generating unique operation named: listUsingGET_11
2019-06-06 15:20:03 -Generating unique operation named: removeUsingPOST_20
2019-06-06 15:20:03 -Generating unique operation named: welcomeUsingGET_1
2019-06-06 15:20:03 -Generating unique operation named: addUsingGET_10
2019-06-06 15:20:03 -Generating unique operation named: editUsingGET_11
2019-06-06 15:20:03 -Generating unique operation named: listUsingGET_12
2019-06-06 15:20:03 -Generating unique operation named: removeUsingPOST_21
2019-06-06 15:20:03 -Generating unique operation named: saveUsingPOST_10
2019-06-06 15:20:03 -Generating unique operation named: treeUsingGET_1
2019-06-06 15:20:03 -Generating unique operation named: treeUsingGET_2
2019-06-06 15:20:03 -Generating unique operation named: updateUsingPOST_11
2019-06-06 15:20:04 -Generating unique operation named: addUsingGET_11
2019-06-06 15:20:04 -Generating unique operation named: editUsingGET_12
2019-06-06 15:20:04 -Generating unique operation named: listUsingGET_13
2019-06-06 15:20:04 -Generating unique operation named: removeUsingPOST_22
2019-06-06 15:20:04 -Generating unique operation named: removeUsingPOST_23
2019-06-06 15:20:04 -Generating unique operation named: updateUsingPOST_12
2019-06-06 15:20:04 -Generating unique operation named: addUsingGET_12
2019-06-06 15:20:04 -Generating unique operation named: editUsingGET_13
2019-06-06 15:20:04 -Generating unique operation named: listUsingGET_14
2019-06-06 15:20:04 -Generating unique operation named: removeUsingPOST_24
2019-06-06 15:20:04 -Generating unique operation named: removeUsingPOST_25
2019-06-06 15:20:04 -Generating unique operation named: saveUsingPOST_11
2019-06-06 15:20:04 -Generating unique operation named: updateUsingGET_8
2019-06-06 15:20:04 -Generating unique operation named: updateUsingHEAD_8
2019-06-06 15:20:04 -Generating unique operation named: updateUsingPOST_13
2019-06-06 15:20:04 -Generating unique operation named: updateUsingPUT_8
2019-06-06 15:20:04 -Generating unique operation named: updateUsingPATCH_8
2019-06-06 15:20:04 -Generating unique operation named: updateUsingDELETE_8
2019-06-06 15:20:04 -Generating unique operation named: updateUsingOPTIONS_8
2019-06-06 15:20:04 -Generating unique operation named: updateUsingTRACE_8
2019-06-06 15:20:04 -Generating unique operation named: addUsingGET_13
2019-06-06 15:20:04 -Generating unique operation named: batchRemoveUsingPOST_1
2019-06-06 15:20:04 -Generating unique operation named: editUsingGET_14
2019-06-06 15:20:04 -Generating unique operation named: listUsingGET_15
2019-06-06 15:20:04 -Generating unique operation named: printEditUsingGET_1
2019-06-06 15:20:04 -Generating unique operation named: removeUsingPOST_26
2019-06-06 15:20:04 -Generating unique operation named: saveUsingPOST_12
2019-06-06 15:20:04 -Generating unique operation named: updateUsingGET_9
2019-06-06 15:20:04 -Generating unique operation named: updateUsingHEAD_9
2019-06-06 15:20:04 -Generating unique operation named: updateUsingPOST_14
2019-06-06 15:20:04 -Generating unique operation named: updateUsingPUT_9
2019-06-06 15:20:04 -Generating unique operation named: updateUsingPATCH_9
2019-06-06 15:20:04 -Generating unique operation named: updateUsingDELETE_9
2019-06-06 15:20:04 -Generating unique operation named: updateUsingOPTIONS_9
2019-06-06 15:20:04 -Generating unique operation named: updateUsingTRACE_9
2019-06-06 15:20:04 -Generating unique operation named: addUsingGET_14
2019-06-06 15:20:04 -Generating unique operation named: batchRemoveUsingPOST_2
2019-06-06 15:20:04 -Generating unique operation named: editUsingGET_15
2019-06-06 15:20:04 -Generating unique operation named: listUsingGET_16
2019-06-06 15:20:04 -Generating unique operation named: saveUsingPOST_13
2019-06-06 15:20:04 -Generating unique operation named: saveUsingPOST_14
2019-06-06 15:20:04 -Generating unique operation named: updateUsingPOST_15
2019-06-06 15:20:04 -Generating unique operation named: listUsingGET_17
2019-06-06 15:20:04 -Generating unique operation named: listUsingHEAD_1
2019-06-06 15:20:04 -Generating unique operation named: listUsingPOST_1
2019-06-06 15:20:04 -Generating unique operation named: listUsingPUT_1
2019-06-06 15:20:04 -Generating unique operation named: listUsingPATCH_1
2019-06-06 15:20:04 -Generating unique operation named: listUsingDELETE_1
2019-06-06 15:20:04 -Generating unique operation named: listUsingOPTIONS_1
2019-06-06 15:20:04 -Generating unique operation named: listUsingTRACE_1
2019-06-06 15:20:04 -Generating unique operation named: countDDUsingGET_1
2019-06-06 15:20:04 -Generating unique operation named: exportDDUsingGET_1
2019-06-06 15:20:05 -Generating unique operation named: exportElecYYUsingGET_1
2019-06-06 15:20:05 -Generating unique operation named: addUsingGET_15
2019-06-06 15:20:05 -Generating unique operation named: batchRemoveUsingPOST_3
2019-06-06 15:20:05 -Generating unique operation named: editUsingGET_16
2019-06-06 15:20:05 -Generating unique operation named: listUsingGET_18
2019-06-06 15:20:05 -Generating unique operation named: removeUsingPOST_27
2019-06-06 15:20:05 -Generating unique operation named: saveUsingPOST_15
2019-06-06 15:20:05 -Generating unique operation named: treeUsingGET_3
2019-06-06 15:20:05 -Generating unique operation named: treeViewUsingGET_1
2019-06-06 15:20:05 -Generating unique operation named: updateUsingPOST_16
2019-06-06 15:20:05 -Generating unique operation named: addUsingGET_16
2019-06-06 15:20:05 -Generating unique operation named: editUsingGET_17
2019-06-06 15:20:05 -Generating unique operation named: exprotExcelUsingGET_4
2019-06-06 15:20:05 -Generating unique operation named: listUsingGET_19
2019-06-06 15:20:05 -Generating unique operation named: removeUsingPOST_28
2019-06-06 15:20:05 -Generating unique operation named: removeUsingPOST_29
2019-06-06 15:20:05 -Generating unique operation named: saveUsingPOST_16
2019-06-06 15:20:05 -Generating unique operation named: updateUsingGET_10
2019-06-06 15:20:05 -Generating unique operation named: updateUsingHEAD_10
2019-06-06 15:20:05 -Generating unique operation named: updateUsingPOST_17
2019-06-06 15:20:05 -Generating unique operation named: updateUsingPUT_10
2019-06-06 15:20:05 -Generating unique operation named: updateUsingPATCH_10
2019-06-06 15:20:05 -Generating unique operation named: updateUsingDELETE_10
2019-06-06 15:20:05 -Generating unique operation named: updateUsingOPTIONS_10
2019-06-06 15:20:05 -Generating unique operation named: updateUsingTRACE_10
2019-06-06 15:20:05 -Generating unique operation named: exprotExcelUsingGET_5
2019-06-06 15:20:05 -Generating unique operation named: addUsingGET_17
2019-06-06 15:20:05 -Generating unique operation named: editUsingGET_18
2019-06-06 15:20:05 -Generating unique operation named: listUsingGET_20
2019-06-06 15:20:05 -Generating unique operation named: removeUsingPOST_30
2019-06-06 15:20:05 -Generating unique operation named: removeUsingPOST_31
2019-06-06 15:20:05 -Generating unique operation named: saveUsingPOST_17
2019-06-06 15:20:05 -Generating unique operation named: updateUsingGET_11
2019-06-06 15:20:05 -Generating unique operation named: updateUsingHEAD_11
2019-06-06 15:20:05 -Generating unique operation named: updateUsingPOST_18
2019-06-06 15:20:05 -Generating unique operation named: updateUsingPUT_11
2019-06-06 15:20:05 -Generating unique operation named: updateUsingPATCH_11
2019-06-06 15:20:05 -Generating unique operation named: updateUsingDELETE_11
2019-06-06 15:20:05 -Generating unique operation named: updateUsingOPTIONS_11
2019-06-06 15:20:05 -Generating unique operation named: updateUsingTRACE_11
2019-06-06 15:20:05 -Generating unique operation named: addUsingGET_18
2019-06-06 15:20:05 -Generating unique operation named: editUsingGET_19
2019-06-06 15:20:05 -Generating unique operation named: listUsingGET_21
2019-06-06 15:20:05 -Generating unique operation named: removeUsingPOST_32
2019-06-06 15:20:05 -Generating unique operation named: removeUsingPOST_33
2019-06-06 15:20:05 -Generating unique operation named: saveUsingPOST_18
2019-06-06 15:20:05 -Generating unique operation named: updateUsingGET_12
2019-06-06 15:20:05 -Generating unique operation named: updateUsingHEAD_12
2019-06-06 15:20:05 -Generating unique operation named: updateUsingPOST_19
2019-06-06 15:20:05 -Generating unique operation named: updateUsingPUT_12
2019-06-06 15:20:05 -Generating unique operation named: updateUsingPATCH_12
2019-06-06 15:20:05 -Generating unique operation named: updateUsingDELETE_12
2019-06-06 15:20:05 -Generating unique operation named: updateUsingOPTIONS_12
2019-06-06 15:20:05 -Generating unique operation named: updateUsingTRACE_12
2019-06-06 15:20:05 -Starting Quartz Scheduler now
2019-06-06 15:20:05 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED started.
2019-06-06 15:20:05 -Starting...
2019-06-06 15:20:05 -BrokerAvailabilityEvent[available=true, SimpleBrokerMessageHandler [DefaultSubscriptionRegistry[cache[0 destination(s)], registry[0 sessions]]]]
2019-06-06 15:20:05 -Started.
2019-06-06 15:20:05 -Starting ProtocolHandler ["http-nio-8081"]
2019-06-06 15:20:05 -Using a shared selector for servlet write/read
2019-06-06 15:20:05 -Tomcat started on port(s): 8081 (http) with context path ''
2019-06-06 15:20:05 -Started BootdoApplication in 53.844 seconds (JVM running for 55.853)
2019-06-06 15:20:06 -==>  Preparing: select `id`,`cron_expression`,`method_name`,`is_concurrent`,`description`,`update_by`,`bean_class`,`create_date`,`job_status`,`job_group`,`update_date`,`create_by`,`spring_bean`,`job_name` from sys_task order by id desc 
2019-06-06 15:20:06 -==> Parameters: 
2019-06-06 15:20:06 -<==      Total: 1
2019-06-06 15:20:49 -WebSocketSession[0 current WS(0)-HttpStream(0)-HttpPoll(0), 0 total, 0 closed abnormally (0 connect failure, 0 send limit, 0 transport error)], stompSubProtocol[processed CONNECT(0)-CONNECTED(0)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], outboundChannelpool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], sockJsScheduler[pool size = 1, active threads = 1, queued tasks = 0, completed tasks = 0]
2019-06-06 15:20:52 -Initializing Spring FrameworkServlet 'dispatcherServlet'
2019-06-06 15:20:52 -FrameworkServlet 'dispatcherServlet': initialization started
2019-06-06 15:20:52 -FrameworkServlet 'dispatcherServlet': initialization completed in 56 ms
2019-06-06 15:20:52 -Enabling session validation scheduler...
2019-06-06 15:20:52 -请求地址 : http://localhost:8081/login;JSESSIONID=7c9c4df1-d0f3-4edd-834e-e7a62898ab4c
2019-06-06 15:20:52 -HTTP METHOD : GET
2019-06-06 15:20:52 -CLASS_METHOD : com.bootdo.system.controller.LoginController.login
2019-06-06 15:20:52 -参数 : [{}]
2019-06-06 15:20:52 -耗时 : 4
2019-06-06 15:20:52 -返回值 : login
2019-06-06 15:20:54 -请求地址 : http://localhost:8081/login;JSESSIONID=7c9c4df1-d0f3-4edd-834e-e7a62898ab4c
2019-06-06 15:20:54 -HTTP METHOD : GET
2019-06-06 15:20:54 -CLASS_METHOD : com.bootdo.system.controller.LoginController.login
2019-06-06 15:20:54 -参数 : [{}]
2019-06-06 15:20:54 -耗时 : 1
2019-06-06 15:20:54 -返回值 : login
2019-06-06 15:20:54 -请求地址 : http://localhost:8081/getVerify
2019-06-06 15:20:54 -HTTP METHOD : GET
2019-06-06 15:20:54 -CLASS_METHOD : com.bootdo.system.controller.LoginController.getVerify
2019-06-06 15:20:54 -参数 : [org.apache.shiro.web.servlet.ShiroHttpServletRequest@9433be, org.apache.shiro.web.servlet.ShiroHttpServletResponse@e53dddc]
2019-06-06 15:20:54 -请求地址 : http://localhost:8081/getVerify
2019-06-06 15:20:54 -HTTP METHOD : GET
2019-06-06 15:20:54 -CLASS_METHOD : com.bootdo.system.controller.LoginController.getVerify
2019-06-06 15:20:54 -参数 : [org.apache.shiro.web.servlet.ShiroHttpServletRequest@2f931a5f, org.apache.shiro.web.servlet.ShiroHttpServletResponse@39288e54]
2019-06-06 15:21:00 -2090
2019-06-06 15:21:00 -5658
2019-06-06 15:21:00 -耗时 : 6473
2019-06-06 15:21:00 -耗时 : 6740
2019-06-06 15:21:00 -返回值 : null
2019-06-06 15:21:00 -返回值 : null
2019-06-06 15:21:07 -请求地址 : http://localhost:8081/login
2019-06-06 15:21:07 -HTTP METHOD : POST
2019-06-06 15:21:07 -CLASS_METHOD : com.bootdo.system.controller.LoginController.ajaxLogin
2019-06-06 15:21:07 -参数 : [admin, 111111, 5658, org.apache.shiro.web.servlet.ShiroHttpServletRequest@7814e80e]
2019-06-06 15:21:07 -耗时 : 9
2019-06-06 15:21:07 -返回值 : {msg=请输入正确的验证码, code=500}
2019-06-06 15:21:07 -More than one TaskExecutor bean found within the context, and none is named 'taskExecutor'. Mark one of them as primary or name it 'taskExecutor' (possibly as an alias) in order to use it for async processing: [clientInboundChannelExecutor, clientOutboundChannelExecutor, brokerChannelExecutor, messageBrokerTaskScheduler]
2019-06-06 15:21:07 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-06-06 15:21:07 -==> Parameters: -1(Long), 获取用户信息为空(String), 登录(String), 9(Integer), com.bootdo.system.controller.LoginController.ajaxLogin()(String), null, 127.0.0.1(String), 2019-06-06 15:21:07.803(Timestamp)
2019-06-06 15:21:08 -<==    Updates: 1
2019-06-06 15:21:15 -请求地址 : http://localhost:8081/login
2019-06-06 15:21:15 -HTTP METHOD : POST
2019-06-06 15:21:15 -CLASS_METHOD : com.bootdo.system.controller.LoginController.ajaxLogin
2019-06-06 15:21:15 -参数 : [admin, 111111, 5658, org.apache.shiro.web.servlet.ShiroHttpServletRequest@14e470d9]
2019-06-06 15:21:15 -耗时 : 0
2019-06-06 15:21:15 -返回值 : {msg=请输入正确的验证码, code=500}
2019-06-06 15:21:15 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-06-06 15:21:15 -==> Parameters: -1(Long), 获取用户信息为空(String), 登录(String), 1(Integer), com.bootdo.system.controller.LoginController.ajaxLogin()(String), null, 127.0.0.1(String), 2019-06-06 15:21:15.028(Timestamp)
2019-06-06 15:21:15 -<==    Updates: 1
2019-06-06 15:21:17 -请求地址 : http://localhost:8081/login;JSESSIONID=7c9c4df1-d0f3-4edd-834e-e7a62898ab4c
2019-06-06 15:21:17 -HTTP METHOD : GET
2019-06-06 15:21:17 -CLASS_METHOD : com.bootdo.system.controller.LoginController.login
2019-06-06 15:21:17 -参数 : [{}]
2019-06-06 15:21:17 -耗时 : 0
2019-06-06 15:21:17 -返回值 : login
2019-06-06 15:21:17 -请求地址 : http://localhost:8081/getVerify
2019-06-06 15:21:17 -HTTP METHOD : GET
2019-06-06 15:21:17 -CLASS_METHOD : com.bootdo.system.controller.LoginController.getVerify
2019-06-06 15:21:17 -参数 : [org.apache.shiro.web.servlet.ShiroHttpServletRequest@433de241, org.apache.shiro.web.servlet.ShiroHttpServletResponse@7bfbecd3]
2019-06-06 15:21:17 -9953
2019-06-06 15:21:17 -耗时 : 13
2019-06-06 15:21:17 -返回值 : null
2019-06-06 15:21:17 -请求地址 : http://localhost:8081/login
2019-06-06 15:21:17 -HTTP METHOD : GET
2019-06-06 15:21:17 -CLASS_METHOD : com.bootdo.system.controller.LoginController.login
2019-06-06 15:21:17 -参数 : [{}]
2019-06-06 15:21:17 -耗时 : 0
2019-06-06 15:21:17 -返回值 : login
2019-06-06 15:21:21 -请求地址 : http://localhost:8081/login
2019-06-06 15:21:21 -HTTP METHOD : POST
2019-06-06 15:21:21 -CLASS_METHOD : com.bootdo.system.controller.LoginController.ajaxLogin
2019-06-06 15:21:21 -参数 : [admin, 111111, 9953, org.apache.shiro.web.servlet.ShiroHttpServletRequest@1e7e3134]
2019-06-06 15:21:21 -==>  Preparing: select `user_id`,`username`,`name`,`password`,`dept_id`,`email`,`mobile`,`status`,`user_id_create`,`gmt_create`,`gmt_modified`,`sex`,`birth`,`pic_id`,`live_address`,`hobby`,`province`,`city`,`district` from sys_user WHERE username = ? order by user_id desc 
2019-06-06 15:21:22 -==> Parameters: admin(String)
2019-06-06 15:21:22 -<==      Total: 1
2019-06-06 15:21:22 -耗时 : 257
2019-06-06 15:21:22 -返回值 : {msg=操作成功, code=0}
2019-06-06 15:21:22 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-06-06 15:21:22 -==> Parameters: 1(Long), admin(String), 登录(String), 257(Integer), com.bootdo.system.controller.LoginController.ajaxLogin()(String), null, 127.0.0.1(String), 2019-06-06 15:21:22.215(Timestamp)
2019-06-06 15:21:22 -请求地址 : http://localhost:8081/index
2019-06-06 15:21:22 -HTTP METHOD : GET
2019-06-06 15:21:22 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2019-06-06 15:21:22 -参数 : [{}]
2019-06-06 15:21:22 -<==    Updates: 1
2019-06-06 15:21:22 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2019-06-06 15:21:22 -==> Parameters: 1(Long)
2019-06-06 15:21:22 -<==      Total: 50
2019-06-06 15:21:22 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2019-06-06 15:21:22 -==> Parameters: 138(Long)
2019-06-06 15:21:22 -<==      Total: 1
2019-06-06 15:21:22 -耗时 : 651
2019-06-06 15:21:22 -返回值 : index_v1
2019-06-06 15:21:22 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-06-06 15:21:22 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 651(Integer), com.bootdo.system.controller.LoginController.index()(String), {"menus":[{"attributes":{"icon":"fa fa-money","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-money","url":"/moneyList/moneyList"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"102","parentId":"106","text":"现金缴费"},{"attributes":{"icon":"fa fa-book","url":"/moneyLog/elecLog"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"107","parentId":"106","text":"缴费记录"},{"attributes":{"icon":"fa fa-image","url":"/moneyList/moneyWZ"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"164","parentId":"106","text":"乌镇管理"}],"hasChildren":true,"hasParent":false,"id":"106","parentId":"0","text":"收费管理"},{"attributes":{"icon":"fa fa-lightbulb-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/elec/elec"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"121","parentId":"103","text":"电费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"elec/elecInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"122","parentId":"103","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"elec/elecUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"123","parentId":"103","text":"电表上传"},{"attributes":{"icon":"fa fa-cc","url":"/elec/elecPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"124","parentId":"103","text":"电价管理"}],"hasChildren":true,"hasParent":false,"id":"103","parentId":"0","text":"电费管理"},{"attributes":{"icon":"fa fa-tint","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/water/water"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"117","parentId":"105","text":"水费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"water/waterInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"118","parentId":"105","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"water/waterUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"119","parentId":"105","text":"水费生成"},{"attributes":{"icon":"fa fa-cc","url":"/water/waterPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"120","parentId":"105","text":"水价管理"}],"hasChildren":true,"hasParent":false,"id":"105","parentId":"0","text":"水费管理"},{"attributes":{"icon":"fa fa-fire","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/heat/heat"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"113","parentId":"104","text":"暖费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"heat/heatInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"114","parentId":"104","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"heat/heatUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"115","parentId":"104","text":"暖费生成"},{"attributes":{"icon":"","url":"/heat/heatPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"116","parentId":"104","text":"暖价管理"}],"hasChildren":true,"hasParent":false,"id":"104","parentId":"0","text":"暖费管理"},{"attributes":{"icon":"fa fa-vcard-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-bomb","url":"/print/print"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"149","parentId":"108","text":"票据记录"}],"hasChildren":true,"hasParent":false,"id":"108","parentId":"0","text":"票据管理"},{"attributes":{"icon":"fa fa-bar-chart","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-area-chart","url":"/chart/graph_echarts.html"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","text":"百度chart"},{"attributes":{"icon":"fa fa-sun-o","url":"charts/countDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"109","parentId":"97","text":"日统计报表"},{"attributes":{"icon":"fa fa-calendar","url":"charts/tableDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"161","parentId":"97","text":"日统计表格"},{"attributes":{"icon":"fa fa-registered","url":"charts/countMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"110","parentId":"97","text":"月统计报表"},{"attributes":{"icon":"fa fa-building-o","url":"charts/tableElecMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"162","parentId":"97","text":"月统计表格"},{"attributes":{"icon":"fa fa-support","url":"charts/countYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"111","parentId":"97","text":"年统计报表"},{"attributes":{"icon":"fa fa-book","url":"charts/tableElecYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"163","parentId":"97","text":"年统计表格"},{"attributes":{"icon":"fa fa-money","url":"charts/countOwe"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"155","(String), 127.0.0.1(String), 2019-06-06 15:21:22.961(Timestamp)
2019-06-06 15:21:23 -<==    Updates: 1
2019-06-06 15:21:23 -请求地址 : http://localhost:8081/main
2019-06-06 15:21:23 -HTTP METHOD : GET
2019-06-06 15:21:23 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-06-06 15:21:23 -参数 : []
2019-06-06 15:21:23 -耗时 : 1
2019-06-06 15:21:23 -返回值 : main
2019-06-06 15:21:23 -请求地址 : http://localhost:8081/oa/notify/message
2019-06-06 15:21:23 -HTTP METHOD : GET
2019-06-06 15:21:23 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2019-06-06 15:21:23 -参数 : []
2019-06-06 15:21:23 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2019-06-06 15:21:23 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2019-06-06 15:21:23 -请求地址 : http://localhost:8081/main
2019-06-06 15:21:23 -HTTP METHOD : GET
2019-06-06 15:21:23 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-06-06 15:21:23 -参数 : []
2019-06-06 15:21:23 -耗时 : 0
2019-06-06 15:21:23 -返回值 : main
2019-06-06 15:21:23 -<==      Total: 0
2019-06-06 15:21:23 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2019-06-06 15:21:23 -==> Parameters: 1(Long), 0(String)
2019-06-06 15:21:23 -<==      Total: 1
2019-06-06 15:21:23 -耗时 : 282
2019-06-06 15:21:23 -返回值 : com.bootdo.common.utils.PageUtils@4d2a25b1
2019-06-06 15:21:30 -==>  Preparing: select distinct m.perms from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id = ur.role_id where ur.user_id = ? 
2019-06-06 15:21:30 -==> Parameters: 1(Long)
2019-06-06 15:21:31 -<==      Total: 94
2019-06-06 15:21:31 -请求地址 : http://localhost:8081/print/print
2019-06-06 15:21:31 -HTTP METHOD : GET
2019-06-06 15:21:31 -CLASS_METHOD : com.bootdo.print.controller.PrintController.Print
2019-06-06 15:21:31 -参数 : []
2019-06-06 15:21:31 -耗时 : 1
2019-06-06 15:21:31 -返回值 : print/print/print
2019-06-06 15:21:32 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-06-06 15:21:32 -HTTP METHOD : GET
2019-06-06 15:21:32 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-06-06 15:21:32 -参数 : [userType]
2019-06-06 15:21:32 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-06-06 15:21:32 -==> Parameters: userType(String)
2019-06-06 15:21:32 -请求地址 : http://localhost:8081/print/print/list
2019-06-06 15:21:32 -HTTP METHOD : GET
2019-06-06 15:21:32 -CLASS_METHOD : com.bootdo.print.controller.PrintController.list
2019-06-06 15:21:32 -参数 : [{limit=10, offset=0, createTime=, userType=, userOrg=, userId=}]
2019-06-06 15:21:32 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`start`,`end`,`hu`,`elec_price`,`elec_amount`,`elec_cost`,`elec_sum`,`elec_money`,`heat_price`,`heat_area`,`heat_cost`,`heat_sum`,`heat_money`,`water_price`,`water_cost`,`water_sum`,`water_money`,`print_date`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from print order by id asc limit ?, ? 
2019-06-06 15:21:32 -==> Parameters: 0(Integer), 10(Integer)
2019-06-06 15:21:32 -<==      Total: 4
2019-06-06 15:21:32 -耗时 : 305
2019-06-06 15:21:32 -返回值 : [DictDO{id=145, name='银行转账', value='D', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=144, name='微信支付', value='C', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-06-06 15:21:33 -<==      Total: 1
2019-06-06 15:21:33 -==>  Preparing: select count(*) from print 
2019-06-06 15:21:33 -==> Parameters: 
2019-06-06 15:21:33 -<==      Total: 1
2019-06-06 15:21:33 -耗时 : 828
2019-06-06 15:21:33 -返回值 : com.bootdo.common.utils.PageUtils@1e96ae64
2019-06-06 15:21:38 -请求地址 : http://localhost:8081/print/print/remove
2019-06-06 15:21:38 -HTTP METHOD : POST
2019-06-06 15:21:38 -CLASS_METHOD : com.bootdo.print.controller.PrintController.remove
2019-06-06 15:21:38 -参数 : [97]
2019-06-06 15:21:38 -==>  Preparing: delete from print where id = ? 
2019-06-06 15:21:38 -==> Parameters: 97(Long)
2019-06-06 15:21:38 -<==    Updates: 1
2019-06-06 15:21:38 -耗时 : 115
2019-06-06 15:21:38 -返回值 : {msg=操作成功, code=0}
2019-06-06 15:21:38 -请求地址 : http://localhost:8081/print/print/list
2019-06-06 15:21:38 -HTTP METHOD : GET
2019-06-06 15:21:38 -CLASS_METHOD : com.bootdo.print.controller.PrintController.list
2019-06-06 15:21:38 -参数 : [{limit=10, offset=0, createTime=, userType=, userOrg=, userId=}]
2019-06-06 15:21:38 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`start`,`end`,`hu`,`elec_price`,`elec_amount`,`elec_cost`,`elec_sum`,`elec_money`,`heat_price`,`heat_area`,`heat_cost`,`heat_sum`,`heat_money`,`water_price`,`water_cost`,`water_sum`,`water_money`,`print_date`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from print order by id asc limit ?, ? 
2019-06-06 15:21:38 -==> Parameters: 0(Integer), 10(Integer)
2019-06-06 15:21:38 -<==      Total: 0
2019-06-06 15:21:38 -==>  Preparing: select count(*) from print 
2019-06-06 15:21:38 -==> Parameters: 
2019-06-06 15:21:38 -<==      Total: 1
2019-06-06 15:21:38 -耗时 : 54
2019-06-06 15:21:38 -返回值 : com.bootdo.common.utils.PageUtils@3c3ac7ac
2019-06-06 15:21:40 -请求地址 : http://localhost:8081/moneyList/moneyList
2019-06-06 15:21:40 -HTTP METHOD : GET
2019-06-06 15:21:40 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.MoneyList
2019-06-06 15:21:40 -参数 : []
2019-06-06 15:21:40 -耗时 : 0
2019-06-06 15:21:40 -返回值 : moneyList/moneyList
2019-06-06 15:21:45 -请求地址 : http://localhost:8081/system/sysDept/treeView
2019-06-06 15:21:45 -HTTP METHOD : GET
2019-06-06 15:21:45 -CLASS_METHOD : com.bootdo.system.controller.DeptController.treeView
2019-06-06 15:21:45 -参数 : []
2019-06-06 15:21:45 -耗时 : 0
2019-06-06 15:21:45 -返回值 : system/dept/deptTree
2019-06-06 15:21:46 -请求地址 : http://localhost:8081/system/sysDept/tree
2019-06-06 15:21:46 -HTTP METHOD : GET
2019-06-06 15:21:46 -CLASS_METHOD : com.bootdo.system.controller.DeptController.tree
2019-06-06 15:21:46 -参数 : []
2019-06-06 15:21:46 -==>  Preparing: select `dept_id`,`parent_id`,`name`,`order_num`,`del_flag` from sys_dept order by dept_id desc 
2019-06-06 15:21:46 -==> Parameters: 
2019-06-06 15:21:46 -<==      Total: 3
2019-06-06 15:21:46 -耗时 : 20
2019-06-06 15:21:46 -返回值 : {"checked":false,"children":[{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"3","parentId":"1","state":{"opened":true},"text":"牙星"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"2","parentId":"1","state":{"opened":true},"text":"五九"}],"hasChildren":true,"hasParent":false,"id":"1","parentId":"0","state":{"opened":true},"text":"总公司"}
2019-06-06 15:21:49 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUser
2019-06-06 15:21:49 -HTTP METHOD : POST
2019-06-06 15:21:49 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.queryAllUser
2019-06-06 15:21:49 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@411a490f]
2019-06-06 15:21:49 -==>  Preparing: select COUNT(*) number, user_id, user_name, user_type, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, elec_type as moneyType, elec_price as userPrice, elec_amount as userArea, elec_cost as userCost, elec_Sum as userSum from ELEC WHERE create_time = ? and user_org = ? and user_Id = ? and user_type != 'B' UNION ALL select COUNT(*) number, user_id, user_name, user_type, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, heat_type as moneyType, heat_price as userPrice, heat_area as userArea, heat_cost as userCost, heat_Sum as userSum from heat WHERE create_time = ? and user_org = ? and user_Id = ? and user_type != 'B' UNION ALL select COUNT(*) number, user_id, user_name, user_type, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, water_type as moneyType, water_price as userPrice, water_price as userArea, water_price as userCost, water_Sum as userSum from water WHERE create_time = ? and user_org = ? and user_Id = ? and user_type != 'B' 
2019-06-06 15:21:49 -==> Parameters: 2019-05(String), 2(String), 1-0001(String), 2019-05(String), 2(String), 1-0001(String), 2019-05(String), 2(String), 1-0001(String)
2019-06-06 15:21:49 -<==      Total: 3
2019-06-06 15:21:49 -耗时 : 481
2019-06-06 15:21:49 -返回值 : [com.bootdo.moneyList.damain.MoneyListDO@4d0b844d, com.bootdo.moneyList.damain.MoneyListDO@775a0416, com.bootdo.moneyList.damain.MoneyListDO@1674f5e9]
2019-06-06 15:21:56 -请求地址 : http://localhost:8081/moneyList/moneyList/updateMoney
2019-06-06 15:21:56 -HTTP METHOD : POST
2019-06-06 15:21:56 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.updateMoney
2019-06-06 15:21:56 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@5cbd4d7b]
2019-06-06 15:21:56 -==>  Preparing: select COUNT(*) number, user_id, user_name, user_type, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, elec_type as moneyType, elec_price as userPrice, elec_amount as userArea, elec_cost as userCost, elec_Sum as userSum from ELEC WHERE create_time = ? and user_org = ? and user_Id = ? and user_type != 'B' UNION ALL select COUNT(*) number, user_id, user_name, user_type, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, heat_type as moneyType, heat_price as userPrice, heat_area as userArea, heat_cost as userCost, heat_Sum as userSum from heat WHERE create_time = ? and user_org = ? and user_Id = ? and user_type != 'B' UNION ALL select COUNT(*) number, user_id, user_name, user_type, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, water_type as moneyType, water_price as userPrice, water_price as userArea, water_price as userCost, water_Sum as userSum from water WHERE create_time = ? and user_org = ? and user_Id = ? and user_type != 'B' 
2019-06-06 15:21:56 -==> Parameters: 2019-05(String), 2(String), 1-0001(String), 2019-05(String), 2(String), 1-0001(String), 2019-05(String), 2(String), 1-0001(String)
2019-06-06 15:21:56 -<==      Total: 3
2019-06-06 15:21:56 -==>  Preparing: select el.start,el.end,el.hu,el.elec_amount,el.elec_cost,el.elec_price,el.elec_sum from elec el WHERE el.user_Id = ? and el.create_time = ? and el.user_org = ? and user_type != 'B' 
2019-06-06 15:21:56 -==> Parameters: 1-0001(String), 2019-05(String), 2(String)
2019-06-06 15:21:56 -<==      Total: 1
2019-06-06 15:21:59 -==>  Preparing: select he.heat_area, he.heat_cost, he.heat_price, he.heat_sum from heat he WHERE he.user_Id = ? and he.create_time = ? and he.user_org = ? and user_type != 'B' 
2019-06-06 15:21:59 -==> Parameters: 1-0001(String), 2019-05(String), 2(String)
2019-06-06 15:21:59 -<==      Total: 1
2019-06-06 15:21:59 -==>  Preparing: select wa.water_price,wa.water_cost,wa.water_sum from water wa WHERE wa.user_Id = ? and wa.create_time = ? and wa.user_org = ? and user_type != 'B' 
2019-06-06 15:21:59 -==> Parameters: 1-0001(String), 2019-05(String), 2(String)
2019-06-06 15:21:59 -<==      Total: 1
2019-06-06 15:21:59 -==>  Preparing: update ELEC set elec_sum = elec_sum + ?,user_type=? WHERE create_time = ? and user_org = ? and user_Id = ? and user_type != 'B' 
2019-06-06 15:21:59 -==> Parameters: 1(String), A(String), 2019-05(String), 2(String), 1-0001(String)
2019-06-06 15:21:59 -<==    Updates: 1
2019-06-06 15:21:59 -==>  Preparing: insert into elec_log ( `user_id`, `user_name`, `user_type`, `user_org`, `elec_type`, `elec_money`, `elec_date`, `create_time`, `create_by`, `update_time`, `update_by`, `remark` ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-06-06 15:21:59 -==> Parameters: 1-0001(String), 李文英(String), A(String), 2(String), 1(String), 1(BigDecimal), 2019-06-06 15:21:56.462(Timestamp), 2019-05(String), admin(String), 2019-06-06 15:21:56.462(Timestamp), admin(String), null
2019-06-06 15:21:59 -<==    Updates: 1
2019-06-06 15:21:59 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`start`,`end`,`hu`,`elec_price`,`elec_amount`,`elec_cost`,`elec_sum`,`elec_money`,`heat_price`,`heat_area`,`heat_cost`,`heat_sum`,`heat_money`,`water_price`,`water_cost`,`water_sum`,`water_money`,`print_date`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from print where user_id = ? and user_org = ? and create_time = ? 
2019-06-06 15:21:59 -==> Parameters: 1-0001(String), 2(String), 2019-05(String)
2019-06-06 15:21:59 -<==      Total: 0
2019-06-06 15:21:59 -==>  Preparing: insert into print ( `user_id`, `user_name`, `user_type`, `user_org`, `start`, `end`, `hu`, `elec_price`, `elec_amount`, `elec_cost`, `elec_sum`, `elec_money`, `heat_price`, `heat_area`, `heat_cost`, `heat_sum`, `heat_money`, `water_price`, `water_cost`, `water_sum`, `water_money`, `print_date`, `create_time`, `create_by`, `update_time`, `update_by`, `remark` ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-06-06 15:21:59 -==> Parameters: 1-0001(String), 李文英(String), A(String), 2(String), 10300(Integer), 10370(Integer), 1(Integer), 0.465(BigDecimal), 70.00(BigDecimal), 32.55(BigDecimal), -6.02(BigDecimal), 1(BigDecimal), null, null, null, null, null, null, null, null, null, 2019-06-06 15:21:59.96(Timestamp), 2019-05(String), admin(String), 2019-06-06 15:21:59.96(Timestamp), admin(String), null
2019-06-06 15:22:00 -<==    Updates: 1
2019-06-06 15:22:00 -耗时 : 3657
2019-06-06 15:22:00 -返回值 : 98
2019-06-06 15:22:01 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUser
2019-06-06 15:22:01 -HTTP METHOD : POST
2019-06-06 15:22:01 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.queryAllUser
2019-06-06 15:22:01 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@6da4db92]
2019-06-06 15:22:01 -==>  Preparing: select COUNT(*) number, user_id, user_name, user_type, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, elec_type as moneyType, elec_price as userPrice, elec_amount as userArea, elec_cost as userCost, elec_Sum as userSum from ELEC WHERE create_time = ? and user_org = ? and user_Id = ? and user_type != 'B' UNION ALL select COUNT(*) number, user_id, user_name, user_type, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, heat_type as moneyType, heat_price as userPrice, heat_area as userArea, heat_cost as userCost, heat_Sum as userSum from heat WHERE create_time = ? and user_org = ? and user_Id = ? and user_type != 'B' UNION ALL select COUNT(*) number, user_id, user_name, user_type, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, water_type as moneyType, water_price as userPrice, water_price as userArea, water_price as userCost, water_Sum as userSum from water WHERE create_time = ? and user_org = ? and user_Id = ? and user_type != 'B' 
2019-06-06 15:22:01 -==> Parameters: 2019-05(String), 2(String), 1-0001(String), 2019-05(String), 2(String), 1-0001(String), 2019-05(String), 2(String), 1-0001(String)
2019-06-06 15:22:01 -<==      Total: 3
2019-06-06 15:22:01 -耗时 : 18
2019-06-06 15:22:01 -返回值 : [com.bootdo.moneyList.damain.MoneyListDO@5c8375e1, com.bootdo.moneyList.damain.MoneyListDO@46b80fd3, com.bootdo.moneyList.damain.MoneyListDO@d8b24dd]
2019-06-06 15:22:02 -请求地址 : http://localhost:8081/moneyList/moneyList/moneyPrint/98
2019-06-06 15:22:02 -HTTP METHOD : GET
2019-06-06 15:22:02 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.printEdit
2019-06-06 15:22:02 -参数 : [98, {}]
2019-06-06 15:22:02 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`start`,`end`,`hu`,`elec_price`,`elec_amount`,`elec_cost`,`elec_sum`,`elec_money`,`heat_price`,`heat_area`,`heat_cost`,`heat_sum`,`heat_money`,`water_price`,`water_cost`,`water_sum`,`water_money`,`print_date`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from print where id = ? 
2019-06-06 15:22:02 -==> Parameters: 98(Long)
2019-06-06 15:22:02 -<==      Total: 1
2019-06-06 15:22:02 -耗时 : 20
2019-06-06 15:22:02 -返回值 : moneyList/moneyPrint
2019-06-06 15:22:39 -请求地址 : http://localhost:8081/elec/elec
2019-06-06 15:22:39 -HTTP METHOD : GET
2019-06-06 15:22:39 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.Elec
2019-06-06 15:22:39 -参数 : []
2019-06-06 15:22:39 -耗时 : 0
2019-06-06 15:22:39 -返回值 : elec/elec/elec
2019-06-06 15:22:39 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-06-06 15:22:39 -HTTP METHOD : GET
2019-06-06 15:22:39 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-06-06 15:22:39 -参数 : [userType]
2019-06-06 15:22:39 -请求地址 : http://localhost:8081/common/dict/list/elecType
2019-06-06 15:22:39 -HTTP METHOD : GET
2019-06-06 15:22:39 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-06-06 15:22:39 -参数 : [elecType]
2019-06-06 15:22:39 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-06-06 15:22:39 -==> Parameters: userType(String)
2019-06-06 15:22:39 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-06-06 15:22:39 -==> Parameters: elecType(String)
2019-06-06 15:22:39 -<==      Total: 11
2019-06-06 15:22:39 -耗时 : 8
2019-06-06 15:22:39 -返回值 : [DictDO{id=180, name='矿民用', value='1', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=179, name='矿商业', value='2', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=178, name='矿工业1', value='3', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=177, name='矿工业2', value='4', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=176, name='矿工业3', value='5', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=175, name='乌民用', value='6', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=174, name='乌商用', value='7', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=173, name='乌工业', value='8', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=172, name='煤民用', value='9', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=171, name='煤商业', value='10', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=170, name='政府用电', value='11', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-06-06 15:22:40 -<==      Total: 4
2019-06-06 15:22:40 -耗时 : 131
2019-06-06 15:22:40 -返回值 : [DictDO{id=145, name='银行转账', value='D', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=144, name='微信支付', value='C', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-06-06 15:22:40 -请求地址 : http://localhost:8081/elec/elec/list
2019-06-06 15:22:40 -HTTP METHOD : GET
2019-06-06 15:22:40 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.list
2019-06-06 15:22:40 -参数 : [{limit=10, offset=0, userType=, elecType=, userOrg=, userId=, createTime=, queryType=1}, com.bootdo.elec.domain.ElecDO@32a01be4]
2019-06-06 15:22:40 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, `user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec order by id asc limit ?, ? 
2019-06-06 15:22:40 -==> Parameters: 0(Integer), 10(Integer)
2019-06-06 15:22:40 -<==      Total: 10
2019-06-06 15:22:40 -==>  Preparing: select count(*) from elec 
2019-06-06 15:22:40 -==> Parameters: 
2019-06-06 15:22:40 -<==      Total: 1
2019-06-06 15:22:40 -耗时 : 57
2019-06-06 15:22:40 -返回值 : com.bootdo.common.utils.PageUtils@44576d2e
2019-06-06 15:22:46 -请求地址 : http://localhost:8081/elec/elec/edit/25
2019-06-06 15:22:46 -HTTP METHOD : GET
2019-06-06 15:22:46 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.edit
2019-06-06 15:22:46 -参数 : [25, {}]
2019-06-06 15:22:46 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, `user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec where id = ? 
2019-06-06 15:22:46 -==> Parameters: 25(Long)
2019-06-06 15:22:46 -<==      Total: 1
2019-06-06 15:22:46 -耗时 : 9
2019-06-06 15:22:46 -返回值 : elec/elec/edit
2019-06-06 15:22:46 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-06-06 15:22:46 -HTTP METHOD : GET
2019-06-06 15:22:46 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-06-06 15:22:46 -参数 : [userType]
2019-06-06 15:22:46 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-06-06 15:22:46 -请求地址 : http://localhost:8081/common/dict/list/userState
2019-06-06 15:22:46 -HTTP METHOD : GET
2019-06-06 15:22:46 -==> Parameters: userType(String)
2019-06-06 15:22:46 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-06-06 15:22:46 -参数 : [userState]
2019-06-06 15:22:46 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-06-06 15:22:46 -==> Parameters: userState(String)
2019-06-06 15:22:46 -请求地址 : http://localhost:8081/common/dict/list/elecType
2019-06-06 15:22:46 -HTTP METHOD : GET
2019-06-06 15:22:46 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-06-06 15:22:46 -参数 : [elecType]
2019-06-06 15:22:46 -<==      Total: 4
2019-06-06 15:22:46 -<==      Total: 2
2019-06-06 15:22:46 -耗时 : 7
2019-06-06 15:22:46 -返回值 : [DictDO{id=145, name='银行转账', value='D', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=144, name='微信支付', value='C', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-06-06 15:22:46 -耗时 : 7
2019-06-06 15:22:46 -返回值 : [DictDO{id=126, name='使用中', value='1', type='userState', description='用户状态', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=125, name='未使用', value='0', type='userState', description='用户状态', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-06-06 15:22:46 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-06-06 15:22:46 -==> Parameters: elecType(String)
2019-06-06 15:22:46 -<==      Total: 11
2019-06-06 15:22:46 -耗时 : 19
2019-06-06 15:22:46 -返回值 : [DictDO{id=180, name='矿民用', value='1', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=179, name='矿商业', value='2', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=178, name='矿工业1', value='3', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=177, name='矿工业2', value='4', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=176, name='矿工业3', value='5', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=175, name='乌民用', value='6', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=174, name='乌商用', value='7', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=173, name='乌工业', value='8', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=172, name='煤民用', value='9', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=171, name='煤商业', value='10', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=170, name='政府用电', value='11', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-06-06 15:22:56 -请求地址 : http://localhost:8081/elec/elec/update
2019-06-06 15:22:56 -HTTP METHOD : POST
2019-06-06 15:22:56 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.update
2019-06-06 15:22:56 -参数 : [com.bootdo.elec.domain.ElecDO@dbf7e2b]
2019-06-06 15:22:56 -==>  Preparing: update elec SET `user_id` = ?, `user_name` = ?, `user_type` = ?, `user_org` = ?, `user_tell` = ?, `user_state` = ?, `wages_id` = ?, `elec_type` = ?, `start` = ?, `end` = ?, `hu` = ?, `elec_amount` = ?, `elec_cost` = ?, `elec_sum` = ?, `create_time` = ?, `create_by` = ?, `update_time` = ?, `update_by` = ?, `remark` = ? where id = ? 
2019-06-06 15:22:56 -==> Parameters: 1-0001(String), 李文英(String), A(String), 2(String), 13847098285(String), 1(String), 500039(String), 1(String), 10300(Integer), 10370(Integer), 1(Integer), 70(BigDecimal), 32.55(BigDecimal), -25.02(BigDecimal), 2019-05(String), admin(String), 2019-06-06 15:22:56.948(Timestamp), admin(String), (String), 25(Long)
2019-06-06 15:22:57 -<==    Updates: 1
2019-06-06 15:22:57 -耗时 : 267
2019-06-06 15:22:57 -返回值 : {msg=操作成功, code=0}
2019-06-06 15:22:57 -请求地址 : http://localhost:8081/elec/elec/list
2019-06-06 15:22:57 -HTTP METHOD : GET
2019-06-06 15:22:57 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.list
2019-06-06 15:22:57 -参数 : [{limit=10, offset=0, userType=, elecType=, userOrg=, userId=, createTime=, queryType=2}, com.bootdo.elec.domain.ElecDO@7018aa0c]
2019-06-06 15:22:57 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, `user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec WHERE `elec_sum` < 0 order by id asc limit ?, ? 
2019-06-06 15:22:57 -==> Parameters: 0(Integer), 10(Integer)
2019-06-06 15:22:57 -<==      Total: 10
2019-06-06 15:22:57 -==>  Preparing: select count(*) from elec WHERE `elec_sum` < 0 
2019-06-06 15:22:57 -==> Parameters: 
2019-06-06 15:22:57 -<==      Total: 1
2019-06-06 15:22:57 -耗时 : 153
2019-06-06 15:22:57 -返回值 : com.bootdo.common.utils.PageUtils@1d2eb4e6
2019-06-06 15:23:07 -请求地址 : http://localhost:8081/index
2019-06-06 15:23:07 -HTTP METHOD : GET
2019-06-06 15:23:07 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2019-06-06 15:23:07 -参数 : [{}]
2019-06-06 15:23:07 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2019-06-06 15:23:07 -==> Parameters: 1(Long)
2019-06-06 15:23:07 -<==      Total: 50
2019-06-06 15:23:07 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2019-06-06 15:23:07 -==> Parameters: 138(Long)
2019-06-06 15:23:07 -<==      Total: 1
2019-06-06 15:23:07 -耗时 : 151
2019-06-06 15:23:07 -返回值 : index_v1
2019-06-06 15:23:07 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-06-06 15:23:07 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 151(Integer), com.bootdo.system.controller.LoginController.index()(String), {"menus":[{"attributes":{"icon":"fa fa-money","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-money","url":"/moneyList/moneyList"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"102","parentId":"106","text":"现金缴费"},{"attributes":{"icon":"fa fa-book","url":"/moneyLog/elecLog"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"107","parentId":"106","text":"缴费记录"},{"attributes":{"icon":"fa fa-image","url":"/moneyList/moneyWZ"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"164","parentId":"106","text":"乌镇管理"}],"hasChildren":true,"hasParent":false,"id":"106","parentId":"0","text":"收费管理"},{"attributes":{"icon":"fa fa-lightbulb-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/elec/elec"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"121","parentId":"103","text":"电费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"elec/elecInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"122","parentId":"103","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"elec/elecUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"123","parentId":"103","text":"电表上传"},{"attributes":{"icon":"fa fa-cc","url":"/elec/elecPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"124","parentId":"103","text":"电价管理"}],"hasChildren":true,"hasParent":false,"id":"103","parentId":"0","text":"电费管理"},{"attributes":{"icon":"fa fa-tint","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/water/water"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"117","parentId":"105","text":"水费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"water/waterInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"118","parentId":"105","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"water/waterUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"119","parentId":"105","text":"水费生成"},{"attributes":{"icon":"fa fa-cc","url":"/water/waterPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"120","parentId":"105","text":"水价管理"}],"hasChildren":true,"hasParent":false,"id":"105","parentId":"0","text":"水费管理"},{"attributes":{"icon":"fa fa-fire","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/heat/heat"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"113","parentId":"104","text":"暖费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"heat/heatInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"114","parentId":"104","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"heat/heatUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"115","parentId":"104","text":"暖费生成"},{"attributes":{"icon":"","url":"/heat/heatPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"116","parentId":"104","text":"暖价管理"}],"hasChildren":true,"hasParent":false,"id":"104","parentId":"0","text":"暖费管理"},{"attributes":{"icon":"fa fa-vcard-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-bomb","url":"/print/print"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"149","parentId":"108","text":"票据记录"}],"hasChildren":true,"hasParent":false,"id":"108","parentId":"0","text":"票据管理"},{"attributes":{"icon":"fa fa-bar-chart","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-area-chart","url":"/chart/graph_echarts.html"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","text":"百度chart"},{"attributes":{"icon":"fa fa-sun-o","url":"charts/countDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"109","parentId":"97","text":"日统计报表"},{"attributes":{"icon":"fa fa-calendar","url":"charts/tableDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"161","parentId":"97","text":"日统计表格"},{"attributes":{"icon":"fa fa-registered","url":"charts/countMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"110","parentId":"97","text":"月统计报表"},{"attributes":{"icon":"fa fa-building-o","url":"charts/tableElecMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"162","parentId":"97","text":"月统计表格"},{"attributes":{"icon":"fa fa-support","url":"charts/countYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"111","parentId":"97","text":"年统计报表"},{"attributes":{"icon":"fa fa-book","url":"charts/tableElecYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"163","parentId":"97","text":"年统计表格"},{"attributes":{"icon":"fa fa-money","url":"charts/countOwe"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"155","(String), 127.0.0.1(String), 2019-06-06 15:23:07.913(Timestamp)
2019-06-06 15:23:08 -请求地址 : http://localhost:8081/main
2019-06-06 15:23:08 -HTTP METHOD : GET
2019-06-06 15:23:08 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-06-06 15:23:08 -参数 : []
2019-06-06 15:23:08 -耗时 : 0
2019-06-06 15:23:08 -返回值 : main
2019-06-06 15:23:08 -请求地址 : http://localhost:8081/oa/notify/message
2019-06-06 15:23:08 -HTTP METHOD : GET
2019-06-06 15:23:08 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2019-06-06 15:23:08 -参数 : []
2019-06-06 15:23:08 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2019-06-06 15:23:08 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2019-06-06 15:23:08 -请求地址 : http://localhost:8081/main
2019-06-06 15:23:08 -HTTP METHOD : GET
2019-06-06 15:23:08 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-06-06 15:23:08 -参数 : []
2019-06-06 15:23:08 -耗时 : 1
2019-06-06 15:23:08 -返回值 : main
2019-06-06 15:23:08 -<==      Total: 0
2019-06-06 15:23:08 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2019-06-06 15:23:08 -==> Parameters: 1(Long), 0(String)
2019-06-06 15:23:08 -<==      Total: 1
2019-06-06 15:23:08 -耗时 : 263
2019-06-06 15:23:08 -返回值 : com.bootdo.common.utils.PageUtils@5d92144c
2019-06-06 15:23:08 -<==    Updates: 1
2019-06-06 15:23:12 -请求地址 : http://localhost:8081/heat/heat
2019-06-06 15:23:12 -HTTP METHOD : GET
2019-06-06 15:23:12 -CLASS_METHOD : com.bootdo.heat.controller.HeatController.Heat
2019-06-06 15:23:12 -参数 : []
2019-06-06 15:23:12 -耗时 : 1
2019-06-06 15:23:12 -返回值 : heat/heat/heat
2019-06-06 15:23:12 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-06-06 15:23:12 -HTTP METHOD : GET
2019-06-06 15:23:12 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-06-06 15:23:12 -参数 : [userType]
2019-06-06 15:23:12 -请求地址 : http://localhost:8081/common/dict/list/heatType
2019-06-06 15:23:12 -HTTP METHOD : GET
2019-06-06 15:23:12 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-06-06 15:23:12 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-06-06 15:23:12 -参数 : [heatType]
2019-06-06 15:23:12 -==> Parameters: userType(String)
2019-06-06 15:23:12 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-06-06 15:23:12 -==> Parameters: heatType(String)
2019-06-06 15:23:12 -<==      Total: 4
2019-06-06 15:23:12 -耗时 : 7
2019-06-06 15:23:12 -返回值 : [DictDO{id=184, name='民用暖', value='1', type='heatType', description='暖费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=183, name='商业暖', value='2', type='heatType', description='暖费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=182, name='工业民', value='3', type='heatType', description='暖费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=181, name='工业商', value='4', type='heatType', description='暖费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-06-06 15:23:12 -请求地址 : http://localhost:8081/heat/heat/list
2019-06-06 15:23:12 -HTTP METHOD : GET
2019-06-06 15:23:12 -CLASS_METHOD : com.bootdo.heat.controller.HeatController.list
2019-06-06 15:23:12 -参数 : [{limit=10, offset=0, userType=, heatType=, userOrg=, userId=, createTime=, queryType=1}]
2019-06-06 15:23:12 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`heat_type`,`heat_price`,`heat_area`,`heat_cost`,`heat_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from heat order by id asc limit ?, ? 
2019-06-06 15:23:12 -==> Parameters: 0(Integer), 10(Integer)
2019-06-06 15:23:12 -<==      Total: 4
2019-06-06 15:23:12 -耗时 : 215
2019-06-06 15:23:12 -返回值 : [DictDO{id=145, name='银行转账', value='D', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=144, name='微信支付', value='C', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-06-06 15:23:12 -<==      Total: 10
2019-06-06 15:23:12 -==>  Preparing: select count(*) from heat 
2019-06-06 15:23:12 -==> Parameters: 
2019-06-06 15:23:12 -<==      Total: 1
2019-06-06 15:23:12 -耗时 : 248
2019-06-06 15:23:12 -返回值 : com.bootdo.common.utils.PageUtils@666f6b6a
2019-06-06 15:23:19 -请求地址 : http://localhost:8081/heat/heat/edit/45
2019-06-06 15:23:19 -HTTP METHOD : GET
2019-06-06 15:23:19 -CLASS_METHOD : com.bootdo.heat.controller.HeatController.edit
2019-06-06 15:23:19 -参数 : [45, {}]
2019-06-06 15:23:19 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`heat_type`,`heat_price`,`heat_area`,`heat_cost`,`heat_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from heat where id = ? 
2019-06-06 15:23:19 -==> Parameters: 45(Integer)
2019-06-06 15:23:19 -<==      Total: 1
2019-06-06 15:23:19 -耗时 : 13
2019-06-06 15:23:19 -返回值 : heat/heat/edit
2019-06-06 15:23:19 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-06-06 15:23:19 -HTTP METHOD : GET
2019-06-06 15:23:19 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-06-06 15:23:19 -参数 : [userType]
2019-06-06 15:23:19 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-06-06 15:23:19 -==> Parameters: userType(String)
2019-06-06 15:23:19 -<==      Total: 4
2019-06-06 15:23:19 -耗时 : 8
2019-06-06 15:23:19 -返回值 : [DictDO{id=145, name='银行转账', value='D', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=144, name='微信支付', value='C', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-06-06 15:23:19 -请求地址 : http://localhost:8081/common/dict/list/heatType
2019-06-06 15:23:19 -HTTP METHOD : GET
2019-06-06 15:23:19 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-06-06 15:23:19 -参数 : [heatType]
2019-06-06 15:23:19 -请求地址 : http://localhost:8081/common/dict/list/userState
2019-06-06 15:23:19 -HTTP METHOD : GET
2019-06-06 15:23:19 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-06-06 15:23:19 -参数 : [userState]
2019-06-06 15:23:19 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-06-06 15:23:19 -==> Parameters: userState(String)
2019-06-06 15:23:19 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-06-06 15:23:19 -==> Parameters: heatType(String)
2019-06-06 15:23:19 -<==      Total: 2
2019-06-06 15:23:19 -<==      Total: 4
2019-06-06 15:23:19 -耗时 : 12
2019-06-06 15:23:19 -耗时 : 11
2019-06-06 15:23:19 -返回值 : [DictDO{id=184, name='民用暖', value='1', type='heatType', description='暖费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=183, name='商业暖', value='2', type='heatType', description='暖费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=182, name='工业民', value='3', type='heatType', description='暖费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=181, name='工业商', value='4', type='heatType', description='暖费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-06-06 15:23:19 -返回值 : [DictDO{id=126, name='使用中', value='1', type='userState', description='用户状态', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=125, name='未使用', value='0', type='userState', description='用户状态', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-06-06 15:25:12 -请求地址 : http://localhost:8081/index
2019-06-06 15:25:12 -HTTP METHOD : GET
2019-06-06 15:25:12 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2019-06-06 15:25:12 -参数 : [{}]
2019-06-06 15:25:12 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2019-06-06 15:25:12 -==> Parameters: 1(Long)
2019-06-06 15:25:12 -<==      Total: 50
2019-06-06 15:25:12 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2019-06-06 15:25:12 -==> Parameters: 138(Long)
2019-06-06 15:25:12 -<==      Total: 1
2019-06-06 15:25:12 -耗时 : 24
2019-06-06 15:25:12 -返回值 : index_v1
2019-06-06 15:25:12 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-06-06 15:25:12 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 25(Integer), com.bootdo.system.controller.LoginController.index()(String), {"menus":[{"attributes":{"icon":"fa fa-money","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-money","url":"/moneyList/moneyList"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"102","parentId":"106","text":"现金缴费"},{"attributes":{"icon":"fa fa-book","url":"/moneyLog/elecLog"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"107","parentId":"106","text":"缴费记录"},{"attributes":{"icon":"fa fa-image","url":"/moneyList/moneyWZ"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"164","parentId":"106","text":"乌镇管理"}],"hasChildren":true,"hasParent":false,"id":"106","parentId":"0","text":"收费管理"},{"attributes":{"icon":"fa fa-lightbulb-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/elec/elec"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"121","parentId":"103","text":"电费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"elec/elecInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"122","parentId":"103","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"elec/elecUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"123","parentId":"103","text":"电表上传"},{"attributes":{"icon":"fa fa-cc","url":"/elec/elecPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"124","parentId":"103","text":"电价管理"}],"hasChildren":true,"hasParent":false,"id":"103","parentId":"0","text":"电费管理"},{"attributes":{"icon":"fa fa-tint","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/water/water"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"117","parentId":"105","text":"水费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"water/waterInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"118","parentId":"105","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"water/waterUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"119","parentId":"105","text":"水费生成"},{"attributes":{"icon":"fa fa-cc","url":"/water/waterPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"120","parentId":"105","text":"水价管理"}],"hasChildren":true,"hasParent":false,"id":"105","parentId":"0","text":"水费管理"},{"attributes":{"icon":"fa fa-fire","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/heat/heat"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"113","parentId":"104","text":"暖费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"heat/heatInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"114","parentId":"104","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"heat/heatUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"115","parentId":"104","text":"暖费生成"},{"attributes":{"icon":"","url":"/heat/heatPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"116","parentId":"104","text":"暖价管理"}],"hasChildren":true,"hasParent":false,"id":"104","parentId":"0","text":"暖费管理"},{"attributes":{"icon":"fa fa-vcard-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-bomb","url":"/print/print"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"149","parentId":"108","text":"票据记录"}],"hasChildren":true,"hasParent":false,"id":"108","parentId":"0","text":"票据管理"},{"attributes":{"icon":"fa fa-bar-chart","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-area-chart","url":"/chart/graph_echarts.html"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","text":"百度chart"},{"attributes":{"icon":"fa fa-sun-o","url":"charts/countDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"109","parentId":"97","text":"日统计报表"},{"attributes":{"icon":"fa fa-calendar","url":"charts/tableDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"161","parentId":"97","text":"日统计表格"},{"attributes":{"icon":"fa fa-registered","url":"charts/countMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"110","parentId":"97","text":"月统计报表"},{"attributes":{"icon":"fa fa-building-o","url":"charts/tableElecMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"162","parentId":"97","text":"月统计表格"},{"attributes":{"icon":"fa fa-support","url":"charts/countYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"111","parentId":"97","text":"年统计报表"},{"attributes":{"icon":"fa fa-book","url":"charts/tableElecYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"163","parentId":"97","text":"年统计表格"},{"attributes":{"icon":"fa fa-money","url":"charts/countOwe"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"155","(String), 127.0.0.1(String), 2019-06-06 15:25:12.954(Timestamp)
2019-06-06 15:25:13 -请求地址 : http://localhost:8081/main
2019-06-06 15:25:13 -HTTP METHOD : GET
2019-06-06 15:25:13 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-06-06 15:25:13 -参数 : []
2019-06-06 15:25:13 -耗时 : 0
2019-06-06 15:25:13 -返回值 : main
2019-06-06 15:25:13 -请求地址 : http://localhost:8081/oa/notify/message
2019-06-06 15:25:13 -HTTP METHOD : GET
2019-06-06 15:25:13 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2019-06-06 15:25:13 -参数 : []
2019-06-06 15:25:13 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2019-06-06 15:25:13 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2019-06-06 15:25:13 -请求地址 : http://localhost:8081/main
2019-06-06 15:25:13 -HTTP METHOD : GET
2019-06-06 15:25:13 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-06-06 15:25:13 -参数 : []
2019-06-06 15:25:13 -耗时 : 1
2019-06-06 15:25:13 -返回值 : main
2019-06-06 15:25:13 -<==      Total: 0
2019-06-06 15:25:13 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2019-06-06 15:25:13 -==> Parameters: 1(Long), 0(String)
2019-06-06 15:25:13 -<==      Total: 1
2019-06-06 15:25:13 -耗时 : 765
2019-06-06 15:25:13 -返回值 : com.bootdo.common.utils.PageUtils@2d3022f8
2019-06-06 15:25:14 -<==    Updates: 1
2019-06-06 15:25:14 -请求地址 : http://localhost:8081/heat/heat
2019-06-06 15:25:14 -HTTP METHOD : GET
2019-06-06 15:25:14 -CLASS_METHOD : com.bootdo.heat.controller.HeatController.Heat
2019-06-06 15:25:14 -参数 : []
2019-06-06 15:25:14 -耗时 : 1
2019-06-06 15:25:14 -返回值 : heat/heat/heat
2019-06-06 15:25:15 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-06-06 15:25:15 -HTTP METHOD : GET
2019-06-06 15:25:15 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-06-06 15:25:15 -参数 : [userType]
2019-06-06 15:25:15 -请求地址 : http://localhost:8081/common/dict/list/heatType
2019-06-06 15:25:15 -HTTP METHOD : GET
2019-06-06 15:25:15 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-06-06 15:25:15 -参数 : [heatType]
2019-06-06 15:25:15 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-06-06 15:25:15 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-06-06 15:25:15 -==> Parameters: heatType(String)
2019-06-06 15:25:15 -==> Parameters: userType(String)
2019-06-06 15:25:15 -<==      Total: 4
2019-06-06 15:25:15 -耗时 : 7
2019-06-06 15:25:15 -返回值 : [DictDO{id=184, name='民用暖', value='1', type='heatType', description='暖费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=183, name='商业暖', value='2', type='heatType', description='暖费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=182, name='工业民', value='3', type='heatType', description='暖费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=181, name='工业商', value='4', type='heatType', description='暖费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-06-06 15:25:15 -<==      Total: 4
2019-06-06 15:25:15 -耗时 : 10
2019-06-06 15:25:15 -返回值 : [DictDO{id=145, name='银行转账', value='D', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=144, name='微信支付', value='C', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-06-06 15:25:15 -请求地址 : http://localhost:8081/heat/heat/list
2019-06-06 15:25:15 -HTTP METHOD : GET
2019-06-06 15:25:15 -CLASS_METHOD : com.bootdo.heat.controller.HeatController.list
2019-06-06 15:25:15 -参数 : [{limit=10, offset=0, userType=, heatType=, userOrg=, userId=, createTime=, queryType=1}]
2019-06-06 15:25:15 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`heat_type`,`heat_price`,`heat_area`,`heat_cost`,`heat_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from heat order by id asc limit ?, ? 
2019-06-06 15:25:15 -==> Parameters: 0(Integer), 10(Integer)
2019-06-06 15:25:15 -<==      Total: 10
2019-06-06 15:25:15 -==>  Preparing: select count(*) from heat 
2019-06-06 15:25:15 -==> Parameters: 
2019-06-06 15:25:15 -<==      Total: 1
2019-06-06 15:25:15 -耗时 : 22
2019-06-06 15:25:15 -返回值 : com.bootdo.common.utils.PageUtils@54d15365
2019-06-06 15:25:24 -请求地址 : http://localhost:8081/heat/heat/edit/45
2019-06-06 15:25:24 -HTTP METHOD : GET
2019-06-06 15:25:24 -CLASS_METHOD : com.bootdo.heat.controller.HeatController.edit
2019-06-06 15:25:24 -参数 : [45, {}]
2019-06-06 15:25:24 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`heat_type`,`heat_price`,`heat_area`,`heat_cost`,`heat_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from heat where id = ? 
2019-06-06 15:25:24 -==> Parameters: 45(Integer)
2019-06-06 15:25:24 -<==      Total: 1
2019-06-06 15:25:24 -耗时 : 6
2019-06-06 15:25:24 -返回值 : heat/heat/edit
2019-06-06 15:25:24 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-06-06 15:25:24 -HTTP METHOD : GET
2019-06-06 15:25:24 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-06-06 15:25:24 -参数 : [userType]
2019-06-06 15:25:24 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-06-06 15:25:24 -请求地址 : http://localhost:8081/common/dict/list/heatType
2019-06-06 15:25:24 -HTTP METHOD : GET
2019-06-06 15:25:24 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-06-06 15:25:24 -参数 : [heatType]
2019-06-06 15:25:24 -==> Parameters: userType(String)
2019-06-06 15:25:24 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-06-06 15:25:24 -==> Parameters: heatType(String)
2019-06-06 15:25:24 -请求地址 : http://localhost:8081/common/dict/list/userState
2019-06-06 15:25:24 -HTTP METHOD : GET
2019-06-06 15:25:24 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-06-06 15:25:24 -参数 : [userState]
2019-06-06 15:25:24 -<==      Total: 4
2019-06-06 15:25:24 -耗时 : 4
2019-06-06 15:25:24 -返回值 : [DictDO{id=145, name='银行转账', value='D', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=144, name='微信支付', value='C', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-06-06 15:25:24 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-06-06 15:25:24 -==> Parameters: userState(String)
2019-06-06 15:25:24 -<==      Total: 4
2019-06-06 15:25:24 -耗时 : 12
2019-06-06 15:25:24 -返回值 : [DictDO{id=184, name='民用暖', value='1', type='heatType', description='暖费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=183, name='商业暖', value='2', type='heatType', description='暖费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=182, name='工业民', value='3', type='heatType', description='暖费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=181, name='工业商', value='4', type='heatType', description='暖费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-06-06 15:25:24 -<==      Total: 2
2019-06-06 15:25:24 -耗时 : 12
2019-06-06 15:25:24 -返回值 : [DictDO{id=126, name='使用中', value='1', type='userState', description='用户状态', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=125, name='未使用', value='0', type='userState', description='用户状态', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-06-06 15:26:21 -请求地址 : http://localhost:8081/login;JSESSIONID=ea04406e-1572-4458-af01-8a614a05b57c
2019-06-06 15:26:21 -HTTP METHOD : GET
2019-06-06 15:26:21 -CLASS_METHOD : com.bootdo.system.controller.LoginController.login
2019-06-06 15:26:21 -参数 : [{}]
2019-06-06 15:26:21 -耗时 : 1
2019-06-06 15:26:21 -返回值 : login
2019-06-06 15:26:21 -请求地址 : http://localhost:8081/getVerify
2019-06-06 15:26:21 -HTTP METHOD : GET
2019-06-06 15:26:21 -CLASS_METHOD : com.bootdo.system.controller.LoginController.getVerify
2019-06-06 15:26:21 -参数 : [org.apache.shiro.web.servlet.ShiroHttpServletRequest@6f8c0f7, org.apache.shiro.web.servlet.ShiroHttpServletResponse@15c0c7ef]
2019-06-06 15:26:21 -6318
2019-06-06 15:26:21 -耗时 : 10
2019-06-06 15:26:21 -返回值 : null
2019-06-06 15:26:22 -请求地址 : http://localhost:8081/login
2019-06-06 15:26:22 -HTTP METHOD : GET
2019-06-06 15:26:22 -CLASS_METHOD : com.bootdo.system.controller.LoginController.login
2019-06-06 15:26:22 -参数 : [{}]
2019-06-06 15:26:22 -耗时 : 1
2019-06-06 15:26:22 -返回值 : login
2019-06-06 15:26:26 -请求地址 : http://localhost:8081/login
2019-06-06 15:26:26 -HTTP METHOD : POST
2019-06-06 15:26:26 -CLASS_METHOD : com.bootdo.system.controller.LoginController.ajaxLogin
2019-06-06 15:26:26 -参数 : [admin, 111111, 6318, org.apache.shiro.web.servlet.ShiroHttpServletRequest@76663ab3]
2019-06-06 15:26:26 -==>  Preparing: select `user_id`,`username`,`name`,`password`,`dept_id`,`email`,`mobile`,`status`,`user_id_create`,`gmt_create`,`gmt_modified`,`sex`,`birth`,`pic_id`,`live_address`,`hobby`,`province`,`city`,`district` from sys_user WHERE username = ? order by user_id desc 
2019-06-06 15:26:26 -==> Parameters: admin(String)
2019-06-06 15:26:26 -<==      Total: 1
2019-06-06 15:26:26 -耗时 : 7
2019-06-06 15:26:26 -返回值 : {msg=操作成功, code=0}
2019-06-06 15:26:26 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-06-06 15:26:26 -==> Parameters: 1(Long), admin(String), 登录(String), 7(Integer), com.bootdo.system.controller.LoginController.ajaxLogin()(String), null, 127.0.0.1(String), 2019-06-06 15:26:26.893(Timestamp)
2019-06-06 15:26:26 -请求地址 : http://localhost:8081/index
2019-06-06 15:26:26 -HTTP METHOD : GET
2019-06-06 15:26:26 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2019-06-06 15:26:26 -参数 : [{}]
2019-06-06 15:26:26 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2019-06-06 15:26:26 -==> Parameters: 1(Long)
2019-06-06 15:26:26 -<==      Total: 50
2019-06-06 15:26:26 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2019-06-06 15:26:26 -==> Parameters: 138(Long)
2019-06-06 15:26:26 -<==      Total: 1
2019-06-06 15:26:26 -耗时 : 24
2019-06-06 15:26:26 -返回值 : index_v1
2019-06-06 15:26:26 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-06-06 15:26:26 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 25(Integer), com.bootdo.system.controller.LoginController.index()(String), {"menus":[{"attributes":{"icon":"fa fa-money","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-money","url":"/moneyList/moneyList"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"102","parentId":"106","text":"现金缴费"},{"attributes":{"icon":"fa fa-book","url":"/moneyLog/elecLog"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"107","parentId":"106","text":"缴费记录"},{"attributes":{"icon":"fa fa-image","url":"/moneyList/moneyWZ"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"164","parentId":"106","text":"乌镇管理"}],"hasChildren":true,"hasParent":false,"id":"106","parentId":"0","text":"收费管理"},{"attributes":{"icon":"fa fa-lightbulb-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/elec/elec"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"121","parentId":"103","text":"电费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"elec/elecInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"122","parentId":"103","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"elec/elecUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"123","parentId":"103","text":"电表上传"},{"attributes":{"icon":"fa fa-cc","url":"/elec/elecPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"124","parentId":"103","text":"电价管理"}],"hasChildren":true,"hasParent":false,"id":"103","parentId":"0","text":"电费管理"},{"attributes":{"icon":"fa fa-tint","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/water/water"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"117","parentId":"105","text":"水费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"water/waterInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"118","parentId":"105","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"water/waterUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"119","parentId":"105","text":"水费生成"},{"attributes":{"icon":"fa fa-cc","url":"/water/waterPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"120","parentId":"105","text":"水价管理"}],"hasChildren":true,"hasParent":false,"id":"105","parentId":"0","text":"水费管理"},{"attributes":{"icon":"fa fa-fire","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/heat/heat"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"113","parentId":"104","text":"暖费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"heat/heatInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"114","parentId":"104","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"heat/heatUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"115","parentId":"104","text":"暖费生成"},{"attributes":{"icon":"","url":"/heat/heatPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"116","parentId":"104","text":"暖价管理"}],"hasChildren":true,"hasParent":false,"id":"104","parentId":"0","text":"暖费管理"},{"attributes":{"icon":"fa fa-vcard-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-bomb","url":"/print/print"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"149","parentId":"108","text":"票据记录"}],"hasChildren":true,"hasParent":false,"id":"108","parentId":"0","text":"票据管理"},{"attributes":{"icon":"fa fa-bar-chart","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-area-chart","url":"/chart/graph_echarts.html"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","text":"百度chart"},{"attributes":{"icon":"fa fa-sun-o","url":"charts/countDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"109","parentId":"97","text":"日统计报表"},{"attributes":{"icon":"fa fa-calendar","url":"charts/tableDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"161","parentId":"97","text":"日统计表格"},{"attributes":{"icon":"fa fa-registered","url":"charts/countMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"110","parentId":"97","text":"月统计报表"},{"attributes":{"icon":"fa fa-building-o","url":"charts/tableElecMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"162","parentId":"97","text":"月统计表格"},{"attributes":{"icon":"fa fa-support","url":"charts/countYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"111","parentId":"97","text":"年统计报表"},{"attributes":{"icon":"fa fa-book","url":"charts/tableElecYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"163","parentId":"97","text":"年统计表格"},{"attributes":{"icon":"fa fa-money","url":"charts/countOwe"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"155","(String), 127.0.0.1(String), 2019-06-06 15:26:26.946(Timestamp)
2019-06-06 15:26:26 -<==    Updates: 1
2019-06-06 15:26:27 -请求地址 : http://localhost:8081/main
2019-06-06 15:26:27 -HTTP METHOD : GET
2019-06-06 15:26:27 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-06-06 15:26:27 -参数 : []
2019-06-06 15:26:27 -耗时 : 0
2019-06-06 15:26:27 -返回值 : main
2019-06-06 15:26:27 -<==    Updates: 1
2019-06-06 15:26:27 -请求地址 : http://localhost:8081/oa/notify/message
2019-06-06 15:26:27 -HTTP METHOD : GET
2019-06-06 15:26:27 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2019-06-06 15:26:27 -参数 : []
2019-06-06 15:26:27 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2019-06-06 15:26:27 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2019-06-06 15:26:27 -<==      Total: 0
2019-06-06 15:26:27 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2019-06-06 15:26:27 -==> Parameters: 1(Long), 0(String)
2019-06-06 15:26:27 -<==      Total: 1
2019-06-06 15:26:27 -耗时 : 6
2019-06-06 15:26:27 -返回值 : com.bootdo.common.utils.PageUtils@2950c629
2019-06-06 15:26:27 -请求地址 : http://localhost:8081/main
2019-06-06 15:26:27 -HTTP METHOD : GET
2019-06-06 15:26:27 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-06-06 15:26:27 -参数 : []
2019-06-06 15:26:27 -耗时 : 2
2019-06-06 15:26:27 -返回值 : main
2019-06-06 15:26:31 -==>  Preparing: select distinct m.perms from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id = ur.role_id where ur.user_id = ? 
2019-06-06 15:26:31 -==> Parameters: 1(Long)
2019-06-06 15:26:31 -<==      Total: 94
2019-06-06 15:26:31 -请求地址 : http://localhost:8081/moneyList/moneyList
2019-06-06 15:26:31 -HTTP METHOD : GET
2019-06-06 15:26:31 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.MoneyList
2019-06-06 15:26:31 -参数 : []
2019-06-06 15:26:31 -耗时 : 1
2019-06-06 15:26:31 -返回值 : moneyList/moneyList
2019-06-06 15:26:40 -请求地址 : http://localhost:8081/heat/heat
2019-06-06 15:26:40 -HTTP METHOD : GET
2019-06-06 15:26:40 -CLASS_METHOD : com.bootdo.heat.controller.HeatController.Heat
2019-06-06 15:26:40 -参数 : []
2019-06-06 15:26:40 -耗时 : 1
2019-06-06 15:26:40 -返回值 : heat/heat/heat
2019-06-06 15:26:40 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-06-06 15:26:40 -HTTP METHOD : GET
2019-06-06 15:26:40 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-06-06 15:26:40 -参数 : [userType]
2019-06-06 15:26:40 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-06-06 15:26:40 -==> Parameters: userType(String)
2019-06-06 15:26:40 -请求地址 : http://localhost:8081/common/dict/list/heatType
2019-06-06 15:26:40 -HTTP METHOD : GET
2019-06-06 15:26:40 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-06-06 15:26:40 -参数 : [heatType]
2019-06-06 15:26:40 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-06-06 15:26:40 -==> Parameters: heatType(String)
2019-06-06 15:26:40 -<==      Total: 4
2019-06-06 15:26:40 -<==      Total: 4
2019-06-06 15:26:40 -耗时 : 4
2019-06-06 15:26:40 -返回值 : [DictDO{id=184, name='民用暖', value='1', type='heatType', description='暖费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=183, name='商业暖', value='2', type='heatType', description='暖费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=182, name='工业民', value='3', type='heatType', description='暖费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=181, name='工业商', value='4', type='heatType', description='暖费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-06-06 15:26:40 -耗时 : 6
2019-06-06 15:26:40 -返回值 : [DictDO{id=145, name='银行转账', value='D', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=144, name='微信支付', value='C', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-06-06 15:26:40 -请求地址 : http://localhost:8081/heat/heat/list
2019-06-06 15:26:40 -HTTP METHOD : GET
2019-06-06 15:26:40 -CLASS_METHOD : com.bootdo.heat.controller.HeatController.list
2019-06-06 15:26:40 -参数 : [{limit=10, offset=0, userType=, heatType=, userOrg=, userId=, createTime=, queryType=1}]
2019-06-06 15:26:40 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`heat_type`,`heat_price`,`heat_area`,`heat_cost`,`heat_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from heat order by id asc limit ?, ? 
2019-06-06 15:26:40 -==> Parameters: 0(Integer), 10(Integer)
2019-06-06 15:26:41 -<==      Total: 10
2019-06-06 15:26:41 -==>  Preparing: select count(*) from heat 
2019-06-06 15:26:41 -==> Parameters: 
2019-06-06 15:26:41 -<==      Total: 1
2019-06-06 15:26:41 -耗时 : 195
2019-06-06 15:26:41 -返回值 : com.bootdo.common.utils.PageUtils@a8d738b
2019-06-06 15:26:47 -请求地址 : http://localhost:8081/heat/heat/edit/45
2019-06-06 15:26:47 -HTTP METHOD : GET
2019-06-06 15:26:47 -CLASS_METHOD : com.bootdo.heat.controller.HeatController.edit
2019-06-06 15:26:47 -参数 : [45, {}]
2019-06-06 15:26:47 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`heat_type`,`heat_price`,`heat_area`,`heat_cost`,`heat_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from heat where id = ? 
2019-06-06 15:26:47 -==> Parameters: 45(Integer)
2019-06-06 15:26:47 -<==      Total: 1
2019-06-06 15:26:47 -耗时 : 19
2019-06-06 15:26:47 -返回值 : heat/heat/edit
2019-06-06 15:26:47 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-06-06 15:26:47 -HTTP METHOD : GET
2019-06-06 15:26:47 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-06-06 15:26:47 -参数 : [userType]
2019-06-06 15:26:47 -请求地址 : http://localhost:8081/common/dict/list/userState
2019-06-06 15:26:47 -HTTP METHOD : GET
2019-06-06 15:26:47 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-06-06 15:26:47 -参数 : [userState]
2019-06-06 15:26:47 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-06-06 15:26:47 -==> Parameters: userState(String)
2019-06-06 15:26:47 -<==      Total: 2
2019-06-06 15:26:47 -耗时 : 5
2019-06-06 15:26:47 -返回值 : [DictDO{id=126, name='使用中', value='1', type='userState', description='用户状态', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=125, name='未使用', value='0', type='userState', description='用户状态', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-06-06 15:26:47 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-06-06 15:26:47 -==> Parameters: userType(String)
2019-06-06 15:26:47 -<==      Total: 4
2019-06-06 15:26:47 -耗时 : 14
2019-06-06 15:26:47 -返回值 : [DictDO{id=145, name='银行转账', value='D', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=144, name='微信支付', value='C', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-06-06 15:26:47 -请求地址 : http://localhost:8081/common/dict/list/heatType
2019-06-06 15:26:47 -HTTP METHOD : GET
2019-06-06 15:26:47 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-06-06 15:26:47 -参数 : [heatType]
2019-06-06 15:26:47 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-06-06 15:26:47 -==> Parameters: heatType(String)
2019-06-06 15:26:47 -<==      Total: 4
2019-06-06 15:26:47 -耗时 : 3
2019-06-06 15:26:47 -返回值 : [DictDO{id=184, name='民用暖', value='1', type='heatType', description='暖费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=183, name='商业暖', value='2', type='heatType', description='暖费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=182, name='工业民', value='3', type='heatType', description='暖费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=181, name='工业商', value='4', type='heatType', description='暖费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-06-06 15:26:53 -请求地址 : http://localhost:8081/heat/heat/update
2019-06-06 15:26:53 -HTTP METHOD : POST
2019-06-06 15:26:53 -CLASS_METHOD : com.bootdo.heat.controller.HeatController.update
2019-06-06 15:26:53 -参数 : [com.bootdo.heat.domain.HeatDO@78494639]
2019-06-06 15:26:53 -==>  Preparing: update heat SET `user_id` = ?, `user_name` = ?, `user_type` = ?, `user_org` = ?, `user_tell` = ?, `user_state` = ?, `wages_id` = ?, `heat_type` = ?, `heat_price` = ?, `heat_area` = ?, `heat_cost` = ?, `heat_sum` = ?, `create_time` = ?, `create_by` = ?, `update_time` = ?, `update_by` = ?, `remark` = ? where id = ? 
2019-06-06 15:26:53 -==> Parameters: 1-0001(String), 李文英(String), A(String), 2(String), 13847098285(String), 1(String), (String), 1(String), 3.5(BigDecimal), 48.44(BigDecimal), 169.54(BigDecimal), 1.57(BigDecimal), 2019-05(String), admin(String), 2019-06-06 15:26:53.402(Timestamp), admin(String), (String), 45(Long)
2019-06-06 15:26:53 -<==    Updates: 1
2019-06-06 15:26:53 -耗时 : 220
2019-06-06 15:26:53 -返回值 : {msg=操作成功, code=0}
2019-06-06 15:26:53 -请求地址 : http://localhost:8081/heat/heat/list
2019-06-06 15:26:53 -HTTP METHOD : GET
2019-06-06 15:26:53 -CLASS_METHOD : com.bootdo.heat.controller.HeatController.list
2019-06-06 15:26:53 -参数 : [{limit=10, offset=0, userType=, heatType=, userOrg=, userId=, createTime=, queryType=2}]
2019-06-06 15:26:53 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`heat_type`,`heat_price`,`heat_area`,`heat_cost`,`heat_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from heat WHERE `heat_sum` < 0 order by id asc limit ?, ? 
2019-06-06 15:26:53 -==> Parameters: 0(Integer), 10(Integer)
2019-06-06 15:26:53 -<==      Total: 10
2019-06-06 15:26:53 -==>  Preparing: select count(*) from heat WHERE `heat_sum` < 0 
2019-06-06 15:26:53 -==> Parameters: 
2019-06-06 15:26:53 -<==      Total: 1
2019-06-06 15:26:53 -耗时 : 29
2019-06-06 15:26:53 -返回值 : com.bootdo.common.utils.PageUtils@4f66b763
2019-06-06 15:26:55 -请求地址 : http://localhost:8081/heat/heat/edit/144
2019-06-06 15:26:55 -HTTP METHOD : GET
2019-06-06 15:26:55 -CLASS_METHOD : com.bootdo.heat.controller.HeatController.edit
2019-06-06 15:26:55 -参数 : [144, {}]
2019-06-06 15:26:55 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`heat_type`,`heat_price`,`heat_area`,`heat_cost`,`heat_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from heat where id = ? 
2019-06-06 15:26:55 -==> Parameters: 144(Integer)
2019-06-06 15:26:55 -<==      Total: 1
2019-06-06 15:26:55 -耗时 : 7
2019-06-06 15:26:55 -返回值 : heat/heat/edit
2019-06-06 15:26:55 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-06-06 15:26:55 -HTTP METHOD : GET
2019-06-06 15:26:55 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-06-06 15:26:55 -参数 : [userType]
2019-06-06 15:26:55 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-06-06 15:26:55 -==> Parameters: userType(String)
2019-06-06 15:26:55 -请求地址 : http://localhost:8081/common/dict/list/heatType
2019-06-06 15:26:55 -请求地址 : http://localhost:8081/common/dict/list/userState
2019-06-06 15:26:55 -HTTP METHOD : GET
2019-06-06 15:26:55 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-06-06 15:26:55 -参数 : [heatType]
2019-06-06 15:26:55 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-06-06 15:26:55 -==> Parameters: heatType(String)
2019-06-06 15:26:55 -<==      Total: 4
2019-06-06 15:26:55 -耗时 : 5
2019-06-06 15:26:55 -返回值 : [DictDO{id=145, name='银行转账', value='D', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=144, name='微信支付', value='C', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-06-06 15:26:55 -HTTP METHOD : GET
2019-06-06 15:26:55 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-06-06 15:26:55 -参数 : [userState]
2019-06-06 15:26:55 -<==      Total: 4
2019-06-06 15:26:55 -耗时 : 7
2019-06-06 15:26:55 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-06-06 15:26:55 -返回值 : [DictDO{id=184, name='民用暖', value='1', type='heatType', description='暖费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=183, name='商业暖', value='2', type='heatType', description='暖费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=182, name='工业民', value='3', type='heatType', description='暖费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=181, name='工业商', value='4', type='heatType', description='暖费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-06-06 15:26:55 -==> Parameters: userState(String)
2019-06-06 15:26:55 -<==      Total: 2
2019-06-06 15:26:55 -耗时 : 11
2019-06-06 15:26:55 -返回值 : [DictDO{id=126, name='使用中', value='1', type='userState', description='用户状态', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=125, name='未使用', value='0', type='userState', description='用户状态', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-06-06 15:26:59 -请求地址 : http://localhost:8081/heat/heat/edit/144
2019-06-06 15:26:59 -HTTP METHOD : GET
2019-06-06 15:26:59 -CLASS_METHOD : com.bootdo.heat.controller.HeatController.edit
2019-06-06 15:26:59 -参数 : [144, {}]
2019-06-06 15:26:59 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`heat_type`,`heat_price`,`heat_area`,`heat_cost`,`heat_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from heat where id = ? 
2019-06-06 15:26:59 -==> Parameters: 144(Integer)
2019-06-06 15:26:59 -<==      Total: 1
2019-06-06 15:26:59 -耗时 : 5
2019-06-06 15:26:59 -返回值 : heat/heat/edit
2019-06-06 15:26:59 -请求地址 : http://localhost:8081/common/dict/list/userState
2019-06-06 15:26:59 -HTTP METHOD : GET
2019-06-06 15:26:59 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-06-06 15:26:59 -参数 : [userState]
2019-06-06 15:26:59 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-06-06 15:26:59 -HTTP METHOD : GET
2019-06-06 15:26:59 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-06-06 15:26:59 -参数 : [userType]
2019-06-06 15:26:59 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-06-06 15:26:59 -==> Parameters: userType(String)
2019-06-06 15:26:59 -请求地址 : http://localhost:8081/common/dict/list/heatType
2019-06-06 15:26:59 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-06-06 15:26:59 -HTTP METHOD : GET
2019-06-06 15:26:59 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-06-06 15:26:59 -参数 : [heatType]
2019-06-06 15:26:59 -<==      Total: 4
2019-06-06 15:26:59 -==> Parameters: userState(String)
2019-06-06 15:26:59 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-06-06 15:26:59 -耗时 : 5
2019-06-06 15:26:59 -==> Parameters: heatType(String)
2019-06-06 15:26:59 -返回值 : [DictDO{id=145, name='银行转账', value='D', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=144, name='微信支付', value='C', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-06-06 15:26:59 -<==      Total: 4
2019-06-06 15:26:59 -耗时 : 8
2019-06-06 15:26:59 -返回值 : [DictDO{id=184, name='民用暖', value='1', type='heatType', description='暖费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=183, name='商业暖', value='2', type='heatType', description='暖费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=182, name='工业民', value='3', type='heatType', description='暖费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=181, name='工业商', value='4', type='heatType', description='暖费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-06-06 15:26:59 -<==      Total: 2
2019-06-06 15:26:59 -耗时 : 13
2019-06-06 15:26:59 -返回值 : [DictDO{id=126, name='使用中', value='1', type='userState', description='用户状态', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=125, name='未使用', value='0', type='userState', description='用户状态', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-06-06 15:27:16 -请求地址 : http://localhost:8081/heat/heat/list
2019-06-06 15:27:16 -HTTP METHOD : GET
2019-06-06 15:27:16 -CLASS_METHOD : com.bootdo.heat.controller.HeatController.list
2019-06-06 15:27:16 -参数 : [{limit=10, offset=0, userType=, heatType=, userOrg=, userId=1-0001, createTime=, queryType=1}]
2019-06-06 15:27:16 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`heat_type`,`heat_price`,`heat_area`,`heat_cost`,`heat_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from heat WHERE user_id = ? order by id asc limit ?, ? 
2019-06-06 15:27:16 -==> Parameters: 1-0001(String), 0(Integer), 10(Integer)
2019-06-06 15:27:16 -<==      Total: 1
2019-06-06 15:27:16 -==>  Preparing: select count(*) from heat WHERE user_id = ? 
2019-06-06 15:27:16 -==> Parameters: 1-0001(String)
2019-06-06 15:27:16 -<==      Total: 1
2019-06-06 15:27:16 -耗时 : 17
2019-06-06 15:27:16 -返回值 : com.bootdo.common.utils.PageUtils@16e5fbf9
2019-06-06 15:27:18 -请求地址 : http://localhost:8081/heat/heat/edit/45
2019-06-06 15:27:18 -HTTP METHOD : GET
2019-06-06 15:27:18 -CLASS_METHOD : com.bootdo.heat.controller.HeatController.edit
2019-06-06 15:27:18 -参数 : [45, {}]
2019-06-06 15:27:18 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`heat_type`,`heat_price`,`heat_area`,`heat_cost`,`heat_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from heat where id = ? 
2019-06-06 15:27:18 -==> Parameters: 45(Integer)
2019-06-06 15:27:18 -<==      Total: 1
2019-06-06 15:27:18 -耗时 : 6
2019-06-06 15:27:18 -返回值 : heat/heat/edit
2019-06-06 15:27:18 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-06-06 15:27:18 -HTTP METHOD : GET
2019-06-06 15:27:18 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-06-06 15:27:18 -参数 : [userType]
2019-06-06 15:27:18 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-06-06 15:27:18 -==> Parameters: userType(String)
2019-06-06 15:27:18 -请求地址 : http://localhost:8081/common/dict/list/userState
2019-06-06 15:27:18 -HTTP METHOD : GET
2019-06-06 15:27:18 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-06-06 15:27:18 -参数 : [userState]
2019-06-06 15:27:18 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-06-06 15:27:18 -==> Parameters: userState(String)
2019-06-06 15:27:18 -请求地址 : http://localhost:8081/common/dict/list/heatType
2019-06-06 15:27:18 -HTTP METHOD : GET
2019-06-06 15:27:18 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-06-06 15:27:18 -参数 : [heatType]
2019-06-06 15:27:18 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-06-06 15:27:18 -<==      Total: 4
2019-06-06 15:27:18 -耗时 : 4
2019-06-06 15:27:18 -返回值 : [DictDO{id=145, name='银行转账', value='D', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=144, name='微信支付', value='C', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-06-06 15:27:18 -==> Parameters: heatType(String)
2019-06-06 15:27:18 -<==      Total: 2
2019-06-06 15:27:18 -耗时 : 3
2019-06-06 15:27:18 -返回值 : [DictDO{id=126, name='使用中', value='1', type='userState', description='用户状态', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=125, name='未使用', value='0', type='userState', description='用户状态', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-06-06 15:27:18 -<==      Total: 4
2019-06-06 15:27:18 -耗时 : 11
2019-06-06 15:27:18 -返回值 : [DictDO{id=184, name='民用暖', value='1', type='heatType', description='暖费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=183, name='商业暖', value='2', type='heatType', description='暖费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=182, name='工业民', value='3', type='heatType', description='暖费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=181, name='工业商', value='4', type='heatType', description='暖费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-06-06 15:27:26 -请求地址 : http://localhost:8081/heat/heat/update
2019-06-06 15:27:26 -HTTP METHOD : POST
2019-06-06 15:27:26 -CLASS_METHOD : com.bootdo.heat.controller.HeatController.update
2019-06-06 15:27:26 -参数 : [com.bootdo.heat.domain.HeatDO@5b4ad568]
2019-06-06 15:27:26 -==>  Preparing: update heat SET `user_id` = ?, `user_name` = ?, `user_type` = ?, `user_org` = ?, `user_tell` = ?, `user_state` = ?, `wages_id` = ?, `heat_type` = ?, `heat_price` = ?, `heat_area` = ?, `heat_cost` = ?, `heat_sum` = ?, `create_time` = ?, `create_by` = ?, `update_time` = ?, `update_by` = ?, `remark` = ? where id = ? 
2019-06-06 15:27:26 -==> Parameters: 1-0001(String), 李文英(String), A(String), 2(String), 13847098285(String), 1(String), (String), 1(String), 3.5(BigDecimal), 48.44(BigDecimal), 169.54(BigDecimal), 0.57(BigDecimal), 2019-05(String), admin(String), 2019-06-06 15:27:26.506(Timestamp), admin(String), (String), 45(Long)
2019-06-06 15:27:26 -<==    Updates: 1
2019-06-06 15:27:26 -耗时 : 102
2019-06-06 15:27:26 -返回值 : {msg=操作成功, code=0}
2019-06-06 15:27:26 -请求地址 : http://localhost:8081/heat/heat/list
2019-06-06 15:27:26 -HTTP METHOD : GET
2019-06-06 15:27:26 -CLASS_METHOD : com.bootdo.heat.controller.HeatController.list
2019-06-06 15:27:26 -参数 : [{limit=10, offset=0, userType=, heatType=, userOrg=, userId=1-0001, createTime=, queryType=2}]
2019-06-06 15:27:26 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`heat_type`,`heat_price`,`heat_area`,`heat_cost`,`heat_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from heat WHERE `heat_sum` < 0 and user_id = ? order by id asc limit ?, ? 
2019-06-06 15:27:26 -==> Parameters: 1-0001(String), 0(Integer), 10(Integer)
2019-06-06 15:27:26 -<==      Total: 0
2019-06-06 15:27:26 -==>  Preparing: select count(*) from heat WHERE `heat_sum` < 0 and user_id = ? 
2019-06-06 15:27:26 -==> Parameters: 1-0001(String)
2019-06-06 15:27:26 -<==      Total: 1
2019-06-06 15:27:26 -耗时 : 13
2019-06-06 15:27:26 -返回值 : com.bootdo.common.utils.PageUtils@761ad834
2019-06-06 15:27:50 -请求地址 : http://localhost:8081/index
2019-06-06 15:27:50 -HTTP METHOD : GET
2019-06-06 15:27:50 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2019-06-06 15:27:50 -参数 : [{}]
2019-06-06 15:27:50 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2019-06-06 15:27:50 -==> Parameters: 1(Long)
2019-06-06 15:27:50 -<==      Total: 50
2019-06-06 15:27:50 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2019-06-06 15:27:50 -==> Parameters: 138(Long)
2019-06-06 15:27:50 -<==      Total: 1
2019-06-06 15:27:50 -耗时 : 25
2019-06-06 15:27:50 -返回值 : index_v1
2019-06-06 15:27:50 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-06-06 15:27:50 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 26(Integer), com.bootdo.system.controller.LoginController.index()(String), {"menus":[{"attributes":{"icon":"fa fa-money","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-money","url":"/moneyList/moneyList"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"102","parentId":"106","text":"现金缴费"},{"attributes":{"icon":"fa fa-book","url":"/moneyLog/elecLog"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"107","parentId":"106","text":"缴费记录"},{"attributes":{"icon":"fa fa-image","url":"/moneyList/moneyWZ"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"164","parentId":"106","text":"乌镇管理"}],"hasChildren":true,"hasParent":false,"id":"106","parentId":"0","text":"收费管理"},{"attributes":{"icon":"fa fa-lightbulb-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/elec/elec"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"121","parentId":"103","text":"电费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"elec/elecInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"122","parentId":"103","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"elec/elecUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"123","parentId":"103","text":"电表上传"},{"attributes":{"icon":"fa fa-cc","url":"/elec/elecPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"124","parentId":"103","text":"电价管理"}],"hasChildren":true,"hasParent":false,"id":"103","parentId":"0","text":"电费管理"},{"attributes":{"icon":"fa fa-tint","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/water/water"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"117","parentId":"105","text":"水费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"water/waterInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"118","parentId":"105","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"water/waterUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"119","parentId":"105","text":"水费生成"},{"attributes":{"icon":"fa fa-cc","url":"/water/waterPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"120","parentId":"105","text":"水价管理"}],"hasChildren":true,"hasParent":false,"id":"105","parentId":"0","text":"水费管理"},{"attributes":{"icon":"fa fa-fire","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/heat/heat"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"113","parentId":"104","text":"暖费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"heat/heatInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"114","parentId":"104","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"heat/heatUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"115","parentId":"104","text":"暖费生成"},{"attributes":{"icon":"","url":"/heat/heatPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"116","parentId":"104","text":"暖价管理"}],"hasChildren":true,"hasParent":false,"id":"104","parentId":"0","text":"暖费管理"},{"attributes":{"icon":"fa fa-vcard-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-bomb","url":"/print/print"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"149","parentId":"108","text":"票据记录"}],"hasChildren":true,"hasParent":false,"id":"108","parentId":"0","text":"票据管理"},{"attributes":{"icon":"fa fa-bar-chart","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-area-chart","url":"/chart/graph_echarts.html"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","text":"百度chart"},{"attributes":{"icon":"fa fa-sun-o","url":"charts/countDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"109","parentId":"97","text":"日统计报表"},{"attributes":{"icon":"fa fa-calendar","url":"charts/tableDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"161","parentId":"97","text":"日统计表格"},{"attributes":{"icon":"fa fa-registered","url":"charts/countMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"110","parentId":"97","text":"月统计报表"},{"attributes":{"icon":"fa fa-building-o","url":"charts/tableElecMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"162","parentId":"97","text":"月统计表格"},{"attributes":{"icon":"fa fa-support","url":"charts/countYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"111","parentId":"97","text":"年统计报表"},{"attributes":{"icon":"fa fa-book","url":"charts/tableElecYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"163","parentId":"97","text":"年统计表格"},{"attributes":{"icon":"fa fa-money","url":"charts/countOwe"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"155","(String), 127.0.0.1(String), 2019-06-06 15:27:50.555(Timestamp)
2019-06-06 15:27:50 -请求地址 : http://localhost:8081/main
2019-06-06 15:27:50 -HTTP METHOD : GET
2019-06-06 15:27:50 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-06-06 15:27:50 -参数 : []
2019-06-06 15:27:50 -耗时 : 0
2019-06-06 15:27:50 -返回值 : main
2019-06-06 15:27:50 -<==    Updates: 1
2019-06-06 15:27:50 -请求地址 : http://localhost:8081/oa/notify/message
2019-06-06 15:27:50 -HTTP METHOD : GET
2019-06-06 15:27:50 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2019-06-06 15:27:50 -参数 : []
2019-06-06 15:27:50 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2019-06-06 15:27:50 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2019-06-06 15:27:50 -<==      Total: 0
2019-06-06 15:27:50 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2019-06-06 15:27:50 -==> Parameters: 1(Long), 0(String)
2019-06-06 15:27:50 -<==      Total: 1
2019-06-06 15:27:50 -耗时 : 7
2019-06-06 15:27:50 -返回值 : com.bootdo.common.utils.PageUtils@edeefcd
2019-06-06 15:27:50 -请求地址 : http://localhost:8081/main
2019-06-06 15:27:50 -HTTP METHOD : GET
2019-06-06 15:27:50 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-06-06 15:27:50 -参数 : []
2019-06-06 15:27:50 -耗时 : 0
2019-06-06 15:27:50 -返回值 : main
2019-06-06 15:27:52 -请求地址 : http://localhost:8081/moneyList/moneyList
2019-06-06 15:27:52 -HTTP METHOD : GET
2019-06-06 15:27:52 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.MoneyList
2019-06-06 15:27:52 -参数 : []
2019-06-06 15:27:52 -耗时 : 0
2019-06-06 15:27:52 -返回值 : moneyList/moneyList
2019-06-06 15:27:55 -请求地址 : http://localhost:8081/system/sysDept/treeView
2019-06-06 15:27:55 -HTTP METHOD : GET
2019-06-06 15:27:55 -CLASS_METHOD : com.bootdo.system.controller.DeptController.treeView
2019-06-06 15:27:55 -参数 : []
2019-06-06 15:27:55 -耗时 : 0
2019-06-06 15:27:55 -返回值 : system/dept/deptTree
2019-06-06 15:27:55 -请求地址 : http://localhost:8081/system/sysDept/tree
2019-06-06 15:27:55 -HTTP METHOD : GET
2019-06-06 15:27:55 -CLASS_METHOD : com.bootdo.system.controller.DeptController.tree
2019-06-06 15:27:55 -参数 : []
2019-06-06 15:27:55 -==>  Preparing: select `dept_id`,`parent_id`,`name`,`order_num`,`del_flag` from sys_dept order by dept_id desc 
2019-06-06 15:27:55 -==> Parameters: 
2019-06-06 15:27:55 -<==      Total: 3
2019-06-06 15:27:55 -耗时 : 5
2019-06-06 15:27:55 -返回值 : {"checked":false,"children":[{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"3","parentId":"1","state":{"opened":true},"text":"牙星"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"2","parentId":"1","state":{"opened":true},"text":"五九"}],"hasChildren":true,"hasParent":false,"id":"1","parentId":"0","state":{"opened":true},"text":"总公司"}
2019-06-06 15:27:57 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUser
2019-06-06 15:27:57 -HTTP METHOD : POST
2019-06-06 15:27:57 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.queryAllUser
2019-06-06 15:27:57 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@249a6e7d]
2019-06-06 15:27:57 -==>  Preparing: select COUNT(*) number, user_id, user_name, user_type, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, elec_type as moneyType, elec_price as userPrice, elec_amount as userArea, elec_cost as userCost, elec_Sum as userSum from ELEC WHERE create_time = ? and user_org = ? and user_Id = ? and user_type != 'B' UNION ALL select COUNT(*) number, user_id, user_name, user_type, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, heat_type as moneyType, heat_price as userPrice, heat_area as userArea, heat_cost as userCost, heat_Sum as userSum from heat WHERE create_time = ? and user_org = ? and user_Id = ? and user_type != 'B' UNION ALL select COUNT(*) number, user_id, user_name, user_type, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, water_type as moneyType, water_price as userPrice, water_price as userArea, water_price as userCost, water_Sum as userSum from water WHERE create_time = ? and user_org = ? and user_Id = ? and user_type != 'B' 
2019-06-06 15:27:57 -==> Parameters: 2019-05(String), 2(String), 1-0001(String), 2019-05(String), 2(String), 1-0001(String), 2019-05(String), 2(String), 1-0001(String)
2019-06-06 15:27:58 -<==      Total: 3
2019-06-06 15:27:58 -耗时 : 440
2019-06-06 15:27:58 -返回值 : [com.bootdo.moneyList.damain.MoneyListDO@3f4251b8, com.bootdo.moneyList.damain.MoneyListDO@16a5acd4, com.bootdo.moneyList.damain.MoneyListDO@61bbc1fb]
2019-06-06 15:28:03 -请求地址 : http://localhost:8081/moneyList/moneyList/updateMoney
2019-06-06 15:28:03 -HTTP METHOD : POST
2019-06-06 15:28:03 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.updateMoney
2019-06-06 15:28:03 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@4855111c]
2019-06-06 15:28:03 -==>  Preparing: select COUNT(*) number, user_id, user_name, user_type, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, elec_type as moneyType, elec_price as userPrice, elec_amount as userArea, elec_cost as userCost, elec_Sum as userSum from ELEC WHERE create_time = ? and user_org = ? and user_Id = ? and user_type != 'B' UNION ALL select COUNT(*) number, user_id, user_name, user_type, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, heat_type as moneyType, heat_price as userPrice, heat_area as userArea, heat_cost as userCost, heat_Sum as userSum from heat WHERE create_time = ? and user_org = ? and user_Id = ? and user_type != 'B' UNION ALL select COUNT(*) number, user_id, user_name, user_type, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, water_type as moneyType, water_price as userPrice, water_price as userArea, water_price as userCost, water_Sum as userSum from water WHERE create_time = ? and user_org = ? and user_Id = ? and user_type != 'B' 
2019-06-06 15:28:03 -==> Parameters: 2019-05(String), 2(String), 1-0001(String), 2019-05(String), 2(String), 1-0001(String), 2019-05(String), 2(String), 1-0001(String)
2019-06-06 15:28:03 -<==      Total: 3
2019-06-06 15:28:03 -==>  Preparing: select el.start,el.end,el.hu,el.elec_amount,el.elec_cost,el.elec_price,el.elec_sum from elec el WHERE el.user_Id = ? and el.create_time = ? and el.user_org = ? and user_type != 'B' 
2019-06-06 15:28:03 -==> Parameters: 1-0001(String), 2019-05(String), 2(String)
2019-06-06 15:28:03 -<==      Total: 1
2019-06-06 15:28:06 -==>  Preparing: select he.heat_area, he.heat_cost, he.heat_price, he.heat_sum from heat he WHERE he.user_Id = ? and he.create_time = ? and he.user_org = ? and user_type != 'B' 
2019-06-06 15:28:06 -==> Parameters: 1-0001(String), 2019-05(String), 2(String)
2019-06-06 15:28:06 -<==      Total: 1
2019-06-06 15:28:06 -==>  Preparing: select wa.water_price,wa.water_cost,wa.water_sum from water wa WHERE wa.user_Id = ? and wa.create_time = ? and wa.user_org = ? and user_type != 'B' 
2019-06-06 15:28:06 -==> Parameters: 1-0001(String), 2019-05(String), 2(String)
2019-06-06 15:28:06 -<==      Total: 1
2019-06-06 15:28:06 -==>  Preparing: update ELEC set elec_sum = elec_sum + ?,user_type=? WHERE create_time = ? and user_org = ? and user_Id = ? and user_type != 'B' 
2019-06-06 15:28:06 -==> Parameters: 1(String), A(String), 2019-05(String), 2(String), 1-0001(String)
2019-06-06 15:28:06 -<==    Updates: 1
2019-06-06 15:28:06 -==>  Preparing: insert into elec_log ( `user_id`, `user_name`, `user_type`, `user_org`, `elec_type`, `elec_money`, `elec_date`, `create_time`, `create_by`, `update_time`, `update_by`, `remark` ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-06-06 15:28:06 -==> Parameters: 1-0001(String), 李文英(String), A(String), 2(String), 1(String), 1(BigDecimal), 2019-06-06 15:28:03.641(Timestamp), 2019-05(String), admin(String), 2019-06-06 15:28:03.641(Timestamp), admin(String), null
2019-06-06 15:28:06 -<==    Updates: 1
2019-06-06 15:28:06 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`start`,`end`,`hu`,`elec_price`,`elec_amount`,`elec_cost`,`elec_sum`,`elec_money`,`heat_price`,`heat_area`,`heat_cost`,`heat_sum`,`heat_money`,`water_price`,`water_cost`,`water_sum`,`water_money`,`print_date`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from print where user_id = ? and user_org = ? and create_time = ? 
2019-06-06 15:28:06 -==> Parameters: 1-0001(String), 2(String), 2019-05(String)
2019-06-06 15:28:06 -<==      Total: 1
2019-06-06 15:28:06 -==>  Preparing: update print SET `user_name` = ?, `start` = ?, `end` = ?, `hu` = ?, `elec_price` = ?, `elec_amount` = ?, `elec_cost` = ?, `elec_sum` = ?, `elec_money` = ? where id = ? 
2019-06-06 15:28:06 -==> Parameters: 李文英(String), 10300(Integer), 10370(Integer), 1(Integer), 0.465(BigDecimal), 70.00(BigDecimal), 32.55(BigDecimal), -26.02(BigDecimal), 1(BigDecimal), 98(Long)
2019-06-06 15:28:07 -<==    Updates: 1
2019-06-06 15:28:07 -耗时 : 3544
2019-06-06 15:28:07 -返回值 : 98
2019-06-06 15:28:08 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUser
2019-06-06 15:28:08 -HTTP METHOD : POST
2019-06-06 15:28:08 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.queryAllUser
2019-06-06 15:28:08 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@1f4f3e7e]
2019-06-06 15:28:08 -==>  Preparing: select COUNT(*) number, user_id, user_name, user_type, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, elec_type as moneyType, elec_price as userPrice, elec_amount as userArea, elec_cost as userCost, elec_Sum as userSum from ELEC WHERE create_time = ? and user_org = ? and user_Id = ? and user_type != 'B' UNION ALL select COUNT(*) number, user_id, user_name, user_type, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, heat_type as moneyType, heat_price as userPrice, heat_area as userArea, heat_cost as userCost, heat_Sum as userSum from heat WHERE create_time = ? and user_org = ? and user_Id = ? and user_type != 'B' UNION ALL select COUNT(*) number, user_id, user_name, user_type, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, water_type as moneyType, water_price as userPrice, water_price as userArea, water_price as userCost, water_Sum as userSum from water WHERE create_time = ? and user_org = ? and user_Id = ? and user_type != 'B' 
2019-06-06 15:28:08 -==> Parameters: 2019-05(String), 2(String), 1-0001(String), 2019-05(String), 2(String), 1-0001(String), 2019-05(String), 2(String), 1-0001(String)
2019-06-06 15:28:08 -<==      Total: 3
2019-06-06 15:28:08 -耗时 : 23
2019-06-06 15:28:08 -返回值 : [com.bootdo.moneyList.damain.MoneyListDO@7defee28, com.bootdo.moneyList.damain.MoneyListDO@198dc583, com.bootdo.moneyList.damain.MoneyListDO@7ec53819]
2019-06-06 15:28:09 -请求地址 : http://localhost:8081/moneyList/moneyList/moneyPrint/98
2019-06-06 15:28:09 -HTTP METHOD : GET
2019-06-06 15:28:09 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.printEdit
2019-06-06 15:28:09 -参数 : [98, {}]
2019-06-06 15:28:09 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`start`,`end`,`hu`,`elec_price`,`elec_amount`,`elec_cost`,`elec_sum`,`elec_money`,`heat_price`,`heat_area`,`heat_cost`,`heat_sum`,`heat_money`,`water_price`,`water_cost`,`water_sum`,`water_money`,`print_date`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from print where id = ? 
2019-06-06 15:28:09 -==> Parameters: 98(Long)
2019-06-06 15:28:09 -<==      Total: 1
2019-06-06 15:28:09 -耗时 : 4
2019-06-06 15:28:09 -返回值 : moneyList/moneyPrint
2019-06-06 15:30:27 -Starting BootdoApplication on PC-201905091110 with PID 23276 (D:\eclipse2018-work\bootdo\target\classes started by Administrator in D:\eclipse2018-work\bootdo)
2019-06-06 15:30:27 -Running with Spring Boot v2.0.3.RELEASE, Spring v5.0.7.RELEASE
2019-06-06 15:30:27 -The following profiles are active: dev
2019-06-06 15:30:28 -Refreshing org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@4b672daa: startup date [Thu Jun 06 15:30:28 CST 2019]; root of context hierarchy
2019-06-06 15:30:32 -Multiple Spring Data modules found, entering strict repository configuration mode!
2019-06-06 15:30:35 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$f7033d37] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-06 15:30:35 -Bean 'shiroConfig' of type [com.bootdo.system.config.ShiroConfig$$EnhancerBySpringCGLIB$$e95c6bde] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-06 15:30:37 -Bean 'userRealm' of type [com.bootdo.system.shiro.UserRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-06 15:30:37 -Bean 'cacheManager2' of type [net.sf.ehcache.CacheManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-06 15:30:37 -Bean 'ehCacheManager' of type [org.apache.shiro.cache.ehcache.EhCacheManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-06 15:30:37 -Cache with name 'com.bootdo.system.shiro.UserRealm.authorizationCache' does not yet exist.  Creating now.
2019-06-06 15:30:38 -Added EhCache named [com.bootdo.system.shiro.UserRealm.authorizationCache]
2019-06-06 15:30:38 -Bean 'sessionDAO' of type [org.apache.shiro.session.mgt.eis.MemorySessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-06 15:30:38 -Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-06 15:30:38 -Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-06 15:30:38 -Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-06-06 15:30:39 -Tomcat initialized with port(s): 8081 (http)
2019-06-06 15:30:39 -Initializing ProtocolHandler ["http-nio-8081"]
2019-06-06 15:30:39 -Starting service [Tomcat]
2019-06-06 15:30:39 -Starting Servlet Engine: Apache Tomcat/8.5.31
2019-06-06 15:30:39 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [D:\Java\JDK\jdk1.8.0_102\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;D:\Java\JDK\jdk1.8.0_102\jre\bin;D:/Java/JRE/bin/server;D:/Java/JRE/bin;D:/Java/JRE/lib/amd64;C:\ProgramData\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Windows\System32\OpenSSH\;%JAVA_HOME\bin%;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;;C:\Users\Administrator\Desktop;;.]
2019-06-06 15:30:40 -Initializing Spring embedded WebApplicationContext
2019-06-06 15:30:40 -Root WebApplicationContext: initialization completed in 12084 ms
2019-06-06 15:30:41 -Mapping filter: 'characterEncodingFilter' to: [/*]
2019-06-06 15:30:41 -Mapping filter: 'hiddenHttpMethodFilter' to: [/*]
2019-06-06 15:30:41 -Mapping filter: 'httpPutFormContentFilter' to: [/*]
2019-06-06 15:30:41 -Mapping filter: 'requestContextFilter' to: [/*]
2019-06-06 15:30:41 -Filter xssFilter was not registered (disabled)
2019-06-06 15:30:41 -Mapping filter: 'webStatFilter' to urls: [/*]
2019-06-06 15:30:41 -Mapping filter: 'shiroFilterFactoryBean' to: [/*]
2019-06-06 15:30:41 -Servlet statViewServlet mapped to [/druid/*]
2019-06-06 15:30:41 -Servlet dispatcherServlet mapped to [/]
2019-06-06 15:30:50 -ApplicationContext registed-->org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@4b672daa: startup date [Thu Jun 06 15:30:28 CST 2019]; root of context hierarchy
2019-06-06 15:30:50 -Using default implementation for ThreadExecutor
2019-06-06 15:30:50 -Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2019-06-06 15:30:50 -Quartz Scheduler v.2.3.0 created.
2019-06-06 15:30:50 -RAMJobStore initialized.
2019-06-06 15:30:50 -Scheduler meta-data: Quartz Scheduler (v2.3.0) 'schedulerFactoryBean' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2019-06-06 15:30:50 -Quartz scheduler 'schedulerFactoryBean' initialized from an externally provided properties instance.
2019-06-06 15:30:50 -Quartz scheduler version: 2.3.0
2019-06-06 15:30:50 -JobFactory set to: com.bootdo.common.quartz.factory.JobFactory@5a6af2c4
2019-06-06 15:30:51 -Initializing ExecutorService  'clientInboundChannelExecutor'
2019-06-06 15:30:51 -Initializing ExecutorService  'clientOutboundChannelExecutor'
2019-06-06 15:30:55 -Mapped "{[/charts/countDD/getCountDD],methods=[POST]}" onto public java.util.Map<java.lang.String, java.lang.Object> com.bootdo.charts.controller.countDDController.getCountD(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo)
2019-06-06 15:30:55 -Mapped "{[/charts/countDD],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.countDDController.countDD()
2019-06-06 15:30:55 -Mapped "{[/charts/countDD/exportDD],methods=[GET]}" onto public void com.bootdo.charts.controller.countDDController.exportDD(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.HeatLogVo,com.bootdo.moneyLog.vo.WaterLogVo,javax.servlet.http.HttpServletResponse)
2019-06-06 15:30:55 -Mapped "{[/charts/countMM],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.countMMController.countMM()
2019-06-06 15:30:55 -Mapped "{[/charts/countMM/getCountMM],methods=[POST]}" onto public java.util.Map<java.lang.String, java.lang.Object> com.bootdo.charts.controller.countMMController.getCountMM(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo)
2019-06-06 15:30:55 -Mapped "{[/charts/countMM/exportMM],methods=[GET]}" onto public void com.bootdo.charts.controller.countMMController.exportMM(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.HeatLogVo,com.bootdo.moneyLog.vo.WaterLogVo,javax.servlet.http.HttpServletResponse)
2019-06-06 15:30:55 -Mapped "{[/charts/countOwe/exportOwe],methods=[GET]}" onto public void com.bootdo.charts.controller.countOweController.exportOwe(com.bootdo.elec.vo.ElecVo,com.bootdo.heat.vo.HeatVo,com.bootdo.water.vo.WaterVo,javax.servlet.http.HttpServletResponse)
2019-06-06 15:30:55 -Mapped "{[/charts/countOwe],methods=[GET]}" onto java.lang.String com.bootdo.charts.controller.countOweController.countOwe()
2019-06-06 15:30:55 -Mapped "{[/charts/countOwe/getCountOwe],methods=[POST]}" onto public java.util.Map<java.lang.String, java.lang.Object> com.bootdo.charts.controller.countOweController.getCountOwe(com.bootdo.elec.vo.ElecVo,com.bootdo.water.vo.WaterVo,com.bootdo.heat.vo.HeatVo)
2019-06-06 15:30:55 -Mapped "{[/charts/countRun],methods=[GET]}" onto java.lang.String com.bootdo.charts.controller.countRunController.countRun()
2019-06-06 15:30:55 -Mapped "{[/charts/countRun/getCountRun],methods=[POST]}" onto public java.util.Map<java.lang.String, java.lang.Object> com.bootdo.charts.controller.countRunController.getCountRun(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo)
2019-06-06 15:30:55 -Mapped "{[/charts/countRun/exportRun],methods=[GET]}" onto public void com.bootdo.charts.controller.countRunController.exportRun(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.HeatLogVo,com.bootdo.moneyLog.vo.WaterLogVo,javax.servlet.http.HttpServletResponse)
2019-06-06 15:30:55 -Mapped "{[/charts/countYY],methods=[GET]}" onto java.lang.String com.bootdo.charts.controller.countYYController.countYY()
2019-06-06 15:30:55 -Mapped "{[/charts/countYY/getCountYY],methods=[POST]}" onto public java.util.Map<java.lang.String, java.lang.Object> com.bootdo.charts.controller.countYYController.getCountYY(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo)
2019-06-06 15:30:55 -Mapped "{[/charts/countYY/exportYY],methods=[GET]}" onto public void com.bootdo.charts.controller.countYYController.exportYY(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.HeatLogVo,com.bootdo.moneyLog.vo.WaterLogVo,javax.servlet.http.HttpServletResponse)
2019-06-06 15:30:55 -Mapped "{[/charts/tableDD],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.tableDDController.countDD()
2019-06-06 15:30:55 -Mapped "{[/charts/tableDD/exportDD],methods=[GET]}" onto public void com.bootdo.charts.controller.tableDDController.exportDD(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.HeatLogVo,com.bootdo.moneyLog.vo.WaterLogVo,javax.servlet.http.HttpServletResponse)
2019-06-06 15:30:55 -Mapped "{[/charts/tableDD/getTableDD],methods=[POST]}" onto public java.util.Map<java.lang.String, java.lang.Object> com.bootdo.charts.controller.tableDDController.getTableDD(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo)
2019-06-06 15:30:55 -Mapped "{[/charts/tableElecMM/tableElecMM],methods=[POST]}" onto public java.util.Map<java.lang.String, java.lang.Object> com.bootdo.charts.controller.tableElecMMController.tableElecMM(com.bootdo.elec.vo.ElecVo,com.bootdo.moneyLog.vo.ElecLogVo)
2019-06-06 15:30:55 -Mapped "{[/charts/tableElecMM],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.tableElecMMController.tableElecMM()
2019-06-06 15:30:55 -Mapped "{[/charts/tableElecMM/exportElecMM],methods=[GET]}" onto public void com.bootdo.charts.controller.tableElecMMController.exportElecMM(com.bootdo.elec.vo.ElecVo,com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse)
2019-06-06 15:30:55 -Mapped "{[/charts/tableElecYY/tableElecYY],methods=[POST]}" onto public java.util.Map<java.lang.String, java.lang.Object> com.bootdo.charts.controller.tableElecYYController.tableElecYY(com.bootdo.elec.vo.ElecVo,com.bootdo.moneyLog.vo.ElecLogVo)
2019-06-06 15:30:55 -Mapped "{[/charts/tableElecYY],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.tableElecYYController.tableElecYY()
2019-06-06 15:30:55 -Mapped "{[/charts/tableElecYY/exportElecYY],methods=[GET]}" onto public void com.bootdo.charts.controller.tableElecYYController.exportElecYY(com.bootdo.elec.vo.ElecVo,com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse)
2019-06-06 15:30:55 -Mapped "{[/charts/tableHeatMM/tableHeatMM],methods=[POST]}" onto public java.util.Map<java.lang.String, java.lang.Object> com.bootdo.charts.controller.tableHeatMMController.tableHeatMM(com.bootdo.heat.vo.HeatVo,com.bootdo.moneyLog.vo.HeatLogVo)
2019-06-06 15:30:55 -Mapped "{[/charts/tableHeatMM],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.tableHeatMMController.tableHeatMM()
2019-06-06 15:30:55 -Mapped "{[/charts/tableHeatMM/exportHeatMM],methods=[GET]}" onto public void com.bootdo.charts.controller.tableHeatMMController.exportHeatMM(com.bootdo.heat.vo.HeatVo,com.bootdo.moneyLog.vo.HeatLogVo,javax.servlet.http.HttpServletResponse)
2019-06-06 15:30:55 -Mapped "{[/charts/tableHeatYY/exportHeatYY],methods=[GET]}" onto public void com.bootdo.charts.controller.tableHeatYYController.exportHeatYY(com.bootdo.heat.vo.HeatVo,com.bootdo.moneyLog.vo.HeatLogVo,javax.servlet.http.HttpServletResponse)
2019-06-06 15:30:55 -Mapped "{[/charts/tableHeatYY],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.tableHeatYYController.tableHeatYY()
2019-06-06 15:30:55 -Mapped "{[/charts/tableHeatYY/tableHeatYY],methods=[POST]}" onto public java.util.Map<java.lang.String, java.lang.Object> com.bootdo.charts.controller.tableHeatYYController.tableHeatYY(com.bootdo.heat.vo.HeatVo,com.bootdo.moneyLog.vo.HeatLogVo)
2019-06-06 15:30:55 -Mapped "{[/charts/tableWaterMM/tableWaterMM],methods=[POST]}" onto public java.util.Map<java.lang.String, java.lang.Object> com.bootdo.charts.controller.tableWaterMMController.tableWaterMM(com.bootdo.water.vo.WaterVo,com.bootdo.moneyLog.vo.WaterLogVo)
2019-06-06 15:30:55 -Mapped "{[/charts/tableWaterMM],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.tableWaterMMController.tableWaterMM()
2019-06-06 15:30:55 -Mapped "{[/charts/tableWaterMM/exportWaterMM],methods=[GET]}" onto public void com.bootdo.charts.controller.tableWaterMMController.exportWaterMM(com.bootdo.water.vo.WaterVo,com.bootdo.moneyLog.vo.WaterLogVo,javax.servlet.http.HttpServletResponse)
2019-06-06 15:30:55 -Mapped "{[/charts/tableWaterYY/exportWaterYY],methods=[GET]}" onto public void com.bootdo.charts.controller.tableWaterYYController.exportWaterYY(com.bootdo.water.vo.WaterVo,com.bootdo.moneyLog.vo.WaterLogVo,javax.servlet.http.HttpServletResponse)
2019-06-06 15:30:55 -Mapped "{[/charts/tableWaterYY],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.tableWaterYYController.tableWaterYY()
2019-06-06 15:30:55 -Mapped "{[/charts/tableWaterYY/tableWaterYY],methods=[POST]}" onto public java.util.Map<java.lang.String, java.lang.Integer> com.bootdo.charts.controller.tableWaterYYController.tableWaterYY(com.bootdo.water.vo.WaterVo,com.bootdo.moneyLog.vo.WaterLogVo)
2019-06-06 15:30:55 -Mapped "{[/common/dict/add],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.add()
2019-06-06 15:30:55 -Mapped "{[/common/dict/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.remove(java.lang.Long)
2019-06-06 15:30:55 -Mapped "{[/common/dict/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.remove(java.lang.Long[])
2019-06-06 15:30:55 -Mapped "{[/common/dict/update]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.update(com.bootdo.common.domain.DictDO)
2019-06-06 15:30:55 -Mapped "{[/common/dict/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.common.controller.DictController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-06-06 15:30:55 -Mapped "{[/common/dict/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.save(com.bootdo.common.domain.DictDO)
2019-06-06 15:30:55 -Mapped "{[/common/dict/type],methods=[GET]}" onto public java.util.List<com.bootdo.common.domain.DictDO> com.bootdo.common.controller.DictController.listType()
2019-06-06 15:30:55 -Mapped "{[/common/dict/add/{type}/{description}],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.addD(org.springframework.ui.Model,java.lang.String,java.lang.String)
2019-06-06 15:30:55 -Mapped "{[/common/dict/list/{type}],methods=[GET]}" onto public java.util.List<com.bootdo.common.domain.DictDO> com.bootdo.common.controller.DictController.listByType(java.lang.String)
2019-06-06 15:30:55 -Mapped "{[/common/dict],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.dict()
2019-06-06 15:30:55 -Mapped "{[/common/dict/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.edit(java.lang.Long,org.springframework.ui.Model)
2019-06-06 15:30:55 -Mapped "{[/common/sysFile/add],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.FileController.add()
2019-06-06 15:30:55 -Mapped "{[/common/sysFile/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.remove(java.lang.Long,javax.servlet.http.HttpServletRequest)
2019-06-06 15:30:55 -Mapped "{[/common/sysFile/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.remove(java.lang.Long[])
2019-06-06 15:30:55 -Mapped "{[/common/sysFile/update]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.update(com.bootdo.common.domain.FileDO)
2019-06-06 15:30:55 -Mapped "{[/common/sysFile/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.common.controller.FileController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-06-06 15:30:55 -Mapped "{[/common/sysFile/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.save(com.bootdo.common.domain.FileDO)
2019-06-06 15:30:55 -Mapped "{[/common/sysFile/info/{id}]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.info(java.lang.Long)
2019-06-06 15:30:55 -Mapped "{[/common/sysFile],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.FileController.sysFile(org.springframework.ui.Model)
2019-06-06 15:30:55 -Mapped "{[/common/sysFile/upload],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.FileController.upload(org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpServletRequest)
2019-06-06 15:30:55 -Mapped "{[/common/sysFile/edit],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.FileController.edit(java.lang.Long,org.springframework.ui.Model)
2019-06-06 15:30:55 -Mapped "{[/common/generator/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.GeneratorController.update(java.util.Map<java.lang.String, java.lang.Object>)
2019-06-06 15:30:55 -Mapped "{[/common/generator/list],methods=[GET]}" onto java.util.List<java.util.Map<java.lang.String, java.lang.Object>> com.bootdo.common.controller.GeneratorController.list()
2019-06-06 15:30:55 -Mapped "{[/common/generator/code/{tableName}]}" onto public void com.bootdo.common.controller.GeneratorController.code(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String) throws java.io.IOException
2019-06-06 15:30:55 -Mapped "{[/common/generator],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.GeneratorController.generator()
2019-06-06 15:30:55 -Mapped "{[/common/generator/edit],methods=[GET]}" onto public java.lang.String com.bootdo.common.controller.GeneratorController.edit(org.springframework.ui.Model)
2019-06-06 15:30:55 -Mapped "{[/common/generator/batchCode]}" onto public void com.bootdo.common.controller.GeneratorController.batchCode(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String) throws java.io.IOException
2019-06-06 15:30:55 -Mapped "{[/common/job/add],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.JobController.add()
2019-06-06 15:30:55 -Mapped "{[/common/job/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.remove(java.lang.Long)
2019-06-06 15:30:55 -Mapped "{[/common/job/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.remove(java.lang.Long[])
2019-06-06 15:30:55 -Mapped "{[/common/job/update],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.update(com.bootdo.common.domain.TaskDO)
2019-06-06 15:30:55 -Mapped "{[/common/job/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.common.controller.JobController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-06-06 15:30:55 -Mapped "{[/common/job/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.save(com.bootdo.common.domain.TaskDO)
2019-06-06 15:30:55 -Mapped "{[/common/job/info/{id}]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.info(java.lang.Long)
2019-06-06 15:30:55 -Mapped "{[/common/job/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.JobController.edit(java.lang.Long,org.springframework.ui.Model)
2019-06-06 15:30:55 -Mapped "{[/common/job/changeJobStatus],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.changeJobStatus(java.lang.Long,java.lang.String)
2019-06-06 15:30:55 -Mapped "{[/common/job],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.JobController.taskScheduleJob()
2019-06-06 15:30:55 -Mapped "{[/common/log/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.LogController.remove(java.lang.Long)
2019-06-06 15:30:55 -Mapped "{[/common/log],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.LogController.log()
2019-06-06 15:30:55 -Mapped "{[/common/log/list],methods=[GET]}" onto com.bootdo.common.domain.PageDO<com.bootdo.common.domain.LogDO> com.bootdo.common.controller.LogController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-06-06 15:30:55 -Mapped "{[/common/log/batchRemove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.LogController.batchRemove(java.lang.Long[])
2019-06-06 15:30:55 -Mapped "{[/common/long],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.LongController.Long()
2019-06-06 15:30:55 -Mapped "{[/common/time],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.TimeController.Time()
2019-06-06 15:30:55 -Mapped "{[/error]}" onto public com.bootdo.common.utils.R com.bootdo.common.exception.MainsiteErrorController.handleError(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-06-06 15:30:55 -Mapped "{[/error],produces=[text/html]}" onto public org.springframework.web.servlet.ModelAndView com.bootdo.common.exception.MainsiteErrorController.errorHtml(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-06-06 15:30:55 -Mapped "{[/elec/elec/add],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecController.add()
2019-06-06 15:30:55 -Mapped "{[/elec/elec/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.remove(java.lang.Long)
2019-06-06 15:30:55 -Mapped "{[/elec/elec/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.remove(java.lang.Long[])
2019-06-06 15:30:55 -Mapped "{[/elec/elec/update],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.update(com.bootdo.elec.domain.ElecDO)
2019-06-06 15:30:55 -Mapped "{[/elec/elec/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.elec.controller.ElecController.list(java.util.Map<java.lang.String, java.lang.Object>,com.bootdo.elec.domain.ElecDO)
2019-06-06 15:30:55 -Mapped "{[/elec/elec/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.save(com.bootdo.elec.domain.ElecDO)
2019-06-06 15:30:55 -Mapped "{[/elec/elec],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecController.Elec()
2019-06-06 15:30:55 -Mapped "{[/elec/elec/exprotElec],methods=[GET]}" onto public void com.bootdo.elec.controller.ElecController.exprotExcel(com.bootdo.elec.vo.ElecVo,javax.servlet.http.HttpServletResponse)
2019-06-06 15:30:55 -Mapped "{[/elec/elec/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecController.edit(java.lang.Long,org.springframework.ui.Model)
2019-06-06 15:30:55 -Mapped "{[/elec/elecInto/exprotElecIntoExcel],methods=[GET]}" onto public void com.bootdo.elec.controller.ElecIntoController.exprotExcel(com.bootdo.elec.vo.ElecVo,javax.servlet.http.HttpServletResponse)
2019-06-06 15:30:55 -Mapped "{[/elec/elecInto],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecIntoController.ElecInto()
2019-06-06 15:30:55 -Mapped "{[/elec/elecInto/importElecIntoExcel],methods=[POST]}" onto public java.lang.String com.bootdo.elec.controller.ElecIntoController.importElecIntoExcel(org.springframework.web.multipart.MultipartFile,com.bootdo.elec.vo.ElecVo,javax.servlet.http.HttpServletResponse) throws java.lang.Exception
2019-06-06 15:30:55 -Mapped "{[/elec/elecPrice/add],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecPriceController.add()
2019-06-06 15:30:55 -Mapped "{[/elec/elecPrice/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecPriceController.remove(java.lang.Long)
2019-06-06 15:30:55 -Mapped "{[/elec/elecPrice/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecPriceController.remove(java.lang.Long[])
2019-06-06 15:30:55 -Mapped "{[/elec/elecPrice/update]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecPriceController.update(com.bootdo.elec.domain.ElecPriceDO)
2019-06-06 15:30:55 -Mapped "{[/elec/elecPrice/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.elec.controller.ElecPriceController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-06-06 15:30:55 -Mapped "{[/elec/elecPrice/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecPriceController.save(com.bootdo.elec.domain.ElecPriceDO,com.bootdo.elec.domain.ElecDO)
2019-06-06 15:30:55 -Mapped "{[/elec/elecPrice],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecPriceController.ElecPrice()
2019-06-06 15:30:55 -Mapped "{[/elec/elecPrice/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecPriceController.edit(java.lang.Long,org.springframework.ui.Model)
2019-06-06 15:30:55 -Mapped "{[/elec/elecUpLoad],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecUpLoadController.Elec()
2019-06-06 15:30:55 -Mapped "{[/elec/elecUpLoad/importElecExcel],methods=[POST]}" onto public java.util.Map<java.lang.String, java.lang.Object> com.bootdo.elec.controller.ElecUpLoadController.importElecExcel(org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpServletRequest) throws java.lang.Exception
2019-06-06 15:30:55 -Mapped "{[/elec/elecUpLoad/importElecUser]}" onto public java.lang.String com.bootdo.elec.controller.ElecUpLoadController.importElecUser(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)
2019-06-06 15:30:55 -Mapped "{[/elec/elecUpLoad/exprotElecExcel],methods=[GET]}" onto public void com.bootdo.elec.controller.ElecUpLoadController.exprotElecExcel(com.bootdo.elec.vo.ElecVo,javax.servlet.http.HttpServletResponse)
2019-06-06 15:30:55 -Mapped "{[/heat/heat/add],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatController.add()
2019-06-06 15:30:55 -Mapped "{[/heat/heat/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatController.remove(java.lang.Integer)
2019-06-06 15:30:55 -Mapped "{[/heat/heat/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatController.remove(java.lang.Integer[])
2019-06-06 15:30:55 -Mapped "{[/heat/heat/update]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatController.update(com.bootdo.heat.domain.HeatDO)
2019-06-06 15:30:55 -Mapped "{[/heat/heat/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.heat.controller.HeatController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-06-06 15:30:55 -Mapped "{[/heat/heat/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatController.save(com.bootdo.heat.domain.HeatDO)
2019-06-06 15:30:55 -Mapped "{[/heat/heat/exprotHeat],methods=[GET]}" onto public void com.bootdo.heat.controller.HeatController.exprotExcel(com.bootdo.heat.vo.HeatVo,javax.servlet.http.HttpServletResponse)
2019-06-06 15:30:55 -Mapped "{[/heat/heat],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatController.Heat()
2019-06-06 15:30:55 -Mapped "{[/heat/heat/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatController.edit(java.lang.Integer,org.springframework.ui.Model)
2019-06-06 15:30:55 -Mapped "{[/heat/heatInto/exprotHeatIntoExcel],methods=[GET]}" onto public void com.bootdo.heat.controller.HeatIntoController.exprotExcel(com.bootdo.heat.vo.HeatVo,javax.servlet.http.HttpServletResponse)
2019-06-06 15:30:55 -Mapped "{[/heat/heatInto],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatIntoController.HeatInto()
2019-06-06 15:30:55 -Mapped "{[/heat/heatInto/importHeatIntoExcel],methods=[POST]}" onto public java.lang.String com.bootdo.heat.controller.HeatIntoController.importHeatIntoExcel(org.springframework.web.multipart.MultipartFile,com.bootdo.heat.vo.HeatVo,javax.servlet.http.HttpServletResponse) throws java.lang.Exception
2019-06-06 15:30:55 -Mapped "{[/heat/heatPrice/add],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatPriceController.add()
2019-06-06 15:30:55 -Mapped "{[/heat/heatPrice/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatPriceController.remove(java.lang.Long)
2019-06-06 15:30:55 -Mapped "{[/heat/heatPrice/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatPriceController.remove(java.lang.Long[])
2019-06-06 15:30:55 -Mapped "{[/heat/heatPrice/update]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatPriceController.update(com.bootdo.heat.domain.HeatPriceDO)
2019-06-06 15:30:55 -Mapped "{[/heat/heatPrice/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.heat.controller.HeatPriceController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-06-06 15:30:55 -Mapped "{[/heat/heatPrice/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatPriceController.save(com.bootdo.heat.domain.HeatPriceDO)
2019-06-06 15:30:55 -Mapped "{[/heat/heatPrice],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatPriceController.HeatPrice()
2019-06-06 15:30:55 -Mapped "{[/heat/heatPrice/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatPriceController.edit(java.lang.Long,org.springframework.ui.Model)
2019-06-06 15:30:55 -Mapped "{[/heat/heatUpLoad],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatUpLoadController.HeatUpLoad()
2019-06-06 15:30:55 -Mapped "{[/heat/heatUpLoad/createHeatExcel],methods=[POST]}" onto public java.lang.String com.bootdo.heat.controller.HeatUpLoadController.createHeatExcel(com.bootdo.heat.domain.HeatDO) throws java.lang.Exception
2019-06-06 15:30:55 -Mapped "{[/heat/heatUpLoad/importHeatExcel]}" onto public java.lang.String com.bootdo.heat.controller.HeatUpLoadController.importHeatExcel(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)
2019-06-06 15:30:55 -Mapped "{[/heat/heatUpLoad/exprotHeatExcel],methods=[GET]}" onto public void com.bootdo.heat.controller.HeatUpLoadController.exprotHeatExcel(com.bootdo.heat.vo.HeatVo,javax.servlet.http.HttpServletResponse)
2019-06-06 15:30:55 -Mapped "{[/moneyList/moneyList/queryAllUser],methods=[POST]}" onto public java.util.List<com.bootdo.moneyList.damain.MoneyListDO> com.bootdo.moneyList.controller.MoneyListController.queryAllUser(com.bootdo.moneyList.damain.MoneyListDO)
2019-06-06 15:30:55 -Mapped "{[/moneyList/moneyList/updateMoney],methods=[POST]}" onto public java.lang.Long com.bootdo.moneyList.controller.MoneyListController.updateMoney(com.bootdo.moneyList.damain.MoneyListDO)
2019-06-06 15:30:55 -Mapped "{[/moneyList/moneyList/moneyPrint/{id}],methods=[GET]}" onto java.lang.String com.bootdo.moneyList.controller.MoneyListController.printEdit(java.lang.Long,org.springframework.ui.Model)
2019-06-06 15:30:55 -Mapped "{[/moneyList/moneyList],methods=[GET]}" onto java.lang.String com.bootdo.moneyList.controller.MoneyListController.MoneyList()
2019-06-06 15:30:55 -Mapped "{[/moneyList/moneyList/queryAllUserName],methods=[POST]}" onto public java.util.List<com.bootdo.moneyList.damain.MoneyListDO> com.bootdo.moneyList.controller.MoneyListController.getAllUserName(com.bootdo.moneyList.damain.MoneyListDO)
2019-06-06 15:30:55 -Mapped "{[/moneyList/moneyWZ/add],methods=[GET]}" onto java.lang.String com.bootdo.moneyList.controller.MoneyListWZController.add()
2019-06-06 15:30:55 -Mapped "{[/moneyList/moneyWZ/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyList.controller.MoneyListWZController.remove(java.lang.Long)
2019-06-06 15:30:55 -Mapped "{[/moneyList/moneyWZ/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyList.controller.MoneyListWZController.remove(java.lang.Long[])
2019-06-06 15:30:55 -Mapped "{[/moneyList/moneyWZ/update],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyList.controller.MoneyListWZController.update(com.bootdo.elec.domain.ElecDO)
2019-06-06 15:30:55 -Mapped "{[/moneyList/moneyWZ/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.moneyList.controller.MoneyListWZController.list(java.util.Map<java.lang.String, java.lang.Object>,com.bootdo.elec.domain.ElecDO)
2019-06-06 15:30:55 -Mapped "{[/moneyList/moneyWZ],methods=[GET]}" onto java.lang.String com.bootdo.moneyList.controller.MoneyListWZController.MoneyWZ()
2019-06-06 15:30:55 -Mapped "{[/moneyList/moneyWZ/batchMoney],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyList.controller.MoneyListWZController.batchMoney(java.lang.Long[])
2019-06-06 15:30:55 -Mapped "{[/moneyList/moneyWZ/exprotWZ],methods=[GET]}" onto public void com.bootdo.moneyList.controller.MoneyListWZController.exportElecYY(com.bootdo.elec.vo.ElecVo,com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse)
2019-06-06 15:30:55 -Mapped "{[/moneyList/moneyWZ/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.moneyList.controller.MoneyListWZController.edit(java.lang.Long,org.springframework.ui.Model)
2019-06-06 15:30:55 -Mapped "{[/moneyLog/elecLog/add],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.ElecLogController.add()
2019-06-06 15:30:55 -Mapped "{[/moneyLog/elecLog/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.ElecLogController.remove(java.lang.Long)
2019-06-06 15:30:55 -Mapped "{[/moneyLog/elecLog/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.ElecLogController.remove(java.lang.Long[])
2019-06-06 15:30:55 -Mapped "{[/moneyLog/elecLog/update]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.ElecLogController.update(java.util.Map<java.lang.String, java.lang.Object>,com.bootdo.moneyLog.domain.ElecLogDO)
2019-06-06 15:30:55 -Mapped "{[/moneyLog/elecLog/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.moneyLog.controller.ElecLogController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-06-06 15:30:55 -Mapped "{[/moneyLog/elecLog/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.ElecLogController.save(com.bootdo.moneyLog.domain.ElecLogDO)
2019-06-06 15:30:55 -Mapped "{[/moneyLog/elecLog/exprotElecLog],methods=[GET]}" onto public void com.bootdo.moneyLog.controller.ElecLogController.exprotElecLog(com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-06-06 15:30:55 -Mapped "{[/moneyLog/elecLog],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.ElecLogController.moneyLog()
2019-06-06 15:30:55 -Mapped "{[/moneyLog/elecLog/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.ElecLogController.edit(java.lang.Long,org.springframework.ui.Model)
2019-06-06 15:30:55 -Mapped "{[/moneyLog/heatLog/add],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.HeatLogController.add()
2019-06-06 15:30:55 -Mapped "{[/moneyLog/heatLog/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.HeatLogController.remove(java.lang.Long)
2019-06-06 15:30:55 -Mapped "{[/moneyLog/heatLog/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.HeatLogController.remove(java.lang.Long[])
2019-06-06 15:30:55 -Mapped "{[/moneyLog/heatLog/update]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.HeatLogController.update(java.util.Map<java.lang.String, java.lang.Object>,com.bootdo.moneyLog.domain.HeatLogDO)
2019-06-06 15:30:55 -Mapped "{[/moneyLog/heatLog/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.moneyLog.controller.HeatLogController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-06-06 15:30:55 -Mapped "{[/moneyLog/heatLog/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.HeatLogController.save(com.bootdo.moneyLog.domain.HeatLogDO)
2019-06-06 15:30:55 -Mapped "{[/moneyLog/heatLog/exprotHeatLog],methods=[GET]}" onto public void com.bootdo.moneyLog.controller.HeatLogController.exprotHeatLog(com.bootdo.moneyLog.vo.HeatLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-06-06 15:30:55 -Mapped "{[/moneyLog/heatLog],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.HeatLogController.HeatLog()
2019-06-06 15:30:55 -Mapped "{[/moneyLog/heatLog/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.HeatLogController.edit(java.lang.Long,org.springframework.ui.Model)
2019-06-06 15:30:55 -Mapped "{[/moneyLog/waterLog/add],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.WaterLogController.add()
2019-06-06 15:30:55 -Mapped "{[/moneyLog/waterLog/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.WaterLogController.remove(java.lang.Long)
2019-06-06 15:30:55 -Mapped "{[/moneyLog/waterLog/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.WaterLogController.remove(java.lang.Long[])
2019-06-06 15:30:55 -Mapped "{[/moneyLog/waterLog/update]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.WaterLogController.update(java.util.Map<java.lang.String, java.lang.Object>,com.bootdo.moneyLog.domain.WaterLogDO)
2019-06-06 15:30:55 -Mapped "{[/moneyLog/waterLog/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.moneyLog.controller.WaterLogController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-06-06 15:30:55 -Mapped "{[/moneyLog/waterLog/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.WaterLogController.save(com.bootdo.moneyLog.domain.WaterLogDO)
2019-06-06 15:30:55 -Mapped "{[/moneyLog/waterLog],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.WaterLogController.WaterLog()
2019-06-06 15:30:55 -Mapped "{[/moneyLog/waterLog/exprotWaterLog],methods=[GET]}" onto public void com.bootdo.moneyLog.controller.WaterLogController.exprotWaterLog(com.bootdo.moneyLog.vo.WaterLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-06-06 15:30:55 -Mapped "{[/moneyLog/waterLog/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.WaterLogController.edit(java.lang.Long,org.springframework.ui.Model)
2019-06-06 15:30:55 -Mapped "{[/oa/notify/add],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.add()
2019-06-06 15:30:55 -Mapped "{[/oa/notify/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.remove(java.lang.Long)
2019-06-06 15:30:55 -Mapped "{[/oa/notify/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.remove(java.lang.Long[])
2019-06-06 15:30:55 -Mapped "{[/oa/notify/update]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.update(com.bootdo.oa.domain.NotifyDO)
2019-06-06 15:30:55 -Mapped "{[/oa/notify/read/{id}],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.read(java.lang.Long,org.springframework.ui.Model)
2019-06-06 15:30:55 -Mapped "{[/oa/notify/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.oa.controller.NotifyController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-06-06 15:30:55 -Mapped "{[/oa/notify/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.save(com.bootdo.oa.domain.NotifyDO)
2019-06-06 15:30:55 -Mapped "{[/oa/notify/message],methods=[GET]}" onto com.bootdo.common.utils.PageUtils com.bootdo.oa.controller.NotifyController.message()
2019-06-06 15:30:55 -Mapped "{[/oa/notify/selfNotify],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.selefNotify()
2019-06-06 15:30:55 -Mapped "{[/oa/notify/selfList],methods=[GET]}" onto com.bootdo.common.utils.PageUtils com.bootdo.oa.controller.NotifyController.selfList(java.util.Map<java.lang.String, java.lang.Object>)
2019-06-06 15:30:55 -Mapped "{[/oa/notify],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.oaNotify()
2019-06-06 15:30:55 -Mapped "{[/oa/notify/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.edit(java.lang.Long,org.springframework.ui.Model)
2019-06-06 15:30:55 -Mapped "{[/print/print/add],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.add()
2019-06-06 15:30:55 -Mapped "{[/print/print/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.print.controller.PrintController.remove(java.lang.Long)
2019-06-06 15:30:55 -Mapped "{[/print/print/update]}" onto public com.bootdo.common.utils.R com.bootdo.print.controller.PrintController.update(com.bootdo.print.domain.PrintDO)
2019-06-06 15:30:55 -Mapped "{[/print/print/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.print.controller.PrintController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-06-06 15:30:55 -Mapped "{[/print/print/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.print.controller.PrintController.save(java.lang.String,com.bootdo.print.domain.PrintDO)
2019-06-06 15:30:55 -Mapped "{[/print/print/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.print.controller.PrintController.batchRemove(java.lang.Long[])
2019-06-06 15:30:55 -Mapped "{[/print/print/printEdit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.printEdit(java.lang.Long,org.springframework.ui.Model)
2019-06-06 15:30:55 -Mapped "{[/print/print],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.Print()
2019-06-06 15:30:55 -Mapped "{[/print/print/exprotPrint],methods=[GET]}" onto public void com.bootdo.print.controller.PrintController.exprotPrint(com.bootdo.print.vo.PrintVo,javax.servlet.http.HttpServletResponse)
2019-06-06 15:30:55 -Mapped "{[/print/print/printMoney],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.printMoney()
2019-06-06 15:30:55 -Mapped "{[/print/print/batchPrint],methods=[POST]}" onto public java.util.List<com.bootdo.print.vo.PrintVo> com.bootdo.print.controller.PrintController.batchPrint(java.lang.Long[])
2019-06-06 15:30:55 -Mapped "{[/print/print/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.edit(java.lang.Long,org.springframework.ui.Model)
2019-06-06 15:30:55 -Mapped "{[/system/sysDept/add/{pId}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.add(java.lang.Long,org.springframework.ui.Model)
2019-06-06 15:30:55 -Mapped "{[/system/sysDept/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.remove(java.lang.Long)
2019-06-06 15:30:55 -Mapped "{[/system/sysDept/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.remove(java.lang.Long[])
2019-06-06 15:30:55 -Mapped "{[/system/sysDept/update]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.update(com.bootdo.system.domain.DeptDO)
2019-06-06 15:30:55 -Mapped "{[/system/sysDept/list],methods=[GET]}" onto public java.util.List<com.bootdo.system.domain.DeptDO> com.bootdo.system.controller.DeptController.list()
2019-06-06 15:30:55 -Mapped "{[/system/sysDept/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.save(com.bootdo.system.domain.DeptDO)
2019-06-06 15:30:55 -Mapped "{[/system/sysDept/tree],methods=[GET]}" onto public com.bootdo.common.domain.Tree<com.bootdo.system.domain.DeptDO> com.bootdo.system.controller.DeptController.tree()
2019-06-06 15:30:55 -Mapped "{[/system/sysDept],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.dept()
2019-06-06 15:30:55 -Mapped "{[/system/sysDept/treeView],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.treeView()
2019-06-06 15:30:55 -Mapped "{[/system/sysDept/edit/{deptId}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.edit(java.lang.Long,org.springframework.ui.Model)
2019-06-06 15:30:55 -Mapped "{[/index],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.index(org.springframework.ui.Model)
2019-06-06 15:30:55 -Mapped "{[/main],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.main()
2019-06-06 15:30:55 -Mapped "{[/logout],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.logout()
2019-06-06 15:30:55 -Mapped "{[/ || ],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.welcome(org.springframework.ui.Model)
2019-06-06 15:30:55 -Mapped "{[/login],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.LoginController.ajaxLogin(java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest)
2019-06-06 15:30:55 -Mapped "{[/getVerify],methods=[GET]}" onto public void com.bootdo.system.controller.LoginController.getVerify(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-06-06 15:30:55 -Mapped "{[/login],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.login(org.springframework.ui.Model)
2019-06-06 15:30:55 -Mapped "{[/sys/menu/add/{pId}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.MenuController.add(org.springframework.ui.Model,java.lang.Long)
2019-06-06 15:30:55 -Mapped "{[/sys/menu/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.MenuController.remove(java.lang.Long)
2019-06-06 15:30:55 -Mapped "{[/sys/menu/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.MenuController.update(com.bootdo.system.domain.MenuDO)
2019-06-06 15:30:55 -Mapped "{[/sys/menu/list]}" onto java.util.List<com.bootdo.system.domain.MenuDO> com.bootdo.system.controller.MenuController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-06-06 15:30:55 -Mapped "{[/sys/menu/save],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.MenuController.save(com.bootdo.system.domain.MenuDO)
2019-06-06 15:30:55 -Mapped "{[/sys/menu/tree/{roleId}],methods=[GET]}" onto com.bootdo.common.domain.Tree<com.bootdo.system.domain.MenuDO> com.bootdo.system.controller.MenuController.tree(java.lang.Long)
2019-06-06 15:30:55 -Mapped "{[/sys/menu/tree],methods=[GET]}" onto com.bootdo.common.domain.Tree<com.bootdo.system.domain.MenuDO> com.bootdo.system.controller.MenuController.tree()
2019-06-06 15:30:55 -Mapped "{[/sys/menu],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.MenuController.menu(org.springframework.ui.Model)
2019-06-06 15:30:55 -Mapped "{[/sys/menu/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.MenuController.edit(org.springframework.ui.Model,java.lang.Long)
2019-06-06 15:30:55 -Mapped "{[/sys/role/add],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.RoleController.add()
2019-06-06 15:30:55 -Mapped "{[/sys/role/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.update(com.bootdo.system.domain.RoleDO)
2019-06-06 15:30:55 -Mapped "{[/sys/role/list],methods=[GET]}" onto java.util.List<com.bootdo.system.domain.RoleDO> com.bootdo.system.controller.RoleController.list()
2019-06-06 15:30:55 -Mapped "{[/sys/role/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.save(java.lang.Long)
2019-06-06 15:30:55 -Mapped "{[/sys/role/save],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.save(com.bootdo.system.domain.RoleDO)
2019-06-06 15:30:55 -Mapped "{[/sys/role/batchRemove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.batchRemove(java.lang.Long[])
2019-06-06 15:30:55 -Mapped "{[/sys/role/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.RoleController.edit(java.lang.Long,org.springframework.ui.Model)
2019-06-06 15:30:55 -Mapped "{[/sys/role],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.RoleController.role()
2019-06-06 15:30:55 -Mapped "{[/sys/online/list]}" onto public java.util.List<com.bootdo.system.domain.UserOnline> com.bootdo.system.controller.SessionController.list()
2019-06-06 15:30:55 -Mapped "{[/sys/online],methods=[GET]}" onto public java.lang.String com.bootdo.system.controller.SessionController.online()
2019-06-06 15:30:55 -Mapped "{[/sys/online/forceLogout/{sessionId}]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.SessionController.forceLogout(java.lang.String,org.springframework.web.servlet.mvc.support.RedirectAttributes)
2019-06-06 15:30:55 -Mapped "{[/sys/online/sessionList]}" onto public java.util.Collection<org.apache.shiro.session.Session> com.bootdo.system.controller.SessionController.sessionList()
2019-06-06 15:30:55 -Mapped "{[/sys/user/exit],methods=[POST]}" onto boolean com.bootdo.system.controller.UserController.exit(java.util.Map<java.lang.String, java.lang.Object>)
2019-06-06 15:30:55 -Mapped "{[/sys/user/add],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.add(org.springframework.ui.Model)
2019-06-06 15:30:55 -Mapped "{[/sys/user/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.remove(java.lang.Long)
2019-06-06 15:30:55 -Mapped "{[/sys/user/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.update(com.bootdo.system.domain.UserDO)
2019-06-06 15:30:55 -Mapped "{[/sys/user/list],methods=[GET]}" onto com.bootdo.common.utils.PageUtils com.bootdo.system.controller.UserController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-06-06 15:30:55 -Mapped "{[/sys/user/save],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.save(com.bootdo.system.domain.UserDO)
2019-06-06 15:30:55 -Mapped "{[/sys/user/batchRemove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.batchRemove(java.lang.Long[])
2019-06-06 15:30:55 -Mapped "{[/sys/user/tree],methods=[GET]}" onto public com.bootdo.common.domain.Tree<com.bootdo.system.domain.DeptDO> com.bootdo.system.controller.UserController.tree()
2019-06-06 15:30:55 -Mapped "{[/sys/user/treeView],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.treeView()
2019-06-06 15:30:55 -Mapped "{[/sys/user/personal],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.personal(org.springframework.ui.Model)
2019-06-06 15:30:55 -Mapped "{[/sys/user/updatePeronal],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.updatePeronal(com.bootdo.system.domain.UserDO)
2019-06-06 15:30:55 -Mapped "{[/sys/user/resetPwd],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.resetPwd(com.bootdo.system.vo.UserVO)
2019-06-06 15:30:55 -Mapped "{[/sys/user/resetPwd/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.resetPwd(java.lang.Long,org.springframework.ui.Model)
2019-06-06 15:30:55 -Mapped "{[/sys/user/adminResetPwd],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.adminResetPwd(com.bootdo.system.vo.UserVO)
2019-06-06 15:30:55 -Mapped "{[/sys/user/uploadImg],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.uploadImg(org.springframework.web.multipart.MultipartFile,java.lang.String,javax.servlet.http.HttpServletRequest)
2019-06-06 15:30:55 -Mapped "{[/sys/user/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.edit(org.springframework.ui.Model,java.lang.Long)
2019-06-06 15:30:55 -Mapped "{[/sys/user],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.user(org.springframework.ui.Model)
2019-06-06 15:30:55 -Mapped "{[/file/downImport/{importType}],methods=[GET]}" onto public void com.bootdo.temple.controller.TempletController.downImport(javax.servlet.http.HttpServletResponse,java.lang.String)
2019-06-06 15:30:55 -Mapped "{[/water/water/add],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterController.add()
2019-06-06 15:30:55 -Mapped "{[/water/water/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterController.remove(java.lang.Long)
2019-06-06 15:30:55 -Mapped "{[/water/water/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterController.remove(java.lang.Long[])
2019-06-06 15:30:55 -Mapped "{[/water/water/update]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterController.update(com.bootdo.water.domain.WaterDO)
2019-06-06 15:30:55 -Mapped "{[/water/water/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.water.controller.WaterController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-06-06 15:30:55 -Mapped "{[/water/water/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterController.save(com.bootdo.water.domain.WaterDO)
2019-06-06 15:30:55 -Mapped "{[/water/water/exprotWater],methods=[GET]}" onto public void com.bootdo.water.controller.WaterController.exprotExcel(com.bootdo.water.vo.WaterVo,javax.servlet.http.HttpServletResponse)
2019-06-06 15:30:55 -Mapped "{[/water/water],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterController.Water()
2019-06-06 15:30:55 -Mapped "{[/water/water/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterController.edit(java.lang.Long,org.springframework.ui.Model)
2019-06-06 15:30:55 -Mapped "{[/water/waterInto/importWaterIntoExcel],methods=[POST]}" onto public java.lang.String com.bootdo.water.controller.WaterIntoController.importWaterIntoExcel(org.springframework.web.multipart.MultipartFile,com.bootdo.water.vo.WaterVo,javax.servlet.http.HttpServletResponse) throws java.lang.Exception
2019-06-06 15:30:55 -Mapped "{[/water/waterInto/exprotWaterIntoExcel],methods=[GET]}" onto public void com.bootdo.water.controller.WaterIntoController.exprotExcel(com.bootdo.water.vo.WaterVo,javax.servlet.http.HttpServletResponse)
2019-06-06 15:30:55 -Mapped "{[/water/waterInto],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterIntoController.WaterInto()
2019-06-06 15:30:55 -Mapped "{[/water/waterPrice/add],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterPriceController.add()
2019-06-06 15:30:55 -Mapped "{[/water/waterPrice/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterPriceController.remove(java.lang.Long)
2019-06-06 15:30:55 -Mapped "{[/water/waterPrice/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterPriceController.remove(java.lang.Long[])
2019-06-06 15:30:55 -Mapped "{[/water/waterPrice/update]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterPriceController.update(com.bootdo.water.domain.WaterPriceDO)
2019-06-06 15:30:55 -Mapped "{[/water/waterPrice/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.water.controller.WaterPriceController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-06-06 15:30:55 -Mapped "{[/water/waterPrice/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterPriceController.save(com.bootdo.water.domain.WaterPriceDO)
2019-06-06 15:30:55 -Mapped "{[/water/waterPrice],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterPriceController.WaterPrice()
2019-06-06 15:30:55 -Mapped "{[/water/waterPrice/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterPriceController.edit(java.lang.Long,org.springframework.ui.Model)
2019-06-06 15:30:55 -Mapped "{[/water/waterUpLoad],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterUpLoadController.WaterUpLoad()
2019-06-06 15:30:55 -Mapped "{[/water/waterUpLoad/importWaterExcel]}" onto public java.lang.String com.bootdo.water.controller.WaterUpLoadController.importWaterExcel(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)
2019-06-06 15:30:55 -Mapped "{[/water/waterUpLoad/createWaterExcel],methods=[POST]}" onto public java.lang.String com.bootdo.water.controller.WaterUpLoadController.createWaterExcel(com.bootdo.water.domain.WaterDO) throws java.lang.Exception
2019-06-06 15:30:55 -Mapped "{[/water/waterUpLoad/exprotWaterExcel],methods=[GET]}" onto public void com.bootdo.water.controller.WaterUpLoadController.exprotWaterExcel(com.bootdo.water.vo.WaterVo,javax.servlet.http.HttpServletResponse)
2019-06-06 15:30:55 -Mapped "{[/v2/api-docs],methods=[GET],produces=[application/json || application/hal+json]}" onto public org.springframework.http.ResponseEntity<springfox.documentation.spring.web.json.Json> springfox.documentation.swagger2.web.Swagger2Controller.getDocumentation(java.lang.String,javax.servlet.http.HttpServletRequest)
2019-06-06 15:30:55 -Mapped "{[/swagger-resources]}" onto org.springframework.http.ResponseEntity<java.util.List<springfox.documentation.swagger.web.SwaggerResource>> springfox.documentation.swagger.web.ApiResourceController.swaggerResources()
2019-06-06 15:30:55 -Mapped "{[/swagger-resources/configuration/ui]}" onto org.springframework.http.ResponseEntity<springfox.documentation.swagger.web.UiConfiguration> springfox.documentation.swagger.web.ApiResourceController.uiConfiguration()
2019-06-06 15:30:55 -Mapped "{[/swagger-resources/configuration/security]}" onto org.springframework.http.ResponseEntity<springfox.documentation.swagger.web.SecurityConfiguration> springfox.documentation.swagger.web.ApiResourceController.securityConfiguration()
2019-06-06 15:30:56 -Initializing ExecutorService  'messageBrokerTaskScheduler'
2019-06-06 15:30:56 -Mapped URL path [/endpointChat/**] onto handler of type [class org.springframework.web.socket.sockjs.support.SockJsHttpRequestHandler]
2019-06-06 15:30:56 -Initializing ExecutorService  'brokerChannelExecutor'
2019-06-06 15:30:57 -Mapped URL path [/**/favicon.ico] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-06-06 15:30:58 -Looking for @ControllerAdvice: org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@4b672daa: startup date [Thu Jun 06 15:30:28 CST 2019]; root of context hierarchy
2019-06-06 15:30:58 -Mapped URL path [/webjars/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-06-06 15:30:58 -Mapped URL path [/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-06-06 15:30:58 -Detected @ExceptionHandler methods in BDExceptionHandler
2019-06-06 15:30:58 -[THYMELEAF][main] Template Mode 'LEGACYHTML5' is deprecated. Using Template Mode 'HTML' instead.
2019-06-06 15:31:01 -Registering beans for JMX exposure on startup
2019-06-06 15:31:01 -Bean with name 'dataSource' has been autodetected for JMX exposure
2019-06-06 15:31:01 -Located MBean 'dataSource': registering with JMX server as MBean [com.alibaba.druid.pool:name=dataSource,type=DruidDataSource]
2019-06-06 15:31:01 -Starting beans in phase 2147483647
2019-06-06 15:31:01 -Context refreshed
2019-06-06 15:31:01 -Found 1 custom documentation plugin(s)
2019-06-06 15:31:01 -Scanning for api listing references
2019-06-06 15:31:03 -Generating unique operation named: removeUsingPOST_1
2019-06-06 15:31:03 -Generating unique operation named: addUsingGET_1
2019-06-06 15:31:03 -Generating unique operation named: editUsingGET_1
2019-06-06 15:31:03 -Generating unique operation named: listUsingGET_1
2019-06-06 15:31:03 -Generating unique operation named: removeUsingPOST_2
2019-06-06 15:31:03 -Generating unique operation named: removeUsingPOST_3
2019-06-06 15:31:03 -Generating unique operation named: saveUsingPOST_1
2019-06-06 15:31:03 -Generating unique operation named: updateUsingGET_1
2019-06-06 15:31:03 -Generating unique operation named: updateUsingHEAD_1
2019-06-06 15:31:03 -Generating unique operation named: updateUsingPOST_1
2019-06-06 15:31:03 -Generating unique operation named: updateUsingPUT_1
2019-06-06 15:31:03 -Generating unique operation named: updateUsingPATCH_1
2019-06-06 15:31:03 -Generating unique operation named: updateUsingDELETE_1
2019-06-06 15:31:03 -Generating unique operation named: updateUsingOPTIONS_1
2019-06-06 15:31:03 -Generating unique operation named: updateUsingTRACE_1
2019-06-06 15:31:03 -Generating unique operation named: addUsingGET_2
2019-06-06 15:31:03 -Generating unique operation named: editUsingGET_2
2019-06-06 15:31:03 -Generating unique operation named: listUsingGET_2
2019-06-06 15:31:03 -Generating unique operation named: removeUsingPOST_4
2019-06-06 15:31:03 -Generating unique operation named: removeUsingPOST_5
2019-06-06 15:31:03 -Generating unique operation named: saveUsingPOST_2
2019-06-06 15:31:03 -Generating unique operation named: updateUsingPOST_2
2019-06-06 15:31:03 -Generating unique operation named: exprotExcelUsingGET_1
2019-06-06 15:31:03 -Generating unique operation named: addUsingGET_3
2019-06-06 15:31:03 -Generating unique operation named: editUsingGET_3
2019-06-06 15:31:03 -Generating unique operation named: listUsingGET_3
2019-06-06 15:31:04 -Generating unique operation named: removeUsingPOST_6
2019-06-06 15:31:04 -Generating unique operation named: removeUsingPOST_7
2019-06-06 15:31:04 -Generating unique operation named: saveUsingPOST_3
2019-06-06 15:31:04 -Generating unique operation named: updateUsingGET_2
2019-06-06 15:31:04 -Generating unique operation named: updateUsingHEAD_2
2019-06-06 15:31:04 -Generating unique operation named: updateUsingPOST_3
2019-06-06 15:31:04 -Generating unique operation named: updateUsingPUT_2
2019-06-06 15:31:04 -Generating unique operation named: updateUsingPATCH_2
2019-06-06 15:31:04 -Generating unique operation named: updateUsingDELETE_2
2019-06-06 15:31:04 -Generating unique operation named: updateUsingOPTIONS_2
2019-06-06 15:31:04 -Generating unique operation named: updateUsingTRACE_2
2019-06-06 15:31:04 -Generating unique operation named: addUsingGET_4
2019-06-06 15:31:04 -Generating unique operation named: editUsingGET_4
2019-06-06 15:31:04 -Generating unique operation named: listUsingGET_4
2019-06-06 15:31:04 -Generating unique operation named: removeUsingPOST_8
2019-06-06 15:31:04 -Generating unique operation named: removeUsingPOST_9
2019-06-06 15:31:04 -Generating unique operation named: saveUsingPOST_4
2019-06-06 15:31:04 -Generating unique operation named: updateUsingGET_3
2019-06-06 15:31:04 -Generating unique operation named: updateUsingHEAD_3
2019-06-06 15:31:04 -Generating unique operation named: updateUsingPOST_4
2019-06-06 15:31:04 -Generating unique operation named: updateUsingPUT_3
2019-06-06 15:31:04 -Generating unique operation named: updateUsingPATCH_3
2019-06-06 15:31:04 -Generating unique operation named: updateUsingDELETE_3
2019-06-06 15:31:04 -Generating unique operation named: updateUsingOPTIONS_3
2019-06-06 15:31:04 -Generating unique operation named: updateUsingTRACE_3
2019-06-06 15:31:04 -Generating unique operation named: ElecUsingGET_1
2019-06-06 15:31:04 -Generating unique operation named: addUsingGET_5
2019-06-06 15:31:04 -Generating unique operation named: editUsingGET_5
2019-06-06 15:31:04 -Generating unique operation named: listUsingGET_5
2019-06-06 15:31:04 -Generating unique operation named: removeUsingPOST_10
2019-06-06 15:31:04 -Generating unique operation named: removeUsingPOST_11
2019-06-06 15:31:04 -Generating unique operation named: saveUsingPOST_5
2019-06-06 15:31:04 -Generating unique operation named: updateUsingGET_4
2019-06-06 15:31:04 -Generating unique operation named: updateUsingHEAD_4
2019-06-06 15:31:04 -Generating unique operation named: updateUsingPOST_5
2019-06-06 15:31:04 -Generating unique operation named: updateUsingPUT_4
2019-06-06 15:31:04 -Generating unique operation named: updateUsingPATCH_4
2019-06-06 15:31:04 -Generating unique operation named: updateUsingDELETE_4
2019-06-06 15:31:04 -Generating unique operation named: updateUsingOPTIONS_4
2019-06-06 15:31:04 -Generating unique operation named: updateUsingTRACE_4
2019-06-06 15:31:04 -Generating unique operation named: editUsingGET_6
2019-06-06 15:31:04 -Generating unique operation named: listUsingGET_6
2019-06-06 15:31:04 -Generating unique operation named: updateUsingPOST_6
2019-06-06 15:31:04 -Generating unique operation named: addUsingGET_6
2019-06-06 15:31:04 -Generating unique operation named: editUsingGET_7
2019-06-06 15:31:04 -Generating unique operation named: exprotExcelUsingGET_2
2019-06-06 15:31:04 -Generating unique operation named: listUsingGET_7
2019-06-06 15:31:04 -Generating unique operation named: removeUsingPOST_12
2019-06-06 15:31:04 -Generating unique operation named: removeUsingPOST_13
2019-06-06 15:31:04 -Generating unique operation named: saveUsingPOST_6
2019-06-06 15:31:04 -Generating unique operation named: updateUsingGET_5
2019-06-06 15:31:04 -Generating unique operation named: updateUsingHEAD_5
2019-06-06 15:31:04 -Generating unique operation named: updateUsingPOST_7
2019-06-06 15:31:04 -Generating unique operation named: updateUsingPUT_5
2019-06-06 15:31:04 -Generating unique operation named: updateUsingPATCH_5
2019-06-06 15:31:04 -Generating unique operation named: updateUsingDELETE_5
2019-06-06 15:31:04 -Generating unique operation named: updateUsingOPTIONS_5
2019-06-06 15:31:04 -Generating unique operation named: updateUsingTRACE_5
2019-06-06 15:31:04 -Generating unique operation named: exprotExcelUsingGET_3
2019-06-06 15:31:04 -Generating unique operation named: addUsingGET_7
2019-06-06 15:31:04 -Generating unique operation named: editUsingGET_8
2019-06-06 15:31:05 -Generating unique operation named: listUsingGET_8
2019-06-06 15:31:05 -Generating unique operation named: removeUsingPOST_14
2019-06-06 15:31:05 -Generating unique operation named: removeUsingPOST_15
2019-06-06 15:31:05 -Generating unique operation named: saveUsingPOST_7
2019-06-06 15:31:05 -Generating unique operation named: updateUsingGET_6
2019-06-06 15:31:05 -Generating unique operation named: updateUsingHEAD_6
2019-06-06 15:31:05 -Generating unique operation named: updateUsingPOST_8
2019-06-06 15:31:05 -Generating unique operation named: updateUsingPUT_6
2019-06-06 15:31:05 -Generating unique operation named: updateUsingPATCH_6
2019-06-06 15:31:05 -Generating unique operation named: updateUsingDELETE_6
2019-06-06 15:31:05 -Generating unique operation named: updateUsingOPTIONS_6
2019-06-06 15:31:05 -Generating unique operation named: updateUsingTRACE_6
2019-06-06 15:31:05 -Generating unique operation named: addUsingGET_8
2019-06-06 15:31:05 -Generating unique operation named: editUsingGET_9
2019-06-06 15:31:05 -Generating unique operation named: listUsingGET_9
2019-06-06 15:31:05 -Generating unique operation named: removeUsingPOST_16
2019-06-06 15:31:05 -Generating unique operation named: removeUsingPOST_17
2019-06-06 15:31:05 -Generating unique operation named: saveUsingPOST_8
2019-06-06 15:31:05 -Generating unique operation named: updateUsingGET_7
2019-06-06 15:31:05 -Generating unique operation named: updateUsingHEAD_7
2019-06-06 15:31:05 -Generating unique operation named: updateUsingPOST_9
2019-06-06 15:31:05 -Generating unique operation named: updateUsingPUT_7
2019-06-06 15:31:05 -Generating unique operation named: updateUsingPATCH_7
2019-06-06 15:31:05 -Generating unique operation named: updateUsingDELETE_7
2019-06-06 15:31:05 -Generating unique operation named: updateUsingOPTIONS_7
2019-06-06 15:31:05 -Generating unique operation named: updateUsingTRACE_7
2019-06-06 15:31:05 -Generating unique operation named: addUsingGET_9
2019-06-06 15:31:05 -Generating unique operation named: editUsingGET_10
2019-06-06 15:31:05 -Generating unique operation named: infoUsingGET_1
2019-06-06 15:31:05 -Generating unique operation named: infoUsingHEAD_1
2019-06-06 15:31:05 -Generating unique operation named: infoUsingPOST_1
2019-06-06 15:31:05 -Generating unique operation named: infoUsingPUT_1
2019-06-06 15:31:05 -Generating unique operation named: infoUsingPATCH_1
2019-06-06 15:31:05 -Generating unique operation named: infoUsingDELETE_1
2019-06-06 15:31:05 -Generating unique operation named: infoUsingOPTIONS_1
2019-06-06 15:31:05 -Generating unique operation named: infoUsingTRACE_1
2019-06-06 15:31:05 -Generating unique operation named: listUsingGET_10
2019-06-06 15:31:05 -Generating unique operation named: removeUsingPOST_18
2019-06-06 15:31:05 -Generating unique operation named: removeUsingPOST_19
2019-06-06 15:31:05 -Generating unique operation named: saveUsingPOST_9
2019-06-06 15:31:05 -Generating unique operation named: updateUsingPOST_10
2019-06-06 15:31:05 -Generating unique operation named: listUsingGET_11
2019-06-06 15:31:05 -Generating unique operation named: removeUsingPOST_20
2019-06-06 15:31:05 -Generating unique operation named: welcomeUsingGET_1
2019-06-06 15:31:05 -Generating unique operation named: addUsingGET_10
2019-06-06 15:31:05 -Generating unique operation named: editUsingGET_11
2019-06-06 15:31:05 -Generating unique operation named: listUsingGET_12
2019-06-06 15:31:05 -Generating unique operation named: removeUsingPOST_21
2019-06-06 15:31:05 -Generating unique operation named: saveUsingPOST_10
2019-06-06 15:31:05 -Generating unique operation named: treeUsingGET_1
2019-06-06 15:31:05 -Generating unique operation named: treeUsingGET_2
2019-06-06 15:31:05 -Generating unique operation named: updateUsingPOST_11
2019-06-06 15:31:05 -Generating unique operation named: addUsingGET_11
2019-06-06 15:31:05 -Generating unique operation named: editUsingGET_12
2019-06-06 15:31:05 -Generating unique operation named: listUsingGET_13
2019-06-06 15:31:05 -Generating unique operation named: removeUsingPOST_22
2019-06-06 15:31:05 -Generating unique operation named: removeUsingPOST_23
2019-06-06 15:31:05 -Generating unique operation named: updateUsingPOST_12
2019-06-06 15:31:05 -Generating unique operation named: addUsingGET_12
2019-06-06 15:31:05 -Generating unique operation named: editUsingGET_13
2019-06-06 15:31:05 -Generating unique operation named: listUsingGET_14
2019-06-06 15:31:05 -Generating unique operation named: removeUsingPOST_24
2019-06-06 15:31:05 -Generating unique operation named: removeUsingPOST_25
2019-06-06 15:31:05 -Generating unique operation named: saveUsingPOST_11
2019-06-06 15:31:05 -Generating unique operation named: updateUsingGET_8
2019-06-06 15:31:05 -Generating unique operation named: updateUsingHEAD_8
2019-06-06 15:31:05 -Generating unique operation named: updateUsingPOST_13
2019-06-06 15:31:05 -Generating unique operation named: updateUsingPUT_8
2019-06-06 15:31:05 -Generating unique operation named: updateUsingPATCH_8
2019-06-06 15:31:06 -Generating unique operation named: updateUsingDELETE_8
2019-06-06 15:31:06 -Generating unique operation named: updateUsingOPTIONS_8
2019-06-06 15:31:06 -Generating unique operation named: updateUsingTRACE_8
2019-06-06 15:31:06 -Generating unique operation named: addUsingGET_13
2019-06-06 15:31:06 -Generating unique operation named: batchRemoveUsingPOST_1
2019-06-06 15:31:06 -Generating unique operation named: editUsingGET_14
2019-06-06 15:31:06 -Generating unique operation named: listUsingGET_15
2019-06-06 15:31:06 -Generating unique operation named: printEditUsingGET_1
2019-06-06 15:31:06 -Generating unique operation named: removeUsingPOST_26
2019-06-06 15:31:06 -Generating unique operation named: saveUsingPOST_12
2019-06-06 15:31:06 -Generating unique operation named: updateUsingGET_9
2019-06-06 15:31:06 -Generating unique operation named: updateUsingHEAD_9
2019-06-06 15:31:06 -Generating unique operation named: updateUsingPOST_14
2019-06-06 15:31:06 -Generating unique operation named: updateUsingPUT_9
2019-06-06 15:31:06 -Generating unique operation named: updateUsingPATCH_9
2019-06-06 15:31:06 -Generating unique operation named: updateUsingDELETE_9
2019-06-06 15:31:06 -Generating unique operation named: updateUsingOPTIONS_9
2019-06-06 15:31:06 -Generating unique operation named: updateUsingTRACE_9
2019-06-06 15:31:06 -Generating unique operation named: addUsingGET_14
2019-06-06 15:31:06 -Generating unique operation named: batchRemoveUsingPOST_2
2019-06-06 15:31:06 -Generating unique operation named: editUsingGET_15
2019-06-06 15:31:06 -Generating unique operation named: listUsingGET_16
2019-06-06 15:31:06 -Generating unique operation named: saveUsingPOST_13
2019-06-06 15:31:06 -Generating unique operation named: saveUsingPOST_14
2019-06-06 15:31:06 -Generating unique operation named: updateUsingPOST_15
2019-06-06 15:31:06 -Generating unique operation named: listUsingGET_17
2019-06-06 15:31:06 -Generating unique operation named: listUsingHEAD_1
2019-06-06 15:31:06 -Generating unique operation named: listUsingPOST_1
2019-06-06 15:31:06 -Generating unique operation named: listUsingPUT_1
2019-06-06 15:31:06 -Generating unique operation named: listUsingPATCH_1
2019-06-06 15:31:06 -Generating unique operation named: listUsingDELETE_1
2019-06-06 15:31:06 -Generating unique operation named: listUsingOPTIONS_1
2019-06-06 15:31:06 -Generating unique operation named: listUsingTRACE_1
2019-06-06 15:31:06 -Generating unique operation named: countDDUsingGET_1
2019-06-06 15:31:06 -Generating unique operation named: exportDDUsingGET_1
2019-06-06 15:31:06 -Generating unique operation named: exportElecYYUsingGET_1
2019-06-06 15:31:06 -Generating unique operation named: addUsingGET_15
2019-06-06 15:31:06 -Generating unique operation named: batchRemoveUsingPOST_3
2019-06-06 15:31:06 -Generating unique operation named: editUsingGET_16
2019-06-06 15:31:06 -Generating unique operation named: listUsingGET_18
2019-06-06 15:31:06 -Generating unique operation named: removeUsingPOST_27
2019-06-06 15:31:06 -Generating unique operation named: saveUsingPOST_15
2019-06-06 15:31:06 -Generating unique operation named: treeUsingGET_3
2019-06-06 15:31:06 -Generating unique operation named: treeViewUsingGET_1
2019-06-06 15:31:06 -Generating unique operation named: updateUsingPOST_16
2019-06-06 15:31:06 -Generating unique operation named: addUsingGET_16
2019-06-06 15:31:06 -Generating unique operation named: editUsingGET_17
2019-06-06 15:31:06 -Generating unique operation named: exprotExcelUsingGET_4
2019-06-06 15:31:06 -Generating unique operation named: listUsingGET_19
2019-06-06 15:31:06 -Generating unique operation named: removeUsingPOST_28
2019-06-06 15:31:06 -Generating unique operation named: removeUsingPOST_29
2019-06-06 15:31:06 -Generating unique operation named: saveUsingPOST_16
2019-06-06 15:31:06 -Generating unique operation named: updateUsingGET_10
2019-06-06 15:31:06 -Generating unique operation named: updateUsingHEAD_10
2019-06-06 15:31:06 -Generating unique operation named: updateUsingPOST_17
2019-06-06 15:31:06 -Generating unique operation named: updateUsingPUT_10
2019-06-06 15:31:06 -Generating unique operation named: updateUsingPATCH_10
2019-06-06 15:31:06 -Generating unique operation named: updateUsingDELETE_10
2019-06-06 15:31:06 -Generating unique operation named: updateUsingOPTIONS_10
2019-06-06 15:31:06 -Generating unique operation named: updateUsingTRACE_10
2019-06-06 15:31:06 -Generating unique operation named: exprotExcelUsingGET_5
2019-06-06 15:31:06 -Generating unique operation named: addUsingGET_17
2019-06-06 15:31:06 -Generating unique operation named: editUsingGET_18
2019-06-06 15:31:06 -Generating unique operation named: listUsingGET_20
2019-06-06 15:31:06 -Generating unique operation named: removeUsingPOST_30
2019-06-06 15:31:06 -Generating unique operation named: removeUsingPOST_31
2019-06-06 15:31:06 -Generating unique operation named: saveUsingPOST_17
2019-06-06 15:31:06 -Generating unique operation named: updateUsingGET_11
2019-06-06 15:31:06 -Generating unique operation named: updateUsingHEAD_11
2019-06-06 15:31:06 -Generating unique operation named: updateUsingPOST_18
2019-06-06 15:31:06 -Generating unique operation named: updateUsingPUT_11
2019-06-06 15:31:06 -Generating unique operation named: updateUsingPATCH_11
2019-06-06 15:31:06 -Generating unique operation named: updateUsingDELETE_11
2019-06-06 15:31:06 -Generating unique operation named: updateUsingOPTIONS_11
2019-06-06 15:31:06 -Generating unique operation named: updateUsingTRACE_11
2019-06-06 15:31:06 -Generating unique operation named: addUsingGET_18
2019-06-06 15:31:06 -Generating unique operation named: editUsingGET_19
2019-06-06 15:31:06 -Generating unique operation named: listUsingGET_21
2019-06-06 15:31:06 -Generating unique operation named: removeUsingPOST_32
2019-06-06 15:31:06 -Generating unique operation named: removeUsingPOST_33
2019-06-06 15:31:06 -Generating unique operation named: saveUsingPOST_18
2019-06-06 15:31:06 -Generating unique operation named: updateUsingGET_12
2019-06-06 15:31:06 -Generating unique operation named: updateUsingHEAD_12
2019-06-06 15:31:06 -Generating unique operation named: updateUsingPOST_19
2019-06-06 15:31:06 -Generating unique operation named: updateUsingPUT_12
2019-06-06 15:31:06 -Generating unique operation named: updateUsingPATCH_12
2019-06-06 15:31:06 -Generating unique operation named: updateUsingDELETE_12
2019-06-06 15:31:06 -Generating unique operation named: updateUsingOPTIONS_12
2019-06-06 15:31:06 -Generating unique operation named: updateUsingTRACE_12
2019-06-06 15:31:07 -Starting Quartz Scheduler now
2019-06-06 15:31:07 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED started.
2019-06-06 15:31:07 -Starting...
2019-06-06 15:31:07 -BrokerAvailabilityEvent[available=true, SimpleBrokerMessageHandler [DefaultSubscriptionRegistry[cache[0 destination(s)], registry[0 sessions]]]]
2019-06-06 15:31:07 -Started.
2019-06-06 15:31:07 -Starting ProtocolHandler ["http-nio-8081"]
2019-06-06 15:31:07 -Using a shared selector for servlet write/read
2019-06-06 15:31:07 -Tomcat started on port(s): 8081 (http) with context path ''
2019-06-06 15:31:07 -Started BootdoApplication in 42.162 seconds (JVM running for 43.802)
2019-06-06 15:31:07 -==>  Preparing: select `id`,`cron_expression`,`method_name`,`is_concurrent`,`description`,`update_by`,`bean_class`,`create_date`,`job_status`,`job_group`,`update_date`,`create_by`,`spring_bean`,`job_name` from sys_task order by id desc 
2019-06-06 15:31:07 -==> Parameters: 
2019-06-06 15:31:08 -<==      Total: 1
2019-06-06 15:31:12 -Initializing Spring FrameworkServlet 'dispatcherServlet'
2019-06-06 15:31:12 -FrameworkServlet 'dispatcherServlet': initialization started
2019-06-06 15:31:12 -FrameworkServlet 'dispatcherServlet': initialization completed in 92 ms
2019-06-06 15:31:12 -Enabling session validation scheduler...
2019-06-06 15:31:12 -请求地址 : http://localhost:8081/login;JSESSIONID=7408b09b-42e9-4a80-afbb-2012f18300b8
2019-06-06 15:31:12 -HTTP METHOD : GET
2019-06-06 15:31:12 -CLASS_METHOD : com.bootdo.system.controller.LoginController.login
2019-06-06 15:31:12 -参数 : [{}]
2019-06-06 15:31:12 -耗时 : 15
2019-06-06 15:31:12 -返回值 : login
2019-06-06 15:31:14 -请求地址 : http://localhost:8081/getVerify
2019-06-06 15:31:14 -HTTP METHOD : GET
2019-06-06 15:31:14 -CLASS_METHOD : com.bootdo.system.controller.LoginController.getVerify
2019-06-06 15:31:14 -参数 : [org.apache.shiro.web.servlet.ShiroHttpServletRequest@35f9e72, org.apache.shiro.web.servlet.ShiroHttpServletResponse@64803dbf]
2019-06-06 15:31:19 -5055
2019-06-06 15:31:19 -耗时 : 5283
2019-06-06 15:31:19 -返回值 : null
2019-06-06 15:31:23 -请求地址 : http://localhost:8081/login
2019-06-06 15:31:23 -HTTP METHOD : POST
2019-06-06 15:31:23 -CLASS_METHOD : com.bootdo.system.controller.LoginController.ajaxLogin
2019-06-06 15:31:23 -参数 : [admin, 111111, 5055, org.apache.shiro.web.servlet.ShiroHttpServletRequest@c841c6e]
2019-06-06 15:31:23 -==>  Preparing: select `user_id`,`username`,`name`,`password`,`dept_id`,`email`,`mobile`,`status`,`user_id_create`,`gmt_create`,`gmt_modified`,`sex`,`birth`,`pic_id`,`live_address`,`hobby`,`province`,`city`,`district` from sys_user WHERE username = ? order by user_id desc 
2019-06-06 15:31:24 -==> Parameters: admin(String)
2019-06-06 15:31:24 -<==      Total: 1
2019-06-06 15:31:24 -耗时 : 233
2019-06-06 15:31:24 -返回值 : {msg=操作成功, code=0}
2019-06-06 15:31:24 -More than one TaskExecutor bean found within the context, and none is named 'taskExecutor'. Mark one of them as primary or name it 'taskExecutor' (possibly as an alias) in order to use it for async processing: [clientInboundChannelExecutor, clientOutboundChannelExecutor, brokerChannelExecutor, messageBrokerTaskScheduler]
2019-06-06 15:31:24 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-06-06 15:31:24 -==> Parameters: 1(Long), admin(String), 登录(String), 234(Integer), com.bootdo.system.controller.LoginController.ajaxLogin()(String), null, 127.0.0.1(String), 2019-06-06 15:31:24.252(Timestamp)
2019-06-06 15:31:24 -请求地址 : http://localhost:8081/index
2019-06-06 15:31:24 -HTTP METHOD : GET
2019-06-06 15:31:24 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2019-06-06 15:31:24 -参数 : [{}]
2019-06-06 15:31:24 -<==    Updates: 1
2019-06-06 15:31:24 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2019-06-06 15:31:24 -==> Parameters: 1(Long)
2019-06-06 15:31:25 -<==      Total: 50
2019-06-06 15:31:25 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2019-06-06 15:31:25 -==> Parameters: 138(Long)
2019-06-06 15:31:25 -<==      Total: 1
2019-06-06 15:31:25 -耗时 : 769
2019-06-06 15:31:25 -返回值 : index_v1
2019-06-06 15:31:25 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-06-06 15:31:25 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 769(Integer), com.bootdo.system.controller.LoginController.index()(String), {"menus":[{"attributes":{"icon":"fa fa-money","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-money","url":"/moneyList/moneyList"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"102","parentId":"106","text":"现金缴费"},{"attributes":{"icon":"fa fa-book","url":"/moneyLog/elecLog"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"107","parentId":"106","text":"缴费记录"},{"attributes":{"icon":"fa fa-image","url":"/moneyList/moneyWZ"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"164","parentId":"106","text":"乌镇管理"}],"hasChildren":true,"hasParent":false,"id":"106","parentId":"0","text":"收费管理"},{"attributes":{"icon":"fa fa-lightbulb-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/elec/elec"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"121","parentId":"103","text":"电费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"elec/elecInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"122","parentId":"103","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"elec/elecUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"123","parentId":"103","text":"电表上传"},{"attributes":{"icon":"fa fa-cc","url":"/elec/elecPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"124","parentId":"103","text":"电价管理"}],"hasChildren":true,"hasParent":false,"id":"103","parentId":"0","text":"电费管理"},{"attributes":{"icon":"fa fa-tint","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/water/water"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"117","parentId":"105","text":"水费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"water/waterInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"118","parentId":"105","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"water/waterUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"119","parentId":"105","text":"水费生成"},{"attributes":{"icon":"fa fa-cc","url":"/water/waterPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"120","parentId":"105","text":"水价管理"}],"hasChildren":true,"hasParent":false,"id":"105","parentId":"0","text":"水费管理"},{"attributes":{"icon":"fa fa-fire","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/heat/heat"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"113","parentId":"104","text":"暖费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"heat/heatInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"114","parentId":"104","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"heat/heatUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"115","parentId":"104","text":"暖费生成"},{"attributes":{"icon":"","url":"/heat/heatPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"116","parentId":"104","text":"暖价管理"}],"hasChildren":true,"hasParent":false,"id":"104","parentId":"0","text":"暖费管理"},{"attributes":{"icon":"fa fa-vcard-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-bomb","url":"/print/print"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"149","parentId":"108","text":"票据记录"}],"hasChildren":true,"hasParent":false,"id":"108","parentId":"0","text":"票据管理"},{"attributes":{"icon":"fa fa-bar-chart","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-area-chart","url":"/chart/graph_echarts.html"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","text":"百度chart"},{"attributes":{"icon":"fa fa-sun-o","url":"charts/countDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"109","parentId":"97","text":"日统计报表"},{"attributes":{"icon":"fa fa-calendar","url":"charts/tableDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"161","parentId":"97","text":"日统计表格"},{"attributes":{"icon":"fa fa-registered","url":"charts/countMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"110","parentId":"97","text":"月统计报表"},{"attributes":{"icon":"fa fa-building-o","url":"charts/tableElecMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"162","parentId":"97","text":"月统计表格"},{"attributes":{"icon":"fa fa-support","url":"charts/countYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"111","parentId":"97","text":"年统计报表"},{"attributes":{"icon":"fa fa-book","url":"charts/tableElecYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"163","parentId":"97","text":"年统计表格"},{"attributes":{"icon":"fa fa-money","url":"charts/countOwe"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"155","(String), 127.0.0.1(String), 2019-06-06 15:31:25.231(Timestamp)
2019-06-06 15:31:25 -<==    Updates: 1
2019-06-06 15:31:25 -请求地址 : http://localhost:8081/main
2019-06-06 15:31:25 -HTTP METHOD : GET
2019-06-06 15:31:25 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-06-06 15:31:25 -参数 : []
2019-06-06 15:31:25 -耗时 : 0
2019-06-06 15:31:25 -返回值 : main
2019-06-06 15:31:25 -请求地址 : http://localhost:8081/oa/notify/message
2019-06-06 15:31:25 -HTTP METHOD : GET
2019-06-06 15:31:25 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2019-06-06 15:31:25 -参数 : []
2019-06-06 15:31:25 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2019-06-06 15:31:25 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2019-06-06 15:31:26 -请求地址 : http://localhost:8081/main
2019-06-06 15:31:26 -HTTP METHOD : GET
2019-06-06 15:31:26 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-06-06 15:31:26 -参数 : []
2019-06-06 15:31:26 -耗时 : 0
2019-06-06 15:31:26 -返回值 : main
2019-06-06 15:31:26 -<==      Total: 0
2019-06-06 15:31:26 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2019-06-06 15:31:26 -==> Parameters: 1(Long), 0(String)
2019-06-06 15:31:26 -<==      Total: 1
2019-06-06 15:31:26 -耗时 : 208
2019-06-06 15:31:26 -返回值 : com.bootdo.common.utils.PageUtils@451304c0
2019-06-06 15:31:50 -==>  Preparing: select distinct m.perms from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id = ur.role_id where ur.user_id = ? 
2019-06-06 15:31:50 -==> Parameters: 1(Long)
2019-06-06 15:31:50 -<==      Total: 94
2019-06-06 15:31:50 -请求地址 : http://localhost:8081/moneyList/moneyList
2019-06-06 15:31:50 -HTTP METHOD : GET
2019-06-06 15:31:50 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.MoneyList
2019-06-06 15:31:50 -参数 : []
2019-06-06 15:31:50 -耗时 : 0
2019-06-06 15:31:50 -返回值 : moneyList/moneyList
2019-06-06 15:31:54 -请求地址 : http://localhost:8081/elec/elec
2019-06-06 15:31:54 -HTTP METHOD : GET
2019-06-06 15:31:54 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.Elec
2019-06-06 15:31:54 -参数 : []
2019-06-06 15:31:54 -耗时 : 1
2019-06-06 15:31:54 -返回值 : elec/elec/elec
2019-06-06 15:31:55 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-06-06 15:31:55 -HTTP METHOD : GET
2019-06-06 15:31:55 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-06-06 15:31:55 -参数 : [userType]
2019-06-06 15:31:55 -请求地址 : http://localhost:8081/common/dict/list/elecType
2019-06-06 15:31:55 -HTTP METHOD : GET
2019-06-06 15:31:55 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-06-06 15:31:55 -参数 : [elecType]
2019-06-06 15:31:55 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-06-06 15:31:55 -==> Parameters: elecType(String)
2019-06-06 15:31:55 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-06-06 15:31:55 -==> Parameters: userType(String)
2019-06-06 15:31:55 -请求地址 : http://localhost:8081/elec/elec/list
2019-06-06 15:31:55 -HTTP METHOD : GET
2019-06-06 15:31:55 -CLASS_METHOD : com.bootdo.elec.controller.ElecController.list
2019-06-06 15:31:55 -参数 : [{limit=10, offset=0, userType=, elecType=, userOrg=, userId=, createTime=, queryType=1}, com.bootdo.elec.domain.ElecDO@4ba9dd2b]
2019-06-06 15:31:55 -<==      Total: 11
2019-06-06 15:31:55 -耗时 : 93
2019-06-06 15:31:55 -返回值 : [DictDO{id=180, name='矿民用', value='1', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=179, name='矿商业', value='2', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=178, name='矿工业1', value='3', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=177, name='矿工业2', value='4', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=176, name='矿工业3', value='5', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=175, name='乌民用', value='6', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=174, name='乌商用', value='7', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=173, name='乌工业', value='8', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=172, name='煤民用', value='9', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=171, name='煤商业', value='10', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=170, name='政府用电', value='11', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-06-06 15:31:55 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, `user_tell`,`user_state`,`wages_id`,`elec_type`,`elec_price`,`start`,`end`,`hu`,`elec_amount`,`elec_cost`,`elec_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec order by id asc limit ?, ? 
2019-06-06 15:31:55 -==> Parameters: 0(Integer), 10(Integer)
2019-06-06 15:31:55 -<==      Total: 4
2019-06-06 15:31:55 -耗时 : 412
2019-06-06 15:31:55 -返回值 : [DictDO{id=145, name='银行转账', value='D', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=144, name='微信支付', value='C', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-06-06 15:31:55 -<==      Total: 10
2019-06-06 15:31:55 -==>  Preparing: select count(*) from elec 
2019-06-06 15:31:55 -==> Parameters: 
2019-06-06 15:31:55 -<==      Total: 1
2019-06-06 15:31:55 -耗时 : 540
2019-06-06 15:31:55 -返回值 : com.bootdo.common.utils.PageUtils@2c702fa4
2019-06-06 15:31:56 -WebSocketSession[1 current WS(1)-HttpStream(0)-HttpPoll(0), 1 total, 0 closed abnormally (0 connect failure, 0 send limit, 0 transport error)], stompSubProtocol[processed CONNECT(1)-CONNECTED(1)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 8, active threads = 0, queued tasks = 0, completed tasks = 9], outboundChannelpool size = 1, active threads = 0, queued tasks = 0, completed tasks = 1], sockJsScheduler[pool size = 4, active threads = 1, queued tasks = 2, completed tasks = 8]
2019-06-06 15:32:10 -请求地址 : http://localhost:8081/index
2019-06-06 15:32:10 -HTTP METHOD : GET
2019-06-06 15:32:10 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2019-06-06 15:32:10 -参数 : [{}]
2019-06-06 15:32:10 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2019-06-06 15:32:10 -==> Parameters: 1(Long)
2019-06-06 15:32:10 -<==      Total: 50
2019-06-06 15:32:10 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2019-06-06 15:32:10 -==> Parameters: 138(Long)
2019-06-06 15:32:10 -<==      Total: 1
2019-06-06 15:32:10 -耗时 : 155
2019-06-06 15:32:10 -返回值 : index_v1
2019-06-06 15:32:10 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-06-06 15:32:10 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 155(Integer), com.bootdo.system.controller.LoginController.index()(String), {"menus":[{"attributes":{"icon":"fa fa-money","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-money","url":"/moneyList/moneyList"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"102","parentId":"106","text":"现金缴费"},{"attributes":{"icon":"fa fa-book","url":"/moneyLog/elecLog"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"107","parentId":"106","text":"缴费记录"},{"attributes":{"icon":"fa fa-image","url":"/moneyList/moneyWZ"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"164","parentId":"106","text":"乌镇管理"}],"hasChildren":true,"hasParent":false,"id":"106","parentId":"0","text":"收费管理"},{"attributes":{"icon":"fa fa-lightbulb-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/elec/elec"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"121","parentId":"103","text":"电费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"elec/elecInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"122","parentId":"103","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"elec/elecUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"123","parentId":"103","text":"电表上传"},{"attributes":{"icon":"fa fa-cc","url":"/elec/elecPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"124","parentId":"103","text":"电价管理"}],"hasChildren":true,"hasParent":false,"id":"103","parentId":"0","text":"电费管理"},{"attributes":{"icon":"fa fa-tint","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/water/water"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"117","parentId":"105","text":"水费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"water/waterInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"118","parentId":"105","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"water/waterUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"119","parentId":"105","text":"水费生成"},{"attributes":{"icon":"fa fa-cc","url":"/water/waterPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"120","parentId":"105","text":"水价管理"}],"hasChildren":true,"hasParent":false,"id":"105","parentId":"0","text":"水费管理"},{"attributes":{"icon":"fa fa-fire","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/heat/heat"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"113","parentId":"104","text":"暖费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"heat/heatInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"114","parentId":"104","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"heat/heatUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"115","parentId":"104","text":"暖费生成"},{"attributes":{"icon":"","url":"/heat/heatPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"116","parentId":"104","text":"暖价管理"}],"hasChildren":true,"hasParent":false,"id":"104","parentId":"0","text":"暖费管理"},{"attributes":{"icon":"fa fa-vcard-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-bomb","url":"/print/print"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"149","parentId":"108","text":"票据记录"}],"hasChildren":true,"hasParent":false,"id":"108","parentId":"0","text":"票据管理"},{"attributes":{"icon":"fa fa-bar-chart","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-area-chart","url":"/chart/graph_echarts.html"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","text":"百度chart"},{"attributes":{"icon":"fa fa-sun-o","url":"charts/countDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"109","parentId":"97","text":"日统计报表"},{"attributes":{"icon":"fa fa-calendar","url":"charts/tableDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"161","parentId":"97","text":"日统计表格"},{"attributes":{"icon":"fa fa-registered","url":"charts/countMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"110","parentId":"97","text":"月统计报表"},{"attributes":{"icon":"fa fa-building-o","url":"charts/tableElecMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"162","parentId":"97","text":"月统计表格"},{"attributes":{"icon":"fa fa-support","url":"charts/countYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"111","parentId":"97","text":"年统计报表"},{"attributes":{"icon":"fa fa-book","url":"charts/tableElecYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"163","parentId":"97","text":"年统计表格"},{"attributes":{"icon":"fa fa-money","url":"charts/countOwe"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"155","(String), 127.0.0.1(String), 2019-06-06 15:32:10.512(Timestamp)
2019-06-06 15:32:10 -请求地址 : http://localhost:8081/main
2019-06-06 15:32:10 -HTTP METHOD : GET
2019-06-06 15:32:10 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-06-06 15:32:10 -参数 : []
2019-06-06 15:32:10 -耗时 : 1
2019-06-06 15:32:10 -返回值 : main
2019-06-06 15:32:10 -<==    Updates: 1
2019-06-06 15:32:10 -请求地址 : http://localhost:8081/oa/notify/message
2019-06-06 15:32:10 -HTTP METHOD : GET
2019-06-06 15:32:10 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2019-06-06 15:32:10 -参数 : []
2019-06-06 15:32:10 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2019-06-06 15:32:10 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2019-06-06 15:32:10 -<==      Total: 0
2019-06-06 15:32:10 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2019-06-06 15:32:10 -==> Parameters: 1(Long), 0(String)
2019-06-06 15:32:10 -<==      Total: 1
2019-06-06 15:32:10 -耗时 : 7
2019-06-06 15:32:10 -返回值 : com.bootdo.common.utils.PageUtils@54a86409
2019-06-06 15:32:10 -请求地址 : http://localhost:8081/main
2019-06-06 15:32:10 -HTTP METHOD : GET
2019-06-06 15:32:10 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-06-06 15:32:10 -参数 : []
2019-06-06 15:32:10 -耗时 : 1
2019-06-06 15:32:10 -返回值 : main
2019-06-06 15:32:13 -请求地址 : http://localhost:8081/moneyList/moneyList
2019-06-06 15:32:13 -HTTP METHOD : GET
2019-06-06 15:32:13 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.MoneyList
2019-06-06 15:32:13 -参数 : []
2019-06-06 15:32:13 -耗时 : 1
2019-06-06 15:32:13 -返回值 : moneyList/moneyList
2019-06-06 15:32:16 -请求地址 : http://localhost:8081/system/sysDept/treeView
2019-06-06 15:32:16 -HTTP METHOD : GET
2019-06-06 15:32:16 -CLASS_METHOD : com.bootdo.system.controller.DeptController.treeView
2019-06-06 15:32:16 -参数 : []
2019-06-06 15:32:16 -耗时 : 0
2019-06-06 15:32:16 -返回值 : system/dept/deptTree
2019-06-06 15:32:17 -请求地址 : http://localhost:8081/system/sysDept/tree
2019-06-06 15:32:17 -HTTP METHOD : GET
2019-06-06 15:32:17 -CLASS_METHOD : com.bootdo.system.controller.DeptController.tree
2019-06-06 15:32:17 -参数 : []
2019-06-06 15:32:17 -==>  Preparing: select `dept_id`,`parent_id`,`name`,`order_num`,`del_flag` from sys_dept order by dept_id desc 
2019-06-06 15:32:17 -==> Parameters: 
2019-06-06 15:32:17 -<==      Total: 3
2019-06-06 15:32:17 -耗时 : 32
2019-06-06 15:32:17 -返回值 : {"checked":false,"children":[{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"3","parentId":"1","state":{"opened":true},"text":"牙星"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"2","parentId":"1","state":{"opened":true},"text":"五九"}],"hasChildren":true,"hasParent":false,"id":"1","parentId":"0","state":{"opened":true},"text":"总公司"}
2019-06-06 15:32:19 -请求地址 : http://localhost:8081/system/sysDept/treeView
2019-06-06 15:32:19 -HTTP METHOD : GET
2019-06-06 15:32:19 -CLASS_METHOD : com.bootdo.system.controller.DeptController.treeView
2019-06-06 15:32:19 -参数 : []
2019-06-06 15:32:19 -耗时 : 1
2019-06-06 15:32:19 -返回值 : system/dept/deptTree
2019-06-06 15:32:19 -请求地址 : http://localhost:8081/system/sysDept/tree
2019-06-06 15:32:19 -HTTP METHOD : GET
2019-06-06 15:32:19 -CLASS_METHOD : com.bootdo.system.controller.DeptController.tree
2019-06-06 15:32:19 -参数 : []
2019-06-06 15:32:19 -==>  Preparing: select `dept_id`,`parent_id`,`name`,`order_num`,`del_flag` from sys_dept order by dept_id desc 
2019-06-06 15:32:19 -==> Parameters: 
2019-06-06 15:32:19 -<==      Total: 3
2019-06-06 15:32:19 -耗时 : 3
2019-06-06 15:32:19 -返回值 : {"checked":false,"children":[{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"3","parentId":"1","state":{"opened":true},"text":"牙星"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"2","parentId":"1","state":{"opened":true},"text":"五九"}],"hasChildren":true,"hasParent":false,"id":"1","parentId":"0","state":{"opened":true},"text":"总公司"}
2019-06-06 15:32:22 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUser
2019-06-06 15:32:22 -HTTP METHOD : POST
2019-06-06 15:32:22 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.queryAllUser
2019-06-06 15:32:22 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@4a24fd3d]
2019-06-06 15:32:22 -==>  Preparing: select COUNT(*) number, user_id, user_name, user_type, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, elec_type as moneyType, elec_price as userPrice, elec_amount as userArea, elec_cost as userCost, elec_Sum as userSum from ELEC WHERE create_time = ? and user_org = ? and user_Id = ? and user_type != 'B' UNION ALL select COUNT(*) number, user_id, user_name, user_type, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, heat_type as moneyType, heat_price as userPrice, heat_area as userArea, heat_cost as userCost, heat_Sum as userSum from heat WHERE create_time = ? and user_org = ? and user_Id = ? and user_type != 'B' UNION ALL select COUNT(*) number, user_id, user_name, user_type, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, water_type as moneyType, water_price as userPrice, water_price as userArea, water_price as userCost, water_Sum as userSum from water WHERE create_time = ? and user_org = ? and user_Id = ? and user_type != 'B' 
2019-06-06 15:32:22 -==> Parameters: 2019-05(String), 2(String), 1-0001(String), 2019-05(String), 2(String), 1-0001(String), 2019-05(String), 2(String), 1-0001(String)
2019-06-06 15:32:22 -<==      Total: 3
2019-06-06 15:32:22 -耗时 : 447
2019-06-06 15:32:22 -返回值 : [com.bootdo.moneyList.damain.MoneyListDO@30e70bef, com.bootdo.moneyList.damain.MoneyListDO@2e14a0cb, com.bootdo.moneyList.damain.MoneyListDO@57adfd55]
2019-06-06 15:32:25 -请求地址 : http://localhost:8081/moneyList/moneyList/updateMoney
2019-06-06 15:32:25 -HTTP METHOD : POST
2019-06-06 15:32:25 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.updateMoney
2019-06-06 15:32:25 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@1401041]
2019-06-06 15:32:25 -==>  Preparing: select COUNT(*) number, user_id, user_name, user_type, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, elec_type as moneyType, elec_price as userPrice, elec_amount as userArea, elec_cost as userCost, elec_Sum as userSum from ELEC WHERE create_time = ? and user_org = ? and user_Id = ? and user_type != 'B' UNION ALL select COUNT(*) number, user_id, user_name, user_type, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, heat_type as moneyType, heat_price as userPrice, heat_area as userArea, heat_cost as userCost, heat_Sum as userSum from heat WHERE create_time = ? and user_org = ? and user_Id = ? and user_type != 'B' UNION ALL select COUNT(*) number, user_id, user_name, user_type, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, water_type as moneyType, water_price as userPrice, water_price as userArea, water_price as userCost, water_Sum as userSum from water WHERE create_time = ? and user_org = ? and user_Id = ? and user_type != 'B' 
2019-06-06 15:32:25 -==> Parameters: 2019-05(String), 2(String), 1-0001(String), 2019-05(String), 2(String), 1-0001(String), 2019-05(String), 2(String), 1-0001(String)
2019-06-06 15:32:25 -<==      Total: 3
2019-06-06 15:32:25 -==>  Preparing: select el.start,el.end,el.hu,el.elec_amount,el.elec_cost,el.elec_price,el.elec_sum from elec el WHERE el.user_Id = ? and el.create_time = ? and el.user_org = ? and user_type != 'B' 
2019-06-06 15:32:25 -==> Parameters: 1-0001(String), 2019-05(String), 2(String)
2019-06-06 15:32:25 -<==      Total: 1
2019-06-06 15:32:25 -==>  Preparing: select he.heat_area, he.heat_cost, he.heat_price, he.heat_sum from heat he WHERE he.user_Id = ? and he.create_time = ? and he.user_org = ? and user_type != 'B' 
2019-06-06 15:32:25 -==> Parameters: 1-0001(String), 2019-05(String), 2(String)
2019-06-06 15:32:25 -<==      Total: 1
2019-06-06 15:32:25 -==>  Preparing: select wa.water_price,wa.water_cost,wa.water_sum from water wa WHERE wa.user_Id = ? and wa.create_time = ? and wa.user_org = ? and user_type != 'B' 
2019-06-06 15:32:25 -==> Parameters: 1-0001(String), 2019-05(String), 2(String)
2019-06-06 15:32:25 -<==      Total: 1
2019-06-06 15:32:25 -==>  Preparing: update ELEC set elec_sum = elec_sum + ?,user_type=? WHERE create_time = ? and user_org = ? and user_Id = ? and user_type != 'B' 
2019-06-06 15:32:25 -==> Parameters: 1(String), A(String), 2019-05(String), 2(String), 1-0001(String)
2019-06-06 15:32:25 -<==    Updates: 1
2019-06-06 15:32:25 -==>  Preparing: insert into elec_log ( `user_id`, `user_name`, `user_type`, `user_org`, `elec_type`, `elec_money`, `elec_date`, `create_time`, `create_by`, `update_time`, `update_by`, `remark` ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-06-06 15:32:25 -==> Parameters: 1-0001(String), 李文英(String), A(String), 2(String), 1(String), 1(BigDecimal), 2019-06-06 15:32:25.735(Timestamp), 2019-05(String), admin(String), 2019-06-06 15:32:25.735(Timestamp), admin(String), null
2019-06-06 15:32:25 -<==    Updates: 1
2019-06-06 15:32:25 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`start`,`end`,`hu`,`elec_price`,`elec_amount`,`elec_cost`,`elec_sum`,`elec_money`,`heat_price`,`heat_area`,`heat_cost`,`heat_sum`,`heat_money`,`water_price`,`water_cost`,`water_sum`,`water_money`,`print_date`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from print where user_id = ? and user_org = ? and create_time = ? 
2019-06-06 15:32:25 -==> Parameters: 1-0001(String), 2(String), 2019-05(String)
2019-06-06 15:32:26 -<==      Total: 1
2019-06-06 15:32:26 -==>  Preparing: update print SET `user_name` = ?, `start` = ?, `end` = ?, `hu` = ?, `elec_price` = ?, `elec_amount` = ?, `elec_cost` = ?, `elec_sum` = ?, `elec_money` = ? where id = ? 
2019-06-06 15:32:26 -==> Parameters: 李文英(String), 10300(Integer), 10370(Integer), 1(Integer), 0.465(BigDecimal), 70.00(BigDecimal), 32.55(BigDecimal), -23.02(BigDecimal), 1(BigDecimal), 98(Long)
2019-06-06 15:32:26 -<==    Updates: 1
2019-06-06 15:32:26 -耗时 : 790
2019-06-06 15:32:26 -返回值 : 98
2019-06-06 15:32:27 -请求地址 : http://localhost:8081/moneyList/moneyList/queryAllUser
2019-06-06 15:32:27 -HTTP METHOD : POST
2019-06-06 15:32:27 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.queryAllUser
2019-06-06 15:32:27 -参数 : [com.bootdo.moneyList.damain.MoneyListDO@40cb3f73]
2019-06-06 15:32:27 -==>  Preparing: select COUNT(*) number, user_id, user_name, user_type, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, elec_type as moneyType, elec_price as userPrice, elec_amount as userArea, elec_cost as userCost, elec_Sum as userSum from ELEC WHERE create_time = ? and user_org = ? and user_Id = ? and user_type != 'B' UNION ALL select COUNT(*) number, user_id, user_name, user_type, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, heat_type as moneyType, heat_price as userPrice, heat_area as userArea, heat_cost as userCost, heat_Sum as userSum from heat WHERE create_time = ? and user_org = ? and user_Id = ? and user_type != 'B' UNION ALL select COUNT(*) number, user_id, user_name, user_type, (SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName, user_tell, user_state, water_type as moneyType, water_price as userPrice, water_price as userArea, water_price as userCost, water_Sum as userSum from water WHERE create_time = ? and user_org = ? and user_Id = ? and user_type != 'B' 
2019-06-06 15:32:27 -==> Parameters: 2019-05(String), 2(String), 1-0001(String), 2019-05(String), 2(String), 1-0001(String), 2019-05(String), 2(String), 1-0001(String)
2019-06-06 15:32:27 -<==      Total: 3
2019-06-06 15:32:27 -耗时 : 21
2019-06-06 15:32:27 -返回值 : [com.bootdo.moneyList.damain.MoneyListDO@3818768c, com.bootdo.moneyList.damain.MoneyListDO@2f22b9c8, com.bootdo.moneyList.damain.MoneyListDO@360b2bf8]
2019-06-06 15:32:28 -请求地址 : http://localhost:8081/moneyList/moneyList/moneyPrint/98
2019-06-06 15:32:28 -HTTP METHOD : GET
2019-06-06 15:32:28 -CLASS_METHOD : com.bootdo.moneyList.controller.MoneyListController.printEdit
2019-06-06 15:32:28 -参数 : [98, {}]
2019-06-06 15:32:28 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`start`,`end`,`hu`,`elec_price`,`elec_amount`,`elec_cost`,`elec_sum`,`elec_money`,`heat_price`,`heat_area`,`heat_cost`,`heat_sum`,`heat_money`,`water_price`,`water_cost`,`water_sum`,`water_money`,`print_date`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from print where id = ? 
2019-06-06 15:32:28 -==> Parameters: 98(Long)
2019-06-06 15:32:28 -<==      Total: 1
2019-06-06 15:32:28 -耗时 : 16
2019-06-06 15:32:28 -返回值 : moneyList/moneyPrint
2019-06-06 15:32:41 -请求地址 : http://localhost:8081/moneyLog/elecLog
2019-06-06 15:32:41 -HTTP METHOD : GET
2019-06-06 15:32:41 -CLASS_METHOD : com.bootdo.moneyLog.controller.ElecLogController.moneyLog
2019-06-06 15:32:41 -参数 : []
2019-06-06 15:32:41 -耗时 : 0
2019-06-06 15:32:41 -返回值 : moneyLog/elecLog/elecLog
2019-06-06 15:32:42 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-06-06 15:32:42 -HTTP METHOD : GET
2019-06-06 15:32:42 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-06-06 15:32:42 -参数 : [userType]
2019-06-06 15:32:42 -请求地址 : http://localhost:8081/common/dict/list/elecType
2019-06-06 15:32:42 -HTTP METHOD : GET
2019-06-06 15:32:42 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-06-06 15:32:42 -参数 : [elecType]
2019-06-06 15:32:42 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-06-06 15:32:42 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-06-06 15:32:42 -==> Parameters: elecType(String)
2019-06-06 15:32:42 -==> Parameters: userType(String)
2019-06-06 15:32:42 -<==      Total: 4
2019-06-06 15:32:42 -耗时 : 10
2019-06-06 15:32:42 -返回值 : [DictDO{id=145, name='银行转账', value='D', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=144, name='微信支付', value='C', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-06-06 15:32:42 -<==      Total: 11
2019-06-06 15:32:42 -耗时 : 15
2019-06-06 15:32:42 -返回值 : [DictDO{id=180, name='矿民用', value='1', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=179, name='矿商业', value='2', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=178, name='矿工业1', value='3', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=177, name='矿工业2', value='4', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=176, name='矿工业3', value='5', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=175, name='乌民用', value='6', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=174, name='乌商用', value='7', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=173, name='乌工业', value='8', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=172, name='煤民用', value='9', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=171, name='煤商业', value='10', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=170, name='政府用电', value='11', type='elecType', description='电费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-06-06 15:32:42 -请求地址 : http://localhost:8081/moneyLog/elecLog/list
2019-06-06 15:32:42 -HTTP METHOD : GET
2019-06-06 15:32:42 -CLASS_METHOD : com.bootdo.moneyLog.controller.ElecLogController.list
2019-06-06 15:32:42 -参数 : [{limit=10, offset=0, userType=, elecType=, userOrg=, userId=, elecDate=}]
2019-06-06 15:32:42 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`elec_type`,`elec_money`,`elec_date`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec_log order by id asc limit ?, ? 
2019-06-06 15:32:42 -==> Parameters: 0(Integer), 10(Integer)
2019-06-06 15:32:42 -<==      Total: 10
2019-06-06 15:32:42 -==>  Preparing: select count(*) from elec_log 
2019-06-06 15:32:42 -==> Parameters: 
2019-06-06 15:32:42 -<==      Total: 1
2019-06-06 15:32:42 -耗时 : 50
2019-06-06 15:32:42 -返回值 : com.bootdo.common.utils.PageUtils@4c0159af
2019-06-06 15:32:46 -请求地址 : http://localhost:8081/moneyLog/elecLog/remove
2019-06-06 15:32:46 -HTTP METHOD : POST
2019-06-06 15:32:46 -CLASS_METHOD : com.bootdo.moneyLog.controller.ElecLogController.remove
2019-06-06 15:32:46 -参数 : [93]
2019-06-06 15:32:46 -==>  Preparing: delete from elec_log where id = ? 
2019-06-06 15:32:46 -==> Parameters: 93(Long)
2019-06-06 15:32:46 -<==    Updates: 1
2019-06-06 15:32:46 -耗时 : 89
2019-06-06 15:32:46 -返回值 : {msg=操作成功, code=0}
2019-06-06 15:32:46 -请求地址 : http://localhost:8081/moneyLog/elecLog/list
2019-06-06 15:32:46 -HTTP METHOD : GET
2019-06-06 15:32:46 -CLASS_METHOD : com.bootdo.moneyLog.controller.ElecLogController.list
2019-06-06 15:32:46 -参数 : [{limit=10, offset=0, userType=, elecType=, userOrg=, userId=, elecDate=}]
2019-06-06 15:32:46 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`elec_type`,`elec_money`,`elec_date`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec_log order by id asc limit ?, ? 
2019-06-06 15:32:46 -==> Parameters: 0(Integer), 10(Integer)
2019-06-06 15:32:46 -<==      Total: 10
2019-06-06 15:32:46 -==>  Preparing: select count(*) from elec_log 
2019-06-06 15:32:46 -==> Parameters: 
2019-06-06 15:32:46 -<==      Total: 1
2019-06-06 15:32:46 -耗时 : 19
2019-06-06 15:32:46 -返回值 : com.bootdo.common.utils.PageUtils@10e17512
2019-06-06 15:32:49 -请求地址 : http://localhost:8081/moneyLog/elecLog/remove
2019-06-06 15:32:49 -HTTP METHOD : POST
2019-06-06 15:32:49 -CLASS_METHOD : com.bootdo.moneyLog.controller.ElecLogController.remove
2019-06-06 15:32:49 -参数 : [89]
2019-06-06 15:32:49 -==>  Preparing: delete from elec_log where id = ? 
2019-06-06 15:32:49 -==> Parameters: 89(Long)
2019-06-06 15:32:49 -<==    Updates: 1
2019-06-06 15:32:49 -耗时 : 54
2019-06-06 15:32:49 -返回值 : {msg=操作成功, code=0}
2019-06-06 15:32:49 -请求地址 : http://localhost:8081/moneyLog/elecLog/list
2019-06-06 15:32:49 -HTTP METHOD : GET
2019-06-06 15:32:49 -CLASS_METHOD : com.bootdo.moneyLog.controller.ElecLogController.list
2019-06-06 15:32:49 -参数 : [{limit=10, offset=0, userType=, elecType=, userOrg=, userId=, elecDate=}]
2019-06-06 15:32:49 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`elec_type`,`elec_money`,`elec_date`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec_log order by id asc limit ?, ? 
2019-06-06 15:32:49 -==> Parameters: 0(Integer), 10(Integer)
2019-06-06 15:32:49 -<==      Total: 10
2019-06-06 15:32:49 -==>  Preparing: select count(*) from elec_log 
2019-06-06 15:32:49 -==> Parameters: 
2019-06-06 15:32:49 -<==      Total: 1
2019-06-06 15:32:49 -耗时 : 11
2019-06-06 15:32:49 -返回值 : com.bootdo.common.utils.PageUtils@300c6904
2019-06-06 15:32:55 -请求地址 : http://localhost:8081/moneyLog/elecLog/batchRemove
2019-06-06 15:32:55 -HTTP METHOD : POST
2019-06-06 15:32:55 -CLASS_METHOD : com.bootdo.moneyLog.controller.ElecLogController.remove
2019-06-06 15:32:55 -参数 : [[Ljava.lang.Long;@5c343392]
2019-06-06 15:32:55 -==>  Preparing: delete from elec_log where id in ( ? , ? , ? , ? , ? , ? , ? , ? , ? , ? ) 
2019-06-06 15:32:55 -==> Parameters: 84(Long), 85(Long), 86(Long), 87(Long), 88(Long), 90(Long), 91(Long), 92(Long), 94(Long), 95(Long)
2019-06-06 15:32:55 -<==    Updates: 10
2019-06-06 15:32:55 -耗时 : 55
2019-06-06 15:32:55 -返回值 : {msg=操作成功, code=0}
2019-06-06 15:32:55 -请求地址 : http://localhost:8081/moneyLog/elecLog/list
2019-06-06 15:32:55 -HTTP METHOD : GET
2019-06-06 15:32:55 -CLASS_METHOD : com.bootdo.moneyLog.controller.ElecLogController.list
2019-06-06 15:32:55 -参数 : [{limit=10, offset=0, userType=, elecType=, userOrg=, userId=, elecDate=}]
2019-06-06 15:32:55 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`elec_type`,`elec_money`,`elec_date`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec_log order by id asc limit ?, ? 
2019-06-06 15:32:55 -==> Parameters: 0(Integer), 10(Integer)
2019-06-06 15:32:55 -<==      Total: 10
2019-06-06 15:32:55 -==>  Preparing: select count(*) from elec_log 
2019-06-06 15:32:55 -==> Parameters: 
2019-06-06 15:32:55 -<==      Total: 1
2019-06-06 15:32:55 -耗时 : 10
2019-06-06 15:32:55 -返回值 : com.bootdo.common.utils.PageUtils@5b986a4c
2019-06-06 15:33:02 -请求地址 : http://localhost:8081/moneyLog/elecLog/batchRemove
2019-06-06 15:33:02 -HTTP METHOD : POST
2019-06-06 15:33:02 -CLASS_METHOD : com.bootdo.moneyLog.controller.ElecLogController.remove
2019-06-06 15:33:02 -参数 : [[Ljava.lang.Long;@7ff97ef8]
2019-06-06 15:33:02 -==>  Preparing: delete from elec_log where id in ( ? , ? , ? , ? , ? , ? , ? , ? , ? , ? ) 
2019-06-06 15:33:02 -==> Parameters: 96(Long), 97(Long), 98(Long), 99(Long), 100(Long), 101(Long), 102(Long), 103(Long), 104(Long), 105(Long)
2019-06-06 15:33:02 -<==    Updates: 10
2019-06-06 15:33:02 -耗时 : 89
2019-06-06 15:33:02 -返回值 : {msg=操作成功, code=0}
2019-06-06 15:33:02 -请求地址 : http://localhost:8081/moneyLog/elecLog/list
2019-06-06 15:33:02 -HTTP METHOD : GET
2019-06-06 15:33:02 -CLASS_METHOD : com.bootdo.moneyLog.controller.ElecLogController.list
2019-06-06 15:33:02 -参数 : [{limit=10, offset=0, userType=, elecType=, userOrg=, userId=, elecDate=}]
2019-06-06 15:33:02 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`elec_type`,`elec_money`,`elec_date`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from elec_log order by id asc limit ?, ? 
2019-06-06 15:33:02 -==> Parameters: 0(Integer), 10(Integer)
2019-06-06 15:33:02 -<==      Total: 0
2019-06-06 15:33:02 -==>  Preparing: select count(*) from elec_log 
2019-06-06 15:33:02 -==> Parameters: 
2019-06-06 15:33:02 -<==      Total: 1
2019-06-06 15:33:02 -耗时 : 9
2019-06-06 15:33:02 -返回值 : com.bootdo.common.utils.PageUtils@62298809
2019-06-06 15:33:11 -请求地址 : http://localhost:8081/moneyLog/heatLog
2019-06-06 15:33:11 -HTTP METHOD : GET
2019-06-06 15:33:11 -CLASS_METHOD : com.bootdo.moneyLog.controller.HeatLogController.HeatLog
2019-06-06 15:33:11 -参数 : []
2019-06-06 15:33:11 -耗时 : 0
2019-06-06 15:33:11 -返回值 : moneyLog/heatLog/heatLog
2019-06-06 15:33:11 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-06-06 15:33:11 -请求地址 : http://localhost:8081/common/dict/list/heatType
2019-06-06 15:33:11 -HTTP METHOD : GET
2019-06-06 15:33:11 -HTTP METHOD : GET
2019-06-06 15:33:11 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-06-06 15:33:11 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-06-06 15:33:11 -参数 : [userType]
2019-06-06 15:33:11 -参数 : [heatType]
2019-06-06 15:33:11 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-06-06 15:33:11 -==> Parameters: heatType(String)
2019-06-06 15:33:11 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-06-06 15:33:11 -==> Parameters: userType(String)
2019-06-06 15:33:11 -<==      Total: 4
2019-06-06 15:33:11 -耗时 : 5
2019-06-06 15:33:11 -返回值 : [DictDO{id=184, name='民用暖', value='1', type='heatType', description='暖费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=183, name='商业暖', value='2', type='heatType', description='暖费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=182, name='工业民', value='3', type='heatType', description='暖费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=181, name='工业商', value='4', type='heatType', description='暖费类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-06-06 15:33:11 -<==      Total: 4
2019-06-06 15:33:11 -耗时 : 11
2019-06-06 15:33:11 -返回值 : [DictDO{id=145, name='银行转账', value='D', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=144, name='微信支付', value='C', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-06-06 15:33:11 -请求地址 : http://localhost:8081/moneyLog/heatLog/list
2019-06-06 15:33:11 -HTTP METHOD : GET
2019-06-06 15:33:11 -CLASS_METHOD : com.bootdo.moneyLog.controller.HeatLogController.list
2019-06-06 15:33:11 -参数 : [{limit=10, offset=0, userType=, heatType=, userOrg=, userId=, heatDate=}]
2019-06-06 15:33:11 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,`heat_type`,`heat_money`,`heat_date`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from heat_log order by id asc limit ?, ? 
2019-06-06 15:33:11 -==> Parameters: 0(Integer), 10(Integer)
2019-06-06 15:33:11 -<==      Total: 1
2019-06-06 15:33:11 -==>  Preparing: select count(*) from heat_log 
2019-06-06 15:33:11 -==> Parameters: 
2019-06-06 15:33:11 -<==      Total: 1
2019-06-06 15:33:11 -耗时 : 295
2019-06-06 15:33:11 -返回值 : com.bootdo.common.utils.PageUtils@22e4bb6f
2019-06-06 15:33:14 -请求地址 : http://localhost:8081/moneyLog/heatLog/remove
2019-06-06 15:33:14 -HTTP METHOD : POST
2019-06-06 15:33:14 -CLASS_METHOD : com.bootdo.moneyLog.controller.HeatLogController.remove
2019-06-06 15:33:14 -参数 : [19]
2019-06-06 15:33:14 -==>  Preparing: delete from heat_log where id = ? 
2019-06-06 15:33:14 -==> Parameters: 19(Long)
2019-06-06 15:33:14 -<==    Updates: 1
2019-06-06 15:33:14 -耗时 : 117
2019-06-06 15:33:14 -返回值 : {msg=操作成功, code=0}
2019-06-06 15:33:14 -请求地址 : http://localhost:8081/moneyLog/heatLog/list
2019-06-06 15:33:14 -HTTP METHOD : GET
2019-06-06 15:33:14 -CLASS_METHOD : com.bootdo.moneyLog.controller.HeatLogController.list
2019-06-06 15:33:14 -参数 : [{limit=10, offset=0, userType=, heatType=, userOrg=, userId=, heatDate=}]
2019-06-06 15:33:14 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,`heat_type`,`heat_money`,`heat_date`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from heat_log order by id asc limit ?, ? 
2019-06-06 15:33:14 -==> Parameters: 0(Integer), 10(Integer)
2019-06-06 15:33:14 -<==      Total: 0
2019-06-06 15:33:14 -==>  Preparing: select count(*) from heat_log 
2019-06-06 15:33:14 -==> Parameters: 
2019-06-06 15:33:14 -<==      Total: 1
2019-06-06 15:33:14 -耗时 : 9
2019-06-06 15:33:14 -返回值 : com.bootdo.common.utils.PageUtils@2be68272
2019-06-06 15:33:16 -请求地址 : http://localhost:8081/moneyLog/waterLog
2019-06-06 15:33:16 -HTTP METHOD : GET
2019-06-06 15:33:16 -CLASS_METHOD : com.bootdo.moneyLog.controller.WaterLogController.WaterLog
2019-06-06 15:33:16 -参数 : []
2019-06-06 15:33:16 -耗时 : 0
2019-06-06 15:33:16 -返回值 : moneyLog/waterLog/waterLog
2019-06-06 15:33:17 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-06-06 15:33:17 -HTTP METHOD : GET
2019-06-06 15:33:17 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-06-06 15:33:17 -参数 : [userType]
2019-06-06 15:33:17 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-06-06 15:33:17 -==> Parameters: userType(String)
2019-06-06 15:33:17 -<==      Total: 4
2019-06-06 15:33:17 -耗时 : 7
2019-06-06 15:33:17 -返回值 : [DictDO{id=145, name='银行转账', value='D', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=144, name='微信支付', value='C', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-06-06 15:33:17 -请求地址 : http://localhost:8081/common/dict/list/waterType
2019-06-06 15:33:17 -HTTP METHOD : GET
2019-06-06 15:33:17 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-06-06 15:33:17 -参数 : [waterType]
2019-06-06 15:33:17 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-06-06 15:33:17 -==> Parameters: waterType(String)
2019-06-06 15:33:17 -<==      Total: 4
2019-06-06 15:33:17 -耗时 : 15
2019-06-06 15:33:17 -返回值 : [DictDO{id=188, name='民用水', value='1', type='waterType', description='水费性质', sort=10, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=187, name='商业水1', value='2', type='waterType', description='水费性质', sort=20, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=186, name='商业水2', value='3', type='waterType', description='水费性质', sort=30, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=185, name='商业水3', value='4', type='waterType', description='水费性质', sort=40, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-06-06 15:33:17 -请求地址 : http://localhost:8081/moneyLog/waterLog/list
2019-06-06 15:33:17 -HTTP METHOD : GET
2019-06-06 15:33:17 -CLASS_METHOD : com.bootdo.moneyLog.controller.WaterLogController.list
2019-06-06 15:33:17 -参数 : [{limit=10, offset=0, userType=, waterType=, userOrg=, userId=, waterDate=}]
2019-06-06 15:33:17 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,`water_type`,`water_money`,`water_date`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from water_log order by id asc limit ?, ? 
2019-06-06 15:33:17 -==> Parameters: 0(Integer), 10(Integer)
2019-06-06 15:33:17 -<==      Total: 0
2019-06-06 15:33:17 -==>  Preparing: select count(*) from water_log 
2019-06-06 15:33:17 -==> Parameters: 
2019-06-06 15:33:17 -<==      Total: 1
2019-06-06 15:33:17 -耗时 : 227
2019-06-06 15:33:17 -返回值 : com.bootdo.common.utils.PageUtils@69b08167
2019-06-06 15:33:20 -请求地址 : http://localhost:8081/index
2019-06-06 15:33:20 -HTTP METHOD : GET
2019-06-06 15:33:20 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2019-06-06 15:33:20 -参数 : [{}]
2019-06-06 15:33:20 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2019-06-06 15:33:20 -==> Parameters: 1(Long)
2019-06-06 15:33:20 -<==      Total: 50
2019-06-06 15:33:20 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2019-06-06 15:33:20 -==> Parameters: 138(Long)
2019-06-06 15:33:20 -<==      Total: 1
2019-06-06 15:33:20 -耗时 : 281
2019-06-06 15:33:20 -返回值 : index_v1
2019-06-06 15:33:20 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-06-06 15:33:20 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 281(Integer), com.bootdo.system.controller.LoginController.index()(String), {"menus":[{"attributes":{"icon":"fa fa-money","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-money","url":"/moneyList/moneyList"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"102","parentId":"106","text":"现金缴费"},{"attributes":{"icon":"fa fa-book","url":"/moneyLog/elecLog"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"107","parentId":"106","text":"缴费记录"},{"attributes":{"icon":"fa fa-image","url":"/moneyList/moneyWZ"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"164","parentId":"106","text":"乌镇管理"}],"hasChildren":true,"hasParent":false,"id":"106","parentId":"0","text":"收费管理"},{"attributes":{"icon":"fa fa-lightbulb-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/elec/elec"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"121","parentId":"103","text":"电费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"elec/elecInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"122","parentId":"103","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"elec/elecUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"123","parentId":"103","text":"电表上传"},{"attributes":{"icon":"fa fa-cc","url":"/elec/elecPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"124","parentId":"103","text":"电价管理"}],"hasChildren":true,"hasParent":false,"id":"103","parentId":"0","text":"电费管理"},{"attributes":{"icon":"fa fa-tint","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/water/water"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"117","parentId":"105","text":"水费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"water/waterInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"118","parentId":"105","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"water/waterUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"119","parentId":"105","text":"水费生成"},{"attributes":{"icon":"fa fa-cc","url":"/water/waterPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"120","parentId":"105","text":"水价管理"}],"hasChildren":true,"hasParent":false,"id":"105","parentId":"0","text":"水费管理"},{"attributes":{"icon":"fa fa-fire","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/heat/heat"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"113","parentId":"104","text":"暖费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"heat/heatInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"114","parentId":"104","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"heat/heatUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"115","parentId":"104","text":"暖费生成"},{"attributes":{"icon":"","url":"/heat/heatPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"116","parentId":"104","text":"暖价管理"}],"hasChildren":true,"hasParent":false,"id":"104","parentId":"0","text":"暖费管理"},{"attributes":{"icon":"fa fa-vcard-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-bomb","url":"/print/print"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"149","parentId":"108","text":"票据记录"}],"hasChildren":true,"hasParent":false,"id":"108","parentId":"0","text":"票据管理"},{"attributes":{"icon":"fa fa-bar-chart","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-area-chart","url":"/chart/graph_echarts.html"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","text":"百度chart"},{"attributes":{"icon":"fa fa-sun-o","url":"charts/countDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"109","parentId":"97","text":"日统计报表"},{"attributes":{"icon":"fa fa-calendar","url":"charts/tableDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"161","parentId":"97","text":"日统计表格"},{"attributes":{"icon":"fa fa-registered","url":"charts/countMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"110","parentId":"97","text":"月统计报表"},{"attributes":{"icon":"fa fa-building-o","url":"charts/tableElecMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"162","parentId":"97","text":"月统计表格"},{"attributes":{"icon":"fa fa-support","url":"charts/countYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"111","parentId":"97","text":"年统计报表"},{"attributes":{"icon":"fa fa-book","url":"charts/tableElecYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"163","parentId":"97","text":"年统计表格"},{"attributes":{"icon":"fa fa-money","url":"charts/countOwe"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"155","(String), 127.0.0.1(String), 2019-06-06 15:33:20.672(Timestamp)
2019-06-06 15:33:20 -请求地址 : http://localhost:8081/main
2019-06-06 15:33:20 -HTTP METHOD : GET
2019-06-06 15:33:20 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-06-06 15:33:20 -参数 : []
2019-06-06 15:33:20 -耗时 : 1
2019-06-06 15:33:20 -返回值 : main
2019-06-06 15:33:20 -请求地址 : http://localhost:8081/oa/notify/message
2019-06-06 15:33:20 -HTTP METHOD : GET
2019-06-06 15:33:20 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2019-06-06 15:33:20 -参数 : []
2019-06-06 15:33:20 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2019-06-06 15:33:20 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2019-06-06 15:33:20 -<==    Updates: 1
2019-06-06 15:33:20 -请求地址 : http://localhost:8081/main
2019-06-06 15:33:20 -HTTP METHOD : GET
2019-06-06 15:33:20 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-06-06 15:33:20 -参数 : []
2019-06-06 15:33:20 -耗时 : 0
2019-06-06 15:33:20 -返回值 : main
2019-06-06 15:33:21 -<==      Total: 0
2019-06-06 15:33:21 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2019-06-06 15:33:21 -==> Parameters: 1(Long), 0(String)
2019-06-06 15:33:21 -<==      Total: 1
2019-06-06 15:33:21 -耗时 : 168
2019-06-06 15:33:21 -返回值 : com.bootdo.common.utils.PageUtils@2f3cdd25
2019-06-06 15:33:23 -请求地址 : http://localhost:8081/print/print
2019-06-06 15:33:23 -HTTP METHOD : GET
2019-06-06 15:33:23 -CLASS_METHOD : com.bootdo.print.controller.PrintController.Print
2019-06-06 15:33:23 -参数 : []
2019-06-06 15:33:23 -耗时 : 0
2019-06-06 15:33:23 -返回值 : print/print/print
2019-06-06 15:33:24 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-06-06 15:33:24 -HTTP METHOD : GET
2019-06-06 15:33:24 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-06-06 15:33:24 -参数 : [userType]
2019-06-06 15:33:24 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-06-06 15:33:24 -==> Parameters: userType(String)
2019-06-06 15:33:24 -<==      Total: 4
2019-06-06 15:33:24 -耗时 : 4
2019-06-06 15:33:24 -返回值 : [DictDO{id=145, name='银行转账', value='D', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=144, name='微信支付', value='C', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-06-06 15:33:24 -请求地址 : http://localhost:8081/print/print/list
2019-06-06 15:33:24 -HTTP METHOD : GET
2019-06-06 15:33:24 -CLASS_METHOD : com.bootdo.print.controller.PrintController.list
2019-06-06 15:33:24 -参数 : [{limit=10, offset=0, createTime=, userType=, userOrg=, userId=}]
2019-06-06 15:33:24 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`start`,`end`,`hu`,`elec_price`,`elec_amount`,`elec_cost`,`elec_sum`,`elec_money`,`heat_price`,`heat_area`,`heat_cost`,`heat_sum`,`heat_money`,`water_price`,`water_cost`,`water_sum`,`water_money`,`print_date`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from print order by id asc limit ?, ? 
2019-06-06 15:33:24 -==> Parameters: 0(Integer), 10(Integer)
2019-06-06 15:33:24 -<==      Total: 1
2019-06-06 15:33:24 -==>  Preparing: select count(*) from print 
2019-06-06 15:33:24 -==> Parameters: 
2019-06-06 15:33:24 -<==      Total: 1
2019-06-06 15:33:24 -耗时 : 44
2019-06-06 15:33:24 -返回值 : com.bootdo.common.utils.PageUtils@21efc204
2019-06-06 15:33:28 -请求地址 : http://localhost:8081/print/print/remove
2019-06-06 15:33:28 -HTTP METHOD : POST
2019-06-06 15:33:28 -CLASS_METHOD : com.bootdo.print.controller.PrintController.remove
2019-06-06 15:33:28 -参数 : [98]
2019-06-06 15:33:28 -==>  Preparing: delete from print where id = ? 
2019-06-06 15:33:28 -==> Parameters: 98(Long)
2019-06-06 15:33:28 -<==    Updates: 1
2019-06-06 15:33:28 -耗时 : 62
2019-06-06 15:33:28 -返回值 : {msg=操作成功, code=0}
2019-06-06 15:33:28 -请求地址 : http://localhost:8081/print/print/list
2019-06-06 15:33:28 -HTTP METHOD : GET
2019-06-06 15:33:28 -CLASS_METHOD : com.bootdo.print.controller.PrintController.list
2019-06-06 15:33:28 -参数 : [{limit=10, offset=0, createTime=, userType=, userOrg=, userId=}]
2019-06-06 15:33:28 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`start`,`end`,`hu`,`elec_price`,`elec_amount`,`elec_cost`,`elec_sum`,`elec_money`,`heat_price`,`heat_area`,`heat_cost`,`heat_sum`,`heat_money`,`water_price`,`water_cost`,`water_sum`,`water_money`,`print_date`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from print order by id asc limit ?, ? 
2019-06-06 15:33:28 -==> Parameters: 0(Integer), 10(Integer)
2019-06-06 15:33:28 -<==      Total: 0
2019-06-06 15:33:28 -==>  Preparing: select count(*) from print 
2019-06-06 15:33:28 -==> Parameters: 
2019-06-06 15:33:28 -<==      Total: 1
2019-06-06 15:33:28 -耗时 : 4
2019-06-06 15:33:28 -返回值 : com.bootdo.common.utils.PageUtils@3774cef4
2019-06-06 15:33:31 -请求地址 : http://localhost:8081/index
2019-06-06 15:33:31 -HTTP METHOD : GET
2019-06-06 15:33:31 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2019-06-06 15:33:31 -参数 : [{}]
2019-06-06 15:33:31 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2019-06-06 15:33:31 -==> Parameters: 1(Long)
2019-06-06 15:33:31 -<==      Total: 50
2019-06-06 15:33:31 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2019-06-06 15:33:31 -==> Parameters: 138(Long)
2019-06-06 15:33:31 -<==      Total: 1
2019-06-06 15:33:31 -耗时 : 54
2019-06-06 15:33:31 -返回值 : index_v1
2019-06-06 15:33:31 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-06-06 15:33:31 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 54(Integer), com.bootdo.system.controller.LoginController.index()(String), {"menus":[{"attributes":{"icon":"fa fa-money","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-money","url":"/moneyList/moneyList"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"102","parentId":"106","text":"现金缴费"},{"attributes":{"icon":"fa fa-book","url":"/moneyLog/elecLog"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"107","parentId":"106","text":"缴费记录"},{"attributes":{"icon":"fa fa-image","url":"/moneyList/moneyWZ"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"164","parentId":"106","text":"乌镇管理"}],"hasChildren":true,"hasParent":false,"id":"106","parentId":"0","text":"收费管理"},{"attributes":{"icon":"fa fa-lightbulb-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/elec/elec"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"121","parentId":"103","text":"电费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"elec/elecInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"122","parentId":"103","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"elec/elecUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"123","parentId":"103","text":"电表上传"},{"attributes":{"icon":"fa fa-cc","url":"/elec/elecPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"124","parentId":"103","text":"电价管理"}],"hasChildren":true,"hasParent":false,"id":"103","parentId":"0","text":"电费管理"},{"attributes":{"icon":"fa fa-tint","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/water/water"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"117","parentId":"105","text":"水费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"water/waterInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"118","parentId":"105","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"water/waterUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"119","parentId":"105","text":"水费生成"},{"attributes":{"icon":"fa fa-cc","url":"/water/waterPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"120","parentId":"105","text":"水价管理"}],"hasChildren":true,"hasParent":false,"id":"105","parentId":"0","text":"水费管理"},{"attributes":{"icon":"fa fa-fire","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/heat/heat"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"113","parentId":"104","text":"暖费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"heat/heatInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"114","parentId":"104","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"heat/heatUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"115","parentId":"104","text":"暖费生成"},{"attributes":{"icon":"","url":"/heat/heatPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"116","parentId":"104","text":"暖价管理"}],"hasChildren":true,"hasParent":false,"id":"104","parentId":"0","text":"暖费管理"},{"attributes":{"icon":"fa fa-vcard-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-bomb","url":"/print/print"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"149","parentId":"108","text":"票据记录"}],"hasChildren":true,"hasParent":false,"id":"108","parentId":"0","text":"票据管理"},{"attributes":{"icon":"fa fa-bar-chart","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-area-chart","url":"/chart/graph_echarts.html"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","text":"百度chart"},{"attributes":{"icon":"fa fa-sun-o","url":"charts/countDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"109","parentId":"97","text":"日统计报表"},{"attributes":{"icon":"fa fa-calendar","url":"charts/tableDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"161","parentId":"97","text":"日统计表格"},{"attributes":{"icon":"fa fa-registered","url":"charts/countMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"110","parentId":"97","text":"月统计报表"},{"attributes":{"icon":"fa fa-building-o","url":"charts/tableElecMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"162","parentId":"97","text":"月统计表格"},{"attributes":{"icon":"fa fa-support","url":"charts/countYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"111","parentId":"97","text":"年统计报表"},{"attributes":{"icon":"fa fa-book","url":"charts/tableElecYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"163","parentId":"97","text":"年统计表格"},{"attributes":{"icon":"fa fa-money","url":"charts/countOwe"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"155","(String), 127.0.0.1(String), 2019-06-06 15:33:31.309(Timestamp)
2019-06-06 15:33:31 -请求地址 : http://localhost:8081/main
2019-06-06 15:33:31 -HTTP METHOD : GET
2019-06-06 15:33:31 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-06-06 15:33:31 -参数 : []
2019-06-06 15:33:31 -耗时 : 0
2019-06-06 15:33:31 -返回值 : main
2019-06-06 15:33:31 -<==    Updates: 1
2019-06-06 15:33:31 -请求地址 : http://localhost:8081/oa/notify/message
2019-06-06 15:33:31 -HTTP METHOD : GET
2019-06-06 15:33:31 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2019-06-06 15:33:31 -参数 : []
2019-06-06 15:33:31 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2019-06-06 15:33:31 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2019-06-06 15:33:31 -<==      Total: 0
2019-06-06 15:33:31 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2019-06-06 15:33:31 -==> Parameters: 1(Long), 0(String)
2019-06-06 15:33:31 -<==      Total: 1
2019-06-06 15:33:31 -耗时 : 126
2019-06-06 15:33:31 -返回值 : com.bootdo.common.utils.PageUtils@3de3ea47
2019-06-06 15:33:31 -请求地址 : http://localhost:8081/main
2019-06-06 15:33:31 -HTTP METHOD : GET
2019-06-06 15:33:31 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-06-06 15:33:31 -参数 : []
2019-06-06 15:33:31 -耗时 : 1
2019-06-06 15:33:31 -返回值 : main
2019-06-06 15:33:35 -请求地址 : http://localhost:8081/index
2019-06-06 15:33:35 -HTTP METHOD : GET
2019-06-06 15:33:35 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2019-06-06 15:33:35 -参数 : [{}]
2019-06-06 15:33:35 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2019-06-06 15:33:35 -==> Parameters: 1(Long)
2019-06-06 15:33:35 -<==      Total: 50
2019-06-06 15:33:35 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2019-06-06 15:33:35 -==> Parameters: 138(Long)
2019-06-06 15:33:35 -<==      Total: 1
2019-06-06 15:33:35 -耗时 : 58
2019-06-06 15:33:35 -返回值 : index_v1
2019-06-06 15:33:35 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-06-06 15:33:35 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 59(Integer), com.bootdo.system.controller.LoginController.index()(String), {"menus":[{"attributes":{"icon":"fa fa-money","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-money","url":"/moneyList/moneyList"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"102","parentId":"106","text":"现金缴费"},{"attributes":{"icon":"fa fa-book","url":"/moneyLog/elecLog"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"107","parentId":"106","text":"缴费记录"},{"attributes":{"icon":"fa fa-image","url":"/moneyList/moneyWZ"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"164","parentId":"106","text":"乌镇管理"}],"hasChildren":true,"hasParent":false,"id":"106","parentId":"0","text":"收费管理"},{"attributes":{"icon":"fa fa-lightbulb-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/elec/elec"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"121","parentId":"103","text":"电费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"elec/elecInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"122","parentId":"103","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"elec/elecUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"123","parentId":"103","text":"电表上传"},{"attributes":{"icon":"fa fa-cc","url":"/elec/elecPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"124","parentId":"103","text":"电价管理"}],"hasChildren":true,"hasParent":false,"id":"103","parentId":"0","text":"电费管理"},{"attributes":{"icon":"fa fa-tint","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/water/water"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"117","parentId":"105","text":"水费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"water/waterInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"118","parentId":"105","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"water/waterUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"119","parentId":"105","text":"水费生成"},{"attributes":{"icon":"fa fa-cc","url":"/water/waterPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"120","parentId":"105","text":"水价管理"}],"hasChildren":true,"hasParent":false,"id":"105","parentId":"0","text":"水费管理"},{"attributes":{"icon":"fa fa-fire","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/heat/heat"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"113","parentId":"104","text":"暖费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"heat/heatInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"114","parentId":"104","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"heat/heatUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"115","parentId":"104","text":"暖费生成"},{"attributes":{"icon":"","url":"/heat/heatPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"116","parentId":"104","text":"暖价管理"}],"hasChildren":true,"hasParent":false,"id":"104","parentId":"0","text":"暖费管理"},{"attributes":{"icon":"fa fa-vcard-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-bomb","url":"/print/print"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"149","parentId":"108","text":"票据记录"}],"hasChildren":true,"hasParent":false,"id":"108","parentId":"0","text":"票据管理"},{"attributes":{"icon":"fa fa-bar-chart","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-area-chart","url":"/chart/graph_echarts.html"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","text":"百度chart"},{"attributes":{"icon":"fa fa-sun-o","url":"charts/countDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"109","parentId":"97","text":"日统计报表"},{"attributes":{"icon":"fa fa-calendar","url":"charts/tableDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"161","parentId":"97","text":"日统计表格"},{"attributes":{"icon":"fa fa-registered","url":"charts/countMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"110","parentId":"97","text":"月统计报表"},{"attributes":{"icon":"fa fa-building-o","url":"charts/tableElecMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"162","parentId":"97","text":"月统计表格"},{"attributes":{"icon":"fa fa-support","url":"charts/countYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"111","parentId":"97","text":"年统计报表"},{"attributes":{"icon":"fa fa-book","url":"charts/tableElecYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"163","parentId":"97","text":"年统计表格"},{"attributes":{"icon":"fa fa-money","url":"charts/countOwe"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"155","(String), 127.0.0.1(String), 2019-06-06 15:33:35.837(Timestamp)
2019-06-06 15:33:35 -请求地址 : http://localhost:8081/main
2019-06-06 15:33:35 -HTTP METHOD : GET
2019-06-06 15:33:35 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-06-06 15:33:35 -参数 : []
2019-06-06 15:33:35 -耗时 : 0
2019-06-06 15:33:35 -返回值 : main
2019-06-06 15:33:35 -<==    Updates: 1
2019-06-06 15:33:36 -请求地址 : http://localhost:8081/oa/notify/message
2019-06-06 15:33:36 -HTTP METHOD : GET
2019-06-06 15:33:36 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2019-06-06 15:33:36 -参数 : []
2019-06-06 15:33:36 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2019-06-06 15:33:36 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2019-06-06 15:33:36 -<==      Total: 0
2019-06-06 15:33:36 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2019-06-06 15:33:36 -==> Parameters: 1(Long), 0(String)
2019-06-06 15:33:36 -<==      Total: 1
2019-06-06 15:33:36 -耗时 : 35
2019-06-06 15:33:36 -返回值 : com.bootdo.common.utils.PageUtils@78d3b13a
2019-06-06 15:33:36 -请求地址 : http://localhost:8081/main
2019-06-06 15:33:36 -HTTP METHOD : GET
2019-06-06 15:33:36 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-06-06 15:33:36 -参数 : []
2019-06-06 15:33:36 -耗时 : 1
2019-06-06 15:33:36 -返回值 : main
