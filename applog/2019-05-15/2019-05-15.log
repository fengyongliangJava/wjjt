2019-05-15 09:11:33 -Starting BootdoApplication on PC-201905091110 with PID 7356 (D:\eclipse2018-work\bootdo\target\classes started by Administrator in D:\eclipse2018-work\bootdo)
2019-05-15 09:11:33 -Running with Spring Boot v2.0.3.RELEASE, Spring v5.0.7.RELEASE
2019-05-15 09:11:33 -The following profiles are active: dev
2019-05-15 09:11:33 -Refreshing org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@70e9c95d: startup date [Wed May 15 09:11:33 CST 2019]; root of context hierarchy
2019-05-15 09:11:36 -Multiple Spring Data modules found, entering strict repository configuration mode!
2019-05-15 09:11:39 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$d159fff6] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-05-15 09:11:39 -Bean 'shiroConfig' of type [com.bootdo.system.config.ShiroConfig$$EnhancerBySpringCGLIB$$c3b32e9d] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-05-15 09:11:40 -Bean 'userRealm' of type [com.bootdo.system.shiro.UserRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-05-15 09:11:41 -Bean 'cacheManager2' of type [net.sf.ehcache.CacheManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-05-15 09:11:41 -Bean 'ehCacheManager' of type [org.apache.shiro.cache.ehcache.EhCacheManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-05-15 09:11:41 -Cache with name 'com.bootdo.system.shiro.UserRealm.authorizationCache' does not yet exist.  Creating now.
2019-05-15 09:11:41 -Added EhCache named [com.bootdo.system.shiro.UserRealm.authorizationCache]
2019-05-15 09:11:41 -Bean 'sessionDAO' of type [org.apache.shiro.session.mgt.eis.MemorySessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-05-15 09:11:41 -Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-05-15 09:11:41 -Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-05-15 09:11:41 -Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-05-15 09:11:43 -Tomcat initialized with port(s): 8081 (http)
2019-05-15 09:11:43 -Initializing ProtocolHandler ["http-nio-8081"]
2019-05-15 09:11:43 -Starting service [Tomcat]
2019-05-15 09:11:43 -Starting Servlet Engine: Apache Tomcat/8.5.31
2019-05-15 09:11:43 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [D:\Java\JDK\jdk1.8.0_102\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;D:/Java/JRE/bin/server;D:/Java/JRE/bin;D:/Java/JRE/lib/amd64;C:\ProgramData\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Windows\System32\OpenSSH\;%JAVA_HOME\bin%;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;;C:\Users\Administrator\Desktop;;.]
2019-05-15 09:11:43 -Initializing Spring embedded WebApplicationContext
2019-05-15 09:11:43 -Root WebApplicationContext: initialization completed in 10314 ms
2019-05-15 09:11:44 -Mapping filter: 'characterEncodingFilter' to: [/*]
2019-05-15 09:11:44 -Mapping filter: 'hiddenHttpMethodFilter' to: [/*]
2019-05-15 09:11:44 -Mapping filter: 'httpPutFormContentFilter' to: [/*]
2019-05-15 09:11:44 -Mapping filter: 'requestContextFilter' to: [/*]
2019-05-15 09:11:44 -Filter xssFilter was not registered (disabled)
2019-05-15 09:11:44 -Mapping filter: 'webStatFilter' to urls: [/*]
2019-05-15 09:11:44 -Mapping filter: 'shiroFilterFactoryBean' to: [/*]
2019-05-15 09:11:44 -Servlet statViewServlet mapped to [/druid/*]
2019-05-15 09:11:44 -Servlet dispatcherServlet mapped to [/]
2019-05-15 09:11:55 -ApplicationContext registed-->org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@70e9c95d: startup date [Wed May 15 09:11:33 CST 2019]; root of context hierarchy
2019-05-15 09:11:56 -Using default implementation for ThreadExecutor
2019-05-15 09:11:56 -Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2019-05-15 09:11:56 -Quartz Scheduler v.2.2.1 created.
2019-05-15 09:11:56 -RAMJobStore initialized.
2019-05-15 09:11:56 -Scheduler meta-data: Quartz Scheduler (v2.2.1) 'schedulerFactoryBean' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2019-05-15 09:11:56 -Quartz scheduler 'schedulerFactoryBean' initialized from an externally provided properties instance.
2019-05-15 09:11:56 -Quartz scheduler version: 2.2.1
2019-05-15 09:11:56 -JobFactory set to: com.bootdo.common.quartz.factory.JobFactory@60928a61
2019-05-15 09:11:57 -Initializing ExecutorService  'clientInboundChannelExecutor'
2019-05-15 09:11:57 -Initializing ExecutorService  'clientOutboundChannelExecutor'
2019-05-15 09:12:00 -Mapped "{[/charts/countDD],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.countDDController.countDD()
2019-05-15 09:12:00 -Mapped "{[/charts/countDD/getCountDD],methods=[POST]}" onto public com.bootdo.charts.vo.CountDayVo com.bootdo.charts.controller.countDDController.getCountD(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo)
2019-05-15 09:12:00 -Mapped "{[/charts/countDD/exportDD],methods=[GET]}" onto public void com.bootdo.charts.controller.countDDController.exportDD(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.HeatLogVo,com.bootdo.moneyLog.vo.WaterLogVo,javax.servlet.http.HttpServletResponse)
2019-05-15 09:12:00 -Mapped "{[/charts/countMM/exportMM],methods=[GET]}" onto public void com.bootdo.charts.controller.countMMController.exportMM(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.HeatLogVo,com.bootdo.moneyLog.vo.WaterLogVo,javax.servlet.http.HttpServletResponse)
2019-05-15 09:12:00 -Mapped "{[/charts/countMM/getCountMM],methods=[POST]}" onto public java.util.Map com.bootdo.charts.controller.countMMController.getCountMM(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo)
2019-05-15 09:12:00 -Mapped "{[/charts/countMM],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.countMMController.countMM()
2019-05-15 09:12:00 -Mapped "{[/charts/countOwe/getCountOwe],methods=[POST]}" onto public com.bootdo.charts.vo.CountOweVo com.bootdo.charts.controller.countOweController.getCountD(com.bootdo.elec.vo.ElecVo,com.bootdo.water.vo.WaterVo,com.bootdo.heat.vo.HeatVo)
2019-05-15 09:12:00 -Mapped "{[/charts/countOwe/exportOwe],methods=[GET]}" onto public void com.bootdo.charts.controller.countOweController.exportOwe(com.bootdo.elec.vo.ElecVo,com.bootdo.heat.vo.HeatVo,com.bootdo.water.vo.WaterVo,javax.servlet.http.HttpServletResponse)
2019-05-15 09:12:00 -Mapped "{[/charts/countOwe],methods=[GET]}" onto java.lang.String com.bootdo.charts.controller.countOweController.countOwe()
2019-05-15 09:12:00 -Mapped "{[/charts/countRun/getCountRun],methods=[POST]}" onto public java.util.Map com.bootdo.charts.controller.countRunController.getCountRun(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo)
2019-05-15 09:12:00 -Mapped "{[/charts/countRun],methods=[GET]}" onto java.lang.String com.bootdo.charts.controller.countRunController.countRun()
2019-05-15 09:12:00 -Mapped "{[/charts/countRun/exportRun],methods=[GET]}" onto public void com.bootdo.charts.controller.countRunController.exportRun(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.HeatLogVo,com.bootdo.moneyLog.vo.WaterLogVo,javax.servlet.http.HttpServletResponse)
2019-05-15 09:12:00 -Mapped "{[/charts/countYY/getCountYY],methods=[POST]}" onto public java.util.Map com.bootdo.charts.controller.countYYController.getCountYY(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo)
2019-05-15 09:12:00 -Mapped "{[/charts/countYY/exportYY],methods=[GET]}" onto public void com.bootdo.charts.controller.countYYController.exportYY(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.HeatLogVo,com.bootdo.moneyLog.vo.WaterLogVo,javax.servlet.http.HttpServletResponse)
2019-05-15 09:12:00 -Mapped "{[/charts/countYY],methods=[GET]}" onto java.lang.String com.bootdo.charts.controller.countYYController.countYY()
2019-05-15 09:12:00 -Mapped "{[/charts/tableDD],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.tableDDController.countDD()
2019-05-15 09:12:00 -Mapped "{[/charts/tableDD/exportDD],methods=[GET]}" onto public void com.bootdo.charts.controller.tableDDController.exportDD(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.HeatLogVo,com.bootdo.moneyLog.vo.WaterLogVo,javax.servlet.http.HttpServletResponse)
2019-05-15 09:12:00 -Mapped "{[/charts/tableDD/getTableDD],methods=[POST]}" onto public java.util.Map com.bootdo.charts.controller.tableDDController.getTableDD(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo)
2019-05-15 09:12:00 -Mapped "{[/charts/tableElecMM/tableElecMM],methods=[POST]}" onto public java.util.Map com.bootdo.charts.controller.tableElecMMController.tableElecMM(com.bootdo.elec.vo.ElecVo,com.bootdo.moneyLog.vo.ElecLogVo)
2019-05-15 09:12:00 -Mapped "{[/charts/tableElecMM],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.tableElecMMController.tableElecMM()
2019-05-15 09:12:00 -Mapped "{[/charts/tableElecMM/exportElecMM],methods=[GET]}" onto public void com.bootdo.charts.controller.tableElecMMController.exportElecMM(com.bootdo.elec.vo.ElecVo,com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse)
2019-05-15 09:12:00 -Mapped "{[/charts/tableElecYY/exportElecYY],methods=[GET]}" onto public void com.bootdo.charts.controller.tableElecYYController.exportElecYY(com.bootdo.elec.vo.ElecVo,com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse)
2019-05-15 09:12:00 -Mapped "{[/charts/tableElecYY/getCountYY],methods=[POST]}" onto public java.util.Map com.bootdo.charts.controller.tableElecYYController.getCountYY(com.bootdo.elec.vo.ElecVo,com.bootdo.moneyLog.vo.ElecLogVo)
2019-05-15 09:12:00 -Mapped "{[/charts/tableElecYY],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.tableElecYYController.tableElecYY()
2019-05-15 09:12:00 -Mapped "{[/charts/tableHeatMM/exportHeatMM],methods=[GET]}" onto public void com.bootdo.charts.controller.tableHeatMMController.exportHeatMM(com.bootdo.heat.vo.HeatVo,com.bootdo.moneyLog.vo.HeatLogVo,javax.servlet.http.HttpServletResponse)
2019-05-15 09:12:00 -Mapped "{[/charts/tableHeatMM],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.tableHeatMMController.tableHeatMM()
2019-05-15 09:12:00 -Mapped "{[/charts/tableHeatMM/tableHeatMM],methods=[POST]}" onto public java.util.Map com.bootdo.charts.controller.tableHeatMMController.tableHeatMM(com.bootdo.heat.vo.HeatVo,com.bootdo.moneyLog.vo.HeatLogVo)
2019-05-15 09:12:00 -Mapped "{[/charts/tableHeatYY/exportHeatYY],methods=[GET]}" onto public void com.bootdo.charts.controller.tableHeatYYController.exportHeatYY(com.bootdo.heat.vo.HeatVo,com.bootdo.moneyLog.vo.HeatLogVo,javax.servlet.http.HttpServletResponse)
2019-05-15 09:12:00 -Mapped "{[/charts/tableHeatYY],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.tableHeatYYController.tableHeatYY()
2019-05-15 09:12:00 -Mapped "{[/charts/tableHeatYY/getCountYY],methods=[POST]}" onto public java.util.Map com.bootdo.charts.controller.tableHeatYYController.getCountMM(com.bootdo.heat.vo.HeatVo,com.bootdo.moneyLog.vo.HeatLogVo)
2019-05-15 09:12:00 -Mapped "{[/charts/tableWaterMM/exportWaterMM],methods=[GET]}" onto public void com.bootdo.charts.controller.tableWaterMMController.exportWaterMM(com.bootdo.water.vo.WaterVo,com.bootdo.moneyLog.vo.WaterLogVo,javax.servlet.http.HttpServletResponse)
2019-05-15 09:12:00 -Mapped "{[/charts/tableWaterMM],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.tableWaterMMController.tableWaterMM()
2019-05-15 09:12:00 -Mapped "{[/charts/tableWaterMM/tableWaterMM],methods=[POST]}" onto public java.util.Map com.bootdo.charts.controller.tableWaterMMController.tableWaterMM(com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.water.vo.WaterVo)
2019-05-15 09:12:00 -Mapped "{[/charts/tableWaterYY/tableWaterYY],methods=[POST]}" onto public java.util.Map com.bootdo.charts.controller.tableWaterYYController.tableWaterYY(com.bootdo.water.vo.WaterVo,com.bootdo.moneyLog.vo.WaterLogVo)
2019-05-15 09:12:00 -Mapped "{[/charts/tableWaterYY],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.tableWaterYYController.tableWaterYY()
2019-05-15 09:12:00 -Mapped "{[/charts/tableWaterYY/exportWaterYY],methods=[GET]}" onto public void com.bootdo.charts.controller.tableWaterYYController.exportWaterYY(com.bootdo.water.vo.WaterVo,com.bootdo.moneyLog.vo.WaterLogVo,javax.servlet.http.HttpServletResponse)
2019-05-15 09:12:00 -Mapped "{[/common/dict/add],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.add()
2019-05-15 09:12:00 -Mapped "{[/common/dict/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.remove(java.lang.Long)
2019-05-15 09:12:00 -Mapped "{[/common/dict/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.remove(java.lang.Long[])
2019-05-15 09:12:00 -Mapped "{[/common/dict/update]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.update(com.bootdo.common.domain.DictDO)
2019-05-15 09:12:00 -Mapped "{[/common/dict/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.common.controller.DictController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 09:12:00 -Mapped "{[/common/dict/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.save(com.bootdo.common.domain.DictDO)
2019-05-15 09:12:00 -Mapped "{[/common/dict/type],methods=[GET]}" onto public java.util.List<com.bootdo.common.domain.DictDO> com.bootdo.common.controller.DictController.listType()
2019-05-15 09:12:00 -Mapped "{[/common/dict/add/{type}/{description}],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.addD(org.springframework.ui.Model,java.lang.String,java.lang.String)
2019-05-15 09:12:00 -Mapped "{[/common/dict/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.edit(java.lang.Long,org.springframework.ui.Model)
2019-05-15 09:12:00 -Mapped "{[/common/dict/list/{type}],methods=[GET]}" onto public java.util.List<com.bootdo.common.domain.DictDO> com.bootdo.common.controller.DictController.listByType(java.lang.String)
2019-05-15 09:12:00 -Mapped "{[/common/dict],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.dict()
2019-05-15 09:12:00 -Mapped "{[/common/sysFile/add],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.FileController.add()
2019-05-15 09:12:00 -Mapped "{[/common/sysFile/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.remove(java.lang.Long,javax.servlet.http.HttpServletRequest)
2019-05-15 09:12:00 -Mapped "{[/common/sysFile/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.remove(java.lang.Long[])
2019-05-15 09:12:00 -Mapped "{[/common/sysFile/update]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.update(com.bootdo.common.domain.FileDO)
2019-05-15 09:12:00 -Mapped "{[/common/sysFile/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.common.controller.FileController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 09:12:00 -Mapped "{[/common/sysFile/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.save(com.bootdo.common.domain.FileDO)
2019-05-15 09:12:00 -Mapped "{[/common/sysFile/info/{id}]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.info(java.lang.Long)
2019-05-15 09:12:00 -Mapped "{[/common/sysFile/edit],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.FileController.edit(java.lang.Long,org.springframework.ui.Model)
2019-05-15 09:12:00 -Mapped "{[/common/sysFile/upload],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.FileController.upload(org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpServletRequest)
2019-05-15 09:12:00 -Mapped "{[/common/sysFile],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.FileController.sysFile(org.springframework.ui.Model)
2019-05-15 09:12:00 -Mapped "{[/common/generator/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.GeneratorController.update(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 09:12:00 -Mapped "{[/common/generator/list],methods=[GET]}" onto java.util.List<java.util.Map<java.lang.String, java.lang.Object>> com.bootdo.common.controller.GeneratorController.list()
2019-05-15 09:12:00 -Mapped "{[/common/generator/code/{tableName}]}" onto public void com.bootdo.common.controller.GeneratorController.code(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String) throws java.io.IOException
2019-05-15 09:12:00 -Mapped "{[/common/generator],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.GeneratorController.generator()
2019-05-15 09:12:00 -Mapped "{[/common/generator/edit],methods=[GET]}" onto public java.lang.String com.bootdo.common.controller.GeneratorController.edit(org.springframework.ui.Model)
2019-05-15 09:12:00 -Mapped "{[/common/generator/batchCode]}" onto public void com.bootdo.common.controller.GeneratorController.batchCode(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String) throws java.io.IOException
2019-05-15 09:12:00 -Mapped "{[/common/job/add],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.JobController.add()
2019-05-15 09:12:00 -Mapped "{[/common/job/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.remove(java.lang.Long)
2019-05-15 09:12:00 -Mapped "{[/common/job/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.remove(java.lang.Long[])
2019-05-15 09:12:00 -Mapped "{[/common/job/update],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.update(com.bootdo.common.domain.TaskDO)
2019-05-15 09:12:00 -Mapped "{[/common/job/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.common.controller.JobController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 09:12:00 -Mapped "{[/common/job/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.save(com.bootdo.common.domain.TaskDO)
2019-05-15 09:12:00 -Mapped "{[/common/job/info/{id}]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.info(java.lang.Long)
2019-05-15 09:12:00 -Mapped "{[/common/job/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.JobController.edit(java.lang.Long,org.springframework.ui.Model)
2019-05-15 09:12:00 -Mapped "{[/common/job/changeJobStatus],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.changeJobStatus(java.lang.Long,java.lang.String)
2019-05-15 09:12:00 -Mapped "{[/common/job],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.JobController.taskScheduleJob()
2019-05-15 09:12:00 -Mapped "{[/common/log/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.LogController.remove(java.lang.Long)
2019-05-15 09:12:00 -Mapped "{[/common/log],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.LogController.log()
2019-05-15 09:12:00 -Mapped "{[/common/log/list],methods=[GET]}" onto com.bootdo.common.domain.PageDO<com.bootdo.common.domain.LogDO> com.bootdo.common.controller.LogController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 09:12:00 -Mapped "{[/common/log/batchRemove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.LogController.batchRemove(java.lang.Long[])
2019-05-15 09:12:00 -Mapped "{[/common/long],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.LongController.Long()
2019-05-15 09:12:00 -Mapped "{[/common/time],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.TimeController.Time()
2019-05-15 09:12:00 -Mapped "{[/error]}" onto public com.bootdo.common.utils.R com.bootdo.common.exception.MainsiteErrorController.handleError(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-05-15 09:12:00 -Mapped "{[/error],produces=[text/html]}" onto public org.springframework.web.servlet.ModelAndView com.bootdo.common.exception.MainsiteErrorController.errorHtml(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-05-15 09:12:00 -Mapped "{[/elec/elec/add],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecController.add()
2019-05-15 09:12:00 -Mapped "{[/elec/elec/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.remove(java.lang.Long)
2019-05-15 09:12:00 -Mapped "{[/elec/elec/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.remove(java.lang.Long[])
2019-05-15 09:12:00 -Mapped "{[/elec/elec/update],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.update(com.bootdo.elec.domain.ElecDO)
2019-05-15 09:12:00 -Mapped "{[/elec/elec/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.elec.controller.ElecController.list(java.util.Map<java.lang.String, java.lang.Object>,com.bootdo.elec.domain.ElecDO)
2019-05-15 09:12:00 -Mapped "{[/elec/elec/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.save(com.bootdo.elec.domain.ElecDO)
2019-05-15 09:12:00 -Mapped "{[/elec/elec/exprotElec],methods=[GET]}" onto public void com.bootdo.elec.controller.ElecController.exprotExcel(com.bootdo.elec.vo.ElecVo,javax.servlet.http.HttpServletResponse)
2019-05-15 09:12:00 -Mapped "{[/elec/elec],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecController.Elec()
2019-05-15 09:12:00 -Mapped "{[/elec/elec/WxElecUpdate],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.WxElecUpdate(com.bootdo.elec.domain.ElecDO)
2019-05-15 09:12:00 -Mapped "{[/elec/elec/YhElecUpdate],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.YhElecUpdate(com.bootdo.elec.domain.ElecDO)
2019-05-15 09:12:00 -Mapped "{[/elec/elec/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecController.edit(java.lang.Long,org.springframework.ui.Model)
2019-05-15 09:12:00 -Mapped "{[/elec/elecInto/exprotElecIntoExcel],methods=[GET]}" onto public void com.bootdo.elec.controller.ElecIntoController.exprotExcel(com.bootdo.elec.vo.ElecVo,javax.servlet.http.HttpServletResponse)
2019-05-15 09:12:00 -Mapped "{[/elec/elecInto],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecIntoController.ElecInto()
2019-05-15 09:12:00 -Mapped "{[/elec/elecInto/importElecIntoExcel],methods=[POST]}" onto public java.lang.String com.bootdo.elec.controller.ElecIntoController.importElecIntoExcel(org.springframework.web.multipart.MultipartFile,com.bootdo.elec.vo.ElecVo,javax.servlet.http.HttpServletResponse) throws java.lang.Exception
2019-05-15 09:12:00 -Mapped "{[/elec/elecPrice/add],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecPriceController.add()
2019-05-15 09:12:00 -Mapped "{[/elec/elecPrice/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecPriceController.remove(java.lang.Long)
2019-05-15 09:12:00 -Mapped "{[/elec/elecPrice/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecPriceController.remove(java.lang.Long[])
2019-05-15 09:12:00 -Mapped "{[/elec/elecPrice/update]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecPriceController.update(com.bootdo.elec.domain.ElecPriceDO)
2019-05-15 09:12:00 -Mapped "{[/elec/elecPrice/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.elec.controller.ElecPriceController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 09:12:00 -Mapped "{[/elec/elecPrice/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecPriceController.save(com.bootdo.elec.domain.ElecPriceDO,com.bootdo.elec.domain.ElecDO)
2019-05-15 09:12:00 -Mapped "{[/elec/elecPrice],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecPriceController.ElecPrice()
2019-05-15 09:12:00 -Mapped "{[/elec/elecPrice/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecPriceController.edit(java.lang.Long,org.springframework.ui.Model)
2019-05-15 09:12:00 -Mapped "{[/elec/elecUpLoad],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecUpLoadController.Elec()
2019-05-15 09:12:00 -Mapped "{[/elec/elecUpLoad/exprotElecExcel],methods=[GET]}" onto public void com.bootdo.elec.controller.ElecUpLoadController.exprotElecExcel(com.bootdo.elec.vo.ElecVo,javax.servlet.http.HttpServletResponse)
2019-05-15 09:12:00 -Mapped "{[/elec/elecUpLoad/importElecExcel],methods=[POST]}" onto public java.util.Map<java.lang.String, java.lang.Object> com.bootdo.elec.controller.ElecUpLoadController.importElecExcel(org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpServletRequest) throws java.lang.Exception
2019-05-15 09:12:00 -Mapped "{[/heat/heat/add],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatController.add()
2019-05-15 09:12:00 -Mapped "{[/heat/heat/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatController.remove(java.lang.Integer)
2019-05-15 09:12:00 -Mapped "{[/heat/heat/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatController.remove(java.lang.Integer[])
2019-05-15 09:12:00 -Mapped "{[/heat/heat/update]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatController.update(com.bootdo.heat.domain.HeatDO)
2019-05-15 09:12:00 -Mapped "{[/heat/heat/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.heat.controller.HeatController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 09:12:00 -Mapped "{[/heat/heat/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatController.save(com.bootdo.heat.domain.HeatDO)
2019-05-15 09:12:00 -Mapped "{[/heat/heat/exprotHeat],methods=[GET]}" onto public void com.bootdo.heat.controller.HeatController.exprotExcel(com.bootdo.heat.vo.HeatVo,javax.servlet.http.HttpServletResponse)
2019-05-15 09:12:00 -Mapped "{[/heat/heat],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatController.Heat()
2019-05-15 09:12:00 -Mapped "{[/heat/heat/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatController.edit(java.lang.Integer,org.springframework.ui.Model)
2019-05-15 09:12:00 -Mapped "{[/heat/heatInto/exprotHeatIntoExcel],methods=[GET]}" onto public void com.bootdo.heat.controller.HeatIntoController.exprotExcel(com.bootdo.heat.vo.HeatVo,javax.servlet.http.HttpServletResponse)
2019-05-15 09:12:00 -Mapped "{[/heat/heatInto],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatIntoController.HeatInto()
2019-05-15 09:12:00 -Mapped "{[/heat/heatInto/importHeatIntoExcel],methods=[POST]}" onto public java.lang.String com.bootdo.heat.controller.HeatIntoController.importHeatIntoExcel(org.springframework.web.multipart.MultipartFile,com.bootdo.heat.vo.HeatVo,javax.servlet.http.HttpServletResponse) throws java.lang.Exception
2019-05-15 09:12:00 -Mapped "{[/heat/heatPrice/add],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatPriceController.add()
2019-05-15 09:12:00 -Mapped "{[/heat/heatPrice/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatPriceController.remove(java.lang.Long)
2019-05-15 09:12:00 -Mapped "{[/heat/heatPrice/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatPriceController.remove(java.lang.Long[])
2019-05-15 09:12:00 -Mapped "{[/heat/heatPrice/update]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatPriceController.update(com.bootdo.heat.domain.HeatPriceDO)
2019-05-15 09:12:00 -Mapped "{[/heat/heatPrice/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.heat.controller.HeatPriceController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 09:12:00 -Mapped "{[/heat/heatPrice/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatPriceController.save(com.bootdo.heat.domain.HeatPriceDO)
2019-05-15 09:12:00 -Mapped "{[/heat/heatPrice/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatPriceController.edit(java.lang.Long,org.springframework.ui.Model)
2019-05-15 09:12:00 -Mapped "{[/heat/heatPrice],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatPriceController.HeatPrice()
2019-05-15 09:12:00 -Mapped "{[/heat/heatUpLoad/importHeatExcel]}" onto public java.lang.String com.bootdo.heat.controller.HeatUpLoadController.importHeatExcel(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)
2019-05-15 09:12:00 -Mapped "{[/heat/heatUpLoad/createHeatExcel],methods=[POST]}" onto public java.lang.String com.bootdo.heat.controller.HeatUpLoadController.createHeatExcel(com.bootdo.heat.domain.HeatDO) throws java.lang.Exception
2019-05-15 09:12:00 -Mapped "{[/heat/heatUpLoad/exprotHeatExcel],methods=[GET]}" onto public void com.bootdo.heat.controller.HeatUpLoadController.exprotHeatExcel(com.bootdo.heat.vo.HeatVo,javax.servlet.http.HttpServletResponse)
2019-05-15 09:12:00 -Mapped "{[/heat/heatUpLoad],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatUpLoadController.HeatUpLoad()
2019-05-15 09:12:00 -Mapped "{[/moneyList/moneyList/queryAllUser],methods=[POST]}" onto public java.util.List<com.bootdo.moneyList.damain.MoneyListDO> com.bootdo.moneyList.controller.MoneyListController.queryAllUser(com.bootdo.moneyList.damain.MoneyListDO)
2019-05-15 09:12:00 -Mapped "{[/moneyList/moneyList/queryAllUserName],methods=[POST]}" onto public java.util.List<com.bootdo.moneyList.damain.MoneyListDO> com.bootdo.moneyList.controller.MoneyListController.getAllUserName(com.bootdo.moneyList.damain.MoneyListDO)
2019-05-15 09:12:00 -Mapped "{[/moneyList/moneyList/updateMoney],methods=[POST]}" onto public java.lang.String com.bootdo.moneyList.controller.MoneyListController.updateMoney(com.bootdo.moneyList.damain.MoneyListDO)
2019-05-15 09:12:00 -Mapped "{[/moneyList/moneyList],methods=[GET]}" onto java.lang.String com.bootdo.moneyList.controller.MoneyListController.MoneyList()
2019-05-15 09:12:00 -Mapped "{[/moneyLog/elecLog/add],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.ElecLogController.add()
2019-05-15 09:12:00 -Mapped "{[/moneyLog/elecLog/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.ElecLogController.remove(java.lang.Long)
2019-05-15 09:12:00 -Mapped "{[/moneyLog/elecLog/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.ElecLogController.remove(java.lang.Long[])
2019-05-15 09:12:00 -Mapped "{[/moneyLog/elecLog/update]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.ElecLogController.update(java.util.Map<java.lang.String, java.lang.Object>,com.bootdo.moneyLog.domain.ElecLogDO)
2019-05-15 09:12:00 -Mapped "{[/moneyLog/elecLog/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.moneyLog.controller.ElecLogController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 09:12:00 -Mapped "{[/moneyLog/elecLog/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.ElecLogController.save(com.bootdo.moneyLog.domain.ElecLogDO)
2019-05-15 09:12:00 -Mapped "{[/moneyLog/elecLog/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.ElecLogController.edit(java.lang.Long,org.springframework.ui.Model)
2019-05-15 09:12:00 -Mapped "{[/moneyLog/elecLog],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.ElecLogController.moneyLog()
2019-05-15 09:12:00 -Mapped "{[/moneyLog/elecLog/exprotElecLog],methods=[GET]}" onto public void com.bootdo.moneyLog.controller.ElecLogController.exprotElecLog(com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-05-15 09:12:00 -Mapped "{[/moneyLog/heatLog/add],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.HeatLogController.add()
2019-05-15 09:12:00 -Mapped "{[/moneyLog/heatLog/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.HeatLogController.remove(java.lang.Long)
2019-05-15 09:12:00 -Mapped "{[/moneyLog/heatLog/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.HeatLogController.remove(java.lang.Long[])
2019-05-15 09:12:00 -Mapped "{[/moneyLog/heatLog/update]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.HeatLogController.update(java.util.Map<java.lang.String, java.lang.Object>,com.bootdo.moneyLog.domain.HeatLogDO)
2019-05-15 09:12:00 -Mapped "{[/moneyLog/heatLog/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.moneyLog.controller.HeatLogController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 09:12:00 -Mapped "{[/moneyLog/heatLog/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.HeatLogController.save(com.bootdo.moneyLog.domain.HeatLogDO)
2019-05-15 09:12:00 -Mapped "{[/moneyLog/heatLog/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.HeatLogController.edit(java.lang.Long,org.springframework.ui.Model)
2019-05-15 09:12:00 -Mapped "{[/moneyLog/heatLog/exprotHeatLog],methods=[GET]}" onto public void com.bootdo.moneyLog.controller.HeatLogController.exprotHeatLog(com.bootdo.moneyLog.vo.HeatLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-05-15 09:12:00 -Mapped "{[/moneyLog/heatLog],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.HeatLogController.HeatLog()
2019-05-15 09:12:00 -Mapped "{[/moneyLog/waterLog/add],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.WaterLogController.add()
2019-05-15 09:12:00 -Mapped "{[/moneyLog/waterLog/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.WaterLogController.remove(java.lang.Long)
2019-05-15 09:12:00 -Mapped "{[/moneyLog/waterLog/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.WaterLogController.remove(java.lang.Long[])
2019-05-15 09:12:00 -Mapped "{[/moneyLog/waterLog/update]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.WaterLogController.update(java.util.Map<java.lang.String, java.lang.Object>,com.bootdo.moneyLog.domain.WaterLogDO)
2019-05-15 09:12:00 -Mapped "{[/moneyLog/waterLog/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.moneyLog.controller.WaterLogController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 09:12:00 -Mapped "{[/moneyLog/waterLog/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.WaterLogController.save(com.bootdo.moneyLog.domain.WaterLogDO)
2019-05-15 09:12:00 -Mapped "{[/moneyLog/waterLog/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.WaterLogController.edit(java.lang.Long,org.springframework.ui.Model)
2019-05-15 09:12:00 -Mapped "{[/moneyLog/waterLog/exprotWaterLog],methods=[GET]}" onto public void com.bootdo.moneyLog.controller.WaterLogController.exprotWaterLog(com.bootdo.moneyLog.vo.WaterLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-05-15 09:12:00 -Mapped "{[/moneyLog/waterLog],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.WaterLogController.WaterLog()
2019-05-15 09:12:00 -Mapped "{[/oa/notify/add],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.add()
2019-05-15 09:12:00 -Mapped "{[/oa/notify/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.remove(java.lang.Long)
2019-05-15 09:12:00 -Mapped "{[/oa/notify/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.remove(java.lang.Long[])
2019-05-15 09:12:00 -Mapped "{[/oa/notify/update]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.update(com.bootdo.oa.domain.NotifyDO)
2019-05-15 09:12:00 -Mapped "{[/oa/notify/read/{id}],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.read(java.lang.Long,org.springframework.ui.Model)
2019-05-15 09:12:00 -Mapped "{[/oa/notify/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.oa.controller.NotifyController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 09:12:00 -Mapped "{[/oa/notify/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.save(com.bootdo.oa.domain.NotifyDO)
2019-05-15 09:12:00 -Mapped "{[/oa/notify/message],methods=[GET]}" onto com.bootdo.common.utils.PageUtils com.bootdo.oa.controller.NotifyController.message()
2019-05-15 09:12:00 -Mapped "{[/oa/notify/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.edit(java.lang.Long,org.springframework.ui.Model)
2019-05-15 09:12:00 -Mapped "{[/oa/notify],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.oaNotify()
2019-05-15 09:12:00 -Mapped "{[/oa/notify/selfNotify],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.selefNotify()
2019-05-15 09:12:00 -Mapped "{[/oa/notify/selfList],methods=[GET]}" onto com.bootdo.common.utils.PageUtils com.bootdo.oa.controller.NotifyController.selfList(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 09:12:00 -Mapped "{[/print/print/add],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.add()
2019-05-15 09:12:00 -Mapped "{[/print/print/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.print.controller.PrintController.remove(java.lang.Long)
2019-05-15 09:12:00 -Mapped "{[/print/print/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.print.controller.PrintController.remove(java.lang.Long[])
2019-05-15 09:12:00 -Mapped "{[/print/print/update]}" onto public com.bootdo.common.utils.R com.bootdo.print.controller.PrintController.update(com.bootdo.print.domain.PrintDO)
2019-05-15 09:12:00 -Mapped "{[/print/print/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.print.controller.PrintController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 09:12:00 -Mapped "{[/print/print/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.print.controller.PrintController.save(java.lang.String,com.bootdo.print.domain.PrintDO)
2019-05-15 09:12:00 -Mapped "{[/print/print/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.edit(java.lang.Long,org.springframework.ui.Model)
2019-05-15 09:12:00 -Mapped "{[/print/print/printEdit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.printEdit(java.lang.Long,org.springframework.ui.Model)
2019-05-15 09:12:00 -Mapped "{[/print/print/printMoney],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.printMoney()
2019-05-15 09:12:00 -Mapped "{[/print/print/exprotPrint],methods=[GET]}" onto public void com.bootdo.print.controller.PrintController.exprotPrint(com.bootdo.print.vo.PrintVo,javax.servlet.http.HttpServletResponse)
2019-05-15 09:12:00 -Mapped "{[/print/print],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.Print()
2019-05-15 09:12:00 -Mapped "{[/system/sysDept/add/{pId}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.add(java.lang.Long,org.springframework.ui.Model)
2019-05-15 09:12:00 -Mapped "{[/system/sysDept/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.remove(java.lang.Long)
2019-05-15 09:12:00 -Mapped "{[/system/sysDept/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.remove(java.lang.Long[])
2019-05-15 09:12:00 -Mapped "{[/system/sysDept/update]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.update(com.bootdo.system.domain.DeptDO)
2019-05-15 09:12:00 -Mapped "{[/system/sysDept/list],methods=[GET]}" onto public java.util.List<com.bootdo.system.domain.DeptDO> com.bootdo.system.controller.DeptController.list()
2019-05-15 09:12:00 -Mapped "{[/system/sysDept/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.save(com.bootdo.system.domain.DeptDO)
2019-05-15 09:12:00 -Mapped "{[/system/sysDept/tree],methods=[GET]}" onto public com.bootdo.common.domain.Tree<com.bootdo.system.domain.DeptDO> com.bootdo.system.controller.DeptController.tree()
2019-05-15 09:12:00 -Mapped "{[/system/sysDept/edit/{deptId}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.edit(java.lang.Long,org.springframework.ui.Model)
2019-05-15 09:12:00 -Mapped "{[/system/sysDept/treeView],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.treeView()
2019-05-15 09:12:00 -Mapped "{[/system/sysDept],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.dept()
2019-05-15 09:12:00 -Mapped "{[/index],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.index(org.springframework.ui.Model)
2019-05-15 09:12:00 -Mapped "{[/main],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.main()
2019-05-15 09:12:00 -Mapped "{[/login],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.login(org.springframework.ui.Model)
2019-05-15 09:12:00 -Mapped "{[/logout],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.logout()
2019-05-15 09:12:00 -Mapped "{[/getVerify],methods=[GET]}" onto public void com.bootdo.system.controller.LoginController.getVerify(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-05-15 09:12:00 -Mapped "{[/ || ],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.welcome(org.springframework.ui.Model)
2019-05-15 09:12:00 -Mapped "{[/login],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.LoginController.ajaxLogin(java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest)
2019-05-15 09:12:00 -Mapped "{[/sys/menu/add/{pId}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.MenuController.add(org.springframework.ui.Model,java.lang.Long)
2019-05-15 09:12:00 -Mapped "{[/sys/menu/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.MenuController.remove(java.lang.Long)
2019-05-15 09:12:00 -Mapped "{[/sys/menu/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.MenuController.update(com.bootdo.system.domain.MenuDO)
2019-05-15 09:12:00 -Mapped "{[/sys/menu/list]}" onto java.util.List<com.bootdo.system.domain.MenuDO> com.bootdo.system.controller.MenuController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 09:12:00 -Mapped "{[/sys/menu/save],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.MenuController.save(com.bootdo.system.domain.MenuDO)
2019-05-15 09:12:00 -Mapped "{[/sys/menu/tree/{roleId}],methods=[GET]}" onto com.bootdo.common.domain.Tree<com.bootdo.system.domain.MenuDO> com.bootdo.system.controller.MenuController.tree(java.lang.Long)
2019-05-15 09:12:00 -Mapped "{[/sys/menu/tree],methods=[GET]}" onto com.bootdo.common.domain.Tree<com.bootdo.system.domain.MenuDO> com.bootdo.system.controller.MenuController.tree()
2019-05-15 09:12:00 -Mapped "{[/sys/menu/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.MenuController.edit(org.springframework.ui.Model,java.lang.Long)
2019-05-15 09:12:00 -Mapped "{[/sys/menu],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.MenuController.menu(org.springframework.ui.Model)
2019-05-15 09:12:00 -Mapped "{[/sys/role/add],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.RoleController.add()
2019-05-15 09:12:00 -Mapped "{[/sys/role/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.update(com.bootdo.system.domain.RoleDO)
2019-05-15 09:12:00 -Mapped "{[/sys/role/list],methods=[GET]}" onto java.util.List<com.bootdo.system.domain.RoleDO> com.bootdo.system.controller.RoleController.list()
2019-05-15 09:12:00 -Mapped "{[/sys/role/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.save(java.lang.Long)
2019-05-15 09:12:00 -Mapped "{[/sys/role/save],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.save(com.bootdo.system.domain.RoleDO)
2019-05-15 09:12:00 -Mapped "{[/sys/role/batchRemove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.batchRemove(java.lang.Long[])
2019-05-15 09:12:00 -Mapped "{[/sys/role],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.RoleController.role()
2019-05-15 09:12:00 -Mapped "{[/sys/role/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.RoleController.edit(java.lang.Long,org.springframework.ui.Model)
2019-05-15 09:12:00 -Mapped "{[/sys/online/list]}" onto public java.util.List<com.bootdo.system.domain.UserOnline> com.bootdo.system.controller.SessionController.list()
2019-05-15 09:12:00 -Mapped "{[/sys/online/sessionList]}" onto public java.util.Collection<org.apache.shiro.session.Session> com.bootdo.system.controller.SessionController.sessionList()
2019-05-15 09:12:00 -Mapped "{[/sys/online],methods=[GET]}" onto public java.lang.String com.bootdo.system.controller.SessionController.online()
2019-05-15 09:12:00 -Mapped "{[/sys/online/forceLogout/{sessionId}]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.SessionController.forceLogout(java.lang.String,org.springframework.web.servlet.mvc.support.RedirectAttributes)
2019-05-15 09:12:00 -Mapped "{[/sys/user/exit],methods=[POST]}" onto boolean com.bootdo.system.controller.UserController.exit(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 09:12:00 -Mapped "{[/sys/user/add],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.add(org.springframework.ui.Model)
2019-05-15 09:12:00 -Mapped "{[/sys/user/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.remove(java.lang.Long)
2019-05-15 09:12:00 -Mapped "{[/sys/user/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.update(com.bootdo.system.domain.UserDO)
2019-05-15 09:12:00 -Mapped "{[/sys/user/list],methods=[GET]}" onto com.bootdo.common.utils.PageUtils com.bootdo.system.controller.UserController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 09:12:00 -Mapped "{[/sys/user/save],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.save(com.bootdo.system.domain.UserDO)
2019-05-15 09:12:00 -Mapped "{[/sys/user/batchRemove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.batchRemove(java.lang.Long[])
2019-05-15 09:12:00 -Mapped "{[/sys/user/tree],methods=[GET]}" onto public com.bootdo.common.domain.Tree<com.bootdo.system.domain.DeptDO> com.bootdo.system.controller.UserController.tree()
2019-05-15 09:12:00 -Mapped "{[/sys/user/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.edit(org.springframework.ui.Model,java.lang.Long)
2019-05-15 09:12:00 -Mapped "{[/sys/user],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.user(org.springframework.ui.Model)
2019-05-15 09:12:00 -Mapped "{[/sys/user/treeView],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.treeView()
2019-05-15 09:12:00 -Mapped "{[/sys/user/resetPwd],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.resetPwd(com.bootdo.system.vo.UserVO)
2019-05-15 09:12:00 -Mapped "{[/sys/user/resetPwd/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.resetPwd(java.lang.Long,org.springframework.ui.Model)
2019-05-15 09:12:00 -Mapped "{[/sys/user/personal],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.personal(org.springframework.ui.Model)
2019-05-15 09:12:00 -Mapped "{[/sys/user/uploadImg],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.uploadImg(org.springframework.web.multipart.MultipartFile,java.lang.String,javax.servlet.http.HttpServletRequest)
2019-05-15 09:12:00 -Mapped "{[/sys/user/updatePeronal],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.updatePeronal(com.bootdo.system.domain.UserDO)
2019-05-15 09:12:00 -Mapped "{[/sys/user/adminResetPwd],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.adminResetPwd(com.bootdo.system.vo.UserVO)
2019-05-15 09:12:00 -Mapped "{[/file/downImport/{importType}],methods=[GET]}" onto public void com.bootdo.temple.controller.TempletController.downImport(javax.servlet.http.HttpServletResponse,java.lang.String)
2019-05-15 09:12:00 -Mapped "{[/water/water/add],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterController.add()
2019-05-15 09:12:00 -Mapped "{[/water/water/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterController.remove(java.lang.Long)
2019-05-15 09:12:00 -Mapped "{[/water/water/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterController.remove(java.lang.Long[])
2019-05-15 09:12:00 -Mapped "{[/water/water/update]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterController.update(com.bootdo.water.domain.WaterDO)
2019-05-15 09:12:00 -Mapped "{[/water/water/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.water.controller.WaterController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 09:12:00 -Mapped "{[/water/water/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterController.save(com.bootdo.water.domain.WaterDO)
2019-05-15 09:12:00 -Mapped "{[/water/water/exprotWater],methods=[GET]}" onto public void com.bootdo.water.controller.WaterController.exprotExcel(com.bootdo.water.vo.WaterVo,javax.servlet.http.HttpServletResponse)
2019-05-15 09:12:00 -Mapped "{[/water/water/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterController.edit(java.lang.Long,org.springframework.ui.Model)
2019-05-15 09:12:00 -Mapped "{[/water/water],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterController.Water()
2019-05-15 09:12:00 -Mapped "{[/water/waterInto/exprotWaterIntoExcel],methods=[GET]}" onto public void com.bootdo.water.controller.WaterIntoController.exprotExcel(com.bootdo.water.vo.WaterVo,javax.servlet.http.HttpServletResponse)
2019-05-15 09:12:00 -Mapped "{[/water/waterInto],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterIntoController.WaterInto()
2019-05-15 09:12:00 -Mapped "{[/water/waterInto/importWaterIntoExcel],methods=[POST]}" onto public java.lang.String com.bootdo.water.controller.WaterIntoController.importWaterIntoExcel(org.springframework.web.multipart.MultipartFile,com.bootdo.water.vo.WaterVo,javax.servlet.http.HttpServletResponse) throws java.lang.Exception
2019-05-15 09:12:00 -Mapped "{[/water/waterPrice/add],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterPriceController.add()
2019-05-15 09:12:00 -Mapped "{[/water/waterPrice/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterPriceController.remove(java.lang.Long)
2019-05-15 09:12:00 -Mapped "{[/water/waterPrice/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterPriceController.remove(java.lang.Long[])
2019-05-15 09:12:00 -Mapped "{[/water/waterPrice/update]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterPriceController.update(com.bootdo.water.domain.WaterPriceDO)
2019-05-15 09:12:00 -Mapped "{[/water/waterPrice/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.water.controller.WaterPriceController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 09:12:00 -Mapped "{[/water/waterPrice/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterPriceController.save(com.bootdo.water.domain.WaterPriceDO)
2019-05-15 09:12:00 -Mapped "{[/water/waterPrice/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterPriceController.edit(java.lang.Long,org.springframework.ui.Model)
2019-05-15 09:12:00 -Mapped "{[/water/waterPrice],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterPriceController.WaterPrice()
2019-05-15 09:12:00 -Mapped "{[/water/waterUpLoad],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterUpLoadController.WaterUpLoad()
2019-05-15 09:12:00 -Mapped "{[/water/waterUpLoad/importWaterExcel]}" onto public java.lang.String com.bootdo.water.controller.WaterUpLoadController.importWaterExcel(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)
2019-05-15 09:12:00 -Mapped "{[/water/waterUpLoad/createWaterExcel],methods=[POST]}" onto public java.lang.String com.bootdo.water.controller.WaterUpLoadController.createWaterExcel(com.bootdo.water.domain.WaterDO) throws java.lang.Exception
2019-05-15 09:12:00 -Mapped "{[/water/waterUpLoad/exprotWaterExcel],methods=[GET]}" onto public void com.bootdo.water.controller.WaterUpLoadController.exprotWaterExcel(com.bootdo.water.vo.WaterVo,javax.servlet.http.HttpServletResponse)
2019-05-15 09:12:00 -Mapped "{[/v2/api-docs],methods=[GET],produces=[application/json || application/hal+json]}" onto public org.springframework.http.ResponseEntity<springfox.documentation.spring.web.json.Json> springfox.documentation.swagger2.web.Swagger2Controller.getDocumentation(java.lang.String,javax.servlet.http.HttpServletRequest)
2019-05-15 09:12:00 -Mapped "{[/swagger-resources]}" onto org.springframework.http.ResponseEntity<java.util.List<springfox.documentation.swagger.web.SwaggerResource>> springfox.documentation.swagger.web.ApiResourceController.swaggerResources()
2019-05-15 09:12:00 -Mapped "{[/swagger-resources/configuration/ui]}" onto org.springframework.http.ResponseEntity<springfox.documentation.swagger.web.UiConfiguration> springfox.documentation.swagger.web.ApiResourceController.uiConfiguration()
2019-05-15 09:12:00 -Mapped "{[/swagger-resources/configuration/security]}" onto org.springframework.http.ResponseEntity<springfox.documentation.swagger.web.SecurityConfiguration> springfox.documentation.swagger.web.ApiResourceController.securityConfiguration()
2019-05-15 09:12:01 -Initializing ExecutorService  'messageBrokerTaskScheduler'
2019-05-15 09:12:01 -Mapped URL path [/endpointChat/**] onto handler of type [class org.springframework.web.socket.sockjs.support.SockJsHttpRequestHandler]
2019-05-15 09:12:01 -Initializing ExecutorService  'brokerChannelExecutor'
2019-05-15 09:12:01 -Mapped URL path [/**/favicon.ico] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-05-15 09:12:02 -Looking for @ControllerAdvice: org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@70e9c95d: startup date [Wed May 15 09:11:33 CST 2019]; root of context hierarchy
2019-05-15 09:12:02 -Mapped URL path [/webjars/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-05-15 09:12:02 -Mapped URL path [/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-05-15 09:12:02 -Mapped URL path [/files/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-05-15 09:12:02 -Detected @ExceptionHandler methods in BDExceptionHandler
2019-05-15 09:12:02 -[THYMELEAF][main] Template Mode 'LEGACYHTML5' is deprecated. Using Template Mode 'HTML' instead.
2019-05-15 09:12:05 -Registering beans for JMX exposure on startup
2019-05-15 09:12:05 -Bean with name 'dataSource' has been autodetected for JMX exposure
2019-05-15 09:12:05 -Located MBean 'dataSource': registering with JMX server as MBean [com.alibaba.druid.pool:name=dataSource,type=DruidDataSource]
2019-05-15 09:12:05 -Starting beans in phase 2147483647
2019-05-15 09:12:05 -Context refreshed
2019-05-15 09:12:05 -Found 1 custom documentation plugin(s)
2019-05-15 09:12:05 -Scanning for api listing references
2019-05-15 09:12:06 -Generating unique operation named: getCountDUsingPOST_1
2019-05-15 09:12:06 -Generating unique operation named: removeUsingPOST_1
2019-05-15 09:12:06 -Generating unique operation named: addUsingGET_1
2019-05-15 09:12:06 -Generating unique operation named: editUsingGET_1
2019-05-15 09:12:06 -Generating unique operation named: listUsingGET_1
2019-05-15 09:12:06 -Generating unique operation named: removeUsingPOST_2
2019-05-15 09:12:06 -Generating unique operation named: removeUsingPOST_3
2019-05-15 09:12:06 -Generating unique operation named: saveUsingPOST_1
2019-05-15 09:12:06 -Generating unique operation named: updateUsingGET_1
2019-05-15 09:12:06 -Generating unique operation named: updateUsingHEAD_1
2019-05-15 09:12:06 -Generating unique operation named: updateUsingPOST_1
2019-05-15 09:12:06 -Generating unique operation named: updateUsingPUT_1
2019-05-15 09:12:06 -Generating unique operation named: updateUsingPATCH_1
2019-05-15 09:12:06 -Generating unique operation named: updateUsingDELETE_1
2019-05-15 09:12:06 -Generating unique operation named: updateUsingOPTIONS_1
2019-05-15 09:12:06 -Generating unique operation named: updateUsingTRACE_1
2019-05-15 09:12:06 -Generating unique operation named: addUsingGET_2
2019-05-15 09:12:06 -Generating unique operation named: editUsingGET_2
2019-05-15 09:12:06 -Generating unique operation named: listUsingGET_2
2019-05-15 09:12:06 -Generating unique operation named: removeUsingPOST_4
2019-05-15 09:12:06 -Generating unique operation named: removeUsingPOST_5
2019-05-15 09:12:06 -Generating unique operation named: saveUsingPOST_2
2019-05-15 09:12:06 -Generating unique operation named: updateUsingPOST_2
2019-05-15 09:12:06 -Generating unique operation named: exprotExcelUsingGET_1
2019-05-15 09:12:06 -Generating unique operation named: addUsingGET_3
2019-05-15 09:12:06 -Generating unique operation named: editUsingGET_3
2019-05-15 09:12:06 -Generating unique operation named: listUsingGET_3
2019-05-15 09:12:06 -Generating unique operation named: removeUsingPOST_6
2019-05-15 09:12:06 -Generating unique operation named: removeUsingPOST_7
2019-05-15 09:12:06 -Generating unique operation named: saveUsingPOST_3
2019-05-15 09:12:06 -Generating unique operation named: updateUsingGET_2
2019-05-15 09:12:06 -Generating unique operation named: updateUsingHEAD_2
2019-05-15 09:12:06 -Generating unique operation named: updateUsingPOST_3
2019-05-15 09:12:06 -Generating unique operation named: updateUsingPUT_2
2019-05-15 09:12:06 -Generating unique operation named: updateUsingPATCH_2
2019-05-15 09:12:06 -Generating unique operation named: updateUsingDELETE_2
2019-05-15 09:12:06 -Generating unique operation named: updateUsingOPTIONS_2
2019-05-15 09:12:06 -Generating unique operation named: updateUsingTRACE_2
2019-05-15 09:12:06 -Generating unique operation named: addUsingGET_4
2019-05-15 09:12:06 -Generating unique operation named: editUsingGET_4
2019-05-15 09:12:07 -Generating unique operation named: listUsingGET_4
2019-05-15 09:12:07 -Generating unique operation named: removeUsingPOST_8
2019-05-15 09:12:07 -Generating unique operation named: removeUsingPOST_9
2019-05-15 09:12:07 -Generating unique operation named: saveUsingPOST_4
2019-05-15 09:12:07 -Generating unique operation named: updateUsingGET_3
2019-05-15 09:12:07 -Generating unique operation named: updateUsingHEAD_3
2019-05-15 09:12:07 -Generating unique operation named: updateUsingPOST_4
2019-05-15 09:12:07 -Generating unique operation named: updateUsingPUT_3
2019-05-15 09:12:07 -Generating unique operation named: updateUsingPATCH_3
2019-05-15 09:12:07 -Generating unique operation named: updateUsingDELETE_3
2019-05-15 09:12:07 -Generating unique operation named: updateUsingOPTIONS_3
2019-05-15 09:12:07 -Generating unique operation named: updateUsingTRACE_3
2019-05-15 09:12:07 -Generating unique operation named: ElecUsingGET_1
2019-05-15 09:12:07 -Generating unique operation named: addUsingGET_5
2019-05-15 09:12:07 -Generating unique operation named: editUsingGET_5
2019-05-15 09:12:07 -Generating unique operation named: listUsingGET_5
2019-05-15 09:12:07 -Generating unique operation named: removeUsingPOST_10
2019-05-15 09:12:07 -Generating unique operation named: removeUsingPOST_11
2019-05-15 09:12:07 -Generating unique operation named: saveUsingPOST_5
2019-05-15 09:12:07 -Generating unique operation named: updateUsingGET_4
2019-05-15 09:12:07 -Generating unique operation named: updateUsingHEAD_4
2019-05-15 09:12:07 -Generating unique operation named: updateUsingPOST_5
2019-05-15 09:12:07 -Generating unique operation named: updateUsingPUT_4
2019-05-15 09:12:07 -Generating unique operation named: updateUsingPATCH_4
2019-05-15 09:12:07 -Generating unique operation named: updateUsingDELETE_4
2019-05-15 09:12:07 -Generating unique operation named: updateUsingOPTIONS_4
2019-05-15 09:12:07 -Generating unique operation named: updateUsingTRACE_4
2019-05-15 09:12:07 -Generating unique operation named: editUsingGET_6
2019-05-15 09:12:07 -Generating unique operation named: listUsingGET_6
2019-05-15 09:12:07 -Generating unique operation named: updateUsingPOST_6
2019-05-15 09:12:07 -Generating unique operation named: addUsingGET_6
2019-05-15 09:12:07 -Generating unique operation named: editUsingGET_7
2019-05-15 09:12:07 -Generating unique operation named: exprotExcelUsingGET_2
2019-05-15 09:12:07 -Generating unique operation named: listUsingGET_7
2019-05-15 09:12:07 -Generating unique operation named: removeUsingPOST_12
2019-05-15 09:12:07 -Generating unique operation named: removeUsingPOST_13
2019-05-15 09:12:07 -Generating unique operation named: saveUsingPOST_6
2019-05-15 09:12:07 -Generating unique operation named: updateUsingGET_5
2019-05-15 09:12:07 -Generating unique operation named: updateUsingHEAD_5
2019-05-15 09:12:07 -Generating unique operation named: updateUsingPOST_7
2019-05-15 09:12:07 -Generating unique operation named: updateUsingPUT_5
2019-05-15 09:12:07 -Generating unique operation named: updateUsingPATCH_5
2019-05-15 09:12:07 -Generating unique operation named: updateUsingDELETE_5
2019-05-15 09:12:07 -Generating unique operation named: updateUsingOPTIONS_5
2019-05-15 09:12:07 -Generating unique operation named: updateUsingTRACE_5
2019-05-15 09:12:07 -Generating unique operation named: exprotExcelUsingGET_3
2019-05-15 09:12:07 -Generating unique operation named: addUsingGET_7
2019-05-15 09:12:07 -Generating unique operation named: editUsingGET_8
2019-05-15 09:12:07 -Generating unique operation named: listUsingGET_8
2019-05-15 09:12:07 -Generating unique operation named: removeUsingPOST_14
2019-05-15 09:12:07 -Generating unique operation named: removeUsingPOST_15
2019-05-15 09:12:07 -Generating unique operation named: saveUsingPOST_7
2019-05-15 09:12:07 -Generating unique operation named: updateUsingGET_6
2019-05-15 09:12:07 -Generating unique operation named: updateUsingHEAD_6
2019-05-15 09:12:07 -Generating unique operation named: updateUsingPOST_8
2019-05-15 09:12:07 -Generating unique operation named: updateUsingPUT_6
2019-05-15 09:12:07 -Generating unique operation named: updateUsingPATCH_6
2019-05-15 09:12:07 -Generating unique operation named: updateUsingDELETE_6
2019-05-15 09:12:07 -Generating unique operation named: updateUsingOPTIONS_6
2019-05-15 09:12:07 -Generating unique operation named: updateUsingTRACE_6
2019-05-15 09:12:07 -Generating unique operation named: addUsingGET_8
2019-05-15 09:12:07 -Generating unique operation named: editUsingGET_9
2019-05-15 09:12:07 -Generating unique operation named: listUsingGET_9
2019-05-15 09:12:07 -Generating unique operation named: removeUsingPOST_16
2019-05-15 09:12:07 -Generating unique operation named: removeUsingPOST_17
2019-05-15 09:12:07 -Generating unique operation named: saveUsingPOST_8
2019-05-15 09:12:07 -Generating unique operation named: updateUsingGET_7
2019-05-15 09:12:07 -Generating unique operation named: updateUsingHEAD_7
2019-05-15 09:12:07 -Generating unique operation named: updateUsingPOST_9
2019-05-15 09:12:07 -Generating unique operation named: updateUsingPUT_7
2019-05-15 09:12:07 -Generating unique operation named: updateUsingPATCH_7
2019-05-15 09:12:07 -Generating unique operation named: updateUsingDELETE_7
2019-05-15 09:12:07 -Generating unique operation named: updateUsingOPTIONS_7
2019-05-15 09:12:07 -Generating unique operation named: updateUsingTRACE_7
2019-05-15 09:12:07 -Generating unique operation named: addUsingGET_9
2019-05-15 09:12:07 -Generating unique operation named: editUsingGET_10
2019-05-15 09:12:07 -Generating unique operation named: infoUsingGET_1
2019-05-15 09:12:07 -Generating unique operation named: infoUsingHEAD_1
2019-05-15 09:12:07 -Generating unique operation named: infoUsingPOST_1
2019-05-15 09:12:07 -Generating unique operation named: infoUsingPUT_1
2019-05-15 09:12:07 -Generating unique operation named: infoUsingPATCH_1
2019-05-15 09:12:07 -Generating unique operation named: infoUsingDELETE_1
2019-05-15 09:12:07 -Generating unique operation named: infoUsingOPTIONS_1
2019-05-15 09:12:07 -Generating unique operation named: infoUsingTRACE_1
2019-05-15 09:12:07 -Generating unique operation named: listUsingGET_10
2019-05-15 09:12:07 -Generating unique operation named: removeUsingPOST_18
2019-05-15 09:12:07 -Generating unique operation named: removeUsingPOST_19
2019-05-15 09:12:07 -Generating unique operation named: saveUsingPOST_9
2019-05-15 09:12:07 -Generating unique operation named: updateUsingPOST_10
2019-05-15 09:12:07 -Generating unique operation named: listUsingGET_11
2019-05-15 09:12:07 -Generating unique operation named: removeUsingPOST_20
2019-05-15 09:12:07 -Generating unique operation named: welcomeUsingGET_1
2019-05-15 09:12:07 -Generating unique operation named: addUsingGET_10
2019-05-15 09:12:07 -Generating unique operation named: editUsingGET_11
2019-05-15 09:12:07 -Generating unique operation named: listUsingGET_12
2019-05-15 09:12:07 -Generating unique operation named: removeUsingPOST_21
2019-05-15 09:12:07 -Generating unique operation named: saveUsingPOST_10
2019-05-15 09:12:07 -Generating unique operation named: treeUsingGET_1
2019-05-15 09:12:07 -Generating unique operation named: treeUsingGET_2
2019-05-15 09:12:07 -Generating unique operation named: updateUsingPOST_11
2019-05-15 09:12:07 -Generating unique operation named: addUsingGET_11
2019-05-15 09:12:07 -Generating unique operation named: editUsingGET_12
2019-05-15 09:12:07 -Generating unique operation named: listUsingGET_13
2019-05-15 09:12:07 -Generating unique operation named: removeUsingPOST_22
2019-05-15 09:12:07 -Generating unique operation named: removeUsingPOST_23
2019-05-15 09:12:07 -Generating unique operation named: saveUsingPOST_11
2019-05-15 09:12:07 -Generating unique operation named: updateUsingGET_8
2019-05-15 09:12:07 -Generating unique operation named: updateUsingHEAD_8
2019-05-15 09:12:07 -Generating unique operation named: updateUsingPOST_12
2019-05-15 09:12:07 -Generating unique operation named: updateUsingPUT_8
2019-05-15 09:12:07 -Generating unique operation named: updateUsingPATCH_8
2019-05-15 09:12:07 -Generating unique operation named: updateUsingDELETE_8
2019-05-15 09:12:07 -Generating unique operation named: updateUsingOPTIONS_8
2019-05-15 09:12:07 -Generating unique operation named: updateUsingTRACE_8
2019-05-15 09:12:07 -Generating unique operation named: addUsingGET_12
2019-05-15 09:12:07 -Generating unique operation named: editUsingGET_13
2019-05-15 09:12:08 -Generating unique operation named: listUsingGET_14
2019-05-15 09:12:08 -Generating unique operation named: removeUsingPOST_24
2019-05-15 09:12:08 -Generating unique operation named: removeUsingPOST_25
2019-05-15 09:12:08 -Generating unique operation named: saveUsingPOST_12
2019-05-15 09:12:08 -Generating unique operation named: updateUsingGET_9
2019-05-15 09:12:08 -Generating unique operation named: updateUsingHEAD_9
2019-05-15 09:12:08 -Generating unique operation named: updateUsingPOST_13
2019-05-15 09:12:08 -Generating unique operation named: updateUsingPUT_9
2019-05-15 09:12:08 -Generating unique operation named: updateUsingPATCH_9
2019-05-15 09:12:08 -Generating unique operation named: updateUsingDELETE_9
2019-05-15 09:12:08 -Generating unique operation named: updateUsingOPTIONS_9
2019-05-15 09:12:08 -Generating unique operation named: updateUsingTRACE_9
2019-05-15 09:12:08 -Generating unique operation named: addUsingGET_13
2019-05-15 09:12:08 -Generating unique operation named: batchRemoveUsingPOST_1
2019-05-15 09:12:08 -Generating unique operation named: editUsingGET_14
2019-05-15 09:12:08 -Generating unique operation named: listUsingGET_15
2019-05-15 09:12:08 -Generating unique operation named: saveUsingPOST_13
2019-05-15 09:12:08 -Generating unique operation named: saveUsingPOST_14
2019-05-15 09:12:08 -Generating unique operation named: updateUsingPOST_14
2019-05-15 09:12:08 -Generating unique operation named: listUsingGET_16
2019-05-15 09:12:08 -Generating unique operation named: listUsingHEAD_1
2019-05-15 09:12:08 -Generating unique operation named: listUsingPOST_1
2019-05-15 09:12:08 -Generating unique operation named: listUsingPUT_1
2019-05-15 09:12:08 -Generating unique operation named: listUsingPATCH_1
2019-05-15 09:12:08 -Generating unique operation named: listUsingDELETE_1
2019-05-15 09:12:08 -Generating unique operation named: listUsingOPTIONS_1
2019-05-15 09:12:08 -Generating unique operation named: listUsingTRACE_1
2019-05-15 09:12:08 -Generating unique operation named: countDDUsingGET_1
2019-05-15 09:12:08 -Generating unique operation named: exportDDUsingGET_1
2019-05-15 09:12:08 -Generating unique operation named: getCountYYUsingPOST_1
2019-05-15 09:12:08 -Generating unique operation named: getCountMMUsingPOST_1
2019-05-15 09:12:08 -Generating unique operation named: addUsingGET_14
2019-05-15 09:12:08 -Generating unique operation named: batchRemoveUsingPOST_2
2019-05-15 09:12:08 -Generating unique operation named: editUsingGET_15
2019-05-15 09:12:08 -Generating unique operation named: listUsingGET_17
2019-05-15 09:12:08 -Generating unique operation named: removeUsingPOST_26
2019-05-15 09:12:08 -Generating unique operation named: saveUsingPOST_15
2019-05-15 09:12:08 -Generating unique operation named: treeUsingGET_3
2019-05-15 09:12:08 -Generating unique operation named: treeViewUsingGET_1
2019-05-15 09:12:08 -Generating unique operation named: updateUsingPOST_15
2019-05-15 09:12:08 -Generating unique operation named: addUsingGET_15
2019-05-15 09:12:08 -Generating unique operation named: editUsingGET_16
2019-05-15 09:12:08 -Generating unique operation named: exprotExcelUsingGET_4
2019-05-15 09:12:08 -Generating unique operation named: listUsingGET_18
2019-05-15 09:12:08 -Generating unique operation named: removeUsingPOST_27
2019-05-15 09:12:08 -Generating unique operation named: removeUsingPOST_28
2019-05-15 09:12:08 -Generating unique operation named: saveUsingPOST_16
2019-05-15 09:12:08 -Generating unique operation named: updateUsingGET_10
2019-05-15 09:12:08 -Generating unique operation named: updateUsingHEAD_10
2019-05-15 09:12:08 -Generating unique operation named: updateUsingPOST_16
2019-05-15 09:12:08 -Generating unique operation named: updateUsingPUT_10
2019-05-15 09:12:08 -Generating unique operation named: updateUsingPATCH_10
2019-05-15 09:12:08 -Generating unique operation named: updateUsingDELETE_10
2019-05-15 09:12:08 -Generating unique operation named: updateUsingOPTIONS_10
2019-05-15 09:12:08 -Generating unique operation named: updateUsingTRACE_10
2019-05-15 09:12:08 -Generating unique operation named: exprotExcelUsingGET_5
2019-05-15 09:12:08 -Generating unique operation named: addUsingGET_16
2019-05-15 09:12:08 -Generating unique operation named: editUsingGET_17
2019-05-15 09:12:08 -Generating unique operation named: listUsingGET_19
2019-05-15 09:12:08 -Generating unique operation named: removeUsingPOST_29
2019-05-15 09:12:08 -Generating unique operation named: removeUsingPOST_30
2019-05-15 09:12:08 -Generating unique operation named: saveUsingPOST_17
2019-05-15 09:12:08 -Generating unique operation named: updateUsingGET_11
2019-05-15 09:12:08 -Generating unique operation named: updateUsingHEAD_11
2019-05-15 09:12:08 -Generating unique operation named: updateUsingPOST_17
2019-05-15 09:12:08 -Generating unique operation named: updateUsingPUT_11
2019-05-15 09:12:08 -Generating unique operation named: updateUsingPATCH_11
2019-05-15 09:12:08 -Generating unique operation named: updateUsingDELETE_11
2019-05-15 09:12:08 -Generating unique operation named: updateUsingOPTIONS_11
2019-05-15 09:12:08 -Generating unique operation named: updateUsingTRACE_11
2019-05-15 09:12:08 -Generating unique operation named: addUsingGET_17
2019-05-15 09:12:08 -Generating unique operation named: editUsingGET_18
2019-05-15 09:12:08 -Generating unique operation named: listUsingGET_20
2019-05-15 09:12:08 -Generating unique operation named: removeUsingPOST_31
2019-05-15 09:12:08 -Generating unique operation named: removeUsingPOST_32
2019-05-15 09:12:08 -Generating unique operation named: saveUsingPOST_18
2019-05-15 09:12:08 -Generating unique operation named: updateUsingGET_12
2019-05-15 09:12:08 -Generating unique operation named: updateUsingHEAD_12
2019-05-15 09:12:08 -Generating unique operation named: updateUsingPOST_18
2019-05-15 09:12:08 -Generating unique operation named: updateUsingPUT_12
2019-05-15 09:12:08 -Generating unique operation named: updateUsingPATCH_12
2019-05-15 09:12:08 -Generating unique operation named: updateUsingDELETE_12
2019-05-15 09:12:08 -Generating unique operation named: updateUsingOPTIONS_12
2019-05-15 09:12:08 -Generating unique operation named: updateUsingTRACE_12
2019-05-15 09:12:08 -Starting Quartz Scheduler now
2019-05-15 09:12:08 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED started.
2019-05-15 09:12:08 -Starting...
2019-05-15 09:12:08 -BrokerAvailabilityEvent[available=true, SimpleBrokerMessageHandler [DefaultSubscriptionRegistry[cache[0 destination(s)], registry[0 sessions]]]]
2019-05-15 09:12:08 -Started.
2019-05-15 09:12:08 -Starting ProtocolHandler ["http-nio-8081"]
2019-05-15 09:12:08 -Using a shared selector for servlet write/read
2019-05-15 09:12:08 -Tomcat started on port(s): 8081 (http) with context path ''
2019-05-15 09:12:08 -Started BootdoApplication in 36.799 seconds (JVM running for 37.561)
2019-05-15 09:12:09 -==>  Preparing: select `id`,`cron_expression`,`method_name`,`is_concurrent`,`description`,`update_by`,`bean_class`,`create_date`,`job_status`,`job_group`,`update_date`,`create_by`,`spring_bean`,`job_name` from sys_task order by id desc 
2019-05-15 09:12:09 -==> Parameters: 
2019-05-15 09:12:09 -<==      Total: 1
2019-05-15 09:12:33 -Initializing Spring FrameworkServlet 'dispatcherServlet'
2019-05-15 09:12:33 -FrameworkServlet 'dispatcherServlet': initialization started
2019-05-15 09:12:33 -FrameworkServlet 'dispatcherServlet': initialization completed in 136 ms
2019-05-15 09:12:34 -Enabling session validation scheduler...
2019-05-15 09:12:34 -请求地址 : http://localhost:8081/login;JSESSIONID=a0725582-09f7-4fc0-b359-999a32e723ea
2019-05-15 09:12:34 -HTTP METHOD : GET
2019-05-15 09:12:34 -CLASS_METHOD : com.bootdo.system.controller.LoginController.login
2019-05-15 09:12:34 -参数 : [{}]
2019-05-15 09:12:34 -耗时 : 3
2019-05-15 09:12:34 -返回值 : login
2019-05-15 09:12:38 -请求地址 : http://localhost:8081/getVerify
2019-05-15 09:12:38 -HTTP METHOD : GET
2019-05-15 09:12:38 -CLASS_METHOD : com.bootdo.system.controller.LoginController.getVerify
2019-05-15 09:12:38 -参数 : [org.apache.shiro.web.servlet.ShiroHttpServletRequest@6cd30c56, org.apache.shiro.web.servlet.ShiroHttpServletResponse@29d19fa8]
2019-05-15 09:12:43 -3908
2019-05-15 09:12:43 -耗时 : 5603
2019-05-15 09:12:43 -返回值 : null
2019-05-15 09:12:48 -请求地址 : http://localhost:8081/login
2019-05-15 09:12:48 -HTTP METHOD : POST
2019-05-15 09:12:48 -CLASS_METHOD : com.bootdo.system.controller.LoginController.ajaxLogin
2019-05-15 09:12:48 -参数 : [admin, 111111, 3908, org.apache.shiro.web.servlet.ShiroHttpServletRequest@6851c9c5]
2019-05-15 09:12:49 -==>  Preparing: select `user_id`,`username`,`name`,`password`,`dept_id`,`email`,`mobile`,`status`,`user_id_create`,`gmt_create`,`gmt_modified`,`sex`,`birth`,`pic_id`,`live_address`,`hobby`,`province`,`city`,`district` from sys_user WHERE username = ? order by user_id desc 
2019-05-15 09:12:49 -==> Parameters: admin(String)
2019-05-15 09:12:49 -<==      Total: 1
2019-05-15 09:12:49 -耗时 : 160
2019-05-15 09:12:49 -返回值 : {msg=操作成功, code=0}
2019-05-15 09:12:49 -More than one TaskExecutor bean found within the context, and none is named 'taskExecutor'. Mark one of them as primary or name it 'taskExecutor' (possibly as an alias) in order to use it for async processing: [clientInboundChannelExecutor, clientOutboundChannelExecutor, brokerChannelExecutor, messageBrokerTaskScheduler]
2019-05-15 09:12:49 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-05-15 09:12:49 -==> Parameters: 1(Long), admin(String), 登录(String), 161(Integer), com.bootdo.system.controller.LoginController.ajaxLogin()(String), null, 127.0.0.1(String), 2019-05-15 09:12:49.255(Timestamp)
2019-05-15 09:12:49 -<==    Updates: 1
2019-05-15 09:12:49 -请求地址 : http://localhost:8081/index
2019-05-15 09:12:49 -HTTP METHOD : GET
2019-05-15 09:12:49 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2019-05-15 09:12:49 -参数 : [{}]
2019-05-15 09:12:49 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2019-05-15 09:12:50 -==> Parameters: 1(Long)
2019-05-15 09:12:50 -<==      Total: 49
2019-05-15 09:12:50 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2019-05-15 09:12:50 -==> Parameters: 138(Long)
2019-05-15 09:12:50 -<==      Total: 1
2019-05-15 09:12:50 -耗时 : 309
2019-05-15 09:12:50 -返回值 : index_v1
2019-05-15 09:12:50 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-05-15 09:12:50 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 309(Integer), com.bootdo.system.controller.LoginController.index()(String), {"menus":[{"attributes":{"icon":"fa fa-money","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-money","url":"/moneyList/moneyList"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"102","parentId":"106","text":"现金缴费"},{"attributes":{"icon":"fa fa-book","url":"/moneyLog/elecLog"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"107","parentId":"106","text":"缴费记录"}],"hasChildren":true,"hasParent":false,"id":"106","parentId":"0","text":"收费管理"},{"attributes":{"icon":"fa fa-lightbulb-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/elec/elec"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"121","parentId":"103","text":"电费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"elec/elecInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"122","parentId":"103","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"elec/elecUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"123","parentId":"103","text":"电表上传"},{"attributes":{"icon":"fa fa-cc","url":"/elec/elecPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"124","parentId":"103","text":"电价管理"}],"hasChildren":true,"hasParent":false,"id":"103","parentId":"0","text":"电费管理"},{"attributes":{"icon":"fa fa-tint","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/water/water"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"117","parentId":"105","text":"水费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"water/waterInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"118","parentId":"105","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"water/waterUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"119","parentId":"105","text":"水费生成"},{"attributes":{"icon":"fa fa-cc","url":"/water/waterPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"120","parentId":"105","text":"水价管理"}],"hasChildren":true,"hasParent":false,"id":"105","parentId":"0","text":"水费管理"},{"attributes":{"icon":"fa fa-fire","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/heat/heat"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"113","parentId":"104","text":"暖费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"heat/heatInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"114","parentId":"104","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"heat/heatUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"115","parentId":"104","text":"暖费生成"},{"attributes":{"icon":"","url":"/heat/heatPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"116","parentId":"104","text":"暖价管理"}],"hasChildren":true,"hasParent":false,"id":"104","parentId":"0","text":"暖费管理"},{"attributes":{"icon":"fa fa-vcard-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-bomb","url":"/print/print"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"149","parentId":"108","text":"票据记录"}],"hasChildren":true,"hasParent":false,"id":"108","parentId":"0","text":"票据管理"},{"attributes":{"icon":"fa fa-bar-chart","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-area-chart","url":"/chart/graph_echarts.html"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","text":"百度chart"},{"attributes":{"icon":"fa fa-sun-o","url":"charts/countDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"109","parentId":"97","text":"日统计报表"},{"attributes":{"icon":"fa fa-calendar","url":"charts/tableDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"161","parentId":"97","text":"日统计表格"},{"attributes":{"icon":"fa fa-registered","url":"charts/countMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"110","parentId":"97","text":"月统计报表"},{"attributes":{"icon":"fa fa-building-o","url":"charts/tableElecMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"162","parentId":"97","text":"月统计表格"},{"attributes":{"icon":"fa fa-support","url":"charts/countYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"111","parentId":"97","text":"年统计报表"},{"attributes":{"icon":"fa fa-book","url":"charts/tableElecYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"163","parentId":"97","text":"年统计表格"},{"attributes":{"icon":"fa fa-money","url":"charts/countOwe"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"155","parentId":"97","text":"欠费报表图"},{"attributes":{"icon":"fa fa-tachometer","url":"charts/countRun"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"112"(String), 127.0.0.1(String), 2019-05-15 09:12:50.244(Timestamp)
2019-05-15 09:12:50 -<==    Updates: 1
2019-05-15 09:12:50 -请求地址 : http://localhost:8081/main
2019-05-15 09:12:50 -HTTP METHOD : GET
2019-05-15 09:12:50 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-05-15 09:12:50 -参数 : []
2019-05-15 09:12:50 -耗时 : 0
2019-05-15 09:12:50 -返回值 : main
2019-05-15 09:12:52 -请求地址 : http://localhost:8081/oa/notify/message
2019-05-15 09:12:52 -HTTP METHOD : GET
2019-05-15 09:12:52 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2019-05-15 09:12:52 -参数 : []
2019-05-15 09:12:52 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2019-05-15 09:12:52 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2019-05-15 09:12:52 -<==      Total: 0
2019-05-15 09:12:52 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2019-05-15 09:12:52 -==> Parameters: 1(Long), 0(String)
2019-05-15 09:12:52 -<==      Total: 1
2019-05-15 09:12:52 -耗时 : 59
2019-05-15 09:12:52 -返回值 : com.bootdo.common.utils.PageUtils@4e97cf8d
2019-05-15 09:12:52 -请求地址 : http://localhost:8081/main
2019-05-15 09:12:52 -HTTP METHOD : GET
2019-05-15 09:12:52 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-05-15 09:12:52 -参数 : []
2019-05-15 09:12:52 -耗时 : 2
2019-05-15 09:12:52 -返回值 : main
2019-05-15 09:13:01 -WebSocketSession[1 current WS(1)-HttpStream(0)-HttpPoll(0), 1 total, 0 closed abnormally (0 connect failure, 0 send limit, 0 transport error)], stompSubProtocol[processed CONNECT(1)-CONNECTED(1)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 8, active threads = 0, queued tasks = 0, completed tasks = 9], outboundChannelpool size = 1, active threads = 0, queued tasks = 0, completed tasks = 1], sockJsScheduler[pool size = 4, active threads = 1, queued tasks = 2, completed tasks = 2]
2019-05-15 09:13:41 -==>  Preparing: select distinct m.perms from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id = ur.role_id where ur.user_id = ? 
2019-05-15 09:13:41 -==> Parameters: 1(Long)
2019-05-15 09:13:42 -<==      Total: 93
2019-05-15 09:13:42 -请求地址 : http://localhost:8081/water/water
2019-05-15 09:13:42 -HTTP METHOD : GET
2019-05-15 09:13:42 -CLASS_METHOD : com.bootdo.water.controller.WaterController.Water
2019-05-15 09:13:42 -参数 : []
2019-05-15 09:13:42 -耗时 : 1
2019-05-15 09:13:42 -返回值 : water/water/water
2019-05-15 09:13:43 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-05-15 09:13:43 -HTTP METHOD : GET
2019-05-15 09:13:43 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-05-15 09:13:43 -参数 : [userType]
2019-05-15 09:13:43 -请求地址 : http://localhost:8081/common/dict/list/waterType
2019-05-15 09:13:43 -HTTP METHOD : GET
2019-05-15 09:13:43 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-05-15 09:13:43 -参数 : [waterType]
2019-05-15 09:13:43 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-05-15 09:13:43 -==> Parameters: userType(String)
2019-05-15 09:13:43 -<==      Total: 4
2019-05-15 09:13:43 -耗时 : 31
2019-05-15 09:13:43 -返回值 : [DictDO{id=145, name='银行转账', value='D', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=144, name='微信支付', value='C', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-05-15 09:13:43 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-05-15 09:13:43 -==> Parameters: waterType(String)
2019-05-15 09:13:43 -<==      Total: 2
2019-05-15 09:13:43 -耗时 : 41
2019-05-15 09:13:43 -返回值 : [DictDO{id=128, name='民用水', value='1', type='waterType', description='水费性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=127, name='商业水', value='2', type='waterType', description='水费性质', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-05-15 09:13:43 -请求地址 : http://localhost:8081/water/water/list
2019-05-15 09:13:43 -HTTP METHOD : GET
2019-05-15 09:13:43 -CLASS_METHOD : com.bootdo.water.controller.WaterController.list
2019-05-15 09:13:43 -参数 : [{limit=3, offset=0, userType=, waterType=, userOrg=, userId=, createTime=, queryType=1}]
2019-05-15 09:13:43 -==>  Preparing: select `id`,`user_id`,`user_name`,`user_type`,`user_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `user_org`) AS userOrgName,`user_tell`,`user_state`,`wages_id`,`water_type`,`water_price`,`water_cost`,`water_sum`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from water order by id asc limit ?, ? 
2019-05-15 09:13:43 -==> Parameters: 0(Integer), 3(Integer)
2019-05-15 09:13:43 -<==      Total: 3
2019-05-15 09:13:43 -==>  Preparing: select count(*) from water 
2019-05-15 09:13:43 -==> Parameters: 
2019-05-15 09:13:43 -<==      Total: 1
2019-05-15 09:13:43 -耗时 : 60
2019-05-15 09:13:43 -返回值 : com.bootdo.common.utils.PageUtils@2fb47b9e
2019-05-15 09:13:48 -请求地址 : http://localhost:8081/elec/elecPrice
2019-05-15 09:13:48 -HTTP METHOD : GET
2019-05-15 09:13:48 -CLASS_METHOD : com.bootdo.elec.controller.ElecPriceController.ElecPrice
2019-05-15 09:13:48 -参数 : []
2019-05-15 09:13:48 -耗时 : 1
2019-05-15 09:13:48 -返回值 : elec/elecPrice/elecPrice
2019-05-15 09:13:48 -请求地址 : http://localhost:8081/elec/elecPrice/list
2019-05-15 09:13:48 -HTTP METHOD : GET
2019-05-15 09:13:48 -CLASS_METHOD : com.bootdo.elec.controller.ElecPriceController.list
2019-05-15 09:13:48 -参数 : [{limit=10, offset=0}]
2019-05-15 09:13:48 -==>  Preparing: select `id`,`elec_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `elec_org`) AS elecOrgName,`m_elec`,`s_elec`,`g1_elec`,`g2_elec`,`g3_elec`,`wm_elec`, `ws_elec`,`wg_elec`,`mm_elec`, `ms_elec`,`z_elec`,`create_time`, `create_by`, `update_time`, `update_by`,`remark` from elec_price order by id asc limit ?, ? 
2019-05-15 09:13:48 -==> Parameters: 0(Integer), 10(Integer)
2019-05-15 09:13:48 -<==      Total: 2
2019-05-15 09:13:48 -==>  Preparing: select count(*) from elec_price 
2019-05-15 09:13:48 -==> Parameters: 
2019-05-15 09:13:48 -<==      Total: 1
2019-05-15 09:13:48 -耗时 : 54
2019-05-15 09:13:48 -返回值 : com.bootdo.common.utils.PageUtils@532d3475
2019-05-15 09:13:52 -请求地址 : http://localhost:8081/water/waterPrice
2019-05-15 09:13:52 -HTTP METHOD : GET
2019-05-15 09:13:52 -CLASS_METHOD : com.bootdo.water.controller.WaterPriceController.WaterPrice
2019-05-15 09:13:52 -参数 : []
2019-05-15 09:13:52 -耗时 : 1
2019-05-15 09:13:52 -返回值 : water/waterPrice/waterPrice
2019-05-15 09:13:52 -请求地址 : http://localhost:8081/water/waterPrice/list
2019-05-15 09:13:52 -HTTP METHOD : GET
2019-05-15 09:13:52 -CLASS_METHOD : com.bootdo.water.controller.WaterPriceController.list
2019-05-15 09:13:52 -参数 : [{limit=10, offset=0}]
2019-05-15 09:13:52 -==>  Preparing: select `id`,`water_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `water_org`) AS waterOrgName,`m_water`,`s1_water`,`s2_water`,`s3_water`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from water_price order by id asc limit ?, ? 
2019-05-15 09:13:52 -==> Parameters: 0(Integer), 10(Integer)
2019-05-15 09:13:52 -<==      Total: 2
2019-05-15 09:13:52 -==>  Preparing: select count(*) from water_price 
2019-05-15 09:13:52 -==> Parameters: 
2019-05-15 09:13:52 -<==      Total: 1
2019-05-15 09:13:52 -耗时 : 48
2019-05-15 09:13:52 -返回值 : com.bootdo.common.utils.PageUtils@5aa2c068
2019-05-15 09:13:55 -请求地址 : http://localhost:8081/water/waterPrice/edit/1
2019-05-15 09:13:55 -HTTP METHOD : GET
2019-05-15 09:13:55 -CLASS_METHOD : com.bootdo.water.controller.WaterPriceController.edit
2019-05-15 09:13:55 -参数 : [1, {}]
2019-05-15 09:13:55 -==>  Preparing: select `id`,`water_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `water_org`) AS waterOrgName,`m_water`,`s1_water`,`s2_water`,`s3_water`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from water_price where id = ? 
2019-05-15 09:13:55 -==> Parameters: 1(Long)
2019-05-15 09:13:55 -<==      Total: 1
2019-05-15 09:13:55 -耗时 : 12
2019-05-15 09:13:55 -返回值 : water/waterPrice/edit
2019-05-15 09:14:02 -请求地址 : http://localhost:8081/water/waterPrice/edit/1
2019-05-15 09:14:02 -HTTP METHOD : GET
2019-05-15 09:14:02 -CLASS_METHOD : com.bootdo.water.controller.WaterPriceController.edit
2019-05-15 09:14:02 -参数 : [1, {}]
2019-05-15 09:14:02 -==>  Preparing: select `id`,`water_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `water_org`) AS waterOrgName,`m_water`,`s1_water`,`s2_water`,`s3_water`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from water_price where id = ? 
2019-05-15 09:14:02 -==> Parameters: 1(Long)
2019-05-15 09:14:02 -<==      Total: 1
2019-05-15 09:14:02 -耗时 : 4
2019-05-15 09:14:02 -返回值 : water/waterPrice/edit
2019-05-15 09:14:14 -请求地址 : http://localhost:8081/water/waterPrice/update
2019-05-15 09:14:14 -HTTP METHOD : POST
2019-05-15 09:14:14 -CLASS_METHOD : com.bootdo.water.controller.WaterPriceController.update
2019-05-15 09:14:14 -参数 : [com.bootdo.water.domain.WaterPriceDO@1d821ce]
2019-05-15 09:14:14 -==>  Preparing: update water_price SET `water_org` = ?, `m_water` = ?, `s1_water` = ?, `create_time` = ?, `create_by` = ?, `update_time` = ?, `update_by` = ?, `remark` = ? where id = ? 
2019-05-15 09:14:14 -==> Parameters: 2(String), 6(BigDecimal), 10(BigDecimal), (String), 1(Long), 2019-05-15 09:14:14.262(Timestamp), 1(Long), (String), 1(Long)
2019-05-15 09:14:14 -<==    Updates: 1
2019-05-15 09:14:14 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-05-15 09:14:14 -==> Parameters: 1(Long), admin(String), error(String), null, http://localhost:8081/water/waterPrice/update(String), org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'water_type' in 'class com.bootdo.water.domain.WaterPriceDO'(String), null, 2019-05-15 09:14:14.439(Timestamp)
2019-05-15 09:14:14 -nested exception is org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'water_type' in 'class com.bootdo.water.domain.WaterPriceDO'
org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'water_type' in 'class com.bootdo.water.domain.WaterPriceDO'
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:79)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:447)
	at com.sun.proxy.$Proxy101.update(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.update(SqlSessionTemplate.java:295)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:62)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy143.updateWater(Unknown Source)
	at com.bootdo.water.service.impl.WaterPriceServiceImpl.updateWater(WaterPriceServiceImpl.java:43)
	at com.bootdo.water.controller.WaterPriceController.update(WaterPriceController.java:93)
	at com.bootdo.water.controller.WaterPriceController$$FastClassBySpringCGLIB$$fb365725.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:204)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:746)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.bootdo.common.aspect.WebLogAspect.doAround(WebLogAspect.java:57)
	at sun.reflect.GeneratedMethodAccessor128.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.apache.shiro.spring.security.interceptor.AopAllianceAnnotationsAuthorizingMethodInterceptor$1.proceed(AopAllianceAnnotationsAuthorizingMethodInterceptor.java:82)
	at org.apache.shiro.authz.aop.AuthorizingMethodInterceptor.invoke(AuthorizingMethodInterceptor.java:39)
	at org.apache.shiro.spring.security.interceptor.AopAllianceAnnotationsAuthorizingMethodInterceptor.invoke(AopAllianceAnnotationsAuthorizingMethodInterceptor.java:115)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.bootdo.water.controller.WaterPriceController$$EnhancerBySpringCGLIB$$771b98b1.update(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:209)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:877)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:783)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:991)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:925)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:974)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:877)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:661)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:851)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:61)
	at org.apache.shiro.web.servlet.AdviceFilter.executeChain(AdviceFilter.java:108)
	at org.apache.shiro.web.servlet.AdviceFilter.doFilterInternal(AdviceFilter.java:137)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:66)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)
	at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)
	at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)
	at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)
	at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:383)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:109)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:496)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:790)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1468)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:745)
Caused by: org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'water_type' in 'class com.bootdo.water.domain.WaterPriceDO'
	at org.apache.ibatis.reflection.Reflector.getGetInvoker(Reflector.java:421)
	at org.apache.ibatis.reflection.MetaClass.getGetInvoker(MetaClass.java:164)
	at org.apache.ibatis.reflection.wrapper.BeanWrapper.getBeanProperty(BeanWrapper.java:162)
	at org.apache.ibatis.reflection.wrapper.BeanWrapper.get(BeanWrapper.java:49)
	at org.apache.ibatis.reflection.MetaObject.getValue(MetaObject.java:122)
	at org.apache.ibatis.scripting.xmltags.DynamicContext$ContextMap.get(DynamicContext.java:94)
	at org.apache.ibatis.scripting.xmltags.DynamicContext$ContextAccessor.getProperty(DynamicContext.java:108)
	at org.apache.ibatis.ognl.OgnlRuntime.getProperty(OgnlRuntime.java:2666)
	at org.apache.ibatis.ognl.ASTProperty.getValueBody(ASTProperty.java:114)
	at org.apache.ibatis.ognl.SimpleNode.evaluateGetValueBody(SimpleNode.java:212)
	at org.apache.ibatis.ognl.SimpleNode.getValue(SimpleNode.java:258)
	at org.apache.ibatis.ognl.ASTEq.getValueBody(ASTEq.java:50)
	at org.apache.ibatis.ognl.SimpleNode.evaluateGetValueBody(SimpleNode.java:212)
	at org.apache.ibatis.ognl.SimpleNode.getValue(SimpleNode.java:258)
	at org.apache.ibatis.ognl.ASTAnd.getValueBody(ASTAnd.java:61)
	at org.apache.ibatis.ognl.SimpleNode.evaluateGetValueBody(SimpleNode.java:212)
	at org.apache.ibatis.ognl.SimpleNode.getValue(SimpleNode.java:258)
	at org.apache.ibatis.ognl.Ognl.getValue(Ognl.java:470)
	at org.apache.ibatis.ognl.Ognl.getValue(Ognl.java:434)
	at org.apache.ibatis.scripting.xmltags.OgnlCache.getValue(OgnlCache.java:44)
	at org.apache.ibatis.scripting.xmltags.ExpressionEvaluator.evaluateBoolean(ExpressionEvaluator.java:32)
	at org.apache.ibatis.scripting.xmltags.IfSqlNode.apply(IfSqlNode.java:34)
	at org.apache.ibatis.scripting.xmltags.MixedSqlNode.apply(MixedSqlNode.java:33)
	at org.apache.ibatis.scripting.xmltags.TrimSqlNode.apply(TrimSqlNode.java:55)
	at org.apache.ibatis.scripting.xmltags.MixedSqlNode.apply(MixedSqlNode.java:33)
	at org.apache.ibatis.scripting.xmltags.DynamicSqlSource.getBoundSql(DynamicSqlSource.java:41)
	at org.apache.ibatis.mapping.MappedStatement.getBoundSql(MappedStatement.java:292)
	at org.apache.ibatis.executor.statement.BaseStatementHandler.<init>(BaseStatementHandler.java:64)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.<init>(PreparedStatementHandler.java:40)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.<init>(RoutingStatementHandler.java:46)
	at org.apache.ibatis.session.Configuration.newStatementHandler(Configuration.java:545)
	at org.apache.ibatis.executor.SimpleExecutor.doUpdate(SimpleExecutor.java:48)
	at org.apache.ibatis.executor.BaseExecutor.update(BaseExecutor.java:117)
	at org.apache.ibatis.executor.CachingExecutor.update(CachingExecutor.java:76)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:198)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:434)
	... 103 common frames omitted
2019-05-15 09:14:14 -<==    Updates: 1
2019-05-15 09:17:44 -Starting BootdoApplication on PC-201905091110 with PID 20196 (D:\eclipse2018-work\bootdo\target\classes started by Administrator in D:\eclipse2018-work\bootdo)
2019-05-15 09:17:44 -Running with Spring Boot v2.0.3.RELEASE, Spring v5.0.7.RELEASE
2019-05-15 09:17:44 -The following profiles are active: dev
2019-05-15 09:17:44 -Refreshing org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@4d5650ae: startup date [Wed May 15 09:17:44 CST 2019]; root of context hierarchy
2019-05-15 09:17:47 -Multiple Spring Data modules found, entering strict repository configuration mode!
2019-05-15 09:17:49 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$c41ba62b] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-05-15 09:17:49 -Bean 'shiroConfig' of type [com.bootdo.system.config.ShiroConfig$$EnhancerBySpringCGLIB$$b674d4d2] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-05-15 09:17:50 -Bean 'userRealm' of type [com.bootdo.system.shiro.UserRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-05-15 09:17:50 -Bean 'cacheManager2' of type [net.sf.ehcache.CacheManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-05-15 09:17:50 -Bean 'ehCacheManager' of type [org.apache.shiro.cache.ehcache.EhCacheManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-05-15 09:17:50 -Cache with name 'com.bootdo.system.shiro.UserRealm.authorizationCache' does not yet exist.  Creating now.
2019-05-15 09:17:50 -Added EhCache named [com.bootdo.system.shiro.UserRealm.authorizationCache]
2019-05-15 09:17:50 -Bean 'sessionDAO' of type [org.apache.shiro.session.mgt.eis.MemorySessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-05-15 09:17:50 -Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-05-15 09:17:50 -Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-05-15 09:17:51 -Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-05-15 09:17:51 -Tomcat initialized with port(s): 8081 (http)
2019-05-15 09:17:51 -Initializing ProtocolHandler ["http-nio-8081"]
2019-05-15 09:17:51 -Starting service [Tomcat]
2019-05-15 09:17:51 -Starting Servlet Engine: Apache Tomcat/8.5.31
2019-05-15 09:17:51 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [D:\Java\JDK\jdk1.8.0_102\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;D:/Java/JRE/bin/server;D:/Java/JRE/bin;D:/Java/JRE/lib/amd64;C:\ProgramData\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Windows\System32\OpenSSH\;%JAVA_HOME\bin%;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;;C:\Users\Administrator\Desktop;;.]
2019-05-15 09:17:52 -Initializing Spring embedded WebApplicationContext
2019-05-15 09:17:52 -Root WebApplicationContext: initialization completed in 7984 ms
2019-05-15 09:17:52 -Mapping filter: 'characterEncodingFilter' to: [/*]
2019-05-15 09:17:52 -Mapping filter: 'hiddenHttpMethodFilter' to: [/*]
2019-05-15 09:17:52 -Mapping filter: 'httpPutFormContentFilter' to: [/*]
2019-05-15 09:17:52 -Mapping filter: 'requestContextFilter' to: [/*]
2019-05-15 09:17:52 -Filter xssFilter was not registered (disabled)
2019-05-15 09:17:52 -Mapping filter: 'webStatFilter' to urls: [/*]
2019-05-15 09:17:52 -Mapping filter: 'shiroFilterFactoryBean' to: [/*]
2019-05-15 09:17:52 -Servlet statViewServlet mapped to [/druid/*]
2019-05-15 09:17:52 -Servlet dispatcherServlet mapped to [/]
2019-05-15 09:18:01 -ApplicationContext registed-->org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@4d5650ae: startup date [Wed May 15 09:17:44 CST 2019]; root of context hierarchy
2019-05-15 09:18:02 -Using default implementation for ThreadExecutor
2019-05-15 09:18:02 -Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2019-05-15 09:18:02 -Quartz Scheduler v.2.2.1 created.
2019-05-15 09:18:02 -RAMJobStore initialized.
2019-05-15 09:18:02 -Scheduler meta-data: Quartz Scheduler (v2.2.1) 'schedulerFactoryBean' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2019-05-15 09:18:02 -Quartz scheduler 'schedulerFactoryBean' initialized from an externally provided properties instance.
2019-05-15 09:18:02 -Quartz scheduler version: 2.2.1
2019-05-15 09:18:02 -JobFactory set to: com.bootdo.common.quartz.factory.JobFactory@5d5d3a5c
2019-05-15 09:18:02 -Initializing ExecutorService  'clientInboundChannelExecutor'
2019-05-15 09:18:02 -Initializing ExecutorService  'clientOutboundChannelExecutor'
2019-05-15 09:18:05 -Mapped "{[/charts/countDD],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.countDDController.countDD()
2019-05-15 09:18:05 -Mapped "{[/charts/countDD/getCountDD],methods=[POST]}" onto public com.bootdo.charts.vo.CountDayVo com.bootdo.charts.controller.countDDController.getCountD(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo)
2019-05-15 09:18:05 -Mapped "{[/charts/countDD/exportDD],methods=[GET]}" onto public void com.bootdo.charts.controller.countDDController.exportDD(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.HeatLogVo,com.bootdo.moneyLog.vo.WaterLogVo,javax.servlet.http.HttpServletResponse)
2019-05-15 09:18:05 -Mapped "{[/charts/countMM/exportMM],methods=[GET]}" onto public void com.bootdo.charts.controller.countMMController.exportMM(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.HeatLogVo,com.bootdo.moneyLog.vo.WaterLogVo,javax.servlet.http.HttpServletResponse)
2019-05-15 09:18:05 -Mapped "{[/charts/countMM/getCountMM],methods=[POST]}" onto public java.util.Map com.bootdo.charts.controller.countMMController.getCountMM(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo)
2019-05-15 09:18:05 -Mapped "{[/charts/countMM],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.countMMController.countMM()
2019-05-15 09:18:05 -Mapped "{[/charts/countOwe],methods=[GET]}" onto java.lang.String com.bootdo.charts.controller.countOweController.countOwe()
2019-05-15 09:18:05 -Mapped "{[/charts/countOwe/exportOwe],methods=[GET]}" onto public void com.bootdo.charts.controller.countOweController.exportOwe(com.bootdo.elec.vo.ElecVo,com.bootdo.heat.vo.HeatVo,com.bootdo.water.vo.WaterVo,javax.servlet.http.HttpServletResponse)
2019-05-15 09:18:05 -Mapped "{[/charts/countOwe/getCountOwe],methods=[POST]}" onto public com.bootdo.charts.vo.CountOweVo com.bootdo.charts.controller.countOweController.getCountD(com.bootdo.elec.vo.ElecVo,com.bootdo.water.vo.WaterVo,com.bootdo.heat.vo.HeatVo)
2019-05-15 09:18:05 -Mapped "{[/charts/countRun/getCountRun],methods=[POST]}" onto public java.util.Map com.bootdo.charts.controller.countRunController.getCountRun(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo)
2019-05-15 09:18:05 -Mapped "{[/charts/countRun],methods=[GET]}" onto java.lang.String com.bootdo.charts.controller.countRunController.countRun()
2019-05-15 09:18:05 -Mapped "{[/charts/countRun/exportRun],methods=[GET]}" onto public void com.bootdo.charts.controller.countRunController.exportRun(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.HeatLogVo,com.bootdo.moneyLog.vo.WaterLogVo,javax.servlet.http.HttpServletResponse)
2019-05-15 09:18:05 -Mapped "{[/charts/countYY/exportYY],methods=[GET]}" onto public void com.bootdo.charts.controller.countYYController.exportYY(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.HeatLogVo,com.bootdo.moneyLog.vo.WaterLogVo,javax.servlet.http.HttpServletResponse)
2019-05-15 09:18:05 -Mapped "{[/charts/countYY/getCountYY],methods=[POST]}" onto public java.util.Map com.bootdo.charts.controller.countYYController.getCountYY(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo)
2019-05-15 09:18:05 -Mapped "{[/charts/countYY],methods=[GET]}" onto java.lang.String com.bootdo.charts.controller.countYYController.countYY()
2019-05-15 09:18:05 -Mapped "{[/charts/tableDD],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.tableDDController.countDD()
2019-05-15 09:18:05 -Mapped "{[/charts/tableDD/exportDD],methods=[GET]}" onto public void com.bootdo.charts.controller.tableDDController.exportDD(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.HeatLogVo,com.bootdo.moneyLog.vo.WaterLogVo,javax.servlet.http.HttpServletResponse)
2019-05-15 09:18:05 -Mapped "{[/charts/tableDD/getTableDD],methods=[POST]}" onto public java.util.Map com.bootdo.charts.controller.tableDDController.getTableDD(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo)
2019-05-15 09:18:05 -Mapped "{[/charts/tableElecMM/tableElecMM],methods=[POST]}" onto public java.util.Map com.bootdo.charts.controller.tableElecMMController.tableElecMM(com.bootdo.elec.vo.ElecVo,com.bootdo.moneyLog.vo.ElecLogVo)
2019-05-15 09:18:05 -Mapped "{[/charts/tableElecMM],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.tableElecMMController.tableElecMM()
2019-05-15 09:18:05 -Mapped "{[/charts/tableElecMM/exportElecMM],methods=[GET]}" onto public void com.bootdo.charts.controller.tableElecMMController.exportElecMM(com.bootdo.elec.vo.ElecVo,com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse)
2019-05-15 09:18:05 -Mapped "{[/charts/tableElecYY/exportElecYY],methods=[GET]}" onto public void com.bootdo.charts.controller.tableElecYYController.exportElecYY(com.bootdo.elec.vo.ElecVo,com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse)
2019-05-15 09:18:05 -Mapped "{[/charts/tableElecYY],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.tableElecYYController.tableElecYY()
2019-05-15 09:18:05 -Mapped "{[/charts/tableElecYY/getCountYY],methods=[POST]}" onto public java.util.Map com.bootdo.charts.controller.tableElecYYController.getCountYY(com.bootdo.elec.vo.ElecVo,com.bootdo.moneyLog.vo.ElecLogVo)
2019-05-15 09:18:05 -Mapped "{[/charts/tableHeatMM/tableHeatMM],methods=[POST]}" onto public java.util.Map com.bootdo.charts.controller.tableHeatMMController.tableHeatMM(com.bootdo.heat.vo.HeatVo,com.bootdo.moneyLog.vo.HeatLogVo)
2019-05-15 09:18:05 -Mapped "{[/charts/tableHeatMM],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.tableHeatMMController.tableHeatMM()
2019-05-15 09:18:05 -Mapped "{[/charts/tableHeatMM/exportHeatMM],methods=[GET]}" onto public void com.bootdo.charts.controller.tableHeatMMController.exportHeatMM(com.bootdo.heat.vo.HeatVo,com.bootdo.moneyLog.vo.HeatLogVo,javax.servlet.http.HttpServletResponse)
2019-05-15 09:18:05 -Mapped "{[/charts/tableHeatYY/exportHeatYY],methods=[GET]}" onto public void com.bootdo.charts.controller.tableHeatYYController.exportHeatYY(com.bootdo.heat.vo.HeatVo,com.bootdo.moneyLog.vo.HeatLogVo,javax.servlet.http.HttpServletResponse)
2019-05-15 09:18:05 -Mapped "{[/charts/tableHeatYY/getCountYY],methods=[POST]}" onto public java.util.Map com.bootdo.charts.controller.tableHeatYYController.getCountMM(com.bootdo.heat.vo.HeatVo,com.bootdo.moneyLog.vo.HeatLogVo)
2019-05-15 09:18:05 -Mapped "{[/charts/tableHeatYY],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.tableHeatYYController.tableHeatYY()
2019-05-15 09:18:05 -Mapped "{[/charts/tableWaterMM/exportWaterMM],methods=[GET]}" onto public void com.bootdo.charts.controller.tableWaterMMController.exportWaterMM(com.bootdo.water.vo.WaterVo,com.bootdo.moneyLog.vo.WaterLogVo,javax.servlet.http.HttpServletResponse)
2019-05-15 09:18:05 -Mapped "{[/charts/tableWaterMM],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.tableWaterMMController.tableWaterMM()
2019-05-15 09:18:05 -Mapped "{[/charts/tableWaterMM/tableWaterMM],methods=[POST]}" onto public java.util.Map com.bootdo.charts.controller.tableWaterMMController.tableWaterMM(com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.water.vo.WaterVo)
2019-05-15 09:18:05 -Mapped "{[/charts/tableWaterYY/tableWaterYY],methods=[POST]}" onto public java.util.Map com.bootdo.charts.controller.tableWaterYYController.tableWaterYY(com.bootdo.water.vo.WaterVo,com.bootdo.moneyLog.vo.WaterLogVo)
2019-05-15 09:18:05 -Mapped "{[/charts/tableWaterYY],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.tableWaterYYController.tableWaterYY()
2019-05-15 09:18:05 -Mapped "{[/charts/tableWaterYY/exportWaterYY],methods=[GET]}" onto public void com.bootdo.charts.controller.tableWaterYYController.exportWaterYY(com.bootdo.water.vo.WaterVo,com.bootdo.moneyLog.vo.WaterLogVo,javax.servlet.http.HttpServletResponse)
2019-05-15 09:18:05 -Mapped "{[/common/dict/add],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.add()
2019-05-15 09:18:05 -Mapped "{[/common/dict/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.remove(java.lang.Long)
2019-05-15 09:18:05 -Mapped "{[/common/dict/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.remove(java.lang.Long[])
2019-05-15 09:18:05 -Mapped "{[/common/dict/update]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.update(com.bootdo.common.domain.DictDO)
2019-05-15 09:18:05 -Mapped "{[/common/dict/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.common.controller.DictController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 09:18:05 -Mapped "{[/common/dict/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.save(com.bootdo.common.domain.DictDO)
2019-05-15 09:18:05 -Mapped "{[/common/dict/type],methods=[GET]}" onto public java.util.List<com.bootdo.common.domain.DictDO> com.bootdo.common.controller.DictController.listType()
2019-05-15 09:18:05 -Mapped "{[/common/dict/add/{type}/{description}],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.addD(org.springframework.ui.Model,java.lang.String,java.lang.String)
2019-05-15 09:18:05 -Mapped "{[/common/dict/list/{type}],methods=[GET]}" onto public java.util.List<com.bootdo.common.domain.DictDO> com.bootdo.common.controller.DictController.listByType(java.lang.String)
2019-05-15 09:18:05 -Mapped "{[/common/dict],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.dict()
2019-05-15 09:18:05 -Mapped "{[/common/dict/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.edit(java.lang.Long,org.springframework.ui.Model)
2019-05-15 09:18:05 -Mapped "{[/common/sysFile/add],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.FileController.add()
2019-05-15 09:18:05 -Mapped "{[/common/sysFile/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.remove(java.lang.Long,javax.servlet.http.HttpServletRequest)
2019-05-15 09:18:05 -Mapped "{[/common/sysFile/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.remove(java.lang.Long[])
2019-05-15 09:18:05 -Mapped "{[/common/sysFile/update]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.update(com.bootdo.common.domain.FileDO)
2019-05-15 09:18:05 -Mapped "{[/common/sysFile/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.common.controller.FileController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 09:18:05 -Mapped "{[/common/sysFile/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.save(com.bootdo.common.domain.FileDO)
2019-05-15 09:18:05 -Mapped "{[/common/sysFile/info/{id}]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.info(java.lang.Long)
2019-05-15 09:18:05 -Mapped "{[/common/sysFile/upload],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.FileController.upload(org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpServletRequest)
2019-05-15 09:18:05 -Mapped "{[/common/sysFile],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.FileController.sysFile(org.springframework.ui.Model)
2019-05-15 09:18:05 -Mapped "{[/common/sysFile/edit],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.FileController.edit(java.lang.Long,org.springframework.ui.Model)
2019-05-15 09:18:05 -Mapped "{[/common/generator/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.GeneratorController.update(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 09:18:05 -Mapped "{[/common/generator/list],methods=[GET]}" onto java.util.List<java.util.Map<java.lang.String, java.lang.Object>> com.bootdo.common.controller.GeneratorController.list()
2019-05-15 09:18:05 -Mapped "{[/common/generator/code/{tableName}]}" onto public void com.bootdo.common.controller.GeneratorController.code(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String) throws java.io.IOException
2019-05-15 09:18:05 -Mapped "{[/common/generator],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.GeneratorController.generator()
2019-05-15 09:18:05 -Mapped "{[/common/generator/batchCode]}" onto public void com.bootdo.common.controller.GeneratorController.batchCode(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String) throws java.io.IOException
2019-05-15 09:18:05 -Mapped "{[/common/generator/edit],methods=[GET]}" onto public java.lang.String com.bootdo.common.controller.GeneratorController.edit(org.springframework.ui.Model)
2019-05-15 09:18:05 -Mapped "{[/common/job/add],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.JobController.add()
2019-05-15 09:18:05 -Mapped "{[/common/job/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.remove(java.lang.Long)
2019-05-15 09:18:05 -Mapped "{[/common/job/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.remove(java.lang.Long[])
2019-05-15 09:18:05 -Mapped "{[/common/job/update],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.update(com.bootdo.common.domain.TaskDO)
2019-05-15 09:18:05 -Mapped "{[/common/job/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.common.controller.JobController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 09:18:05 -Mapped "{[/common/job/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.save(com.bootdo.common.domain.TaskDO)
2019-05-15 09:18:05 -Mapped "{[/common/job/info/{id}]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.info(java.lang.Long)
2019-05-15 09:18:05 -Mapped "{[/common/job/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.JobController.edit(java.lang.Long,org.springframework.ui.Model)
2019-05-15 09:18:05 -Mapped "{[/common/job],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.JobController.taskScheduleJob()
2019-05-15 09:18:05 -Mapped "{[/common/job/changeJobStatus],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.changeJobStatus(java.lang.Long,java.lang.String)
2019-05-15 09:18:05 -Mapped "{[/common/log/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.LogController.remove(java.lang.Long)
2019-05-15 09:18:05 -Mapped "{[/common/log],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.LogController.log()
2019-05-15 09:18:05 -Mapped "{[/common/log/list],methods=[GET]}" onto com.bootdo.common.domain.PageDO<com.bootdo.common.domain.LogDO> com.bootdo.common.controller.LogController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 09:18:05 -Mapped "{[/common/log/batchRemove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.LogController.batchRemove(java.lang.Long[])
2019-05-15 09:18:05 -Mapped "{[/common/long],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.LongController.Long()
2019-05-15 09:18:05 -Mapped "{[/common/time],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.TimeController.Time()
2019-05-15 09:18:05 -Mapped "{[/error]}" onto public com.bootdo.common.utils.R com.bootdo.common.exception.MainsiteErrorController.handleError(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-05-15 09:18:05 -Mapped "{[/error],produces=[text/html]}" onto public org.springframework.web.servlet.ModelAndView com.bootdo.common.exception.MainsiteErrorController.errorHtml(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-05-15 09:18:05 -Mapped "{[/elec/elec/add],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecController.add()
2019-05-15 09:18:05 -Mapped "{[/elec/elec/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.remove(java.lang.Long)
2019-05-15 09:18:05 -Mapped "{[/elec/elec/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.remove(java.lang.Long[])
2019-05-15 09:18:05 -Mapped "{[/elec/elec/update],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.update(com.bootdo.elec.domain.ElecDO)
2019-05-15 09:18:05 -Mapped "{[/elec/elec/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.elec.controller.ElecController.list(java.util.Map<java.lang.String, java.lang.Object>,com.bootdo.elec.domain.ElecDO)
2019-05-15 09:18:05 -Mapped "{[/elec/elec/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.save(com.bootdo.elec.domain.ElecDO)
2019-05-15 09:18:05 -Mapped "{[/elec/elec/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecController.edit(java.lang.Long,org.springframework.ui.Model)
2019-05-15 09:18:05 -Mapped "{[/elec/elec],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecController.Elec()
2019-05-15 09:18:05 -Mapped "{[/elec/elec/exprotElec],methods=[GET]}" onto public void com.bootdo.elec.controller.ElecController.exprotExcel(com.bootdo.elec.vo.ElecVo,javax.servlet.http.HttpServletResponse)
2019-05-15 09:18:05 -Mapped "{[/elec/elec/YhElecUpdate],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.YhElecUpdate(com.bootdo.elec.domain.ElecDO)
2019-05-15 09:18:05 -Mapped "{[/elec/elec/WxElecUpdate],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.WxElecUpdate(com.bootdo.elec.domain.ElecDO)
2019-05-15 09:18:05 -Mapped "{[/elec/elecInto/exprotElecIntoExcel],methods=[GET]}" onto public void com.bootdo.elec.controller.ElecIntoController.exprotExcel(com.bootdo.elec.vo.ElecVo,javax.servlet.http.HttpServletResponse)
2019-05-15 09:18:05 -Mapped "{[/elec/elecInto],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecIntoController.ElecInto()
2019-05-15 09:18:05 -Mapped "{[/elec/elecInto/importElecIntoExcel],methods=[POST]}" onto public java.lang.String com.bootdo.elec.controller.ElecIntoController.importElecIntoExcel(org.springframework.web.multipart.MultipartFile,com.bootdo.elec.vo.ElecVo,javax.servlet.http.HttpServletResponse) throws java.lang.Exception
2019-05-15 09:18:05 -Mapped "{[/elec/elecPrice/add],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecPriceController.add()
2019-05-15 09:18:05 -Mapped "{[/elec/elecPrice/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecPriceController.remove(java.lang.Long)
2019-05-15 09:18:05 -Mapped "{[/elec/elecPrice/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecPriceController.remove(java.lang.Long[])
2019-05-15 09:18:05 -Mapped "{[/elec/elecPrice/update]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecPriceController.update(com.bootdo.elec.domain.ElecPriceDO)
2019-05-15 09:18:05 -Mapped "{[/elec/elecPrice/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.elec.controller.ElecPriceController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 09:18:05 -Mapped "{[/elec/elecPrice/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecPriceController.save(com.bootdo.elec.domain.ElecPriceDO,com.bootdo.elec.domain.ElecDO)
2019-05-15 09:18:05 -Mapped "{[/elec/elecPrice/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecPriceController.edit(java.lang.Long,org.springframework.ui.Model)
2019-05-15 09:18:05 -Mapped "{[/elec/elecPrice],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecPriceController.ElecPrice()
2019-05-15 09:18:05 -Mapped "{[/elec/elecUpLoad],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecUpLoadController.Elec()
2019-05-15 09:18:05 -Mapped "{[/elec/elecUpLoad/importElecExcel],methods=[POST]}" onto public java.util.Map<java.lang.String, java.lang.Object> com.bootdo.elec.controller.ElecUpLoadController.importElecExcel(org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpServletRequest) throws java.lang.Exception
2019-05-15 09:18:05 -Mapped "{[/elec/elecUpLoad/exprotElecExcel],methods=[GET]}" onto public void com.bootdo.elec.controller.ElecUpLoadController.exprotElecExcel(com.bootdo.elec.vo.ElecVo,javax.servlet.http.HttpServletResponse)
2019-05-15 09:18:05 -Mapped "{[/heat/heat/add],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatController.add()
2019-05-15 09:18:05 -Mapped "{[/heat/heat/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatController.remove(java.lang.Integer)
2019-05-15 09:18:05 -Mapped "{[/heat/heat/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatController.remove(java.lang.Integer[])
2019-05-15 09:18:05 -Mapped "{[/heat/heat/update]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatController.update(com.bootdo.heat.domain.HeatDO)
2019-05-15 09:18:05 -Mapped "{[/heat/heat/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.heat.controller.HeatController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 09:18:05 -Mapped "{[/heat/heat/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatController.save(com.bootdo.heat.domain.HeatDO)
2019-05-15 09:18:05 -Mapped "{[/heat/heat/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatController.edit(java.lang.Integer,org.springframework.ui.Model)
2019-05-15 09:18:05 -Mapped "{[/heat/heat/exprotHeat],methods=[GET]}" onto public void com.bootdo.heat.controller.HeatController.exprotExcel(com.bootdo.heat.vo.HeatVo,javax.servlet.http.HttpServletResponse)
2019-05-15 09:18:05 -Mapped "{[/heat/heat],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatController.Heat()
2019-05-15 09:18:05 -Mapped "{[/heat/heatInto/exprotHeatIntoExcel],methods=[GET]}" onto public void com.bootdo.heat.controller.HeatIntoController.exprotExcel(com.bootdo.heat.vo.HeatVo,javax.servlet.http.HttpServletResponse)
2019-05-15 09:18:05 -Mapped "{[/heat/heatInto],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatIntoController.HeatInto()
2019-05-15 09:18:05 -Mapped "{[/heat/heatInto/importHeatIntoExcel],methods=[POST]}" onto public java.lang.String com.bootdo.heat.controller.HeatIntoController.importHeatIntoExcel(org.springframework.web.multipart.MultipartFile,com.bootdo.heat.vo.HeatVo,javax.servlet.http.HttpServletResponse) throws java.lang.Exception
2019-05-15 09:18:05 -Mapped "{[/heat/heatPrice/add],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatPriceController.add()
2019-05-15 09:18:05 -Mapped "{[/heat/heatPrice/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatPriceController.remove(java.lang.Long)
2019-05-15 09:18:05 -Mapped "{[/heat/heatPrice/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatPriceController.remove(java.lang.Long[])
2019-05-15 09:18:05 -Mapped "{[/heat/heatPrice/update]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatPriceController.update(com.bootdo.heat.domain.HeatPriceDO)
2019-05-15 09:18:05 -Mapped "{[/heat/heatPrice/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.heat.controller.HeatPriceController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 09:18:05 -Mapped "{[/heat/heatPrice/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatPriceController.save(com.bootdo.heat.domain.HeatPriceDO)
2019-05-15 09:18:05 -Mapped "{[/heat/heatPrice/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatPriceController.edit(java.lang.Long,org.springframework.ui.Model)
2019-05-15 09:18:05 -Mapped "{[/heat/heatPrice],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatPriceController.HeatPrice()
2019-05-15 09:18:05 -Mapped "{[/heat/heatUpLoad/importHeatExcel]}" onto public java.lang.String com.bootdo.heat.controller.HeatUpLoadController.importHeatExcel(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)
2019-05-15 09:18:05 -Mapped "{[/heat/heatUpLoad],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatUpLoadController.HeatUpLoad()
2019-05-15 09:18:05 -Mapped "{[/heat/heatUpLoad/createHeatExcel],methods=[POST]}" onto public java.lang.String com.bootdo.heat.controller.HeatUpLoadController.createHeatExcel(com.bootdo.heat.domain.HeatDO) throws java.lang.Exception
2019-05-15 09:18:05 -Mapped "{[/heat/heatUpLoad/exprotHeatExcel],methods=[GET]}" onto public void com.bootdo.heat.controller.HeatUpLoadController.exprotHeatExcel(com.bootdo.heat.vo.HeatVo,javax.servlet.http.HttpServletResponse)
2019-05-15 09:18:05 -Mapped "{[/moneyList/moneyList/queryAllUserName],methods=[POST]}" onto public java.util.List<com.bootdo.moneyList.damain.MoneyListDO> com.bootdo.moneyList.controller.MoneyListController.getAllUserName(com.bootdo.moneyList.damain.MoneyListDO)
2019-05-15 09:18:05 -Mapped "{[/moneyList/moneyList/queryAllUser],methods=[POST]}" onto public java.util.List<com.bootdo.moneyList.damain.MoneyListDO> com.bootdo.moneyList.controller.MoneyListController.queryAllUser(com.bootdo.moneyList.damain.MoneyListDO)
2019-05-15 09:18:05 -Mapped "{[/moneyList/moneyList],methods=[GET]}" onto java.lang.String com.bootdo.moneyList.controller.MoneyListController.MoneyList()
2019-05-15 09:18:05 -Mapped "{[/moneyList/moneyList/updateMoney],methods=[POST]}" onto public java.lang.String com.bootdo.moneyList.controller.MoneyListController.updateMoney(com.bootdo.moneyList.damain.MoneyListDO)
2019-05-15 09:18:05 -Mapped "{[/moneyLog/elecLog/add],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.ElecLogController.add()
2019-05-15 09:18:05 -Mapped "{[/moneyLog/elecLog/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.ElecLogController.remove(java.lang.Long)
2019-05-15 09:18:05 -Mapped "{[/moneyLog/elecLog/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.ElecLogController.remove(java.lang.Long[])
2019-05-15 09:18:05 -Mapped "{[/moneyLog/elecLog/update]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.ElecLogController.update(java.util.Map<java.lang.String, java.lang.Object>,com.bootdo.moneyLog.domain.ElecLogDO)
2019-05-15 09:18:05 -Mapped "{[/moneyLog/elecLog/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.moneyLog.controller.ElecLogController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 09:18:05 -Mapped "{[/moneyLog/elecLog/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.ElecLogController.save(com.bootdo.moneyLog.domain.ElecLogDO)
2019-05-15 09:18:05 -Mapped "{[/moneyLog/elecLog/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.ElecLogController.edit(java.lang.Long,org.springframework.ui.Model)
2019-05-15 09:18:05 -Mapped "{[/moneyLog/elecLog],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.ElecLogController.moneyLog()
2019-05-15 09:18:05 -Mapped "{[/moneyLog/elecLog/exprotElecLog],methods=[GET]}" onto public void com.bootdo.moneyLog.controller.ElecLogController.exprotElecLog(com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-05-15 09:18:05 -Mapped "{[/moneyLog/heatLog/add],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.HeatLogController.add()
2019-05-15 09:18:05 -Mapped "{[/moneyLog/heatLog/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.HeatLogController.remove(java.lang.Long)
2019-05-15 09:18:05 -Mapped "{[/moneyLog/heatLog/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.HeatLogController.remove(java.lang.Long[])
2019-05-15 09:18:05 -Mapped "{[/moneyLog/heatLog/update]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.HeatLogController.update(java.util.Map<java.lang.String, java.lang.Object>,com.bootdo.moneyLog.domain.HeatLogDO)
2019-05-15 09:18:05 -Mapped "{[/moneyLog/heatLog/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.moneyLog.controller.HeatLogController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 09:18:05 -Mapped "{[/moneyLog/heatLog/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.HeatLogController.save(com.bootdo.moneyLog.domain.HeatLogDO)
2019-05-15 09:18:05 -Mapped "{[/moneyLog/heatLog/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.HeatLogController.edit(java.lang.Long,org.springframework.ui.Model)
2019-05-15 09:18:05 -Mapped "{[/moneyLog/heatLog/exprotHeatLog],methods=[GET]}" onto public void com.bootdo.moneyLog.controller.HeatLogController.exprotHeatLog(com.bootdo.moneyLog.vo.HeatLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-05-15 09:18:05 -Mapped "{[/moneyLog/heatLog],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.HeatLogController.HeatLog()
2019-05-15 09:18:05 -Mapped "{[/moneyLog/waterLog/add],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.WaterLogController.add()
2019-05-15 09:18:05 -Mapped "{[/moneyLog/waterLog/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.WaterLogController.remove(java.lang.Long)
2019-05-15 09:18:05 -Mapped "{[/moneyLog/waterLog/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.WaterLogController.remove(java.lang.Long[])
2019-05-15 09:18:05 -Mapped "{[/moneyLog/waterLog/update]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.WaterLogController.update(java.util.Map<java.lang.String, java.lang.Object>,com.bootdo.moneyLog.domain.WaterLogDO)
2019-05-15 09:18:05 -Mapped "{[/moneyLog/waterLog/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.moneyLog.controller.WaterLogController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 09:18:05 -Mapped "{[/moneyLog/waterLog/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.WaterLogController.save(com.bootdo.moneyLog.domain.WaterLogDO)
2019-05-15 09:18:05 -Mapped "{[/moneyLog/waterLog/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.WaterLogController.edit(java.lang.Long,org.springframework.ui.Model)
2019-05-15 09:18:05 -Mapped "{[/moneyLog/waterLog],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.WaterLogController.WaterLog()
2019-05-15 09:18:05 -Mapped "{[/moneyLog/waterLog/exprotWaterLog],methods=[GET]}" onto public void com.bootdo.moneyLog.controller.WaterLogController.exprotWaterLog(com.bootdo.moneyLog.vo.WaterLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-05-15 09:18:05 -Mapped "{[/oa/notify/add],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.add()
2019-05-15 09:18:05 -Mapped "{[/oa/notify/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.remove(java.lang.Long)
2019-05-15 09:18:05 -Mapped "{[/oa/notify/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.remove(java.lang.Long[])
2019-05-15 09:18:05 -Mapped "{[/oa/notify/update]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.update(com.bootdo.oa.domain.NotifyDO)
2019-05-15 09:18:05 -Mapped "{[/oa/notify/read/{id}],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.read(java.lang.Long,org.springframework.ui.Model)
2019-05-15 09:18:05 -Mapped "{[/oa/notify/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.oa.controller.NotifyController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 09:18:05 -Mapped "{[/oa/notify/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.save(com.bootdo.oa.domain.NotifyDO)
2019-05-15 09:18:05 -Mapped "{[/oa/notify/message],methods=[GET]}" onto com.bootdo.common.utils.PageUtils com.bootdo.oa.controller.NotifyController.message()
2019-05-15 09:18:05 -Mapped "{[/oa/notify/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.edit(java.lang.Long,org.springframework.ui.Model)
2019-05-15 09:18:05 -Mapped "{[/oa/notify],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.oaNotify()
2019-05-15 09:18:05 -Mapped "{[/oa/notify/selfList],methods=[GET]}" onto com.bootdo.common.utils.PageUtils com.bootdo.oa.controller.NotifyController.selfList(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 09:18:05 -Mapped "{[/oa/notify/selfNotify],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.selefNotify()
2019-05-15 09:18:06 -Mapped "{[/print/print/add],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.add()
2019-05-15 09:18:06 -Mapped "{[/print/print/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.print.controller.PrintController.remove(java.lang.Long)
2019-05-15 09:18:06 -Mapped "{[/print/print/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.print.controller.PrintController.remove(java.lang.Long[])
2019-05-15 09:18:06 -Mapped "{[/print/print/update]}" onto public com.bootdo.common.utils.R com.bootdo.print.controller.PrintController.update(com.bootdo.print.domain.PrintDO)
2019-05-15 09:18:06 -Mapped "{[/print/print/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.print.controller.PrintController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 09:18:06 -Mapped "{[/print/print/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.print.controller.PrintController.save(java.lang.String,com.bootdo.print.domain.PrintDO)
2019-05-15 09:18:06 -Mapped "{[/print/print/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.edit(java.lang.Long,org.springframework.ui.Model)
2019-05-15 09:18:06 -Mapped "{[/print/print/printEdit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.printEdit(java.lang.Long,org.springframework.ui.Model)
2019-05-15 09:18:06 -Mapped "{[/print/print],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.Print()
2019-05-15 09:18:06 -Mapped "{[/print/print/printMoney],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.printMoney()
2019-05-15 09:18:06 -Mapped "{[/print/print/exprotPrint],methods=[GET]}" onto public void com.bootdo.print.controller.PrintController.exprotPrint(com.bootdo.print.vo.PrintVo,javax.servlet.http.HttpServletResponse)
2019-05-15 09:18:06 -Mapped "{[/system/sysDept/add/{pId}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.add(java.lang.Long,org.springframework.ui.Model)
2019-05-15 09:18:06 -Mapped "{[/system/sysDept/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.remove(java.lang.Long)
2019-05-15 09:18:06 -Mapped "{[/system/sysDept/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.remove(java.lang.Long[])
2019-05-15 09:18:06 -Mapped "{[/system/sysDept/update]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.update(com.bootdo.system.domain.DeptDO)
2019-05-15 09:18:06 -Mapped "{[/system/sysDept/list],methods=[GET]}" onto public java.util.List<com.bootdo.system.domain.DeptDO> com.bootdo.system.controller.DeptController.list()
2019-05-15 09:18:06 -Mapped "{[/system/sysDept/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.save(com.bootdo.system.domain.DeptDO)
2019-05-15 09:18:06 -Mapped "{[/system/sysDept/tree],methods=[GET]}" onto public com.bootdo.common.domain.Tree<com.bootdo.system.domain.DeptDO> com.bootdo.system.controller.DeptController.tree()
2019-05-15 09:18:06 -Mapped "{[/system/sysDept/edit/{deptId}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.edit(java.lang.Long,org.springframework.ui.Model)
2019-05-15 09:18:06 -Mapped "{[/system/sysDept/treeView],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.treeView()
2019-05-15 09:18:06 -Mapped "{[/system/sysDept],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.dept()
2019-05-15 09:18:06 -Mapped "{[/index],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.index(org.springframework.ui.Model)
2019-05-15 09:18:06 -Mapped "{[/main],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.main()
2019-05-15 09:18:06 -Mapped "{[/login],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.login(org.springframework.ui.Model)
2019-05-15 09:18:06 -Mapped "{[/getVerify],methods=[GET]}" onto public void com.bootdo.system.controller.LoginController.getVerify(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-05-15 09:18:06 -Mapped "{[/ || ],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.welcome(org.springframework.ui.Model)
2019-05-15 09:18:06 -Mapped "{[/login],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.LoginController.ajaxLogin(java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest)
2019-05-15 09:18:06 -Mapped "{[/logout],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.logout()
2019-05-15 09:18:06 -Mapped "{[/sys/menu/add/{pId}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.MenuController.add(org.springframework.ui.Model,java.lang.Long)
2019-05-15 09:18:06 -Mapped "{[/sys/menu/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.MenuController.remove(java.lang.Long)
2019-05-15 09:18:06 -Mapped "{[/sys/menu/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.MenuController.update(com.bootdo.system.domain.MenuDO)
2019-05-15 09:18:06 -Mapped "{[/sys/menu/list]}" onto java.util.List<com.bootdo.system.domain.MenuDO> com.bootdo.system.controller.MenuController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 09:18:06 -Mapped "{[/sys/menu/save],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.MenuController.save(com.bootdo.system.domain.MenuDO)
2019-05-15 09:18:06 -Mapped "{[/sys/menu/tree/{roleId}],methods=[GET]}" onto com.bootdo.common.domain.Tree<com.bootdo.system.domain.MenuDO> com.bootdo.system.controller.MenuController.tree(java.lang.Long)
2019-05-15 09:18:06 -Mapped "{[/sys/menu/tree],methods=[GET]}" onto com.bootdo.common.domain.Tree<com.bootdo.system.domain.MenuDO> com.bootdo.system.controller.MenuController.tree()
2019-05-15 09:18:06 -Mapped "{[/sys/menu/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.MenuController.edit(org.springframework.ui.Model,java.lang.Long)
2019-05-15 09:18:06 -Mapped "{[/sys/menu],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.MenuController.menu(org.springframework.ui.Model)
2019-05-15 09:18:06 -Mapped "{[/sys/role/add],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.RoleController.add()
2019-05-15 09:18:06 -Mapped "{[/sys/role/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.update(com.bootdo.system.domain.RoleDO)
2019-05-15 09:18:06 -Mapped "{[/sys/role/list],methods=[GET]}" onto java.util.List<com.bootdo.system.domain.RoleDO> com.bootdo.system.controller.RoleController.list()
2019-05-15 09:18:06 -Mapped "{[/sys/role/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.save(java.lang.Long)
2019-05-15 09:18:06 -Mapped "{[/sys/role/save],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.save(com.bootdo.system.domain.RoleDO)
2019-05-15 09:18:06 -Mapped "{[/sys/role/batchRemove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.batchRemove(java.lang.Long[])
2019-05-15 09:18:06 -Mapped "{[/sys/role],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.RoleController.role()
2019-05-15 09:18:06 -Mapped "{[/sys/role/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.RoleController.edit(java.lang.Long,org.springframework.ui.Model)
2019-05-15 09:18:06 -Mapped "{[/sys/online/list]}" onto public java.util.List<com.bootdo.system.domain.UserOnline> com.bootdo.system.controller.SessionController.list()
2019-05-15 09:18:06 -Mapped "{[/sys/online/forceLogout/{sessionId}]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.SessionController.forceLogout(java.lang.String,org.springframework.web.servlet.mvc.support.RedirectAttributes)
2019-05-15 09:18:06 -Mapped "{[/sys/online/sessionList]}" onto public java.util.Collection<org.apache.shiro.session.Session> com.bootdo.system.controller.SessionController.sessionList()
2019-05-15 09:18:06 -Mapped "{[/sys/online],methods=[GET]}" onto public java.lang.String com.bootdo.system.controller.SessionController.online()
2019-05-15 09:18:06 -Mapped "{[/sys/user/exit],methods=[POST]}" onto boolean com.bootdo.system.controller.UserController.exit(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 09:18:06 -Mapped "{[/sys/user/add],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.add(org.springframework.ui.Model)
2019-05-15 09:18:06 -Mapped "{[/sys/user/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.remove(java.lang.Long)
2019-05-15 09:18:06 -Mapped "{[/sys/user/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.update(com.bootdo.system.domain.UserDO)
2019-05-15 09:18:06 -Mapped "{[/sys/user/list],methods=[GET]}" onto com.bootdo.common.utils.PageUtils com.bootdo.system.controller.UserController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 09:18:06 -Mapped "{[/sys/user/save],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.save(com.bootdo.system.domain.UserDO)
2019-05-15 09:18:06 -Mapped "{[/sys/user/batchRemove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.batchRemove(java.lang.Long[])
2019-05-15 09:18:06 -Mapped "{[/sys/user/tree],methods=[GET]}" onto public com.bootdo.common.domain.Tree<com.bootdo.system.domain.DeptDO> com.bootdo.system.controller.UserController.tree()
2019-05-15 09:18:06 -Mapped "{[/sys/user],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.user(org.springframework.ui.Model)
2019-05-15 09:18:06 -Mapped "{[/sys/user/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.edit(org.springframework.ui.Model,java.lang.Long)
2019-05-15 09:18:06 -Mapped "{[/sys/user/treeView],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.treeView()
2019-05-15 09:18:06 -Mapped "{[/sys/user/updatePeronal],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.updatePeronal(com.bootdo.system.domain.UserDO)
2019-05-15 09:18:06 -Mapped "{[/sys/user/personal],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.personal(org.springframework.ui.Model)
2019-05-15 09:18:06 -Mapped "{[/sys/user/resetPwd/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.resetPwd(java.lang.Long,org.springframework.ui.Model)
2019-05-15 09:18:06 -Mapped "{[/sys/user/resetPwd],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.resetPwd(com.bootdo.system.vo.UserVO)
2019-05-15 09:18:06 -Mapped "{[/sys/user/adminResetPwd],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.adminResetPwd(com.bootdo.system.vo.UserVO)
2019-05-15 09:18:06 -Mapped "{[/sys/user/uploadImg],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.uploadImg(org.springframework.web.multipart.MultipartFile,java.lang.String,javax.servlet.http.HttpServletRequest)
2019-05-15 09:18:06 -Mapped "{[/file/downImport/{importType}],methods=[GET]}" onto public void com.bootdo.temple.controller.TempletController.downImport(javax.servlet.http.HttpServletResponse,java.lang.String)
2019-05-15 09:18:06 -Mapped "{[/water/water/add],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterController.add()
2019-05-15 09:18:06 -Mapped "{[/water/water/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterController.remove(java.lang.Long)
2019-05-15 09:18:06 -Mapped "{[/water/water/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterController.remove(java.lang.Long[])
2019-05-15 09:18:06 -Mapped "{[/water/water/update]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterController.update(com.bootdo.water.domain.WaterDO)
2019-05-15 09:18:06 -Mapped "{[/water/water/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.water.controller.WaterController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 09:18:06 -Mapped "{[/water/water/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterController.save(com.bootdo.water.domain.WaterDO)
2019-05-15 09:18:06 -Mapped "{[/water/water/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterController.edit(java.lang.Long,org.springframework.ui.Model)
2019-05-15 09:18:06 -Mapped "{[/water/water/exprotWater],methods=[GET]}" onto public void com.bootdo.water.controller.WaterController.exprotExcel(com.bootdo.water.vo.WaterVo,javax.servlet.http.HttpServletResponse)
2019-05-15 09:18:06 -Mapped "{[/water/water],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterController.Water()
2019-05-15 09:18:06 -Mapped "{[/water/waterInto/exprotWaterIntoExcel],methods=[GET]}" onto public void com.bootdo.water.controller.WaterIntoController.exprotExcel(com.bootdo.water.vo.WaterVo,javax.servlet.http.HttpServletResponse)
2019-05-15 09:18:06 -Mapped "{[/water/waterInto/importWaterIntoExcel],methods=[POST]}" onto public java.lang.String com.bootdo.water.controller.WaterIntoController.importWaterIntoExcel(org.springframework.web.multipart.MultipartFile,com.bootdo.water.vo.WaterVo,javax.servlet.http.HttpServletResponse) throws java.lang.Exception
2019-05-15 09:18:06 -Mapped "{[/water/waterInto],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterIntoController.WaterInto()
2019-05-15 09:18:06 -Mapped "{[/water/waterPrice/add],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterPriceController.add()
2019-05-15 09:18:06 -Mapped "{[/water/waterPrice/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterPriceController.remove(java.lang.Long)
2019-05-15 09:18:06 -Mapped "{[/water/waterPrice/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterPriceController.remove(java.lang.Long[])
2019-05-15 09:18:06 -Mapped "{[/water/waterPrice/update]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterPriceController.update(com.bootdo.water.domain.WaterPriceDO)
2019-05-15 09:18:06 -Mapped "{[/water/waterPrice/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.water.controller.WaterPriceController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 09:18:06 -Mapped "{[/water/waterPrice/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterPriceController.save(com.bootdo.water.domain.WaterPriceDO)
2019-05-15 09:18:06 -Mapped "{[/water/waterPrice/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterPriceController.edit(java.lang.Long,org.springframework.ui.Model)
2019-05-15 09:18:06 -Mapped "{[/water/waterPrice],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterPriceController.WaterPrice()
2019-05-15 09:18:06 -Mapped "{[/water/waterUpLoad/importWaterExcel]}" onto public java.lang.String com.bootdo.water.controller.WaterUpLoadController.importWaterExcel(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)
2019-05-15 09:18:06 -Mapped "{[/water/waterUpLoad],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterUpLoadController.WaterUpLoad()
2019-05-15 09:18:06 -Mapped "{[/water/waterUpLoad/exprotWaterExcel],methods=[GET]}" onto public void com.bootdo.water.controller.WaterUpLoadController.exprotWaterExcel(com.bootdo.water.vo.WaterVo,javax.servlet.http.HttpServletResponse)
2019-05-15 09:18:06 -Mapped "{[/water/waterUpLoad/createWaterExcel],methods=[POST]}" onto public java.lang.String com.bootdo.water.controller.WaterUpLoadController.createWaterExcel(com.bootdo.water.domain.WaterDO) throws java.lang.Exception
2019-05-15 09:18:06 -Mapped "{[/v2/api-docs],methods=[GET],produces=[application/json || application/hal+json]}" onto public org.springframework.http.ResponseEntity<springfox.documentation.spring.web.json.Json> springfox.documentation.swagger2.web.Swagger2Controller.getDocumentation(java.lang.String,javax.servlet.http.HttpServletRequest)
2019-05-15 09:18:06 -Mapped "{[/swagger-resources/configuration/security]}" onto org.springframework.http.ResponseEntity<springfox.documentation.swagger.web.SecurityConfiguration> springfox.documentation.swagger.web.ApiResourceController.securityConfiguration()
2019-05-15 09:18:06 -Mapped "{[/swagger-resources]}" onto org.springframework.http.ResponseEntity<java.util.List<springfox.documentation.swagger.web.SwaggerResource>> springfox.documentation.swagger.web.ApiResourceController.swaggerResources()
2019-05-15 09:18:06 -Mapped "{[/swagger-resources/configuration/ui]}" onto org.springframework.http.ResponseEntity<springfox.documentation.swagger.web.UiConfiguration> springfox.documentation.swagger.web.ApiResourceController.uiConfiguration()
2019-05-15 09:18:06 -Initializing ExecutorService  'messageBrokerTaskScheduler'
2019-05-15 09:18:06 -Mapped URL path [/endpointChat/**] onto handler of type [class org.springframework.web.socket.sockjs.support.SockJsHttpRequestHandler]
2019-05-15 09:18:06 -Initializing ExecutorService  'brokerChannelExecutor'
2019-05-15 09:18:07 -Mapped URL path [/**/favicon.ico] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-05-15 09:18:07 -Looking for @ControllerAdvice: org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@4d5650ae: startup date [Wed May 15 09:17:44 CST 2019]; root of context hierarchy
2019-05-15 09:18:07 -Mapped URL path [/webjars/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-05-15 09:18:07 -Mapped URL path [/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-05-15 09:18:07 -Mapped URL path [/files/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-05-15 09:18:07 -Detected @ExceptionHandler methods in BDExceptionHandler
2019-05-15 09:18:08 -[THYMELEAF][main] Template Mode 'LEGACYHTML5' is deprecated. Using Template Mode 'HTML' instead.
2019-05-15 09:18:10 -Registering beans for JMX exposure on startup
2019-05-15 09:18:10 -Bean with name 'dataSource' has been autodetected for JMX exposure
2019-05-15 09:18:10 -Located MBean 'dataSource': registering with JMX server as MBean [com.alibaba.druid.pool:name=dataSource,type=DruidDataSource]
2019-05-15 09:18:10 -Starting beans in phase 2147483647
2019-05-15 09:18:10 -Context refreshed
2019-05-15 09:18:10 -Found 1 custom documentation plugin(s)
2019-05-15 09:18:10 -Scanning for api listing references
2019-05-15 09:18:10 -Generating unique operation named: getCountDUsingPOST_1
2019-05-15 09:18:10 -Generating unique operation named: removeUsingPOST_1
2019-05-15 09:18:10 -Generating unique operation named: addUsingGET_1
2019-05-15 09:18:10 -Generating unique operation named: editUsingGET_1
2019-05-15 09:18:10 -Generating unique operation named: listUsingGET_1
2019-05-15 09:18:10 -Generating unique operation named: removeUsingPOST_2
2019-05-15 09:18:10 -Generating unique operation named: removeUsingPOST_3
2019-05-15 09:18:10 -Generating unique operation named: saveUsingPOST_1
2019-05-15 09:18:10 -Generating unique operation named: updateUsingGET_1
2019-05-15 09:18:10 -Generating unique operation named: updateUsingHEAD_1
2019-05-15 09:18:10 -Generating unique operation named: updateUsingPOST_1
2019-05-15 09:18:10 -Generating unique operation named: updateUsingPUT_1
2019-05-15 09:18:10 -Generating unique operation named: updateUsingPATCH_1
2019-05-15 09:18:10 -Generating unique operation named: updateUsingDELETE_1
2019-05-15 09:18:10 -Generating unique operation named: updateUsingOPTIONS_1
2019-05-15 09:18:10 -Generating unique operation named: updateUsingTRACE_1
2019-05-15 09:18:10 -Generating unique operation named: addUsingGET_2
2019-05-15 09:18:10 -Generating unique operation named: editUsingGET_2
2019-05-15 09:18:11 -Generating unique operation named: listUsingGET_2
2019-05-15 09:18:11 -Generating unique operation named: removeUsingPOST_4
2019-05-15 09:18:11 -Generating unique operation named: removeUsingPOST_5
2019-05-15 09:18:11 -Generating unique operation named: saveUsingPOST_2
2019-05-15 09:18:11 -Generating unique operation named: updateUsingPOST_2
2019-05-15 09:18:11 -Generating unique operation named: exprotExcelUsingGET_1
2019-05-15 09:18:11 -Generating unique operation named: addUsingGET_3
2019-05-15 09:18:11 -Generating unique operation named: editUsingGET_3
2019-05-15 09:18:11 -Generating unique operation named: listUsingGET_3
2019-05-15 09:18:11 -Generating unique operation named: removeUsingPOST_6
2019-05-15 09:18:11 -Generating unique operation named: removeUsingPOST_7
2019-05-15 09:18:11 -Generating unique operation named: saveUsingPOST_3
2019-05-15 09:18:11 -Generating unique operation named: updateUsingGET_2
2019-05-15 09:18:11 -Generating unique operation named: updateUsingHEAD_2
2019-05-15 09:18:11 -Generating unique operation named: updateUsingPOST_3
2019-05-15 09:18:11 -Generating unique operation named: updateUsingPUT_2
2019-05-15 09:18:11 -Generating unique operation named: updateUsingPATCH_2
2019-05-15 09:18:11 -Generating unique operation named: updateUsingDELETE_2
2019-05-15 09:18:11 -Generating unique operation named: updateUsingOPTIONS_2
2019-05-15 09:18:11 -Generating unique operation named: updateUsingTRACE_2
2019-05-15 09:18:11 -Generating unique operation named: addUsingGET_4
2019-05-15 09:18:11 -Generating unique operation named: editUsingGET_4
2019-05-15 09:18:11 -Generating unique operation named: listUsingGET_4
2019-05-15 09:18:11 -Generating unique operation named: removeUsingPOST_8
2019-05-15 09:18:11 -Generating unique operation named: removeUsingPOST_9
2019-05-15 09:18:11 -Generating unique operation named: saveUsingPOST_4
2019-05-15 09:18:11 -Generating unique operation named: updateUsingGET_3
2019-05-15 09:18:11 -Generating unique operation named: updateUsingHEAD_3
2019-05-15 09:18:11 -Generating unique operation named: updateUsingPOST_4
2019-05-15 09:18:11 -Generating unique operation named: updateUsingPUT_3
2019-05-15 09:18:11 -Generating unique operation named: updateUsingPATCH_3
2019-05-15 09:18:11 -Generating unique operation named: updateUsingDELETE_3
2019-05-15 09:18:11 -Generating unique operation named: updateUsingOPTIONS_3
2019-05-15 09:18:11 -Generating unique operation named: updateUsingTRACE_3
2019-05-15 09:18:11 -Generating unique operation named: ElecUsingGET_1
2019-05-15 09:18:11 -Generating unique operation named: addUsingGET_5
2019-05-15 09:18:11 -Generating unique operation named: editUsingGET_5
2019-05-15 09:18:11 -Generating unique operation named: listUsingGET_5
2019-05-15 09:18:11 -Generating unique operation named: removeUsingPOST_10
2019-05-15 09:18:11 -Generating unique operation named: removeUsingPOST_11
2019-05-15 09:18:11 -Generating unique operation named: saveUsingPOST_5
2019-05-15 09:18:11 -Generating unique operation named: updateUsingGET_4
2019-05-15 09:18:11 -Generating unique operation named: updateUsingHEAD_4
2019-05-15 09:18:11 -Generating unique operation named: updateUsingPOST_5
2019-05-15 09:18:11 -Generating unique operation named: updateUsingPUT_4
2019-05-15 09:18:11 -Generating unique operation named: updateUsingPATCH_4
2019-05-15 09:18:11 -Generating unique operation named: updateUsingDELETE_4
2019-05-15 09:18:11 -Generating unique operation named: updateUsingOPTIONS_4
2019-05-15 09:18:11 -Generating unique operation named: updateUsingTRACE_4
2019-05-15 09:18:11 -Generating unique operation named: editUsingGET_6
2019-05-15 09:18:11 -Generating unique operation named: listUsingGET_6
2019-05-15 09:18:11 -Generating unique operation named: updateUsingPOST_6
2019-05-15 09:18:11 -Generating unique operation named: addUsingGET_6
2019-05-15 09:18:11 -Generating unique operation named: editUsingGET_7
2019-05-15 09:18:11 -Generating unique operation named: exprotExcelUsingGET_2
2019-05-15 09:18:11 -Generating unique operation named: listUsingGET_7
2019-05-15 09:18:11 -Generating unique operation named: removeUsingPOST_12
2019-05-15 09:18:11 -Generating unique operation named: removeUsingPOST_13
2019-05-15 09:18:11 -Generating unique operation named: saveUsingPOST_6
2019-05-15 09:18:11 -Generating unique operation named: updateUsingGET_5
2019-05-15 09:18:11 -Generating unique operation named: updateUsingHEAD_5
2019-05-15 09:18:11 -Generating unique operation named: updateUsingPOST_7
2019-05-15 09:18:11 -Generating unique operation named: updateUsingPUT_5
2019-05-15 09:18:11 -Generating unique operation named: updateUsingPATCH_5
2019-05-15 09:18:11 -Generating unique operation named: updateUsingDELETE_5
2019-05-15 09:18:11 -Generating unique operation named: updateUsingOPTIONS_5
2019-05-15 09:18:11 -Generating unique operation named: updateUsingTRACE_5
2019-05-15 09:18:11 -Generating unique operation named: exprotExcelUsingGET_3
2019-05-15 09:18:11 -Generating unique operation named: addUsingGET_7
2019-05-15 09:18:11 -Generating unique operation named: editUsingGET_8
2019-05-15 09:18:11 -Generating unique operation named: listUsingGET_8
2019-05-15 09:18:11 -Generating unique operation named: removeUsingPOST_14
2019-05-15 09:18:11 -Generating unique operation named: removeUsingPOST_15
2019-05-15 09:18:11 -Generating unique operation named: saveUsingPOST_7
2019-05-15 09:18:11 -Generating unique operation named: updateUsingGET_6
2019-05-15 09:18:11 -Generating unique operation named: updateUsingHEAD_6
2019-05-15 09:18:11 -Generating unique operation named: updateUsingPOST_8
2019-05-15 09:18:11 -Generating unique operation named: updateUsingPUT_6
2019-05-15 09:18:11 -Generating unique operation named: updateUsingPATCH_6
2019-05-15 09:18:11 -Generating unique operation named: updateUsingDELETE_6
2019-05-15 09:18:11 -Generating unique operation named: updateUsingOPTIONS_6
2019-05-15 09:18:11 -Generating unique operation named: updateUsingTRACE_6
2019-05-15 09:18:11 -Generating unique operation named: addUsingGET_8
2019-05-15 09:18:11 -Generating unique operation named: editUsingGET_9
2019-05-15 09:18:11 -Generating unique operation named: listUsingGET_9
2019-05-15 09:18:11 -Generating unique operation named: removeUsingPOST_16
2019-05-15 09:18:11 -Generating unique operation named: removeUsingPOST_17
2019-05-15 09:18:11 -Generating unique operation named: saveUsingPOST_8
2019-05-15 09:18:11 -Generating unique operation named: updateUsingGET_7
2019-05-15 09:18:11 -Generating unique operation named: updateUsingHEAD_7
2019-05-15 09:18:11 -Generating unique operation named: updateUsingPOST_9
2019-05-15 09:18:11 -Generating unique operation named: updateUsingPUT_7
2019-05-15 09:18:11 -Generating unique operation named: updateUsingPATCH_7
2019-05-15 09:18:11 -Generating unique operation named: updateUsingDELETE_7
2019-05-15 09:18:11 -Generating unique operation named: updateUsingOPTIONS_7
2019-05-15 09:18:11 -Generating unique operation named: updateUsingTRACE_7
2019-05-15 09:18:11 -Generating unique operation named: addUsingGET_9
2019-05-15 09:18:11 -Generating unique operation named: editUsingGET_10
2019-05-15 09:18:11 -Generating unique operation named: infoUsingGET_1
2019-05-15 09:18:11 -Generating unique operation named: infoUsingHEAD_1
2019-05-15 09:18:11 -Generating unique operation named: infoUsingPOST_1
2019-05-15 09:18:11 -Generating unique operation named: infoUsingPUT_1
2019-05-15 09:18:11 -Generating unique operation named: infoUsingPATCH_1
2019-05-15 09:18:11 -Generating unique operation named: infoUsingDELETE_1
2019-05-15 09:18:11 -Generating unique operation named: infoUsingOPTIONS_1
2019-05-15 09:18:11 -Generating unique operation named: infoUsingTRACE_1
2019-05-15 09:18:11 -Generating unique operation named: listUsingGET_10
2019-05-15 09:18:11 -Generating unique operation named: removeUsingPOST_18
2019-05-15 09:18:11 -Generating unique operation named: removeUsingPOST_19
2019-05-15 09:18:11 -Generating unique operation named: saveUsingPOST_9
2019-05-15 09:18:11 -Generating unique operation named: updateUsingPOST_10
2019-05-15 09:18:11 -Generating unique operation named: listUsingGET_11
2019-05-15 09:18:11 -Generating unique operation named: removeUsingPOST_20
2019-05-15 09:18:11 -Generating unique operation named: welcomeUsingGET_1
2019-05-15 09:18:12 -Generating unique operation named: addUsingGET_10
2019-05-15 09:18:12 -Generating unique operation named: editUsingGET_11
2019-05-15 09:18:12 -Generating unique operation named: listUsingGET_12
2019-05-15 09:18:12 -Generating unique operation named: removeUsingPOST_21
2019-05-15 09:18:12 -Generating unique operation named: saveUsingPOST_10
2019-05-15 09:18:12 -Generating unique operation named: treeUsingGET_1
2019-05-15 09:18:12 -Generating unique operation named: treeUsingGET_2
2019-05-15 09:18:12 -Generating unique operation named: updateUsingPOST_11
2019-05-15 09:18:12 -Generating unique operation named: addUsingGET_11
2019-05-15 09:18:12 -Generating unique operation named: editUsingGET_12
2019-05-15 09:18:12 -Generating unique operation named: listUsingGET_13
2019-05-15 09:18:12 -Generating unique operation named: removeUsingPOST_22
2019-05-15 09:18:12 -Generating unique operation named: removeUsingPOST_23
2019-05-15 09:18:12 -Generating unique operation named: saveUsingPOST_11
2019-05-15 09:18:12 -Generating unique operation named: updateUsingGET_8
2019-05-15 09:18:12 -Generating unique operation named: updateUsingHEAD_8
2019-05-15 09:18:12 -Generating unique operation named: updateUsingPOST_12
2019-05-15 09:18:12 -Generating unique operation named: updateUsingPUT_8
2019-05-15 09:18:12 -Generating unique operation named: updateUsingPATCH_8
2019-05-15 09:18:12 -Generating unique operation named: updateUsingDELETE_8
2019-05-15 09:18:12 -Generating unique operation named: updateUsingOPTIONS_8
2019-05-15 09:18:12 -Generating unique operation named: updateUsingTRACE_8
2019-05-15 09:18:12 -Generating unique operation named: addUsingGET_12
2019-05-15 09:18:12 -Generating unique operation named: editUsingGET_13
2019-05-15 09:18:12 -Generating unique operation named: listUsingGET_14
2019-05-15 09:18:12 -Generating unique operation named: removeUsingPOST_24
2019-05-15 09:18:12 -Generating unique operation named: removeUsingPOST_25
2019-05-15 09:18:12 -Generating unique operation named: saveUsingPOST_12
2019-05-15 09:18:12 -Generating unique operation named: updateUsingGET_9
2019-05-15 09:18:12 -Generating unique operation named: updateUsingHEAD_9
2019-05-15 09:18:12 -Generating unique operation named: updateUsingPOST_13
2019-05-15 09:18:12 -Generating unique operation named: updateUsingPUT_9
2019-05-15 09:18:12 -Generating unique operation named: updateUsingPATCH_9
2019-05-15 09:18:12 -Generating unique operation named: updateUsingDELETE_9
2019-05-15 09:18:12 -Generating unique operation named: updateUsingOPTIONS_9
2019-05-15 09:18:12 -Generating unique operation named: updateUsingTRACE_9
2019-05-15 09:18:12 -Generating unique operation named: addUsingGET_13
2019-05-15 09:18:12 -Generating unique operation named: batchRemoveUsingPOST_1
2019-05-15 09:18:12 -Generating unique operation named: editUsingGET_14
2019-05-15 09:18:12 -Generating unique operation named: listUsingGET_15
2019-05-15 09:18:12 -Generating unique operation named: saveUsingPOST_13
2019-05-15 09:18:12 -Generating unique operation named: saveUsingPOST_14
2019-05-15 09:18:12 -Generating unique operation named: updateUsingPOST_14
2019-05-15 09:18:12 -Generating unique operation named: listUsingGET_16
2019-05-15 09:18:12 -Generating unique operation named: listUsingHEAD_1
2019-05-15 09:18:12 -Generating unique operation named: listUsingPOST_1
2019-05-15 09:18:12 -Generating unique operation named: listUsingPUT_1
2019-05-15 09:18:12 -Generating unique operation named: listUsingPATCH_1
2019-05-15 09:18:12 -Generating unique operation named: listUsingDELETE_1
2019-05-15 09:18:12 -Generating unique operation named: listUsingOPTIONS_1
2019-05-15 09:18:12 -Generating unique operation named: listUsingTRACE_1
2019-05-15 09:18:12 -Generating unique operation named: countDDUsingGET_1
2019-05-15 09:18:12 -Generating unique operation named: exportDDUsingGET_1
2019-05-15 09:18:12 -Generating unique operation named: getCountYYUsingPOST_1
2019-05-15 09:18:12 -Generating unique operation named: getCountMMUsingPOST_1
2019-05-15 09:18:12 -Generating unique operation named: addUsingGET_14
2019-05-15 09:18:12 -Generating unique operation named: batchRemoveUsingPOST_2
2019-05-15 09:18:12 -Generating unique operation named: editUsingGET_15
2019-05-15 09:18:12 -Generating unique operation named: listUsingGET_17
2019-05-15 09:18:12 -Generating unique operation named: removeUsingPOST_26
2019-05-15 09:18:12 -Generating unique operation named: saveUsingPOST_15
2019-05-15 09:18:12 -Generating unique operation named: treeUsingGET_3
2019-05-15 09:18:12 -Generating unique operation named: treeViewUsingGET_1
2019-05-15 09:18:12 -Generating unique operation named: updateUsingPOST_15
2019-05-15 09:18:12 -Generating unique operation named: addUsingGET_15
2019-05-15 09:18:13 -Generating unique operation named: editUsingGET_16
2019-05-15 09:18:13 -Generating unique operation named: exprotExcelUsingGET_4
2019-05-15 09:18:13 -Generating unique operation named: listUsingGET_18
2019-05-15 09:18:13 -Generating unique operation named: removeUsingPOST_27
2019-05-15 09:18:13 -Generating unique operation named: removeUsingPOST_28
2019-05-15 09:18:13 -Generating unique operation named: saveUsingPOST_16
2019-05-15 09:18:13 -Generating unique operation named: updateUsingGET_10
2019-05-15 09:18:13 -Generating unique operation named: updateUsingHEAD_10
2019-05-15 09:18:13 -Generating unique operation named: updateUsingPOST_16
2019-05-15 09:18:13 -Generating unique operation named: updateUsingPUT_10
2019-05-15 09:18:13 -Generating unique operation named: updateUsingPATCH_10
2019-05-15 09:18:13 -Generating unique operation named: updateUsingDELETE_10
2019-05-15 09:18:13 -Generating unique operation named: updateUsingOPTIONS_10
2019-05-15 09:18:13 -Generating unique operation named: updateUsingTRACE_10
2019-05-15 09:18:13 -Generating unique operation named: exprotExcelUsingGET_5
2019-05-15 09:18:13 -Generating unique operation named: addUsingGET_16
2019-05-15 09:18:13 -Generating unique operation named: editUsingGET_17
2019-05-15 09:18:13 -Generating unique operation named: listUsingGET_19
2019-05-15 09:18:13 -Generating unique operation named: removeUsingPOST_29
2019-05-15 09:18:13 -Generating unique operation named: removeUsingPOST_30
2019-05-15 09:18:13 -Generating unique operation named: saveUsingPOST_17
2019-05-15 09:18:13 -Generating unique operation named: updateUsingGET_11
2019-05-15 09:18:13 -Generating unique operation named: updateUsingHEAD_11
2019-05-15 09:18:13 -Generating unique operation named: updateUsingPOST_17
2019-05-15 09:18:13 -Generating unique operation named: updateUsingPUT_11
2019-05-15 09:18:13 -Generating unique operation named: updateUsingPATCH_11
2019-05-15 09:18:13 -Generating unique operation named: updateUsingDELETE_11
2019-05-15 09:18:13 -Generating unique operation named: updateUsingOPTIONS_11
2019-05-15 09:18:13 -Generating unique operation named: updateUsingTRACE_11
2019-05-15 09:18:13 -Generating unique operation named: addUsingGET_17
2019-05-15 09:18:13 -Generating unique operation named: editUsingGET_18
2019-05-15 09:18:13 -Generating unique operation named: listUsingGET_20
2019-05-15 09:18:13 -Generating unique operation named: removeUsingPOST_31
2019-05-15 09:18:13 -Generating unique operation named: removeUsingPOST_32
2019-05-15 09:18:13 -Generating unique operation named: saveUsingPOST_18
2019-05-15 09:18:13 -Generating unique operation named: updateUsingGET_12
2019-05-15 09:18:13 -Generating unique operation named: updateUsingHEAD_12
2019-05-15 09:18:13 -Generating unique operation named: updateUsingPOST_18
2019-05-15 09:18:13 -Generating unique operation named: updateUsingPUT_12
2019-05-15 09:18:13 -Generating unique operation named: updateUsingPATCH_12
2019-05-15 09:18:13 -Generating unique operation named: updateUsingDELETE_12
2019-05-15 09:18:13 -Generating unique operation named: updateUsingOPTIONS_12
2019-05-15 09:18:13 -Generating unique operation named: updateUsingTRACE_12
2019-05-15 09:18:14 -Starting Quartz Scheduler now
2019-05-15 09:18:14 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED started.
2019-05-15 09:18:14 -Starting...
2019-05-15 09:18:14 -BrokerAvailabilityEvent[available=true, SimpleBrokerMessageHandler [DefaultSubscriptionRegistry[cache[0 destination(s)], registry[0 sessions]]]]
2019-05-15 09:18:14 -Started.
2019-05-15 09:18:14 -Starting ProtocolHandler ["http-nio-8081"]
2019-05-15 09:18:14 -Using a shared selector for servlet write/read
2019-05-15 09:18:14 -Tomcat started on port(s): 8081 (http) with context path ''
2019-05-15 09:18:14 -Started BootdoApplication in 31.369 seconds (JVM running for 32.229)
2019-05-15 09:18:14 -==>  Preparing: select `id`,`cron_expression`,`method_name`,`is_concurrent`,`description`,`update_by`,`bean_class`,`create_date`,`job_status`,`job_group`,`update_date`,`create_by`,`spring_bean`,`job_name` from sys_task order by id desc 
2019-05-15 09:18:14 -==> Parameters: 
2019-05-15 09:18:15 -<==      Total: 1
2019-05-15 09:18:24 -Initializing Spring FrameworkServlet 'dispatcherServlet'
2019-05-15 09:18:24 -FrameworkServlet 'dispatcherServlet': initialization started
2019-05-15 09:18:24 -FrameworkServlet 'dispatcherServlet': initialization completed in 61 ms
2019-05-15 09:18:24 -Enabling session validation scheduler...
2019-05-15 09:18:24 -请求地址 : http://localhost:8081/login;JSESSIONID=621d6260-e473-4a4a-b8ac-f0fdc8feeddc
2019-05-15 09:18:24 -HTTP METHOD : GET
2019-05-15 09:18:24 -CLASS_METHOD : com.bootdo.system.controller.LoginController.login
2019-05-15 09:18:24 -参数 : [{}]
2019-05-15 09:18:24 -耗时 : 4
2019-05-15 09:18:24 -返回值 : login
2019-05-15 09:18:25 -请求地址 : http://localhost:8081/getVerify
2019-05-15 09:18:25 -HTTP METHOD : GET
2019-05-15 09:18:25 -CLASS_METHOD : com.bootdo.system.controller.LoginController.getVerify
2019-05-15 09:18:25 -参数 : [org.apache.shiro.web.servlet.ShiroHttpServletRequest@6b2f117, org.apache.shiro.web.servlet.ShiroHttpServletResponse@240c18bf]
2019-05-15 09:18:25 -1514
2019-05-15 09:18:25 -耗时 : 536
2019-05-15 09:18:25 -返回值 : null
2019-05-15 09:18:25 -请求地址 : http://localhost:8081/login
2019-05-15 09:18:25 -HTTP METHOD : GET
2019-05-15 09:18:25 -CLASS_METHOD : com.bootdo.system.controller.LoginController.login
2019-05-15 09:18:25 -参数 : [{}]
2019-05-15 09:18:25 -耗时 : 1
2019-05-15 09:18:25 -返回值 : login
2019-05-15 09:18:29 -请求地址 : http://localhost:8081/login
2019-05-15 09:18:29 -HTTP METHOD : POST
2019-05-15 09:18:29 -CLASS_METHOD : com.bootdo.system.controller.LoginController.ajaxLogin
2019-05-15 09:18:29 -参数 : [admin, 111111, 1514, org.apache.shiro.web.servlet.ShiroHttpServletRequest@6db44cdd]
2019-05-15 09:18:29 -==>  Preparing: select `user_id`,`username`,`name`,`password`,`dept_id`,`email`,`mobile`,`status`,`user_id_create`,`gmt_create`,`gmt_modified`,`sex`,`birth`,`pic_id`,`live_address`,`hobby`,`province`,`city`,`district` from sys_user WHERE username = ? order by user_id desc 
2019-05-15 09:18:29 -==> Parameters: admin(String)
2019-05-15 09:18:29 -<==      Total: 1
2019-05-15 09:18:29 -耗时 : 105
2019-05-15 09:18:29 -返回值 : {msg=操作成功, code=0}
2019-05-15 09:18:29 -More than one TaskExecutor bean found within the context, and none is named 'taskExecutor'. Mark one of them as primary or name it 'taskExecutor' (possibly as an alias) in order to use it for async processing: [clientInboundChannelExecutor, clientOutboundChannelExecutor, brokerChannelExecutor, messageBrokerTaskScheduler]
2019-05-15 09:18:29 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-05-15 09:18:29 -==> Parameters: 1(Long), admin(String), 登录(String), 105(Integer), com.bootdo.system.controller.LoginController.ajaxLogin()(String), null, 127.0.0.1(String), 2019-05-15 09:18:29.934(Timestamp)
2019-05-15 09:18:29 -请求地址 : http://localhost:8081/index
2019-05-15 09:18:29 -HTTP METHOD : GET
2019-05-15 09:18:29 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2019-05-15 09:18:29 -参数 : [{}]
2019-05-15 09:18:30 -<==    Updates: 1
2019-05-15 09:18:30 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2019-05-15 09:18:30 -==> Parameters: 1(Long)
2019-05-15 09:18:30 -<==      Total: 49
2019-05-15 09:18:30 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2019-05-15 09:18:30 -==> Parameters: 138(Long)
2019-05-15 09:18:30 -<==      Total: 1
2019-05-15 09:18:30 -耗时 : 108
2019-05-15 09:18:30 -返回值 : index_v1
2019-05-15 09:18:30 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-05-15 09:18:30 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 108(Integer), com.bootdo.system.controller.LoginController.index()(String), {"menus":[{"attributes":{"icon":"fa fa-money","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-money","url":"/moneyList/moneyList"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"102","parentId":"106","text":"现金缴费"},{"attributes":{"icon":"fa fa-book","url":"/moneyLog/elecLog"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"107","parentId":"106","text":"缴费记录"}],"hasChildren":true,"hasParent":false,"id":"106","parentId":"0","text":"收费管理"},{"attributes":{"icon":"fa fa-lightbulb-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/elec/elec"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"121","parentId":"103","text":"电费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"elec/elecInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"122","parentId":"103","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"elec/elecUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"123","parentId":"103","text":"电表上传"},{"attributes":{"icon":"fa fa-cc","url":"/elec/elecPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"124","parentId":"103","text":"电价管理"}],"hasChildren":true,"hasParent":false,"id":"103","parentId":"0","text":"电费管理"},{"attributes":{"icon":"fa fa-tint","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/water/water"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"117","parentId":"105","text":"水费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"water/waterInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"118","parentId":"105","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"water/waterUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"119","parentId":"105","text":"水费生成"},{"attributes":{"icon":"fa fa-cc","url":"/water/waterPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"120","parentId":"105","text":"水价管理"}],"hasChildren":true,"hasParent":false,"id":"105","parentId":"0","text":"水费管理"},{"attributes":{"icon":"fa fa-fire","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/heat/heat"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"113","parentId":"104","text":"暖费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"heat/heatInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"114","parentId":"104","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"heat/heatUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"115","parentId":"104","text":"暖费生成"},{"attributes":{"icon":"","url":"/heat/heatPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"116","parentId":"104","text":"暖价管理"}],"hasChildren":true,"hasParent":false,"id":"104","parentId":"0","text":"暖费管理"},{"attributes":{"icon":"fa fa-vcard-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-bomb","url":"/print/print"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"149","parentId":"108","text":"票据记录"}],"hasChildren":true,"hasParent":false,"id":"108","parentId":"0","text":"票据管理"},{"attributes":{"icon":"fa fa-bar-chart","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-area-chart","url":"/chart/graph_echarts.html"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","text":"百度chart"},{"attributes":{"icon":"fa fa-sun-o","url":"charts/countDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"109","parentId":"97","text":"日统计报表"},{"attributes":{"icon":"fa fa-calendar","url":"charts/tableDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"161","parentId":"97","text":"日统计表格"},{"attributes":{"icon":"fa fa-registered","url":"charts/countMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"110","parentId":"97","text":"月统计报表"},{"attributes":{"icon":"fa fa-building-o","url":"charts/tableElecMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"162","parentId":"97","text":"月统计表格"},{"attributes":{"icon":"fa fa-support","url":"charts/countYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"111","parentId":"97","text":"年统计报表"},{"attributes":{"icon":"fa fa-book","url":"charts/tableElecYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"163","parentId":"97","text":"年统计表格"},{"attributes":{"icon":"fa fa-money","url":"charts/countOwe"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"155","parentId":"97","text":"欠费报表图"},{"attributes":{"icon":"fa fa-tachometer","url":"charts/countRun"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"112"(String), 127.0.0.1(String), 2019-05-15 09:18:30.16(Timestamp)
2019-05-15 09:18:30 -<==    Updates: 1
2019-05-15 09:18:30 -请求地址 : http://localhost:8081/main
2019-05-15 09:18:30 -HTTP METHOD : GET
2019-05-15 09:18:30 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-05-15 09:18:30 -参数 : []
2019-05-15 09:18:30 -耗时 : 0
2019-05-15 09:18:30 -返回值 : main
2019-05-15 09:18:30 -请求地址 : http://localhost:8081/oa/notify/message
2019-05-15 09:18:30 -HTTP METHOD : GET
2019-05-15 09:18:30 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2019-05-15 09:18:30 -参数 : []
2019-05-15 09:18:30 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2019-05-15 09:18:30 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2019-05-15 09:18:30 -<==      Total: 0
2019-05-15 09:18:30 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2019-05-15 09:18:30 -==> Parameters: 1(Long), 0(String)
2019-05-15 09:18:30 -<==      Total: 1
2019-05-15 09:18:30 -耗时 : 43
2019-05-15 09:18:30 -返回值 : com.bootdo.common.utils.PageUtils@55a5f60a
2019-05-15 09:18:30 -请求地址 : http://localhost:8081/main
2019-05-15 09:18:30 -HTTP METHOD : GET
2019-05-15 09:18:30 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-05-15 09:18:30 -参数 : []
2019-05-15 09:18:30 -耗时 : 0
2019-05-15 09:18:30 -返回值 : main
2019-05-15 09:18:34 -==>  Preparing: select distinct m.perms from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id = ur.role_id where ur.user_id = ? 
2019-05-15 09:18:34 -==> Parameters: 1(Long)
2019-05-15 09:18:34 -<==      Total: 93
2019-05-15 09:18:34 -请求地址 : http://localhost:8081/water/waterPrice
2019-05-15 09:18:34 -HTTP METHOD : GET
2019-05-15 09:18:34 -CLASS_METHOD : com.bootdo.water.controller.WaterPriceController.WaterPrice
2019-05-15 09:18:34 -参数 : []
2019-05-15 09:18:34 -耗时 : 0
2019-05-15 09:18:34 -返回值 : water/waterPrice/waterPrice
2019-05-15 09:18:35 -请求地址 : http://localhost:8081/water/waterPrice/list
2019-05-15 09:18:35 -HTTP METHOD : GET
2019-05-15 09:18:35 -CLASS_METHOD : com.bootdo.water.controller.WaterPriceController.list
2019-05-15 09:18:35 -参数 : [{limit=10, offset=0}]
2019-05-15 09:18:35 -==>  Preparing: select `id`,`water_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `water_org`) AS waterOrgName,`m_water`,`s1_water`,`s2_water`,`s3_water`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from water_price order by id asc limit ?, ? 
2019-05-15 09:18:35 -==> Parameters: 0(Integer), 10(Integer)
2019-05-15 09:18:35 -<==      Total: 2
2019-05-15 09:18:35 -==>  Preparing: select count(*) from water_price 
2019-05-15 09:18:35 -==> Parameters: 
2019-05-15 09:18:35 -<==      Total: 1
2019-05-15 09:18:35 -耗时 : 33
2019-05-15 09:18:35 -返回值 : com.bootdo.common.utils.PageUtils@7bd8b2c8
2019-05-15 09:18:37 -请求地址 : http://localhost:8081/water/waterPrice/edit/1
2019-05-15 09:18:37 -HTTP METHOD : GET
2019-05-15 09:18:37 -CLASS_METHOD : com.bootdo.water.controller.WaterPriceController.edit
2019-05-15 09:18:37 -参数 : [1, {}]
2019-05-15 09:18:37 -==>  Preparing: select `id`,`water_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `water_org`) AS waterOrgName,`m_water`,`s1_water`,`s2_water`,`s3_water`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from water_price where id = ? 
2019-05-15 09:18:37 -==> Parameters: 1(Long)
2019-05-15 09:18:37 -<==      Total: 1
2019-05-15 09:18:37 -耗时 : 6
2019-05-15 09:18:37 -返回值 : water/waterPrice/edit
2019-05-15 09:18:50 -请求地址 : http://localhost:8081/water/waterPrice/update
2019-05-15 09:18:50 -HTTP METHOD : POST
2019-05-15 09:18:50 -CLASS_METHOD : com.bootdo.water.controller.WaterPriceController.update
2019-05-15 09:18:50 -参数 : [com.bootdo.water.domain.WaterPriceDO@39db7ea0]
2019-05-15 09:18:50 -==>  Preparing: update water_price SET `water_org` = ?, `m_water` = ?, `s1_water` = ?, `create_time` = ?, `create_by` = ?, `update_time` = ?, `update_by` = ?, `remark` = ? where id = ? 
2019-05-15 09:18:50 -==> Parameters: 2(String), 8(BigDecimal), 12(BigDecimal), 2019-03(String), 1(Long), 2019-05-15 09:18:50.808(Timestamp), 1(Long), (String), 1(Long)
2019-05-15 09:18:50 -<==    Updates: 1
2019-05-15 09:18:50 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-05-15 09:18:50 -==> Parameters: 1(Long), admin(String), error(String), null, http://localhost:8081/water/waterPrice/update(String), org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'waterType' in 'class com.bootdo.water.domain.WaterPriceDO'(String), null, 2019-05-15 09:18:50.959(Timestamp)
2019-05-15 09:18:50 -nested exception is org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'waterType' in 'class com.bootdo.water.domain.WaterPriceDO'
org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'waterType' in 'class com.bootdo.water.domain.WaterPriceDO'
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:79)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:447)
	at com.sun.proxy.$Proxy101.update(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.update(SqlSessionTemplate.java:295)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:62)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy143.updateWater(Unknown Source)
	at com.bootdo.water.service.impl.WaterPriceServiceImpl.updateWater(WaterPriceServiceImpl.java:43)
	at com.bootdo.water.controller.WaterPriceController.update(WaterPriceController.java:93)
	at com.bootdo.water.controller.WaterPriceController$$FastClassBySpringCGLIB$$fb365725.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:204)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:746)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.bootdo.common.aspect.WebLogAspect.doAround(WebLogAspect.java:57)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.apache.shiro.spring.security.interceptor.AopAllianceAnnotationsAuthorizingMethodInterceptor$1.proceed(AopAllianceAnnotationsAuthorizingMethodInterceptor.java:82)
	at org.apache.shiro.authz.aop.AuthorizingMethodInterceptor.invoke(AuthorizingMethodInterceptor.java:39)
	at org.apache.shiro.spring.security.interceptor.AopAllianceAnnotationsAuthorizingMethodInterceptor.invoke(AopAllianceAnnotationsAuthorizingMethodInterceptor.java:115)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.bootdo.water.controller.WaterPriceController$$EnhancerBySpringCGLIB$$7f1816ff.update(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:209)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:877)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:783)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:991)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:925)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:974)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:877)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:661)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:851)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:61)
	at org.apache.shiro.web.servlet.AdviceFilter.executeChain(AdviceFilter.java:108)
	at org.apache.shiro.web.servlet.AdviceFilter.doFilterInternal(AdviceFilter.java:137)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:66)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)
	at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)
	at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)
	at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)
	at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:383)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:109)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:496)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:790)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1468)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:745)
Caused by: org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'waterType' in 'class com.bootdo.water.domain.WaterPriceDO'
	at org.apache.ibatis.reflection.Reflector.getGetInvoker(Reflector.java:421)
	at org.apache.ibatis.reflection.MetaClass.getGetInvoker(MetaClass.java:164)
	at org.apache.ibatis.reflection.wrapper.BeanWrapper.getBeanProperty(BeanWrapper.java:162)
	at org.apache.ibatis.reflection.wrapper.BeanWrapper.get(BeanWrapper.java:49)
	at org.apache.ibatis.reflection.MetaObject.getValue(MetaObject.java:122)
	at org.apache.ibatis.scripting.xmltags.DynamicContext$ContextMap.get(DynamicContext.java:94)
	at org.apache.ibatis.scripting.xmltags.DynamicContext$ContextAccessor.getProperty(DynamicContext.java:108)
	at org.apache.ibatis.ognl.OgnlRuntime.getProperty(OgnlRuntime.java:2666)
	at org.apache.ibatis.ognl.ASTProperty.getValueBody(ASTProperty.java:114)
	at org.apache.ibatis.ognl.SimpleNode.evaluateGetValueBody(SimpleNode.java:212)
	at org.apache.ibatis.ognl.SimpleNode.getValue(SimpleNode.java:258)
	at org.apache.ibatis.ognl.ASTEq.getValueBody(ASTEq.java:50)
	at org.apache.ibatis.ognl.SimpleNode.evaluateGetValueBody(SimpleNode.java:212)
	at org.apache.ibatis.ognl.SimpleNode.getValue(SimpleNode.java:258)
	at org.apache.ibatis.ognl.ASTAnd.getValueBody(ASTAnd.java:61)
	at org.apache.ibatis.ognl.SimpleNode.evaluateGetValueBody(SimpleNode.java:212)
	at org.apache.ibatis.ognl.SimpleNode.getValue(SimpleNode.java:258)
	at org.apache.ibatis.ognl.Ognl.getValue(Ognl.java:470)
	at org.apache.ibatis.ognl.Ognl.getValue(Ognl.java:434)
	at org.apache.ibatis.scripting.xmltags.OgnlCache.getValue(OgnlCache.java:44)
	at org.apache.ibatis.scripting.xmltags.ExpressionEvaluator.evaluateBoolean(ExpressionEvaluator.java:32)
	at org.apache.ibatis.scripting.xmltags.IfSqlNode.apply(IfSqlNode.java:34)
	at org.apache.ibatis.scripting.xmltags.MixedSqlNode.apply(MixedSqlNode.java:33)
	at org.apache.ibatis.scripting.xmltags.TrimSqlNode.apply(TrimSqlNode.java:55)
	at org.apache.ibatis.scripting.xmltags.MixedSqlNode.apply(MixedSqlNode.java:33)
	at org.apache.ibatis.scripting.xmltags.DynamicSqlSource.getBoundSql(DynamicSqlSource.java:41)
	at org.apache.ibatis.mapping.MappedStatement.getBoundSql(MappedStatement.java:292)
	at org.apache.ibatis.executor.statement.BaseStatementHandler.<init>(BaseStatementHandler.java:64)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.<init>(PreparedStatementHandler.java:40)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.<init>(RoutingStatementHandler.java:46)
	at org.apache.ibatis.session.Configuration.newStatementHandler(Configuration.java:545)
	at org.apache.ibatis.executor.SimpleExecutor.doUpdate(SimpleExecutor.java:48)
	at org.apache.ibatis.executor.BaseExecutor.update(BaseExecutor.java:117)
	at org.apache.ibatis.executor.CachingExecutor.update(CachingExecutor.java:76)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:198)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:434)
	... 104 common frames omitted
2019-05-15 09:18:51 -<==    Updates: 1
2019-05-15 09:18:54 -请求地址 : http://localhost:8081/water/waterPrice/update
2019-05-15 09:18:54 -HTTP METHOD : POST
2019-05-15 09:18:54 -CLASS_METHOD : com.bootdo.water.controller.WaterPriceController.update
2019-05-15 09:18:54 -参数 : [com.bootdo.water.domain.WaterPriceDO@11de3d30]
2019-05-15 09:18:54 -==>  Preparing: update water_price SET `water_org` = ?, `m_water` = ?, `s1_water` = ?, `create_time` = ?, `create_by` = ?, `update_time` = ?, `update_by` = ?, `remark` = ? where id = ? 
2019-05-15 09:18:54 -==> Parameters: 2(String), 8(BigDecimal), 12(BigDecimal), 2019-03(String), 1(Long), 2019-05-15 09:18:54.006(Timestamp), 1(Long), (String), 1(Long)
2019-05-15 09:18:54 -<==    Updates: 1
2019-05-15 09:18:54 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-05-15 09:18:54 -nested exception is org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'waterType' in 'class com.bootdo.water.domain.WaterPriceDO'
org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'waterType' in 'class com.bootdo.water.domain.WaterPriceDO'
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:79)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:447)
	at com.sun.proxy.$Proxy101.update(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.update(SqlSessionTemplate.java:295)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:62)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy143.updateWater(Unknown Source)
	at com.bootdo.water.service.impl.WaterPriceServiceImpl.updateWater(WaterPriceServiceImpl.java:43)
	at com.bootdo.water.controller.WaterPriceController.update(WaterPriceController.java:93)
	at com.bootdo.water.controller.WaterPriceController$$FastClassBySpringCGLIB$$fb365725.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:204)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:746)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.bootdo.common.aspect.WebLogAspect.doAround(WebLogAspect.java:57)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.apache.shiro.spring.security.interceptor.AopAllianceAnnotationsAuthorizingMethodInterceptor$1.proceed(AopAllianceAnnotationsAuthorizingMethodInterceptor.java:82)
	at org.apache.shiro.authz.aop.AuthorizingMethodInterceptor.invoke(AuthorizingMethodInterceptor.java:39)
	at org.apache.shiro.spring.security.interceptor.AopAllianceAnnotationsAuthorizingMethodInterceptor.invoke(AopAllianceAnnotationsAuthorizingMethodInterceptor.java:115)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.bootdo.water.controller.WaterPriceController$$EnhancerBySpringCGLIB$$7f1816ff.update(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:209)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:877)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:783)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:991)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:925)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:974)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:877)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:661)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:851)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:61)
	at org.apache.shiro.web.servlet.AdviceFilter.executeChain(AdviceFilter.java:108)
	at org.apache.shiro.web.servlet.AdviceFilter.doFilterInternal(AdviceFilter.java:137)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:66)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)
	at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)
	at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)
	at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)
	at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:383)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:109)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:496)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:790)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1468)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:745)
Caused by: org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'waterType' in 'class com.bootdo.water.domain.WaterPriceDO'
	at org.apache.ibatis.reflection.Reflector.getGetInvoker(Reflector.java:421)
	at org.apache.ibatis.reflection.MetaClass.getGetInvoker(MetaClass.java:164)
	at org.apache.ibatis.reflection.wrapper.BeanWrapper.getBeanProperty(BeanWrapper.java:162)
	at org.apache.ibatis.reflection.wrapper.BeanWrapper.get(BeanWrapper.java:49)
	at org.apache.ibatis.reflection.MetaObject.getValue(MetaObject.java:122)
	at org.apache.ibatis.scripting.xmltags.DynamicContext$ContextMap.get(DynamicContext.java:94)
	at org.apache.ibatis.scripting.xmltags.DynamicContext$ContextAccessor.getProperty(DynamicContext.java:108)
	at org.apache.ibatis.ognl.OgnlRuntime.getProperty(OgnlRuntime.java:2666)
	at org.apache.ibatis.ognl.ASTProperty.getValueBody(ASTProperty.java:114)
	at org.apache.ibatis.ognl.SimpleNode.evaluateGetValueBody(SimpleNode.java:212)
	at org.apache.ibatis.ognl.SimpleNode.getValue(SimpleNode.java:258)
	at org.apache.ibatis.ognl.ASTEq.getValueBody(ASTEq.java:50)
	at org.apache.ibatis.ognl.SimpleNode.evaluateGetValueBody(SimpleNode.java:212)
	at org.apache.ibatis.ognl.SimpleNode.getValue(SimpleNode.java:258)
	at org.apache.ibatis.ognl.ASTAnd.getValueBody(ASTAnd.java:61)
	at org.apache.ibatis.ognl.SimpleNode.evaluateGetValueBody(SimpleNode.java:212)
	at org.apache.ibatis.ognl.SimpleNode.getValue(SimpleNode.java:258)
	at org.apache.ibatis.ognl.Ognl.getValue(Ognl.java:470)
	at org.apache.ibatis.ognl.Ognl.getValue(Ognl.java:434)
	at org.apache.ibatis.scripting.xmltags.OgnlCache.getValue(OgnlCache.java:44)
	at org.apache.ibatis.scripting.xmltags.ExpressionEvaluator.evaluateBoolean(ExpressionEvaluator.java:32)
	at org.apache.ibatis.scripting.xmltags.IfSqlNode.apply(IfSqlNode.java:34)
	at org.apache.ibatis.scripting.xmltags.MixedSqlNode.apply(MixedSqlNode.java:33)
	at org.apache.ibatis.scripting.xmltags.TrimSqlNode.apply(TrimSqlNode.java:55)
	at org.apache.ibatis.scripting.xmltags.MixedSqlNode.apply(MixedSqlNode.java:33)
	at org.apache.ibatis.scripting.xmltags.DynamicSqlSource.getBoundSql(DynamicSqlSource.java:41)
	at org.apache.ibatis.mapping.MappedStatement.getBoundSql(MappedStatement.java:292)
	at org.apache.ibatis.executor.statement.BaseStatementHandler.<init>(BaseStatementHandler.java:64)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.<init>(PreparedStatementHandler.java:40)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.<init>(RoutingStatementHandler.java:46)
	at org.apache.ibatis.session.Configuration.newStatementHandler(Configuration.java:545)
	at org.apache.ibatis.executor.SimpleExecutor.doUpdate(SimpleExecutor.java:48)
	at org.apache.ibatis.executor.BaseExecutor.update(BaseExecutor.java:117)
	at org.apache.ibatis.executor.CachingExecutor.update(CachingExecutor.java:76)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:198)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:434)
	... 104 common frames omitted
2019-05-15 09:18:54 -==> Parameters: 1(Long), admin(String), error(String), null, http://localhost:8081/water/waterPrice/update(String), org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'waterType' in 'class com.bootdo.water.domain.WaterPriceDO'(String), null, 2019-05-15 09:18:54.108(Timestamp)
2019-05-15 09:18:54 -<==    Updates: 1
2019-05-15 09:19:06 -WebSocketSession[1 current WS(1)-HttpStream(0)-HttpPoll(0), 1 total, 0 closed abnormally (0 connect failure, 0 send limit, 0 transport error)], stompSubProtocol[processed CONNECT(1)-CONNECTED(1)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 8, active threads = 0, queued tasks = 0, completed tasks = 9], outboundChannelpool size = 1, active threads = 0, queued tasks = 0, completed tasks = 1], sockJsScheduler[pool size = 4, active threads = 1, queued tasks = 2, completed tasks = 9]
2019-05-15 09:26:31 -Starting BootdoApplication on PC-201905091110 with PID 39220 (D:\eclipse2018-work\bootdo\target\classes started by Administrator in D:\eclipse2018-work\bootdo)
2019-05-15 09:26:31 -Running with Spring Boot v2.0.3.RELEASE, Spring v5.0.7.RELEASE
2019-05-15 09:26:31 -The following profiles are active: dev
2019-05-15 09:26:31 -Refreshing org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@4d5650ae: startup date [Wed May 15 09:26:31 CST 2019]; root of context hierarchy
2019-05-15 09:26:34 -Multiple Spring Data modules found, entering strict repository configuration mode!
2019-05-15 09:26:36 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$bb3b3035] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-05-15 09:26:36 -Bean 'shiroConfig' of type [com.bootdo.system.config.ShiroConfig$$EnhancerBySpringCGLIB$$ad945edc] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-05-15 09:26:37 -Bean 'userRealm' of type [com.bootdo.system.shiro.UserRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-05-15 09:26:38 -Bean 'cacheManager2' of type [net.sf.ehcache.CacheManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-05-15 09:26:38 -Bean 'ehCacheManager' of type [org.apache.shiro.cache.ehcache.EhCacheManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-05-15 09:26:38 -Cache with name 'com.bootdo.system.shiro.UserRealm.authorizationCache' does not yet exist.  Creating now.
2019-05-15 09:26:38 -Added EhCache named [com.bootdo.system.shiro.UserRealm.authorizationCache]
2019-05-15 09:26:38 -Bean 'sessionDAO' of type [org.apache.shiro.session.mgt.eis.MemorySessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-05-15 09:26:38 -Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-05-15 09:26:38 -Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-05-15 09:26:38 -Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-05-15 09:26:39 -Tomcat initialized with port(s): 8081 (http)
2019-05-15 09:26:39 -Initializing ProtocolHandler ["http-nio-8081"]
2019-05-15 09:26:39 -Starting service [Tomcat]
2019-05-15 09:26:39 -Starting Servlet Engine: Apache Tomcat/8.5.31
2019-05-15 09:26:39 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [D:\Java\JDK\jdk1.8.0_102\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;D:/Java/JRE/bin/server;D:/Java/JRE/bin;D:/Java/JRE/lib/amd64;C:\ProgramData\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Windows\System32\OpenSSH\;%JAVA_HOME\bin%;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;;C:\Users\Administrator\Desktop;;.]
2019-05-15 09:26:39 -Initializing Spring embedded WebApplicationContext
2019-05-15 09:26:39 -Root WebApplicationContext: initialization completed in 8207 ms
2019-05-15 09:26:40 -Mapping filter: 'characterEncodingFilter' to: [/*]
2019-05-15 09:26:40 -Mapping filter: 'hiddenHttpMethodFilter' to: [/*]
2019-05-15 09:26:40 -Mapping filter: 'httpPutFormContentFilter' to: [/*]
2019-05-15 09:26:40 -Mapping filter: 'requestContextFilter' to: [/*]
2019-05-15 09:26:40 -Filter xssFilter was not registered (disabled)
2019-05-15 09:26:40 -Mapping filter: 'webStatFilter' to urls: [/*]
2019-05-15 09:26:40 -Mapping filter: 'shiroFilterFactoryBean' to: [/*]
2019-05-15 09:26:40 -Servlet statViewServlet mapped to [/druid/*]
2019-05-15 09:26:40 -Servlet dispatcherServlet mapped to [/]
2019-05-15 09:26:49 -ApplicationContext registed-->org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@4d5650ae: startup date [Wed May 15 09:26:31 CST 2019]; root of context hierarchy
2019-05-15 09:26:49 -Using default implementation for ThreadExecutor
2019-05-15 09:26:49 -Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2019-05-15 09:26:49 -Quartz Scheduler v.2.2.1 created.
2019-05-15 09:26:49 -RAMJobStore initialized.
2019-05-15 09:26:49 -Scheduler meta-data: Quartz Scheduler (v2.2.1) 'schedulerFactoryBean' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2019-05-15 09:26:49 -Quartz scheduler 'schedulerFactoryBean' initialized from an externally provided properties instance.
2019-05-15 09:26:49 -Quartz scheduler version: 2.2.1
2019-05-15 09:26:49 -JobFactory set to: com.bootdo.common.quartz.factory.JobFactory@50a7c72b
2019-05-15 09:26:50 -Initializing ExecutorService  'clientInboundChannelExecutor'
2019-05-15 09:26:50 -Initializing ExecutorService  'clientOutboundChannelExecutor'
2019-05-15 09:26:52 -Mapped "{[/charts/countDD/exportDD],methods=[GET]}" onto public void com.bootdo.charts.controller.countDDController.exportDD(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.HeatLogVo,com.bootdo.moneyLog.vo.WaterLogVo,javax.servlet.http.HttpServletResponse)
2019-05-15 09:26:52 -Mapped "{[/charts/countDD/getCountDD],methods=[POST]}" onto public com.bootdo.charts.vo.CountDayVo com.bootdo.charts.controller.countDDController.getCountD(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo)
2019-05-15 09:26:52 -Mapped "{[/charts/countDD],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.countDDController.countDD()
2019-05-15 09:26:52 -Mapped "{[/charts/countMM],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.countMMController.countMM()
2019-05-15 09:26:52 -Mapped "{[/charts/countMM/getCountMM],methods=[POST]}" onto public java.util.Map com.bootdo.charts.controller.countMMController.getCountMM(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo)
2019-05-15 09:26:52 -Mapped "{[/charts/countMM/exportMM],methods=[GET]}" onto public void com.bootdo.charts.controller.countMMController.exportMM(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.HeatLogVo,com.bootdo.moneyLog.vo.WaterLogVo,javax.servlet.http.HttpServletResponse)
2019-05-15 09:26:52 -Mapped "{[/charts/countOwe/getCountOwe],methods=[POST]}" onto public com.bootdo.charts.vo.CountOweVo com.bootdo.charts.controller.countOweController.getCountD(com.bootdo.elec.vo.ElecVo,com.bootdo.water.vo.WaterVo,com.bootdo.heat.vo.HeatVo)
2019-05-15 09:26:52 -Mapped "{[/charts/countOwe/exportOwe],methods=[GET]}" onto public void com.bootdo.charts.controller.countOweController.exportOwe(com.bootdo.elec.vo.ElecVo,com.bootdo.heat.vo.HeatVo,com.bootdo.water.vo.WaterVo,javax.servlet.http.HttpServletResponse)
2019-05-15 09:26:52 -Mapped "{[/charts/countOwe],methods=[GET]}" onto java.lang.String com.bootdo.charts.controller.countOweController.countOwe()
2019-05-15 09:26:52 -Mapped "{[/charts/countRun/getCountRun],methods=[POST]}" onto public java.util.Map com.bootdo.charts.controller.countRunController.getCountRun(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo)
2019-05-15 09:26:52 -Mapped "{[/charts/countRun],methods=[GET]}" onto java.lang.String com.bootdo.charts.controller.countRunController.countRun()
2019-05-15 09:26:52 -Mapped "{[/charts/countRun/exportRun],methods=[GET]}" onto public void com.bootdo.charts.controller.countRunController.exportRun(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.HeatLogVo,com.bootdo.moneyLog.vo.WaterLogVo,javax.servlet.http.HttpServletResponse)
2019-05-15 09:26:52 -Mapped "{[/charts/countYY/getCountYY],methods=[POST]}" onto public java.util.Map com.bootdo.charts.controller.countYYController.getCountYY(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo)
2019-05-15 09:26:52 -Mapped "{[/charts/countYY],methods=[GET]}" onto java.lang.String com.bootdo.charts.controller.countYYController.countYY()
2019-05-15 09:26:52 -Mapped "{[/charts/countYY/exportYY],methods=[GET]}" onto public void com.bootdo.charts.controller.countYYController.exportYY(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.HeatLogVo,com.bootdo.moneyLog.vo.WaterLogVo,javax.servlet.http.HttpServletResponse)
2019-05-15 09:26:52 -Mapped "{[/charts/tableDD/exportDD],methods=[GET]}" onto public void com.bootdo.charts.controller.tableDDController.exportDD(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.HeatLogVo,com.bootdo.moneyLog.vo.WaterLogVo,javax.servlet.http.HttpServletResponse)
2019-05-15 09:26:52 -Mapped "{[/charts/tableDD/getTableDD],methods=[POST]}" onto public java.util.Map com.bootdo.charts.controller.tableDDController.getTableDD(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo)
2019-05-15 09:26:52 -Mapped "{[/charts/tableDD],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.tableDDController.countDD()
2019-05-15 09:26:52 -Mapped "{[/charts/tableElecMM/exportElecMM],methods=[GET]}" onto public void com.bootdo.charts.controller.tableElecMMController.exportElecMM(com.bootdo.elec.vo.ElecVo,com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse)
2019-05-15 09:26:52 -Mapped "{[/charts/tableElecMM],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.tableElecMMController.tableElecMM()
2019-05-15 09:26:52 -Mapped "{[/charts/tableElecMM/tableElecMM],methods=[POST]}" onto public java.util.Map com.bootdo.charts.controller.tableElecMMController.tableElecMM(com.bootdo.elec.vo.ElecVo,com.bootdo.moneyLog.vo.ElecLogVo)
2019-05-15 09:26:52 -Mapped "{[/charts/tableElecYY],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.tableElecYYController.tableElecYY()
2019-05-15 09:26:52 -Mapped "{[/charts/tableElecYY/getCountYY],methods=[POST]}" onto public java.util.Map com.bootdo.charts.controller.tableElecYYController.getCountYY(com.bootdo.elec.vo.ElecVo,com.bootdo.moneyLog.vo.ElecLogVo)
2019-05-15 09:26:52 -Mapped "{[/charts/tableElecYY/exportElecYY],methods=[GET]}" onto public void com.bootdo.charts.controller.tableElecYYController.exportElecYY(com.bootdo.elec.vo.ElecVo,com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse)
2019-05-15 09:26:52 -Mapped "{[/charts/tableHeatMM/tableHeatMM],methods=[POST]}" onto public java.util.Map com.bootdo.charts.controller.tableHeatMMController.tableHeatMM(com.bootdo.heat.vo.HeatVo,com.bootdo.moneyLog.vo.HeatLogVo)
2019-05-15 09:26:52 -Mapped "{[/charts/tableHeatMM],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.tableHeatMMController.tableHeatMM()
2019-05-15 09:26:52 -Mapped "{[/charts/tableHeatMM/exportHeatMM],methods=[GET]}" onto public void com.bootdo.charts.controller.tableHeatMMController.exportHeatMM(com.bootdo.heat.vo.HeatVo,com.bootdo.moneyLog.vo.HeatLogVo,javax.servlet.http.HttpServletResponse)
2019-05-15 09:26:52 -Mapped "{[/charts/tableHeatYY/getCountYY],methods=[POST]}" onto public java.util.Map com.bootdo.charts.controller.tableHeatYYController.getCountMM(com.bootdo.heat.vo.HeatVo,com.bootdo.moneyLog.vo.HeatLogVo)
2019-05-15 09:26:52 -Mapped "{[/charts/tableHeatYY],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.tableHeatYYController.tableHeatYY()
2019-05-15 09:26:52 -Mapped "{[/charts/tableHeatYY/exportHeatYY],methods=[GET]}" onto public void com.bootdo.charts.controller.tableHeatYYController.exportHeatYY(com.bootdo.heat.vo.HeatVo,com.bootdo.moneyLog.vo.HeatLogVo,javax.servlet.http.HttpServletResponse)
2019-05-15 09:26:52 -Mapped "{[/charts/tableWaterMM/tableWaterMM],methods=[POST]}" onto public java.util.Map com.bootdo.charts.controller.tableWaterMMController.tableWaterMM(com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.water.vo.WaterVo)
2019-05-15 09:26:52 -Mapped "{[/charts/tableWaterMM],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.tableWaterMMController.tableWaterMM()
2019-05-15 09:26:52 -Mapped "{[/charts/tableWaterMM/exportWaterMM],methods=[GET]}" onto public void com.bootdo.charts.controller.tableWaterMMController.exportWaterMM(com.bootdo.water.vo.WaterVo,com.bootdo.moneyLog.vo.WaterLogVo,javax.servlet.http.HttpServletResponse)
2019-05-15 09:26:52 -Mapped "{[/charts/tableWaterYY/tableWaterYY],methods=[POST]}" onto public java.util.Map com.bootdo.charts.controller.tableWaterYYController.tableWaterYY(com.bootdo.water.vo.WaterVo,com.bootdo.moneyLog.vo.WaterLogVo)
2019-05-15 09:26:52 -Mapped "{[/charts/tableWaterYY],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.tableWaterYYController.tableWaterYY()
2019-05-15 09:26:52 -Mapped "{[/charts/tableWaterYY/exportWaterYY],methods=[GET]}" onto public void com.bootdo.charts.controller.tableWaterYYController.exportWaterYY(com.bootdo.water.vo.WaterVo,com.bootdo.moneyLog.vo.WaterLogVo,javax.servlet.http.HttpServletResponse)
2019-05-15 09:26:52 -Mapped "{[/common/dict/add],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.add()
2019-05-15 09:26:52 -Mapped "{[/common/dict/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.remove(java.lang.Long)
2019-05-15 09:26:52 -Mapped "{[/common/dict/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.remove(java.lang.Long[])
2019-05-15 09:26:52 -Mapped "{[/common/dict/update]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.update(com.bootdo.common.domain.DictDO)
2019-05-15 09:26:52 -Mapped "{[/common/dict/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.common.controller.DictController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 09:26:52 -Mapped "{[/common/dict/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.save(com.bootdo.common.domain.DictDO)
2019-05-15 09:26:52 -Mapped "{[/common/dict/type],methods=[GET]}" onto public java.util.List<com.bootdo.common.domain.DictDO> com.bootdo.common.controller.DictController.listType()
2019-05-15 09:26:52 -Mapped "{[/common/dict/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.edit(java.lang.Long,org.springframework.ui.Model)
2019-05-15 09:26:52 -Mapped "{[/common/dict],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.dict()
2019-05-15 09:26:52 -Mapped "{[/common/dict/add/{type}/{description}],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.addD(org.springframework.ui.Model,java.lang.String,java.lang.String)
2019-05-15 09:26:52 -Mapped "{[/common/dict/list/{type}],methods=[GET]}" onto public java.util.List<com.bootdo.common.domain.DictDO> com.bootdo.common.controller.DictController.listByType(java.lang.String)
2019-05-15 09:26:52 -Mapped "{[/common/sysFile/add],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.FileController.add()
2019-05-15 09:26:52 -Mapped "{[/common/sysFile/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.remove(java.lang.Long,javax.servlet.http.HttpServletRequest)
2019-05-15 09:26:52 -Mapped "{[/common/sysFile/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.remove(java.lang.Long[])
2019-05-15 09:26:52 -Mapped "{[/common/sysFile/update]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.update(com.bootdo.common.domain.FileDO)
2019-05-15 09:26:52 -Mapped "{[/common/sysFile/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.common.controller.FileController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 09:26:52 -Mapped "{[/common/sysFile/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.save(com.bootdo.common.domain.FileDO)
2019-05-15 09:26:52 -Mapped "{[/common/sysFile/info/{id}]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.info(java.lang.Long)
2019-05-15 09:26:52 -Mapped "{[/common/sysFile/edit],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.FileController.edit(java.lang.Long,org.springframework.ui.Model)
2019-05-15 09:26:52 -Mapped "{[/common/sysFile],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.FileController.sysFile(org.springframework.ui.Model)
2019-05-15 09:26:52 -Mapped "{[/common/sysFile/upload],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.FileController.upload(org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpServletRequest)
2019-05-15 09:26:52 -Mapped "{[/common/generator/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.GeneratorController.update(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 09:26:52 -Mapped "{[/common/generator/list],methods=[GET]}" onto java.util.List<java.util.Map<java.lang.String, java.lang.Object>> com.bootdo.common.controller.GeneratorController.list()
2019-05-15 09:26:52 -Mapped "{[/common/generator/code/{tableName}]}" onto public void com.bootdo.common.controller.GeneratorController.code(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String) throws java.io.IOException
2019-05-15 09:26:52 -Mapped "{[/common/generator],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.GeneratorController.generator()
2019-05-15 09:26:52 -Mapped "{[/common/generator/edit],methods=[GET]}" onto public java.lang.String com.bootdo.common.controller.GeneratorController.edit(org.springframework.ui.Model)
2019-05-15 09:26:52 -Mapped "{[/common/generator/batchCode]}" onto public void com.bootdo.common.controller.GeneratorController.batchCode(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String) throws java.io.IOException
2019-05-15 09:26:52 -Mapped "{[/common/job/add],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.JobController.add()
2019-05-15 09:26:52 -Mapped "{[/common/job/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.remove(java.lang.Long)
2019-05-15 09:26:53 -Mapped "{[/common/job/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.remove(java.lang.Long[])
2019-05-15 09:26:53 -Mapped "{[/common/job/update],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.update(com.bootdo.common.domain.TaskDO)
2019-05-15 09:26:53 -Mapped "{[/common/job/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.common.controller.JobController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 09:26:53 -Mapped "{[/common/job/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.save(com.bootdo.common.domain.TaskDO)
2019-05-15 09:26:53 -Mapped "{[/common/job/info/{id}]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.info(java.lang.Long)
2019-05-15 09:26:53 -Mapped "{[/common/job/changeJobStatus],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.changeJobStatus(java.lang.Long,java.lang.String)
2019-05-15 09:26:53 -Mapped "{[/common/job],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.JobController.taskScheduleJob()
2019-05-15 09:26:53 -Mapped "{[/common/job/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.JobController.edit(java.lang.Long,org.springframework.ui.Model)
2019-05-15 09:26:53 -Mapped "{[/common/log/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.LogController.remove(java.lang.Long)
2019-05-15 09:26:53 -Mapped "{[/common/log],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.LogController.log()
2019-05-15 09:26:53 -Mapped "{[/common/log/list],methods=[GET]}" onto com.bootdo.common.domain.PageDO<com.bootdo.common.domain.LogDO> com.bootdo.common.controller.LogController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 09:26:53 -Mapped "{[/common/log/batchRemove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.LogController.batchRemove(java.lang.Long[])
2019-05-15 09:26:53 -Mapped "{[/common/long],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.LongController.Long()
2019-05-15 09:26:53 -Mapped "{[/common/time],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.TimeController.Time()
2019-05-15 09:26:53 -Mapped "{[/error]}" onto public com.bootdo.common.utils.R com.bootdo.common.exception.MainsiteErrorController.handleError(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-05-15 09:26:53 -Mapped "{[/error],produces=[text/html]}" onto public org.springframework.web.servlet.ModelAndView com.bootdo.common.exception.MainsiteErrorController.errorHtml(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-05-15 09:26:53 -Mapped "{[/elec/elec/add],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecController.add()
2019-05-15 09:26:53 -Mapped "{[/elec/elec/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.remove(java.lang.Long)
2019-05-15 09:26:53 -Mapped "{[/elec/elec/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.remove(java.lang.Long[])
2019-05-15 09:26:53 -Mapped "{[/elec/elec/update],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.update(com.bootdo.elec.domain.ElecDO)
2019-05-15 09:26:53 -Mapped "{[/elec/elec/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.elec.controller.ElecController.list(java.util.Map<java.lang.String, java.lang.Object>,com.bootdo.elec.domain.ElecDO)
2019-05-15 09:26:53 -Mapped "{[/elec/elec/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.save(com.bootdo.elec.domain.ElecDO)
2019-05-15 09:26:53 -Mapped "{[/elec/elec/WxElecUpdate],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.WxElecUpdate(com.bootdo.elec.domain.ElecDO)
2019-05-15 09:26:53 -Mapped "{[/elec/elec/exprotElec],methods=[GET]}" onto public void com.bootdo.elec.controller.ElecController.exprotExcel(com.bootdo.elec.vo.ElecVo,javax.servlet.http.HttpServletResponse)
2019-05-15 09:26:53 -Mapped "{[/elec/elec/YhElecUpdate],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.YhElecUpdate(com.bootdo.elec.domain.ElecDO)
2019-05-15 09:26:53 -Mapped "{[/elec/elec],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecController.Elec()
2019-05-15 09:26:53 -Mapped "{[/elec/elec/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecController.edit(java.lang.Long,org.springframework.ui.Model)
2019-05-15 09:26:53 -Mapped "{[/elec/elecInto/exprotElecIntoExcel],methods=[GET]}" onto public void com.bootdo.elec.controller.ElecIntoController.exprotExcel(com.bootdo.elec.vo.ElecVo,javax.servlet.http.HttpServletResponse)
2019-05-15 09:26:53 -Mapped "{[/elec/elecInto],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecIntoController.ElecInto()
2019-05-15 09:26:53 -Mapped "{[/elec/elecInto/importElecIntoExcel],methods=[POST]}" onto public java.lang.String com.bootdo.elec.controller.ElecIntoController.importElecIntoExcel(org.springframework.web.multipart.MultipartFile,com.bootdo.elec.vo.ElecVo,javax.servlet.http.HttpServletResponse) throws java.lang.Exception
2019-05-15 09:26:53 -Mapped "{[/elec/elecPrice/add],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecPriceController.add()
2019-05-15 09:26:53 -Mapped "{[/elec/elecPrice/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecPriceController.remove(java.lang.Long)
2019-05-15 09:26:53 -Mapped "{[/elec/elecPrice/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecPriceController.remove(java.lang.Long[])
2019-05-15 09:26:53 -Mapped "{[/elec/elecPrice/update]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecPriceController.update(com.bootdo.elec.domain.ElecPriceDO)
2019-05-15 09:26:53 -Mapped "{[/elec/elecPrice/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.elec.controller.ElecPriceController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 09:26:53 -Mapped "{[/elec/elecPrice/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecPriceController.save(com.bootdo.elec.domain.ElecPriceDO,com.bootdo.elec.domain.ElecDO)
2019-05-15 09:26:53 -Mapped "{[/elec/elecPrice],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecPriceController.ElecPrice()
2019-05-15 09:26:53 -Mapped "{[/elec/elecPrice/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecPriceController.edit(java.lang.Long,org.springframework.ui.Model)
2019-05-15 09:26:53 -Mapped "{[/elec/elecUpLoad],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecUpLoadController.Elec()
2019-05-15 09:26:53 -Mapped "{[/elec/elecUpLoad/importElecExcel],methods=[POST]}" onto public java.util.Map<java.lang.String, java.lang.Object> com.bootdo.elec.controller.ElecUpLoadController.importElecExcel(org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpServletRequest) throws java.lang.Exception
2019-05-15 09:26:53 -Mapped "{[/elec/elecUpLoad/exprotElecExcel],methods=[GET]}" onto public void com.bootdo.elec.controller.ElecUpLoadController.exprotElecExcel(com.bootdo.elec.vo.ElecVo,javax.servlet.http.HttpServletResponse)
2019-05-15 09:26:53 -Mapped "{[/heat/heat/add],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatController.add()
2019-05-15 09:26:53 -Mapped "{[/heat/heat/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatController.remove(java.lang.Integer)
2019-05-15 09:26:53 -Mapped "{[/heat/heat/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatController.remove(java.lang.Integer[])
2019-05-15 09:26:53 -Mapped "{[/heat/heat/update]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatController.update(com.bootdo.heat.domain.HeatDO)
2019-05-15 09:26:53 -Mapped "{[/heat/heat/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.heat.controller.HeatController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 09:26:53 -Mapped "{[/heat/heat/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatController.save(com.bootdo.heat.domain.HeatDO)
2019-05-15 09:26:53 -Mapped "{[/heat/heat/exprotHeat],methods=[GET]}" onto public void com.bootdo.heat.controller.HeatController.exprotExcel(com.bootdo.heat.vo.HeatVo,javax.servlet.http.HttpServletResponse)
2019-05-15 09:26:53 -Mapped "{[/heat/heat],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatController.Heat()
2019-05-15 09:26:53 -Mapped "{[/heat/heat/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatController.edit(java.lang.Integer,org.springframework.ui.Model)
2019-05-15 09:26:53 -Mapped "{[/heat/heatInto/exprotHeatIntoExcel],methods=[GET]}" onto public void com.bootdo.heat.controller.HeatIntoController.exprotExcel(com.bootdo.heat.vo.HeatVo,javax.servlet.http.HttpServletResponse)
2019-05-15 09:26:53 -Mapped "{[/heat/heatInto],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatIntoController.HeatInto()
2019-05-15 09:26:53 -Mapped "{[/heat/heatInto/importHeatIntoExcel],methods=[POST]}" onto public java.lang.String com.bootdo.heat.controller.HeatIntoController.importHeatIntoExcel(org.springframework.web.multipart.MultipartFile,com.bootdo.heat.vo.HeatVo,javax.servlet.http.HttpServletResponse) throws java.lang.Exception
2019-05-15 09:26:53 -Mapped "{[/heat/heatPrice/add],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatPriceController.add()
2019-05-15 09:26:53 -Mapped "{[/heat/heatPrice/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatPriceController.remove(java.lang.Long)
2019-05-15 09:26:53 -Mapped "{[/heat/heatPrice/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatPriceController.remove(java.lang.Long[])
2019-05-15 09:26:53 -Mapped "{[/heat/heatPrice/update]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatPriceController.update(com.bootdo.heat.domain.HeatPriceDO)
2019-05-15 09:26:53 -Mapped "{[/heat/heatPrice/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.heat.controller.HeatPriceController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 09:26:53 -Mapped "{[/heat/heatPrice/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatPriceController.save(com.bootdo.heat.domain.HeatPriceDO)
2019-05-15 09:26:53 -Mapped "{[/heat/heatPrice],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatPriceController.HeatPrice()
2019-05-15 09:26:53 -Mapped "{[/heat/heatPrice/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatPriceController.edit(java.lang.Long,org.springframework.ui.Model)
2019-05-15 09:26:53 -Mapped "{[/heat/heatUpLoad],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatUpLoadController.HeatUpLoad()
2019-05-15 09:26:53 -Mapped "{[/heat/heatUpLoad/createHeatExcel],methods=[POST]}" onto public java.lang.String com.bootdo.heat.controller.HeatUpLoadController.createHeatExcel(com.bootdo.heat.domain.HeatDO) throws java.lang.Exception
2019-05-15 09:26:53 -Mapped "{[/heat/heatUpLoad/importHeatExcel]}" onto public java.lang.String com.bootdo.heat.controller.HeatUpLoadController.importHeatExcel(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)
2019-05-15 09:26:53 -Mapped "{[/heat/heatUpLoad/exprotHeatExcel],methods=[GET]}" onto public void com.bootdo.heat.controller.HeatUpLoadController.exprotHeatExcel(com.bootdo.heat.vo.HeatVo,javax.servlet.http.HttpServletResponse)
2019-05-15 09:26:53 -Mapped "{[/moneyList/moneyList/queryAllUserName],methods=[POST]}" onto public java.util.List<com.bootdo.moneyList.damain.MoneyListDO> com.bootdo.moneyList.controller.MoneyListController.getAllUserName(com.bootdo.moneyList.damain.MoneyListDO)
2019-05-15 09:26:53 -Mapped "{[/moneyList/moneyList],methods=[GET]}" onto java.lang.String com.bootdo.moneyList.controller.MoneyListController.MoneyList()
2019-05-15 09:26:53 -Mapped "{[/moneyList/moneyList/queryAllUser],methods=[POST]}" onto public java.util.List<com.bootdo.moneyList.damain.MoneyListDO> com.bootdo.moneyList.controller.MoneyListController.queryAllUser(com.bootdo.moneyList.damain.MoneyListDO)
2019-05-15 09:26:53 -Mapped "{[/moneyList/moneyList/updateMoney],methods=[POST]}" onto public java.lang.String com.bootdo.moneyList.controller.MoneyListController.updateMoney(com.bootdo.moneyList.damain.MoneyListDO)
2019-05-15 09:26:53 -Mapped "{[/moneyLog/elecLog/add],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.ElecLogController.add()
2019-05-15 09:26:53 -Mapped "{[/moneyLog/elecLog/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.ElecLogController.remove(java.lang.Long)
2019-05-15 09:26:53 -Mapped "{[/moneyLog/elecLog/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.ElecLogController.remove(java.lang.Long[])
2019-05-15 09:26:53 -Mapped "{[/moneyLog/elecLog/update]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.ElecLogController.update(java.util.Map<java.lang.String, java.lang.Object>,com.bootdo.moneyLog.domain.ElecLogDO)
2019-05-15 09:26:53 -Mapped "{[/moneyLog/elecLog/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.moneyLog.controller.ElecLogController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 09:26:53 -Mapped "{[/moneyLog/elecLog/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.ElecLogController.save(com.bootdo.moneyLog.domain.ElecLogDO)
2019-05-15 09:26:53 -Mapped "{[/moneyLog/elecLog],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.ElecLogController.moneyLog()
2019-05-15 09:26:53 -Mapped "{[/moneyLog/elecLog/exprotElecLog],methods=[GET]}" onto public void com.bootdo.moneyLog.controller.ElecLogController.exprotElecLog(com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-05-15 09:26:53 -Mapped "{[/moneyLog/elecLog/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.ElecLogController.edit(java.lang.Long,org.springframework.ui.Model)
2019-05-15 09:26:53 -Mapped "{[/moneyLog/heatLog/add],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.HeatLogController.add()
2019-05-15 09:26:53 -Mapped "{[/moneyLog/heatLog/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.HeatLogController.remove(java.lang.Long)
2019-05-15 09:26:53 -Mapped "{[/moneyLog/heatLog/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.HeatLogController.remove(java.lang.Long[])
2019-05-15 09:26:53 -Mapped "{[/moneyLog/heatLog/update]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.HeatLogController.update(java.util.Map<java.lang.String, java.lang.Object>,com.bootdo.moneyLog.domain.HeatLogDO)
2019-05-15 09:26:53 -Mapped "{[/moneyLog/heatLog/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.moneyLog.controller.HeatLogController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 09:26:53 -Mapped "{[/moneyLog/heatLog/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.HeatLogController.save(com.bootdo.moneyLog.domain.HeatLogDO)
2019-05-15 09:26:53 -Mapped "{[/moneyLog/heatLog/exprotHeatLog],methods=[GET]}" onto public void com.bootdo.moneyLog.controller.HeatLogController.exprotHeatLog(com.bootdo.moneyLog.vo.HeatLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-05-15 09:26:53 -Mapped "{[/moneyLog/heatLog],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.HeatLogController.HeatLog()
2019-05-15 09:26:53 -Mapped "{[/moneyLog/heatLog/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.HeatLogController.edit(java.lang.Long,org.springframework.ui.Model)
2019-05-15 09:26:53 -Mapped "{[/moneyLog/waterLog/add],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.WaterLogController.add()
2019-05-15 09:26:53 -Mapped "{[/moneyLog/waterLog/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.WaterLogController.remove(java.lang.Long)
2019-05-15 09:26:53 -Mapped "{[/moneyLog/waterLog/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.WaterLogController.remove(java.lang.Long[])
2019-05-15 09:26:53 -Mapped "{[/moneyLog/waterLog/update]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.WaterLogController.update(java.util.Map<java.lang.String, java.lang.Object>,com.bootdo.moneyLog.domain.WaterLogDO)
2019-05-15 09:26:53 -Mapped "{[/moneyLog/waterLog/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.moneyLog.controller.WaterLogController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 09:26:53 -Mapped "{[/moneyLog/waterLog/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.WaterLogController.save(com.bootdo.moneyLog.domain.WaterLogDO)
2019-05-15 09:26:53 -Mapped "{[/moneyLog/waterLog],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.WaterLogController.WaterLog()
2019-05-15 09:26:53 -Mapped "{[/moneyLog/waterLog/exprotWaterLog],methods=[GET]}" onto public void com.bootdo.moneyLog.controller.WaterLogController.exprotWaterLog(com.bootdo.moneyLog.vo.WaterLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-05-15 09:26:53 -Mapped "{[/moneyLog/waterLog/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.WaterLogController.edit(java.lang.Long,org.springframework.ui.Model)
2019-05-15 09:26:53 -Mapped "{[/oa/notify/add],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.add()
2019-05-15 09:26:53 -Mapped "{[/oa/notify/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.remove(java.lang.Long)
2019-05-15 09:26:53 -Mapped "{[/oa/notify/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.remove(java.lang.Long[])
2019-05-15 09:26:53 -Mapped "{[/oa/notify/update]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.update(com.bootdo.oa.domain.NotifyDO)
2019-05-15 09:26:53 -Mapped "{[/oa/notify/read/{id}],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.read(java.lang.Long,org.springframework.ui.Model)
2019-05-15 09:26:53 -Mapped "{[/oa/notify/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.oa.controller.NotifyController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 09:26:53 -Mapped "{[/oa/notify/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.save(com.bootdo.oa.domain.NotifyDO)
2019-05-15 09:26:53 -Mapped "{[/oa/notify/message],methods=[GET]}" onto com.bootdo.common.utils.PageUtils com.bootdo.oa.controller.NotifyController.message()
2019-05-15 09:26:53 -Mapped "{[/oa/notify],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.oaNotify()
2019-05-15 09:26:53 -Mapped "{[/oa/notify/selfList],methods=[GET]}" onto com.bootdo.common.utils.PageUtils com.bootdo.oa.controller.NotifyController.selfList(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 09:26:53 -Mapped "{[/oa/notify/selfNotify],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.selefNotify()
2019-05-15 09:26:53 -Mapped "{[/oa/notify/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.edit(java.lang.Long,org.springframework.ui.Model)
2019-05-15 09:26:53 -Mapped "{[/print/print/add],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.add()
2019-05-15 09:26:53 -Mapped "{[/print/print/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.print.controller.PrintController.remove(java.lang.Long)
2019-05-15 09:26:53 -Mapped "{[/print/print/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.print.controller.PrintController.remove(java.lang.Long[])
2019-05-15 09:26:53 -Mapped "{[/print/print/update]}" onto public com.bootdo.common.utils.R com.bootdo.print.controller.PrintController.update(com.bootdo.print.domain.PrintDO)
2019-05-15 09:26:53 -Mapped "{[/print/print/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.print.controller.PrintController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 09:26:53 -Mapped "{[/print/print/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.print.controller.PrintController.save(java.lang.String,com.bootdo.print.domain.PrintDO)
2019-05-15 09:26:53 -Mapped "{[/print/print],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.Print()
2019-05-15 09:26:53 -Mapped "{[/print/print/printMoney],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.printMoney()
2019-05-15 09:26:53 -Mapped "{[/print/print/exprotPrint],methods=[GET]}" onto public void com.bootdo.print.controller.PrintController.exprotPrint(com.bootdo.print.vo.PrintVo,javax.servlet.http.HttpServletResponse)
2019-05-15 09:26:53 -Mapped "{[/print/print/printEdit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.printEdit(java.lang.Long,org.springframework.ui.Model)
2019-05-15 09:26:53 -Mapped "{[/print/print/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.edit(java.lang.Long,org.springframework.ui.Model)
2019-05-15 09:26:53 -Mapped "{[/system/sysDept/add/{pId}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.add(java.lang.Long,org.springframework.ui.Model)
2019-05-15 09:26:53 -Mapped "{[/system/sysDept/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.remove(java.lang.Long)
2019-05-15 09:26:53 -Mapped "{[/system/sysDept/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.remove(java.lang.Long[])
2019-05-15 09:26:53 -Mapped "{[/system/sysDept/update]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.update(com.bootdo.system.domain.DeptDO)
2019-05-15 09:26:53 -Mapped "{[/system/sysDept/list],methods=[GET]}" onto public java.util.List<com.bootdo.system.domain.DeptDO> com.bootdo.system.controller.DeptController.list()
2019-05-15 09:26:53 -Mapped "{[/system/sysDept/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.save(com.bootdo.system.domain.DeptDO)
2019-05-15 09:26:53 -Mapped "{[/system/sysDept/tree],methods=[GET]}" onto public com.bootdo.common.domain.Tree<com.bootdo.system.domain.DeptDO> com.bootdo.system.controller.DeptController.tree()
2019-05-15 09:26:53 -Mapped "{[/system/sysDept],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.dept()
2019-05-15 09:26:53 -Mapped "{[/system/sysDept/edit/{deptId}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.edit(java.lang.Long,org.springframework.ui.Model)
2019-05-15 09:26:53 -Mapped "{[/system/sysDept/treeView],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.treeView()
2019-05-15 09:26:53 -Mapped "{[/index],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.index(org.springframework.ui.Model)
2019-05-15 09:26:53 -Mapped "{[/main],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.main()
2019-05-15 09:26:53 -Mapped "{[/login],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.login(org.springframework.ui.Model)
2019-05-15 09:26:53 -Mapped "{[/logout],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.logout()
2019-05-15 09:26:53 -Mapped "{[/login],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.LoginController.ajaxLogin(java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest)
2019-05-15 09:26:53 -Mapped "{[/getVerify],methods=[GET]}" onto public void com.bootdo.system.controller.LoginController.getVerify(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-05-15 09:26:53 -Mapped "{[/ || ],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.welcome(org.springframework.ui.Model)
2019-05-15 09:26:53 -Mapped "{[/sys/menu/add/{pId}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.MenuController.add(org.springframework.ui.Model,java.lang.Long)
2019-05-15 09:26:53 -Mapped "{[/sys/menu/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.MenuController.remove(java.lang.Long)
2019-05-15 09:26:53 -Mapped "{[/sys/menu/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.MenuController.update(com.bootdo.system.domain.MenuDO)
2019-05-15 09:26:53 -Mapped "{[/sys/menu/list]}" onto java.util.List<com.bootdo.system.domain.MenuDO> com.bootdo.system.controller.MenuController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 09:26:53 -Mapped "{[/sys/menu/save],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.MenuController.save(com.bootdo.system.domain.MenuDO)
2019-05-15 09:26:53 -Mapped "{[/sys/menu/tree/{roleId}],methods=[GET]}" onto com.bootdo.common.domain.Tree<com.bootdo.system.domain.MenuDO> com.bootdo.system.controller.MenuController.tree(java.lang.Long)
2019-05-15 09:26:53 -Mapped "{[/sys/menu/tree],methods=[GET]}" onto com.bootdo.common.domain.Tree<com.bootdo.system.domain.MenuDO> com.bootdo.system.controller.MenuController.tree()
2019-05-15 09:26:53 -Mapped "{[/sys/menu/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.MenuController.edit(org.springframework.ui.Model,java.lang.Long)
2019-05-15 09:26:53 -Mapped "{[/sys/menu],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.MenuController.menu(org.springframework.ui.Model)
2019-05-15 09:26:53 -Mapped "{[/sys/role/add],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.RoleController.add()
2019-05-15 09:26:53 -Mapped "{[/sys/role/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.update(com.bootdo.system.domain.RoleDO)
2019-05-15 09:26:53 -Mapped "{[/sys/role/list],methods=[GET]}" onto java.util.List<com.bootdo.system.domain.RoleDO> com.bootdo.system.controller.RoleController.list()
2019-05-15 09:26:53 -Mapped "{[/sys/role/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.save(java.lang.Long)
2019-05-15 09:26:53 -Mapped "{[/sys/role/save],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.save(com.bootdo.system.domain.RoleDO)
2019-05-15 09:26:53 -Mapped "{[/sys/role/batchRemove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.batchRemove(java.lang.Long[])
2019-05-15 09:26:53 -Mapped "{[/sys/role],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.RoleController.role()
2019-05-15 09:26:53 -Mapped "{[/sys/role/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.RoleController.edit(java.lang.Long,org.springframework.ui.Model)
2019-05-15 09:26:53 -Mapped "{[/sys/online/list]}" onto public java.util.List<com.bootdo.system.domain.UserOnline> com.bootdo.system.controller.SessionController.list()
2019-05-15 09:26:53 -Mapped "{[/sys/online],methods=[GET]}" onto public java.lang.String com.bootdo.system.controller.SessionController.online()
2019-05-15 09:26:53 -Mapped "{[/sys/online/sessionList]}" onto public java.util.Collection<org.apache.shiro.session.Session> com.bootdo.system.controller.SessionController.sessionList()
2019-05-15 09:26:53 -Mapped "{[/sys/online/forceLogout/{sessionId}]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.SessionController.forceLogout(java.lang.String,org.springframework.web.servlet.mvc.support.RedirectAttributes)
2019-05-15 09:26:53 -Mapped "{[/sys/user/exit],methods=[POST]}" onto boolean com.bootdo.system.controller.UserController.exit(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 09:26:53 -Mapped "{[/sys/user/add],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.add(org.springframework.ui.Model)
2019-05-15 09:26:53 -Mapped "{[/sys/user/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.remove(java.lang.Long)
2019-05-15 09:26:53 -Mapped "{[/sys/user/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.update(com.bootdo.system.domain.UserDO)
2019-05-15 09:26:53 -Mapped "{[/sys/user/list],methods=[GET]}" onto com.bootdo.common.utils.PageUtils com.bootdo.system.controller.UserController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 09:26:53 -Mapped "{[/sys/user/save],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.save(com.bootdo.system.domain.UserDO)
2019-05-15 09:26:53 -Mapped "{[/sys/user/batchRemove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.batchRemove(java.lang.Long[])
2019-05-15 09:26:53 -Mapped "{[/sys/user/tree],methods=[GET]}" onto public com.bootdo.common.domain.Tree<com.bootdo.system.domain.DeptDO> com.bootdo.system.controller.UserController.tree()
2019-05-15 09:26:53 -Mapped "{[/sys/user],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.user(org.springframework.ui.Model)
2019-05-15 09:26:53 -Mapped "{[/sys/user/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.edit(org.springframework.ui.Model,java.lang.Long)
2019-05-15 09:26:53 -Mapped "{[/sys/user/treeView],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.treeView()
2019-05-15 09:26:53 -Mapped "{[/sys/user/uploadImg],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.uploadImg(org.springframework.web.multipart.MultipartFile,java.lang.String,javax.servlet.http.HttpServletRequest)
2019-05-15 09:26:53 -Mapped "{[/sys/user/personal],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.personal(org.springframework.ui.Model)
2019-05-15 09:26:53 -Mapped "{[/sys/user/adminResetPwd],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.adminResetPwd(com.bootdo.system.vo.UserVO)
2019-05-15 09:26:53 -Mapped "{[/sys/user/updatePeronal],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.updatePeronal(com.bootdo.system.domain.UserDO)
2019-05-15 09:26:53 -Mapped "{[/sys/user/resetPwd],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.resetPwd(com.bootdo.system.vo.UserVO)
2019-05-15 09:26:53 -Mapped "{[/sys/user/resetPwd/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.resetPwd(java.lang.Long,org.springframework.ui.Model)
2019-05-15 09:26:53 -Mapped "{[/file/downImport/{importType}],methods=[GET]}" onto public void com.bootdo.temple.controller.TempletController.downImport(javax.servlet.http.HttpServletResponse,java.lang.String)
2019-05-15 09:26:53 -Mapped "{[/water/water/add],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterController.add()
2019-05-15 09:26:53 -Mapped "{[/water/water/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterController.remove(java.lang.Long)
2019-05-15 09:26:53 -Mapped "{[/water/water/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterController.remove(java.lang.Long[])
2019-05-15 09:26:53 -Mapped "{[/water/water/update]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterController.update(com.bootdo.water.domain.WaterDO)
2019-05-15 09:26:53 -Mapped "{[/water/water/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.water.controller.WaterController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 09:26:53 -Mapped "{[/water/water/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterController.save(com.bootdo.water.domain.WaterDO)
2019-05-15 09:26:53 -Mapped "{[/water/water/exprotWater],methods=[GET]}" onto public void com.bootdo.water.controller.WaterController.exprotExcel(com.bootdo.water.vo.WaterVo,javax.servlet.http.HttpServletResponse)
2019-05-15 09:26:53 -Mapped "{[/water/water/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterController.edit(java.lang.Long,org.springframework.ui.Model)
2019-05-15 09:26:53 -Mapped "{[/water/water],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterController.Water()
2019-05-15 09:26:53 -Mapped "{[/water/waterInto/importWaterIntoExcel],methods=[POST]}" onto public java.lang.String com.bootdo.water.controller.WaterIntoController.importWaterIntoExcel(org.springframework.web.multipart.MultipartFile,com.bootdo.water.vo.WaterVo,javax.servlet.http.HttpServletResponse) throws java.lang.Exception
2019-05-15 09:26:53 -Mapped "{[/water/waterInto/exprotWaterIntoExcel],methods=[GET]}" onto public void com.bootdo.water.controller.WaterIntoController.exprotExcel(com.bootdo.water.vo.WaterVo,javax.servlet.http.HttpServletResponse)
2019-05-15 09:26:53 -Mapped "{[/water/waterInto],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterIntoController.WaterInto()
2019-05-15 09:26:53 -Mapped "{[/water/waterPrice/add],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterPriceController.add()
2019-05-15 09:26:53 -Mapped "{[/water/waterPrice/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterPriceController.remove(java.lang.Long)
2019-05-15 09:26:53 -Mapped "{[/water/waterPrice/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterPriceController.remove(java.lang.Long[])
2019-05-15 09:26:53 -Mapped "{[/water/waterPrice/update]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterPriceController.update(com.bootdo.water.domain.WaterPriceDO,com.bootdo.water.domain.WaterDO)
2019-05-15 09:26:53 -Mapped "{[/water/waterPrice/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.water.controller.WaterPriceController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 09:26:53 -Mapped "{[/water/waterPrice/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterPriceController.save(com.bootdo.water.domain.WaterPriceDO)
2019-05-15 09:26:53 -Mapped "{[/water/waterPrice/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterPriceController.edit(java.lang.Long,org.springframework.ui.Model)
2019-05-15 09:26:53 -Mapped "{[/water/waterPrice],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterPriceController.WaterPrice()
2019-05-15 09:26:53 -Mapped "{[/water/waterUpLoad],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterUpLoadController.WaterUpLoad()
2019-05-15 09:26:53 -Mapped "{[/water/waterUpLoad/importWaterExcel]}" onto public java.lang.String com.bootdo.water.controller.WaterUpLoadController.importWaterExcel(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)
2019-05-15 09:26:53 -Mapped "{[/water/waterUpLoad/createWaterExcel],methods=[POST]}" onto public java.lang.String com.bootdo.water.controller.WaterUpLoadController.createWaterExcel(com.bootdo.water.domain.WaterDO) throws java.lang.Exception
2019-05-15 09:26:53 -Mapped "{[/water/waterUpLoad/exprotWaterExcel],methods=[GET]}" onto public void com.bootdo.water.controller.WaterUpLoadController.exprotWaterExcel(com.bootdo.water.vo.WaterVo,javax.servlet.http.HttpServletResponse)
2019-05-15 09:26:53 -Mapped "{[/v2/api-docs],methods=[GET],produces=[application/json || application/hal+json]}" onto public org.springframework.http.ResponseEntity<springfox.documentation.spring.web.json.Json> springfox.documentation.swagger2.web.Swagger2Controller.getDocumentation(java.lang.String,javax.servlet.http.HttpServletRequest)
2019-05-15 09:26:53 -Mapped "{[/swagger-resources/configuration/ui]}" onto org.springframework.http.ResponseEntity<springfox.documentation.swagger.web.UiConfiguration> springfox.documentation.swagger.web.ApiResourceController.uiConfiguration()
2019-05-15 09:26:53 -Mapped "{[/swagger-resources]}" onto org.springframework.http.ResponseEntity<java.util.List<springfox.documentation.swagger.web.SwaggerResource>> springfox.documentation.swagger.web.ApiResourceController.swaggerResources()
2019-05-15 09:26:53 -Mapped "{[/swagger-resources/configuration/security]}" onto org.springframework.http.ResponseEntity<springfox.documentation.swagger.web.SecurityConfiguration> springfox.documentation.swagger.web.ApiResourceController.securityConfiguration()
2019-05-15 09:26:53 -Initializing ExecutorService  'messageBrokerTaskScheduler'
2019-05-15 09:26:53 -Mapped URL path [/endpointChat/**] onto handler of type [class org.springframework.web.socket.sockjs.support.SockJsHttpRequestHandler]
2019-05-15 09:26:53 -Initializing ExecutorService  'brokerChannelExecutor'
2019-05-15 09:26:54 -Mapped URL path [/**/favicon.ico] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-05-15 09:26:54 -Looking for @ControllerAdvice: org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@4d5650ae: startup date [Wed May 15 09:26:31 CST 2019]; root of context hierarchy
2019-05-15 09:26:54 -Mapped URL path [/webjars/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-05-15 09:26:54 -Mapped URL path [/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-05-15 09:26:54 -Mapped URL path [/files/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-05-15 09:26:55 -Detected @ExceptionHandler methods in BDExceptionHandler
2019-05-15 09:26:55 -[THYMELEAF][main] Template Mode 'LEGACYHTML5' is deprecated. Using Template Mode 'HTML' instead.
2019-05-15 09:26:57 -Registering beans for JMX exposure on startup
2019-05-15 09:26:57 -Bean with name 'dataSource' has been autodetected for JMX exposure
2019-05-15 09:26:57 -Located MBean 'dataSource': registering with JMX server as MBean [com.alibaba.druid.pool:name=dataSource,type=DruidDataSource]
2019-05-15 09:26:57 -Starting beans in phase 2147483647
2019-05-15 09:26:57 -Context refreshed
2019-05-15 09:26:57 -Found 1 custom documentation plugin(s)
2019-05-15 09:26:57 -Scanning for api listing references
2019-05-15 09:26:58 -Generating unique operation named: getCountDUsingPOST_1
2019-05-15 09:26:58 -Generating unique operation named: removeUsingPOST_1
2019-05-15 09:26:58 -Generating unique operation named: addUsingGET_1
2019-05-15 09:26:58 -Generating unique operation named: editUsingGET_1
2019-05-15 09:26:58 -Generating unique operation named: listUsingGET_1
2019-05-15 09:26:58 -Generating unique operation named: removeUsingPOST_2
2019-05-15 09:26:58 -Generating unique operation named: removeUsingPOST_3
2019-05-15 09:26:58 -Generating unique operation named: saveUsingPOST_1
2019-05-15 09:26:58 -Generating unique operation named: updateUsingGET_1
2019-05-15 09:26:58 -Generating unique operation named: updateUsingHEAD_1
2019-05-15 09:26:58 -Generating unique operation named: updateUsingPOST_1
2019-05-15 09:26:58 -Generating unique operation named: updateUsingPUT_1
2019-05-15 09:26:58 -Generating unique operation named: updateUsingPATCH_1
2019-05-15 09:26:58 -Generating unique operation named: updateUsingDELETE_1
2019-05-15 09:26:58 -Generating unique operation named: updateUsingOPTIONS_1
2019-05-15 09:26:58 -Generating unique operation named: updateUsingTRACE_1
2019-05-15 09:26:58 -Generating unique operation named: addUsingGET_2
2019-05-15 09:26:58 -Generating unique operation named: editUsingGET_2
2019-05-15 09:26:58 -Generating unique operation named: listUsingGET_2
2019-05-15 09:26:58 -Generating unique operation named: removeUsingPOST_4
2019-05-15 09:26:58 -Generating unique operation named: removeUsingPOST_5
2019-05-15 09:26:58 -Generating unique operation named: saveUsingPOST_2
2019-05-15 09:26:58 -Generating unique operation named: updateUsingPOST_2
2019-05-15 09:26:58 -Generating unique operation named: exprotExcelUsingGET_1
2019-05-15 09:26:58 -Generating unique operation named: addUsingGET_3
2019-05-15 09:26:58 -Generating unique operation named: editUsingGET_3
2019-05-15 09:26:58 -Generating unique operation named: listUsingGET_3
2019-05-15 09:26:58 -Generating unique operation named: removeUsingPOST_6
2019-05-15 09:26:58 -Generating unique operation named: removeUsingPOST_7
2019-05-15 09:26:58 -Generating unique operation named: saveUsingPOST_3
2019-05-15 09:26:58 -Generating unique operation named: updateUsingGET_2
2019-05-15 09:26:58 -Generating unique operation named: updateUsingHEAD_2
2019-05-15 09:26:58 -Generating unique operation named: updateUsingPOST_3
2019-05-15 09:26:58 -Generating unique operation named: updateUsingPUT_2
2019-05-15 09:26:58 -Generating unique operation named: updateUsingPATCH_2
2019-05-15 09:26:58 -Generating unique operation named: updateUsingDELETE_2
2019-05-15 09:26:58 -Generating unique operation named: updateUsingOPTIONS_2
2019-05-15 09:26:58 -Generating unique operation named: updateUsingTRACE_2
2019-05-15 09:26:58 -Generating unique operation named: addUsingGET_4
2019-05-15 09:26:58 -Generating unique operation named: editUsingGET_4
2019-05-15 09:26:58 -Generating unique operation named: listUsingGET_4
2019-05-15 09:26:58 -Generating unique operation named: removeUsingPOST_8
2019-05-15 09:26:58 -Generating unique operation named: removeUsingPOST_9
2019-05-15 09:26:58 -Generating unique operation named: saveUsingPOST_4
2019-05-15 09:26:58 -Generating unique operation named: updateUsingGET_3
2019-05-15 09:26:58 -Generating unique operation named: updateUsingHEAD_3
2019-05-15 09:26:58 -Generating unique operation named: updateUsingPOST_4
2019-05-15 09:26:58 -Generating unique operation named: updateUsingPUT_3
2019-05-15 09:26:58 -Generating unique operation named: updateUsingPATCH_3
2019-05-15 09:26:58 -Generating unique operation named: updateUsingDELETE_3
2019-05-15 09:26:58 -Generating unique operation named: updateUsingOPTIONS_3
2019-05-15 09:26:58 -Generating unique operation named: updateUsingTRACE_3
2019-05-15 09:26:58 -Generating unique operation named: ElecUsingGET_1
2019-05-15 09:26:58 -Generating unique operation named: addUsingGET_5
2019-05-15 09:26:58 -Generating unique operation named: editUsingGET_5
2019-05-15 09:26:58 -Generating unique operation named: listUsingGET_5
2019-05-15 09:26:58 -Generating unique operation named: removeUsingPOST_10
2019-05-15 09:26:58 -Generating unique operation named: removeUsingPOST_11
2019-05-15 09:26:58 -Generating unique operation named: saveUsingPOST_5
2019-05-15 09:26:58 -Generating unique operation named: updateUsingGET_4
2019-05-15 09:26:58 -Generating unique operation named: updateUsingHEAD_4
2019-05-15 09:26:58 -Generating unique operation named: updateUsingPOST_5
2019-05-15 09:26:58 -Generating unique operation named: updateUsingPUT_4
2019-05-15 09:26:58 -Generating unique operation named: updateUsingPATCH_4
2019-05-15 09:26:58 -Generating unique operation named: updateUsingDELETE_4
2019-05-15 09:26:58 -Generating unique operation named: updateUsingOPTIONS_4
2019-05-15 09:26:58 -Generating unique operation named: updateUsingTRACE_4
2019-05-15 09:26:58 -Generating unique operation named: editUsingGET_6
2019-05-15 09:26:58 -Generating unique operation named: listUsingGET_6
2019-05-15 09:26:58 -Generating unique operation named: updateUsingPOST_6
2019-05-15 09:26:58 -Generating unique operation named: addUsingGET_6
2019-05-15 09:26:58 -Generating unique operation named: editUsingGET_7
2019-05-15 09:26:58 -Generating unique operation named: exprotExcelUsingGET_2
2019-05-15 09:26:58 -Generating unique operation named: listUsingGET_7
2019-05-15 09:26:58 -Generating unique operation named: removeUsingPOST_12
2019-05-15 09:26:58 -Generating unique operation named: removeUsingPOST_13
2019-05-15 09:26:58 -Generating unique operation named: saveUsingPOST_6
2019-05-15 09:26:58 -Generating unique operation named: updateUsingGET_5
2019-05-15 09:26:58 -Generating unique operation named: updateUsingHEAD_5
2019-05-15 09:26:58 -Generating unique operation named: updateUsingPOST_7
2019-05-15 09:26:58 -Generating unique operation named: updateUsingPUT_5
2019-05-15 09:26:58 -Generating unique operation named: updateUsingPATCH_5
2019-05-15 09:26:58 -Generating unique operation named: updateUsingDELETE_5
2019-05-15 09:26:58 -Generating unique operation named: updateUsingOPTIONS_5
2019-05-15 09:26:58 -Generating unique operation named: updateUsingTRACE_5
2019-05-15 09:26:58 -Generating unique operation named: exprotExcelUsingGET_3
2019-05-15 09:26:59 -Generating unique operation named: addUsingGET_7
2019-05-15 09:26:59 -Generating unique operation named: editUsingGET_8
2019-05-15 09:26:59 -Generating unique operation named: listUsingGET_8
2019-05-15 09:26:59 -Generating unique operation named: removeUsingPOST_14
2019-05-15 09:26:59 -Generating unique operation named: removeUsingPOST_15
2019-05-15 09:26:59 -Generating unique operation named: saveUsingPOST_7
2019-05-15 09:26:59 -Generating unique operation named: updateUsingGET_6
2019-05-15 09:26:59 -Generating unique operation named: updateUsingHEAD_6
2019-05-15 09:26:59 -Generating unique operation named: updateUsingPOST_8
2019-05-15 09:26:59 -Generating unique operation named: updateUsingPUT_6
2019-05-15 09:26:59 -Generating unique operation named: updateUsingPATCH_6
2019-05-15 09:26:59 -Generating unique operation named: updateUsingDELETE_6
2019-05-15 09:26:59 -Generating unique operation named: updateUsingOPTIONS_6
2019-05-15 09:26:59 -Generating unique operation named: updateUsingTRACE_6
2019-05-15 09:26:59 -Generating unique operation named: addUsingGET_8
2019-05-15 09:26:59 -Generating unique operation named: editUsingGET_9
2019-05-15 09:26:59 -Generating unique operation named: listUsingGET_9
2019-05-15 09:26:59 -Generating unique operation named: removeUsingPOST_16
2019-05-15 09:26:59 -Generating unique operation named: removeUsingPOST_17
2019-05-15 09:26:59 -Generating unique operation named: saveUsingPOST_8
2019-05-15 09:26:59 -Generating unique operation named: updateUsingGET_7
2019-05-15 09:26:59 -Generating unique operation named: updateUsingHEAD_7
2019-05-15 09:26:59 -Generating unique operation named: updateUsingPOST_9
2019-05-15 09:26:59 -Generating unique operation named: updateUsingPUT_7
2019-05-15 09:26:59 -Generating unique operation named: updateUsingPATCH_7
2019-05-15 09:26:59 -Generating unique operation named: updateUsingDELETE_7
2019-05-15 09:26:59 -Generating unique operation named: updateUsingOPTIONS_7
2019-05-15 09:26:59 -Generating unique operation named: updateUsingTRACE_7
2019-05-15 09:26:59 -Generating unique operation named: addUsingGET_9
2019-05-15 09:26:59 -Generating unique operation named: editUsingGET_10
2019-05-15 09:26:59 -Generating unique operation named: infoUsingGET_1
2019-05-15 09:26:59 -Generating unique operation named: infoUsingHEAD_1
2019-05-15 09:26:59 -Generating unique operation named: infoUsingPOST_1
2019-05-15 09:26:59 -Generating unique operation named: infoUsingPUT_1
2019-05-15 09:26:59 -Generating unique operation named: infoUsingPATCH_1
2019-05-15 09:26:59 -Generating unique operation named: infoUsingDELETE_1
2019-05-15 09:26:59 -Generating unique operation named: infoUsingOPTIONS_1
2019-05-15 09:26:59 -Generating unique operation named: infoUsingTRACE_1
2019-05-15 09:26:59 -Generating unique operation named: listUsingGET_10
2019-05-15 09:26:59 -Generating unique operation named: removeUsingPOST_18
2019-05-15 09:26:59 -Generating unique operation named: removeUsingPOST_19
2019-05-15 09:26:59 -Generating unique operation named: saveUsingPOST_9
2019-05-15 09:26:59 -Generating unique operation named: updateUsingPOST_10
2019-05-15 09:26:59 -Generating unique operation named: listUsingGET_11
2019-05-15 09:26:59 -Generating unique operation named: removeUsingPOST_20
2019-05-15 09:26:59 -Generating unique operation named: welcomeUsingGET_1
2019-05-15 09:26:59 -Generating unique operation named: addUsingGET_10
2019-05-15 09:26:59 -Generating unique operation named: editUsingGET_11
2019-05-15 09:26:59 -Generating unique operation named: listUsingGET_12
2019-05-15 09:26:59 -Generating unique operation named: removeUsingPOST_21
2019-05-15 09:26:59 -Generating unique operation named: saveUsingPOST_10
2019-05-15 09:26:59 -Generating unique operation named: treeUsingGET_1
2019-05-15 09:26:59 -Generating unique operation named: treeUsingGET_2
2019-05-15 09:26:59 -Generating unique operation named: updateUsingPOST_11
2019-05-15 09:26:59 -Generating unique operation named: addUsingGET_11
2019-05-15 09:26:59 -Generating unique operation named: editUsingGET_12
2019-05-15 09:26:59 -Generating unique operation named: listUsingGET_13
2019-05-15 09:26:59 -Generating unique operation named: removeUsingPOST_22
2019-05-15 09:26:59 -Generating unique operation named: removeUsingPOST_23
2019-05-15 09:26:59 -Generating unique operation named: saveUsingPOST_11
2019-05-15 09:26:59 -Generating unique operation named: updateUsingGET_8
2019-05-15 09:26:59 -Generating unique operation named: updateUsingHEAD_8
2019-05-15 09:26:59 -Generating unique operation named: updateUsingPOST_12
2019-05-15 09:26:59 -Generating unique operation named: updateUsingPUT_8
2019-05-15 09:26:59 -Generating unique operation named: updateUsingPATCH_8
2019-05-15 09:26:59 -Generating unique operation named: updateUsingDELETE_8
2019-05-15 09:26:59 -Generating unique operation named: updateUsingOPTIONS_8
2019-05-15 09:26:59 -Generating unique operation named: updateUsingTRACE_8
2019-05-15 09:26:59 -Generating unique operation named: addUsingGET_12
2019-05-15 09:26:59 -Generating unique operation named: editUsingGET_13
2019-05-15 09:26:59 -Generating unique operation named: listUsingGET_14
2019-05-15 09:26:59 -Generating unique operation named: removeUsingPOST_24
2019-05-15 09:26:59 -Generating unique operation named: removeUsingPOST_25
2019-05-15 09:26:59 -Generating unique operation named: saveUsingPOST_12
2019-05-15 09:26:59 -Generating unique operation named: updateUsingGET_9
2019-05-15 09:26:59 -Generating unique operation named: updateUsingHEAD_9
2019-05-15 09:26:59 -Generating unique operation named: updateUsingPOST_13
2019-05-15 09:26:59 -Generating unique operation named: updateUsingPUT_9
2019-05-15 09:26:59 -Generating unique operation named: updateUsingPATCH_9
2019-05-15 09:26:59 -Generating unique operation named: updateUsingDELETE_9
2019-05-15 09:26:59 -Generating unique operation named: updateUsingOPTIONS_9
2019-05-15 09:26:59 -Generating unique operation named: updateUsingTRACE_9
2019-05-15 09:26:59 -Generating unique operation named: addUsingGET_13
2019-05-15 09:26:59 -Generating unique operation named: batchRemoveUsingPOST_1
2019-05-15 09:26:59 -Generating unique operation named: editUsingGET_14
2019-05-15 09:26:59 -Generating unique operation named: listUsingGET_15
2019-05-15 09:26:59 -Generating unique operation named: saveUsingPOST_13
2019-05-15 09:26:59 -Generating unique operation named: saveUsingPOST_14
2019-05-15 09:26:59 -Generating unique operation named: updateUsingPOST_14
2019-05-15 09:26:59 -Generating unique operation named: listUsingGET_16
2019-05-15 09:26:59 -Generating unique operation named: listUsingHEAD_1
2019-05-15 09:26:59 -Generating unique operation named: listUsingPOST_1
2019-05-15 09:26:59 -Generating unique operation named: listUsingPUT_1
2019-05-15 09:26:59 -Generating unique operation named: listUsingPATCH_1
2019-05-15 09:26:59 -Generating unique operation named: listUsingDELETE_1
2019-05-15 09:26:59 -Generating unique operation named: listUsingOPTIONS_1
2019-05-15 09:26:59 -Generating unique operation named: listUsingTRACE_1
2019-05-15 09:26:59 -Generating unique operation named: countDDUsingGET_1
2019-05-15 09:26:59 -Generating unique operation named: exportDDUsingGET_1
2019-05-15 09:27:00 -Generating unique operation named: getCountYYUsingPOST_1
2019-05-15 09:27:00 -Generating unique operation named: getCountMMUsingPOST_1
2019-05-15 09:27:00 -Generating unique operation named: addUsingGET_14
2019-05-15 09:27:00 -Generating unique operation named: batchRemoveUsingPOST_2
2019-05-15 09:27:00 -Generating unique operation named: editUsingGET_15
2019-05-15 09:27:00 -Generating unique operation named: listUsingGET_17
2019-05-15 09:27:00 -Generating unique operation named: removeUsingPOST_26
2019-05-15 09:27:00 -Generating unique operation named: saveUsingPOST_15
2019-05-15 09:27:00 -Generating unique operation named: treeUsingGET_3
2019-05-15 09:27:00 -Generating unique operation named: treeViewUsingGET_1
2019-05-15 09:27:00 -Generating unique operation named: updateUsingPOST_15
2019-05-15 09:27:00 -Generating unique operation named: addUsingGET_15
2019-05-15 09:27:00 -Generating unique operation named: editUsingGET_16
2019-05-15 09:27:00 -Generating unique operation named: exprotExcelUsingGET_4
2019-05-15 09:27:00 -Generating unique operation named: listUsingGET_18
2019-05-15 09:27:00 -Generating unique operation named: removeUsingPOST_27
2019-05-15 09:27:00 -Generating unique operation named: removeUsingPOST_28
2019-05-15 09:27:00 -Generating unique operation named: saveUsingPOST_16
2019-05-15 09:27:00 -Generating unique operation named: updateUsingGET_10
2019-05-15 09:27:00 -Generating unique operation named: updateUsingHEAD_10
2019-05-15 09:27:00 -Generating unique operation named: updateUsingPOST_16
2019-05-15 09:27:00 -Generating unique operation named: updateUsingPUT_10
2019-05-15 09:27:00 -Generating unique operation named: updateUsingPATCH_10
2019-05-15 09:27:00 -Generating unique operation named: updateUsingDELETE_10
2019-05-15 09:27:00 -Generating unique operation named: updateUsingOPTIONS_10
2019-05-15 09:27:00 -Generating unique operation named: updateUsingTRACE_10
2019-05-15 09:27:00 -Generating unique operation named: exprotExcelUsingGET_5
2019-05-15 09:27:00 -Generating unique operation named: addUsingGET_16
2019-05-15 09:27:00 -Generating unique operation named: editUsingGET_17
2019-05-15 09:27:00 -Generating unique operation named: listUsingGET_19
2019-05-15 09:27:00 -Generating unique operation named: removeUsingPOST_29
2019-05-15 09:27:00 -Generating unique operation named: removeUsingPOST_30
2019-05-15 09:27:00 -Generating unique operation named: saveUsingPOST_17
2019-05-15 09:27:00 -Generating unique operation named: updateUsingGET_11
2019-05-15 09:27:00 -Generating unique operation named: updateUsingHEAD_11
2019-05-15 09:27:00 -Generating unique operation named: updateUsingPOST_17
2019-05-15 09:27:00 -Generating unique operation named: updateUsingPUT_11
2019-05-15 09:27:00 -Generating unique operation named: updateUsingPATCH_11
2019-05-15 09:27:00 -Generating unique operation named: updateUsingDELETE_11
2019-05-15 09:27:00 -Generating unique operation named: updateUsingOPTIONS_11
2019-05-15 09:27:00 -Generating unique operation named: updateUsingTRACE_11
2019-05-15 09:27:00 -Generating unique operation named: addUsingGET_17
2019-05-15 09:27:00 -Generating unique operation named: editUsingGET_18
2019-05-15 09:27:00 -Generating unique operation named: listUsingGET_20
2019-05-15 09:27:00 -Generating unique operation named: removeUsingPOST_31
2019-05-15 09:27:00 -Generating unique operation named: removeUsingPOST_32
2019-05-15 09:27:00 -Generating unique operation named: saveUsingPOST_18
2019-05-15 09:27:00 -Generating unique operation named: updateUsingGET_12
2019-05-15 09:27:00 -Generating unique operation named: updateUsingHEAD_12
2019-05-15 09:27:00 -Generating unique operation named: updateUsingPOST_18
2019-05-15 09:27:00 -Generating unique operation named: updateUsingPUT_12
2019-05-15 09:27:00 -Generating unique operation named: updateUsingPATCH_12
2019-05-15 09:27:00 -Generating unique operation named: updateUsingDELETE_12
2019-05-15 09:27:00 -Generating unique operation named: updateUsingOPTIONS_12
2019-05-15 09:27:00 -Generating unique operation named: updateUsingTRACE_12
2019-05-15 09:27:00 -Starting Quartz Scheduler now
2019-05-15 09:27:00 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED started.
2019-05-15 09:27:00 -Starting...
2019-05-15 09:27:00 -BrokerAvailabilityEvent[available=true, SimpleBrokerMessageHandler [DefaultSubscriptionRegistry[cache[0 destination(s)], registry[0 sessions]]]]
2019-05-15 09:27:00 -Started.
2019-05-15 09:27:00 -Starting ProtocolHandler ["http-nio-8081"]
2019-05-15 09:27:00 -Using a shared selector for servlet write/read
2019-05-15 09:27:00 -Tomcat started on port(s): 8081 (http) with context path ''
2019-05-15 09:27:00 -Started BootdoApplication in 30.657 seconds (JVM running for 31.435)
2019-05-15 09:27:00 -==>  Preparing: select `id`,`cron_expression`,`method_name`,`is_concurrent`,`description`,`update_by`,`bean_class`,`create_date`,`job_status`,`job_group`,`update_date`,`create_by`,`spring_bean`,`job_name` from sys_task order by id desc 
2019-05-15 09:27:00 -==> Parameters: 
2019-05-15 09:27:00 -<==      Total: 1
2019-05-15 09:27:13 -Initializing Spring FrameworkServlet 'dispatcherServlet'
2019-05-15 09:27:13 -FrameworkServlet 'dispatcherServlet': initialization started
2019-05-15 09:27:13 -FrameworkServlet 'dispatcherServlet': initialization completed in 56 ms
2019-05-15 09:27:13 -Enabling session validation scheduler...
2019-05-15 09:27:13 -请求地址 : http://localhost:8081/login;JSESSIONID=029b3c04-c994-42ec-8233-a37e317110e4
2019-05-15 09:27:13 -HTTP METHOD : GET
2019-05-15 09:27:13 -CLASS_METHOD : com.bootdo.system.controller.LoginController.login
2019-05-15 09:27:13 -参数 : [{}]
2019-05-15 09:27:13 -耗时 : 12
2019-05-15 09:27:13 -返回值 : login
2019-05-15 09:27:14 -请求地址 : http://localhost:8081/getVerify
2019-05-15 09:27:14 -HTTP METHOD : GET
2019-05-15 09:27:14 -CLASS_METHOD : com.bootdo.system.controller.LoginController.getVerify
2019-05-15 09:27:14 -参数 : [org.apache.shiro.web.servlet.ShiroHttpServletRequest@4ab49235, org.apache.shiro.web.servlet.ShiroHttpServletResponse@3cbaad7a]
2019-05-15 09:27:15 -0832
2019-05-15 09:27:15 -耗时 : 472
2019-05-15 09:27:15 -返回值 : null
2019-05-15 09:27:20 -请求地址 : http://localhost:8081/login
2019-05-15 09:27:20 -HTTP METHOD : POST
2019-05-15 09:27:20 -CLASS_METHOD : com.bootdo.system.controller.LoginController.ajaxLogin
2019-05-15 09:27:20 -参数 : [admin, 111111, 0832, org.apache.shiro.web.servlet.ShiroHttpServletRequest@2a7b5588]
2019-05-15 09:27:20 -==>  Preparing: select `user_id`,`username`,`name`,`password`,`dept_id`,`email`,`mobile`,`status`,`user_id_create`,`gmt_create`,`gmt_modified`,`sex`,`birth`,`pic_id`,`live_address`,`hobby`,`province`,`city`,`district` from sys_user WHERE username = ? order by user_id desc 
2019-05-15 09:27:20 -==> Parameters: admin(String)
2019-05-15 09:27:20 -<==      Total: 1
2019-05-15 09:27:20 -耗时 : 86
2019-05-15 09:27:20 -返回值 : {msg=操作成功, code=0}
2019-05-15 09:27:20 -More than one TaskExecutor bean found within the context, and none is named 'taskExecutor'. Mark one of them as primary or name it 'taskExecutor' (possibly as an alias) in order to use it for async processing: [clientInboundChannelExecutor, clientOutboundChannelExecutor, brokerChannelExecutor, messageBrokerTaskScheduler]
2019-05-15 09:27:20 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-05-15 09:27:20 -==> Parameters: 1(Long), admin(String), 登录(String), 87(Integer), com.bootdo.system.controller.LoginController.ajaxLogin()(String), null, 127.0.0.1(String), 2019-05-15 09:27:20.35(Timestamp)
2019-05-15 09:27:20 -请求地址 : http://localhost:8081/index
2019-05-15 09:27:20 -HTTP METHOD : GET
2019-05-15 09:27:20 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2019-05-15 09:27:20 -参数 : [{}]
2019-05-15 09:27:20 -<==    Updates: 1
2019-05-15 09:27:20 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2019-05-15 09:27:20 -==> Parameters: 1(Long)
2019-05-15 09:27:20 -<==      Total: 49
2019-05-15 09:27:20 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2019-05-15 09:27:20 -==> Parameters: 138(Long)
2019-05-15 09:27:20 -<==      Total: 1
2019-05-15 09:27:20 -耗时 : 178
2019-05-15 09:27:20 -返回值 : index_v1
2019-05-15 09:27:20 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-05-15 09:27:20 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 179(Integer), com.bootdo.system.controller.LoginController.index()(String), {"menus":[{"attributes":{"icon":"fa fa-money","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-money","url":"/moneyList/moneyList"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"102","parentId":"106","text":"现金缴费"},{"attributes":{"icon":"fa fa-book","url":"/moneyLog/elecLog"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"107","parentId":"106","text":"缴费记录"}],"hasChildren":true,"hasParent":false,"id":"106","parentId":"0","text":"收费管理"},{"attributes":{"icon":"fa fa-lightbulb-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/elec/elec"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"121","parentId":"103","text":"电费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"elec/elecInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"122","parentId":"103","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"elec/elecUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"123","parentId":"103","text":"电表上传"},{"attributes":{"icon":"fa fa-cc","url":"/elec/elecPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"124","parentId":"103","text":"电价管理"}],"hasChildren":true,"hasParent":false,"id":"103","parentId":"0","text":"电费管理"},{"attributes":{"icon":"fa fa-tint","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/water/water"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"117","parentId":"105","text":"水费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"water/waterInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"118","parentId":"105","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"water/waterUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"119","parentId":"105","text":"水费生成"},{"attributes":{"icon":"fa fa-cc","url":"/water/waterPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"120","parentId":"105","text":"水价管理"}],"hasChildren":true,"hasParent":false,"id":"105","parentId":"0","text":"水费管理"},{"attributes":{"icon":"fa fa-fire","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/heat/heat"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"113","parentId":"104","text":"暖费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"heat/heatInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"114","parentId":"104","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"heat/heatUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"115","parentId":"104","text":"暖费生成"},{"attributes":{"icon":"","url":"/heat/heatPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"116","parentId":"104","text":"暖价管理"}],"hasChildren":true,"hasParent":false,"id":"104","parentId":"0","text":"暖费管理"},{"attributes":{"icon":"fa fa-vcard-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-bomb","url":"/print/print"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"149","parentId":"108","text":"票据记录"}],"hasChildren":true,"hasParent":false,"id":"108","parentId":"0","text":"票据管理"},{"attributes":{"icon":"fa fa-bar-chart","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-area-chart","url":"/chart/graph_echarts.html"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","text":"百度chart"},{"attributes":{"icon":"fa fa-sun-o","url":"charts/countDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"109","parentId":"97","text":"日统计报表"},{"attributes":{"icon":"fa fa-calendar","url":"charts/tableDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"161","parentId":"97","text":"日统计表格"},{"attributes":{"icon":"fa fa-registered","url":"charts/countMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"110","parentId":"97","text":"月统计报表"},{"attributes":{"icon":"fa fa-building-o","url":"charts/tableElecMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"162","parentId":"97","text":"月统计表格"},{"attributes":{"icon":"fa fa-support","url":"charts/countYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"111","parentId":"97","text":"年统计报表"},{"attributes":{"icon":"fa fa-book","url":"charts/tableElecYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"163","parentId":"97","text":"年统计表格"},{"attributes":{"icon":"fa fa-money","url":"charts/countOwe"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"155","parentId":"97","text":"欠费报表图"},{"attributes":{"icon":"fa fa-tachometer","url":"charts/countRun"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"112"(String), 127.0.0.1(String), 2019-05-15 09:27:20.703(Timestamp)
2019-05-15 09:27:20 -<==    Updates: 1
2019-05-15 09:27:20 -请求地址 : http://localhost:8081/main
2019-05-15 09:27:20 -HTTP METHOD : GET
2019-05-15 09:27:20 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-05-15 09:27:20 -参数 : []
2019-05-15 09:27:20 -耗时 : 0
2019-05-15 09:27:20 -返回值 : main
2019-05-15 09:27:21 -请求地址 : http://localhost:8081/oa/notify/message
2019-05-15 09:27:21 -HTTP METHOD : GET
2019-05-15 09:27:21 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2019-05-15 09:27:21 -参数 : []
2019-05-15 09:27:21 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2019-05-15 09:27:21 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2019-05-15 09:27:21 -<==      Total: 0
2019-05-15 09:27:21 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2019-05-15 09:27:21 -==> Parameters: 1(Long), 0(String)
2019-05-15 09:27:21 -<==      Total: 1
2019-05-15 09:27:21 -耗时 : 87
2019-05-15 09:27:21 -返回值 : com.bootdo.common.utils.PageUtils@1f734fca
2019-05-15 09:27:21 -请求地址 : http://localhost:8081/main
2019-05-15 09:27:21 -HTTP METHOD : GET
2019-05-15 09:27:21 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-05-15 09:27:21 -参数 : []
2019-05-15 09:27:21 -耗时 : 1
2019-05-15 09:27:21 -返回值 : main
2019-05-15 09:27:23 -==>  Preparing: select distinct m.perms from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id = ur.role_id where ur.user_id = ? 
2019-05-15 09:27:23 -==> Parameters: 1(Long)
2019-05-15 09:27:23 -<==      Total: 93
2019-05-15 09:27:23 -请求地址 : http://localhost:8081/water/waterPrice
2019-05-15 09:27:23 -HTTP METHOD : GET
2019-05-15 09:27:23 -CLASS_METHOD : com.bootdo.water.controller.WaterPriceController.WaterPrice
2019-05-15 09:27:23 -参数 : []
2019-05-15 09:27:23 -耗时 : 1
2019-05-15 09:27:23 -返回值 : water/waterPrice/waterPrice
2019-05-15 09:27:23 -请求地址 : http://localhost:8081/water/waterPrice/list
2019-05-15 09:27:23 -HTTP METHOD : GET
2019-05-15 09:27:23 -CLASS_METHOD : com.bootdo.water.controller.WaterPriceController.list
2019-05-15 09:27:23 -参数 : [{limit=10, offset=0}]
2019-05-15 09:27:23 -==>  Preparing: select `id`,`water_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `water_org`) AS waterOrgName,`m_water`,`s1_water`,`s2_water`,`s3_water`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from water_price order by id asc limit ?, ? 
2019-05-15 09:27:23 -==> Parameters: 0(Integer), 10(Integer)
2019-05-15 09:27:23 -<==      Total: 2
2019-05-15 09:27:23 -==>  Preparing: select count(*) from water_price 
2019-05-15 09:27:23 -==> Parameters: 
2019-05-15 09:27:23 -<==      Total: 1
2019-05-15 09:27:23 -耗时 : 29
2019-05-15 09:27:23 -返回值 : com.bootdo.common.utils.PageUtils@299a10f4
2019-05-15 09:27:25 -请求地址 : http://localhost:8081/water/waterPrice/edit/1
2019-05-15 09:27:25 -HTTP METHOD : GET
2019-05-15 09:27:25 -CLASS_METHOD : com.bootdo.water.controller.WaterPriceController.edit
2019-05-15 09:27:25 -参数 : [1, {}]
2019-05-15 09:27:25 -==>  Preparing: select `id`,`water_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `water_org`) AS waterOrgName,`m_water`,`s1_water`,`s2_water`,`s3_water`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from water_price where id = ? 
2019-05-15 09:27:25 -==> Parameters: 1(Long)
2019-05-15 09:27:25 -<==      Total: 1
2019-05-15 09:27:25 -耗时 : 10
2019-05-15 09:27:25 -返回值 : water/waterPrice/edit
2019-05-15 09:27:35 -请求地址 : http://localhost:8081/water/waterPrice/update
2019-05-15 09:27:35 -HTTP METHOD : POST
2019-05-15 09:27:35 -CLASS_METHOD : com.bootdo.water.controller.WaterPriceController.update
2019-05-15 09:27:35 -参数 : [com.bootdo.water.domain.WaterPriceDO@442c2ccd, com.bootdo.water.domain.WaterDO@7f62806b]
2019-05-15 09:27:35 -==>  Preparing: update water_price SET `water_org` = ?, `m_water` = ?, `s1_water` = ?, `create_time` = ?, `create_by` = ?, `update_time` = ?, `update_by` = ?, `remark` = ? where id = ? 
2019-05-15 09:27:35 -==> Parameters: 2(String), 1(BigDecimal), 10(BigDecimal), (String), 1(Long), 2019-05-15 09:27:35.487(Timestamp), 1(Long), (String), 1(Long)
2019-05-15 09:27:35 -<==    Updates: 1
2019-05-15 09:27:35 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-05-15 09:27:35 -==> Parameters: 1(Long), admin(String), error(String), null, http://localhost:8081/water/waterPrice/update(String), org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'mWater' in 'class com.bootdo.water.domain.WaterDO'(String), null, 2019-05-15 09:27:35.609(Timestamp)
2019-05-15 09:27:35 -nested exception is org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'mWater' in 'class com.bootdo.water.domain.WaterDO'
org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'mWater' in 'class com.bootdo.water.domain.WaterDO'
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:79)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:447)
	at com.sun.proxy.$Proxy101.update(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.update(SqlSessionTemplate.java:295)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:62)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy143.updateWater(Unknown Source)
	at com.bootdo.water.service.impl.WaterPriceServiceImpl.updateWater(WaterPriceServiceImpl.java:44)
	at com.bootdo.water.controller.WaterPriceController.update(WaterPriceController.java:94)
	at com.bootdo.water.controller.WaterPriceController$$FastClassBySpringCGLIB$$fb365725.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:204)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:746)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.bootdo.common.aspect.WebLogAspect.doAround(WebLogAspect.java:57)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.apache.shiro.spring.security.interceptor.AopAllianceAnnotationsAuthorizingMethodInterceptor$1.proceed(AopAllianceAnnotationsAuthorizingMethodInterceptor.java:82)
	at org.apache.shiro.authz.aop.AuthorizingMethodInterceptor.invoke(AuthorizingMethodInterceptor.java:39)
	at org.apache.shiro.spring.security.interceptor.AopAllianceAnnotationsAuthorizingMethodInterceptor.invoke(AopAllianceAnnotationsAuthorizingMethodInterceptor.java:115)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.bootdo.water.controller.WaterPriceController$$EnhancerBySpringCGLIB$$e86de3b1.update(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:209)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:877)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:783)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:991)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:925)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:974)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:877)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:661)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:851)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:61)
	at org.apache.shiro.web.servlet.AdviceFilter.executeChain(AdviceFilter.java:108)
	at org.apache.shiro.web.servlet.AdviceFilter.doFilterInternal(AdviceFilter.java:137)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:66)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)
	at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)
	at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)
	at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)
	at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:383)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:109)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:496)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:790)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1468)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:745)
Caused by: org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'mWater' in 'class com.bootdo.water.domain.WaterDO'
	at org.apache.ibatis.reflection.Reflector.getGetInvoker(Reflector.java:421)
	at org.apache.ibatis.reflection.MetaClass.getGetInvoker(MetaClass.java:164)
	at org.apache.ibatis.reflection.wrapper.BeanWrapper.getBeanProperty(BeanWrapper.java:162)
	at org.apache.ibatis.reflection.wrapper.BeanWrapper.get(BeanWrapper.java:49)
	at org.apache.ibatis.reflection.MetaObject.getValue(MetaObject.java:122)
	at org.apache.ibatis.scripting.xmltags.DynamicContext$ContextMap.get(DynamicContext.java:94)
	at org.apache.ibatis.scripting.xmltags.DynamicContext$ContextAccessor.getProperty(DynamicContext.java:108)
	at org.apache.ibatis.ognl.OgnlRuntime.getProperty(OgnlRuntime.java:2666)
	at org.apache.ibatis.ognl.ASTProperty.getValueBody(ASTProperty.java:114)
	at org.apache.ibatis.ognl.SimpleNode.evaluateGetValueBody(SimpleNode.java:212)
	at org.apache.ibatis.ognl.SimpleNode.getValue(SimpleNode.java:258)
	at org.apache.ibatis.ognl.ASTNotEq.getValueBody(ASTNotEq.java:50)
	at org.apache.ibatis.ognl.SimpleNode.evaluateGetValueBody(SimpleNode.java:212)
	at org.apache.ibatis.ognl.SimpleNode.getValue(SimpleNode.java:258)
	at org.apache.ibatis.ognl.ASTAnd.getValueBody(ASTAnd.java:61)
	at org.apache.ibatis.ognl.SimpleNode.evaluateGetValueBody(SimpleNode.java:212)
	at org.apache.ibatis.ognl.SimpleNode.getValue(SimpleNode.java:258)
	at org.apache.ibatis.ognl.Ognl.getValue(Ognl.java:470)
	at org.apache.ibatis.ognl.Ognl.getValue(Ognl.java:434)
	at org.apache.ibatis.scripting.xmltags.OgnlCache.getValue(OgnlCache.java:44)
	at org.apache.ibatis.scripting.xmltags.ExpressionEvaluator.evaluateBoolean(ExpressionEvaluator.java:32)
	at org.apache.ibatis.scripting.xmltags.IfSqlNode.apply(IfSqlNode.java:34)
	at org.apache.ibatis.scripting.xmltags.MixedSqlNode.apply(MixedSqlNode.java:33)
	at org.apache.ibatis.scripting.xmltags.TrimSqlNode.apply(TrimSqlNode.java:55)
	at org.apache.ibatis.scripting.xmltags.MixedSqlNode.apply(MixedSqlNode.java:33)
	at org.apache.ibatis.scripting.xmltags.DynamicSqlSource.getBoundSql(DynamicSqlSource.java:41)
	at org.apache.ibatis.mapping.MappedStatement.getBoundSql(MappedStatement.java:292)
	at org.apache.ibatis.executor.statement.BaseStatementHandler.<init>(BaseStatementHandler.java:64)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.<init>(PreparedStatementHandler.java:40)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.<init>(RoutingStatementHandler.java:46)
	at org.apache.ibatis.session.Configuration.newStatementHandler(Configuration.java:545)
	at org.apache.ibatis.executor.SimpleExecutor.doUpdate(SimpleExecutor.java:48)
	at org.apache.ibatis.executor.BaseExecutor.update(BaseExecutor.java:117)
	at org.apache.ibatis.executor.CachingExecutor.update(CachingExecutor.java:76)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:198)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:434)
	... 104 common frames omitted
2019-05-15 09:27:35 -<==    Updates: 1
2019-05-15 09:27:53 -WebSocketSession[1 current WS(1)-HttpStream(0)-HttpPoll(0), 1 total, 0 closed abnormally (0 connect failure, 0 send limit, 0 transport error)], stompSubProtocol[processed CONNECT(1)-CONNECTED(1)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 8, active threads = 0, queued tasks = 0, completed tasks = 9], outboundChannelpool size = 1, active threads = 0, queued tasks = 0, completed tasks = 1], sockJsScheduler[pool size = 4, active threads = 1, queued tasks = 2, completed tasks = 8]
2019-05-15 09:40:24 -Starting BootdoApplication on PC-201905091110 with PID 28108 (D:\eclipse2018-work\bootdo\target\classes started by Administrator in D:\eclipse2018-work\bootdo)
2019-05-15 09:40:24 -Running with Spring Boot v2.0.3.RELEASE, Spring v5.0.7.RELEASE
2019-05-15 09:40:24 -The following profiles are active: dev
2019-05-15 09:40:25 -Refreshing org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@4d5650ae: startup date [Wed May 15 09:40:25 CST 2019]; root of context hierarchy
2019-05-15 09:40:28 -Multiple Spring Data modules found, entering strict repository configuration mode!
2019-05-15 09:40:30 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$bb3b3035] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-05-15 09:40:30 -Bean 'shiroConfig' of type [com.bootdo.system.config.ShiroConfig$$EnhancerBySpringCGLIB$$ad945edc] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-05-15 09:40:31 -Bean 'userRealm' of type [com.bootdo.system.shiro.UserRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-05-15 09:40:31 -Bean 'cacheManager2' of type [net.sf.ehcache.CacheManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-05-15 09:40:31 -Bean 'ehCacheManager' of type [org.apache.shiro.cache.ehcache.EhCacheManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-05-15 09:40:31 -Cache with name 'com.bootdo.system.shiro.UserRealm.authorizationCache' does not yet exist.  Creating now.
2019-05-15 09:40:31 -Added EhCache named [com.bootdo.system.shiro.UserRealm.authorizationCache]
2019-05-15 09:40:31 -Bean 'sessionDAO' of type [org.apache.shiro.session.mgt.eis.MemorySessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-05-15 09:40:31 -Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-05-15 09:40:31 -Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-05-15 09:40:31 -Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-05-15 09:40:32 -Tomcat initialized with port(s): 8081 (http)
2019-05-15 09:40:32 -Initializing ProtocolHandler ["http-nio-8081"]
2019-05-15 09:40:32 -Starting service [Tomcat]
2019-05-15 09:40:32 -Starting Servlet Engine: Apache Tomcat/8.5.31
2019-05-15 09:40:32 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [D:\Java\JDK\jdk1.8.0_102\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;D:/Java/JRE/bin/server;D:/Java/JRE/bin;D:/Java/JRE/lib/amd64;C:\ProgramData\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Windows\System32\OpenSSH\;%JAVA_HOME\bin%;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;;C:\Users\Administrator\Desktop;;.]
2019-05-15 09:40:32 -Initializing Spring embedded WebApplicationContext
2019-05-15 09:40:32 -Root WebApplicationContext: initialization completed in 7743 ms
2019-05-15 09:40:33 -Mapping filter: 'characterEncodingFilter' to: [/*]
2019-05-15 09:40:33 -Mapping filter: 'hiddenHttpMethodFilter' to: [/*]
2019-05-15 09:40:33 -Mapping filter: 'httpPutFormContentFilter' to: [/*]
2019-05-15 09:40:33 -Mapping filter: 'requestContextFilter' to: [/*]
2019-05-15 09:40:33 -Filter xssFilter was not registered (disabled)
2019-05-15 09:40:33 -Mapping filter: 'webStatFilter' to urls: [/*]
2019-05-15 09:40:33 -Mapping filter: 'shiroFilterFactoryBean' to: [/*]
2019-05-15 09:40:33 -Servlet statViewServlet mapped to [/druid/*]
2019-05-15 09:40:33 -Servlet dispatcherServlet mapped to [/]
2019-05-15 09:40:42 -ApplicationContext registed-->org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@4d5650ae: startup date [Wed May 15 09:40:25 CST 2019]; root of context hierarchy
2019-05-15 09:40:42 -Using default implementation for ThreadExecutor
2019-05-15 09:40:43 -Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2019-05-15 09:40:43 -Quartz Scheduler v.2.2.1 created.
2019-05-15 09:40:43 -RAMJobStore initialized.
2019-05-15 09:40:43 -Scheduler meta-data: Quartz Scheduler (v2.2.1) 'schedulerFactoryBean' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2019-05-15 09:40:43 -Quartz scheduler 'schedulerFactoryBean' initialized from an externally provided properties instance.
2019-05-15 09:40:43 -Quartz scheduler version: 2.2.1
2019-05-15 09:40:43 -JobFactory set to: com.bootdo.common.quartz.factory.JobFactory@50a7c72b
2019-05-15 09:40:43 -Initializing ExecutorService  'clientInboundChannelExecutor'
2019-05-15 09:40:43 -Initializing ExecutorService  'clientOutboundChannelExecutor'
2019-05-15 09:40:46 -Mapped "{[/charts/countDD/getCountDD],methods=[POST]}" onto public com.bootdo.charts.vo.CountDayVo com.bootdo.charts.controller.countDDController.getCountD(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo)
2019-05-15 09:40:46 -Mapped "{[/charts/countDD],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.countDDController.countDD()
2019-05-15 09:40:46 -Mapped "{[/charts/countDD/exportDD],methods=[GET]}" onto public void com.bootdo.charts.controller.countDDController.exportDD(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.HeatLogVo,com.bootdo.moneyLog.vo.WaterLogVo,javax.servlet.http.HttpServletResponse)
2019-05-15 09:40:46 -Mapped "{[/charts/countMM/getCountMM],methods=[POST]}" onto public java.util.Map com.bootdo.charts.controller.countMMController.getCountMM(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo)
2019-05-15 09:40:46 -Mapped "{[/charts/countMM/exportMM],methods=[GET]}" onto public void com.bootdo.charts.controller.countMMController.exportMM(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.HeatLogVo,com.bootdo.moneyLog.vo.WaterLogVo,javax.servlet.http.HttpServletResponse)
2019-05-15 09:40:46 -Mapped "{[/charts/countMM],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.countMMController.countMM()
2019-05-15 09:40:46 -Mapped "{[/charts/countOwe/exportOwe],methods=[GET]}" onto public void com.bootdo.charts.controller.countOweController.exportOwe(com.bootdo.elec.vo.ElecVo,com.bootdo.heat.vo.HeatVo,com.bootdo.water.vo.WaterVo,javax.servlet.http.HttpServletResponse)
2019-05-15 09:40:46 -Mapped "{[/charts/countOwe],methods=[GET]}" onto java.lang.String com.bootdo.charts.controller.countOweController.countOwe()
2019-05-15 09:40:46 -Mapped "{[/charts/countOwe/getCountOwe],methods=[POST]}" onto public com.bootdo.charts.vo.CountOweVo com.bootdo.charts.controller.countOweController.getCountD(com.bootdo.elec.vo.ElecVo,com.bootdo.water.vo.WaterVo,com.bootdo.heat.vo.HeatVo)
2019-05-15 09:40:46 -Mapped "{[/charts/countRun],methods=[GET]}" onto java.lang.String com.bootdo.charts.controller.countRunController.countRun()
2019-05-15 09:40:46 -Mapped "{[/charts/countRun/getCountRun],methods=[POST]}" onto public java.util.Map com.bootdo.charts.controller.countRunController.getCountRun(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo)
2019-05-15 09:40:46 -Mapped "{[/charts/countRun/exportRun],methods=[GET]}" onto public void com.bootdo.charts.controller.countRunController.exportRun(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.HeatLogVo,com.bootdo.moneyLog.vo.WaterLogVo,javax.servlet.http.HttpServletResponse)
2019-05-15 09:40:46 -Mapped "{[/charts/countYY/exportYY],methods=[GET]}" onto public void com.bootdo.charts.controller.countYYController.exportYY(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.HeatLogVo,com.bootdo.moneyLog.vo.WaterLogVo,javax.servlet.http.HttpServletResponse)
2019-05-15 09:40:46 -Mapped "{[/charts/countYY],methods=[GET]}" onto java.lang.String com.bootdo.charts.controller.countYYController.countYY()
2019-05-15 09:40:46 -Mapped "{[/charts/countYY/getCountYY],methods=[POST]}" onto public java.util.Map com.bootdo.charts.controller.countYYController.getCountYY(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo)
2019-05-15 09:40:46 -Mapped "{[/charts/tableDD/getTableDD],methods=[POST]}" onto public java.util.Map com.bootdo.charts.controller.tableDDController.getTableDD(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo)
2019-05-15 09:40:46 -Mapped "{[/charts/tableDD],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.tableDDController.countDD()
2019-05-15 09:40:46 -Mapped "{[/charts/tableDD/exportDD],methods=[GET]}" onto public void com.bootdo.charts.controller.tableDDController.exportDD(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.HeatLogVo,com.bootdo.moneyLog.vo.WaterLogVo,javax.servlet.http.HttpServletResponse)
2019-05-15 09:40:46 -Mapped "{[/charts/tableElecMM/exportElecMM],methods=[GET]}" onto public void com.bootdo.charts.controller.tableElecMMController.exportElecMM(com.bootdo.elec.vo.ElecVo,com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse)
2019-05-15 09:40:46 -Mapped "{[/charts/tableElecMM],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.tableElecMMController.tableElecMM()
2019-05-15 09:40:46 -Mapped "{[/charts/tableElecMM/tableElecMM],methods=[POST]}" onto public java.util.Map com.bootdo.charts.controller.tableElecMMController.tableElecMM(com.bootdo.elec.vo.ElecVo,com.bootdo.moneyLog.vo.ElecLogVo)
2019-05-15 09:40:46 -Mapped "{[/charts/tableElecYY/exportElecYY],methods=[GET]}" onto public void com.bootdo.charts.controller.tableElecYYController.exportElecYY(com.bootdo.elec.vo.ElecVo,com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse)
2019-05-15 09:40:46 -Mapped "{[/charts/tableElecYY],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.tableElecYYController.tableElecYY()
2019-05-15 09:40:46 -Mapped "{[/charts/tableElecYY/getCountYY],methods=[POST]}" onto public java.util.Map com.bootdo.charts.controller.tableElecYYController.getCountYY(com.bootdo.elec.vo.ElecVo,com.bootdo.moneyLog.vo.ElecLogVo)
2019-05-15 09:40:46 -Mapped "{[/charts/tableHeatMM/tableHeatMM],methods=[POST]}" onto public java.util.Map com.bootdo.charts.controller.tableHeatMMController.tableHeatMM(com.bootdo.heat.vo.HeatVo,com.bootdo.moneyLog.vo.HeatLogVo)
2019-05-15 09:40:46 -Mapped "{[/charts/tableHeatMM],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.tableHeatMMController.tableHeatMM()
2019-05-15 09:40:46 -Mapped "{[/charts/tableHeatMM/exportHeatMM],methods=[GET]}" onto public void com.bootdo.charts.controller.tableHeatMMController.exportHeatMM(com.bootdo.heat.vo.HeatVo,com.bootdo.moneyLog.vo.HeatLogVo,javax.servlet.http.HttpServletResponse)
2019-05-15 09:40:46 -Mapped "{[/charts/tableHeatYY],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.tableHeatYYController.tableHeatYY()
2019-05-15 09:40:46 -Mapped "{[/charts/tableHeatYY/exportHeatYY],methods=[GET]}" onto public void com.bootdo.charts.controller.tableHeatYYController.exportHeatYY(com.bootdo.heat.vo.HeatVo,com.bootdo.moneyLog.vo.HeatLogVo,javax.servlet.http.HttpServletResponse)
2019-05-15 09:40:46 -Mapped "{[/charts/tableHeatYY/getCountYY],methods=[POST]}" onto public java.util.Map com.bootdo.charts.controller.tableHeatYYController.getCountMM(com.bootdo.heat.vo.HeatVo,com.bootdo.moneyLog.vo.HeatLogVo)
2019-05-15 09:40:46 -Mapped "{[/charts/tableWaterMM/exportWaterMM],methods=[GET]}" onto public void com.bootdo.charts.controller.tableWaterMMController.exportWaterMM(com.bootdo.water.vo.WaterVo,com.bootdo.moneyLog.vo.WaterLogVo,javax.servlet.http.HttpServletResponse)
2019-05-15 09:40:46 -Mapped "{[/charts/tableWaterMM],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.tableWaterMMController.tableWaterMM()
2019-05-15 09:40:46 -Mapped "{[/charts/tableWaterMM/tableWaterMM],methods=[POST]}" onto public java.util.Map com.bootdo.charts.controller.tableWaterMMController.tableWaterMM(com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.water.vo.WaterVo)
2019-05-15 09:40:46 -Mapped "{[/charts/tableWaterYY/exportWaterYY],methods=[GET]}" onto public void com.bootdo.charts.controller.tableWaterYYController.exportWaterYY(com.bootdo.water.vo.WaterVo,com.bootdo.moneyLog.vo.WaterLogVo,javax.servlet.http.HttpServletResponse)
2019-05-15 09:40:46 -Mapped "{[/charts/tableWaterYY],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.tableWaterYYController.tableWaterYY()
2019-05-15 09:40:46 -Mapped "{[/charts/tableWaterYY/tableWaterYY],methods=[POST]}" onto public java.util.Map com.bootdo.charts.controller.tableWaterYYController.tableWaterYY(com.bootdo.water.vo.WaterVo,com.bootdo.moneyLog.vo.WaterLogVo)
2019-05-15 09:40:46 -Mapped "{[/common/dict/add],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.add()
2019-05-15 09:40:46 -Mapped "{[/common/dict/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.remove(java.lang.Long)
2019-05-15 09:40:46 -Mapped "{[/common/dict/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.remove(java.lang.Long[])
2019-05-15 09:40:46 -Mapped "{[/common/dict/update]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.update(com.bootdo.common.domain.DictDO)
2019-05-15 09:40:46 -Mapped "{[/common/dict/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.common.controller.DictController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 09:40:46 -Mapped "{[/common/dict/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.save(com.bootdo.common.domain.DictDO)
2019-05-15 09:40:46 -Mapped "{[/common/dict/type],methods=[GET]}" onto public java.util.List<com.bootdo.common.domain.DictDO> com.bootdo.common.controller.DictController.listType()
2019-05-15 09:40:46 -Mapped "{[/common/dict/add/{type}/{description}],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.addD(org.springframework.ui.Model,java.lang.String,java.lang.String)
2019-05-15 09:40:46 -Mapped "{[/common/dict],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.dict()
2019-05-15 09:40:46 -Mapped "{[/common/dict/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.edit(java.lang.Long,org.springframework.ui.Model)
2019-05-15 09:40:46 -Mapped "{[/common/dict/list/{type}],methods=[GET]}" onto public java.util.List<com.bootdo.common.domain.DictDO> com.bootdo.common.controller.DictController.listByType(java.lang.String)
2019-05-15 09:40:46 -Mapped "{[/common/sysFile/add],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.FileController.add()
2019-05-15 09:40:46 -Mapped "{[/common/sysFile/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.remove(java.lang.Long,javax.servlet.http.HttpServletRequest)
2019-05-15 09:40:46 -Mapped "{[/common/sysFile/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.remove(java.lang.Long[])
2019-05-15 09:40:46 -Mapped "{[/common/sysFile/update]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.update(com.bootdo.common.domain.FileDO)
2019-05-15 09:40:46 -Mapped "{[/common/sysFile/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.common.controller.FileController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 09:40:46 -Mapped "{[/common/sysFile/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.save(com.bootdo.common.domain.FileDO)
2019-05-15 09:40:46 -Mapped "{[/common/sysFile/info/{id}]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.info(java.lang.Long)
2019-05-15 09:40:46 -Mapped "{[/common/sysFile/upload],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.FileController.upload(org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpServletRequest)
2019-05-15 09:40:46 -Mapped "{[/common/sysFile/edit],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.FileController.edit(java.lang.Long,org.springframework.ui.Model)
2019-05-15 09:40:46 -Mapped "{[/common/sysFile],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.FileController.sysFile(org.springframework.ui.Model)
2019-05-15 09:40:46 -Mapped "{[/common/generator/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.GeneratorController.update(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 09:40:46 -Mapped "{[/common/generator/list],methods=[GET]}" onto java.util.List<java.util.Map<java.lang.String, java.lang.Object>> com.bootdo.common.controller.GeneratorController.list()
2019-05-15 09:40:46 -Mapped "{[/common/generator/code/{tableName}]}" onto public void com.bootdo.common.controller.GeneratorController.code(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String) throws java.io.IOException
2019-05-15 09:40:46 -Mapped "{[/common/generator],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.GeneratorController.generator()
2019-05-15 09:40:46 -Mapped "{[/common/generator/edit],methods=[GET]}" onto public java.lang.String com.bootdo.common.controller.GeneratorController.edit(org.springframework.ui.Model)
2019-05-15 09:40:46 -Mapped "{[/common/generator/batchCode]}" onto public void com.bootdo.common.controller.GeneratorController.batchCode(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String) throws java.io.IOException
2019-05-15 09:40:46 -Mapped "{[/common/job/add],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.JobController.add()
2019-05-15 09:40:46 -Mapped "{[/common/job/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.remove(java.lang.Long)
2019-05-15 09:40:46 -Mapped "{[/common/job/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.remove(java.lang.Long[])
2019-05-15 09:40:46 -Mapped "{[/common/job/update],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.update(com.bootdo.common.domain.TaskDO)
2019-05-15 09:40:46 -Mapped "{[/common/job/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.common.controller.JobController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 09:40:46 -Mapped "{[/common/job/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.save(com.bootdo.common.domain.TaskDO)
2019-05-15 09:40:46 -Mapped "{[/common/job/info/{id}]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.info(java.lang.Long)
2019-05-15 09:40:46 -Mapped "{[/common/job/changeJobStatus],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.changeJobStatus(java.lang.Long,java.lang.String)
2019-05-15 09:40:46 -Mapped "{[/common/job],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.JobController.taskScheduleJob()
2019-05-15 09:40:46 -Mapped "{[/common/job/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.JobController.edit(java.lang.Long,org.springframework.ui.Model)
2019-05-15 09:40:46 -Mapped "{[/common/log/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.LogController.remove(java.lang.Long)
2019-05-15 09:40:46 -Mapped "{[/common/log],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.LogController.log()
2019-05-15 09:40:46 -Mapped "{[/common/log/list],methods=[GET]}" onto com.bootdo.common.domain.PageDO<com.bootdo.common.domain.LogDO> com.bootdo.common.controller.LogController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 09:40:46 -Mapped "{[/common/log/batchRemove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.LogController.batchRemove(java.lang.Long[])
2019-05-15 09:40:46 -Mapped "{[/common/long],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.LongController.Long()
2019-05-15 09:40:46 -Mapped "{[/common/time],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.TimeController.Time()
2019-05-15 09:40:46 -Mapped "{[/error]}" onto public com.bootdo.common.utils.R com.bootdo.common.exception.MainsiteErrorController.handleError(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-05-15 09:40:46 -Mapped "{[/error],produces=[text/html]}" onto public org.springframework.web.servlet.ModelAndView com.bootdo.common.exception.MainsiteErrorController.errorHtml(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-05-15 09:40:46 -Mapped "{[/elec/elec/add],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecController.add()
2019-05-15 09:40:46 -Mapped "{[/elec/elec/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.remove(java.lang.Long)
2019-05-15 09:40:46 -Mapped "{[/elec/elec/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.remove(java.lang.Long[])
2019-05-15 09:40:46 -Mapped "{[/elec/elec/update],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.update(com.bootdo.elec.domain.ElecDO)
2019-05-15 09:40:46 -Mapped "{[/elec/elec/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.elec.controller.ElecController.list(java.util.Map<java.lang.String, java.lang.Object>,com.bootdo.elec.domain.ElecDO)
2019-05-15 09:40:46 -Mapped "{[/elec/elec/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.save(com.bootdo.elec.domain.ElecDO)
2019-05-15 09:40:46 -Mapped "{[/elec/elec/exprotElec],methods=[GET]}" onto public void com.bootdo.elec.controller.ElecController.exprotExcel(com.bootdo.elec.vo.ElecVo,javax.servlet.http.HttpServletResponse)
2019-05-15 09:40:46 -Mapped "{[/elec/elec],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecController.Elec()
2019-05-15 09:40:46 -Mapped "{[/elec/elec/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecController.edit(java.lang.Long,org.springframework.ui.Model)
2019-05-15 09:40:46 -Mapped "{[/elec/elec/WxElecUpdate],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.WxElecUpdate(com.bootdo.elec.domain.ElecDO)
2019-05-15 09:40:46 -Mapped "{[/elec/elec/YhElecUpdate],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.YhElecUpdate(com.bootdo.elec.domain.ElecDO)
2019-05-15 09:40:46 -Mapped "{[/elec/elecInto/exprotElecIntoExcel],methods=[GET]}" onto public void com.bootdo.elec.controller.ElecIntoController.exprotExcel(com.bootdo.elec.vo.ElecVo,javax.servlet.http.HttpServletResponse)
2019-05-15 09:40:46 -Mapped "{[/elec/elecInto],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecIntoController.ElecInto()
2019-05-15 09:40:46 -Mapped "{[/elec/elecInto/importElecIntoExcel],methods=[POST]}" onto public java.lang.String com.bootdo.elec.controller.ElecIntoController.importElecIntoExcel(org.springframework.web.multipart.MultipartFile,com.bootdo.elec.vo.ElecVo,javax.servlet.http.HttpServletResponse) throws java.lang.Exception
2019-05-15 09:40:46 -Mapped "{[/elec/elecPrice/add],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecPriceController.add()
2019-05-15 09:40:46 -Mapped "{[/elec/elecPrice/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecPriceController.remove(java.lang.Long)
2019-05-15 09:40:46 -Mapped "{[/elec/elecPrice/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecPriceController.remove(java.lang.Long[])
2019-05-15 09:40:46 -Mapped "{[/elec/elecPrice/update]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecPriceController.update(com.bootdo.elec.domain.ElecPriceDO)
2019-05-15 09:40:46 -Mapped "{[/elec/elecPrice/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.elec.controller.ElecPriceController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 09:40:46 -Mapped "{[/elec/elecPrice/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecPriceController.save(com.bootdo.elec.domain.ElecPriceDO,com.bootdo.elec.domain.ElecDO)
2019-05-15 09:40:46 -Mapped "{[/elec/elecPrice/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecPriceController.edit(java.lang.Long,org.springframework.ui.Model)
2019-05-15 09:40:46 -Mapped "{[/elec/elecPrice],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecPriceController.ElecPrice()
2019-05-15 09:40:46 -Mapped "{[/elec/elecUpLoad],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecUpLoadController.Elec()
2019-05-15 09:40:46 -Mapped "{[/elec/elecUpLoad/importElecExcel],methods=[POST]}" onto public java.util.Map<java.lang.String, java.lang.Object> com.bootdo.elec.controller.ElecUpLoadController.importElecExcel(org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpServletRequest) throws java.lang.Exception
2019-05-15 09:40:46 -Mapped "{[/elec/elecUpLoad/exprotElecExcel],methods=[GET]}" onto public void com.bootdo.elec.controller.ElecUpLoadController.exprotElecExcel(com.bootdo.elec.vo.ElecVo,javax.servlet.http.HttpServletResponse)
2019-05-15 09:40:46 -Mapped "{[/heat/heat/add],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatController.add()
2019-05-15 09:40:46 -Mapped "{[/heat/heat/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatController.remove(java.lang.Integer)
2019-05-15 09:40:46 -Mapped "{[/heat/heat/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatController.remove(java.lang.Integer[])
2019-05-15 09:40:46 -Mapped "{[/heat/heat/update]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatController.update(com.bootdo.heat.domain.HeatDO)
2019-05-15 09:40:46 -Mapped "{[/heat/heat/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.heat.controller.HeatController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 09:40:46 -Mapped "{[/heat/heat/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatController.save(com.bootdo.heat.domain.HeatDO)
2019-05-15 09:40:46 -Mapped "{[/heat/heat/exprotHeat],methods=[GET]}" onto public void com.bootdo.heat.controller.HeatController.exprotExcel(com.bootdo.heat.vo.HeatVo,javax.servlet.http.HttpServletResponse)
2019-05-15 09:40:46 -Mapped "{[/heat/heat/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatController.edit(java.lang.Integer,org.springframework.ui.Model)
2019-05-15 09:40:46 -Mapped "{[/heat/heat],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatController.Heat()
2019-05-15 09:40:46 -Mapped "{[/heat/heatInto/exprotHeatIntoExcel],methods=[GET]}" onto public void com.bootdo.heat.controller.HeatIntoController.exprotExcel(com.bootdo.heat.vo.HeatVo,javax.servlet.http.HttpServletResponse)
2019-05-15 09:40:46 -Mapped "{[/heat/heatInto],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatIntoController.HeatInto()
2019-05-15 09:40:46 -Mapped "{[/heat/heatInto/importHeatIntoExcel],methods=[POST]}" onto public java.lang.String com.bootdo.heat.controller.HeatIntoController.importHeatIntoExcel(org.springframework.web.multipart.MultipartFile,com.bootdo.heat.vo.HeatVo,javax.servlet.http.HttpServletResponse) throws java.lang.Exception
2019-05-15 09:40:46 -Mapped "{[/heat/heatPrice/add],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatPriceController.add()
2019-05-15 09:40:46 -Mapped "{[/heat/heatPrice/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatPriceController.remove(java.lang.Long)
2019-05-15 09:40:46 -Mapped "{[/heat/heatPrice/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatPriceController.remove(java.lang.Long[])
2019-05-15 09:40:46 -Mapped "{[/heat/heatPrice/update]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatPriceController.update(com.bootdo.heat.domain.HeatPriceDO)
2019-05-15 09:40:46 -Mapped "{[/heat/heatPrice/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.heat.controller.HeatPriceController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 09:40:46 -Mapped "{[/heat/heatPrice/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatPriceController.save(com.bootdo.heat.domain.HeatPriceDO)
2019-05-15 09:40:46 -Mapped "{[/heat/heatPrice/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatPriceController.edit(java.lang.Long,org.springframework.ui.Model)
2019-05-15 09:40:46 -Mapped "{[/heat/heatPrice],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatPriceController.HeatPrice()
2019-05-15 09:40:46 -Mapped "{[/heat/heatUpLoad/importHeatExcel]}" onto public java.lang.String com.bootdo.heat.controller.HeatUpLoadController.importHeatExcel(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)
2019-05-15 09:40:46 -Mapped "{[/heat/heatUpLoad/exprotHeatExcel],methods=[GET]}" onto public void com.bootdo.heat.controller.HeatUpLoadController.exprotHeatExcel(com.bootdo.heat.vo.HeatVo,javax.servlet.http.HttpServletResponse)
2019-05-15 09:40:46 -Mapped "{[/heat/heatUpLoad],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatUpLoadController.HeatUpLoad()
2019-05-15 09:40:46 -Mapped "{[/heat/heatUpLoad/createHeatExcel],methods=[POST]}" onto public java.lang.String com.bootdo.heat.controller.HeatUpLoadController.createHeatExcel(com.bootdo.heat.domain.HeatDO) throws java.lang.Exception
2019-05-15 09:40:46 -Mapped "{[/moneyList/moneyList/queryAllUser],methods=[POST]}" onto public java.util.List<com.bootdo.moneyList.damain.MoneyListDO> com.bootdo.moneyList.controller.MoneyListController.queryAllUser(com.bootdo.moneyList.damain.MoneyListDO)
2019-05-15 09:40:46 -Mapped "{[/moneyList/moneyList/queryAllUserName],methods=[POST]}" onto public java.util.List<com.bootdo.moneyList.damain.MoneyListDO> com.bootdo.moneyList.controller.MoneyListController.getAllUserName(com.bootdo.moneyList.damain.MoneyListDO)
2019-05-15 09:40:46 -Mapped "{[/moneyList/moneyList/updateMoney],methods=[POST]}" onto public java.lang.String com.bootdo.moneyList.controller.MoneyListController.updateMoney(com.bootdo.moneyList.damain.MoneyListDO)
2019-05-15 09:40:46 -Mapped "{[/moneyList/moneyList],methods=[GET]}" onto java.lang.String com.bootdo.moneyList.controller.MoneyListController.MoneyList()
2019-05-15 09:40:46 -Mapped "{[/moneyLog/elecLog/add],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.ElecLogController.add()
2019-05-15 09:40:46 -Mapped "{[/moneyLog/elecLog/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.ElecLogController.remove(java.lang.Long)
2019-05-15 09:40:46 -Mapped "{[/moneyLog/elecLog/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.ElecLogController.remove(java.lang.Long[])
2019-05-15 09:40:46 -Mapped "{[/moneyLog/elecLog/update]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.ElecLogController.update(java.util.Map<java.lang.String, java.lang.Object>,com.bootdo.moneyLog.domain.ElecLogDO)
2019-05-15 09:40:46 -Mapped "{[/moneyLog/elecLog/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.moneyLog.controller.ElecLogController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 09:40:46 -Mapped "{[/moneyLog/elecLog/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.ElecLogController.save(com.bootdo.moneyLog.domain.ElecLogDO)
2019-05-15 09:40:46 -Mapped "{[/moneyLog/elecLog/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.ElecLogController.edit(java.lang.Long,org.springframework.ui.Model)
2019-05-15 09:40:46 -Mapped "{[/moneyLog/elecLog/exprotElecLog],methods=[GET]}" onto public void com.bootdo.moneyLog.controller.ElecLogController.exprotElecLog(com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-05-15 09:40:46 -Mapped "{[/moneyLog/elecLog],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.ElecLogController.moneyLog()
2019-05-15 09:40:46 -Mapped "{[/moneyLog/heatLog/add],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.HeatLogController.add()
2019-05-15 09:40:46 -Mapped "{[/moneyLog/heatLog/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.HeatLogController.remove(java.lang.Long)
2019-05-15 09:40:46 -Mapped "{[/moneyLog/heatLog/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.HeatLogController.remove(java.lang.Long[])
2019-05-15 09:40:46 -Mapped "{[/moneyLog/heatLog/update]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.HeatLogController.update(java.util.Map<java.lang.String, java.lang.Object>,com.bootdo.moneyLog.domain.HeatLogDO)
2019-05-15 09:40:46 -Mapped "{[/moneyLog/heatLog/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.moneyLog.controller.HeatLogController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 09:40:46 -Mapped "{[/moneyLog/heatLog/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.HeatLogController.save(com.bootdo.moneyLog.domain.HeatLogDO)
2019-05-15 09:40:46 -Mapped "{[/moneyLog/heatLog/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.HeatLogController.edit(java.lang.Long,org.springframework.ui.Model)
2019-05-15 09:40:46 -Mapped "{[/moneyLog/heatLog],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.HeatLogController.HeatLog()
2019-05-15 09:40:46 -Mapped "{[/moneyLog/heatLog/exprotHeatLog],methods=[GET]}" onto public void com.bootdo.moneyLog.controller.HeatLogController.exprotHeatLog(com.bootdo.moneyLog.vo.HeatLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-05-15 09:40:46 -Mapped "{[/moneyLog/waterLog/add],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.WaterLogController.add()
2019-05-15 09:40:46 -Mapped "{[/moneyLog/waterLog/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.WaterLogController.remove(java.lang.Long)
2019-05-15 09:40:46 -Mapped "{[/moneyLog/waterLog/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.WaterLogController.remove(java.lang.Long[])
2019-05-15 09:40:46 -Mapped "{[/moneyLog/waterLog/update]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.WaterLogController.update(java.util.Map<java.lang.String, java.lang.Object>,com.bootdo.moneyLog.domain.WaterLogDO)
2019-05-15 09:40:46 -Mapped "{[/moneyLog/waterLog/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.moneyLog.controller.WaterLogController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 09:40:46 -Mapped "{[/moneyLog/waterLog/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.WaterLogController.save(com.bootdo.moneyLog.domain.WaterLogDO)
2019-05-15 09:40:46 -Mapped "{[/moneyLog/waterLog/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.WaterLogController.edit(java.lang.Long,org.springframework.ui.Model)
2019-05-15 09:40:46 -Mapped "{[/moneyLog/waterLog/exprotWaterLog],methods=[GET]}" onto public void com.bootdo.moneyLog.controller.WaterLogController.exprotWaterLog(com.bootdo.moneyLog.vo.WaterLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-05-15 09:40:46 -Mapped "{[/moneyLog/waterLog],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.WaterLogController.WaterLog()
2019-05-15 09:40:46 -Mapped "{[/oa/notify/add],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.add()
2019-05-15 09:40:46 -Mapped "{[/oa/notify/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.remove(java.lang.Long)
2019-05-15 09:40:46 -Mapped "{[/oa/notify/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.remove(java.lang.Long[])
2019-05-15 09:40:46 -Mapped "{[/oa/notify/update]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.update(com.bootdo.oa.domain.NotifyDO)
2019-05-15 09:40:46 -Mapped "{[/oa/notify/read/{id}],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.read(java.lang.Long,org.springframework.ui.Model)
2019-05-15 09:40:46 -Mapped "{[/oa/notify/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.oa.controller.NotifyController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 09:40:46 -Mapped "{[/oa/notify/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.save(com.bootdo.oa.domain.NotifyDO)
2019-05-15 09:40:46 -Mapped "{[/oa/notify/message],methods=[GET]}" onto com.bootdo.common.utils.PageUtils com.bootdo.oa.controller.NotifyController.message()
2019-05-15 09:40:46 -Mapped "{[/oa/notify/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.edit(java.lang.Long,org.springframework.ui.Model)
2019-05-15 09:40:46 -Mapped "{[/oa/notify],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.oaNotify()
2019-05-15 09:40:46 -Mapped "{[/oa/notify/selfNotify],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.selefNotify()
2019-05-15 09:40:46 -Mapped "{[/oa/notify/selfList],methods=[GET]}" onto com.bootdo.common.utils.PageUtils com.bootdo.oa.controller.NotifyController.selfList(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 09:40:46 -Mapped "{[/print/print/add],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.add()
2019-05-15 09:40:46 -Mapped "{[/print/print/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.print.controller.PrintController.remove(java.lang.Long)
2019-05-15 09:40:46 -Mapped "{[/print/print/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.print.controller.PrintController.remove(java.lang.Long[])
2019-05-15 09:40:46 -Mapped "{[/print/print/update]}" onto public com.bootdo.common.utils.R com.bootdo.print.controller.PrintController.update(com.bootdo.print.domain.PrintDO)
2019-05-15 09:40:46 -Mapped "{[/print/print/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.print.controller.PrintController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 09:40:46 -Mapped "{[/print/print/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.print.controller.PrintController.save(java.lang.String,com.bootdo.print.domain.PrintDO)
2019-05-15 09:40:46 -Mapped "{[/print/print/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.edit(java.lang.Long,org.springframework.ui.Model)
2019-05-15 09:40:46 -Mapped "{[/print/print],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.Print()
2019-05-15 09:40:46 -Mapped "{[/print/print/printMoney],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.printMoney()
2019-05-15 09:40:46 -Mapped "{[/print/print/printEdit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.printEdit(java.lang.Long,org.springframework.ui.Model)
2019-05-15 09:40:46 -Mapped "{[/print/print/exprotPrint],methods=[GET]}" onto public void com.bootdo.print.controller.PrintController.exprotPrint(com.bootdo.print.vo.PrintVo,javax.servlet.http.HttpServletResponse)
2019-05-15 09:40:46 -Mapped "{[/system/sysDept/add/{pId}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.add(java.lang.Long,org.springframework.ui.Model)
2019-05-15 09:40:46 -Mapped "{[/system/sysDept/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.remove(java.lang.Long)
2019-05-15 09:40:46 -Mapped "{[/system/sysDept/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.remove(java.lang.Long[])
2019-05-15 09:40:46 -Mapped "{[/system/sysDept/update]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.update(com.bootdo.system.domain.DeptDO)
2019-05-15 09:40:46 -Mapped "{[/system/sysDept/list],methods=[GET]}" onto public java.util.List<com.bootdo.system.domain.DeptDO> com.bootdo.system.controller.DeptController.list()
2019-05-15 09:40:46 -Mapped "{[/system/sysDept/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.save(com.bootdo.system.domain.DeptDO)
2019-05-15 09:40:46 -Mapped "{[/system/sysDept/tree],methods=[GET]}" onto public com.bootdo.common.domain.Tree<com.bootdo.system.domain.DeptDO> com.bootdo.system.controller.DeptController.tree()
2019-05-15 09:40:46 -Mapped "{[/system/sysDept/edit/{deptId}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.edit(java.lang.Long,org.springframework.ui.Model)
2019-05-15 09:40:46 -Mapped "{[/system/sysDept],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.dept()
2019-05-15 09:40:46 -Mapped "{[/system/sysDept/treeView],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.treeView()
2019-05-15 09:40:46 -Mapped "{[/index],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.index(org.springframework.ui.Model)
2019-05-15 09:40:46 -Mapped "{[/main],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.main()
2019-05-15 09:40:46 -Mapped "{[/login],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.login(org.springframework.ui.Model)
2019-05-15 09:40:46 -Mapped "{[/logout],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.logout()
2019-05-15 09:40:46 -Mapped "{[/getVerify],methods=[GET]}" onto public void com.bootdo.system.controller.LoginController.getVerify(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-05-15 09:40:46 -Mapped "{[/login],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.LoginController.ajaxLogin(java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest)
2019-05-15 09:40:46 -Mapped "{[/ || ],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.welcome(org.springframework.ui.Model)
2019-05-15 09:40:46 -Mapped "{[/sys/menu/add/{pId}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.MenuController.add(org.springframework.ui.Model,java.lang.Long)
2019-05-15 09:40:46 -Mapped "{[/sys/menu/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.MenuController.remove(java.lang.Long)
2019-05-15 09:40:46 -Mapped "{[/sys/menu/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.MenuController.update(com.bootdo.system.domain.MenuDO)
2019-05-15 09:40:46 -Mapped "{[/sys/menu/list]}" onto java.util.List<com.bootdo.system.domain.MenuDO> com.bootdo.system.controller.MenuController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 09:40:46 -Mapped "{[/sys/menu/save],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.MenuController.save(com.bootdo.system.domain.MenuDO)
2019-05-15 09:40:46 -Mapped "{[/sys/menu/tree/{roleId}],methods=[GET]}" onto com.bootdo.common.domain.Tree<com.bootdo.system.domain.MenuDO> com.bootdo.system.controller.MenuController.tree(java.lang.Long)
2019-05-15 09:40:46 -Mapped "{[/sys/menu/tree],methods=[GET]}" onto com.bootdo.common.domain.Tree<com.bootdo.system.domain.MenuDO> com.bootdo.system.controller.MenuController.tree()
2019-05-15 09:40:46 -Mapped "{[/sys/menu/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.MenuController.edit(org.springframework.ui.Model,java.lang.Long)
2019-05-15 09:40:46 -Mapped "{[/sys/menu],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.MenuController.menu(org.springframework.ui.Model)
2019-05-15 09:40:46 -Mapped "{[/sys/role/add],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.RoleController.add()
2019-05-15 09:40:46 -Mapped "{[/sys/role/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.update(com.bootdo.system.domain.RoleDO)
2019-05-15 09:40:46 -Mapped "{[/sys/role/list],methods=[GET]}" onto java.util.List<com.bootdo.system.domain.RoleDO> com.bootdo.system.controller.RoleController.list()
2019-05-15 09:40:46 -Mapped "{[/sys/role/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.save(java.lang.Long)
2019-05-15 09:40:46 -Mapped "{[/sys/role/save],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.save(com.bootdo.system.domain.RoleDO)
2019-05-15 09:40:46 -Mapped "{[/sys/role/batchRemove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.batchRemove(java.lang.Long[])
2019-05-15 09:40:46 -Mapped "{[/sys/role/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.RoleController.edit(java.lang.Long,org.springframework.ui.Model)
2019-05-15 09:40:46 -Mapped "{[/sys/role],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.RoleController.role()
2019-05-15 09:40:46 -Mapped "{[/sys/online/list]}" onto public java.util.List<com.bootdo.system.domain.UserOnline> com.bootdo.system.controller.SessionController.list()
2019-05-15 09:40:46 -Mapped "{[/sys/online],methods=[GET]}" onto public java.lang.String com.bootdo.system.controller.SessionController.online()
2019-05-15 09:40:46 -Mapped "{[/sys/online/forceLogout/{sessionId}]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.SessionController.forceLogout(java.lang.String,org.springframework.web.servlet.mvc.support.RedirectAttributes)
2019-05-15 09:40:46 -Mapped "{[/sys/online/sessionList]}" onto public java.util.Collection<org.apache.shiro.session.Session> com.bootdo.system.controller.SessionController.sessionList()
2019-05-15 09:40:46 -Mapped "{[/sys/user/exit],methods=[POST]}" onto boolean com.bootdo.system.controller.UserController.exit(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 09:40:46 -Mapped "{[/sys/user/add],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.add(org.springframework.ui.Model)
2019-05-15 09:40:46 -Mapped "{[/sys/user/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.remove(java.lang.Long)
2019-05-15 09:40:46 -Mapped "{[/sys/user/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.update(com.bootdo.system.domain.UserDO)
2019-05-15 09:40:46 -Mapped "{[/sys/user/list],methods=[GET]}" onto com.bootdo.common.utils.PageUtils com.bootdo.system.controller.UserController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 09:40:46 -Mapped "{[/sys/user/save],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.save(com.bootdo.system.domain.UserDO)
2019-05-15 09:40:46 -Mapped "{[/sys/user/batchRemove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.batchRemove(java.lang.Long[])
2019-05-15 09:40:46 -Mapped "{[/sys/user/tree],methods=[GET]}" onto public com.bootdo.common.domain.Tree<com.bootdo.system.domain.DeptDO> com.bootdo.system.controller.UserController.tree()
2019-05-15 09:40:46 -Mapped "{[/sys/user],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.user(org.springframework.ui.Model)
2019-05-15 09:40:46 -Mapped "{[/sys/user/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.edit(org.springframework.ui.Model,java.lang.Long)
2019-05-15 09:40:46 -Mapped "{[/sys/user/treeView],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.treeView()
2019-05-15 09:40:46 -Mapped "{[/sys/user/adminResetPwd],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.adminResetPwd(com.bootdo.system.vo.UserVO)
2019-05-15 09:40:46 -Mapped "{[/sys/user/uploadImg],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.uploadImg(org.springframework.web.multipart.MultipartFile,java.lang.String,javax.servlet.http.HttpServletRequest)
2019-05-15 09:40:46 -Mapped "{[/sys/user/updatePeronal],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.updatePeronal(com.bootdo.system.domain.UserDO)
2019-05-15 09:40:46 -Mapped "{[/sys/user/resetPwd],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.resetPwd(com.bootdo.system.vo.UserVO)
2019-05-15 09:40:46 -Mapped "{[/sys/user/resetPwd/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.resetPwd(java.lang.Long,org.springframework.ui.Model)
2019-05-15 09:40:46 -Mapped "{[/sys/user/personal],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.personal(org.springframework.ui.Model)
2019-05-15 09:40:46 -Mapped "{[/file/downImport/{importType}],methods=[GET]}" onto public void com.bootdo.temple.controller.TempletController.downImport(javax.servlet.http.HttpServletResponse,java.lang.String)
2019-05-15 09:40:46 -Mapped "{[/water/water/add],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterController.add()
2019-05-15 09:40:46 -Mapped "{[/water/water/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterController.remove(java.lang.Long)
2019-05-15 09:40:46 -Mapped "{[/water/water/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterController.remove(java.lang.Long[])
2019-05-15 09:40:46 -Mapped "{[/water/water/update]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterController.update(com.bootdo.water.domain.WaterDO)
2019-05-15 09:40:46 -Mapped "{[/water/water/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.water.controller.WaterController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 09:40:46 -Mapped "{[/water/water/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterController.save(com.bootdo.water.domain.WaterDO)
2019-05-15 09:40:46 -Mapped "{[/water/water/exprotWater],methods=[GET]}" onto public void com.bootdo.water.controller.WaterController.exprotExcel(com.bootdo.water.vo.WaterVo,javax.servlet.http.HttpServletResponse)
2019-05-15 09:40:46 -Mapped "{[/water/water/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterController.edit(java.lang.Long,org.springframework.ui.Model)
2019-05-15 09:40:46 -Mapped "{[/water/water],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterController.Water()
2019-05-15 09:40:46 -Mapped "{[/water/waterInto/exprotWaterIntoExcel],methods=[GET]}" onto public void com.bootdo.water.controller.WaterIntoController.exprotExcel(com.bootdo.water.vo.WaterVo,javax.servlet.http.HttpServletResponse)
2019-05-15 09:40:46 -Mapped "{[/water/waterInto],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterIntoController.WaterInto()
2019-05-15 09:40:46 -Mapped "{[/water/waterInto/importWaterIntoExcel],methods=[POST]}" onto public java.lang.String com.bootdo.water.controller.WaterIntoController.importWaterIntoExcel(org.springframework.web.multipart.MultipartFile,com.bootdo.water.vo.WaterVo,javax.servlet.http.HttpServletResponse) throws java.lang.Exception
2019-05-15 09:40:46 -Mapped "{[/water/waterPrice/add],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterPriceController.add()
2019-05-15 09:40:46 -Mapped "{[/water/waterPrice/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterPriceController.remove(java.lang.Long)
2019-05-15 09:40:46 -Mapped "{[/water/waterPrice/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterPriceController.remove(java.lang.Long[])
2019-05-15 09:40:46 -Mapped "{[/water/waterPrice/update]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterPriceController.update(com.bootdo.water.domain.WaterPriceDO)
2019-05-15 09:40:46 -Mapped "{[/water/waterPrice/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.water.controller.WaterPriceController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 09:40:46 -Mapped "{[/water/waterPrice/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterPriceController.save(com.bootdo.water.domain.WaterPriceDO)
2019-05-15 09:40:46 -Mapped "{[/water/waterPrice/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterPriceController.edit(java.lang.Long,org.springframework.ui.Model)
2019-05-15 09:40:46 -Mapped "{[/water/waterPrice],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterPriceController.WaterPrice()
2019-05-15 09:40:47 -Mapped "{[/water/waterUpLoad/exprotWaterExcel],methods=[GET]}" onto public void com.bootdo.water.controller.WaterUpLoadController.exprotWaterExcel(com.bootdo.water.vo.WaterVo,javax.servlet.http.HttpServletResponse)
2019-05-15 09:40:47 -Mapped "{[/water/waterUpLoad/createWaterExcel],methods=[POST]}" onto public java.lang.String com.bootdo.water.controller.WaterUpLoadController.createWaterExcel(com.bootdo.water.domain.WaterDO) throws java.lang.Exception
2019-05-15 09:40:47 -Mapped "{[/water/waterUpLoad],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterUpLoadController.WaterUpLoad()
2019-05-15 09:40:47 -Mapped "{[/water/waterUpLoad/importWaterExcel]}" onto public java.lang.String com.bootdo.water.controller.WaterUpLoadController.importWaterExcel(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)
2019-05-15 09:40:47 -Mapped "{[/v2/api-docs],methods=[GET],produces=[application/json || application/hal+json]}" onto public org.springframework.http.ResponseEntity<springfox.documentation.spring.web.json.Json> springfox.documentation.swagger2.web.Swagger2Controller.getDocumentation(java.lang.String,javax.servlet.http.HttpServletRequest)
2019-05-15 09:40:47 -Mapped "{[/swagger-resources/configuration/ui]}" onto org.springframework.http.ResponseEntity<springfox.documentation.swagger.web.UiConfiguration> springfox.documentation.swagger.web.ApiResourceController.uiConfiguration()
2019-05-15 09:40:47 -Mapped "{[/swagger-resources]}" onto org.springframework.http.ResponseEntity<java.util.List<springfox.documentation.swagger.web.SwaggerResource>> springfox.documentation.swagger.web.ApiResourceController.swaggerResources()
2019-05-15 09:40:47 -Mapped "{[/swagger-resources/configuration/security]}" onto org.springframework.http.ResponseEntity<springfox.documentation.swagger.web.SecurityConfiguration> springfox.documentation.swagger.web.ApiResourceController.securityConfiguration()
2019-05-15 09:40:47 -Initializing ExecutorService  'messageBrokerTaskScheduler'
2019-05-15 09:40:47 -Mapped URL path [/endpointChat/**] onto handler of type [class org.springframework.web.socket.sockjs.support.SockJsHttpRequestHandler]
2019-05-15 09:40:47 -Initializing ExecutorService  'brokerChannelExecutor'
2019-05-15 09:40:48 -Mapped URL path [/**/favicon.ico] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-05-15 09:40:48 -Looking for @ControllerAdvice: org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@4d5650ae: startup date [Wed May 15 09:40:25 CST 2019]; root of context hierarchy
2019-05-15 09:40:48 -Mapped URL path [/webjars/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-05-15 09:40:48 -Mapped URL path [/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-05-15 09:40:48 -Mapped URL path [/files/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-05-15 09:40:48 -Detected @ExceptionHandler methods in BDExceptionHandler
2019-05-15 09:40:48 -[THYMELEAF][main] Template Mode 'LEGACYHTML5' is deprecated. Using Template Mode 'HTML' instead.
2019-05-15 09:40:50 -Registering beans for JMX exposure on startup
2019-05-15 09:40:50 -Bean with name 'dataSource' has been autodetected for JMX exposure
2019-05-15 09:40:50 -Located MBean 'dataSource': registering with JMX server as MBean [com.alibaba.druid.pool:name=dataSource,type=DruidDataSource]
2019-05-15 09:40:50 -Starting beans in phase 2147483647
2019-05-15 09:40:50 -Context refreshed
2019-05-15 09:40:50 -Found 1 custom documentation plugin(s)
2019-05-15 09:40:50 -Scanning for api listing references
2019-05-15 09:40:51 -Generating unique operation named: getCountDUsingPOST_1
2019-05-15 09:40:51 -Generating unique operation named: removeUsingPOST_1
2019-05-15 09:40:51 -Generating unique operation named: addUsingGET_1
2019-05-15 09:40:51 -Generating unique operation named: editUsingGET_1
2019-05-15 09:40:51 -Generating unique operation named: listUsingGET_1
2019-05-15 09:40:51 -Generating unique operation named: removeUsingPOST_2
2019-05-15 09:40:51 -Generating unique operation named: removeUsingPOST_3
2019-05-15 09:40:51 -Generating unique operation named: saveUsingPOST_1
2019-05-15 09:40:51 -Generating unique operation named: updateUsingGET_1
2019-05-15 09:40:51 -Generating unique operation named: updateUsingHEAD_1
2019-05-15 09:40:51 -Generating unique operation named: updateUsingPOST_1
2019-05-15 09:40:51 -Generating unique operation named: updateUsingPUT_1
2019-05-15 09:40:51 -Generating unique operation named: updateUsingPATCH_1
2019-05-15 09:40:51 -Generating unique operation named: updateUsingDELETE_1
2019-05-15 09:40:51 -Generating unique operation named: updateUsingOPTIONS_1
2019-05-15 09:40:51 -Generating unique operation named: updateUsingTRACE_1
2019-05-15 09:40:51 -Generating unique operation named: addUsingGET_2
2019-05-15 09:40:51 -Generating unique operation named: editUsingGET_2
2019-05-15 09:40:51 -Generating unique operation named: listUsingGET_2
2019-05-15 09:40:51 -Generating unique operation named: removeUsingPOST_4
2019-05-15 09:40:51 -Generating unique operation named: removeUsingPOST_5
2019-05-15 09:40:51 -Generating unique operation named: saveUsingPOST_2
2019-05-15 09:40:51 -Generating unique operation named: updateUsingPOST_2
2019-05-15 09:40:51 -Generating unique operation named: exprotExcelUsingGET_1
2019-05-15 09:40:51 -Generating unique operation named: addUsingGET_3
2019-05-15 09:40:51 -Generating unique operation named: editUsingGET_3
2019-05-15 09:40:51 -Generating unique operation named: listUsingGET_3
2019-05-15 09:40:51 -Generating unique operation named: removeUsingPOST_6
2019-05-15 09:40:51 -Generating unique operation named: removeUsingPOST_7
2019-05-15 09:40:51 -Generating unique operation named: saveUsingPOST_3
2019-05-15 09:40:51 -Generating unique operation named: updateUsingGET_2
2019-05-15 09:40:51 -Generating unique operation named: updateUsingHEAD_2
2019-05-15 09:40:51 -Generating unique operation named: updateUsingPOST_3
2019-05-15 09:40:51 -Generating unique operation named: updateUsingPUT_2
2019-05-15 09:40:51 -Generating unique operation named: updateUsingPATCH_2
2019-05-15 09:40:51 -Generating unique operation named: updateUsingDELETE_2
2019-05-15 09:40:51 -Generating unique operation named: updateUsingOPTIONS_2
2019-05-15 09:40:51 -Generating unique operation named: updateUsingTRACE_2
2019-05-15 09:40:51 -Generating unique operation named: addUsingGET_4
2019-05-15 09:40:51 -Generating unique operation named: editUsingGET_4
2019-05-15 09:40:51 -Generating unique operation named: listUsingGET_4
2019-05-15 09:40:51 -Generating unique operation named: removeUsingPOST_8
2019-05-15 09:40:51 -Generating unique operation named: removeUsingPOST_9
2019-05-15 09:40:51 -Generating unique operation named: saveUsingPOST_4
2019-05-15 09:40:51 -Generating unique operation named: updateUsingGET_3
2019-05-15 09:40:51 -Generating unique operation named: updateUsingHEAD_3
2019-05-15 09:40:51 -Generating unique operation named: updateUsingPOST_4
2019-05-15 09:40:51 -Generating unique operation named: updateUsingPUT_3
2019-05-15 09:40:51 -Generating unique operation named: updateUsingPATCH_3
2019-05-15 09:40:51 -Generating unique operation named: updateUsingDELETE_3
2019-05-15 09:40:51 -Generating unique operation named: updateUsingOPTIONS_3
2019-05-15 09:40:52 -Generating unique operation named: updateUsingTRACE_3
2019-05-15 09:40:52 -Generating unique operation named: ElecUsingGET_1
2019-05-15 09:40:52 -Generating unique operation named: addUsingGET_5
2019-05-15 09:40:52 -Generating unique operation named: editUsingGET_5
2019-05-15 09:40:52 -Generating unique operation named: listUsingGET_5
2019-05-15 09:40:52 -Generating unique operation named: removeUsingPOST_10
2019-05-15 09:40:52 -Generating unique operation named: removeUsingPOST_11
2019-05-15 09:40:52 -Generating unique operation named: saveUsingPOST_5
2019-05-15 09:40:52 -Generating unique operation named: updateUsingGET_4
2019-05-15 09:40:52 -Generating unique operation named: updateUsingHEAD_4
2019-05-15 09:40:52 -Generating unique operation named: updateUsingPOST_5
2019-05-15 09:40:52 -Generating unique operation named: updateUsingPUT_4
2019-05-15 09:40:52 -Generating unique operation named: updateUsingPATCH_4
2019-05-15 09:40:52 -Generating unique operation named: updateUsingDELETE_4
2019-05-15 09:40:52 -Generating unique operation named: updateUsingOPTIONS_4
2019-05-15 09:40:52 -Generating unique operation named: updateUsingTRACE_4
2019-05-15 09:40:52 -Generating unique operation named: editUsingGET_6
2019-05-15 09:40:52 -Generating unique operation named: listUsingGET_6
2019-05-15 09:40:52 -Generating unique operation named: updateUsingPOST_6
2019-05-15 09:40:52 -Generating unique operation named: addUsingGET_6
2019-05-15 09:40:52 -Generating unique operation named: editUsingGET_7
2019-05-15 09:40:52 -Generating unique operation named: exprotExcelUsingGET_2
2019-05-15 09:40:52 -Generating unique operation named: listUsingGET_7
2019-05-15 09:40:52 -Generating unique operation named: removeUsingPOST_12
2019-05-15 09:40:52 -Generating unique operation named: removeUsingPOST_13
2019-05-15 09:40:52 -Generating unique operation named: saveUsingPOST_6
2019-05-15 09:40:52 -Generating unique operation named: updateUsingGET_5
2019-05-15 09:40:52 -Generating unique operation named: updateUsingHEAD_5
2019-05-15 09:40:52 -Generating unique operation named: updateUsingPOST_7
2019-05-15 09:40:52 -Generating unique operation named: updateUsingPUT_5
2019-05-15 09:40:52 -Generating unique operation named: updateUsingPATCH_5
2019-05-15 09:40:52 -Generating unique operation named: updateUsingDELETE_5
2019-05-15 09:40:52 -Generating unique operation named: updateUsingOPTIONS_5
2019-05-15 09:40:52 -Generating unique operation named: updateUsingTRACE_5
2019-05-15 09:40:52 -Generating unique operation named: exprotExcelUsingGET_3
2019-05-15 09:40:52 -Generating unique operation named: addUsingGET_7
2019-05-15 09:40:52 -Generating unique operation named: editUsingGET_8
2019-05-15 09:40:52 -Generating unique operation named: listUsingGET_8
2019-05-15 09:40:52 -Generating unique operation named: removeUsingPOST_14
2019-05-15 09:40:52 -Generating unique operation named: removeUsingPOST_15
2019-05-15 09:40:52 -Generating unique operation named: saveUsingPOST_7
2019-05-15 09:40:52 -Generating unique operation named: updateUsingGET_6
2019-05-15 09:40:52 -Generating unique operation named: updateUsingHEAD_6
2019-05-15 09:40:52 -Generating unique operation named: updateUsingPOST_8
2019-05-15 09:40:52 -Generating unique operation named: updateUsingPUT_6
2019-05-15 09:40:52 -Generating unique operation named: updateUsingPATCH_6
2019-05-15 09:40:52 -Generating unique operation named: updateUsingDELETE_6
2019-05-15 09:40:52 -Generating unique operation named: updateUsingOPTIONS_6
2019-05-15 09:40:52 -Generating unique operation named: updateUsingTRACE_6
2019-05-15 09:40:52 -Generating unique operation named: addUsingGET_8
2019-05-15 09:40:52 -Generating unique operation named: editUsingGET_9
2019-05-15 09:40:52 -Generating unique operation named: listUsingGET_9
2019-05-15 09:40:52 -Generating unique operation named: removeUsingPOST_16
2019-05-15 09:40:52 -Generating unique operation named: removeUsingPOST_17
2019-05-15 09:40:52 -Generating unique operation named: saveUsingPOST_8
2019-05-15 09:40:52 -Generating unique operation named: updateUsingGET_7
2019-05-15 09:40:52 -Generating unique operation named: updateUsingHEAD_7
2019-05-15 09:40:52 -Generating unique operation named: updateUsingPOST_9
2019-05-15 09:40:52 -Generating unique operation named: updateUsingPUT_7
2019-05-15 09:40:52 -Generating unique operation named: updateUsingPATCH_7
2019-05-15 09:40:52 -Generating unique operation named: updateUsingDELETE_7
2019-05-15 09:40:52 -Generating unique operation named: updateUsingOPTIONS_7
2019-05-15 09:40:52 -Generating unique operation named: updateUsingTRACE_7
2019-05-15 09:40:52 -Generating unique operation named: addUsingGET_9
2019-05-15 09:40:52 -Generating unique operation named: editUsingGET_10
2019-05-15 09:40:52 -Generating unique operation named: infoUsingGET_1
2019-05-15 09:40:52 -Generating unique operation named: infoUsingHEAD_1
2019-05-15 09:40:52 -Generating unique operation named: infoUsingPOST_1
2019-05-15 09:40:52 -Generating unique operation named: infoUsingPUT_1
2019-05-15 09:40:52 -Generating unique operation named: infoUsingPATCH_1
2019-05-15 09:40:52 -Generating unique operation named: infoUsingDELETE_1
2019-05-15 09:40:52 -Generating unique operation named: infoUsingOPTIONS_1
2019-05-15 09:40:52 -Generating unique operation named: infoUsingTRACE_1
2019-05-15 09:40:52 -Generating unique operation named: listUsingGET_10
2019-05-15 09:40:52 -Generating unique operation named: removeUsingPOST_18
2019-05-15 09:40:52 -Generating unique operation named: removeUsingPOST_19
2019-05-15 09:40:52 -Generating unique operation named: saveUsingPOST_9
2019-05-15 09:40:52 -Generating unique operation named: updateUsingPOST_10
2019-05-15 09:40:52 -Generating unique operation named: listUsingGET_11
2019-05-15 09:40:52 -Generating unique operation named: removeUsingPOST_20
2019-05-15 09:40:52 -Generating unique operation named: welcomeUsingGET_1
2019-05-15 09:40:52 -Generating unique operation named: addUsingGET_10
2019-05-15 09:40:52 -Generating unique operation named: editUsingGET_11
2019-05-15 09:40:52 -Generating unique operation named: listUsingGET_12
2019-05-15 09:40:52 -Generating unique operation named: removeUsingPOST_21
2019-05-15 09:40:52 -Generating unique operation named: saveUsingPOST_10
2019-05-15 09:40:52 -Generating unique operation named: treeUsingGET_1
2019-05-15 09:40:52 -Generating unique operation named: treeUsingGET_2
2019-05-15 09:40:52 -Generating unique operation named: updateUsingPOST_11
2019-05-15 09:40:53 -Generating unique operation named: addUsingGET_11
2019-05-15 09:40:53 -Generating unique operation named: editUsingGET_12
2019-05-15 09:40:53 -Generating unique operation named: listUsingGET_13
2019-05-15 09:40:53 -Generating unique operation named: removeUsingPOST_22
2019-05-15 09:40:53 -Generating unique operation named: removeUsingPOST_23
2019-05-15 09:40:53 -Generating unique operation named: saveUsingPOST_11
2019-05-15 09:40:53 -Generating unique operation named: updateUsingGET_8
2019-05-15 09:40:53 -Generating unique operation named: updateUsingHEAD_8
2019-05-15 09:40:53 -Generating unique operation named: updateUsingPOST_12
2019-05-15 09:40:53 -Generating unique operation named: updateUsingPUT_8
2019-05-15 09:40:53 -Generating unique operation named: updateUsingPATCH_8
2019-05-15 09:40:53 -Generating unique operation named: updateUsingDELETE_8
2019-05-15 09:40:53 -Generating unique operation named: updateUsingOPTIONS_8
2019-05-15 09:40:53 -Generating unique operation named: updateUsingTRACE_8
2019-05-15 09:40:53 -Generating unique operation named: addUsingGET_12
2019-05-15 09:40:53 -Generating unique operation named: editUsingGET_13
2019-05-15 09:40:53 -Generating unique operation named: listUsingGET_14
2019-05-15 09:40:53 -Generating unique operation named: removeUsingPOST_24
2019-05-15 09:40:53 -Generating unique operation named: removeUsingPOST_25
2019-05-15 09:40:53 -Generating unique operation named: saveUsingPOST_12
2019-05-15 09:40:53 -Generating unique operation named: updateUsingGET_9
2019-05-15 09:40:53 -Generating unique operation named: updateUsingHEAD_9
2019-05-15 09:40:53 -Generating unique operation named: updateUsingPOST_13
2019-05-15 09:40:53 -Generating unique operation named: updateUsingPUT_9
2019-05-15 09:40:53 -Generating unique operation named: updateUsingPATCH_9
2019-05-15 09:40:53 -Generating unique operation named: updateUsingDELETE_9
2019-05-15 09:40:53 -Generating unique operation named: updateUsingOPTIONS_9
2019-05-15 09:40:53 -Generating unique operation named: updateUsingTRACE_9
2019-05-15 09:40:53 -Generating unique operation named: addUsingGET_13
2019-05-15 09:40:53 -Generating unique operation named: batchRemoveUsingPOST_1
2019-05-15 09:40:53 -Generating unique operation named: editUsingGET_14
2019-05-15 09:40:53 -Generating unique operation named: listUsingGET_15
2019-05-15 09:40:53 -Generating unique operation named: saveUsingPOST_13
2019-05-15 09:40:53 -Generating unique operation named: saveUsingPOST_14
2019-05-15 09:40:53 -Generating unique operation named: updateUsingPOST_14
2019-05-15 09:40:53 -Generating unique operation named: listUsingGET_16
2019-05-15 09:40:53 -Generating unique operation named: listUsingHEAD_1
2019-05-15 09:40:53 -Generating unique operation named: listUsingPOST_1
2019-05-15 09:40:53 -Generating unique operation named: listUsingPUT_1
2019-05-15 09:40:53 -Generating unique operation named: listUsingPATCH_1
2019-05-15 09:40:53 -Generating unique operation named: listUsingDELETE_1
2019-05-15 09:40:53 -Generating unique operation named: listUsingOPTIONS_1
2019-05-15 09:40:53 -Generating unique operation named: listUsingTRACE_1
2019-05-15 09:40:53 -Generating unique operation named: countDDUsingGET_1
2019-05-15 09:40:53 -Generating unique operation named: exportDDUsingGET_1
2019-05-15 09:40:53 -Generating unique operation named: getCountYYUsingPOST_1
2019-05-15 09:40:53 -Generating unique operation named: getCountMMUsingPOST_1
2019-05-15 09:40:53 -Generating unique operation named: addUsingGET_14
2019-05-15 09:40:53 -Generating unique operation named: batchRemoveUsingPOST_2
2019-05-15 09:40:53 -Generating unique operation named: editUsingGET_15
2019-05-15 09:40:53 -Generating unique operation named: listUsingGET_17
2019-05-15 09:40:53 -Generating unique operation named: removeUsingPOST_26
2019-05-15 09:40:53 -Generating unique operation named: saveUsingPOST_15
2019-05-15 09:40:53 -Generating unique operation named: treeUsingGET_3
2019-05-15 09:40:53 -Generating unique operation named: treeViewUsingGET_1
2019-05-15 09:40:53 -Generating unique operation named: updateUsingPOST_15
2019-05-15 09:40:53 -Generating unique operation named: addUsingGET_15
2019-05-15 09:40:53 -Generating unique operation named: editUsingGET_16
2019-05-15 09:40:53 -Generating unique operation named: exprotExcelUsingGET_4
2019-05-15 09:40:53 -Generating unique operation named: listUsingGET_18
2019-05-15 09:40:53 -Generating unique operation named: removeUsingPOST_27
2019-05-15 09:40:53 -Generating unique operation named: removeUsingPOST_28
2019-05-15 09:40:53 -Generating unique operation named: saveUsingPOST_16
2019-05-15 09:40:53 -Generating unique operation named: updateUsingGET_10
2019-05-15 09:40:53 -Generating unique operation named: updateUsingHEAD_10
2019-05-15 09:40:53 -Generating unique operation named: updateUsingPOST_16
2019-05-15 09:40:53 -Generating unique operation named: updateUsingPUT_10
2019-05-15 09:40:53 -Generating unique operation named: updateUsingPATCH_10
2019-05-15 09:40:53 -Generating unique operation named: updateUsingDELETE_10
2019-05-15 09:40:53 -Generating unique operation named: updateUsingOPTIONS_10
2019-05-15 09:40:53 -Generating unique operation named: updateUsingTRACE_10
2019-05-15 09:40:53 -Generating unique operation named: exprotExcelUsingGET_5
2019-05-15 09:40:53 -Generating unique operation named: addUsingGET_16
2019-05-15 09:40:53 -Generating unique operation named: editUsingGET_17
2019-05-15 09:40:53 -Generating unique operation named: listUsingGET_19
2019-05-15 09:40:53 -Generating unique operation named: removeUsingPOST_29
2019-05-15 09:40:53 -Generating unique operation named: removeUsingPOST_30
2019-05-15 09:40:53 -Generating unique operation named: saveUsingPOST_17
2019-05-15 09:40:53 -Generating unique operation named: updateUsingGET_11
2019-05-15 09:40:53 -Generating unique operation named: updateUsingHEAD_11
2019-05-15 09:40:53 -Generating unique operation named: updateUsingPOST_17
2019-05-15 09:40:53 -Generating unique operation named: updateUsingPUT_11
2019-05-15 09:40:53 -Generating unique operation named: updateUsingPATCH_11
2019-05-15 09:40:53 -Generating unique operation named: updateUsingDELETE_11
2019-05-15 09:40:53 -Generating unique operation named: updateUsingOPTIONS_11
2019-05-15 09:40:53 -Generating unique operation named: updateUsingTRACE_11
2019-05-15 09:40:53 -Generating unique operation named: addUsingGET_17
2019-05-15 09:40:53 -Generating unique operation named: editUsingGET_18
2019-05-15 09:40:53 -Generating unique operation named: listUsingGET_20
2019-05-15 09:40:53 -Generating unique operation named: removeUsingPOST_31
2019-05-15 09:40:53 -Generating unique operation named: removeUsingPOST_32
2019-05-15 09:40:53 -Generating unique operation named: saveUsingPOST_18
2019-05-15 09:40:53 -Generating unique operation named: updateUsingGET_12
2019-05-15 09:40:53 -Generating unique operation named: updateUsingHEAD_12
2019-05-15 09:40:53 -Generating unique operation named: updateUsingPOST_18
2019-05-15 09:40:53 -Generating unique operation named: updateUsingPUT_12
2019-05-15 09:40:53 -Generating unique operation named: updateUsingPATCH_12
2019-05-15 09:40:53 -Generating unique operation named: updateUsingDELETE_12
2019-05-15 09:40:53 -Generating unique operation named: updateUsingOPTIONS_12
2019-05-15 09:40:53 -Generating unique operation named: updateUsingTRACE_12
2019-05-15 09:40:53 -Starting Quartz Scheduler now
2019-05-15 09:40:53 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED started.
2019-05-15 09:40:53 -Starting...
2019-05-15 09:40:53 -BrokerAvailabilityEvent[available=true, SimpleBrokerMessageHandler [DefaultSubscriptionRegistry[cache[0 destination(s)], registry[0 sessions]]]]
2019-05-15 09:40:53 -Started.
2019-05-15 09:40:53 -Starting ProtocolHandler ["http-nio-8081"]
2019-05-15 09:40:54 -Using a shared selector for servlet write/read
2019-05-15 09:40:54 -Tomcat started on port(s): 8081 (http) with context path ''
2019-05-15 09:40:54 -Started BootdoApplication in 30.251 seconds (JVM running for 31.076)
2019-05-15 09:40:54 -==>  Preparing: select `id`,`cron_expression`,`method_name`,`is_concurrent`,`description`,`update_by`,`bean_class`,`create_date`,`job_status`,`job_group`,`update_date`,`create_by`,`spring_bean`,`job_name` from sys_task order by id desc 
2019-05-15 09:40:54 -==> Parameters: 
2019-05-15 09:40:54 -<==      Total: 1
2019-05-15 09:41:01 -Initializing Spring FrameworkServlet 'dispatcherServlet'
2019-05-15 09:41:01 -FrameworkServlet 'dispatcherServlet': initialization started
2019-05-15 09:41:01 -FrameworkServlet 'dispatcherServlet': initialization completed in 66 ms
2019-05-15 09:41:01 -Enabling session validation scheduler...
2019-05-15 09:41:01 -请求地址 : http://localhost:8081/login;JSESSIONID=02ae0c0e-540d-4681-a8f8-2d428669dfbf
2019-05-15 09:41:01 -HTTP METHOD : GET
2019-05-15 09:41:01 -CLASS_METHOD : com.bootdo.system.controller.LoginController.login
2019-05-15 09:41:01 -参数 : [{}]
2019-05-15 09:41:01 -耗时 : 4
2019-05-15 09:41:01 -返回值 : login
2019-05-15 09:41:02 -请求地址 : http://localhost:8081/getVerify
2019-05-15 09:41:02 -HTTP METHOD : GET
2019-05-15 09:41:02 -CLASS_METHOD : com.bootdo.system.controller.LoginController.getVerify
2019-05-15 09:41:02 -参数 : [org.apache.shiro.web.servlet.ShiroHttpServletRequest@4b30213a, org.apache.shiro.web.servlet.ShiroHttpServletResponse@45f7c62c]
2019-05-15 09:41:03 -2772
2019-05-15 09:41:03 -耗时 : 767
2019-05-15 09:41:03 -返回值 : null
2019-05-15 09:41:08 -请求地址 : http://localhost:8081/login
2019-05-15 09:41:08 -HTTP METHOD : POST
2019-05-15 09:41:08 -CLASS_METHOD : com.bootdo.system.controller.LoginController.ajaxLogin
2019-05-15 09:41:08 -参数 : [admin, 111111, 2772, org.apache.shiro.web.servlet.ShiroHttpServletRequest@75ad35e2]
2019-05-15 09:41:08 -==>  Preparing: select `user_id`,`username`,`name`,`password`,`dept_id`,`email`,`mobile`,`status`,`user_id_create`,`gmt_create`,`gmt_modified`,`sex`,`birth`,`pic_id`,`live_address`,`hobby`,`province`,`city`,`district` from sys_user WHERE username = ? order by user_id desc 
2019-05-15 09:41:08 -==> Parameters: admin(String)
2019-05-15 09:41:08 -<==      Total: 1
2019-05-15 09:41:08 -耗时 : 71
2019-05-15 09:41:08 -返回值 : {msg=操作成功, code=0}
2019-05-15 09:41:08 -More than one TaskExecutor bean found within the context, and none is named 'taskExecutor'. Mark one of them as primary or name it 'taskExecutor' (possibly as an alias) in order to use it for async processing: [clientInboundChannelExecutor, clientOutboundChannelExecutor, brokerChannelExecutor, messageBrokerTaskScheduler]
2019-05-15 09:41:08 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-05-15 09:41:08 -==> Parameters: 1(Long), admin(String), 登录(String), 72(Integer), com.bootdo.system.controller.LoginController.ajaxLogin()(String), null, 127.0.0.1(String), 2019-05-15 09:41:08.584(Timestamp)
2019-05-15 09:41:08 -请求地址 : http://localhost:8081/index
2019-05-15 09:41:08 -HTTP METHOD : GET
2019-05-15 09:41:08 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2019-05-15 09:41:08 -参数 : [{}]
2019-05-15 09:41:08 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2019-05-15 09:41:08 -<==    Updates: 1
2019-05-15 09:41:08 -==> Parameters: 1(Long)
2019-05-15 09:41:08 -<==      Total: 49
2019-05-15 09:41:08 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2019-05-15 09:41:08 -==> Parameters: 138(Long)
2019-05-15 09:41:08 -<==      Total: 1
2019-05-15 09:41:08 -耗时 : 132
2019-05-15 09:41:08 -返回值 : index_v1
2019-05-15 09:41:08 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-05-15 09:41:08 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 133(Integer), com.bootdo.system.controller.LoginController.index()(String), {"menus":[{"attributes":{"icon":"fa fa-money","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-money","url":"/moneyList/moneyList"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"102","parentId":"106","text":"现金缴费"},{"attributes":{"icon":"fa fa-book","url":"/moneyLog/elecLog"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"107","parentId":"106","text":"缴费记录"}],"hasChildren":true,"hasParent":false,"id":"106","parentId":"0","text":"收费管理"},{"attributes":{"icon":"fa fa-lightbulb-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/elec/elec"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"121","parentId":"103","text":"电费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"elec/elecInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"122","parentId":"103","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"elec/elecUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"123","parentId":"103","text":"电表上传"},{"attributes":{"icon":"fa fa-cc","url":"/elec/elecPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"124","parentId":"103","text":"电价管理"}],"hasChildren":true,"hasParent":false,"id":"103","parentId":"0","text":"电费管理"},{"attributes":{"icon":"fa fa-tint","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/water/water"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"117","parentId":"105","text":"水费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"water/waterInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"118","parentId":"105","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"water/waterUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"119","parentId":"105","text":"水费生成"},{"attributes":{"icon":"fa fa-cc","url":"/water/waterPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"120","parentId":"105","text":"水价管理"}],"hasChildren":true,"hasParent":false,"id":"105","parentId":"0","text":"水费管理"},{"attributes":{"icon":"fa fa-fire","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/heat/heat"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"113","parentId":"104","text":"暖费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"heat/heatInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"114","parentId":"104","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"heat/heatUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"115","parentId":"104","text":"暖费生成"},{"attributes":{"icon":"","url":"/heat/heatPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"116","parentId":"104","text":"暖价管理"}],"hasChildren":true,"hasParent":false,"id":"104","parentId":"0","text":"暖费管理"},{"attributes":{"icon":"fa fa-vcard-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-bomb","url":"/print/print"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"149","parentId":"108","text":"票据记录"}],"hasChildren":true,"hasParent":false,"id":"108","parentId":"0","text":"票据管理"},{"attributes":{"icon":"fa fa-bar-chart","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-area-chart","url":"/chart/graph_echarts.html"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","text":"百度chart"},{"attributes":{"icon":"fa fa-sun-o","url":"charts/countDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"109","parentId":"97","text":"日统计报表"},{"attributes":{"icon":"fa fa-calendar","url":"charts/tableDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"161","parentId":"97","text":"日统计表格"},{"attributes":{"icon":"fa fa-registered","url":"charts/countMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"110","parentId":"97","text":"月统计报表"},{"attributes":{"icon":"fa fa-building-o","url":"charts/tableElecMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"162","parentId":"97","text":"月统计表格"},{"attributes":{"icon":"fa fa-support","url":"charts/countYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"111","parentId":"97","text":"年统计报表"},{"attributes":{"icon":"fa fa-book","url":"charts/tableElecYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"163","parentId":"97","text":"年统计表格"},{"attributes":{"icon":"fa fa-money","url":"charts/countOwe"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"155","parentId":"97","text":"欠费报表图"},{"attributes":{"icon":"fa fa-tachometer","url":"charts/countRun"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"112"(String), 127.0.0.1(String), 2019-05-15 09:41:08.821(Timestamp)
2019-05-15 09:41:08 -<==    Updates: 1
2019-05-15 09:41:08 -请求地址 : http://localhost:8081/main
2019-05-15 09:41:08 -HTTP METHOD : GET
2019-05-15 09:41:08 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-05-15 09:41:08 -参数 : []
2019-05-15 09:41:08 -耗时 : 1
2019-05-15 09:41:08 -返回值 : main
2019-05-15 09:41:09 -请求地址 : http://localhost:8081/oa/notify/message
2019-05-15 09:41:09 -HTTP METHOD : GET
2019-05-15 09:41:09 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2019-05-15 09:41:09 -参数 : []
2019-05-15 09:41:09 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2019-05-15 09:41:09 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2019-05-15 09:41:09 -<==      Total: 0
2019-05-15 09:41:09 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2019-05-15 09:41:09 -==> Parameters: 1(Long), 0(String)
2019-05-15 09:41:09 -<==      Total: 1
2019-05-15 09:41:09 -耗时 : 44
2019-05-15 09:41:09 -返回值 : com.bootdo.common.utils.PageUtils@19ac536a
2019-05-15 09:41:09 -请求地址 : http://localhost:8081/main
2019-05-15 09:41:09 -HTTP METHOD : GET
2019-05-15 09:41:09 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-05-15 09:41:09 -参数 : []
2019-05-15 09:41:09 -耗时 : 1
2019-05-15 09:41:09 -返回值 : main
2019-05-15 09:41:15 -==>  Preparing: select distinct m.perms from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id = ur.role_id where ur.user_id = ? 
2019-05-15 09:41:15 -==> Parameters: 1(Long)
2019-05-15 09:41:15 -<==      Total: 93
2019-05-15 09:41:15 -请求地址 : http://localhost:8081/water/waterPrice
2019-05-15 09:41:15 -HTTP METHOD : GET
2019-05-15 09:41:15 -CLASS_METHOD : com.bootdo.water.controller.WaterPriceController.WaterPrice
2019-05-15 09:41:15 -参数 : []
2019-05-15 09:41:15 -耗时 : 0
2019-05-15 09:41:15 -返回值 : water/waterPrice/waterPrice
2019-05-15 09:41:16 -请求地址 : http://localhost:8081/water/waterPrice/list
2019-05-15 09:41:16 -HTTP METHOD : GET
2019-05-15 09:41:16 -CLASS_METHOD : com.bootdo.water.controller.WaterPriceController.list
2019-05-15 09:41:16 -参数 : [{limit=10, offset=0}]
2019-05-15 09:41:16 -==>  Preparing: select `id`,`water_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `water_org`) AS waterOrgName,`m_water`,`s1_water`,`s2_water`,`s3_water`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from water_price order by id asc limit ?, ? 
2019-05-15 09:41:16 -==> Parameters: 0(Integer), 10(Integer)
2019-05-15 09:41:16 -<==      Total: 2
2019-05-15 09:41:16 -==>  Preparing: select count(*) from water_price 
2019-05-15 09:41:16 -==> Parameters: 
2019-05-15 09:41:16 -<==      Total: 1
2019-05-15 09:41:16 -耗时 : 29
2019-05-15 09:41:16 -返回值 : com.bootdo.common.utils.PageUtils@96b11fa
2019-05-15 09:41:17 -请求地址 : http://localhost:8081/water/waterPrice/edit/1
2019-05-15 09:41:17 -HTTP METHOD : GET
2019-05-15 09:41:17 -CLASS_METHOD : com.bootdo.water.controller.WaterPriceController.edit
2019-05-15 09:41:17 -参数 : [1, {}]
2019-05-15 09:41:17 -==>  Preparing: select `id`,`water_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `water_org`) AS waterOrgName,`m_water`,`s1_water`,`s2_water`,`s3_water`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from water_price where id = ? 
2019-05-15 09:41:17 -==> Parameters: 1(Long)
2019-05-15 09:41:17 -<==      Total: 1
2019-05-15 09:41:17 -耗时 : 12
2019-05-15 09:41:17 -返回值 : water/waterPrice/edit
2019-05-15 09:41:32 -请求地址 : http://localhost:8081/water/waterPrice/edit/1
2019-05-15 09:41:32 -HTTP METHOD : GET
2019-05-15 09:41:32 -CLASS_METHOD : com.bootdo.water.controller.WaterPriceController.edit
2019-05-15 09:41:32 -参数 : [1, {}]
2019-05-15 09:41:32 -==>  Preparing: select `id`,`water_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `water_org`) AS waterOrgName,`m_water`,`s1_water`,`s2_water`,`s3_water`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from water_price where id = ? 
2019-05-15 09:41:32 -==> Parameters: 1(Long)
2019-05-15 09:41:32 -<==      Total: 1
2019-05-15 09:41:32 -耗时 : 6
2019-05-15 09:41:32 -返回值 : water/waterPrice/edit
2019-05-15 09:41:40 -请求地址 : http://localhost:8081/water/waterPrice/update
2019-05-15 09:41:40 -HTTP METHOD : POST
2019-05-15 09:41:40 -CLASS_METHOD : com.bootdo.water.controller.WaterPriceController.update
2019-05-15 09:41:40 -参数 : [com.bootdo.water.domain.WaterPriceDO@69035d5d]
2019-05-15 09:41:40 -==>  Preparing: update water_price SET `water_org` = ?, `m_water` = ?, `s1_water` = ?, `create_time` = ?, `create_by` = ?, `update_time` = ?, `update_by` = ?, `remark` = ? where id = ? 
2019-05-15 09:41:40 -==> Parameters: 2(String), 7(BigDecimal), 10(BigDecimal), (String), 1(Long), 2019-05-15 09:41:40.76(Timestamp), 1(Long), (String), 1(Long)
2019-05-15 09:41:40 -<==    Updates: 1
2019-05-15 09:41:40 -==>  Preparing: update water SET `water_price` = ?, `create_by` = ?, `update_time` = ?, `update_by` = ?, `remark` = ? where `user_org` = ? and `create_time` = ? and `water_type` == '1' 
2019-05-15 09:41:40 -Loading XML bean definitions from class path resource [org/springframework/jdbc/support/sql-error-codes.xml]
2019-05-15 09:41:41 -SQLErrorCodes loaded: [DB2, Derby, H2, HDB, HSQL, Informix, MS-SQL, MySQL, Oracle, PostgreSQL, Sybase]
2019-05-15 09:41:41 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-05-15 09:41:41 -==> Parameters: 1(Long), admin(String), error(String), null, http://localhost:8081/water/waterPrice/update(String), org.springframework.jdbc.UncategorizedSQLException: 
### Error updating database.  Cause: java.sql.SQLException: sql injection violation, syntax error: syntax error, error in :' and `water_type` == '1'',expect EQEQ, actual EQEQ `water_type` : update water
		 SET `water_price` = ?, 

			`create_by` = ?, 
			`update_time` = ?, 
			`update_by` = ?, 
			`remark` = ? 
		where   `user_org` = ?  and `create_time` = ?  and `water_type` == '1'
### SQL: update water    SET `water_price` = ?,      `create_by` = ?,     `update_time` = ?,     `update_by` = ?,     `remark` = ?    where   `user_org` = ?  and `create_time` = ?  and `water_type` == '1'
### Cause: java.sql.SQLException: sql injection violation, syntax error: syntax error, error in :' and `water_type` == '1'',expect EQEQ, actual EQEQ `water_type` : update water
		 SET `water_price` = ?, 

			`create_by` = ?, 
			`update_time` = ?, 
			`update_by` = ?, 
			`remark` = ? 
		where   `user_org` = ?  and `create_time` = ?  and `water_type` == '1'
; uncategorized SQLException; SQL state [null]; error code [0]; sql injection violation, syntax error: syntax error, error in :' and `water_type` == '1'',expect EQEQ, actual EQEQ `water_type` : update water
		 SET `water_price` = ?, 

			`create_by` = ?, 
			`update_time` = ?, 
			`update_by` = ?, 
			`remark` = ? 
		where   `user_org` = ?  and `create_time` = ?  and `water_type` == '1'; nested exception is java.sql.SQLException: sql injection violation, syntax error: syntax error, error in :' and `water_type` == '1'',expect EQEQ, actual EQEQ `water_type` : update water
		 SET `water_price` = ?, 

			`create_by` = ?, 
			`update_time` = ?, 
			`update_by` = ?, 
			`remark` = ? 
		where   `user_org` = ?  and `create_time` = ?  and `water_type` == '1'(String), null, 2019-05-15 09:41:41.078(Timestamp)
2019-05-15 09:41:41 -
### Error updating database.  Cause: java.sql.SQLException: sql injection violation, syntax error: syntax error, error in :' and `water_type` == '1'',expect EQEQ, actual EQEQ `water_type` : update water
		 SET `water_price` = ?, 

			`create_by` = ?, 
			`update_time` = ?, 
			`update_by` = ?, 
			`remark` = ? 
		where   `user_org` = ?  and `create_time` = ?  and `water_type` == '1'
### SQL: update water    SET `water_price` = ?,      `create_by` = ?,     `update_time` = ?,     `update_by` = ?,     `remark` = ?    where   `user_org` = ?  and `create_time` = ?  and `water_type` == '1'
### Cause: java.sql.SQLException: sql injection violation, syntax error: syntax error, error in :' and `water_type` == '1'',expect EQEQ, actual EQEQ `water_type` : update water
		 SET `water_price` = ?, 

			`create_by` = ?, 
			`update_time` = ?, 
			`update_by` = ?, 
			`remark` = ? 
		where   `user_org` = ?  and `create_time` = ?  and `water_type` == '1'
; uncategorized SQLException; SQL state [null]; error code [0]; sql injection violation, syntax error: syntax error, error in :' and `water_type` == '1'',expect EQEQ, actual EQEQ `water_type` : update water
		 SET `water_price` = ?, 

			`create_by` = ?, 
			`update_time` = ?, 
			`update_by` = ?, 
			`remark` = ? 
		where   `user_org` = ?  and `create_time` = ?  and `water_type` == '1'; nested exception is java.sql.SQLException: sql injection violation, syntax error: syntax error, error in :' and `water_type` == '1'',expect EQEQ, actual EQEQ `water_type` : update water
		 SET `water_price` = ?, 

			`create_by` = ?, 
			`update_time` = ?, 
			`update_by` = ?, 
			`remark` = ? 
		where   `user_org` = ?  and `create_time` = ?  and `water_type` == '1'
org.springframework.jdbc.UncategorizedSQLException: 
### Error updating database.  Cause: java.sql.SQLException: sql injection violation, syntax error: syntax error, error in :' and `water_type` == '1'',expect EQEQ, actual EQEQ `water_type` : update water
		 SET `water_price` = ?, 

			`create_by` = ?, 
			`update_time` = ?, 
			`update_by` = ?, 
			`remark` = ? 
		where   `user_org` = ?  and `create_time` = ?  and `water_type` == '1'
### SQL: update water    SET `water_price` = ?,      `create_by` = ?,     `update_time` = ?,     `update_by` = ?,     `remark` = ?    where   `user_org` = ?  and `create_time` = ?  and `water_type` == '1'
### Cause: java.sql.SQLException: sql injection violation, syntax error: syntax error, error in :' and `water_type` == '1'',expect EQEQ, actual EQEQ `water_type` : update water
		 SET `water_price` = ?, 

			`create_by` = ?, 
			`update_time` = ?, 
			`update_by` = ?, 
			`remark` = ? 
		where   `user_org` = ?  and `create_time` = ?  and `water_type` == '1'
; uncategorized SQLException; SQL state [null]; error code [0]; sql injection violation, syntax error: syntax error, error in :' and `water_type` == '1'',expect EQEQ, actual EQEQ `water_type` : update water
		 SET `water_price` = ?, 

			`create_by` = ?, 
			`update_time` = ?, 
			`update_by` = ?, 
			`remark` = ? 
		where   `user_org` = ?  and `create_time` = ?  and `water_type` == '1'; nested exception is java.sql.SQLException: sql injection violation, syntax error: syntax error, error in :' and `water_type` == '1'',expect EQEQ, actual EQEQ `water_type` : update water
		 SET `water_price` = ?, 

			`create_by` = ?, 
			`update_time` = ?, 
			`update_by` = ?, 
			`remark` = ? 
		where   `user_org` = ?  and `create_time` = ?  and `water_type` == '1'
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:89)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:81)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:81)
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:75)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:447)
	at com.sun.proxy.$Proxy101.update(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.update(SqlSessionTemplate.java:295)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:62)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy143.updateWater(Unknown Source)
	at com.bootdo.water.service.impl.WaterPriceServiceImpl.updateWater(WaterPriceServiceImpl.java:44)
	at com.bootdo.water.controller.WaterPriceController.update(WaterPriceController.java:94)
	at com.bootdo.water.controller.WaterPriceController$$FastClassBySpringCGLIB$$fb365725.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:204)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:746)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.bootdo.common.aspect.WebLogAspect.doAround(WebLogAspect.java:57)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.apache.shiro.spring.security.interceptor.AopAllianceAnnotationsAuthorizingMethodInterceptor$1.proceed(AopAllianceAnnotationsAuthorizingMethodInterceptor.java:82)
	at org.apache.shiro.authz.aop.AuthorizingMethodInterceptor.invoke(AuthorizingMethodInterceptor.java:39)
	at org.apache.shiro.spring.security.interceptor.AopAllianceAnnotationsAuthorizingMethodInterceptor.invoke(AopAllianceAnnotationsAuthorizingMethodInterceptor.java:115)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.bootdo.water.controller.WaterPriceController$$EnhancerBySpringCGLIB$$e86de3b1.update(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:209)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:877)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:783)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:991)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:925)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:974)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:877)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:661)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:851)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:61)
	at org.apache.shiro.web.servlet.AdviceFilter.executeChain(AdviceFilter.java:108)
	at org.apache.shiro.web.servlet.AdviceFilter.doFilterInternal(AdviceFilter.java:137)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:66)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)
	at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)
	at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)
	at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)
	at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:383)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:109)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:496)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:790)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1468)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:745)
Caused by: java.sql.SQLException: sql injection violation, syntax error: syntax error, error in :' and `water_type` == '1'',expect EQEQ, actual EQEQ `water_type` : update water
		 SET `water_price` = ?, 

			`create_by` = ?, 
			`update_time` = ?, 
			`update_by` = ?, 
			`remark` = ? 
		where   `user_org` = ?  and `create_time` = ?  and `water_type` == '1'
	at com.alibaba.druid.wall.WallFilter.check(WallFilter.java:725)
	at com.alibaba.druid.wall.WallFilter.connection_prepareStatement(WallFilter.java:253)
	at com.alibaba.druid.filter.FilterChainImpl.connection_prepareStatement(FilterChainImpl.java:448)
	at com.alibaba.druid.filter.FilterAdapter.connection_prepareStatement(FilterAdapter.java:928)
	at com.alibaba.druid.filter.FilterEventAdapter.connection_prepareStatement(FilterEventAdapter.java:122)
	at com.alibaba.druid.filter.FilterChainImpl.connection_prepareStatement(FilterChainImpl.java:448)
	at com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl.prepareStatement(ConnectionProxyImpl.java:342)
	at com.alibaba.druid.pool.DruidPooledConnection.prepareStatement(DruidPooledConnection.java:331)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ibatis.logging.jdbc.ConnectionLogger.invoke(ConnectionLogger.java:55)
	at com.sun.proxy.$Proxy172.prepareStatement(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.instantiateStatement(PreparedStatementHandler.java:87)
	at org.apache.ibatis.executor.statement.BaseStatementHandler.prepare(BaseStatementHandler.java:88)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.prepare(RoutingStatementHandler.java:59)
	at org.apache.ibatis.executor.SimpleExecutor.prepareStatement(SimpleExecutor.java:85)
	at org.apache.ibatis.executor.SimpleExecutor.doUpdate(SimpleExecutor.java:49)
	at org.apache.ibatis.executor.BaseExecutor.update(BaseExecutor.java:117)
	at org.apache.ibatis.executor.CachingExecutor.update(CachingExecutor.java:76)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:198)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:434)
	... 104 common frames omitted
Caused by: com.alibaba.druid.sql.parser.ParserException: syntax error, error in :' and `water_type` == '1'',expect EQEQ, actual EQEQ `water_type`
	at com.alibaba.druid.sql.parser.SQLParser.printError(SQLParser.java:239)
	at com.alibaba.druid.sql.parser.SQLStatementParser.parseStatementList(SQLStatementParser.java:362)
	at com.alibaba.druid.sql.parser.SQLStatementParser.parseStatementList(SQLStatementParser.java:79)
	at com.alibaba.druid.wall.WallProvider.checkInternal(WallProvider.java:620)
	at com.alibaba.druid.wall.WallProvider.check(WallProvider.java:574)
	at com.alibaba.druid.wall.WallFilter.check(WallFilter.java:712)
	... 130 common frames omitted
2019-05-15 09:41:41 -<==    Updates: 1
2019-05-15 09:41:47 -WebSocketSession[1 current WS(1)-HttpStream(0)-HttpPoll(0), 1 total, 0 closed abnormally (0 connect failure, 0 send limit, 0 transport error)], stompSubProtocol[processed CONNECT(1)-CONNECTED(1)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 8, active threads = 0, queued tasks = 0, completed tasks = 9], outboundChannelpool size = 1, active threads = 0, queued tasks = 0, completed tasks = 1], sockJsScheduler[pool size = 4, active threads = 1, queued tasks = 2, completed tasks = 9]
2019-05-15 09:58:34 -==>  Preparing: select distinct m.perms from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id = ur.role_id where ur.user_id = ? 
2019-05-15 09:58:34 -==> Parameters: 1(Long)
2019-05-15 09:58:34 -<==      Total: 93
2019-05-15 09:58:34 -请求地址 : http://localhost:8081/water/waterPrice/edit/1
2019-05-15 09:58:34 -HTTP METHOD : GET
2019-05-15 09:58:34 -CLASS_METHOD : com.bootdo.water.controller.WaterPriceController.edit
2019-05-15 09:58:34 -参数 : [1, {}]
2019-05-15 09:58:34 -==>  Preparing: select `id`,`water_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `water_org`) AS waterOrgName,`m_water`,`s1_water`,`s2_water`,`s3_water`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from water_price where id = ? 
2019-05-15 09:58:34 -==> Parameters: 1(Long)
2019-05-15 09:58:34 -<==      Total: 1
2019-05-15 09:58:34 -耗时 : 4
2019-05-15 09:58:34 -返回值 : water/waterPrice/edit
2019-05-15 09:58:57 -请求地址 : http://localhost:8081/water/waterPrice/edit/1
2019-05-15 09:58:57 -HTTP METHOD : GET
2019-05-15 09:58:57 -CLASS_METHOD : com.bootdo.water.controller.WaterPriceController.edit
2019-05-15 09:58:57 -参数 : [1, {}]
2019-05-15 09:58:57 -==>  Preparing: select `id`,`water_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `water_org`) AS waterOrgName,`m_water`,`s1_water`,`s2_water`,`s3_water`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from water_price where id = ? 
2019-05-15 09:58:57 -==> Parameters: 1(Long)
2019-05-15 09:58:57 -<==      Total: 1
2019-05-15 09:58:57 -耗时 : 7
2019-05-15 09:58:57 -返回值 : water/waterPrice/edit
2019-05-15 10:11:47 -WebSocketSession[1 current WS(1)-HttpStream(0)-HttpPoll(0), 1 total, 0 closed abnormally (0 connect failure, 0 send limit, 0 transport error)], stompSubProtocol[processed CONNECT(1)-CONNECTED(1)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 9], outboundChannelpool size = 0, active threads = 0, queued tasks = 0, completed tasks = 1], sockJsScheduler[pool size = 4, active threads = 1, queued tasks = 2, completed tasks = 442]
2019-05-15 10:25:15 -Starting BootdoApplication on PC-201905091110 with PID 28824 (D:\eclipse2018-work\bootdo\target\classes started by Administrator in D:\eclipse2018-work\bootdo)
2019-05-15 10:25:15 -Running with Spring Boot v2.0.3.RELEASE, Spring v5.0.7.RELEASE
2019-05-15 10:25:15 -The following profiles are active: dev
2019-05-15 10:25:15 -Refreshing org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@4d5650ae: startup date [Wed May 15 10:25:15 CST 2019]; root of context hierarchy
2019-05-15 10:25:18 -Multiple Spring Data modules found, entering strict repository configuration mode!
2019-05-15 10:25:20 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$76957a4f] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-05-15 10:25:20 -Bean 'shiroConfig' of type [com.bootdo.system.config.ShiroConfig$$EnhancerBySpringCGLIB$$68eea8f6] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-05-15 10:25:21 -Bean 'userRealm' of type [com.bootdo.system.shiro.UserRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-05-15 10:25:21 -Bean 'cacheManager2' of type [net.sf.ehcache.CacheManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-05-15 10:25:21 -Bean 'ehCacheManager' of type [org.apache.shiro.cache.ehcache.EhCacheManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-05-15 10:25:21 -Cache with name 'com.bootdo.system.shiro.UserRealm.authorizationCache' does not yet exist.  Creating now.
2019-05-15 10:25:21 -Added EhCache named [com.bootdo.system.shiro.UserRealm.authorizationCache]
2019-05-15 10:25:21 -Bean 'sessionDAO' of type [org.apache.shiro.session.mgt.eis.MemorySessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-05-15 10:25:21 -Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-05-15 10:25:21 -Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-05-15 10:25:21 -Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-05-15 10:25:22 -Tomcat initialized with port(s): 8081 (http)
2019-05-15 10:25:22 -Initializing ProtocolHandler ["http-nio-8081"]
2019-05-15 10:25:22 -Starting service [Tomcat]
2019-05-15 10:25:22 -Starting Servlet Engine: Apache Tomcat/8.5.31
2019-05-15 10:25:22 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [D:\Java\JDK\jdk1.8.0_102\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;D:/Java/JRE/bin/server;D:/Java/JRE/bin;D:/Java/JRE/lib/amd64;C:\ProgramData\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Windows\System32\OpenSSH\;%JAVA_HOME\bin%;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;;C:\Users\Administrator\Desktop;;.]
2019-05-15 10:25:22 -Initializing Spring embedded WebApplicationContext
2019-05-15 10:25:22 -Root WebApplicationContext: initialization completed in 6715 ms
2019-05-15 10:25:23 -Mapping filter: 'characterEncodingFilter' to: [/*]
2019-05-15 10:25:23 -Mapping filter: 'hiddenHttpMethodFilter' to: [/*]
2019-05-15 10:25:23 -Mapping filter: 'httpPutFormContentFilter' to: [/*]
2019-05-15 10:25:23 -Mapping filter: 'requestContextFilter' to: [/*]
2019-05-15 10:25:23 -Filter xssFilter was not registered (disabled)
2019-05-15 10:25:23 -Mapping filter: 'webStatFilter' to urls: [/*]
2019-05-15 10:25:23 -Mapping filter: 'shiroFilterFactoryBean' to: [/*]
2019-05-15 10:25:23 -Servlet statViewServlet mapped to [/druid/*]
2019-05-15 10:25:23 -Servlet dispatcherServlet mapped to [/]
2019-05-15 10:25:30 -ApplicationContext registed-->org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@4d5650ae: startup date [Wed May 15 10:25:15 CST 2019]; root of context hierarchy
2019-05-15 10:25:31 -Using default implementation for ThreadExecutor
2019-05-15 10:25:31 -Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2019-05-15 10:25:31 -Quartz Scheduler v.2.2.1 created.
2019-05-15 10:25:31 -RAMJobStore initialized.
2019-05-15 10:25:31 -Scheduler meta-data: Quartz Scheduler (v2.2.1) 'schedulerFactoryBean' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2019-05-15 10:25:31 -Quartz scheduler 'schedulerFactoryBean' initialized from an externally provided properties instance.
2019-05-15 10:25:31 -Quartz scheduler version: 2.2.1
2019-05-15 10:25:31 -JobFactory set to: com.bootdo.common.quartz.factory.JobFactory@4601047
2019-05-15 10:25:31 -Initializing ExecutorService  'clientInboundChannelExecutor'
2019-05-15 10:25:31 -Initializing ExecutorService  'clientOutboundChannelExecutor'
2019-05-15 10:25:33 -Mapped "{[/charts/countDD],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.countDDController.countDD()
2019-05-15 10:25:33 -Mapped "{[/charts/countDD/exportDD],methods=[GET]}" onto public void com.bootdo.charts.controller.countDDController.exportDD(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.HeatLogVo,com.bootdo.moneyLog.vo.WaterLogVo,javax.servlet.http.HttpServletResponse)
2019-05-15 10:25:33 -Mapped "{[/charts/countDD/getCountDD],methods=[POST]}" onto public com.bootdo.charts.vo.CountDayVo com.bootdo.charts.controller.countDDController.getCountD(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo)
2019-05-15 10:25:33 -Mapped "{[/charts/countMM/getCountMM],methods=[POST]}" onto public java.util.Map com.bootdo.charts.controller.countMMController.getCountMM(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo)
2019-05-15 10:25:33 -Mapped "{[/charts/countMM],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.countMMController.countMM()
2019-05-15 10:25:33 -Mapped "{[/charts/countMM/exportMM],methods=[GET]}" onto public void com.bootdo.charts.controller.countMMController.exportMM(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.HeatLogVo,com.bootdo.moneyLog.vo.WaterLogVo,javax.servlet.http.HttpServletResponse)
2019-05-15 10:25:33 -Mapped "{[/charts/countOwe/exportOwe],methods=[GET]}" onto public void com.bootdo.charts.controller.countOweController.exportOwe(com.bootdo.elec.vo.ElecVo,com.bootdo.heat.vo.HeatVo,com.bootdo.water.vo.WaterVo,javax.servlet.http.HttpServletResponse)
2019-05-15 10:25:33 -Mapped "{[/charts/countOwe],methods=[GET]}" onto java.lang.String com.bootdo.charts.controller.countOweController.countOwe()
2019-05-15 10:25:33 -Mapped "{[/charts/countOwe/getCountOwe],methods=[POST]}" onto public com.bootdo.charts.vo.CountOweVo com.bootdo.charts.controller.countOweController.getCountD(com.bootdo.elec.vo.ElecVo,com.bootdo.water.vo.WaterVo,com.bootdo.heat.vo.HeatVo)
2019-05-15 10:25:33 -Mapped "{[/charts/countRun/getCountRun],methods=[POST]}" onto public java.util.Map com.bootdo.charts.controller.countRunController.getCountRun(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo)
2019-05-15 10:25:33 -Mapped "{[/charts/countRun],methods=[GET]}" onto java.lang.String com.bootdo.charts.controller.countRunController.countRun()
2019-05-15 10:25:33 -Mapped "{[/charts/countRun/exportRun],methods=[GET]}" onto public void com.bootdo.charts.controller.countRunController.exportRun(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.HeatLogVo,com.bootdo.moneyLog.vo.WaterLogVo,javax.servlet.http.HttpServletResponse)
2019-05-15 10:25:33 -Mapped "{[/charts/countYY],methods=[GET]}" onto java.lang.String com.bootdo.charts.controller.countYYController.countYY()
2019-05-15 10:25:33 -Mapped "{[/charts/countYY/getCountYY],methods=[POST]}" onto public java.util.Map com.bootdo.charts.controller.countYYController.getCountYY(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo)
2019-05-15 10:25:33 -Mapped "{[/charts/countYY/exportYY],methods=[GET]}" onto public void com.bootdo.charts.controller.countYYController.exportYY(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.HeatLogVo,com.bootdo.moneyLog.vo.WaterLogVo,javax.servlet.http.HttpServletResponse)
2019-05-15 10:25:33 -Mapped "{[/charts/tableDD/getTableDD],methods=[POST]}" onto public java.util.Map com.bootdo.charts.controller.tableDDController.getTableDD(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo)
2019-05-15 10:25:33 -Mapped "{[/charts/tableDD],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.tableDDController.countDD()
2019-05-15 10:25:33 -Mapped "{[/charts/tableDD/exportDD],methods=[GET]}" onto public void com.bootdo.charts.controller.tableDDController.exportDD(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.HeatLogVo,com.bootdo.moneyLog.vo.WaterLogVo,javax.servlet.http.HttpServletResponse)
2019-05-15 10:25:33 -Mapped "{[/charts/tableElecMM/exportElecMM],methods=[GET]}" onto public void com.bootdo.charts.controller.tableElecMMController.exportElecMM(com.bootdo.elec.vo.ElecVo,com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse)
2019-05-15 10:25:33 -Mapped "{[/charts/tableElecMM],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.tableElecMMController.tableElecMM()
2019-05-15 10:25:33 -Mapped "{[/charts/tableElecMM/tableElecMM],methods=[POST]}" onto public java.util.Map com.bootdo.charts.controller.tableElecMMController.tableElecMM(com.bootdo.elec.vo.ElecVo,com.bootdo.moneyLog.vo.ElecLogVo)
2019-05-15 10:25:33 -Mapped "{[/charts/tableElecYY],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.tableElecYYController.tableElecYY()
2019-05-15 10:25:33 -Mapped "{[/charts/tableElecYY/exportElecYY],methods=[GET]}" onto public void com.bootdo.charts.controller.tableElecYYController.exportElecYY(com.bootdo.elec.vo.ElecVo,com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse)
2019-05-15 10:25:33 -Mapped "{[/charts/tableElecYY/getCountYY],methods=[POST]}" onto public java.util.Map com.bootdo.charts.controller.tableElecYYController.getCountYY(com.bootdo.elec.vo.ElecVo,com.bootdo.moneyLog.vo.ElecLogVo)
2019-05-15 10:25:33 -Mapped "{[/charts/tableHeatMM/tableHeatMM],methods=[POST]}" onto public java.util.Map com.bootdo.charts.controller.tableHeatMMController.tableHeatMM(com.bootdo.heat.vo.HeatVo,com.bootdo.moneyLog.vo.HeatLogVo)
2019-05-15 10:25:33 -Mapped "{[/charts/tableHeatMM],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.tableHeatMMController.tableHeatMM()
2019-05-15 10:25:33 -Mapped "{[/charts/tableHeatMM/exportHeatMM],methods=[GET]}" onto public void com.bootdo.charts.controller.tableHeatMMController.exportHeatMM(com.bootdo.heat.vo.HeatVo,com.bootdo.moneyLog.vo.HeatLogVo,javax.servlet.http.HttpServletResponse)
2019-05-15 10:25:33 -Mapped "{[/charts/tableHeatYY/exportHeatYY],methods=[GET]}" onto public void com.bootdo.charts.controller.tableHeatYYController.exportHeatYY(com.bootdo.heat.vo.HeatVo,com.bootdo.moneyLog.vo.HeatLogVo,javax.servlet.http.HttpServletResponse)
2019-05-15 10:25:33 -Mapped "{[/charts/tableHeatYY],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.tableHeatYYController.tableHeatYY()
2019-05-15 10:25:33 -Mapped "{[/charts/tableHeatYY/getCountYY],methods=[POST]}" onto public java.util.Map com.bootdo.charts.controller.tableHeatYYController.getCountMM(com.bootdo.heat.vo.HeatVo,com.bootdo.moneyLog.vo.HeatLogVo)
2019-05-15 10:25:33 -Mapped "{[/charts/tableWaterMM/exportWaterMM],methods=[GET]}" onto public void com.bootdo.charts.controller.tableWaterMMController.exportWaterMM(com.bootdo.water.vo.WaterVo,com.bootdo.moneyLog.vo.WaterLogVo,javax.servlet.http.HttpServletResponse)
2019-05-15 10:25:33 -Mapped "{[/charts/tableWaterMM],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.tableWaterMMController.tableWaterMM()
2019-05-15 10:25:33 -Mapped "{[/charts/tableWaterMM/tableWaterMM],methods=[POST]}" onto public java.util.Map com.bootdo.charts.controller.tableWaterMMController.tableWaterMM(com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.water.vo.WaterVo)
2019-05-15 10:25:33 -Mapped "{[/charts/tableWaterYY/tableWaterYY],methods=[POST]}" onto public java.util.Map com.bootdo.charts.controller.tableWaterYYController.tableWaterYY(com.bootdo.water.vo.WaterVo,com.bootdo.moneyLog.vo.WaterLogVo)
2019-05-15 10:25:33 -Mapped "{[/charts/tableWaterYY],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.tableWaterYYController.tableWaterYY()
2019-05-15 10:25:33 -Mapped "{[/charts/tableWaterYY/exportWaterYY],methods=[GET]}" onto public void com.bootdo.charts.controller.tableWaterYYController.exportWaterYY(com.bootdo.water.vo.WaterVo,com.bootdo.moneyLog.vo.WaterLogVo,javax.servlet.http.HttpServletResponse)
2019-05-15 10:25:33 -Mapped "{[/common/dict/add],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.add()
2019-05-15 10:25:33 -Mapped "{[/common/dict/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.remove(java.lang.Long)
2019-05-15 10:25:33 -Mapped "{[/common/dict/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.remove(java.lang.Long[])
2019-05-15 10:25:33 -Mapped "{[/common/dict/update]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.update(com.bootdo.common.domain.DictDO)
2019-05-15 10:25:33 -Mapped "{[/common/dict/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.common.controller.DictController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 10:25:33 -Mapped "{[/common/dict/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.save(com.bootdo.common.domain.DictDO)
2019-05-15 10:25:33 -Mapped "{[/common/dict/type],methods=[GET]}" onto public java.util.List<com.bootdo.common.domain.DictDO> com.bootdo.common.controller.DictController.listType()
2019-05-15 10:25:33 -Mapped "{[/common/dict/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.edit(java.lang.Long,org.springframework.ui.Model)
2019-05-15 10:25:33 -Mapped "{[/common/dict/list/{type}],methods=[GET]}" onto public java.util.List<com.bootdo.common.domain.DictDO> com.bootdo.common.controller.DictController.listByType(java.lang.String)
2019-05-15 10:25:33 -Mapped "{[/common/dict],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.dict()
2019-05-15 10:25:33 -Mapped "{[/common/dict/add/{type}/{description}],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.addD(org.springframework.ui.Model,java.lang.String,java.lang.String)
2019-05-15 10:25:33 -Mapped "{[/common/sysFile/add],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.FileController.add()
2019-05-15 10:25:33 -Mapped "{[/common/sysFile/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.remove(java.lang.Long,javax.servlet.http.HttpServletRequest)
2019-05-15 10:25:33 -Mapped "{[/common/sysFile/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.remove(java.lang.Long[])
2019-05-15 10:25:33 -Mapped "{[/common/sysFile/update]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.update(com.bootdo.common.domain.FileDO)
2019-05-15 10:25:33 -Mapped "{[/common/sysFile/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.common.controller.FileController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 10:25:33 -Mapped "{[/common/sysFile/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.save(com.bootdo.common.domain.FileDO)
2019-05-15 10:25:33 -Mapped "{[/common/sysFile/info/{id}]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.info(java.lang.Long)
2019-05-15 10:25:33 -Mapped "{[/common/sysFile/edit],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.FileController.edit(java.lang.Long,org.springframework.ui.Model)
2019-05-15 10:25:33 -Mapped "{[/common/sysFile/upload],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.FileController.upload(org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpServletRequest)
2019-05-15 10:25:33 -Mapped "{[/common/sysFile],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.FileController.sysFile(org.springframework.ui.Model)
2019-05-15 10:25:33 -Mapped "{[/common/generator/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.GeneratorController.update(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 10:25:33 -Mapped "{[/common/generator/list],methods=[GET]}" onto java.util.List<java.util.Map<java.lang.String, java.lang.Object>> com.bootdo.common.controller.GeneratorController.list()
2019-05-15 10:25:33 -Mapped "{[/common/generator/code/{tableName}]}" onto public void com.bootdo.common.controller.GeneratorController.code(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String) throws java.io.IOException
2019-05-15 10:25:33 -Mapped "{[/common/generator],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.GeneratorController.generator()
2019-05-15 10:25:33 -Mapped "{[/common/generator/edit],methods=[GET]}" onto public java.lang.String com.bootdo.common.controller.GeneratorController.edit(org.springframework.ui.Model)
2019-05-15 10:25:33 -Mapped "{[/common/generator/batchCode]}" onto public void com.bootdo.common.controller.GeneratorController.batchCode(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String) throws java.io.IOException
2019-05-15 10:25:33 -Mapped "{[/common/job/add],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.JobController.add()
2019-05-15 10:25:33 -Mapped "{[/common/job/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.remove(java.lang.Long)
2019-05-15 10:25:33 -Mapped "{[/common/job/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.remove(java.lang.Long[])
2019-05-15 10:25:33 -Mapped "{[/common/job/update],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.update(com.bootdo.common.domain.TaskDO)
2019-05-15 10:25:33 -Mapped "{[/common/job/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.common.controller.JobController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 10:25:33 -Mapped "{[/common/job/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.save(com.bootdo.common.domain.TaskDO)
2019-05-15 10:25:33 -Mapped "{[/common/job/info/{id}]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.info(java.lang.Long)
2019-05-15 10:25:33 -Mapped "{[/common/job/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.JobController.edit(java.lang.Long,org.springframework.ui.Model)
2019-05-15 10:25:33 -Mapped "{[/common/job],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.JobController.taskScheduleJob()
2019-05-15 10:25:33 -Mapped "{[/common/job/changeJobStatus],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.changeJobStatus(java.lang.Long,java.lang.String)
2019-05-15 10:25:33 -Mapped "{[/common/log/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.LogController.remove(java.lang.Long)
2019-05-15 10:25:33 -Mapped "{[/common/log],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.LogController.log()
2019-05-15 10:25:33 -Mapped "{[/common/log/list],methods=[GET]}" onto com.bootdo.common.domain.PageDO<com.bootdo.common.domain.LogDO> com.bootdo.common.controller.LogController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 10:25:33 -Mapped "{[/common/log/batchRemove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.LogController.batchRemove(java.lang.Long[])
2019-05-15 10:25:33 -Mapped "{[/common/long],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.LongController.Long()
2019-05-15 10:25:33 -Mapped "{[/common/time],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.TimeController.Time()
2019-05-15 10:25:33 -Mapped "{[/error]}" onto public com.bootdo.common.utils.R com.bootdo.common.exception.MainsiteErrorController.handleError(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-05-15 10:25:33 -Mapped "{[/error],produces=[text/html]}" onto public org.springframework.web.servlet.ModelAndView com.bootdo.common.exception.MainsiteErrorController.errorHtml(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-05-15 10:25:33 -Mapped "{[/elec/elec/add],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecController.add()
2019-05-15 10:25:33 -Mapped "{[/elec/elec/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.remove(java.lang.Long)
2019-05-15 10:25:33 -Mapped "{[/elec/elec/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.remove(java.lang.Long[])
2019-05-15 10:25:33 -Mapped "{[/elec/elec/update],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.update(com.bootdo.elec.domain.ElecDO)
2019-05-15 10:25:33 -Mapped "{[/elec/elec/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.elec.controller.ElecController.list(java.util.Map<java.lang.String, java.lang.Object>,com.bootdo.elec.domain.ElecDO)
2019-05-15 10:25:33 -Mapped "{[/elec/elec/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.save(com.bootdo.elec.domain.ElecDO)
2019-05-15 10:25:33 -Mapped "{[/elec/elec/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecController.edit(java.lang.Long,org.springframework.ui.Model)
2019-05-15 10:25:33 -Mapped "{[/elec/elec],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecController.Elec()
2019-05-15 10:25:33 -Mapped "{[/elec/elec/exprotElec],methods=[GET]}" onto public void com.bootdo.elec.controller.ElecController.exprotExcel(com.bootdo.elec.vo.ElecVo,javax.servlet.http.HttpServletResponse)
2019-05-15 10:25:33 -Mapped "{[/elec/elec/WxElecUpdate],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.WxElecUpdate(com.bootdo.elec.domain.ElecDO)
2019-05-15 10:25:33 -Mapped "{[/elec/elec/YhElecUpdate],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.YhElecUpdate(com.bootdo.elec.domain.ElecDO)
2019-05-15 10:25:33 -Mapped "{[/elec/elecInto],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecIntoController.ElecInto()
2019-05-15 10:25:33 -Mapped "{[/elec/elecInto/exprotElecIntoExcel],methods=[GET]}" onto public void com.bootdo.elec.controller.ElecIntoController.exprotExcel(com.bootdo.elec.vo.ElecVo,javax.servlet.http.HttpServletResponse)
2019-05-15 10:25:33 -Mapped "{[/elec/elecInto/importElecIntoExcel],methods=[POST]}" onto public java.lang.String com.bootdo.elec.controller.ElecIntoController.importElecIntoExcel(org.springframework.web.multipart.MultipartFile,com.bootdo.elec.vo.ElecVo,javax.servlet.http.HttpServletResponse) throws java.lang.Exception
2019-05-15 10:25:33 -Mapped "{[/elec/elecPrice/add],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecPriceController.add()
2019-05-15 10:25:33 -Mapped "{[/elec/elecPrice/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecPriceController.remove(java.lang.Long)
2019-05-15 10:25:33 -Mapped "{[/elec/elecPrice/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecPriceController.remove(java.lang.Long[])
2019-05-15 10:25:33 -Mapped "{[/elec/elecPrice/update]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecPriceController.update(com.bootdo.elec.domain.ElecPriceDO)
2019-05-15 10:25:33 -Mapped "{[/elec/elecPrice/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.elec.controller.ElecPriceController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 10:25:33 -Mapped "{[/elec/elecPrice/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecPriceController.save(com.bootdo.elec.domain.ElecPriceDO,com.bootdo.elec.domain.ElecDO)
2019-05-15 10:25:33 -Mapped "{[/elec/elecPrice/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecPriceController.edit(java.lang.Long,org.springframework.ui.Model)
2019-05-15 10:25:33 -Mapped "{[/elec/elecPrice],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecPriceController.ElecPrice()
2019-05-15 10:25:33 -Mapped "{[/elec/elecUpLoad],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecUpLoadController.Elec()
2019-05-15 10:25:33 -Mapped "{[/elec/elecUpLoad/importElecExcel],methods=[POST]}" onto public java.util.Map<java.lang.String, java.lang.Object> com.bootdo.elec.controller.ElecUpLoadController.importElecExcel(org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpServletRequest) throws java.lang.Exception
2019-05-15 10:25:33 -Mapped "{[/elec/elecUpLoad/exprotElecExcel],methods=[GET]}" onto public void com.bootdo.elec.controller.ElecUpLoadController.exprotElecExcel(com.bootdo.elec.vo.ElecVo,javax.servlet.http.HttpServletResponse)
2019-05-15 10:25:33 -Mapped "{[/heat/heat/add],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatController.add()
2019-05-15 10:25:33 -Mapped "{[/heat/heat/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatController.remove(java.lang.Integer)
2019-05-15 10:25:33 -Mapped "{[/heat/heat/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatController.remove(java.lang.Integer[])
2019-05-15 10:25:33 -Mapped "{[/heat/heat/update]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatController.update(com.bootdo.heat.domain.HeatDO)
2019-05-15 10:25:33 -Mapped "{[/heat/heat/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.heat.controller.HeatController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 10:25:33 -Mapped "{[/heat/heat/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatController.save(com.bootdo.heat.domain.HeatDO)
2019-05-15 10:25:33 -Mapped "{[/heat/heat/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatController.edit(java.lang.Integer,org.springframework.ui.Model)
2019-05-15 10:25:33 -Mapped "{[/heat/heat/exprotHeat],methods=[GET]}" onto public void com.bootdo.heat.controller.HeatController.exprotExcel(com.bootdo.heat.vo.HeatVo,javax.servlet.http.HttpServletResponse)
2019-05-15 10:25:33 -Mapped "{[/heat/heat],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatController.Heat()
2019-05-15 10:25:33 -Mapped "{[/heat/heatInto/exprotHeatIntoExcel],methods=[GET]}" onto public void com.bootdo.heat.controller.HeatIntoController.exprotExcel(com.bootdo.heat.vo.HeatVo,javax.servlet.http.HttpServletResponse)
2019-05-15 10:25:33 -Mapped "{[/heat/heatInto],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatIntoController.HeatInto()
2019-05-15 10:25:33 -Mapped "{[/heat/heatInto/importHeatIntoExcel],methods=[POST]}" onto public java.lang.String com.bootdo.heat.controller.HeatIntoController.importHeatIntoExcel(org.springframework.web.multipart.MultipartFile,com.bootdo.heat.vo.HeatVo,javax.servlet.http.HttpServletResponse) throws java.lang.Exception
2019-05-15 10:25:33 -Mapped "{[/heat/heatPrice/add],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatPriceController.add()
2019-05-15 10:25:33 -Mapped "{[/heat/heatPrice/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatPriceController.remove(java.lang.Long)
2019-05-15 10:25:33 -Mapped "{[/heat/heatPrice/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatPriceController.remove(java.lang.Long[])
2019-05-15 10:25:33 -Mapped "{[/heat/heatPrice/update]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatPriceController.update(com.bootdo.heat.domain.HeatPriceDO)
2019-05-15 10:25:33 -Mapped "{[/heat/heatPrice/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.heat.controller.HeatPriceController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 10:25:33 -Mapped "{[/heat/heatPrice/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatPriceController.save(com.bootdo.heat.domain.HeatPriceDO)
2019-05-15 10:25:33 -Mapped "{[/heat/heatPrice/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatPriceController.edit(java.lang.Long,org.springframework.ui.Model)
2019-05-15 10:25:33 -Mapped "{[/heat/heatPrice],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatPriceController.HeatPrice()
2019-05-15 10:25:34 -Mapped "{[/heat/heatUpLoad/importHeatExcel]}" onto public java.lang.String com.bootdo.heat.controller.HeatUpLoadController.importHeatExcel(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)
2019-05-15 10:25:34 -Mapped "{[/heat/heatUpLoad/createHeatExcel],methods=[POST]}" onto public java.lang.String com.bootdo.heat.controller.HeatUpLoadController.createHeatExcel(com.bootdo.heat.domain.HeatDO) throws java.lang.Exception
2019-05-15 10:25:34 -Mapped "{[/heat/heatUpLoad],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatUpLoadController.HeatUpLoad()
2019-05-15 10:25:34 -Mapped "{[/heat/heatUpLoad/exprotHeatExcel],methods=[GET]}" onto public void com.bootdo.heat.controller.HeatUpLoadController.exprotHeatExcel(com.bootdo.heat.vo.HeatVo,javax.servlet.http.HttpServletResponse)
2019-05-15 10:25:34 -Mapped "{[/moneyList/moneyList/updateMoney],methods=[POST]}" onto public java.lang.String com.bootdo.moneyList.controller.MoneyListController.updateMoney(com.bootdo.moneyList.damain.MoneyListDO)
2019-05-15 10:25:34 -Mapped "{[/moneyList/moneyList/queryAllUser],methods=[POST]}" onto public java.util.List<com.bootdo.moneyList.damain.MoneyListDO> com.bootdo.moneyList.controller.MoneyListController.queryAllUser(com.bootdo.moneyList.damain.MoneyListDO)
2019-05-15 10:25:34 -Mapped "{[/moneyList/moneyList],methods=[GET]}" onto java.lang.String com.bootdo.moneyList.controller.MoneyListController.MoneyList()
2019-05-15 10:25:34 -Mapped "{[/moneyList/moneyList/queryAllUserName],methods=[POST]}" onto public java.util.List<com.bootdo.moneyList.damain.MoneyListDO> com.bootdo.moneyList.controller.MoneyListController.getAllUserName(com.bootdo.moneyList.damain.MoneyListDO)
2019-05-15 10:25:34 -Mapped "{[/moneyLog/elecLog/add],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.ElecLogController.add()
2019-05-15 10:25:34 -Mapped "{[/moneyLog/elecLog/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.ElecLogController.remove(java.lang.Long)
2019-05-15 10:25:34 -Mapped "{[/moneyLog/elecLog/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.ElecLogController.remove(java.lang.Long[])
2019-05-15 10:25:34 -Mapped "{[/moneyLog/elecLog/update]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.ElecLogController.update(java.util.Map<java.lang.String, java.lang.Object>,com.bootdo.moneyLog.domain.ElecLogDO)
2019-05-15 10:25:34 -Mapped "{[/moneyLog/elecLog/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.moneyLog.controller.ElecLogController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 10:25:34 -Mapped "{[/moneyLog/elecLog/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.ElecLogController.save(com.bootdo.moneyLog.domain.ElecLogDO)
2019-05-15 10:25:34 -Mapped "{[/moneyLog/elecLog/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.ElecLogController.edit(java.lang.Long,org.springframework.ui.Model)
2019-05-15 10:25:34 -Mapped "{[/moneyLog/elecLog],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.ElecLogController.moneyLog()
2019-05-15 10:25:34 -Mapped "{[/moneyLog/elecLog/exprotElecLog],methods=[GET]}" onto public void com.bootdo.moneyLog.controller.ElecLogController.exprotElecLog(com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-05-15 10:25:34 -Mapped "{[/moneyLog/heatLog/add],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.HeatLogController.add()
2019-05-15 10:25:34 -Mapped "{[/moneyLog/heatLog/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.HeatLogController.remove(java.lang.Long)
2019-05-15 10:25:34 -Mapped "{[/moneyLog/heatLog/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.HeatLogController.remove(java.lang.Long[])
2019-05-15 10:25:34 -Mapped "{[/moneyLog/heatLog/update]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.HeatLogController.update(java.util.Map<java.lang.String, java.lang.Object>,com.bootdo.moneyLog.domain.HeatLogDO)
2019-05-15 10:25:34 -Mapped "{[/moneyLog/heatLog/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.moneyLog.controller.HeatLogController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 10:25:34 -Mapped "{[/moneyLog/heatLog/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.HeatLogController.save(com.bootdo.moneyLog.domain.HeatLogDO)
2019-05-15 10:25:34 -Mapped "{[/moneyLog/heatLog/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.HeatLogController.edit(java.lang.Long,org.springframework.ui.Model)
2019-05-15 10:25:34 -Mapped "{[/moneyLog/heatLog],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.HeatLogController.HeatLog()
2019-05-15 10:25:34 -Mapped "{[/moneyLog/heatLog/exprotHeatLog],methods=[GET]}" onto public void com.bootdo.moneyLog.controller.HeatLogController.exprotHeatLog(com.bootdo.moneyLog.vo.HeatLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-05-15 10:25:34 -Mapped "{[/moneyLog/waterLog/add],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.WaterLogController.add()
2019-05-15 10:25:34 -Mapped "{[/moneyLog/waterLog/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.WaterLogController.remove(java.lang.Long)
2019-05-15 10:25:34 -Mapped "{[/moneyLog/waterLog/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.WaterLogController.remove(java.lang.Long[])
2019-05-15 10:25:34 -Mapped "{[/moneyLog/waterLog/update]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.WaterLogController.update(java.util.Map<java.lang.String, java.lang.Object>,com.bootdo.moneyLog.domain.WaterLogDO)
2019-05-15 10:25:34 -Mapped "{[/moneyLog/waterLog/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.moneyLog.controller.WaterLogController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 10:25:34 -Mapped "{[/moneyLog/waterLog/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.WaterLogController.save(com.bootdo.moneyLog.domain.WaterLogDO)
2019-05-15 10:25:34 -Mapped "{[/moneyLog/waterLog/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.WaterLogController.edit(java.lang.Long,org.springframework.ui.Model)
2019-05-15 10:25:34 -Mapped "{[/moneyLog/waterLog/exprotWaterLog],methods=[GET]}" onto public void com.bootdo.moneyLog.controller.WaterLogController.exprotWaterLog(com.bootdo.moneyLog.vo.WaterLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-05-15 10:25:34 -Mapped "{[/moneyLog/waterLog],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.WaterLogController.WaterLog()
2019-05-15 10:25:34 -Mapped "{[/oa/notify/add],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.add()
2019-05-15 10:25:34 -Mapped "{[/oa/notify/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.remove(java.lang.Long)
2019-05-15 10:25:34 -Mapped "{[/oa/notify/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.remove(java.lang.Long[])
2019-05-15 10:25:34 -Mapped "{[/oa/notify/update]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.update(com.bootdo.oa.domain.NotifyDO)
2019-05-15 10:25:34 -Mapped "{[/oa/notify/read/{id}],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.read(java.lang.Long,org.springframework.ui.Model)
2019-05-15 10:25:34 -Mapped "{[/oa/notify/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.oa.controller.NotifyController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 10:25:34 -Mapped "{[/oa/notify/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.save(com.bootdo.oa.domain.NotifyDO)
2019-05-15 10:25:34 -Mapped "{[/oa/notify/message],methods=[GET]}" onto com.bootdo.common.utils.PageUtils com.bootdo.oa.controller.NotifyController.message()
2019-05-15 10:25:34 -Mapped "{[/oa/notify/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.edit(java.lang.Long,org.springframework.ui.Model)
2019-05-15 10:25:34 -Mapped "{[/oa/notify/selfList],methods=[GET]}" onto com.bootdo.common.utils.PageUtils com.bootdo.oa.controller.NotifyController.selfList(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 10:25:34 -Mapped "{[/oa/notify/selfNotify],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.selefNotify()
2019-05-15 10:25:34 -Mapped "{[/oa/notify],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.oaNotify()
2019-05-15 10:25:34 -Mapped "{[/print/print/add],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.add()
2019-05-15 10:25:34 -Mapped "{[/print/print/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.print.controller.PrintController.remove(java.lang.Long)
2019-05-15 10:25:34 -Mapped "{[/print/print/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.print.controller.PrintController.remove(java.lang.Long[])
2019-05-15 10:25:34 -Mapped "{[/print/print/update]}" onto public com.bootdo.common.utils.R com.bootdo.print.controller.PrintController.update(com.bootdo.print.domain.PrintDO)
2019-05-15 10:25:34 -Mapped "{[/print/print/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.print.controller.PrintController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 10:25:34 -Mapped "{[/print/print/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.print.controller.PrintController.save(java.lang.String,com.bootdo.print.domain.PrintDO)
2019-05-15 10:25:34 -Mapped "{[/print/print/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.edit(java.lang.Long,org.springframework.ui.Model)
2019-05-15 10:25:34 -Mapped "{[/print/print],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.Print()
2019-05-15 10:25:34 -Mapped "{[/print/print/exprotPrint],methods=[GET]}" onto public void com.bootdo.print.controller.PrintController.exprotPrint(com.bootdo.print.vo.PrintVo,javax.servlet.http.HttpServletResponse)
2019-05-15 10:25:34 -Mapped "{[/print/print/printMoney],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.printMoney()
2019-05-15 10:25:34 -Mapped "{[/print/print/printEdit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.printEdit(java.lang.Long,org.springframework.ui.Model)
2019-05-15 10:25:34 -Mapped "{[/system/sysDept/add/{pId}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.add(java.lang.Long,org.springframework.ui.Model)
2019-05-15 10:25:34 -Mapped "{[/system/sysDept/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.remove(java.lang.Long)
2019-05-15 10:25:34 -Mapped "{[/system/sysDept/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.remove(java.lang.Long[])
2019-05-15 10:25:34 -Mapped "{[/system/sysDept/update]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.update(com.bootdo.system.domain.DeptDO)
2019-05-15 10:25:34 -Mapped "{[/system/sysDept/list],methods=[GET]}" onto public java.util.List<com.bootdo.system.domain.DeptDO> com.bootdo.system.controller.DeptController.list()
2019-05-15 10:25:34 -Mapped "{[/system/sysDept/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.save(com.bootdo.system.domain.DeptDO)
2019-05-15 10:25:34 -Mapped "{[/system/sysDept/tree],methods=[GET]}" onto public com.bootdo.common.domain.Tree<com.bootdo.system.domain.DeptDO> com.bootdo.system.controller.DeptController.tree()
2019-05-15 10:25:34 -Mapped "{[/system/sysDept/edit/{deptId}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.edit(java.lang.Long,org.springframework.ui.Model)
2019-05-15 10:25:34 -Mapped "{[/system/sysDept],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.dept()
2019-05-15 10:25:34 -Mapped "{[/system/sysDept/treeView],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.treeView()
2019-05-15 10:25:34 -Mapped "{[/index],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.index(org.springframework.ui.Model)
2019-05-15 10:25:34 -Mapped "{[/main],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.main()
2019-05-15 10:25:34 -Mapped "{[/login],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.login(org.springframework.ui.Model)
2019-05-15 10:25:34 -Mapped "{[/logout],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.logout()
2019-05-15 10:25:34 -Mapped "{[/login],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.LoginController.ajaxLogin(java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest)
2019-05-15 10:25:34 -Mapped "{[/getVerify],methods=[GET]}" onto public void com.bootdo.system.controller.LoginController.getVerify(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-05-15 10:25:34 -Mapped "{[/ || ],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.welcome(org.springframework.ui.Model)
2019-05-15 10:25:34 -Mapped "{[/sys/menu/add/{pId}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.MenuController.add(org.springframework.ui.Model,java.lang.Long)
2019-05-15 10:25:34 -Mapped "{[/sys/menu/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.MenuController.remove(java.lang.Long)
2019-05-15 10:25:34 -Mapped "{[/sys/menu/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.MenuController.update(com.bootdo.system.domain.MenuDO)
2019-05-15 10:25:34 -Mapped "{[/sys/menu/list]}" onto java.util.List<com.bootdo.system.domain.MenuDO> com.bootdo.system.controller.MenuController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 10:25:34 -Mapped "{[/sys/menu/save],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.MenuController.save(com.bootdo.system.domain.MenuDO)
2019-05-15 10:25:34 -Mapped "{[/sys/menu/tree/{roleId}],methods=[GET]}" onto com.bootdo.common.domain.Tree<com.bootdo.system.domain.MenuDO> com.bootdo.system.controller.MenuController.tree(java.lang.Long)
2019-05-15 10:25:34 -Mapped "{[/sys/menu/tree],methods=[GET]}" onto com.bootdo.common.domain.Tree<com.bootdo.system.domain.MenuDO> com.bootdo.system.controller.MenuController.tree()
2019-05-15 10:25:34 -Mapped "{[/sys/menu/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.MenuController.edit(org.springframework.ui.Model,java.lang.Long)
2019-05-15 10:25:34 -Mapped "{[/sys/menu],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.MenuController.menu(org.springframework.ui.Model)
2019-05-15 10:25:34 -Mapped "{[/sys/role/add],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.RoleController.add()
2019-05-15 10:25:34 -Mapped "{[/sys/role/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.update(com.bootdo.system.domain.RoleDO)
2019-05-15 10:25:34 -Mapped "{[/sys/role/list],methods=[GET]}" onto java.util.List<com.bootdo.system.domain.RoleDO> com.bootdo.system.controller.RoleController.list()
2019-05-15 10:25:34 -Mapped "{[/sys/role/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.save(java.lang.Long)
2019-05-15 10:25:34 -Mapped "{[/sys/role/save],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.save(com.bootdo.system.domain.RoleDO)
2019-05-15 10:25:34 -Mapped "{[/sys/role/batchRemove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.batchRemove(java.lang.Long[])
2019-05-15 10:25:34 -Mapped "{[/sys/role],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.RoleController.role()
2019-05-15 10:25:34 -Mapped "{[/sys/role/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.RoleController.edit(java.lang.Long,org.springframework.ui.Model)
2019-05-15 10:25:34 -Mapped "{[/sys/online/list]}" onto public java.util.List<com.bootdo.system.domain.UserOnline> com.bootdo.system.controller.SessionController.list()
2019-05-15 10:25:34 -Mapped "{[/sys/online/forceLogout/{sessionId}]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.SessionController.forceLogout(java.lang.String,org.springframework.web.servlet.mvc.support.RedirectAttributes)
2019-05-15 10:25:34 -Mapped "{[/sys/online/sessionList]}" onto public java.util.Collection<org.apache.shiro.session.Session> com.bootdo.system.controller.SessionController.sessionList()
2019-05-15 10:25:34 -Mapped "{[/sys/online],methods=[GET]}" onto public java.lang.String com.bootdo.system.controller.SessionController.online()
2019-05-15 10:25:34 -Mapped "{[/sys/user/exit],methods=[POST]}" onto boolean com.bootdo.system.controller.UserController.exit(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 10:25:34 -Mapped "{[/sys/user/add],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.add(org.springframework.ui.Model)
2019-05-15 10:25:34 -Mapped "{[/sys/user/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.remove(java.lang.Long)
2019-05-15 10:25:34 -Mapped "{[/sys/user/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.update(com.bootdo.system.domain.UserDO)
2019-05-15 10:25:34 -Mapped "{[/sys/user/list],methods=[GET]}" onto com.bootdo.common.utils.PageUtils com.bootdo.system.controller.UserController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 10:25:34 -Mapped "{[/sys/user/save],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.save(com.bootdo.system.domain.UserDO)
2019-05-15 10:25:34 -Mapped "{[/sys/user/batchRemove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.batchRemove(java.lang.Long[])
2019-05-15 10:25:34 -Mapped "{[/sys/user/tree],methods=[GET]}" onto public com.bootdo.common.domain.Tree<com.bootdo.system.domain.DeptDO> com.bootdo.system.controller.UserController.tree()
2019-05-15 10:25:34 -Mapped "{[/sys/user/adminResetPwd],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.adminResetPwd(com.bootdo.system.vo.UserVO)
2019-05-15 10:25:34 -Mapped "{[/sys/user/personal],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.personal(org.springframework.ui.Model)
2019-05-15 10:25:34 -Mapped "{[/sys/user/uploadImg],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.uploadImg(org.springframework.web.multipart.MultipartFile,java.lang.String,javax.servlet.http.HttpServletRequest)
2019-05-15 10:25:34 -Mapped "{[/sys/user/updatePeronal],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.updatePeronal(com.bootdo.system.domain.UserDO)
2019-05-15 10:25:34 -Mapped "{[/sys/user/resetPwd],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.resetPwd(com.bootdo.system.vo.UserVO)
2019-05-15 10:25:34 -Mapped "{[/sys/user/resetPwd/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.resetPwd(java.lang.Long,org.springframework.ui.Model)
2019-05-15 10:25:34 -Mapped "{[/sys/user/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.edit(org.springframework.ui.Model,java.lang.Long)
2019-05-15 10:25:34 -Mapped "{[/sys/user/treeView],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.treeView()
2019-05-15 10:25:34 -Mapped "{[/sys/user],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.user(org.springframework.ui.Model)
2019-05-15 10:25:34 -Mapped "{[/file/downImport/{importType}],methods=[GET]}" onto public void com.bootdo.temple.controller.TempletController.downImport(javax.servlet.http.HttpServletResponse,java.lang.String)
2019-05-15 10:25:34 -Mapped "{[/water/water/add],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterController.add()
2019-05-15 10:25:34 -Mapped "{[/water/water/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterController.remove(java.lang.Long)
2019-05-15 10:25:34 -Mapped "{[/water/water/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterController.remove(java.lang.Long[])
2019-05-15 10:25:34 -Mapped "{[/water/water/update]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterController.update(com.bootdo.water.domain.WaterDO)
2019-05-15 10:25:34 -Mapped "{[/water/water/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.water.controller.WaterController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 10:25:34 -Mapped "{[/water/water/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterController.save(com.bootdo.water.domain.WaterDO)
2019-05-15 10:25:34 -Mapped "{[/water/water],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterController.Water()
2019-05-15 10:25:34 -Mapped "{[/water/water/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterController.edit(java.lang.Long,org.springframework.ui.Model)
2019-05-15 10:25:34 -Mapped "{[/water/water/exprotWater],methods=[GET]}" onto public void com.bootdo.water.controller.WaterController.exprotExcel(com.bootdo.water.vo.WaterVo,javax.servlet.http.HttpServletResponse)
2019-05-15 10:25:34 -Mapped "{[/water/waterInto],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterIntoController.WaterInto()
2019-05-15 10:25:34 -Mapped "{[/water/waterInto/exprotWaterIntoExcel],methods=[GET]}" onto public void com.bootdo.water.controller.WaterIntoController.exprotExcel(com.bootdo.water.vo.WaterVo,javax.servlet.http.HttpServletResponse)
2019-05-15 10:25:34 -Mapped "{[/water/waterInto/importWaterIntoExcel],methods=[POST]}" onto public java.lang.String com.bootdo.water.controller.WaterIntoController.importWaterIntoExcel(org.springframework.web.multipart.MultipartFile,com.bootdo.water.vo.WaterVo,javax.servlet.http.HttpServletResponse) throws java.lang.Exception
2019-05-15 10:25:34 -Mapped "{[/water/waterPrice/add],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterPriceController.add()
2019-05-15 10:25:34 -Mapped "{[/water/waterPrice/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterPriceController.remove(java.lang.Long)
2019-05-15 10:25:34 -Mapped "{[/water/waterPrice/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterPriceController.remove(java.lang.Long[])
2019-05-15 10:25:34 -Mapped "{[/water/waterPrice/update]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterPriceController.update(com.bootdo.water.domain.WaterPriceDO)
2019-05-15 10:25:34 -Mapped "{[/water/waterPrice/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.water.controller.WaterPriceController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 10:25:34 -Mapped "{[/water/waterPrice/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterPriceController.save(com.bootdo.water.domain.WaterPriceDO)
2019-05-15 10:25:34 -Mapped "{[/water/waterPrice],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterPriceController.WaterPrice()
2019-05-15 10:25:34 -Mapped "{[/water/waterPrice/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterPriceController.edit(java.lang.Long,org.springframework.ui.Model)
2019-05-15 10:25:34 -Mapped "{[/water/waterUpLoad/importWaterExcel]}" onto public java.lang.String com.bootdo.water.controller.WaterUpLoadController.importWaterExcel(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)
2019-05-15 10:25:34 -Mapped "{[/water/waterUpLoad],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterUpLoadController.WaterUpLoad()
2019-05-15 10:25:34 -Mapped "{[/water/waterUpLoad/createWaterExcel],methods=[POST]}" onto public java.lang.String com.bootdo.water.controller.WaterUpLoadController.createWaterExcel(com.bootdo.water.domain.WaterDO) throws java.lang.Exception
2019-05-15 10:25:34 -Mapped "{[/water/waterUpLoad/exprotWaterExcel],methods=[GET]}" onto public void com.bootdo.water.controller.WaterUpLoadController.exprotWaterExcel(com.bootdo.water.vo.WaterVo,javax.servlet.http.HttpServletResponse)
2019-05-15 10:25:34 -Mapped "{[/v2/api-docs],methods=[GET],produces=[application/json || application/hal+json]}" onto public org.springframework.http.ResponseEntity<springfox.documentation.spring.web.json.Json> springfox.documentation.swagger2.web.Swagger2Controller.getDocumentation(java.lang.String,javax.servlet.http.HttpServletRequest)
2019-05-15 10:25:34 -Mapped "{[/swagger-resources/configuration/ui]}" onto org.springframework.http.ResponseEntity<springfox.documentation.swagger.web.UiConfiguration> springfox.documentation.swagger.web.ApiResourceController.uiConfiguration()
2019-05-15 10:25:34 -Mapped "{[/swagger-resources]}" onto org.springframework.http.ResponseEntity<java.util.List<springfox.documentation.swagger.web.SwaggerResource>> springfox.documentation.swagger.web.ApiResourceController.swaggerResources()
2019-05-15 10:25:34 -Mapped "{[/swagger-resources/configuration/security]}" onto org.springframework.http.ResponseEntity<springfox.documentation.swagger.web.SecurityConfiguration> springfox.documentation.swagger.web.ApiResourceController.securityConfiguration()
2019-05-15 10:25:34 -Initializing ExecutorService  'messageBrokerTaskScheduler'
2019-05-15 10:25:34 -Mapped URL path [/endpointChat/**] onto handler of type [class org.springframework.web.socket.sockjs.support.SockJsHttpRequestHandler]
2019-05-15 10:25:34 -Initializing ExecutorService  'brokerChannelExecutor'
2019-05-15 10:25:34 -Mapped URL path [/**/favicon.ico] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-05-15 10:25:35 -Looking for @ControllerAdvice: org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@4d5650ae: startup date [Wed May 15 10:25:15 CST 2019]; root of context hierarchy
2019-05-15 10:25:35 -Mapped URL path [/webjars/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-05-15 10:25:35 -Mapped URL path [/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-05-15 10:25:35 -Mapped URL path [/files/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-05-15 10:25:35 -Detected @ExceptionHandler methods in BDExceptionHandler
2019-05-15 10:25:35 -[THYMELEAF][main] Template Mode 'LEGACYHTML5' is deprecated. Using Template Mode 'HTML' instead.
2019-05-15 10:25:37 -Registering beans for JMX exposure on startup
2019-05-15 10:25:37 -Bean with name 'dataSource' has been autodetected for JMX exposure
2019-05-15 10:25:37 -Located MBean 'dataSource': registering with JMX server as MBean [com.alibaba.druid.pool:name=dataSource,type=DruidDataSource]
2019-05-15 10:25:37 -Starting beans in phase 2147483647
2019-05-15 10:25:37 -Context refreshed
2019-05-15 10:25:37 -Found 1 custom documentation plugin(s)
2019-05-15 10:25:37 -Scanning for api listing references
2019-05-15 10:25:37 -Generating unique operation named: getCountDUsingPOST_1
2019-05-15 10:25:37 -Generating unique operation named: removeUsingPOST_1
2019-05-15 10:25:37 -Generating unique operation named: addUsingGET_1
2019-05-15 10:25:37 -Generating unique operation named: editUsingGET_1
2019-05-15 10:25:37 -Generating unique operation named: listUsingGET_1
2019-05-15 10:25:37 -Generating unique operation named: removeUsingPOST_2
2019-05-15 10:25:37 -Generating unique operation named: removeUsingPOST_3
2019-05-15 10:25:37 -Generating unique operation named: saveUsingPOST_1
2019-05-15 10:25:37 -Generating unique operation named: updateUsingGET_1
2019-05-15 10:25:37 -Generating unique operation named: updateUsingHEAD_1
2019-05-15 10:25:37 -Generating unique operation named: updateUsingPOST_1
2019-05-15 10:25:37 -Generating unique operation named: updateUsingPUT_1
2019-05-15 10:25:37 -Generating unique operation named: updateUsingPATCH_1
2019-05-15 10:25:37 -Generating unique operation named: updateUsingDELETE_1
2019-05-15 10:25:37 -Generating unique operation named: updateUsingOPTIONS_1
2019-05-15 10:25:37 -Generating unique operation named: updateUsingTRACE_1
2019-05-15 10:25:37 -Generating unique operation named: addUsingGET_2
2019-05-15 10:25:37 -Generating unique operation named: editUsingGET_2
2019-05-15 10:25:37 -Generating unique operation named: listUsingGET_2
2019-05-15 10:25:37 -Generating unique operation named: removeUsingPOST_4
2019-05-15 10:25:37 -Generating unique operation named: removeUsingPOST_5
2019-05-15 10:25:37 -Generating unique operation named: saveUsingPOST_2
2019-05-15 10:25:37 -Generating unique operation named: updateUsingPOST_2
2019-05-15 10:25:37 -Generating unique operation named: exprotExcelUsingGET_1
2019-05-15 10:25:37 -Generating unique operation named: addUsingGET_3
2019-05-15 10:25:37 -Generating unique operation named: editUsingGET_3
2019-05-15 10:25:37 -Generating unique operation named: listUsingGET_3
2019-05-15 10:25:37 -Generating unique operation named: removeUsingPOST_6
2019-05-15 10:25:37 -Generating unique operation named: removeUsingPOST_7
2019-05-15 10:25:37 -Generating unique operation named: saveUsingPOST_3
2019-05-15 10:25:37 -Generating unique operation named: updateUsingGET_2
2019-05-15 10:25:37 -Generating unique operation named: updateUsingHEAD_2
2019-05-15 10:25:37 -Generating unique operation named: updateUsingPOST_3
2019-05-15 10:25:37 -Generating unique operation named: updateUsingPUT_2
2019-05-15 10:25:37 -Generating unique operation named: updateUsingPATCH_2
2019-05-15 10:25:37 -Generating unique operation named: updateUsingDELETE_2
2019-05-15 10:25:37 -Generating unique operation named: updateUsingOPTIONS_2
2019-05-15 10:25:37 -Generating unique operation named: updateUsingTRACE_2
2019-05-15 10:25:37 -Generating unique operation named: addUsingGET_4
2019-05-15 10:25:37 -Generating unique operation named: editUsingGET_4
2019-05-15 10:25:37 -Generating unique operation named: listUsingGET_4
2019-05-15 10:25:37 -Generating unique operation named: removeUsingPOST_8
2019-05-15 10:25:37 -Generating unique operation named: removeUsingPOST_9
2019-05-15 10:25:37 -Generating unique operation named: saveUsingPOST_4
2019-05-15 10:25:37 -Generating unique operation named: updateUsingGET_3
2019-05-15 10:25:37 -Generating unique operation named: updateUsingHEAD_3
2019-05-15 10:25:37 -Generating unique operation named: updateUsingPOST_4
2019-05-15 10:25:37 -Generating unique operation named: updateUsingPUT_3
2019-05-15 10:25:37 -Generating unique operation named: updateUsingPATCH_3
2019-05-15 10:25:37 -Generating unique operation named: updateUsingDELETE_3
2019-05-15 10:25:37 -Generating unique operation named: updateUsingOPTIONS_3
2019-05-15 10:25:37 -Generating unique operation named: updateUsingTRACE_3
2019-05-15 10:25:37 -Generating unique operation named: ElecUsingGET_1
2019-05-15 10:25:38 -Generating unique operation named: addUsingGET_5
2019-05-15 10:25:38 -Generating unique operation named: editUsingGET_5
2019-05-15 10:25:38 -Generating unique operation named: listUsingGET_5
2019-05-15 10:25:38 -Generating unique operation named: removeUsingPOST_10
2019-05-15 10:25:38 -Generating unique operation named: removeUsingPOST_11
2019-05-15 10:25:38 -Generating unique operation named: saveUsingPOST_5
2019-05-15 10:25:38 -Generating unique operation named: updateUsingGET_4
2019-05-15 10:25:38 -Generating unique operation named: updateUsingHEAD_4
2019-05-15 10:25:38 -Generating unique operation named: updateUsingPOST_5
2019-05-15 10:25:38 -Generating unique operation named: updateUsingPUT_4
2019-05-15 10:25:38 -Generating unique operation named: updateUsingPATCH_4
2019-05-15 10:25:38 -Generating unique operation named: updateUsingDELETE_4
2019-05-15 10:25:38 -Generating unique operation named: updateUsingOPTIONS_4
2019-05-15 10:25:38 -Generating unique operation named: updateUsingTRACE_4
2019-05-15 10:25:38 -Generating unique operation named: editUsingGET_6
2019-05-15 10:25:38 -Generating unique operation named: listUsingGET_6
2019-05-15 10:25:38 -Generating unique operation named: updateUsingPOST_6
2019-05-15 10:25:38 -Generating unique operation named: addUsingGET_6
2019-05-15 10:25:38 -Generating unique operation named: editUsingGET_7
2019-05-15 10:25:38 -Generating unique operation named: exprotExcelUsingGET_2
2019-05-15 10:25:38 -Generating unique operation named: listUsingGET_7
2019-05-15 10:25:38 -Generating unique operation named: removeUsingPOST_12
2019-05-15 10:25:38 -Generating unique operation named: removeUsingPOST_13
2019-05-15 10:25:38 -Generating unique operation named: saveUsingPOST_6
2019-05-15 10:25:38 -Generating unique operation named: updateUsingGET_5
2019-05-15 10:25:38 -Generating unique operation named: updateUsingHEAD_5
2019-05-15 10:25:38 -Generating unique operation named: updateUsingPOST_7
2019-05-15 10:25:38 -Generating unique operation named: updateUsingPUT_5
2019-05-15 10:25:38 -Generating unique operation named: updateUsingPATCH_5
2019-05-15 10:25:38 -Generating unique operation named: updateUsingDELETE_5
2019-05-15 10:25:38 -Generating unique operation named: updateUsingOPTIONS_5
2019-05-15 10:25:38 -Generating unique operation named: updateUsingTRACE_5
2019-05-15 10:25:38 -Generating unique operation named: exprotExcelUsingGET_3
2019-05-15 10:25:38 -Generating unique operation named: addUsingGET_7
2019-05-15 10:25:38 -Generating unique operation named: editUsingGET_8
2019-05-15 10:25:38 -Generating unique operation named: listUsingGET_8
2019-05-15 10:25:38 -Generating unique operation named: removeUsingPOST_14
2019-05-15 10:25:38 -Generating unique operation named: removeUsingPOST_15
2019-05-15 10:25:38 -Generating unique operation named: saveUsingPOST_7
2019-05-15 10:25:38 -Generating unique operation named: updateUsingGET_6
2019-05-15 10:25:38 -Generating unique operation named: updateUsingHEAD_6
2019-05-15 10:25:38 -Generating unique operation named: updateUsingPOST_8
2019-05-15 10:25:38 -Generating unique operation named: updateUsingPUT_6
2019-05-15 10:25:38 -Generating unique operation named: updateUsingPATCH_6
2019-05-15 10:25:38 -Generating unique operation named: updateUsingDELETE_6
2019-05-15 10:25:38 -Generating unique operation named: updateUsingOPTIONS_6
2019-05-15 10:25:38 -Generating unique operation named: updateUsingTRACE_6
2019-05-15 10:25:38 -Generating unique operation named: addUsingGET_8
2019-05-15 10:25:38 -Generating unique operation named: editUsingGET_9
2019-05-15 10:25:38 -Generating unique operation named: listUsingGET_9
2019-05-15 10:25:38 -Generating unique operation named: removeUsingPOST_16
2019-05-15 10:25:38 -Generating unique operation named: removeUsingPOST_17
2019-05-15 10:25:38 -Generating unique operation named: saveUsingPOST_8
2019-05-15 10:25:38 -Generating unique operation named: updateUsingGET_7
2019-05-15 10:25:38 -Generating unique operation named: updateUsingHEAD_7
2019-05-15 10:25:38 -Generating unique operation named: updateUsingPOST_9
2019-05-15 10:25:38 -Generating unique operation named: updateUsingPUT_7
2019-05-15 10:25:38 -Generating unique operation named: updateUsingPATCH_7
2019-05-15 10:25:38 -Generating unique operation named: updateUsingDELETE_7
2019-05-15 10:25:38 -Generating unique operation named: updateUsingOPTIONS_7
2019-05-15 10:25:38 -Generating unique operation named: updateUsingTRACE_7
2019-05-15 10:25:38 -Generating unique operation named: addUsingGET_9
2019-05-15 10:25:38 -Generating unique operation named: editUsingGET_10
2019-05-15 10:25:38 -Generating unique operation named: infoUsingGET_1
2019-05-15 10:25:38 -Generating unique operation named: infoUsingHEAD_1
2019-05-15 10:25:38 -Generating unique operation named: infoUsingPOST_1
2019-05-15 10:25:38 -Generating unique operation named: infoUsingPUT_1
2019-05-15 10:25:38 -Generating unique operation named: infoUsingPATCH_1
2019-05-15 10:25:38 -Generating unique operation named: infoUsingDELETE_1
2019-05-15 10:25:38 -Generating unique operation named: infoUsingOPTIONS_1
2019-05-15 10:25:38 -Generating unique operation named: infoUsingTRACE_1
2019-05-15 10:25:38 -Generating unique operation named: listUsingGET_10
2019-05-15 10:25:38 -Generating unique operation named: removeUsingPOST_18
2019-05-15 10:25:38 -Generating unique operation named: removeUsingPOST_19
2019-05-15 10:25:38 -Generating unique operation named: saveUsingPOST_9
2019-05-15 10:25:38 -Generating unique operation named: updateUsingPOST_10
2019-05-15 10:25:38 -Generating unique operation named: listUsingGET_11
2019-05-15 10:25:38 -Generating unique operation named: removeUsingPOST_20
2019-05-15 10:25:38 -Generating unique operation named: welcomeUsingGET_1
2019-05-15 10:25:38 -Generating unique operation named: addUsingGET_10
2019-05-15 10:25:38 -Generating unique operation named: editUsingGET_11
2019-05-15 10:25:38 -Generating unique operation named: listUsingGET_12
2019-05-15 10:25:38 -Generating unique operation named: removeUsingPOST_21
2019-05-15 10:25:38 -Generating unique operation named: saveUsingPOST_10
2019-05-15 10:25:38 -Generating unique operation named: treeUsingGET_1
2019-05-15 10:25:38 -Generating unique operation named: treeUsingGET_2
2019-05-15 10:25:38 -Generating unique operation named: updateUsingPOST_11
2019-05-15 10:25:38 -Generating unique operation named: addUsingGET_11
2019-05-15 10:25:38 -Generating unique operation named: editUsingGET_12
2019-05-15 10:25:38 -Generating unique operation named: listUsingGET_13
2019-05-15 10:25:38 -Generating unique operation named: removeUsingPOST_22
2019-05-15 10:25:38 -Generating unique operation named: removeUsingPOST_23
2019-05-15 10:25:38 -Generating unique operation named: saveUsingPOST_11
2019-05-15 10:25:38 -Generating unique operation named: updateUsingGET_8
2019-05-15 10:25:38 -Generating unique operation named: updateUsingHEAD_8
2019-05-15 10:25:38 -Generating unique operation named: updateUsingPOST_12
2019-05-15 10:25:38 -Generating unique operation named: updateUsingPUT_8
2019-05-15 10:25:38 -Generating unique operation named: updateUsingPATCH_8
2019-05-15 10:25:38 -Generating unique operation named: updateUsingDELETE_8
2019-05-15 10:25:38 -Generating unique operation named: updateUsingOPTIONS_8
2019-05-15 10:25:38 -Generating unique operation named: updateUsingTRACE_8
2019-05-15 10:25:38 -Generating unique operation named: addUsingGET_12
2019-05-15 10:25:38 -Generating unique operation named: editUsingGET_13
2019-05-15 10:25:38 -Generating unique operation named: listUsingGET_14
2019-05-15 10:25:38 -Generating unique operation named: removeUsingPOST_24
2019-05-15 10:25:38 -Generating unique operation named: removeUsingPOST_25
2019-05-15 10:25:38 -Generating unique operation named: saveUsingPOST_12
2019-05-15 10:25:38 -Generating unique operation named: updateUsingGET_9
2019-05-15 10:25:38 -Generating unique operation named: updateUsingHEAD_9
2019-05-15 10:25:38 -Generating unique operation named: updateUsingPOST_13
2019-05-15 10:25:38 -Generating unique operation named: updateUsingPUT_9
2019-05-15 10:25:38 -Generating unique operation named: updateUsingPATCH_9
2019-05-15 10:25:38 -Generating unique operation named: updateUsingDELETE_9
2019-05-15 10:25:38 -Generating unique operation named: updateUsingOPTIONS_9
2019-05-15 10:25:38 -Generating unique operation named: updateUsingTRACE_9
2019-05-15 10:25:38 -Generating unique operation named: addUsingGET_13
2019-05-15 10:25:38 -Generating unique operation named: batchRemoveUsingPOST_1
2019-05-15 10:25:38 -Generating unique operation named: editUsingGET_14
2019-05-15 10:25:38 -Generating unique operation named: listUsingGET_15
2019-05-15 10:25:38 -Generating unique operation named: saveUsingPOST_13
2019-05-15 10:25:38 -Generating unique operation named: saveUsingPOST_14
2019-05-15 10:25:38 -Generating unique operation named: updateUsingPOST_14
2019-05-15 10:25:38 -Generating unique operation named: listUsingGET_16
2019-05-15 10:25:38 -Generating unique operation named: listUsingHEAD_1
2019-05-15 10:25:38 -Generating unique operation named: listUsingPOST_1
2019-05-15 10:25:38 -Generating unique operation named: listUsingPUT_1
2019-05-15 10:25:38 -Generating unique operation named: listUsingPATCH_1
2019-05-15 10:25:39 -Generating unique operation named: listUsingDELETE_1
2019-05-15 10:25:39 -Generating unique operation named: listUsingOPTIONS_1
2019-05-15 10:25:39 -Generating unique operation named: listUsingTRACE_1
2019-05-15 10:25:39 -Generating unique operation named: countDDUsingGET_1
2019-05-15 10:25:39 -Generating unique operation named: exportDDUsingGET_1
2019-05-15 10:25:39 -Generating unique operation named: getCountYYUsingPOST_1
2019-05-15 10:25:39 -Generating unique operation named: getCountMMUsingPOST_1
2019-05-15 10:25:39 -Generating unique operation named: addUsingGET_14
2019-05-15 10:25:39 -Generating unique operation named: batchRemoveUsingPOST_2
2019-05-15 10:25:39 -Generating unique operation named: editUsingGET_15
2019-05-15 10:25:39 -Generating unique operation named: listUsingGET_17
2019-05-15 10:25:39 -Generating unique operation named: removeUsingPOST_26
2019-05-15 10:25:39 -Generating unique operation named: saveUsingPOST_15
2019-05-15 10:25:39 -Generating unique operation named: treeUsingGET_3
2019-05-15 10:25:39 -Generating unique operation named: treeViewUsingGET_1
2019-05-15 10:25:39 -Generating unique operation named: updateUsingPOST_15
2019-05-15 10:25:39 -Generating unique operation named: addUsingGET_15
2019-05-15 10:25:39 -Generating unique operation named: editUsingGET_16
2019-05-15 10:25:39 -Generating unique operation named: exprotExcelUsingGET_4
2019-05-15 10:25:39 -Generating unique operation named: listUsingGET_18
2019-05-15 10:25:39 -Generating unique operation named: removeUsingPOST_27
2019-05-15 10:25:39 -Generating unique operation named: removeUsingPOST_28
2019-05-15 10:25:39 -Generating unique operation named: saveUsingPOST_16
2019-05-15 10:25:39 -Generating unique operation named: updateUsingGET_10
2019-05-15 10:25:39 -Generating unique operation named: updateUsingHEAD_10
2019-05-15 10:25:39 -Generating unique operation named: updateUsingPOST_16
2019-05-15 10:25:39 -Generating unique operation named: updateUsingPUT_10
2019-05-15 10:25:39 -Generating unique operation named: updateUsingPATCH_10
2019-05-15 10:25:39 -Generating unique operation named: updateUsingDELETE_10
2019-05-15 10:25:39 -Generating unique operation named: updateUsingOPTIONS_10
2019-05-15 10:25:39 -Generating unique operation named: updateUsingTRACE_10
2019-05-15 10:25:39 -Generating unique operation named: exprotExcelUsingGET_5
2019-05-15 10:25:39 -Generating unique operation named: addUsingGET_16
2019-05-15 10:25:39 -Generating unique operation named: editUsingGET_17
2019-05-15 10:25:39 -Generating unique operation named: listUsingGET_19
2019-05-15 10:25:39 -Generating unique operation named: removeUsingPOST_29
2019-05-15 10:25:39 -Generating unique operation named: removeUsingPOST_30
2019-05-15 10:25:39 -Generating unique operation named: saveUsingPOST_17
2019-05-15 10:25:39 -Generating unique operation named: updateUsingGET_11
2019-05-15 10:25:39 -Generating unique operation named: updateUsingHEAD_11
2019-05-15 10:25:39 -Generating unique operation named: updateUsingPOST_17
2019-05-15 10:25:39 -Generating unique operation named: updateUsingPUT_11
2019-05-15 10:25:39 -Generating unique operation named: updateUsingPATCH_11
2019-05-15 10:25:39 -Generating unique operation named: updateUsingDELETE_11
2019-05-15 10:25:39 -Generating unique operation named: updateUsingOPTIONS_11
2019-05-15 10:25:39 -Generating unique operation named: updateUsingTRACE_11
2019-05-15 10:25:39 -Generating unique operation named: addUsingGET_17
2019-05-15 10:25:39 -Generating unique operation named: editUsingGET_18
2019-05-15 10:25:39 -Generating unique operation named: listUsingGET_20
2019-05-15 10:25:39 -Generating unique operation named: removeUsingPOST_31
2019-05-15 10:25:39 -Generating unique operation named: removeUsingPOST_32
2019-05-15 10:25:39 -Generating unique operation named: saveUsingPOST_18
2019-05-15 10:25:39 -Generating unique operation named: updateUsingGET_12
2019-05-15 10:25:39 -Generating unique operation named: updateUsingHEAD_12
2019-05-15 10:25:39 -Generating unique operation named: updateUsingPOST_18
2019-05-15 10:25:39 -Generating unique operation named: updateUsingPUT_12
2019-05-15 10:25:39 -Generating unique operation named: updateUsingPATCH_12
2019-05-15 10:25:39 -Generating unique operation named: updateUsingDELETE_12
2019-05-15 10:25:39 -Generating unique operation named: updateUsingOPTIONS_12
2019-05-15 10:25:39 -Generating unique operation named: updateUsingTRACE_12
2019-05-15 10:25:39 -Starting Quartz Scheduler now
2019-05-15 10:25:39 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED started.
2019-05-15 10:25:39 -Starting...
2019-05-15 10:25:39 -BrokerAvailabilityEvent[available=true, SimpleBrokerMessageHandler [DefaultSubscriptionRegistry[cache[0 destination(s)], registry[0 sessions]]]]
2019-05-15 10:25:39 -Started.
2019-05-15 10:25:39 -Starting ProtocolHandler ["http-nio-8081"]
2019-05-15 10:25:39 -Using a shared selector for servlet write/read
2019-05-15 10:25:39 -Tomcat started on port(s): 8081 (http) with context path ''
2019-05-15 10:25:39 -Started BootdoApplication in 24.92 seconds (JVM running for 25.666)
2019-05-15 10:25:39 -==>  Preparing: select `id`,`cron_expression`,`method_name`,`is_concurrent`,`description`,`update_by`,`bean_class`,`create_date`,`job_status`,`job_group`,`update_date`,`create_by`,`spring_bean`,`job_name` from sys_task order by id desc 
2019-05-15 10:25:39 -==> Parameters: 
2019-05-15 10:25:39 -<==      Total: 1
2019-05-15 10:26:09 -Initializing Spring FrameworkServlet 'dispatcherServlet'
2019-05-15 10:26:09 -FrameworkServlet 'dispatcherServlet': initialization started
2019-05-15 10:26:09 -FrameworkServlet 'dispatcherServlet': initialization completed in 66 ms
2019-05-15 10:26:09 -Enabling session validation scheduler...
2019-05-15 10:26:09 -请求地址 : http://localhost:8081/login;JSESSIONID=7508949a-5427-4ca6-9144-58a2d52e13a8
2019-05-15 10:26:09 -HTTP METHOD : GET
2019-05-15 10:26:09 -CLASS_METHOD : com.bootdo.system.controller.LoginController.login
2019-05-15 10:26:09 -参数 : [{}]
2019-05-15 10:26:09 -耗时 : 7
2019-05-15 10:26:09 -返回值 : login
2019-05-15 10:26:10 -请求地址 : http://localhost:8081/getVerify
2019-05-15 10:26:10 -HTTP METHOD : GET
2019-05-15 10:26:10 -CLASS_METHOD : com.bootdo.system.controller.LoginController.getVerify
2019-05-15 10:26:10 -参数 : [org.apache.shiro.web.servlet.ShiroHttpServletRequest@218aad21, org.apache.shiro.web.servlet.ShiroHttpServletResponse@4db398d0]
2019-05-15 10:26:11 -1968
2019-05-15 10:26:11 -耗时 : 368
2019-05-15 10:26:11 -返回值 : null
2019-05-15 10:26:15 -请求地址 : http://localhost:8081/login
2019-05-15 10:26:15 -HTTP METHOD : POST
2019-05-15 10:26:15 -CLASS_METHOD : com.bootdo.system.controller.LoginController.ajaxLogin
2019-05-15 10:26:15 -参数 : [admin, 111111, 1968, org.apache.shiro.web.servlet.ShiroHttpServletRequest@6a7320ad]
2019-05-15 10:26:15 -==>  Preparing: select `user_id`,`username`,`name`,`password`,`dept_id`,`email`,`mobile`,`status`,`user_id_create`,`gmt_create`,`gmt_modified`,`sex`,`birth`,`pic_id`,`live_address`,`hobby`,`province`,`city`,`district` from sys_user WHERE username = ? order by user_id desc 
2019-05-15 10:26:15 -==> Parameters: admin(String)
2019-05-15 10:26:15 -<==      Total: 1
2019-05-15 10:26:15 -耗时 : 85
2019-05-15 10:26:15 -返回值 : {msg=操作成功, code=0}
2019-05-15 10:26:15 -More than one TaskExecutor bean found within the context, and none is named 'taskExecutor'. Mark one of them as primary or name it 'taskExecutor' (possibly as an alias) in order to use it for async processing: [clientInboundChannelExecutor, clientOutboundChannelExecutor, brokerChannelExecutor, messageBrokerTaskScheduler]
2019-05-15 10:26:15 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-05-15 10:26:15 -==> Parameters: 1(Long), admin(String), 登录(String), 86(Integer), com.bootdo.system.controller.LoginController.ajaxLogin()(String), null, 127.0.0.1(String), 2019-05-15 10:26:15.845(Timestamp)
2019-05-15 10:26:15 -请求地址 : http://localhost:8081/index
2019-05-15 10:26:15 -HTTP METHOD : GET
2019-05-15 10:26:15 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2019-05-15 10:26:15 -参数 : [{}]
2019-05-15 10:26:16 -<==    Updates: 1
2019-05-15 10:26:16 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2019-05-15 10:26:16 -==> Parameters: 1(Long)
2019-05-15 10:26:16 -<==      Total: 49
2019-05-15 10:26:16 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2019-05-15 10:26:16 -==> Parameters: 138(Long)
2019-05-15 10:26:16 -<==      Total: 1
2019-05-15 10:26:16 -耗时 : 239
2019-05-15 10:26:16 -返回值 : index_v1
2019-05-15 10:26:16 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-05-15 10:26:16 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 240(Integer), com.bootdo.system.controller.LoginController.index()(String), {"menus":[{"attributes":{"icon":"fa fa-money","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-money","url":"/moneyList/moneyList"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"102","parentId":"106","text":"现金缴费"},{"attributes":{"icon":"fa fa-book","url":"/moneyLog/elecLog"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"107","parentId":"106","text":"缴费记录"}],"hasChildren":true,"hasParent":false,"id":"106","parentId":"0","text":"收费管理"},{"attributes":{"icon":"fa fa-lightbulb-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/elec/elec"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"121","parentId":"103","text":"电费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"elec/elecInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"122","parentId":"103","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"elec/elecUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"123","parentId":"103","text":"电表上传"},{"attributes":{"icon":"fa fa-cc","url":"/elec/elecPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"124","parentId":"103","text":"电价管理"}],"hasChildren":true,"hasParent":false,"id":"103","parentId":"0","text":"电费管理"},{"attributes":{"icon":"fa fa-tint","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/water/water"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"117","parentId":"105","text":"水费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"water/waterInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"118","parentId":"105","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"water/waterUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"119","parentId":"105","text":"水费生成"},{"attributes":{"icon":"fa fa-cc","url":"/water/waterPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"120","parentId":"105","text":"水价管理"}],"hasChildren":true,"hasParent":false,"id":"105","parentId":"0","text":"水费管理"},{"attributes":{"icon":"fa fa-fire","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/heat/heat"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"113","parentId":"104","text":"暖费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"heat/heatInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"114","parentId":"104","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"heat/heatUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"115","parentId":"104","text":"暖费生成"},{"attributes":{"icon":"","url":"/heat/heatPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"116","parentId":"104","text":"暖价管理"}],"hasChildren":true,"hasParent":false,"id":"104","parentId":"0","text":"暖费管理"},{"attributes":{"icon":"fa fa-vcard-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-bomb","url":"/print/print"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"149","parentId":"108","text":"票据记录"}],"hasChildren":true,"hasParent":false,"id":"108","parentId":"0","text":"票据管理"},{"attributes":{"icon":"fa fa-bar-chart","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-area-chart","url":"/chart/graph_echarts.html"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","text":"百度chart"},{"attributes":{"icon":"fa fa-sun-o","url":"charts/countDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"109","parentId":"97","text":"日统计报表"},{"attributes":{"icon":"fa fa-calendar","url":"charts/tableDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"161","parentId":"97","text":"日统计表格"},{"attributes":{"icon":"fa fa-registered","url":"charts/countMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"110","parentId":"97","text":"月统计报表"},{"attributes":{"icon":"fa fa-building-o","url":"charts/tableElecMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"162","parentId":"97","text":"月统计表格"},{"attributes":{"icon":"fa fa-support","url":"charts/countYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"111","parentId":"97","text":"年统计报表"},{"attributes":{"icon":"fa fa-book","url":"charts/tableElecYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"163","parentId":"97","text":"年统计表格"},{"attributes":{"icon":"fa fa-money","url":"charts/countOwe"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"155","parentId":"97","text":"欠费报表图"},{"attributes":{"icon":"fa fa-tachometer","url":"charts/countRun"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"112"(String), 127.0.0.1(String), 2019-05-15 10:26:16.334(Timestamp)
2019-05-15 10:26:16 -<==    Updates: 1
2019-05-15 10:26:16 -请求地址 : http://localhost:8081/main
2019-05-15 10:26:16 -HTTP METHOD : GET
2019-05-15 10:26:16 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-05-15 10:26:16 -参数 : []
2019-05-15 10:26:16 -耗时 : 1
2019-05-15 10:26:16 -返回值 : main
2019-05-15 10:26:16 -请求地址 : http://localhost:8081/oa/notify/message
2019-05-15 10:26:16 -HTTP METHOD : GET
2019-05-15 10:26:16 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2019-05-15 10:26:16 -参数 : []
2019-05-15 10:26:16 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2019-05-15 10:26:16 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2019-05-15 10:26:16 -<==      Total: 0
2019-05-15 10:26:16 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2019-05-15 10:26:16 -==> Parameters: 1(Long), 0(String)
2019-05-15 10:26:16 -<==      Total: 1
2019-05-15 10:26:16 -耗时 : 40
2019-05-15 10:26:16 -返回值 : com.bootdo.common.utils.PageUtils@227285ff
2019-05-15 10:26:16 -请求地址 : http://localhost:8081/main
2019-05-15 10:26:16 -HTTP METHOD : GET
2019-05-15 10:26:16 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-05-15 10:26:16 -参数 : []
2019-05-15 10:26:16 -耗时 : 0
2019-05-15 10:26:16 -返回值 : main
2019-05-15 10:26:22 -==>  Preparing: select distinct m.perms from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id = ur.role_id where ur.user_id = ? 
2019-05-15 10:26:22 -==> Parameters: 1(Long)
2019-05-15 10:26:22 -<==      Total: 93
2019-05-15 10:26:22 -请求地址 : http://localhost:8081/charts/countYY
2019-05-15 10:26:22 -HTTP METHOD : GET
2019-05-15 10:26:22 -CLASS_METHOD : com.bootdo.charts.controller.countYYController.countYY
2019-05-15 10:26:22 -参数 : []
2019-05-15 10:26:22 -耗时 : 1
2019-05-15 10:26:22 -返回值 : charts/countYY
2019-05-15 10:26:23 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-05-15 10:26:23 -HTTP METHOD : GET
2019-05-15 10:26:23 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-05-15 10:26:23 -参数 : [userType]
2019-05-15 10:26:23 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-05-15 10:26:23 -==> Parameters: userType(String)
2019-05-15 10:26:23 -<==      Total: 4
2019-05-15 10:26:23 -耗时 : 23
2019-05-15 10:26:23 -返回值 : [DictDO{id=145, name='银行转账', value='D', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=144, name='微信支付', value='C', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-05-15 10:26:24 -请求地址 : http://localhost:8081/charts/tableElecYY
2019-05-15 10:26:24 -HTTP METHOD : GET
2019-05-15 10:26:24 -CLASS_METHOD : com.bootdo.charts.controller.tableElecYYController.tableElecYY
2019-05-15 10:26:24 -参数 : []
2019-05-15 10:26:24 -耗时 : 15
2019-05-15 10:26:24 -返回值 : charts/tableElecYY
2019-05-15 10:26:25 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-05-15 10:26:25 -HTTP METHOD : GET
2019-05-15 10:26:25 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-05-15 10:26:25 -参数 : [userType]
2019-05-15 10:26:25 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-05-15 10:26:25 -==> Parameters: userType(String)
2019-05-15 10:26:25 -<==      Total: 4
2019-05-15 10:26:25 -耗时 : 8
2019-05-15 10:26:25 -返回值 : [DictDO{id=145, name='银行转账', value='D', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=144, name='微信支付', value='C', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-05-15 10:26:27 -请求地址 : http://localhost:8081/charts/tableWaterYY
2019-05-15 10:26:27 -HTTP METHOD : GET
2019-05-15 10:26:27 -CLASS_METHOD : com.bootdo.charts.controller.tableWaterYYController.tableWaterYY
2019-05-15 10:26:27 -参数 : []
2019-05-15 10:26:27 -耗时 : 10
2019-05-15 10:26:27 -返回值 : charts/tableWaterYY
2019-05-15 10:26:27 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-05-15 10:26:27 -HTTP METHOD : GET
2019-05-15 10:26:27 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-05-15 10:26:27 -参数 : [userType]
2019-05-15 10:26:27 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-05-15 10:26:27 -==> Parameters: userType(String)
2019-05-15 10:26:27 -<==      Total: 4
2019-05-15 10:26:27 -耗时 : 6
2019-05-15 10:26:27 -返回值 : [DictDO{id=145, name='银行转账', value='D', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=144, name='微信支付', value='C', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-05-15 10:26:32 -请求地址 : http://localhost:8081/system/sysDept/treeView
2019-05-15 10:26:32 -HTTP METHOD : GET
2019-05-15 10:26:32 -CLASS_METHOD : com.bootdo.system.controller.DeptController.treeView
2019-05-15 10:26:32 -参数 : []
2019-05-15 10:26:32 -耗时 : 3
2019-05-15 10:26:32 -返回值 : system/dept/deptTree
2019-05-15 10:26:32 -请求地址 : http://localhost:8081/system/sysDept/tree
2019-05-15 10:26:32 -HTTP METHOD : GET
2019-05-15 10:26:32 -CLASS_METHOD : com.bootdo.system.controller.DeptController.tree
2019-05-15 10:26:32 -参数 : []
2019-05-15 10:26:32 -==>  Preparing: select `dept_id`,`parent_id`,`name`,`order_num`,`del_flag` from sys_dept order by dept_id desc 
2019-05-15 10:26:32 -==> Parameters: 
2019-05-15 10:26:32 -<==      Total: 3
2019-05-15 10:26:32 -耗时 : 18
2019-05-15 10:26:32 -返回值 : {"checked":false,"children":[{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"3","parentId":"1","state":{"opened":true},"text":"牙星"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"2","parentId":"1","state":{"opened":true},"text":"五九"}],"hasChildren":true,"hasParent":false,"id":"1","parentId":"0","state":{"opened":true},"text":"总公司"}
2019-05-15 10:26:34 -WebSocketSession[1 current WS(1)-HttpStream(0)-HttpPoll(0), 1 total, 0 closed abnormally (0 connect failure, 0 send limit, 0 transport error)], stompSubProtocol[processed CONNECT(1)-CONNECTED(1)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 8, active threads = 0, queued tasks = 0, completed tasks = 9], outboundChannelpool size = 1, active threads = 0, queued tasks = 0, completed tasks = 1], sockJsScheduler[pool size = 4, active threads = 1, queued tasks = 2, completed tasks = 4]
2019-05-15 10:26:35 -请求地址 : http://localhost:8081/charts/tableWaterYY/tableWaterYY
2019-05-15 10:26:35 -HTTP METHOD : POST
2019-05-15 10:26:35 -CLASS_METHOD : com.bootdo.charts.controller.tableWaterYYController.tableWaterYY
2019-05-15 10:26:35 -参数 : [com.bootdo.water.vo.WaterVo@5b1783d7, com.bootdo.moneyLog.vo.WaterLogVo@96f2a7b]
2019-05-15 10:26:35 -==>  Preparing: select COUNT(*) from water WHERE water_sum>0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 10:26:35 -==> Parameters: 2018-12(String), 1(String), 2(String)
2019-05-15 10:26:35 -<==      Total: 1
2019-05-15 10:26:35 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE water_sum>0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 10:26:35 -==> Parameters: 2018-12(String), 1(String), 2(String)
2019-05-15 10:26:35 -<==      Total: 1
2019-05-15 10:26:35 -==>  Preparing: select COUNT(*) from water WHERE water_sum <0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 10:26:35 -==> Parameters: 2018-12(String), 1(String), 2(String)
2019-05-15 10:26:35 -<==      Total: 1
2019-05-15 10:26:35 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE water_sum <0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 10:26:35 -==> Parameters: 2018-12(String), 1(String), 2(String)
2019-05-15 10:26:35 -<==      Total: 1
2019-05-15 10:26:35 -==>  Preparing: select m_water,s1_water,s2_water,s3_water,water_org from water_price 
2019-05-15 10:26:35 -==> Parameters: 
2019-05-15 10:26:35 -<==      Total: 2
2019-05-15 10:26:35 -==>  Preparing: select COUNT(*),ifnull(SUM(water_cost),0) from water WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 10:26:35 -==> Parameters: 2019(String), 1(String), 2(String)
2019-05-15 10:26:35 -<==      Total: 1
2019-05-15 10:26:35 -==>  Preparing: select ifnull(SUM(water_cost),0) from water WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 10:26:35 -==> Parameters: 2019(String), 1(String), 2(String)
2019-05-15 10:26:35 -<==      Total: 1
2019-05-15 10:26:35 -==>  Preparing: select COUNT(*) from water_log WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 10:26:35 -==> Parameters: 2019(String), 1(String), 2(String)
2019-05-15 10:26:35 -<==      Total: 1
2019-05-15 10:26:35 -==>  Preparing: select ifnull(SUM(water_money),0) from water_log WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 10:26:35 -==> Parameters: 2019(String), 1(String), 2(String)
2019-05-15 10:26:35 -<==      Total: 1
2019-05-15 10:26:35 -==>  Preparing: select COUNT(*) from water WHERE water_sum>0 and DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 10:26:35 -==> Parameters: 2019(String), 1(String), 2(String)
2019-05-15 10:26:35 -<==      Total: 1
2019-05-15 10:26:35 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 10:26:35 -==> Parameters: 2019(String), 1(String), 2(String)
2019-05-15 10:26:35 -<==      Total: 1
2019-05-15 10:26:35 -==>  Preparing: select COUNT(*),ifnull(SUM(water_sum),0) from water WHERE water_sum <0 and DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 10:26:35 -==> Parameters: 2019(String), 1(String), 2(String)
2019-05-15 10:26:35 -<==      Total: 1
2019-05-15 10:26:35 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE water_sum <0 and DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 10:26:35 -==> Parameters: 2019(String), 1(String), 2(String)
2019-05-15 10:26:35 -<==      Total: 1
2019-05-15 10:26:35 -==>  Preparing: select COUNT(*) from water WHERE water_sum>0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 10:26:35 -==> Parameters: 2018-12(String), 2(String), 2(String)
2019-05-15 10:26:35 -<==      Total: 1
2019-05-15 10:26:35 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE water_sum>0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 10:26:35 -==> Parameters: 2018-12(String), 2(String), 2(String)
2019-05-15 10:26:35 -<==      Total: 1
2019-05-15 10:26:35 -==>  Preparing: select COUNT(*) from water WHERE water_sum <0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 10:26:35 -==> Parameters: 2018-12(String), 2(String), 2(String)
2019-05-15 10:26:35 -<==      Total: 1
2019-05-15 10:26:35 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE water_sum <0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 10:26:35 -==> Parameters: 2018-12(String), 2(String), 2(String)
2019-05-15 10:26:35 -<==      Total: 1
2019-05-15 10:26:35 -==>  Preparing: select COUNT(*),ifnull(SUM(water_cost),0) from water WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 10:26:35 -==> Parameters: 2019(String), 2(String), 2(String)
2019-05-15 10:26:35 -<==      Total: 1
2019-05-15 10:26:35 -==>  Preparing: select ifnull(SUM(water_cost),0) from water WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 10:26:35 -==> Parameters: 2019(String), 2(String), 2(String)
2019-05-15 10:26:35 -<==      Total: 1
2019-05-15 10:26:35 -==>  Preparing: select COUNT(*) from water_log WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 10:26:35 -==> Parameters: 2019(String), 2(String), 2(String)
2019-05-15 10:26:35 -<==      Total: 1
2019-05-15 10:26:35 -==>  Preparing: select ifnull(SUM(water_money),0) from water_log WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 10:26:35 -==> Parameters: 2019(String), 2(String), 2(String)
2019-05-15 10:26:35 -<==      Total: 1
2019-05-15 10:26:35 -==>  Preparing: select COUNT(*) from water WHERE water_sum>0 and DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 10:26:35 -==> Parameters: 2019(String), 2(String), 2(String)
2019-05-15 10:26:35 -<==      Total: 1
2019-05-15 10:26:35 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 10:26:35 -==> Parameters: 2019(String), 2(String), 2(String)
2019-05-15 10:26:35 -<==      Total: 1
2019-05-15 10:26:35 -==>  Preparing: select COUNT(*),ifnull(SUM(water_sum),0) from water WHERE water_sum <0 and DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 10:26:35 -==> Parameters: 2019(String), 2(String), 2(String)
2019-05-15 10:26:35 -<==      Total: 1
2019-05-15 10:26:35 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE water_sum <0 and DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 10:26:35 -==> Parameters: 2019(String), 2(String), 2(String)
2019-05-15 10:26:35 -<==      Total: 1
2019-05-15 10:26:35 -==>  Preparing: select COUNT(*) from water WHERE water_sum>0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 10:26:35 -==> Parameters: 2018-12(String), 4(String), 2(String)
2019-05-15 10:26:35 -<==      Total: 1
2019-05-15 10:26:35 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE water_sum>0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 10:26:35 -==> Parameters: 2018-12(String), 4(String), 2(String)
2019-05-15 10:26:35 -<==      Total: 1
2019-05-15 10:26:35 -==>  Preparing: select COUNT(*) from water WHERE water_sum <0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 10:26:35 -==> Parameters: 2018-12(String), 4(String), 2(String)
2019-05-15 10:26:35 -<==      Total: 1
2019-05-15 10:26:35 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE water_sum <0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 10:26:35 -==> Parameters: 2018-12(String), 4(String), 2(String)
2019-05-15 10:26:35 -<==      Total: 1
2019-05-15 10:26:35 -==>  Preparing: select COUNT(*),ifnull(SUM(water_cost),0) from water WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 10:26:35 -==> Parameters: 2019(String), 4(String), 2(String)
2019-05-15 10:26:35 -<==      Total: 1
2019-05-15 10:26:35 -==>  Preparing: select ifnull(SUM(water_cost),0) from water WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 10:26:35 -==> Parameters: 2019(String), 4(String), 2(String)
2019-05-15 10:26:35 -<==      Total: 1
2019-05-15 10:26:35 -==>  Preparing: select COUNT(*) from water_log WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 10:26:35 -==> Parameters: 2019(String), 4(String), 2(String)
2019-05-15 10:26:35 -<==      Total: 1
2019-05-15 10:26:35 -==>  Preparing: select ifnull(SUM(water_money),0) from water_log WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 10:26:35 -==> Parameters: 2019(String), 4(String), 2(String)
2019-05-15 10:26:35 -<==      Total: 1
2019-05-15 10:26:35 -==>  Preparing: select COUNT(*) from water WHERE water_sum>0 and DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 10:26:35 -==> Parameters: 2019(String), 4(String), 2(String)
2019-05-15 10:26:35 -<==      Total: 1
2019-05-15 10:26:35 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 10:26:35 -==> Parameters: 2019(String), 4(String), 2(String)
2019-05-15 10:26:35 -<==      Total: 1
2019-05-15 10:26:35 -==>  Preparing: select COUNT(*),ifnull(SUM(water_sum),0) from water WHERE water_sum <0 and DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 10:26:35 -==> Parameters: 2019(String), 4(String), 2(String)
2019-05-15 10:26:35 -<==      Total: 1
2019-05-15 10:26:35 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE water_sum <0 and DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 10:26:35 -==> Parameters: 2019(String), 4(String), 2(String)
2019-05-15 10:26:35 -<==      Total: 1
2019-05-15 10:26:35 -==>  Preparing: select COUNT(*) from water WHERE water_sum>0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 10:26:35 -==> Parameters: 2018-12(String), 4(String), 2(String)
2019-05-15 10:26:35 -<==      Total: 1
2019-05-15 10:26:35 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE water_sum>0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 10:26:35 -==> Parameters: 2018-12(String), 4(String), 2(String)
2019-05-15 10:26:35 -<==      Total: 1
2019-05-15 10:26:35 -==>  Preparing: select COUNT(*) from water WHERE water_sum <0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 10:26:35 -==> Parameters: 2018-12(String), 4(String), 2(String)
2019-05-15 10:26:35 -<==      Total: 1
2019-05-15 10:26:35 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE water_sum <0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 10:26:35 -==> Parameters: 2018-12(String), 4(String), 2(String)
2019-05-15 10:26:35 -<==      Total: 1
2019-05-15 10:26:35 -==>  Preparing: select COUNT(*),ifnull(SUM(water_cost),0) from water WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 10:26:35 -==> Parameters: 2019(String), 4(String), 2(String)
2019-05-15 10:26:35 -<==      Total: 1
2019-05-15 10:26:35 -==>  Preparing: select ifnull(SUM(water_cost),0) from water WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 10:26:35 -==> Parameters: 2019(String), 4(String), 2(String)
2019-05-15 10:26:35 -<==      Total: 1
2019-05-15 10:26:35 -==>  Preparing: select COUNT(*) from water_log WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 10:26:35 -==> Parameters: 2019(String), 4(String), 2(String)
2019-05-15 10:26:35 -<==      Total: 1
2019-05-15 10:26:35 -==>  Preparing: select ifnull(SUM(water_money),0) from water_log WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 10:26:35 -==> Parameters: 2019(String), 4(String), 2(String)
2019-05-15 10:26:35 -<==      Total: 1
2019-05-15 10:26:35 -==>  Preparing: select COUNT(*) from water WHERE water_sum>0 and DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 10:26:35 -==> Parameters: 2019(String), 4(String), 2(String)
2019-05-15 10:26:35 -<==      Total: 1
2019-05-15 10:26:35 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 10:26:35 -==> Parameters: 2019(String), 4(String), 2(String)
2019-05-15 10:26:35 -<==      Total: 1
2019-05-15 10:26:35 -==>  Preparing: select COUNT(*),ifnull(SUM(water_sum),0) from water WHERE water_sum <0 and DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 10:26:35 -==> Parameters: 2019(String), 4(String), 2(String)
2019-05-15 10:26:35 -<==      Total: 1
2019-05-15 10:26:35 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE water_sum <0 and DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 10:26:35 -==> Parameters: 2019(String), 4(String), 2(String)
2019-05-15 10:26:35 -<==      Total: 1
2019-05-15 10:26:35 -耗时 : 214
2019-05-15 10:26:35 -返回值 : {S2TotalH=0, NewPreDepositY=4, STotalY=0, NewArrearstTotalH=2, NewPreDepositTotalY=5, S2NewTotalY=0, type=2, TotalH=0, OldAarrearsY=0, SNewPreDepositY=1, S3NetnreceiptsH=1, NewPreDepositH=3, S2TotalY=0, TtotalH=0, SNewAarrearsY=0, S2NewTotalH=0, NetnreceiptsTotalH=4, SReceivableY=10, S2OldAarrears=0, TotalY=0, NetnreceiptsH=2, SNewPreDepositH=1, SNewTotalH=1, OldAarrearsH=0, S2OldPreDepositH=0, S3NewAarrearsY=0, TtotalY=0, S2NewAarrearsY=0, TTtotalY=-23, S3OldPreDepositY=0, ArrearsTotalY=0, SWaterPrice=10, SReceivableH=1, SNewAarrearsH=0, MWaterPrice=7, S2OldPreDepositY=0, S3OldAarrears=0, S3NewAarrearsH=0, S2NewAarrearsH=0, TTtotalH=6, S3OldPreDepositH=0, ArrearsTotalH=0, SOldPreDepositH=0, PreDepositTotalY=0, SNetnreceiptsH=2, SOldAarrearsH=0, S3NewPreDepositY=0, S3NewTotalH=0, SOldPreDepositY=0, S2NetnreceiptsH=1, ReceivableY=30, S2NewPreDepositH=0, S3NewPreDepositH=0, S3NewTotalY=0, SNetnreceiptsY=21, PreDepositTotalH=0, S2OldAarrearsH=0, S3OldAarrearsH=0, ReceivableH=5, S2NewPreDepositY=0, NewAarrearsY=-27, PriceTotal=17, NewPreDepositTotalH=4, S2ReceivableH=0, OldPreDepositY=0, NetnreceiptsTotalY=172, NewTotalY=-23, S3ReceivableY=0, ReceivableTotalH=6, S3TotalH=0, NetnreceiptsY=151, SNewTotalY=0, NewAarrearsH=2, NewArrearstTotalY=-27, OldPreDepositH=0, STotalH=0, S3ReceivableH=0, ReceivableTotalY=40, NewTotalH=5, SOldAarrears=0, S2ReceivableY=0, S2NetnreceiptsY=60, S3TotalY=0, S3NetnreceiptsY=60}
2019-05-15 10:26:41 -请求地址 : http://localhost:8081/charts/tableHeatYY
2019-05-15 10:26:41 -HTTP METHOD : GET
2019-05-15 10:26:41 -CLASS_METHOD : com.bootdo.charts.controller.tableHeatYYController.tableHeatYY
2019-05-15 10:26:41 -参数 : []
2019-05-15 10:26:41 -耗时 : 10
2019-05-15 10:26:41 -返回值 : charts/tableHeatYY
2019-05-15 10:26:42 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-05-15 10:26:42 -HTTP METHOD : GET
2019-05-15 10:26:42 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-05-15 10:26:42 -参数 : [userType]
2019-05-15 10:26:42 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-05-15 10:26:42 -==> Parameters: userType(String)
2019-05-15 10:26:42 -<==      Total: 4
2019-05-15 10:26:42 -耗时 : 7
2019-05-15 10:26:42 -返回值 : [DictDO{id=145, name='银行转账', value='D', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=144, name='微信支付', value='C', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-05-15 10:26:42 -请求地址 : http://localhost:8081/charts/tableWaterYY
2019-05-15 10:26:42 -HTTP METHOD : GET
2019-05-15 10:26:42 -CLASS_METHOD : com.bootdo.charts.controller.tableWaterYYController.tableWaterYY
2019-05-15 10:26:42 -参数 : []
2019-05-15 10:26:42 -耗时 : 0
2019-05-15 10:26:42 -返回值 : charts/tableWaterYY
2019-05-15 10:26:42 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-05-15 10:26:42 -HTTP METHOD : GET
2019-05-15 10:26:42 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-05-15 10:26:42 -参数 : [userType]
2019-05-15 10:26:42 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-05-15 10:26:42 -==> Parameters: userType(String)
2019-05-15 10:26:42 -<==      Total: 4
2019-05-15 10:26:42 -耗时 : 5
2019-05-15 10:26:42 -返回值 : [DictDO{id=145, name='银行转账', value='D', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=144, name='微信支付', value='C', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-05-15 10:26:45 -请求地址 : http://localhost:8081/system/sysDept/treeView
2019-05-15 10:26:45 -HTTP METHOD : GET
2019-05-15 10:26:45 -CLASS_METHOD : com.bootdo.system.controller.DeptController.treeView
2019-05-15 10:26:45 -参数 : []
2019-05-15 10:26:45 -耗时 : 0
2019-05-15 10:26:45 -返回值 : system/dept/deptTree
2019-05-15 10:26:46 -请求地址 : http://localhost:8081/system/sysDept/tree
2019-05-15 10:26:46 -HTTP METHOD : GET
2019-05-15 10:26:46 -CLASS_METHOD : com.bootdo.system.controller.DeptController.tree
2019-05-15 10:26:46 -参数 : []
2019-05-15 10:26:46 -==>  Preparing: select `dept_id`,`parent_id`,`name`,`order_num`,`del_flag` from sys_dept order by dept_id desc 
2019-05-15 10:26:46 -==> Parameters: 
2019-05-15 10:26:46 -<==      Total: 3
2019-05-15 10:26:46 -耗时 : 3
2019-05-15 10:26:46 -返回值 : {"checked":false,"children":[{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"3","parentId":"1","state":{"opened":true},"text":"牙星"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"2","parentId":"1","state":{"opened":true},"text":"五九"}],"hasChildren":true,"hasParent":false,"id":"1","parentId":"0","state":{"opened":true},"text":"总公司"}
2019-05-15 10:26:48 -请求地址 : http://localhost:8081/charts/tableWaterYY/tableWaterYY
2019-05-15 10:26:48 -HTTP METHOD : POST
2019-05-15 10:26:48 -CLASS_METHOD : com.bootdo.charts.controller.tableWaterYYController.tableWaterYY
2019-05-15 10:26:48 -参数 : [com.bootdo.water.vo.WaterVo@46306a54, com.bootdo.moneyLog.vo.WaterLogVo@24fab738]
2019-05-15 10:26:48 -==>  Preparing: select COUNT(*) from water WHERE water_sum>0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 10:26:48 -==> Parameters: 2018-12(String), 1(String), 3(String)
2019-05-15 10:26:48 -<==      Total: 1
2019-05-15 10:26:48 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE water_sum>0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 10:26:48 -==> Parameters: 2018-12(String), 1(String), 3(String)
2019-05-15 10:26:48 -<==      Total: 1
2019-05-15 10:26:48 -==>  Preparing: select COUNT(*) from water WHERE water_sum <0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 10:26:48 -==> Parameters: 2018-12(String), 1(String), 3(String)
2019-05-15 10:26:48 -<==      Total: 1
2019-05-15 10:26:48 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE water_sum <0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 10:26:48 -==> Parameters: 2018-12(String), 1(String), 3(String)
2019-05-15 10:26:48 -<==      Total: 1
2019-05-15 10:26:48 -==>  Preparing: select m_water,s1_water,s2_water,s3_water,water_org from water_price 
2019-05-15 10:26:48 -==> Parameters: 
2019-05-15 10:26:48 -<==      Total: 2
2019-05-15 10:26:48 -==>  Preparing: select COUNT(*),ifnull(SUM(water_cost),0) from water WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 10:26:48 -==> Parameters: 2019(String), 1(String), 3(String)
2019-05-15 10:26:48 -<==      Total: 1
2019-05-15 10:26:48 -==>  Preparing: select ifnull(SUM(water_cost),0) from water WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 10:26:48 -==> Parameters: 2019(String), 1(String), 3(String)
2019-05-15 10:26:48 -<==      Total: 1
2019-05-15 10:26:48 -==>  Preparing: select COUNT(*) from water_log WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 10:26:48 -==> Parameters: 2019(String), 1(String), 3(String)
2019-05-15 10:26:48 -<==      Total: 1
2019-05-15 10:26:48 -==>  Preparing: select ifnull(SUM(water_money),0) from water_log WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 10:26:48 -==> Parameters: 2019(String), 1(String), 3(String)
2019-05-15 10:26:48 -<==      Total: 1
2019-05-15 10:26:48 -==>  Preparing: select COUNT(*) from water WHERE water_sum>0 and DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 10:26:48 -==> Parameters: 2019(String), 1(String), 3(String)
2019-05-15 10:26:48 -<==      Total: 1
2019-05-15 10:26:48 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 10:26:48 -==> Parameters: 2019(String), 1(String), 3(String)
2019-05-15 10:26:48 -<==      Total: 1
2019-05-15 10:26:48 -==>  Preparing: select COUNT(*),ifnull(SUM(water_sum),0) from water WHERE water_sum <0 and DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 10:26:48 -==> Parameters: 2019(String), 1(String), 3(String)
2019-05-15 10:26:48 -<==      Total: 1
2019-05-15 10:26:48 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE water_sum <0 and DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 10:26:48 -==> Parameters: 2019(String), 1(String), 3(String)
2019-05-15 10:26:48 -<==      Total: 1
2019-05-15 10:26:48 -==>  Preparing: select COUNT(*) from water WHERE water_sum>0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 10:26:48 -==> Parameters: 2018-12(String), 2(String), 3(String)
2019-05-15 10:26:48 -<==      Total: 1
2019-05-15 10:26:48 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE water_sum>0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 10:26:48 -==> Parameters: 2018-12(String), 2(String), 3(String)
2019-05-15 10:26:48 -<==      Total: 1
2019-05-15 10:26:48 -==>  Preparing: select COUNT(*) from water WHERE water_sum <0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 10:26:48 -==> Parameters: 2018-12(String), 2(String), 3(String)
2019-05-15 10:26:48 -<==      Total: 1
2019-05-15 10:26:48 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE water_sum <0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 10:26:48 -==> Parameters: 2018-12(String), 2(String), 3(String)
2019-05-15 10:26:48 -<==      Total: 1
2019-05-15 10:26:48 -==>  Preparing: select COUNT(*),ifnull(SUM(water_cost),0) from water WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 10:26:48 -==> Parameters: 2019(String), 2(String), 3(String)
2019-05-15 10:26:48 -<==      Total: 1
2019-05-15 10:26:48 -==>  Preparing: select ifnull(SUM(water_cost),0) from water WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 10:26:48 -==> Parameters: 2019(String), 2(String), 3(String)
2019-05-15 10:26:48 -<==      Total: 1
2019-05-15 10:26:48 -==>  Preparing: select COUNT(*) from water_log WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 10:26:48 -==> Parameters: 2019(String), 2(String), 3(String)
2019-05-15 10:26:48 -<==      Total: 1
2019-05-15 10:26:48 -==>  Preparing: select ifnull(SUM(water_money),0) from water_log WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 10:26:48 -==> Parameters: 2019(String), 2(String), 3(String)
2019-05-15 10:26:48 -<==      Total: 1
2019-05-15 10:26:48 -==>  Preparing: select COUNT(*) from water WHERE water_sum>0 and DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 10:26:48 -==> Parameters: 2019(String), 2(String), 3(String)
2019-05-15 10:26:48 -<==      Total: 1
2019-05-15 10:26:48 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 10:26:48 -==> Parameters: 2019(String), 2(String), 3(String)
2019-05-15 10:26:48 -<==      Total: 1
2019-05-15 10:26:48 -==>  Preparing: select COUNT(*),ifnull(SUM(water_sum),0) from water WHERE water_sum <0 and DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 10:26:48 -==> Parameters: 2019(String), 2(String), 3(String)
2019-05-15 10:26:48 -<==      Total: 1
2019-05-15 10:26:48 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE water_sum <0 and DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 10:26:48 -==> Parameters: 2019(String), 2(String), 3(String)
2019-05-15 10:26:48 -<==      Total: 1
2019-05-15 10:26:48 -==>  Preparing: select COUNT(*) from water WHERE water_sum>0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 10:26:48 -==> Parameters: 2018-12(String), 4(String), 3(String)
2019-05-15 10:26:48 -<==      Total: 1
2019-05-15 10:26:48 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE water_sum>0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 10:26:48 -==> Parameters: 2018-12(String), 4(String), 3(String)
2019-05-15 10:26:48 -<==      Total: 1
2019-05-15 10:26:48 -==>  Preparing: select COUNT(*) from water WHERE water_sum <0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 10:26:48 -==> Parameters: 2018-12(String), 4(String), 3(String)
2019-05-15 10:26:48 -<==      Total: 1
2019-05-15 10:26:48 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE water_sum <0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 10:26:48 -==> Parameters: 2018-12(String), 4(String), 3(String)
2019-05-15 10:26:48 -<==      Total: 1
2019-05-15 10:26:48 -==>  Preparing: select COUNT(*),ifnull(SUM(water_cost),0) from water WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 10:26:48 -==> Parameters: 2019(String), 4(String), 3(String)
2019-05-15 10:26:48 -<==      Total: 1
2019-05-15 10:26:48 -==>  Preparing: select ifnull(SUM(water_cost),0) from water WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 10:26:48 -==> Parameters: 2019(String), 4(String), 3(String)
2019-05-15 10:26:48 -<==      Total: 1
2019-05-15 10:26:48 -==>  Preparing: select COUNT(*) from water_log WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 10:26:48 -==> Parameters: 2019(String), 4(String), 3(String)
2019-05-15 10:26:48 -<==      Total: 1
2019-05-15 10:26:48 -==>  Preparing: select ifnull(SUM(water_money),0) from water_log WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 10:26:48 -==> Parameters: 2019(String), 4(String), 3(String)
2019-05-15 10:26:48 -<==      Total: 1
2019-05-15 10:26:48 -==>  Preparing: select COUNT(*) from water WHERE water_sum>0 and DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 10:26:48 -==> Parameters: 2019(String), 4(String), 3(String)
2019-05-15 10:26:48 -<==      Total: 1
2019-05-15 10:26:48 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 10:26:48 -==> Parameters: 2019(String), 4(String), 3(String)
2019-05-15 10:26:48 -<==      Total: 1
2019-05-15 10:26:48 -==>  Preparing: select COUNT(*),ifnull(SUM(water_sum),0) from water WHERE water_sum <0 and DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 10:26:48 -==> Parameters: 2019(String), 4(String), 3(String)
2019-05-15 10:26:48 -<==      Total: 1
2019-05-15 10:26:48 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE water_sum <0 and DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 10:26:48 -==> Parameters: 2019(String), 4(String), 3(String)
2019-05-15 10:26:48 -<==      Total: 1
2019-05-15 10:26:48 -==>  Preparing: select COUNT(*) from water WHERE water_sum>0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 10:26:48 -==> Parameters: 2018-12(String), 4(String), 3(String)
2019-05-15 10:26:48 -<==      Total: 1
2019-05-15 10:26:48 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE water_sum>0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 10:26:48 -==> Parameters: 2018-12(String), 4(String), 3(String)
2019-05-15 10:26:48 -<==      Total: 1
2019-05-15 10:26:48 -==>  Preparing: select COUNT(*) from water WHERE water_sum <0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 10:26:48 -==> Parameters: 2018-12(String), 4(String), 3(String)
2019-05-15 10:26:48 -<==      Total: 1
2019-05-15 10:26:48 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE water_sum <0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 10:26:48 -==> Parameters: 2018-12(String), 4(String), 3(String)
2019-05-15 10:26:48 -<==      Total: 1
2019-05-15 10:26:48 -==>  Preparing: select COUNT(*),ifnull(SUM(water_cost),0) from water WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 10:26:48 -==> Parameters: 2019(String), 4(String), 3(String)
2019-05-15 10:26:48 -<==      Total: 1
2019-05-15 10:26:48 -==>  Preparing: select ifnull(SUM(water_cost),0) from water WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 10:26:48 -==> Parameters: 2019(String), 4(String), 3(String)
2019-05-15 10:26:48 -<==      Total: 1
2019-05-15 10:26:48 -==>  Preparing: select COUNT(*) from water_log WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 10:26:48 -==> Parameters: 2019(String), 4(String), 3(String)
2019-05-15 10:26:48 -<==      Total: 1
2019-05-15 10:26:48 -==>  Preparing: select ifnull(SUM(water_money),0) from water_log WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 10:26:48 -==> Parameters: 2019(String), 4(String), 3(String)
2019-05-15 10:26:48 -<==      Total: 1
2019-05-15 10:26:48 -==>  Preparing: select COUNT(*) from water WHERE water_sum>0 and DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 10:26:48 -==> Parameters: 2019(String), 4(String), 3(String)
2019-05-15 10:26:48 -<==      Total: 1
2019-05-15 10:26:48 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 10:26:48 -==> Parameters: 2019(String), 4(String), 3(String)
2019-05-15 10:26:48 -<==      Total: 1
2019-05-15 10:26:48 -==>  Preparing: select COUNT(*),ifnull(SUM(water_sum),0) from water WHERE water_sum <0 and DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 10:26:48 -==> Parameters: 2019(String), 4(String), 3(String)
2019-05-15 10:26:48 -<==      Total: 1
2019-05-15 10:26:48 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE water_sum <0 and DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 10:26:48 -==> Parameters: 2019(String), 4(String), 3(String)
2019-05-15 10:26:48 -<==      Total: 1
2019-05-15 10:26:48 -耗时 : 113
2019-05-15 10:26:48 -返回值 : {S2TotalH=0, NewPreDepositY=0, STotalY=0, NewArrearstTotalH=0, NewPreDepositTotalY=0, S2NewTotalY=0, type=3, TotalH=0, OldAarrearsY=0, SNewPreDepositY=0, S3NetnreceiptsH=0, NewPreDepositH=0, S2TotalY=0, TtotalH=0, SNewAarrearsY=0, S2NewTotalH=0, NetnreceiptsTotalH=0, SReceivableY=0, S2OldAarrears=0, TotalY=0, NetnreceiptsH=0, SNewPreDepositH=0, SNewTotalH=0, OldAarrearsH=0, S2OldPreDepositH=0, S3NewAarrearsY=0, TtotalY=0, S2NewAarrearsY=0, TTtotalY=0, S3OldPreDepositY=0, ArrearsTotalY=0, SWaterPrice=10, SReceivableH=0, SNewAarrearsH=0, SWaterPrice2=20, SWaterPrice3=30, MWaterPrice=5, S2OldPreDepositY=0, S3OldAarrears=0, S3NewAarrearsH=0, S2NewAarrearsH=0, TTtotalH=0, S3OldPreDepositH=0, ArrearsTotalH=0, SOldPreDepositH=0, PreDepositTotalY=0, SNetnreceiptsH=0, SOldAarrearsH=0, S3NewPreDepositY=0, S3NewTotalH=0, SOldPreDepositY=0, S2NetnreceiptsH=0, ReceivableY=0, S2NewPreDepositH=0, S3NewPreDepositH=0, S3NewTotalY=0, SNetnreceiptsY=0, PreDepositTotalH=0, S2OldAarrearsH=0, S3OldAarrearsH=0, ReceivableH=0, S2NewPreDepositY=0, NewAarrearsY=0, PriceTotal=65, NewPreDepositTotalH=0, S2ReceivableH=0, OldPreDepositY=0, NetnreceiptsTotalY=0, NewTotalY=0, S3ReceivableY=0, ReceivableTotalH=0, S3TotalH=0, NetnreceiptsY=0, SNewTotalY=0, NewAarrearsH=0, NewArrearstTotalY=0, OldPreDepositH=0, STotalH=0, S3ReceivableH=0, ReceivableTotalY=0, NewTotalH=0, SOldAarrears=0, S2ReceivableY=0, S2NetnreceiptsY=0, S3TotalY=0, S3NetnreceiptsY=0}
2019-05-15 10:35:02 -请求地址 : http://localhost:8081/index
2019-05-15 10:35:02 -HTTP METHOD : GET
2019-05-15 10:35:02 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2019-05-15 10:35:02 -参数 : [{}]
2019-05-15 10:35:02 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2019-05-15 10:35:02 -==> Parameters: 1(Long)
2019-05-15 10:35:02 -<==      Total: 49
2019-05-15 10:35:02 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2019-05-15 10:35:02 -==> Parameters: 138(Long)
2019-05-15 10:35:02 -<==      Total: 1
2019-05-15 10:35:02 -耗时 : 23
2019-05-15 10:35:02 -返回值 : index_v1
2019-05-15 10:35:02 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-05-15 10:35:02 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 24(Integer), com.bootdo.system.controller.LoginController.index()(String), {"menus":[{"attributes":{"icon":"fa fa-money","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-money","url":"/moneyList/moneyList"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"102","parentId":"106","text":"现金缴费"},{"attributes":{"icon":"fa fa-book","url":"/moneyLog/elecLog"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"107","parentId":"106","text":"缴费记录"}],"hasChildren":true,"hasParent":false,"id":"106","parentId":"0","text":"收费管理"},{"attributes":{"icon":"fa fa-lightbulb-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/elec/elec"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"121","parentId":"103","text":"电费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"elec/elecInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"122","parentId":"103","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"elec/elecUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"123","parentId":"103","text":"电表上传"},{"attributes":{"icon":"fa fa-cc","url":"/elec/elecPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"124","parentId":"103","text":"电价管理"}],"hasChildren":true,"hasParent":false,"id":"103","parentId":"0","text":"电费管理"},{"attributes":{"icon":"fa fa-tint","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/water/water"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"117","parentId":"105","text":"水费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"water/waterInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"118","parentId":"105","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"water/waterUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"119","parentId":"105","text":"水费生成"},{"attributes":{"icon":"fa fa-cc","url":"/water/waterPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"120","parentId":"105","text":"水价管理"}],"hasChildren":true,"hasParent":false,"id":"105","parentId":"0","text":"水费管理"},{"attributes":{"icon":"fa fa-fire","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/heat/heat"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"113","parentId":"104","text":"暖费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"heat/heatInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"114","parentId":"104","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"heat/heatUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"115","parentId":"104","text":"暖费生成"},{"attributes":{"icon":"","url":"/heat/heatPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"116","parentId":"104","text":"暖价管理"}],"hasChildren":true,"hasParent":false,"id":"104","parentId":"0","text":"暖费管理"},{"attributes":{"icon":"fa fa-vcard-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-bomb","url":"/print/print"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"149","parentId":"108","text":"票据记录"}],"hasChildren":true,"hasParent":false,"id":"108","parentId":"0","text":"票据管理"},{"attributes":{"icon":"fa fa-bar-chart","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-area-chart","url":"/chart/graph_echarts.html"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","text":"百度chart"},{"attributes":{"icon":"fa fa-sun-o","url":"charts/countDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"109","parentId":"97","text":"日统计报表"},{"attributes":{"icon":"fa fa-calendar","url":"charts/tableDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"161","parentId":"97","text":"日统计表格"},{"attributes":{"icon":"fa fa-registered","url":"charts/countMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"110","parentId":"97","text":"月统计报表"},{"attributes":{"icon":"fa fa-building-o","url":"charts/tableElecMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"162","parentId":"97","text":"月统计表格"},{"attributes":{"icon":"fa fa-support","url":"charts/countYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"111","parentId":"97","text":"年统计报表"},{"attributes":{"icon":"fa fa-book","url":"charts/tableElecYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"163","parentId":"97","text":"年统计表格"},{"attributes":{"icon":"fa fa-money","url":"charts/countOwe"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"155","parentId":"97","text":"欠费报表图"},{"attributes":{"icon":"fa fa-tachometer","url":"charts/countRun"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"112"(String), 127.0.0.1(String), 2019-05-15 10:35:02.575(Timestamp)
2019-05-15 10:35:02 -请求地址 : http://localhost:8081/main
2019-05-15 10:35:02 -HTTP METHOD : GET
2019-05-15 10:35:02 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-05-15 10:35:02 -参数 : []
2019-05-15 10:35:02 -耗时 : 1
2019-05-15 10:35:02 -返回值 : main
2019-05-15 10:35:02 -<==    Updates: 1
2019-05-15 10:35:02 -请求地址 : http://localhost:8081/oa/notify/message
2019-05-15 10:35:02 -HTTP METHOD : GET
2019-05-15 10:35:02 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2019-05-15 10:35:02 -参数 : []
2019-05-15 10:35:02 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2019-05-15 10:35:02 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2019-05-15 10:35:02 -<==      Total: 0
2019-05-15 10:35:02 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2019-05-15 10:35:02 -==> Parameters: 1(Long), 0(String)
2019-05-15 10:35:02 -<==      Total: 1
2019-05-15 10:35:02 -耗时 : 10
2019-05-15 10:35:02 -返回值 : com.bootdo.common.utils.PageUtils@208a0fa1
2019-05-15 10:35:02 -请求地址 : http://localhost:8081/main
2019-05-15 10:35:02 -HTTP METHOD : GET
2019-05-15 10:35:02 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-05-15 10:35:02 -参数 : []
2019-05-15 10:35:02 -耗时 : 0
2019-05-15 10:35:02 -返回值 : main
2019-05-15 10:35:14 -请求地址 : http://localhost:8081/water/waterPrice
2019-05-15 10:35:14 -HTTP METHOD : GET
2019-05-15 10:35:14 -CLASS_METHOD : com.bootdo.water.controller.WaterPriceController.WaterPrice
2019-05-15 10:35:14 -参数 : []
2019-05-15 10:35:14 -耗时 : 1
2019-05-15 10:35:14 -返回值 : water/waterPrice/waterPrice
2019-05-15 10:35:15 -请求地址 : http://localhost:8081/water/waterPrice/list
2019-05-15 10:35:15 -HTTP METHOD : GET
2019-05-15 10:35:15 -CLASS_METHOD : com.bootdo.water.controller.WaterPriceController.list
2019-05-15 10:35:15 -参数 : [{limit=10, offset=0}]
2019-05-15 10:35:15 -==>  Preparing: select `id`,`water_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `water_org`) AS waterOrgName,`m_water`,`s1_water`,`s2_water`,`s3_water`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from water_price order by id asc limit ?, ? 
2019-05-15 10:35:15 -==> Parameters: 0(Integer), 10(Integer)
2019-05-15 10:35:15 -<==      Total: 2
2019-05-15 10:35:15 -==>  Preparing: select count(*) from water_price 
2019-05-15 10:35:15 -==> Parameters: 
2019-05-15 10:35:15 -<==      Total: 1
2019-05-15 10:35:15 -耗时 : 25
2019-05-15 10:35:15 -返回值 : com.bootdo.common.utils.PageUtils@30b05060
2019-05-15 10:35:23 -请求地址 : http://localhost:8081/charts/tableElecYY
2019-05-15 10:35:23 -HTTP METHOD : GET
2019-05-15 10:35:23 -CLASS_METHOD : com.bootdo.charts.controller.tableElecYYController.tableElecYY
2019-05-15 10:35:23 -参数 : []
2019-05-15 10:35:23 -耗时 : 0
2019-05-15 10:35:23 -返回值 : charts/tableElecYY
2019-05-15 10:35:23 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-05-15 10:35:23 -HTTP METHOD : GET
2019-05-15 10:35:23 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-05-15 10:35:23 -参数 : [userType]
2019-05-15 10:35:23 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-05-15 10:35:23 -==> Parameters: userType(String)
2019-05-15 10:35:23 -<==      Total: 4
2019-05-15 10:35:23 -耗时 : 4
2019-05-15 10:35:23 -返回值 : [DictDO{id=145, name='银行转账', value='D', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=144, name='微信支付', value='C', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-05-15 10:35:24 -请求地址 : http://localhost:8081/charts/tableWaterYY
2019-05-15 10:35:24 -HTTP METHOD : GET
2019-05-15 10:35:24 -CLASS_METHOD : com.bootdo.charts.controller.tableWaterYYController.tableWaterYY
2019-05-15 10:35:24 -参数 : []
2019-05-15 10:35:24 -耗时 : 0
2019-05-15 10:35:24 -返回值 : charts/tableWaterYY
2019-05-15 10:35:24 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-05-15 10:35:24 -HTTP METHOD : GET
2019-05-15 10:35:24 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-05-15 10:35:24 -参数 : [userType]
2019-05-15 10:35:24 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-05-15 10:35:24 -==> Parameters: userType(String)
2019-05-15 10:35:24 -<==      Total: 4
2019-05-15 10:35:24 -耗时 : 5
2019-05-15 10:35:24 -返回值 : [DictDO{id=145, name='银行转账', value='D', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=144, name='微信支付', value='C', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-05-15 10:35:26 -请求地址 : http://localhost:8081/system/sysDept/treeView
2019-05-15 10:35:26 -HTTP METHOD : GET
2019-05-15 10:35:26 -CLASS_METHOD : com.bootdo.system.controller.DeptController.treeView
2019-05-15 10:35:26 -参数 : []
2019-05-15 10:35:26 -耗时 : 0
2019-05-15 10:35:26 -返回值 : system/dept/deptTree
2019-05-15 10:35:27 -请求地址 : http://localhost:8081/system/sysDept/tree
2019-05-15 10:35:27 -HTTP METHOD : GET
2019-05-15 10:35:27 -CLASS_METHOD : com.bootdo.system.controller.DeptController.tree
2019-05-15 10:35:27 -参数 : []
2019-05-15 10:35:27 -==>  Preparing: select `dept_id`,`parent_id`,`name`,`order_num`,`del_flag` from sys_dept order by dept_id desc 
2019-05-15 10:35:27 -==> Parameters: 
2019-05-15 10:35:27 -<==      Total: 3
2019-05-15 10:35:27 -耗时 : 2
2019-05-15 10:35:27 -返回值 : {"checked":false,"children":[{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"3","parentId":"1","state":{"opened":true},"text":"牙星"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"2","parentId":"1","state":{"opened":true},"text":"五九"}],"hasChildren":true,"hasParent":false,"id":"1","parentId":"0","state":{"opened":true},"text":"总公司"}
2019-05-15 10:35:31 -请求地址 : http://localhost:8081/charts/tableWaterYY/tableWaterYY
2019-05-15 10:35:31 -HTTP METHOD : POST
2019-05-15 10:35:31 -CLASS_METHOD : com.bootdo.charts.controller.tableWaterYYController.tableWaterYY
2019-05-15 10:35:31 -参数 : [com.bootdo.water.vo.WaterVo@737c4a1e, com.bootdo.moneyLog.vo.WaterLogVo@1f6d0161]
2019-05-15 10:35:31 -==>  Preparing: select COUNT(*) from water WHERE water_sum>0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 10:35:31 -==> Parameters: 2018-12(String), 1(String), 2(String)
2019-05-15 10:35:31 -<==      Total: 1
2019-05-15 10:35:31 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE water_sum>0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 10:35:31 -==> Parameters: 2018-12(String), 1(String), 2(String)
2019-05-15 10:35:31 -<==      Total: 1
2019-05-15 10:35:31 -==>  Preparing: select COUNT(*) from water WHERE water_sum <0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 10:35:31 -==> Parameters: 2018-12(String), 1(String), 2(String)
2019-05-15 10:35:31 -<==      Total: 1
2019-05-15 10:35:31 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE water_sum <0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 10:35:31 -==> Parameters: 2018-12(String), 1(String), 2(String)
2019-05-15 10:35:31 -<==      Total: 1
2019-05-15 10:35:31 -==>  Preparing: select m_water,s1_water,s2_water,s3_water,water_org from water_price 
2019-05-15 10:35:31 -==> Parameters: 
2019-05-15 10:35:31 -<==      Total: 2
2019-05-15 10:35:31 -==>  Preparing: select COUNT(*),ifnull(SUM(water_cost),0) from water WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 10:35:31 -==> Parameters: 2019(String), 1(String), 2(String)
2019-05-15 10:35:31 -<==      Total: 1
2019-05-15 10:35:31 -==>  Preparing: select ifnull(SUM(water_cost),0) from water WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 10:35:31 -==> Parameters: 2019(String), 1(String), 2(String)
2019-05-15 10:35:31 -<==      Total: 1
2019-05-15 10:35:31 -==>  Preparing: select COUNT(*) from water_log WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 10:35:31 -==> Parameters: 2019(String), 1(String), 2(String)
2019-05-15 10:35:31 -<==      Total: 1
2019-05-15 10:35:31 -==>  Preparing: select ifnull(SUM(water_money),0) from water_log WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 10:35:31 -==> Parameters: 2019(String), 1(String), 2(String)
2019-05-15 10:35:31 -<==      Total: 1
2019-05-15 10:35:31 -==>  Preparing: select COUNT(*) from water WHERE water_sum>0 and DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 10:35:31 -==> Parameters: 2019(String), 1(String), 2(String)
2019-05-15 10:35:31 -<==      Total: 1
2019-05-15 10:35:31 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 10:35:31 -==> Parameters: 2019(String), 1(String), 2(String)
2019-05-15 10:35:31 -<==      Total: 1
2019-05-15 10:35:31 -==>  Preparing: select COUNT(*),ifnull(SUM(water_sum),0) from water WHERE water_sum <0 and DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 10:35:31 -==> Parameters: 2019(String), 1(String), 2(String)
2019-05-15 10:35:31 -<==      Total: 1
2019-05-15 10:35:31 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE water_sum <0 and DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 10:35:31 -==> Parameters: 2019(String), 1(String), 2(String)
2019-05-15 10:35:31 -<==      Total: 1
2019-05-15 10:35:31 -==>  Preparing: select COUNT(*) from water WHERE water_sum>0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 10:35:31 -==> Parameters: 2018-12(String), 2(String), 2(String)
2019-05-15 10:35:31 -<==      Total: 1
2019-05-15 10:35:31 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE water_sum>0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 10:35:31 -==> Parameters: 2018-12(String), 2(String), 2(String)
2019-05-15 10:35:31 -<==      Total: 1
2019-05-15 10:35:31 -==>  Preparing: select COUNT(*) from water WHERE water_sum <0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 10:35:31 -==> Parameters: 2018-12(String), 2(String), 2(String)
2019-05-15 10:35:31 -<==      Total: 1
2019-05-15 10:35:31 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE water_sum <0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 10:35:31 -==> Parameters: 2018-12(String), 2(String), 2(String)
2019-05-15 10:35:31 -<==      Total: 1
2019-05-15 10:35:31 -==>  Preparing: select COUNT(*),ifnull(SUM(water_cost),0) from water WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 10:35:31 -==> Parameters: 2019(String), 2(String), 2(String)
2019-05-15 10:35:31 -<==      Total: 1
2019-05-15 10:35:31 -==>  Preparing: select ifnull(SUM(water_cost),0) from water WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 10:35:31 -==> Parameters: 2019(String), 2(String), 2(String)
2019-05-15 10:35:31 -<==      Total: 1
2019-05-15 10:35:31 -==>  Preparing: select COUNT(*) from water_log WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 10:35:31 -==> Parameters: 2019(String), 2(String), 2(String)
2019-05-15 10:35:31 -<==      Total: 1
2019-05-15 10:35:31 -==>  Preparing: select ifnull(SUM(water_money),0) from water_log WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 10:35:31 -==> Parameters: 2019(String), 2(String), 2(String)
2019-05-15 10:35:31 -<==      Total: 1
2019-05-15 10:35:31 -==>  Preparing: select COUNT(*) from water WHERE water_sum>0 and DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 10:35:31 -==> Parameters: 2019(String), 2(String), 2(String)
2019-05-15 10:35:31 -<==      Total: 1
2019-05-15 10:35:31 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 10:35:31 -==> Parameters: 2019(String), 2(String), 2(String)
2019-05-15 10:35:31 -<==      Total: 1
2019-05-15 10:35:31 -==>  Preparing: select COUNT(*),ifnull(SUM(water_sum),0) from water WHERE water_sum <0 and DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 10:35:31 -==> Parameters: 2019(String), 2(String), 2(String)
2019-05-15 10:35:31 -<==      Total: 1
2019-05-15 10:35:31 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE water_sum <0 and DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 10:35:31 -==> Parameters: 2019(String), 2(String), 2(String)
2019-05-15 10:35:31 -<==      Total: 1
2019-05-15 10:35:31 -==>  Preparing: select COUNT(*) from water WHERE water_sum>0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 10:35:31 -==> Parameters: 2018-12(String), 4(String), 2(String)
2019-05-15 10:35:31 -<==      Total: 1
2019-05-15 10:35:31 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE water_sum>0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 10:35:31 -==> Parameters: 2018-12(String), 4(String), 2(String)
2019-05-15 10:35:31 -<==      Total: 1
2019-05-15 10:35:31 -==>  Preparing: select COUNT(*) from water WHERE water_sum <0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 10:35:31 -==> Parameters: 2018-12(String), 4(String), 2(String)
2019-05-15 10:35:31 -<==      Total: 1
2019-05-15 10:35:31 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE water_sum <0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 10:35:31 -==> Parameters: 2018-12(String), 4(String), 2(String)
2019-05-15 10:35:31 -<==      Total: 1
2019-05-15 10:35:31 -==>  Preparing: select COUNT(*),ifnull(SUM(water_cost),0) from water WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 10:35:31 -==> Parameters: 2019(String), 4(String), 2(String)
2019-05-15 10:35:31 -<==      Total: 1
2019-05-15 10:35:31 -==>  Preparing: select ifnull(SUM(water_cost),0) from water WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 10:35:31 -==> Parameters: 2019(String), 4(String), 2(String)
2019-05-15 10:35:31 -<==      Total: 1
2019-05-15 10:35:31 -==>  Preparing: select COUNT(*) from water_log WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 10:35:31 -==> Parameters: 2019(String), 4(String), 2(String)
2019-05-15 10:35:31 -<==      Total: 1
2019-05-15 10:35:31 -==>  Preparing: select ifnull(SUM(water_money),0) from water_log WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 10:35:31 -==> Parameters: 2019(String), 4(String), 2(String)
2019-05-15 10:35:31 -<==      Total: 1
2019-05-15 10:35:31 -==>  Preparing: select COUNT(*) from water WHERE water_sum>0 and DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 10:35:31 -==> Parameters: 2019(String), 4(String), 2(String)
2019-05-15 10:35:31 -<==      Total: 1
2019-05-15 10:35:31 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 10:35:31 -==> Parameters: 2019(String), 4(String), 2(String)
2019-05-15 10:35:31 -<==      Total: 1
2019-05-15 10:35:31 -==>  Preparing: select COUNT(*),ifnull(SUM(water_sum),0) from water WHERE water_sum <0 and DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 10:35:31 -==> Parameters: 2019(String), 4(String), 2(String)
2019-05-15 10:35:31 -<==      Total: 1
2019-05-15 10:35:31 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE water_sum <0 and DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 10:35:31 -==> Parameters: 2019(String), 4(String), 2(String)
2019-05-15 10:35:31 -<==      Total: 1
2019-05-15 10:35:31 -==>  Preparing: select COUNT(*) from water WHERE water_sum>0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 10:35:31 -==> Parameters: 2018-12(String), 4(String), 2(String)
2019-05-15 10:35:31 -<==      Total: 1
2019-05-15 10:35:31 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE water_sum>0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 10:35:31 -==> Parameters: 2018-12(String), 4(String), 2(String)
2019-05-15 10:35:31 -<==      Total: 1
2019-05-15 10:35:31 -==>  Preparing: select COUNT(*) from water WHERE water_sum <0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 10:35:31 -==> Parameters: 2018-12(String), 4(String), 2(String)
2019-05-15 10:35:31 -<==      Total: 1
2019-05-15 10:35:31 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE water_sum <0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 10:35:31 -==> Parameters: 2018-12(String), 4(String), 2(String)
2019-05-15 10:35:31 -<==      Total: 1
2019-05-15 10:35:31 -==>  Preparing: select COUNT(*),ifnull(SUM(water_cost),0) from water WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 10:35:31 -==> Parameters: 2019(String), 4(String), 2(String)
2019-05-15 10:35:31 -<==      Total: 1
2019-05-15 10:35:31 -==>  Preparing: select ifnull(SUM(water_cost),0) from water WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 10:35:31 -==> Parameters: 2019(String), 4(String), 2(String)
2019-05-15 10:35:31 -<==      Total: 1
2019-05-15 10:35:31 -==>  Preparing: select COUNT(*) from water_log WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 10:35:31 -==> Parameters: 2019(String), 4(String), 2(String)
2019-05-15 10:35:31 -<==      Total: 1
2019-05-15 10:35:31 -==>  Preparing: select ifnull(SUM(water_money),0) from water_log WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 10:35:31 -==> Parameters: 2019(String), 4(String), 2(String)
2019-05-15 10:35:31 -<==      Total: 1
2019-05-15 10:35:31 -==>  Preparing: select COUNT(*) from water WHERE water_sum>0 and DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 10:35:31 -==> Parameters: 2019(String), 4(String), 2(String)
2019-05-15 10:35:31 -<==      Total: 1
2019-05-15 10:35:31 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 10:35:31 -==> Parameters: 2019(String), 4(String), 2(String)
2019-05-15 10:35:31 -<==      Total: 1
2019-05-15 10:35:31 -==>  Preparing: select COUNT(*),ifnull(SUM(water_sum),0) from water WHERE water_sum <0 and DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 10:35:31 -==> Parameters: 2019(String), 4(String), 2(String)
2019-05-15 10:35:31 -<==      Total: 1
2019-05-15 10:35:31 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE water_sum <0 and DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 10:35:31 -==> Parameters: 2019(String), 4(String), 2(String)
2019-05-15 10:35:31 -<==      Total: 1
2019-05-15 10:35:31 -耗时 : 114
2019-05-15 10:35:31 -返回值 : {S2TotalH=0, NewPreDepositY=4, STotalY=0, NewArrearstTotalH=2, NewPreDepositTotalY=5, S2NewTotalY=0, type=2, TotalH=0, OldAarrearsY=0, SNewPreDepositY=1, S3NetnreceiptsH=1, NewPreDepositH=3, S2TotalY=0, TtotalH=0, SNewAarrearsY=0, S2NewTotalH=0, NetnreceiptsTotalH=4, SReceivableY=10, S2OldAarrears=0, TotalY=0, NetnreceiptsH=2, SNewPreDepositH=1, SNewTotalH=1, OldAarrearsH=0, S2OldPreDepositH=0, S3NewAarrearsY=0, TtotalY=0, S2NewAarrearsY=0, TTtotalY=-23, S3OldPreDepositY=0, ArrearsTotalY=0, SWaterPrice=10, SReceivableH=1, SNewAarrearsH=0, MWaterPrice=7, S2OldPreDepositY=0, S3OldAarrears=0, S3NewAarrearsH=0, S2NewAarrearsH=0, TTtotalH=6, S3OldPreDepositH=0, ArrearsTotalH=0, SOldPreDepositH=0, PreDepositTotalY=0, SNetnreceiptsH=2, SOldAarrearsH=0, S3NewPreDepositY=0, S3NewTotalH=0, SOldPreDepositY=0, S2NetnreceiptsH=1, ReceivableY=30, S2NewPreDepositH=0, S3NewPreDepositH=0, S3NewTotalY=0, SNetnreceiptsY=21, PreDepositTotalH=0, S2OldAarrearsH=0, S3OldAarrearsH=0, ReceivableH=5, S2NewPreDepositY=0, NewAarrearsY=-27, PriceTotal=17, NewPreDepositTotalH=4, S2ReceivableH=0, OldPreDepositY=0, NetnreceiptsTotalY=172, NewTotalY=-23, S3ReceivableY=0, ReceivableTotalH=6, S3TotalH=0, NetnreceiptsY=151, SNewTotalY=0, NewAarrearsH=2, NewArrearstTotalY=-27, OldPreDepositH=0, STotalH=0, S3ReceivableH=0, ReceivableTotalY=40, NewTotalH=5, SOldAarrears=0, S2ReceivableY=0, S2NetnreceiptsY=60, S3TotalY=0, S3NetnreceiptsY=60}
2019-05-15 10:35:32 -请求地址 : http://localhost:8081/system/sysDept/treeView
2019-05-15 10:35:32 -HTTP METHOD : GET
2019-05-15 10:35:32 -CLASS_METHOD : com.bootdo.system.controller.DeptController.treeView
2019-05-15 10:35:32 -参数 : []
2019-05-15 10:35:32 -耗时 : 1
2019-05-15 10:35:32 -返回值 : system/dept/deptTree
2019-05-15 10:35:33 -请求地址 : http://localhost:8081/system/sysDept/tree
2019-05-15 10:35:33 -HTTP METHOD : GET
2019-05-15 10:35:33 -CLASS_METHOD : com.bootdo.system.controller.DeptController.tree
2019-05-15 10:35:33 -参数 : []
2019-05-15 10:35:33 -==>  Preparing: select `dept_id`,`parent_id`,`name`,`order_num`,`del_flag` from sys_dept order by dept_id desc 
2019-05-15 10:35:33 -==> Parameters: 
2019-05-15 10:35:33 -<==      Total: 3
2019-05-15 10:35:33 -耗时 : 4
2019-05-15 10:35:33 -返回值 : {"checked":false,"children":[{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"3","parentId":"1","state":{"opened":true},"text":"牙星"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"2","parentId":"1","state":{"opened":true},"text":"五九"}],"hasChildren":true,"hasParent":false,"id":"1","parentId":"0","state":{"opened":true},"text":"总公司"}
2019-05-15 10:35:35 -请求地址 : http://localhost:8081/charts/tableWaterYY/tableWaterYY
2019-05-15 10:35:35 -HTTP METHOD : POST
2019-05-15 10:35:35 -CLASS_METHOD : com.bootdo.charts.controller.tableWaterYYController.tableWaterYY
2019-05-15 10:35:35 -参数 : [com.bootdo.water.vo.WaterVo@2c2f0253, com.bootdo.moneyLog.vo.WaterLogVo@43e4f091]
2019-05-15 10:35:35 -==>  Preparing: select COUNT(*) from water WHERE water_sum>0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 10:35:35 -==> Parameters: 2018-12(String), 1(String), 3(String)
2019-05-15 10:35:35 -<==      Total: 1
2019-05-15 10:35:35 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE water_sum>0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 10:35:35 -==> Parameters: 2018-12(String), 1(String), 3(String)
2019-05-15 10:35:35 -<==      Total: 1
2019-05-15 10:35:35 -==>  Preparing: select COUNT(*) from water WHERE water_sum <0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 10:35:35 -==> Parameters: 2018-12(String), 1(String), 3(String)
2019-05-15 10:35:35 -<==      Total: 1
2019-05-15 10:35:35 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE water_sum <0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 10:35:35 -==> Parameters: 2018-12(String), 1(String), 3(String)
2019-05-15 10:35:35 -<==      Total: 1
2019-05-15 10:35:35 -==>  Preparing: select m_water,s1_water,s2_water,s3_water,water_org from water_price 
2019-05-15 10:35:35 -==> Parameters: 
2019-05-15 10:35:35 -<==      Total: 2
2019-05-15 10:35:35 -==>  Preparing: select COUNT(*),ifnull(SUM(water_cost),0) from water WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 10:35:35 -==> Parameters: 2019(String), 1(String), 3(String)
2019-05-15 10:35:35 -<==      Total: 1
2019-05-15 10:35:35 -==>  Preparing: select ifnull(SUM(water_cost),0) from water WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 10:35:35 -==> Parameters: 2019(String), 1(String), 3(String)
2019-05-15 10:35:35 -<==      Total: 1
2019-05-15 10:35:35 -==>  Preparing: select COUNT(*) from water_log WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 10:35:35 -==> Parameters: 2019(String), 1(String), 3(String)
2019-05-15 10:35:35 -<==      Total: 1
2019-05-15 10:35:35 -==>  Preparing: select ifnull(SUM(water_money),0) from water_log WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 10:35:35 -==> Parameters: 2019(String), 1(String), 3(String)
2019-05-15 10:35:35 -<==      Total: 1
2019-05-15 10:35:35 -==>  Preparing: select COUNT(*) from water WHERE water_sum>0 and DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 10:35:35 -==> Parameters: 2019(String), 1(String), 3(String)
2019-05-15 10:35:35 -<==      Total: 1
2019-05-15 10:35:35 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 10:35:35 -==> Parameters: 2019(String), 1(String), 3(String)
2019-05-15 10:35:35 -<==      Total: 1
2019-05-15 10:35:35 -==>  Preparing: select COUNT(*),ifnull(SUM(water_sum),0) from water WHERE water_sum <0 and DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 10:35:35 -==> Parameters: 2019(String), 1(String), 3(String)
2019-05-15 10:35:35 -<==      Total: 1
2019-05-15 10:35:35 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE water_sum <0 and DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 10:35:35 -==> Parameters: 2019(String), 1(String), 3(String)
2019-05-15 10:35:35 -<==      Total: 1
2019-05-15 10:35:35 -==>  Preparing: select COUNT(*) from water WHERE water_sum>0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 10:35:35 -==> Parameters: 2018-12(String), 2(String), 3(String)
2019-05-15 10:35:35 -<==      Total: 1
2019-05-15 10:35:35 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE water_sum>0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 10:35:35 -==> Parameters: 2018-12(String), 2(String), 3(String)
2019-05-15 10:35:35 -<==      Total: 1
2019-05-15 10:35:35 -==>  Preparing: select COUNT(*) from water WHERE water_sum <0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 10:35:35 -==> Parameters: 2018-12(String), 2(String), 3(String)
2019-05-15 10:35:35 -<==      Total: 1
2019-05-15 10:35:35 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE water_sum <0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 10:35:35 -==> Parameters: 2018-12(String), 2(String), 3(String)
2019-05-15 10:35:35 -<==      Total: 1
2019-05-15 10:35:35 -==>  Preparing: select COUNT(*),ifnull(SUM(water_cost),0) from water WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 10:35:35 -==> Parameters: 2019(String), 2(String), 3(String)
2019-05-15 10:35:35 -<==      Total: 1
2019-05-15 10:35:35 -==>  Preparing: select ifnull(SUM(water_cost),0) from water WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 10:35:35 -==> Parameters: 2019(String), 2(String), 3(String)
2019-05-15 10:35:35 -<==      Total: 1
2019-05-15 10:35:35 -==>  Preparing: select COUNT(*) from water_log WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 10:35:35 -==> Parameters: 2019(String), 2(String), 3(String)
2019-05-15 10:35:35 -<==      Total: 1
2019-05-15 10:35:35 -==>  Preparing: select ifnull(SUM(water_money),0) from water_log WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 10:35:35 -==> Parameters: 2019(String), 2(String), 3(String)
2019-05-15 10:35:35 -<==      Total: 1
2019-05-15 10:35:35 -==>  Preparing: select COUNT(*) from water WHERE water_sum>0 and DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 10:35:35 -==> Parameters: 2019(String), 2(String), 3(String)
2019-05-15 10:35:35 -<==      Total: 1
2019-05-15 10:35:35 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 10:35:35 -==> Parameters: 2019(String), 2(String), 3(String)
2019-05-15 10:35:35 -<==      Total: 1
2019-05-15 10:35:35 -==>  Preparing: select COUNT(*),ifnull(SUM(water_sum),0) from water WHERE water_sum <0 and DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 10:35:35 -==> Parameters: 2019(String), 2(String), 3(String)
2019-05-15 10:35:35 -<==      Total: 1
2019-05-15 10:35:35 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE water_sum <0 and DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 10:35:35 -==> Parameters: 2019(String), 2(String), 3(String)
2019-05-15 10:35:35 -<==      Total: 1
2019-05-15 10:35:35 -==>  Preparing: select COUNT(*) from water WHERE water_sum>0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 10:35:35 -==> Parameters: 2018-12(String), 4(String), 3(String)
2019-05-15 10:35:35 -<==      Total: 1
2019-05-15 10:35:35 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE water_sum>0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 10:35:35 -==> Parameters: 2018-12(String), 4(String), 3(String)
2019-05-15 10:35:35 -<==      Total: 1
2019-05-15 10:35:35 -==>  Preparing: select COUNT(*) from water WHERE water_sum <0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 10:35:35 -==> Parameters: 2018-12(String), 4(String), 3(String)
2019-05-15 10:35:35 -<==      Total: 1
2019-05-15 10:35:35 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE water_sum <0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 10:35:35 -==> Parameters: 2018-12(String), 4(String), 3(String)
2019-05-15 10:35:35 -<==      Total: 1
2019-05-15 10:35:35 -==>  Preparing: select COUNT(*),ifnull(SUM(water_cost),0) from water WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 10:35:35 -==> Parameters: 2019(String), 4(String), 3(String)
2019-05-15 10:35:35 -<==      Total: 1
2019-05-15 10:35:35 -==>  Preparing: select ifnull(SUM(water_cost),0) from water WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 10:35:35 -==> Parameters: 2019(String), 4(String), 3(String)
2019-05-15 10:35:35 -<==      Total: 1
2019-05-15 10:35:35 -==>  Preparing: select COUNT(*) from water_log WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 10:35:35 -==> Parameters: 2019(String), 4(String), 3(String)
2019-05-15 10:35:35 -<==      Total: 1
2019-05-15 10:35:35 -==>  Preparing: select ifnull(SUM(water_money),0) from water_log WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 10:35:35 -==> Parameters: 2019(String), 4(String), 3(String)
2019-05-15 10:35:35 -<==      Total: 1
2019-05-15 10:35:35 -==>  Preparing: select COUNT(*) from water WHERE water_sum>0 and DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 10:35:35 -==> Parameters: 2019(String), 4(String), 3(String)
2019-05-15 10:35:35 -<==      Total: 1
2019-05-15 10:35:35 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 10:35:35 -==> Parameters: 2019(String), 4(String), 3(String)
2019-05-15 10:35:35 -<==      Total: 1
2019-05-15 10:35:35 -==>  Preparing: select COUNT(*),ifnull(SUM(water_sum),0) from water WHERE water_sum <0 and DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 10:35:35 -==> Parameters: 2019(String), 4(String), 3(String)
2019-05-15 10:35:35 -<==      Total: 1
2019-05-15 10:35:35 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE water_sum <0 and DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 10:35:35 -==> Parameters: 2019(String), 4(String), 3(String)
2019-05-15 10:35:35 -<==      Total: 1
2019-05-15 10:35:35 -==>  Preparing: select COUNT(*) from water WHERE water_sum>0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 10:35:35 -==> Parameters: 2018-12(String), 4(String), 3(String)
2019-05-15 10:35:35 -<==      Total: 1
2019-05-15 10:35:35 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE water_sum>0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 10:35:35 -==> Parameters: 2018-12(String), 4(String), 3(String)
2019-05-15 10:35:35 -<==      Total: 1
2019-05-15 10:35:35 -==>  Preparing: select COUNT(*) from water WHERE water_sum <0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 10:35:35 -==> Parameters: 2018-12(String), 4(String), 3(String)
2019-05-15 10:35:35 -<==      Total: 1
2019-05-15 10:35:35 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE water_sum <0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 10:35:35 -==> Parameters: 2018-12(String), 4(String), 3(String)
2019-05-15 10:35:35 -<==      Total: 1
2019-05-15 10:35:35 -==>  Preparing: select COUNT(*),ifnull(SUM(water_cost),0) from water WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 10:35:35 -==> Parameters: 2019(String), 4(String), 3(String)
2019-05-15 10:35:35 -<==      Total: 1
2019-05-15 10:35:35 -==>  Preparing: select ifnull(SUM(water_cost),0) from water WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 10:35:35 -==> Parameters: 2019(String), 4(String), 3(String)
2019-05-15 10:35:35 -<==      Total: 1
2019-05-15 10:35:35 -==>  Preparing: select COUNT(*) from water_log WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 10:35:35 -==> Parameters: 2019(String), 4(String), 3(String)
2019-05-15 10:35:35 -<==      Total: 1
2019-05-15 10:35:35 -==>  Preparing: select ifnull(SUM(water_money),0) from water_log WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 10:35:35 -==> Parameters: 2019(String), 4(String), 3(String)
2019-05-15 10:35:35 -<==      Total: 1
2019-05-15 10:35:35 -==>  Preparing: select COUNT(*) from water WHERE water_sum>0 and DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 10:35:35 -==> Parameters: 2019(String), 4(String), 3(String)
2019-05-15 10:35:35 -<==      Total: 1
2019-05-15 10:35:35 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 10:35:35 -==> Parameters: 2019(String), 4(String), 3(String)
2019-05-15 10:35:35 -<==      Total: 1
2019-05-15 10:35:35 -==>  Preparing: select COUNT(*),ifnull(SUM(water_sum),0) from water WHERE water_sum <0 and DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 10:35:35 -==> Parameters: 2019(String), 4(String), 3(String)
2019-05-15 10:35:35 -<==      Total: 1
2019-05-15 10:35:35 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE water_sum <0 and DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 10:35:35 -==> Parameters: 2019(String), 4(String), 3(String)
2019-05-15 10:35:35 -<==      Total: 1
2019-05-15 10:35:35 -耗时 : 94
2019-05-15 10:35:35 -返回值 : {S2TotalH=0, NewPreDepositY=0, STotalY=0, NewArrearstTotalH=0, NewPreDepositTotalY=0, S2NewTotalY=0, type=3, TotalH=0, OldAarrearsY=0, SNewPreDepositY=0, S3NetnreceiptsH=0, NewPreDepositH=0, S2TotalY=0, TtotalH=0, SNewAarrearsY=0, S2NewTotalH=0, NetnreceiptsTotalH=0, SReceivableY=0, S2OldAarrears=0, TotalY=0, NetnreceiptsH=0, SNewPreDepositH=0, SNewTotalH=0, OldAarrearsH=0, S2OldPreDepositH=0, S3NewAarrearsY=0, TtotalY=0, S2NewAarrearsY=0, TTtotalY=0, S3OldPreDepositY=0, ArrearsTotalY=0, SWaterPrice=10, SReceivableH=0, SNewAarrearsH=0, SWaterPrice2=20, SWaterPrice3=30, MWaterPrice=5, S2OldPreDepositY=0, S3OldAarrears=0, S3NewAarrearsH=0, S2NewAarrearsH=0, TTtotalH=0, S3OldPreDepositH=0, ArrearsTotalH=0, SOldPreDepositH=0, PreDepositTotalY=0, SNetnreceiptsH=0, SOldAarrearsH=0, S3NewPreDepositY=0, S3NewTotalH=0, SOldPreDepositY=0, S2NetnreceiptsH=0, ReceivableY=0, S2NewPreDepositH=0, S3NewPreDepositH=0, S3NewTotalY=0, SNetnreceiptsY=0, PreDepositTotalH=0, S2OldAarrearsH=0, S3OldAarrearsH=0, ReceivableH=0, S2NewPreDepositY=0, NewAarrearsY=0, PriceTotal=65, NewPreDepositTotalH=0, S2ReceivableH=0, OldPreDepositY=0, NetnreceiptsTotalY=0, NewTotalY=0, S3ReceivableY=0, ReceivableTotalH=0, S3TotalH=0, NetnreceiptsY=0, SNewTotalY=0, NewAarrearsH=0, NewArrearstTotalY=0, OldPreDepositH=0, STotalH=0, S3ReceivableH=0, ReceivableTotalY=0, NewTotalH=0, SOldAarrears=0, S2ReceivableY=0, S2NetnreceiptsY=0, S3TotalY=0, S3NetnreceiptsY=0}
2019-05-15 10:56:34 -WebSocketSession[1 current WS(1)-HttpStream(0)-HttpPoll(0), 2 total, 0 closed abnormally (0 connect failure, 0 send limit, 0 transport error)], stompSubProtocol[processed CONNECT(2)-CONNECTED(2)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 21], outboundChannelpool size = 0, active threads = 0, queued tasks = 0, completed tasks = 3], sockJsScheduler[pool size = 4, active threads = 1, queued tasks = 2, completed tasks = 437]
2019-05-15 11:07:37 -请求地址 : http://localhost:8081/login;JSESSIONID=9d367b07-dc3e-4389-a807-8b28c9b7712e
2019-05-15 11:07:37 -HTTP METHOD : GET
2019-05-15 11:07:37 -CLASS_METHOD : com.bootdo.system.controller.LoginController.login
2019-05-15 11:07:37 -参数 : [{}]
2019-05-15 11:07:37 -耗时 : 0
2019-05-15 11:07:37 -返回值 : login
2019-05-15 11:07:37 -请求地址 : http://localhost:8081/getVerify
2019-05-15 11:07:37 -HTTP METHOD : GET
2019-05-15 11:07:37 -CLASS_METHOD : com.bootdo.system.controller.LoginController.getVerify
2019-05-15 11:07:37 -参数 : [org.apache.shiro.web.servlet.ShiroHttpServletRequest@3408006c, org.apache.shiro.web.servlet.ShiroHttpServletResponse@3cf411db]
2019-05-15 11:07:37 -2556
2019-05-15 11:07:37 -耗时 : 19
2019-05-15 11:07:37 -返回值 : null
2019-05-15 11:07:43 -请求地址 : http://localhost:8081/login
2019-05-15 11:07:43 -HTTP METHOD : POST
2019-05-15 11:07:43 -CLASS_METHOD : com.bootdo.system.controller.LoginController.ajaxLogin
2019-05-15 11:07:43 -参数 : [admin, 111111, 2556, org.apache.shiro.web.servlet.ShiroHttpServletRequest@3cde2fb8]
2019-05-15 11:07:43 -==>  Preparing: select `user_id`,`username`,`name`,`password`,`dept_id`,`email`,`mobile`,`status`,`user_id_create`,`gmt_create`,`gmt_modified`,`sex`,`birth`,`pic_id`,`live_address`,`hobby`,`province`,`city`,`district` from sys_user WHERE username = ? order by user_id desc 
2019-05-15 11:07:43 -==> Parameters: admin(String)
2019-05-15 11:07:43 -<==      Total: 1
2019-05-15 11:07:43 -耗时 : 95
2019-05-15 11:07:43 -返回值 : {msg=操作成功, code=0}
2019-05-15 11:07:43 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-05-15 11:07:43 -==> Parameters: 1(Long), admin(String), 登录(String), 95(Integer), com.bootdo.system.controller.LoginController.ajaxLogin()(String), null, 127.0.0.1(String), 2019-05-15 11:07:43.89(Timestamp)
2019-05-15 11:07:43 -请求地址 : http://localhost:8081/index
2019-05-15 11:07:43 -HTTP METHOD : GET
2019-05-15 11:07:43 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2019-05-15 11:07:43 -参数 : [{}]
2019-05-15 11:07:43 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2019-05-15 11:07:43 -==> Parameters: 1(Long)
2019-05-15 11:07:43 -<==      Total: 49
2019-05-15 11:07:43 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2019-05-15 11:07:43 -==> Parameters: 138(Long)
2019-05-15 11:07:43 -<==      Total: 1
2019-05-15 11:07:43 -耗时 : 33
2019-05-15 11:07:43 -返回值 : index_v1
2019-05-15 11:07:43 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-05-15 11:07:43 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 34(Integer), com.bootdo.system.controller.LoginController.index()(String), {"menus":[{"attributes":{"icon":"fa fa-money","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-money","url":"/moneyList/moneyList"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"102","parentId":"106","text":"现金缴费"},{"attributes":{"icon":"fa fa-book","url":"/moneyLog/elecLog"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"107","parentId":"106","text":"缴费记录"}],"hasChildren":true,"hasParent":false,"id":"106","parentId":"0","text":"收费管理"},{"attributes":{"icon":"fa fa-lightbulb-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/elec/elec"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"121","parentId":"103","text":"电费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"elec/elecInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"122","parentId":"103","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"elec/elecUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"123","parentId":"103","text":"电表上传"},{"attributes":{"icon":"fa fa-cc","url":"/elec/elecPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"124","parentId":"103","text":"电价管理"}],"hasChildren":true,"hasParent":false,"id":"103","parentId":"0","text":"电费管理"},{"attributes":{"icon":"fa fa-tint","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/water/water"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"117","parentId":"105","text":"水费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"water/waterInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"118","parentId":"105","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"water/waterUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"119","parentId":"105","text":"水费生成"},{"attributes":{"icon":"fa fa-cc","url":"/water/waterPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"120","parentId":"105","text":"水价管理"}],"hasChildren":true,"hasParent":false,"id":"105","parentId":"0","text":"水费管理"},{"attributes":{"icon":"fa fa-fire","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/heat/heat"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"113","parentId":"104","text":"暖费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"heat/heatInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"114","parentId":"104","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"heat/heatUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"115","parentId":"104","text":"暖费生成"},{"attributes":{"icon":"","url":"/heat/heatPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"116","parentId":"104","text":"暖价管理"}],"hasChildren":true,"hasParent":false,"id":"104","parentId":"0","text":"暖费管理"},{"attributes":{"icon":"fa fa-vcard-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-bomb","url":"/print/print"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"149","parentId":"108","text":"票据记录"}],"hasChildren":true,"hasParent":false,"id":"108","parentId":"0","text":"票据管理"},{"attributes":{"icon":"fa fa-bar-chart","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-area-chart","url":"/chart/graph_echarts.html"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","text":"百度chart"},{"attributes":{"icon":"fa fa-sun-o","url":"charts/countDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"109","parentId":"97","text":"日统计报表"},{"attributes":{"icon":"fa fa-calendar","url":"charts/tableDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"161","parentId":"97","text":"日统计表格"},{"attributes":{"icon":"fa fa-registered","url":"charts/countMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"110","parentId":"97","text":"月统计报表"},{"attributes":{"icon":"fa fa-building-o","url":"charts/tableElecMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"162","parentId":"97","text":"月统计表格"},{"attributes":{"icon":"fa fa-support","url":"charts/countYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"111","parentId":"97","text":"年统计报表"},{"attributes":{"icon":"fa fa-book","url":"charts/tableElecYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"163","parentId":"97","text":"年统计表格"},{"attributes":{"icon":"fa fa-money","url":"charts/countOwe"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"155","parentId":"97","text":"欠费报表图"},{"attributes":{"icon":"fa fa-tachometer","url":"charts/countRun"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"112"(String), 127.0.0.1(String), 2019-05-15 11:07:43.945(Timestamp)
2019-05-15 11:07:44 -<==    Updates: 1
2019-05-15 11:07:44 -请求地址 : http://localhost:8081/main
2019-05-15 11:07:44 -HTTP METHOD : GET
2019-05-15 11:07:44 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-05-15 11:07:44 -参数 : []
2019-05-15 11:07:44 -耗时 : 1
2019-05-15 11:07:44 -返回值 : main
2019-05-15 11:07:44 -<==    Updates: 1
2019-05-15 11:07:44 -请求地址 : http://localhost:8081/oa/notify/message
2019-05-15 11:07:44 -HTTP METHOD : GET
2019-05-15 11:07:44 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2019-05-15 11:07:44 -参数 : []
2019-05-15 11:07:44 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2019-05-15 11:07:44 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2019-05-15 11:07:44 -<==      Total: 0
2019-05-15 11:07:44 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2019-05-15 11:07:44 -==> Parameters: 1(Long), 0(String)
2019-05-15 11:07:44 -<==      Total: 1
2019-05-15 11:07:44 -耗时 : 8
2019-05-15 11:07:44 -返回值 : com.bootdo.common.utils.PageUtils@4ad572a4
2019-05-15 11:07:44 -请求地址 : http://localhost:8081/main
2019-05-15 11:07:44 -HTTP METHOD : GET
2019-05-15 11:07:44 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-05-15 11:07:44 -参数 : []
2019-05-15 11:07:44 -耗时 : 0
2019-05-15 11:07:44 -返回值 : main
2019-05-15 11:07:48 -==>  Preparing: select distinct m.perms from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id = ur.role_id where ur.user_id = ? 
2019-05-15 11:07:48 -==> Parameters: 1(Long)
2019-05-15 11:07:48 -<==      Total: 93
2019-05-15 11:07:48 -请求地址 : http://localhost:8081/charts/countYY
2019-05-15 11:07:48 -HTTP METHOD : GET
2019-05-15 11:07:48 -CLASS_METHOD : com.bootdo.charts.controller.countYYController.countYY
2019-05-15 11:07:48 -参数 : []
2019-05-15 11:07:48 -耗时 : 0
2019-05-15 11:07:48 -返回值 : charts/countYY
2019-05-15 11:07:48 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-05-15 11:07:48 -HTTP METHOD : GET
2019-05-15 11:07:48 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-05-15 11:07:48 -参数 : [userType]
2019-05-15 11:07:48 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-05-15 11:07:48 -==> Parameters: userType(String)
2019-05-15 11:07:48 -<==      Total: 4
2019-05-15 11:07:48 -耗时 : 5
2019-05-15 11:07:48 -返回值 : [DictDO{id=145, name='银行转账', value='D', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=144, name='微信支付', value='C', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-05-15 11:07:49 -请求地址 : http://localhost:8081/charts/tableElecYY
2019-05-15 11:07:49 -HTTP METHOD : GET
2019-05-15 11:07:49 -CLASS_METHOD : com.bootdo.charts.controller.tableElecYYController.tableElecYY
2019-05-15 11:07:49 -参数 : []
2019-05-15 11:07:49 -耗时 : 0
2019-05-15 11:07:49 -返回值 : charts/tableElecYY
2019-05-15 11:07:50 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-05-15 11:07:50 -HTTP METHOD : GET
2019-05-15 11:07:50 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-05-15 11:07:50 -参数 : [userType]
2019-05-15 11:07:50 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-05-15 11:07:50 -==> Parameters: userType(String)
2019-05-15 11:07:50 -<==      Total: 4
2019-05-15 11:07:50 -耗时 : 4
2019-05-15 11:07:50 -返回值 : [DictDO{id=145, name='银行转账', value='D', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=144, name='微信支付', value='C', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-05-15 11:07:51 -请求地址 : http://localhost:8081/charts/tableWaterYY
2019-05-15 11:07:51 -HTTP METHOD : GET
2019-05-15 11:07:51 -CLASS_METHOD : com.bootdo.charts.controller.tableWaterYYController.tableWaterYY
2019-05-15 11:07:51 -参数 : []
2019-05-15 11:07:51 -耗时 : 0
2019-05-15 11:07:51 -返回值 : charts/tableWaterYY
2019-05-15 11:07:51 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-05-15 11:07:51 -HTTP METHOD : GET
2019-05-15 11:07:51 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-05-15 11:07:51 -参数 : [userType]
2019-05-15 11:07:51 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-05-15 11:07:51 -==> Parameters: userType(String)
2019-05-15 11:07:51 -<==      Total: 4
2019-05-15 11:07:51 -耗时 : 5
2019-05-15 11:07:51 -返回值 : [DictDO{id=145, name='银行转账', value='D', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=144, name='微信支付', value='C', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-05-15 11:07:54 -请求地址 : http://localhost:8081/system/sysDept/treeView
2019-05-15 11:07:54 -HTTP METHOD : GET
2019-05-15 11:07:54 -CLASS_METHOD : com.bootdo.system.controller.DeptController.treeView
2019-05-15 11:07:54 -参数 : []
2019-05-15 11:07:54 -耗时 : 0
2019-05-15 11:07:54 -返回值 : system/dept/deptTree
2019-05-15 11:07:54 -请求地址 : http://localhost:8081/system/sysDept/tree
2019-05-15 11:07:54 -HTTP METHOD : GET
2019-05-15 11:07:54 -CLASS_METHOD : com.bootdo.system.controller.DeptController.tree
2019-05-15 11:07:54 -参数 : []
2019-05-15 11:07:54 -==>  Preparing: select `dept_id`,`parent_id`,`name`,`order_num`,`del_flag` from sys_dept order by dept_id desc 
2019-05-15 11:07:54 -==> Parameters: 
2019-05-15 11:07:54 -<==      Total: 3
2019-05-15 11:07:54 -耗时 : 3
2019-05-15 11:07:54 -返回值 : {"checked":false,"children":[{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"3","parentId":"1","state":{"opened":true},"text":"牙星"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"2","parentId":"1","state":{"opened":true},"text":"五九"}],"hasChildren":true,"hasParent":false,"id":"1","parentId":"0","state":{"opened":true},"text":"总公司"}
2019-05-15 11:07:56 -请求地址 : http://localhost:8081/charts/tableWaterYY/tableWaterYY
2019-05-15 11:07:56 -HTTP METHOD : POST
2019-05-15 11:07:56 -CLASS_METHOD : com.bootdo.charts.controller.tableWaterYYController.tableWaterYY
2019-05-15 11:07:56 -参数 : [com.bootdo.water.vo.WaterVo@e499d6d, com.bootdo.moneyLog.vo.WaterLogVo@eacfce1]
2019-05-15 11:07:56 -==>  Preparing: select COUNT(*) from water WHERE water_sum>0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 11:07:56 -==> Parameters: 2018-12(String), 1(String), 2(String)
2019-05-15 11:07:56 -<==      Total: 1
2019-05-15 11:07:56 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE water_sum>0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 11:07:56 -==> Parameters: 2018-12(String), 1(String), 2(String)
2019-05-15 11:07:56 -<==      Total: 1
2019-05-15 11:07:56 -==>  Preparing: select COUNT(*) from water WHERE water_sum <0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 11:07:56 -==> Parameters: 2018-12(String), 1(String), 2(String)
2019-05-15 11:07:56 -<==      Total: 1
2019-05-15 11:07:56 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE water_sum <0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 11:07:56 -==> Parameters: 2018-12(String), 1(String), 2(String)
2019-05-15 11:07:56 -<==      Total: 1
2019-05-15 11:07:56 -==>  Preparing: select m_water,s1_water,s2_water,s3_water,water_org from water_price 
2019-05-15 11:07:56 -==> Parameters: 
2019-05-15 11:07:56 -<==      Total: 2
2019-05-15 11:07:56 -==>  Preparing: select COUNT(*),ifnull(SUM(water_cost),0) from water WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 11:07:56 -==> Parameters: 2019(String), 1(String), 2(String)
2019-05-15 11:07:56 -<==      Total: 1
2019-05-15 11:07:56 -==>  Preparing: select ifnull(SUM(water_cost),0) from water WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 11:07:56 -==> Parameters: 2019(String), 1(String), 2(String)
2019-05-15 11:07:56 -<==      Total: 1
2019-05-15 11:07:56 -==>  Preparing: select COUNT(*) from water_log WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 11:07:56 -==> Parameters: 2019(String), 1(String), 2(String)
2019-05-15 11:07:56 -<==      Total: 1
2019-05-15 11:07:56 -==>  Preparing: select ifnull(SUM(water_money),0) from water_log WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 11:07:56 -==> Parameters: 2019(String), 1(String), 2(String)
2019-05-15 11:07:56 -<==      Total: 1
2019-05-15 11:07:56 -==>  Preparing: select COUNT(*) from water WHERE water_sum>0 and DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 11:07:56 -==> Parameters: 2019(String), 1(String), 2(String)
2019-05-15 11:07:56 -<==      Total: 1
2019-05-15 11:07:56 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 11:07:56 -==> Parameters: 2019(String), 1(String), 2(String)
2019-05-15 11:07:56 -<==      Total: 1
2019-05-15 11:07:56 -==>  Preparing: select COUNT(*),ifnull(SUM(water_sum),0) from water WHERE water_sum <0 and DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 11:07:56 -==> Parameters: 2019(String), 1(String), 2(String)
2019-05-15 11:07:56 -<==      Total: 1
2019-05-15 11:07:56 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE water_sum <0 and DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 11:07:56 -==> Parameters: 2019(String), 1(String), 2(String)
2019-05-15 11:07:56 -<==      Total: 1
2019-05-15 11:07:56 -==>  Preparing: select COUNT(*) from water WHERE water_sum>0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 11:07:56 -==> Parameters: 2018-12(String), 2(String), 2(String)
2019-05-15 11:07:56 -<==      Total: 1
2019-05-15 11:07:56 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE water_sum>0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 11:07:56 -==> Parameters: 2018-12(String), 2(String), 2(String)
2019-05-15 11:07:56 -<==      Total: 1
2019-05-15 11:07:56 -==>  Preparing: select COUNT(*) from water WHERE water_sum <0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 11:07:56 -==> Parameters: 2018-12(String), 2(String), 2(String)
2019-05-15 11:07:56 -<==      Total: 1
2019-05-15 11:07:56 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE water_sum <0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 11:07:56 -==> Parameters: 2018-12(String), 2(String), 2(String)
2019-05-15 11:07:56 -<==      Total: 1
2019-05-15 11:07:56 -==>  Preparing: select COUNT(*),ifnull(SUM(water_cost),0) from water WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 11:07:56 -==> Parameters: 2019(String), 2(String), 2(String)
2019-05-15 11:07:56 -<==      Total: 1
2019-05-15 11:07:56 -==>  Preparing: select ifnull(SUM(water_cost),0) from water WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 11:07:56 -==> Parameters: 2019(String), 2(String), 2(String)
2019-05-15 11:07:56 -<==      Total: 1
2019-05-15 11:07:56 -==>  Preparing: select COUNT(*) from water_log WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 11:07:56 -==> Parameters: 2019(String), 2(String), 2(String)
2019-05-15 11:07:56 -<==      Total: 1
2019-05-15 11:07:56 -==>  Preparing: select ifnull(SUM(water_money),0) from water_log WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 11:07:56 -==> Parameters: 2019(String), 2(String), 2(String)
2019-05-15 11:07:56 -<==      Total: 1
2019-05-15 11:07:56 -==>  Preparing: select COUNT(*) from water WHERE water_sum>0 and DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 11:07:56 -==> Parameters: 2019(String), 2(String), 2(String)
2019-05-15 11:07:56 -<==      Total: 1
2019-05-15 11:07:56 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 11:07:56 -==> Parameters: 2019(String), 2(String), 2(String)
2019-05-15 11:07:56 -<==      Total: 1
2019-05-15 11:07:56 -==>  Preparing: select COUNT(*),ifnull(SUM(water_sum),0) from water WHERE water_sum <0 and DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 11:07:56 -==> Parameters: 2019(String), 2(String), 2(String)
2019-05-15 11:07:56 -<==      Total: 1
2019-05-15 11:07:56 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE water_sum <0 and DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 11:07:56 -==> Parameters: 2019(String), 2(String), 2(String)
2019-05-15 11:07:56 -<==      Total: 1
2019-05-15 11:07:56 -==>  Preparing: select COUNT(*) from water WHERE water_sum>0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 11:07:56 -==> Parameters: 2018-12(String), 4(String), 2(String)
2019-05-15 11:07:56 -<==      Total: 1
2019-05-15 11:07:56 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE water_sum>0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 11:07:56 -==> Parameters: 2018-12(String), 4(String), 2(String)
2019-05-15 11:07:56 -<==      Total: 1
2019-05-15 11:07:56 -==>  Preparing: select COUNT(*) from water WHERE water_sum <0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 11:07:56 -==> Parameters: 2018-12(String), 4(String), 2(String)
2019-05-15 11:07:56 -<==      Total: 1
2019-05-15 11:07:56 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE water_sum <0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 11:07:56 -==> Parameters: 2018-12(String), 4(String), 2(String)
2019-05-15 11:07:56 -<==      Total: 1
2019-05-15 11:07:56 -==>  Preparing: select COUNT(*),ifnull(SUM(water_cost),0) from water WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 11:07:56 -==> Parameters: 2019(String), 4(String), 2(String)
2019-05-15 11:07:56 -<==      Total: 1
2019-05-15 11:07:56 -==>  Preparing: select ifnull(SUM(water_cost),0) from water WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 11:07:56 -==> Parameters: 2019(String), 4(String), 2(String)
2019-05-15 11:07:56 -<==      Total: 1
2019-05-15 11:07:56 -==>  Preparing: select COUNT(*) from water_log WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 11:07:56 -==> Parameters: 2019(String), 4(String), 2(String)
2019-05-15 11:07:56 -<==      Total: 1
2019-05-15 11:07:56 -==>  Preparing: select ifnull(SUM(water_money),0) from water_log WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 11:07:56 -==> Parameters: 2019(String), 4(String), 2(String)
2019-05-15 11:07:56 -<==      Total: 1
2019-05-15 11:07:56 -==>  Preparing: select COUNT(*) from water WHERE water_sum>0 and DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 11:07:56 -==> Parameters: 2019(String), 4(String), 2(String)
2019-05-15 11:07:56 -<==      Total: 1
2019-05-15 11:07:56 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 11:07:56 -==> Parameters: 2019(String), 4(String), 2(String)
2019-05-15 11:07:56 -<==      Total: 1
2019-05-15 11:07:56 -==>  Preparing: select COUNT(*),ifnull(SUM(water_sum),0) from water WHERE water_sum <0 and DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 11:07:56 -==> Parameters: 2019(String), 4(String), 2(String)
2019-05-15 11:07:56 -<==      Total: 1
2019-05-15 11:07:56 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE water_sum <0 and DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 11:07:56 -==> Parameters: 2019(String), 4(String), 2(String)
2019-05-15 11:07:56 -<==      Total: 1
2019-05-15 11:07:56 -==>  Preparing: select COUNT(*) from water WHERE water_sum>0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 11:07:56 -==> Parameters: 2018-12(String), 4(String), 2(String)
2019-05-15 11:07:56 -<==      Total: 1
2019-05-15 11:07:56 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE water_sum>0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 11:07:56 -==> Parameters: 2018-12(String), 4(String), 2(String)
2019-05-15 11:07:56 -<==      Total: 1
2019-05-15 11:07:56 -==>  Preparing: select COUNT(*) from water WHERE water_sum <0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 11:07:56 -==> Parameters: 2018-12(String), 4(String), 2(String)
2019-05-15 11:07:56 -<==      Total: 1
2019-05-15 11:07:56 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE water_sum <0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 11:07:56 -==> Parameters: 2018-12(String), 4(String), 2(String)
2019-05-15 11:07:56 -<==      Total: 1
2019-05-15 11:07:56 -==>  Preparing: select COUNT(*),ifnull(SUM(water_cost),0) from water WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 11:07:56 -==> Parameters: 2019(String), 4(String), 2(String)
2019-05-15 11:07:56 -<==      Total: 1
2019-05-15 11:07:56 -==>  Preparing: select ifnull(SUM(water_cost),0) from water WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 11:07:56 -==> Parameters: 2019(String), 4(String), 2(String)
2019-05-15 11:07:56 -<==      Total: 1
2019-05-15 11:07:56 -==>  Preparing: select COUNT(*) from water_log WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 11:07:56 -==> Parameters: 2019(String), 4(String), 2(String)
2019-05-15 11:07:56 -<==      Total: 1
2019-05-15 11:07:56 -==>  Preparing: select ifnull(SUM(water_money),0) from water_log WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 11:07:56 -==> Parameters: 2019(String), 4(String), 2(String)
2019-05-15 11:07:56 -<==      Total: 1
2019-05-15 11:07:56 -==>  Preparing: select COUNT(*) from water WHERE water_sum>0 and DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 11:07:56 -==> Parameters: 2019(String), 4(String), 2(String)
2019-05-15 11:07:56 -<==      Total: 1
2019-05-15 11:07:56 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 11:07:56 -==> Parameters: 2019(String), 4(String), 2(String)
2019-05-15 11:07:56 -<==      Total: 1
2019-05-15 11:07:56 -==>  Preparing: select COUNT(*),ifnull(SUM(water_sum),0) from water WHERE water_sum <0 and DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 11:07:56 -==> Parameters: 2019(String), 4(String), 2(String)
2019-05-15 11:07:56 -<==      Total: 1
2019-05-15 11:07:56 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE water_sum <0 and DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 11:07:56 -==> Parameters: 2019(String), 4(String), 2(String)
2019-05-15 11:07:56 -<==      Total: 1
2019-05-15 11:07:56 -耗时 : 135
2019-05-15 11:07:56 -返回值 : {S2TotalH=1, NewPreDepositY=4, STotalY=-10, NewArrearstTotalH=2, NewPreDepositTotalY=5, S2NewTotalY=0, type=2, TotalH=1, OldAarrearsY=0, SNewPreDepositY=1, S3NetnreceiptsH=1, NewPreDepositH=3, S2TotalY=-10, TtotalH=2, SNewAarrearsY=0, S2NewTotalH=0, NetnreceiptsTotalH=4, SReceivableY=10, S2OldAarrears=0, TotalY=6, NetnreceiptsH=2, SNewPreDepositH=1, SNewTotalH=1, OldAarrearsH=0, S2OldPreDepositH=0, S3NewAarrearsY=0, TtotalY=-4, S2NewAarrearsY=0, TTtotalY=-23, S3OldPreDepositY=0, ArrearsTotalY=-10, SWaterPrice=10, SReceivableH=1, SNewAarrearsH=0, MWaterPrice=7, S2OldPreDepositY=0, S3OldAarrears=0, S3NewAarrearsH=0, S2NewAarrearsH=0, TTtotalH=6, S3OldPreDepositH=0, ArrearsTotalH=1, SOldPreDepositH=0, PreDepositTotalY=6, SNetnreceiptsH=2, SOldAarrearsH=1, S3NewPreDepositY=0, S3NewTotalH=0, SOldPreDepositY=0, S2NetnreceiptsH=1, ReceivableY=30, S2NewPreDepositH=0, S3NewPreDepositH=0, S3NewTotalY=0, SNetnreceiptsY=21, PreDepositTotalH=1, S2OldAarrearsH=0, S3OldAarrearsH=0, ReceivableH=5, S2NewPreDepositY=0, NewAarrearsY=-27, PriceTotal=17, NewPreDepositTotalH=4, S2ReceivableH=0, OldPreDepositY=6, NetnreceiptsTotalY=172, NewTotalY=-23, S3ReceivableY=0, ReceivableTotalH=6, S3TotalH=1, NetnreceiptsY=151, SNewTotalY=0, NewAarrearsH=2, NewArrearstTotalY=-27, OldPreDepositH=1, STotalH=1, S3ReceivableH=0, ReceivableTotalY=40, NewTotalH=5, SOldAarrears=-10, S2ReceivableY=0, S2NetnreceiptsY=60, S3TotalY=-10, S3NetnreceiptsY=60}
2019-05-15 11:26:09 -Validating all active sessions...
2019-05-15 11:26:09 -Finished session validation.  No sessions were stopped.
2019-05-15 11:26:34 -WebSocketSession[1 current WS(1)-HttpStream(0)-HttpPoll(0), 3 total, 0 closed abnormally (0 connect failure, 0 send limit, 0 transport error)], stompSubProtocol[processed CONNECT(3)-CONNECTED(3)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 33], outboundChannelpool size = 0, active threads = 0, queued tasks = 0, completed tasks = 5], sockJsScheduler[pool size = 4, active threads = 1, queued tasks = 2, completed tasks = 870]
2019-05-15 11:56:34 -WebSocketSession[1 current WS(1)-HttpStream(0)-HttpPoll(0), 3 total, 0 closed abnormally (0 connect failure, 0 send limit, 0 transport error)], stompSubProtocol[processed CONNECT(3)-CONNECTED(3)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 33], outboundChannelpool size = 0, active threads = 0, queued tasks = 0, completed tasks = 5], sockJsScheduler[pool size = 4, active threads = 1, queued tasks = 2, completed tasks = 1303]
2019-05-15 12:26:09 -Validating all active sessions...
2019-05-15 12:26:09 -Finished session validation.  [1] sessions were stopped.
2019-05-15 12:26:34 -WebSocketSession[1 current WS(1)-HttpStream(0)-HttpPoll(0), 3 total, 0 closed abnormally (0 connect failure, 0 send limit, 0 transport error)], stompSubProtocol[processed CONNECT(3)-CONNECTED(3)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 33], outboundChannelpool size = 0, active threads = 0, queued tasks = 0, completed tasks = 5], sockJsScheduler[pool size = 4, active threads = 1, queued tasks = 2, completed tasks = 1736]
2019-05-15 12:56:34 -WebSocketSession[1 current WS(1)-HttpStream(0)-HttpPoll(0), 3 total, 0 closed abnormally (0 connect failure, 0 send limit, 0 transport error)], stompSubProtocol[processed CONNECT(3)-CONNECTED(3)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 33], outboundChannelpool size = 0, active threads = 0, queued tasks = 0, completed tasks = 5], sockJsScheduler[pool size = 4, active threads = 1, queued tasks = 2, completed tasks = 2169]
2019-05-15 13:26:09 -Validating all active sessions...
2019-05-15 13:26:09 -Finished session validation.  No sessions were stopped.
2019-05-15 13:26:34 -WebSocketSession[1 current WS(1)-HttpStream(0)-HttpPoll(0), 3 total, 0 closed abnormally (0 connect failure, 0 send limit, 0 transport error)], stompSubProtocol[processed CONNECT(3)-CONNECTED(3)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 33], outboundChannelpool size = 0, active threads = 0, queued tasks = 0, completed tasks = 5], sockJsScheduler[pool size = 4, active threads = 1, queued tasks = 2, completed tasks = 2602]
2019-05-15 13:56:34 -WebSocketSession[1 current WS(1)-HttpStream(0)-HttpPoll(0), 3 total, 0 closed abnormally (0 connect failure, 0 send limit, 0 transport error)], stompSubProtocol[processed CONNECT(3)-CONNECTED(3)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 33], outboundChannelpool size = 0, active threads = 0, queued tasks = 0, completed tasks = 5], sockJsScheduler[pool size = 4, active threads = 1, queued tasks = 2, completed tasks = 3035]
2019-05-15 14:26:09 -Validating all active sessions...
2019-05-15 14:26:09 -Finished session validation.  No sessions were stopped.
2019-05-15 14:26:34 -WebSocketSession[1 current WS(1)-HttpStream(0)-HttpPoll(0), 3 total, 0 closed abnormally (0 connect failure, 0 send limit, 0 transport error)], stompSubProtocol[processed CONNECT(3)-CONNECTED(3)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 33], outboundChannelpool size = 0, active threads = 0, queued tasks = 0, completed tasks = 5], sockJsScheduler[pool size = 4, active threads = 1, queued tasks = 2, completed tasks = 3468]
2019-05-15 15:00:55 -Starting BootdoApplication on PC-201905091110 with PID 4140 (D:\eclipse2018-work\bootdo\target\classes started by Administrator in D:\eclipse2018-work\bootdo)
2019-05-15 15:00:55 -Running with Spring Boot v2.0.3.RELEASE, Spring v5.0.7.RELEASE
2019-05-15 15:00:55 -The following profiles are active: dev
2019-05-15 15:00:55 -Refreshing org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@4d5650ae: startup date [Wed May 15 15:00:55 CST 2019]; root of context hierarchy
2019-05-15 15:01:01 -Multiple Spring Data modules found, entering strict repository configuration mode!
2019-05-15 15:01:04 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$abc073ee] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-05-15 15:01:04 -Bean 'shiroConfig' of type [com.bootdo.system.config.ShiroConfig$$EnhancerBySpringCGLIB$$9e19a295] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-05-15 15:01:06 -Bean 'userRealm' of type [com.bootdo.system.shiro.UserRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-05-15 15:01:07 -Bean 'cacheManager2' of type [net.sf.ehcache.CacheManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-05-15 15:01:07 -Bean 'ehCacheManager' of type [org.apache.shiro.cache.ehcache.EhCacheManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-05-15 15:01:07 -Cache with name 'com.bootdo.system.shiro.UserRealm.authorizationCache' does not yet exist.  Creating now.
2019-05-15 15:01:07 -Added EhCache named [com.bootdo.system.shiro.UserRealm.authorizationCache]
2019-05-15 15:01:07 -Bean 'sessionDAO' of type [org.apache.shiro.session.mgt.eis.MemorySessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-05-15 15:01:07 -Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-05-15 15:01:07 -Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-05-15 15:01:07 -Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-05-15 15:01:08 -Tomcat initialized with port(s): 8081 (http)
2019-05-15 15:01:08 -Initializing ProtocolHandler ["http-nio-8081"]
2019-05-15 15:01:08 -Starting service [Tomcat]
2019-05-15 15:01:08 -Starting Servlet Engine: Apache Tomcat/8.5.31
2019-05-15 15:01:08 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [D:\Java\JDK\jdk1.8.0_102\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;D:/Java/JRE/bin/server;D:/Java/JRE/bin;D:/Java/JRE/lib/amd64;C:\ProgramData\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Windows\System32\OpenSSH\;%JAVA_HOME\bin%;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;;C:\Users\Administrator\Desktop;;.]
2019-05-15 15:01:09 -Initializing Spring embedded WebApplicationContext
2019-05-15 15:01:09 -Root WebApplicationContext: initialization completed in 14111 ms
2019-05-15 15:01:10 -Mapping filter: 'characterEncodingFilter' to: [/*]
2019-05-15 15:01:10 -Mapping filter: 'hiddenHttpMethodFilter' to: [/*]
2019-05-15 15:01:10 -Mapping filter: 'httpPutFormContentFilter' to: [/*]
2019-05-15 15:01:10 -Mapping filter: 'requestContextFilter' to: [/*]
2019-05-15 15:01:10 -Filter xssFilter was not registered (disabled)
2019-05-15 15:01:10 -Mapping filter: 'webStatFilter' to urls: [/*]
2019-05-15 15:01:10 -Mapping filter: 'shiroFilterFactoryBean' to: [/*]
2019-05-15 15:01:10 -Servlet statViewServlet mapped to [/druid/*]
2019-05-15 15:01:10 -Servlet dispatcherServlet mapped to [/]
2019-05-15 15:01:19 -ApplicationContext registed-->org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@4d5650ae: startup date [Wed May 15 15:00:55 CST 2019]; root of context hierarchy
2019-05-15 15:01:20 -Using default implementation for ThreadExecutor
2019-05-15 15:01:20 -Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2019-05-15 15:01:20 -Quartz Scheduler v.2.2.1 created.
2019-05-15 15:01:20 -RAMJobStore initialized.
2019-05-15 15:01:20 -Scheduler meta-data: Quartz Scheduler (v2.2.1) 'schedulerFactoryBean' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2019-05-15 15:01:20 -Quartz scheduler 'schedulerFactoryBean' initialized from an externally provided properties instance.
2019-05-15 15:01:20 -Quartz scheduler version: 2.2.1
2019-05-15 15:01:20 -JobFactory set to: com.bootdo.common.quartz.factory.JobFactory@6009cd34
2019-05-15 15:01:21 -Initializing ExecutorService  'clientInboundChannelExecutor'
2019-05-15 15:01:21 -Initializing ExecutorService  'clientOutboundChannelExecutor'
2019-05-15 15:01:30 -Mapped "{[/charts/countDD],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.countDDController.countDD()
2019-05-15 15:01:30 -Mapped "{[/charts/countDD/getCountDD],methods=[POST]}" onto public com.bootdo.charts.vo.CountDayVo com.bootdo.charts.controller.countDDController.getCountD(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo)
2019-05-15 15:01:30 -Mapped "{[/charts/countDD/exportDD],methods=[GET]}" onto public void com.bootdo.charts.controller.countDDController.exportDD(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.HeatLogVo,com.bootdo.moneyLog.vo.WaterLogVo,javax.servlet.http.HttpServletResponse)
2019-05-15 15:01:30 -Mapped "{[/charts/countMM/getCountMM],methods=[POST]}" onto public java.util.Map com.bootdo.charts.controller.countMMController.getCountMM(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo)
2019-05-15 15:01:30 -Mapped "{[/charts/countMM],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.countMMController.countMM()
2019-05-15 15:01:30 -Mapped "{[/charts/countMM/exportMM],methods=[GET]}" onto public void com.bootdo.charts.controller.countMMController.exportMM(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.HeatLogVo,com.bootdo.moneyLog.vo.WaterLogVo,javax.servlet.http.HttpServletResponse)
2019-05-15 15:01:30 -Mapped "{[/charts/countOwe/getCountOwe],methods=[POST]}" onto public com.bootdo.charts.vo.CountOweVo com.bootdo.charts.controller.countOweController.getCountD(com.bootdo.elec.vo.ElecVo,com.bootdo.water.vo.WaterVo,com.bootdo.heat.vo.HeatVo)
2019-05-15 15:01:30 -Mapped "{[/charts/countOwe],methods=[GET]}" onto java.lang.String com.bootdo.charts.controller.countOweController.countOwe()
2019-05-15 15:01:30 -Mapped "{[/charts/countOwe/exportOwe],methods=[GET]}" onto public void com.bootdo.charts.controller.countOweController.exportOwe(com.bootdo.elec.vo.ElecVo,com.bootdo.heat.vo.HeatVo,com.bootdo.water.vo.WaterVo,javax.servlet.http.HttpServletResponse)
2019-05-15 15:01:30 -Mapped "{[/charts/countRun/getCountRun],methods=[POST]}" onto public java.util.Map com.bootdo.charts.controller.countRunController.getCountRun(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo)
2019-05-15 15:01:30 -Mapped "{[/charts/countRun],methods=[GET]}" onto java.lang.String com.bootdo.charts.controller.countRunController.countRun()
2019-05-15 15:01:30 -Mapped "{[/charts/countRun/exportRun],methods=[GET]}" onto public void com.bootdo.charts.controller.countRunController.exportRun(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.HeatLogVo,com.bootdo.moneyLog.vo.WaterLogVo,javax.servlet.http.HttpServletResponse)
2019-05-15 15:01:30 -Mapped "{[/charts/countYY],methods=[GET]}" onto java.lang.String com.bootdo.charts.controller.countYYController.countYY()
2019-05-15 15:01:30 -Mapped "{[/charts/countYY/exportYY],methods=[GET]}" onto public void com.bootdo.charts.controller.countYYController.exportYY(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.HeatLogVo,com.bootdo.moneyLog.vo.WaterLogVo,javax.servlet.http.HttpServletResponse)
2019-05-15 15:01:30 -Mapped "{[/charts/countYY/getCountYY],methods=[POST]}" onto public java.util.Map com.bootdo.charts.controller.countYYController.getCountYY(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo)
2019-05-15 15:01:30 -Mapped "{[/charts/tableDD],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.tableDDController.countDD()
2019-05-15 15:01:30 -Mapped "{[/charts/tableDD/exportDD],methods=[GET]}" onto public void com.bootdo.charts.controller.tableDDController.exportDD(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.HeatLogVo,com.bootdo.moneyLog.vo.WaterLogVo,javax.servlet.http.HttpServletResponse)
2019-05-15 15:01:30 -Mapped "{[/charts/tableDD/getTableDD],methods=[POST]}" onto public java.util.Map com.bootdo.charts.controller.tableDDController.getTableDD(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo)
2019-05-15 15:01:30 -Mapped "{[/charts/tableElecMM/tableElecMM],methods=[POST]}" onto public java.util.Map com.bootdo.charts.controller.tableElecMMController.tableElecMM(com.bootdo.elec.vo.ElecVo,com.bootdo.moneyLog.vo.ElecLogVo)
2019-05-15 15:01:30 -Mapped "{[/charts/tableElecMM],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.tableElecMMController.tableElecMM()
2019-05-15 15:01:30 -Mapped "{[/charts/tableElecMM/exportElecMM],methods=[GET]}" onto public void com.bootdo.charts.controller.tableElecMMController.exportElecMM(com.bootdo.elec.vo.ElecVo,com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse)
2019-05-15 15:01:30 -Mapped "{[/charts/tableElecYY/getCountYY],methods=[POST]}" onto public java.util.Map com.bootdo.charts.controller.tableElecYYController.getCountYY(com.bootdo.elec.vo.ElecVo,com.bootdo.moneyLog.vo.ElecLogVo)
2019-05-15 15:01:30 -Mapped "{[/charts/tableElecYY],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.tableElecYYController.tableElecYY()
2019-05-15 15:01:30 -Mapped "{[/charts/tableElecYY/exportElecYY],methods=[GET]}" onto public void com.bootdo.charts.controller.tableElecYYController.exportElecYY(com.bootdo.elec.vo.ElecVo,com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse)
2019-05-15 15:01:30 -Mapped "{[/charts/tableHeatMM/tableHeatMM],methods=[POST]}" onto public java.util.Map com.bootdo.charts.controller.tableHeatMMController.tableHeatMM(com.bootdo.heat.vo.HeatVo,com.bootdo.moneyLog.vo.HeatLogVo)
2019-05-15 15:01:30 -Mapped "{[/charts/tableHeatMM],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.tableHeatMMController.tableHeatMM()
2019-05-15 15:01:30 -Mapped "{[/charts/tableHeatMM/exportHeatMM],methods=[GET]}" onto public void com.bootdo.charts.controller.tableHeatMMController.exportHeatMM(com.bootdo.heat.vo.HeatVo,com.bootdo.moneyLog.vo.HeatLogVo,javax.servlet.http.HttpServletResponse)
2019-05-15 15:01:30 -Mapped "{[/charts/tableHeatYY/getCountYY],methods=[POST]}" onto public java.util.Map com.bootdo.charts.controller.tableHeatYYController.getCountMM(com.bootdo.heat.vo.HeatVo,com.bootdo.moneyLog.vo.HeatLogVo)
2019-05-15 15:01:30 -Mapped "{[/charts/tableHeatYY/exportHeatYY],methods=[GET]}" onto public void com.bootdo.charts.controller.tableHeatYYController.exportHeatYY(com.bootdo.heat.vo.HeatVo,com.bootdo.moneyLog.vo.HeatLogVo,javax.servlet.http.HttpServletResponse)
2019-05-15 15:01:30 -Mapped "{[/charts/tableHeatYY],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.tableHeatYYController.tableHeatYY()
2019-05-15 15:01:30 -Mapped "{[/charts/tableWaterMM/exportWaterMM],methods=[GET]}" onto public void com.bootdo.charts.controller.tableWaterMMController.exportWaterMM(com.bootdo.water.vo.WaterVo,com.bootdo.moneyLog.vo.WaterLogVo,javax.servlet.http.HttpServletResponse)
2019-05-15 15:01:30 -Mapped "{[/charts/tableWaterMM],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.tableWaterMMController.tableWaterMM()
2019-05-15 15:01:30 -Mapped "{[/charts/tableWaterMM/tableWaterMM],methods=[POST]}" onto public java.util.Map com.bootdo.charts.controller.tableWaterMMController.tableWaterMM(com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.water.vo.WaterVo)
2019-05-15 15:01:30 -Mapped "{[/charts/tableWaterYY/tableWaterYY],methods=[POST]}" onto public java.util.Map com.bootdo.charts.controller.tableWaterYYController.tableWaterYY(com.bootdo.water.vo.WaterVo,com.bootdo.moneyLog.vo.WaterLogVo)
2019-05-15 15:01:30 -Mapped "{[/charts/tableWaterYY],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.tableWaterYYController.tableWaterYY()
2019-05-15 15:01:30 -Mapped "{[/charts/tableWaterYY/exportWaterYY],methods=[GET]}" onto public void com.bootdo.charts.controller.tableWaterYYController.exportWaterYY(com.bootdo.water.vo.WaterVo,com.bootdo.moneyLog.vo.WaterLogVo,javax.servlet.http.HttpServletResponse)
2019-05-15 15:01:30 -Mapped "{[/common/dict/add],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.add()
2019-05-15 15:01:30 -Mapped "{[/common/dict/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.remove(java.lang.Long)
2019-05-15 15:01:30 -Mapped "{[/common/dict/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.remove(java.lang.Long[])
2019-05-15 15:01:30 -Mapped "{[/common/dict/update]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.update(com.bootdo.common.domain.DictDO)
2019-05-15 15:01:30 -Mapped "{[/common/dict/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.common.controller.DictController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 15:01:30 -Mapped "{[/common/dict/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.save(com.bootdo.common.domain.DictDO)
2019-05-15 15:01:30 -Mapped "{[/common/dict/type],methods=[GET]}" onto public java.util.List<com.bootdo.common.domain.DictDO> com.bootdo.common.controller.DictController.listType()
2019-05-15 15:01:30 -Mapped "{[/common/dict/list/{type}],methods=[GET]}" onto public java.util.List<com.bootdo.common.domain.DictDO> com.bootdo.common.controller.DictController.listByType(java.lang.String)
2019-05-15 15:01:30 -Mapped "{[/common/dict/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.edit(java.lang.Long,org.springframework.ui.Model)
2019-05-15 15:01:30 -Mapped "{[/common/dict],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.dict()
2019-05-15 15:01:30 -Mapped "{[/common/dict/add/{type}/{description}],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.addD(org.springframework.ui.Model,java.lang.String,java.lang.String)
2019-05-15 15:01:30 -Mapped "{[/common/sysFile/add],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.FileController.add()
2019-05-15 15:01:30 -Mapped "{[/common/sysFile/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.remove(java.lang.Long,javax.servlet.http.HttpServletRequest)
2019-05-15 15:01:30 -Mapped "{[/common/sysFile/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.remove(java.lang.Long[])
2019-05-15 15:01:30 -Mapped "{[/common/sysFile/update]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.update(com.bootdo.common.domain.FileDO)
2019-05-15 15:01:30 -Mapped "{[/common/sysFile/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.common.controller.FileController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 15:01:30 -Mapped "{[/common/sysFile/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.save(com.bootdo.common.domain.FileDO)
2019-05-15 15:01:30 -Mapped "{[/common/sysFile/info/{id}]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.info(java.lang.Long)
2019-05-15 15:01:30 -Mapped "{[/common/sysFile/edit],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.FileController.edit(java.lang.Long,org.springframework.ui.Model)
2019-05-15 15:01:30 -Mapped "{[/common/sysFile/upload],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.FileController.upload(org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpServletRequest)
2019-05-15 15:01:30 -Mapped "{[/common/sysFile],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.FileController.sysFile(org.springframework.ui.Model)
2019-05-15 15:01:30 -Mapped "{[/common/generator/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.GeneratorController.update(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 15:01:30 -Mapped "{[/common/generator/list],methods=[GET]}" onto java.util.List<java.util.Map<java.lang.String, java.lang.Object>> com.bootdo.common.controller.GeneratorController.list()
2019-05-15 15:01:30 -Mapped "{[/common/generator/code/{tableName}]}" onto public void com.bootdo.common.controller.GeneratorController.code(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String) throws java.io.IOException
2019-05-15 15:01:30 -Mapped "{[/common/generator],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.GeneratorController.generator()
2019-05-15 15:01:30 -Mapped "{[/common/generator/edit],methods=[GET]}" onto public java.lang.String com.bootdo.common.controller.GeneratorController.edit(org.springframework.ui.Model)
2019-05-15 15:01:30 -Mapped "{[/common/generator/batchCode]}" onto public void com.bootdo.common.controller.GeneratorController.batchCode(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String) throws java.io.IOException
2019-05-15 15:01:30 -Mapped "{[/common/job/add],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.JobController.add()
2019-05-15 15:01:30 -Mapped "{[/common/job/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.remove(java.lang.Long)
2019-05-15 15:01:30 -Mapped "{[/common/job/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.remove(java.lang.Long[])
2019-05-15 15:01:30 -Mapped "{[/common/job/update],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.update(com.bootdo.common.domain.TaskDO)
2019-05-15 15:01:30 -Mapped "{[/common/job/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.common.controller.JobController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 15:01:30 -Mapped "{[/common/job/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.save(com.bootdo.common.domain.TaskDO)
2019-05-15 15:01:30 -Mapped "{[/common/job/info/{id}]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.info(java.lang.Long)
2019-05-15 15:01:30 -Mapped "{[/common/job/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.JobController.edit(java.lang.Long,org.springframework.ui.Model)
2019-05-15 15:01:30 -Mapped "{[/common/job/changeJobStatus],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.changeJobStatus(java.lang.Long,java.lang.String)
2019-05-15 15:01:30 -Mapped "{[/common/job],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.JobController.taskScheduleJob()
2019-05-15 15:01:30 -Mapped "{[/common/log/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.LogController.remove(java.lang.Long)
2019-05-15 15:01:30 -Mapped "{[/common/log],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.LogController.log()
2019-05-15 15:01:30 -Mapped "{[/common/log/list],methods=[GET]}" onto com.bootdo.common.domain.PageDO<com.bootdo.common.domain.LogDO> com.bootdo.common.controller.LogController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 15:01:30 -Mapped "{[/common/log/batchRemove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.LogController.batchRemove(java.lang.Long[])
2019-05-15 15:01:30 -Mapped "{[/common/long],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.LongController.Long()
2019-05-15 15:01:30 -Mapped "{[/common/time],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.TimeController.Time()
2019-05-15 15:01:30 -Mapped "{[/error]}" onto public com.bootdo.common.utils.R com.bootdo.common.exception.MainsiteErrorController.handleError(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-05-15 15:01:30 -Mapped "{[/error],produces=[text/html]}" onto public org.springframework.web.servlet.ModelAndView com.bootdo.common.exception.MainsiteErrorController.errorHtml(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-05-15 15:01:30 -Mapped "{[/elec/elec/add],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecController.add()
2019-05-15 15:01:30 -Mapped "{[/elec/elec/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.remove(java.lang.Long)
2019-05-15 15:01:30 -Mapped "{[/elec/elec/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.remove(java.lang.Long[])
2019-05-15 15:01:30 -Mapped "{[/elec/elec/update],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.update(com.bootdo.elec.domain.ElecDO)
2019-05-15 15:01:30 -Mapped "{[/elec/elec/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.elec.controller.ElecController.list(java.util.Map<java.lang.String, java.lang.Object>,com.bootdo.elec.domain.ElecDO)
2019-05-15 15:01:30 -Mapped "{[/elec/elec/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.save(com.bootdo.elec.domain.ElecDO)
2019-05-15 15:01:30 -Mapped "{[/elec/elec/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecController.edit(java.lang.Long,org.springframework.ui.Model)
2019-05-15 15:01:30 -Mapped "{[/elec/elec/exprotElec],methods=[GET]}" onto public void com.bootdo.elec.controller.ElecController.exprotExcel(com.bootdo.elec.vo.ElecVo,javax.servlet.http.HttpServletResponse)
2019-05-15 15:01:30 -Mapped "{[/elec/elec/YhElecUpdate],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.YhElecUpdate(com.bootdo.elec.domain.ElecDO)
2019-05-15 15:01:30 -Mapped "{[/elec/elec],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecController.Elec()
2019-05-15 15:01:30 -Mapped "{[/elec/elec/WxElecUpdate],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.WxElecUpdate(com.bootdo.elec.domain.ElecDO)
2019-05-15 15:01:30 -Mapped "{[/elec/elecInto/importElecIntoExcel],methods=[POST]}" onto public java.lang.String com.bootdo.elec.controller.ElecIntoController.importElecIntoExcel(org.springframework.web.multipart.MultipartFile,com.bootdo.elec.vo.ElecVo,javax.servlet.http.HttpServletResponse) throws java.lang.Exception
2019-05-15 15:01:30 -Mapped "{[/elec/elecInto/exprotElecIntoExcel],methods=[GET]}" onto public void com.bootdo.elec.controller.ElecIntoController.exprotExcel(com.bootdo.elec.vo.ElecVo,javax.servlet.http.HttpServletResponse)
2019-05-15 15:01:30 -Mapped "{[/elec/elecInto],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecIntoController.ElecInto()
2019-05-15 15:01:30 -Mapped "{[/elec/elecPrice/add],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecPriceController.add()
2019-05-15 15:01:30 -Mapped "{[/elec/elecPrice/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecPriceController.remove(java.lang.Long)
2019-05-15 15:01:30 -Mapped "{[/elec/elecPrice/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecPriceController.remove(java.lang.Long[])
2019-05-15 15:01:30 -Mapped "{[/elec/elecPrice/update]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecPriceController.update(com.bootdo.elec.domain.ElecPriceDO)
2019-05-15 15:01:30 -Mapped "{[/elec/elecPrice/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.elec.controller.ElecPriceController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 15:01:30 -Mapped "{[/elec/elecPrice/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecPriceController.save(com.bootdo.elec.domain.ElecPriceDO,com.bootdo.elec.domain.ElecDO)
2019-05-15 15:01:30 -Mapped "{[/elec/elecPrice/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecPriceController.edit(java.lang.Long,org.springframework.ui.Model)
2019-05-15 15:01:30 -Mapped "{[/elec/elecPrice],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecPriceController.ElecPrice()
2019-05-15 15:01:30 -Mapped "{[/elec/elecUpLoad],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecUpLoadController.Elec()
2019-05-15 15:01:30 -Mapped "{[/elec/elecUpLoad/exprotElecExcel],methods=[GET]}" onto public void com.bootdo.elec.controller.ElecUpLoadController.exprotElecExcel(com.bootdo.elec.vo.ElecVo,javax.servlet.http.HttpServletResponse)
2019-05-15 15:01:30 -Mapped "{[/elec/elecUpLoad/importElecExcel],methods=[POST]}" onto public java.util.Map<java.lang.String, java.lang.Object> com.bootdo.elec.controller.ElecUpLoadController.importElecExcel(org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpServletRequest) throws java.lang.Exception
2019-05-15 15:01:30 -Mapped "{[/heat/heat/add],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatController.add()
2019-05-15 15:01:30 -Mapped "{[/heat/heat/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatController.remove(java.lang.Integer)
2019-05-15 15:01:30 -Mapped "{[/heat/heat/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatController.remove(java.lang.Integer[])
2019-05-15 15:01:30 -Mapped "{[/heat/heat/update]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatController.update(com.bootdo.heat.domain.HeatDO)
2019-05-15 15:01:30 -Mapped "{[/heat/heat/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.heat.controller.HeatController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 15:01:30 -Mapped "{[/heat/heat/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatController.save(com.bootdo.heat.domain.HeatDO)
2019-05-15 15:01:30 -Mapped "{[/heat/heat/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatController.edit(java.lang.Integer,org.springframework.ui.Model)
2019-05-15 15:01:30 -Mapped "{[/heat/heat/exprotHeat],methods=[GET]}" onto public void com.bootdo.heat.controller.HeatController.exprotExcel(com.bootdo.heat.vo.HeatVo,javax.servlet.http.HttpServletResponse)
2019-05-15 15:01:30 -Mapped "{[/heat/heat],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatController.Heat()
2019-05-15 15:01:30 -Mapped "{[/heat/heatInto/importHeatIntoExcel],methods=[POST]}" onto public java.lang.String com.bootdo.heat.controller.HeatIntoController.importHeatIntoExcel(org.springframework.web.multipart.MultipartFile,com.bootdo.heat.vo.HeatVo,javax.servlet.http.HttpServletResponse) throws java.lang.Exception
2019-05-15 15:01:30 -Mapped "{[/heat/heatInto/exprotHeatIntoExcel],methods=[GET]}" onto public void com.bootdo.heat.controller.HeatIntoController.exprotExcel(com.bootdo.heat.vo.HeatVo,javax.servlet.http.HttpServletResponse)
2019-05-15 15:01:30 -Mapped "{[/heat/heatInto],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatIntoController.HeatInto()
2019-05-15 15:01:30 -Mapped "{[/heat/heatPrice/add],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatPriceController.add()
2019-05-15 15:01:30 -Mapped "{[/heat/heatPrice/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatPriceController.remove(java.lang.Long)
2019-05-15 15:01:30 -Mapped "{[/heat/heatPrice/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatPriceController.remove(java.lang.Long[])
2019-05-15 15:01:30 -Mapped "{[/heat/heatPrice/update]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatPriceController.update(com.bootdo.heat.domain.HeatPriceDO)
2019-05-15 15:01:30 -Mapped "{[/heat/heatPrice/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.heat.controller.HeatPriceController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 15:01:30 -Mapped "{[/heat/heatPrice/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatPriceController.save(com.bootdo.heat.domain.HeatPriceDO)
2019-05-15 15:01:30 -Mapped "{[/heat/heatPrice/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatPriceController.edit(java.lang.Long,org.springframework.ui.Model)
2019-05-15 15:01:30 -Mapped "{[/heat/heatPrice],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatPriceController.HeatPrice()
2019-05-15 15:01:30 -Mapped "{[/heat/heatUpLoad/createHeatExcel],methods=[POST]}" onto public java.lang.String com.bootdo.heat.controller.HeatUpLoadController.createHeatExcel(com.bootdo.heat.domain.HeatDO) throws java.lang.Exception
2019-05-15 15:01:30 -Mapped "{[/heat/heatUpLoad],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatUpLoadController.HeatUpLoad()
2019-05-15 15:01:30 -Mapped "{[/heat/heatUpLoad/importHeatExcel]}" onto public java.lang.String com.bootdo.heat.controller.HeatUpLoadController.importHeatExcel(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)
2019-05-15 15:01:30 -Mapped "{[/heat/heatUpLoad/exprotHeatExcel],methods=[GET]}" onto public void com.bootdo.heat.controller.HeatUpLoadController.exprotHeatExcel(com.bootdo.heat.vo.HeatVo,javax.servlet.http.HttpServletResponse)
2019-05-15 15:01:30 -Mapped "{[/moneyList/moneyList],methods=[GET]}" onto java.lang.String com.bootdo.moneyList.controller.MoneyListController.MoneyList()
2019-05-15 15:01:30 -Mapped "{[/moneyList/moneyList/queryAllUserName],methods=[POST]}" onto public java.util.List<com.bootdo.moneyList.damain.MoneyListDO> com.bootdo.moneyList.controller.MoneyListController.getAllUserName(com.bootdo.moneyList.damain.MoneyListDO)
2019-05-15 15:01:30 -Mapped "{[/moneyList/moneyList/queryAllUser],methods=[POST]}" onto public java.util.List<com.bootdo.moneyList.damain.MoneyListDO> com.bootdo.moneyList.controller.MoneyListController.queryAllUser(com.bootdo.moneyList.damain.MoneyListDO)
2019-05-15 15:01:30 -Mapped "{[/moneyList/moneyList/updateMoney],methods=[POST]}" onto public java.lang.String com.bootdo.moneyList.controller.MoneyListController.updateMoney(com.bootdo.moneyList.damain.MoneyListDO)
2019-05-15 15:01:30 -Mapped "{[/moneyLog/elecLog/add],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.ElecLogController.add()
2019-05-15 15:01:30 -Mapped "{[/moneyLog/elecLog/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.ElecLogController.remove(java.lang.Long)
2019-05-15 15:01:30 -Mapped "{[/moneyLog/elecLog/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.ElecLogController.remove(java.lang.Long[])
2019-05-15 15:01:30 -Mapped "{[/moneyLog/elecLog/update]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.ElecLogController.update(java.util.Map<java.lang.String, java.lang.Object>,com.bootdo.moneyLog.domain.ElecLogDO)
2019-05-15 15:01:30 -Mapped "{[/moneyLog/elecLog/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.moneyLog.controller.ElecLogController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 15:01:30 -Mapped "{[/moneyLog/elecLog/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.ElecLogController.save(com.bootdo.moneyLog.domain.ElecLogDO)
2019-05-15 15:01:30 -Mapped "{[/moneyLog/elecLog/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.ElecLogController.edit(java.lang.Long,org.springframework.ui.Model)
2019-05-15 15:01:30 -Mapped "{[/moneyLog/elecLog],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.ElecLogController.moneyLog()
2019-05-15 15:01:30 -Mapped "{[/moneyLog/elecLog/exprotElecLog],methods=[GET]}" onto public void com.bootdo.moneyLog.controller.ElecLogController.exprotElecLog(com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-05-15 15:01:30 -Mapped "{[/moneyLog/heatLog/add],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.HeatLogController.add()
2019-05-15 15:01:30 -Mapped "{[/moneyLog/heatLog/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.HeatLogController.remove(java.lang.Long)
2019-05-15 15:01:30 -Mapped "{[/moneyLog/heatLog/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.HeatLogController.remove(java.lang.Long[])
2019-05-15 15:01:30 -Mapped "{[/moneyLog/heatLog/update]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.HeatLogController.update(java.util.Map<java.lang.String, java.lang.Object>,com.bootdo.moneyLog.domain.HeatLogDO)
2019-05-15 15:01:30 -Mapped "{[/moneyLog/heatLog/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.moneyLog.controller.HeatLogController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 15:01:30 -Mapped "{[/moneyLog/heatLog/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.HeatLogController.save(com.bootdo.moneyLog.domain.HeatLogDO)
2019-05-15 15:01:30 -Mapped "{[/moneyLog/heatLog/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.HeatLogController.edit(java.lang.Long,org.springframework.ui.Model)
2019-05-15 15:01:30 -Mapped "{[/moneyLog/heatLog/exprotHeatLog],methods=[GET]}" onto public void com.bootdo.moneyLog.controller.HeatLogController.exprotHeatLog(com.bootdo.moneyLog.vo.HeatLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-05-15 15:01:30 -Mapped "{[/moneyLog/heatLog],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.HeatLogController.HeatLog()
2019-05-15 15:01:30 -Mapped "{[/moneyLog/waterLog/add],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.WaterLogController.add()
2019-05-15 15:01:30 -Mapped "{[/moneyLog/waterLog/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.WaterLogController.remove(java.lang.Long)
2019-05-15 15:01:30 -Mapped "{[/moneyLog/waterLog/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.WaterLogController.remove(java.lang.Long[])
2019-05-15 15:01:30 -Mapped "{[/moneyLog/waterLog/update]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.WaterLogController.update(java.util.Map<java.lang.String, java.lang.Object>,com.bootdo.moneyLog.domain.WaterLogDO)
2019-05-15 15:01:30 -Mapped "{[/moneyLog/waterLog/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.moneyLog.controller.WaterLogController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 15:01:30 -Mapped "{[/moneyLog/waterLog/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.WaterLogController.save(com.bootdo.moneyLog.domain.WaterLogDO)
2019-05-15 15:01:30 -Mapped "{[/moneyLog/waterLog/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.WaterLogController.edit(java.lang.Long,org.springframework.ui.Model)
2019-05-15 15:01:30 -Mapped "{[/moneyLog/waterLog/exprotWaterLog],methods=[GET]}" onto public void com.bootdo.moneyLog.controller.WaterLogController.exprotWaterLog(com.bootdo.moneyLog.vo.WaterLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-05-15 15:01:30 -Mapped "{[/moneyLog/waterLog],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.WaterLogController.WaterLog()
2019-05-15 15:01:31 -Mapped "{[/oa/notify/add],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.add()
2019-05-15 15:01:31 -Mapped "{[/oa/notify/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.remove(java.lang.Long)
2019-05-15 15:01:31 -Mapped "{[/oa/notify/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.remove(java.lang.Long[])
2019-05-15 15:01:31 -Mapped "{[/oa/notify/update]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.update(com.bootdo.oa.domain.NotifyDO)
2019-05-15 15:01:31 -Mapped "{[/oa/notify/read/{id}],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.read(java.lang.Long,org.springframework.ui.Model)
2019-05-15 15:01:31 -Mapped "{[/oa/notify/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.oa.controller.NotifyController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 15:01:31 -Mapped "{[/oa/notify/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.save(com.bootdo.oa.domain.NotifyDO)
2019-05-15 15:01:31 -Mapped "{[/oa/notify/message],methods=[GET]}" onto com.bootdo.common.utils.PageUtils com.bootdo.oa.controller.NotifyController.message()
2019-05-15 15:01:31 -Mapped "{[/oa/notify/selfList],methods=[GET]}" onto com.bootdo.common.utils.PageUtils com.bootdo.oa.controller.NotifyController.selfList(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 15:01:31 -Mapped "{[/oa/notify],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.oaNotify()
2019-05-15 15:01:31 -Mapped "{[/oa/notify/selfNotify],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.selefNotify()
2019-05-15 15:01:31 -Mapped "{[/oa/notify/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.edit(java.lang.Long,org.springframework.ui.Model)
2019-05-15 15:01:31 -Mapped "{[/print/print/add],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.add()
2019-05-15 15:01:31 -Mapped "{[/print/print/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.print.controller.PrintController.remove(java.lang.Long)
2019-05-15 15:01:31 -Mapped "{[/print/print/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.print.controller.PrintController.remove(java.lang.Long[])
2019-05-15 15:01:31 -Mapped "{[/print/print/update]}" onto public com.bootdo.common.utils.R com.bootdo.print.controller.PrintController.update(com.bootdo.print.domain.PrintDO)
2019-05-15 15:01:31 -Mapped "{[/print/print/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.print.controller.PrintController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 15:01:31 -Mapped "{[/print/print/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.print.controller.PrintController.save(java.lang.String,com.bootdo.print.domain.PrintDO)
2019-05-15 15:01:31 -Mapped "{[/print/print/printMoney],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.printMoney()
2019-05-15 15:01:31 -Mapped "{[/print/print/printEdit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.printEdit(java.lang.Long,org.springframework.ui.Model)
2019-05-15 15:01:31 -Mapped "{[/print/print/exprotPrint],methods=[GET]}" onto public void com.bootdo.print.controller.PrintController.exprotPrint(com.bootdo.print.vo.PrintVo,javax.servlet.http.HttpServletResponse)
2019-05-15 15:01:31 -Mapped "{[/print/print/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.edit(java.lang.Long,org.springframework.ui.Model)
2019-05-15 15:01:31 -Mapped "{[/print/print],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.Print()
2019-05-15 15:01:31 -Mapped "{[/system/sysDept/add/{pId}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.add(java.lang.Long,org.springframework.ui.Model)
2019-05-15 15:01:31 -Mapped "{[/system/sysDept/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.remove(java.lang.Long)
2019-05-15 15:01:31 -Mapped "{[/system/sysDept/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.remove(java.lang.Long[])
2019-05-15 15:01:31 -Mapped "{[/system/sysDept/update]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.update(com.bootdo.system.domain.DeptDO)
2019-05-15 15:01:31 -Mapped "{[/system/sysDept/list],methods=[GET]}" onto public java.util.List<com.bootdo.system.domain.DeptDO> com.bootdo.system.controller.DeptController.list()
2019-05-15 15:01:31 -Mapped "{[/system/sysDept/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.save(com.bootdo.system.domain.DeptDO)
2019-05-15 15:01:31 -Mapped "{[/system/sysDept/tree],methods=[GET]}" onto public com.bootdo.common.domain.Tree<com.bootdo.system.domain.DeptDO> com.bootdo.system.controller.DeptController.tree()
2019-05-15 15:01:31 -Mapped "{[/system/sysDept/treeView],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.treeView()
2019-05-15 15:01:31 -Mapped "{[/system/sysDept],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.dept()
2019-05-15 15:01:31 -Mapped "{[/system/sysDept/edit/{deptId}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.edit(java.lang.Long,org.springframework.ui.Model)
2019-05-15 15:01:31 -Mapped "{[/index],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.index(org.springframework.ui.Model)
2019-05-15 15:01:31 -Mapped "{[/main],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.main()
2019-05-15 15:01:31 -Mapped "{[/logout],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.logout()
2019-05-15 15:01:31 -Mapped "{[/login],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.LoginController.ajaxLogin(java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest)
2019-05-15 15:01:31 -Mapped "{[/ || ],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.welcome(org.springframework.ui.Model)
2019-05-15 15:01:31 -Mapped "{[/getVerify],methods=[GET]}" onto public void com.bootdo.system.controller.LoginController.getVerify(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-05-15 15:01:31 -Mapped "{[/login],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.login(org.springframework.ui.Model)
2019-05-15 15:01:31 -Mapped "{[/sys/menu/add/{pId}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.MenuController.add(org.springframework.ui.Model,java.lang.Long)
2019-05-15 15:01:31 -Mapped "{[/sys/menu/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.MenuController.remove(java.lang.Long)
2019-05-15 15:01:31 -Mapped "{[/sys/menu/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.MenuController.update(com.bootdo.system.domain.MenuDO)
2019-05-15 15:01:31 -Mapped "{[/sys/menu/list]}" onto java.util.List<com.bootdo.system.domain.MenuDO> com.bootdo.system.controller.MenuController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 15:01:31 -Mapped "{[/sys/menu/save],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.MenuController.save(com.bootdo.system.domain.MenuDO)
2019-05-15 15:01:31 -Mapped "{[/sys/menu/tree/{roleId}],methods=[GET]}" onto com.bootdo.common.domain.Tree<com.bootdo.system.domain.MenuDO> com.bootdo.system.controller.MenuController.tree(java.lang.Long)
2019-05-15 15:01:31 -Mapped "{[/sys/menu/tree],methods=[GET]}" onto com.bootdo.common.domain.Tree<com.bootdo.system.domain.MenuDO> com.bootdo.system.controller.MenuController.tree()
2019-05-15 15:01:31 -Mapped "{[/sys/menu],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.MenuController.menu(org.springframework.ui.Model)
2019-05-15 15:01:31 -Mapped "{[/sys/menu/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.MenuController.edit(org.springframework.ui.Model,java.lang.Long)
2019-05-15 15:01:31 -Mapped "{[/sys/role/add],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.RoleController.add()
2019-05-15 15:01:31 -Mapped "{[/sys/role/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.update(com.bootdo.system.domain.RoleDO)
2019-05-15 15:01:31 -Mapped "{[/sys/role/list],methods=[GET]}" onto java.util.List<com.bootdo.system.domain.RoleDO> com.bootdo.system.controller.RoleController.list()
2019-05-15 15:01:31 -Mapped "{[/sys/role/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.save(java.lang.Long)
2019-05-15 15:01:31 -Mapped "{[/sys/role/save],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.save(com.bootdo.system.domain.RoleDO)
2019-05-15 15:01:31 -Mapped "{[/sys/role/batchRemove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.batchRemove(java.lang.Long[])
2019-05-15 15:01:31 -Mapped "{[/sys/role],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.RoleController.role()
2019-05-15 15:01:31 -Mapped "{[/sys/role/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.RoleController.edit(java.lang.Long,org.springframework.ui.Model)
2019-05-15 15:01:31 -Mapped "{[/sys/online/list]}" onto public java.util.List<com.bootdo.system.domain.UserOnline> com.bootdo.system.controller.SessionController.list()
2019-05-15 15:01:31 -Mapped "{[/sys/online/forceLogout/{sessionId}]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.SessionController.forceLogout(java.lang.String,org.springframework.web.servlet.mvc.support.RedirectAttributes)
2019-05-15 15:01:31 -Mapped "{[/sys/online/sessionList]}" onto public java.util.Collection<org.apache.shiro.session.Session> com.bootdo.system.controller.SessionController.sessionList()
2019-05-15 15:01:31 -Mapped "{[/sys/online],methods=[GET]}" onto public java.lang.String com.bootdo.system.controller.SessionController.online()
2019-05-15 15:01:31 -Mapped "{[/sys/user/exit],methods=[POST]}" onto boolean com.bootdo.system.controller.UserController.exit(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 15:01:31 -Mapped "{[/sys/user/add],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.add(org.springframework.ui.Model)
2019-05-15 15:01:31 -Mapped "{[/sys/user/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.remove(java.lang.Long)
2019-05-15 15:01:31 -Mapped "{[/sys/user/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.update(com.bootdo.system.domain.UserDO)
2019-05-15 15:01:31 -Mapped "{[/sys/user/list],methods=[GET]}" onto com.bootdo.common.utils.PageUtils com.bootdo.system.controller.UserController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 15:01:31 -Mapped "{[/sys/user/save],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.save(com.bootdo.system.domain.UserDO)
2019-05-15 15:01:31 -Mapped "{[/sys/user/batchRemove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.batchRemove(java.lang.Long[])
2019-05-15 15:01:31 -Mapped "{[/sys/user/tree],methods=[GET]}" onto public com.bootdo.common.domain.Tree<com.bootdo.system.domain.DeptDO> com.bootdo.system.controller.UserController.tree()
2019-05-15 15:01:31 -Mapped "{[/sys/user],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.user(org.springframework.ui.Model)
2019-05-15 15:01:31 -Mapped "{[/sys/user/treeView],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.treeView()
2019-05-15 15:01:31 -Mapped "{[/sys/user/updatePeronal],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.updatePeronal(com.bootdo.system.domain.UserDO)
2019-05-15 15:01:31 -Mapped "{[/sys/user/resetPwd],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.resetPwd(com.bootdo.system.vo.UserVO)
2019-05-15 15:01:31 -Mapped "{[/sys/user/resetPwd/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.resetPwd(java.lang.Long,org.springframework.ui.Model)
2019-05-15 15:01:31 -Mapped "{[/sys/user/personal],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.personal(org.springframework.ui.Model)
2019-05-15 15:01:31 -Mapped "{[/sys/user/uploadImg],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.uploadImg(org.springframework.web.multipart.MultipartFile,java.lang.String,javax.servlet.http.HttpServletRequest)
2019-05-15 15:01:31 -Mapped "{[/sys/user/adminResetPwd],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.adminResetPwd(com.bootdo.system.vo.UserVO)
2019-05-15 15:01:31 -Mapped "{[/sys/user/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.edit(org.springframework.ui.Model,java.lang.Long)
2019-05-15 15:01:31 -Mapped "{[/file/downImport/{importType}],methods=[GET]}" onto public void com.bootdo.temple.controller.TempletController.downImport(javax.servlet.http.HttpServletResponse,java.lang.String)
2019-05-15 15:01:31 -Mapped "{[/water/water/add],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterController.add()
2019-05-15 15:01:31 -Mapped "{[/water/water/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterController.remove(java.lang.Long)
2019-05-15 15:01:31 -Mapped "{[/water/water/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterController.remove(java.lang.Long[])
2019-05-15 15:01:31 -Mapped "{[/water/water/update]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterController.update(com.bootdo.water.domain.WaterDO)
2019-05-15 15:01:31 -Mapped "{[/water/water/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.water.controller.WaterController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 15:01:31 -Mapped "{[/water/water/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterController.save(com.bootdo.water.domain.WaterDO)
2019-05-15 15:01:31 -Mapped "{[/water/water],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterController.Water()
2019-05-15 15:01:31 -Mapped "{[/water/water/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterController.edit(java.lang.Long,org.springframework.ui.Model)
2019-05-15 15:01:31 -Mapped "{[/water/water/exprotWater],methods=[GET]}" onto public void com.bootdo.water.controller.WaterController.exprotExcel(com.bootdo.water.vo.WaterVo,javax.servlet.http.HttpServletResponse)
2019-05-15 15:01:31 -Mapped "{[/water/waterInto],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterIntoController.WaterInto()
2019-05-15 15:01:31 -Mapped "{[/water/waterInto/exprotWaterIntoExcel],methods=[GET]}" onto public void com.bootdo.water.controller.WaterIntoController.exprotExcel(com.bootdo.water.vo.WaterVo,javax.servlet.http.HttpServletResponse)
2019-05-15 15:01:31 -Mapped "{[/water/waterInto/importWaterIntoExcel],methods=[POST]}" onto public java.lang.String com.bootdo.water.controller.WaterIntoController.importWaterIntoExcel(org.springframework.web.multipart.MultipartFile,com.bootdo.water.vo.WaterVo,javax.servlet.http.HttpServletResponse) throws java.lang.Exception
2019-05-15 15:01:31 -Mapped "{[/water/waterPrice/add],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterPriceController.add()
2019-05-15 15:01:31 -Mapped "{[/water/waterPrice/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterPriceController.remove(java.lang.Long)
2019-05-15 15:01:31 -Mapped "{[/water/waterPrice/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterPriceController.remove(java.lang.Long[])
2019-05-15 15:01:31 -Mapped "{[/water/waterPrice/update]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterPriceController.update(com.bootdo.water.domain.WaterPriceDO)
2019-05-15 15:01:31 -Mapped "{[/water/waterPrice/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.water.controller.WaterPriceController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 15:01:31 -Mapped "{[/water/waterPrice/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterPriceController.save(com.bootdo.water.domain.WaterPriceDO)
2019-05-15 15:01:31 -Mapped "{[/water/waterPrice],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterPriceController.WaterPrice()
2019-05-15 15:01:31 -Mapped "{[/water/waterPrice/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterPriceController.edit(java.lang.Long,org.springframework.ui.Model)
2019-05-15 15:01:31 -Mapped "{[/water/waterUpLoad/createWaterExcel],methods=[POST]}" onto public java.lang.String com.bootdo.water.controller.WaterUpLoadController.createWaterExcel(com.bootdo.water.domain.WaterDO) throws java.lang.Exception
2019-05-15 15:01:31 -Mapped "{[/water/waterUpLoad/exprotWaterExcel],methods=[GET]}" onto public void com.bootdo.water.controller.WaterUpLoadController.exprotWaterExcel(com.bootdo.water.vo.WaterVo,javax.servlet.http.HttpServletResponse)
2019-05-15 15:01:31 -Mapped "{[/water/waterUpLoad],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterUpLoadController.WaterUpLoad()
2019-05-15 15:01:31 -Mapped "{[/water/waterUpLoad/importWaterExcel]}" onto public java.lang.String com.bootdo.water.controller.WaterUpLoadController.importWaterExcel(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)
2019-05-15 15:01:31 -Mapped "{[/v2/api-docs],methods=[GET],produces=[application/json || application/hal+json]}" onto public org.springframework.http.ResponseEntity<springfox.documentation.spring.web.json.Json> springfox.documentation.swagger2.web.Swagger2Controller.getDocumentation(java.lang.String,javax.servlet.http.HttpServletRequest)
2019-05-15 15:01:31 -Mapped "{[/swagger-resources/configuration/ui]}" onto org.springframework.http.ResponseEntity<springfox.documentation.swagger.web.UiConfiguration> springfox.documentation.swagger.web.ApiResourceController.uiConfiguration()
2019-05-15 15:01:31 -Mapped "{[/swagger-resources]}" onto org.springframework.http.ResponseEntity<java.util.List<springfox.documentation.swagger.web.SwaggerResource>> springfox.documentation.swagger.web.ApiResourceController.swaggerResources()
2019-05-15 15:01:31 -Mapped "{[/swagger-resources/configuration/security]}" onto org.springframework.http.ResponseEntity<springfox.documentation.swagger.web.SecurityConfiguration> springfox.documentation.swagger.web.ApiResourceController.securityConfiguration()
2019-05-15 15:01:31 -Initializing ExecutorService  'messageBrokerTaskScheduler'
2019-05-15 15:01:32 -Mapped URL path [/endpointChat/**] onto handler of type [class org.springframework.web.socket.sockjs.support.SockJsHttpRequestHandler]
2019-05-15 15:01:32 -Initializing ExecutorService  'brokerChannelExecutor'
2019-05-15 15:01:32 -Mapped URL path [/**/favicon.ico] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-05-15 15:01:33 -Looking for @ControllerAdvice: org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@4d5650ae: startup date [Wed May 15 15:00:55 CST 2019]; root of context hierarchy
2019-05-15 15:01:33 -Mapped URL path [/webjars/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-05-15 15:01:33 -Mapped URL path [/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-05-15 15:01:33 -Mapped URL path [/files/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-05-15 15:01:33 -Detected @ExceptionHandler methods in BDExceptionHandler
2019-05-15 15:01:33 -[THYMELEAF][main] Template Mode 'LEGACYHTML5' is deprecated. Using Template Mode 'HTML' instead.
2019-05-15 15:01:36 -Registering beans for JMX exposure on startup
2019-05-15 15:01:36 -Bean with name 'dataSource' has been autodetected for JMX exposure
2019-05-15 15:01:36 -Located MBean 'dataSource': registering with JMX server as MBean [com.alibaba.druid.pool:name=dataSource,type=DruidDataSource]
2019-05-15 15:01:36 -Starting beans in phase 2147483647
2019-05-15 15:01:36 -Context refreshed
2019-05-15 15:01:36 -Found 1 custom documentation plugin(s)
2019-05-15 15:01:37 -Scanning for api listing references
2019-05-15 15:01:37 -Generating unique operation named: getCountDUsingPOST_1
2019-05-15 15:01:37 -Generating unique operation named: removeUsingPOST_1
2019-05-15 15:01:37 -Generating unique operation named: addUsingGET_1
2019-05-15 15:01:37 -Generating unique operation named: editUsingGET_1
2019-05-15 15:01:37 -Generating unique operation named: listUsingGET_1
2019-05-15 15:01:37 -Generating unique operation named: removeUsingPOST_2
2019-05-15 15:01:37 -Generating unique operation named: removeUsingPOST_3
2019-05-15 15:01:37 -Generating unique operation named: saveUsingPOST_1
2019-05-15 15:01:37 -Generating unique operation named: updateUsingGET_1
2019-05-15 15:01:37 -Generating unique operation named: updateUsingHEAD_1
2019-05-15 15:01:37 -Generating unique operation named: updateUsingPOST_1
2019-05-15 15:01:38 -Generating unique operation named: updateUsingPUT_1
2019-05-15 15:01:38 -Generating unique operation named: updateUsingPATCH_1
2019-05-15 15:01:38 -Generating unique operation named: updateUsingDELETE_1
2019-05-15 15:01:38 -Generating unique operation named: updateUsingOPTIONS_1
2019-05-15 15:01:38 -Generating unique operation named: updateUsingTRACE_1
2019-05-15 15:01:38 -Generating unique operation named: addUsingGET_2
2019-05-15 15:01:38 -Generating unique operation named: editUsingGET_2
2019-05-15 15:01:38 -Generating unique operation named: listUsingGET_2
2019-05-15 15:01:38 -Generating unique operation named: removeUsingPOST_4
2019-05-15 15:01:38 -Generating unique operation named: removeUsingPOST_5
2019-05-15 15:01:38 -Generating unique operation named: saveUsingPOST_2
2019-05-15 15:01:38 -Generating unique operation named: updateUsingPOST_2
2019-05-15 15:01:38 -Generating unique operation named: exprotExcelUsingGET_1
2019-05-15 15:01:38 -Generating unique operation named: addUsingGET_3
2019-05-15 15:01:38 -Generating unique operation named: editUsingGET_3
2019-05-15 15:01:38 -Generating unique operation named: listUsingGET_3
2019-05-15 15:01:38 -Generating unique operation named: removeUsingPOST_6
2019-05-15 15:01:38 -Generating unique operation named: removeUsingPOST_7
2019-05-15 15:01:38 -Generating unique operation named: saveUsingPOST_3
2019-05-15 15:01:38 -Generating unique operation named: updateUsingGET_2
2019-05-15 15:01:38 -Generating unique operation named: updateUsingHEAD_2
2019-05-15 15:01:38 -Generating unique operation named: updateUsingPOST_3
2019-05-15 15:01:38 -Generating unique operation named: updateUsingPUT_2
2019-05-15 15:01:38 -Generating unique operation named: updateUsingPATCH_2
2019-05-15 15:01:38 -Generating unique operation named: updateUsingDELETE_2
2019-05-15 15:01:38 -Generating unique operation named: updateUsingOPTIONS_2
2019-05-15 15:01:38 -Generating unique operation named: updateUsingTRACE_2
2019-05-15 15:01:38 -Generating unique operation named: addUsingGET_4
2019-05-15 15:01:38 -Generating unique operation named: editUsingGET_4
2019-05-15 15:01:38 -Generating unique operation named: listUsingGET_4
2019-05-15 15:01:38 -Generating unique operation named: removeUsingPOST_8
2019-05-15 15:01:38 -Generating unique operation named: removeUsingPOST_9
2019-05-15 15:01:38 -Generating unique operation named: saveUsingPOST_4
2019-05-15 15:01:38 -Generating unique operation named: updateUsingGET_3
2019-05-15 15:01:38 -Generating unique operation named: updateUsingHEAD_3
2019-05-15 15:01:38 -Generating unique operation named: updateUsingPOST_4
2019-05-15 15:01:38 -Generating unique operation named: updateUsingPUT_3
2019-05-15 15:01:38 -Generating unique operation named: updateUsingPATCH_3
2019-05-15 15:01:38 -Generating unique operation named: updateUsingDELETE_3
2019-05-15 15:01:38 -Generating unique operation named: updateUsingOPTIONS_3
2019-05-15 15:01:38 -Generating unique operation named: updateUsingTRACE_3
2019-05-15 15:01:38 -Generating unique operation named: ElecUsingGET_1
2019-05-15 15:01:38 -Generating unique operation named: addUsingGET_5
2019-05-15 15:01:38 -Generating unique operation named: editUsingGET_5
2019-05-15 15:01:38 -Generating unique operation named: listUsingGET_5
2019-05-15 15:01:38 -Generating unique operation named: removeUsingPOST_10
2019-05-15 15:01:38 -Generating unique operation named: removeUsingPOST_11
2019-05-15 15:01:38 -Generating unique operation named: saveUsingPOST_5
2019-05-15 15:01:38 -Generating unique operation named: updateUsingGET_4
2019-05-15 15:01:38 -Generating unique operation named: updateUsingHEAD_4
2019-05-15 15:01:38 -Generating unique operation named: updateUsingPOST_5
2019-05-15 15:01:38 -Generating unique operation named: updateUsingPUT_4
2019-05-15 15:01:38 -Generating unique operation named: updateUsingPATCH_4
2019-05-15 15:01:38 -Generating unique operation named: updateUsingDELETE_4
2019-05-15 15:01:38 -Generating unique operation named: updateUsingOPTIONS_4
2019-05-15 15:01:38 -Generating unique operation named: updateUsingTRACE_4
2019-05-15 15:01:38 -Generating unique operation named: editUsingGET_6
2019-05-15 15:01:38 -Generating unique operation named: listUsingGET_6
2019-05-15 15:01:38 -Generating unique operation named: updateUsingPOST_6
2019-05-15 15:01:38 -Generating unique operation named: addUsingGET_6
2019-05-15 15:01:38 -Generating unique operation named: editUsingGET_7
2019-05-15 15:01:38 -Generating unique operation named: exprotExcelUsingGET_2
2019-05-15 15:01:38 -Generating unique operation named: listUsingGET_7
2019-05-15 15:01:38 -Generating unique operation named: removeUsingPOST_12
2019-05-15 15:01:38 -Generating unique operation named: removeUsingPOST_13
2019-05-15 15:01:38 -Generating unique operation named: saveUsingPOST_6
2019-05-15 15:01:38 -Generating unique operation named: updateUsingGET_5
2019-05-15 15:01:38 -Generating unique operation named: updateUsingHEAD_5
2019-05-15 15:01:38 -Generating unique operation named: updateUsingPOST_7
2019-05-15 15:01:38 -Generating unique operation named: updateUsingPUT_5
2019-05-15 15:01:38 -Generating unique operation named: updateUsingPATCH_5
2019-05-15 15:01:38 -Generating unique operation named: updateUsingDELETE_5
2019-05-15 15:01:38 -Generating unique operation named: updateUsingOPTIONS_5
2019-05-15 15:01:38 -Generating unique operation named: updateUsingTRACE_5
2019-05-15 15:01:38 -Generating unique operation named: exprotExcelUsingGET_3
2019-05-15 15:01:38 -Generating unique operation named: addUsingGET_7
2019-05-15 15:01:38 -Generating unique operation named: editUsingGET_8
2019-05-15 15:01:38 -Generating unique operation named: listUsingGET_8
2019-05-15 15:01:38 -Generating unique operation named: removeUsingPOST_14
2019-05-15 15:01:38 -Generating unique operation named: removeUsingPOST_15
2019-05-15 15:01:38 -Generating unique operation named: saveUsingPOST_7
2019-05-15 15:01:38 -Generating unique operation named: updateUsingGET_6
2019-05-15 15:01:38 -Generating unique operation named: updateUsingHEAD_6
2019-05-15 15:01:38 -Generating unique operation named: updateUsingPOST_8
2019-05-15 15:01:38 -Generating unique operation named: updateUsingPUT_6
2019-05-15 15:01:38 -Generating unique operation named: updateUsingPATCH_6
2019-05-15 15:01:38 -Generating unique operation named: updateUsingDELETE_6
2019-05-15 15:01:38 -Generating unique operation named: updateUsingOPTIONS_6
2019-05-15 15:01:38 -Generating unique operation named: updateUsingTRACE_6
2019-05-15 15:01:38 -Generating unique operation named: addUsingGET_8
2019-05-15 15:01:38 -Generating unique operation named: editUsingGET_9
2019-05-15 15:01:38 -Generating unique operation named: listUsingGET_9
2019-05-15 15:01:38 -Generating unique operation named: removeUsingPOST_16
2019-05-15 15:01:38 -Generating unique operation named: removeUsingPOST_17
2019-05-15 15:01:38 -Generating unique operation named: saveUsingPOST_8
2019-05-15 15:01:38 -Generating unique operation named: updateUsingGET_7
2019-05-15 15:01:38 -Generating unique operation named: updateUsingHEAD_7
2019-05-15 15:01:38 -Generating unique operation named: updateUsingPOST_9
2019-05-15 15:01:38 -Generating unique operation named: updateUsingPUT_7
2019-05-15 15:01:38 -Generating unique operation named: updateUsingPATCH_7
2019-05-15 15:01:38 -Generating unique operation named: updateUsingDELETE_7
2019-05-15 15:01:38 -Generating unique operation named: updateUsingOPTIONS_7
2019-05-15 15:01:38 -Generating unique operation named: updateUsingTRACE_7
2019-05-15 15:01:38 -Generating unique operation named: addUsingGET_9
2019-05-15 15:01:38 -Generating unique operation named: editUsingGET_10
2019-05-15 15:01:38 -Generating unique operation named: infoUsingGET_1
2019-05-15 15:01:38 -Generating unique operation named: infoUsingHEAD_1
2019-05-15 15:01:38 -Generating unique operation named: infoUsingPOST_1
2019-05-15 15:01:38 -Generating unique operation named: infoUsingPUT_1
2019-05-15 15:01:38 -Generating unique operation named: infoUsingPATCH_1
2019-05-15 15:01:38 -Generating unique operation named: infoUsingDELETE_1
2019-05-15 15:01:38 -Generating unique operation named: infoUsingOPTIONS_1
2019-05-15 15:01:38 -Generating unique operation named: infoUsingTRACE_1
2019-05-15 15:01:38 -Generating unique operation named: listUsingGET_10
2019-05-15 15:01:38 -Generating unique operation named: removeUsingPOST_18
2019-05-15 15:01:38 -Generating unique operation named: removeUsingPOST_19
2019-05-15 15:01:38 -Generating unique operation named: saveUsingPOST_9
2019-05-15 15:01:38 -Generating unique operation named: updateUsingPOST_10
2019-05-15 15:01:38 -Generating unique operation named: listUsingGET_11
2019-05-15 15:01:38 -Generating unique operation named: removeUsingPOST_20
2019-05-15 15:01:39 -Generating unique operation named: welcomeUsingGET_1
2019-05-15 15:01:39 -Generating unique operation named: addUsingGET_10
2019-05-15 15:01:39 -Generating unique operation named: editUsingGET_11
2019-05-15 15:01:39 -Generating unique operation named: listUsingGET_12
2019-05-15 15:01:39 -Generating unique operation named: removeUsingPOST_21
2019-05-15 15:01:39 -Generating unique operation named: saveUsingPOST_10
2019-05-15 15:01:39 -Generating unique operation named: treeUsingGET_1
2019-05-15 15:01:39 -Generating unique operation named: treeUsingGET_2
2019-05-15 15:01:39 -Generating unique operation named: updateUsingPOST_11
2019-05-15 15:01:39 -Generating unique operation named: addUsingGET_11
2019-05-15 15:01:39 -Generating unique operation named: editUsingGET_12
2019-05-15 15:01:39 -Generating unique operation named: listUsingGET_13
2019-05-15 15:01:39 -Generating unique operation named: removeUsingPOST_22
2019-05-15 15:01:39 -Generating unique operation named: removeUsingPOST_23
2019-05-15 15:01:39 -Generating unique operation named: saveUsingPOST_11
2019-05-15 15:01:39 -Generating unique operation named: updateUsingGET_8
2019-05-15 15:01:39 -Generating unique operation named: updateUsingHEAD_8
2019-05-15 15:01:39 -Generating unique operation named: updateUsingPOST_12
2019-05-15 15:01:39 -Generating unique operation named: updateUsingPUT_8
2019-05-15 15:01:39 -Generating unique operation named: updateUsingPATCH_8
2019-05-15 15:01:39 -Generating unique operation named: updateUsingDELETE_8
2019-05-15 15:01:39 -Generating unique operation named: updateUsingOPTIONS_8
2019-05-15 15:01:39 -Generating unique operation named: updateUsingTRACE_8
2019-05-15 15:01:39 -Generating unique operation named: addUsingGET_12
2019-05-15 15:01:39 -Generating unique operation named: editUsingGET_13
2019-05-15 15:01:39 -Generating unique operation named: listUsingGET_14
2019-05-15 15:01:39 -Generating unique operation named: removeUsingPOST_24
2019-05-15 15:01:39 -Generating unique operation named: removeUsingPOST_25
2019-05-15 15:01:39 -Generating unique operation named: saveUsingPOST_12
2019-05-15 15:01:39 -Generating unique operation named: updateUsingGET_9
2019-05-15 15:01:39 -Generating unique operation named: updateUsingHEAD_9
2019-05-15 15:01:39 -Generating unique operation named: updateUsingPOST_13
2019-05-15 15:01:39 -Generating unique operation named: updateUsingPUT_9
2019-05-15 15:01:39 -Generating unique operation named: updateUsingPATCH_9
2019-05-15 15:01:39 -Generating unique operation named: updateUsingDELETE_9
2019-05-15 15:01:39 -Generating unique operation named: updateUsingOPTIONS_9
2019-05-15 15:01:39 -Generating unique operation named: updateUsingTRACE_9
2019-05-15 15:01:39 -Generating unique operation named: addUsingGET_13
2019-05-15 15:01:39 -Generating unique operation named: batchRemoveUsingPOST_1
2019-05-15 15:01:39 -Generating unique operation named: editUsingGET_14
2019-05-15 15:01:39 -Generating unique operation named: listUsingGET_15
2019-05-15 15:01:39 -Generating unique operation named: saveUsingPOST_13
2019-05-15 15:01:39 -Generating unique operation named: saveUsingPOST_14
2019-05-15 15:01:39 -Generating unique operation named: updateUsingPOST_14
2019-05-15 15:01:39 -Generating unique operation named: listUsingGET_16
2019-05-15 15:01:39 -Generating unique operation named: listUsingHEAD_1
2019-05-15 15:01:39 -Generating unique operation named: listUsingPOST_1
2019-05-15 15:01:39 -Generating unique operation named: listUsingPUT_1
2019-05-15 15:01:39 -Generating unique operation named: listUsingPATCH_1
2019-05-15 15:01:39 -Generating unique operation named: listUsingDELETE_1
2019-05-15 15:01:39 -Generating unique operation named: listUsingOPTIONS_1
2019-05-15 15:01:39 -Generating unique operation named: listUsingTRACE_1
2019-05-15 15:01:39 -Generating unique operation named: countDDUsingGET_1
2019-05-15 15:01:39 -Generating unique operation named: exportDDUsingGET_1
2019-05-15 15:01:39 -Generating unique operation named: getCountYYUsingPOST_1
2019-05-15 15:01:39 -Generating unique operation named: getCountMMUsingPOST_1
2019-05-15 15:01:39 -Generating unique operation named: addUsingGET_14
2019-05-15 15:01:39 -Generating unique operation named: batchRemoveUsingPOST_2
2019-05-15 15:01:39 -Generating unique operation named: editUsingGET_15
2019-05-15 15:01:39 -Generating unique operation named: listUsingGET_17
2019-05-15 15:01:39 -Generating unique operation named: removeUsingPOST_26
2019-05-15 15:01:39 -Generating unique operation named: saveUsingPOST_15
2019-05-15 15:01:39 -Generating unique operation named: treeUsingGET_3
2019-05-15 15:01:39 -Generating unique operation named: treeViewUsingGET_1
2019-05-15 15:01:39 -Generating unique operation named: updateUsingPOST_15
2019-05-15 15:01:39 -Generating unique operation named: addUsingGET_15
2019-05-15 15:01:39 -Generating unique operation named: editUsingGET_16
2019-05-15 15:01:39 -Generating unique operation named: exprotExcelUsingGET_4
2019-05-15 15:01:39 -Generating unique operation named: listUsingGET_18
2019-05-15 15:01:39 -Generating unique operation named: removeUsingPOST_27
2019-05-15 15:01:39 -Generating unique operation named: removeUsingPOST_28
2019-05-15 15:01:39 -Generating unique operation named: saveUsingPOST_16
2019-05-15 15:01:39 -Generating unique operation named: updateUsingGET_10
2019-05-15 15:01:39 -Generating unique operation named: updateUsingHEAD_10
2019-05-15 15:01:39 -Generating unique operation named: updateUsingPOST_16
2019-05-15 15:01:39 -Generating unique operation named: updateUsingPUT_10
2019-05-15 15:01:39 -Generating unique operation named: updateUsingPATCH_10
2019-05-15 15:01:39 -Generating unique operation named: updateUsingDELETE_10
2019-05-15 15:01:39 -Generating unique operation named: updateUsingOPTIONS_10
2019-05-15 15:01:39 -Generating unique operation named: updateUsingTRACE_10
2019-05-15 15:01:39 -Generating unique operation named: exprotExcelUsingGET_5
2019-05-15 15:01:39 -Generating unique operation named: addUsingGET_16
2019-05-15 15:01:40 -Generating unique operation named: editUsingGET_17
2019-05-15 15:01:40 -Generating unique operation named: listUsingGET_19
2019-05-15 15:01:40 -Generating unique operation named: removeUsingPOST_29
2019-05-15 15:01:40 -Generating unique operation named: removeUsingPOST_30
2019-05-15 15:01:40 -Generating unique operation named: saveUsingPOST_17
2019-05-15 15:01:40 -Generating unique operation named: updateUsingGET_11
2019-05-15 15:01:40 -Generating unique operation named: updateUsingHEAD_11
2019-05-15 15:01:40 -Generating unique operation named: updateUsingPOST_17
2019-05-15 15:01:40 -Generating unique operation named: updateUsingPUT_11
2019-05-15 15:01:40 -Generating unique operation named: updateUsingPATCH_11
2019-05-15 15:01:40 -Generating unique operation named: updateUsingDELETE_11
2019-05-15 15:01:40 -Generating unique operation named: updateUsingOPTIONS_11
2019-05-15 15:01:40 -Generating unique operation named: updateUsingTRACE_11
2019-05-15 15:01:40 -Generating unique operation named: addUsingGET_17
2019-05-15 15:01:40 -Generating unique operation named: editUsingGET_18
2019-05-15 15:01:40 -Generating unique operation named: listUsingGET_20
2019-05-15 15:01:40 -Generating unique operation named: removeUsingPOST_31
2019-05-15 15:01:40 -Generating unique operation named: removeUsingPOST_32
2019-05-15 15:01:40 -Generating unique operation named: saveUsingPOST_18
2019-05-15 15:01:40 -Generating unique operation named: updateUsingGET_12
2019-05-15 15:01:40 -Generating unique operation named: updateUsingHEAD_12
2019-05-15 15:01:40 -Generating unique operation named: updateUsingPOST_18
2019-05-15 15:01:40 -Generating unique operation named: updateUsingPUT_12
2019-05-15 15:01:40 -Generating unique operation named: updateUsingPATCH_12
2019-05-15 15:01:40 -Generating unique operation named: updateUsingDELETE_12
2019-05-15 15:01:40 -Generating unique operation named: updateUsingOPTIONS_12
2019-05-15 15:01:40 -Generating unique operation named: updateUsingTRACE_12
2019-05-15 15:01:40 -Starting Quartz Scheduler now
2019-05-15 15:01:40 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED started.
2019-05-15 15:01:40 -Starting...
2019-05-15 15:01:40 -BrokerAvailabilityEvent[available=true, SimpleBrokerMessageHandler [DefaultSubscriptionRegistry[cache[0 destination(s)], registry[0 sessions]]]]
2019-05-15 15:01:40 -Started.
2019-05-15 15:01:40 -Starting ProtocolHandler ["http-nio-8081"]
2019-05-15 15:01:40 -Using a shared selector for servlet write/read
2019-05-15 15:01:40 -Tomcat started on port(s): 8081 (http) with context path ''
2019-05-15 15:01:40 -Started BootdoApplication in 47.128 seconds (JVM running for 47.893)
2019-05-15 15:01:40 -==>  Preparing: select `id`,`cron_expression`,`method_name`,`is_concurrent`,`description`,`update_by`,`bean_class`,`create_date`,`job_status`,`job_group`,`update_date`,`create_by`,`spring_bean`,`job_name` from sys_task order by id desc 
2019-05-15 15:01:41 -==> Parameters: 
2019-05-15 15:01:41 -<==      Total: 1
2019-05-15 15:01:46 -Initializing Spring FrameworkServlet 'dispatcherServlet'
2019-05-15 15:01:46 -FrameworkServlet 'dispatcherServlet': initialization started
2019-05-15 15:01:46 -FrameworkServlet 'dispatcherServlet': initialization completed in 74 ms
2019-05-15 15:01:46 -Enabling session validation scheduler...
2019-05-15 15:01:47 -请求地址 : http://localhost:8081/login;JSESSIONID=312c3520-a026-4578-9dfa-1edebbf5a23f
2019-05-15 15:01:47 -HTTP METHOD : GET
2019-05-15 15:01:47 -CLASS_METHOD : com.bootdo.system.controller.LoginController.login
2019-05-15 15:01:47 -参数 : [{}]
2019-05-15 15:01:47 -耗时 : 6
2019-05-15 15:01:47 -返回值 : login
2019-05-15 15:01:49 -请求地址 : http://localhost:8081/getVerify
2019-05-15 15:01:49 -HTTP METHOD : GET
2019-05-15 15:01:49 -CLASS_METHOD : com.bootdo.system.controller.LoginController.getVerify
2019-05-15 15:01:49 -参数 : [org.apache.shiro.web.servlet.ShiroHttpServletRequest@24aedf01, org.apache.shiro.web.servlet.ShiroHttpServletResponse@6ea20c06]
2019-05-15 15:01:49 -请求地址 : http://localhost:8081/login;JSESSIONID=312c3520-a026-4578-9dfa-1edebbf5a23f
2019-05-15 15:01:49 -HTTP METHOD : GET
2019-05-15 15:01:49 -CLASS_METHOD : com.bootdo.system.controller.LoginController.login
2019-05-15 15:01:49 -参数 : [{}]
2019-05-15 15:01:49 -耗时 : 1
2019-05-15 15:01:49 -返回值 : login
2019-05-15 15:01:49 -请求地址 : http://localhost:8081/getVerify
2019-05-15 15:01:49 -HTTP METHOD : GET
2019-05-15 15:01:49 -CLASS_METHOD : com.bootdo.system.controller.LoginController.getVerify
2019-05-15 15:01:49 -参数 : [org.apache.shiro.web.servlet.ShiroHttpServletRequest@6c175397, org.apache.shiro.web.servlet.ShiroHttpServletResponse@31fc71d5]
2019-05-15 15:01:53 -6796
2019-05-15 15:01:53 -8608
2019-05-15 15:01:53 -耗时 : 4599
2019-05-15 15:01:53 -耗时 : 4242
2019-05-15 15:01:53 -返回值 : null
2019-05-15 15:01:53 -返回值 : null
2019-05-15 15:01:53 -请求地址 : http://localhost:8081/login
2019-05-15 15:01:53 -HTTP METHOD : GET
2019-05-15 15:01:53 -CLASS_METHOD : com.bootdo.system.controller.LoginController.login
2019-05-15 15:01:53 -参数 : [{}]
2019-05-15 15:01:53 -耗时 : 1
2019-05-15 15:01:53 -返回值 : login
2019-05-15 15:01:57 -请求地址 : http://localhost:8081/login
2019-05-15 15:01:57 -HTTP METHOD : POST
2019-05-15 15:01:57 -CLASS_METHOD : com.bootdo.system.controller.LoginController.ajaxLogin
2019-05-15 15:01:57 -参数 : [admin, 111111, 6796, org.apache.shiro.web.servlet.ShiroHttpServletRequest@2fb00b42]
2019-05-15 15:01:57 -==>  Preparing: select `user_id`,`username`,`name`,`password`,`dept_id`,`email`,`mobile`,`status`,`user_id_create`,`gmt_create`,`gmt_modified`,`sex`,`birth`,`pic_id`,`live_address`,`hobby`,`province`,`city`,`district` from sys_user WHERE username = ? order by user_id desc 
2019-05-15 15:01:57 -==> Parameters: admin(String)
2019-05-15 15:01:57 -<==      Total: 1
2019-05-15 15:01:57 -耗时 : 173
2019-05-15 15:01:57 -返回值 : {msg=操作成功, code=0}
2019-05-15 15:01:58 -More than one TaskExecutor bean found within the context, and none is named 'taskExecutor'. Mark one of them as primary or name it 'taskExecutor' (possibly as an alias) in order to use it for async processing: [clientInboundChannelExecutor, clientOutboundChannelExecutor, brokerChannelExecutor, messageBrokerTaskScheduler]
2019-05-15 15:01:58 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-05-15 15:01:58 -==> Parameters: 1(Long), admin(String), 登录(String), 173(Integer), com.bootdo.system.controller.LoginController.ajaxLogin()(String), null, 127.0.0.1(String), 2019-05-15 15:01:58.009(Timestamp)
2019-05-15 15:01:58 -<==    Updates: 1
2019-05-15 15:01:58 -请求地址 : http://localhost:8081/index
2019-05-15 15:01:58 -HTTP METHOD : GET
2019-05-15 15:01:58 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2019-05-15 15:01:58 -参数 : [{}]
2019-05-15 15:01:58 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2019-05-15 15:01:58 -==> Parameters: 1(Long)
2019-05-15 15:01:58 -<==      Total: 49
2019-05-15 15:01:58 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2019-05-15 15:01:58 -==> Parameters: 138(Long)
2019-05-15 15:01:58 -<==      Total: 1
2019-05-15 15:01:58 -耗时 : 250
2019-05-15 15:01:58 -返回值 : index_v1
2019-05-15 15:01:58 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-05-15 15:01:58 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 250(Integer), com.bootdo.system.controller.LoginController.index()(String), {"menus":[{"attributes":{"icon":"fa fa-money","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-money","url":"/moneyList/moneyList"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"102","parentId":"106","text":"现金缴费"},{"attributes":{"icon":"fa fa-book","url":"/moneyLog/elecLog"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"107","parentId":"106","text":"缴费记录"}],"hasChildren":true,"hasParent":false,"id":"106","parentId":"0","text":"收费管理"},{"attributes":{"icon":"fa fa-lightbulb-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/elec/elec"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"121","parentId":"103","text":"电费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"elec/elecInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"122","parentId":"103","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"elec/elecUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"123","parentId":"103","text":"电表上传"},{"attributes":{"icon":"fa fa-cc","url":"/elec/elecPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"124","parentId":"103","text":"电价管理"}],"hasChildren":true,"hasParent":false,"id":"103","parentId":"0","text":"电费管理"},{"attributes":{"icon":"fa fa-tint","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/water/water"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"117","parentId":"105","text":"水费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"water/waterInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"118","parentId":"105","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"water/waterUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"119","parentId":"105","text":"水费生成"},{"attributes":{"icon":"fa fa-cc","url":"/water/waterPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"120","parentId":"105","text":"水价管理"}],"hasChildren":true,"hasParent":false,"id":"105","parentId":"0","text":"水费管理"},{"attributes":{"icon":"fa fa-fire","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/heat/heat"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"113","parentId":"104","text":"暖费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"heat/heatInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"114","parentId":"104","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"heat/heatUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"115","parentId":"104","text":"暖费生成"},{"attributes":{"icon":"","url":"/heat/heatPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"116","parentId":"104","text":"暖价管理"}],"hasChildren":true,"hasParent":false,"id":"104","parentId":"0","text":"暖费管理"},{"attributes":{"icon":"fa fa-vcard-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-bomb","url":"/print/print"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"149","parentId":"108","text":"票据记录"}],"hasChildren":true,"hasParent":false,"id":"108","parentId":"0","text":"票据管理"},{"attributes":{"icon":"fa fa-bar-chart","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-area-chart","url":"/chart/graph_echarts.html"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","text":"百度chart"},{"attributes":{"icon":"fa fa-sun-o","url":"charts/countDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"109","parentId":"97","text":"日统计报表"},{"attributes":{"icon":"fa fa-calendar","url":"charts/tableDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"161","parentId":"97","text":"日统计表格"},{"attributes":{"icon":"fa fa-registered","url":"charts/countMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"110","parentId":"97","text":"月统计报表"},{"attributes":{"icon":"fa fa-building-o","url":"charts/tableElecMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"162","parentId":"97","text":"月统计表格"},{"attributes":{"icon":"fa fa-support","url":"charts/countYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"111","parentId":"97","text":"年统计报表"},{"attributes":{"icon":"fa fa-book","url":"charts/tableElecYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"163","parentId":"97","text":"年统计表格"},{"attributes":{"icon":"fa fa-money","url":"charts/countOwe"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"155","parentId":"97","text":"欠费报表图"},{"attributes":{"icon":"fa fa-tachometer","url":"charts/countRun"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"112"(String), 127.0.0.1(String), 2019-05-15 15:01:58.885(Timestamp)
2019-05-15 15:01:59 -<==    Updates: 1
2019-05-15 15:01:59 -请求地址 : http://localhost:8081/main
2019-05-15 15:01:59 -HTTP METHOD : GET
2019-05-15 15:01:59 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-05-15 15:01:59 -参数 : []
2019-05-15 15:01:59 -耗时 : 1
2019-05-15 15:01:59 -返回值 : main
2019-05-15 15:01:59 -请求地址 : http://localhost:8081/oa/notify/message
2019-05-15 15:01:59 -HTTP METHOD : GET
2019-05-15 15:01:59 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2019-05-15 15:01:59 -参数 : []
2019-05-15 15:01:59 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2019-05-15 15:01:59 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2019-05-15 15:01:59 -<==      Total: 0
2019-05-15 15:01:59 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2019-05-15 15:01:59 -==> Parameters: 1(Long), 0(String)
2019-05-15 15:01:59 -<==      Total: 1
2019-05-15 15:01:59 -耗时 : 78
2019-05-15 15:01:59 -返回值 : com.bootdo.common.utils.PageUtils@e160a99
2019-05-15 15:01:59 -请求地址 : http://localhost:8081/main
2019-05-15 15:01:59 -HTTP METHOD : GET
2019-05-15 15:01:59 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-05-15 15:01:59 -参数 : []
2019-05-15 15:01:59 -耗时 : 0
2019-05-15 15:01:59 -返回值 : main
2019-05-15 15:02:06 -==>  Preparing: select distinct m.perms from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id = ur.role_id where ur.user_id = ? 
2019-05-15 15:02:06 -==> Parameters: 1(Long)
2019-05-15 15:02:06 -<==      Total: 93
2019-05-15 15:02:06 -请求地址 : http://localhost:8081/water/waterPrice
2019-05-15 15:02:06 -HTTP METHOD : GET
2019-05-15 15:02:06 -CLASS_METHOD : com.bootdo.water.controller.WaterPriceController.WaterPrice
2019-05-15 15:02:06 -参数 : []
2019-05-15 15:02:06 -耗时 : 1
2019-05-15 15:02:06 -返回值 : water/waterPrice/waterPrice
2019-05-15 15:02:06 -请求地址 : http://localhost:8081/water/waterPrice/list
2019-05-15 15:02:06 -HTTP METHOD : GET
2019-05-15 15:02:06 -CLASS_METHOD : com.bootdo.water.controller.WaterPriceController.list
2019-05-15 15:02:06 -参数 : [{limit=10, offset=0}]
2019-05-15 15:02:06 -==>  Preparing: select `id`,`water_org`,(SELECT t.`name` FROM sys_dept t WHERE t.`dept_id` = `water_org`) AS waterOrgName,`m_water`,`s1_water`,`s2_water`,`s3_water`,`create_time`,`create_by`,`update_time`,`update_by`,`remark` from water_price order by id asc limit ?, ? 
2019-05-15 15:02:06 -==> Parameters: 0(Integer), 10(Integer)
2019-05-15 15:02:06 -<==      Total: 2
2019-05-15 15:02:06 -==>  Preparing: select count(*) from water_price 
2019-05-15 15:02:06 -==> Parameters: 
2019-05-15 15:02:06 -<==      Total: 1
2019-05-15 15:02:06 -耗时 : 45
2019-05-15 15:02:06 -返回值 : com.bootdo.common.utils.PageUtils@7bfe61ab
2019-05-15 15:02:11 -请求地址 : http://localhost:8081/water/waterUpLoad
2019-05-15 15:02:11 -HTTP METHOD : GET
2019-05-15 15:02:11 -CLASS_METHOD : com.bootdo.water.controller.WaterUpLoadController.WaterUpLoad
2019-05-15 15:02:11 -参数 : []
2019-05-15 15:02:11 -耗时 : 0
2019-05-15 15:02:11 -返回值 : water/waterUpLoad/waterUpLoad
2019-05-15 15:02:20 -请求地址 : http://localhost:8081/charts/countMM
2019-05-15 15:02:20 -HTTP METHOD : GET
2019-05-15 15:02:20 -CLASS_METHOD : com.bootdo.charts.controller.countMMController.countMM
2019-05-15 15:02:20 -参数 : []
2019-05-15 15:02:20 -耗时 : 16
2019-05-15 15:02:20 -返回值 : charts/countMM
2019-05-15 15:02:21 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-05-15 15:02:21 -HTTP METHOD : GET
2019-05-15 15:02:21 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-05-15 15:02:21 -参数 : [userType]
2019-05-15 15:02:21 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-05-15 15:02:21 -==> Parameters: userType(String)
2019-05-15 15:02:21 -<==      Total: 4
2019-05-15 15:02:21 -耗时 : 83
2019-05-15 15:02:21 -返回值 : [DictDO{id=145, name='银行转账', value='D', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=144, name='微信支付', value='C', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-05-15 15:02:24 -请求地址 : http://localhost:8081/charts/tableElecYY
2019-05-15 15:02:24 -HTTP METHOD : GET
2019-05-15 15:02:24 -CLASS_METHOD : com.bootdo.charts.controller.tableElecYYController.tableElecYY
2019-05-15 15:02:24 -参数 : []
2019-05-15 15:02:24 -耗时 : 8
2019-05-15 15:02:24 -返回值 : charts/tableElecYY
2019-05-15 15:02:24 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-05-15 15:02:24 -HTTP METHOD : GET
2019-05-15 15:02:24 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-05-15 15:02:24 -参数 : [userType]
2019-05-15 15:02:24 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-05-15 15:02:24 -==> Parameters: userType(String)
2019-05-15 15:02:24 -<==      Total: 4
2019-05-15 15:02:24 -耗时 : 7
2019-05-15 15:02:24 -返回值 : [DictDO{id=145, name='银行转账', value='D', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=144, name='微信支付', value='C', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-05-15 15:02:25 -请求地址 : http://localhost:8081/charts/tableWaterYY
2019-05-15 15:02:25 -HTTP METHOD : GET
2019-05-15 15:02:25 -CLASS_METHOD : com.bootdo.charts.controller.tableWaterYYController.tableWaterYY
2019-05-15 15:02:25 -参数 : []
2019-05-15 15:02:25 -耗时 : 7
2019-05-15 15:02:25 -返回值 : charts/tableWaterYY
2019-05-15 15:02:25 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-05-15 15:02:25 -HTTP METHOD : GET
2019-05-15 15:02:25 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-05-15 15:02:25 -参数 : [userType]
2019-05-15 15:02:25 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-05-15 15:02:25 -==> Parameters: userType(String)
2019-05-15 15:02:25 -<==      Total: 4
2019-05-15 15:02:25 -耗时 : 4
2019-05-15 15:02:25 -返回值 : [DictDO{id=145, name='银行转账', value='D', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=144, name='微信支付', value='C', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-05-15 15:02:29 -请求地址 : http://localhost:8081/system/sysDept/treeView
2019-05-15 15:02:29 -HTTP METHOD : GET
2019-05-15 15:02:29 -CLASS_METHOD : com.bootdo.system.controller.DeptController.treeView
2019-05-15 15:02:29 -参数 : []
2019-05-15 15:02:29 -耗时 : 1
2019-05-15 15:02:29 -返回值 : system/dept/deptTree
2019-05-15 15:02:29 -请求地址 : http://localhost:8081/system/sysDept/tree
2019-05-15 15:02:29 -HTTP METHOD : GET
2019-05-15 15:02:29 -CLASS_METHOD : com.bootdo.system.controller.DeptController.tree
2019-05-15 15:02:29 -参数 : []
2019-05-15 15:02:29 -==>  Preparing: select `dept_id`,`parent_id`,`name`,`order_num`,`del_flag` from sys_dept order by dept_id desc 
2019-05-15 15:02:29 -==> Parameters: 
2019-05-15 15:02:29 -<==      Total: 3
2019-05-15 15:02:29 -耗时 : 34
2019-05-15 15:02:29 -返回值 : {"checked":false,"children":[{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"3","parentId":"1","state":{"opened":true},"text":"牙星"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"2","parentId":"1","state":{"opened":true},"text":"五九"}],"hasChildren":true,"hasParent":false,"id":"1","parentId":"0","state":{"opened":true},"text":"总公司"}
2019-05-15 15:02:32 -WebSocketSession[1 current WS(0)-HttpStream(1)-HttpPoll(0), 2 total, 0 closed abnormally (0 connect failure, 0 send limit, 3 transport error)], stompSubProtocol[processed CONNECT(1)-CONNECTED(1)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 8, active threads = 0, queued tasks = 0, completed tasks = 12], outboundChannelpool size = 2, active threads = 0, queued tasks = 0, completed tasks = 2], sockJsScheduler[pool size = 4, active threads = 1, queued tasks = 2, completed tasks = 8]
2019-05-15 15:02:32 -请求地址 : http://localhost:8081/charts/tableWaterYY/tableWaterYY
2019-05-15 15:02:32 -HTTP METHOD : POST
2019-05-15 15:02:32 -CLASS_METHOD : com.bootdo.charts.controller.tableWaterYYController.tableWaterYY
2019-05-15 15:02:32 -参数 : [com.bootdo.water.vo.WaterVo@622bcac6, com.bootdo.moneyLog.vo.WaterLogVo@5b95f50]
2019-05-15 15:02:32 -==>  Preparing: select COUNT(*) from water WHERE water_sum>0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 15:02:32 -==> Parameters: 2018-12(String), 1(String), 2(String)
2019-05-15 15:02:32 -<==      Total: 1
2019-05-15 15:02:32 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE water_sum>0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 15:02:32 -==> Parameters: 2018-12(String), 1(String), 2(String)
2019-05-15 15:02:32 -<==      Total: 1
2019-05-15 15:02:32 -==>  Preparing: select COUNT(*) from water WHERE water_sum <0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 15:02:32 -==> Parameters: 2018-12(String), 1(String), 2(String)
2019-05-15 15:02:32 -<==      Total: 1
2019-05-15 15:02:32 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE water_sum <0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 15:02:32 -==> Parameters: 2018-12(String), 1(String), 2(String)
2019-05-15 15:02:32 -<==      Total: 1
2019-05-15 15:02:32 -==>  Preparing: select m_water,s1_water,s2_water,s3_water,water_org from water_price 
2019-05-15 15:02:32 -==> Parameters: 
2019-05-15 15:02:32 -<==      Total: 2
2019-05-15 15:02:32 -==>  Preparing: select COUNT(*),ifnull(SUM(water_cost),0) from water WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 15:02:32 -==> Parameters: 2019(String), 1(String), 2(String)
2019-05-15 15:02:32 -<==      Total: 1
2019-05-15 15:02:32 -==>  Preparing: select ifnull(SUM(water_cost),0) from water WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 15:02:32 -==> Parameters: 2019(String), 1(String), 2(String)
2019-05-15 15:02:32 -<==      Total: 1
2019-05-15 15:02:32 -==>  Preparing: select COUNT(*) from water_log WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 15:02:32 -==> Parameters: 2019(String), 1(String), 2(String)
2019-05-15 15:02:32 -<==      Total: 1
2019-05-15 15:02:32 -==>  Preparing: select ifnull(SUM(water_money),0) from water_log WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 15:02:32 -==> Parameters: 2019(String), 1(String), 2(String)
2019-05-15 15:02:32 -<==      Total: 1
2019-05-15 15:02:32 -==>  Preparing: select COUNT(*) from water WHERE water_sum>0 and DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 15:02:32 -==> Parameters: 2019(String), 1(String), 2(String)
2019-05-15 15:02:32 -<==      Total: 1
2019-05-15 15:02:32 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 15:02:32 -==> Parameters: 2019(String), 1(String), 2(String)
2019-05-15 15:02:32 -<==      Total: 1
2019-05-15 15:02:32 -==>  Preparing: select COUNT(*),ifnull(SUM(water_sum),0) from water WHERE water_sum <0 and DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 15:02:32 -==> Parameters: 2019(String), 1(String), 2(String)
2019-05-15 15:02:32 -<==      Total: 1
2019-05-15 15:02:32 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE water_sum <0 and DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 15:02:32 -==> Parameters: 2019(String), 1(String), 2(String)
2019-05-15 15:02:32 -<==      Total: 1
2019-05-15 15:02:32 -==>  Preparing: select COUNT(*) from water WHERE water_sum>0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 15:02:32 -==> Parameters: 2018-12(String), 2(String), 2(String)
2019-05-15 15:02:32 -<==      Total: 1
2019-05-15 15:02:32 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE water_sum>0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 15:02:32 -==> Parameters: 2018-12(String), 2(String), 2(String)
2019-05-15 15:02:32 -<==      Total: 1
2019-05-15 15:02:32 -==>  Preparing: select COUNT(*) from water WHERE water_sum <0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 15:02:32 -==> Parameters: 2018-12(String), 2(String), 2(String)
2019-05-15 15:02:32 -<==      Total: 1
2019-05-15 15:02:32 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE water_sum <0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 15:02:32 -==> Parameters: 2018-12(String), 2(String), 2(String)
2019-05-15 15:02:32 -<==      Total: 1
2019-05-15 15:02:32 -==>  Preparing: select COUNT(*),ifnull(SUM(water_cost),0) from water WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 15:02:32 -==> Parameters: 2019(String), 2(String), 2(String)
2019-05-15 15:02:32 -<==      Total: 1
2019-05-15 15:02:32 -==>  Preparing: select ifnull(SUM(water_cost),0) from water WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 15:02:32 -==> Parameters: 2019(String), 2(String), 2(String)
2019-05-15 15:02:32 -<==      Total: 1
2019-05-15 15:02:32 -==>  Preparing: select COUNT(*) from water_log WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 15:02:32 -==> Parameters: 2019(String), 2(String), 2(String)
2019-05-15 15:02:32 -<==      Total: 1
2019-05-15 15:02:32 -==>  Preparing: select ifnull(SUM(water_money),0) from water_log WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 15:02:32 -==> Parameters: 2019(String), 2(String), 2(String)
2019-05-15 15:02:32 -<==      Total: 1
2019-05-15 15:02:32 -==>  Preparing: select COUNT(*) from water WHERE water_sum>0 and DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 15:02:32 -==> Parameters: 2019(String), 2(String), 2(String)
2019-05-15 15:02:32 -<==      Total: 1
2019-05-15 15:02:32 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 15:02:32 -==> Parameters: 2019(String), 2(String), 2(String)
2019-05-15 15:02:32 -<==      Total: 1
2019-05-15 15:02:32 -==>  Preparing: select COUNT(*),ifnull(SUM(water_sum),0) from water WHERE water_sum <0 and DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 15:02:32 -==> Parameters: 2019(String), 2(String), 2(String)
2019-05-15 15:02:32 -<==      Total: 1
2019-05-15 15:02:32 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE water_sum <0 and DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 15:02:32 -==> Parameters: 2019(String), 2(String), 2(String)
2019-05-15 15:02:32 -<==      Total: 1
2019-05-15 15:02:32 -==>  Preparing: select COUNT(*) from water WHERE water_sum>0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 15:02:32 -==> Parameters: 2018-12(String), 4(String), 2(String)
2019-05-15 15:02:32 -<==      Total: 1
2019-05-15 15:02:32 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE water_sum>0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 15:02:32 -==> Parameters: 2018-12(String), 4(String), 2(String)
2019-05-15 15:02:32 -<==      Total: 1
2019-05-15 15:02:32 -==>  Preparing: select COUNT(*) from water WHERE water_sum <0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 15:02:32 -==> Parameters: 2018-12(String), 4(String), 2(String)
2019-05-15 15:02:32 -<==      Total: 1
2019-05-15 15:02:32 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE water_sum <0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 15:02:32 -==> Parameters: 2018-12(String), 4(String), 2(String)
2019-05-15 15:02:32 -<==      Total: 1
2019-05-15 15:02:32 -==>  Preparing: select COUNT(*),ifnull(SUM(water_cost),0) from water WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 15:02:32 -==> Parameters: 2019(String), 4(String), 2(String)
2019-05-15 15:02:32 -<==      Total: 1
2019-05-15 15:02:32 -==>  Preparing: select ifnull(SUM(water_cost),0) from water WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 15:02:32 -==> Parameters: 2019(String), 4(String), 2(String)
2019-05-15 15:02:32 -<==      Total: 1
2019-05-15 15:02:32 -==>  Preparing: select COUNT(*) from water_log WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 15:02:32 -==> Parameters: 2019(String), 4(String), 2(String)
2019-05-15 15:02:32 -<==      Total: 1
2019-05-15 15:02:32 -==>  Preparing: select ifnull(SUM(water_money),0) from water_log WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 15:02:32 -==> Parameters: 2019(String), 4(String), 2(String)
2019-05-15 15:02:32 -<==      Total: 1
2019-05-15 15:02:32 -==>  Preparing: select COUNT(*) from water WHERE water_sum>0 and DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 15:02:32 -==> Parameters: 2019(String), 4(String), 2(String)
2019-05-15 15:02:32 -<==      Total: 1
2019-05-15 15:02:32 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 15:02:32 -==> Parameters: 2019(String), 4(String), 2(String)
2019-05-15 15:02:32 -<==      Total: 1
2019-05-15 15:02:32 -==>  Preparing: select COUNT(*),ifnull(SUM(water_sum),0) from water WHERE water_sum <0 and DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 15:02:32 -==> Parameters: 2019(String), 4(String), 2(String)
2019-05-15 15:02:32 -<==      Total: 1
2019-05-15 15:02:32 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE water_sum <0 and DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 15:02:32 -==> Parameters: 2019(String), 4(String), 2(String)
2019-05-15 15:02:32 -<==      Total: 1
2019-05-15 15:02:32 -==>  Preparing: select COUNT(*) from water WHERE water_sum>0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 15:02:32 -==> Parameters: 2018-12(String), 4(String), 2(String)
2019-05-15 15:02:32 -<==      Total: 1
2019-05-15 15:02:32 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE water_sum>0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 15:02:32 -==> Parameters: 2018-12(String), 4(String), 2(String)
2019-05-15 15:02:32 -<==      Total: 1
2019-05-15 15:02:32 -==>  Preparing: select COUNT(*) from water WHERE water_sum <0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 15:02:32 -==> Parameters: 2018-12(String), 4(String), 2(String)
2019-05-15 15:02:32 -<==      Total: 1
2019-05-15 15:02:32 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE water_sum <0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 15:02:32 -==> Parameters: 2018-12(String), 4(String), 2(String)
2019-05-15 15:02:32 -<==      Total: 1
2019-05-15 15:02:32 -==>  Preparing: select COUNT(*),ifnull(SUM(water_cost),0) from water WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 15:02:32 -==> Parameters: 2019(String), 4(String), 2(String)
2019-05-15 15:02:32 -<==      Total: 1
2019-05-15 15:02:32 -==>  Preparing: select ifnull(SUM(water_cost),0) from water WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 15:02:32 -==> Parameters: 2019(String), 4(String), 2(String)
2019-05-15 15:02:32 -<==      Total: 1
2019-05-15 15:02:32 -==>  Preparing: select COUNT(*) from water_log WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 15:02:32 -==> Parameters: 2019(String), 4(String), 2(String)
2019-05-15 15:02:32 -<==      Total: 1
2019-05-15 15:02:32 -==>  Preparing: select ifnull(SUM(water_money),0) from water_log WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 15:02:32 -==> Parameters: 2019(String), 4(String), 2(String)
2019-05-15 15:02:32 -<==      Total: 1
2019-05-15 15:02:32 -==>  Preparing: select COUNT(*) from water WHERE water_sum>0 and DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 15:02:32 -==> Parameters: 2019(String), 4(String), 2(String)
2019-05-15 15:02:32 -<==      Total: 1
2019-05-15 15:02:32 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 15:02:32 -==> Parameters: 2019(String), 4(String), 2(String)
2019-05-15 15:02:32 -<==      Total: 1
2019-05-15 15:02:32 -==>  Preparing: select COUNT(*),ifnull(SUM(water_sum),0) from water WHERE water_sum <0 and DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 15:02:32 -==> Parameters: 2019(String), 4(String), 2(String)
2019-05-15 15:02:32 -<==      Total: 1
2019-05-15 15:02:32 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE water_sum <0 and DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 15:02:32 -==> Parameters: 2019(String), 4(String), 2(String)
2019-05-15 15:02:32 -<==      Total: 1
2019-05-15 15:02:32 -耗时 : 200
2019-05-15 15:02:32 -返回值 : {S2TotalH=1, NewPreDepositY=4, STotalY=-10, NewArrearstTotalH=2, NewPreDepositTotalY=5, S2NewTotalY=0, type=2, TotalH=1, OldAarrearsY=0, SNewPreDepositY=1, S3NetnreceiptsH=1, NewPreDepositH=3, S2TotalY=-10, TtotalH=2, SNewAarrearsY=0, S2NewTotalH=0, NetnreceiptsTotalH=4, SReceivableY=10, S2OldAarrears=0, TotalY=6, NetnreceiptsH=2, SNewPreDepositH=1, SNewTotalH=1, OldAarrearsH=0, S2OldPreDepositH=0, S3NewAarrearsY=0, TtotalY=-4, S2NewAarrearsY=0, TTtotalY=-23, S3OldPreDepositY=0, ArrearsTotalY=-10, SWaterPrice=10, SReceivableH=1, SNewAarrearsH=0, MWaterPrice=6, S2OldPreDepositY=0, S3OldAarrears=0, S3NewAarrearsH=0, S2NewAarrearsH=0, TTtotalH=6, S3OldPreDepositH=0, ArrearsTotalH=1, SOldPreDepositH=0, PreDepositTotalY=6, SNetnreceiptsH=2, SOldAarrearsH=1, S3NewPreDepositY=0, S3NewTotalH=0, SOldPreDepositY=0, S2NetnreceiptsH=1, ReceivableY=30, S2NewPreDepositH=0, S3NewPreDepositH=0, S3NewTotalY=0, SNetnreceiptsY=21, PreDepositTotalH=1, S2OldAarrearsH=0, S3OldAarrearsH=0, ReceivableH=5, S2NewPreDepositY=0, NewAarrearsY=-27, PriceTotal=16, NewPreDepositTotalH=4, S2ReceivableH=0, OldPreDepositY=6, NetnreceiptsTotalY=172, NewTotalY=-23, S3ReceivableY=0, ReceivableTotalH=6, S3TotalH=1, NetnreceiptsY=151, SNewTotalY=0, NewAarrearsH=2, NewArrearstTotalY=-27, OldPreDepositH=1, STotalH=1, S3ReceivableH=0, ReceivableTotalY=40, NewTotalH=5, SOldAarrears=-10, S2ReceivableY=0, S2NetnreceiptsY=60, S3TotalY=-10, S3NetnreceiptsY=60}
2019-05-15 15:32:32 -WebSocketSession[1 current WS(0)-HttpStream(1)-HttpPoll(0), 2 total, 0 closed abnormally (0 connect failure, 0 send limit, 3 transport error)], stompSubProtocol[processed CONNECT(1)-CONNECTED(1)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 12], outboundChannelpool size = 0, active threads = 0, queued tasks = 0, completed tasks = 2], sockJsScheduler[pool size = 4, active threads = 1, queued tasks = 2, completed tasks = 441]
2019-05-15 16:01:46 -Validating all active sessions...
2019-05-15 16:01:46 -Finished session validation.  [1] sessions were stopped.
2019-05-15 16:02:32 -WebSocketSession[1 current WS(0)-HttpStream(1)-HttpPoll(0), 2 total, 0 closed abnormally (0 connect failure, 0 send limit, 3 transport error)], stompSubProtocol[processed CONNECT(1)-CONNECTED(1)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 12], outboundChannelpool size = 0, active threads = 0, queued tasks = 0, completed tasks = 2], sockJsScheduler[pool size = 4, active threads = 1, queued tasks = 2, completed tasks = 874]
2019-05-15 16:32:32 -WebSocketSession[1 current WS(0)-HttpStream(1)-HttpPoll(0), 2 total, 0 closed abnormally (0 connect failure, 0 send limit, 3 transport error)], stompSubProtocol[processed CONNECT(1)-CONNECTED(1)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 12], outboundChannelpool size = 0, active threads = 0, queued tasks = 0, completed tasks = 2], sockJsScheduler[pool size = 4, active threads = 1, queued tasks = 2, completed tasks = 1307]
2019-05-15 17:01:46 -Validating all active sessions...
2019-05-15 17:01:46 -Finished session validation.  No sessions were stopped.
2019-05-15 17:02:32 -WebSocketSession[1 current WS(0)-HttpStream(1)-HttpPoll(0), 2 total, 0 closed abnormally (0 connect failure, 0 send limit, 3 transport error)], stompSubProtocol[processed CONNECT(1)-CONNECTED(1)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 12], outboundChannelpool size = 0, active threads = 0, queued tasks = 0, completed tasks = 2], sockJsScheduler[pool size = 4, active threads = 1, queued tasks = 2, completed tasks = 1740]
2019-05-15 21:19:15 -Starting BootdoApplication on PC-201905091110 with PID 3192 (D:\eclipse2018-work\bootdo\target\classes started by Administrator in D:\eclipse2018-work\bootdo)
2019-05-15 21:19:15 -Running with Spring Boot v2.0.3.RELEASE, Spring v5.0.7.RELEASE
2019-05-15 21:19:15 -The following profiles are active: dev
2019-05-15 21:19:15 -Refreshing org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@a38c7fe: startup date [Wed May 15 21:19:15 CST 2019]; root of context hierarchy
2019-05-15 21:19:23 -Multiple Spring Data modules found, entering strict repository configuration mode!
2019-05-15 21:19:25 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$71fd8325] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-05-15 21:19:26 -Bean 'shiroConfig' of type [com.bootdo.system.config.ShiroConfig$$EnhancerBySpringCGLIB$$6456b1cc] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-05-15 21:19:27 -Bean 'userRealm' of type [com.bootdo.system.shiro.UserRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-05-15 21:19:27 -Bean 'cacheManager2' of type [net.sf.ehcache.CacheManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-05-15 21:19:27 -Bean 'ehCacheManager' of type [org.apache.shiro.cache.ehcache.EhCacheManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-05-15 21:19:27 -Cache with name 'com.bootdo.system.shiro.UserRealm.authorizationCache' does not yet exist.  Creating now.
2019-05-15 21:19:27 -Added EhCache named [com.bootdo.system.shiro.UserRealm.authorizationCache]
2019-05-15 21:19:27 -Bean 'sessionDAO' of type [org.apache.shiro.session.mgt.eis.MemorySessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-05-15 21:19:27 -Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-05-15 21:19:28 -Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-05-15 21:19:28 -Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-05-15 21:19:29 -Tomcat initialized with port(s): 8081 (http)
2019-05-15 21:19:29 -Initializing ProtocolHandler ["http-nio-8081"]
2019-05-15 21:19:29 -Starting service [Tomcat]
2019-05-15 21:19:29 -Starting Servlet Engine: Apache Tomcat/8.5.31
2019-05-15 21:19:29 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [D:\Java\JDK\jdk1.8.0_102\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;D:/Java/JRE/bin/server;D:/Java/JRE/bin;D:/Java/JRE/lib/amd64;C:\ProgramData\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Windows\System32\OpenSSH\;%JAVA_HOME\bin%;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;;C:\Users\Administrator\Desktop;;.]
2019-05-15 21:19:30 -Initializing Spring embedded WebApplicationContext
2019-05-15 21:19:30 -Root WebApplicationContext: initialization completed in 14562 ms
2019-05-15 21:19:30 -Mapping filter: 'characterEncodingFilter' to: [/*]
2019-05-15 21:19:30 -Mapping filter: 'hiddenHttpMethodFilter' to: [/*]
2019-05-15 21:19:30 -Mapping filter: 'httpPutFormContentFilter' to: [/*]
2019-05-15 21:19:30 -Mapping filter: 'requestContextFilter' to: [/*]
2019-05-15 21:19:30 -Filter xssFilter was not registered (disabled)
2019-05-15 21:19:30 -Mapping filter: 'webStatFilter' to urls: [/*]
2019-05-15 21:19:30 -Mapping filter: 'shiroFilterFactoryBean' to: [/*]
2019-05-15 21:19:30 -Servlet statViewServlet mapped to [/druid/*]
2019-05-15 21:19:30 -Servlet dispatcherServlet mapped to [/]
2019-05-15 21:19:40 -ApplicationContext registed-->org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@a38c7fe: startup date [Wed May 15 21:19:15 CST 2019]; root of context hierarchy
2019-05-15 21:19:41 -Using default implementation for ThreadExecutor
2019-05-15 21:19:41 -Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2019-05-15 21:19:41 -Quartz Scheduler v.2.2.1 created.
2019-05-15 21:19:41 -RAMJobStore initialized.
2019-05-15 21:19:41 -Scheduler meta-data: Quartz Scheduler (v2.2.1) 'schedulerFactoryBean' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2019-05-15 21:19:41 -Quartz scheduler 'schedulerFactoryBean' initialized from an externally provided properties instance.
2019-05-15 21:19:41 -Quartz scheduler version: 2.2.1
2019-05-15 21:19:41 -JobFactory set to: com.bootdo.common.quartz.factory.JobFactory@25e8e59
2019-05-15 21:19:42 -Initializing ExecutorService  'clientInboundChannelExecutor'
2019-05-15 21:19:42 -Initializing ExecutorService  'clientOutboundChannelExecutor'
2019-05-15 21:19:48 -Mapped "{[/charts/countDD/exportDD],methods=[GET]}" onto public void com.bootdo.charts.controller.countDDController.exportDD(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.HeatLogVo,com.bootdo.moneyLog.vo.WaterLogVo,javax.servlet.http.HttpServletResponse)
2019-05-15 21:19:48 -Mapped "{[/charts/countDD],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.countDDController.countDD()
2019-05-15 21:19:48 -Mapped "{[/charts/countDD/getCountDD],methods=[POST]}" onto public com.bootdo.charts.vo.CountDayVo com.bootdo.charts.controller.countDDController.getCountD(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo)
2019-05-15 21:19:48 -Mapped "{[/charts/countMM/exportMM],methods=[GET]}" onto public void com.bootdo.charts.controller.countMMController.exportMM(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.HeatLogVo,com.bootdo.moneyLog.vo.WaterLogVo,javax.servlet.http.HttpServletResponse)
2019-05-15 21:19:48 -Mapped "{[/charts/countMM/getCountMM],methods=[POST]}" onto public java.util.Map com.bootdo.charts.controller.countMMController.getCountMM(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo)
2019-05-15 21:19:48 -Mapped "{[/charts/countMM],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.countMMController.countMM()
2019-05-15 21:19:48 -Mapped "{[/charts/countOwe/exportOwe],methods=[GET]}" onto public void com.bootdo.charts.controller.countOweController.exportOwe(com.bootdo.elec.vo.ElecVo,com.bootdo.heat.vo.HeatVo,com.bootdo.water.vo.WaterVo,javax.servlet.http.HttpServletResponse)
2019-05-15 21:19:48 -Mapped "{[/charts/countOwe],methods=[GET]}" onto java.lang.String com.bootdo.charts.controller.countOweController.countOwe()
2019-05-15 21:19:48 -Mapped "{[/charts/countOwe/getCountOwe],methods=[POST]}" onto public com.bootdo.charts.vo.CountOweVo com.bootdo.charts.controller.countOweController.getCountD(com.bootdo.elec.vo.ElecVo,com.bootdo.water.vo.WaterVo,com.bootdo.heat.vo.HeatVo)
2019-05-15 21:19:48 -Mapped "{[/charts/countRun/getCountRun],methods=[POST]}" onto public java.util.Map com.bootdo.charts.controller.countRunController.getCountRun(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo)
2019-05-15 21:19:48 -Mapped "{[/charts/countRun],methods=[GET]}" onto java.lang.String com.bootdo.charts.controller.countRunController.countRun()
2019-05-15 21:19:48 -Mapped "{[/charts/countRun/exportRun],methods=[GET]}" onto public void com.bootdo.charts.controller.countRunController.exportRun(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.HeatLogVo,com.bootdo.moneyLog.vo.WaterLogVo,javax.servlet.http.HttpServletResponse)
2019-05-15 21:19:48 -Mapped "{[/charts/countYY/exportYY],methods=[GET]}" onto public void com.bootdo.charts.controller.countYYController.exportYY(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.HeatLogVo,com.bootdo.moneyLog.vo.WaterLogVo,javax.servlet.http.HttpServletResponse)
2019-05-15 21:19:48 -Mapped "{[/charts/countYY],methods=[GET]}" onto java.lang.String com.bootdo.charts.controller.countYYController.countYY()
2019-05-15 21:19:48 -Mapped "{[/charts/countYY/getCountYY],methods=[POST]}" onto public java.util.Map com.bootdo.charts.controller.countYYController.getCountYY(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo)
2019-05-15 21:19:48 -Mapped "{[/charts/tableDD/exportDD],methods=[GET]}" onto public void com.bootdo.charts.controller.tableDDController.exportDD(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.HeatLogVo,com.bootdo.moneyLog.vo.WaterLogVo,javax.servlet.http.HttpServletResponse)
2019-05-15 21:19:48 -Mapped "{[/charts/tableDD],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.tableDDController.countDD()
2019-05-15 21:19:48 -Mapped "{[/charts/tableDD/getTableDD],methods=[POST]}" onto public java.util.Map com.bootdo.charts.controller.tableDDController.getTableDD(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo)
2019-05-15 21:19:48 -Mapped "{[/charts/tableElecMM/tableElecMM],methods=[POST]}" onto public java.util.Map com.bootdo.charts.controller.tableElecMMController.tableElecMM(com.bootdo.elec.vo.ElecVo,com.bootdo.moneyLog.vo.ElecLogVo)
2019-05-15 21:19:48 -Mapped "{[/charts/tableElecMM],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.tableElecMMController.tableElecMM()
2019-05-15 21:19:48 -Mapped "{[/charts/tableElecMM/exportElecMM],methods=[GET]}" onto public void com.bootdo.charts.controller.tableElecMMController.exportElecMM(com.bootdo.elec.vo.ElecVo,com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse)
2019-05-15 21:19:48 -Mapped "{[/charts/tableElecYY/exportElecYY],methods=[GET]}" onto public void com.bootdo.charts.controller.tableElecYYController.exportElecYY(com.bootdo.elec.vo.ElecVo,com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse)
2019-05-15 21:19:48 -Mapped "{[/charts/tableElecYY/getCountYY],methods=[POST]}" onto public java.util.Map com.bootdo.charts.controller.tableElecYYController.getCountYY(com.bootdo.elec.vo.ElecVo,com.bootdo.moneyLog.vo.ElecLogVo)
2019-05-15 21:19:48 -Mapped "{[/charts/tableElecYY],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.tableElecYYController.tableElecYY()
2019-05-15 21:19:48 -Mapped "{[/charts/tableHeatMM/tableHeatMM],methods=[POST]}" onto public java.util.Map com.bootdo.charts.controller.tableHeatMMController.tableHeatMM(com.bootdo.heat.vo.HeatVo,com.bootdo.moneyLog.vo.HeatLogVo)
2019-05-15 21:19:48 -Mapped "{[/charts/tableHeatMM],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.tableHeatMMController.tableHeatMM()
2019-05-15 21:19:48 -Mapped "{[/charts/tableHeatMM/exportHeatMM],methods=[GET]}" onto public void com.bootdo.charts.controller.tableHeatMMController.exportHeatMM(com.bootdo.heat.vo.HeatVo,com.bootdo.moneyLog.vo.HeatLogVo,javax.servlet.http.HttpServletResponse)
2019-05-15 21:19:48 -Mapped "{[/charts/tableHeatYY/exportHeatYY],methods=[GET]}" onto public void com.bootdo.charts.controller.tableHeatYYController.exportHeatYY(com.bootdo.heat.vo.HeatVo,com.bootdo.moneyLog.vo.HeatLogVo,javax.servlet.http.HttpServletResponse)
2019-05-15 21:19:48 -Mapped "{[/charts/tableHeatYY],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.tableHeatYYController.tableHeatYY()
2019-05-15 21:19:48 -Mapped "{[/charts/tableHeatYY/getCountYY],methods=[POST]}" onto public java.util.Map com.bootdo.charts.controller.tableHeatYYController.getCountMM(com.bootdo.heat.vo.HeatVo,com.bootdo.moneyLog.vo.HeatLogVo)
2019-05-15 21:19:48 -Mapped "{[/charts/tableWaterMM/tableWaterMM],methods=[POST]}" onto public java.util.Map com.bootdo.charts.controller.tableWaterMMController.tableWaterMM(com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.water.vo.WaterVo)
2019-05-15 21:19:48 -Mapped "{[/charts/tableWaterMM],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.tableWaterMMController.tableWaterMM()
2019-05-15 21:19:48 -Mapped "{[/charts/tableWaterMM/exportWaterMM],methods=[GET]}" onto public void com.bootdo.charts.controller.tableWaterMMController.exportWaterMM(com.bootdo.water.vo.WaterVo,com.bootdo.moneyLog.vo.WaterLogVo,javax.servlet.http.HttpServletResponse)
2019-05-15 21:19:48 -Mapped "{[/charts/tableWaterYY/tableWaterYY],methods=[POST]}" onto public java.util.Map com.bootdo.charts.controller.tableWaterYYController.tableWaterYY(com.bootdo.water.vo.WaterVo,com.bootdo.moneyLog.vo.WaterLogVo)
2019-05-15 21:19:48 -Mapped "{[/charts/tableWaterYY],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.tableWaterYYController.tableWaterYY()
2019-05-15 21:19:48 -Mapped "{[/charts/tableWaterYY/exportWaterYY],methods=[GET]}" onto public void com.bootdo.charts.controller.tableWaterYYController.exportWaterYY(com.bootdo.water.vo.WaterVo,com.bootdo.moneyLog.vo.WaterLogVo,javax.servlet.http.HttpServletResponse)
2019-05-15 21:19:48 -Mapped "{[/common/dict/add],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.add()
2019-05-15 21:19:48 -Mapped "{[/common/dict/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.remove(java.lang.Long)
2019-05-15 21:19:48 -Mapped "{[/common/dict/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.remove(java.lang.Long[])
2019-05-15 21:19:48 -Mapped "{[/common/dict/update]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.update(com.bootdo.common.domain.DictDO)
2019-05-15 21:19:48 -Mapped "{[/common/dict/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.common.controller.DictController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 21:19:48 -Mapped "{[/common/dict/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.save(com.bootdo.common.domain.DictDO)
2019-05-15 21:19:48 -Mapped "{[/common/dict/type],methods=[GET]}" onto public java.util.List<com.bootdo.common.domain.DictDO> com.bootdo.common.controller.DictController.listType()
2019-05-15 21:19:48 -Mapped "{[/common/dict/list/{type}],methods=[GET]}" onto public java.util.List<com.bootdo.common.domain.DictDO> com.bootdo.common.controller.DictController.listByType(java.lang.String)
2019-05-15 21:19:48 -Mapped "{[/common/dict],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.dict()
2019-05-15 21:19:48 -Mapped "{[/common/dict/add/{type}/{description}],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.addD(org.springframework.ui.Model,java.lang.String,java.lang.String)
2019-05-15 21:19:48 -Mapped "{[/common/dict/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.edit(java.lang.Long,org.springframework.ui.Model)
2019-05-15 21:19:48 -Mapped "{[/common/sysFile/add],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.FileController.add()
2019-05-15 21:19:48 -Mapped "{[/common/sysFile/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.remove(java.lang.Long,javax.servlet.http.HttpServletRequest)
2019-05-15 21:19:48 -Mapped "{[/common/sysFile/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.remove(java.lang.Long[])
2019-05-15 21:19:48 -Mapped "{[/common/sysFile/update]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.update(com.bootdo.common.domain.FileDO)
2019-05-15 21:19:48 -Mapped "{[/common/sysFile/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.common.controller.FileController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 21:19:48 -Mapped "{[/common/sysFile/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.save(com.bootdo.common.domain.FileDO)
2019-05-15 21:19:48 -Mapped "{[/common/sysFile/info/{id}]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.info(java.lang.Long)
2019-05-15 21:19:48 -Mapped "{[/common/sysFile],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.FileController.sysFile(org.springframework.ui.Model)
2019-05-15 21:19:48 -Mapped "{[/common/sysFile/upload],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.FileController.upload(org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpServletRequest)
2019-05-15 21:19:48 -Mapped "{[/common/sysFile/edit],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.FileController.edit(java.lang.Long,org.springframework.ui.Model)
2019-05-15 21:19:48 -Mapped "{[/common/generator/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.GeneratorController.update(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 21:19:48 -Mapped "{[/common/generator/list],methods=[GET]}" onto java.util.List<java.util.Map<java.lang.String, java.lang.Object>> com.bootdo.common.controller.GeneratorController.list()
2019-05-15 21:19:48 -Mapped "{[/common/generator/code/{tableName}]}" onto public void com.bootdo.common.controller.GeneratorController.code(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String) throws java.io.IOException
2019-05-15 21:19:48 -Mapped "{[/common/generator],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.GeneratorController.generator()
2019-05-15 21:19:48 -Mapped "{[/common/generator/batchCode]}" onto public void com.bootdo.common.controller.GeneratorController.batchCode(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String) throws java.io.IOException
2019-05-15 21:19:48 -Mapped "{[/common/generator/edit],methods=[GET]}" onto public java.lang.String com.bootdo.common.controller.GeneratorController.edit(org.springframework.ui.Model)
2019-05-15 21:19:48 -Mapped "{[/common/job/add],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.JobController.add()
2019-05-15 21:19:48 -Mapped "{[/common/job/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.remove(java.lang.Long)
2019-05-15 21:19:48 -Mapped "{[/common/job/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.remove(java.lang.Long[])
2019-05-15 21:19:48 -Mapped "{[/common/job/update],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.update(com.bootdo.common.domain.TaskDO)
2019-05-15 21:19:48 -Mapped "{[/common/job/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.common.controller.JobController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 21:19:48 -Mapped "{[/common/job/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.save(com.bootdo.common.domain.TaskDO)
2019-05-15 21:19:48 -Mapped "{[/common/job/info/{id}]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.info(java.lang.Long)
2019-05-15 21:19:48 -Mapped "{[/common/job/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.JobController.edit(java.lang.Long,org.springframework.ui.Model)
2019-05-15 21:19:48 -Mapped "{[/common/job/changeJobStatus],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.changeJobStatus(java.lang.Long,java.lang.String)
2019-05-15 21:19:48 -Mapped "{[/common/job],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.JobController.taskScheduleJob()
2019-05-15 21:19:48 -Mapped "{[/common/log/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.LogController.remove(java.lang.Long)
2019-05-15 21:19:48 -Mapped "{[/common/log],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.LogController.log()
2019-05-15 21:19:48 -Mapped "{[/common/log/list],methods=[GET]}" onto com.bootdo.common.domain.PageDO<com.bootdo.common.domain.LogDO> com.bootdo.common.controller.LogController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 21:19:48 -Mapped "{[/common/log/batchRemove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.LogController.batchRemove(java.lang.Long[])
2019-05-15 21:19:48 -Mapped "{[/common/long],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.LongController.Long()
2019-05-15 21:19:48 -Mapped "{[/common/time],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.TimeController.Time()
2019-05-15 21:19:48 -Mapped "{[/error]}" onto public com.bootdo.common.utils.R com.bootdo.common.exception.MainsiteErrorController.handleError(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-05-15 21:19:48 -Mapped "{[/error],produces=[text/html]}" onto public org.springframework.web.servlet.ModelAndView com.bootdo.common.exception.MainsiteErrorController.errorHtml(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-05-15 21:19:48 -Mapped "{[/elec/elec/add],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecController.add()
2019-05-15 21:19:48 -Mapped "{[/elec/elec/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.remove(java.lang.Long)
2019-05-15 21:19:48 -Mapped "{[/elec/elec/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.remove(java.lang.Long[])
2019-05-15 21:19:48 -Mapped "{[/elec/elec/update],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.update(com.bootdo.elec.domain.ElecDO)
2019-05-15 21:19:48 -Mapped "{[/elec/elec/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.elec.controller.ElecController.list(java.util.Map<java.lang.String, java.lang.Object>,com.bootdo.elec.domain.ElecDO)
2019-05-15 21:19:48 -Mapped "{[/elec/elec/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.save(com.bootdo.elec.domain.ElecDO)
2019-05-15 21:19:48 -Mapped "{[/elec/elec/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecController.edit(java.lang.Long,org.springframework.ui.Model)
2019-05-15 21:19:48 -Mapped "{[/elec/elec],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecController.Elec()
2019-05-15 21:19:48 -Mapped "{[/elec/elec/YhElecUpdate],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.YhElecUpdate(com.bootdo.elec.domain.ElecDO)
2019-05-15 21:19:48 -Mapped "{[/elec/elec/WxElecUpdate],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.WxElecUpdate(com.bootdo.elec.domain.ElecDO)
2019-05-15 21:19:48 -Mapped "{[/elec/elec/exprotElec],methods=[GET]}" onto public void com.bootdo.elec.controller.ElecController.exprotExcel(com.bootdo.elec.vo.ElecVo,javax.servlet.http.HttpServletResponse)
2019-05-15 21:19:48 -Mapped "{[/elec/elecInto],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecIntoController.ElecInto()
2019-05-15 21:19:48 -Mapped "{[/elec/elecInto/exprotElecIntoExcel],methods=[GET]}" onto public void com.bootdo.elec.controller.ElecIntoController.exprotExcel(com.bootdo.elec.vo.ElecVo,javax.servlet.http.HttpServletResponse)
2019-05-15 21:19:48 -Mapped "{[/elec/elecInto/importElecIntoExcel],methods=[POST]}" onto public java.lang.String com.bootdo.elec.controller.ElecIntoController.importElecIntoExcel(org.springframework.web.multipart.MultipartFile,com.bootdo.elec.vo.ElecVo,javax.servlet.http.HttpServletResponse) throws java.lang.Exception
2019-05-15 21:19:48 -Mapped "{[/elec/elecPrice/add],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecPriceController.add()
2019-05-15 21:19:48 -Mapped "{[/elec/elecPrice/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecPriceController.remove(java.lang.Long)
2019-05-15 21:19:48 -Mapped "{[/elec/elecPrice/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecPriceController.remove(java.lang.Long[])
2019-05-15 21:19:48 -Mapped "{[/elec/elecPrice/update]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecPriceController.update(com.bootdo.elec.domain.ElecPriceDO)
2019-05-15 21:19:48 -Mapped "{[/elec/elecPrice/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.elec.controller.ElecPriceController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 21:19:48 -Mapped "{[/elec/elecPrice/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecPriceController.save(com.bootdo.elec.domain.ElecPriceDO,com.bootdo.elec.domain.ElecDO)
2019-05-15 21:19:48 -Mapped "{[/elec/elecPrice],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecPriceController.ElecPrice()
2019-05-15 21:19:48 -Mapped "{[/elec/elecPrice/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecPriceController.edit(java.lang.Long,org.springframework.ui.Model)
2019-05-15 21:19:48 -Mapped "{[/elec/elecUpLoad/exprotElecExcel],methods=[GET]}" onto public void com.bootdo.elec.controller.ElecUpLoadController.exprotElecExcel(com.bootdo.elec.vo.ElecVo,javax.servlet.http.HttpServletResponse)
2019-05-15 21:19:48 -Mapped "{[/elec/elecUpLoad/importElecExcel],methods=[POST]}" onto public java.util.Map<java.lang.String, java.lang.Object> com.bootdo.elec.controller.ElecUpLoadController.importElecExcel(org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpServletRequest) throws java.lang.Exception
2019-05-15 21:19:48 -Mapped "{[/elec/elecUpLoad],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecUpLoadController.Elec()
2019-05-15 21:19:48 -Mapped "{[/heat/heat/add],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatController.add()
2019-05-15 21:19:48 -Mapped "{[/heat/heat/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatController.remove(java.lang.Integer)
2019-05-15 21:19:48 -Mapped "{[/heat/heat/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatController.remove(java.lang.Integer[])
2019-05-15 21:19:48 -Mapped "{[/heat/heat/update]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatController.update(com.bootdo.heat.domain.HeatDO)
2019-05-15 21:19:48 -Mapped "{[/heat/heat/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.heat.controller.HeatController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 21:19:48 -Mapped "{[/heat/heat/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatController.save(com.bootdo.heat.domain.HeatDO)
2019-05-15 21:19:48 -Mapped "{[/heat/heat],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatController.Heat()
2019-05-15 21:19:48 -Mapped "{[/heat/heat/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatController.edit(java.lang.Integer,org.springframework.ui.Model)
2019-05-15 21:19:48 -Mapped "{[/heat/heat/exprotHeat],methods=[GET]}" onto public void com.bootdo.heat.controller.HeatController.exprotExcel(com.bootdo.heat.vo.HeatVo,javax.servlet.http.HttpServletResponse)
2019-05-15 21:19:48 -Mapped "{[/heat/heatInto],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatIntoController.HeatInto()
2019-05-15 21:19:48 -Mapped "{[/heat/heatInto/exprotHeatIntoExcel],methods=[GET]}" onto public void com.bootdo.heat.controller.HeatIntoController.exprotExcel(com.bootdo.heat.vo.HeatVo,javax.servlet.http.HttpServletResponse)
2019-05-15 21:19:48 -Mapped "{[/heat/heatInto/importHeatIntoExcel],methods=[POST]}" onto public java.lang.String com.bootdo.heat.controller.HeatIntoController.importHeatIntoExcel(org.springframework.web.multipart.MultipartFile,com.bootdo.heat.vo.HeatVo,javax.servlet.http.HttpServletResponse) throws java.lang.Exception
2019-05-15 21:19:48 -Mapped "{[/heat/heatPrice/add],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatPriceController.add()
2019-05-15 21:19:48 -Mapped "{[/heat/heatPrice/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatPriceController.remove(java.lang.Long)
2019-05-15 21:19:48 -Mapped "{[/heat/heatPrice/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatPriceController.remove(java.lang.Long[])
2019-05-15 21:19:48 -Mapped "{[/heat/heatPrice/update]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatPriceController.update(com.bootdo.heat.domain.HeatPriceDO)
2019-05-15 21:19:48 -Mapped "{[/heat/heatPrice/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.heat.controller.HeatPriceController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 21:19:48 -Mapped "{[/heat/heatPrice/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatPriceController.save(com.bootdo.heat.domain.HeatPriceDO)
2019-05-15 21:19:48 -Mapped "{[/heat/heatPrice],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatPriceController.HeatPrice()
2019-05-15 21:19:48 -Mapped "{[/heat/heatPrice/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatPriceController.edit(java.lang.Long,org.springframework.ui.Model)
2019-05-15 21:19:48 -Mapped "{[/heat/heatUpLoad/createHeatExcel],methods=[POST]}" onto public java.lang.String com.bootdo.heat.controller.HeatUpLoadController.createHeatExcel(com.bootdo.heat.domain.HeatDO) throws java.lang.Exception
2019-05-15 21:19:48 -Mapped "{[/heat/heatUpLoad/importHeatExcel]}" onto public java.lang.String com.bootdo.heat.controller.HeatUpLoadController.importHeatExcel(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)
2019-05-15 21:19:48 -Mapped "{[/heat/heatUpLoad],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatUpLoadController.HeatUpLoad()
2019-05-15 21:19:48 -Mapped "{[/heat/heatUpLoad/exprotHeatExcel],methods=[GET]}" onto public void com.bootdo.heat.controller.HeatUpLoadController.exprotHeatExcel(com.bootdo.heat.vo.HeatVo,javax.servlet.http.HttpServletResponse)
2019-05-15 21:19:48 -Mapped "{[/moneyList/moneyList/queryAllUser],methods=[POST]}" onto public java.util.List<com.bootdo.moneyList.damain.MoneyListDO> com.bootdo.moneyList.controller.MoneyListController.queryAllUser(com.bootdo.moneyList.damain.MoneyListDO)
2019-05-15 21:19:48 -Mapped "{[/moneyList/moneyList],methods=[GET]}" onto java.lang.String com.bootdo.moneyList.controller.MoneyListController.MoneyList()
2019-05-15 21:19:48 -Mapped "{[/moneyList/moneyList/queryAllUserName],methods=[POST]}" onto public java.util.List<com.bootdo.moneyList.damain.MoneyListDO> com.bootdo.moneyList.controller.MoneyListController.getAllUserName(com.bootdo.moneyList.damain.MoneyListDO)
2019-05-15 21:19:48 -Mapped "{[/moneyList/moneyList/updateMoney],methods=[POST]}" onto public java.lang.String com.bootdo.moneyList.controller.MoneyListController.updateMoney(com.bootdo.moneyList.damain.MoneyListDO)
2019-05-15 21:19:48 -Mapped "{[/moneyLog/elecLog/add],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.ElecLogController.add()
2019-05-15 21:19:48 -Mapped "{[/moneyLog/elecLog/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.ElecLogController.remove(java.lang.Long)
2019-05-15 21:19:48 -Mapped "{[/moneyLog/elecLog/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.ElecLogController.remove(java.lang.Long[])
2019-05-15 21:19:48 -Mapped "{[/moneyLog/elecLog/update]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.ElecLogController.update(java.util.Map<java.lang.String, java.lang.Object>,com.bootdo.moneyLog.domain.ElecLogDO)
2019-05-15 21:19:48 -Mapped "{[/moneyLog/elecLog/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.moneyLog.controller.ElecLogController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 21:19:48 -Mapped "{[/moneyLog/elecLog/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.ElecLogController.save(com.bootdo.moneyLog.domain.ElecLogDO)
2019-05-15 21:19:48 -Mapped "{[/moneyLog/elecLog],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.ElecLogController.moneyLog()
2019-05-15 21:19:48 -Mapped "{[/moneyLog/elecLog/exprotElecLog],methods=[GET]}" onto public void com.bootdo.moneyLog.controller.ElecLogController.exprotElecLog(com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-05-15 21:19:48 -Mapped "{[/moneyLog/elecLog/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.ElecLogController.edit(java.lang.Long,org.springframework.ui.Model)
2019-05-15 21:19:48 -Mapped "{[/moneyLog/heatLog/add],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.HeatLogController.add()
2019-05-15 21:19:48 -Mapped "{[/moneyLog/heatLog/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.HeatLogController.remove(java.lang.Long)
2019-05-15 21:19:48 -Mapped "{[/moneyLog/heatLog/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.HeatLogController.remove(java.lang.Long[])
2019-05-15 21:19:48 -Mapped "{[/moneyLog/heatLog/update]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.HeatLogController.update(java.util.Map<java.lang.String, java.lang.Object>,com.bootdo.moneyLog.domain.HeatLogDO)
2019-05-15 21:19:48 -Mapped "{[/moneyLog/heatLog/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.moneyLog.controller.HeatLogController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 21:19:48 -Mapped "{[/moneyLog/heatLog/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.HeatLogController.save(com.bootdo.moneyLog.domain.HeatLogDO)
2019-05-15 21:19:48 -Mapped "{[/moneyLog/heatLog/exprotHeatLog],methods=[GET]}" onto public void com.bootdo.moneyLog.controller.HeatLogController.exprotHeatLog(com.bootdo.moneyLog.vo.HeatLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-05-15 21:19:48 -Mapped "{[/moneyLog/heatLog],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.HeatLogController.HeatLog()
2019-05-15 21:19:48 -Mapped "{[/moneyLog/heatLog/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.HeatLogController.edit(java.lang.Long,org.springframework.ui.Model)
2019-05-15 21:19:48 -Mapped "{[/moneyLog/waterLog/add],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.WaterLogController.add()
2019-05-15 21:19:48 -Mapped "{[/moneyLog/waterLog/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.WaterLogController.remove(java.lang.Long)
2019-05-15 21:19:48 -Mapped "{[/moneyLog/waterLog/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.WaterLogController.remove(java.lang.Long[])
2019-05-15 21:19:48 -Mapped "{[/moneyLog/waterLog/update]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.WaterLogController.update(java.util.Map<java.lang.String, java.lang.Object>,com.bootdo.moneyLog.domain.WaterLogDO)
2019-05-15 21:19:48 -Mapped "{[/moneyLog/waterLog/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.moneyLog.controller.WaterLogController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 21:19:48 -Mapped "{[/moneyLog/waterLog/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.WaterLogController.save(com.bootdo.moneyLog.domain.WaterLogDO)
2019-05-15 21:19:48 -Mapped "{[/moneyLog/waterLog/exprotWaterLog],methods=[GET]}" onto public void com.bootdo.moneyLog.controller.WaterLogController.exprotWaterLog(com.bootdo.moneyLog.vo.WaterLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-05-15 21:19:48 -Mapped "{[/moneyLog/waterLog],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.WaterLogController.WaterLog()
2019-05-15 21:19:48 -Mapped "{[/moneyLog/waterLog/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.WaterLogController.edit(java.lang.Long,org.springframework.ui.Model)
2019-05-15 21:19:48 -Mapped "{[/oa/notify/add],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.add()
2019-05-15 21:19:48 -Mapped "{[/oa/notify/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.remove(java.lang.Long)
2019-05-15 21:19:48 -Mapped "{[/oa/notify/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.remove(java.lang.Long[])
2019-05-15 21:19:48 -Mapped "{[/oa/notify/update]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.update(com.bootdo.oa.domain.NotifyDO)
2019-05-15 21:19:48 -Mapped "{[/oa/notify/read/{id}],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.read(java.lang.Long,org.springframework.ui.Model)
2019-05-15 21:19:48 -Mapped "{[/oa/notify/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.oa.controller.NotifyController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 21:19:48 -Mapped "{[/oa/notify/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.save(com.bootdo.oa.domain.NotifyDO)
2019-05-15 21:19:48 -Mapped "{[/oa/notify/message],methods=[GET]}" onto com.bootdo.common.utils.PageUtils com.bootdo.oa.controller.NotifyController.message()
2019-05-15 21:19:48 -Mapped "{[/oa/notify/selfList],methods=[GET]}" onto com.bootdo.common.utils.PageUtils com.bootdo.oa.controller.NotifyController.selfList(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 21:19:48 -Mapped "{[/oa/notify],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.oaNotify()
2019-05-15 21:19:48 -Mapped "{[/oa/notify/selfNotify],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.selefNotify()
2019-05-15 21:19:48 -Mapped "{[/oa/notify/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.edit(java.lang.Long,org.springframework.ui.Model)
2019-05-15 21:19:48 -Mapped "{[/print/print/add],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.add()
2019-05-15 21:19:48 -Mapped "{[/print/print/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.print.controller.PrintController.remove(java.lang.Long)
2019-05-15 21:19:48 -Mapped "{[/print/print/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.print.controller.PrintController.remove(java.lang.Long[])
2019-05-15 21:19:48 -Mapped "{[/print/print/update]}" onto public com.bootdo.common.utils.R com.bootdo.print.controller.PrintController.update(com.bootdo.print.domain.PrintDO)
2019-05-15 21:19:48 -Mapped "{[/print/print/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.print.controller.PrintController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 21:19:48 -Mapped "{[/print/print/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.print.controller.PrintController.save(java.lang.String,com.bootdo.print.domain.PrintDO)
2019-05-15 21:19:48 -Mapped "{[/print/print],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.Print()
2019-05-15 21:19:48 -Mapped "{[/print/print/exprotPrint],methods=[GET]}" onto public void com.bootdo.print.controller.PrintController.exprotPrint(com.bootdo.print.vo.PrintVo,javax.servlet.http.HttpServletResponse)
2019-05-15 21:19:48 -Mapped "{[/print/print/printMoney],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.printMoney()
2019-05-15 21:19:48 -Mapped "{[/print/print/printEdit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.printEdit(java.lang.Long,org.springframework.ui.Model)
2019-05-15 21:19:48 -Mapped "{[/print/print/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.edit(java.lang.Long,org.springframework.ui.Model)
2019-05-15 21:19:48 -Mapped "{[/system/sysDept/add/{pId}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.add(java.lang.Long,org.springframework.ui.Model)
2019-05-15 21:19:48 -Mapped "{[/system/sysDept/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.remove(java.lang.Long)
2019-05-15 21:19:48 -Mapped "{[/system/sysDept/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.remove(java.lang.Long[])
2019-05-15 21:19:48 -Mapped "{[/system/sysDept/update]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.update(com.bootdo.system.domain.DeptDO)
2019-05-15 21:19:48 -Mapped "{[/system/sysDept/list],methods=[GET]}" onto public java.util.List<com.bootdo.system.domain.DeptDO> com.bootdo.system.controller.DeptController.list()
2019-05-15 21:19:48 -Mapped "{[/system/sysDept/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.save(com.bootdo.system.domain.DeptDO)
2019-05-15 21:19:48 -Mapped "{[/system/sysDept/tree],methods=[GET]}" onto public com.bootdo.common.domain.Tree<com.bootdo.system.domain.DeptDO> com.bootdo.system.controller.DeptController.tree()
2019-05-15 21:19:48 -Mapped "{[/system/sysDept/edit/{deptId}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.edit(java.lang.Long,org.springframework.ui.Model)
2019-05-15 21:19:48 -Mapped "{[/system/sysDept/treeView],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.treeView()
2019-05-15 21:19:48 -Mapped "{[/system/sysDept],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.dept()
2019-05-15 21:19:48 -Mapped "{[/index],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.index(org.springframework.ui.Model)
2019-05-15 21:19:48 -Mapped "{[/main],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.main()
2019-05-15 21:19:48 -Mapped "{[/logout],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.logout()
2019-05-15 21:19:48 -Mapped "{[/login],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.login(org.springframework.ui.Model)
2019-05-15 21:19:48 -Mapped "{[/ || ],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.welcome(org.springframework.ui.Model)
2019-05-15 21:19:48 -Mapped "{[/getVerify],methods=[GET]}" onto public void com.bootdo.system.controller.LoginController.getVerify(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-05-15 21:19:48 -Mapped "{[/login],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.LoginController.ajaxLogin(java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest)
2019-05-15 21:19:48 -Mapped "{[/sys/menu/add/{pId}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.MenuController.add(org.springframework.ui.Model,java.lang.Long)
2019-05-15 21:19:48 -Mapped "{[/sys/menu/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.MenuController.remove(java.lang.Long)
2019-05-15 21:19:48 -Mapped "{[/sys/menu/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.MenuController.update(com.bootdo.system.domain.MenuDO)
2019-05-15 21:19:48 -Mapped "{[/sys/menu/list]}" onto java.util.List<com.bootdo.system.domain.MenuDO> com.bootdo.system.controller.MenuController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 21:19:48 -Mapped "{[/sys/menu/save],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.MenuController.save(com.bootdo.system.domain.MenuDO)
2019-05-15 21:19:48 -Mapped "{[/sys/menu/tree/{roleId}],methods=[GET]}" onto com.bootdo.common.domain.Tree<com.bootdo.system.domain.MenuDO> com.bootdo.system.controller.MenuController.tree(java.lang.Long)
2019-05-15 21:19:48 -Mapped "{[/sys/menu/tree],methods=[GET]}" onto com.bootdo.common.domain.Tree<com.bootdo.system.domain.MenuDO> com.bootdo.system.controller.MenuController.tree()
2019-05-15 21:19:48 -Mapped "{[/sys/menu/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.MenuController.edit(org.springframework.ui.Model,java.lang.Long)
2019-05-15 21:19:48 -Mapped "{[/sys/menu],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.MenuController.menu(org.springframework.ui.Model)
2019-05-15 21:19:48 -Mapped "{[/sys/role/add],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.RoleController.add()
2019-05-15 21:19:48 -Mapped "{[/sys/role/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.update(com.bootdo.system.domain.RoleDO)
2019-05-15 21:19:48 -Mapped "{[/sys/role/list],methods=[GET]}" onto java.util.List<com.bootdo.system.domain.RoleDO> com.bootdo.system.controller.RoleController.list()
2019-05-15 21:19:48 -Mapped "{[/sys/role/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.save(java.lang.Long)
2019-05-15 21:19:48 -Mapped "{[/sys/role/save],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.save(com.bootdo.system.domain.RoleDO)
2019-05-15 21:19:48 -Mapped "{[/sys/role/batchRemove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.batchRemove(java.lang.Long[])
2019-05-15 21:19:48 -Mapped "{[/sys/role],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.RoleController.role()
2019-05-15 21:19:48 -Mapped "{[/sys/role/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.RoleController.edit(java.lang.Long,org.springframework.ui.Model)
2019-05-15 21:19:48 -Mapped "{[/sys/online/list]}" onto public java.util.List<com.bootdo.system.domain.UserOnline> com.bootdo.system.controller.SessionController.list()
2019-05-15 21:19:48 -Mapped "{[/sys/online/forceLogout/{sessionId}]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.SessionController.forceLogout(java.lang.String,org.springframework.web.servlet.mvc.support.RedirectAttributes)
2019-05-15 21:19:48 -Mapped "{[/sys/online],methods=[GET]}" onto public java.lang.String com.bootdo.system.controller.SessionController.online()
2019-05-15 21:19:48 -Mapped "{[/sys/online/sessionList]}" onto public java.util.Collection<org.apache.shiro.session.Session> com.bootdo.system.controller.SessionController.sessionList()
2019-05-15 21:19:48 -Mapped "{[/sys/user/exit],methods=[POST]}" onto boolean com.bootdo.system.controller.UserController.exit(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 21:19:48 -Mapped "{[/sys/user/add],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.add(org.springframework.ui.Model)
2019-05-15 21:19:48 -Mapped "{[/sys/user/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.remove(java.lang.Long)
2019-05-15 21:19:48 -Mapped "{[/sys/user/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.update(com.bootdo.system.domain.UserDO)
2019-05-15 21:19:48 -Mapped "{[/sys/user/list],methods=[GET]}" onto com.bootdo.common.utils.PageUtils com.bootdo.system.controller.UserController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 21:19:48 -Mapped "{[/sys/user/save],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.save(com.bootdo.system.domain.UserDO)
2019-05-15 21:19:48 -Mapped "{[/sys/user/batchRemove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.batchRemove(java.lang.Long[])
2019-05-15 21:19:48 -Mapped "{[/sys/user/tree],methods=[GET]}" onto public com.bootdo.common.domain.Tree<com.bootdo.system.domain.DeptDO> com.bootdo.system.controller.UserController.tree()
2019-05-15 21:19:48 -Mapped "{[/sys/user],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.user(org.springframework.ui.Model)
2019-05-15 21:19:48 -Mapped "{[/sys/user/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.edit(org.springframework.ui.Model,java.lang.Long)
2019-05-15 21:19:48 -Mapped "{[/sys/user/treeView],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.treeView()
2019-05-15 21:19:48 -Mapped "{[/sys/user/updatePeronal],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.updatePeronal(com.bootdo.system.domain.UserDO)
2019-05-15 21:19:48 -Mapped "{[/sys/user/resetPwd],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.resetPwd(com.bootdo.system.vo.UserVO)
2019-05-15 21:19:48 -Mapped "{[/sys/user/resetPwd/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.resetPwd(java.lang.Long,org.springframework.ui.Model)
2019-05-15 21:19:48 -Mapped "{[/sys/user/uploadImg],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.uploadImg(org.springframework.web.multipart.MultipartFile,java.lang.String,javax.servlet.http.HttpServletRequest)
2019-05-15 21:19:48 -Mapped "{[/sys/user/adminResetPwd],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.adminResetPwd(com.bootdo.system.vo.UserVO)
2019-05-15 21:19:48 -Mapped "{[/sys/user/personal],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.personal(org.springframework.ui.Model)
2019-05-15 21:19:48 -Mapped "{[/file/downImport/{importType}],methods=[GET]}" onto public void com.bootdo.temple.controller.TempletController.downImport(javax.servlet.http.HttpServletResponse,java.lang.String)
2019-05-15 21:19:48 -Mapped "{[/water/water/add],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterController.add()
2019-05-15 21:19:48 -Mapped "{[/water/water/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterController.remove(java.lang.Long)
2019-05-15 21:19:48 -Mapped "{[/water/water/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterController.remove(java.lang.Long[])
2019-05-15 21:19:48 -Mapped "{[/water/water/update]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterController.update(com.bootdo.water.domain.WaterDO)
2019-05-15 21:19:48 -Mapped "{[/water/water/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.water.controller.WaterController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 21:19:48 -Mapped "{[/water/water/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterController.save(com.bootdo.water.domain.WaterDO)
2019-05-15 21:19:48 -Mapped "{[/water/water/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterController.edit(java.lang.Long,org.springframework.ui.Model)
2019-05-15 21:19:48 -Mapped "{[/water/water/exprotWater],methods=[GET]}" onto public void com.bootdo.water.controller.WaterController.exprotExcel(com.bootdo.water.vo.WaterVo,javax.servlet.http.HttpServletResponse)
2019-05-15 21:19:48 -Mapped "{[/water/water],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterController.Water()
2019-05-15 21:19:48 -Mapped "{[/water/waterInto/exprotWaterIntoExcel],methods=[GET]}" onto public void com.bootdo.water.controller.WaterIntoController.exprotExcel(com.bootdo.water.vo.WaterVo,javax.servlet.http.HttpServletResponse)
2019-05-15 21:19:48 -Mapped "{[/water/waterInto/importWaterIntoExcel],methods=[POST]}" onto public java.lang.String com.bootdo.water.controller.WaterIntoController.importWaterIntoExcel(org.springframework.web.multipart.MultipartFile,com.bootdo.water.vo.WaterVo,javax.servlet.http.HttpServletResponse) throws java.lang.Exception
2019-05-15 21:19:48 -Mapped "{[/water/waterInto],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterIntoController.WaterInto()
2019-05-15 21:19:49 -Mapped "{[/water/waterPrice/add],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterPriceController.add()
2019-05-15 21:19:49 -Mapped "{[/water/waterPrice/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterPriceController.remove(java.lang.Long)
2019-05-15 21:19:49 -Mapped "{[/water/waterPrice/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterPriceController.remove(java.lang.Long[])
2019-05-15 21:19:49 -Mapped "{[/water/waterPrice/update]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterPriceController.update(com.bootdo.water.domain.WaterPriceDO)
2019-05-15 21:19:49 -Mapped "{[/water/waterPrice/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.water.controller.WaterPriceController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 21:19:49 -Mapped "{[/water/waterPrice/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterPriceController.save(com.bootdo.water.domain.WaterPriceDO)
2019-05-15 21:19:49 -Mapped "{[/water/waterPrice],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterPriceController.WaterPrice()
2019-05-15 21:19:49 -Mapped "{[/water/waterPrice/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterPriceController.edit(java.lang.Long,org.springframework.ui.Model)
2019-05-15 21:19:49 -Mapped "{[/water/waterUpLoad/createWaterExcel],methods=[POST]}" onto public java.lang.String com.bootdo.water.controller.WaterUpLoadController.createWaterExcel(com.bootdo.water.domain.WaterDO) throws java.lang.Exception
2019-05-15 21:19:49 -Mapped "{[/water/waterUpLoad/exprotWaterExcel],methods=[GET]}" onto public void com.bootdo.water.controller.WaterUpLoadController.exprotWaterExcel(com.bootdo.water.vo.WaterVo,javax.servlet.http.HttpServletResponse)
2019-05-15 21:19:49 -Mapped "{[/water/waterUpLoad],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterUpLoadController.WaterUpLoad()
2019-05-15 21:19:49 -Mapped "{[/water/waterUpLoad/importWaterExcel]}" onto public java.lang.String com.bootdo.water.controller.WaterUpLoadController.importWaterExcel(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)
2019-05-15 21:19:49 -Mapped "{[/v2/api-docs],methods=[GET],produces=[application/json || application/hal+json]}" onto public org.springframework.http.ResponseEntity<springfox.documentation.spring.web.json.Json> springfox.documentation.swagger2.web.Swagger2Controller.getDocumentation(java.lang.String,javax.servlet.http.HttpServletRequest)
2019-05-15 21:19:49 -Mapped "{[/swagger-resources/configuration/security]}" onto org.springframework.http.ResponseEntity<springfox.documentation.swagger.web.SecurityConfiguration> springfox.documentation.swagger.web.ApiResourceController.securityConfiguration()
2019-05-15 21:19:49 -Mapped "{[/swagger-resources]}" onto org.springframework.http.ResponseEntity<java.util.List<springfox.documentation.swagger.web.SwaggerResource>> springfox.documentation.swagger.web.ApiResourceController.swaggerResources()
2019-05-15 21:19:49 -Mapped "{[/swagger-resources/configuration/ui]}" onto org.springframework.http.ResponseEntity<springfox.documentation.swagger.web.UiConfiguration> springfox.documentation.swagger.web.ApiResourceController.uiConfiguration()
2019-05-15 21:19:49 -Initializing ExecutorService  'messageBrokerTaskScheduler'
2019-05-15 21:19:49 -Mapped URL path [/endpointChat/**] onto handler of type [class org.springframework.web.socket.sockjs.support.SockJsHttpRequestHandler]
2019-05-15 21:19:49 -Initializing ExecutorService  'brokerChannelExecutor'
2019-05-15 21:19:50 -Mapped URL path [/**/favicon.ico] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-05-15 21:19:51 -Looking for @ControllerAdvice: org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@a38c7fe: startup date [Wed May 15 21:19:15 CST 2019]; root of context hierarchy
2019-05-15 21:19:51 -Mapped URL path [/webjars/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-05-15 21:19:51 -Mapped URL path [/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-05-15 21:19:51 -Mapped URL path [/files/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-05-15 21:19:51 -Detected @ExceptionHandler methods in BDExceptionHandler
2019-05-15 21:19:51 -[THYMELEAF][main] Template Mode 'LEGACYHTML5' is deprecated. Using Template Mode 'HTML' instead.
2019-05-15 21:19:54 -Registering beans for JMX exposure on startup
2019-05-15 21:19:54 -Bean with name 'dataSource' has been autodetected for JMX exposure
2019-05-15 21:19:54 -Located MBean 'dataSource': registering with JMX server as MBean [com.alibaba.druid.pool:name=dataSource,type=DruidDataSource]
2019-05-15 21:19:54 -Starting beans in phase 2147483647
2019-05-15 21:19:54 -Context refreshed
2019-05-15 21:19:54 -Found 1 custom documentation plugin(s)
2019-05-15 21:19:54 -Scanning for api listing references
2019-05-15 21:19:55 -Generating unique operation named: getCountDUsingPOST_1
2019-05-15 21:19:55 -Generating unique operation named: removeUsingPOST_1
2019-05-15 21:19:55 -Generating unique operation named: addUsingGET_1
2019-05-15 21:19:55 -Generating unique operation named: editUsingGET_1
2019-05-15 21:19:55 -Generating unique operation named: listUsingGET_1
2019-05-15 21:19:55 -Generating unique operation named: removeUsingPOST_2
2019-05-15 21:19:55 -Generating unique operation named: removeUsingPOST_3
2019-05-15 21:19:55 -Generating unique operation named: saveUsingPOST_1
2019-05-15 21:19:55 -Generating unique operation named: updateUsingGET_1
2019-05-15 21:19:55 -Generating unique operation named: updateUsingHEAD_1
2019-05-15 21:19:55 -Generating unique operation named: updateUsingPOST_1
2019-05-15 21:19:55 -Generating unique operation named: updateUsingPUT_1
2019-05-15 21:19:55 -Generating unique operation named: updateUsingPATCH_1
2019-05-15 21:19:55 -Generating unique operation named: updateUsingDELETE_1
2019-05-15 21:19:55 -Generating unique operation named: updateUsingOPTIONS_1
2019-05-15 21:19:55 -Generating unique operation named: updateUsingTRACE_1
2019-05-15 21:19:55 -Generating unique operation named: addUsingGET_2
2019-05-15 21:19:55 -Generating unique operation named: editUsingGET_2
2019-05-15 21:19:55 -Generating unique operation named: listUsingGET_2
2019-05-15 21:19:55 -Generating unique operation named: removeUsingPOST_4
2019-05-15 21:19:55 -Generating unique operation named: removeUsingPOST_5
2019-05-15 21:19:55 -Generating unique operation named: saveUsingPOST_2
2019-05-15 21:19:55 -Generating unique operation named: updateUsingPOST_2
2019-05-15 21:19:55 -Generating unique operation named: exprotExcelUsingGET_1
2019-05-15 21:19:55 -Generating unique operation named: addUsingGET_3
2019-05-15 21:19:55 -Generating unique operation named: editUsingGET_3
2019-05-15 21:19:55 -Generating unique operation named: listUsingGET_3
2019-05-15 21:19:55 -Generating unique operation named: removeUsingPOST_6
2019-05-15 21:19:55 -Generating unique operation named: removeUsingPOST_7
2019-05-15 21:19:55 -Generating unique operation named: saveUsingPOST_3
2019-05-15 21:19:55 -Generating unique operation named: updateUsingGET_2
2019-05-15 21:19:55 -Generating unique operation named: updateUsingHEAD_2
2019-05-15 21:19:55 -Generating unique operation named: updateUsingPOST_3
2019-05-15 21:19:55 -Generating unique operation named: updateUsingPUT_2
2019-05-15 21:19:55 -Generating unique operation named: updateUsingPATCH_2
2019-05-15 21:19:55 -Generating unique operation named: updateUsingDELETE_2
2019-05-15 21:19:55 -Generating unique operation named: updateUsingOPTIONS_2
2019-05-15 21:19:55 -Generating unique operation named: updateUsingTRACE_2
2019-05-15 21:19:55 -Generating unique operation named: addUsingGET_4
2019-05-15 21:19:55 -Generating unique operation named: editUsingGET_4
2019-05-15 21:19:55 -Generating unique operation named: listUsingGET_4
2019-05-15 21:19:55 -Generating unique operation named: removeUsingPOST_8
2019-05-15 21:19:55 -Generating unique operation named: removeUsingPOST_9
2019-05-15 21:19:55 -Generating unique operation named: saveUsingPOST_4
2019-05-15 21:19:56 -Generating unique operation named: updateUsingGET_3
2019-05-15 21:19:56 -Generating unique operation named: updateUsingHEAD_3
2019-05-15 21:19:56 -Generating unique operation named: updateUsingPOST_4
2019-05-15 21:19:56 -Generating unique operation named: updateUsingPUT_3
2019-05-15 21:19:56 -Generating unique operation named: updateUsingPATCH_3
2019-05-15 21:19:56 -Generating unique operation named: updateUsingDELETE_3
2019-05-15 21:19:56 -Generating unique operation named: updateUsingOPTIONS_3
2019-05-15 21:19:56 -Generating unique operation named: updateUsingTRACE_3
2019-05-15 21:19:56 -Generating unique operation named: ElecUsingGET_1
2019-05-15 21:19:56 -Generating unique operation named: addUsingGET_5
2019-05-15 21:19:56 -Generating unique operation named: editUsingGET_5
2019-05-15 21:19:56 -Generating unique operation named: listUsingGET_5
2019-05-15 21:19:56 -Generating unique operation named: removeUsingPOST_10
2019-05-15 21:19:56 -Generating unique operation named: removeUsingPOST_11
2019-05-15 21:19:56 -Generating unique operation named: saveUsingPOST_5
2019-05-15 21:19:56 -Generating unique operation named: updateUsingGET_4
2019-05-15 21:19:56 -Generating unique operation named: updateUsingHEAD_4
2019-05-15 21:19:56 -Generating unique operation named: updateUsingPOST_5
2019-05-15 21:19:56 -Generating unique operation named: updateUsingPUT_4
2019-05-15 21:19:56 -Generating unique operation named: updateUsingPATCH_4
2019-05-15 21:19:56 -Generating unique operation named: updateUsingDELETE_4
2019-05-15 21:19:56 -Generating unique operation named: updateUsingOPTIONS_4
2019-05-15 21:19:56 -Generating unique operation named: updateUsingTRACE_4
2019-05-15 21:19:56 -Generating unique operation named: editUsingGET_6
2019-05-15 21:19:56 -Generating unique operation named: listUsingGET_6
2019-05-15 21:19:56 -Generating unique operation named: updateUsingPOST_6
2019-05-15 21:19:56 -Generating unique operation named: addUsingGET_6
2019-05-15 21:19:56 -Generating unique operation named: editUsingGET_7
2019-05-15 21:19:56 -Generating unique operation named: exprotExcelUsingGET_2
2019-05-15 21:19:56 -Generating unique operation named: listUsingGET_7
2019-05-15 21:19:56 -Generating unique operation named: removeUsingPOST_12
2019-05-15 21:19:56 -Generating unique operation named: removeUsingPOST_13
2019-05-15 21:19:56 -Generating unique operation named: saveUsingPOST_6
2019-05-15 21:19:56 -Generating unique operation named: updateUsingGET_5
2019-05-15 21:19:56 -Generating unique operation named: updateUsingHEAD_5
2019-05-15 21:19:56 -Generating unique operation named: updateUsingPOST_7
2019-05-15 21:19:56 -Generating unique operation named: updateUsingPUT_5
2019-05-15 21:19:56 -Generating unique operation named: updateUsingPATCH_5
2019-05-15 21:19:56 -Generating unique operation named: updateUsingDELETE_5
2019-05-15 21:19:56 -Generating unique operation named: updateUsingOPTIONS_5
2019-05-15 21:19:56 -Generating unique operation named: updateUsingTRACE_5
2019-05-15 21:19:56 -Generating unique operation named: exprotExcelUsingGET_3
2019-05-15 21:19:56 -Generating unique operation named: addUsingGET_7
2019-05-15 21:19:56 -Generating unique operation named: editUsingGET_8
2019-05-15 21:19:56 -Generating unique operation named: listUsingGET_8
2019-05-15 21:19:56 -Generating unique operation named: removeUsingPOST_14
2019-05-15 21:19:56 -Generating unique operation named: removeUsingPOST_15
2019-05-15 21:19:56 -Generating unique operation named: saveUsingPOST_7
2019-05-15 21:19:56 -Generating unique operation named: updateUsingGET_6
2019-05-15 21:19:56 -Generating unique operation named: updateUsingHEAD_6
2019-05-15 21:19:56 -Generating unique operation named: updateUsingPOST_8
2019-05-15 21:19:56 -Generating unique operation named: updateUsingPUT_6
2019-05-15 21:19:56 -Generating unique operation named: updateUsingPATCH_6
2019-05-15 21:19:56 -Generating unique operation named: updateUsingDELETE_6
2019-05-15 21:19:56 -Generating unique operation named: updateUsingOPTIONS_6
2019-05-15 21:19:56 -Generating unique operation named: updateUsingTRACE_6
2019-05-15 21:19:56 -Generating unique operation named: addUsingGET_8
2019-05-15 21:19:56 -Generating unique operation named: editUsingGET_9
2019-05-15 21:19:56 -Generating unique operation named: listUsingGET_9
2019-05-15 21:19:56 -Generating unique operation named: removeUsingPOST_16
2019-05-15 21:19:56 -Generating unique operation named: removeUsingPOST_17
2019-05-15 21:19:56 -Generating unique operation named: saveUsingPOST_8
2019-05-15 21:19:56 -Generating unique operation named: updateUsingGET_7
2019-05-15 21:19:56 -Generating unique operation named: updateUsingHEAD_7
2019-05-15 21:19:56 -Generating unique operation named: updateUsingPOST_9
2019-05-15 21:19:56 -Generating unique operation named: updateUsingPUT_7
2019-05-15 21:19:56 -Generating unique operation named: updateUsingPATCH_7
2019-05-15 21:19:56 -Generating unique operation named: updateUsingDELETE_7
2019-05-15 21:19:56 -Generating unique operation named: updateUsingOPTIONS_7
2019-05-15 21:19:56 -Generating unique operation named: updateUsingTRACE_7
2019-05-15 21:19:56 -Generating unique operation named: addUsingGET_9
2019-05-15 21:19:56 -Generating unique operation named: editUsingGET_10
2019-05-15 21:19:56 -Generating unique operation named: infoUsingGET_1
2019-05-15 21:19:56 -Generating unique operation named: infoUsingHEAD_1
2019-05-15 21:19:56 -Generating unique operation named: infoUsingPOST_1
2019-05-15 21:19:56 -Generating unique operation named: infoUsingPUT_1
2019-05-15 21:19:56 -Generating unique operation named: infoUsingPATCH_1
2019-05-15 21:19:56 -Generating unique operation named: infoUsingDELETE_1
2019-05-15 21:19:56 -Generating unique operation named: infoUsingOPTIONS_1
2019-05-15 21:19:56 -Generating unique operation named: infoUsingTRACE_1
2019-05-15 21:19:56 -Generating unique operation named: listUsingGET_10
2019-05-15 21:19:56 -Generating unique operation named: removeUsingPOST_18
2019-05-15 21:19:56 -Generating unique operation named: removeUsingPOST_19
2019-05-15 21:19:56 -Generating unique operation named: saveUsingPOST_9
2019-05-15 21:19:56 -Generating unique operation named: updateUsingPOST_10
2019-05-15 21:19:56 -Generating unique operation named: listUsingGET_11
2019-05-15 21:19:56 -Generating unique operation named: removeUsingPOST_20
2019-05-15 21:19:56 -Generating unique operation named: welcomeUsingGET_1
2019-05-15 21:19:56 -Generating unique operation named: addUsingGET_10
2019-05-15 21:19:56 -Generating unique operation named: editUsingGET_11
2019-05-15 21:19:56 -Generating unique operation named: listUsingGET_12
2019-05-15 21:19:56 -Generating unique operation named: removeUsingPOST_21
2019-05-15 21:19:56 -Generating unique operation named: saveUsingPOST_10
2019-05-15 21:19:56 -Generating unique operation named: treeUsingGET_1
2019-05-15 21:19:56 -Generating unique operation named: treeUsingGET_2
2019-05-15 21:19:56 -Generating unique operation named: updateUsingPOST_11
2019-05-15 21:19:56 -Generating unique operation named: addUsingGET_11
2019-05-15 21:19:56 -Generating unique operation named: editUsingGET_12
2019-05-15 21:19:56 -Generating unique operation named: listUsingGET_13
2019-05-15 21:19:56 -Generating unique operation named: removeUsingPOST_22
2019-05-15 21:19:56 -Generating unique operation named: removeUsingPOST_23
2019-05-15 21:19:56 -Generating unique operation named: saveUsingPOST_11
2019-05-15 21:19:56 -Generating unique operation named: updateUsingGET_8
2019-05-15 21:19:56 -Generating unique operation named: updateUsingHEAD_8
2019-05-15 21:19:56 -Generating unique operation named: updateUsingPOST_12
2019-05-15 21:19:56 -Generating unique operation named: updateUsingPUT_8
2019-05-15 21:19:56 -Generating unique operation named: updateUsingPATCH_8
2019-05-15 21:19:56 -Generating unique operation named: updateUsingDELETE_8
2019-05-15 21:19:56 -Generating unique operation named: updateUsingOPTIONS_8
2019-05-15 21:19:56 -Generating unique operation named: updateUsingTRACE_8
2019-05-15 21:19:56 -Generating unique operation named: addUsingGET_12
2019-05-15 21:19:56 -Generating unique operation named: editUsingGET_13
2019-05-15 21:19:56 -Generating unique operation named: listUsingGET_14
2019-05-15 21:19:56 -Generating unique operation named: removeUsingPOST_24
2019-05-15 21:19:56 -Generating unique operation named: removeUsingPOST_25
2019-05-15 21:19:56 -Generating unique operation named: saveUsingPOST_12
2019-05-15 21:19:57 -Generating unique operation named: updateUsingGET_9
2019-05-15 21:19:57 -Generating unique operation named: updateUsingHEAD_9
2019-05-15 21:19:57 -Generating unique operation named: updateUsingPOST_13
2019-05-15 21:19:57 -Generating unique operation named: updateUsingPUT_9
2019-05-15 21:19:57 -Generating unique operation named: updateUsingPATCH_9
2019-05-15 21:19:57 -Generating unique operation named: updateUsingDELETE_9
2019-05-15 21:19:57 -Generating unique operation named: updateUsingOPTIONS_9
2019-05-15 21:19:57 -Generating unique operation named: updateUsingTRACE_9
2019-05-15 21:19:57 -Generating unique operation named: addUsingGET_13
2019-05-15 21:19:57 -Generating unique operation named: batchRemoveUsingPOST_1
2019-05-15 21:19:57 -Generating unique operation named: editUsingGET_14
2019-05-15 21:19:57 -Generating unique operation named: listUsingGET_15
2019-05-15 21:19:57 -Generating unique operation named: saveUsingPOST_13
2019-05-15 21:19:57 -Generating unique operation named: saveUsingPOST_14
2019-05-15 21:19:57 -Generating unique operation named: updateUsingPOST_14
2019-05-15 21:19:57 -Generating unique operation named: listUsingGET_16
2019-05-15 21:19:57 -Generating unique operation named: listUsingHEAD_1
2019-05-15 21:19:57 -Generating unique operation named: listUsingPOST_1
2019-05-15 21:19:57 -Generating unique operation named: listUsingPUT_1
2019-05-15 21:19:57 -Generating unique operation named: listUsingPATCH_1
2019-05-15 21:19:57 -Generating unique operation named: listUsingDELETE_1
2019-05-15 21:19:57 -Generating unique operation named: listUsingOPTIONS_1
2019-05-15 21:19:57 -Generating unique operation named: listUsingTRACE_1
2019-05-15 21:19:57 -Generating unique operation named: countDDUsingGET_1
2019-05-15 21:19:57 -Generating unique operation named: exportDDUsingGET_1
2019-05-15 21:19:57 -Generating unique operation named: getCountYYUsingPOST_1
2019-05-15 21:19:57 -Generating unique operation named: getCountMMUsingPOST_1
2019-05-15 21:19:57 -Generating unique operation named: addUsingGET_14
2019-05-15 21:19:57 -Generating unique operation named: batchRemoveUsingPOST_2
2019-05-15 21:19:57 -Generating unique operation named: editUsingGET_15
2019-05-15 21:19:57 -Generating unique operation named: listUsingGET_17
2019-05-15 21:19:57 -Generating unique operation named: removeUsingPOST_26
2019-05-15 21:19:57 -Generating unique operation named: saveUsingPOST_15
2019-05-15 21:19:57 -Generating unique operation named: treeUsingGET_3
2019-05-15 21:19:57 -Generating unique operation named: treeViewUsingGET_1
2019-05-15 21:19:57 -Generating unique operation named: updateUsingPOST_15
2019-05-15 21:19:57 -Generating unique operation named: addUsingGET_15
2019-05-15 21:19:57 -Generating unique operation named: editUsingGET_16
2019-05-15 21:19:57 -Generating unique operation named: exprotExcelUsingGET_4
2019-05-15 21:19:57 -Generating unique operation named: listUsingGET_18
2019-05-15 21:19:57 -Generating unique operation named: removeUsingPOST_27
2019-05-15 21:19:57 -Generating unique operation named: removeUsingPOST_28
2019-05-15 21:19:57 -Generating unique operation named: saveUsingPOST_16
2019-05-15 21:19:57 -Generating unique operation named: updateUsingGET_10
2019-05-15 21:19:57 -Generating unique operation named: updateUsingHEAD_10
2019-05-15 21:19:57 -Generating unique operation named: updateUsingPOST_16
2019-05-15 21:19:57 -Generating unique operation named: updateUsingPUT_10
2019-05-15 21:19:57 -Generating unique operation named: updateUsingPATCH_10
2019-05-15 21:19:57 -Generating unique operation named: updateUsingDELETE_10
2019-05-15 21:19:57 -Generating unique operation named: updateUsingOPTIONS_10
2019-05-15 21:19:57 -Generating unique operation named: updateUsingTRACE_10
2019-05-15 21:19:57 -Generating unique operation named: exprotExcelUsingGET_5
2019-05-15 21:19:57 -Generating unique operation named: addUsingGET_16
2019-05-15 21:19:57 -Generating unique operation named: editUsingGET_17
2019-05-15 21:19:57 -Generating unique operation named: listUsingGET_19
2019-05-15 21:19:57 -Generating unique operation named: removeUsingPOST_29
2019-05-15 21:19:57 -Generating unique operation named: removeUsingPOST_30
2019-05-15 21:19:57 -Generating unique operation named: saveUsingPOST_17
2019-05-15 21:19:57 -Generating unique operation named: updateUsingGET_11
2019-05-15 21:19:57 -Generating unique operation named: updateUsingHEAD_11
2019-05-15 21:19:57 -Generating unique operation named: updateUsingPOST_17
2019-05-15 21:19:57 -Generating unique operation named: updateUsingPUT_11
2019-05-15 21:19:57 -Generating unique operation named: updateUsingPATCH_11
2019-05-15 21:19:57 -Generating unique operation named: updateUsingDELETE_11
2019-05-15 21:19:57 -Generating unique operation named: updateUsingOPTIONS_11
2019-05-15 21:19:57 -Generating unique operation named: updateUsingTRACE_11
2019-05-15 21:19:57 -Generating unique operation named: addUsingGET_17
2019-05-15 21:19:57 -Generating unique operation named: editUsingGET_18
2019-05-15 21:19:57 -Generating unique operation named: listUsingGET_20
2019-05-15 21:19:57 -Generating unique operation named: removeUsingPOST_31
2019-05-15 21:19:57 -Generating unique operation named: removeUsingPOST_32
2019-05-15 21:19:57 -Generating unique operation named: saveUsingPOST_18
2019-05-15 21:19:57 -Generating unique operation named: updateUsingGET_12
2019-05-15 21:19:57 -Generating unique operation named: updateUsingHEAD_12
2019-05-15 21:19:57 -Generating unique operation named: updateUsingPOST_18
2019-05-15 21:19:57 -Generating unique operation named: updateUsingPUT_12
2019-05-15 21:19:57 -Generating unique operation named: updateUsingPATCH_12
2019-05-15 21:19:57 -Generating unique operation named: updateUsingDELETE_12
2019-05-15 21:19:57 -Generating unique operation named: updateUsingOPTIONS_12
2019-05-15 21:19:57 -Generating unique operation named: updateUsingTRACE_12
2019-05-15 21:19:57 -Starting Quartz Scheduler now
2019-05-15 21:19:57 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED started.
2019-05-15 21:19:57 -Starting...
2019-05-15 21:19:57 -BrokerAvailabilityEvent[available=true, SimpleBrokerMessageHandler [DefaultSubscriptionRegistry[cache[0 destination(s)], registry[0 sessions]]]]
2019-05-15 21:19:57 -Started.
2019-05-15 21:19:57 -Starting ProtocolHandler ["http-nio-8081"]
2019-05-15 21:19:57 -Using a shared selector for servlet write/read
2019-05-15 21:19:57 -Tomcat started on port(s): 8081 (http) with context path ''
2019-05-15 21:19:57 -Started BootdoApplication in 43.905 seconds (JVM running for 45.083)
2019-05-15 21:20:49 -WebSocketSession[0 current WS(0)-HttpStream(0)-HttpPoll(0), 0 total, 0 closed abnormally (0 connect failure, 0 send limit, 0 transport error)], stompSubProtocol[processed CONNECT(0)-CONNECTED(0)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], outboundChannelpool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], sockJsScheduler[pool size = 1, active threads = 1, queued tasks = 0, completed tasks = 0]
2019-05-15 21:22:05 -Starting BootdoApplication on PC-201905091110 with PID 2164 (D:\eclipse2018-work\bootdo\target\classes started by Administrator in D:\eclipse2018-work\bootdo)
2019-05-15 21:22:05 -Running with Spring Boot v2.0.3.RELEASE, Spring v5.0.7.RELEASE
2019-05-15 21:22:05 -The following profiles are active: dev
2019-05-15 21:22:05 -Refreshing org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@4d5650ae: startup date [Wed May 15 21:22:05 CST 2019]; root of context hierarchy
2019-05-15 21:22:08 -Multiple Spring Data modules found, entering strict repository configuration mode!
2019-05-15 21:22:09 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$d4b53e4c] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-05-15 21:22:09 -Bean 'shiroConfig' of type [com.bootdo.system.config.ShiroConfig$$EnhancerBySpringCGLIB$$c70e6cf3] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-05-15 21:22:10 -Bean 'userRealm' of type [com.bootdo.system.shiro.UserRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-05-15 21:22:10 -Bean 'cacheManager2' of type [net.sf.ehcache.CacheManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-05-15 21:22:10 -Bean 'ehCacheManager' of type [org.apache.shiro.cache.ehcache.EhCacheManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-05-15 21:22:10 -Cache with name 'com.bootdo.system.shiro.UserRealm.authorizationCache' does not yet exist.  Creating now.
2019-05-15 21:22:10 -Added EhCache named [com.bootdo.system.shiro.UserRealm.authorizationCache]
2019-05-15 21:22:10 -Bean 'sessionDAO' of type [org.apache.shiro.session.mgt.eis.MemorySessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-05-15 21:22:10 -Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-05-15 21:22:10 -Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-05-15 21:22:11 -Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-05-15 21:22:11 -Tomcat initialized with port(s): 8081 (http)
2019-05-15 21:22:11 -Initializing ProtocolHandler ["http-nio-8081"]
2019-05-15 21:22:11 -Starting service [Tomcat]
2019-05-15 21:22:11 -Starting Servlet Engine: Apache Tomcat/8.5.31
2019-05-15 21:22:11 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [D:\Java\JDK\jdk1.8.0_102\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;D:/Java/JRE/bin/server;D:/Java/JRE/bin;D:/Java/JRE/lib/amd64;C:\ProgramData\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Windows\System32\OpenSSH\;%JAVA_HOME\bin%;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;;C:\Users\Administrator\Desktop;;.]
2019-05-15 21:22:11 -Initializing Spring embedded WebApplicationContext
2019-05-15 21:22:11 -Root WebApplicationContext: initialization completed in 6668 ms
2019-05-15 21:22:12 -Mapping filter: 'characterEncodingFilter' to: [/*]
2019-05-15 21:22:12 -Mapping filter: 'hiddenHttpMethodFilter' to: [/*]
2019-05-15 21:22:12 -Mapping filter: 'httpPutFormContentFilter' to: [/*]
2019-05-15 21:22:12 -Mapping filter: 'requestContextFilter' to: [/*]
2019-05-15 21:22:12 -Filter xssFilter was not registered (disabled)
2019-05-15 21:22:12 -Mapping filter: 'webStatFilter' to urls: [/*]
2019-05-15 21:22:12 -Mapping filter: 'shiroFilterFactoryBean' to: [/*]
2019-05-15 21:22:12 -Servlet statViewServlet mapped to [/druid/*]
2019-05-15 21:22:12 -Servlet dispatcherServlet mapped to [/]
2019-05-15 21:22:19 -ApplicationContext registed-->org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@4d5650ae: startup date [Wed May 15 21:22:05 CST 2019]; root of context hierarchy
2019-05-15 21:22:19 -Using default implementation for ThreadExecutor
2019-05-15 21:22:19 -Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2019-05-15 21:22:19 -Quartz Scheduler v.2.2.1 created.
2019-05-15 21:22:19 -RAMJobStore initialized.
2019-05-15 21:22:19 -Scheduler meta-data: Quartz Scheduler (v2.2.1) 'schedulerFactoryBean' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2019-05-15 21:22:19 -Quartz scheduler 'schedulerFactoryBean' initialized from an externally provided properties instance.
2019-05-15 21:22:19 -Quartz scheduler version: 2.2.1
2019-05-15 21:22:19 -JobFactory set to: com.bootdo.common.quartz.factory.JobFactory@8077c97
2019-05-15 21:22:20 -Initializing ExecutorService  'clientInboundChannelExecutor'
2019-05-15 21:22:20 -Initializing ExecutorService  'clientOutboundChannelExecutor'
2019-05-15 21:22:22 -Mapped "{[/charts/countDD/exportDD],methods=[GET]}" onto public void com.bootdo.charts.controller.countDDController.exportDD(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.HeatLogVo,com.bootdo.moneyLog.vo.WaterLogVo,javax.servlet.http.HttpServletResponse)
2019-05-15 21:22:22 -Mapped "{[/charts/countDD],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.countDDController.countDD()
2019-05-15 21:22:22 -Mapped "{[/charts/countDD/getCountDD],methods=[POST]}" onto public com.bootdo.charts.vo.CountDayVo com.bootdo.charts.controller.countDDController.getCountD(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo)
2019-05-15 21:22:22 -Mapped "{[/charts/countMM],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.countMMController.countMM()
2019-05-15 21:22:22 -Mapped "{[/charts/countMM/getCountMM],methods=[POST]}" onto public java.util.Map com.bootdo.charts.controller.countMMController.getCountMM(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo)
2019-05-15 21:22:22 -Mapped "{[/charts/countMM/exportMM],methods=[GET]}" onto public void com.bootdo.charts.controller.countMMController.exportMM(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.HeatLogVo,com.bootdo.moneyLog.vo.WaterLogVo,javax.servlet.http.HttpServletResponse)
2019-05-15 21:22:22 -Mapped "{[/charts/countOwe/getCountOwe],methods=[POST]}" onto public com.bootdo.charts.vo.CountOweVo com.bootdo.charts.controller.countOweController.getCountD(com.bootdo.elec.vo.ElecVo,com.bootdo.water.vo.WaterVo,com.bootdo.heat.vo.HeatVo)
2019-05-15 21:22:22 -Mapped "{[/charts/countOwe/exportOwe],methods=[GET]}" onto public void com.bootdo.charts.controller.countOweController.exportOwe(com.bootdo.elec.vo.ElecVo,com.bootdo.heat.vo.HeatVo,com.bootdo.water.vo.WaterVo,javax.servlet.http.HttpServletResponse)
2019-05-15 21:22:22 -Mapped "{[/charts/countOwe],methods=[GET]}" onto java.lang.String com.bootdo.charts.controller.countOweController.countOwe()
2019-05-15 21:22:22 -Mapped "{[/charts/countRun],methods=[GET]}" onto java.lang.String com.bootdo.charts.controller.countRunController.countRun()
2019-05-15 21:22:22 -Mapped "{[/charts/countRun/getCountRun],methods=[POST]}" onto public java.util.Map com.bootdo.charts.controller.countRunController.getCountRun(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo)
2019-05-15 21:22:22 -Mapped "{[/charts/countRun/exportRun],methods=[GET]}" onto public void com.bootdo.charts.controller.countRunController.exportRun(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.HeatLogVo,com.bootdo.moneyLog.vo.WaterLogVo,javax.servlet.http.HttpServletResponse)
2019-05-15 21:22:22 -Mapped "{[/charts/countYY/getCountYY],methods=[POST]}" onto public java.util.Map com.bootdo.charts.controller.countYYController.getCountYY(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo)
2019-05-15 21:22:22 -Mapped "{[/charts/countYY/exportYY],methods=[GET]}" onto public void com.bootdo.charts.controller.countYYController.exportYY(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.HeatLogVo,com.bootdo.moneyLog.vo.WaterLogVo,javax.servlet.http.HttpServletResponse)
2019-05-15 21:22:22 -Mapped "{[/charts/countYY],methods=[GET]}" onto java.lang.String com.bootdo.charts.controller.countYYController.countYY()
2019-05-15 21:22:22 -Mapped "{[/charts/tableDD/exportDD],methods=[GET]}" onto public void com.bootdo.charts.controller.tableDDController.exportDD(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.HeatLogVo,com.bootdo.moneyLog.vo.WaterLogVo,javax.servlet.http.HttpServletResponse)
2019-05-15 21:22:22 -Mapped "{[/charts/tableDD],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.tableDDController.countDD()
2019-05-15 21:22:22 -Mapped "{[/charts/tableDD/getTableDD],methods=[POST]}" onto public java.util.Map com.bootdo.charts.controller.tableDDController.getTableDD(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo)
2019-05-15 21:22:22 -Mapped "{[/charts/tableElecMM/tableElecMM],methods=[POST]}" onto public java.util.Map com.bootdo.charts.controller.tableElecMMController.tableElecMM(com.bootdo.elec.vo.ElecVo,com.bootdo.moneyLog.vo.ElecLogVo)
2019-05-15 21:22:22 -Mapped "{[/charts/tableElecMM],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.tableElecMMController.tableElecMM()
2019-05-15 21:22:22 -Mapped "{[/charts/tableElecMM/exportElecMM],methods=[GET]}" onto public void com.bootdo.charts.controller.tableElecMMController.exportElecMM(com.bootdo.elec.vo.ElecVo,com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse)
2019-05-15 21:22:22 -Mapped "{[/charts/tableElecYY],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.tableElecYYController.tableElecYY()
2019-05-15 21:22:22 -Mapped "{[/charts/tableElecYY/getCountYY],methods=[POST]}" onto public java.util.Map com.bootdo.charts.controller.tableElecYYController.getCountYY(com.bootdo.elec.vo.ElecVo,com.bootdo.moneyLog.vo.ElecLogVo)
2019-05-15 21:22:22 -Mapped "{[/charts/tableElecYY/exportElecYY],methods=[GET]}" onto public void com.bootdo.charts.controller.tableElecYYController.exportElecYY(com.bootdo.elec.vo.ElecVo,com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse)
2019-05-15 21:22:22 -Mapped "{[/charts/tableHeatMM/tableHeatMM],methods=[POST]}" onto public java.util.Map com.bootdo.charts.controller.tableHeatMMController.tableHeatMM(com.bootdo.heat.vo.HeatVo,com.bootdo.moneyLog.vo.HeatLogVo)
2019-05-15 21:22:22 -Mapped "{[/charts/tableHeatMM],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.tableHeatMMController.tableHeatMM()
2019-05-15 21:22:22 -Mapped "{[/charts/tableHeatMM/exportHeatMM],methods=[GET]}" onto public void com.bootdo.charts.controller.tableHeatMMController.exportHeatMM(com.bootdo.heat.vo.HeatVo,com.bootdo.moneyLog.vo.HeatLogVo,javax.servlet.http.HttpServletResponse)
2019-05-15 21:22:22 -Mapped "{[/charts/tableHeatYY/getCountYY],methods=[POST]}" onto public java.util.Map com.bootdo.charts.controller.tableHeatYYController.getCountMM(com.bootdo.heat.vo.HeatVo,com.bootdo.moneyLog.vo.HeatLogVo)
2019-05-15 21:22:22 -Mapped "{[/charts/tableHeatYY],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.tableHeatYYController.tableHeatYY()
2019-05-15 21:22:22 -Mapped "{[/charts/tableHeatYY/exportHeatYY],methods=[GET]}" onto public void com.bootdo.charts.controller.tableHeatYYController.exportHeatYY(com.bootdo.heat.vo.HeatVo,com.bootdo.moneyLog.vo.HeatLogVo,javax.servlet.http.HttpServletResponse)
2019-05-15 21:22:22 -Mapped "{[/charts/tableWaterMM/exportWaterMM],methods=[GET]}" onto public void com.bootdo.charts.controller.tableWaterMMController.exportWaterMM(com.bootdo.water.vo.WaterVo,com.bootdo.moneyLog.vo.WaterLogVo,javax.servlet.http.HttpServletResponse)
2019-05-15 21:22:22 -Mapped "{[/charts/tableWaterMM],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.tableWaterMMController.tableWaterMM()
2019-05-15 21:22:22 -Mapped "{[/charts/tableWaterMM/tableWaterMM],methods=[POST]}" onto public java.util.Map com.bootdo.charts.controller.tableWaterMMController.tableWaterMM(com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.water.vo.WaterVo)
2019-05-15 21:22:22 -Mapped "{[/charts/tableWaterYY/tableWaterYY],methods=[POST]}" onto public java.util.Map com.bootdo.charts.controller.tableWaterYYController.tableWaterYY(com.bootdo.water.vo.WaterVo,com.bootdo.moneyLog.vo.WaterLogVo)
2019-05-15 21:22:22 -Mapped "{[/charts/tableWaterYY],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.tableWaterYYController.tableWaterYY()
2019-05-15 21:22:22 -Mapped "{[/charts/tableWaterYY/exportWaterYY],methods=[GET]}" onto public void com.bootdo.charts.controller.tableWaterYYController.exportWaterYY(com.bootdo.water.vo.WaterVo,com.bootdo.moneyLog.vo.WaterLogVo,javax.servlet.http.HttpServletResponse)
2019-05-15 21:22:22 -Mapped "{[/common/dict/add],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.add()
2019-05-15 21:22:22 -Mapped "{[/common/dict/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.remove(java.lang.Long)
2019-05-15 21:22:22 -Mapped "{[/common/dict/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.remove(java.lang.Long[])
2019-05-15 21:22:22 -Mapped "{[/common/dict/update]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.update(com.bootdo.common.domain.DictDO)
2019-05-15 21:22:22 -Mapped "{[/common/dict/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.common.controller.DictController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 21:22:22 -Mapped "{[/common/dict/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.save(com.bootdo.common.domain.DictDO)
2019-05-15 21:22:22 -Mapped "{[/common/dict/type],methods=[GET]}" onto public java.util.List<com.bootdo.common.domain.DictDO> com.bootdo.common.controller.DictController.listType()
2019-05-15 21:22:22 -Mapped "{[/common/dict/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.edit(java.lang.Long,org.springframework.ui.Model)
2019-05-15 21:22:22 -Mapped "{[/common/dict/list/{type}],methods=[GET]}" onto public java.util.List<com.bootdo.common.domain.DictDO> com.bootdo.common.controller.DictController.listByType(java.lang.String)
2019-05-15 21:22:22 -Mapped "{[/common/dict],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.dict()
2019-05-15 21:22:22 -Mapped "{[/common/dict/add/{type}/{description}],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.addD(org.springframework.ui.Model,java.lang.String,java.lang.String)
2019-05-15 21:22:22 -Mapped "{[/common/sysFile/add],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.FileController.add()
2019-05-15 21:22:22 -Mapped "{[/common/sysFile/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.remove(java.lang.Long,javax.servlet.http.HttpServletRequest)
2019-05-15 21:22:22 -Mapped "{[/common/sysFile/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.remove(java.lang.Long[])
2019-05-15 21:22:22 -Mapped "{[/common/sysFile/update]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.update(com.bootdo.common.domain.FileDO)
2019-05-15 21:22:22 -Mapped "{[/common/sysFile/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.common.controller.FileController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 21:22:22 -Mapped "{[/common/sysFile/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.save(com.bootdo.common.domain.FileDO)
2019-05-15 21:22:22 -Mapped "{[/common/sysFile/info/{id}]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.info(java.lang.Long)
2019-05-15 21:22:22 -Mapped "{[/common/sysFile/edit],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.FileController.edit(java.lang.Long,org.springframework.ui.Model)
2019-05-15 21:22:22 -Mapped "{[/common/sysFile],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.FileController.sysFile(org.springframework.ui.Model)
2019-05-15 21:22:22 -Mapped "{[/common/sysFile/upload],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.FileController.upload(org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpServletRequest)
2019-05-15 21:22:22 -Mapped "{[/common/generator/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.GeneratorController.update(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 21:22:22 -Mapped "{[/common/generator/list],methods=[GET]}" onto java.util.List<java.util.Map<java.lang.String, java.lang.Object>> com.bootdo.common.controller.GeneratorController.list()
2019-05-15 21:22:22 -Mapped "{[/common/generator/code/{tableName}]}" onto public void com.bootdo.common.controller.GeneratorController.code(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String) throws java.io.IOException
2019-05-15 21:22:22 -Mapped "{[/common/generator],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.GeneratorController.generator()
2019-05-15 21:22:22 -Mapped "{[/common/generator/batchCode]}" onto public void com.bootdo.common.controller.GeneratorController.batchCode(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String) throws java.io.IOException
2019-05-15 21:22:22 -Mapped "{[/common/generator/edit],methods=[GET]}" onto public java.lang.String com.bootdo.common.controller.GeneratorController.edit(org.springframework.ui.Model)
2019-05-15 21:22:22 -Mapped "{[/common/job/add],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.JobController.add()
2019-05-15 21:22:22 -Mapped "{[/common/job/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.remove(java.lang.Long)
2019-05-15 21:22:22 -Mapped "{[/common/job/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.remove(java.lang.Long[])
2019-05-15 21:22:22 -Mapped "{[/common/job/update],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.update(com.bootdo.common.domain.TaskDO)
2019-05-15 21:22:22 -Mapped "{[/common/job/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.common.controller.JobController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 21:22:22 -Mapped "{[/common/job/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.save(com.bootdo.common.domain.TaskDO)
2019-05-15 21:22:22 -Mapped "{[/common/job/info/{id}]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.info(java.lang.Long)
2019-05-15 21:22:22 -Mapped "{[/common/job/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.JobController.edit(java.lang.Long,org.springframework.ui.Model)
2019-05-15 21:22:22 -Mapped "{[/common/job/changeJobStatus],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.changeJobStatus(java.lang.Long,java.lang.String)
2019-05-15 21:22:22 -Mapped "{[/common/job],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.JobController.taskScheduleJob()
2019-05-15 21:22:22 -Mapped "{[/common/log/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.LogController.remove(java.lang.Long)
2019-05-15 21:22:22 -Mapped "{[/common/log],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.LogController.log()
2019-05-15 21:22:22 -Mapped "{[/common/log/list],methods=[GET]}" onto com.bootdo.common.domain.PageDO<com.bootdo.common.domain.LogDO> com.bootdo.common.controller.LogController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 21:22:22 -Mapped "{[/common/log/batchRemove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.LogController.batchRemove(java.lang.Long[])
2019-05-15 21:22:22 -Mapped "{[/common/long],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.LongController.Long()
2019-05-15 21:22:22 -Mapped "{[/common/time],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.TimeController.Time()
2019-05-15 21:22:22 -Mapped "{[/error]}" onto public com.bootdo.common.utils.R com.bootdo.common.exception.MainsiteErrorController.handleError(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-05-15 21:22:22 -Mapped "{[/error],produces=[text/html]}" onto public org.springframework.web.servlet.ModelAndView com.bootdo.common.exception.MainsiteErrorController.errorHtml(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-05-15 21:22:22 -Mapped "{[/elec/elec/add],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecController.add()
2019-05-15 21:22:22 -Mapped "{[/elec/elec/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.remove(java.lang.Long)
2019-05-15 21:22:22 -Mapped "{[/elec/elec/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.remove(java.lang.Long[])
2019-05-15 21:22:22 -Mapped "{[/elec/elec/update],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.update(com.bootdo.elec.domain.ElecDO)
2019-05-15 21:22:22 -Mapped "{[/elec/elec/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.elec.controller.ElecController.list(java.util.Map<java.lang.String, java.lang.Object>,com.bootdo.elec.domain.ElecDO)
2019-05-15 21:22:22 -Mapped "{[/elec/elec/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.save(com.bootdo.elec.domain.ElecDO)
2019-05-15 21:22:22 -Mapped "{[/elec/elec/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecController.edit(java.lang.Long,org.springframework.ui.Model)
2019-05-15 21:22:22 -Mapped "{[/elec/elec],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecController.Elec()
2019-05-15 21:22:22 -Mapped "{[/elec/elec/YhElecUpdate],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.YhElecUpdate(com.bootdo.elec.domain.ElecDO)
2019-05-15 21:22:22 -Mapped "{[/elec/elec/exprotElec],methods=[GET]}" onto public void com.bootdo.elec.controller.ElecController.exprotExcel(com.bootdo.elec.vo.ElecVo,javax.servlet.http.HttpServletResponse)
2019-05-15 21:22:22 -Mapped "{[/elec/elec/WxElecUpdate],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.WxElecUpdate(com.bootdo.elec.domain.ElecDO)
2019-05-15 21:22:22 -Mapped "{[/elec/elecInto/importElecIntoExcel],methods=[POST]}" onto public java.lang.String com.bootdo.elec.controller.ElecIntoController.importElecIntoExcel(org.springframework.web.multipart.MultipartFile,com.bootdo.elec.vo.ElecVo,javax.servlet.http.HttpServletResponse) throws java.lang.Exception
2019-05-15 21:22:22 -Mapped "{[/elec/elecInto/exprotElecIntoExcel],methods=[GET]}" onto public void com.bootdo.elec.controller.ElecIntoController.exprotExcel(com.bootdo.elec.vo.ElecVo,javax.servlet.http.HttpServletResponse)
2019-05-15 21:22:22 -Mapped "{[/elec/elecInto],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecIntoController.ElecInto()
2019-05-15 21:22:22 -Mapped "{[/elec/elecPrice/add],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecPriceController.add()
2019-05-15 21:22:22 -Mapped "{[/elec/elecPrice/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecPriceController.remove(java.lang.Long)
2019-05-15 21:22:22 -Mapped "{[/elec/elecPrice/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecPriceController.remove(java.lang.Long[])
2019-05-15 21:22:22 -Mapped "{[/elec/elecPrice/update]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecPriceController.update(com.bootdo.elec.domain.ElecPriceDO)
2019-05-15 21:22:22 -Mapped "{[/elec/elecPrice/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.elec.controller.ElecPriceController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 21:22:22 -Mapped "{[/elec/elecPrice/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecPriceController.save(com.bootdo.elec.domain.ElecPriceDO,com.bootdo.elec.domain.ElecDO)
2019-05-15 21:22:22 -Mapped "{[/elec/elecPrice/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecPriceController.edit(java.lang.Long,org.springframework.ui.Model)
2019-05-15 21:22:22 -Mapped "{[/elec/elecPrice],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecPriceController.ElecPrice()
2019-05-15 21:22:22 -Mapped "{[/elec/elecUpLoad],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecUpLoadController.Elec()
2019-05-15 21:22:22 -Mapped "{[/elec/elecUpLoad/exprotElecExcel],methods=[GET]}" onto public void com.bootdo.elec.controller.ElecUpLoadController.exprotElecExcel(com.bootdo.elec.vo.ElecVo,javax.servlet.http.HttpServletResponse)
2019-05-15 21:22:22 -Mapped "{[/elec/elecUpLoad/importElecExcel],methods=[POST]}" onto public java.util.Map<java.lang.String, java.lang.Object> com.bootdo.elec.controller.ElecUpLoadController.importElecExcel(org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpServletRequest) throws java.lang.Exception
2019-05-15 21:22:22 -Mapped "{[/heat/heat/add],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatController.add()
2019-05-15 21:22:22 -Mapped "{[/heat/heat/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatController.remove(java.lang.Integer)
2019-05-15 21:22:22 -Mapped "{[/heat/heat/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatController.remove(java.lang.Integer[])
2019-05-15 21:22:22 -Mapped "{[/heat/heat/update]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatController.update(com.bootdo.heat.domain.HeatDO)
2019-05-15 21:22:22 -Mapped "{[/heat/heat/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.heat.controller.HeatController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 21:22:22 -Mapped "{[/heat/heat/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatController.save(com.bootdo.heat.domain.HeatDO)
2019-05-15 21:22:22 -Mapped "{[/heat/heat/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatController.edit(java.lang.Integer,org.springframework.ui.Model)
2019-05-15 21:22:22 -Mapped "{[/heat/heat/exprotHeat],methods=[GET]}" onto public void com.bootdo.heat.controller.HeatController.exprotExcel(com.bootdo.heat.vo.HeatVo,javax.servlet.http.HttpServletResponse)
2019-05-15 21:22:22 -Mapped "{[/heat/heat],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatController.Heat()
2019-05-15 21:22:22 -Mapped "{[/heat/heatInto/importHeatIntoExcel],methods=[POST]}" onto public java.lang.String com.bootdo.heat.controller.HeatIntoController.importHeatIntoExcel(org.springframework.web.multipart.MultipartFile,com.bootdo.heat.vo.HeatVo,javax.servlet.http.HttpServletResponse) throws java.lang.Exception
2019-05-15 21:22:22 -Mapped "{[/heat/heatInto/exprotHeatIntoExcel],methods=[GET]}" onto public void com.bootdo.heat.controller.HeatIntoController.exprotExcel(com.bootdo.heat.vo.HeatVo,javax.servlet.http.HttpServletResponse)
2019-05-15 21:22:22 -Mapped "{[/heat/heatInto],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatIntoController.HeatInto()
2019-05-15 21:22:22 -Mapped "{[/heat/heatPrice/add],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatPriceController.add()
2019-05-15 21:22:22 -Mapped "{[/heat/heatPrice/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatPriceController.remove(java.lang.Long)
2019-05-15 21:22:22 -Mapped "{[/heat/heatPrice/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatPriceController.remove(java.lang.Long[])
2019-05-15 21:22:22 -Mapped "{[/heat/heatPrice/update]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatPriceController.update(com.bootdo.heat.domain.HeatPriceDO)
2019-05-15 21:22:22 -Mapped "{[/heat/heatPrice/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.heat.controller.HeatPriceController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 21:22:22 -Mapped "{[/heat/heatPrice/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatPriceController.save(com.bootdo.heat.domain.HeatPriceDO)
2019-05-15 21:22:22 -Mapped "{[/heat/heatPrice/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatPriceController.edit(java.lang.Long,org.springframework.ui.Model)
2019-05-15 21:22:22 -Mapped "{[/heat/heatPrice],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatPriceController.HeatPrice()
2019-05-15 21:22:22 -Mapped "{[/heat/heatUpLoad/createHeatExcel],methods=[POST]}" onto public java.lang.String com.bootdo.heat.controller.HeatUpLoadController.createHeatExcel(com.bootdo.heat.domain.HeatDO) throws java.lang.Exception
2019-05-15 21:22:22 -Mapped "{[/heat/heatUpLoad/importHeatExcel]}" onto public java.lang.String com.bootdo.heat.controller.HeatUpLoadController.importHeatExcel(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)
2019-05-15 21:22:22 -Mapped "{[/heat/heatUpLoad],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatUpLoadController.HeatUpLoad()
2019-05-15 21:22:22 -Mapped "{[/heat/heatUpLoad/exprotHeatExcel],methods=[GET]}" onto public void com.bootdo.heat.controller.HeatUpLoadController.exprotHeatExcel(com.bootdo.heat.vo.HeatVo,javax.servlet.http.HttpServletResponse)
2019-05-15 21:22:22 -Mapped "{[/moneyList/moneyList],methods=[GET]}" onto java.lang.String com.bootdo.moneyList.controller.MoneyListController.MoneyList()
2019-05-15 21:22:22 -Mapped "{[/moneyList/moneyList/queryAllUserName],methods=[POST]}" onto public java.util.List<com.bootdo.moneyList.damain.MoneyListDO> com.bootdo.moneyList.controller.MoneyListController.getAllUserName(com.bootdo.moneyList.damain.MoneyListDO)
2019-05-15 21:22:22 -Mapped "{[/moneyList/moneyList/queryAllUser],methods=[POST]}" onto public java.util.List<com.bootdo.moneyList.damain.MoneyListDO> com.bootdo.moneyList.controller.MoneyListController.queryAllUser(com.bootdo.moneyList.damain.MoneyListDO)
2019-05-15 21:22:22 -Mapped "{[/moneyList/moneyList/updateMoney],methods=[POST]}" onto public java.lang.String com.bootdo.moneyList.controller.MoneyListController.updateMoney(com.bootdo.moneyList.damain.MoneyListDO)
2019-05-15 21:22:22 -Mapped "{[/moneyLog/elecLog/add],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.ElecLogController.add()
2019-05-15 21:22:22 -Mapped "{[/moneyLog/elecLog/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.ElecLogController.remove(java.lang.Long)
2019-05-15 21:22:22 -Mapped "{[/moneyLog/elecLog/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.ElecLogController.remove(java.lang.Long[])
2019-05-15 21:22:22 -Mapped "{[/moneyLog/elecLog/update]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.ElecLogController.update(java.util.Map<java.lang.String, java.lang.Object>,com.bootdo.moneyLog.domain.ElecLogDO)
2019-05-15 21:22:22 -Mapped "{[/moneyLog/elecLog/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.moneyLog.controller.ElecLogController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 21:22:22 -Mapped "{[/moneyLog/elecLog/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.ElecLogController.save(com.bootdo.moneyLog.domain.ElecLogDO)
2019-05-15 21:22:22 -Mapped "{[/moneyLog/elecLog/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.ElecLogController.edit(java.lang.Long,org.springframework.ui.Model)
2019-05-15 21:22:22 -Mapped "{[/moneyLog/elecLog],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.ElecLogController.moneyLog()
2019-05-15 21:22:22 -Mapped "{[/moneyLog/elecLog/exprotElecLog],methods=[GET]}" onto public void com.bootdo.moneyLog.controller.ElecLogController.exprotElecLog(com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-05-15 21:22:22 -Mapped "{[/moneyLog/heatLog/add],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.HeatLogController.add()
2019-05-15 21:22:22 -Mapped "{[/moneyLog/heatLog/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.HeatLogController.remove(java.lang.Long)
2019-05-15 21:22:22 -Mapped "{[/moneyLog/heatLog/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.HeatLogController.remove(java.lang.Long[])
2019-05-15 21:22:22 -Mapped "{[/moneyLog/heatLog/update]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.HeatLogController.update(java.util.Map<java.lang.String, java.lang.Object>,com.bootdo.moneyLog.domain.HeatLogDO)
2019-05-15 21:22:22 -Mapped "{[/moneyLog/heatLog/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.moneyLog.controller.HeatLogController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 21:22:22 -Mapped "{[/moneyLog/heatLog/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.HeatLogController.save(com.bootdo.moneyLog.domain.HeatLogDO)
2019-05-15 21:22:22 -Mapped "{[/moneyLog/heatLog/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.HeatLogController.edit(java.lang.Long,org.springframework.ui.Model)
2019-05-15 21:22:22 -Mapped "{[/moneyLog/heatLog],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.HeatLogController.HeatLog()
2019-05-15 21:22:22 -Mapped "{[/moneyLog/heatLog/exprotHeatLog],methods=[GET]}" onto public void com.bootdo.moneyLog.controller.HeatLogController.exprotHeatLog(com.bootdo.moneyLog.vo.HeatLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-05-15 21:22:22 -Mapped "{[/moneyLog/waterLog/add],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.WaterLogController.add()
2019-05-15 21:22:22 -Mapped "{[/moneyLog/waterLog/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.WaterLogController.remove(java.lang.Long)
2019-05-15 21:22:22 -Mapped "{[/moneyLog/waterLog/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.WaterLogController.remove(java.lang.Long[])
2019-05-15 21:22:22 -Mapped "{[/moneyLog/waterLog/update]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.WaterLogController.update(java.util.Map<java.lang.String, java.lang.Object>,com.bootdo.moneyLog.domain.WaterLogDO)
2019-05-15 21:22:22 -Mapped "{[/moneyLog/waterLog/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.moneyLog.controller.WaterLogController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 21:22:22 -Mapped "{[/moneyLog/waterLog/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.WaterLogController.save(com.bootdo.moneyLog.domain.WaterLogDO)
2019-05-15 21:22:22 -Mapped "{[/moneyLog/waterLog/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.WaterLogController.edit(java.lang.Long,org.springframework.ui.Model)
2019-05-15 21:22:22 -Mapped "{[/moneyLog/waterLog],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.WaterLogController.WaterLog()
2019-05-15 21:22:22 -Mapped "{[/moneyLog/waterLog/exprotWaterLog],methods=[GET]}" onto public void com.bootdo.moneyLog.controller.WaterLogController.exprotWaterLog(com.bootdo.moneyLog.vo.WaterLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-05-15 21:22:22 -Mapped "{[/oa/notify/add],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.add()
2019-05-15 21:22:22 -Mapped "{[/oa/notify/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.remove(java.lang.Long)
2019-05-15 21:22:22 -Mapped "{[/oa/notify/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.remove(java.lang.Long[])
2019-05-15 21:22:22 -Mapped "{[/oa/notify/update]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.update(com.bootdo.oa.domain.NotifyDO)
2019-05-15 21:22:22 -Mapped "{[/oa/notify/read/{id}],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.read(java.lang.Long,org.springframework.ui.Model)
2019-05-15 21:22:22 -Mapped "{[/oa/notify/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.oa.controller.NotifyController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 21:22:22 -Mapped "{[/oa/notify/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.save(com.bootdo.oa.domain.NotifyDO)
2019-05-15 21:22:22 -Mapped "{[/oa/notify/message],methods=[GET]}" onto com.bootdo.common.utils.PageUtils com.bootdo.oa.controller.NotifyController.message()
2019-05-15 21:22:22 -Mapped "{[/oa/notify],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.oaNotify()
2019-05-15 21:22:22 -Mapped "{[/oa/notify/selfNotify],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.selefNotify()
2019-05-15 21:22:22 -Mapped "{[/oa/notify/selfList],methods=[GET]}" onto com.bootdo.common.utils.PageUtils com.bootdo.oa.controller.NotifyController.selfList(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 21:22:22 -Mapped "{[/oa/notify/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.edit(java.lang.Long,org.springframework.ui.Model)
2019-05-15 21:22:22 -Mapped "{[/print/print/add],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.add()
2019-05-15 21:22:22 -Mapped "{[/print/print/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.print.controller.PrintController.remove(java.lang.Long)
2019-05-15 21:22:22 -Mapped "{[/print/print/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.print.controller.PrintController.remove(java.lang.Long[])
2019-05-15 21:22:22 -Mapped "{[/print/print/update]}" onto public com.bootdo.common.utils.R com.bootdo.print.controller.PrintController.update(com.bootdo.print.domain.PrintDO)
2019-05-15 21:22:22 -Mapped "{[/print/print/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.print.controller.PrintController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 21:22:22 -Mapped "{[/print/print/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.print.controller.PrintController.save(java.lang.String,com.bootdo.print.domain.PrintDO)
2019-05-15 21:22:22 -Mapped "{[/print/print/exprotPrint],methods=[GET]}" onto public void com.bootdo.print.controller.PrintController.exprotPrint(com.bootdo.print.vo.PrintVo,javax.servlet.http.HttpServletResponse)
2019-05-15 21:22:22 -Mapped "{[/print/print/printMoney],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.printMoney()
2019-05-15 21:22:22 -Mapped "{[/print/print/printEdit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.printEdit(java.lang.Long,org.springframework.ui.Model)
2019-05-15 21:22:22 -Mapped "{[/print/print/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.edit(java.lang.Long,org.springframework.ui.Model)
2019-05-15 21:22:22 -Mapped "{[/print/print],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.Print()
2019-05-15 21:22:22 -Mapped "{[/system/sysDept/add/{pId}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.add(java.lang.Long,org.springframework.ui.Model)
2019-05-15 21:22:22 -Mapped "{[/system/sysDept/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.remove(java.lang.Long)
2019-05-15 21:22:22 -Mapped "{[/system/sysDept/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.remove(java.lang.Long[])
2019-05-15 21:22:22 -Mapped "{[/system/sysDept/update]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.update(com.bootdo.system.domain.DeptDO)
2019-05-15 21:22:22 -Mapped "{[/system/sysDept/list],methods=[GET]}" onto public java.util.List<com.bootdo.system.domain.DeptDO> com.bootdo.system.controller.DeptController.list()
2019-05-15 21:22:22 -Mapped "{[/system/sysDept/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.save(com.bootdo.system.domain.DeptDO)
2019-05-15 21:22:22 -Mapped "{[/system/sysDept/tree],methods=[GET]}" onto public com.bootdo.common.domain.Tree<com.bootdo.system.domain.DeptDO> com.bootdo.system.controller.DeptController.tree()
2019-05-15 21:22:22 -Mapped "{[/system/sysDept],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.dept()
2019-05-15 21:22:22 -Mapped "{[/system/sysDept/treeView],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.treeView()
2019-05-15 21:22:22 -Mapped "{[/system/sysDept/edit/{deptId}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.edit(java.lang.Long,org.springframework.ui.Model)
2019-05-15 21:22:22 -Mapped "{[/index],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.index(org.springframework.ui.Model)
2019-05-15 21:22:22 -Mapped "{[/main],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.main()
2019-05-15 21:22:22 -Mapped "{[/logout],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.logout()
2019-05-15 21:22:22 -Mapped "{[/ || ],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.welcome(org.springframework.ui.Model)
2019-05-15 21:22:22 -Mapped "{[/getVerify],methods=[GET]}" onto public void com.bootdo.system.controller.LoginController.getVerify(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-05-15 21:22:22 -Mapped "{[/login],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.LoginController.ajaxLogin(java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest)
2019-05-15 21:22:22 -Mapped "{[/login],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.login(org.springframework.ui.Model)
2019-05-15 21:22:22 -Mapped "{[/sys/menu/add/{pId}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.MenuController.add(org.springframework.ui.Model,java.lang.Long)
2019-05-15 21:22:22 -Mapped "{[/sys/menu/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.MenuController.remove(java.lang.Long)
2019-05-15 21:22:22 -Mapped "{[/sys/menu/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.MenuController.update(com.bootdo.system.domain.MenuDO)
2019-05-15 21:22:22 -Mapped "{[/sys/menu/list]}" onto java.util.List<com.bootdo.system.domain.MenuDO> com.bootdo.system.controller.MenuController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 21:22:22 -Mapped "{[/sys/menu/save],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.MenuController.save(com.bootdo.system.domain.MenuDO)
2019-05-15 21:22:22 -Mapped "{[/sys/menu/tree/{roleId}],methods=[GET]}" onto com.bootdo.common.domain.Tree<com.bootdo.system.domain.MenuDO> com.bootdo.system.controller.MenuController.tree(java.lang.Long)
2019-05-15 21:22:22 -Mapped "{[/sys/menu/tree],methods=[GET]}" onto com.bootdo.common.domain.Tree<com.bootdo.system.domain.MenuDO> com.bootdo.system.controller.MenuController.tree()
2019-05-15 21:22:22 -Mapped "{[/sys/menu],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.MenuController.menu(org.springframework.ui.Model)
2019-05-15 21:22:22 -Mapped "{[/sys/menu/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.MenuController.edit(org.springframework.ui.Model,java.lang.Long)
2019-05-15 21:22:22 -Mapped "{[/sys/role/add],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.RoleController.add()
2019-05-15 21:22:22 -Mapped "{[/sys/role/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.update(com.bootdo.system.domain.RoleDO)
2019-05-15 21:22:22 -Mapped "{[/sys/role/list],methods=[GET]}" onto java.util.List<com.bootdo.system.domain.RoleDO> com.bootdo.system.controller.RoleController.list()
2019-05-15 21:22:22 -Mapped "{[/sys/role/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.save(java.lang.Long)
2019-05-15 21:22:22 -Mapped "{[/sys/role/save],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.save(com.bootdo.system.domain.RoleDO)
2019-05-15 21:22:22 -Mapped "{[/sys/role/batchRemove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.batchRemove(java.lang.Long[])
2019-05-15 21:22:22 -Mapped "{[/sys/role],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.RoleController.role()
2019-05-15 21:22:22 -Mapped "{[/sys/role/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.RoleController.edit(java.lang.Long,org.springframework.ui.Model)
2019-05-15 21:22:22 -Mapped "{[/sys/online/list]}" onto public java.util.List<com.bootdo.system.domain.UserOnline> com.bootdo.system.controller.SessionController.list()
2019-05-15 21:22:22 -Mapped "{[/sys/online],methods=[GET]}" onto public java.lang.String com.bootdo.system.controller.SessionController.online()
2019-05-15 21:22:22 -Mapped "{[/sys/online/sessionList]}" onto public java.util.Collection<org.apache.shiro.session.Session> com.bootdo.system.controller.SessionController.sessionList()
2019-05-15 21:22:22 -Mapped "{[/sys/online/forceLogout/{sessionId}]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.SessionController.forceLogout(java.lang.String,org.springframework.web.servlet.mvc.support.RedirectAttributes)
2019-05-15 21:22:22 -Mapped "{[/sys/user/exit],methods=[POST]}" onto boolean com.bootdo.system.controller.UserController.exit(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 21:22:22 -Mapped "{[/sys/user/add],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.add(org.springframework.ui.Model)
2019-05-15 21:22:22 -Mapped "{[/sys/user/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.remove(java.lang.Long)
2019-05-15 21:22:22 -Mapped "{[/sys/user/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.update(com.bootdo.system.domain.UserDO)
2019-05-15 21:22:22 -Mapped "{[/sys/user/list],methods=[GET]}" onto com.bootdo.common.utils.PageUtils com.bootdo.system.controller.UserController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 21:22:22 -Mapped "{[/sys/user/save],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.save(com.bootdo.system.domain.UserDO)
2019-05-15 21:22:22 -Mapped "{[/sys/user/batchRemove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.batchRemove(java.lang.Long[])
2019-05-15 21:22:22 -Mapped "{[/sys/user/tree],methods=[GET]}" onto public com.bootdo.common.domain.Tree<com.bootdo.system.domain.DeptDO> com.bootdo.system.controller.UserController.tree()
2019-05-15 21:22:22 -Mapped "{[/sys/user],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.user(org.springframework.ui.Model)
2019-05-15 21:22:22 -Mapped "{[/sys/user/treeView],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.treeView()
2019-05-15 21:22:22 -Mapped "{[/sys/user/resetPwd],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.resetPwd(com.bootdo.system.vo.UserVO)
2019-05-15 21:22:22 -Mapped "{[/sys/user/resetPwd/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.resetPwd(java.lang.Long,org.springframework.ui.Model)
2019-05-15 21:22:22 -Mapped "{[/sys/user/updatePeronal],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.updatePeronal(com.bootdo.system.domain.UserDO)
2019-05-15 21:22:22 -Mapped "{[/sys/user/personal],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.personal(org.springframework.ui.Model)
2019-05-15 21:22:22 -Mapped "{[/sys/user/adminResetPwd],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.adminResetPwd(com.bootdo.system.vo.UserVO)
2019-05-15 21:22:22 -Mapped "{[/sys/user/uploadImg],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.uploadImg(org.springframework.web.multipart.MultipartFile,java.lang.String,javax.servlet.http.HttpServletRequest)
2019-05-15 21:22:22 -Mapped "{[/sys/user/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.edit(org.springframework.ui.Model,java.lang.Long)
2019-05-15 21:22:22 -Mapped "{[/file/downImport/{importType}],methods=[GET]}" onto public void com.bootdo.temple.controller.TempletController.downImport(javax.servlet.http.HttpServletResponse,java.lang.String)
2019-05-15 21:22:22 -Mapped "{[/water/water/add],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterController.add()
2019-05-15 21:22:22 -Mapped "{[/water/water/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterController.remove(java.lang.Long)
2019-05-15 21:22:22 -Mapped "{[/water/water/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterController.remove(java.lang.Long[])
2019-05-15 21:22:22 -Mapped "{[/water/water/update]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterController.update(com.bootdo.water.domain.WaterDO)
2019-05-15 21:22:22 -Mapped "{[/water/water/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.water.controller.WaterController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 21:22:22 -Mapped "{[/water/water/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterController.save(com.bootdo.water.domain.WaterDO)
2019-05-15 21:22:22 -Mapped "{[/water/water],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterController.Water()
2019-05-15 21:22:22 -Mapped "{[/water/water/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterController.edit(java.lang.Long,org.springframework.ui.Model)
2019-05-15 21:22:22 -Mapped "{[/water/water/exprotWater],methods=[GET]}" onto public void com.bootdo.water.controller.WaterController.exprotExcel(com.bootdo.water.vo.WaterVo,javax.servlet.http.HttpServletResponse)
2019-05-15 21:22:22 -Mapped "{[/water/waterInto/importWaterIntoExcel],methods=[POST]}" onto public java.lang.String com.bootdo.water.controller.WaterIntoController.importWaterIntoExcel(org.springframework.web.multipart.MultipartFile,com.bootdo.water.vo.WaterVo,javax.servlet.http.HttpServletResponse) throws java.lang.Exception
2019-05-15 21:22:22 -Mapped "{[/water/waterInto],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterIntoController.WaterInto()
2019-05-15 21:22:22 -Mapped "{[/water/waterInto/exprotWaterIntoExcel],methods=[GET]}" onto public void com.bootdo.water.controller.WaterIntoController.exprotExcel(com.bootdo.water.vo.WaterVo,javax.servlet.http.HttpServletResponse)
2019-05-15 21:22:22 -Mapped "{[/water/waterPrice/add],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterPriceController.add()
2019-05-15 21:22:22 -Mapped "{[/water/waterPrice/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterPriceController.remove(java.lang.Long)
2019-05-15 21:22:22 -Mapped "{[/water/waterPrice/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterPriceController.remove(java.lang.Long[])
2019-05-15 21:22:22 -Mapped "{[/water/waterPrice/update]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterPriceController.update(com.bootdo.water.domain.WaterPriceDO)
2019-05-15 21:22:22 -Mapped "{[/water/waterPrice/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.water.controller.WaterPriceController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 21:22:22 -Mapped "{[/water/waterPrice/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterPriceController.save(com.bootdo.water.domain.WaterPriceDO)
2019-05-15 21:22:22 -Mapped "{[/water/waterPrice],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterPriceController.WaterPrice()
2019-05-15 21:22:22 -Mapped "{[/water/waterPrice/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterPriceController.edit(java.lang.Long,org.springframework.ui.Model)
2019-05-15 21:22:22 -Mapped "{[/water/waterUpLoad/exprotWaterExcel],methods=[GET]}" onto public void com.bootdo.water.controller.WaterUpLoadController.exprotWaterExcel(com.bootdo.water.vo.WaterVo,javax.servlet.http.HttpServletResponse)
2019-05-15 21:22:22 -Mapped "{[/water/waterUpLoad],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterUpLoadController.WaterUpLoad()
2019-05-15 21:22:22 -Mapped "{[/water/waterUpLoad/importWaterExcel]}" onto public java.lang.String com.bootdo.water.controller.WaterUpLoadController.importWaterExcel(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)
2019-05-15 21:22:22 -Mapped "{[/water/waterUpLoad/createWaterExcel],methods=[POST]}" onto public java.lang.String com.bootdo.water.controller.WaterUpLoadController.createWaterExcel(com.bootdo.water.domain.WaterDO) throws java.lang.Exception
2019-05-15 21:22:22 -Mapped "{[/v2/api-docs],methods=[GET],produces=[application/json || application/hal+json]}" onto public org.springframework.http.ResponseEntity<springfox.documentation.spring.web.json.Json> springfox.documentation.swagger2.web.Swagger2Controller.getDocumentation(java.lang.String,javax.servlet.http.HttpServletRequest)
2019-05-15 21:22:22 -Mapped "{[/swagger-resources]}" onto org.springframework.http.ResponseEntity<java.util.List<springfox.documentation.swagger.web.SwaggerResource>> springfox.documentation.swagger.web.ApiResourceController.swaggerResources()
2019-05-15 21:22:22 -Mapped "{[/swagger-resources/configuration/ui]}" onto org.springframework.http.ResponseEntity<springfox.documentation.swagger.web.UiConfiguration> springfox.documentation.swagger.web.ApiResourceController.uiConfiguration()
2019-05-15 21:22:22 -Mapped "{[/swagger-resources/configuration/security]}" onto org.springframework.http.ResponseEntity<springfox.documentation.swagger.web.SecurityConfiguration> springfox.documentation.swagger.web.ApiResourceController.securityConfiguration()
2019-05-15 21:22:22 -Initializing ExecutorService  'messageBrokerTaskScheduler'
2019-05-15 21:22:23 -Mapped URL path [/endpointChat/**] onto handler of type [class org.springframework.web.socket.sockjs.support.SockJsHttpRequestHandler]
2019-05-15 21:22:23 -Initializing ExecutorService  'brokerChannelExecutor'
2019-05-15 21:22:23 -Mapped URL path [/**/favicon.ico] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-05-15 21:22:23 -Looking for @ControllerAdvice: org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@4d5650ae: startup date [Wed May 15 21:22:05 CST 2019]; root of context hierarchy
2019-05-15 21:22:24 -Mapped URL path [/webjars/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-05-15 21:22:24 -Mapped URL path [/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-05-15 21:22:24 -Mapped URL path [/files/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-05-15 21:22:24 -Detected @ExceptionHandler methods in BDExceptionHandler
2019-05-15 21:22:24 -[THYMELEAF][main] Template Mode 'LEGACYHTML5' is deprecated. Using Template Mode 'HTML' instead.
2019-05-15 21:22:25 -Registering beans for JMX exposure on startup
2019-05-15 21:22:25 -Bean with name 'dataSource' has been autodetected for JMX exposure
2019-05-15 21:22:25 -Located MBean 'dataSource': registering with JMX server as MBean [com.alibaba.druid.pool:name=dataSource,type=DruidDataSource]
2019-05-15 21:22:25 -Starting beans in phase 2147483647
2019-05-15 21:22:25 -Context refreshed
2019-05-15 21:22:25 -Found 1 custom documentation plugin(s)
2019-05-15 21:22:25 -Scanning for api listing references
2019-05-15 21:22:26 -Generating unique operation named: getCountDUsingPOST_1
2019-05-15 21:22:26 -Generating unique operation named: removeUsingPOST_1
2019-05-15 21:22:26 -Generating unique operation named: addUsingGET_1
2019-05-15 21:22:26 -Generating unique operation named: editUsingGET_1
2019-05-15 21:22:26 -Generating unique operation named: listUsingGET_1
2019-05-15 21:22:26 -Generating unique operation named: removeUsingPOST_2
2019-05-15 21:22:26 -Generating unique operation named: removeUsingPOST_3
2019-05-15 21:22:26 -Generating unique operation named: saveUsingPOST_1
2019-05-15 21:22:26 -Generating unique operation named: updateUsingGET_1
2019-05-15 21:22:26 -Generating unique operation named: updateUsingHEAD_1
2019-05-15 21:22:26 -Generating unique operation named: updateUsingPOST_1
2019-05-15 21:22:26 -Generating unique operation named: updateUsingPUT_1
2019-05-15 21:22:26 -Generating unique operation named: updateUsingPATCH_1
2019-05-15 21:22:26 -Generating unique operation named: updateUsingDELETE_1
2019-05-15 21:22:26 -Generating unique operation named: updateUsingOPTIONS_1
2019-05-15 21:22:26 -Generating unique operation named: updateUsingTRACE_1
2019-05-15 21:22:26 -Generating unique operation named: addUsingGET_2
2019-05-15 21:22:26 -Generating unique operation named: editUsingGET_2
2019-05-15 21:22:26 -Generating unique operation named: listUsingGET_2
2019-05-15 21:22:26 -Generating unique operation named: removeUsingPOST_4
2019-05-15 21:22:26 -Generating unique operation named: removeUsingPOST_5
2019-05-15 21:22:26 -Generating unique operation named: saveUsingPOST_2
2019-05-15 21:22:26 -Generating unique operation named: updateUsingPOST_2
2019-05-15 21:22:26 -Generating unique operation named: exprotExcelUsingGET_1
2019-05-15 21:22:26 -Generating unique operation named: addUsingGET_3
2019-05-15 21:22:26 -Generating unique operation named: editUsingGET_3
2019-05-15 21:22:26 -Generating unique operation named: listUsingGET_3
2019-05-15 21:22:26 -Generating unique operation named: removeUsingPOST_6
2019-05-15 21:22:26 -Generating unique operation named: removeUsingPOST_7
2019-05-15 21:22:26 -Generating unique operation named: saveUsingPOST_3
2019-05-15 21:22:26 -Generating unique operation named: updateUsingGET_2
2019-05-15 21:22:26 -Generating unique operation named: updateUsingHEAD_2
2019-05-15 21:22:26 -Generating unique operation named: updateUsingPOST_3
2019-05-15 21:22:26 -Generating unique operation named: updateUsingPUT_2
2019-05-15 21:22:26 -Generating unique operation named: updateUsingPATCH_2
2019-05-15 21:22:26 -Generating unique operation named: updateUsingDELETE_2
2019-05-15 21:22:26 -Generating unique operation named: updateUsingOPTIONS_2
2019-05-15 21:22:26 -Generating unique operation named: updateUsingTRACE_2
2019-05-15 21:22:26 -Generating unique operation named: addUsingGET_4
2019-05-15 21:22:26 -Generating unique operation named: editUsingGET_4
2019-05-15 21:22:26 -Generating unique operation named: listUsingGET_4
2019-05-15 21:22:26 -Generating unique operation named: removeUsingPOST_8
2019-05-15 21:22:26 -Generating unique operation named: removeUsingPOST_9
2019-05-15 21:22:26 -Generating unique operation named: saveUsingPOST_4
2019-05-15 21:22:26 -Generating unique operation named: updateUsingGET_3
2019-05-15 21:22:26 -Generating unique operation named: updateUsingHEAD_3
2019-05-15 21:22:26 -Generating unique operation named: updateUsingPOST_4
2019-05-15 21:22:26 -Generating unique operation named: updateUsingPUT_3
2019-05-15 21:22:26 -Generating unique operation named: updateUsingPATCH_3
2019-05-15 21:22:26 -Generating unique operation named: updateUsingDELETE_3
2019-05-15 21:22:26 -Generating unique operation named: updateUsingOPTIONS_3
2019-05-15 21:22:26 -Generating unique operation named: updateUsingTRACE_3
2019-05-15 21:22:26 -Generating unique operation named: ElecUsingGET_1
2019-05-15 21:22:26 -Generating unique operation named: addUsingGET_5
2019-05-15 21:22:26 -Generating unique operation named: editUsingGET_5
2019-05-15 21:22:26 -Generating unique operation named: listUsingGET_5
2019-05-15 21:22:26 -Generating unique operation named: removeUsingPOST_10
2019-05-15 21:22:26 -Generating unique operation named: removeUsingPOST_11
2019-05-15 21:22:26 -Generating unique operation named: saveUsingPOST_5
2019-05-15 21:22:26 -Generating unique operation named: updateUsingGET_4
2019-05-15 21:22:26 -Generating unique operation named: updateUsingHEAD_4
2019-05-15 21:22:26 -Generating unique operation named: updateUsingPOST_5
2019-05-15 21:22:26 -Generating unique operation named: updateUsingPUT_4
2019-05-15 21:22:26 -Generating unique operation named: updateUsingPATCH_4
2019-05-15 21:22:26 -Generating unique operation named: updateUsingDELETE_4
2019-05-15 21:22:26 -Generating unique operation named: updateUsingOPTIONS_4
2019-05-15 21:22:26 -Generating unique operation named: updateUsingTRACE_4
2019-05-15 21:22:27 -Generating unique operation named: editUsingGET_6
2019-05-15 21:22:27 -Generating unique operation named: listUsingGET_6
2019-05-15 21:22:27 -Generating unique operation named: updateUsingPOST_6
2019-05-15 21:22:27 -Generating unique operation named: addUsingGET_6
2019-05-15 21:22:27 -Generating unique operation named: editUsingGET_7
2019-05-15 21:22:27 -Generating unique operation named: exprotExcelUsingGET_2
2019-05-15 21:22:27 -Generating unique operation named: listUsingGET_7
2019-05-15 21:22:27 -Generating unique operation named: removeUsingPOST_12
2019-05-15 21:22:27 -Generating unique operation named: removeUsingPOST_13
2019-05-15 21:22:27 -Generating unique operation named: saveUsingPOST_6
2019-05-15 21:22:27 -Generating unique operation named: updateUsingGET_5
2019-05-15 21:22:27 -Generating unique operation named: updateUsingHEAD_5
2019-05-15 21:22:27 -Generating unique operation named: updateUsingPOST_7
2019-05-15 21:22:27 -Generating unique operation named: updateUsingPUT_5
2019-05-15 21:22:27 -Generating unique operation named: updateUsingPATCH_5
2019-05-15 21:22:27 -Generating unique operation named: updateUsingDELETE_5
2019-05-15 21:22:27 -Generating unique operation named: updateUsingOPTIONS_5
2019-05-15 21:22:27 -Generating unique operation named: updateUsingTRACE_5
2019-05-15 21:22:27 -Generating unique operation named: exprotExcelUsingGET_3
2019-05-15 21:22:27 -Generating unique operation named: addUsingGET_7
2019-05-15 21:22:27 -Generating unique operation named: editUsingGET_8
2019-05-15 21:22:27 -Generating unique operation named: listUsingGET_8
2019-05-15 21:22:27 -Generating unique operation named: removeUsingPOST_14
2019-05-15 21:22:27 -Generating unique operation named: removeUsingPOST_15
2019-05-15 21:22:27 -Generating unique operation named: saveUsingPOST_7
2019-05-15 21:22:27 -Generating unique operation named: updateUsingGET_6
2019-05-15 21:22:27 -Generating unique operation named: updateUsingHEAD_6
2019-05-15 21:22:27 -Generating unique operation named: updateUsingPOST_8
2019-05-15 21:22:27 -Generating unique operation named: updateUsingPUT_6
2019-05-15 21:22:27 -Generating unique operation named: updateUsingPATCH_6
2019-05-15 21:22:27 -Generating unique operation named: updateUsingDELETE_6
2019-05-15 21:22:27 -Generating unique operation named: updateUsingOPTIONS_6
2019-05-15 21:22:27 -Generating unique operation named: updateUsingTRACE_6
2019-05-15 21:22:27 -Generating unique operation named: addUsingGET_8
2019-05-15 21:22:27 -Generating unique operation named: editUsingGET_9
2019-05-15 21:22:27 -Generating unique operation named: listUsingGET_9
2019-05-15 21:22:27 -Generating unique operation named: removeUsingPOST_16
2019-05-15 21:22:27 -Generating unique operation named: removeUsingPOST_17
2019-05-15 21:22:27 -Generating unique operation named: saveUsingPOST_8
2019-05-15 21:22:27 -Generating unique operation named: updateUsingGET_7
2019-05-15 21:22:27 -Generating unique operation named: updateUsingHEAD_7
2019-05-15 21:22:27 -Generating unique operation named: updateUsingPOST_9
2019-05-15 21:22:27 -Generating unique operation named: updateUsingPUT_7
2019-05-15 21:22:27 -Generating unique operation named: updateUsingPATCH_7
2019-05-15 21:22:27 -Generating unique operation named: updateUsingDELETE_7
2019-05-15 21:22:27 -Generating unique operation named: updateUsingOPTIONS_7
2019-05-15 21:22:27 -Generating unique operation named: updateUsingTRACE_7
2019-05-15 21:22:27 -Generating unique operation named: addUsingGET_9
2019-05-15 21:22:27 -Generating unique operation named: editUsingGET_10
2019-05-15 21:22:27 -Generating unique operation named: infoUsingGET_1
2019-05-15 21:22:27 -Generating unique operation named: infoUsingHEAD_1
2019-05-15 21:22:27 -Generating unique operation named: infoUsingPOST_1
2019-05-15 21:22:27 -Generating unique operation named: infoUsingPUT_1
2019-05-15 21:22:27 -Generating unique operation named: infoUsingPATCH_1
2019-05-15 21:22:27 -Generating unique operation named: infoUsingDELETE_1
2019-05-15 21:22:27 -Generating unique operation named: infoUsingOPTIONS_1
2019-05-15 21:22:27 -Generating unique operation named: infoUsingTRACE_1
2019-05-15 21:22:27 -Generating unique operation named: listUsingGET_10
2019-05-15 21:22:27 -Generating unique operation named: removeUsingPOST_18
2019-05-15 21:22:27 -Generating unique operation named: removeUsingPOST_19
2019-05-15 21:22:27 -Generating unique operation named: saveUsingPOST_9
2019-05-15 21:22:27 -Generating unique operation named: updateUsingPOST_10
2019-05-15 21:22:27 -Generating unique operation named: listUsingGET_11
2019-05-15 21:22:27 -Generating unique operation named: removeUsingPOST_20
2019-05-15 21:22:27 -Generating unique operation named: welcomeUsingGET_1
2019-05-15 21:22:27 -Generating unique operation named: addUsingGET_10
2019-05-15 21:22:27 -Generating unique operation named: editUsingGET_11
2019-05-15 21:22:27 -Generating unique operation named: listUsingGET_12
2019-05-15 21:22:27 -Generating unique operation named: removeUsingPOST_21
2019-05-15 21:22:27 -Generating unique operation named: saveUsingPOST_10
2019-05-15 21:22:27 -Generating unique operation named: treeUsingGET_1
2019-05-15 21:22:27 -Generating unique operation named: treeUsingGET_2
2019-05-15 21:22:27 -Generating unique operation named: updateUsingPOST_11
2019-05-15 21:22:27 -Generating unique operation named: addUsingGET_11
2019-05-15 21:22:27 -Generating unique operation named: editUsingGET_12
2019-05-15 21:22:27 -Generating unique operation named: listUsingGET_13
2019-05-15 21:22:27 -Generating unique operation named: removeUsingPOST_22
2019-05-15 21:22:27 -Generating unique operation named: removeUsingPOST_23
2019-05-15 21:22:27 -Generating unique operation named: saveUsingPOST_11
2019-05-15 21:22:27 -Generating unique operation named: updateUsingGET_8
2019-05-15 21:22:27 -Generating unique operation named: updateUsingHEAD_8
2019-05-15 21:22:27 -Generating unique operation named: updateUsingPOST_12
2019-05-15 21:22:27 -Generating unique operation named: updateUsingPUT_8
2019-05-15 21:22:27 -Generating unique operation named: updateUsingPATCH_8
2019-05-15 21:22:27 -Generating unique operation named: updateUsingDELETE_8
2019-05-15 21:22:27 -Generating unique operation named: updateUsingOPTIONS_8
2019-05-15 21:22:27 -Generating unique operation named: updateUsingTRACE_8
2019-05-15 21:22:27 -Generating unique operation named: addUsingGET_12
2019-05-15 21:22:27 -Generating unique operation named: editUsingGET_13
2019-05-15 21:22:27 -Generating unique operation named: listUsingGET_14
2019-05-15 21:22:27 -Generating unique operation named: removeUsingPOST_24
2019-05-15 21:22:27 -Generating unique operation named: removeUsingPOST_25
2019-05-15 21:22:27 -Generating unique operation named: saveUsingPOST_12
2019-05-15 21:22:27 -Generating unique operation named: updateUsingGET_9
2019-05-15 21:22:27 -Generating unique operation named: updateUsingHEAD_9
2019-05-15 21:22:27 -Generating unique operation named: updateUsingPOST_13
2019-05-15 21:22:27 -Generating unique operation named: updateUsingPUT_9
2019-05-15 21:22:27 -Generating unique operation named: updateUsingPATCH_9
2019-05-15 21:22:27 -Generating unique operation named: updateUsingDELETE_9
2019-05-15 21:22:27 -Generating unique operation named: updateUsingOPTIONS_9
2019-05-15 21:22:27 -Generating unique operation named: updateUsingTRACE_9
2019-05-15 21:22:27 -Generating unique operation named: addUsingGET_13
2019-05-15 21:22:27 -Generating unique operation named: batchRemoveUsingPOST_1
2019-05-15 21:22:27 -Generating unique operation named: editUsingGET_14
2019-05-15 21:22:27 -Generating unique operation named: listUsingGET_15
2019-05-15 21:22:27 -Generating unique operation named: saveUsingPOST_13
2019-05-15 21:22:27 -Generating unique operation named: saveUsingPOST_14
2019-05-15 21:22:27 -Generating unique operation named: updateUsingPOST_14
2019-05-15 21:22:27 -Generating unique operation named: listUsingGET_16
2019-05-15 21:22:27 -Generating unique operation named: listUsingHEAD_1
2019-05-15 21:22:27 -Generating unique operation named: listUsingPOST_1
2019-05-15 21:22:27 -Generating unique operation named: listUsingPUT_1
2019-05-15 21:22:27 -Generating unique operation named: listUsingPATCH_1
2019-05-15 21:22:27 -Generating unique operation named: listUsingDELETE_1
2019-05-15 21:22:27 -Generating unique operation named: listUsingOPTIONS_1
2019-05-15 21:22:27 -Generating unique operation named: listUsingTRACE_1
2019-05-15 21:22:27 -Generating unique operation named: countDDUsingGET_1
2019-05-15 21:22:27 -Generating unique operation named: exportDDUsingGET_1
2019-05-15 21:22:27 -Generating unique operation named: getCountYYUsingPOST_1
2019-05-15 21:22:27 -Generating unique operation named: getCountMMUsingPOST_1
2019-05-15 21:22:27 -Generating unique operation named: addUsingGET_14
2019-05-15 21:22:27 -Generating unique operation named: batchRemoveUsingPOST_2
2019-05-15 21:22:27 -Generating unique operation named: editUsingGET_15
2019-05-15 21:22:27 -Generating unique operation named: listUsingGET_17
2019-05-15 21:22:27 -Generating unique operation named: removeUsingPOST_26
2019-05-15 21:22:27 -Generating unique operation named: saveUsingPOST_15
2019-05-15 21:22:27 -Generating unique operation named: treeUsingGET_3
2019-05-15 21:22:27 -Generating unique operation named: treeViewUsingGET_1
2019-05-15 21:22:28 -Generating unique operation named: updateUsingPOST_15
2019-05-15 21:22:28 -Generating unique operation named: addUsingGET_15
2019-05-15 21:22:28 -Generating unique operation named: editUsingGET_16
2019-05-15 21:22:28 -Generating unique operation named: exprotExcelUsingGET_4
2019-05-15 21:22:28 -Generating unique operation named: listUsingGET_18
2019-05-15 21:22:28 -Generating unique operation named: removeUsingPOST_27
2019-05-15 21:22:28 -Generating unique operation named: removeUsingPOST_28
2019-05-15 21:22:28 -Generating unique operation named: saveUsingPOST_16
2019-05-15 21:22:28 -Generating unique operation named: updateUsingGET_10
2019-05-15 21:22:28 -Generating unique operation named: updateUsingHEAD_10
2019-05-15 21:22:28 -Generating unique operation named: updateUsingPOST_16
2019-05-15 21:22:28 -Generating unique operation named: updateUsingPUT_10
2019-05-15 21:22:28 -Generating unique operation named: updateUsingPATCH_10
2019-05-15 21:22:28 -Generating unique operation named: updateUsingDELETE_10
2019-05-15 21:22:28 -Generating unique operation named: updateUsingOPTIONS_10
2019-05-15 21:22:28 -Generating unique operation named: updateUsingTRACE_10
2019-05-15 21:22:28 -Generating unique operation named: exprotExcelUsingGET_5
2019-05-15 21:22:28 -Generating unique operation named: addUsingGET_16
2019-05-15 21:22:28 -Generating unique operation named: editUsingGET_17
2019-05-15 21:22:28 -Generating unique operation named: listUsingGET_19
2019-05-15 21:22:28 -Generating unique operation named: removeUsingPOST_29
2019-05-15 21:22:28 -Generating unique operation named: removeUsingPOST_30
2019-05-15 21:22:28 -Generating unique operation named: saveUsingPOST_17
2019-05-15 21:22:28 -Generating unique operation named: updateUsingGET_11
2019-05-15 21:22:28 -Generating unique operation named: updateUsingHEAD_11
2019-05-15 21:22:28 -Generating unique operation named: updateUsingPOST_17
2019-05-15 21:22:28 -Generating unique operation named: updateUsingPUT_11
2019-05-15 21:22:28 -Generating unique operation named: updateUsingPATCH_11
2019-05-15 21:22:28 -Generating unique operation named: updateUsingDELETE_11
2019-05-15 21:22:28 -Generating unique operation named: updateUsingOPTIONS_11
2019-05-15 21:22:28 -Generating unique operation named: updateUsingTRACE_11
2019-05-15 21:22:28 -Generating unique operation named: addUsingGET_17
2019-05-15 21:22:28 -Generating unique operation named: editUsingGET_18
2019-05-15 21:22:28 -Generating unique operation named: listUsingGET_20
2019-05-15 21:22:28 -Generating unique operation named: removeUsingPOST_31
2019-05-15 21:22:28 -Generating unique operation named: removeUsingPOST_32
2019-05-15 21:22:28 -Generating unique operation named: saveUsingPOST_18
2019-05-15 21:22:28 -Generating unique operation named: updateUsingGET_12
2019-05-15 21:22:28 -Generating unique operation named: updateUsingHEAD_12
2019-05-15 21:22:28 -Generating unique operation named: updateUsingPOST_18
2019-05-15 21:22:28 -Generating unique operation named: updateUsingPUT_12
2019-05-15 21:22:28 -Generating unique operation named: updateUsingPATCH_12
2019-05-15 21:22:28 -Generating unique operation named: updateUsingDELETE_12
2019-05-15 21:22:28 -Generating unique operation named: updateUsingOPTIONS_12
2019-05-15 21:22:28 -Generating unique operation named: updateUsingTRACE_12
2019-05-15 21:22:28 -Starting Quartz Scheduler now
2019-05-15 21:22:28 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED started.
2019-05-15 21:22:28 -Starting...
2019-05-15 21:22:28 -BrokerAvailabilityEvent[available=true, SimpleBrokerMessageHandler [DefaultSubscriptionRegistry[cache[0 destination(s)], registry[0 sessions]]]]
2019-05-15 21:22:28 -Started.
2019-05-15 21:22:28 -Starting ProtocolHandler ["http-nio-8081"]
2019-05-15 21:22:28 -Using a shared selector for servlet write/read
2019-05-15 21:22:28 -Tomcat started on port(s): 8081 (http) with context path ''
2019-05-15 21:22:28 -Started BootdoApplication in 24.189 seconds (JVM running for 24.924)
2019-05-15 21:22:28 -==>  Preparing: select `id`,`cron_expression`,`method_name`,`is_concurrent`,`description`,`update_by`,`bean_class`,`create_date`,`job_status`,`job_group`,`update_date`,`create_by`,`spring_bean`,`job_name` from sys_task order by id desc 
2019-05-15 21:22:28 -==> Parameters: 
2019-05-15 21:22:28 -<==      Total: 1
2019-05-15 21:23:15 -Initializing Spring FrameworkServlet 'dispatcherServlet'
2019-05-15 21:23:15 -FrameworkServlet 'dispatcherServlet': initialization started
2019-05-15 21:23:15 -FrameworkServlet 'dispatcherServlet': initialization completed in 77 ms
2019-05-15 21:23:15 -Enabling session validation scheduler...
2019-05-15 21:23:16 -请求地址 : http://localhost:8081/login;JSESSIONID=7e9042b1-288d-4ede-b390-99840db29d05
2019-05-15 21:23:16 -HTTP METHOD : GET
2019-05-15 21:23:16 -CLASS_METHOD : com.bootdo.system.controller.LoginController.login
2019-05-15 21:23:16 -参数 : [{}]
2019-05-15 21:23:16 -耗时 : 3
2019-05-15 21:23:16 -返回值 : login
2019-05-15 21:23:18 -请求地址 : http://localhost:8081/getVerify
2019-05-15 21:23:18 -HTTP METHOD : GET
2019-05-15 21:23:18 -CLASS_METHOD : com.bootdo.system.controller.LoginController.getVerify
2019-05-15 21:23:18 -参数 : [org.apache.shiro.web.servlet.ShiroHttpServletRequest@3fd11696, org.apache.shiro.web.servlet.ShiroHttpServletResponse@1c7fbde]
2019-05-15 21:23:23 -WebSocketSession[0 current WS(0)-HttpStream(0)-HttpPoll(0), 0 total, 0 closed abnormally (0 connect failure, 0 send limit, 0 transport error)], stompSubProtocol[processed CONNECT(0)-CONNECTED(0)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], outboundChannelpool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], sockJsScheduler[pool size = 1, active threads = 1, queued tasks = 0, completed tasks = 0]
2019-05-15 21:23:24 -8547
2019-05-15 21:23:25 -耗时 : 6824
2019-05-15 21:23:25 -返回值 : null
2019-05-15 21:23:25 -请求地址 : http://localhost:8081/login
2019-05-15 21:23:25 -HTTP METHOD : GET
2019-05-15 21:23:25 -CLASS_METHOD : com.bootdo.system.controller.LoginController.login
2019-05-15 21:23:25 -参数 : [{}]
2019-05-15 21:23:25 -耗时 : 1
2019-05-15 21:23:25 -返回值 : login
2019-05-15 21:23:31 -请求地址 : http://localhost:8081/login
2019-05-15 21:23:31 -HTTP METHOD : POST
2019-05-15 21:23:31 -CLASS_METHOD : com.bootdo.system.controller.LoginController.ajaxLogin
2019-05-15 21:23:31 -参数 : [admin, 111111, 8547, org.apache.shiro.web.servlet.ShiroHttpServletRequest@6b5b873f]
2019-05-15 21:23:31 -==>  Preparing: select `user_id`,`username`,`name`,`password`,`dept_id`,`email`,`mobile`,`status`,`user_id_create`,`gmt_create`,`gmt_modified`,`sex`,`birth`,`pic_id`,`live_address`,`hobby`,`province`,`city`,`district` from sys_user WHERE username = ? order by user_id desc 
2019-05-15 21:23:31 -==> Parameters: admin(String)
2019-05-15 21:23:31 -<==      Total: 1
2019-05-15 21:23:31 -耗时 : 130
2019-05-15 21:23:31 -返回值 : {msg=操作成功, code=0}
2019-05-15 21:23:31 -More than one TaskExecutor bean found within the context, and none is named 'taskExecutor'. Mark one of them as primary or name it 'taskExecutor' (possibly as an alias) in order to use it for async processing: [clientInboundChannelExecutor, clientOutboundChannelExecutor, brokerChannelExecutor, messageBrokerTaskScheduler]
2019-05-15 21:23:31 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-05-15 21:23:31 -==> Parameters: 1(Long), admin(String), 登录(String), 130(Integer), com.bootdo.system.controller.LoginController.ajaxLogin()(String), null, 127.0.0.1(String), 2019-05-15 21:23:31.273(Timestamp)
2019-05-15 21:23:31 -<==    Updates: 1
2019-05-15 21:23:31 -请求地址 : http://localhost:8081/index
2019-05-15 21:23:31 -HTTP METHOD : GET
2019-05-15 21:23:31 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2019-05-15 21:23:31 -参数 : [{}]
2019-05-15 21:23:31 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2019-05-15 21:23:31 -==> Parameters: 1(Long)
2019-05-15 21:23:31 -<==      Total: 49
2019-05-15 21:23:31 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2019-05-15 21:23:31 -==> Parameters: 138(Long)
2019-05-15 21:23:31 -<==      Total: 1
2019-05-15 21:23:31 -耗时 : 185
2019-05-15 21:23:31 -返回值 : index_v1
2019-05-15 21:23:31 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-05-15 21:23:31 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 185(Integer), com.bootdo.system.controller.LoginController.index()(String), {"menus":[{"attributes":{"icon":"fa fa-money","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-money","url":"/moneyList/moneyList"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"102","parentId":"106","text":"现金缴费"},{"attributes":{"icon":"fa fa-book","url":"/moneyLog/elecLog"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"107","parentId":"106","text":"缴费记录"}],"hasChildren":true,"hasParent":false,"id":"106","parentId":"0","text":"收费管理"},{"attributes":{"icon":"fa fa-lightbulb-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/elec/elec"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"121","parentId":"103","text":"电费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"elec/elecInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"122","parentId":"103","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"elec/elecUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"123","parentId":"103","text":"电表上传"},{"attributes":{"icon":"fa fa-cc","url":"/elec/elecPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"124","parentId":"103","text":"电价管理"}],"hasChildren":true,"hasParent":false,"id":"103","parentId":"0","text":"电费管理"},{"attributes":{"icon":"fa fa-tint","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/water/water"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"117","parentId":"105","text":"水费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"water/waterInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"118","parentId":"105","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"water/waterUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"119","parentId":"105","text":"水费生成"},{"attributes":{"icon":"fa fa-cc","url":"/water/waterPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"120","parentId":"105","text":"水价管理"}],"hasChildren":true,"hasParent":false,"id":"105","parentId":"0","text":"水费管理"},{"attributes":{"icon":"fa fa-fire","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/heat/heat"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"113","parentId":"104","text":"暖费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"heat/heatInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"114","parentId":"104","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"heat/heatUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"115","parentId":"104","text":"暖费生成"},{"attributes":{"icon":"","url":"/heat/heatPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"116","parentId":"104","text":"暖价管理"}],"hasChildren":true,"hasParent":false,"id":"104","parentId":"0","text":"暖费管理"},{"attributes":{"icon":"fa fa-vcard-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-bomb","url":"/print/print"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"149","parentId":"108","text":"票据记录"}],"hasChildren":true,"hasParent":false,"id":"108","parentId":"0","text":"票据管理"},{"attributes":{"icon":"fa fa-bar-chart","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-area-chart","url":"/chart/graph_echarts.html"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","text":"百度chart"},{"attributes":{"icon":"fa fa-sun-o","url":"charts/countDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"109","parentId":"97","text":"日统计报表"},{"attributes":{"icon":"fa fa-calendar","url":"charts/tableDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"161","parentId":"97","text":"日统计表格"},{"attributes":{"icon":"fa fa-registered","url":"charts/countMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"110","parentId":"97","text":"月统计报表"},{"attributes":{"icon":"fa fa-building-o","url":"charts/tableElecMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"162","parentId":"97","text":"月统计表格"},{"attributes":{"icon":"fa fa-support","url":"charts/countYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"111","parentId":"97","text":"年统计报表"},{"attributes":{"icon":"fa fa-book","url":"charts/tableElecYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"163","parentId":"97","text":"年统计表格"},{"attributes":{"icon":"fa fa-money","url":"charts/countOwe"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"155","parentId":"97","text":"欠费报表图"},{"attributes":{"icon":"fa fa-tachometer","url":"charts/countRun"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"112"(String), 127.0.0.1(String), 2019-05-15 21:23:31.854(Timestamp)
2019-05-15 21:23:31 -<==    Updates: 1
2019-05-15 21:23:32 -请求地址 : http://localhost:8081/main
2019-05-15 21:23:32 -HTTP METHOD : GET
2019-05-15 21:23:32 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-05-15 21:23:32 -参数 : []
2019-05-15 21:23:32 -耗时 : 1
2019-05-15 21:23:32 -返回值 : main
2019-05-15 21:23:32 -请求地址 : http://localhost:8081/oa/notify/message
2019-05-15 21:23:32 -HTTP METHOD : GET
2019-05-15 21:23:32 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2019-05-15 21:23:32 -参数 : []
2019-05-15 21:23:32 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2019-05-15 21:23:32 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2019-05-15 21:23:32 -<==      Total: 0
2019-05-15 21:23:32 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2019-05-15 21:23:32 -==> Parameters: 1(Long), 0(String)
2019-05-15 21:23:32 -<==      Total: 1
2019-05-15 21:23:32 -耗时 : 53
2019-05-15 21:23:32 -返回值 : com.bootdo.common.utils.PageUtils@280a1005
2019-05-15 21:23:32 -请求地址 : http://localhost:8081/main
2019-05-15 21:23:32 -HTTP METHOD : GET
2019-05-15 21:23:32 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-05-15 21:23:32 -参数 : []
2019-05-15 21:23:32 -耗时 : 1
2019-05-15 21:23:32 -返回值 : main
2019-05-15 21:23:46 -==>  Preparing: select distinct m.perms from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id = ur.role_id where ur.user_id = ? 
2019-05-15 21:23:46 -==> Parameters: 1(Long)
2019-05-15 21:23:46 -<==      Total: 93
2019-05-15 21:23:46 -请求地址 : http://localhost:8081/charts/tableElecYY
2019-05-15 21:23:46 -HTTP METHOD : GET
2019-05-15 21:23:46 -CLASS_METHOD : com.bootdo.charts.controller.tableElecYYController.tableElecYY
2019-05-15 21:23:46 -参数 : []
2019-05-15 21:23:46 -耗时 : 12
2019-05-15 21:23:46 -返回值 : charts/tableElecYY
2019-05-15 21:23:47 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-05-15 21:23:47 -HTTP METHOD : GET
2019-05-15 21:23:47 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-05-15 21:23:47 -参数 : [userType]
2019-05-15 21:23:47 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-05-15 21:23:47 -==> Parameters: userType(String)
2019-05-15 21:23:47 -<==      Total: 4
2019-05-15 21:23:47 -耗时 : 25
2019-05-15 21:23:47 -返回值 : [DictDO{id=145, name='银行转账', value='D', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=144, name='微信支付', value='C', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-05-15 21:23:48 -请求地址 : http://localhost:8081/charts/tableWaterYY
2019-05-15 21:23:48 -HTTP METHOD : GET
2019-05-15 21:23:48 -CLASS_METHOD : com.bootdo.charts.controller.tableWaterYYController.tableWaterYY
2019-05-15 21:23:48 -参数 : []
2019-05-15 21:23:48 -耗时 : 11
2019-05-15 21:23:48 -返回值 : charts/tableWaterYY
2019-05-15 21:23:48 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-05-15 21:23:48 -HTTP METHOD : GET
2019-05-15 21:23:48 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-05-15 21:23:48 -参数 : [userType]
2019-05-15 21:23:48 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-05-15 21:23:48 -==> Parameters: userType(String)
2019-05-15 21:23:48 -<==      Total: 4
2019-05-15 21:23:48 -耗时 : 5
2019-05-15 21:23:48 -返回值 : [DictDO{id=145, name='银行转账', value='D', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=144, name='微信支付', value='C', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-05-15 21:23:52 -请求地址 : http://localhost:8081/system/sysDept/treeView
2019-05-15 21:23:52 -HTTP METHOD : GET
2019-05-15 21:23:52 -CLASS_METHOD : com.bootdo.system.controller.DeptController.treeView
2019-05-15 21:23:52 -参数 : []
2019-05-15 21:23:52 -耗时 : 1
2019-05-15 21:23:52 -返回值 : system/dept/deptTree
2019-05-15 21:23:52 -请求地址 : http://localhost:8081/system/sysDept/tree
2019-05-15 21:23:52 -HTTP METHOD : GET
2019-05-15 21:23:52 -CLASS_METHOD : com.bootdo.system.controller.DeptController.tree
2019-05-15 21:23:52 -参数 : []
2019-05-15 21:23:52 -==>  Preparing: select `dept_id`,`parent_id`,`name`,`order_num`,`del_flag` from sys_dept order by dept_id desc 
2019-05-15 21:23:52 -==> Parameters: 
2019-05-15 21:23:52 -<==      Total: 3
2019-05-15 21:23:52 -耗时 : 19
2019-05-15 21:23:52 -返回值 : {"checked":false,"children":[{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"3","parentId":"1","state":{"opened":true},"text":"牙星"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"2","parentId":"1","state":{"opened":true},"text":"五九"}],"hasChildren":true,"hasParent":false,"id":"1","parentId":"0","state":{"opened":true},"text":"总公司"}
2019-05-15 21:23:58 -请求地址 : http://localhost:8081/charts/tableWaterYY/tableWaterYY
2019-05-15 21:23:58 -HTTP METHOD : POST
2019-05-15 21:23:58 -CLASS_METHOD : com.bootdo.charts.controller.tableWaterYYController.tableWaterYY
2019-05-15 21:23:58 -参数 : [com.bootdo.water.vo.WaterVo@34a6fcf0, com.bootdo.moneyLog.vo.WaterLogVo@4885d6f2]
2019-05-15 21:23:58 -==>  Preparing: select COUNT(*) from water WHERE `water_sum` >= 0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 21:23:58 -==> Parameters: 2018-12(String), 1(String), 2(String)
2019-05-15 21:23:58 -<==      Total: 1
2019-05-15 21:23:58 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE `water_sum` >= 0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 21:23:58 -==> Parameters: 2018-12(String), 1(String), 2(String)
2019-05-15 21:23:58 -<==      Total: 1
2019-05-15 21:23:58 -==>  Preparing: select COUNT(*) from water WHERE water_sum <0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 21:23:58 -==> Parameters: 2018-12(String), 1(String), 2(String)
2019-05-15 21:23:58 -<==      Total: 1
2019-05-15 21:23:58 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE water_sum <0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 21:23:58 -==> Parameters: 2018-12(String), 1(String), 2(String)
2019-05-15 21:23:58 -<==      Total: 1
2019-05-15 21:23:58 -==>  Preparing: select COUNT(*),ifnull(SUM(water_cost),0) from water WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 21:23:58 -==> Parameters: 2019(String), 1(String), 2(String)
2019-05-15 21:23:58 -<==      Total: 1
2019-05-15 21:23:58 -==>  Preparing: select ifnull(SUM(water_cost),0) from water WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 21:23:58 -==> Parameters: 2019(String), 1(String), 2(String)
2019-05-15 21:23:58 -<==      Total: 1
2019-05-15 21:23:58 -==>  Preparing: select COUNT(*) from water_log WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 21:23:58 -==> Parameters: 2019(String), 1(String), 2(String)
2019-05-15 21:23:58 -<==      Total: 1
2019-05-15 21:23:58 -==>  Preparing: select ifnull(SUM(water_money),0) from water_log WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 21:23:58 -==> Parameters: 2019(String), 1(String), 2(String)
2019-05-15 21:23:58 -<==      Total: 1
2019-05-15 21:23:58 -==>  Preparing: select COUNT(*) from water WHERE `water_sum` >= 0 and create_time = (select MAX(create_time) from water where DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ?) and water_type = ? and user_org = ? 
2019-05-15 21:23:58 -==> Parameters: 2019(String), 1(String), 2(String)
2019-05-15 21:23:58 -<==      Total: 1
2019-05-15 21:23:58 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE `water_sum` >= 0 and create_time = (select MAX(create_time) from water where DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ?) and water_type = ? and user_org = ? 
2019-05-15 21:23:58 -==> Parameters: 2019(String), 1(String), 2(String)
2019-05-15 21:23:58 -<==      Total: 1
2019-05-15 21:23:58 -==>  Preparing: select COUNT(*) from water WHERE water_sum <0 and create_time = (select MAX(create_time) from water where DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ?) and water_type = ? and user_org = ? 
2019-05-15 21:23:58 -==> Parameters: 2019(String), 1(String), 2(String)
2019-05-15 21:23:58 -<==      Total: 1
2019-05-15 21:23:58 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE water_sum <0 and create_time = (select MAX(create_time) from water where DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ?) and water_type = ? and user_org = ? 
2019-05-15 21:23:58 -==> Parameters: 2019(String), 1(String), 2(String)
2019-05-15 21:23:58 -<==      Total: 1
2019-05-15 21:23:58 -==>  Preparing: select COUNT(*) from water WHERE `water_sum` >= 0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 21:23:58 -==> Parameters: 2018-12(String), 2(String), 2(String)
2019-05-15 21:23:58 -<==      Total: 1
2019-05-15 21:23:58 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE `water_sum` >= 0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 21:23:58 -==> Parameters: 2018-12(String), 2(String), 2(String)
2019-05-15 21:23:58 -<==      Total: 1
2019-05-15 21:23:58 -==>  Preparing: select COUNT(*) from water WHERE water_sum <0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 21:23:58 -==> Parameters: 2018-12(String), 2(String), 2(String)
2019-05-15 21:23:58 -<==      Total: 1
2019-05-15 21:23:58 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE water_sum <0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 21:23:58 -==> Parameters: 2018-12(String), 2(String), 2(String)
2019-05-15 21:23:58 -<==      Total: 1
2019-05-15 21:23:58 -==>  Preparing: select COUNT(*),ifnull(SUM(water_cost),0) from water WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 21:23:58 -==> Parameters: 2019(String), 2(String), 2(String)
2019-05-15 21:23:58 -<==      Total: 1
2019-05-15 21:23:58 -==>  Preparing: select ifnull(SUM(water_cost),0) from water WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 21:23:58 -==> Parameters: 2019(String), 2(String), 2(String)
2019-05-15 21:23:58 -<==      Total: 1
2019-05-15 21:23:58 -==>  Preparing: select COUNT(*) from water_log WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 21:23:58 -==> Parameters: 2019(String), 2(String), 2(String)
2019-05-15 21:23:58 -<==      Total: 1
2019-05-15 21:23:58 -==>  Preparing: select ifnull(SUM(water_money),0) from water_log WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 21:23:58 -==> Parameters: 2019(String), 2(String), 2(String)
2019-05-15 21:23:58 -<==      Total: 1
2019-05-15 21:23:58 -==>  Preparing: select COUNT(*) from water WHERE `water_sum` >= 0 and create_time = (select MAX(create_time) from water where DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ?) and water_type = ? and user_org = ? 
2019-05-15 21:23:58 -==> Parameters: 2019(String), 2(String), 2(String)
2019-05-15 21:23:58 -<==      Total: 1
2019-05-15 21:23:58 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE `water_sum` >= 0 and create_time = (select MAX(create_time) from water where DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ?) and water_type = ? and user_org = ? 
2019-05-15 21:23:58 -==> Parameters: 2019(String), 2(String), 2(String)
2019-05-15 21:23:58 -<==      Total: 1
2019-05-15 21:23:58 -==>  Preparing: select COUNT(*) from water WHERE water_sum <0 and create_time = (select MAX(create_time) from water where DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ?) and water_type = ? and user_org = ? 
2019-05-15 21:23:58 -==> Parameters: 2019(String), 2(String), 2(String)
2019-05-15 21:23:58 -<==      Total: 1
2019-05-15 21:23:58 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE water_sum <0 and create_time = (select MAX(create_time) from water where DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ?) and water_type = ? and user_org = ? 
2019-05-15 21:23:58 -==> Parameters: 2019(String), 2(String), 2(String)
2019-05-15 21:23:58 -<==      Total: 1
2019-05-15 21:23:58 -==>  Preparing: select COUNT(*) from water WHERE `water_sum` >= 0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 21:23:58 -==> Parameters: 2018-12(String), 3(String), 2(String)
2019-05-15 21:23:58 -<==      Total: 1
2019-05-15 21:23:58 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE `water_sum` >= 0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 21:23:58 -==> Parameters: 2018-12(String), 3(String), 2(String)
2019-05-15 21:23:58 -<==      Total: 1
2019-05-15 21:23:58 -==>  Preparing: select COUNT(*) from water WHERE water_sum <0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 21:23:58 -==> Parameters: 2018-12(String), 3(String), 2(String)
2019-05-15 21:23:58 -<==      Total: 1
2019-05-15 21:23:58 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE water_sum <0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 21:23:58 -==> Parameters: 2018-12(String), 3(String), 2(String)
2019-05-15 21:23:58 -<==      Total: 1
2019-05-15 21:23:58 -==>  Preparing: select COUNT(*),ifnull(SUM(water_cost),0) from water WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 21:23:58 -==> Parameters: 2019(String), 3(String), 2(String)
2019-05-15 21:23:58 -<==      Total: 1
2019-05-15 21:23:58 -==>  Preparing: select ifnull(SUM(water_cost),0) from water WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 21:23:58 -==> Parameters: 2019(String), 3(String), 2(String)
2019-05-15 21:23:58 -<==      Total: 1
2019-05-15 21:23:58 -==>  Preparing: select COUNT(*) from water_log WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 21:23:58 -==> Parameters: 2019(String), 3(String), 2(String)
2019-05-15 21:23:58 -<==      Total: 1
2019-05-15 21:23:58 -==>  Preparing: select ifnull(SUM(water_money),0) from water_log WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 21:23:58 -==> Parameters: 2019(String), 3(String), 2(String)
2019-05-15 21:23:58 -<==      Total: 1
2019-05-15 21:23:58 -==>  Preparing: select COUNT(*) from water WHERE `water_sum` >= 0 and create_time = (select MAX(create_time) from water where DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ?) and water_type = ? and user_org = ? 
2019-05-15 21:23:58 -==> Parameters: 2019(String), 3(String), 2(String)
2019-05-15 21:23:58 -<==      Total: 1
2019-05-15 21:23:58 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE `water_sum` >= 0 and create_time = (select MAX(create_time) from water where DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ?) and water_type = ? and user_org = ? 
2019-05-15 21:23:58 -==> Parameters: 2019(String), 3(String), 2(String)
2019-05-15 21:23:58 -<==      Total: 1
2019-05-15 21:23:58 -==>  Preparing: select COUNT(*) from water WHERE water_sum <0 and create_time = (select MAX(create_time) from water where DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ?) and water_type = ? and user_org = ? 
2019-05-15 21:23:58 -==> Parameters: 2019(String), 3(String), 2(String)
2019-05-15 21:23:58 -<==      Total: 1
2019-05-15 21:23:58 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE water_sum <0 and create_time = (select MAX(create_time) from water where DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ?) and water_type = ? and user_org = ? 
2019-05-15 21:23:58 -==> Parameters: 2019(String), 3(String), 2(String)
2019-05-15 21:23:58 -<==      Total: 1
2019-05-15 21:23:58 -==>  Preparing: select COUNT(*) from water WHERE `water_sum` >= 0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 21:23:58 -==> Parameters: 2018-12(String), 4(String), 2(String)
2019-05-15 21:23:58 -<==      Total: 1
2019-05-15 21:23:58 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE `water_sum` >= 0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 21:23:58 -==> Parameters: 2018-12(String), 4(String), 2(String)
2019-05-15 21:23:58 -<==      Total: 1
2019-05-15 21:23:58 -==>  Preparing: select COUNT(*) from water WHERE water_sum <0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 21:23:58 -==> Parameters: 2018-12(String), 4(String), 2(String)
2019-05-15 21:23:58 -<==      Total: 1
2019-05-15 21:23:58 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE water_sum <0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 21:23:58 -==> Parameters: 2018-12(String), 4(String), 2(String)
2019-05-15 21:23:58 -<==      Total: 1
2019-05-15 21:23:58 -==>  Preparing: select COUNT(*),ifnull(SUM(water_cost),0) from water WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 21:23:58 -==> Parameters: 2019(String), 4(String), 2(String)
2019-05-15 21:23:58 -<==      Total: 1
2019-05-15 21:23:58 -==>  Preparing: select ifnull(SUM(water_cost),0) from water WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 21:23:58 -==> Parameters: 2019(String), 4(String), 2(String)
2019-05-15 21:23:58 -<==      Total: 1
2019-05-15 21:23:58 -==>  Preparing: select COUNT(*) from water_log WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 21:23:58 -==> Parameters: 2019(String), 4(String), 2(String)
2019-05-15 21:23:58 -<==      Total: 1
2019-05-15 21:23:59 -==>  Preparing: select ifnull(SUM(water_money),0) from water_log WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 21:23:59 -==> Parameters: 2019(String), 4(String), 2(String)
2019-05-15 21:23:59 -<==      Total: 1
2019-05-15 21:23:59 -==>  Preparing: select COUNT(*) from water WHERE `water_sum` >= 0 and create_time = (select MAX(create_time) from water where DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ?) and water_type = ? and user_org = ? 
2019-05-15 21:23:59 -==> Parameters: 2019(String), 4(String), 2(String)
2019-05-15 21:23:59 -<==      Total: 1
2019-05-15 21:23:59 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE `water_sum` >= 0 and create_time = (select MAX(create_time) from water where DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ?) and water_type = ? and user_org = ? 
2019-05-15 21:23:59 -==> Parameters: 2019(String), 4(String), 2(String)
2019-05-15 21:23:59 -<==      Total: 1
2019-05-15 21:23:59 -==>  Preparing: select COUNT(*) from water WHERE water_sum <0 and create_time = (select MAX(create_time) from water where DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ?) and water_type = ? and user_org = ? 
2019-05-15 21:23:59 -==> Parameters: 2019(String), 4(String), 2(String)
2019-05-15 21:23:59 -<==      Total: 1
2019-05-15 21:23:59 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE water_sum <0 and create_time = (select MAX(create_time) from water where DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ?) and water_type = ? and user_org = ? 
2019-05-15 21:23:59 -==> Parameters: 2019(String), 4(String), 2(String)
2019-05-15 21:23:59 -<==      Total: 1
2019-05-15 21:23:59 -==>  Preparing: select m_water,s1_water,s2_water,s3_water,water_org from water_price 
2019-05-15 21:23:59 -==> Parameters: 
2019-05-15 21:23:59 -<==      Total: 2
2019-05-15 21:23:59 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-05-15 21:23:59 -==> Parameters: 1(Long), admin(String), error(String), null, http://localhost:8081/charts/tableWaterYY/tableWaterYY(String), java.lang.NullPointerException(String), null, 2019-05-15 21:23:59.026(Timestamp)
2019-05-15 21:23:59 -null
java.lang.NullPointerException: null
	at com.bootdo.charts.controller.tableWaterYYController.tableWaterYY(tableWaterYYController.java:416)
	at com.bootdo.charts.controller.tableWaterYYController$$FastClassBySpringCGLIB$$e46653e2.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:204)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:746)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.bootdo.common.aspect.WebLogAspect.doAround(WebLogAspect.java:57)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.bootdo.charts.controller.tableWaterYYController$$EnhancerBySpringCGLIB$$5fa7bb3.tableWaterYY(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:209)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:877)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:783)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:991)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:925)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:974)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:877)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:661)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:851)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:61)
	at org.apache.shiro.web.servlet.AdviceFilter.executeChain(AdviceFilter.java:108)
	at org.apache.shiro.web.servlet.AdviceFilter.doFilterInternal(AdviceFilter.java:137)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:66)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)
	at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)
	at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)
	at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)
	at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:383)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:109)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:496)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:790)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1468)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:745)
2019-05-15 21:23:59 -<==    Updates: 1
2019-05-15 21:24:56 -请求地址 : http://localhost:8081/index
2019-05-15 21:24:56 -HTTP METHOD : GET
2019-05-15 21:24:56 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2019-05-15 21:24:56 -参数 : [{}]
2019-05-15 21:24:56 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2019-05-15 21:24:56 -==> Parameters: 1(Long)
2019-05-15 21:24:56 -<==      Total: 49
2019-05-15 21:24:56 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2019-05-15 21:24:56 -==> Parameters: 138(Long)
2019-05-15 21:24:56 -<==      Total: 1
2019-05-15 21:24:56 -耗时 : 42
2019-05-15 21:24:56 -返回值 : index_v1
2019-05-15 21:24:56 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-05-15 21:24:56 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 43(Integer), com.bootdo.system.controller.LoginController.index()(String), {"menus":[{"attributes":{"icon":"fa fa-money","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-money","url":"/moneyList/moneyList"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"102","parentId":"106","text":"现金缴费"},{"attributes":{"icon":"fa fa-book","url":"/moneyLog/elecLog"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"107","parentId":"106","text":"缴费记录"}],"hasChildren":true,"hasParent":false,"id":"106","parentId":"0","text":"收费管理"},{"attributes":{"icon":"fa fa-lightbulb-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/elec/elec"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"121","parentId":"103","text":"电费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"elec/elecInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"122","parentId":"103","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"elec/elecUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"123","parentId":"103","text":"电表上传"},{"attributes":{"icon":"fa fa-cc","url":"/elec/elecPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"124","parentId":"103","text":"电价管理"}],"hasChildren":true,"hasParent":false,"id":"103","parentId":"0","text":"电费管理"},{"attributes":{"icon":"fa fa-tint","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/water/water"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"117","parentId":"105","text":"水费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"water/waterInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"118","parentId":"105","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"water/waterUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"119","parentId":"105","text":"水费生成"},{"attributes":{"icon":"fa fa-cc","url":"/water/waterPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"120","parentId":"105","text":"水价管理"}],"hasChildren":true,"hasParent":false,"id":"105","parentId":"0","text":"水费管理"},{"attributes":{"icon":"fa fa-fire","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/heat/heat"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"113","parentId":"104","text":"暖费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"heat/heatInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"114","parentId":"104","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"heat/heatUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"115","parentId":"104","text":"暖费生成"},{"attributes":{"icon":"","url":"/heat/heatPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"116","parentId":"104","text":"暖价管理"}],"hasChildren":true,"hasParent":false,"id":"104","parentId":"0","text":"暖费管理"},{"attributes":{"icon":"fa fa-vcard-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-bomb","url":"/print/print"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"149","parentId":"108","text":"票据记录"}],"hasChildren":true,"hasParent":false,"id":"108","parentId":"0","text":"票据管理"},{"attributes":{"icon":"fa fa-bar-chart","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-area-chart","url":"/chart/graph_echarts.html"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","text":"百度chart"},{"attributes":{"icon":"fa fa-sun-o","url":"charts/countDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"109","parentId":"97","text":"日统计报表"},{"attributes":{"icon":"fa fa-calendar","url":"charts/tableDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"161","parentId":"97","text":"日统计表格"},{"attributes":{"icon":"fa fa-registered","url":"charts/countMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"110","parentId":"97","text":"月统计报表"},{"attributes":{"icon":"fa fa-building-o","url":"charts/tableElecMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"162","parentId":"97","text":"月统计表格"},{"attributes":{"icon":"fa fa-support","url":"charts/countYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"111","parentId":"97","text":"年统计报表"},{"attributes":{"icon":"fa fa-book","url":"charts/tableElecYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"163","parentId":"97","text":"年统计表格"},{"attributes":{"icon":"fa fa-money","url":"charts/countOwe"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"155","parentId":"97","text":"欠费报表图"},{"attributes":{"icon":"fa fa-tachometer","url":"charts/countRun"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"112"(String), 127.0.0.1(String), 2019-05-15 21:24:56.093(Timestamp)
2019-05-15 21:24:56 -<==    Updates: 1
2019-05-15 21:24:56 -请求地址 : http://localhost:8081/main
2019-05-15 21:24:56 -HTTP METHOD : GET
2019-05-15 21:24:56 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-05-15 21:24:56 -参数 : []
2019-05-15 21:24:56 -耗时 : 0
2019-05-15 21:24:56 -返回值 : main
2019-05-15 21:24:56 -请求地址 : http://localhost:8081/oa/notify/message
2019-05-15 21:24:56 -HTTP METHOD : GET
2019-05-15 21:24:56 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2019-05-15 21:24:56 -参数 : []
2019-05-15 21:24:56 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2019-05-15 21:24:56 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2019-05-15 21:24:56 -<==      Total: 0
2019-05-15 21:24:56 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2019-05-15 21:24:56 -==> Parameters: 1(Long), 0(String)
2019-05-15 21:24:56 -<==      Total: 1
2019-05-15 21:24:56 -耗时 : 49
2019-05-15 21:24:56 -返回值 : com.bootdo.common.utils.PageUtils@18bc52dc
2019-05-15 21:24:56 -请求地址 : http://localhost:8081/main
2019-05-15 21:24:56 -HTTP METHOD : GET
2019-05-15 21:24:56 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-05-15 21:24:56 -参数 : []
2019-05-15 21:24:56 -耗时 : 1
2019-05-15 21:24:56 -返回值 : main
2019-05-15 21:25:01 -请求地址 : http://localhost:8081/charts/tableElecYY
2019-05-15 21:25:01 -HTTP METHOD : GET
2019-05-15 21:25:01 -CLASS_METHOD : com.bootdo.charts.controller.tableElecYYController.tableElecYY
2019-05-15 21:25:01 -参数 : []
2019-05-15 21:25:01 -耗时 : 0
2019-05-15 21:25:01 -返回值 : charts/tableElecYY
2019-05-15 21:25:02 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-05-15 21:25:02 -HTTP METHOD : GET
2019-05-15 21:25:02 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-05-15 21:25:02 -参数 : [userType]
2019-05-15 21:25:02 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-05-15 21:25:02 -==> Parameters: userType(String)
2019-05-15 21:25:02 -<==      Total: 4
2019-05-15 21:25:02 -耗时 : 9
2019-05-15 21:25:02 -返回值 : [DictDO{id=145, name='银行转账', value='D', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=144, name='微信支付', value='C', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-05-15 21:25:03 -请求地址 : http://localhost:8081/charts/tableWaterYY
2019-05-15 21:25:03 -HTTP METHOD : GET
2019-05-15 21:25:03 -CLASS_METHOD : com.bootdo.charts.controller.tableWaterYYController.tableWaterYY
2019-05-15 21:25:03 -参数 : []
2019-05-15 21:25:03 -耗时 : 0
2019-05-15 21:25:03 -返回值 : charts/tableWaterYY
2019-05-15 21:25:03 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-05-15 21:25:03 -HTTP METHOD : GET
2019-05-15 21:25:03 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-05-15 21:25:03 -参数 : [userType]
2019-05-15 21:25:03 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-05-15 21:25:03 -==> Parameters: userType(String)
2019-05-15 21:25:03 -<==      Total: 4
2019-05-15 21:25:03 -耗时 : 7
2019-05-15 21:25:03 -返回值 : [DictDO{id=145, name='银行转账', value='D', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=144, name='微信支付', value='C', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-05-15 21:25:04 -请求地址 : http://localhost:8081/system/sysDept/treeView
2019-05-15 21:25:04 -HTTP METHOD : GET
2019-05-15 21:25:04 -CLASS_METHOD : com.bootdo.system.controller.DeptController.treeView
2019-05-15 21:25:04 -参数 : []
2019-05-15 21:25:04 -耗时 : 0
2019-05-15 21:25:04 -返回值 : system/dept/deptTree
2019-05-15 21:25:04 -请求地址 : http://localhost:8081/system/sysDept/tree
2019-05-15 21:25:04 -HTTP METHOD : GET
2019-05-15 21:25:04 -CLASS_METHOD : com.bootdo.system.controller.DeptController.tree
2019-05-15 21:25:04 -参数 : []
2019-05-15 21:25:04 -==>  Preparing: select `dept_id`,`parent_id`,`name`,`order_num`,`del_flag` from sys_dept order by dept_id desc 
2019-05-15 21:25:04 -==> Parameters: 
2019-05-15 21:25:04 -<==      Total: 3
2019-05-15 21:25:04 -耗时 : 3
2019-05-15 21:25:04 -返回值 : {"checked":false,"children":[{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"3","parentId":"1","state":{"opened":true},"text":"牙星"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"2","parentId":"1","state":{"opened":true},"text":"五九"}],"hasChildren":true,"hasParent":false,"id":"1","parentId":"0","state":{"opened":true},"text":"总公司"}
2019-05-15 21:25:08 -请求地址 : http://localhost:8081/charts/tableWaterYY/tableWaterYY
2019-05-15 21:25:08 -HTTP METHOD : POST
2019-05-15 21:25:08 -CLASS_METHOD : com.bootdo.charts.controller.tableWaterYYController.tableWaterYY
2019-05-15 21:25:08 -参数 : [com.bootdo.water.vo.WaterVo@464389d4, com.bootdo.moneyLog.vo.WaterLogVo@180bc5e8]
2019-05-15 21:25:08 -==>  Preparing: select COUNT(*) from water WHERE `water_sum` >= 0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 21:25:08 -==> Parameters: 2018-12(String), 1(String), 2(String)
2019-05-15 21:25:08 -<==      Total: 1
2019-05-15 21:25:08 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE `water_sum` >= 0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 21:25:08 -==> Parameters: 2018-12(String), 1(String), 2(String)
2019-05-15 21:25:08 -<==      Total: 1
2019-05-15 21:25:08 -==>  Preparing: select COUNT(*) from water WHERE water_sum <0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 21:25:08 -==> Parameters: 2018-12(String), 1(String), 2(String)
2019-05-15 21:25:08 -<==      Total: 1
2019-05-15 21:25:08 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE water_sum <0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 21:25:08 -==> Parameters: 2018-12(String), 1(String), 2(String)
2019-05-15 21:25:08 -<==      Total: 1
2019-05-15 21:25:08 -==>  Preparing: select COUNT(*),ifnull(SUM(water_cost),0) from water WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 21:25:08 -==> Parameters: 2019(String), 1(String), 2(String)
2019-05-15 21:25:08 -<==      Total: 1
2019-05-15 21:25:08 -==>  Preparing: select ifnull(SUM(water_cost),0) from water WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 21:25:08 -==> Parameters: 2019(String), 1(String), 2(String)
2019-05-15 21:25:08 -<==      Total: 1
2019-05-15 21:25:08 -==>  Preparing: select COUNT(*) from water_log WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 21:25:08 -==> Parameters: 2019(String), 1(String), 2(String)
2019-05-15 21:25:08 -<==      Total: 1
2019-05-15 21:25:08 -==>  Preparing: select ifnull(SUM(water_money),0) from water_log WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 21:25:08 -==> Parameters: 2019(String), 1(String), 2(String)
2019-05-15 21:25:08 -<==      Total: 1
2019-05-15 21:25:08 -==>  Preparing: select COUNT(*) from water WHERE `water_sum` >= 0 and create_time = (select MAX(create_time) from water where DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ?) and water_type = ? and user_org = ? 
2019-05-15 21:25:08 -==> Parameters: 2019(String), 1(String), 2(String)
2019-05-15 21:25:08 -<==      Total: 1
2019-05-15 21:25:08 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE `water_sum` >= 0 and create_time = (select MAX(create_time) from water where DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ?) and water_type = ? and user_org = ? 
2019-05-15 21:25:08 -==> Parameters: 2019(String), 1(String), 2(String)
2019-05-15 21:25:08 -<==      Total: 1
2019-05-15 21:25:08 -==>  Preparing: select COUNT(*) from water WHERE water_sum <0 and create_time = (select MAX(create_time) from water where DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ?) and water_type = ? and user_org = ? 
2019-05-15 21:25:08 -==> Parameters: 2019(String), 1(String), 2(String)
2019-05-15 21:25:08 -<==      Total: 1
2019-05-15 21:25:08 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE water_sum <0 and create_time = (select MAX(create_time) from water where DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ?) and water_type = ? and user_org = ? 
2019-05-15 21:25:08 -==> Parameters: 2019(String), 1(String), 2(String)
2019-05-15 21:25:08 -<==      Total: 1
2019-05-15 21:25:08 -==>  Preparing: select COUNT(*) from water WHERE `water_sum` >= 0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 21:25:08 -==> Parameters: 2018-12(String), 2(String), 2(String)
2019-05-15 21:25:08 -<==      Total: 1
2019-05-15 21:25:08 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE `water_sum` >= 0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 21:25:08 -==> Parameters: 2018-12(String), 2(String), 2(String)
2019-05-15 21:25:08 -<==      Total: 1
2019-05-15 21:25:08 -==>  Preparing: select COUNT(*) from water WHERE water_sum <0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 21:25:08 -==> Parameters: 2018-12(String), 2(String), 2(String)
2019-05-15 21:25:08 -<==      Total: 1
2019-05-15 21:25:08 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE water_sum <0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 21:25:08 -==> Parameters: 2018-12(String), 2(String), 2(String)
2019-05-15 21:25:08 -<==      Total: 1
2019-05-15 21:25:08 -==>  Preparing: select COUNT(*),ifnull(SUM(water_cost),0) from water WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 21:25:08 -==> Parameters: 2019(String), 2(String), 2(String)
2019-05-15 21:25:08 -<==      Total: 1
2019-05-15 21:25:08 -==>  Preparing: select ifnull(SUM(water_cost),0) from water WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 21:25:08 -==> Parameters: 2019(String), 2(String), 2(String)
2019-05-15 21:25:08 -<==      Total: 1
2019-05-15 21:25:08 -==>  Preparing: select COUNT(*) from water_log WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 21:25:08 -==> Parameters: 2019(String), 2(String), 2(String)
2019-05-15 21:25:08 -<==      Total: 1
2019-05-15 21:25:08 -==>  Preparing: select ifnull(SUM(water_money),0) from water_log WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 21:25:08 -==> Parameters: 2019(String), 2(String), 2(String)
2019-05-15 21:25:08 -<==      Total: 1
2019-05-15 21:25:08 -==>  Preparing: select COUNT(*) from water WHERE `water_sum` >= 0 and create_time = (select MAX(create_time) from water where DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ?) and water_type = ? and user_org = ? 
2019-05-15 21:25:08 -==> Parameters: 2019(String), 2(String), 2(String)
2019-05-15 21:25:08 -<==      Total: 1
2019-05-15 21:25:08 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE `water_sum` >= 0 and create_time = (select MAX(create_time) from water where DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ?) and water_type = ? and user_org = ? 
2019-05-15 21:25:08 -==> Parameters: 2019(String), 2(String), 2(String)
2019-05-15 21:25:08 -<==      Total: 1
2019-05-15 21:25:08 -==>  Preparing: select COUNT(*) from water WHERE water_sum <0 and create_time = (select MAX(create_time) from water where DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ?) and water_type = ? and user_org = ? 
2019-05-15 21:25:08 -==> Parameters: 2019(String), 2(String), 2(String)
2019-05-15 21:25:08 -<==      Total: 1
2019-05-15 21:25:08 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE water_sum <0 and create_time = (select MAX(create_time) from water where DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ?) and water_type = ? and user_org = ? 
2019-05-15 21:25:08 -==> Parameters: 2019(String), 2(String), 2(String)
2019-05-15 21:25:08 -<==      Total: 1
2019-05-15 21:25:08 -==>  Preparing: select COUNT(*) from water WHERE `water_sum` >= 0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 21:25:08 -==> Parameters: 2018-12(String), 3(String), 2(String)
2019-05-15 21:25:08 -<==      Total: 1
2019-05-15 21:25:08 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE `water_sum` >= 0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 21:25:08 -==> Parameters: 2018-12(String), 3(String), 2(String)
2019-05-15 21:25:08 -<==      Total: 1
2019-05-15 21:25:08 -==>  Preparing: select COUNT(*) from water WHERE water_sum <0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 21:25:08 -==> Parameters: 2018-12(String), 3(String), 2(String)
2019-05-15 21:25:08 -<==      Total: 1
2019-05-15 21:25:08 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE water_sum <0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 21:25:08 -==> Parameters: 2018-12(String), 3(String), 2(String)
2019-05-15 21:25:08 -<==      Total: 1
2019-05-15 21:25:08 -==>  Preparing: select COUNT(*),ifnull(SUM(water_cost),0) from water WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 21:25:08 -==> Parameters: 2019(String), 3(String), 2(String)
2019-05-15 21:25:08 -<==      Total: 1
2019-05-15 21:25:08 -==>  Preparing: select ifnull(SUM(water_cost),0) from water WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 21:25:08 -==> Parameters: 2019(String), 3(String), 2(String)
2019-05-15 21:25:08 -<==      Total: 1
2019-05-15 21:25:08 -==>  Preparing: select COUNT(*) from water_log WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 21:25:08 -==> Parameters: 2019(String), 3(String), 2(String)
2019-05-15 21:25:08 -<==      Total: 1
2019-05-15 21:25:08 -==>  Preparing: select ifnull(SUM(water_money),0) from water_log WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 21:25:08 -==> Parameters: 2019(String), 3(String), 2(String)
2019-05-15 21:25:08 -<==      Total: 1
2019-05-15 21:25:08 -==>  Preparing: select COUNT(*) from water WHERE `water_sum` >= 0 and create_time = (select MAX(create_time) from water where DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ?) and water_type = ? and user_org = ? 
2019-05-15 21:25:08 -==> Parameters: 2019(String), 3(String), 2(String)
2019-05-15 21:25:08 -<==      Total: 1
2019-05-15 21:25:08 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE `water_sum` >= 0 and create_time = (select MAX(create_time) from water where DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ?) and water_type = ? and user_org = ? 
2019-05-15 21:25:08 -==> Parameters: 2019(String), 3(String), 2(String)
2019-05-15 21:25:08 -<==      Total: 1
2019-05-15 21:25:08 -==>  Preparing: select COUNT(*) from water WHERE water_sum <0 and create_time = (select MAX(create_time) from water where DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ?) and water_type = ? and user_org = ? 
2019-05-15 21:25:08 -==> Parameters: 2019(String), 3(String), 2(String)
2019-05-15 21:25:08 -<==      Total: 1
2019-05-15 21:25:08 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE water_sum <0 and create_time = (select MAX(create_time) from water where DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ?) and water_type = ? and user_org = ? 
2019-05-15 21:25:08 -==> Parameters: 2019(String), 3(String), 2(String)
2019-05-15 21:25:08 -<==      Total: 1
2019-05-15 21:25:08 -==>  Preparing: select COUNT(*) from water WHERE `water_sum` >= 0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 21:25:08 -==> Parameters: 2018-12(String), 4(String), 2(String)
2019-05-15 21:25:08 -<==      Total: 1
2019-05-15 21:25:08 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE `water_sum` >= 0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 21:25:08 -==> Parameters: 2018-12(String), 4(String), 2(String)
2019-05-15 21:25:08 -<==      Total: 1
2019-05-15 21:25:08 -==>  Preparing: select COUNT(*) from water WHERE water_sum <0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 21:25:08 -==> Parameters: 2018-12(String), 4(String), 2(String)
2019-05-15 21:25:08 -<==      Total: 1
2019-05-15 21:25:08 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE water_sum <0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 21:25:08 -==> Parameters: 2018-12(String), 4(String), 2(String)
2019-05-15 21:25:08 -<==      Total: 1
2019-05-15 21:25:08 -==>  Preparing: select COUNT(*),ifnull(SUM(water_cost),0) from water WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 21:25:08 -==> Parameters: 2019(String), 4(String), 2(String)
2019-05-15 21:25:08 -<==      Total: 1
2019-05-15 21:25:08 -==>  Preparing: select ifnull(SUM(water_cost),0) from water WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 21:25:08 -==> Parameters: 2019(String), 4(String), 2(String)
2019-05-15 21:25:08 -<==      Total: 1
2019-05-15 21:25:08 -==>  Preparing: select COUNT(*) from water_log WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 21:25:08 -==> Parameters: 2019(String), 4(String), 2(String)
2019-05-15 21:25:08 -<==      Total: 1
2019-05-15 21:25:08 -==>  Preparing: select ifnull(SUM(water_money),0) from water_log WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 21:25:08 -==> Parameters: 2019(String), 4(String), 2(String)
2019-05-15 21:25:08 -<==      Total: 1
2019-05-15 21:25:08 -==>  Preparing: select COUNT(*) from water WHERE `water_sum` >= 0 and create_time = (select MAX(create_time) from water where DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ?) and water_type = ? and user_org = ? 
2019-05-15 21:25:08 -==> Parameters: 2019(String), 4(String), 2(String)
2019-05-15 21:25:08 -<==      Total: 1
2019-05-15 21:25:08 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE `water_sum` >= 0 and create_time = (select MAX(create_time) from water where DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ?) and water_type = ? and user_org = ? 
2019-05-15 21:25:08 -==> Parameters: 2019(String), 4(String), 2(String)
2019-05-15 21:25:08 -<==      Total: 1
2019-05-15 21:25:08 -==>  Preparing: select COUNT(*) from water WHERE water_sum <0 and create_time = (select MAX(create_time) from water where DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ?) and water_type = ? and user_org = ? 
2019-05-15 21:25:08 -==> Parameters: 2019(String), 4(String), 2(String)
2019-05-15 21:25:08 -<==      Total: 1
2019-05-15 21:25:08 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE water_sum <0 and create_time = (select MAX(create_time) from water where DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ?) and water_type = ? and user_org = ? 
2019-05-15 21:25:08 -==> Parameters: 2019(String), 4(String), 2(String)
2019-05-15 21:25:08 -<==      Total: 1
2019-05-15 21:25:08 -==>  Preparing: select m_water,s1_water,s2_water,s3_water,water_org from water_price 
2019-05-15 21:25:08 -==> Parameters: 
2019-05-15 21:25:08 -<==      Total: 2
2019-05-15 21:25:08 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-05-15 21:25:08 -null
java.lang.NullPointerException: null
	at com.bootdo.charts.controller.tableWaterYYController.tableWaterYY(tableWaterYYController.java:416)
	at com.bootdo.charts.controller.tableWaterYYController$$FastClassBySpringCGLIB$$e46653e2.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:204)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:746)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.bootdo.common.aspect.WebLogAspect.doAround(WebLogAspect.java:57)
	at sun.reflect.GeneratedMethodAccessor142.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.bootdo.charts.controller.tableWaterYYController$$EnhancerBySpringCGLIB$$5fa7bb3.tableWaterYY(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:209)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:877)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:783)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:991)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:925)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:974)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:877)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:661)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:851)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:61)
	at org.apache.shiro.web.servlet.AdviceFilter.executeChain(AdviceFilter.java:108)
	at org.apache.shiro.web.servlet.AdviceFilter.doFilterInternal(AdviceFilter.java:137)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:66)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)
	at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)
	at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)
	at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)
	at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:383)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:109)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:496)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:790)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1468)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:745)
2019-05-15 21:25:08 -==> Parameters: 1(Long), admin(String), error(String), null, http://localhost:8081/charts/tableWaterYY/tableWaterYY(String), java.lang.NullPointerException(String), null, 2019-05-15 21:25:08.671(Timestamp)
2019-05-15 21:25:08 -<==    Updates: 1
2019-05-15 21:25:10 -请求地址 : http://localhost:8081/charts/tableWaterYY/tableWaterYY
2019-05-15 21:25:10 -HTTP METHOD : POST
2019-05-15 21:25:10 -CLASS_METHOD : com.bootdo.charts.controller.tableWaterYYController.tableWaterYY
2019-05-15 21:25:10 -参数 : [com.bootdo.water.vo.WaterVo@362f547d, com.bootdo.moneyLog.vo.WaterLogVo@1eef928a]
2019-05-15 21:25:10 -==>  Preparing: select COUNT(*) from water WHERE `water_sum` >= 0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 21:25:10 -==> Parameters: 2018-12(String), 1(String), 2(String)
2019-05-15 21:25:10 -<==      Total: 1
2019-05-15 21:25:10 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE `water_sum` >= 0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 21:25:10 -==> Parameters: 2018-12(String), 1(String), 2(String)
2019-05-15 21:25:10 -<==      Total: 1
2019-05-15 21:25:10 -==>  Preparing: select COUNT(*) from water WHERE water_sum <0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 21:25:10 -==> Parameters: 2018-12(String), 1(String), 2(String)
2019-05-15 21:25:10 -<==      Total: 1
2019-05-15 21:25:10 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE water_sum <0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 21:25:10 -==> Parameters: 2018-12(String), 1(String), 2(String)
2019-05-15 21:25:10 -<==      Total: 1
2019-05-15 21:25:10 -==>  Preparing: select COUNT(*),ifnull(SUM(water_cost),0) from water WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 21:25:10 -==> Parameters: 2019(String), 1(String), 2(String)
2019-05-15 21:25:10 -<==      Total: 1
2019-05-15 21:25:10 -==>  Preparing: select ifnull(SUM(water_cost),0) from water WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 21:25:10 -==> Parameters: 2019(String), 1(String), 2(String)
2019-05-15 21:25:10 -<==      Total: 1
2019-05-15 21:25:10 -==>  Preparing: select COUNT(*) from water_log WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 21:25:10 -==> Parameters: 2019(String), 1(String), 2(String)
2019-05-15 21:25:10 -<==      Total: 1
2019-05-15 21:25:10 -==>  Preparing: select ifnull(SUM(water_money),0) from water_log WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 21:25:10 -==> Parameters: 2019(String), 1(String), 2(String)
2019-05-15 21:25:10 -<==      Total: 1
2019-05-15 21:25:10 -==>  Preparing: select COUNT(*) from water WHERE `water_sum` >= 0 and create_time = (select MAX(create_time) from water where DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ?) and water_type = ? and user_org = ? 
2019-05-15 21:25:10 -==> Parameters: 2019(String), 1(String), 2(String)
2019-05-15 21:25:10 -<==      Total: 1
2019-05-15 21:25:10 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE `water_sum` >= 0 and create_time = (select MAX(create_time) from water where DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ?) and water_type = ? and user_org = ? 
2019-05-15 21:25:10 -==> Parameters: 2019(String), 1(String), 2(String)
2019-05-15 21:25:10 -<==      Total: 1
2019-05-15 21:25:10 -==>  Preparing: select COUNT(*) from water WHERE water_sum <0 and create_time = (select MAX(create_time) from water where DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ?) and water_type = ? and user_org = ? 
2019-05-15 21:25:10 -==> Parameters: 2019(String), 1(String), 2(String)
2019-05-15 21:25:10 -<==      Total: 1
2019-05-15 21:25:10 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE water_sum <0 and create_time = (select MAX(create_time) from water where DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ?) and water_type = ? and user_org = ? 
2019-05-15 21:25:10 -==> Parameters: 2019(String), 1(String), 2(String)
2019-05-15 21:25:10 -<==      Total: 1
2019-05-15 21:25:10 -==>  Preparing: select COUNT(*) from water WHERE `water_sum` >= 0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 21:25:10 -==> Parameters: 2018-12(String), 2(String), 2(String)
2019-05-15 21:25:10 -<==      Total: 1
2019-05-15 21:25:10 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE `water_sum` >= 0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 21:25:10 -==> Parameters: 2018-12(String), 2(String), 2(String)
2019-05-15 21:25:10 -<==      Total: 1
2019-05-15 21:25:10 -==>  Preparing: select COUNT(*) from water WHERE water_sum <0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 21:25:10 -==> Parameters: 2018-12(String), 2(String), 2(String)
2019-05-15 21:25:10 -<==      Total: 1
2019-05-15 21:25:10 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE water_sum <0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 21:25:10 -==> Parameters: 2018-12(String), 2(String), 2(String)
2019-05-15 21:25:10 -<==      Total: 1
2019-05-15 21:25:10 -==>  Preparing: select COUNT(*),ifnull(SUM(water_cost),0) from water WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 21:25:10 -==> Parameters: 2019(String), 2(String), 2(String)
2019-05-15 21:25:10 -<==      Total: 1
2019-05-15 21:25:10 -==>  Preparing: select ifnull(SUM(water_cost),0) from water WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 21:25:10 -==> Parameters: 2019(String), 2(String), 2(String)
2019-05-15 21:25:10 -<==      Total: 1
2019-05-15 21:25:10 -==>  Preparing: select COUNT(*) from water_log WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 21:25:10 -==> Parameters: 2019(String), 2(String), 2(String)
2019-05-15 21:25:10 -<==      Total: 1
2019-05-15 21:25:10 -==>  Preparing: select ifnull(SUM(water_money),0) from water_log WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 21:25:10 -==> Parameters: 2019(String), 2(String), 2(String)
2019-05-15 21:25:10 -<==      Total: 1
2019-05-15 21:25:10 -==>  Preparing: select COUNT(*) from water WHERE `water_sum` >= 0 and create_time = (select MAX(create_time) from water where DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ?) and water_type = ? and user_org = ? 
2019-05-15 21:25:10 -==> Parameters: 2019(String), 2(String), 2(String)
2019-05-15 21:25:10 -<==      Total: 1
2019-05-15 21:25:10 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE `water_sum` >= 0 and create_time = (select MAX(create_time) from water where DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ?) and water_type = ? and user_org = ? 
2019-05-15 21:25:10 -==> Parameters: 2019(String), 2(String), 2(String)
2019-05-15 21:25:10 -<==      Total: 1
2019-05-15 21:25:10 -==>  Preparing: select COUNT(*) from water WHERE water_sum <0 and create_time = (select MAX(create_time) from water where DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ?) and water_type = ? and user_org = ? 
2019-05-15 21:25:10 -==> Parameters: 2019(String), 2(String), 2(String)
2019-05-15 21:25:10 -<==      Total: 1
2019-05-15 21:25:10 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE water_sum <0 and create_time = (select MAX(create_time) from water where DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ?) and water_type = ? and user_org = ? 
2019-05-15 21:25:10 -==> Parameters: 2019(String), 2(String), 2(String)
2019-05-15 21:25:10 -<==      Total: 1
2019-05-15 21:25:10 -==>  Preparing: select COUNT(*) from water WHERE `water_sum` >= 0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 21:25:10 -==> Parameters: 2018-12(String), 3(String), 2(String)
2019-05-15 21:25:10 -<==      Total: 1
2019-05-15 21:25:10 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE `water_sum` >= 0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 21:25:10 -==> Parameters: 2018-12(String), 3(String), 2(String)
2019-05-15 21:25:10 -<==      Total: 1
2019-05-15 21:25:10 -==>  Preparing: select COUNT(*) from water WHERE water_sum <0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 21:25:10 -==> Parameters: 2018-12(String), 3(String), 2(String)
2019-05-15 21:25:10 -<==      Total: 1
2019-05-15 21:25:10 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE water_sum <0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 21:25:10 -==> Parameters: 2018-12(String), 3(String), 2(String)
2019-05-15 21:25:10 -<==      Total: 1
2019-05-15 21:25:10 -==>  Preparing: select COUNT(*),ifnull(SUM(water_cost),0) from water WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 21:25:10 -==> Parameters: 2019(String), 3(String), 2(String)
2019-05-15 21:25:10 -<==      Total: 1
2019-05-15 21:25:10 -==>  Preparing: select ifnull(SUM(water_cost),0) from water WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 21:25:10 -==> Parameters: 2019(String), 3(String), 2(String)
2019-05-15 21:25:10 -<==      Total: 1
2019-05-15 21:25:10 -==>  Preparing: select COUNT(*) from water_log WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 21:25:10 -==> Parameters: 2019(String), 3(String), 2(String)
2019-05-15 21:25:10 -<==      Total: 1
2019-05-15 21:25:10 -==>  Preparing: select ifnull(SUM(water_money),0) from water_log WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 21:25:10 -==> Parameters: 2019(String), 3(String), 2(String)
2019-05-15 21:25:10 -<==      Total: 1
2019-05-15 21:25:10 -==>  Preparing: select COUNT(*) from water WHERE `water_sum` >= 0 and create_time = (select MAX(create_time) from water where DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ?) and water_type = ? and user_org = ? 
2019-05-15 21:25:10 -==> Parameters: 2019(String), 3(String), 2(String)
2019-05-15 21:25:10 -<==      Total: 1
2019-05-15 21:25:10 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE `water_sum` >= 0 and create_time = (select MAX(create_time) from water where DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ?) and water_type = ? and user_org = ? 
2019-05-15 21:25:10 -==> Parameters: 2019(String), 3(String), 2(String)
2019-05-15 21:25:10 -<==      Total: 1
2019-05-15 21:25:10 -==>  Preparing: select COUNT(*) from water WHERE water_sum <0 and create_time = (select MAX(create_time) from water where DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ?) and water_type = ? and user_org = ? 
2019-05-15 21:25:10 -==> Parameters: 2019(String), 3(String), 2(String)
2019-05-15 21:25:10 -<==      Total: 1
2019-05-15 21:25:10 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE water_sum <0 and create_time = (select MAX(create_time) from water where DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ?) and water_type = ? and user_org = ? 
2019-05-15 21:25:10 -==> Parameters: 2019(String), 3(String), 2(String)
2019-05-15 21:25:10 -<==      Total: 1
2019-05-15 21:25:10 -==>  Preparing: select COUNT(*) from water WHERE `water_sum` >= 0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 21:25:10 -==> Parameters: 2018-12(String), 4(String), 2(String)
2019-05-15 21:25:10 -<==      Total: 1
2019-05-15 21:25:10 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE `water_sum` >= 0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 21:25:10 -==> Parameters: 2018-12(String), 4(String), 2(String)
2019-05-15 21:25:10 -<==      Total: 1
2019-05-15 21:25:10 -==>  Preparing: select COUNT(*) from water WHERE water_sum <0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 21:25:10 -==> Parameters: 2018-12(String), 4(String), 2(String)
2019-05-15 21:25:10 -<==      Total: 1
2019-05-15 21:25:10 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE water_sum <0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 21:25:10 -==> Parameters: 2018-12(String), 4(String), 2(String)
2019-05-15 21:25:10 -<==      Total: 1
2019-05-15 21:25:10 -==>  Preparing: select COUNT(*),ifnull(SUM(water_cost),0) from water WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 21:25:10 -==> Parameters: 2019(String), 4(String), 2(String)
2019-05-15 21:25:10 -<==      Total: 1
2019-05-15 21:25:10 -==>  Preparing: select ifnull(SUM(water_cost),0) from water WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 21:25:10 -==> Parameters: 2019(String), 4(String), 2(String)
2019-05-15 21:25:10 -<==      Total: 1
2019-05-15 21:25:10 -==>  Preparing: select COUNT(*) from water_log WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 21:25:10 -==> Parameters: 2019(String), 4(String), 2(String)
2019-05-15 21:25:10 -<==      Total: 1
2019-05-15 21:25:10 -==>  Preparing: select ifnull(SUM(water_money),0) from water_log WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 21:25:10 -==> Parameters: 2019(String), 4(String), 2(String)
2019-05-15 21:25:10 -<==      Total: 1
2019-05-15 21:25:10 -==>  Preparing: select COUNT(*) from water WHERE `water_sum` >= 0 and create_time = (select MAX(create_time) from water where DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ?) and water_type = ? and user_org = ? 
2019-05-15 21:25:10 -==> Parameters: 2019(String), 4(String), 2(String)
2019-05-15 21:25:10 -<==      Total: 1
2019-05-15 21:25:10 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE `water_sum` >= 0 and create_time = (select MAX(create_time) from water where DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ?) and water_type = ? and user_org = ? 
2019-05-15 21:25:10 -==> Parameters: 2019(String), 4(String), 2(String)
2019-05-15 21:25:10 -<==      Total: 1
2019-05-15 21:25:10 -==>  Preparing: select COUNT(*) from water WHERE water_sum <0 and create_time = (select MAX(create_time) from water where DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ?) and water_type = ? and user_org = ? 
2019-05-15 21:25:10 -==> Parameters: 2019(String), 4(String), 2(String)
2019-05-15 21:25:10 -<==      Total: 1
2019-05-15 21:25:10 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE water_sum <0 and create_time = (select MAX(create_time) from water where DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ?) and water_type = ? and user_org = ? 
2019-05-15 21:25:10 -==> Parameters: 2019(String), 4(String), 2(String)
2019-05-15 21:25:10 -<==      Total: 1
2019-05-15 21:25:10 -==>  Preparing: select m_water,s1_water,s2_water,s3_water,water_org from water_price 
2019-05-15 21:25:10 -==> Parameters: 
2019-05-15 21:25:10 -<==      Total: 2
2019-05-15 21:25:10 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-05-15 21:25:10 -null
java.lang.NullPointerException: null
	at com.bootdo.charts.controller.tableWaterYYController.tableWaterYY(tableWaterYYController.java:416)
	at com.bootdo.charts.controller.tableWaterYYController$$FastClassBySpringCGLIB$$e46653e2.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:204)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:746)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.bootdo.common.aspect.WebLogAspect.doAround(WebLogAspect.java:57)
	at sun.reflect.GeneratedMethodAccessor142.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.bootdo.charts.controller.tableWaterYYController$$EnhancerBySpringCGLIB$$5fa7bb3.tableWaterYY(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:209)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:877)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:783)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:991)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:925)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:974)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:877)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:661)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:851)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:61)
	at org.apache.shiro.web.servlet.AdviceFilter.executeChain(AdviceFilter.java:108)
	at org.apache.shiro.web.servlet.AdviceFilter.doFilterInternal(AdviceFilter.java:137)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:66)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)
	at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)
	at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)
	at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)
	at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:383)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:109)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:496)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:790)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1468)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:745)
2019-05-15 21:25:10 -==> Parameters: 1(Long), admin(String), error(String), null, http://localhost:8081/charts/tableWaterYY/tableWaterYY(String), java.lang.NullPointerException(String), null, 2019-05-15 21:25:10.79(Timestamp)
2019-05-15 21:25:10 -<==    Updates: 1
2019-05-15 21:25:40 -Failed to invoke @ExceptionHandler method: public java.lang.Object com.bootdo.common.exception.BDExceptionHandler.handleException(java.lang.Exception,javax.servlet.http.HttpServletRequest)
org.apache.shiro.UnavailableSecurityManagerException: No SecurityManager accessible to the calling code, either bound to the org.apache.shiro.util.ThreadContext or as a vm static singleton.  This is an invalid application configuration.
	at org.apache.shiro.SecurityUtils.getSecurityManager(SecurityUtils.java:123)
	at org.apache.shiro.subject.Subject$Builder.<init>(Subject.java:627)
	at org.apache.shiro.SecurityUtils.getSubject(SecurityUtils.java:56)
	at com.bootdo.common.utils.ShiroUtils.getSubjct(ShiroUtils.java:20)
	at com.bootdo.common.utils.ShiroUtils.getUser(ShiroUtils.java:23)
	at com.bootdo.common.exception.BDExceptionHandler.handleException(BDExceptionHandler.java:75)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:209)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver.doResolveHandlerMethodException(ExceptionHandlerExceptionResolver.java:404)
	at org.springframework.web.servlet.handler.AbstractHandlerMethodExceptionResolver.doResolveException(AbstractHandlerMethodExceptionResolver.java:61)
	at org.springframework.web.servlet.handler.AbstractHandlerExceptionResolver.resolveException(AbstractHandlerExceptionResolver.java:139)
	at org.springframework.web.servlet.handler.HandlerExceptionResolverComposite.resolveException(HandlerExceptionResolverComposite.java:78)
	at org.springframework.web.servlet.DispatcherServlet.processHandlerException(DispatcherServlet.java:1255)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1062)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1008)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:925)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:974)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:877)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:661)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:851)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:728)
	at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:591)
	at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:527)
	at org.apache.catalina.core.StandardHostValve.custom(StandardHostValve.java:389)
	at org.apache.catalina.core.StandardHostValve.status(StandardHostValve.java:254)
	at org.apache.catalina.core.StandardHostValve.throwable(StandardHostValve.java:349)
	at org.apache.catalina.core.AsyncContextImpl.setErrorState(AsyncContextImpl.java:424)
	at org.apache.catalina.connector.CoyoteAdapter.asyncDispatch(CoyoteAdapter.java:176)
	at org.apache.coyote.AbstractProcessor.dispatch(AbstractProcessor.java:232)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:53)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:790)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1468)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:745)
2019-05-15 21:27:29 -Starting BootdoApplication on PC-201905091110 with PID 6888 (D:\eclipse2018-work\bootdo\target\classes started by Administrator in D:\eclipse2018-work\bootdo)
2019-05-15 21:27:29 -Running with Spring Boot v2.0.3.RELEASE, Spring v5.0.7.RELEASE
2019-05-15 21:27:29 -The following profiles are active: dev
2019-05-15 21:27:29 -Refreshing org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@4d5650ae: startup date [Wed May 15 21:27:29 CST 2019]; root of context hierarchy
2019-05-15 21:27:32 -Multiple Spring Data modules found, entering strict repository configuration mode!
2019-05-15 21:27:33 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$d4b53e4c] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-05-15 21:27:33 -Bean 'shiroConfig' of type [com.bootdo.system.config.ShiroConfig$$EnhancerBySpringCGLIB$$c70e6cf3] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-05-15 21:27:34 -Bean 'userRealm' of type [com.bootdo.system.shiro.UserRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-05-15 21:27:34 -Bean 'cacheManager2' of type [net.sf.ehcache.CacheManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-05-15 21:27:34 -Bean 'ehCacheManager' of type [org.apache.shiro.cache.ehcache.EhCacheManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-05-15 21:27:34 -Cache with name 'com.bootdo.system.shiro.UserRealm.authorizationCache' does not yet exist.  Creating now.
2019-05-15 21:27:34 -Added EhCache named [com.bootdo.system.shiro.UserRealm.authorizationCache]
2019-05-15 21:27:34 -Bean 'sessionDAO' of type [org.apache.shiro.session.mgt.eis.MemorySessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-05-15 21:27:34 -Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-05-15 21:27:34 -Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-05-15 21:27:35 -Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-05-15 21:27:35 -Tomcat initialized with port(s): 8081 (http)
2019-05-15 21:27:35 -Initializing ProtocolHandler ["http-nio-8081"]
2019-05-15 21:27:35 -Starting service [Tomcat]
2019-05-15 21:27:35 -Starting Servlet Engine: Apache Tomcat/8.5.31
2019-05-15 21:27:35 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [D:\Java\JDK\jdk1.8.0_102\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;D:/Java/JRE/bin/server;D:/Java/JRE/bin;D:/Java/JRE/lib/amd64;C:\ProgramData\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Windows\System32\OpenSSH\;%JAVA_HOME\bin%;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;;C:\Users\Administrator\Desktop;;.]
2019-05-15 21:27:35 -Initializing Spring embedded WebApplicationContext
2019-05-15 21:27:35 -Root WebApplicationContext: initialization completed in 6490 ms
2019-05-15 21:27:36 -Mapping filter: 'characterEncodingFilter' to: [/*]
2019-05-15 21:27:36 -Mapping filter: 'hiddenHttpMethodFilter' to: [/*]
2019-05-15 21:27:36 -Mapping filter: 'httpPutFormContentFilter' to: [/*]
2019-05-15 21:27:36 -Mapping filter: 'requestContextFilter' to: [/*]
2019-05-15 21:27:36 -Filter xssFilter was not registered (disabled)
2019-05-15 21:27:36 -Mapping filter: 'webStatFilter' to urls: [/*]
2019-05-15 21:27:36 -Mapping filter: 'shiroFilterFactoryBean' to: [/*]
2019-05-15 21:27:36 -Servlet statViewServlet mapped to [/druid/*]
2019-05-15 21:27:36 -Servlet dispatcherServlet mapped to [/]
2019-05-15 21:27:43 -ApplicationContext registed-->org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@4d5650ae: startup date [Wed May 15 21:27:29 CST 2019]; root of context hierarchy
2019-05-15 21:27:43 -Using default implementation for ThreadExecutor
2019-05-15 21:27:43 -Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2019-05-15 21:27:43 -Quartz Scheduler v.2.2.1 created.
2019-05-15 21:27:43 -RAMJobStore initialized.
2019-05-15 21:27:43 -Scheduler meta-data: Quartz Scheduler (v2.2.1) 'schedulerFactoryBean' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2019-05-15 21:27:43 -Quartz scheduler 'schedulerFactoryBean' initialized from an externally provided properties instance.
2019-05-15 21:27:43 -Quartz scheduler version: 2.2.1
2019-05-15 21:27:43 -JobFactory set to: com.bootdo.common.quartz.factory.JobFactory@8077c97
2019-05-15 21:27:44 -Initializing ExecutorService  'clientInboundChannelExecutor'
2019-05-15 21:27:44 -Initializing ExecutorService  'clientOutboundChannelExecutor'
2019-05-15 21:27:46 -Mapped "{[/charts/countDD],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.countDDController.countDD()
2019-05-15 21:27:46 -Mapped "{[/charts/countDD/exportDD],methods=[GET]}" onto public void com.bootdo.charts.controller.countDDController.exportDD(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.HeatLogVo,com.bootdo.moneyLog.vo.WaterLogVo,javax.servlet.http.HttpServletResponse)
2019-05-15 21:27:46 -Mapped "{[/charts/countDD/getCountDD],methods=[POST]}" onto public com.bootdo.charts.vo.CountDayVo com.bootdo.charts.controller.countDDController.getCountD(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo)
2019-05-15 21:27:46 -Mapped "{[/charts/countMM],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.countMMController.countMM()
2019-05-15 21:27:46 -Mapped "{[/charts/countMM/exportMM],methods=[GET]}" onto public void com.bootdo.charts.controller.countMMController.exportMM(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.HeatLogVo,com.bootdo.moneyLog.vo.WaterLogVo,javax.servlet.http.HttpServletResponse)
2019-05-15 21:27:46 -Mapped "{[/charts/countMM/getCountMM],methods=[POST]}" onto public java.util.Map com.bootdo.charts.controller.countMMController.getCountMM(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo)
2019-05-15 21:27:46 -Mapped "{[/charts/countOwe/getCountOwe],methods=[POST]}" onto public com.bootdo.charts.vo.CountOweVo com.bootdo.charts.controller.countOweController.getCountD(com.bootdo.elec.vo.ElecVo,com.bootdo.water.vo.WaterVo,com.bootdo.heat.vo.HeatVo)
2019-05-15 21:27:46 -Mapped "{[/charts/countOwe],methods=[GET]}" onto java.lang.String com.bootdo.charts.controller.countOweController.countOwe()
2019-05-15 21:27:46 -Mapped "{[/charts/countOwe/exportOwe],methods=[GET]}" onto public void com.bootdo.charts.controller.countOweController.exportOwe(com.bootdo.elec.vo.ElecVo,com.bootdo.heat.vo.HeatVo,com.bootdo.water.vo.WaterVo,javax.servlet.http.HttpServletResponse)
2019-05-15 21:27:46 -Mapped "{[/charts/countRun/getCountRun],methods=[POST]}" onto public java.util.Map com.bootdo.charts.controller.countRunController.getCountRun(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo)
2019-05-15 21:27:46 -Mapped "{[/charts/countRun/exportRun],methods=[GET]}" onto public void com.bootdo.charts.controller.countRunController.exportRun(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.HeatLogVo,com.bootdo.moneyLog.vo.WaterLogVo,javax.servlet.http.HttpServletResponse)
2019-05-15 21:27:46 -Mapped "{[/charts/countRun],methods=[GET]}" onto java.lang.String com.bootdo.charts.controller.countRunController.countRun()
2019-05-15 21:27:46 -Mapped "{[/charts/countYY],methods=[GET]}" onto java.lang.String com.bootdo.charts.controller.countYYController.countYY()
2019-05-15 21:27:46 -Mapped "{[/charts/countYY/exportYY],methods=[GET]}" onto public void com.bootdo.charts.controller.countYYController.exportYY(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.HeatLogVo,com.bootdo.moneyLog.vo.WaterLogVo,javax.servlet.http.HttpServletResponse)
2019-05-15 21:27:46 -Mapped "{[/charts/countYY/getCountYY],methods=[POST]}" onto public java.util.Map com.bootdo.charts.controller.countYYController.getCountYY(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo)
2019-05-15 21:27:46 -Mapped "{[/charts/tableDD/getTableDD],methods=[POST]}" onto public java.util.Map com.bootdo.charts.controller.tableDDController.getTableDD(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo)
2019-05-15 21:27:46 -Mapped "{[/charts/tableDD],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.tableDDController.countDD()
2019-05-15 21:27:46 -Mapped "{[/charts/tableDD/exportDD],methods=[GET]}" onto public void com.bootdo.charts.controller.tableDDController.exportDD(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.HeatLogVo,com.bootdo.moneyLog.vo.WaterLogVo,javax.servlet.http.HttpServletResponse)
2019-05-15 21:27:46 -Mapped "{[/charts/tableElecMM/tableElecMM],methods=[POST]}" onto public java.util.Map com.bootdo.charts.controller.tableElecMMController.tableElecMM(com.bootdo.elec.vo.ElecVo,com.bootdo.moneyLog.vo.ElecLogVo)
2019-05-15 21:27:46 -Mapped "{[/charts/tableElecMM],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.tableElecMMController.tableElecMM()
2019-05-15 21:27:46 -Mapped "{[/charts/tableElecMM/exportElecMM],methods=[GET]}" onto public void com.bootdo.charts.controller.tableElecMMController.exportElecMM(com.bootdo.elec.vo.ElecVo,com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse)
2019-05-15 21:27:46 -Mapped "{[/charts/tableElecYY/exportElecYY],methods=[GET]}" onto public void com.bootdo.charts.controller.tableElecYYController.exportElecYY(com.bootdo.elec.vo.ElecVo,com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse)
2019-05-15 21:27:46 -Mapped "{[/charts/tableElecYY/getCountYY],methods=[POST]}" onto public java.util.Map com.bootdo.charts.controller.tableElecYYController.getCountYY(com.bootdo.elec.vo.ElecVo,com.bootdo.moneyLog.vo.ElecLogVo)
2019-05-15 21:27:46 -Mapped "{[/charts/tableElecYY],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.tableElecYYController.tableElecYY()
2019-05-15 21:27:46 -Mapped "{[/charts/tableHeatMM/tableHeatMM],methods=[POST]}" onto public java.util.Map com.bootdo.charts.controller.tableHeatMMController.tableHeatMM(com.bootdo.heat.vo.HeatVo,com.bootdo.moneyLog.vo.HeatLogVo)
2019-05-15 21:27:46 -Mapped "{[/charts/tableHeatMM],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.tableHeatMMController.tableHeatMM()
2019-05-15 21:27:46 -Mapped "{[/charts/tableHeatMM/exportHeatMM],methods=[GET]}" onto public void com.bootdo.charts.controller.tableHeatMMController.exportHeatMM(com.bootdo.heat.vo.HeatVo,com.bootdo.moneyLog.vo.HeatLogVo,javax.servlet.http.HttpServletResponse)
2019-05-15 21:27:46 -Mapped "{[/charts/tableHeatYY],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.tableHeatYYController.tableHeatYY()
2019-05-15 21:27:46 -Mapped "{[/charts/tableHeatYY/exportHeatYY],methods=[GET]}" onto public void com.bootdo.charts.controller.tableHeatYYController.exportHeatYY(com.bootdo.heat.vo.HeatVo,com.bootdo.moneyLog.vo.HeatLogVo,javax.servlet.http.HttpServletResponse)
2019-05-15 21:27:46 -Mapped "{[/charts/tableHeatYY/getCountYY],methods=[POST]}" onto public java.util.Map com.bootdo.charts.controller.tableHeatYYController.getCountMM(com.bootdo.heat.vo.HeatVo,com.bootdo.moneyLog.vo.HeatLogVo)
2019-05-15 21:27:46 -Mapped "{[/charts/tableWaterMM/exportWaterMM],methods=[GET]}" onto public void com.bootdo.charts.controller.tableWaterMMController.exportWaterMM(com.bootdo.water.vo.WaterVo,com.bootdo.moneyLog.vo.WaterLogVo,javax.servlet.http.HttpServletResponse)
2019-05-15 21:27:46 -Mapped "{[/charts/tableWaterMM],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.tableWaterMMController.tableWaterMM()
2019-05-15 21:27:46 -Mapped "{[/charts/tableWaterMM/tableWaterMM],methods=[POST]}" onto public java.util.Map com.bootdo.charts.controller.tableWaterMMController.tableWaterMM(com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.water.vo.WaterVo)
2019-05-15 21:27:46 -Mapped "{[/charts/tableWaterYY/tableWaterYY],methods=[POST]}" onto public java.util.Map com.bootdo.charts.controller.tableWaterYYController.tableWaterYY(com.bootdo.water.vo.WaterVo,com.bootdo.moneyLog.vo.WaterLogVo)
2019-05-15 21:27:46 -Mapped "{[/charts/tableWaterYY],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.tableWaterYYController.tableWaterYY()
2019-05-15 21:27:46 -Mapped "{[/charts/tableWaterYY/exportWaterYY],methods=[GET]}" onto public void com.bootdo.charts.controller.tableWaterYYController.exportWaterYY(com.bootdo.water.vo.WaterVo,com.bootdo.moneyLog.vo.WaterLogVo,javax.servlet.http.HttpServletResponse)
2019-05-15 21:27:46 -Mapped "{[/common/dict/add],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.add()
2019-05-15 21:27:46 -Mapped "{[/common/dict/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.remove(java.lang.Long)
2019-05-15 21:27:46 -Mapped "{[/common/dict/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.remove(java.lang.Long[])
2019-05-15 21:27:46 -Mapped "{[/common/dict/update]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.update(com.bootdo.common.domain.DictDO)
2019-05-15 21:27:46 -Mapped "{[/common/dict/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.common.controller.DictController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 21:27:46 -Mapped "{[/common/dict/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.save(com.bootdo.common.domain.DictDO)
2019-05-15 21:27:46 -Mapped "{[/common/dict/type],methods=[GET]}" onto public java.util.List<com.bootdo.common.domain.DictDO> com.bootdo.common.controller.DictController.listType()
2019-05-15 21:27:46 -Mapped "{[/common/dict],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.dict()
2019-05-15 21:27:46 -Mapped "{[/common/dict/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.edit(java.lang.Long,org.springframework.ui.Model)
2019-05-15 21:27:46 -Mapped "{[/common/dict/list/{type}],methods=[GET]}" onto public java.util.List<com.bootdo.common.domain.DictDO> com.bootdo.common.controller.DictController.listByType(java.lang.String)
2019-05-15 21:27:46 -Mapped "{[/common/dict/add/{type}/{description}],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.addD(org.springframework.ui.Model,java.lang.String,java.lang.String)
2019-05-15 21:27:46 -Mapped "{[/common/sysFile/add],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.FileController.add()
2019-05-15 21:27:46 -Mapped "{[/common/sysFile/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.remove(java.lang.Long,javax.servlet.http.HttpServletRequest)
2019-05-15 21:27:46 -Mapped "{[/common/sysFile/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.remove(java.lang.Long[])
2019-05-15 21:27:46 -Mapped "{[/common/sysFile/update]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.update(com.bootdo.common.domain.FileDO)
2019-05-15 21:27:46 -Mapped "{[/common/sysFile/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.common.controller.FileController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 21:27:46 -Mapped "{[/common/sysFile/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.save(com.bootdo.common.domain.FileDO)
2019-05-15 21:27:46 -Mapped "{[/common/sysFile/info/{id}]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.info(java.lang.Long)
2019-05-15 21:27:46 -Mapped "{[/common/sysFile/edit],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.FileController.edit(java.lang.Long,org.springframework.ui.Model)
2019-05-15 21:27:46 -Mapped "{[/common/sysFile/upload],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.FileController.upload(org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpServletRequest)
2019-05-15 21:27:46 -Mapped "{[/common/sysFile],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.FileController.sysFile(org.springframework.ui.Model)
2019-05-15 21:27:46 -Mapped "{[/common/generator/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.GeneratorController.update(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 21:27:46 -Mapped "{[/common/generator/list],methods=[GET]}" onto java.util.List<java.util.Map<java.lang.String, java.lang.Object>> com.bootdo.common.controller.GeneratorController.list()
2019-05-15 21:27:46 -Mapped "{[/common/generator/code/{tableName}]}" onto public void com.bootdo.common.controller.GeneratorController.code(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String) throws java.io.IOException
2019-05-15 21:27:46 -Mapped "{[/common/generator],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.GeneratorController.generator()
2019-05-15 21:27:46 -Mapped "{[/common/generator/batchCode]}" onto public void com.bootdo.common.controller.GeneratorController.batchCode(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String) throws java.io.IOException
2019-05-15 21:27:46 -Mapped "{[/common/generator/edit],methods=[GET]}" onto public java.lang.String com.bootdo.common.controller.GeneratorController.edit(org.springframework.ui.Model)
2019-05-15 21:27:46 -Mapped "{[/common/job/add],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.JobController.add()
2019-05-15 21:27:46 -Mapped "{[/common/job/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.remove(java.lang.Long)
2019-05-15 21:27:46 -Mapped "{[/common/job/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.remove(java.lang.Long[])
2019-05-15 21:27:46 -Mapped "{[/common/job/update],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.update(com.bootdo.common.domain.TaskDO)
2019-05-15 21:27:46 -Mapped "{[/common/job/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.common.controller.JobController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 21:27:46 -Mapped "{[/common/job/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.save(com.bootdo.common.domain.TaskDO)
2019-05-15 21:27:46 -Mapped "{[/common/job/info/{id}]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.info(java.lang.Long)
2019-05-15 21:27:46 -Mapped "{[/common/job/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.JobController.edit(java.lang.Long,org.springframework.ui.Model)
2019-05-15 21:27:46 -Mapped "{[/common/job/changeJobStatus],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.changeJobStatus(java.lang.Long,java.lang.String)
2019-05-15 21:27:46 -Mapped "{[/common/job],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.JobController.taskScheduleJob()
2019-05-15 21:27:46 -Mapped "{[/common/log/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.LogController.remove(java.lang.Long)
2019-05-15 21:27:46 -Mapped "{[/common/log],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.LogController.log()
2019-05-15 21:27:46 -Mapped "{[/common/log/list],methods=[GET]}" onto com.bootdo.common.domain.PageDO<com.bootdo.common.domain.LogDO> com.bootdo.common.controller.LogController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 21:27:46 -Mapped "{[/common/log/batchRemove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.LogController.batchRemove(java.lang.Long[])
2019-05-15 21:27:46 -Mapped "{[/common/long],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.LongController.Long()
2019-05-15 21:27:46 -Mapped "{[/common/time],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.TimeController.Time()
2019-05-15 21:27:46 -Mapped "{[/error]}" onto public com.bootdo.common.utils.R com.bootdo.common.exception.MainsiteErrorController.handleError(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-05-15 21:27:46 -Mapped "{[/error],produces=[text/html]}" onto public org.springframework.web.servlet.ModelAndView com.bootdo.common.exception.MainsiteErrorController.errorHtml(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-05-15 21:27:46 -Mapped "{[/elec/elec/add],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecController.add()
2019-05-15 21:27:46 -Mapped "{[/elec/elec/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.remove(java.lang.Long)
2019-05-15 21:27:46 -Mapped "{[/elec/elec/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.remove(java.lang.Long[])
2019-05-15 21:27:46 -Mapped "{[/elec/elec/update],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.update(com.bootdo.elec.domain.ElecDO)
2019-05-15 21:27:46 -Mapped "{[/elec/elec/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.elec.controller.ElecController.list(java.util.Map<java.lang.String, java.lang.Object>,com.bootdo.elec.domain.ElecDO)
2019-05-15 21:27:46 -Mapped "{[/elec/elec/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.save(com.bootdo.elec.domain.ElecDO)
2019-05-15 21:27:46 -Mapped "{[/elec/elec/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecController.edit(java.lang.Long,org.springframework.ui.Model)
2019-05-15 21:27:46 -Mapped "{[/elec/elec],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecController.Elec()
2019-05-15 21:27:46 -Mapped "{[/elec/elec/YhElecUpdate],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.YhElecUpdate(com.bootdo.elec.domain.ElecDO)
2019-05-15 21:27:46 -Mapped "{[/elec/elec/exprotElec],methods=[GET]}" onto public void com.bootdo.elec.controller.ElecController.exprotExcel(com.bootdo.elec.vo.ElecVo,javax.servlet.http.HttpServletResponse)
2019-05-15 21:27:46 -Mapped "{[/elec/elec/WxElecUpdate],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.WxElecUpdate(com.bootdo.elec.domain.ElecDO)
2019-05-15 21:27:46 -Mapped "{[/elec/elecInto/exprotElecIntoExcel],methods=[GET]}" onto public void com.bootdo.elec.controller.ElecIntoController.exprotExcel(com.bootdo.elec.vo.ElecVo,javax.servlet.http.HttpServletResponse)
2019-05-15 21:27:46 -Mapped "{[/elec/elecInto],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecIntoController.ElecInto()
2019-05-15 21:27:46 -Mapped "{[/elec/elecInto/importElecIntoExcel],methods=[POST]}" onto public java.lang.String com.bootdo.elec.controller.ElecIntoController.importElecIntoExcel(org.springframework.web.multipart.MultipartFile,com.bootdo.elec.vo.ElecVo,javax.servlet.http.HttpServletResponse) throws java.lang.Exception
2019-05-15 21:27:46 -Mapped "{[/elec/elecPrice/add],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecPriceController.add()
2019-05-15 21:27:46 -Mapped "{[/elec/elecPrice/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecPriceController.remove(java.lang.Long)
2019-05-15 21:27:46 -Mapped "{[/elec/elecPrice/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecPriceController.remove(java.lang.Long[])
2019-05-15 21:27:46 -Mapped "{[/elec/elecPrice/update]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecPriceController.update(com.bootdo.elec.domain.ElecPriceDO)
2019-05-15 21:27:46 -Mapped "{[/elec/elecPrice/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.elec.controller.ElecPriceController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 21:27:46 -Mapped "{[/elec/elecPrice/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecPriceController.save(com.bootdo.elec.domain.ElecPriceDO,com.bootdo.elec.domain.ElecDO)
2019-05-15 21:27:46 -Mapped "{[/elec/elecPrice/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecPriceController.edit(java.lang.Long,org.springframework.ui.Model)
2019-05-15 21:27:46 -Mapped "{[/elec/elecPrice],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecPriceController.ElecPrice()
2019-05-15 21:27:46 -Mapped "{[/elec/elecUpLoad],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecUpLoadController.Elec()
2019-05-15 21:27:46 -Mapped "{[/elec/elecUpLoad/exprotElecExcel],methods=[GET]}" onto public void com.bootdo.elec.controller.ElecUpLoadController.exprotElecExcel(com.bootdo.elec.vo.ElecVo,javax.servlet.http.HttpServletResponse)
2019-05-15 21:27:46 -Mapped "{[/elec/elecUpLoad/importElecExcel],methods=[POST]}" onto public java.util.Map<java.lang.String, java.lang.Object> com.bootdo.elec.controller.ElecUpLoadController.importElecExcel(org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpServletRequest) throws java.lang.Exception
2019-05-15 21:27:46 -Mapped "{[/heat/heat/add],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatController.add()
2019-05-15 21:27:46 -Mapped "{[/heat/heat/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatController.remove(java.lang.Integer)
2019-05-15 21:27:46 -Mapped "{[/heat/heat/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatController.remove(java.lang.Integer[])
2019-05-15 21:27:46 -Mapped "{[/heat/heat/update]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatController.update(com.bootdo.heat.domain.HeatDO)
2019-05-15 21:27:46 -Mapped "{[/heat/heat/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.heat.controller.HeatController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 21:27:46 -Mapped "{[/heat/heat/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatController.save(com.bootdo.heat.domain.HeatDO)
2019-05-15 21:27:46 -Mapped "{[/heat/heat/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatController.edit(java.lang.Integer,org.springframework.ui.Model)
2019-05-15 21:27:46 -Mapped "{[/heat/heat/exprotHeat],methods=[GET]}" onto public void com.bootdo.heat.controller.HeatController.exprotExcel(com.bootdo.heat.vo.HeatVo,javax.servlet.http.HttpServletResponse)
2019-05-15 21:27:46 -Mapped "{[/heat/heat],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatController.Heat()
2019-05-15 21:27:46 -Mapped "{[/heat/heatInto/exprotHeatIntoExcel],methods=[GET]}" onto public void com.bootdo.heat.controller.HeatIntoController.exprotExcel(com.bootdo.heat.vo.HeatVo,javax.servlet.http.HttpServletResponse)
2019-05-15 21:27:46 -Mapped "{[/heat/heatInto],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatIntoController.HeatInto()
2019-05-15 21:27:46 -Mapped "{[/heat/heatInto/importHeatIntoExcel],methods=[POST]}" onto public java.lang.String com.bootdo.heat.controller.HeatIntoController.importHeatIntoExcel(org.springframework.web.multipart.MultipartFile,com.bootdo.heat.vo.HeatVo,javax.servlet.http.HttpServletResponse) throws java.lang.Exception
2019-05-15 21:27:46 -Mapped "{[/heat/heatPrice/add],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatPriceController.add()
2019-05-15 21:27:46 -Mapped "{[/heat/heatPrice/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatPriceController.remove(java.lang.Long)
2019-05-15 21:27:46 -Mapped "{[/heat/heatPrice/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatPriceController.remove(java.lang.Long[])
2019-05-15 21:27:46 -Mapped "{[/heat/heatPrice/update]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatPriceController.update(com.bootdo.heat.domain.HeatPriceDO)
2019-05-15 21:27:46 -Mapped "{[/heat/heatPrice/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.heat.controller.HeatPriceController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 21:27:46 -Mapped "{[/heat/heatPrice/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatPriceController.save(com.bootdo.heat.domain.HeatPriceDO)
2019-05-15 21:27:46 -Mapped "{[/heat/heatPrice/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatPriceController.edit(java.lang.Long,org.springframework.ui.Model)
2019-05-15 21:27:46 -Mapped "{[/heat/heatPrice],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatPriceController.HeatPrice()
2019-05-15 21:27:46 -Mapped "{[/heat/heatUpLoad],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatUpLoadController.HeatUpLoad()
2019-05-15 21:27:46 -Mapped "{[/heat/heatUpLoad/importHeatExcel]}" onto public java.lang.String com.bootdo.heat.controller.HeatUpLoadController.importHeatExcel(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)
2019-05-15 21:27:46 -Mapped "{[/heat/heatUpLoad/createHeatExcel],methods=[POST]}" onto public java.lang.String com.bootdo.heat.controller.HeatUpLoadController.createHeatExcel(com.bootdo.heat.domain.HeatDO) throws java.lang.Exception
2019-05-15 21:27:46 -Mapped "{[/heat/heatUpLoad/exprotHeatExcel],methods=[GET]}" onto public void com.bootdo.heat.controller.HeatUpLoadController.exprotHeatExcel(com.bootdo.heat.vo.HeatVo,javax.servlet.http.HttpServletResponse)
2019-05-15 21:27:46 -Mapped "{[/moneyList/moneyList/queryAllUserName],methods=[POST]}" onto public java.util.List<com.bootdo.moneyList.damain.MoneyListDO> com.bootdo.moneyList.controller.MoneyListController.getAllUserName(com.bootdo.moneyList.damain.MoneyListDO)
2019-05-15 21:27:46 -Mapped "{[/moneyList/moneyList],methods=[GET]}" onto java.lang.String com.bootdo.moneyList.controller.MoneyListController.MoneyList()
2019-05-15 21:27:46 -Mapped "{[/moneyList/moneyList/queryAllUser],methods=[POST]}" onto public java.util.List<com.bootdo.moneyList.damain.MoneyListDO> com.bootdo.moneyList.controller.MoneyListController.queryAllUser(com.bootdo.moneyList.damain.MoneyListDO)
2019-05-15 21:27:46 -Mapped "{[/moneyList/moneyList/updateMoney],methods=[POST]}" onto public java.lang.String com.bootdo.moneyList.controller.MoneyListController.updateMoney(com.bootdo.moneyList.damain.MoneyListDO)
2019-05-15 21:27:46 -Mapped "{[/moneyLog/elecLog/add],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.ElecLogController.add()
2019-05-15 21:27:46 -Mapped "{[/moneyLog/elecLog/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.ElecLogController.remove(java.lang.Long)
2019-05-15 21:27:46 -Mapped "{[/moneyLog/elecLog/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.ElecLogController.remove(java.lang.Long[])
2019-05-15 21:27:46 -Mapped "{[/moneyLog/elecLog/update]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.ElecLogController.update(java.util.Map<java.lang.String, java.lang.Object>,com.bootdo.moneyLog.domain.ElecLogDO)
2019-05-15 21:27:46 -Mapped "{[/moneyLog/elecLog/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.moneyLog.controller.ElecLogController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 21:27:46 -Mapped "{[/moneyLog/elecLog/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.ElecLogController.save(com.bootdo.moneyLog.domain.ElecLogDO)
2019-05-15 21:27:46 -Mapped "{[/moneyLog/elecLog/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.ElecLogController.edit(java.lang.Long,org.springframework.ui.Model)
2019-05-15 21:27:46 -Mapped "{[/moneyLog/elecLog/exprotElecLog],methods=[GET]}" onto public void com.bootdo.moneyLog.controller.ElecLogController.exprotElecLog(com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-05-15 21:27:46 -Mapped "{[/moneyLog/elecLog],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.ElecLogController.moneyLog()
2019-05-15 21:27:46 -Mapped "{[/moneyLog/heatLog/add],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.HeatLogController.add()
2019-05-15 21:27:46 -Mapped "{[/moneyLog/heatLog/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.HeatLogController.remove(java.lang.Long)
2019-05-15 21:27:46 -Mapped "{[/moneyLog/heatLog/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.HeatLogController.remove(java.lang.Long[])
2019-05-15 21:27:46 -Mapped "{[/moneyLog/heatLog/update]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.HeatLogController.update(java.util.Map<java.lang.String, java.lang.Object>,com.bootdo.moneyLog.domain.HeatLogDO)
2019-05-15 21:27:46 -Mapped "{[/moneyLog/heatLog/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.moneyLog.controller.HeatLogController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 21:27:46 -Mapped "{[/moneyLog/heatLog/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.HeatLogController.save(com.bootdo.moneyLog.domain.HeatLogDO)
2019-05-15 21:27:46 -Mapped "{[/moneyLog/heatLog/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.HeatLogController.edit(java.lang.Long,org.springframework.ui.Model)
2019-05-15 21:27:46 -Mapped "{[/moneyLog/heatLog],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.HeatLogController.HeatLog()
2019-05-15 21:27:46 -Mapped "{[/moneyLog/heatLog/exprotHeatLog],methods=[GET]}" onto public void com.bootdo.moneyLog.controller.HeatLogController.exprotHeatLog(com.bootdo.moneyLog.vo.HeatLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-05-15 21:27:46 -Mapped "{[/moneyLog/waterLog/add],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.WaterLogController.add()
2019-05-15 21:27:46 -Mapped "{[/moneyLog/waterLog/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.WaterLogController.remove(java.lang.Long)
2019-05-15 21:27:46 -Mapped "{[/moneyLog/waterLog/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.WaterLogController.remove(java.lang.Long[])
2019-05-15 21:27:46 -Mapped "{[/moneyLog/waterLog/update]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.WaterLogController.update(java.util.Map<java.lang.String, java.lang.Object>,com.bootdo.moneyLog.domain.WaterLogDO)
2019-05-15 21:27:46 -Mapped "{[/moneyLog/waterLog/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.moneyLog.controller.WaterLogController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 21:27:46 -Mapped "{[/moneyLog/waterLog/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.WaterLogController.save(com.bootdo.moneyLog.domain.WaterLogDO)
2019-05-15 21:27:46 -Mapped "{[/moneyLog/waterLog/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.WaterLogController.edit(java.lang.Long,org.springframework.ui.Model)
2019-05-15 21:27:46 -Mapped "{[/moneyLog/waterLog],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.WaterLogController.WaterLog()
2019-05-15 21:27:46 -Mapped "{[/moneyLog/waterLog/exprotWaterLog],methods=[GET]}" onto public void com.bootdo.moneyLog.controller.WaterLogController.exprotWaterLog(com.bootdo.moneyLog.vo.WaterLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-05-15 21:27:46 -Mapped "{[/oa/notify/add],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.add()
2019-05-15 21:27:46 -Mapped "{[/oa/notify/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.remove(java.lang.Long)
2019-05-15 21:27:46 -Mapped "{[/oa/notify/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.remove(java.lang.Long[])
2019-05-15 21:27:46 -Mapped "{[/oa/notify/update]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.update(com.bootdo.oa.domain.NotifyDO)
2019-05-15 21:27:46 -Mapped "{[/oa/notify/read/{id}],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.read(java.lang.Long,org.springframework.ui.Model)
2019-05-15 21:27:46 -Mapped "{[/oa/notify/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.oa.controller.NotifyController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 21:27:46 -Mapped "{[/oa/notify/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.save(com.bootdo.oa.domain.NotifyDO)
2019-05-15 21:27:46 -Mapped "{[/oa/notify/message],methods=[GET]}" onto com.bootdo.common.utils.PageUtils com.bootdo.oa.controller.NotifyController.message()
2019-05-15 21:27:46 -Mapped "{[/oa/notify/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.edit(java.lang.Long,org.springframework.ui.Model)
2019-05-15 21:27:46 -Mapped "{[/oa/notify],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.oaNotify()
2019-05-15 21:27:46 -Mapped "{[/oa/notify/selfNotify],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.selefNotify()
2019-05-15 21:27:46 -Mapped "{[/oa/notify/selfList],methods=[GET]}" onto com.bootdo.common.utils.PageUtils com.bootdo.oa.controller.NotifyController.selfList(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 21:27:46 -Mapped "{[/print/print/add],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.add()
2019-05-15 21:27:46 -Mapped "{[/print/print/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.print.controller.PrintController.remove(java.lang.Long)
2019-05-15 21:27:46 -Mapped "{[/print/print/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.print.controller.PrintController.remove(java.lang.Long[])
2019-05-15 21:27:46 -Mapped "{[/print/print/update]}" onto public com.bootdo.common.utils.R com.bootdo.print.controller.PrintController.update(com.bootdo.print.domain.PrintDO)
2019-05-15 21:27:46 -Mapped "{[/print/print/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.print.controller.PrintController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 21:27:46 -Mapped "{[/print/print/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.print.controller.PrintController.save(java.lang.String,com.bootdo.print.domain.PrintDO)
2019-05-15 21:27:46 -Mapped "{[/print/print/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.edit(java.lang.Long,org.springframework.ui.Model)
2019-05-15 21:27:46 -Mapped "{[/print/print],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.Print()
2019-05-15 21:27:46 -Mapped "{[/print/print/printMoney],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.printMoney()
2019-05-15 21:27:46 -Mapped "{[/print/print/exprotPrint],methods=[GET]}" onto public void com.bootdo.print.controller.PrintController.exprotPrint(com.bootdo.print.vo.PrintVo,javax.servlet.http.HttpServletResponse)
2019-05-15 21:27:46 -Mapped "{[/print/print/printEdit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.printEdit(java.lang.Long,org.springframework.ui.Model)
2019-05-15 21:27:46 -Mapped "{[/system/sysDept/add/{pId}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.add(java.lang.Long,org.springframework.ui.Model)
2019-05-15 21:27:46 -Mapped "{[/system/sysDept/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.remove(java.lang.Long)
2019-05-15 21:27:46 -Mapped "{[/system/sysDept/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.remove(java.lang.Long[])
2019-05-15 21:27:46 -Mapped "{[/system/sysDept/update]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.update(com.bootdo.system.domain.DeptDO)
2019-05-15 21:27:46 -Mapped "{[/system/sysDept/list],methods=[GET]}" onto public java.util.List<com.bootdo.system.domain.DeptDO> com.bootdo.system.controller.DeptController.list()
2019-05-15 21:27:46 -Mapped "{[/system/sysDept/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.save(com.bootdo.system.domain.DeptDO)
2019-05-15 21:27:46 -Mapped "{[/system/sysDept/tree],methods=[GET]}" onto public com.bootdo.common.domain.Tree<com.bootdo.system.domain.DeptDO> com.bootdo.system.controller.DeptController.tree()
2019-05-15 21:27:46 -Mapped "{[/system/sysDept/edit/{deptId}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.edit(java.lang.Long,org.springframework.ui.Model)
2019-05-15 21:27:46 -Mapped "{[/system/sysDept],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.dept()
2019-05-15 21:27:46 -Mapped "{[/system/sysDept/treeView],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.treeView()
2019-05-15 21:27:46 -Mapped "{[/index],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.index(org.springframework.ui.Model)
2019-05-15 21:27:46 -Mapped "{[/main],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.main()
2019-05-15 21:27:46 -Mapped "{[/login],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.login(org.springframework.ui.Model)
2019-05-15 21:27:46 -Mapped "{[/logout],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.logout()
2019-05-15 21:27:46 -Mapped "{[/login],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.LoginController.ajaxLogin(java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest)
2019-05-15 21:27:46 -Mapped "{[/ || ],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.welcome(org.springframework.ui.Model)
2019-05-15 21:27:46 -Mapped "{[/getVerify],methods=[GET]}" onto public void com.bootdo.system.controller.LoginController.getVerify(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-05-15 21:27:46 -Mapped "{[/sys/menu/add/{pId}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.MenuController.add(org.springframework.ui.Model,java.lang.Long)
2019-05-15 21:27:46 -Mapped "{[/sys/menu/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.MenuController.remove(java.lang.Long)
2019-05-15 21:27:46 -Mapped "{[/sys/menu/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.MenuController.update(com.bootdo.system.domain.MenuDO)
2019-05-15 21:27:46 -Mapped "{[/sys/menu/list]}" onto java.util.List<com.bootdo.system.domain.MenuDO> com.bootdo.system.controller.MenuController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 21:27:46 -Mapped "{[/sys/menu/save],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.MenuController.save(com.bootdo.system.domain.MenuDO)
2019-05-15 21:27:46 -Mapped "{[/sys/menu/tree/{roleId}],methods=[GET]}" onto com.bootdo.common.domain.Tree<com.bootdo.system.domain.MenuDO> com.bootdo.system.controller.MenuController.tree(java.lang.Long)
2019-05-15 21:27:46 -Mapped "{[/sys/menu/tree],methods=[GET]}" onto com.bootdo.common.domain.Tree<com.bootdo.system.domain.MenuDO> com.bootdo.system.controller.MenuController.tree()
2019-05-15 21:27:46 -Mapped "{[/sys/menu/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.MenuController.edit(org.springframework.ui.Model,java.lang.Long)
2019-05-15 21:27:46 -Mapped "{[/sys/menu],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.MenuController.menu(org.springframework.ui.Model)
2019-05-15 21:27:46 -Mapped "{[/sys/role/add],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.RoleController.add()
2019-05-15 21:27:46 -Mapped "{[/sys/role/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.update(com.bootdo.system.domain.RoleDO)
2019-05-15 21:27:46 -Mapped "{[/sys/role/list],methods=[GET]}" onto java.util.List<com.bootdo.system.domain.RoleDO> com.bootdo.system.controller.RoleController.list()
2019-05-15 21:27:46 -Mapped "{[/sys/role/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.save(java.lang.Long)
2019-05-15 21:27:46 -Mapped "{[/sys/role/save],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.save(com.bootdo.system.domain.RoleDO)
2019-05-15 21:27:46 -Mapped "{[/sys/role/batchRemove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.batchRemove(java.lang.Long[])
2019-05-15 21:27:46 -Mapped "{[/sys/role],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.RoleController.role()
2019-05-15 21:27:46 -Mapped "{[/sys/role/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.RoleController.edit(java.lang.Long,org.springframework.ui.Model)
2019-05-15 21:27:46 -Mapped "{[/sys/online/list]}" onto public java.util.List<com.bootdo.system.domain.UserOnline> com.bootdo.system.controller.SessionController.list()
2019-05-15 21:27:46 -Mapped "{[/sys/online/sessionList]}" onto public java.util.Collection<org.apache.shiro.session.Session> com.bootdo.system.controller.SessionController.sessionList()
2019-05-15 21:27:46 -Mapped "{[/sys/online/forceLogout/{sessionId}]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.SessionController.forceLogout(java.lang.String,org.springframework.web.servlet.mvc.support.RedirectAttributes)
2019-05-15 21:27:46 -Mapped "{[/sys/online],methods=[GET]}" onto public java.lang.String com.bootdo.system.controller.SessionController.online()
2019-05-15 21:27:46 -Mapped "{[/sys/user/exit],methods=[POST]}" onto boolean com.bootdo.system.controller.UserController.exit(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 21:27:46 -Mapped "{[/sys/user/add],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.add(org.springframework.ui.Model)
2019-05-15 21:27:46 -Mapped "{[/sys/user/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.remove(java.lang.Long)
2019-05-15 21:27:46 -Mapped "{[/sys/user/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.update(com.bootdo.system.domain.UserDO)
2019-05-15 21:27:46 -Mapped "{[/sys/user/list],methods=[GET]}" onto com.bootdo.common.utils.PageUtils com.bootdo.system.controller.UserController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 21:27:46 -Mapped "{[/sys/user/save],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.save(com.bootdo.system.domain.UserDO)
2019-05-15 21:27:46 -Mapped "{[/sys/user/batchRemove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.batchRemove(java.lang.Long[])
2019-05-15 21:27:46 -Mapped "{[/sys/user/tree],methods=[GET]}" onto public com.bootdo.common.domain.Tree<com.bootdo.system.domain.DeptDO> com.bootdo.system.controller.UserController.tree()
2019-05-15 21:27:46 -Mapped "{[/sys/user/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.edit(org.springframework.ui.Model,java.lang.Long)
2019-05-15 21:27:46 -Mapped "{[/sys/user/treeView],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.treeView()
2019-05-15 21:27:46 -Mapped "{[/sys/user/updatePeronal],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.updatePeronal(com.bootdo.system.domain.UserDO)
2019-05-15 21:27:46 -Mapped "{[/sys/user/resetPwd],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.resetPwd(com.bootdo.system.vo.UserVO)
2019-05-15 21:27:46 -Mapped "{[/sys/user/resetPwd/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.resetPwd(java.lang.Long,org.springframework.ui.Model)
2019-05-15 21:27:46 -Mapped "{[/sys/user/personal],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.personal(org.springframework.ui.Model)
2019-05-15 21:27:46 -Mapped "{[/sys/user/uploadImg],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.uploadImg(org.springframework.web.multipart.MultipartFile,java.lang.String,javax.servlet.http.HttpServletRequest)
2019-05-15 21:27:46 -Mapped "{[/sys/user/adminResetPwd],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.adminResetPwd(com.bootdo.system.vo.UserVO)
2019-05-15 21:27:46 -Mapped "{[/sys/user],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.user(org.springframework.ui.Model)
2019-05-15 21:27:46 -Mapped "{[/file/downImport/{importType}],methods=[GET]}" onto public void com.bootdo.temple.controller.TempletController.downImport(javax.servlet.http.HttpServletResponse,java.lang.String)
2019-05-15 21:27:46 -Mapped "{[/water/water/add],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterController.add()
2019-05-15 21:27:46 -Mapped "{[/water/water/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterController.remove(java.lang.Long)
2019-05-15 21:27:46 -Mapped "{[/water/water/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterController.remove(java.lang.Long[])
2019-05-15 21:27:46 -Mapped "{[/water/water/update]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterController.update(com.bootdo.water.domain.WaterDO)
2019-05-15 21:27:46 -Mapped "{[/water/water/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.water.controller.WaterController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 21:27:46 -Mapped "{[/water/water/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterController.save(com.bootdo.water.domain.WaterDO)
2019-05-15 21:27:46 -Mapped "{[/water/water],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterController.Water()
2019-05-15 21:27:46 -Mapped "{[/water/water/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterController.edit(java.lang.Long,org.springframework.ui.Model)
2019-05-15 21:27:46 -Mapped "{[/water/water/exprotWater],methods=[GET]}" onto public void com.bootdo.water.controller.WaterController.exprotExcel(com.bootdo.water.vo.WaterVo,javax.servlet.http.HttpServletResponse)
2019-05-15 21:27:46 -Mapped "{[/water/waterInto],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterIntoController.WaterInto()
2019-05-15 21:27:46 -Mapped "{[/water/waterInto/exprotWaterIntoExcel],methods=[GET]}" onto public void com.bootdo.water.controller.WaterIntoController.exprotExcel(com.bootdo.water.vo.WaterVo,javax.servlet.http.HttpServletResponse)
2019-05-15 21:27:46 -Mapped "{[/water/waterInto/importWaterIntoExcel],methods=[POST]}" onto public java.lang.String com.bootdo.water.controller.WaterIntoController.importWaterIntoExcel(org.springframework.web.multipart.MultipartFile,com.bootdo.water.vo.WaterVo,javax.servlet.http.HttpServletResponse) throws java.lang.Exception
2019-05-15 21:27:46 -Mapped "{[/water/waterPrice/add],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterPriceController.add()
2019-05-15 21:27:46 -Mapped "{[/water/waterPrice/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterPriceController.remove(java.lang.Long)
2019-05-15 21:27:46 -Mapped "{[/water/waterPrice/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterPriceController.remove(java.lang.Long[])
2019-05-15 21:27:46 -Mapped "{[/water/waterPrice/update]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterPriceController.update(com.bootdo.water.domain.WaterPriceDO)
2019-05-15 21:27:46 -Mapped "{[/water/waterPrice/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.water.controller.WaterPriceController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 21:27:46 -Mapped "{[/water/waterPrice/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterPriceController.save(com.bootdo.water.domain.WaterPriceDO)
2019-05-15 21:27:46 -Mapped "{[/water/waterPrice],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterPriceController.WaterPrice()
2019-05-15 21:27:46 -Mapped "{[/water/waterPrice/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterPriceController.edit(java.lang.Long,org.springframework.ui.Model)
2019-05-15 21:27:46 -Mapped "{[/water/waterUpLoad/exprotWaterExcel],methods=[GET]}" onto public void com.bootdo.water.controller.WaterUpLoadController.exprotWaterExcel(com.bootdo.water.vo.WaterVo,javax.servlet.http.HttpServletResponse)
2019-05-15 21:27:46 -Mapped "{[/water/waterUpLoad],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterUpLoadController.WaterUpLoad()
2019-05-15 21:27:46 -Mapped "{[/water/waterUpLoad/createWaterExcel],methods=[POST]}" onto public java.lang.String com.bootdo.water.controller.WaterUpLoadController.createWaterExcel(com.bootdo.water.domain.WaterDO) throws java.lang.Exception
2019-05-15 21:27:46 -Mapped "{[/water/waterUpLoad/importWaterExcel]}" onto public java.lang.String com.bootdo.water.controller.WaterUpLoadController.importWaterExcel(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)
2019-05-15 21:27:46 -Mapped "{[/v2/api-docs],methods=[GET],produces=[application/json || application/hal+json]}" onto public org.springframework.http.ResponseEntity<springfox.documentation.spring.web.json.Json> springfox.documentation.swagger2.web.Swagger2Controller.getDocumentation(java.lang.String,javax.servlet.http.HttpServletRequest)
2019-05-15 21:27:46 -Mapped "{[/swagger-resources/configuration/ui]}" onto org.springframework.http.ResponseEntity<springfox.documentation.swagger.web.UiConfiguration> springfox.documentation.swagger.web.ApiResourceController.uiConfiguration()
2019-05-15 21:27:46 -Mapped "{[/swagger-resources]}" onto org.springframework.http.ResponseEntity<java.util.List<springfox.documentation.swagger.web.SwaggerResource>> springfox.documentation.swagger.web.ApiResourceController.swaggerResources()
2019-05-15 21:27:46 -Mapped "{[/swagger-resources/configuration/security]}" onto org.springframework.http.ResponseEntity<springfox.documentation.swagger.web.SecurityConfiguration> springfox.documentation.swagger.web.ApiResourceController.securityConfiguration()
2019-05-15 21:27:46 -Initializing ExecutorService  'messageBrokerTaskScheduler'
2019-05-15 21:27:46 -Mapped URL path [/endpointChat/**] onto handler of type [class org.springframework.web.socket.sockjs.support.SockJsHttpRequestHandler]
2019-05-15 21:27:46 -Initializing ExecutorService  'brokerChannelExecutor'
2019-05-15 21:27:47 -Mapped URL path [/**/favicon.ico] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-05-15 21:27:47 -Looking for @ControllerAdvice: org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@4d5650ae: startup date [Wed May 15 21:27:29 CST 2019]; root of context hierarchy
2019-05-15 21:27:47 -Mapped URL path [/webjars/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-05-15 21:27:47 -Mapped URL path [/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-05-15 21:27:47 -Mapped URL path [/files/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-05-15 21:27:47 -Detected @ExceptionHandler methods in BDExceptionHandler
2019-05-15 21:27:47 -[THYMELEAF][main] Template Mode 'LEGACYHTML5' is deprecated. Using Template Mode 'HTML' instead.
2019-05-15 21:27:49 -Registering beans for JMX exposure on startup
2019-05-15 21:27:49 -Bean with name 'dataSource' has been autodetected for JMX exposure
2019-05-15 21:27:49 -Located MBean 'dataSource': registering with JMX server as MBean [com.alibaba.druid.pool:name=dataSource,type=DruidDataSource]
2019-05-15 21:27:49 -Starting beans in phase 2147483647
2019-05-15 21:27:49 -Context refreshed
2019-05-15 21:27:49 -Found 1 custom documentation plugin(s)
2019-05-15 21:27:49 -Scanning for api listing references
2019-05-15 21:27:49 -Generating unique operation named: getCountDUsingPOST_1
2019-05-15 21:27:49 -Generating unique operation named: removeUsingPOST_1
2019-05-15 21:27:50 -Generating unique operation named: addUsingGET_1
2019-05-15 21:27:50 -Generating unique operation named: editUsingGET_1
2019-05-15 21:27:50 -Generating unique operation named: listUsingGET_1
2019-05-15 21:27:50 -Generating unique operation named: removeUsingPOST_2
2019-05-15 21:27:50 -Generating unique operation named: removeUsingPOST_3
2019-05-15 21:27:50 -Generating unique operation named: saveUsingPOST_1
2019-05-15 21:27:50 -Generating unique operation named: updateUsingGET_1
2019-05-15 21:27:50 -Generating unique operation named: updateUsingHEAD_1
2019-05-15 21:27:50 -Generating unique operation named: updateUsingPOST_1
2019-05-15 21:27:50 -Generating unique operation named: updateUsingPUT_1
2019-05-15 21:27:50 -Generating unique operation named: updateUsingPATCH_1
2019-05-15 21:27:50 -Generating unique operation named: updateUsingDELETE_1
2019-05-15 21:27:50 -Generating unique operation named: updateUsingOPTIONS_1
2019-05-15 21:27:50 -Generating unique operation named: updateUsingTRACE_1
2019-05-15 21:27:50 -Generating unique operation named: addUsingGET_2
2019-05-15 21:27:50 -Generating unique operation named: editUsingGET_2
2019-05-15 21:27:50 -Generating unique operation named: listUsingGET_2
2019-05-15 21:27:50 -Generating unique operation named: removeUsingPOST_4
2019-05-15 21:27:50 -Generating unique operation named: removeUsingPOST_5
2019-05-15 21:27:50 -Generating unique operation named: saveUsingPOST_2
2019-05-15 21:27:50 -Generating unique operation named: updateUsingPOST_2
2019-05-15 21:27:50 -Generating unique operation named: exprotExcelUsingGET_1
2019-05-15 21:27:50 -Generating unique operation named: addUsingGET_3
2019-05-15 21:27:50 -Generating unique operation named: editUsingGET_3
2019-05-15 21:27:50 -Generating unique operation named: listUsingGET_3
2019-05-15 21:27:50 -Generating unique operation named: removeUsingPOST_6
2019-05-15 21:27:50 -Generating unique operation named: removeUsingPOST_7
2019-05-15 21:27:50 -Generating unique operation named: saveUsingPOST_3
2019-05-15 21:27:50 -Generating unique operation named: updateUsingGET_2
2019-05-15 21:27:50 -Generating unique operation named: updateUsingHEAD_2
2019-05-15 21:27:50 -Generating unique operation named: updateUsingPOST_3
2019-05-15 21:27:50 -Generating unique operation named: updateUsingPUT_2
2019-05-15 21:27:50 -Generating unique operation named: updateUsingPATCH_2
2019-05-15 21:27:50 -Generating unique operation named: updateUsingDELETE_2
2019-05-15 21:27:50 -Generating unique operation named: updateUsingOPTIONS_2
2019-05-15 21:27:50 -Generating unique operation named: updateUsingTRACE_2
2019-05-15 21:27:50 -Generating unique operation named: addUsingGET_4
2019-05-15 21:27:50 -Generating unique operation named: editUsingGET_4
2019-05-15 21:27:50 -Generating unique operation named: listUsingGET_4
2019-05-15 21:27:50 -Generating unique operation named: removeUsingPOST_8
2019-05-15 21:27:50 -Generating unique operation named: removeUsingPOST_9
2019-05-15 21:27:50 -Generating unique operation named: saveUsingPOST_4
2019-05-15 21:27:50 -Generating unique operation named: updateUsingGET_3
2019-05-15 21:27:50 -Generating unique operation named: updateUsingHEAD_3
2019-05-15 21:27:50 -Generating unique operation named: updateUsingPOST_4
2019-05-15 21:27:50 -Generating unique operation named: updateUsingPUT_3
2019-05-15 21:27:50 -Generating unique operation named: updateUsingPATCH_3
2019-05-15 21:27:50 -Generating unique operation named: updateUsingDELETE_3
2019-05-15 21:27:50 -Generating unique operation named: updateUsingOPTIONS_3
2019-05-15 21:27:50 -Generating unique operation named: updateUsingTRACE_3
2019-05-15 21:27:50 -Generating unique operation named: ElecUsingGET_1
2019-05-15 21:27:50 -Generating unique operation named: addUsingGET_5
2019-05-15 21:27:50 -Generating unique operation named: editUsingGET_5
2019-05-15 21:27:50 -Generating unique operation named: listUsingGET_5
2019-05-15 21:27:50 -Generating unique operation named: removeUsingPOST_10
2019-05-15 21:27:50 -Generating unique operation named: removeUsingPOST_11
2019-05-15 21:27:50 -Generating unique operation named: saveUsingPOST_5
2019-05-15 21:27:50 -Generating unique operation named: updateUsingGET_4
2019-05-15 21:27:50 -Generating unique operation named: updateUsingHEAD_4
2019-05-15 21:27:50 -Generating unique operation named: updateUsingPOST_5
2019-05-15 21:27:50 -Generating unique operation named: updateUsingPUT_4
2019-05-15 21:27:50 -Generating unique operation named: updateUsingPATCH_4
2019-05-15 21:27:50 -Generating unique operation named: updateUsingDELETE_4
2019-05-15 21:27:50 -Generating unique operation named: updateUsingOPTIONS_4
2019-05-15 21:27:50 -Generating unique operation named: updateUsingTRACE_4
2019-05-15 21:27:50 -Generating unique operation named: editUsingGET_6
2019-05-15 21:27:50 -Generating unique operation named: listUsingGET_6
2019-05-15 21:27:50 -Generating unique operation named: updateUsingPOST_6
2019-05-15 21:27:50 -Generating unique operation named: addUsingGET_6
2019-05-15 21:27:50 -Generating unique operation named: editUsingGET_7
2019-05-15 21:27:50 -Generating unique operation named: exprotExcelUsingGET_2
2019-05-15 21:27:50 -Generating unique operation named: listUsingGET_7
2019-05-15 21:27:50 -Generating unique operation named: removeUsingPOST_12
2019-05-15 21:27:50 -Generating unique operation named: removeUsingPOST_13
2019-05-15 21:27:50 -Generating unique operation named: saveUsingPOST_6
2019-05-15 21:27:50 -Generating unique operation named: updateUsingGET_5
2019-05-15 21:27:50 -Generating unique operation named: updateUsingHEAD_5
2019-05-15 21:27:50 -Generating unique operation named: updateUsingPOST_7
2019-05-15 21:27:50 -Generating unique operation named: updateUsingPUT_5
2019-05-15 21:27:50 -Generating unique operation named: updateUsingPATCH_5
2019-05-15 21:27:50 -Generating unique operation named: updateUsingDELETE_5
2019-05-15 21:27:50 -Generating unique operation named: updateUsingOPTIONS_5
2019-05-15 21:27:50 -Generating unique operation named: updateUsingTRACE_5
2019-05-15 21:27:50 -Generating unique operation named: exprotExcelUsingGET_3
2019-05-15 21:27:50 -Generating unique operation named: addUsingGET_7
2019-05-15 21:27:50 -Generating unique operation named: editUsingGET_8
2019-05-15 21:27:50 -Generating unique operation named: listUsingGET_8
2019-05-15 21:27:50 -Generating unique operation named: removeUsingPOST_14
2019-05-15 21:27:50 -Generating unique operation named: removeUsingPOST_15
2019-05-15 21:27:50 -Generating unique operation named: saveUsingPOST_7
2019-05-15 21:27:50 -Generating unique operation named: updateUsingGET_6
2019-05-15 21:27:50 -Generating unique operation named: updateUsingHEAD_6
2019-05-15 21:27:50 -Generating unique operation named: updateUsingPOST_8
2019-05-15 21:27:50 -Generating unique operation named: updateUsingPUT_6
2019-05-15 21:27:50 -Generating unique operation named: updateUsingPATCH_6
2019-05-15 21:27:50 -Generating unique operation named: updateUsingDELETE_6
2019-05-15 21:27:50 -Generating unique operation named: updateUsingOPTIONS_6
2019-05-15 21:27:50 -Generating unique operation named: updateUsingTRACE_6
2019-05-15 21:27:50 -Generating unique operation named: addUsingGET_8
2019-05-15 21:27:50 -Generating unique operation named: editUsingGET_9
2019-05-15 21:27:50 -Generating unique operation named: listUsingGET_9
2019-05-15 21:27:50 -Generating unique operation named: removeUsingPOST_16
2019-05-15 21:27:50 -Generating unique operation named: removeUsingPOST_17
2019-05-15 21:27:50 -Generating unique operation named: saveUsingPOST_8
2019-05-15 21:27:50 -Generating unique operation named: updateUsingGET_7
2019-05-15 21:27:50 -Generating unique operation named: updateUsingHEAD_7
2019-05-15 21:27:50 -Generating unique operation named: updateUsingPOST_9
2019-05-15 21:27:50 -Generating unique operation named: updateUsingPUT_7
2019-05-15 21:27:50 -Generating unique operation named: updateUsingPATCH_7
2019-05-15 21:27:50 -Generating unique operation named: updateUsingDELETE_7
2019-05-15 21:27:50 -Generating unique operation named: updateUsingOPTIONS_7
2019-05-15 21:27:50 -Generating unique operation named: updateUsingTRACE_7
2019-05-15 21:27:50 -Generating unique operation named: addUsingGET_9
2019-05-15 21:27:50 -Generating unique operation named: editUsingGET_10
2019-05-15 21:27:50 -Generating unique operation named: infoUsingGET_1
2019-05-15 21:27:50 -Generating unique operation named: infoUsingHEAD_1
2019-05-15 21:27:50 -Generating unique operation named: infoUsingPOST_1
2019-05-15 21:27:50 -Generating unique operation named: infoUsingPUT_1
2019-05-15 21:27:50 -Generating unique operation named: infoUsingPATCH_1
2019-05-15 21:27:50 -Generating unique operation named: infoUsingDELETE_1
2019-05-15 21:27:50 -Generating unique operation named: infoUsingOPTIONS_1
2019-05-15 21:27:50 -Generating unique operation named: infoUsingTRACE_1
2019-05-15 21:27:50 -Generating unique operation named: listUsingGET_10
2019-05-15 21:27:50 -Generating unique operation named: removeUsingPOST_18
2019-05-15 21:27:50 -Generating unique operation named: removeUsingPOST_19
2019-05-15 21:27:50 -Generating unique operation named: saveUsingPOST_9
2019-05-15 21:27:50 -Generating unique operation named: updateUsingPOST_10
2019-05-15 21:27:50 -Generating unique operation named: listUsingGET_11
2019-05-15 21:27:50 -Generating unique operation named: removeUsingPOST_20
2019-05-15 21:27:50 -Generating unique operation named: welcomeUsingGET_1
2019-05-15 21:27:50 -Generating unique operation named: addUsingGET_10
2019-05-15 21:27:50 -Generating unique operation named: editUsingGET_11
2019-05-15 21:27:50 -Generating unique operation named: listUsingGET_12
2019-05-15 21:27:50 -Generating unique operation named: removeUsingPOST_21
2019-05-15 21:27:50 -Generating unique operation named: saveUsingPOST_10
2019-05-15 21:27:50 -Generating unique operation named: treeUsingGET_1
2019-05-15 21:27:50 -Generating unique operation named: treeUsingGET_2
2019-05-15 21:27:51 -Generating unique operation named: updateUsingPOST_11
2019-05-15 21:27:51 -Generating unique operation named: addUsingGET_11
2019-05-15 21:27:51 -Generating unique operation named: editUsingGET_12
2019-05-15 21:27:51 -Generating unique operation named: listUsingGET_13
2019-05-15 21:27:51 -Generating unique operation named: removeUsingPOST_22
2019-05-15 21:27:51 -Generating unique operation named: removeUsingPOST_23
2019-05-15 21:27:51 -Generating unique operation named: saveUsingPOST_11
2019-05-15 21:27:51 -Generating unique operation named: updateUsingGET_8
2019-05-15 21:27:51 -Generating unique operation named: updateUsingHEAD_8
2019-05-15 21:27:51 -Generating unique operation named: updateUsingPOST_12
2019-05-15 21:27:51 -Generating unique operation named: updateUsingPUT_8
2019-05-15 21:27:51 -Generating unique operation named: updateUsingPATCH_8
2019-05-15 21:27:51 -Generating unique operation named: updateUsingDELETE_8
2019-05-15 21:27:51 -Generating unique operation named: updateUsingOPTIONS_8
2019-05-15 21:27:51 -Generating unique operation named: updateUsingTRACE_8
2019-05-15 21:27:51 -Generating unique operation named: addUsingGET_12
2019-05-15 21:27:51 -Generating unique operation named: editUsingGET_13
2019-05-15 21:27:51 -Generating unique operation named: listUsingGET_14
2019-05-15 21:27:51 -Generating unique operation named: removeUsingPOST_24
2019-05-15 21:27:51 -Generating unique operation named: removeUsingPOST_25
2019-05-15 21:27:51 -Generating unique operation named: saveUsingPOST_12
2019-05-15 21:27:51 -Generating unique operation named: updateUsingGET_9
2019-05-15 21:27:51 -Generating unique operation named: updateUsingHEAD_9
2019-05-15 21:27:51 -Generating unique operation named: updateUsingPOST_13
2019-05-15 21:27:51 -Generating unique operation named: updateUsingPUT_9
2019-05-15 21:27:51 -Generating unique operation named: updateUsingPATCH_9
2019-05-15 21:27:51 -Generating unique operation named: updateUsingDELETE_9
2019-05-15 21:27:51 -Generating unique operation named: updateUsingOPTIONS_9
2019-05-15 21:27:51 -Generating unique operation named: updateUsingTRACE_9
2019-05-15 21:27:51 -Generating unique operation named: addUsingGET_13
2019-05-15 21:27:51 -Generating unique operation named: batchRemoveUsingPOST_1
2019-05-15 21:27:51 -Generating unique operation named: editUsingGET_14
2019-05-15 21:27:51 -Generating unique operation named: listUsingGET_15
2019-05-15 21:27:51 -Generating unique operation named: saveUsingPOST_13
2019-05-15 21:27:51 -Generating unique operation named: saveUsingPOST_14
2019-05-15 21:27:51 -Generating unique operation named: updateUsingPOST_14
2019-05-15 21:27:51 -Generating unique operation named: listUsingGET_16
2019-05-15 21:27:51 -Generating unique operation named: listUsingHEAD_1
2019-05-15 21:27:51 -Generating unique operation named: listUsingPOST_1
2019-05-15 21:27:51 -Generating unique operation named: listUsingPUT_1
2019-05-15 21:27:51 -Generating unique operation named: listUsingPATCH_1
2019-05-15 21:27:51 -Generating unique operation named: listUsingDELETE_1
2019-05-15 21:27:51 -Generating unique operation named: listUsingOPTIONS_1
2019-05-15 21:27:51 -Generating unique operation named: listUsingTRACE_1
2019-05-15 21:27:51 -Generating unique operation named: countDDUsingGET_1
2019-05-15 21:27:51 -Generating unique operation named: exportDDUsingGET_1
2019-05-15 21:27:51 -Generating unique operation named: getCountYYUsingPOST_1
2019-05-15 21:27:51 -Generating unique operation named: getCountMMUsingPOST_1
2019-05-15 21:27:51 -Generating unique operation named: addUsingGET_14
2019-05-15 21:27:51 -Generating unique operation named: batchRemoveUsingPOST_2
2019-05-15 21:27:51 -Generating unique operation named: editUsingGET_15
2019-05-15 21:27:51 -Generating unique operation named: listUsingGET_17
2019-05-15 21:27:51 -Generating unique operation named: removeUsingPOST_26
2019-05-15 21:27:51 -Generating unique operation named: saveUsingPOST_15
2019-05-15 21:27:51 -Generating unique operation named: treeUsingGET_3
2019-05-15 21:27:51 -Generating unique operation named: treeViewUsingGET_1
2019-05-15 21:27:51 -Generating unique operation named: updateUsingPOST_15
2019-05-15 21:27:51 -Generating unique operation named: addUsingGET_15
2019-05-15 21:27:51 -Generating unique operation named: editUsingGET_16
2019-05-15 21:27:51 -Generating unique operation named: exprotExcelUsingGET_4
2019-05-15 21:27:51 -Generating unique operation named: listUsingGET_18
2019-05-15 21:27:51 -Generating unique operation named: removeUsingPOST_27
2019-05-15 21:27:51 -Generating unique operation named: removeUsingPOST_28
2019-05-15 21:27:51 -Generating unique operation named: saveUsingPOST_16
2019-05-15 21:27:51 -Generating unique operation named: updateUsingGET_10
2019-05-15 21:27:51 -Generating unique operation named: updateUsingHEAD_10
2019-05-15 21:27:51 -Generating unique operation named: updateUsingPOST_16
2019-05-15 21:27:51 -Generating unique operation named: updateUsingPUT_10
2019-05-15 21:27:51 -Generating unique operation named: updateUsingPATCH_10
2019-05-15 21:27:51 -Generating unique operation named: updateUsingDELETE_10
2019-05-15 21:27:51 -Generating unique operation named: updateUsingOPTIONS_10
2019-05-15 21:27:51 -Generating unique operation named: updateUsingTRACE_10
2019-05-15 21:27:51 -Generating unique operation named: exprotExcelUsingGET_5
2019-05-15 21:27:51 -Generating unique operation named: addUsingGET_16
2019-05-15 21:27:51 -Generating unique operation named: editUsingGET_17
2019-05-15 21:27:51 -Generating unique operation named: listUsingGET_19
2019-05-15 21:27:51 -Generating unique operation named: removeUsingPOST_29
2019-05-15 21:27:51 -Generating unique operation named: removeUsingPOST_30
2019-05-15 21:27:51 -Generating unique operation named: saveUsingPOST_17
2019-05-15 21:27:51 -Generating unique operation named: updateUsingGET_11
2019-05-15 21:27:51 -Generating unique operation named: updateUsingHEAD_11
2019-05-15 21:27:51 -Generating unique operation named: updateUsingPOST_17
2019-05-15 21:27:51 -Generating unique operation named: updateUsingPUT_11
2019-05-15 21:27:51 -Generating unique operation named: updateUsingPATCH_11
2019-05-15 21:27:51 -Generating unique operation named: updateUsingDELETE_11
2019-05-15 21:27:51 -Generating unique operation named: updateUsingOPTIONS_11
2019-05-15 21:27:51 -Generating unique operation named: updateUsingTRACE_11
2019-05-15 21:27:51 -Generating unique operation named: addUsingGET_17
2019-05-15 21:27:51 -Generating unique operation named: editUsingGET_18
2019-05-15 21:27:51 -Generating unique operation named: listUsingGET_20
2019-05-15 21:27:51 -Generating unique operation named: removeUsingPOST_31
2019-05-15 21:27:51 -Generating unique operation named: removeUsingPOST_32
2019-05-15 21:27:51 -Generating unique operation named: saveUsingPOST_18
2019-05-15 21:27:51 -Generating unique operation named: updateUsingGET_12
2019-05-15 21:27:51 -Generating unique operation named: updateUsingHEAD_12
2019-05-15 21:27:51 -Generating unique operation named: updateUsingPOST_18
2019-05-15 21:27:51 -Generating unique operation named: updateUsingPUT_12
2019-05-15 21:27:51 -Generating unique operation named: updateUsingPATCH_12
2019-05-15 21:27:51 -Generating unique operation named: updateUsingDELETE_12
2019-05-15 21:27:51 -Generating unique operation named: updateUsingOPTIONS_12
2019-05-15 21:27:51 -Generating unique operation named: updateUsingTRACE_12
2019-05-15 21:27:51 -Starting Quartz Scheduler now
2019-05-15 21:27:51 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED started.
2019-05-15 21:27:51 -Starting...
2019-05-15 21:27:51 -BrokerAvailabilityEvent[available=true, SimpleBrokerMessageHandler [DefaultSubscriptionRegistry[cache[0 destination(s)], registry[0 sessions]]]]
2019-05-15 21:27:51 -Started.
2019-05-15 21:27:51 -Starting ProtocolHandler ["http-nio-8081"]
2019-05-15 21:27:51 -Using a shared selector for servlet write/read
2019-05-15 21:27:51 -Tomcat started on port(s): 8081 (http) with context path ''
2019-05-15 21:27:51 -Started BootdoApplication in 23.452 seconds (JVM running for 24.188)
2019-05-15 21:27:51 -==>  Preparing: select `id`,`cron_expression`,`method_name`,`is_concurrent`,`description`,`update_by`,`bean_class`,`create_date`,`job_status`,`job_group`,`update_date`,`create_by`,`spring_bean`,`job_name` from sys_task order by id desc 
2019-05-15 21:27:51 -==> Parameters: 
2019-05-15 21:27:52 -<==      Total: 1
2019-05-15 21:28:15 -Initializing Spring FrameworkServlet 'dispatcherServlet'
2019-05-15 21:28:15 -FrameworkServlet 'dispatcherServlet': initialization started
2019-05-15 21:28:15 -FrameworkServlet 'dispatcherServlet': initialization completed in 59 ms
2019-05-15 21:28:15 -Enabling session validation scheduler...
2019-05-15 21:28:15 -请求地址 : http://localhost:8081/login;JSESSIONID=6d5da4fb-1f1b-4bc6-8aa2-421b2b94d903
2019-05-15 21:28:15 -HTTP METHOD : GET
2019-05-15 21:28:15 -CLASS_METHOD : com.bootdo.system.controller.LoginController.login
2019-05-15 21:28:15 -参数 : [{}]
2019-05-15 21:28:15 -耗时 : 4
2019-05-15 21:28:15 -返回值 : login
2019-05-15 21:28:16 -请求地址 : http://localhost:8081/getVerify
2019-05-15 21:28:16 -HTTP METHOD : GET
2019-05-15 21:28:16 -CLASS_METHOD : com.bootdo.system.controller.LoginController.getVerify
2019-05-15 21:28:16 -参数 : [org.apache.shiro.web.servlet.ShiroHttpServletRequest@6a3c32c7, org.apache.shiro.web.servlet.ShiroHttpServletResponse@64fbc1f0]
2019-05-15 21:28:17 -8015
2019-05-15 21:28:17 -耗时 : 567
2019-05-15 21:28:17 -返回值 : null
2019-05-15 21:28:23 -请求地址 : http://localhost:8081/login
2019-05-15 21:28:23 -HTTP METHOD : POST
2019-05-15 21:28:23 -CLASS_METHOD : com.bootdo.system.controller.LoginController.ajaxLogin
2019-05-15 21:28:23 -参数 : [admin, 111111, 8015, org.apache.shiro.web.servlet.ShiroHttpServletRequest@648e652e]
2019-05-15 21:28:23 -==>  Preparing: select `user_id`,`username`,`name`,`password`,`dept_id`,`email`,`mobile`,`status`,`user_id_create`,`gmt_create`,`gmt_modified`,`sex`,`birth`,`pic_id`,`live_address`,`hobby`,`province`,`city`,`district` from sys_user WHERE username = ? order by user_id desc 
2019-05-15 21:28:23 -==> Parameters: admin(String)
2019-05-15 21:28:23 -<==      Total: 1
2019-05-15 21:28:23 -耗时 : 120
2019-05-15 21:28:23 -返回值 : {msg=操作成功, code=0}
2019-05-15 21:28:23 -More than one TaskExecutor bean found within the context, and none is named 'taskExecutor'. Mark one of them as primary or name it 'taskExecutor' (possibly as an alias) in order to use it for async processing: [clientInboundChannelExecutor, clientOutboundChannelExecutor, brokerChannelExecutor, messageBrokerTaskScheduler]
2019-05-15 21:28:23 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-05-15 21:28:23 -==> Parameters: 1(Long), admin(String), 登录(String), 120(Integer), com.bootdo.system.controller.LoginController.ajaxLogin()(String), null, 127.0.0.1(String), 2019-05-15 21:28:23.51(Timestamp)
2019-05-15 21:28:23 -<==    Updates: 1
2019-05-15 21:28:23 -请求地址 : http://localhost:8081/index
2019-05-15 21:28:23 -HTTP METHOD : GET
2019-05-15 21:28:23 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2019-05-15 21:28:23 -参数 : [{}]
2019-05-15 21:28:23 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2019-05-15 21:28:23 -==> Parameters: 1(Long)
2019-05-15 21:28:23 -<==      Total: 49
2019-05-15 21:28:23 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2019-05-15 21:28:23 -==> Parameters: 138(Long)
2019-05-15 21:28:23 -<==      Total: 1
2019-05-15 21:28:23 -耗时 : 120
2019-05-15 21:28:23 -返回值 : index_v1
2019-05-15 21:28:23 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-05-15 21:28:23 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 120(Integer), com.bootdo.system.controller.LoginController.index()(String), {"menus":[{"attributes":{"icon":"fa fa-money","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-money","url":"/moneyList/moneyList"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"102","parentId":"106","text":"现金缴费"},{"attributes":{"icon":"fa fa-book","url":"/moneyLog/elecLog"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"107","parentId":"106","text":"缴费记录"}],"hasChildren":true,"hasParent":false,"id":"106","parentId":"0","text":"收费管理"},{"attributes":{"icon":"fa fa-lightbulb-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/elec/elec"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"121","parentId":"103","text":"电费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"elec/elecInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"122","parentId":"103","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"elec/elecUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"123","parentId":"103","text":"电表上传"},{"attributes":{"icon":"fa fa-cc","url":"/elec/elecPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"124","parentId":"103","text":"电价管理"}],"hasChildren":true,"hasParent":false,"id":"103","parentId":"0","text":"电费管理"},{"attributes":{"icon":"fa fa-tint","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/water/water"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"117","parentId":"105","text":"水费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"water/waterInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"118","parentId":"105","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"water/waterUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"119","parentId":"105","text":"水费生成"},{"attributes":{"icon":"fa fa-cc","url":"/water/waterPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"120","parentId":"105","text":"水价管理"}],"hasChildren":true,"hasParent":false,"id":"105","parentId":"0","text":"水费管理"},{"attributes":{"icon":"fa fa-fire","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/heat/heat"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"113","parentId":"104","text":"暖费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"heat/heatInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"114","parentId":"104","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"heat/heatUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"115","parentId":"104","text":"暖费生成"},{"attributes":{"icon":"","url":"/heat/heatPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"116","parentId":"104","text":"暖价管理"}],"hasChildren":true,"hasParent":false,"id":"104","parentId":"0","text":"暖费管理"},{"attributes":{"icon":"fa fa-vcard-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-bomb","url":"/print/print"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"149","parentId":"108","text":"票据记录"}],"hasChildren":true,"hasParent":false,"id":"108","parentId":"0","text":"票据管理"},{"attributes":{"icon":"fa fa-bar-chart","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-area-chart","url":"/chart/graph_echarts.html"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","text":"百度chart"},{"attributes":{"icon":"fa fa-sun-o","url":"charts/countDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"109","parentId":"97","text":"日统计报表"},{"attributes":{"icon":"fa fa-calendar","url":"charts/tableDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"161","parentId":"97","text":"日统计表格"},{"attributes":{"icon":"fa fa-registered","url":"charts/countMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"110","parentId":"97","text":"月统计报表"},{"attributes":{"icon":"fa fa-building-o","url":"charts/tableElecMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"162","parentId":"97","text":"月统计表格"},{"attributes":{"icon":"fa fa-support","url":"charts/countYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"111","parentId":"97","text":"年统计报表"},{"attributes":{"icon":"fa fa-book","url":"charts/tableElecYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"163","parentId":"97","text":"年统计表格"},{"attributes":{"icon":"fa fa-money","url":"charts/countOwe"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"155","parentId":"97","text":"欠费报表图"},{"attributes":{"icon":"fa fa-tachometer","url":"charts/countRun"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"112"(String), 127.0.0.1(String), 2019-05-15 21:28:23.781(Timestamp)
2019-05-15 21:28:23 -<==    Updates: 1
2019-05-15 21:28:23 -请求地址 : http://localhost:8081/main
2019-05-15 21:28:23 -HTTP METHOD : GET
2019-05-15 21:28:23 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-05-15 21:28:23 -参数 : []
2019-05-15 21:28:23 -耗时 : 0
2019-05-15 21:28:23 -返回值 : main
2019-05-15 21:28:24 -请求地址 : http://localhost:8081/oa/notify/message
2019-05-15 21:28:24 -HTTP METHOD : GET
2019-05-15 21:28:24 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2019-05-15 21:28:24 -参数 : []
2019-05-15 21:28:24 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2019-05-15 21:28:24 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2019-05-15 21:28:24 -<==      Total: 0
2019-05-15 21:28:24 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2019-05-15 21:28:24 -==> Parameters: 1(Long), 0(String)
2019-05-15 21:28:24 -<==      Total: 1
2019-05-15 21:28:24 -耗时 : 58
2019-05-15 21:28:24 -返回值 : com.bootdo.common.utils.PageUtils@418fc2d8
2019-05-15 21:28:24 -请求地址 : http://localhost:8081/main
2019-05-15 21:28:24 -HTTP METHOD : GET
2019-05-15 21:28:24 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-05-15 21:28:24 -参数 : []
2019-05-15 21:28:24 -耗时 : 1
2019-05-15 21:28:24 -返回值 : main
2019-05-15 21:28:27 -==>  Preparing: select distinct m.perms from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id = ur.role_id where ur.user_id = ? 
2019-05-15 21:28:27 -==> Parameters: 1(Long)
2019-05-15 21:28:27 -<==      Total: 93
2019-05-15 21:28:27 -请求地址 : http://localhost:8081/charts/countYY
2019-05-15 21:28:27 -HTTP METHOD : GET
2019-05-15 21:28:27 -CLASS_METHOD : com.bootdo.charts.controller.countYYController.countYY
2019-05-15 21:28:27 -参数 : []
2019-05-15 21:28:27 -耗时 : 1
2019-05-15 21:28:27 -返回值 : charts/countYY
2019-05-15 21:28:28 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-05-15 21:28:28 -HTTP METHOD : GET
2019-05-15 21:28:28 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-05-15 21:28:28 -参数 : [userType]
2019-05-15 21:28:28 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-05-15 21:28:28 -==> Parameters: userType(String)
2019-05-15 21:28:28 -<==      Total: 4
2019-05-15 21:28:28 -耗时 : 36
2019-05-15 21:28:28 -返回值 : [DictDO{id=145, name='银行转账', value='D', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=144, name='微信支付', value='C', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-05-15 21:28:32 -请求地址 : http://localhost:8081/charts/tableElecYY
2019-05-15 21:28:32 -HTTP METHOD : GET
2019-05-15 21:28:32 -CLASS_METHOD : com.bootdo.charts.controller.tableElecYYController.tableElecYY
2019-05-15 21:28:32 -参数 : []
2019-05-15 21:28:32 -耗时 : 12
2019-05-15 21:28:32 -返回值 : charts/tableElecYY
2019-05-15 21:28:32 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-05-15 21:28:32 -HTTP METHOD : GET
2019-05-15 21:28:32 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-05-15 21:28:32 -参数 : [userType]
2019-05-15 21:28:32 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-05-15 21:28:32 -==> Parameters: userType(String)
2019-05-15 21:28:32 -<==      Total: 4
2019-05-15 21:28:32 -耗时 : 6
2019-05-15 21:28:32 -返回值 : [DictDO{id=145, name='银行转账', value='D', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=144, name='微信支付', value='C', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-05-15 21:28:32 -请求地址 : http://localhost:8081/charts/tableWaterYY
2019-05-15 21:28:32 -HTTP METHOD : GET
2019-05-15 21:28:32 -CLASS_METHOD : com.bootdo.charts.controller.tableWaterYYController.tableWaterYY
2019-05-15 21:28:32 -参数 : []
2019-05-15 21:28:32 -耗时 : 8
2019-05-15 21:28:32 -返回值 : charts/tableWaterYY
2019-05-15 21:28:33 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-05-15 21:28:33 -HTTP METHOD : GET
2019-05-15 21:28:33 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-05-15 21:28:33 -参数 : [userType]
2019-05-15 21:28:33 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-05-15 21:28:33 -==> Parameters: userType(String)
2019-05-15 21:28:33 -<==      Total: 4
2019-05-15 21:28:33 -耗时 : 6
2019-05-15 21:28:33 -返回值 : [DictDO{id=145, name='银行转账', value='D', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=144, name='微信支付', value='C', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-05-15 21:28:35 -请求地址 : http://localhost:8081/system/sysDept/treeView
2019-05-15 21:28:35 -HTTP METHOD : GET
2019-05-15 21:28:35 -CLASS_METHOD : com.bootdo.system.controller.DeptController.treeView
2019-05-15 21:28:35 -参数 : []
2019-05-15 21:28:35 -耗时 : 0
2019-05-15 21:28:35 -返回值 : system/dept/deptTree
2019-05-15 21:28:36 -请求地址 : http://localhost:8081/system/sysDept/tree
2019-05-15 21:28:36 -HTTP METHOD : GET
2019-05-15 21:28:36 -CLASS_METHOD : com.bootdo.system.controller.DeptController.tree
2019-05-15 21:28:36 -参数 : []
2019-05-15 21:28:36 -==>  Preparing: select `dept_id`,`parent_id`,`name`,`order_num`,`del_flag` from sys_dept order by dept_id desc 
2019-05-15 21:28:36 -==> Parameters: 
2019-05-15 21:28:36 -<==      Total: 3
2019-05-15 21:28:36 -耗时 : 24
2019-05-15 21:28:36 -返回值 : {"checked":false,"children":[{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"3","parentId":"1","state":{"opened":true},"text":"牙星"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"2","parentId":"1","state":{"opened":true},"text":"五九"}],"hasChildren":true,"hasParent":false,"id":"1","parentId":"0","state":{"opened":true},"text":"总公司"}
2019-05-15 21:28:37 -请求地址 : http://localhost:8081/charts/tableWaterYY/tableWaterYY
2019-05-15 21:28:37 -HTTP METHOD : POST
2019-05-15 21:28:37 -CLASS_METHOD : com.bootdo.charts.controller.tableWaterYYController.tableWaterYY
2019-05-15 21:28:37 -参数 : [com.bootdo.water.vo.WaterVo@2b3432ff, com.bootdo.moneyLog.vo.WaterLogVo@63b3bd01]
2019-05-15 21:28:37 -==>  Preparing: select COUNT(*) from water WHERE `water_sum` >= 0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 21:28:37 -==> Parameters: 2018-12(String), 1(String), 2(String)
2019-05-15 21:28:37 -<==      Total: 1
2019-05-15 21:28:37 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE `water_sum` >= 0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 21:28:37 -==> Parameters: 2018-12(String), 1(String), 2(String)
2019-05-15 21:28:37 -<==      Total: 1
2019-05-15 21:28:37 -==>  Preparing: select COUNT(*) from water WHERE water_sum <0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 21:28:37 -==> Parameters: 2018-12(String), 1(String), 2(String)
2019-05-15 21:28:37 -<==      Total: 1
2019-05-15 21:28:37 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE water_sum <0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 21:28:37 -==> Parameters: 2018-12(String), 1(String), 2(String)
2019-05-15 21:28:37 -<==      Total: 1
2019-05-15 21:28:37 -==>  Preparing: select COUNT(*),ifnull(SUM(water_cost),0) from water WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 21:28:37 -==> Parameters: 2019(String), 1(String), 2(String)
2019-05-15 21:28:37 -<==      Total: 1
2019-05-15 21:28:37 -==>  Preparing: select ifnull(SUM(water_cost),0) from water WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 21:28:37 -==> Parameters: 2019(String), 1(String), 2(String)
2019-05-15 21:28:37 -<==      Total: 1
2019-05-15 21:28:37 -==>  Preparing: select COUNT(*) from water_log WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 21:28:37 -==> Parameters: 2019(String), 1(String), 2(String)
2019-05-15 21:28:37 -<==      Total: 1
2019-05-15 21:28:37 -==>  Preparing: select ifnull(SUM(water_money),0) from water_log WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 21:28:37 -==> Parameters: 2019(String), 1(String), 2(String)
2019-05-15 21:28:37 -<==      Total: 1
2019-05-15 21:28:37 -==>  Preparing: select COUNT(*) from water WHERE `water_sum` >= 0 and create_time = (select MAX(create_time) from water where DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ?) and water_type = ? and user_org = ? 
2019-05-15 21:28:37 -==> Parameters: 2019(String), 1(String), 2(String)
2019-05-15 21:28:37 -<==      Total: 1
2019-05-15 21:28:37 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE `water_sum` >= 0 and create_time = (select MAX(create_time) from water where DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ?) and water_type = ? and user_org = ? 
2019-05-15 21:28:37 -==> Parameters: 2019(String), 1(String), 2(String)
2019-05-15 21:28:37 -<==      Total: 1
2019-05-15 21:28:37 -==>  Preparing: select COUNT(*) from water WHERE water_sum <0 and create_time = (select MAX(create_time) from water where DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ?) and water_type = ? and user_org = ? 
2019-05-15 21:28:37 -==> Parameters: 2019(String), 1(String), 2(String)
2019-05-15 21:28:37 -<==      Total: 1
2019-05-15 21:28:37 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE water_sum <0 and create_time = (select MAX(create_time) from water where DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ?) and water_type = ? and user_org = ? 
2019-05-15 21:28:37 -==> Parameters: 2019(String), 1(String), 2(String)
2019-05-15 21:28:37 -<==      Total: 1
2019-05-15 21:28:37 -==>  Preparing: select COUNT(*) from water WHERE `water_sum` >= 0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 21:28:37 -==> Parameters: 2018-12(String), 2(String), 2(String)
2019-05-15 21:28:37 -<==      Total: 1
2019-05-15 21:28:37 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE `water_sum` >= 0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 21:28:37 -==> Parameters: 2018-12(String), 2(String), 2(String)
2019-05-15 21:28:37 -<==      Total: 1
2019-05-15 21:28:37 -==>  Preparing: select COUNT(*) from water WHERE water_sum <0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 21:28:37 -==> Parameters: 2018-12(String), 2(String), 2(String)
2019-05-15 21:28:37 -<==      Total: 1
2019-05-15 21:28:37 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE water_sum <0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 21:28:37 -==> Parameters: 2018-12(String), 2(String), 2(String)
2019-05-15 21:28:37 -<==      Total: 1
2019-05-15 21:28:37 -==>  Preparing: select COUNT(*),ifnull(SUM(water_cost),0) from water WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 21:28:37 -==> Parameters: 2019(String), 2(String), 2(String)
2019-05-15 21:28:37 -<==      Total: 1
2019-05-15 21:28:37 -==>  Preparing: select ifnull(SUM(water_cost),0) from water WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 21:28:37 -==> Parameters: 2019(String), 2(String), 2(String)
2019-05-15 21:28:37 -<==      Total: 1
2019-05-15 21:28:37 -==>  Preparing: select COUNT(*) from water_log WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 21:28:37 -==> Parameters: 2019(String), 2(String), 2(String)
2019-05-15 21:28:37 -<==      Total: 1
2019-05-15 21:28:37 -==>  Preparing: select ifnull(SUM(water_money),0) from water_log WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 21:28:37 -==> Parameters: 2019(String), 2(String), 2(String)
2019-05-15 21:28:37 -<==      Total: 1
2019-05-15 21:28:37 -==>  Preparing: select COUNT(*) from water WHERE `water_sum` >= 0 and create_time = (select MAX(create_time) from water where DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ?) and water_type = ? and user_org = ? 
2019-05-15 21:28:37 -==> Parameters: 2019(String), 2(String), 2(String)
2019-05-15 21:28:37 -<==      Total: 1
2019-05-15 21:28:37 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE `water_sum` >= 0 and create_time = (select MAX(create_time) from water where DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ?) and water_type = ? and user_org = ? 
2019-05-15 21:28:37 -==> Parameters: 2019(String), 2(String), 2(String)
2019-05-15 21:28:37 -<==      Total: 1
2019-05-15 21:28:37 -==>  Preparing: select COUNT(*) from water WHERE water_sum <0 and create_time = (select MAX(create_time) from water where DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ?) and water_type = ? and user_org = ? 
2019-05-15 21:28:37 -==> Parameters: 2019(String), 2(String), 2(String)
2019-05-15 21:28:37 -<==      Total: 1
2019-05-15 21:28:37 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE water_sum <0 and create_time = (select MAX(create_time) from water where DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ?) and water_type = ? and user_org = ? 
2019-05-15 21:28:37 -==> Parameters: 2019(String), 2(String), 2(String)
2019-05-15 21:28:37 -<==      Total: 1
2019-05-15 21:28:37 -==>  Preparing: select COUNT(*) from water WHERE `water_sum` >= 0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 21:28:37 -==> Parameters: 2018-12(String), 3(String), 2(String)
2019-05-15 21:28:38 -<==      Total: 1
2019-05-15 21:28:38 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE `water_sum` >= 0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 21:28:38 -==> Parameters: 2018-12(String), 3(String), 2(String)
2019-05-15 21:28:38 -<==      Total: 1
2019-05-15 21:28:38 -==>  Preparing: select COUNT(*) from water WHERE water_sum <0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 21:28:38 -==> Parameters: 2018-12(String), 3(String), 2(String)
2019-05-15 21:28:38 -<==      Total: 1
2019-05-15 21:28:38 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE water_sum <0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 21:28:38 -==> Parameters: 2018-12(String), 3(String), 2(String)
2019-05-15 21:28:38 -<==      Total: 1
2019-05-15 21:28:38 -==>  Preparing: select COUNT(*),ifnull(SUM(water_cost),0) from water WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 21:28:38 -==> Parameters: 2019(String), 3(String), 2(String)
2019-05-15 21:28:38 -<==      Total: 1
2019-05-15 21:28:38 -==>  Preparing: select ifnull(SUM(water_cost),0) from water WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 21:28:38 -==> Parameters: 2019(String), 3(String), 2(String)
2019-05-15 21:28:38 -<==      Total: 1
2019-05-15 21:28:38 -==>  Preparing: select COUNT(*) from water_log WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 21:28:38 -==> Parameters: 2019(String), 3(String), 2(String)
2019-05-15 21:28:38 -<==      Total: 1
2019-05-15 21:28:38 -==>  Preparing: select ifnull(SUM(water_money),0) from water_log WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 21:28:38 -==> Parameters: 2019(String), 3(String), 2(String)
2019-05-15 21:28:38 -<==      Total: 1
2019-05-15 21:28:38 -==>  Preparing: select COUNT(*) from water WHERE `water_sum` >= 0 and create_time = (select MAX(create_time) from water where DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ?) and water_type = ? and user_org = ? 
2019-05-15 21:28:38 -==> Parameters: 2019(String), 3(String), 2(String)
2019-05-15 21:28:38 -<==      Total: 1
2019-05-15 21:28:38 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE `water_sum` >= 0 and create_time = (select MAX(create_time) from water where DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ?) and water_type = ? and user_org = ? 
2019-05-15 21:28:38 -==> Parameters: 2019(String), 3(String), 2(String)
2019-05-15 21:28:38 -<==      Total: 1
2019-05-15 21:28:38 -==>  Preparing: select COUNT(*) from water WHERE water_sum <0 and create_time = (select MAX(create_time) from water where DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ?) and water_type = ? and user_org = ? 
2019-05-15 21:28:38 -==> Parameters: 2019(String), 3(String), 2(String)
2019-05-15 21:28:38 -<==      Total: 1
2019-05-15 21:28:38 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE water_sum <0 and create_time = (select MAX(create_time) from water where DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ?) and water_type = ? and user_org = ? 
2019-05-15 21:28:38 -==> Parameters: 2019(String), 3(String), 2(String)
2019-05-15 21:28:38 -<==      Total: 1
2019-05-15 21:28:38 -==>  Preparing: select COUNT(*) from water WHERE `water_sum` >= 0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 21:28:38 -==> Parameters: 2018-12(String), 4(String), 2(String)
2019-05-15 21:28:38 -<==      Total: 1
2019-05-15 21:28:38 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE `water_sum` >= 0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 21:28:38 -==> Parameters: 2018-12(String), 4(String), 2(String)
2019-05-15 21:28:38 -<==      Total: 1
2019-05-15 21:28:38 -==>  Preparing: select COUNT(*) from water WHERE water_sum <0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 21:28:38 -==> Parameters: 2018-12(String), 4(String), 2(String)
2019-05-15 21:28:38 -<==      Total: 1
2019-05-15 21:28:38 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE water_sum <0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 21:28:38 -==> Parameters: 2018-12(String), 4(String), 2(String)
2019-05-15 21:28:38 -<==      Total: 1
2019-05-15 21:28:38 -==>  Preparing: select COUNT(*),ifnull(SUM(water_cost),0) from water WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 21:28:38 -==> Parameters: 2019(String), 4(String), 2(String)
2019-05-15 21:28:38 -<==      Total: 1
2019-05-15 21:28:38 -==>  Preparing: select ifnull(SUM(water_cost),0) from water WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 21:28:38 -==> Parameters: 2019(String), 4(String), 2(String)
2019-05-15 21:28:38 -<==      Total: 1
2019-05-15 21:28:38 -==>  Preparing: select COUNT(*) from water_log WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 21:28:38 -==> Parameters: 2019(String), 4(String), 2(String)
2019-05-15 21:28:38 -<==      Total: 1
2019-05-15 21:28:38 -==>  Preparing: select ifnull(SUM(water_money),0) from water_log WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 21:28:38 -==> Parameters: 2019(String), 4(String), 2(String)
2019-05-15 21:28:38 -<==      Total: 1
2019-05-15 21:28:38 -==>  Preparing: select COUNT(*) from water WHERE `water_sum` >= 0 and create_time = (select MAX(create_time) from water where DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ?) and water_type = ? and user_org = ? 
2019-05-15 21:28:38 -==> Parameters: 2019(String), 4(String), 2(String)
2019-05-15 21:28:38 -<==      Total: 1
2019-05-15 21:28:38 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE `water_sum` >= 0 and create_time = (select MAX(create_time) from water where DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ?) and water_type = ? and user_org = ? 
2019-05-15 21:28:38 -==> Parameters: 2019(String), 4(String), 2(String)
2019-05-15 21:28:38 -<==      Total: 1
2019-05-15 21:28:38 -==>  Preparing: select COUNT(*) from water WHERE water_sum <0 and create_time = (select MAX(create_time) from water where DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ?) and water_type = ? and user_org = ? 
2019-05-15 21:28:38 -==> Parameters: 2019(String), 4(String), 2(String)
2019-05-15 21:28:38 -<==      Total: 1
2019-05-15 21:28:38 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE water_sum <0 and create_time = (select MAX(create_time) from water where DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ?) and water_type = ? and user_org = ? 
2019-05-15 21:28:38 -==> Parameters: 2019(String), 4(String), 2(String)
2019-05-15 21:28:38 -<==      Total: 1
2019-05-15 21:28:38 -==>  Preparing: select m_water,s1_water,s2_water,s3_water,water_org from water_price 
2019-05-15 21:28:38 -==> Parameters: 
2019-05-15 21:28:38 -<==      Total: 2
2019-05-15 21:28:38 -耗时 : 222
2019-05-15 21:28:38 -返回值 : {S3TotalhuNew=0, S1WaterCostYYCount =1, S2PreWaterCountYYOld=0, S1OweWaterCountYYNew=0, S2PreWaterCountYYNew=0, S1OweWaterSumYYNew=0, type=2, S3PreWaterSumYYNew=0, TotalPreyuNew=26, MWaterLogYYSum=151, S1OweWaterCountYYOld=1, S1OweWaterSumYYOld=-10, TotalCostyu=40, S3PreWaterSumYYOld=0, MPreWaterCountYYOld=1, S2WaterCostYYCount =0, S1WaterPrice=10, S1TotalyuOld=-10, TotalPreyuOld=6, S2WaterLogYYCount=1, S3TotalhuOld=0, MPreWaterCountYYNew=2, TotalOwehuNew=1, MWaterCostYYCount =5, S2WaterLogYYSum=60, TotalCosthu=6, S1WaterLogYYCount=2, S3WaterLogYYSum=60, S2OweWaterSumYYOld=0, TotalLogyu=172, MPreWaterSumYYOld=6, S2TotalhuNew=0, MTotalyuOld=6, MPreWaterSumYYNew=25, MWaterPrice=6, S3PreWaterCountYYNew=0, MTotalhuNew=3, MTotalyuNew=16, TotalLoghu=4, S3PreWaterCountYYOld=0, S2TotalhuOld=0, S2TotalyuOld=0, S2OweWaterSumYYNew=0, TotalOweyuOld=-10, S3OweWaterCountYYOld=0, S2TotalyuNew=0, S3WaterLogYYCount=1, S1TotalhuNew=1, MTotalhuOld=1, S3WaterCostYYSum =0, S3OweWaterSumYYOld=0, S1TotalhuOld=1, S2PreWaterSumYYNew=0, TotalPrehuNew=3, MOweWaterSumYYNew=-9, S3OweWaterSumYYNew=0, S2PreWaterSumYYOld=0, TotalOweyuNew=-9, S3TotalyuOld=0, MWaterLogYYCount=2, S3OweWaterCountYYNew=0, S3TotalyuNew=0, TotalPrehuOld=1, S3WaterCostYYCount =0, S1PreWaterCountYYNew=1, S1WaterLogYYSum=21, TotalOwehuOld=1, PriceTotal=16, S2OweWaterCountYYNew=0, S1PreWaterCountYYOld=0, S1WaterCostYYSum =10, MOweWaterSumYYOld=0, S1TotalyuNew=1, MOweWaterCountYYNew=1, MOweWaterCountYYOld=0, S1PreWaterSumYYNew=1, TotalAllhuNew=4, TotalAllyuNew=17, S2WaterCostYYSum =0, TotalAllhuOld=2, S2OweWaterCountYYOld=0, MWaterCostYYSum =30, S1PreWaterSumYYOld=0, TotalAllyuOld=-4}
2019-05-15 21:28:46 -WebSocketSession[1 current WS(1)-HttpStream(0)-HttpPoll(0), 1 total, 0 closed abnormally (0 connect failure, 0 send limit, 0 transport error)], stompSubProtocol[processed CONNECT(1)-CONNECTED(1)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 8, active threads = 0, queued tasks = 0, completed tasks = 9], outboundChannelpool size = 1, active threads = 0, queued tasks = 0, completed tasks = 1], sockJsScheduler[pool size = 4, active threads = 1, queued tasks = 2, completed tasks = 5]
2019-05-15 21:28:51 -请求地址 : http://localhost:8081/system/sysDept/treeView
2019-05-15 21:28:51 -HTTP METHOD : GET
2019-05-15 21:28:51 -CLASS_METHOD : com.bootdo.system.controller.DeptController.treeView
2019-05-15 21:28:51 -参数 : []
2019-05-15 21:28:51 -耗时 : 1
2019-05-15 21:28:51 -返回值 : system/dept/deptTree
2019-05-15 21:28:51 -请求地址 : http://localhost:8081/system/sysDept/tree
2019-05-15 21:28:51 -HTTP METHOD : GET
2019-05-15 21:28:51 -CLASS_METHOD : com.bootdo.system.controller.DeptController.tree
2019-05-15 21:28:51 -参数 : []
2019-05-15 21:28:51 -==>  Preparing: select `dept_id`,`parent_id`,`name`,`order_num`,`del_flag` from sys_dept order by dept_id desc 
2019-05-15 21:28:51 -==> Parameters: 
2019-05-15 21:28:51 -<==      Total: 3
2019-05-15 21:28:51 -耗时 : 4
2019-05-15 21:28:51 -返回值 : {"checked":false,"children":[{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"3","parentId":"1","state":{"opened":true},"text":"牙星"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"2","parentId":"1","state":{"opened":true},"text":"五九"}],"hasChildren":true,"hasParent":false,"id":"1","parentId":"0","state":{"opened":true},"text":"总公司"}
2019-05-15 21:28:53 -请求地址 : http://localhost:8081/charts/tableWaterYY/tableWaterYY
2019-05-15 21:28:53 -HTTP METHOD : POST
2019-05-15 21:28:53 -CLASS_METHOD : com.bootdo.charts.controller.tableWaterYYController.tableWaterYY
2019-05-15 21:28:53 -参数 : [com.bootdo.water.vo.WaterVo@508e77b1, com.bootdo.moneyLog.vo.WaterLogVo@42e1b393]
2019-05-15 21:28:53 -==>  Preparing: select COUNT(*) from water WHERE `water_sum` >= 0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 21:28:53 -==> Parameters: 2018-12(String), 1(String), 3(String)
2019-05-15 21:28:53 -<==      Total: 1
2019-05-15 21:28:53 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE `water_sum` >= 0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 21:28:53 -==> Parameters: 2018-12(String), 1(String), 3(String)
2019-05-15 21:28:53 -<==      Total: 1
2019-05-15 21:28:53 -==>  Preparing: select COUNT(*) from water WHERE water_sum <0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 21:28:53 -==> Parameters: 2018-12(String), 1(String), 3(String)
2019-05-15 21:28:53 -<==      Total: 1
2019-05-15 21:28:53 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE water_sum <0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 21:28:53 -==> Parameters: 2018-12(String), 1(String), 3(String)
2019-05-15 21:28:53 -<==      Total: 1
2019-05-15 21:28:53 -==>  Preparing: select COUNT(*),ifnull(SUM(water_cost),0) from water WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 21:28:53 -==> Parameters: 2019(String), 1(String), 3(String)
2019-05-15 21:28:53 -<==      Total: 1
2019-05-15 21:28:53 -==>  Preparing: select ifnull(SUM(water_cost),0) from water WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 21:28:53 -==> Parameters: 2019(String), 1(String), 3(String)
2019-05-15 21:28:53 -<==      Total: 1
2019-05-15 21:28:53 -==>  Preparing: select COUNT(*) from water_log WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 21:28:53 -==> Parameters: 2019(String), 1(String), 3(String)
2019-05-15 21:28:53 -<==      Total: 1
2019-05-15 21:28:53 -==>  Preparing: select ifnull(SUM(water_money),0) from water_log WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 21:28:53 -==> Parameters: 2019(String), 1(String), 3(String)
2019-05-15 21:28:53 -<==      Total: 1
2019-05-15 21:28:53 -==>  Preparing: select COUNT(*) from water WHERE `water_sum` >= 0 and create_time = (select MAX(create_time) from water where DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ?) and water_type = ? and user_org = ? 
2019-05-15 21:28:53 -==> Parameters: 2019(String), 1(String), 3(String)
2019-05-15 21:28:53 -<==      Total: 1
2019-05-15 21:28:53 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE `water_sum` >= 0 and create_time = (select MAX(create_time) from water where DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ?) and water_type = ? and user_org = ? 
2019-05-15 21:28:53 -==> Parameters: 2019(String), 1(String), 3(String)
2019-05-15 21:28:53 -<==      Total: 1
2019-05-15 21:28:53 -==>  Preparing: select COUNT(*) from water WHERE water_sum <0 and create_time = (select MAX(create_time) from water where DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ?) and water_type = ? and user_org = ? 
2019-05-15 21:28:53 -==> Parameters: 2019(String), 1(String), 3(String)
2019-05-15 21:28:53 -<==      Total: 1
2019-05-15 21:28:53 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE water_sum <0 and create_time = (select MAX(create_time) from water where DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ?) and water_type = ? and user_org = ? 
2019-05-15 21:28:53 -==> Parameters: 2019(String), 1(String), 3(String)
2019-05-15 21:28:53 -<==      Total: 1
2019-05-15 21:28:53 -==>  Preparing: select COUNT(*) from water WHERE `water_sum` >= 0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 21:28:53 -==> Parameters: 2018-12(String), 2(String), 3(String)
2019-05-15 21:28:53 -<==      Total: 1
2019-05-15 21:28:53 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE `water_sum` >= 0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 21:28:53 -==> Parameters: 2018-12(String), 2(String), 3(String)
2019-05-15 21:28:53 -<==      Total: 1
2019-05-15 21:28:53 -==>  Preparing: select COUNT(*) from water WHERE water_sum <0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 21:28:53 -==> Parameters: 2018-12(String), 2(String), 3(String)
2019-05-15 21:28:53 -<==      Total: 1
2019-05-15 21:28:53 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE water_sum <0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 21:28:53 -==> Parameters: 2018-12(String), 2(String), 3(String)
2019-05-15 21:28:53 -<==      Total: 1
2019-05-15 21:28:53 -==>  Preparing: select COUNT(*),ifnull(SUM(water_cost),0) from water WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 21:28:53 -==> Parameters: 2019(String), 2(String), 3(String)
2019-05-15 21:28:53 -<==      Total: 1
2019-05-15 21:28:53 -==>  Preparing: select ifnull(SUM(water_cost),0) from water WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 21:28:53 -==> Parameters: 2019(String), 2(String), 3(String)
2019-05-15 21:28:53 -<==      Total: 1
2019-05-15 21:28:53 -==>  Preparing: select COUNT(*) from water_log WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 21:28:53 -==> Parameters: 2019(String), 2(String), 3(String)
2019-05-15 21:28:53 -<==      Total: 1
2019-05-15 21:28:53 -==>  Preparing: select ifnull(SUM(water_money),0) from water_log WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 21:28:53 -==> Parameters: 2019(String), 2(String), 3(String)
2019-05-15 21:28:53 -<==      Total: 1
2019-05-15 21:28:53 -==>  Preparing: select COUNT(*) from water WHERE `water_sum` >= 0 and create_time = (select MAX(create_time) from water where DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ?) and water_type = ? and user_org = ? 
2019-05-15 21:28:53 -==> Parameters: 2019(String), 2(String), 3(String)
2019-05-15 21:28:53 -<==      Total: 1
2019-05-15 21:28:53 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE `water_sum` >= 0 and create_time = (select MAX(create_time) from water where DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ?) and water_type = ? and user_org = ? 
2019-05-15 21:28:53 -==> Parameters: 2019(String), 2(String), 3(String)
2019-05-15 21:28:53 -<==      Total: 1
2019-05-15 21:28:53 -==>  Preparing: select COUNT(*) from water WHERE water_sum <0 and create_time = (select MAX(create_time) from water where DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ?) and water_type = ? and user_org = ? 
2019-05-15 21:28:53 -==> Parameters: 2019(String), 2(String), 3(String)
2019-05-15 21:28:53 -<==      Total: 1
2019-05-15 21:28:53 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE water_sum <0 and create_time = (select MAX(create_time) from water where DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ?) and water_type = ? and user_org = ? 
2019-05-15 21:28:53 -==> Parameters: 2019(String), 2(String), 3(String)
2019-05-15 21:28:53 -<==      Total: 1
2019-05-15 21:28:53 -==>  Preparing: select COUNT(*) from water WHERE `water_sum` >= 0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 21:28:53 -==> Parameters: 2018-12(String), 3(String), 3(String)
2019-05-15 21:28:53 -<==      Total: 1
2019-05-15 21:28:53 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE `water_sum` >= 0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 21:28:53 -==> Parameters: 2018-12(String), 3(String), 3(String)
2019-05-15 21:28:53 -<==      Total: 1
2019-05-15 21:28:53 -==>  Preparing: select COUNT(*) from water WHERE water_sum <0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 21:28:53 -==> Parameters: 2018-12(String), 3(String), 3(String)
2019-05-15 21:28:53 -<==      Total: 1
2019-05-15 21:28:53 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE water_sum <0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 21:28:53 -==> Parameters: 2018-12(String), 3(String), 3(String)
2019-05-15 21:28:53 -<==      Total: 1
2019-05-15 21:28:53 -==>  Preparing: select COUNT(*),ifnull(SUM(water_cost),0) from water WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 21:28:53 -==> Parameters: 2019(String), 3(String), 3(String)
2019-05-15 21:28:53 -<==      Total: 1
2019-05-15 21:28:53 -==>  Preparing: select ifnull(SUM(water_cost),0) from water WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 21:28:53 -==> Parameters: 2019(String), 3(String), 3(String)
2019-05-15 21:28:53 -<==      Total: 1
2019-05-15 21:28:53 -==>  Preparing: select COUNT(*) from water_log WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 21:28:53 -==> Parameters: 2019(String), 3(String), 3(String)
2019-05-15 21:28:53 -<==      Total: 1
2019-05-15 21:28:53 -==>  Preparing: select ifnull(SUM(water_money),0) from water_log WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 21:28:53 -==> Parameters: 2019(String), 3(String), 3(String)
2019-05-15 21:28:53 -<==      Total: 1
2019-05-15 21:28:53 -==>  Preparing: select COUNT(*) from water WHERE `water_sum` >= 0 and create_time = (select MAX(create_time) from water where DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ?) and water_type = ? and user_org = ? 
2019-05-15 21:28:53 -==> Parameters: 2019(String), 3(String), 3(String)
2019-05-15 21:28:53 -<==      Total: 1
2019-05-15 21:28:53 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE `water_sum` >= 0 and create_time = (select MAX(create_time) from water where DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ?) and water_type = ? and user_org = ? 
2019-05-15 21:28:53 -==> Parameters: 2019(String), 3(String), 3(String)
2019-05-15 21:28:53 -<==      Total: 1
2019-05-15 21:28:53 -==>  Preparing: select COUNT(*) from water WHERE water_sum <0 and create_time = (select MAX(create_time) from water where DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ?) and water_type = ? and user_org = ? 
2019-05-15 21:28:53 -==> Parameters: 2019(String), 3(String), 3(String)
2019-05-15 21:28:53 -<==      Total: 1
2019-05-15 21:28:53 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE water_sum <0 and create_time = (select MAX(create_time) from water where DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ?) and water_type = ? and user_org = ? 
2019-05-15 21:28:53 -==> Parameters: 2019(String), 3(String), 3(String)
2019-05-15 21:28:53 -<==      Total: 1
2019-05-15 21:28:53 -==>  Preparing: select COUNT(*) from water WHERE `water_sum` >= 0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 21:28:53 -==> Parameters: 2018-12(String), 4(String), 3(String)
2019-05-15 21:28:53 -<==      Total: 1
2019-05-15 21:28:53 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE `water_sum` >= 0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 21:28:53 -==> Parameters: 2018-12(String), 4(String), 3(String)
2019-05-15 21:28:53 -<==      Total: 1
2019-05-15 21:28:53 -==>  Preparing: select COUNT(*) from water WHERE water_sum <0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 21:28:53 -==> Parameters: 2018-12(String), 4(String), 3(String)
2019-05-15 21:28:53 -<==      Total: 1
2019-05-15 21:28:53 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE water_sum <0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 21:28:53 -==> Parameters: 2018-12(String), 4(String), 3(String)
2019-05-15 21:28:53 -<==      Total: 1
2019-05-15 21:28:53 -==>  Preparing: select COUNT(*),ifnull(SUM(water_cost),0) from water WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 21:28:53 -==> Parameters: 2019(String), 4(String), 3(String)
2019-05-15 21:28:53 -<==      Total: 1
2019-05-15 21:28:53 -==>  Preparing: select ifnull(SUM(water_cost),0) from water WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 21:28:53 -==> Parameters: 2019(String), 4(String), 3(String)
2019-05-15 21:28:53 -<==      Total: 1
2019-05-15 21:28:53 -==>  Preparing: select COUNT(*) from water_log WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 21:28:53 -==> Parameters: 2019(String), 4(String), 3(String)
2019-05-15 21:28:53 -<==      Total: 1
2019-05-15 21:28:53 -==>  Preparing: select ifnull(SUM(water_money),0) from water_log WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 21:28:53 -==> Parameters: 2019(String), 4(String), 3(String)
2019-05-15 21:28:53 -<==      Total: 1
2019-05-15 21:28:53 -==>  Preparing: select COUNT(*) from water WHERE `water_sum` >= 0 and create_time = (select MAX(create_time) from water where DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ?) and water_type = ? and user_org = ? 
2019-05-15 21:28:53 -==> Parameters: 2019(String), 4(String), 3(String)
2019-05-15 21:28:53 -<==      Total: 1
2019-05-15 21:28:53 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE `water_sum` >= 0 and create_time = (select MAX(create_time) from water where DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ?) and water_type = ? and user_org = ? 
2019-05-15 21:28:53 -==> Parameters: 2019(String), 4(String), 3(String)
2019-05-15 21:28:53 -<==      Total: 1
2019-05-15 21:28:53 -==>  Preparing: select COUNT(*) from water WHERE water_sum <0 and create_time = (select MAX(create_time) from water where DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ?) and water_type = ? and user_org = ? 
2019-05-15 21:28:53 -==> Parameters: 2019(String), 4(String), 3(String)
2019-05-15 21:28:53 -<==      Total: 1
2019-05-15 21:28:53 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE water_sum <0 and create_time = (select MAX(create_time) from water where DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ?) and water_type = ? and user_org = ? 
2019-05-15 21:28:53 -==> Parameters: 2019(String), 4(String), 3(String)
2019-05-15 21:28:53 -<==      Total: 1
2019-05-15 21:28:53 -==>  Preparing: select m_water,s1_water,s2_water,s3_water,water_org from water_price 
2019-05-15 21:28:53 -==> Parameters: 
2019-05-15 21:28:53 -<==      Total: 2
2019-05-15 21:28:53 -耗时 : 117
2019-05-15 21:28:53 -返回值 : {S3TotalhuNew=0, S1WaterCostYYCount =0, S2PreWaterCountYYOld=0, S1OweWaterCountYYNew=0, S2PreWaterCountYYNew=0, S1OweWaterSumYYNew=0, type=3, S3PreWaterSumYYNew=0, TotalPreyuNew=0, MWaterLogYYSum=0, S1OweWaterCountYYOld=0, S1OweWaterSumYYOld=0, TotalCostyu=0, S3PreWaterSumYYOld=0, MPreWaterCountYYOld=0, S2WaterCostYYCount =0, S1WaterPrice=10, S1TotalyuOld=0, TotalPreyuOld=0, S2WaterLogYYCount=0, S3TotalhuOld=0, MPreWaterCountYYNew=0, TotalOwehuNew=0, MWaterCostYYCount =0, S2WaterLogYYSum=0, TotalCosthu=0, S1WaterLogYYCount=0, S3WaterLogYYSum=0, S2OweWaterSumYYOld=0, TotalLogyu=0, MPreWaterSumYYOld=0, S2TotalhuNew=0, MTotalyuOld=0, MPreWaterSumYYNew=0, MWaterPrice=5, S3PreWaterCountYYNew=0, MTotalhuNew=0, MTotalyuNew=0, TotalLoghu=0, S2WaterPrice=20, S3PreWaterCountYYOld=0, S2TotalhuOld=0, S2TotalyuOld=0, S2OweWaterSumYYNew=0, TotalOweyuOld=0, S3OweWaterCountYYOld=0, S2TotalyuNew=0, S3WaterLogYYCount=0, S1TotalhuNew=0, MTotalhuOld=0, S3WaterCostYYSum =0, S3OweWaterSumYYOld=0, S1TotalhuOld=0, S2PreWaterSumYYNew=0, TotalPrehuNew=0, MOweWaterSumYYNew=0, S3OweWaterSumYYNew=0, S2PreWaterSumYYOld=0, TotalOweyuNew=0, S3TotalyuOld=0, S3WaterPrice=30, MWaterLogYYCount=0, S3OweWaterCountYYNew=0, S3TotalyuNew=0, TotalPrehuOld=0, S3WaterCostYYCount =0, S1PreWaterCountYYNew=0, S1WaterLogYYSum=0, TotalOwehuOld=0, PriceTotal=65, S2OweWaterCountYYNew=0, S1PreWaterCountYYOld=0, S1WaterCostYYSum =0, MOweWaterSumYYOld=0, S1TotalyuNew=0, MOweWaterCountYYNew=0, MOweWaterCountYYOld=0, S1PreWaterSumYYNew=0, TotalAllhuNew=0, TotalAllyuNew=0, S2WaterCostYYSum =0, TotalAllhuOld=0, S2OweWaterCountYYOld=0, MWaterCostYYSum =0, S1PreWaterSumYYOld=0, TotalAllyuOld=0}
2019-05-15 21:31:17 -请求地址 : http://localhost:8081/index
2019-05-15 21:31:17 -HTTP METHOD : GET
2019-05-15 21:31:17 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2019-05-15 21:31:17 -参数 : [{}]
2019-05-15 21:31:17 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2019-05-15 21:31:17 -==> Parameters: 1(Long)
2019-05-15 21:31:17 -<==      Total: 49
2019-05-15 21:31:17 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2019-05-15 21:31:17 -==> Parameters: 138(Long)
2019-05-15 21:31:17 -<==      Total: 1
2019-05-15 21:31:17 -耗时 : 33
2019-05-15 21:31:17 -返回值 : index_v1
2019-05-15 21:31:17 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-05-15 21:31:17 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 33(Integer), com.bootdo.system.controller.LoginController.index()(String), {"menus":[{"attributes":{"icon":"fa fa-money","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-money","url":"/moneyList/moneyList"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"102","parentId":"106","text":"现金缴费"},{"attributes":{"icon":"fa fa-book","url":"/moneyLog/elecLog"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"107","parentId":"106","text":"缴费记录"}],"hasChildren":true,"hasParent":false,"id":"106","parentId":"0","text":"收费管理"},{"attributes":{"icon":"fa fa-lightbulb-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/elec/elec"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"121","parentId":"103","text":"电费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"elec/elecInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"122","parentId":"103","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"elec/elecUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"123","parentId":"103","text":"电表上传"},{"attributes":{"icon":"fa fa-cc","url":"/elec/elecPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"124","parentId":"103","text":"电价管理"}],"hasChildren":true,"hasParent":false,"id":"103","parentId":"0","text":"电费管理"},{"attributes":{"icon":"fa fa-tint","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/water/water"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"117","parentId":"105","text":"水费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"water/waterInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"118","parentId":"105","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"water/waterUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"119","parentId":"105","text":"水费生成"},{"attributes":{"icon":"fa fa-cc","url":"/water/waterPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"120","parentId":"105","text":"水价管理"}],"hasChildren":true,"hasParent":false,"id":"105","parentId":"0","text":"水费管理"},{"attributes":{"icon":"fa fa-fire","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/heat/heat"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"113","parentId":"104","text":"暖费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"heat/heatInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"114","parentId":"104","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"heat/heatUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"115","parentId":"104","text":"暖费生成"},{"attributes":{"icon":"","url":"/heat/heatPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"116","parentId":"104","text":"暖价管理"}],"hasChildren":true,"hasParent":false,"id":"104","parentId":"0","text":"暖费管理"},{"attributes":{"icon":"fa fa-vcard-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-bomb","url":"/print/print"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"149","parentId":"108","text":"票据记录"}],"hasChildren":true,"hasParent":false,"id":"108","parentId":"0","text":"票据管理"},{"attributes":{"icon":"fa fa-bar-chart","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-area-chart","url":"/chart/graph_echarts.html"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","text":"百度chart"},{"attributes":{"icon":"fa fa-sun-o","url":"charts/countDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"109","parentId":"97","text":"日统计报表"},{"attributes":{"icon":"fa fa-calendar","url":"charts/tableDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"161","parentId":"97","text":"日统计表格"},{"attributes":{"icon":"fa fa-registered","url":"charts/countMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"110","parentId":"97","text":"月统计报表"},{"attributes":{"icon":"fa fa-building-o","url":"charts/tableElecMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"162","parentId":"97","text":"月统计表格"},{"attributes":{"icon":"fa fa-support","url":"charts/countYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"111","parentId":"97","text":"年统计报表"},{"attributes":{"icon":"fa fa-book","url":"charts/tableElecYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"163","parentId":"97","text":"年统计表格"},{"attributes":{"icon":"fa fa-money","url":"charts/countOwe"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"155","parentId":"97","text":"欠费报表图"},{"attributes":{"icon":"fa fa-tachometer","url":"charts/countRun"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"112"(String), 127.0.0.1(String), 2019-05-15 21:31:17.76(Timestamp)
2019-05-15 21:31:17 -请求地址 : http://localhost:8081/main
2019-05-15 21:31:17 -HTTP METHOD : GET
2019-05-15 21:31:17 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-05-15 21:31:17 -参数 : []
2019-05-15 21:31:17 -耗时 : 1
2019-05-15 21:31:17 -返回值 : main
2019-05-15 21:31:17 -<==    Updates: 1
2019-05-15 21:31:17 -请求地址 : http://localhost:8081/oa/notify/message
2019-05-15 21:31:17 -HTTP METHOD : GET
2019-05-15 21:31:17 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2019-05-15 21:31:17 -参数 : []
2019-05-15 21:31:17 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2019-05-15 21:31:17 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2019-05-15 21:31:17 -<==      Total: 0
2019-05-15 21:31:17 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2019-05-15 21:31:17 -==> Parameters: 1(Long), 0(String)
2019-05-15 21:31:17 -<==      Total: 1
2019-05-15 21:31:17 -耗时 : 7
2019-05-15 21:31:17 -返回值 : com.bootdo.common.utils.PageUtils@630720b5
2019-05-15 21:31:18 -请求地址 : http://localhost:8081/main
2019-05-15 21:31:18 -HTTP METHOD : GET
2019-05-15 21:31:18 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-05-15 21:31:18 -参数 : []
2019-05-15 21:31:18 -耗时 : 0
2019-05-15 21:31:18 -返回值 : main
2019-05-15 21:31:25 -请求地址 : http://localhost:8081/charts/tableElecYY
2019-05-15 21:31:25 -HTTP METHOD : GET
2019-05-15 21:31:25 -CLASS_METHOD : com.bootdo.charts.controller.tableElecYYController.tableElecYY
2019-05-15 21:31:25 -参数 : []
2019-05-15 21:31:25 -耗时 : 0
2019-05-15 21:31:25 -返回值 : charts/tableElecYY
2019-05-15 21:31:26 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-05-15 21:31:26 -HTTP METHOD : GET
2019-05-15 21:31:26 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-05-15 21:31:26 -参数 : [userType]
2019-05-15 21:31:26 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-05-15 21:31:26 -==> Parameters: userType(String)
2019-05-15 21:31:26 -<==      Total: 4
2019-05-15 21:31:26 -耗时 : 7
2019-05-15 21:31:26 -返回值 : [DictDO{id=145, name='银行转账', value='D', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=144, name='微信支付', value='C', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-05-15 21:31:27 -请求地址 : http://localhost:8081/charts/tableWaterYY
2019-05-15 21:31:27 -HTTP METHOD : GET
2019-05-15 21:31:27 -CLASS_METHOD : com.bootdo.charts.controller.tableWaterYYController.tableWaterYY
2019-05-15 21:31:27 -参数 : []
2019-05-15 21:31:27 -耗时 : 0
2019-05-15 21:31:27 -返回值 : charts/tableWaterYY
2019-05-15 21:31:27 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-05-15 21:31:27 -HTTP METHOD : GET
2019-05-15 21:31:27 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-05-15 21:31:27 -参数 : [userType]
2019-05-15 21:31:27 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-05-15 21:31:27 -==> Parameters: userType(String)
2019-05-15 21:31:27 -<==      Total: 4
2019-05-15 21:31:27 -耗时 : 5
2019-05-15 21:31:27 -返回值 : [DictDO{id=145, name='银行转账', value='D', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=144, name='微信支付', value='C', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-05-15 21:31:33 -请求地址 : http://localhost:8081/system/sysDept/treeView
2019-05-15 21:31:33 -HTTP METHOD : GET
2019-05-15 21:31:33 -CLASS_METHOD : com.bootdo.system.controller.DeptController.treeView
2019-05-15 21:31:33 -参数 : []
2019-05-15 21:31:33 -耗时 : 1
2019-05-15 21:31:33 -返回值 : system/dept/deptTree
2019-05-15 21:31:33 -请求地址 : http://localhost:8081/system/sysDept/tree
2019-05-15 21:31:33 -HTTP METHOD : GET
2019-05-15 21:31:33 -CLASS_METHOD : com.bootdo.system.controller.DeptController.tree
2019-05-15 21:31:33 -参数 : []
2019-05-15 21:31:33 -==>  Preparing: select `dept_id`,`parent_id`,`name`,`order_num`,`del_flag` from sys_dept order by dept_id desc 
2019-05-15 21:31:33 -==> Parameters: 
2019-05-15 21:31:33 -<==      Total: 3
2019-05-15 21:31:33 -耗时 : 3
2019-05-15 21:31:33 -返回值 : {"checked":false,"children":[{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"3","parentId":"1","state":{"opened":true},"text":"牙星"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"2","parentId":"1","state":{"opened":true},"text":"五九"}],"hasChildren":true,"hasParent":false,"id":"1","parentId":"0","state":{"opened":true},"text":"总公司"}
2019-05-15 21:31:35 -请求地址 : http://localhost:8081/charts/tableWaterYY/tableWaterYY
2019-05-15 21:31:35 -HTTP METHOD : POST
2019-05-15 21:31:35 -CLASS_METHOD : com.bootdo.charts.controller.tableWaterYYController.tableWaterYY
2019-05-15 21:31:35 -参数 : [com.bootdo.water.vo.WaterVo@206277b4, com.bootdo.moneyLog.vo.WaterLogVo@69e48e81]
2019-05-15 21:31:35 -==>  Preparing: select COUNT(*) from water WHERE `water_sum` >= 0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 21:31:35 -==> Parameters: 2018-12(String), 1(String), 2(String)
2019-05-15 21:31:35 -<==      Total: 1
2019-05-15 21:31:35 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE `water_sum` >= 0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 21:31:35 -==> Parameters: 2018-12(String), 1(String), 2(String)
2019-05-15 21:31:35 -<==      Total: 1
2019-05-15 21:31:35 -==>  Preparing: select COUNT(*) from water WHERE water_sum <0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 21:31:35 -==> Parameters: 2018-12(String), 1(String), 2(String)
2019-05-15 21:31:35 -<==      Total: 1
2019-05-15 21:31:35 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE water_sum <0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 21:31:35 -==> Parameters: 2018-12(String), 1(String), 2(String)
2019-05-15 21:31:35 -<==      Total: 1
2019-05-15 21:31:35 -==>  Preparing: select COUNT(*),ifnull(SUM(water_cost),0) from water WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 21:31:35 -==> Parameters: 2019(String), 1(String), 2(String)
2019-05-15 21:31:35 -<==      Total: 1
2019-05-15 21:31:35 -==>  Preparing: select ifnull(SUM(water_cost),0) from water WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 21:31:35 -==> Parameters: 2019(String), 1(String), 2(String)
2019-05-15 21:31:35 -<==      Total: 1
2019-05-15 21:31:35 -==>  Preparing: select COUNT(*) from water_log WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 21:31:35 -==> Parameters: 2019(String), 1(String), 2(String)
2019-05-15 21:31:35 -<==      Total: 1
2019-05-15 21:31:35 -==>  Preparing: select ifnull(SUM(water_money),0) from water_log WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 21:31:35 -==> Parameters: 2019(String), 1(String), 2(String)
2019-05-15 21:31:35 -<==      Total: 1
2019-05-15 21:31:35 -==>  Preparing: select COUNT(*) from water WHERE `water_sum` >= 0 and create_time = (select MAX(create_time) from water where DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ?) and water_type = ? and user_org = ? 
2019-05-15 21:31:35 -==> Parameters: 2019(String), 1(String), 2(String)
2019-05-15 21:31:35 -<==      Total: 1
2019-05-15 21:31:35 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE `water_sum` >= 0 and create_time = (select MAX(create_time) from water where DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ?) and water_type = ? and user_org = ? 
2019-05-15 21:31:35 -==> Parameters: 2019(String), 1(String), 2(String)
2019-05-15 21:31:35 -<==      Total: 1
2019-05-15 21:31:35 -==>  Preparing: select COUNT(*) from water WHERE water_sum <0 and create_time = (select MAX(create_time) from water where DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ?) and water_type = ? and user_org = ? 
2019-05-15 21:31:35 -==> Parameters: 2019(String), 1(String), 2(String)
2019-05-15 21:31:35 -<==      Total: 1
2019-05-15 21:31:35 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE water_sum <0 and create_time = (select MAX(create_time) from water where DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ?) and water_type = ? and user_org = ? 
2019-05-15 21:31:35 -==> Parameters: 2019(String), 1(String), 2(String)
2019-05-15 21:31:35 -<==      Total: 1
2019-05-15 21:31:35 -==>  Preparing: select COUNT(*) from water WHERE `water_sum` >= 0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 21:31:35 -==> Parameters: 2018-12(String), 2(String), 2(String)
2019-05-15 21:31:35 -<==      Total: 1
2019-05-15 21:31:35 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE `water_sum` >= 0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 21:31:35 -==> Parameters: 2018-12(String), 2(String), 2(String)
2019-05-15 21:31:35 -<==      Total: 1
2019-05-15 21:31:35 -==>  Preparing: select COUNT(*) from water WHERE water_sum <0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 21:31:35 -==> Parameters: 2018-12(String), 2(String), 2(String)
2019-05-15 21:31:35 -<==      Total: 1
2019-05-15 21:31:35 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE water_sum <0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 21:31:35 -==> Parameters: 2018-12(String), 2(String), 2(String)
2019-05-15 21:31:35 -<==      Total: 1
2019-05-15 21:31:35 -==>  Preparing: select COUNT(*),ifnull(SUM(water_cost),0) from water WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 21:31:35 -==> Parameters: 2019(String), 2(String), 2(String)
2019-05-15 21:31:35 -<==      Total: 1
2019-05-15 21:31:35 -==>  Preparing: select ifnull(SUM(water_cost),0) from water WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 21:31:35 -==> Parameters: 2019(String), 2(String), 2(String)
2019-05-15 21:31:35 -<==      Total: 1
2019-05-15 21:31:35 -==>  Preparing: select COUNT(*) from water_log WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 21:31:35 -==> Parameters: 2019(String), 2(String), 2(String)
2019-05-15 21:31:35 -<==      Total: 1
2019-05-15 21:31:35 -==>  Preparing: select ifnull(SUM(water_money),0) from water_log WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 21:31:35 -==> Parameters: 2019(String), 2(String), 2(String)
2019-05-15 21:31:35 -<==      Total: 1
2019-05-15 21:31:35 -==>  Preparing: select COUNT(*) from water WHERE `water_sum` >= 0 and create_time = (select MAX(create_time) from water where DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ?) and water_type = ? and user_org = ? 
2019-05-15 21:31:35 -==> Parameters: 2019(String), 2(String), 2(String)
2019-05-15 21:31:35 -<==      Total: 1
2019-05-15 21:31:35 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE `water_sum` >= 0 and create_time = (select MAX(create_time) from water where DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ?) and water_type = ? and user_org = ? 
2019-05-15 21:31:35 -==> Parameters: 2019(String), 2(String), 2(String)
2019-05-15 21:31:35 -<==      Total: 1
2019-05-15 21:31:35 -==>  Preparing: select COUNT(*) from water WHERE water_sum <0 and create_time = (select MAX(create_time) from water where DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ?) and water_type = ? and user_org = ? 
2019-05-15 21:31:35 -==> Parameters: 2019(String), 2(String), 2(String)
2019-05-15 21:31:35 -<==      Total: 1
2019-05-15 21:31:35 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE water_sum <0 and create_time = (select MAX(create_time) from water where DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ?) and water_type = ? and user_org = ? 
2019-05-15 21:31:35 -==> Parameters: 2019(String), 2(String), 2(String)
2019-05-15 21:31:35 -<==      Total: 1
2019-05-15 21:31:35 -==>  Preparing: select COUNT(*) from water WHERE `water_sum` >= 0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 21:31:35 -==> Parameters: 2018-12(String), 3(String), 2(String)
2019-05-15 21:31:35 -<==      Total: 1
2019-05-15 21:31:35 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE `water_sum` >= 0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 21:31:35 -==> Parameters: 2018-12(String), 3(String), 2(String)
2019-05-15 21:31:35 -<==      Total: 1
2019-05-15 21:31:35 -==>  Preparing: select COUNT(*) from water WHERE water_sum <0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 21:31:35 -==> Parameters: 2018-12(String), 3(String), 2(String)
2019-05-15 21:31:35 -<==      Total: 1
2019-05-15 21:31:35 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE water_sum <0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 21:31:35 -==> Parameters: 2018-12(String), 3(String), 2(String)
2019-05-15 21:31:35 -<==      Total: 1
2019-05-15 21:31:35 -==>  Preparing: select COUNT(*),ifnull(SUM(water_cost),0) from water WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 21:31:35 -==> Parameters: 2019(String), 3(String), 2(String)
2019-05-15 21:31:35 -<==      Total: 1
2019-05-15 21:31:35 -==>  Preparing: select ifnull(SUM(water_cost),0) from water WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 21:31:35 -==> Parameters: 2019(String), 3(String), 2(String)
2019-05-15 21:31:35 -<==      Total: 1
2019-05-15 21:31:35 -==>  Preparing: select COUNT(*) from water_log WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 21:31:35 -==> Parameters: 2019(String), 3(String), 2(String)
2019-05-15 21:31:35 -<==      Total: 1
2019-05-15 21:31:35 -==>  Preparing: select ifnull(SUM(water_money),0) from water_log WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 21:31:35 -==> Parameters: 2019(String), 3(String), 2(String)
2019-05-15 21:31:35 -<==      Total: 1
2019-05-15 21:31:35 -==>  Preparing: select COUNT(*) from water WHERE `water_sum` >= 0 and create_time = (select MAX(create_time) from water where DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ?) and water_type = ? and user_org = ? 
2019-05-15 21:31:35 -==> Parameters: 2019(String), 3(String), 2(String)
2019-05-15 21:31:35 -<==      Total: 1
2019-05-15 21:31:35 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE `water_sum` >= 0 and create_time = (select MAX(create_time) from water where DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ?) and water_type = ? and user_org = ? 
2019-05-15 21:31:35 -==> Parameters: 2019(String), 3(String), 2(String)
2019-05-15 21:31:35 -<==      Total: 1
2019-05-15 21:31:35 -==>  Preparing: select COUNT(*) from water WHERE water_sum <0 and create_time = (select MAX(create_time) from water where DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ?) and water_type = ? and user_org = ? 
2019-05-15 21:31:35 -==> Parameters: 2019(String), 3(String), 2(String)
2019-05-15 21:31:35 -<==      Total: 1
2019-05-15 21:31:35 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE water_sum <0 and create_time = (select MAX(create_time) from water where DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ?) and water_type = ? and user_org = ? 
2019-05-15 21:31:35 -==> Parameters: 2019(String), 3(String), 2(String)
2019-05-15 21:31:35 -<==      Total: 1
2019-05-15 21:31:35 -==>  Preparing: select COUNT(*) from water WHERE `water_sum` >= 0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 21:31:35 -==> Parameters: 2018-12(String), 4(String), 2(String)
2019-05-15 21:31:35 -<==      Total: 1
2019-05-15 21:31:35 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE `water_sum` >= 0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 21:31:35 -==> Parameters: 2018-12(String), 4(String), 2(String)
2019-05-15 21:31:35 -<==      Total: 1
2019-05-15 21:31:35 -==>  Preparing: select COUNT(*) from water WHERE water_sum <0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 21:31:35 -==> Parameters: 2018-12(String), 4(String), 2(String)
2019-05-15 21:31:35 -<==      Total: 1
2019-05-15 21:31:35 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE water_sum <0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 21:31:35 -==> Parameters: 2018-12(String), 4(String), 2(String)
2019-05-15 21:31:35 -<==      Total: 1
2019-05-15 21:31:35 -==>  Preparing: select COUNT(*),ifnull(SUM(water_cost),0) from water WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 21:31:35 -==> Parameters: 2019(String), 4(String), 2(String)
2019-05-15 21:31:35 -<==      Total: 1
2019-05-15 21:31:35 -==>  Preparing: select ifnull(SUM(water_cost),0) from water WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 21:31:35 -==> Parameters: 2019(String), 4(String), 2(String)
2019-05-15 21:31:35 -<==      Total: 1
2019-05-15 21:31:35 -==>  Preparing: select COUNT(*) from water_log WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 21:31:35 -==> Parameters: 2019(String), 4(String), 2(String)
2019-05-15 21:31:35 -<==      Total: 1
2019-05-15 21:31:35 -==>  Preparing: select ifnull(SUM(water_money),0) from water_log WHERE DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ? and water_type = ? and user_org = ? 
2019-05-15 21:31:35 -==> Parameters: 2019(String), 4(String), 2(String)
2019-05-15 21:31:35 -<==      Total: 1
2019-05-15 21:31:35 -==>  Preparing: select COUNT(*) from water WHERE `water_sum` >= 0 and create_time = (select MAX(create_time) from water where DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ?) and water_type = ? and user_org = ? 
2019-05-15 21:31:35 -==> Parameters: 2019(String), 4(String), 2(String)
2019-05-15 21:31:35 -<==      Total: 1
2019-05-15 21:31:35 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE `water_sum` >= 0 and create_time = (select MAX(create_time) from water where DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ?) and water_type = ? and user_org = ? 
2019-05-15 21:31:35 -==> Parameters: 2019(String), 4(String), 2(String)
2019-05-15 21:31:35 -<==      Total: 1
2019-05-15 21:31:35 -==>  Preparing: select COUNT(*) from water WHERE water_sum <0 and create_time = (select MAX(create_time) from water where DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ?) and water_type = ? and user_org = ? 
2019-05-15 21:31:35 -==> Parameters: 2019(String), 4(String), 2(String)
2019-05-15 21:31:35 -<==      Total: 1
2019-05-15 21:31:35 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE water_sum <0 and create_time = (select MAX(create_time) from water where DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ?) and water_type = ? and user_org = ? 
2019-05-15 21:31:35 -==> Parameters: 2019(String), 4(String), 2(String)
2019-05-15 21:31:35 -<==      Total: 1
2019-05-15 21:31:35 -==>  Preparing: select m_water,s1_water,s2_water,s3_water,water_org from water_price 
2019-05-15 21:31:35 -==> Parameters: 
2019-05-15 21:31:35 -<==      Total: 2
2019-05-15 21:31:35 -耗时 : 94
2019-05-15 21:31:35 -返回值 : {S3TotalhuNew=0, S1WaterCostYYCount =1, S2PreWaterCountYYOld=0, S1OweWaterCountYYNew=0, S2PreWaterCountYYNew=0, S1OweWaterSumYYNew=0, type=2, S3PreWaterSumYYNew=0, TotalPreyuNew=26, MWaterLogYYSum=151, S1OweWaterCountYYOld=1, S1OweWaterSumYYOld=-10, TotalCostyu=40, S3PreWaterSumYYOld=0, MPreWaterCountYYOld=1, S2WaterCostYYCount =0, S1WaterPrice=10, S1TotalyuOld=-10, TotalPreyuOld=6, S2WaterLogYYCount=1, S3TotalhuOld=0, MPreWaterCountYYNew=2, TotalOwehuNew=1, MWaterCostYYCount =5, S2WaterLogYYSum=60, TotalCosthu=6, S1WaterLogYYCount=2, S3WaterLogYYSum=60, S2OweWaterSumYYOld=0, TotalLogyu=172, MPreWaterSumYYOld=6, S2TotalhuNew=0, MTotalyuOld=6, MPreWaterSumYYNew=25, MWaterPrice=6, S3PreWaterCountYYNew=0, MTotalhuNew=3, MTotalyuNew=16, TotalLoghu=4, S3PreWaterCountYYOld=0, S2TotalhuOld=0, S2TotalyuOld=0, S2OweWaterSumYYNew=0, TotalOweyuOld=-10, S3OweWaterCountYYOld=0, S2TotalyuNew=0, S3WaterLogYYCount=1, S1TotalhuNew=1, MTotalhuOld=1, S3WaterCostYYSum =0, S3OweWaterSumYYOld=0, S1TotalhuOld=1, S2PreWaterSumYYNew=0, TotalPrehuNew=3, MOweWaterSumYYNew=-9, S3OweWaterSumYYNew=0, S2PreWaterSumYYOld=0, TotalOweyuNew=-9, S3TotalyuOld=0, MWaterLogYYCount=2, S3OweWaterCountYYNew=0, S3TotalyuNew=0, TotalPrehuOld=1, S3WaterCostYYCount =0, S1PreWaterCountYYNew=1, S1WaterLogYYSum=21, TotalOwehuOld=1, PriceTotal=16, S2OweWaterCountYYNew=0, S1PreWaterCountYYOld=0, S1WaterCostYYSum =10, MOweWaterSumYYOld=0, S1TotalyuNew=1, MOweWaterCountYYNew=1, MOweWaterCountYYOld=0, S1PreWaterSumYYNew=1, TotalAllhuNew=4, TotalAllyuNew=17, S2WaterCostYYSum =0, TotalAllhuOld=2, S2OweWaterCountYYOld=0, MWaterCostYYSum =30, S1PreWaterSumYYOld=0, TotalAllyuOld=-4}
2019-05-15 21:36:30 -请求地址 : http://localhost:8081/index
2019-05-15 21:36:30 -HTTP METHOD : GET
2019-05-15 21:36:30 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2019-05-15 21:36:30 -参数 : [{}]
2019-05-15 21:36:30 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2019-05-15 21:36:30 -==> Parameters: 1(Long)
2019-05-15 21:36:30 -<==      Total: 49
2019-05-15 21:36:30 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2019-05-15 21:36:30 -==> Parameters: 138(Long)
2019-05-15 21:36:30 -<==      Total: 1
2019-05-15 21:36:30 -耗时 : 22
2019-05-15 21:36:30 -返回值 : index_v1
2019-05-15 21:36:30 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-05-15 21:36:30 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 22(Integer), com.bootdo.system.controller.LoginController.index()(String), {"menus":[{"attributes":{"icon":"fa fa-money","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-money","url":"/moneyList/moneyList"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"102","parentId":"106","text":"现金缴费"},{"attributes":{"icon":"fa fa-book","url":"/moneyLog/elecLog"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"107","parentId":"106","text":"缴费记录"}],"hasChildren":true,"hasParent":false,"id":"106","parentId":"0","text":"收费管理"},{"attributes":{"icon":"fa fa-lightbulb-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/elec/elec"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"121","parentId":"103","text":"电费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"elec/elecInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"122","parentId":"103","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"elec/elecUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"123","parentId":"103","text":"电表上传"},{"attributes":{"icon":"fa fa-cc","url":"/elec/elecPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"124","parentId":"103","text":"电价管理"}],"hasChildren":true,"hasParent":false,"id":"103","parentId":"0","text":"电费管理"},{"attributes":{"icon":"fa fa-tint","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/water/water"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"117","parentId":"105","text":"水费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"water/waterInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"118","parentId":"105","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"water/waterUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"119","parentId":"105","text":"水费生成"},{"attributes":{"icon":"fa fa-cc","url":"/water/waterPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"120","parentId":"105","text":"水价管理"}],"hasChildren":true,"hasParent":false,"id":"105","parentId":"0","text":"水费管理"},{"attributes":{"icon":"fa fa-fire","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/heat/heat"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"113","parentId":"104","text":"暖费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"heat/heatInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"114","parentId":"104","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"heat/heatUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"115","parentId":"104","text":"暖费生成"},{"attributes":{"icon":"","url":"/heat/heatPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"116","parentId":"104","text":"暖价管理"}],"hasChildren":true,"hasParent":false,"id":"104","parentId":"0","text":"暖费管理"},{"attributes":{"icon":"fa fa-vcard-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-bomb","url":"/print/print"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"149","parentId":"108","text":"票据记录"}],"hasChildren":true,"hasParent":false,"id":"108","parentId":"0","text":"票据管理"},{"attributes":{"icon":"fa fa-bar-chart","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-area-chart","url":"/chart/graph_echarts.html"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","text":"百度chart"},{"attributes":{"icon":"fa fa-sun-o","url":"charts/countDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"109","parentId":"97","text":"日统计报表"},{"attributes":{"icon":"fa fa-calendar","url":"charts/tableDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"161","parentId":"97","text":"日统计表格"},{"attributes":{"icon":"fa fa-registered","url":"charts/countMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"110","parentId":"97","text":"月统计报表"},{"attributes":{"icon":"fa fa-building-o","url":"charts/tableElecMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"162","parentId":"97","text":"月统计表格"},{"attributes":{"icon":"fa fa-support","url":"charts/countYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"111","parentId":"97","text":"年统计报表"},{"attributes":{"icon":"fa fa-book","url":"charts/tableElecYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"163","parentId":"97","text":"年统计表格"},{"attributes":{"icon":"fa fa-money","url":"charts/countOwe"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"155","parentId":"97","text":"欠费报表图"},{"attributes":{"icon":"fa fa-tachometer","url":"charts/countRun"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"112"(String), 127.0.0.1(String), 2019-05-15 21:36:30.195(Timestamp)
2019-05-15 21:36:30 -请求地址 : http://localhost:8081/main
2019-05-15 21:36:30 -HTTP METHOD : GET
2019-05-15 21:36:30 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-05-15 21:36:30 -参数 : []
2019-05-15 21:36:30 -耗时 : 1
2019-05-15 21:36:30 -返回值 : main
2019-05-15 21:36:30 -<==    Updates: 1
2019-05-15 21:36:30 -请求地址 : http://localhost:8081/oa/notify/message
2019-05-15 21:36:30 -HTTP METHOD : GET
2019-05-15 21:36:30 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2019-05-15 21:36:30 -参数 : []
2019-05-15 21:36:30 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2019-05-15 21:36:30 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2019-05-15 21:36:30 -<==      Total: 0
2019-05-15 21:36:30 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2019-05-15 21:36:30 -==> Parameters: 1(Long), 0(String)
2019-05-15 21:36:30 -<==      Total: 1
2019-05-15 21:36:30 -耗时 : 6
2019-05-15 21:36:30 -返回值 : com.bootdo.common.utils.PageUtils@604bd794
2019-05-15 21:36:30 -请求地址 : http://localhost:8081/main
2019-05-15 21:36:30 -HTTP METHOD : GET
2019-05-15 21:36:30 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-05-15 21:36:30 -参数 : []
2019-05-15 21:36:30 -耗时 : 0
2019-05-15 21:36:30 -返回值 : main
2019-05-15 21:36:35 -请求地址 : http://localhost:8081/charts/tableElecYY
2019-05-15 21:36:35 -HTTP METHOD : GET
2019-05-15 21:36:35 -CLASS_METHOD : com.bootdo.charts.controller.tableElecYYController.tableElecYY
2019-05-15 21:36:35 -参数 : []
2019-05-15 21:36:35 -耗时 : 0
2019-05-15 21:36:35 -返回值 : charts/tableElecYY
2019-05-15 21:36:36 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-05-15 21:36:36 -HTTP METHOD : GET
2019-05-15 21:36:36 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-05-15 21:36:36 -参数 : [userType]
2019-05-15 21:36:36 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-05-15 21:36:36 -==> Parameters: userType(String)
2019-05-15 21:36:36 -<==      Total: 4
2019-05-15 21:36:36 -耗时 : 3
2019-05-15 21:36:36 -返回值 : [DictDO{id=145, name='银行转账', value='D', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=144, name='微信支付', value='C', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-05-15 21:36:37 -请求地址 : http://localhost:8081/charts/tableWaterYY
2019-05-15 21:36:37 -HTTP METHOD : GET
2019-05-15 21:36:37 -CLASS_METHOD : com.bootdo.charts.controller.tableWaterYYController.tableWaterYY
2019-05-15 21:36:37 -参数 : []
2019-05-15 21:36:37 -耗时 : 0
2019-05-15 21:36:37 -返回值 : charts/tableWaterYY
2019-05-15 21:36:37 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-05-15 21:36:37 -HTTP METHOD : GET
2019-05-15 21:36:37 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-05-15 21:36:37 -参数 : [userType]
2019-05-15 21:36:37 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-05-15 21:36:37 -==> Parameters: userType(String)
2019-05-15 21:36:37 -<==      Total: 4
2019-05-15 21:36:37 -耗时 : 5
2019-05-15 21:36:37 -返回值 : [DictDO{id=145, name='银行转账', value='D', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=144, name='微信支付', value='C', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-05-15 21:40:53 -Starting BootdoApplication on PC-201905091110 with PID 22604 (D:\eclipse2018-work\bootdo\target\classes started by Administrator in D:\eclipse2018-work\bootdo)
2019-05-15 21:40:54 -Running with Spring Boot v2.0.3.RELEASE, Spring v5.0.7.RELEASE
2019-05-15 21:40:54 -The following profiles are active: dev
2019-05-15 21:40:54 -Refreshing org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@70e9c95d: startup date [Wed May 15 21:40:54 CST 2019]; root of context hierarchy
2019-05-15 21:40:57 -Multiple Spring Data modules found, entering strict repository configuration mode!
2019-05-15 21:40:59 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$14971f41] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-05-15 21:40:59 -Bean 'shiroConfig' of type [com.bootdo.system.config.ShiroConfig$$EnhancerBySpringCGLIB$$6f04de8] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-05-15 21:41:00 -Bean 'userRealm' of type [com.bootdo.system.shiro.UserRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-05-15 21:41:00 -Bean 'cacheManager2' of type [net.sf.ehcache.CacheManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-05-15 21:41:00 -Bean 'ehCacheManager' of type [org.apache.shiro.cache.ehcache.EhCacheManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-05-15 21:41:00 -Cache with name 'com.bootdo.system.shiro.UserRealm.authorizationCache' does not yet exist.  Creating now.
2019-05-15 21:41:00 -Added EhCache named [com.bootdo.system.shiro.UserRealm.authorizationCache]
2019-05-15 21:41:00 -Bean 'sessionDAO' of type [org.apache.shiro.session.mgt.eis.MemorySessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-05-15 21:41:00 -Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-05-15 21:41:00 -Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-05-15 21:41:00 -Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-05-15 21:41:01 -Tomcat initialized with port(s): 8081 (http)
2019-05-15 21:41:01 -Initializing ProtocolHandler ["http-nio-8081"]
2019-05-15 21:41:01 -Starting service [Tomcat]
2019-05-15 21:41:01 -Starting Servlet Engine: Apache Tomcat/8.5.31
2019-05-15 21:41:01 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [D:\Java\JDK\jdk1.8.0_102\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;D:/Java/JRE/bin/server;D:/Java/JRE/bin;D:/Java/JRE/lib/amd64;C:\ProgramData\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Windows\System32\OpenSSH\;%JAVA_HOME\bin%;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;;C:\Users\Administrator\Desktop;;.]
2019-05-15 21:41:02 -Initializing Spring embedded WebApplicationContext
2019-05-15 21:41:02 -Root WebApplicationContext: initialization completed in 7867 ms
2019-05-15 21:41:02 -Mapping filter: 'characterEncodingFilter' to: [/*]
2019-05-15 21:41:02 -Mapping filter: 'hiddenHttpMethodFilter' to: [/*]
2019-05-15 21:41:02 -Mapping filter: 'httpPutFormContentFilter' to: [/*]
2019-05-15 21:41:02 -Mapping filter: 'requestContextFilter' to: [/*]
2019-05-15 21:41:02 -Filter xssFilter was not registered (disabled)
2019-05-15 21:41:02 -Mapping filter: 'webStatFilter' to urls: [/*]
2019-05-15 21:41:02 -Mapping filter: 'shiroFilterFactoryBean' to: [/*]
2019-05-15 21:41:02 -Servlet statViewServlet mapped to [/druid/*]
2019-05-15 21:41:02 -Servlet dispatcherServlet mapped to [/]
2019-05-15 21:41:10 -ApplicationContext registed-->org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@70e9c95d: startup date [Wed May 15 21:40:54 CST 2019]; root of context hierarchy
2019-05-15 21:41:10 -Using default implementation for ThreadExecutor
2019-05-15 21:41:10 -Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2019-05-15 21:41:10 -Quartz Scheduler v.2.2.1 created.
2019-05-15 21:41:10 -RAMJobStore initialized.
2019-05-15 21:41:10 -Scheduler meta-data: Quartz Scheduler (v2.2.1) 'schedulerFactoryBean' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2019-05-15 21:41:10 -Quartz scheduler 'schedulerFactoryBean' initialized from an externally provided properties instance.
2019-05-15 21:41:10 -Quartz scheduler version: 2.2.1
2019-05-15 21:41:10 -JobFactory set to: com.bootdo.common.quartz.factory.JobFactory@60928a61
2019-05-15 21:41:11 -Initializing ExecutorService  'clientInboundChannelExecutor'
2019-05-15 21:41:11 -Initializing ExecutorService  'clientOutboundChannelExecutor'
2019-05-15 21:41:13 -Mapped "{[/charts/countDD],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.countDDController.countDD()
2019-05-15 21:41:13 -Mapped "{[/charts/countDD/exportDD],methods=[GET]}" onto public void com.bootdo.charts.controller.countDDController.exportDD(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.HeatLogVo,com.bootdo.moneyLog.vo.WaterLogVo,javax.servlet.http.HttpServletResponse)
2019-05-15 21:41:13 -Mapped "{[/charts/countDD/getCountDD],methods=[POST]}" onto public com.bootdo.charts.vo.CountDayVo com.bootdo.charts.controller.countDDController.getCountD(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo)
2019-05-15 21:41:13 -Mapped "{[/charts/countMM],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.countMMController.countMM()
2019-05-15 21:41:13 -Mapped "{[/charts/countMM/exportMM],methods=[GET]}" onto public void com.bootdo.charts.controller.countMMController.exportMM(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.HeatLogVo,com.bootdo.moneyLog.vo.WaterLogVo,javax.servlet.http.HttpServletResponse)
2019-05-15 21:41:13 -Mapped "{[/charts/countMM/getCountMM],methods=[POST]}" onto public java.util.Map com.bootdo.charts.controller.countMMController.getCountMM(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo)
2019-05-15 21:41:13 -Mapped "{[/charts/countOwe],methods=[GET]}" onto java.lang.String com.bootdo.charts.controller.countOweController.countOwe()
2019-05-15 21:41:13 -Mapped "{[/charts/countOwe/getCountOwe],methods=[POST]}" onto public com.bootdo.charts.vo.CountOweVo com.bootdo.charts.controller.countOweController.getCountD(com.bootdo.elec.vo.ElecVo,com.bootdo.water.vo.WaterVo,com.bootdo.heat.vo.HeatVo)
2019-05-15 21:41:13 -Mapped "{[/charts/countOwe/exportOwe],methods=[GET]}" onto public void com.bootdo.charts.controller.countOweController.exportOwe(com.bootdo.elec.vo.ElecVo,com.bootdo.heat.vo.HeatVo,com.bootdo.water.vo.WaterVo,javax.servlet.http.HttpServletResponse)
2019-05-15 21:41:13 -Mapped "{[/charts/countRun],methods=[GET]}" onto java.lang.String com.bootdo.charts.controller.countRunController.countRun()
2019-05-15 21:41:13 -Mapped "{[/charts/countRun/getCountRun],methods=[POST]}" onto public java.util.Map com.bootdo.charts.controller.countRunController.getCountRun(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo)
2019-05-15 21:41:13 -Mapped "{[/charts/countRun/exportRun],methods=[GET]}" onto public void com.bootdo.charts.controller.countRunController.exportRun(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.HeatLogVo,com.bootdo.moneyLog.vo.WaterLogVo,javax.servlet.http.HttpServletResponse)
2019-05-15 21:41:13 -Mapped "{[/charts/countYY/getCountYY],methods=[POST]}" onto public java.util.Map com.bootdo.charts.controller.countYYController.getCountYY(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo)
2019-05-15 21:41:13 -Mapped "{[/charts/countYY],methods=[GET]}" onto java.lang.String com.bootdo.charts.controller.countYYController.countYY()
2019-05-15 21:41:13 -Mapped "{[/charts/countYY/exportYY],methods=[GET]}" onto public void com.bootdo.charts.controller.countYYController.exportYY(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.HeatLogVo,com.bootdo.moneyLog.vo.WaterLogVo,javax.servlet.http.HttpServletResponse)
2019-05-15 21:41:13 -Mapped "{[/charts/tableDD],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.tableDDController.countDD()
2019-05-15 21:41:13 -Mapped "{[/charts/tableDD/exportDD],methods=[GET]}" onto public void com.bootdo.charts.controller.tableDDController.exportDD(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.HeatLogVo,com.bootdo.moneyLog.vo.WaterLogVo,javax.servlet.http.HttpServletResponse)
2019-05-15 21:41:13 -Mapped "{[/charts/tableDD/getTableDD],methods=[POST]}" onto public java.util.Map com.bootdo.charts.controller.tableDDController.getTableDD(com.bootdo.moneyLog.vo.ElecLogVo,com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.moneyLog.vo.HeatLogVo)
2019-05-15 21:41:13 -Mapped "{[/charts/tableElecMM/tableElecMM],methods=[POST]}" onto public java.util.Map com.bootdo.charts.controller.tableElecMMController.tableElecMM(com.bootdo.elec.vo.ElecVo,com.bootdo.moneyLog.vo.ElecLogVo)
2019-05-15 21:41:13 -Mapped "{[/charts/tableElecMM],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.tableElecMMController.tableElecMM()
2019-05-15 21:41:13 -Mapped "{[/charts/tableElecMM/exportElecMM],methods=[GET]}" onto public void com.bootdo.charts.controller.tableElecMMController.exportElecMM(com.bootdo.elec.vo.ElecVo,com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse)
2019-05-15 21:41:13 -Mapped "{[/charts/tableElecYY/exportElecYY],methods=[GET]}" onto public void com.bootdo.charts.controller.tableElecYYController.exportElecYY(com.bootdo.elec.vo.ElecVo,com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse)
2019-05-15 21:41:13 -Mapped "{[/charts/tableElecYY],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.tableElecYYController.tableElecYY()
2019-05-15 21:41:13 -Mapped "{[/charts/tableElecYY/getCountYY],methods=[POST]}" onto public java.util.Map com.bootdo.charts.controller.tableElecYYController.getCountYY(com.bootdo.elec.vo.ElecVo,com.bootdo.moneyLog.vo.ElecLogVo)
2019-05-15 21:41:13 -Mapped "{[/charts/tableHeatMM/tableHeatMM],methods=[POST]}" onto public java.util.Map com.bootdo.charts.controller.tableHeatMMController.tableHeatMM(com.bootdo.heat.vo.HeatVo,com.bootdo.moneyLog.vo.HeatLogVo)
2019-05-15 21:41:13 -Mapped "{[/charts/tableHeatMM],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.tableHeatMMController.tableHeatMM()
2019-05-15 21:41:13 -Mapped "{[/charts/tableHeatMM/exportHeatMM],methods=[GET]}" onto public void com.bootdo.charts.controller.tableHeatMMController.exportHeatMM(com.bootdo.heat.vo.HeatVo,com.bootdo.moneyLog.vo.HeatLogVo,javax.servlet.http.HttpServletResponse)
2019-05-15 21:41:13 -Mapped "{[/charts/tableHeatYY/getCountYY],methods=[POST]}" onto public java.util.Map com.bootdo.charts.controller.tableHeatYYController.getCountMM(com.bootdo.heat.vo.HeatVo,com.bootdo.moneyLog.vo.HeatLogVo)
2019-05-15 21:41:13 -Mapped "{[/charts/tableHeatYY/exportHeatYY],methods=[GET]}" onto public void com.bootdo.charts.controller.tableHeatYYController.exportHeatYY(com.bootdo.heat.vo.HeatVo,com.bootdo.moneyLog.vo.HeatLogVo,javax.servlet.http.HttpServletResponse)
2019-05-15 21:41:13 -Mapped "{[/charts/tableHeatYY],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.tableHeatYYController.tableHeatYY()
2019-05-15 21:41:13 -Mapped "{[/charts/tableWaterMM/tableWaterMM],methods=[POST]}" onto public java.util.Map com.bootdo.charts.controller.tableWaterMMController.tableWaterMM(com.bootdo.moneyLog.vo.WaterLogVo,com.bootdo.water.vo.WaterVo)
2019-05-15 21:41:13 -Mapped "{[/charts/tableWaterMM],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.tableWaterMMController.tableWaterMM()
2019-05-15 21:41:13 -Mapped "{[/charts/tableWaterMM/exportWaterMM],methods=[GET]}" onto public void com.bootdo.charts.controller.tableWaterMMController.exportWaterMM(com.bootdo.water.vo.WaterVo,com.bootdo.moneyLog.vo.WaterLogVo,javax.servlet.http.HttpServletResponse)
2019-05-15 21:41:13 -Mapped "{[/charts/tableWaterYY/tableWaterYY],methods=[POST]}" onto public java.util.Map com.bootdo.charts.controller.tableWaterYYController.tableWaterYY(com.bootdo.water.vo.WaterVo,com.bootdo.moneyLog.vo.WaterLogVo)
2019-05-15 21:41:13 -Mapped "{[/charts/tableWaterYY],methods=[GET]}" onto public java.lang.String com.bootdo.charts.controller.tableWaterYYController.tableWaterYY()
2019-05-15 21:41:13 -Mapped "{[/charts/tableWaterYY/exportWaterYY],methods=[GET]}" onto public void com.bootdo.charts.controller.tableWaterYYController.exportWaterYY(com.bootdo.water.vo.WaterVo,com.bootdo.moneyLog.vo.WaterLogVo,javax.servlet.http.HttpServletResponse)
2019-05-15 21:41:13 -Mapped "{[/common/dict/add],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.add()
2019-05-15 21:41:13 -Mapped "{[/common/dict/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.remove(java.lang.Long)
2019-05-15 21:41:13 -Mapped "{[/common/dict/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.remove(java.lang.Long[])
2019-05-15 21:41:13 -Mapped "{[/common/dict/update]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.update(com.bootdo.common.domain.DictDO)
2019-05-15 21:41:13 -Mapped "{[/common/dict/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.common.controller.DictController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 21:41:13 -Mapped "{[/common/dict/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.save(com.bootdo.common.domain.DictDO)
2019-05-15 21:41:13 -Mapped "{[/common/dict/type],methods=[GET]}" onto public java.util.List<com.bootdo.common.domain.DictDO> com.bootdo.common.controller.DictController.listType()
2019-05-15 21:41:13 -Mapped "{[/common/dict/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.edit(java.lang.Long,org.springframework.ui.Model)
2019-05-15 21:41:13 -Mapped "{[/common/dict],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.dict()
2019-05-15 21:41:13 -Mapped "{[/common/dict/list/{type}],methods=[GET]}" onto public java.util.List<com.bootdo.common.domain.DictDO> com.bootdo.common.controller.DictController.listByType(java.lang.String)
2019-05-15 21:41:13 -Mapped "{[/common/dict/add/{type}/{description}],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.addD(org.springframework.ui.Model,java.lang.String,java.lang.String)
2019-05-15 21:41:13 -Mapped "{[/common/sysFile/add],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.FileController.add()
2019-05-15 21:41:13 -Mapped "{[/common/sysFile/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.remove(java.lang.Long,javax.servlet.http.HttpServletRequest)
2019-05-15 21:41:13 -Mapped "{[/common/sysFile/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.remove(java.lang.Long[])
2019-05-15 21:41:13 -Mapped "{[/common/sysFile/update]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.update(com.bootdo.common.domain.FileDO)
2019-05-15 21:41:13 -Mapped "{[/common/sysFile/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.common.controller.FileController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 21:41:13 -Mapped "{[/common/sysFile/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.save(com.bootdo.common.domain.FileDO)
2019-05-15 21:41:13 -Mapped "{[/common/sysFile/info/{id}]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.info(java.lang.Long)
2019-05-15 21:41:13 -Mapped "{[/common/sysFile/upload],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.FileController.upload(org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpServletRequest)
2019-05-15 21:41:13 -Mapped "{[/common/sysFile/edit],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.FileController.edit(java.lang.Long,org.springframework.ui.Model)
2019-05-15 21:41:13 -Mapped "{[/common/sysFile],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.FileController.sysFile(org.springframework.ui.Model)
2019-05-15 21:41:13 -Mapped "{[/common/generator/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.GeneratorController.update(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 21:41:13 -Mapped "{[/common/generator/list],methods=[GET]}" onto java.util.List<java.util.Map<java.lang.String, java.lang.Object>> com.bootdo.common.controller.GeneratorController.list()
2019-05-15 21:41:13 -Mapped "{[/common/generator/code/{tableName}]}" onto public void com.bootdo.common.controller.GeneratorController.code(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String) throws java.io.IOException
2019-05-15 21:41:13 -Mapped "{[/common/generator],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.GeneratorController.generator()
2019-05-15 21:41:13 -Mapped "{[/common/generator/batchCode]}" onto public void com.bootdo.common.controller.GeneratorController.batchCode(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String) throws java.io.IOException
2019-05-15 21:41:13 -Mapped "{[/common/generator/edit],methods=[GET]}" onto public java.lang.String com.bootdo.common.controller.GeneratorController.edit(org.springframework.ui.Model)
2019-05-15 21:41:13 -Mapped "{[/common/job/add],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.JobController.add()
2019-05-15 21:41:13 -Mapped "{[/common/job/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.remove(java.lang.Long)
2019-05-15 21:41:13 -Mapped "{[/common/job/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.remove(java.lang.Long[])
2019-05-15 21:41:13 -Mapped "{[/common/job/update],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.update(com.bootdo.common.domain.TaskDO)
2019-05-15 21:41:13 -Mapped "{[/common/job/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.common.controller.JobController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 21:41:13 -Mapped "{[/common/job/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.save(com.bootdo.common.domain.TaskDO)
2019-05-15 21:41:13 -Mapped "{[/common/job/info/{id}]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.info(java.lang.Long)
2019-05-15 21:41:13 -Mapped "{[/common/job/changeJobStatus],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.changeJobStatus(java.lang.Long,java.lang.String)
2019-05-15 21:41:13 -Mapped "{[/common/job],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.JobController.taskScheduleJob()
2019-05-15 21:41:13 -Mapped "{[/common/job/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.JobController.edit(java.lang.Long,org.springframework.ui.Model)
2019-05-15 21:41:13 -Mapped "{[/common/log/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.LogController.remove(java.lang.Long)
2019-05-15 21:41:13 -Mapped "{[/common/log],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.LogController.log()
2019-05-15 21:41:13 -Mapped "{[/common/log/list],methods=[GET]}" onto com.bootdo.common.domain.PageDO<com.bootdo.common.domain.LogDO> com.bootdo.common.controller.LogController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 21:41:13 -Mapped "{[/common/log/batchRemove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.LogController.batchRemove(java.lang.Long[])
2019-05-15 21:41:13 -Mapped "{[/common/long],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.LongController.Long()
2019-05-15 21:41:13 -Mapped "{[/common/time],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.TimeController.Time()
2019-05-15 21:41:13 -Mapped "{[/error]}" onto public com.bootdo.common.utils.R com.bootdo.common.exception.MainsiteErrorController.handleError(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-05-15 21:41:13 -Mapped "{[/error],produces=[text/html]}" onto public org.springframework.web.servlet.ModelAndView com.bootdo.common.exception.MainsiteErrorController.errorHtml(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-05-15 21:41:13 -Mapped "{[/elec/elec/add],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecController.add()
2019-05-15 21:41:13 -Mapped "{[/elec/elec/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.remove(java.lang.Long)
2019-05-15 21:41:13 -Mapped "{[/elec/elec/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.remove(java.lang.Long[])
2019-05-15 21:41:13 -Mapped "{[/elec/elec/update],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.update(com.bootdo.elec.domain.ElecDO)
2019-05-15 21:41:13 -Mapped "{[/elec/elec/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.elec.controller.ElecController.list(java.util.Map<java.lang.String, java.lang.Object>,com.bootdo.elec.domain.ElecDO)
2019-05-15 21:41:13 -Mapped "{[/elec/elec/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.save(com.bootdo.elec.domain.ElecDO)
2019-05-15 21:41:13 -Mapped "{[/elec/elec],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecController.Elec()
2019-05-15 21:41:13 -Mapped "{[/elec/elec/exprotElec],methods=[GET]}" onto public void com.bootdo.elec.controller.ElecController.exprotExcel(com.bootdo.elec.vo.ElecVo,javax.servlet.http.HttpServletResponse)
2019-05-15 21:41:13 -Mapped "{[/elec/elec/WxElecUpdate],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.WxElecUpdate(com.bootdo.elec.domain.ElecDO)
2019-05-15 21:41:13 -Mapped "{[/elec/elec/YhElecUpdate],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecController.YhElecUpdate(com.bootdo.elec.domain.ElecDO)
2019-05-15 21:41:13 -Mapped "{[/elec/elec/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecController.edit(java.lang.Long,org.springframework.ui.Model)
2019-05-15 21:41:13 -Mapped "{[/elec/elecInto/importElecIntoExcel],methods=[POST]}" onto public java.lang.String com.bootdo.elec.controller.ElecIntoController.importElecIntoExcel(org.springframework.web.multipart.MultipartFile,com.bootdo.elec.vo.ElecVo,javax.servlet.http.HttpServletResponse) throws java.lang.Exception
2019-05-15 21:41:13 -Mapped "{[/elec/elecInto/exprotElecIntoExcel],methods=[GET]}" onto public void com.bootdo.elec.controller.ElecIntoController.exprotExcel(com.bootdo.elec.vo.ElecVo,javax.servlet.http.HttpServletResponse)
2019-05-15 21:41:13 -Mapped "{[/elec/elecInto],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecIntoController.ElecInto()
2019-05-15 21:41:13 -Mapped "{[/elec/elecPrice/add],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecPriceController.add()
2019-05-15 21:41:13 -Mapped "{[/elec/elecPrice/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecPriceController.remove(java.lang.Long)
2019-05-15 21:41:13 -Mapped "{[/elec/elecPrice/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecPriceController.remove(java.lang.Long[])
2019-05-15 21:41:13 -Mapped "{[/elec/elecPrice/update]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecPriceController.update(com.bootdo.elec.domain.ElecPriceDO)
2019-05-15 21:41:13 -Mapped "{[/elec/elecPrice/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.elec.controller.ElecPriceController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 21:41:13 -Mapped "{[/elec/elecPrice/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.elec.controller.ElecPriceController.save(com.bootdo.elec.domain.ElecPriceDO,com.bootdo.elec.domain.ElecDO)
2019-05-15 21:41:13 -Mapped "{[/elec/elecPrice],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecPriceController.ElecPrice()
2019-05-15 21:41:13 -Mapped "{[/elec/elecPrice/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecPriceController.edit(java.lang.Long,org.springframework.ui.Model)
2019-05-15 21:41:13 -Mapped "{[/elec/elecUpLoad],methods=[GET]}" onto java.lang.String com.bootdo.elec.controller.ElecUpLoadController.Elec()
2019-05-15 21:41:13 -Mapped "{[/elec/elecUpLoad/importElecExcel],methods=[POST]}" onto public java.util.Map<java.lang.String, java.lang.Object> com.bootdo.elec.controller.ElecUpLoadController.importElecExcel(org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpServletRequest) throws java.lang.Exception
2019-05-15 21:41:13 -Mapped "{[/elec/elecUpLoad/exprotElecExcel],methods=[GET]}" onto public void com.bootdo.elec.controller.ElecUpLoadController.exprotElecExcel(com.bootdo.elec.vo.ElecVo,javax.servlet.http.HttpServletResponse)
2019-05-15 21:41:13 -Mapped "{[/heat/heat/add],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatController.add()
2019-05-15 21:41:13 -Mapped "{[/heat/heat/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatController.remove(java.lang.Integer)
2019-05-15 21:41:13 -Mapped "{[/heat/heat/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatController.remove(java.lang.Integer[])
2019-05-15 21:41:13 -Mapped "{[/heat/heat/update]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatController.update(com.bootdo.heat.domain.HeatDO)
2019-05-15 21:41:13 -Mapped "{[/heat/heat/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.heat.controller.HeatController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 21:41:13 -Mapped "{[/heat/heat/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatController.save(com.bootdo.heat.domain.HeatDO)
2019-05-15 21:41:13 -Mapped "{[/heat/heat/exprotHeat],methods=[GET]}" onto public void com.bootdo.heat.controller.HeatController.exprotExcel(com.bootdo.heat.vo.HeatVo,javax.servlet.http.HttpServletResponse)
2019-05-15 21:41:13 -Mapped "{[/heat/heat],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatController.Heat()
2019-05-15 21:41:13 -Mapped "{[/heat/heat/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatController.edit(java.lang.Integer,org.springframework.ui.Model)
2019-05-15 21:41:13 -Mapped "{[/heat/heatInto/importHeatIntoExcel],methods=[POST]}" onto public java.lang.String com.bootdo.heat.controller.HeatIntoController.importHeatIntoExcel(org.springframework.web.multipart.MultipartFile,com.bootdo.heat.vo.HeatVo,javax.servlet.http.HttpServletResponse) throws java.lang.Exception
2019-05-15 21:41:13 -Mapped "{[/heat/heatInto/exprotHeatIntoExcel],methods=[GET]}" onto public void com.bootdo.heat.controller.HeatIntoController.exprotExcel(com.bootdo.heat.vo.HeatVo,javax.servlet.http.HttpServletResponse)
2019-05-15 21:41:13 -Mapped "{[/heat/heatInto],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatIntoController.HeatInto()
2019-05-15 21:41:13 -Mapped "{[/heat/heatPrice/add],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatPriceController.add()
2019-05-15 21:41:13 -Mapped "{[/heat/heatPrice/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatPriceController.remove(java.lang.Long)
2019-05-15 21:41:13 -Mapped "{[/heat/heatPrice/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatPriceController.remove(java.lang.Long[])
2019-05-15 21:41:13 -Mapped "{[/heat/heatPrice/update]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatPriceController.update(com.bootdo.heat.domain.HeatPriceDO)
2019-05-15 21:41:13 -Mapped "{[/heat/heatPrice/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.heat.controller.HeatPriceController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 21:41:13 -Mapped "{[/heat/heatPrice/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.heat.controller.HeatPriceController.save(com.bootdo.heat.domain.HeatPriceDO)
2019-05-15 21:41:13 -Mapped "{[/heat/heatPrice],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatPriceController.HeatPrice()
2019-05-15 21:41:13 -Mapped "{[/heat/heatPrice/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatPriceController.edit(java.lang.Long,org.springframework.ui.Model)
2019-05-15 21:41:13 -Mapped "{[/heat/heatUpLoad/importHeatExcel]}" onto public java.lang.String com.bootdo.heat.controller.HeatUpLoadController.importHeatExcel(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)
2019-05-15 21:41:13 -Mapped "{[/heat/heatUpLoad/exprotHeatExcel],methods=[GET]}" onto public void com.bootdo.heat.controller.HeatUpLoadController.exprotHeatExcel(com.bootdo.heat.vo.HeatVo,javax.servlet.http.HttpServletResponse)
2019-05-15 21:41:13 -Mapped "{[/heat/heatUpLoad],methods=[GET]}" onto java.lang.String com.bootdo.heat.controller.HeatUpLoadController.HeatUpLoad()
2019-05-15 21:41:13 -Mapped "{[/heat/heatUpLoad/createHeatExcel],methods=[POST]}" onto public java.lang.String com.bootdo.heat.controller.HeatUpLoadController.createHeatExcel(com.bootdo.heat.domain.HeatDO) throws java.lang.Exception
2019-05-15 21:41:13 -Mapped "{[/moneyList/moneyList/queryAllUser],methods=[POST]}" onto public java.util.List<com.bootdo.moneyList.damain.MoneyListDO> com.bootdo.moneyList.controller.MoneyListController.queryAllUser(com.bootdo.moneyList.damain.MoneyListDO)
2019-05-15 21:41:13 -Mapped "{[/moneyList/moneyList/updateMoney],methods=[POST]}" onto public java.lang.String com.bootdo.moneyList.controller.MoneyListController.updateMoney(com.bootdo.moneyList.damain.MoneyListDO)
2019-05-15 21:41:13 -Mapped "{[/moneyList/moneyList],methods=[GET]}" onto java.lang.String com.bootdo.moneyList.controller.MoneyListController.MoneyList()
2019-05-15 21:41:13 -Mapped "{[/moneyList/moneyList/queryAllUserName],methods=[POST]}" onto public java.util.List<com.bootdo.moneyList.damain.MoneyListDO> com.bootdo.moneyList.controller.MoneyListController.getAllUserName(com.bootdo.moneyList.damain.MoneyListDO)
2019-05-15 21:41:13 -Mapped "{[/moneyLog/elecLog/add],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.ElecLogController.add()
2019-05-15 21:41:13 -Mapped "{[/moneyLog/elecLog/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.ElecLogController.remove(java.lang.Long)
2019-05-15 21:41:13 -Mapped "{[/moneyLog/elecLog/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.ElecLogController.remove(java.lang.Long[])
2019-05-15 21:41:13 -Mapped "{[/moneyLog/elecLog/update]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.ElecLogController.update(java.util.Map<java.lang.String, java.lang.Object>,com.bootdo.moneyLog.domain.ElecLogDO)
2019-05-15 21:41:13 -Mapped "{[/moneyLog/elecLog/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.moneyLog.controller.ElecLogController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 21:41:13 -Mapped "{[/moneyLog/elecLog/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.ElecLogController.save(com.bootdo.moneyLog.domain.ElecLogDO)
2019-05-15 21:41:13 -Mapped "{[/moneyLog/elecLog],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.ElecLogController.moneyLog()
2019-05-15 21:41:13 -Mapped "{[/moneyLog/elecLog/exprotElecLog],methods=[GET]}" onto public void com.bootdo.moneyLog.controller.ElecLogController.exprotElecLog(com.bootdo.moneyLog.vo.ElecLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-05-15 21:41:13 -Mapped "{[/moneyLog/elecLog/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.ElecLogController.edit(java.lang.Long,org.springframework.ui.Model)
2019-05-15 21:41:13 -Mapped "{[/moneyLog/heatLog/add],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.HeatLogController.add()
2019-05-15 21:41:13 -Mapped "{[/moneyLog/heatLog/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.HeatLogController.remove(java.lang.Long)
2019-05-15 21:41:13 -Mapped "{[/moneyLog/heatLog/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.HeatLogController.remove(java.lang.Long[])
2019-05-15 21:41:13 -Mapped "{[/moneyLog/heatLog/update]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.HeatLogController.update(java.util.Map<java.lang.String, java.lang.Object>,com.bootdo.moneyLog.domain.HeatLogDO)
2019-05-15 21:41:13 -Mapped "{[/moneyLog/heatLog/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.moneyLog.controller.HeatLogController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 21:41:13 -Mapped "{[/moneyLog/heatLog/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.HeatLogController.save(com.bootdo.moneyLog.domain.HeatLogDO)
2019-05-15 21:41:13 -Mapped "{[/moneyLog/heatLog],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.HeatLogController.HeatLog()
2019-05-15 21:41:13 -Mapped "{[/moneyLog/heatLog/exprotHeatLog],methods=[GET]}" onto public void com.bootdo.moneyLog.controller.HeatLogController.exprotHeatLog(com.bootdo.moneyLog.vo.HeatLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-05-15 21:41:13 -Mapped "{[/moneyLog/heatLog/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.HeatLogController.edit(java.lang.Long,org.springframework.ui.Model)
2019-05-15 21:41:13 -Mapped "{[/moneyLog/waterLog/add],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.WaterLogController.add()
2019-05-15 21:41:13 -Mapped "{[/moneyLog/waterLog/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.WaterLogController.remove(java.lang.Long)
2019-05-15 21:41:13 -Mapped "{[/moneyLog/waterLog/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.WaterLogController.remove(java.lang.Long[])
2019-05-15 21:41:13 -Mapped "{[/moneyLog/waterLog/update]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.WaterLogController.update(java.util.Map<java.lang.String, java.lang.Object>,com.bootdo.moneyLog.domain.WaterLogDO)
2019-05-15 21:41:13 -Mapped "{[/moneyLog/waterLog/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.moneyLog.controller.WaterLogController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 21:41:13 -Mapped "{[/moneyLog/waterLog/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.moneyLog.controller.WaterLogController.save(com.bootdo.moneyLog.domain.WaterLogDO)
2019-05-15 21:41:13 -Mapped "{[/moneyLog/waterLog/exprotWaterLog],methods=[GET]}" onto public void com.bootdo.moneyLog.controller.WaterLogController.exprotWaterLog(com.bootdo.moneyLog.vo.WaterLogVo,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpServletRequest)
2019-05-15 21:41:13 -Mapped "{[/moneyLog/waterLog],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.WaterLogController.WaterLog()
2019-05-15 21:41:13 -Mapped "{[/moneyLog/waterLog/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.moneyLog.controller.WaterLogController.edit(java.lang.Long,org.springframework.ui.Model)
2019-05-15 21:41:13 -Mapped "{[/oa/notify/add],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.add()
2019-05-15 21:41:13 -Mapped "{[/oa/notify/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.remove(java.lang.Long)
2019-05-15 21:41:13 -Mapped "{[/oa/notify/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.remove(java.lang.Long[])
2019-05-15 21:41:13 -Mapped "{[/oa/notify/update]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.update(com.bootdo.oa.domain.NotifyDO)
2019-05-15 21:41:13 -Mapped "{[/oa/notify/read/{id}],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.read(java.lang.Long,org.springframework.ui.Model)
2019-05-15 21:41:13 -Mapped "{[/oa/notify/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.oa.controller.NotifyController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 21:41:13 -Mapped "{[/oa/notify/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.save(com.bootdo.oa.domain.NotifyDO)
2019-05-15 21:41:13 -Mapped "{[/oa/notify/message],methods=[GET]}" onto com.bootdo.common.utils.PageUtils com.bootdo.oa.controller.NotifyController.message()
2019-05-15 21:41:13 -Mapped "{[/oa/notify],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.oaNotify()
2019-05-15 21:41:13 -Mapped "{[/oa/notify/selfNotify],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.selefNotify()
2019-05-15 21:41:13 -Mapped "{[/oa/notify/selfList],methods=[GET]}" onto com.bootdo.common.utils.PageUtils com.bootdo.oa.controller.NotifyController.selfList(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 21:41:13 -Mapped "{[/oa/notify/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.edit(java.lang.Long,org.springframework.ui.Model)
2019-05-15 21:41:13 -Mapped "{[/print/print/add],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.add()
2019-05-15 21:41:13 -Mapped "{[/print/print/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.print.controller.PrintController.remove(java.lang.Long)
2019-05-15 21:41:13 -Mapped "{[/print/print/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.print.controller.PrintController.remove(java.lang.Long[])
2019-05-15 21:41:13 -Mapped "{[/print/print/update]}" onto public com.bootdo.common.utils.R com.bootdo.print.controller.PrintController.update(com.bootdo.print.domain.PrintDO)
2019-05-15 21:41:13 -Mapped "{[/print/print/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.print.controller.PrintController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 21:41:13 -Mapped "{[/print/print/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.print.controller.PrintController.save(java.lang.String,com.bootdo.print.domain.PrintDO)
2019-05-15 21:41:13 -Mapped "{[/print/print],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.Print()
2019-05-15 21:41:13 -Mapped "{[/print/print/printMoney],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.printMoney()
2019-05-15 21:41:13 -Mapped "{[/print/print/exprotPrint],methods=[GET]}" onto public void com.bootdo.print.controller.PrintController.exprotPrint(com.bootdo.print.vo.PrintVo,javax.servlet.http.HttpServletResponse)
2019-05-15 21:41:13 -Mapped "{[/print/print/printEdit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.printEdit(java.lang.Long,org.springframework.ui.Model)
2019-05-15 21:41:13 -Mapped "{[/print/print/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.print.controller.PrintController.edit(java.lang.Long,org.springframework.ui.Model)
2019-05-15 21:41:13 -Mapped "{[/system/sysDept/add/{pId}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.add(java.lang.Long,org.springframework.ui.Model)
2019-05-15 21:41:13 -Mapped "{[/system/sysDept/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.remove(java.lang.Long)
2019-05-15 21:41:13 -Mapped "{[/system/sysDept/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.remove(java.lang.Long[])
2019-05-15 21:41:13 -Mapped "{[/system/sysDept/update]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.update(com.bootdo.system.domain.DeptDO)
2019-05-15 21:41:13 -Mapped "{[/system/sysDept/list],methods=[GET]}" onto public java.util.List<com.bootdo.system.domain.DeptDO> com.bootdo.system.controller.DeptController.list()
2019-05-15 21:41:13 -Mapped "{[/system/sysDept/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.save(com.bootdo.system.domain.DeptDO)
2019-05-15 21:41:13 -Mapped "{[/system/sysDept/tree],methods=[GET]}" onto public com.bootdo.common.domain.Tree<com.bootdo.system.domain.DeptDO> com.bootdo.system.controller.DeptController.tree()
2019-05-15 21:41:13 -Mapped "{[/system/sysDept],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.dept()
2019-05-15 21:41:13 -Mapped "{[/system/sysDept/treeView],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.treeView()
2019-05-15 21:41:13 -Mapped "{[/system/sysDept/edit/{deptId}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.edit(java.lang.Long,org.springframework.ui.Model)
2019-05-15 21:41:13 -Mapped "{[/index],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.index(org.springframework.ui.Model)
2019-05-15 21:41:13 -Mapped "{[/main],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.main()
2019-05-15 21:41:13 -Mapped "{[/logout],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.logout()
2019-05-15 21:41:13 -Mapped "{[/getVerify],methods=[GET]}" onto public void com.bootdo.system.controller.LoginController.getVerify(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-05-15 21:41:13 -Mapped "{[/login],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.LoginController.ajaxLogin(java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest)
2019-05-15 21:41:13 -Mapped "{[/ || ],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.welcome(org.springframework.ui.Model)
2019-05-15 21:41:13 -Mapped "{[/login],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.login(org.springframework.ui.Model)
2019-05-15 21:41:13 -Mapped "{[/sys/menu/add/{pId}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.MenuController.add(org.springframework.ui.Model,java.lang.Long)
2019-05-15 21:41:13 -Mapped "{[/sys/menu/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.MenuController.remove(java.lang.Long)
2019-05-15 21:41:13 -Mapped "{[/sys/menu/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.MenuController.update(com.bootdo.system.domain.MenuDO)
2019-05-15 21:41:13 -Mapped "{[/sys/menu/list]}" onto java.util.List<com.bootdo.system.domain.MenuDO> com.bootdo.system.controller.MenuController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 21:41:13 -Mapped "{[/sys/menu/save],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.MenuController.save(com.bootdo.system.domain.MenuDO)
2019-05-15 21:41:13 -Mapped "{[/sys/menu/tree/{roleId}],methods=[GET]}" onto com.bootdo.common.domain.Tree<com.bootdo.system.domain.MenuDO> com.bootdo.system.controller.MenuController.tree(java.lang.Long)
2019-05-15 21:41:13 -Mapped "{[/sys/menu/tree],methods=[GET]}" onto com.bootdo.common.domain.Tree<com.bootdo.system.domain.MenuDO> com.bootdo.system.controller.MenuController.tree()
2019-05-15 21:41:13 -Mapped "{[/sys/menu],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.MenuController.menu(org.springframework.ui.Model)
2019-05-15 21:41:13 -Mapped "{[/sys/menu/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.MenuController.edit(org.springframework.ui.Model,java.lang.Long)
2019-05-15 21:41:13 -Mapped "{[/sys/role/add],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.RoleController.add()
2019-05-15 21:41:13 -Mapped "{[/sys/role/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.update(com.bootdo.system.domain.RoleDO)
2019-05-15 21:41:13 -Mapped "{[/sys/role/list],methods=[GET]}" onto java.util.List<com.bootdo.system.domain.RoleDO> com.bootdo.system.controller.RoleController.list()
2019-05-15 21:41:13 -Mapped "{[/sys/role/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.save(java.lang.Long)
2019-05-15 21:41:13 -Mapped "{[/sys/role/save],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.save(com.bootdo.system.domain.RoleDO)
2019-05-15 21:41:13 -Mapped "{[/sys/role/batchRemove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.batchRemove(java.lang.Long[])
2019-05-15 21:41:13 -Mapped "{[/sys/role],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.RoleController.role()
2019-05-15 21:41:13 -Mapped "{[/sys/role/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.RoleController.edit(java.lang.Long,org.springframework.ui.Model)
2019-05-15 21:41:13 -Mapped "{[/sys/online/list]}" onto public java.util.List<com.bootdo.system.domain.UserOnline> com.bootdo.system.controller.SessionController.list()
2019-05-15 21:41:13 -Mapped "{[/sys/online],methods=[GET]}" onto public java.lang.String com.bootdo.system.controller.SessionController.online()
2019-05-15 21:41:13 -Mapped "{[/sys/online/forceLogout/{sessionId}]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.SessionController.forceLogout(java.lang.String,org.springframework.web.servlet.mvc.support.RedirectAttributes)
2019-05-15 21:41:13 -Mapped "{[/sys/online/sessionList]}" onto public java.util.Collection<org.apache.shiro.session.Session> com.bootdo.system.controller.SessionController.sessionList()
2019-05-15 21:41:13 -Mapped "{[/sys/user/exit],methods=[POST]}" onto boolean com.bootdo.system.controller.UserController.exit(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 21:41:13 -Mapped "{[/sys/user/add],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.add(org.springframework.ui.Model)
2019-05-15 21:41:13 -Mapped "{[/sys/user/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.remove(java.lang.Long)
2019-05-15 21:41:13 -Mapped "{[/sys/user/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.update(com.bootdo.system.domain.UserDO)
2019-05-15 21:41:13 -Mapped "{[/sys/user/list],methods=[GET]}" onto com.bootdo.common.utils.PageUtils com.bootdo.system.controller.UserController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 21:41:13 -Mapped "{[/sys/user/save],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.save(com.bootdo.system.domain.UserDO)
2019-05-15 21:41:13 -Mapped "{[/sys/user/batchRemove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.batchRemove(java.lang.Long[])
2019-05-15 21:41:13 -Mapped "{[/sys/user/tree],methods=[GET]}" onto public com.bootdo.common.domain.Tree<com.bootdo.system.domain.DeptDO> com.bootdo.system.controller.UserController.tree()
2019-05-15 21:41:13 -Mapped "{[/sys/user],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.user(org.springframework.ui.Model)
2019-05-15 21:41:13 -Mapped "{[/sys/user/treeView],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.treeView()
2019-05-15 21:41:13 -Mapped "{[/sys/user/uploadImg],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.uploadImg(org.springframework.web.multipart.MultipartFile,java.lang.String,javax.servlet.http.HttpServletRequest)
2019-05-15 21:41:13 -Mapped "{[/sys/user/updatePeronal],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.updatePeronal(com.bootdo.system.domain.UserDO)
2019-05-15 21:41:13 -Mapped "{[/sys/user/resetPwd],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.resetPwd(com.bootdo.system.vo.UserVO)
2019-05-15 21:41:13 -Mapped "{[/sys/user/resetPwd/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.resetPwd(java.lang.Long,org.springframework.ui.Model)
2019-05-15 21:41:13 -Mapped "{[/sys/user/adminResetPwd],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.adminResetPwd(com.bootdo.system.vo.UserVO)
2019-05-15 21:41:13 -Mapped "{[/sys/user/personal],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.personal(org.springframework.ui.Model)
2019-05-15 21:41:13 -Mapped "{[/sys/user/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.edit(org.springframework.ui.Model,java.lang.Long)
2019-05-15 21:41:13 -Mapped "{[/file/downImport/{importType}],methods=[GET]}" onto public void com.bootdo.temple.controller.TempletController.downImport(javax.servlet.http.HttpServletResponse,java.lang.String)
2019-05-15 21:41:13 -Mapped "{[/water/water/add],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterController.add()
2019-05-15 21:41:13 -Mapped "{[/water/water/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterController.remove(java.lang.Long)
2019-05-15 21:41:13 -Mapped "{[/water/water/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterController.remove(java.lang.Long[])
2019-05-15 21:41:13 -Mapped "{[/water/water/update]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterController.update(com.bootdo.water.domain.WaterDO)
2019-05-15 21:41:13 -Mapped "{[/water/water/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.water.controller.WaterController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 21:41:13 -Mapped "{[/water/water/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterController.save(com.bootdo.water.domain.WaterDO)
2019-05-15 21:41:13 -Mapped "{[/water/water],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterController.Water()
2019-05-15 21:41:13 -Mapped "{[/water/water/exprotWater],methods=[GET]}" onto public void com.bootdo.water.controller.WaterController.exprotExcel(com.bootdo.water.vo.WaterVo,javax.servlet.http.HttpServletResponse)
2019-05-15 21:41:13 -Mapped "{[/water/water/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterController.edit(java.lang.Long,org.springframework.ui.Model)
2019-05-15 21:41:13 -Mapped "{[/water/waterInto],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterIntoController.WaterInto()
2019-05-15 21:41:13 -Mapped "{[/water/waterInto/importWaterIntoExcel],methods=[POST]}" onto public java.lang.String com.bootdo.water.controller.WaterIntoController.importWaterIntoExcel(org.springframework.web.multipart.MultipartFile,com.bootdo.water.vo.WaterVo,javax.servlet.http.HttpServletResponse) throws java.lang.Exception
2019-05-15 21:41:13 -Mapped "{[/water/waterInto/exprotWaterIntoExcel],methods=[GET]}" onto public void com.bootdo.water.controller.WaterIntoController.exprotExcel(com.bootdo.water.vo.WaterVo,javax.servlet.http.HttpServletResponse)
2019-05-15 21:41:13 -Mapped "{[/water/waterPrice/add],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterPriceController.add()
2019-05-15 21:41:13 -Mapped "{[/water/waterPrice/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterPriceController.remove(java.lang.Long)
2019-05-15 21:41:13 -Mapped "{[/water/waterPrice/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterPriceController.remove(java.lang.Long[])
2019-05-15 21:41:13 -Mapped "{[/water/waterPrice/update]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterPriceController.update(com.bootdo.water.domain.WaterPriceDO)
2019-05-15 21:41:13 -Mapped "{[/water/waterPrice/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.water.controller.WaterPriceController.list(java.util.Map<java.lang.String, java.lang.Object>)
2019-05-15 21:41:13 -Mapped "{[/water/waterPrice/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.water.controller.WaterPriceController.save(com.bootdo.water.domain.WaterPriceDO)
2019-05-15 21:41:13 -Mapped "{[/water/waterPrice],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterPriceController.WaterPrice()
2019-05-15 21:41:13 -Mapped "{[/water/waterPrice/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterPriceController.edit(java.lang.Long,org.springframework.ui.Model)
2019-05-15 21:41:13 -Mapped "{[/water/waterUpLoad],methods=[GET]}" onto java.lang.String com.bootdo.water.controller.WaterUpLoadController.WaterUpLoad()
2019-05-15 21:41:13 -Mapped "{[/water/waterUpLoad/createWaterExcel],methods=[POST]}" onto public java.lang.String com.bootdo.water.controller.WaterUpLoadController.createWaterExcel(com.bootdo.water.domain.WaterDO) throws java.lang.Exception
2019-05-15 21:41:13 -Mapped "{[/water/waterUpLoad/importWaterExcel]}" onto public java.lang.String com.bootdo.water.controller.WaterUpLoadController.importWaterExcel(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)
2019-05-15 21:41:13 -Mapped "{[/water/waterUpLoad/exprotWaterExcel],methods=[GET]}" onto public void com.bootdo.water.controller.WaterUpLoadController.exprotWaterExcel(com.bootdo.water.vo.WaterVo,javax.servlet.http.HttpServletResponse)
2019-05-15 21:41:13 -Mapped "{[/v2/api-docs],methods=[GET],produces=[application/json || application/hal+json]}" onto public org.springframework.http.ResponseEntity<springfox.documentation.spring.web.json.Json> springfox.documentation.swagger2.web.Swagger2Controller.getDocumentation(java.lang.String,javax.servlet.http.HttpServletRequest)
2019-05-15 21:41:13 -Mapped "{[/swagger-resources/configuration/security]}" onto org.springframework.http.ResponseEntity<springfox.documentation.swagger.web.SecurityConfiguration> springfox.documentation.swagger.web.ApiResourceController.securityConfiguration()
2019-05-15 21:41:13 -Mapped "{[/swagger-resources]}" onto org.springframework.http.ResponseEntity<java.util.List<springfox.documentation.swagger.web.SwaggerResource>> springfox.documentation.swagger.web.ApiResourceController.swaggerResources()
2019-05-15 21:41:13 -Mapped "{[/swagger-resources/configuration/ui]}" onto org.springframework.http.ResponseEntity<springfox.documentation.swagger.web.UiConfiguration> springfox.documentation.swagger.web.ApiResourceController.uiConfiguration()
2019-05-15 21:41:14 -Initializing ExecutorService  'messageBrokerTaskScheduler'
2019-05-15 21:41:14 -Mapped URL path [/endpointChat/**] onto handler of type [class org.springframework.web.socket.sockjs.support.SockJsHttpRequestHandler]
2019-05-15 21:41:14 -Initializing ExecutorService  'brokerChannelExecutor'
2019-05-15 21:41:14 -Mapped URL path [/**/favicon.ico] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-05-15 21:41:15 -Looking for @ControllerAdvice: org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@70e9c95d: startup date [Wed May 15 21:40:54 CST 2019]; root of context hierarchy
2019-05-15 21:41:15 -Mapped URL path [/webjars/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-05-15 21:41:15 -Mapped URL path [/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-05-15 21:41:15 -Mapped URL path [/files/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-05-15 21:41:15 -Detected @ExceptionHandler methods in BDExceptionHandler
2019-05-15 21:41:15 -[THYMELEAF][main] Template Mode 'LEGACYHTML5' is deprecated. Using Template Mode 'HTML' instead.
2019-05-15 21:41:17 -Registering beans for JMX exposure on startup
2019-05-15 21:41:17 -Bean with name 'dataSource' has been autodetected for JMX exposure
2019-05-15 21:41:17 -Located MBean 'dataSource': registering with JMX server as MBean [com.alibaba.druid.pool:name=dataSource,type=DruidDataSource]
2019-05-15 21:41:17 -Starting beans in phase 2147483647
2019-05-15 21:41:17 -Context refreshed
2019-05-15 21:41:17 -Found 1 custom documentation plugin(s)
2019-05-15 21:41:17 -Scanning for api listing references
2019-05-15 21:41:17 -Generating unique operation named: getCountDUsingPOST_1
2019-05-15 21:41:17 -Generating unique operation named: removeUsingPOST_1
2019-05-15 21:41:17 -Generating unique operation named: addUsingGET_1
2019-05-15 21:41:17 -Generating unique operation named: editUsingGET_1
2019-05-15 21:41:18 -Generating unique operation named: listUsingGET_1
2019-05-15 21:41:18 -Generating unique operation named: removeUsingPOST_2
2019-05-15 21:41:18 -Generating unique operation named: removeUsingPOST_3
2019-05-15 21:41:18 -Generating unique operation named: saveUsingPOST_1
2019-05-15 21:41:18 -Generating unique operation named: updateUsingGET_1
2019-05-15 21:41:18 -Generating unique operation named: updateUsingHEAD_1
2019-05-15 21:41:18 -Generating unique operation named: updateUsingPOST_1
2019-05-15 21:41:18 -Generating unique operation named: updateUsingPUT_1
2019-05-15 21:41:18 -Generating unique operation named: updateUsingPATCH_1
2019-05-15 21:41:18 -Generating unique operation named: updateUsingDELETE_1
2019-05-15 21:41:18 -Generating unique operation named: updateUsingOPTIONS_1
2019-05-15 21:41:18 -Generating unique operation named: updateUsingTRACE_1
2019-05-15 21:41:18 -Generating unique operation named: addUsingGET_2
2019-05-15 21:41:18 -Generating unique operation named: editUsingGET_2
2019-05-15 21:41:18 -Generating unique operation named: listUsingGET_2
2019-05-15 21:41:18 -Generating unique operation named: removeUsingPOST_4
2019-05-15 21:41:18 -Generating unique operation named: removeUsingPOST_5
2019-05-15 21:41:18 -Generating unique operation named: saveUsingPOST_2
2019-05-15 21:41:18 -Generating unique operation named: updateUsingPOST_2
2019-05-15 21:41:18 -Generating unique operation named: exprotExcelUsingGET_1
2019-05-15 21:41:18 -Generating unique operation named: addUsingGET_3
2019-05-15 21:41:18 -Generating unique operation named: editUsingGET_3
2019-05-15 21:41:18 -Generating unique operation named: listUsingGET_3
2019-05-15 21:41:18 -Generating unique operation named: removeUsingPOST_6
2019-05-15 21:41:18 -Generating unique operation named: removeUsingPOST_7
2019-05-15 21:41:18 -Generating unique operation named: saveUsingPOST_3
2019-05-15 21:41:18 -Generating unique operation named: updateUsingGET_2
2019-05-15 21:41:18 -Generating unique operation named: updateUsingHEAD_2
2019-05-15 21:41:18 -Generating unique operation named: updateUsingPOST_3
2019-05-15 21:41:18 -Generating unique operation named: updateUsingPUT_2
2019-05-15 21:41:18 -Generating unique operation named: updateUsingPATCH_2
2019-05-15 21:41:18 -Generating unique operation named: updateUsingDELETE_2
2019-05-15 21:41:18 -Generating unique operation named: updateUsingOPTIONS_2
2019-05-15 21:41:18 -Generating unique operation named: updateUsingTRACE_2
2019-05-15 21:41:18 -Generating unique operation named: addUsingGET_4
2019-05-15 21:41:18 -Generating unique operation named: editUsingGET_4
2019-05-15 21:41:18 -Generating unique operation named: listUsingGET_4
2019-05-15 21:41:18 -Generating unique operation named: removeUsingPOST_8
2019-05-15 21:41:18 -Generating unique operation named: removeUsingPOST_9
2019-05-15 21:41:18 -Generating unique operation named: saveUsingPOST_4
2019-05-15 21:41:18 -Generating unique operation named: updateUsingGET_3
2019-05-15 21:41:18 -Generating unique operation named: updateUsingHEAD_3
2019-05-15 21:41:18 -Generating unique operation named: updateUsingPOST_4
2019-05-15 21:41:18 -Generating unique operation named: updateUsingPUT_3
2019-05-15 21:41:18 -Generating unique operation named: updateUsingPATCH_3
2019-05-15 21:41:18 -Generating unique operation named: updateUsingDELETE_3
2019-05-15 21:41:18 -Generating unique operation named: updateUsingOPTIONS_3
2019-05-15 21:41:18 -Generating unique operation named: updateUsingTRACE_3
2019-05-15 21:41:18 -Generating unique operation named: ElecUsingGET_1
2019-05-15 21:41:18 -Generating unique operation named: addUsingGET_5
2019-05-15 21:41:18 -Generating unique operation named: editUsingGET_5
2019-05-15 21:41:18 -Generating unique operation named: listUsingGET_5
2019-05-15 21:41:18 -Generating unique operation named: removeUsingPOST_10
2019-05-15 21:41:18 -Generating unique operation named: removeUsingPOST_11
2019-05-15 21:41:18 -Generating unique operation named: saveUsingPOST_5
2019-05-15 21:41:18 -Generating unique operation named: updateUsingGET_4
2019-05-15 21:41:18 -Generating unique operation named: updateUsingHEAD_4
2019-05-15 21:41:18 -Generating unique operation named: updateUsingPOST_5
2019-05-15 21:41:18 -Generating unique operation named: updateUsingPUT_4
2019-05-15 21:41:18 -Generating unique operation named: updateUsingPATCH_4
2019-05-15 21:41:18 -Generating unique operation named: updateUsingDELETE_4
2019-05-15 21:41:18 -Generating unique operation named: updateUsingOPTIONS_4
2019-05-15 21:41:18 -Generating unique operation named: updateUsingTRACE_4
2019-05-15 21:41:18 -Generating unique operation named: editUsingGET_6
2019-05-15 21:41:18 -Generating unique operation named: listUsingGET_6
2019-05-15 21:41:18 -Generating unique operation named: updateUsingPOST_6
2019-05-15 21:41:18 -Generating unique operation named: addUsingGET_6
2019-05-15 21:41:18 -Generating unique operation named: editUsingGET_7
2019-05-15 21:41:18 -Generating unique operation named: exprotExcelUsingGET_2
2019-05-15 21:41:18 -Generating unique operation named: listUsingGET_7
2019-05-15 21:41:18 -Generating unique operation named: removeUsingPOST_12
2019-05-15 21:41:18 -Generating unique operation named: removeUsingPOST_13
2019-05-15 21:41:18 -Generating unique operation named: saveUsingPOST_6
2019-05-15 21:41:18 -Generating unique operation named: updateUsingGET_5
2019-05-15 21:41:18 -Generating unique operation named: updateUsingHEAD_5
2019-05-15 21:41:18 -Generating unique operation named: updateUsingPOST_7
2019-05-15 21:41:18 -Generating unique operation named: updateUsingPUT_5
2019-05-15 21:41:18 -Generating unique operation named: updateUsingPATCH_5
2019-05-15 21:41:18 -Generating unique operation named: updateUsingDELETE_5
2019-05-15 21:41:18 -Generating unique operation named: updateUsingOPTIONS_5
2019-05-15 21:41:18 -Generating unique operation named: updateUsingTRACE_5
2019-05-15 21:41:18 -Generating unique operation named: exprotExcelUsingGET_3
2019-05-15 21:41:18 -Generating unique operation named: addUsingGET_7
2019-05-15 21:41:18 -Generating unique operation named: editUsingGET_8
2019-05-15 21:41:18 -Generating unique operation named: listUsingGET_8
2019-05-15 21:41:18 -Generating unique operation named: removeUsingPOST_14
2019-05-15 21:41:18 -Generating unique operation named: removeUsingPOST_15
2019-05-15 21:41:18 -Generating unique operation named: saveUsingPOST_7
2019-05-15 21:41:18 -Generating unique operation named: updateUsingGET_6
2019-05-15 21:41:18 -Generating unique operation named: updateUsingHEAD_6
2019-05-15 21:41:18 -Generating unique operation named: updateUsingPOST_8
2019-05-15 21:41:18 -Generating unique operation named: updateUsingPUT_6
2019-05-15 21:41:18 -Generating unique operation named: updateUsingPATCH_6
2019-05-15 21:41:18 -Generating unique operation named: updateUsingDELETE_6
2019-05-15 21:41:18 -Generating unique operation named: updateUsingOPTIONS_6
2019-05-15 21:41:18 -Generating unique operation named: updateUsingTRACE_6
2019-05-15 21:41:18 -Generating unique operation named: addUsingGET_8
2019-05-15 21:41:18 -Generating unique operation named: editUsingGET_9
2019-05-15 21:41:18 -Generating unique operation named: listUsingGET_9
2019-05-15 21:41:18 -Generating unique operation named: removeUsingPOST_16
2019-05-15 21:41:18 -Generating unique operation named: removeUsingPOST_17
2019-05-15 21:41:18 -Generating unique operation named: saveUsingPOST_8
2019-05-15 21:41:18 -Generating unique operation named: updateUsingGET_7
2019-05-15 21:41:18 -Generating unique operation named: updateUsingHEAD_7
2019-05-15 21:41:18 -Generating unique operation named: updateUsingPOST_9
2019-05-15 21:41:18 -Generating unique operation named: updateUsingPUT_7
2019-05-15 21:41:18 -Generating unique operation named: updateUsingPATCH_7
2019-05-15 21:41:18 -Generating unique operation named: updateUsingDELETE_7
2019-05-15 21:41:18 -Generating unique operation named: updateUsingOPTIONS_7
2019-05-15 21:41:18 -Generating unique operation named: updateUsingTRACE_7
2019-05-15 21:41:18 -Generating unique operation named: addUsingGET_9
2019-05-15 21:41:18 -Generating unique operation named: editUsingGET_10
2019-05-15 21:41:18 -Generating unique operation named: infoUsingGET_1
2019-05-15 21:41:18 -Generating unique operation named: infoUsingHEAD_1
2019-05-15 21:41:18 -Generating unique operation named: infoUsingPOST_1
2019-05-15 21:41:18 -Generating unique operation named: infoUsingPUT_1
2019-05-15 21:41:18 -Generating unique operation named: infoUsingPATCH_1
2019-05-15 21:41:19 -Generating unique operation named: infoUsingDELETE_1
2019-05-15 21:41:19 -Generating unique operation named: infoUsingOPTIONS_1
2019-05-15 21:41:19 -Generating unique operation named: infoUsingTRACE_1
2019-05-15 21:41:19 -Generating unique operation named: listUsingGET_10
2019-05-15 21:41:19 -Generating unique operation named: removeUsingPOST_18
2019-05-15 21:41:19 -Generating unique operation named: removeUsingPOST_19
2019-05-15 21:41:19 -Generating unique operation named: saveUsingPOST_9
2019-05-15 21:41:19 -Generating unique operation named: updateUsingPOST_10
2019-05-15 21:41:19 -Generating unique operation named: listUsingGET_11
2019-05-15 21:41:19 -Generating unique operation named: removeUsingPOST_20
2019-05-15 21:41:19 -Generating unique operation named: welcomeUsingGET_1
2019-05-15 21:41:19 -Generating unique operation named: addUsingGET_10
2019-05-15 21:41:19 -Generating unique operation named: editUsingGET_11
2019-05-15 21:41:19 -Generating unique operation named: listUsingGET_12
2019-05-15 21:41:19 -Generating unique operation named: removeUsingPOST_21
2019-05-15 21:41:19 -Generating unique operation named: saveUsingPOST_10
2019-05-15 21:41:19 -Generating unique operation named: treeUsingGET_1
2019-05-15 21:41:19 -Generating unique operation named: treeUsingGET_2
2019-05-15 21:41:19 -Generating unique operation named: updateUsingPOST_11
2019-05-15 21:41:19 -Generating unique operation named: addUsingGET_11
2019-05-15 21:41:19 -Generating unique operation named: editUsingGET_12
2019-05-15 21:41:19 -Generating unique operation named: listUsingGET_13
2019-05-15 21:41:19 -Generating unique operation named: removeUsingPOST_22
2019-05-15 21:41:19 -Generating unique operation named: removeUsingPOST_23
2019-05-15 21:41:19 -Generating unique operation named: saveUsingPOST_11
2019-05-15 21:41:19 -Generating unique operation named: updateUsingGET_8
2019-05-15 21:41:19 -Generating unique operation named: updateUsingHEAD_8
2019-05-15 21:41:19 -Generating unique operation named: updateUsingPOST_12
2019-05-15 21:41:19 -Generating unique operation named: updateUsingPUT_8
2019-05-15 21:41:19 -Generating unique operation named: updateUsingPATCH_8
2019-05-15 21:41:19 -Generating unique operation named: updateUsingDELETE_8
2019-05-15 21:41:19 -Generating unique operation named: updateUsingOPTIONS_8
2019-05-15 21:41:19 -Generating unique operation named: updateUsingTRACE_8
2019-05-15 21:41:19 -Generating unique operation named: addUsingGET_12
2019-05-15 21:41:19 -Generating unique operation named: editUsingGET_13
2019-05-15 21:41:19 -Generating unique operation named: listUsingGET_14
2019-05-15 21:41:19 -Generating unique operation named: removeUsingPOST_24
2019-05-15 21:41:19 -Generating unique operation named: removeUsingPOST_25
2019-05-15 21:41:19 -Generating unique operation named: saveUsingPOST_12
2019-05-15 21:41:19 -Generating unique operation named: updateUsingGET_9
2019-05-15 21:41:19 -Generating unique operation named: updateUsingHEAD_9
2019-05-15 21:41:19 -Generating unique operation named: updateUsingPOST_13
2019-05-15 21:41:19 -Generating unique operation named: updateUsingPUT_9
2019-05-15 21:41:19 -Generating unique operation named: updateUsingPATCH_9
2019-05-15 21:41:19 -Generating unique operation named: updateUsingDELETE_9
2019-05-15 21:41:19 -Generating unique operation named: updateUsingOPTIONS_9
2019-05-15 21:41:19 -Generating unique operation named: updateUsingTRACE_9
2019-05-15 21:41:19 -Generating unique operation named: addUsingGET_13
2019-05-15 21:41:19 -Generating unique operation named: batchRemoveUsingPOST_1
2019-05-15 21:41:19 -Generating unique operation named: editUsingGET_14
2019-05-15 21:41:19 -Generating unique operation named: listUsingGET_15
2019-05-15 21:41:19 -Generating unique operation named: saveUsingPOST_13
2019-05-15 21:41:19 -Generating unique operation named: saveUsingPOST_14
2019-05-15 21:41:19 -Generating unique operation named: updateUsingPOST_14
2019-05-15 21:41:19 -Generating unique operation named: listUsingGET_16
2019-05-15 21:41:19 -Generating unique operation named: listUsingHEAD_1
2019-05-15 21:41:19 -Generating unique operation named: listUsingPOST_1
2019-05-15 21:41:19 -Generating unique operation named: listUsingPUT_1
2019-05-15 21:41:19 -Generating unique operation named: listUsingPATCH_1
2019-05-15 21:41:19 -Generating unique operation named: listUsingDELETE_1
2019-05-15 21:41:19 -Generating unique operation named: listUsingOPTIONS_1
2019-05-15 21:41:19 -Generating unique operation named: listUsingTRACE_1
2019-05-15 21:41:19 -Generating unique operation named: countDDUsingGET_1
2019-05-15 21:41:19 -Generating unique operation named: exportDDUsingGET_1
2019-05-15 21:41:19 -Generating unique operation named: getCountYYUsingPOST_1
2019-05-15 21:41:19 -Generating unique operation named: getCountMMUsingPOST_1
2019-05-15 21:41:19 -Generating unique operation named: addUsingGET_14
2019-05-15 21:41:20 -Generating unique operation named: batchRemoveUsingPOST_2
2019-05-15 21:41:20 -Generating unique operation named: editUsingGET_15
2019-05-15 21:41:20 -Generating unique operation named: listUsingGET_17
2019-05-15 21:41:20 -Generating unique operation named: removeUsingPOST_26
2019-05-15 21:41:20 -Generating unique operation named: saveUsingPOST_15
2019-05-15 21:41:20 -Generating unique operation named: treeUsingGET_3
2019-05-15 21:41:20 -Generating unique operation named: treeViewUsingGET_1
2019-05-15 21:41:20 -Generating unique operation named: updateUsingPOST_15
2019-05-15 21:41:20 -Generating unique operation named: addUsingGET_15
2019-05-15 21:41:20 -Generating unique operation named: editUsingGET_16
2019-05-15 21:41:20 -Generating unique operation named: exprotExcelUsingGET_4
2019-05-15 21:41:20 -Generating unique operation named: listUsingGET_18
2019-05-15 21:41:20 -Generating unique operation named: removeUsingPOST_27
2019-05-15 21:41:20 -Generating unique operation named: removeUsingPOST_28
2019-05-15 21:41:20 -Generating unique operation named: saveUsingPOST_16
2019-05-15 21:41:20 -Generating unique operation named: updateUsingGET_10
2019-05-15 21:41:20 -Generating unique operation named: updateUsingHEAD_10
2019-05-15 21:41:20 -Generating unique operation named: updateUsingPOST_16
2019-05-15 21:41:20 -Generating unique operation named: updateUsingPUT_10
2019-05-15 21:41:20 -Generating unique operation named: updateUsingPATCH_10
2019-05-15 21:41:20 -Generating unique operation named: updateUsingDELETE_10
2019-05-15 21:41:20 -Generating unique operation named: updateUsingOPTIONS_10
2019-05-15 21:41:20 -Generating unique operation named: updateUsingTRACE_10
2019-05-15 21:41:20 -Generating unique operation named: exprotExcelUsingGET_5
2019-05-15 21:41:20 -Generating unique operation named: addUsingGET_16
2019-05-15 21:41:20 -Generating unique operation named: editUsingGET_17
2019-05-15 21:41:20 -Generating unique operation named: listUsingGET_19
2019-05-15 21:41:20 -Generating unique operation named: removeUsingPOST_29
2019-05-15 21:41:20 -Generating unique operation named: removeUsingPOST_30
2019-05-15 21:41:20 -Generating unique operation named: saveUsingPOST_17
2019-05-15 21:41:20 -Generating unique operation named: updateUsingGET_11
2019-05-15 21:41:20 -Generating unique operation named: updateUsingHEAD_11
2019-05-15 21:41:20 -Generating unique operation named: updateUsingPOST_17
2019-05-15 21:41:20 -Generating unique operation named: updateUsingPUT_11
2019-05-15 21:41:20 -Generating unique operation named: updateUsingPATCH_11
2019-05-15 21:41:20 -Generating unique operation named: updateUsingDELETE_11
2019-05-15 21:41:20 -Generating unique operation named: updateUsingOPTIONS_11
2019-05-15 21:41:20 -Generating unique operation named: updateUsingTRACE_11
2019-05-15 21:41:20 -Generating unique operation named: addUsingGET_17
2019-05-15 21:41:20 -Generating unique operation named: editUsingGET_18
2019-05-15 21:41:20 -Generating unique operation named: listUsingGET_20
2019-05-15 21:41:20 -Generating unique operation named: removeUsingPOST_31
2019-05-15 21:41:20 -Generating unique operation named: removeUsingPOST_32
2019-05-15 21:41:20 -Generating unique operation named: saveUsingPOST_18
2019-05-15 21:41:20 -Generating unique operation named: updateUsingGET_12
2019-05-15 21:41:20 -Generating unique operation named: updateUsingHEAD_12
2019-05-15 21:41:20 -Generating unique operation named: updateUsingPOST_18
2019-05-15 21:41:20 -Generating unique operation named: updateUsingPUT_12
2019-05-15 21:41:20 -Generating unique operation named: updateUsingPATCH_12
2019-05-15 21:41:20 -Generating unique operation named: updateUsingDELETE_12
2019-05-15 21:41:20 -Generating unique operation named: updateUsingOPTIONS_12
2019-05-15 21:41:20 -Generating unique operation named: updateUsingTRACE_12
2019-05-15 21:41:20 -Starting Quartz Scheduler now
2019-05-15 21:41:20 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED started.
2019-05-15 21:41:20 -Starting...
2019-05-15 21:41:20 -BrokerAvailabilityEvent[available=true, SimpleBrokerMessageHandler [DefaultSubscriptionRegistry[cache[0 destination(s)], registry[0 sessions]]]]
2019-05-15 21:41:20 -Started.
2019-05-15 21:41:20 -Starting ProtocolHandler ["http-nio-8081"]
2019-05-15 21:41:20 -Using a shared selector for servlet write/read
2019-05-15 21:41:20 -Tomcat started on port(s): 8081 (http) with context path ''
2019-05-15 21:41:20 -Started BootdoApplication in 27.712 seconds (JVM running for 28.517)
2019-05-15 21:41:20 -==>  Preparing: select `id`,`cron_expression`,`method_name`,`is_concurrent`,`description`,`update_by`,`bean_class`,`create_date`,`job_status`,`job_group`,`update_date`,`create_by`,`spring_bean`,`job_name` from sys_task order by id desc 
2019-05-15 21:41:20 -==> Parameters: 
2019-05-15 21:41:20 -<==      Total: 1
2019-05-15 21:41:40 -Initializing Spring FrameworkServlet 'dispatcherServlet'
2019-05-15 21:41:40 -FrameworkServlet 'dispatcherServlet': initialization started
2019-05-15 21:41:40 -FrameworkServlet 'dispatcherServlet': initialization completed in 52 ms
2019-05-15 21:41:40 -Enabling session validation scheduler...
2019-05-15 21:41:40 -请求地址 : http://localhost:8081/login;JSESSIONID=373a83e1-6b8d-4b0b-8085-7463b54a4681
2019-05-15 21:41:40 -HTTP METHOD : GET
2019-05-15 21:41:40 -CLASS_METHOD : com.bootdo.system.controller.LoginController.login
2019-05-15 21:41:40 -参数 : [{}]
2019-05-15 21:41:40 -耗时 : 3
2019-05-15 21:41:40 -返回值 : login
2019-05-15 21:41:41 -请求地址 : http://localhost:8081/getVerify
2019-05-15 21:41:41 -HTTP METHOD : GET
2019-05-15 21:41:41 -CLASS_METHOD : com.bootdo.system.controller.LoginController.getVerify
2019-05-15 21:41:41 -参数 : [org.apache.shiro.web.servlet.ShiroHttpServletRequest@47fe0368, org.apache.shiro.web.servlet.ShiroHttpServletResponse@4939e5e7]
2019-05-15 21:41:42 -3421
2019-05-15 21:41:42 -耗时 : 651
2019-05-15 21:41:42 -返回值 : null
2019-05-15 21:41:50 -请求地址 : http://localhost:8081/login
2019-05-15 21:41:50 -HTTP METHOD : POST
2019-05-15 21:41:50 -CLASS_METHOD : com.bootdo.system.controller.LoginController.ajaxLogin
2019-05-15 21:41:50 -参数 : [admin, 111111, 3421, org.apache.shiro.web.servlet.ShiroHttpServletRequest@2d4bb7ca]
2019-05-15 21:41:50 -==>  Preparing: select `user_id`,`username`,`name`,`password`,`dept_id`,`email`,`mobile`,`status`,`user_id_create`,`gmt_create`,`gmt_modified`,`sex`,`birth`,`pic_id`,`live_address`,`hobby`,`province`,`city`,`district` from sys_user WHERE username = ? order by user_id desc 
2019-05-15 21:41:50 -==> Parameters: admin(String)
2019-05-15 21:41:50 -<==      Total: 1
2019-05-15 21:41:50 -耗时 : 157
2019-05-15 21:41:50 -返回值 : {msg=操作成功, code=0}
2019-05-15 21:41:50 -More than one TaskExecutor bean found within the context, and none is named 'taskExecutor'. Mark one of them as primary or name it 'taskExecutor' (possibly as an alias) in order to use it for async processing: [clientInboundChannelExecutor, clientOutboundChannelExecutor, brokerChannelExecutor, messageBrokerTaskScheduler]
2019-05-15 21:41:50 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-05-15 21:41:50 -==> Parameters: 1(Long), admin(String), 登录(String), 157(Integer), com.bootdo.system.controller.LoginController.ajaxLogin()(String), null, 127.0.0.1(String), 2019-05-15 21:41:50.516(Timestamp)
2019-05-15 21:41:50 -请求地址 : http://localhost:8081/index
2019-05-15 21:41:50 -HTTP METHOD : GET
2019-05-15 21:41:50 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2019-05-15 21:41:50 -参数 : [{}]
2019-05-15 21:41:50 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2019-05-15 21:41:50 -==> Parameters: 1(Long)
2019-05-15 21:41:50 -<==    Updates: 1
2019-05-15 21:41:50 -<==      Total: 49
2019-05-15 21:41:50 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2019-05-15 21:41:50 -==> Parameters: 138(Long)
2019-05-15 21:41:50 -<==      Total: 1
2019-05-15 21:41:50 -耗时 : 253
2019-05-15 21:41:50 -返回值 : index_v1
2019-05-15 21:41:50 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-05-15 21:41:50 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 254(Integer), com.bootdo.system.controller.LoginController.index()(String), {"menus":[{"attributes":{"icon":"fa fa-money","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-money","url":"/moneyList/moneyList"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"102","parentId":"106","text":"现金缴费"},{"attributes":{"icon":"fa fa-book","url":"/moneyLog/elecLog"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"107","parentId":"106","text":"缴费记录"}],"hasChildren":true,"hasParent":false,"id":"106","parentId":"0","text":"收费管理"},{"attributes":{"icon":"fa fa-lightbulb-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/elec/elec"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"121","parentId":"103","text":"电费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"elec/elecInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"122","parentId":"103","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"elec/elecUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"123","parentId":"103","text":"电表上传"},{"attributes":{"icon":"fa fa-cc","url":"/elec/elecPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"124","parentId":"103","text":"电价管理"}],"hasChildren":true,"hasParent":false,"id":"103","parentId":"0","text":"电费管理"},{"attributes":{"icon":"fa fa-tint","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/water/water"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"117","parentId":"105","text":"水费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"water/waterInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"118","parentId":"105","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"water/waterUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"119","parentId":"105","text":"水费生成"},{"attributes":{"icon":"fa fa-cc","url":"/water/waterPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"120","parentId":"105","text":"水价管理"}],"hasChildren":true,"hasParent":false,"id":"105","parentId":"0","text":"水费管理"},{"attributes":{"icon":"fa fa-fire","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-user-secret","url":"/heat/heat"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"113","parentId":"104","text":"暖费用户"},{"attributes":{"icon":"fa fa-file-excel-o","url":"heat/heatInto"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"114","parentId":"104","text":"工资代扣"},{"attributes":{"icon":"fa fa-cloud-upload","url":"heat/heatUpLoad"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"115","parentId":"104","text":"暖费生成"},{"attributes":{"icon":"","url":"/heat/heatPrice"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"116","parentId":"104","text":"暖价管理"}],"hasChildren":true,"hasParent":false,"id":"104","parentId":"0","text":"暖费管理"},{"attributes":{"icon":"fa fa-vcard-o","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-bomb","url":"/print/print"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"149","parentId":"108","text":"票据记录"}],"hasChildren":true,"hasParent":false,"id":"108","parentId":"0","text":"票据管理"},{"attributes":{"icon":"fa fa-bar-chart","url":""},"checked":false,"children":[{"attributes":{"icon":"fa fa-area-chart","url":"/chart/graph_echarts.html"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","text":"百度chart"},{"attributes":{"icon":"fa fa-sun-o","url":"charts/countDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"109","parentId":"97","text":"日统计报表"},{"attributes":{"icon":"fa fa-calendar","url":"charts/tableDD"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"161","parentId":"97","text":"日统计表格"},{"attributes":{"icon":"fa fa-registered","url":"charts/countMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"110","parentId":"97","text":"月统计报表"},{"attributes":{"icon":"fa fa-building-o","url":"charts/tableElecMM"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"162","parentId":"97","text":"月统计表格"},{"attributes":{"icon":"fa fa-support","url":"charts/countYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"111","parentId":"97","text":"年统计报表"},{"attributes":{"icon":"fa fa-book","url":"charts/tableElecYY"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"163","parentId":"97","text":"年统计表格"},{"attributes":{"icon":"fa fa-money","url":"charts/countOwe"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"155","parentId":"97","text":"欠费报表图"},{"attributes":{"icon":"fa fa-tachometer","url":"charts/countRun"},"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"112"(String), 127.0.0.1(String), 2019-05-15 21:41:50.903(Timestamp)
2019-05-15 21:41:51 -<==    Updates: 1
2019-05-15 21:41:51 -请求地址 : http://localhost:8081/main
2019-05-15 21:41:51 -HTTP METHOD : GET
2019-05-15 21:41:51 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-05-15 21:41:51 -参数 : []
2019-05-15 21:41:51 -耗时 : 0
2019-05-15 21:41:51 -返回值 : main
2019-05-15 21:41:51 -请求地址 : http://localhost:8081/oa/notify/message
2019-05-15 21:41:51 -HTTP METHOD : GET
2019-05-15 21:41:51 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2019-05-15 21:41:51 -参数 : []
2019-05-15 21:41:51 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2019-05-15 21:41:51 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2019-05-15 21:41:51 -<==      Total: 0
2019-05-15 21:41:51 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2019-05-15 21:41:51 -==> Parameters: 1(Long), 0(String)
2019-05-15 21:41:51 -<==      Total: 1
2019-05-15 21:41:51 -耗时 : 38
2019-05-15 21:41:51 -返回值 : com.bootdo.common.utils.PageUtils@190c5b58
2019-05-15 21:41:51 -请求地址 : http://localhost:8081/main
2019-05-15 21:41:51 -HTTP METHOD : GET
2019-05-15 21:41:51 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2019-05-15 21:41:51 -参数 : []
2019-05-15 21:41:51 -耗时 : 0
2019-05-15 21:41:51 -返回值 : main
2019-05-15 21:41:56 -==>  Preparing: select distinct m.perms from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id = ur.role_id where ur.user_id = ? 
2019-05-15 21:41:56 -==> Parameters: 1(Long)
2019-05-15 21:41:56 -<==      Total: 93
2019-05-15 21:41:56 -请求地址 : http://localhost:8081/charts/tableElecYY
2019-05-15 21:41:56 -HTTP METHOD : GET
2019-05-15 21:41:56 -CLASS_METHOD : com.bootdo.charts.controller.tableElecYYController.tableElecYY
2019-05-15 21:41:56 -参数 : []
2019-05-15 21:41:56 -耗时 : 11
2019-05-15 21:41:56 -返回值 : charts/tableElecYY
2019-05-15 21:41:56 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-05-15 21:41:56 -HTTP METHOD : GET
2019-05-15 21:41:56 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-05-15 21:41:56 -参数 : [userType]
2019-05-15 21:41:56 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-05-15 21:41:56 -==> Parameters: userType(String)
2019-05-15 21:41:56 -<==      Total: 4
2019-05-15 21:41:56 -耗时 : 27
2019-05-15 21:41:56 -返回值 : [DictDO{id=145, name='银行转账', value='D', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=144, name='微信支付', value='C', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-05-15 21:41:57 -请求地址 : http://localhost:8081/charts/tableWaterYY
2019-05-15 21:41:57 -HTTP METHOD : GET
2019-05-15 21:41:57 -CLASS_METHOD : com.bootdo.charts.controller.tableWaterYYController.tableWaterYY
2019-05-15 21:41:57 -参数 : []
2019-05-15 21:41:57 -耗时 : 10
2019-05-15 21:41:57 -返回值 : charts/tableWaterYY
2019-05-15 21:41:57 -请求地址 : http://localhost:8081/common/dict/list/userType
2019-05-15 21:41:57 -HTTP METHOD : GET
2019-05-15 21:41:57 -CLASS_METHOD : com.bootdo.common.controller.DictController.listByType
2019-05-15 21:41:57 -参数 : [userType]
2019-05-15 21:41:57 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2019-05-15 21:41:57 -==> Parameters: userType(String)
2019-05-15 21:41:57 -<==      Total: 4
2019-05-15 21:41:57 -耗时 : 6
2019-05-15 21:41:57 -返回值 : [DictDO{id=145, name='银行转账', value='D', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=144, name='微信支付', value='C', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=124, name='工资代扣', value='B', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}, DictDO{id=123, name='现金缴费', value='A', type='userType', description='用户方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='', delFlag='null'}]
2019-05-15 21:42:14 -WebSocketSession[1 current WS(1)-HttpStream(0)-HttpPoll(0), 1 total, 0 closed abnormally (0 connect failure, 0 send limit, 0 transport error)], stompSubProtocol[processed CONNECT(1)-CONNECTED(1)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 8, active threads = 0, queued tasks = 0, completed tasks = 9], outboundChannelpool size = 1, active threads = 0, queued tasks = 0, completed tasks = 1], sockJsScheduler[pool size = 4, active threads = 1, queued tasks = 2, completed tasks = 5]
2019-05-15 21:42:24 -请求地址 : http://localhost:8081/system/sysDept/treeView
2019-05-15 21:42:24 -HTTP METHOD : GET
2019-05-15 21:42:24 -CLASS_METHOD : com.bootdo.system.controller.DeptController.treeView
2019-05-15 21:42:24 -参数 : []
2019-05-15 21:42:24 -耗时 : 0
2019-05-15 21:42:24 -返回值 : system/dept/deptTree
2019-05-15 21:42:25 -请求地址 : http://localhost:8081/system/sysDept/tree
2019-05-15 21:42:25 -HTTP METHOD : GET
2019-05-15 21:42:25 -CLASS_METHOD : com.bootdo.system.controller.DeptController.tree
2019-05-15 21:42:25 -参数 : []
2019-05-15 21:42:25 -==>  Preparing: select `dept_id`,`parent_id`,`name`,`order_num`,`del_flag` from sys_dept order by dept_id desc 
2019-05-15 21:42:25 -==> Parameters: 
2019-05-15 21:42:25 -<==      Total: 3
2019-05-15 21:42:25 -耗时 : 24
2019-05-15 21:42:25 -返回值 : {"checked":false,"children":[{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"3","parentId":"1","state":{"opened":true},"text":"牙星"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"2","parentId":"1","state":{"opened":true},"text":"五九"}],"hasChildren":true,"hasParent":false,"id":"1","parentId":"0","state":{"opened":true},"text":"总公司"}
2019-05-15 21:42:27 -请求地址 : http://localhost:8081/charts/tableWaterYY/tableWaterYY
2019-05-15 21:42:27 -HTTP METHOD : POST
2019-05-15 21:42:27 -CLASS_METHOD : com.bootdo.charts.controller.tableWaterYYController.tableWaterYY
2019-05-15 21:42:27 -参数 : [com.bootdo.water.vo.WaterVo@67376c0e, com.bootdo.moneyLog.vo.WaterLogVo@139247f5]
2019-05-15 21:42:27 -==>  Preparing: select COUNT(*) from water WHERE `water_sum` >= 0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 21:42:27 -==> Parameters: 2018-12(String), 1(String), 2(String)
2019-05-15 21:42:27 -<==      Total: 1
2019-05-15 21:42:27 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE `water_sum` >= 0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 21:42:27 -==> Parameters: 2018-12(String), 1(String), 2(String)
2019-05-15 21:42:27 -<==      Total: 1
2019-05-15 21:42:27 -==>  Preparing: select COUNT(*) from water WHERE water_sum <0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 21:42:27 -==> Parameters: 2018-12(String), 1(String), 2(String)
2019-05-15 21:42:27 -<==      Total: 1
2019-05-15 21:42:27 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE water_sum <0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 21:42:27 -==> Parameters: 2018-12(String), 1(String), 2(String)
2019-05-15 21:42:27 -<==      Total: 1
2019-05-15 21:42:27 -==>  Preparing: select COUNT(*) from water WHERE `create_time` LIKE CONCAT('%',?,'%') and water_type = ? and user_org = ? 
2019-05-15 21:42:27 -==> Parameters: 2019(String), 1(String), 2(String)
2019-05-15 21:42:27 -<==      Total: 1
2019-05-15 21:42:27 -==>  Preparing: select ifnull(SUM(water_cost),0) from water WHERE `create_time` LIKE CONCAT('%',?,'%') and water_type = ? and user_org = ? 
2019-05-15 21:42:27 -==> Parameters: 2019(String), 1(String), 2(String)
2019-05-15 21:42:27 -<==      Total: 1
2019-05-15 21:42:27 -==>  Preparing: select COUNT(*) from water_log WHERE `create_time` LIKE CONCAT('%',?,'%') and water_type = ? and user_org = ? 
2019-05-15 21:42:27 -==> Parameters: 2019(String), 1(String), 2(String)
2019-05-15 21:42:27 -<==      Total: 1
2019-05-15 21:42:27 -==>  Preparing: select ifnull(SUM(water_money),0) from water_log WHERE `create_time` LIKE CONCAT('%',?,'%') and water_type = ? and user_org = ? 
2019-05-15 21:42:27 -==> Parameters: 2019(String), 1(String), 2(String)
2019-05-15 21:42:27 -<==      Total: 1
2019-05-15 21:42:27 -==>  Preparing: select COUNT(*) from water WHERE `water_sum` >= 0 and create_time = (select MAX(create_time) from water where DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ?) and water_type = ? and user_org = ? 
2019-05-15 21:42:27 -==> Parameters: 2019(String), 1(String), 2(String)
2019-05-15 21:42:27 -<==      Total: 1
2019-05-15 21:42:27 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE `water_sum` >= 0 and create_time = (select MAX(create_time) from water where DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ?) and water_type = ? and user_org = ? 
2019-05-15 21:42:27 -==> Parameters: 2019(String), 1(String), 2(String)
2019-05-15 21:42:27 -<==      Total: 1
2019-05-15 21:42:27 -==>  Preparing: select COUNT(*) from water WHERE water_sum <0 and create_time = (select MAX(create_time) from water where DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ?) and water_type = ? and user_org = ? 
2019-05-15 21:42:27 -==> Parameters: 2019(String), 1(String), 2(String)
2019-05-15 21:42:27 -<==      Total: 1
2019-05-15 21:42:27 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE water_sum <0 and create_time = (select MAX(create_time) from water where DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ?) and water_type = ? and user_org = ? 
2019-05-15 21:42:27 -==> Parameters: 2019(String), 1(String), 2(String)
2019-05-15 21:42:27 -<==      Total: 1
2019-05-15 21:42:27 -==>  Preparing: select COUNT(*) from water WHERE `water_sum` >= 0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 21:42:27 -==> Parameters: 2018-12(String), 2(String), 2(String)
2019-05-15 21:42:27 -<==      Total: 1
2019-05-15 21:42:27 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE `water_sum` >= 0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 21:42:27 -==> Parameters: 2018-12(String), 2(String), 2(String)
2019-05-15 21:42:27 -<==      Total: 1
2019-05-15 21:42:27 -==>  Preparing: select COUNT(*) from water WHERE water_sum <0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 21:42:27 -==> Parameters: 2018-12(String), 2(String), 2(String)
2019-05-15 21:42:27 -<==      Total: 1
2019-05-15 21:42:27 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE water_sum <0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 21:42:27 -==> Parameters: 2018-12(String), 2(String), 2(String)
2019-05-15 21:42:27 -<==      Total: 1
2019-05-15 21:42:27 -==>  Preparing: select COUNT(*) from water WHERE `create_time` LIKE CONCAT('%',?,'%') and water_type = ? and user_org = ? 
2019-05-15 21:42:27 -==> Parameters: 2019(String), 2(String), 2(String)
2019-05-15 21:42:27 -<==      Total: 1
2019-05-15 21:42:27 -==>  Preparing: select ifnull(SUM(water_cost),0) from water WHERE `create_time` LIKE CONCAT('%',?,'%') and water_type = ? and user_org = ? 
2019-05-15 21:42:27 -==> Parameters: 2019(String), 2(String), 2(String)
2019-05-15 21:42:27 -<==      Total: 1
2019-05-15 21:42:27 -==>  Preparing: select COUNT(*) from water_log WHERE `create_time` LIKE CONCAT('%',?,'%') and water_type = ? and user_org = ? 
2019-05-15 21:42:27 -==> Parameters: 2019(String), 2(String), 2(String)
2019-05-15 21:42:27 -<==      Total: 1
2019-05-15 21:42:27 -==>  Preparing: select ifnull(SUM(water_money),0) from water_log WHERE `create_time` LIKE CONCAT('%',?,'%') and water_type = ? and user_org = ? 
2019-05-15 21:42:27 -==> Parameters: 2019(String), 2(String), 2(String)
2019-05-15 21:42:27 -<==      Total: 1
2019-05-15 21:42:27 -==>  Preparing: select COUNT(*) from water WHERE `water_sum` >= 0 and create_time = (select MAX(create_time) from water where DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ?) and water_type = ? and user_org = ? 
2019-05-15 21:42:27 -==> Parameters: 2019(String), 2(String), 2(String)
2019-05-15 21:42:27 -<==      Total: 1
2019-05-15 21:42:27 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE `water_sum` >= 0 and create_time = (select MAX(create_time) from water where DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ?) and water_type = ? and user_org = ? 
2019-05-15 21:42:27 -==> Parameters: 2019(String), 2(String), 2(String)
2019-05-15 21:42:27 -<==      Total: 1
2019-05-15 21:42:27 -==>  Preparing: select COUNT(*) from water WHERE water_sum <0 and create_time = (select MAX(create_time) from water where DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ?) and water_type = ? and user_org = ? 
2019-05-15 21:42:27 -==> Parameters: 2019(String), 2(String), 2(String)
2019-05-15 21:42:27 -<==      Total: 1
2019-05-15 21:42:27 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE water_sum <0 and create_time = (select MAX(create_time) from water where DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ?) and water_type = ? and user_org = ? 
2019-05-15 21:42:27 -==> Parameters: 2019(String), 2(String), 2(String)
2019-05-15 21:42:27 -<==      Total: 1
2019-05-15 21:42:27 -==>  Preparing: select COUNT(*) from water WHERE `water_sum` >= 0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 21:42:27 -==> Parameters: 2018-12(String), 3(String), 2(String)
2019-05-15 21:42:27 -<==      Total: 1
2019-05-15 21:42:27 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE `water_sum` >= 0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 21:42:27 -==> Parameters: 2018-12(String), 3(String), 2(String)
2019-05-15 21:42:27 -<==      Total: 1
2019-05-15 21:42:27 -==>  Preparing: select COUNT(*) from water WHERE water_sum <0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 21:42:27 -==> Parameters: 2018-12(String), 3(String), 2(String)
2019-05-15 21:42:27 -<==      Total: 1
2019-05-15 21:42:27 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE water_sum <0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 21:42:27 -==> Parameters: 2018-12(String), 3(String), 2(String)
2019-05-15 21:42:27 -<==      Total: 1
2019-05-15 21:42:27 -==>  Preparing: select COUNT(*) from water WHERE `create_time` LIKE CONCAT('%',?,'%') and water_type = ? and user_org = ? 
2019-05-15 21:42:27 -==> Parameters: 2019(String), 3(String), 2(String)
2019-05-15 21:42:27 -<==      Total: 1
2019-05-15 21:42:27 -==>  Preparing: select ifnull(SUM(water_cost),0) from water WHERE `create_time` LIKE CONCAT('%',?,'%') and water_type = ? and user_org = ? 
2019-05-15 21:42:27 -==> Parameters: 2019(String), 3(String), 2(String)
2019-05-15 21:42:27 -<==      Total: 1
2019-05-15 21:42:27 -==>  Preparing: select COUNT(*) from water_log WHERE `create_time` LIKE CONCAT('%',?,'%') and water_type = ? and user_org = ? 
2019-05-15 21:42:27 -==> Parameters: 2019(String), 3(String), 2(String)
2019-05-15 21:42:27 -<==      Total: 1
2019-05-15 21:42:27 -==>  Preparing: select ifnull(SUM(water_money),0) from water_log WHERE `create_time` LIKE CONCAT('%',?,'%') and water_type = ? and user_org = ? 
2019-05-15 21:42:27 -==> Parameters: 2019(String), 3(String), 2(String)
2019-05-15 21:42:27 -<==      Total: 1
2019-05-15 21:42:27 -==>  Preparing: select COUNT(*) from water WHERE `water_sum` >= 0 and create_time = (select MAX(create_time) from water where DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ?) and water_type = ? and user_org = ? 
2019-05-15 21:42:27 -==> Parameters: 2019(String), 3(String), 2(String)
2019-05-15 21:42:27 -<==      Total: 1
2019-05-15 21:42:27 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE `water_sum` >= 0 and create_time = (select MAX(create_time) from water where DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ?) and water_type = ? and user_org = ? 
2019-05-15 21:42:27 -==> Parameters: 2019(String), 3(String), 2(String)
2019-05-15 21:42:27 -<==      Total: 1
2019-05-15 21:42:27 -==>  Preparing: select COUNT(*) from water WHERE water_sum <0 and create_time = (select MAX(create_time) from water where DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ?) and water_type = ? and user_org = ? 
2019-05-15 21:42:27 -==> Parameters: 2019(String), 3(String), 2(String)
2019-05-15 21:42:27 -<==      Total: 1
2019-05-15 21:42:27 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE water_sum <0 and create_time = (select MAX(create_time) from water where DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ?) and water_type = ? and user_org = ? 
2019-05-15 21:42:27 -==> Parameters: 2019(String), 3(String), 2(String)
2019-05-15 21:42:27 -<==      Total: 1
2019-05-15 21:42:27 -==>  Preparing: select COUNT(*) from water WHERE `water_sum` >= 0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 21:42:27 -==> Parameters: 2018-12(String), 4(String), 2(String)
2019-05-15 21:42:27 -<==      Total: 1
2019-05-15 21:42:27 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE `water_sum` >= 0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 21:42:27 -==> Parameters: 2018-12(String), 4(String), 2(String)
2019-05-15 21:42:27 -<==      Total: 1
2019-05-15 21:42:27 -==>  Preparing: select COUNT(*) from water WHERE water_sum <0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 21:42:27 -==> Parameters: 2018-12(String), 4(String), 2(String)
2019-05-15 21:42:27 -<==      Total: 1
2019-05-15 21:42:27 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE water_sum <0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 21:42:27 -==> Parameters: 2018-12(String), 4(String), 2(String)
2019-05-15 21:42:27 -<==      Total: 1
2019-05-15 21:42:27 -==>  Preparing: select COUNT(*) from water WHERE `create_time` LIKE CONCAT('%',?,'%') and water_type = ? and user_org = ? 
2019-05-15 21:42:27 -==> Parameters: 2019(String), 4(String), 2(String)
2019-05-15 21:42:27 -<==      Total: 1
2019-05-15 21:42:27 -==>  Preparing: select ifnull(SUM(water_cost),0) from water WHERE `create_time` LIKE CONCAT('%',?,'%') and water_type = ? and user_org = ? 
2019-05-15 21:42:27 -==> Parameters: 2019(String), 4(String), 2(String)
2019-05-15 21:42:27 -<==      Total: 1
2019-05-15 21:42:27 -==>  Preparing: select COUNT(*) from water_log WHERE `create_time` LIKE CONCAT('%',?,'%') and water_type = ? and user_org = ? 
2019-05-15 21:42:27 -==> Parameters: 2019(String), 4(String), 2(String)
2019-05-15 21:42:27 -<==      Total: 1
2019-05-15 21:42:27 -==>  Preparing: select ifnull(SUM(water_money),0) from water_log WHERE `create_time` LIKE CONCAT('%',?,'%') and water_type = ? and user_org = ? 
2019-05-15 21:42:27 -==> Parameters: 2019(String), 4(String), 2(String)
2019-05-15 21:42:27 -<==      Total: 1
2019-05-15 21:42:27 -==>  Preparing: select COUNT(*) from water WHERE `water_sum` >= 0 and create_time = (select MAX(create_time) from water where DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ?) and water_type = ? and user_org = ? 
2019-05-15 21:42:27 -==> Parameters: 2019(String), 4(String), 2(String)
2019-05-15 21:42:27 -<==      Total: 1
2019-05-15 21:42:27 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE `water_sum` >= 0 and create_time = (select MAX(create_time) from water where DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ?) and water_type = ? and user_org = ? 
2019-05-15 21:42:27 -==> Parameters: 2019(String), 4(String), 2(String)
2019-05-15 21:42:27 -<==      Total: 1
2019-05-15 21:42:27 -==>  Preparing: select COUNT(*) from water WHERE water_sum <0 and create_time = (select MAX(create_time) from water where DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ?) and water_type = ? and user_org = ? 
2019-05-15 21:42:27 -==> Parameters: 2019(String), 4(String), 2(String)
2019-05-15 21:42:27 -<==      Total: 1
2019-05-15 21:42:27 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE water_sum <0 and create_time = (select MAX(create_time) from water where DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ?) and water_type = ? and user_org = ? 
2019-05-15 21:42:27 -==> Parameters: 2019(String), 4(String), 2(String)
2019-05-15 21:42:27 -<==      Total: 1
2019-05-15 21:42:27 -==>  Preparing: select m_water,s1_water,s2_water,s3_water,water_org from water_price 
2019-05-15 21:42:27 -==> Parameters: 
2019-05-15 21:42:27 -<==      Total: 2
2019-05-15 21:42:27 -耗时 : 165
2019-05-15 21:42:27 -返回值 : {S3TotalhuNew=0, S1WaterCostYYCount =1, S2PreWaterCountYYOld=0, S1OweWaterCountYYNew=0, S2PreWaterCountYYNew=0, S1OweWaterSumYYNew=0, type=2, S3PreWaterSumYYNew=0, TotalPreyuNew=26, MWaterLogYYSum=151, S1OweWaterCountYYOld=1, S1OweWaterSumYYOld=-10, TotalCostyu=40, S3PreWaterSumYYOld=0, MPreWaterCountYYOld=1, S2WaterCostYYCount =0, S1WaterPrice=10, S1TotalyuOld=-10, TotalPreyuOld=6, S2WaterLogYYCount=1, S3TotalhuOld=0, MPreWaterCountYYNew=2, TotalOwehuNew=1, MWaterCostYYCount =5, S2WaterLogYYSum=60, TotalCosthu=6, S1WaterLogYYCount=2, S3WaterLogYYSum=60, S2OweWaterSumYYOld=0, TotalLogyu=172, MPreWaterSumYYOld=6, S2TotalhuNew=0, MTotalyuOld=6, MPreWaterSumYYNew=25, MWaterPrice=6, S3PreWaterCountYYNew=0, MTotalhuNew=3, MTotalyuNew=16, TotalLoghu=4, S3PreWaterCountYYOld=0, S2TotalhuOld=0, S2TotalyuOld=0, S2OweWaterSumYYNew=0, TotalOweyuOld=-10, S3OweWaterCountYYOld=0, S2TotalyuNew=0, S3WaterLogYYCount=1, S1TotalhuNew=1, MTotalhuOld=1, S3WaterCostYYSum =0, S3OweWaterSumYYOld=0, S1TotalhuOld=1, S2PreWaterSumYYNew=0, TotalPrehuNew=3, MOweWaterSumYYNew=-9, S3OweWaterSumYYNew=0, S2PreWaterSumYYOld=0, TotalOweyuNew=-9, S3TotalyuOld=0, MWaterLogYYCount=2, S3OweWaterCountYYNew=0, S3TotalyuNew=0, TotalPrehuOld=1, S3WaterCostYYCount =0, S1PreWaterCountYYNew=1, S1WaterLogYYSum=21, TotalOwehuOld=1, PriceTotal=16, S2OweWaterCountYYNew=0, S1PreWaterCountYYOld=0, S1WaterCostYYSum =10, MOweWaterSumYYOld=0, S1TotalyuNew=1, MOweWaterCountYYNew=1, MOweWaterCountYYOld=0, S1PreWaterSumYYNew=1, TotalAllhuNew=4, TotalAllyuNew=17, S2WaterCostYYSum =0, TotalAllhuOld=2, S2OweWaterCountYYOld=0, MWaterCostYYSum =30, S1PreWaterSumYYOld=0, TotalAllyuOld=-4}
2019-05-15 21:42:29 -请求地址 : http://localhost:8081/system/sysDept/treeView
2019-05-15 21:42:29 -HTTP METHOD : GET
2019-05-15 21:42:29 -CLASS_METHOD : com.bootdo.system.controller.DeptController.treeView
2019-05-15 21:42:29 -参数 : []
2019-05-15 21:42:29 -耗时 : 0
2019-05-15 21:42:29 -返回值 : system/dept/deptTree
2019-05-15 21:42:30 -请求地址 : http://localhost:8081/system/sysDept/tree
2019-05-15 21:42:30 -HTTP METHOD : GET
2019-05-15 21:42:30 -CLASS_METHOD : com.bootdo.system.controller.DeptController.tree
2019-05-15 21:42:30 -参数 : []
2019-05-15 21:42:30 -==>  Preparing: select `dept_id`,`parent_id`,`name`,`order_num`,`del_flag` from sys_dept order by dept_id desc 
2019-05-15 21:42:30 -==> Parameters: 
2019-05-15 21:42:30 -<==      Total: 3
2019-05-15 21:42:30 -耗时 : 4
2019-05-15 21:42:30 -返回值 : {"checked":false,"children":[{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"3","parentId":"1","state":{"opened":true},"text":"牙星"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"2","parentId":"1","state":{"opened":true},"text":"五九"}],"hasChildren":true,"hasParent":false,"id":"1","parentId":"0","state":{"opened":true},"text":"总公司"}
2019-05-15 21:42:31 -请求地址 : http://localhost:8081/charts/tableWaterYY/tableWaterYY
2019-05-15 21:42:31 -HTTP METHOD : POST
2019-05-15 21:42:31 -CLASS_METHOD : com.bootdo.charts.controller.tableWaterYYController.tableWaterYY
2019-05-15 21:42:31 -参数 : [com.bootdo.water.vo.WaterVo@5b9572e5, com.bootdo.moneyLog.vo.WaterLogVo@13143b4d]
2019-05-15 21:42:31 -==>  Preparing: select COUNT(*) from water WHERE `water_sum` >= 0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 21:42:31 -==> Parameters: 2018-12(String), 1(String), 3(String)
2019-05-15 21:42:31 -<==      Total: 1
2019-05-15 21:42:31 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE `water_sum` >= 0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 21:42:31 -==> Parameters: 2018-12(String), 1(String), 3(String)
2019-05-15 21:42:31 -<==      Total: 1
2019-05-15 21:42:31 -==>  Preparing: select COUNT(*) from water WHERE water_sum <0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 21:42:31 -==> Parameters: 2018-12(String), 1(String), 3(String)
2019-05-15 21:42:31 -<==      Total: 1
2019-05-15 21:42:31 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE water_sum <0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 21:42:31 -==> Parameters: 2018-12(String), 1(String), 3(String)
2019-05-15 21:42:31 -<==      Total: 1
2019-05-15 21:42:31 -==>  Preparing: select COUNT(*) from water WHERE `create_time` LIKE CONCAT('%',?,'%') and water_type = ? and user_org = ? 
2019-05-15 21:42:31 -==> Parameters: 2019(String), 1(String), 3(String)
2019-05-15 21:42:31 -<==      Total: 1
2019-05-15 21:42:31 -==>  Preparing: select ifnull(SUM(water_cost),0) from water WHERE `create_time` LIKE CONCAT('%',?,'%') and water_type = ? and user_org = ? 
2019-05-15 21:42:31 -==> Parameters: 2019(String), 1(String), 3(String)
2019-05-15 21:42:31 -<==      Total: 1
2019-05-15 21:42:31 -==>  Preparing: select COUNT(*) from water_log WHERE `create_time` LIKE CONCAT('%',?,'%') and water_type = ? and user_org = ? 
2019-05-15 21:42:31 -==> Parameters: 2019(String), 1(String), 3(String)
2019-05-15 21:42:31 -<==      Total: 1
2019-05-15 21:42:31 -==>  Preparing: select ifnull(SUM(water_money),0) from water_log WHERE `create_time` LIKE CONCAT('%',?,'%') and water_type = ? and user_org = ? 
2019-05-15 21:42:31 -==> Parameters: 2019(String), 1(String), 3(String)
2019-05-15 21:42:31 -<==      Total: 1
2019-05-15 21:42:31 -==>  Preparing: select COUNT(*) from water WHERE `water_sum` >= 0 and create_time = (select MAX(create_time) from water where DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ?) and water_type = ? and user_org = ? 
2019-05-15 21:42:31 -==> Parameters: 2019(String), 1(String), 3(String)
2019-05-15 21:42:31 -<==      Total: 1
2019-05-15 21:42:31 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE `water_sum` >= 0 and create_time = (select MAX(create_time) from water where DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ?) and water_type = ? and user_org = ? 
2019-05-15 21:42:31 -==> Parameters: 2019(String), 1(String), 3(String)
2019-05-15 21:42:31 -<==      Total: 1
2019-05-15 21:42:31 -==>  Preparing: select COUNT(*) from water WHERE water_sum <0 and create_time = (select MAX(create_time) from water where DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ?) and water_type = ? and user_org = ? 
2019-05-15 21:42:31 -==> Parameters: 2019(String), 1(String), 3(String)
2019-05-15 21:42:31 -<==      Total: 1
2019-05-15 21:42:31 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE water_sum <0 and create_time = (select MAX(create_time) from water where DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ?) and water_type = ? and user_org = ? 
2019-05-15 21:42:31 -==> Parameters: 2019(String), 1(String), 3(String)
2019-05-15 21:42:31 -<==      Total: 1
2019-05-15 21:42:31 -==>  Preparing: select COUNT(*) from water WHERE `water_sum` >= 0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 21:42:31 -==> Parameters: 2018-12(String), 2(String), 3(String)
2019-05-15 21:42:31 -<==      Total: 1
2019-05-15 21:42:31 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE `water_sum` >= 0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 21:42:31 -==> Parameters: 2018-12(String), 2(String), 3(String)
2019-05-15 21:42:31 -<==      Total: 1
2019-05-15 21:42:31 -==>  Preparing: select COUNT(*) from water WHERE water_sum <0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 21:42:31 -==> Parameters: 2018-12(String), 2(String), 3(String)
2019-05-15 21:42:31 -<==      Total: 1
2019-05-15 21:42:31 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE water_sum <0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 21:42:31 -==> Parameters: 2018-12(String), 2(String), 3(String)
2019-05-15 21:42:31 -<==      Total: 1
2019-05-15 21:42:31 -==>  Preparing: select COUNT(*) from water WHERE `create_time` LIKE CONCAT('%',?,'%') and water_type = ? and user_org = ? 
2019-05-15 21:42:31 -==> Parameters: 2019(String), 2(String), 3(String)
2019-05-15 21:42:31 -<==      Total: 1
2019-05-15 21:42:31 -==>  Preparing: select ifnull(SUM(water_cost),0) from water WHERE `create_time` LIKE CONCAT('%',?,'%') and water_type = ? and user_org = ? 
2019-05-15 21:42:31 -==> Parameters: 2019(String), 2(String), 3(String)
2019-05-15 21:42:31 -<==      Total: 1
2019-05-15 21:42:31 -==>  Preparing: select COUNT(*) from water_log WHERE `create_time` LIKE CONCAT('%',?,'%') and water_type = ? and user_org = ? 
2019-05-15 21:42:31 -==> Parameters: 2019(String), 2(String), 3(String)
2019-05-15 21:42:31 -<==      Total: 1
2019-05-15 21:42:31 -==>  Preparing: select ifnull(SUM(water_money),0) from water_log WHERE `create_time` LIKE CONCAT('%',?,'%') and water_type = ? and user_org = ? 
2019-05-15 21:42:31 -==> Parameters: 2019(String), 2(String), 3(String)
2019-05-15 21:42:31 -<==      Total: 1
2019-05-15 21:42:31 -==>  Preparing: select COUNT(*) from water WHERE `water_sum` >= 0 and create_time = (select MAX(create_time) from water where DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ?) and water_type = ? and user_org = ? 
2019-05-15 21:42:31 -==> Parameters: 2019(String), 2(String), 3(String)
2019-05-15 21:42:31 -<==      Total: 1
2019-05-15 21:42:31 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE `water_sum` >= 0 and create_time = (select MAX(create_time) from water where DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ?) and water_type = ? and user_org = ? 
2019-05-15 21:42:31 -==> Parameters: 2019(String), 2(String), 3(String)
2019-05-15 21:42:31 -<==      Total: 1
2019-05-15 21:42:31 -==>  Preparing: select COUNT(*) from water WHERE water_sum <0 and create_time = (select MAX(create_time) from water where DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ?) and water_type = ? and user_org = ? 
2019-05-15 21:42:31 -==> Parameters: 2019(String), 2(String), 3(String)
2019-05-15 21:42:31 -<==      Total: 1
2019-05-15 21:42:31 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE water_sum <0 and create_time = (select MAX(create_time) from water where DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ?) and water_type = ? and user_org = ? 
2019-05-15 21:42:31 -==> Parameters: 2019(String), 2(String), 3(String)
2019-05-15 21:42:31 -<==      Total: 1
2019-05-15 21:42:31 -==>  Preparing: select COUNT(*) from water WHERE `water_sum` >= 0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 21:42:31 -==> Parameters: 2018-12(String), 3(String), 3(String)
2019-05-15 21:42:31 -<==      Total: 1
2019-05-15 21:42:31 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE `water_sum` >= 0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 21:42:31 -==> Parameters: 2018-12(String), 3(String), 3(String)
2019-05-15 21:42:31 -<==      Total: 1
2019-05-15 21:42:31 -==>  Preparing: select COUNT(*) from water WHERE water_sum <0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 21:42:31 -==> Parameters: 2018-12(String), 3(String), 3(String)
2019-05-15 21:42:31 -<==      Total: 1
2019-05-15 21:42:31 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE water_sum <0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 21:42:31 -==> Parameters: 2018-12(String), 3(String), 3(String)
2019-05-15 21:42:31 -<==      Total: 1
2019-05-15 21:42:31 -==>  Preparing: select COUNT(*) from water WHERE `create_time` LIKE CONCAT('%',?,'%') and water_type = ? and user_org = ? 
2019-05-15 21:42:31 -==> Parameters: 2019(String), 3(String), 3(String)
2019-05-15 21:42:31 -<==      Total: 1
2019-05-15 21:42:31 -==>  Preparing: select ifnull(SUM(water_cost),0) from water WHERE `create_time` LIKE CONCAT('%',?,'%') and water_type = ? and user_org = ? 
2019-05-15 21:42:31 -==> Parameters: 2019(String), 3(String), 3(String)
2019-05-15 21:42:31 -<==      Total: 1
2019-05-15 21:42:31 -==>  Preparing: select COUNT(*) from water_log WHERE `create_time` LIKE CONCAT('%',?,'%') and water_type = ? and user_org = ? 
2019-05-15 21:42:31 -==> Parameters: 2019(String), 3(String), 3(String)
2019-05-15 21:42:31 -<==      Total: 1
2019-05-15 21:42:31 -==>  Preparing: select ifnull(SUM(water_money),0) from water_log WHERE `create_time` LIKE CONCAT('%',?,'%') and water_type = ? and user_org = ? 
2019-05-15 21:42:31 -==> Parameters: 2019(String), 3(String), 3(String)
2019-05-15 21:42:31 -<==      Total: 1
2019-05-15 21:42:31 -==>  Preparing: select COUNT(*) from water WHERE `water_sum` >= 0 and create_time = (select MAX(create_time) from water where DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ?) and water_type = ? and user_org = ? 
2019-05-15 21:42:31 -==> Parameters: 2019(String), 3(String), 3(String)
2019-05-15 21:42:31 -<==      Total: 1
2019-05-15 21:42:31 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE `water_sum` >= 0 and create_time = (select MAX(create_time) from water where DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ?) and water_type = ? and user_org = ? 
2019-05-15 21:42:31 -==> Parameters: 2019(String), 3(String), 3(String)
2019-05-15 21:42:31 -<==      Total: 1
2019-05-15 21:42:31 -==>  Preparing: select COUNT(*) from water WHERE water_sum <0 and create_time = (select MAX(create_time) from water where DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ?) and water_type = ? and user_org = ? 
2019-05-15 21:42:31 -==> Parameters: 2019(String), 3(String), 3(String)
2019-05-15 21:42:31 -<==      Total: 1
2019-05-15 21:42:31 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE water_sum <0 and create_time = (select MAX(create_time) from water where DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ?) and water_type = ? and user_org = ? 
2019-05-15 21:42:31 -==> Parameters: 2019(String), 3(String), 3(String)
2019-05-15 21:42:31 -<==      Total: 1
2019-05-15 21:42:31 -==>  Preparing: select COUNT(*) from water WHERE `water_sum` >= 0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 21:42:31 -==> Parameters: 2018-12(String), 4(String), 3(String)
2019-05-15 21:42:31 -<==      Total: 1
2019-05-15 21:42:31 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE `water_sum` >= 0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 21:42:31 -==> Parameters: 2018-12(String), 4(String), 3(String)
2019-05-15 21:42:31 -<==      Total: 1
2019-05-15 21:42:31 -==>  Preparing: select COUNT(*) from water WHERE water_sum <0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 21:42:31 -==> Parameters: 2018-12(String), 4(String), 3(String)
2019-05-15 21:42:31 -<==      Total: 1
2019-05-15 21:42:31 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE water_sum <0 and `create_time` = ? and water_type = ? and user_org = ? 
2019-05-15 21:42:31 -==> Parameters: 2018-12(String), 4(String), 3(String)
2019-05-15 21:42:31 -<==      Total: 1
2019-05-15 21:42:31 -==>  Preparing: select COUNT(*) from water WHERE `create_time` LIKE CONCAT('%',?,'%') and water_type = ? and user_org = ? 
2019-05-15 21:42:31 -==> Parameters: 2019(String), 4(String), 3(String)
2019-05-15 21:42:31 -<==      Total: 1
2019-05-15 21:42:31 -==>  Preparing: select ifnull(SUM(water_cost),0) from water WHERE `create_time` LIKE CONCAT('%',?,'%') and water_type = ? and user_org = ? 
2019-05-15 21:42:31 -==> Parameters: 2019(String), 4(String), 3(String)
2019-05-15 21:42:31 -<==      Total: 1
2019-05-15 21:42:31 -==>  Preparing: select COUNT(*) from water_log WHERE `create_time` LIKE CONCAT('%',?,'%') and water_type = ? and user_org = ? 
2019-05-15 21:42:31 -==> Parameters: 2019(String), 4(String), 3(String)
2019-05-15 21:42:31 -<==      Total: 1
2019-05-15 21:42:31 -==>  Preparing: select ifnull(SUM(water_money),0) from water_log WHERE `create_time` LIKE CONCAT('%',?,'%') and water_type = ? and user_org = ? 
2019-05-15 21:42:31 -==> Parameters: 2019(String), 4(String), 3(String)
2019-05-15 21:42:31 -<==      Total: 1
2019-05-15 21:42:31 -==>  Preparing: select COUNT(*) from water WHERE `water_sum` >= 0 and create_time = (select MAX(create_time) from water where DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ?) and water_type = ? and user_org = ? 
2019-05-15 21:42:31 -==> Parameters: 2019(String), 4(String), 3(String)
2019-05-15 21:42:31 -<==      Total: 1
2019-05-15 21:42:31 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE `water_sum` >= 0 and create_time = (select MAX(create_time) from water where DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ?) and water_type = ? and user_org = ? 
2019-05-15 21:42:31 -==> Parameters: 2019(String), 4(String), 3(String)
2019-05-15 21:42:31 -<==      Total: 1
2019-05-15 21:42:31 -==>  Preparing: select COUNT(*) from water WHERE water_sum <0 and create_time = (select MAX(create_time) from water where DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ?) and water_type = ? and user_org = ? 
2019-05-15 21:42:31 -==> Parameters: 2019(String), 4(String), 3(String)
2019-05-15 21:42:31 -<==      Total: 1
2019-05-15 21:42:31 -==>  Preparing: select ifnull(SUM(water_sum),0) from water WHERE water_sum <0 and create_time = (select MAX(create_time) from water where DATE_FORMAT(CONCAT(create_time,'-01'),'%Y') = ?) and water_type = ? and user_org = ? 
2019-05-15 21:42:31 -==> Parameters: 2019(String), 4(String), 3(String)
2019-05-15 21:42:31 -<==      Total: 1
2019-05-15 21:42:31 -==>  Preparing: select m_water,s1_water,s2_water,s3_water,water_org from water_price 
2019-05-15 21:42:31 -==> Parameters: 
2019-05-15 21:42:31 -<==      Total: 2
2019-05-15 21:42:31 -耗时 : 110
2019-05-15 21:42:31 -返回值 : {S3TotalhuNew=0, S1WaterCostYYCount =0, S2PreWaterCountYYOld=0, S1OweWaterCountYYNew=0, S2PreWaterCountYYNew=0, S1OweWaterSumYYNew=0, type=3, S3PreWaterSumYYNew=0, TotalPreyuNew=0, MWaterLogYYSum=0, S1OweWaterCountYYOld=0, S1OweWaterSumYYOld=0, TotalCostyu=0, S3PreWaterSumYYOld=0, MPreWaterCountYYOld=0, S2WaterCostYYCount =0, S1WaterPrice=10, S1TotalyuOld=0, TotalPreyuOld=0, S2WaterLogYYCount=0, S3TotalhuOld=0, MPreWaterCountYYNew=0, TotalOwehuNew=0, MWaterCostYYCount =0, S2WaterLogYYSum=0, TotalCosthu=0, S1WaterLogYYCount=0, S3WaterLogYYSum=0, S2OweWaterSumYYOld=0, TotalLogyu=0, MPreWaterSumYYOld=0, S2TotalhuNew=0, MTotalyuOld=0, MPreWaterSumYYNew=0, MWaterPrice=5, S3PreWaterCountYYNew=0, MTotalhuNew=0, MTotalyuNew=0, TotalLoghu=0, S2WaterPrice=20, S3PreWaterCountYYOld=0, S2TotalhuOld=0, S2TotalyuOld=0, S2OweWaterSumYYNew=0, TotalOweyuOld=0, S3OweWaterCountYYOld=0, S2TotalyuNew=0, S3WaterLogYYCount=0, S1TotalhuNew=0, MTotalhuOld=0, S3WaterCostYYSum =0, S3OweWaterSumYYOld=0, S1TotalhuOld=0, S2PreWaterSumYYNew=0, TotalPrehuNew=0, MOweWaterSumYYNew=0, S3OweWaterSumYYNew=0, S2PreWaterSumYYOld=0, TotalOweyuNew=0, S3TotalyuOld=0, S3WaterPrice=30, MWaterLogYYCount=0, S3OweWaterCountYYNew=0, S3TotalyuNew=0, TotalPrehuOld=0, S3WaterCostYYCount =0, S1PreWaterCountYYNew=0, S1WaterLogYYSum=0, TotalOwehuOld=0, PriceTotal=65, S2OweWaterCountYYNew=0, S1PreWaterCountYYOld=0, S1WaterCostYYSum =0, MOweWaterSumYYOld=0, S1TotalyuNew=0, MOweWaterCountYYNew=0, MOweWaterCountYYOld=0, S1PreWaterSumYYNew=0, TotalAllhuNew=0, TotalAllyuNew=0, S2WaterCostYYSum =0, TotalAllhuOld=0, S2OweWaterCountYYOld=0, MWaterCostYYSum =0, S1PreWaterSumYYOld=0, TotalAllyuOld=0}
